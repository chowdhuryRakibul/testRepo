
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000279 	.word	0x08000279
 8000008:	0800027b 	.word	0x0800027b
 800000c:	0800027b 	.word	0x0800027b
 8000010:	0800027b 	.word	0x0800027b
 8000014:	0800027b 	.word	0x0800027b
 8000018:	0800027b 	.word	0x0800027b
 800001c:	0800027b 	.word	0x0800027b
 8000020:	0800027b 	.word	0x0800027b
 8000024:	0800027b 	.word	0x0800027b
 8000028:	0800027b 	.word	0x0800027b
 800002c:	08000b41 	.word	0x08000b41
 8000030:	0800027b 	.word	0x0800027b
 8000034:	0800027b 	.word	0x0800027b
 8000038:	0800027b 	.word	0x0800027b
 800003c:	0800027b 	.word	0x0800027b
 8000040:	0800027b 	.word	0x0800027b
 8000044:	0800027b 	.word	0x0800027b
 8000048:	0800027b 	.word	0x0800027b
 800004c:	0800027b 	.word	0x0800027b
 8000050:	0800027b 	.word	0x0800027b
 8000054:	0800027b 	.word	0x0800027b
 8000058:	0800027b 	.word	0x0800027b
 800005c:	0800027b 	.word	0x0800027b
 8000060:	0800027b 	.word	0x0800027b
 8000064:	0800027b 	.word	0x0800027b
 8000068:	0800027b 	.word	0x0800027b
 800006c:	08001fd1 	.word	0x08001fd1
 8000070:	08001fa1 	.word	0x08001fa1
 8000074:	08001f71 	.word	0x08001f71
 8000078:	08001f41 	.word	0x08001f41
 800007c:	08001f11 	.word	0x08001f11
 8000080:	08001ee1 	.word	0x08001ee1
 8000084:	08001eb1 	.word	0x08001eb1
 8000088:	0800027b 	.word	0x0800027b
 800008c:	0800027b 	.word	0x0800027b
 8000090:	0800027b 	.word	0x0800027b
 8000094:	0800027b 	.word	0x0800027b
 8000098:	0800027b 	.word	0x0800027b
 800009c:	0800027b 	.word	0x0800027b
 80000a0:	0800027b 	.word	0x0800027b
 80000a4:	0800027b 	.word	0x0800027b
 80000a8:	0800027b 	.word	0x0800027b
 80000ac:	0800027b 	.word	0x0800027b
 80000b0:	08001cc1 	.word	0x08001cc1
 80000b4:	0800027b 	.word	0x0800027b
 80000b8:	0800027b 	.word	0x0800027b
 80000bc:	0800027b 	.word	0x0800027b
 80000c0:	0800027b 	.word	0x0800027b
 80000c4:	0800027b 	.word	0x0800027b
 80000c8:	0800027b 	.word	0x0800027b
 80000cc:	0800027b 	.word	0x0800027b
 80000d0:	0800027b 	.word	0x0800027b
 80000d4:	0800027b 	.word	0x0800027b
 80000d8:	0800027b 	.word	0x0800027b
 80000dc:	0800027b 	.word	0x0800027b
 80000e0:	0800027b 	.word	0x0800027b
 80000e4:	0800027b 	.word	0x0800027b
 80000e8:	0800027b 	.word	0x0800027b
 80000ec:	0800027b 	.word	0x0800027b
 80000f0:	0800027b 	.word	0x0800027b
 80000f4:	0800027b 	.word	0x0800027b
 80000f8:	0800027b 	.word	0x0800027b
 80000fc:	0800027b 	.word	0x0800027b
 8000100:	0800027b 	.word	0x0800027b
 8000104:	0800027b 	.word	0x0800027b
 8000108:	0800027b 	.word	0x0800027b
 800010c:	0800027b 	.word	0x0800027b
 8000110:	0800027b 	.word	0x0800027b
 8000114:	0800027b 	.word	0x0800027b
 8000118:	0800027b 	.word	0x0800027b
 800011c:	0800027b 	.word	0x0800027b
 8000120:	08001e81 	.word	0x08001e81
 8000124:	08001e51 	.word	0x08001e51
 8000128:	08001e21 	.word	0x08001e21
 800012c:	08001df1 	.word	0x08001df1
 8000130:	08001dc1 	.word	0x08001dc1
 8000134:	0800027b 	.word	0x0800027b
 8000138:	0800027b 	.word	0x0800027b
 800013c:	0800027b 	.word	0x0800027b
 8000140:	0800027b 	.word	0x0800027b
 8000144:	0800027b 	.word	0x0800027b
 8000148:	0800027b 	.word	0x0800027b
 800014c:	0800027b 	.word	0x0800027b
 8000150:	0800027b 	.word	0x0800027b
 8000154:	0800027b 	.word	0x0800027b
 8000158:	0800027b 	.word	0x0800027b
 800015c:	0800027b 	.word	0x0800027b
 8000160:	0800027b 	.word	0x0800027b
 8000164:	0800027b 	.word	0x0800027b
 8000168:	0800027b 	.word	0x0800027b
 800016c:	0800027b 	.word	0x0800027b
 8000170:	0800027b 	.word	0x0800027b
 8000174:	0800027b 	.word	0x0800027b
 8000178:	0800027b 	.word	0x0800027b
 800017c:	0800027b 	.word	0x0800027b
 8000180:	0800027b 	.word	0x0800027b
 8000184:	0800027b 	.word	0x0800027b
 8000188:	0800027b 	.word	0x0800027b
 800018c:	0800027b 	.word	0x0800027b
 8000190:	0800027b 	.word	0x0800027b
 8000194:	0800027b 	.word	0x0800027b
 8000198:	0800027b 	.word	0x0800027b
 800019c:	0800027b 	.word	0x0800027b

Disassembly of section .text:

080001a0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001a0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001a2:	4827      	ldr	r0, [pc, #156]	; (8000240 <endfiniloop+0x4>)
                msr     MSP, r0
 80001a4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001a8:	4826      	ldr	r0, [pc, #152]	; (8000244 <endfiniloop+0x8>)
                msr     PSP, r0
 80001aa:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ae:	4826      	ldr	r0, [pc, #152]	; (8000248 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001b0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001b4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001b8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001ba:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001bc:	f380 8814 	msr	CONTROL, r0
                isb
 80001c0:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 80001c4:	f001 ff64 	bl	8002090 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 80001c8:	f001 fc82 	bl	8001ad0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 80001cc:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80001d0:	491e      	ldr	r1, [pc, #120]	; (800024c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 80001d2:	4a1b      	ldr	r2, [pc, #108]	; (8000240 <endfiniloop+0x4>)

080001d4 <msloop>:
msloop:
                cmp     r1, r2
 80001d4:	4291      	cmp	r1, r2
                itt     lo
 80001d6:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001d8:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 80001dc:	e7fa      	bcc.n	80001d4 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80001de:	491c      	ldr	r1, [pc, #112]	; (8000250 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001e0:	4a18      	ldr	r2, [pc, #96]	; (8000244 <endfiniloop+0x8>)

080001e2 <psloop>:
psloop:
                cmp     r1, r2
 80001e2:	4291      	cmp	r1, r2
                itt     lo
 80001e4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001e6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001ea:	e7fa      	bcc.n	80001e2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80001ec:	4919      	ldr	r1, [pc, #100]	; (8000254 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80001ee:	4a1a      	ldr	r2, [pc, #104]	; (8000258 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80001f0:	4b1a      	ldr	r3, [pc, #104]	; (800025c <endfiniloop+0x20>)

080001f2 <dloop>:
dloop:
                cmp     r2, r3
 80001f2:	429a      	cmp	r2, r3
                ittt    lo
 80001f4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001f6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001fa:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001fe:	e7f8      	bcc.n	80001f2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000200:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000202:	4917      	ldr	r1, [pc, #92]	; (8000260 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000204:	4a17      	ldr	r2, [pc, #92]	; (8000264 <endfiniloop+0x28>)

08000206 <bloop>:
bloop:
                cmp     r1, r2
 8000206:	4291      	cmp	r1, r2
                itt     lo
 8000208:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800020a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800020e:	e7fa      	bcc.n	8000206 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000210:	f001 fef6 	bl	8002000 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000214:	f001 ff34 	bl	8002080 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000218:	4c13      	ldr	r4, [pc, #76]	; (8000268 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800021a:	4d14      	ldr	r5, [pc, #80]	; (800026c <endfiniloop+0x30>)

0800021c <initloop>:
initloop:
                cmp     r4, r5
 800021c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800021e:	da03      	bge.n	8000228 <endinitloop>
                ldr     r1, [r4], #4
 8000220:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000224:	4788      	blx	r1
                b       initloop
 8000226:	e7f9      	b.n	800021c <initloop>

08000228 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000228:	f001 f9b2 	bl	8001590 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800022c:	4c10      	ldr	r4, [pc, #64]	; (8000270 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800022e:	4d11      	ldr	r5, [pc, #68]	; (8000274 <endfiniloop+0x38>)

08000230 <finiloop>:
finiloop:
                cmp     r4, r5
 8000230:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000232:	da03      	bge.n	800023c <endfiniloop>
                ldr     r1, [r4], #4
 8000234:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000238:	4788      	blx	r1
                b       finiloop
 800023a:	e7f9      	b.n	8000230 <finiloop>

0800023c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800023c:	f001 bf18 	b.w	8002070 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000240:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000244:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000248:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800024c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000250:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000254:	080024f0 	.word	0x080024f0
                ldr     r2, =__data_base__
 8000258:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800025c:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 8000260:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 8000264:	20001ba0 	.word	0x20001ba0
                ldr     r4, =__init_array_base__
 8000268:	080001a0 	.word	0x080001a0
                ldr     r5, =__init_array_end__
 800026c:	080001a0 	.word	0x080001a0
                ldr     r4, =__fini_array_base__
 8000270:	080001a0 	.word	0x080001a0
                ldr     r5, =__fini_array_end__
 8000274:	080001a0 	.word	0x080001a0

08000278 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000278:	e792      	b.n	80001a0 <_crt0_entry>

0800027a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800027a:	f000 f800 	bl	800027e <_unhandled_exception>

0800027e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800027e:	e7fe      	b.n	800027e <_unhandled_exception>

08000280 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000284:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000288:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800028a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000290 <_port_thread_start>:
_port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      _port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 8000290:	f000 fc96 	bl	8000bc0 <_dbg_check_unlock>
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000294:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000296:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 800029a:	4628      	mov	r0, r5
                blx     r4
 800029c:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800029e:	2000      	movs	r0, #0
                bl      chThdExit
 80002a0:	f001 fbe6 	bl	8001a70 <chThdExit>

080002a4 <_zombies>:
_zombies:       b       _zombies
 80002a4:	e7fe      	b.n	80002a4 <_zombies>

080002a6 <_port_switch_from_isr>:
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 80002a6:	f000 fcb3 	bl	8000c10 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 80002aa:	f000 fc59 	bl	8000b60 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002ae:	f000 fc87 	bl	8000bc0 <_dbg_check_unlock>

080002b2 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002b2:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002b4:	e7fe      	b.n	80002b4 <_port_exit_from_isr+0x2>
	...

080002c0 <_pal_lld_setgroupmode.constprop.0>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 80002c4:	2503      	movs	r5, #3

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80002c6:	4c23      	ldr	r4, [pc, #140]	; (8000354 <_pal_lld_setgroupmode.constprop.0+0x94>)
      m2 = 3 << (bit * 2);
 80002c8:	46ab      	mov	fp, r5
  uint32_t bit     = 0;
 80002ca:	2200      	movs	r2, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80002cc:	2602      	movs	r6, #2
      altrmask = altr << ((bit & 7) * 4);
 80002ce:	f04f 0a05 	mov.w	sl, #5
      m4 = 15 << ((bit & 7) * 4);
 80002d2:	f04f 090f 	mov.w	r9, #15
 80002d6:	e010      	b.n	80002fa <_pal_lld_setgroupmode.constprop.0+0x3a>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80002d8:	6a21      	ldr	r1, [r4, #32]
 80002da:	ea21 0303 	bic.w	r3, r1, r3
 80002de:	ea43 030c 	orr.w	r3, r3, ip
 80002e2:	6223      	str	r3, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 80002e4:	6823      	ldr	r3, [r4, #0]
 80002e6:	ea0e 0e03 	and.w	lr, lr, r3
 80002ea:	ea4e 0306 	orr.w	r3, lr, r6
 80002ee:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80002f0:	0840      	lsrs	r0, r0, #1
 80002f2:	d02c      	beq.n	800034e <_pal_lld_setgroupmode.constprop.0+0x8e>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
 80002f4:	00ad      	lsls	r5, r5, #2
    pupdr <<= 2;
    moder <<= 2;
 80002f6:	00b6      	lsls	r6, r6, #2
    bit++;
 80002f8:	3201      	adds	r2, #1
      m1 = 1 << bit;
 80002fa:	2301      	movs	r3, #1
      m2 = 3 << (bit * 2);
 80002fc:	fa02 f103 	lsl.w	r1, r2, r3
      m1 = 1 << bit;
 8000300:	fa03 f702 	lsl.w	r7, r3, r2
      altrmask = altr << ((bit & 7) * 4);
 8000304:	f002 0307 	and.w	r3, r2, #7
 8000308:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
 800030a:	fa0b f101 	lsl.w	r1, fp, r1
    if ((mask & 1) != 0) {
 800030e:	f010 0f01 	tst.w	r0, #1
      altrmask = altr << ((bit & 7) * 4);
 8000312:	fa0a fc03 	lsl.w	ip, sl, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000316:	ea6f 0e01 	mvn.w	lr, r1
      m4 = 15 << ((bit & 7) * 4);
 800031a:	fa09 f303 	lsl.w	r3, r9, r3
    if ((mask & 1) != 0) {
 800031e:	d0e7      	beq.n	80002f0 <_pal_lld_setgroupmode.constprop.0+0x30>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000320:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8000324:	ea28 0707 	bic.w	r7, r8, r7
 8000328:	6067      	str	r7, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800032a:	68a7      	ldr	r7, [r4, #8]
 800032c:	ea27 0701 	bic.w	r7, r7, r1
 8000330:	432f      	orrs	r7, r5
 8000332:	60a7      	str	r7, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000334:	68e7      	ldr	r7, [r4, #12]
        if (bit < 8)
 8000336:	2a07      	cmp	r2, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000338:	ea27 0101 	bic.w	r1, r7, r1
 800033c:	60e1      	str	r1, [r4, #12]
        if (bit < 8)
 800033e:	d9cb      	bls.n	80002d8 <_pal_lld_setgroupmode.constprop.0+0x18>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000340:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000342:	ea21 0303 	bic.w	r3, r1, r3
 8000346:	ea43 030c 	orr.w	r3, r3, ip
 800034a:	6263      	str	r3, [r4, #36]	; 0x24
 800034c:	e7ca      	b.n	80002e4 <_pal_lld_setgroupmode.constprop.0+0x24>
  }
}
 800034e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000352:	bf00      	nop
 8000354:	48000400 	.word	0x48000400
	...

08000360 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000360:	2320      	movs	r3, #32
 8000362:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <_port_irq_epilogue+0x3c>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800036e:	d102      	bne.n	8000376 <_port_irq_epilogue+0x16>
 8000370:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000374:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000376:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 800037a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800037c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000380:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000382:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000386:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <_port_irq_epilogue+0x40>)
 8000388:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800038a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800038c:	6889      	ldr	r1, [r1, #8]
 800038e:	6892      	ldr	r2, [r2, #8]
 8000390:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000392:	bf8c      	ite	hi
 8000394:	4a03      	ldrhi	r2, [pc, #12]	; (80003a4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000396:	4a04      	ldrls	r2, [pc, #16]	; (80003a8 <_port_irq_epilogue+0x48>)
 8000398:	619a      	str	r2, [r3, #24]
 800039a:	4770      	bx	lr
 800039c:	e000ed00 	.word	0xe000ed00
 80003a0:	200009d8 	.word	0x200009d8
 80003a4:	080002a7 	.word	0x080002a7
 80003a8:	080002b2 	.word	0x080002b2
 80003ac:	00000000 	.word	0x00000000

080003b0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80003b0:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <chTMStopMeasurementX+0x40>)
 80003b4:	6852      	ldr	r2, [r2, #4]
 80003b6:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
  tmp->last = (now - tmp->last) - offset;
 80003ba:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80003bc:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 80003be:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 80003c0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 80003c4:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 80003c6:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 80003c8:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 80003ca:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 80003cc:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 80003ce:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 80003d0:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 80003d2:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80003d4:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80003d8:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 80003da:	bf88      	it	hi
 80003dc:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 80003de:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80003e0:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 80003e4:	bf38      	it	cc
 80003e6:	6003      	strcc	r3, [r0, #0]
}
 80003e8:	bc30      	pop	{r4, r5}
 80003ea:	4770      	bx	lr
 80003ec:	e0001000 	.word	0xe0001000
 80003f0:	200009d8 	.word	0x200009d8
	...

08000400 <chTMStartMeasurementX>:
 8000400:	4b01      	ldr	r3, [pc, #4]	; (8000408 <chTMStartMeasurementX+0x8>)
 8000402:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8000404:	6083      	str	r3, [r0, #8]
}
 8000406:	4770      	bx	lr
 8000408:	e0001000 	.word	0xe0001000
 800040c:	00000000 	.word	0x00000000

08000410 <trace_next>:
/**
 * @brief   Writes a time stamp and increases the trace buffer pointer.
 *
 * @notapi
 */
NOINLINE static void trace_next(void) {
 8000410:	b410      	push	{r4}

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000412:	4a0b      	ldr	r2, [pc, #44]	; (8000440 <trace_next+0x30>)
 8000414:	480b      	ldr	r0, [pc, #44]	; (8000444 <trace_next+0x34>)
 8000416:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000418:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 800041c:	6819      	ldr	r1, [r3, #0]
 800041e:	6a64      	ldr	r4, [r4, #36]	; 0x24
  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000420:	605c      	str	r4, [r3, #4]
 8000422:	6840      	ldr	r0, [r0, #4]
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8000424:	f360 211f 	bfi	r1, r0, #8, #24
 8000428:	f843 1b10 	str.w	r1, [r3], #16
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 800042c:	f502 6104 	add.w	r1, r2, #2112	; 0x840
 8000430:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 8000432:	bf28      	it	cs
 8000434:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
  }
}
 8000438:	bc10      	pop	{r4}
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 800043a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	200009d8 	.word	0x200009d8
 8000444:	e0001000 	.word	0xe0001000
	...

08000450 <_trace_switch.part.0>:
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8000450:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000454:	4905      	ldr	r1, [pc, #20]	; (800046c <_trace_switch.part.0+0x1c>)
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8000456:	6a40      	ldr	r0, [r0, #36]	; 0x24
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8000458:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800045a:	00db      	lsls	r3, r3, #3
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 8000462:	698b      	ldr	r3, [r1, #24]
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8000464:	e9c2 3002 	strd	r3, r0, [r2, #8]
    trace_next();
 8000468:	f7ff bfd2 	b.w	8000410 <trace_next>
 800046c:	200009d8 	.word	0x200009d8

08000470 <_trace_isr_leave>:
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8000470:	4a09      	ldr	r2, [pc, #36]	; (8000498 <_trace_isr_leave+0x28>)
 8000472:	8f13      	ldrh	r3, [r2, #56]	; 0x38
void _trace_isr_leave(const char *isr) {
 8000474:	b510      	push	{r4, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8000476:	f013 0402 	ands.w	r4, r3, #2
 800047a:	d000      	beq.n	800047e <_trace_isr_leave+0xe>
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
    trace_next();
    port_unlock_from_isr();
  }
}
 800047c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800047e:	2320      	movs	r3, #32
 8000480:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8000484:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000486:	2203      	movs	r2, #3
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8000488:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 800048a:	701a      	strb	r2, [r3, #0]
    trace_next();
 800048c:	f7ff ffc0 	bl	8000410 <trace_next>
 8000490:	f384 8811 	msr	BASEPRI, r4
}
 8000494:	bd10      	pop	{r4, pc}
 8000496:	bf00      	nop
 8000498:	200009d8 	.word	0x200009d8
 800049c:	00000000 	.word	0x00000000

080004a0 <_trace_isr_enter>:
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80004a0:	4a09      	ldr	r2, [pc, #36]	; (80004c8 <_trace_isr_enter+0x28>)
 80004a2:	8f13      	ldrh	r3, [r2, #56]	; 0x38
void _trace_isr_enter(const char *isr) {
 80004a4:	b510      	push	{r4, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80004a6:	f013 0402 	ands.w	r4, r3, #2
 80004aa:	d000      	beq.n	80004ae <_trace_isr_enter+0xe>
}
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2320      	movs	r3, #32
 80004b0:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 80004b4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80004b6:	2202      	movs	r2, #2
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 80004b8:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 80004ba:	701a      	strb	r2, [r3, #0]
    trace_next();
 80004bc:	f7ff ffa8 	bl	8000410 <trace_next>
 80004c0:	f384 8811 	msr	BASEPRI, r4
}
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	bf00      	nop
 80004c8:	200009d8 	.word	0x200009d8
 80004cc:	00000000 	.word	0x00000000

080004d0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 80004d0:	b508      	push	{r3, lr}
 80004d2:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
 *
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
 80004d6:	4d06      	ldr	r5, [pc, #24]	; (80004f0 <chSysHalt+0x20>)
 80004d8:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80004da:	075b      	lsls	r3, r3, #29
 80004dc:	d501      	bpl.n	80004e2 <chSysHalt+0x12>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80004de:	62ec      	str	r4, [r5, #44]	; 0x2c

  /* Halt hook code, usually empty.*/
  CH_CFG_SYSTEM_HALT_HOOK(reason);

  /* Harmless infinite loop.*/
  while (true) {
 80004e0:	e7fe      	b.n	80004e0 <chSysHalt+0x10>
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 80004e2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80004e4:	2204      	movs	r2, #4
    ch.dbg.trace_buffer.ptr->state         = 0;
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
 80004e6:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 80004e8:	701a      	strb	r2, [r3, #0]
    trace_next();
 80004ea:	f7ff ff91 	bl	8000410 <trace_next>
 80004ee:	e7f6      	b.n	80004de <chSysHalt+0xe>
 80004f0:	200009d8 	.word	0x200009d8
	...

08000500 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000500:	070a      	lsls	r2, r1, #28
 8000502:	d400      	bmi.n	8000506 <spi_lld_serve_tx_interrupt+0x6>
 8000504:	4770      	bx	lr
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 8000506:	b508      	push	{r3, lr}
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8000508:	4801      	ldr	r0, [pc, #4]	; (8000510 <spi_lld_serve_tx_interrupt+0x10>)
 800050a:	f7ff ffe1 	bl	80004d0 <chSysHalt>
 800050e:	bf00      	nop
 8000510:	08002094 	.word	0x08002094
	...

08000520 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8000520:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <chDbgCheckClassS+0x18>)
 8000524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000526:	b91a      	cbnz	r2, 8000530 <chDbgCheckClassS+0x10>
 8000528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800052a:	2b00      	cmp	r3, #0
 800052c:	dd00      	ble.n	8000530 <chDbgCheckClassS+0x10>
    chSysHalt("SV#11");
  }
}
 800052e:	bd08      	pop	{r3, pc}
    chSysHalt("SV#11");
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <chDbgCheckClassS+0x1c>)
 8000532:	f7ff ffcd 	bl	80004d0 <chSysHalt>
 8000536:	bf00      	nop
 8000538:	200009d8 	.word	0x200009d8
 800053c:	080020a0 	.word	0x080020a0

08000540 <chDbgCheckClassI>:
void chDbgCheckClassI(void) {
 8000540:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <chDbgCheckClassI+0x18>)
 8000544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000546:	2a00      	cmp	r2, #0
 8000548:	db03      	blt.n	8000552 <chDbgCheckClassI+0x12>
 800054a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054c:	2b00      	cmp	r3, #0
 800054e:	dd00      	ble.n	8000552 <chDbgCheckClassI+0x12>
}
 8000550:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8000552:	4802      	ldr	r0, [pc, #8]	; (800055c <chDbgCheckClassI+0x1c>)
 8000554:	f7ff ffbc 	bl	80004d0 <chSysHalt>
 8000558:	200009d8 	.word	0x200009d8
 800055c:	080020a8 	.word	0x080020a8

08000560 <dmaStreamAllocI.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000564:	4604      	mov	r4, r0
 8000566:	460d      	mov	r5, r1
                                          uint32_t priority,
                                          stm32_dmaisr_t func,
                                          void *param) {
  uint32_t i, startid, endid;

  osalDbgCheckClassI();
 8000568:	f7ff ffea 	bl	8000540 <chDbgCheckClassI>
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 800056c:	492b      	ldr	r1, [pc, #172]	; (800061c <dmaStreamAllocI.constprop.0+0xbc>)
    uint32_t mask = (1U << i);
 800056e:	2201      	movs	r2, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8000570:	680b      	ldr	r3, [r1, #0]
    uint32_t mask = (1U << i);
 8000572:	40a2      	lsls	r2, r4
    if ((dma.allocated_mask & mask) == 0U) {
 8000574:	421a      	tst	r2, r3

      return dmastp;
    }
  }

  return NULL;
 8000576:	bf18      	it	ne
 8000578:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 800057a:	d001      	beq.n	8000580 <dmaStreamAllocI.constprop.0+0x20>
}
 800057c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      dma.streams[i].func  = func;
 8000580:	1c60      	adds	r0, r4, #1
      dma.allocated_mask  |= mask;
 8000582:	4313      	orrs	r3, r2
      dma.streams[i].param = param;
 8000584:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
      dma.allocated_mask  |= mask;
 8000588:	600b      	str	r3, [r1, #0]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800058a:	4b25      	ldr	r3, [pc, #148]	; (8000620 <dmaStreamAllocI.constprop.0+0xc0>)
      dma.streams[i].func  = func;
 800058c:	f841 5030 	str.w	r5, [r1, r0, lsl #3]
      dma.streams[i].param = param;
 8000590:	4824      	ldr	r0, [pc, #144]	; (8000624 <dmaStreamAllocI.constprop.0+0xc4>)
 8000592:	6070      	str	r0, [r6, #4]
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8000594:	0655      	lsls	r5, r2, #25
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8000596:	eb03 1004 	add.w	r0, r3, r4, lsl #4
 800059a:	ea4f 1404 	mov.w	r4, r4, lsl #4
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 800059e:	d005      	beq.n	80005ac <dmaStreamAllocI.constprop.0+0x4c>
        rccEnableDMA1(true);
 80005a0:	4d21      	ldr	r5, [pc, #132]	; (8000628 <dmaStreamAllocI.constprop.0+0xc8>)
 80005a2:	696e      	ldr	r6, [r5, #20]
 80005a4:	f046 0601 	orr.w	r6, r6, #1
 80005a8:	616e      	str	r6, [r5, #20]
 80005aa:	696d      	ldr	r5, [r5, #20]
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
 80005ac:	f412 6f78 	tst.w	r2, #3968	; 0xf80
 80005b0:	d005      	beq.n	80005be <dmaStreamAllocI.constprop.0+0x5e>
        rccEnableDMA2(true);
 80005b2:	4d1d      	ldr	r5, [pc, #116]	; (8000628 <dmaStreamAllocI.constprop.0+0xc8>)
 80005b4:	696e      	ldr	r6, [r5, #20]
 80005b6:	f046 0602 	orr.w	r6, r6, #2
 80005ba:	616e      	str	r6, [r5, #20]
 80005bc:	696d      	ldr	r5, [r5, #20]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 80005be:	684d      	ldr	r5, [r1, #4]
 80005c0:	191e      	adds	r6, r3, r4
 80005c2:	68b7      	ldr	r7, [r6, #8]
 80005c4:	423d      	tst	r5, r7
 80005c6:	d00f      	beq.n	80005e8 <dmaStreamAllocI.constprop.0+0x88>
      dmaStreamDisable(dmastp);
 80005c8:	191e      	adds	r6, r3, r4
 80005ca:	591f      	ldr	r7, [r3, r4]
 80005cc:	6873      	ldr	r3, [r6, #4]
 80005ce:	7b76      	ldrb	r6, [r6, #13]
 80005d0:	681c      	ldr	r4, [r3, #0]
        dma.isr_mask |= mask;
 80005d2:	432a      	orrs	r2, r5
 80005d4:	604a      	str	r2, [r1, #4]
      dmaStreamDisable(dmastp);
 80005d6:	220e      	movs	r2, #14
 80005d8:	f024 040f 	bic.w	r4, r4, #15
 80005dc:	40b2      	lsls	r2, r6
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80005de:	2100      	movs	r1, #0
      dmaStreamDisable(dmastp);
 80005e0:	601c      	str	r4, [r3, #0]
 80005e2:	607a      	str	r2, [r7, #4]
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80005e4:	6019      	str	r1, [r3, #0]
 80005e6:	e7c9      	b.n	800057c <dmaStreamAllocI.constprop.0+0x1c>
          nvicEnableVector(dmastp->vector, priority);
 80005e8:	7bf7      	ldrb	r7, [r6, #15]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80005ea:	097e      	lsrs	r6, r7, #5
 80005ec:	00b6      	lsls	r6, r6, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80005ee:	f107 4e60 	add.w	lr, r7, #3758096384	; 0xe0000000
 80005f2:	f106 4660 	add.w	r6, r6, #3758096384	; 0xe0000000
 80005f6:	f506 4661 	add.w	r6, r6, #57600	; 0xe100
 80005fa:	f50e 4e61 	add.w	lr, lr, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80005fe:	f007 071f 	and.w	r7, r7, #31
 8000602:	f04f 0c01 	mov.w	ip, #1
 8000606:	fa0c f707 	lsl.w	r7, ip, r7
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800060a:	f04f 08a0 	mov.w	r8, #160	; 0xa0
 800060e:	f88e 8300 	strb.w	r8, [lr, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000612:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000616:	6037      	str	r7, [r6, #0]
 8000618:	e7d6      	b.n	80005c8 <dmaStreamAllocI.constprop.0+0x68>
 800061a:	bf00      	nop
 800061c:	200013a4 	.word	0x200013a4
 8000620:	08002370 	.word	0x08002370
 8000624:	20000830 	.word	0x20000830
 8000628:	40021000 	.word	0x40021000
 800062c:	00000000 	.word	0x00000000

08000630 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 8000630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000632:	460d      	mov	r5, r1
 8000634:	4604      	mov	r4, r0
 8000636:	4616      	mov	r6, r2
  uint8_t *p, *prev;

  chDbgCheckClassI();
 8000638:	f7ff ff82 	bl	8000540 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800063c:	b185      	cbz	r5, 8000660 <chCoreAllocFromTopI+0x30>
 800063e:	1e6b      	subs	r3, r5, #1
 8000640:	ea13 0705 	ands.w	r7, r3, r5
 8000644:	d10c      	bne.n	8000660 <chCoreAllocFromTopI+0x30>

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000646:	4909      	ldr	r1, [pc, #36]	; (800066c <chCoreAllocFromTopI+0x3c>)
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000648:	e9d1 2300 	ldrd	r2, r3, [r1]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 800064c:	426d      	negs	r5, r5
 800064e:	1b18      	subs	r0, r3, r4
 8000650:	4028      	ands	r0, r5
  prev = p - offset;
 8000652:	1b86      	subs	r6, r0, r6
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000654:	42b2      	cmp	r2, r6
 8000656:	d806      	bhi.n	8000666 <chCoreAllocFromTopI+0x36>
 8000658:	42b3      	cmp	r3, r6
 800065a:	d304      	bcc.n	8000666 <chCoreAllocFromTopI+0x36>
    return NULL;
  }

  ch_memcore.topmem = prev;
 800065c:	604e      	str	r6, [r1, #4]

  return p;
}
 800065e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <chCoreAllocFromTopI+0x40>)
 8000662:	f7ff ff35 	bl	80004d0 <chSysHalt>
    return NULL;
 8000666:	4638      	mov	r0, r7
}
 8000668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800066a:	bf00      	nop
 800066c:	20001380 	.word	0x20001380
 8000670:	080021bc 	.word	0x080021bc
	...

08000680 <chCoreAllocAlignedI>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8000680:	2200      	movs	r2, #0
 8000682:	f7ff bfd5 	b.w	8000630 <chCoreAllocFromTopI>
 8000686:	bf00      	nop
	...

08000690 <chSchReadyAheadI>:
thread_t *chSchReadyAheadI(thread_t *tp) {
 8000690:	b510      	push	{r4, lr}
 8000692:	4604      	mov	r4, r0
  chDbgCheckClassI();
 8000694:	f7ff ff54 	bl	8000540 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000698:	b1a4      	cbz	r4, 80006c4 <chSchReadyAheadI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 800069a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800069e:	b18b      	cbz	r3, 80006c4 <chSchReadyAheadI+0x34>
 80006a0:	2b0f      	cmp	r3, #15
 80006a2:	d00f      	beq.n	80006c4 <chSchReadyAheadI+0x34>
  tp->state = CH_STATE_READY;
 80006a4:	2200      	movs	r2, #0
  } while (cp->prio > tp->prio);
 80006a6:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <chSchReadyAheadI+0x3c>)
  tp->state = CH_STATE_READY;
 80006aa:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 80006ae:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	428a      	cmp	r2, r1
 80006b4:	d8fb      	bhi.n	80006ae <chSchReadyAheadI+0x1e>
  tp->queue.prev             = cp->queue.prev;
 80006b6:	685a      	ldr	r2, [r3, #4]
}
 80006b8:	4620      	mov	r0, r4
  tp->queue.prev             = cp->queue.prev;
 80006ba:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80006be:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80006c0:	605c      	str	r4, [r3, #4]
}
 80006c2:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <chSchReadyAheadI+0x40>)
 80006c6:	f7ff ff03 	bl	80004d0 <chSysHalt>
 80006ca:	bf00      	nop
 80006cc:	200009d8 	.word	0x200009d8
 80006d0:	080021a8 	.word	0x080021a8
	...

080006e0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 80006e0:	b510      	push	{r4, lr}
 80006e2:	4604      	mov	r4, r0
  chDbgCheckClassI();
 80006e4:	f7ff ff2c 	bl	8000540 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 80006e8:	b1a4      	cbz	r4, 8000714 <chSchReadyI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 80006ea:	f894 3020 	ldrb.w	r3, [r4, #32]
 80006ee:	b18b      	cbz	r3, 8000714 <chSchReadyI+0x34>
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	d00f      	beq.n	8000714 <chSchReadyI+0x34>
  tp->state = CH_STATE_READY;
 80006f4:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 80006f6:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <chSchReadyI+0x3c>)
  tp->state = CH_STATE_READY;
 80006fa:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 80006fe:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000700:	689a      	ldr	r2, [r3, #8]
 8000702:	428a      	cmp	r2, r1
 8000704:	d2fb      	bcs.n	80006fe <chSchReadyI+0x1e>
  tp->queue.prev             = cp->queue.prev;
 8000706:	685a      	ldr	r2, [r3, #4]
}
 8000708:	4620      	mov	r0, r4
  tp->queue.prev             = cp->queue.prev;
 800070a:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 800070e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000710:	605c      	str	r4, [r3, #4]
}
 8000712:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <chSchReadyI+0x40>)
 8000716:	f7ff fedb 	bl	80004d0 <chSysHalt>
 800071a:	bf00      	nop
 800071c:	200009d8 	.word	0x200009d8
 8000720:	08002184 	.word	0x08002184
	...

08000730 <_dbg_check_leave_isr>:
void _dbg_check_leave_isr(void) {
 8000730:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000732:	2320      	movs	r3, #32
 8000734:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000738:	4a06      	ldr	r2, [pc, #24]	; (8000754 <_dbg_check_leave_isr+0x24>)
 800073a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800073c:	2b00      	cmp	r3, #0
 800073e:	dd01      	ble.n	8000744 <_dbg_check_leave_isr+0x14>
 8000740:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000742:	b111      	cbz	r1, 800074a <_dbg_check_leave_isr+0x1a>
    chSysHalt("SV#9");
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <_dbg_check_leave_isr+0x28>)
 8000746:	f7ff fec3 	bl	80004d0 <chSysHalt>
  ch.dbg.isr_cnt--;
 800074a:	3b01      	subs	r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	f381 8811 	msr	BASEPRI, r1
}
 8000752:	bd08      	pop	{r3, pc}
 8000754:	200009d8 	.word	0x200009d8
 8000758:	080020b0 	.word	0x080020b0
 800075c:	00000000 	.word	0x00000000

08000760 <_dbg_check_enter_isr>:
void _dbg_check_enter_isr(void) {
 8000760:	b508      	push	{r3, lr}
 8000762:	2320      	movs	r3, #32
 8000764:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000768:	4a06      	ldr	r2, [pc, #24]	; (8000784 <_dbg_check_enter_isr+0x24>)
 800076a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800076c:	2b00      	cmp	r3, #0
 800076e:	db01      	blt.n	8000774 <_dbg_check_enter_isr+0x14>
 8000770:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000772:	b111      	cbz	r1, 800077a <_dbg_check_enter_isr+0x1a>
    chSysHalt("SV#8");
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <_dbg_check_enter_isr+0x28>)
 8000776:	f7ff feab 	bl	80004d0 <chSysHalt>
  ch.dbg.isr_cnt++;
 800077a:	3301      	adds	r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	f381 8811 	msr	BASEPRI, r1
}
 8000782:	bd08      	pop	{r3, pc}
 8000784:	200009d8 	.word	0x200009d8
 8000788:	080020b8 	.word	0x080020b8
 800078c:	00000000 	.word	0x00000000

08000790 <_dbg_check_unlock_from_isr>:
void _dbg_check_unlock_from_isr(void) {
 8000790:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <_dbg_check_unlock_from_isr+0x1c>)
 8000794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000796:	2a00      	cmp	r2, #0
 8000798:	dd05      	ble.n	80007a6 <_dbg_check_unlock_from_isr+0x16>
 800079a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800079c:	2a00      	cmp	r2, #0
 800079e:	dd02      	ble.n	80007a6 <_dbg_check_unlock_from_isr+0x16>
  _dbg_leave_lock();
 80007a0:	2200      	movs	r2, #0
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007a4:	bd08      	pop	{r3, pc}
    chSysHalt("SV#7");
 80007a6:	4802      	ldr	r0, [pc, #8]	; (80007b0 <_dbg_check_unlock_from_isr+0x20>)
 80007a8:	f7ff fe92 	bl	80004d0 <chSysHalt>
 80007ac:	200009d8 	.word	0x200009d8
 80007b0:	080020c0 	.word	0x080020c0
	...

080007c0 <_dbg_check_lock_from_isr>:
void _dbg_check_lock_from_isr(void) {
 80007c0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <_dbg_check_lock_from_isr+0x1c>)
 80007c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	dd01      	ble.n	80007ce <_dbg_check_lock_from_isr+0xe>
 80007ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007cc:	b112      	cbz	r2, 80007d4 <_dbg_check_lock_from_isr+0x14>
    chSysHalt("SV#6");
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <_dbg_check_lock_from_isr+0x20>)
 80007d0:	f7ff fe7e 	bl	80004d0 <chSysHalt>
  _dbg_enter_lock();
 80007d4:	2201      	movs	r2, #1
 80007d6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007d8:	bd08      	pop	{r3, pc}
 80007da:	bf00      	nop
 80007dc:	200009d8 	.word	0x200009d8
 80007e0:	080020c8 	.word	0x080020c8
	...

080007f0 <wakeup>:
static void wakeup(void *p) {
 80007f0:	b538      	push	{r3, r4, r5, lr}
 80007f2:	4604      	mov	r4, r0
 80007f4:	2320      	movs	r3, #32
 80007f6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80007fa:	f7ff ffe1 	bl	80007c0 <_dbg_check_lock_from_isr>
  switch (tp->state) {
 80007fe:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000802:	2b07      	cmp	r3, #7
 8000804:	d80f      	bhi.n	8000826 <wakeup+0x36>
 8000806:	e8df f003 	tbb	[pc, r3]
 800080a:	0e14      	.short	0x0e14
 800080c:	040a1a0e 	.word	0x040a1a0e
 8000810:	0a0e      	.short	0x0a0e
    chSemFastSignalI(tp->u.wtsemp);
 8000812:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8000814:	f7ff fe94 	bl	8000540 <chDbgCheckClassI>

  sp->cnt++;
 8000818:	68ab      	ldr	r3, [r5, #8]
 800081a:	3301      	adds	r3, #1
 800081c:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800081e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8000822:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000824:	605a      	str	r2, [r3, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 8000826:	f04f 33ff 	mov.w	r3, #4294967295
 800082a:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 800082c:	4620      	mov	r0, r4
 800082e:	f7ff ff57 	bl	80006e0 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000832:	f7ff ffad 	bl	8000790 <_dbg_check_unlock_from_isr>
 8000836:	2300      	movs	r3, #0
 8000838:	f383 8811 	msr	BASEPRI, r3
}
 800083c:	bd38      	pop	{r3, r4, r5, pc}
    *tp->u.wttrp = NULL;
 800083e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
    break;
 8000844:	e7ef      	b.n	8000826 <wakeup+0x36>
 8000846:	bf00      	nop
	...

08000850 <_idle_thread>:
}
 8000850:	e7fe      	b.n	8000850 <_idle_thread>
 8000852:	bf00      	nop
	...

08000860 <spi_lld_serve_rx_interrupt>:
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8000860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000862:	070c      	lsls	r4, r1, #28
 8000864:	d450      	bmi.n	8000908 <spi_lld_serve_rx_interrupt+0xa8>
  if (spip->config->circular) {
 8000866:	6843      	ldr	r3, [r0, #4]
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	4604      	mov	r4, r0
 800086c:	2a00      	cmp	r2, #0
 800086e:	d134      	bne.n	80008da <spi_lld_serve_rx_interrupt+0x7a>
    dmaStreamDisable(spip->dmarx);
 8000870:	e9d0 2108 	ldrd	r2, r1, [r0, #32]
    dmaStreamDisable(spip->dmatx);
 8000874:	684e      	ldr	r6, [r1, #4]
    _spi_isr_code(spip);
 8000876:	685d      	ldr	r5, [r3, #4]
    dmaStreamDisable(spip->dmatx);
 8000878:	6833      	ldr	r3, [r6, #0]
 800087a:	680f      	ldr	r7, [r1, #0]
 800087c:	f023 030f 	bic.w	r3, r3, #15
 8000880:	6033      	str	r3, [r6, #0]
 8000882:	7b49      	ldrb	r1, [r1, #13]
    dmaStreamDisable(spip->dmarx);
 8000884:	6856      	ldr	r6, [r2, #4]
    dmaStreamDisable(spip->dmatx);
 8000886:	230e      	movs	r3, #14
 8000888:	fa03 f101 	lsl.w	r1, r3, r1
 800088c:	6079      	str	r1, [r7, #4]
    dmaStreamDisable(spip->dmarx);
 800088e:	6831      	ldr	r1, [r6, #0]
 8000890:	6817      	ldr	r7, [r2, #0]
 8000892:	f021 010f 	bic.w	r1, r1, #15
 8000896:	6031      	str	r1, [r6, #0]
 8000898:	7b52      	ldrb	r2, [r2, #13]
 800089a:	4093      	lsls	r3, r2
 800089c:	607b      	str	r3, [r7, #4]
    _spi_isr_code(spip);
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d038      	beq.n	8000914 <spi_lld_serve_rx_interrupt+0xb4>
 80008a2:	2304      	movs	r3, #4
 80008a4:	7003      	strb	r3, [r0, #0]
 80008a6:	47a8      	blx	r5
 80008a8:	7823      	ldrb	r3, [r4, #0]
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	d032      	beq.n	8000914 <spi_lld_serve_rx_interrupt+0xb4>
 80008ae:	2320      	movs	r3, #32
 80008b0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80008b4:	f7ff ff84 	bl	80007c0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80008b8:	68a0      	ldr	r0, [r4, #8]
 80008ba:	b140      	cbz	r0, 80008ce <spi_lld_serve_rx_interrupt+0x6e>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 80008bc:	f890 3020 	ldrb.w	r3, [r0, #32]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d124      	bne.n	800090e <spi_lld_serve_rx_interrupt+0xae>

    *trp = NULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60a3      	str	r3, [r4, #8]
    tp->u.rdymsg = msg;
 80008c8:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80008ca:	f7ff ff09 	bl	80006e0 <chSchReadyI>
  _dbg_check_unlock_from_isr();
 80008ce:	f7ff ff5f 	bl	8000790 <_dbg_check_unlock_from_isr>
 80008d2:	2300      	movs	r3, #0
 80008d4:	f383 8811 	msr	BASEPRI, r3
}
 80008d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 80008da:	074a      	lsls	r2, r1, #29
 80008dc:	460d      	mov	r5, r1
 80008de:	d503      	bpl.n	80008e8 <spi_lld_serve_rx_interrupt+0x88>
      _spi_isr_half_code(spip);
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0f8      	beq.n	80008d8 <spi_lld_serve_rx_interrupt+0x78>
 80008e6:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 80008e8:	07ab      	lsls	r3, r5, #30
 80008ea:	d5f5      	bpl.n	80008d8 <spi_lld_serve_rx_interrupt+0x78>
      _spi_isr_full_code(spip);
 80008ec:	6863      	ldr	r3, [r4, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d0f1      	beq.n	80008d8 <spi_lld_serve_rx_interrupt+0x78>
 80008f4:	2204      	movs	r2, #4
 80008f6:	7022      	strb	r2, [r4, #0]
 80008f8:	4620      	mov	r0, r4
 80008fa:	4798      	blx	r3
 80008fc:	7823      	ldrb	r3, [r4, #0]
 80008fe:	2b04      	cmp	r3, #4
 8000900:	d1ea      	bne.n	80008d8 <spi_lld_serve_rx_interrupt+0x78>
 8000902:	2303      	movs	r3, #3
 8000904:	7023      	strb	r3, [r4, #0]
}
 8000906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <spi_lld_serve_rx_interrupt+0xbc>)
 800090a:	f7ff fde1 	bl	80004d0 <chSysHalt>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 800090e:	4804      	ldr	r0, [pc, #16]	; (8000920 <spi_lld_serve_rx_interrupt+0xc0>)
 8000910:	f7ff fdde 	bl	80004d0 <chSysHalt>
    _spi_isr_code(spip);
 8000914:	2302      	movs	r3, #2
 8000916:	7023      	strb	r3, [r4, #0]
 8000918:	e7c9      	b.n	80008ae <spi_lld_serve_rx_interrupt+0x4e>
 800091a:	bf00      	nop
 800091c:	08002094 	.word	0x08002094
 8000920:	08002258 	.word	0x08002258
	...

08000930 <dmaServeInterrupt>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
 8000930:	b430      	push	{r4, r5}
  uint32_t flags;
  uint32_t selfindex = (uint32_t)dmastp->selfindex;

  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8000932:	6802      	ldr	r2, [r0, #0]
 8000934:	7b43      	ldrb	r3, [r0, #13]
 8000936:	6811      	ldr	r1, [r2, #0]
  if (flags & dmastp->channel->CCR) {
 8000938:	6844      	ldr	r4, [r0, #4]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 800093a:	40d9      	lsrs	r1, r3
  if (flags & dmastp->channel->CCR) {
 800093c:	6824      	ldr	r4, [r4, #0]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 800093e:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8000942:	420c      	tst	r4, r1
 8000944:	d00e      	beq.n	8000964 <dmaServeInterrupt+0x34>
  uint32_t selfindex = (uint32_t)dmastp->selfindex;
 8000946:	7b80      	ldrb	r0, [r0, #14]
    dmastp->dma->IFCR = flags << dmastp->shift;
    if (dma.streams[selfindex].func) {
 8000948:	4c07      	ldr	r4, [pc, #28]	; (8000968 <dmaServeInterrupt+0x38>)
 800094a:	3001      	adds	r0, #1
    dmastp->dma->IFCR = flags << dmastp->shift;
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
    if (dma.streams[selfindex].func) {
 8000950:	f854 5030 	ldr.w	r5, [r4, r0, lsl #3]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8000954:	6053      	str	r3, [r2, #4]
    if (dma.streams[selfindex].func) {
 8000956:	b12d      	cbz	r5, 8000964 <dmaServeInterrupt+0x34>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8000958:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800095c:	462b      	mov	r3, r5
 800095e:	6840      	ldr	r0, [r0, #4]
    }
  }
}
 8000960:	bc30      	pop	{r4, r5}
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8000962:	4718      	bx	r3
}
 8000964:	bc30      	pop	{r4, r5}
 8000966:	4770      	bx	lr
 8000968:	200013a4 	.word	0x200013a4
 800096c:	00000000 	.word	0x00000000

08000970 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8000970:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000972:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000976:	68da      	ldr	r2, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8000978:	0792      	lsls	r2, r2, #30
 800097a:	d501      	bpl.n	8000980 <stSetAlarm+0x10>
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800097c:	6358      	str	r0, [r3, #52]	; 0x34

  st_lld_set_alarm(abstime);
}
 800097e:	bd08      	pop	{r3, pc}
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8000980:	4801      	ldr	r0, [pc, #4]	; (8000988 <stSetAlarm+0x18>)
 8000982:	f7ff fda5 	bl	80004d0 <chSysHalt>
 8000986:	bf00      	nop
 8000988:	080022ac 	.word	0x080022ac
 800098c:	00000000 	.word	0x00000000

08000990 <spi_lld_start.constprop.0>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8000990:	b570      	push	{r4, r5, r6, lr}
  uint32_t ds;

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8000992:	4c2e      	ldr	r4, [pc, #184]	; (8000a4c <spi_lld_start.constprop.0+0xbc>)
 8000994:	7823      	ldrb	r3, [r4, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d039      	beq.n	8000a0e <spi_lld_start.constprop.0+0x7e>
 800099a:	69e2      	ldr	r2, [r4, #28]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  ds = spip->config->cr2 & SPI_CR2_DS;
 800099c:	6865      	ldr	r5, [r4, #4]
 800099e:	8a69      	ldrh	r1, [r5, #18]
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
 80009a0:	f401 6370 	and.w	r3, r1, #3840	; 0xf00
 80009a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80009a8:	e9d4 030a 	ldrd	r0, r3, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80009ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
 80009b0:	d81c      	bhi.n	80009ec <spi_lld_start.constprop.0+0x5c>
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  if (spip->config->circular) {
 80009b2:	782e      	ldrb	r6, [r5, #0]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80009b4:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80009b6:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
  if (spip->config->circular) {
 80009ba:	b30e      	cbz	r6, 8000a00 <spi_lld_start.constprop.0+0x70>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80009bc:	f040 0024 	orr.w	r0, r0, #36	; 0x24
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80009c0:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80009c4:	e9c4 030a 	strd	r0, r3, [r4, #40]	; 0x28
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
  }

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 80009c8:	6814      	ldr	r4, [r2, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 80009ca:	8a28      	ldrh	r0, [r5, #16]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_FRXTH | SPI_CR2_SSOE |
                    SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 80009cc:	f441 5380 	orr.w	r3, r1, #4096	; 0x1000
 80009d0:	f043 0307 	orr.w	r3, r3, #7
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 80009d4:	f040 0104 	orr.w	r1, r0, #4
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 80009d8:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 80009dc:	6014      	str	r4, [r2, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 80009de:	6011      	str	r1, [r2, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_FRXTH | SPI_CR2_SSOE |
 80009e0:	6053      	str	r3, [r2, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 80009e2:	6813      	ldr	r3, [r2, #0]
 80009e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e8:	6013      	str	r3, [r2, #0]
}
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
  if (spip->config->circular) {
 80009ec:	782e      	ldrb	r6, [r5, #0]
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80009ee:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80009f2:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80009f6:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80009f8:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
  if (spip->config->circular) {
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d1dd      	bne.n	80009bc <spi_lld_start.constprop.0+0x2c>
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8000a00:	f020 0024 	bic.w	r0, r0, #36	; 0x24
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8000a04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a08:	e9c4 030a 	strd	r0, r3, [r4, #40]	; 0x28
 8000a0c:	e7dc      	b.n	80009c8 <spi_lld_start.constprop.0+0x38>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI2_RX_DMA_STREAM,
 8000a0e:	4910      	ldr	r1, [pc, #64]	; (8000a50 <spi_lld_start.constprop.0+0xc0>)
 8000a10:	2003      	movs	r0, #3
 8000a12:	f7ff fda5 	bl	8000560 <dmaStreamAllocI.constprop.0>
 8000a16:	6220      	str	r0, [r4, #32]
      osalDbgAssert(spip->dmarx != NULL, "unable to allocate stream");
 8000a18:	b1a0      	cbz	r0, 8000a44 <spi_lld_start.constprop.0+0xb4>
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI2_TX_DMA_STREAM,
 8000a1a:	490e      	ldr	r1, [pc, #56]	; (8000a54 <spi_lld_start.constprop.0+0xc4>)
 8000a1c:	2004      	movs	r0, #4
 8000a1e:	f7ff fd9f 	bl	8000560 <dmaStreamAllocI.constprop.0>
 8000a22:	6260      	str	r0, [r4, #36]	; 0x24
      osalDbgAssert(spip->dmatx != NULL, "unable to allocate stream");
 8000a24:	b170      	cbz	r0, 8000a44 <spi_lld_start.constprop.0+0xb4>
      rccEnableSPI2(true);
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <spi_lld_start.constprop.0+0xc8>)
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8000a28:	6a25      	ldr	r5, [r4, #32]
      rccEnableSPI2(true);
 8000a2a:	69d9      	ldr	r1, [r3, #28]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8000a2c:	69e2      	ldr	r2, [r4, #28]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8000a2e:	6840      	ldr	r0, [r0, #4]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8000a30:	686d      	ldr	r5, [r5, #4]
      rccEnableSPI2(true);
 8000a32:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000a36:	61d9      	str	r1, [r3, #28]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8000a38:	f102 010c 	add.w	r1, r2, #12
      rccEnableSPI2(true);
 8000a3c:	69db      	ldr	r3, [r3, #28]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8000a3e:	60a9      	str	r1, [r5, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8000a40:	6081      	str	r1, [r0, #8]
 8000a42:	e7ab      	b.n	800099c <spi_lld_start.constprop.0+0xc>
      osalDbgAssert(spip->dmarx != NULL, "unable to allocate stream");
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <spi_lld_start.constprop.0+0xcc>)
 8000a46:	f7ff fd43 	bl	80004d0 <chSysHalt>
 8000a4a:	bf00      	nop
 8000a4c:	20000830 	.word	0x20000830
 8000a50:	08000861 	.word	0x08000861
 8000a54:	08000501 	.word	0x08000501
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	080022dc 	.word	0x080022dc

08000a60 <chSchWakeupS.constprop.0>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000a60:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8000a62:	4d1b      	ldr	r5, [pc, #108]	; (8000ad0 <chSchWakeupS.constprop.0+0x70>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000a64:	4604      	mov	r4, r0
  chDbgCheckClassS();
 8000a66:	f7ff fd5b 	bl	8000520 <chDbgCheckClassS>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000a6a:	682b      	ldr	r3, [r5, #0]
  thread_t *otp = currp;
 8000a6c:	69a8      	ldr	r0, [r5, #24]
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000a6e:	42ab      	cmp	r3, r5
 8000a70:	d026      	beq.n	8000ac0 <chSchWakeupS.constprop.0+0x60>
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	6883      	ldr	r3, [r0, #8]
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d31f      	bcc.n	8000aba <chSchWakeupS.constprop.0+0x5a>
  if (ntp->prio <= otp->prio) {
 8000a7a:	68a2      	ldr	r2, [r4, #8]
  ntp->u.rdymsg = msg;
 8000a7c:	2100      	movs	r1, #0
  if (ntp->prio <= otp->prio) {
 8000a7e:	429a      	cmp	r2, r3
  ntp->u.rdymsg = msg;
 8000a80:	6261      	str	r1, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8000a82:	d915      	bls.n	8000ab0 <chSchWakeupS.constprop.0+0x50>
    otp = chSchReadyAheadI(otp);
 8000a84:	f7ff fe04 	bl	8000690 <chSchReadyAheadI>
    ntp->state = CH_STATE_CURRENT;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f884 3020 	strb.w	r3, [r4, #32]
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 8000a8e:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
    currp = ntp;
 8000a90:	61ac      	str	r4, [r5, #24]
 8000a92:	07db      	lsls	r3, r3, #31
    otp = chSchReadyAheadI(otp);
 8000a94:	4605      	mov	r5, r0
 8000a96:	d515      	bpl.n	8000ac4 <chSchWakeupS.constprop.0+0x64>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000a98:	f3ef 8309 	mrs	r3, PSP
    chSysSwitch(ntp, otp);
 8000a9c:	69ea      	ldr	r2, [r5, #28]
 8000a9e:	3b24      	subs	r3, #36	; 0x24
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d812      	bhi.n	8000aca <chSchWakeupS.constprop.0+0x6a>
 8000aa4:	4629      	mov	r1, r5
 8000aa6:	4620      	mov	r0, r4
}
 8000aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chSysSwitch(ntp, otp);
 8000aac:	f7ff bbe8 	b.w	8000280 <_port_switch>
    (void) chSchReadyI(ntp);
 8000ab0:	4620      	mov	r0, r4
}
 8000ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    (void) chSchReadyI(ntp);
 8000ab6:	f7ff be13 	b.w	80006e0 <chSchReadyI>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <chSchWakeupS.constprop.0+0x74>)
 8000abc:	f7ff fd08 	bl	80004d0 <chSysHalt>
 8000ac0:	6883      	ldr	r3, [r0, #8]
 8000ac2:	e7da      	b.n	8000a7a <chSchWakeupS.constprop.0+0x1a>
 8000ac4:	f7ff fcc4 	bl	8000450 <_trace_switch.part.0>
 8000ac8:	e7e6      	b.n	8000a98 <chSchWakeupS.constprop.0+0x38>
    chSysSwitch(ntp, otp);
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <chSchWakeupS.constprop.0+0x78>)
 8000acc:	f7ff fd00 	bl	80004d0 <chSysHalt>
 8000ad0:	200009d8 	.word	0x200009d8
 8000ad4:	08002214 	.word	0x08002214
 8000ad8:	080020d0 	.word	0x080020d0
 8000adc:	00000000 	.word	0x00000000

08000ae0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8000ae0:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 8000ae2:	4c15      	ldr	r4, [pc, #84]	; (8000b38 <chSchGoSleepS+0x58>)
 8000ae4:	69a5      	ldr	r5, [r4, #24]
void chSchGoSleepS(tstate_t newstate) {
 8000ae6:	4606      	mov	r6, r0
  chDbgCheckClassS();
 8000ae8:	f7ff fd1a 	bl	8000520 <chDbgCheckClassS>
  thread_t *tp = tqp->next;
 8000aec:	6823      	ldr	r3, [r4, #0]
  otp->state = newstate;
 8000aee:	f885 6020 	strb.w	r6, [r5, #32]
  tqp->next             = tp->queue.next;
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	6022      	str	r2, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8000af6:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000af8:	6054      	str	r4, [r2, #4]
 8000afa:	f883 1020 	strb.w	r1, [r3, #32]
 8000afe:	8f22      	ldrh	r2, [r4, #56]	; 0x38
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000b00:	61a3      	str	r3, [r4, #24]
 8000b02:	07d3      	lsls	r3, r2, #31
 8000b04:	d50b      	bpl.n	8000b1e <chSchGoSleepS+0x3e>
 8000b06:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(currp, otp);
 8000b0a:	69ea      	ldr	r2, [r5, #28]
 8000b0c:	3b24      	subs	r3, #36	; 0x24
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d80e      	bhi.n	8000b30 <chSchGoSleepS+0x50>
 8000b12:	69a0      	ldr	r0, [r4, #24]
 8000b14:	4629      	mov	r1, r5
}
 8000b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(currp, otp);
 8000b1a:	f7ff bbb1 	b.w	8000280 <_port_switch>
 8000b1e:	4628      	mov	r0, r5
 8000b20:	f7ff fc96 	bl	8000450 <_trace_switch.part.0>
 8000b24:	f3ef 8309 	mrs	r3, PSP
 8000b28:	69ea      	ldr	r2, [r5, #28]
 8000b2a:	3b24      	subs	r3, #36	; 0x24
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d9f0      	bls.n	8000b12 <chSchGoSleepS+0x32>
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <chSchGoSleepS+0x5c>)
 8000b32:	f7ff fccd 	bl	80004d0 <chSysHalt>
 8000b36:	bf00      	nop
 8000b38:	200009d8 	.word	0x200009d8
 8000b3c:	080020d0 	.word	0x080020d0

08000b40 <SVC_Handler>:
 8000b40:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8000b44:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000b46:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f383 8811 	msr	BASEPRI, r3
}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
	...

08000b60 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000b60:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8000b62:	4c13      	ldr	r4, [pc, #76]	; (8000bb0 <chSchDoReschedule+0x50>)
  thread_t *tp = tqp->next;
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	69a0      	ldr	r0, [r4, #24]
  tqp->next             = tp->queue.next;
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	6022      	str	r2, [r4, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000b6c:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000b6e:	6054      	str	r4, [r2, #4]
 8000b70:	f883 1020 	strb.w	r1, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000b74:	61a3      	str	r3, [r4, #24]
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 8000b76:	f7ff fd8b 	bl	8000690 <chSchReadyAheadI>
 8000b7a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8000b7c:	07db      	lsls	r3, r3, #31
 8000b7e:	4605      	mov	r5, r0
 8000b80:	d50b      	bpl.n	8000b9a <chSchDoReschedule+0x3a>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000b82:	f3ef 8309 	mrs	r3, PSP

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8000b86:	69ea      	ldr	r2, [r5, #28]
 8000b88:	3b24      	subs	r3, #36	; 0x24
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d80d      	bhi.n	8000baa <chSchDoReschedule+0x4a>
 8000b8e:	69a0      	ldr	r0, [r4, #24]
 8000b90:	4629      	mov	r1, r5
}
 8000b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 8000b96:	f7ff bb73 	b.w	8000280 <_port_switch>
 8000b9a:	f7ff fc59 	bl	8000450 <_trace_switch.part.0>
 8000b9e:	f3ef 8309 	mrs	r3, PSP
 8000ba2:	69ea      	ldr	r2, [r5, #28]
 8000ba4:	3b24      	subs	r3, #36	; 0x24
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d9f1      	bls.n	8000b8e <chSchDoReschedule+0x2e>
 8000baa:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <chSchDoReschedule+0x54>)
 8000bac:	f7ff fc90 	bl	80004d0 <chSysHalt>
 8000bb0:	200009d8 	.word	0x200009d8
 8000bb4:	080020d0 	.word	0x080020d0
	...

08000bc0 <_dbg_check_unlock>:
void _dbg_check_unlock(void) {
 8000bc0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <_dbg_check_unlock+0x18>)
 8000bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bc6:	b922      	cbnz	r2, 8000bd2 <_dbg_check_unlock+0x12>
 8000bc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bca:	2900      	cmp	r1, #0
 8000bcc:	dd01      	ble.n	8000bd2 <_dbg_check_unlock+0x12>
  _dbg_leave_lock();
 8000bce:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bd0:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 8000bd2:	4802      	ldr	r0, [pc, #8]	; (8000bdc <_dbg_check_unlock+0x1c>)
 8000bd4:	f7ff fc7c 	bl	80004d0 <chSysHalt>
 8000bd8:	200009d8 	.word	0x200009d8
 8000bdc:	080020e0 	.word	0x080020e0

08000be0 <chSysUnlock.lto_priv.1>:
static inline void chSysUnlock(void) {
 8000be0:	b508      	push	{r3, lr}
  _dbg_check_unlock();
 8000be2:	f7ff ffed 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <chSysUnlock.lto_priv.1+0x28>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d004      	beq.n	8000bf8 <chSysUnlock.lto_priv.1+0x18>
 8000bee:	6999      	ldr	r1, [r3, #24]
 8000bf0:	6893      	ldr	r3, [r2, #8]
 8000bf2:	688a      	ldr	r2, [r1, #8]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d303      	bcc.n	8000c00 <chSysUnlock.lto_priv.1+0x20>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f383 8811 	msr	BASEPRI, r3
}
 8000bfe:	bd08      	pop	{r3, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <chSysUnlock.lto_priv.1+0x2c>)
 8000c02:	f7ff fc65 	bl	80004d0 <chSysHalt>
 8000c06:	bf00      	nop
 8000c08:	200009d8 	.word	0x200009d8
 8000c0c:	0800213c 	.word	0x0800213c

08000c10 <_dbg_check_lock>:
void _dbg_check_lock(void) {
 8000c10:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <_dbg_check_lock+0x18>)
 8000c14:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	d002      	beq.n	8000c22 <_dbg_check_lock+0x12>
    chSysHalt("SV#4");
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <_dbg_check_lock+0x1c>)
 8000c1e:	f7ff fc57 	bl	80004d0 <chSysHalt>
  _dbg_enter_lock();
 8000c22:	2201      	movs	r2, #1
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c26:	bd08      	pop	{r3, pc}
 8000c28:	200009d8 	.word	0x200009d8
 8000c2c:	080020e8 	.word	0x080020e8

08000c30 <spiSelect.constprop.0>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 8000c30:	b508      	push	{r3, lr}
 8000c32:	2320      	movs	r3, #32
 8000c34:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8000c38:	f7ff ffea 	bl	8000c10 <_dbg_check_lock>

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <spiSelect.constprop.0+0x4c>)
 8000c3e:	781a      	ldrb	r2, [r3, #0]
 8000c40:	2a02      	cmp	r2, #2
 8000c42:	d115      	bne.n	8000c70 <spiSelect.constprop.0+0x40>
  spiSelectI(spip);
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	408b      	lsls	r3, r1
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	8353      	strh	r3, [r2, #26]
  _dbg_check_unlock();
 8000c52:	f7ff ffb5 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <spiSelect.constprop.0+0x50>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <spiSelect.constprop.0+0x38>
 8000c5e:	6999      	ldr	r1, [r3, #24]
 8000c60:	6893      	ldr	r3, [r2, #8]
 8000c62:	688a      	ldr	r2, [r1, #8]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d306      	bcc.n	8000c76 <spiSelect.constprop.0+0x46>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8000c6e:	bd08      	pop	{r3, pc}
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <spiSelect.constprop.0+0x54>)
 8000c72:	f7ff fc2d 	bl	80004d0 <chSysHalt>
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <spiSelect.constprop.0+0x58>)
 8000c78:	f7ff fc2a 	bl	80004d0 <chSysHalt>
 8000c7c:	20000830 	.word	0x20000830
 8000c80:	200009d8 	.word	0x200009d8
 8000c84:	080022c4 	.word	0x080022c4
 8000c88:	08002130 	.word	0x08002130
 8000c8c:	00000000 	.word	0x00000000

08000c90 <spiUnselect.constprop.0>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 8000c90:	b508      	push	{r3, lr}
 8000c92:	2320      	movs	r3, #32
 8000c94:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8000c98:	f7ff ffba 	bl	8000c10 <_dbg_check_lock>

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <spiUnselect.constprop.0+0x4c>)
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	2a02      	cmp	r2, #2
 8000ca2:	d115      	bne.n	8000cd0 <spiUnselect.constprop.0+0x40>
  spiUnselectI(spip);
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8000caa:	2301      	movs	r3, #1
 8000cac:	408b      	lsls	r3, r1
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	8313      	strh	r3, [r2, #24]
  _dbg_check_unlock();
 8000cb2:	f7ff ff85 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <spiUnselect.constprop.0+0x50>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d004      	beq.n	8000cc8 <spiUnselect.constprop.0+0x38>
 8000cbe:	6999      	ldr	r1, [r3, #24]
 8000cc0:	6893      	ldr	r3, [r2, #8]
 8000cc2:	688a      	ldr	r2, [r1, #8]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d306      	bcc.n	8000cd6 <spiUnselect.constprop.0+0x46>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8000cce:	bd08      	pop	{r3, pc}
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <spiUnselect.constprop.0+0x54>)
 8000cd2:	f7ff fbfd 	bl	80004d0 <chSysHalt>
 8000cd6:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <spiUnselect.constprop.0+0x58>)
 8000cd8:	f7ff fbfa 	bl	80004d0 <chSysHalt>
 8000cdc:	20000830 	.word	0x20000830
 8000ce0:	200009d8 	.word	0x200009d8
 8000ce4:	080022ec 	.word	0x080022ec
 8000ce8:	08002130 	.word	0x08002130
 8000cec:	00000000 	.word	0x00000000

08000cf0 <spiExchange.constprop.0>:
 * @param[in] txbuf     the pointer to the transmit buffer
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiExchange(SPIDriver *spip, size_t n,
 8000cf0:	b570      	push	{r4, r5, r6, lr}
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8000cf8:	f7ff ff8a 	bl	8000c10 <_dbg_check_lock>
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <spiExchange.constprop.0+0x98>)
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	2a02      	cmp	r2, #2
 8000d02:	d122      	bne.n	8000d4a <spiExchange.constprop.0+0x5a>

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8000d04:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8000d08:	e9d3 540a 	ldrd	r5, r4, [r3, #40]	; 0x28
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8000d0c:	6849      	ldr	r1, [r1, #4]
 8000d0e:	481f      	ldr	r0, [pc, #124]	; (8000d8c <spiExchange.constprop.0+0x9c>)
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8000d10:	6852      	ldr	r2, [r2, #4]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8000d12:	60c8      	str	r0, [r1, #12]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8000d14:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8000d18:	f44f 7000 	mov.w	r0, #512	; 0x200
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 8000d1c:	2603      	movs	r6, #3
 8000d1e:	6048      	str	r0, [r1, #4]
 8000d20:	701e      	strb	r6, [r3, #0]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8000d22:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8000d26:	600d      	str	r5, [r1, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8000d28:	4d19      	ldr	r5, [pc, #100]	; (8000d90 <spiExchange.constprop.0+0xa0>)
 8000d2a:	60d5      	str	r5, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8000d2c:	6050      	str	r0, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8000d2e:	6014      	str	r4, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 8000d30:	680c      	ldr	r4, [r1, #0]
  chDbgAssert(*trp == NULL, "not NULL");
 8000d32:	6898      	ldr	r0, [r3, #8]
 8000d34:	f044 0401 	orr.w	r4, r4, #1
 8000d38:	600c      	str	r4, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 8000d3a:	6811      	ldr	r1, [r2, #0]
 8000d3c:	f041 0101 	orr.w	r1, r1, #1
 8000d40:	6011      	str	r1, [r2, #0]
 8000d42:	b128      	cbz	r0, 8000d50 <spiExchange.constprop.0+0x60>
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <spiExchange.constprop.0+0xa4>)
 8000d46:	f7ff fbc3 	bl	80004d0 <chSysHalt>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8000d4a:	4813      	ldr	r0, [pc, #76]	; (8000d98 <spiExchange.constprop.0+0xa8>)
 8000d4c:	f7ff fbc0 	bl	80004d0 <chSysHalt>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8000d50:	4c12      	ldr	r4, [pc, #72]	; (8000d9c <spiExchange.constprop.0+0xac>)
 8000d52:	69a2      	ldr	r2, [r4, #24]
  *trp = tp;
 8000d54:	f843 2f08 	str.w	r2, [r3, #8]!
  tp->u.wttrp = trp;
 8000d58:	6253      	str	r3, [r2, #36]	; 0x24
  chDbgCheckClassS();
 8000d5a:	f7ff fbe1 	bl	8000520 <chDbgCheckClassS>
    chSchGoSleepS(newstate);
 8000d5e:	4630      	mov	r0, r6
 8000d60:	f7ff febe 	bl	8000ae0 <chSchGoSleepS>
  _dbg_check_unlock();
 8000d64:	f7ff ff2c 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d004      	beq.n	8000d78 <spiExchange.constprop.0+0x88>
 8000d6e:	69a2      	ldr	r2, [r4, #24]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	6892      	ldr	r2, [r2, #8]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d303      	bcc.n	8000d80 <spiExchange.constprop.0+0x90>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	4807      	ldr	r0, [pc, #28]	; (8000da0 <spiExchange.constprop.0+0xb0>)
 8000d82:	f7ff fba5 	bl	80004d0 <chSysHalt>
 8000d86:	bf00      	nop
 8000d88:	20000830 	.word	0x20000830
 8000d8c:	2000140c 	.word	0x2000140c
 8000d90:	200019a0 	.word	0x200019a0
 8000d94:	08002240 	.word	0x08002240
 8000d98:	08002364 	.word	0x08002364
 8000d9c:	200009d8 	.word	0x200009d8
 8000da0:	08002130 	.word	0x08002130
	...

08000db0 <chThdSleep.constprop.0>:
void chThdSleep(sysinterval_t time) {
 8000db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000db4:	2320      	movs	r3, #32
 8000db6:	b086      	sub	sp, #24
 8000db8:	f383 8811 	msr	BASEPRI, r3
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000dbc:	4e50      	ldr	r6, [pc, #320]	; (8000f00 <chThdSleep.constprop.0+0x150>)
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000dbe:	4637      	mov	r7, r6
  _dbg_check_lock();
 8000dc0:	f7ff ff26 	bl	8000c10 <_dbg_check_lock>
  chDbgCheckClassS();
 8000dc4:	f7ff fbac 	bl	8000520 <chDbgCheckClassS>
  chDbgCheckClassI();
 8000dc8:	f7ff fbba 	bl	8000540 <chDbgCheckClassI>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000dcc:	69b3      	ldr	r3, [r6, #24]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000dce:	f857 5f1c 	ldr.w	r5, [r7, #28]!
  vtp->par = par;
 8000dd2:	9305      	str	r3, [sp, #20]
  return (systime_t)STM32_ST_TIM->CNT;
 8000dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  vtp->func = vtfunc;
 8000dd8:	4a4a      	ldr	r2, [pc, #296]	; (8000f04 <chThdSleep.constprop.0+0x154>)
 8000dda:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000ddc:	9204      	str	r2, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000dde:	42bd      	cmp	r5, r7
 8000de0:	d073      	beq.n	8000eca <chThdSleep.constprop.0+0x11a>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8000de2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8000de4:	f241 3388 	movw	r3, #5000	; 0x1388
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000de8:	1a24      	subs	r4, r4, r0
 8000dea:	18e4      	adds	r4, r4, r3

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8000dec:	d242      	bcs.n	8000e74 <chThdSleep.constprop.0+0xc4>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8000dee:	68ab      	ldr	r3, [r5, #8]
 8000df0:	429c      	cmp	r4, r3
 8000df2:	d365      	bcc.n	8000ec0 <chThdSleep.constprop.0+0x110>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000df4:	429c      	cmp	r4, r3
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");
 8000df6:	f10d 0804 	add.w	r8, sp, #4
  while (p->delta < delta) {
 8000dfa:	d906      	bls.n	8000e0a <chThdSleep.constprop.0+0x5a>
    chDbgAssert(p != vtp, "timer already armed");
 8000dfc:	4545      	cmp	r5, r8
 8000dfe:	d03e      	beq.n	8000e7e <chThdSleep.constprop.0+0xce>

    delta -= p->delta;
    p = p->next;
 8000e00:	682d      	ldr	r5, [r5, #0]
    delta -= p->delta;
 8000e02:	1ae4      	subs	r4, r4, r3
  while (p->delta < delta) {
 8000e04:	68ab      	ldr	r3, [r5, #8]
 8000e06:	429c      	cmp	r4, r3
 8000e08:	d8f8      	bhi.n	8000dfc <chThdSleep.constprop.0+0x4c>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8000e0a:	686b      	ldr	r3, [r5, #4]
 8000e0c:	e9cd 5301 	strd	r5, r3, [sp, #4]
  vtp->prev->next = vtp;
 8000e10:	f8c3 8000 	str.w	r8, [r3]
  p->prev = vtp;
 8000e14:	f8c5 8004 	str.w	r8, [r5, #4]
  vtp->delta = delta;
 8000e18:	9403      	str	r4, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8000e1a:	68ab      	ldr	r3, [r5, #8]
 8000e1c:	1b1c      	subs	r4, r3, r4

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
  p->delta -= delta;
 8000e22:	60ac      	str	r4, [r5, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8000e24:	6273      	str	r3, [r6, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000e26:	2008      	movs	r0, #8
 8000e28:	f7ff fe5a 	bl	8000ae0 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8000e2c:	f7ff fb88 	bl	8000540 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8000e30:	9b04      	ldr	r3, [sp, #16]
 8000e32:	b17b      	cbz	r3, 8000e54 <chThdSleep.constprop.0+0xa4>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8000e34:	f7ff fb84 	bl	8000540 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000e38:	69f3      	ldr	r3, [r6, #28]
 8000e3a:	4543      	cmp	r3, r8
 8000e3c:	d022      	beq.n	8000e84 <chThdSleep.constprop.0+0xd4>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000e3e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8000e42:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8000e44:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000e46:	42bb      	cmp	r3, r7
    vtp->next->prev = vtp->prev;
 8000e48:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000e4a:	d003      	beq.n	8000e54 <chThdSleep.constprop.0+0xa4>
      vtp->next->delta += vtp->delta;
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	9903      	ldr	r1, [sp, #12]
 8000e50:	440a      	add	r2, r1
 8000e52:	609a      	str	r2, [r3, #8]
  _dbg_check_unlock();
 8000e54:	f7ff feb4 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000e58:	6833      	ldr	r3, [r6, #0]
 8000e5a:	42b3      	cmp	r3, r6
 8000e5c:	d004      	beq.n	8000e68 <chThdSleep.constprop.0+0xb8>
 8000e5e:	69b2      	ldr	r2, [r6, #24]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	6892      	ldr	r2, [r2, #8]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d328      	bcc.n	8000eba <chThdSleep.constprop.0+0x10a>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f383 8811 	msr	BASEPRI, r3
}
 8000e6e:	b006      	add	sp, #24
 8000e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      delta -= p->delta;
 8000e74:	68aa      	ldr	r2, [r5, #8]
      p = p->next;
 8000e76:	682d      	ldr	r5, [r5, #0]
      delta -= p->delta;
 8000e78:	1aa4      	subs	r4, r4, r2
 8000e7a:	68ab      	ldr	r3, [r5, #8]
 8000e7c:	e7ba      	b.n	8000df4 <chThdSleep.constprop.0+0x44>
    chDbgAssert(p != vtp, "timer already armed");
 8000e7e:	4822      	ldr	r0, [pc, #136]	; (8000f08 <chThdSleep.constprop.0+0x158>)
 8000e80:	f7ff fb26 	bl	80004d0 <chSysHalt>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8000e84:	9b01      	ldr	r3, [sp, #4]
 8000e86:	61f3      	str	r3, [r6, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8000e88:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000e8a:	42bb      	cmp	r3, r7
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000e8c:	605f      	str	r7, [r3, #4]
  vtp->func = NULL;
 8000e8e:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000e90:	d032      	beq.n	8000ef8 <chThdSleep.constprop.0+0x148>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	9903      	ldr	r1, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8000e96:	6ab0      	ldr	r0, [r6, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8000e98:	440a      	add	r2, r1
 8000e9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000ea2:	1a19      	subs	r1, r3, r0

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8000ea4:	428a      	cmp	r2, r1
 8000ea6:	d9d5      	bls.n	8000e54 <chThdSleep.constprop.0+0xa4>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8000ea8:	1ac3      	subs	r3, r0, r3
 8000eaa:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8000eac:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8000eae:	bf98      	it	ls
 8000eb0:	1c8a      	addls	r2, r1, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8000eb2:	4410      	add	r0, r2
 8000eb4:	f7ff fd5c 	bl	8000970 <stSetAlarm>
 8000eb8:	e7cc      	b.n	8000e54 <chThdSleep.constprop.0+0xa4>
 8000eba:	4814      	ldr	r0, [pc, #80]	; (8000f0c <chThdSleep.constprop.0+0x15c>)
 8000ebc:	f7ff fb08 	bl	80004d0 <chSysHalt>
 8000ec0:	4420      	add	r0, r4
 8000ec2:	f7ff fd55 	bl	8000970 <stSetAlarm>
 8000ec6:	68ab      	ldr	r3, [r5, #8]
 8000ec8:	e794      	b.n	8000df4 <chThdSleep.constprop.0+0x44>
      vtp->delta = delay;
 8000eca:	f241 3188 	movw	r1, #5000	; 0x1388
 8000ece:	9103      	str	r1, [sp, #12]
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000ed0:	68da      	ldr	r2, [r3, #12]
      ch.vtlist.lasttime = now;
 8000ed2:	62b4      	str	r4, [r6, #40]	; 0x28
      ch.vtlist.next = vtp;
 8000ed4:	f10d 0804 	add.w	r8, sp, #4
  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8000ed8:	f012 0202 	ands.w	r2, r2, #2
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8000edc:	e9cd 5501 	strd	r5, r5, [sp, #4]
      ch.vtlist.prev = vtp;
 8000ee0:	e9c6 8807 	strd	r8, r8, [r6, #28]
 8000ee4:	d105      	bne.n	8000ef2 <chThdSleep.constprop.0+0x142>
  return systime + (systime_t)interval;
 8000ee6:	440c      	add	r4, r1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000ee8:	2102      	movs	r1, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000eea:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000eec:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000eee:	60d9      	str	r1, [r3, #12]
 8000ef0:	e799      	b.n	8000e26 <chThdSleep.constprop.0+0x76>
 8000ef2:	4807      	ldr	r0, [pc, #28]	; (8000f10 <chThdSleep.constprop.0+0x160>)
 8000ef4:	f7ff faec 	bl	80004d0 <chSysHalt>
  STM32_ST_TIM->DIER = 0U;
 8000ef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	e7a9      	b.n	8000e54 <chThdSleep.constprop.0+0xa4>
 8000f00:	200009d8 	.word	0x200009d8
 8000f04:	080007f1 	.word	0x080007f1
 8000f08:	08002190 	.word	0x08002190
 8000f0c:	0800213c 	.word	0x0800213c
 8000f10:	08002284 	.word	0x08002284
	...

08000f20 <blinker>:
/*
 * This is a periodic thread that does absolutely nothing except flashing
 * a LED.
 */
static THD_WORKING_AREA(blinker_wa, 128);
static THD_FUNCTION(blinker, arg) {
 8000f20:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <blinker+0x20>)
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <blinker+0x24>)
 8000f26:	699b      	ldr	r3, [r3, #24]

  (void)arg;

  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOC, GPIOC_LED1);
 8000f28:	4c07      	ldr	r4, [pc, #28]	; (8000f48 <blinker+0x28>)
 8000f2a:	619a      	str	r2, [r3, #24]
 8000f2c:	2501      	movs	r5, #1
 8000f2e:	462e      	mov	r6, r5
 8000f30:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(500);
 8000f32:	f7ff ff3d 	bl	8000db0 <chThdSleep.constprop.0>
    palClearPad(GPIOC, GPIOC_LED1);
 8000f36:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(500);
 8000f38:	f7ff ff3a 	bl	8000db0 <chThdSleep.constprop.0>
  while (true) {
 8000f3c:	e7f8      	b.n	8000f30 <blinker+0x10>
 8000f3e:	bf00      	nop
 8000f40:	200009d8 	.word	0x200009d8
 8000f44:	080020f0 	.word	0x080020f0
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	00000000 	.word	0x00000000

08000f50 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000f50:	b570      	push	{r4, r5, r6, lr}
 8000f52:	2320      	movs	r3, #32
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	4616      	mov	r6, r2
 8000f5a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8000f5e:	f7ff fe57 	bl	8000c10 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
 8000f62:	4632      	mov	r2, r6
 8000f64:	4629      	mov	r1, r5
 8000f66:	4620      	mov	r0, r4
 8000f68:	f7ff fb62 	bl	8000630 <chCoreAllocFromTopI>
 8000f6c:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8000f6e:	f7ff fe27 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <chCoreAllocFromTop+0x44>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d004      	beq.n	8000f84 <chCoreAllocFromTop+0x34>
 8000f7a:	6999      	ldr	r1, [r3, #24]
 8000f7c:	6893      	ldr	r3, [r2, #8]
 8000f7e:	688a      	ldr	r2, [r1, #8]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d304      	bcc.n	8000f8e <chCoreAllocFromTop+0x3e>
 8000f84:	2300      	movs	r3, #0
 8000f86:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	bd70      	pop	{r4, r5, r6, pc}
 8000f8e:	4802      	ldr	r0, [pc, #8]	; (8000f98 <chCoreAllocFromTop+0x48>)
 8000f90:	f7ff fa9e 	bl	80004d0 <chSysHalt>
 8000f94:	200009d8 	.word	0x200009d8
 8000f98:	08002154 	.word	0x08002154
 8000f9c:	00000000 	.word	0x00000000

08000fa0 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8000fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  thread_t *ctp = currp;
 8000fa4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001068 <chMtxUnlock+0xc8>
void chMtxUnlock(mutex_t *mp) {
 8000fa8:	4605      	mov	r5, r0
  thread_t *ctp = currp;
 8000faa:	f8d8 7018 	ldr.w	r7, [r8, #24]
 8000fae:	2320      	movs	r3, #32
 8000fb0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8000fb4:	f7ff fe2c 	bl	8000c10 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8000fb8:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8000fba:	b116      	cbz	r6, 8000fc2 <chMtxUnlock+0x22>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 8000fbc:	68b3      	ldr	r3, [r6, #8]
 8000fbe:	42bb      	cmp	r3, r7
 8000fc0:	d002      	beq.n	8000fc8 <chMtxUnlock+0x28>
  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8000fc2:	4827      	ldr	r0, [pc, #156]	; (8001060 <chMtxUnlock+0xc0>)
 8000fc4:	f7ff fa84 	bl	80004d0 <chSysHalt>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 8000fc8:	42ae      	cmp	r6, r5
 8000fca:	d1fa      	bne.n	8000fc2 <chMtxUnlock+0x22>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8000fcc:	68ec      	ldr	r4, [r5, #12]
 8000fce:	63bc      	str	r4, [r7, #56]	; 0x38
 *
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 8000fd0:	f7ff faa6 	bl	8000520 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000fd4:	f8d5 9000 	ldr.w	r9, [r5]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000fd8:	454d      	cmp	r5, r9
 8000fda:	d038      	beq.n	800104e <chMtxUnlock+0xae>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8000fdc:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8000fde:	b15c      	cbz	r4, 8000ff8 <chMtxUnlock+0x58>
 8000fe0:	f7ff fa9e 	bl	8000520 <chDbgCheckClassS>
 8000fe4:	6823      	ldr	r3, [r4, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8000fe6:	429c      	cmp	r4, r3
 8000fe8:	d003      	beq.n	8000ff2 <chMtxUnlock+0x52>
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	429e      	cmp	r6, r3
 8000fee:	bf38      	it	cc
 8000ff0:	461e      	movcc	r6, r3
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8000ff2:	68e4      	ldr	r4, [r4, #12]
      while (lmp != NULL) {
 8000ff4:	2c00      	cmp	r4, #0
 8000ff6:	d1f3      	bne.n	8000fe0 <chMtxUnlock+0x40>
  tqp->next             = tp->queue.next;
 8000ff8:	f8d9 3000 	ldr.w	r3, [r9]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8000ffc:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
      ctp->prio = newprio;
 8001000:	60be      	str	r6, [r7, #8]

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001002:	4648      	mov	r0, r9
 8001004:	602b      	str	r3, [r5, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001006:	605d      	str	r5, [r3, #4]
      mp->next = tp->mtxlist;
 8001008:	e9c5 9202 	strd	r9, r2, [r5, #8]
      tp->mtxlist = mp;
 800100c:	f8c9 5038 	str.w	r5, [r9, #56]	; 0x38
      (void) chSchReadyI(tp);
 8001010:	f7ff fb66 	bl	80006e0 <chSchReadyI>
  chDbgCheckClassS();
 8001014:	f7ff fa84 	bl	8000520 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8001018:	f7ff fa92 	bl	8000540 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
 800101c:	f8d8 2000 	ldr.w	r2, [r8]
 8001020:	f8d8 3018 	ldr.w	r3, [r8, #24]
  if (chSchIsRescRequiredI()) {
 8001024:	6892      	ldr	r2, [r2, #8]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	429a      	cmp	r2, r3
 800102a:	d816      	bhi.n	800105a <chMtxUnlock+0xba>
  _dbg_check_unlock();
 800102c:	f7ff fdc8 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001030:	f8d8 3000 	ldr.w	r3, [r8]
 8001034:	4543      	cmp	r3, r8
 8001036:	d005      	beq.n	8001044 <chMtxUnlock+0xa4>
 8001038:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	6892      	ldr	r2, [r2, #8]
 8001040:	429a      	cmp	r2, r3
 8001042:	d307      	bcc.n	8001054 <chMtxUnlock+0xb4>
 8001044:	2300      	movs	r3, #0
 8001046:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 800104a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      mp->owner = NULL;
 800104e:	2300      	movs	r3, #0
 8001050:	60b3      	str	r3, [r6, #8]
 8001052:	e7eb      	b.n	800102c <chMtxUnlock+0x8c>
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <chMtxUnlock+0xc4>)
 8001056:	f7ff fa3b 	bl	80004d0 <chSysHalt>
    chSchDoRescheduleAhead();
 800105a:	f7ff fd81 	bl	8000b60 <chSchDoReschedule>
 800105e:	e7e5      	b.n	800102c <chMtxUnlock+0x8c>
 8001060:	080021f4 	.word	0x080021f4
 8001064:	08002148 	.word	0x08002148
 8001068:	200009d8 	.word	0x200009d8
 800106c:	00000000 	.word	0x00000000

08001070 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	4604      	mov	r4, r0
 8001074:	2320      	movs	r3, #32
 8001076:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800107a:	f7ff fdc9 	bl	8000c10 <_dbg_check_lock>
  thread_t *ctp = currp;
 800107e:	4e3c      	ldr	r6, [pc, #240]	; (8001170 <chMtxLock+0x100>)
  chDbgCheckClassS();
 8001080:	f7ff fa4e 	bl	8000520 <chDbgCheckClassS>
  if (mp->owner != NULL) {
 8001084:	68a0      	ldr	r0, [r4, #8]
  thread_t *ctp = currp;
 8001086:	69b5      	ldr	r5, [r6, #24]
  if (mp->owner != NULL) {
 8001088:	2800      	cmp	r0, #0
 800108a:	d034      	beq.n	80010f6 <chMtxLock+0x86>
      while (tp->prio < ctp->prio) {
 800108c:	68aa      	ldr	r2, [r5, #8]
 800108e:	6883      	ldr	r3, [r0, #8]
 8001090:	4293      	cmp	r3, r2
 8001092:	d207      	bcs.n	80010a4 <chMtxLock+0x34>
        switch (tp->state) {
 8001094:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8001098:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 800109a:	2b06      	cmp	r3, #6
 800109c:	d050      	beq.n	8001140 <chMtxLock+0xd0>
 800109e:	2b07      	cmp	r3, #7
 80010a0:	d038      	beq.n	8001114 <chMtxLock+0xa4>
 80010a2:	b36b      	cbz	r3, 8001100 <chMtxLock+0x90>
  thread_t *cp = (thread_t *)tqp;
 80010a4:	4623      	mov	r3, r4
 80010a6:	e003      	b.n	80010b0 <chMtxLock+0x40>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80010a8:	6899      	ldr	r1, [r3, #8]
 80010aa:	68aa      	ldr	r2, [r5, #8]
 80010ac:	4291      	cmp	r1, r2
 80010ae:	d302      	bcc.n	80010b6 <chMtxLock+0x46>
    cp = cp->queue.next;
 80010b0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80010b2:	429c      	cmp	r4, r3
 80010b4:	d1f8      	bne.n	80010a8 <chMtxLock+0x38>
  tp->queue.prev             = cp->queue.prev;
 80010b6:	685a      	ldr	r2, [r3, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 80010b8:	2006      	movs	r0, #6
 80010ba:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 80010be:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 80010c0:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 80010c2:	626c      	str	r4, [r5, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 80010c4:	f7ff fd0c 	bl	8000ae0 <chSchGoSleepS>
      chDbgAssert(mp->owner == ctp, "not owner");
 80010c8:	68a3      	ldr	r3, [r4, #8]
 80010ca:	429d      	cmp	r5, r3
 80010cc:	d002      	beq.n	80010d4 <chMtxLock+0x64>
 80010ce:	4829      	ldr	r0, [pc, #164]	; (8001174 <chMtxLock+0x104>)
 80010d0:	f7ff f9fe 	bl	80004d0 <chSysHalt>
      chDbgAssert(ctp->mtxlist == mp, "not owned");
 80010d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80010d6:	429c      	cmp	r4, r3
 80010d8:	d1f9      	bne.n	80010ce <chMtxLock+0x5e>
  _dbg_check_unlock();
 80010da:	f7ff fd71 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80010de:	6833      	ldr	r3, [r6, #0]
 80010e0:	42b3      	cmp	r3, r6
 80010e2:	d004      	beq.n	80010ee <chMtxLock+0x7e>
 80010e4:	69b2      	ldr	r2, [r6, #24]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	6892      	ldr	r2, [r2, #8]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d325      	bcc.n	800113a <chMtxLock+0xca>
 80010ee:	2300      	movs	r3, #0
 80010f0:	f383 8811 	msr	BASEPRI, r3
}
 80010f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    mp->next = ctp->mtxlist;
 80010f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80010f8:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 80010fc:	63ac      	str	r4, [r5, #56]	; 0x38
 80010fe:	e7ec      	b.n	80010da <chMtxLock+0x6a>
  tp->queue.prev->queue.next = tp->queue.next;
 8001100:	e9d0 3200 	ldrd	r3, r2, [r0]
          tp->state = CH_STATE_CURRENT;
 8001104:	2101      	movs	r1, #1
 8001106:	f880 1020 	strb.w	r1, [r0, #32]
 800110a:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800110c:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 800110e:	f7ff fae7 	bl	80006e0 <chSchReadyI>
          break;
 8001112:	e7c7      	b.n	80010a4 <chMtxLock+0x34>
  tp->queue.prev->queue.next = tp->queue.next;
 8001114:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8001118:	6a47      	ldr	r7, [r0, #36]	; 0x24
 800111a:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800111c:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 800111e:	463b      	mov	r3, r7
 8001120:	e002      	b.n	8001128 <chMtxLock+0xb8>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001122:	6899      	ldr	r1, [r3, #8]
 8001124:	4291      	cmp	r1, r2
 8001126:	d302      	bcc.n	800112e <chMtxLock+0xbe>
    cp = cp->queue.next;
 8001128:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800112a:	429f      	cmp	r7, r3
 800112c:	d1f9      	bne.n	8001122 <chMtxLock+0xb2>
  tp->queue.prev             = cp->queue.prev;
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001134:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001136:	6058      	str	r0, [r3, #4]
 8001138:	e7b4      	b.n	80010a4 <chMtxLock+0x34>
 800113a:	480f      	ldr	r0, [pc, #60]	; (8001178 <chMtxLock+0x108>)
 800113c:	f7ff f9c8 	bl	80004d0 <chSysHalt>
  tp->queue.prev->queue.next = tp->queue.next;
 8001140:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8001144:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8001146:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001148:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 800114a:	463b      	mov	r3, r7
 800114c:	e002      	b.n	8001154 <chMtxLock+0xe4>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800114e:	6899      	ldr	r1, [r3, #8]
 8001150:	4291      	cmp	r1, r2
 8001152:	d302      	bcc.n	800115a <chMtxLock+0xea>
    cp = cp->queue.next;
 8001154:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001156:	429f      	cmp	r7, r3
 8001158:	d1f9      	bne.n	800114e <chMtxLock+0xde>
  tp->queue.prev             = cp->queue.prev;
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001160:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001162:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8001164:	68b8      	ldr	r0, [r7, #8]
      while (tp->prio < ctp->prio) {
 8001166:	68aa      	ldr	r2, [r5, #8]
 8001168:	6883      	ldr	r3, [r0, #8]
 800116a:	429a      	cmp	r2, r3
 800116c:	d892      	bhi.n	8001094 <chMtxLock+0x24>
 800116e:	e799      	b.n	80010a4 <chMtxLock+0x34>
 8001170:	200009d8 	.word	0x200009d8
 8001174:	0800219c 	.word	0x0800219c
 8001178:	08002148 	.word	0x08002148
 800117c:	00000000 	.word	0x00000000

08001180 <spi_thread_1>:
 8001180:	4d1e      	ldr	r5, [pc, #120]	; (80011fc <spi_thread_1+0x7c>)
 8001182:	4c1f      	ldr	r4, [pc, #124]	; (8001200 <spi_thread_1+0x80>)
 8001184:	69ab      	ldr	r3, [r5, #24]
 8001186:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <spi_thread_1+0x84>)
    palClearPad(GPIOC, GPIOC_LED2);     /* LED ON.                          */
 8001188:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8001214 <spi_thread_1+0x94>
static THD_FUNCTION(spi_thread_1, p) {
 800118c:	b580      	push	{r7, lr}
  spip->config = config;
 800118e:	4f1e      	ldr	r7, [pc, #120]	; (8001208 <spi_thread_1+0x88>)
 8001190:	619a      	str	r2, [r3, #24]
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8001192:	f104 060c 	add.w	r6, r4, #12
 8001196:	4630      	mov	r0, r6
    palClearPad(GPIOC, GPIOC_LED2);     /* LED ON.                          */
 8001198:	f04f 0902 	mov.w	r9, #2
 800119c:	f7ff ff68 	bl	8001070 <chMtxLock>
 80011a0:	f8a8 901a 	strh.w	r9, [r8, #26]
 80011a4:	2320      	movs	r3, #32
 80011a6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80011aa:	f7ff fd31 	bl	8000c10 <_dbg_check_lock>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 80011ae:	7823      	ldrb	r3, [r4, #0]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d81b      	bhi.n	80011ee <spi_thread_1+0x6e>
  spip->config = config;
 80011b6:	6067      	str	r7, [r4, #4]
  spi_lld_start(spip);
 80011b8:	f7ff fbea 	bl	8000990 <spi_lld_start.constprop.0>
  spip->state = SPI_READY;
 80011bc:	f884 9000 	strb.w	r9, [r4]
  _dbg_check_unlock();
 80011c0:	f7ff fcfe 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80011c4:	682b      	ldr	r3, [r5, #0]
 80011c6:	42ab      	cmp	r3, r5
 80011c8:	d004      	beq.n	80011d4 <spi_thread_1+0x54>
 80011ca:	69aa      	ldr	r2, [r5, #24]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	6892      	ldr	r2, [r2, #8]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d30f      	bcc.n	80011f4 <spi_thread_1+0x74>
 80011d4:	2300      	movs	r3, #0
 80011d6:	f383 8811 	msr	BASEPRI, r3
    spiSelect(&SPID2);                  /* Slave Select assertion.          */
 80011da:	f7ff fd29 	bl	8000c30 <spiSelect.constprop.0>
    spiExchange(&SPID2, 512,
 80011de:	f7ff fd87 	bl	8000cf0 <spiExchange.constprop.0>
    spiUnselect(&SPID2);                /* Slave Select de-assertion.       */
 80011e2:	f7ff fd55 	bl	8000c90 <spiUnselect.constprop.0>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 80011e6:	4630      	mov	r0, r6
 80011e8:	f7ff feda 	bl	8000fa0 <chMtxUnlock>
 80011ec:	e7d3      	b.n	8001196 <spi_thread_1+0x16>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <spi_thread_1+0x8c>)
 80011f0:	f7ff f96e 	bl	80004d0 <chSysHalt>
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <spi_thread_1+0x90>)
 80011f6:	f7ff f96b 	bl	80004d0 <chSysHalt>
 80011fa:	bf00      	nop
 80011fc:	200009d8 	.word	0x200009d8
 8001200:	20000830 	.word	0x20000830
 8001204:	080020f8 	.word	0x080020f8
 8001208:	08002448 	.word	0x08002448
 800120c:	08002294 	.word	0x08002294
 8001210:	08002130 	.word	0x08002130
 8001214:	48000800 	.word	0x48000800
	...

08001220 <spi_thread_2>:
 8001220:	4d1e      	ldr	r5, [pc, #120]	; (800129c <spi_thread_2+0x7c>)
 8001222:	4c1f      	ldr	r4, [pc, #124]	; (80012a0 <spi_thread_2+0x80>)
 8001224:	69ab      	ldr	r3, [r5, #24]
 8001226:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <spi_thread_2+0x84>)
    palSetPad(GPIOC, GPIOC_LED2);       /* LED OFF.                         */
 8001228:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80012b4 <spi_thread_2+0x94>
static THD_FUNCTION(spi_thread_2, p) {
 800122c:	b580      	push	{r7, lr}
  spip->config = config;
 800122e:	4f1e      	ldr	r7, [pc, #120]	; (80012a8 <spi_thread_2+0x88>)
 8001230:	619a      	str	r2, [r3, #24]
  chMtxLock(mp);
 8001232:	f104 060c 	add.w	r6, r4, #12
 8001236:	4630      	mov	r0, r6
    palSetPad(GPIOC, GPIOC_LED2);       /* LED OFF.                         */
 8001238:	f04f 0902 	mov.w	r9, #2
 800123c:	f7ff ff18 	bl	8001070 <chMtxLock>
 8001240:	f8a8 9018 	strh.w	r9, [r8, #24]
 8001244:	2320      	movs	r3, #32
 8001246:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800124a:	f7ff fce1 	bl	8000c10 <_dbg_check_lock>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 800124e:	7823      	ldrb	r3, [r4, #0]
 8001250:	3b01      	subs	r3, #1
 8001252:	2b01      	cmp	r3, #1
 8001254:	d81b      	bhi.n	800128e <spi_thread_2+0x6e>
  spip->config = config;
 8001256:	6067      	str	r7, [r4, #4]
  spi_lld_start(spip);
 8001258:	f7ff fb9a 	bl	8000990 <spi_lld_start.constprop.0>
  spip->state = SPI_READY;
 800125c:	f884 9000 	strb.w	r9, [r4]
  _dbg_check_unlock();
 8001260:	f7ff fcae 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001264:	682b      	ldr	r3, [r5, #0]
 8001266:	42ab      	cmp	r3, r5
 8001268:	d004      	beq.n	8001274 <spi_thread_2+0x54>
 800126a:	69aa      	ldr	r2, [r5, #24]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	6892      	ldr	r2, [r2, #8]
 8001270:	429a      	cmp	r2, r3
 8001272:	d30f      	bcc.n	8001294 <spi_thread_2+0x74>
 8001274:	2300      	movs	r3, #0
 8001276:	f383 8811 	msr	BASEPRI, r3
    spiSelect(&SPID2);                  /* Slave Select assertion.          */
 800127a:	f7ff fcd9 	bl	8000c30 <spiSelect.constprop.0>
    spiExchange(&SPID2, 512,
 800127e:	f7ff fd37 	bl	8000cf0 <spiExchange.constprop.0>
    spiUnselect(&SPID2);                /* Slave Select de-assertion.       */
 8001282:	f7ff fd05 	bl	8000c90 <spiUnselect.constprop.0>
  chMtxUnlock(mp);
 8001286:	4630      	mov	r0, r6
 8001288:	f7ff fe8a 	bl	8000fa0 <chMtxUnlock>
 800128c:	e7d3      	b.n	8001236 <spi_thread_2+0x16>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 800128e:	4807      	ldr	r0, [pc, #28]	; (80012ac <spi_thread_2+0x8c>)
 8001290:	f7ff f91e 	bl	80004d0 <chSysHalt>
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <spi_thread_2+0x90>)
 8001296:	f7ff f91b 	bl	80004d0 <chSysHalt>
 800129a:	bf00      	nop
 800129c:	200009d8 	.word	0x200009d8
 80012a0:	20000830 	.word	0x20000830
 80012a4:	08002108 	.word	0x08002108
 80012a8:	0800245c 	.word	0x0800245c
 80012ac:	08002294 	.word	0x08002294
 80012b0:	08002130 	.word	0x08002130
 80012b4:	48000800 	.word	0x48000800
	...

080012c0 <chRegFindThreadByWorkingArea>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa) {
 80012c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012c4:	4607      	mov	r7, r0
 80012c6:	2320      	movs	r3, #32
 80012c8:	f383 8811 	msr	BASEPRI, r3
  tp = ch.rlist.newer;
 80012cc:	4c7b      	ldr	r4, [pc, #492]	; (80014bc <chRegFindThreadByWorkingArea+0x1fc>)
  _dbg_check_lock();
 80012ce:	f7ff fc9f 	bl	8000c10 <_dbg_check_lock>
 80012d2:	6925      	ldr	r5, [r4, #16]
  tp->refs++;
 80012d4:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80012d8:	3301      	adds	r3, #1
 80012da:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
  _dbg_check_unlock();
 80012de:	f7ff fc6f 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	42a3      	cmp	r3, r4
 80012e6:	d004      	beq.n	80012f2 <chRegFindThreadByWorkingArea+0x32>
 80012e8:	69a2      	ldr	r2, [r4, #24]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	6892      	ldr	r2, [r2, #8]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d342      	bcc.n	8001378 <chRegFindThreadByWorkingArea+0xb8>
 80012f2:	f04f 0800 	mov.w	r8, #0
 80012f6:	f388 8811 	msr	BASEPRI, r8
 80012fa:	f04f 0920 	mov.w	r9, #32
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 80012fe:	69eb      	ldr	r3, [r5, #28]
 8001300:	429f      	cmp	r7, r3
 8001302:	f000 8085 	beq.w	8001410 <chRegFindThreadByWorkingArea+0x150>
 8001306:	f389 8811 	msr	BASEPRI, r9
  _dbg_check_lock();
 800130a:	f7ff fc81 	bl	8000c10 <_dbg_check_lock>
  ntp = tp->newer;
 800130e:	692e      	ldr	r6, [r5, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 8001310:	42a6      	cmp	r6, r4
 8001312:	d04c      	beq.n	80013ae <chRegFindThreadByWorkingArea+0xee>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8001314:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
 8001318:	2bff      	cmp	r3, #255	; 0xff
 800131a:	d045      	beq.n	80013a8 <chRegFindThreadByWorkingArea+0xe8>
    ntp->refs++;
 800131c:	3301      	adds	r3, #1
 800131e:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
  _dbg_check_unlock();
 8001322:	f7ff fc4d 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	42a3      	cmp	r3, r4
 800132a:	d004      	beq.n	8001336 <chRegFindThreadByWorkingArea+0x76>
 800132c:	69a2      	ldr	r2, [r4, #24]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	6892      	ldr	r2, [r2, #8]
 8001332:	429a      	cmp	r2, r3
 8001334:	d320      	bcc.n	8001378 <chRegFindThreadByWorkingArea+0xb8>
 8001336:	f388 8811 	msr	BASEPRI, r8
 800133a:	f389 8811 	msr	BASEPRI, r9
  _dbg_check_lock();
 800133e:	f7ff fc67 	bl	8000c10 <_dbg_check_lock>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8001342:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8001346:	b1d3      	cbz	r3, 800137e <chRegFindThreadByWorkingArea+0xbe>
  tp->refs--;
 8001348:	3b01      	subs	r3, #1
 800134a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 800134e:	6a2b      	ldr	r3, [r5, #32]
 8001350:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d015      	beq.n	8001384 <chRegFindThreadByWorkingArea+0xc4>
  _dbg_check_unlock();
 8001358:	f7ff fc32 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	42a3      	cmp	r3, r4
 8001360:	d004      	beq.n	800136c <chRegFindThreadByWorkingArea+0xac>
 8001362:	69a2      	ldr	r2, [r4, #24]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	6892      	ldr	r2, [r2, #8]
 8001368:	429a      	cmp	r2, r3
 800136a:	d31a      	bcc.n	80013a2 <chRegFindThreadByWorkingArea+0xe2>
 800136c:	f388 8811 	msr	BASEPRI, r8
      return ctp;
    }
    ctp = chRegNextThread(ctp);
  } while (ctp != NULL);
 8001370:	2e00      	cmp	r6, #0
 8001372:	d04e      	beq.n	8001412 <chRegFindThreadByWorkingArea+0x152>
 8001374:	4635      	mov	r5, r6
 8001376:	e7c2      	b.n	80012fe <chRegFindThreadByWorkingArea+0x3e>
 8001378:	4851      	ldr	r0, [pc, #324]	; (80014c0 <chRegFindThreadByWorkingArea+0x200>)
 800137a:	f7ff f8a9 	bl	80004d0 <chSysHalt>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 800137e:	4851      	ldr	r0, [pc, #324]	; (80014c4 <chRegFindThreadByWorkingArea+0x204>)
 8001380:	f7ff f8a6 	bl	80004d0 <chSysHalt>
    REG_REMOVE(tp);
 8001384:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	692a      	ldr	r2, [r5, #16]
 800138c:	6153      	str	r3, [r2, #20]
  _dbg_check_unlock();
 800138e:	f7ff fc17 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	42a3      	cmp	r3, r4
 8001396:	d00c      	beq.n	80013b2 <chRegFindThreadByWorkingArea+0xf2>
 8001398:	69a2      	ldr	r2, [r4, #24]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	6892      	ldr	r2, [r2, #8]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d207      	bcs.n	80013b2 <chRegFindThreadByWorkingArea+0xf2>
 80013a2:	4849      	ldr	r0, [pc, #292]	; (80014c8 <chRegFindThreadByWorkingArea+0x208>)
 80013a4:	f7ff f894 	bl	80004d0 <chSysHalt>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 80013a8:	4848      	ldr	r0, [pc, #288]	; (80014cc <chRegFindThreadByWorkingArea+0x20c>)
 80013aa:	f7ff f891 	bl	80004d0 <chSysHalt>
    ntp = NULL;
 80013ae:	2600      	movs	r6, #0
 80013b0:	e7b7      	b.n	8001322 <chRegFindThreadByWorkingArea+0x62>
 80013b2:	f388 8811 	msr	BASEPRI, r8
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 80013b6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d02a      	beq.n	8001418 <chRegFindThreadByWorkingArea+0x158>
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d1d4      	bne.n	8001370 <chRegFindThreadByWorkingArea+0xb0>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 80013c6:	f8d5 a040 	ldr.w	sl, [r5, #64]	; 0x40
 80013ca:	69ed      	ldr	r5, [r5, #28]
 80013cc:	f389 8811 	msr	BASEPRI, r9
  _dbg_check_lock();
 80013d0:	f7ff fc1e 	bl	8000c10 <_dbg_check_lock>
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  struct pool_header *php = objp;

  chDbgCheckClassI();
 80013d4:	f7ff f8b4 	bl	8000540 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) &&
 80013d8:	f1ba 0f00 	cmp.w	sl, #0
 80013dc:	d05b      	beq.n	8001496 <chRegFindThreadByWorkingArea+0x1d6>
 80013de:	2d00      	cmp	r5, #0
 80013e0:	d059      	beq.n	8001496 <chRegFindThreadByWorkingArea+0x1d6>
 80013e2:	f8da 3008 	ldr.w	r3, [sl, #8]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	421d      	tst	r5, r3
 80013ea:	d154      	bne.n	8001496 <chRegFindThreadByWorkingArea+0x1d6>
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 80013ec:	f8da 3000 	ldr.w	r3, [sl]
 80013f0:	602b      	str	r3, [r5, #0]
  mp->next = php;
 80013f2:	f8ca 5000 	str.w	r5, [sl]
  _dbg_check_unlock();
 80013f6:	f7ff fbe3 	bl	8000bc0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	42a3      	cmp	r3, r4
 80013fe:	d0b5      	beq.n	800136c <chRegFindThreadByWorkingArea+0xac>
 8001400:	69a2      	ldr	r2, [r4, #24]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	6892      	ldr	r2, [r2, #8]
 8001406:	429a      	cmp	r2, r3
 8001408:	d2b0      	bcs.n	800136c <chRegFindThreadByWorkingArea+0xac>
 800140a:	4831      	ldr	r0, [pc, #196]	; (80014d0 <chRegFindThreadByWorkingArea+0x210>)
 800140c:	f7ff f860 	bl	80004d0 <chSysHalt>
    if (chThdGetWorkingAreaX(ctp) == wa) {
 8001410:	462e      	mov	r6, r5

  return NULL;
}
 8001412:	4630      	mov	r0, r6
 8001414:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      chHeapFree(chThdGetWorkingAreaX(tp));
 8001418:	69ed      	ldr	r5, [r5, #28]
 */
void chHeapFree(void *p) {
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 800141a:	b3cd      	cbz	r5, 8001490 <chRegFindThreadByWorkingArea+0x1d0>
 800141c:	076b      	lsls	r3, r5, #29
 800141e:	d137      	bne.n	8001490 <chRegFindThreadByWorkingArea+0x1d0>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8001420:	e955 2302 	ldrd	r2, r3, [r5, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8001424:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8001426:	08db      	lsrs	r3, r3, #3

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8001428:	f102 0b0c 	add.w	fp, r2, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800142c:	f845 3c04 	str.w	r3, [r5, #-4]
  qp = &heapp->header;
 8001430:	f102 0a04 	add.w	sl, r2, #4
  H_LOCK(heapp);
 8001434:	4658      	mov	r0, fp
 8001436:	f7ff fe1b 	bl	8001070 <chMtxLock>
  hp = (heap_header_t *)p - 1U;
 800143a:	f1a5 0108 	sub.w	r1, r5, #8
  qp = &heapp->header;
 800143e:	4653      	mov	r3, sl

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 8001440:	4299      	cmp	r1, r3
 8001442:	d305      	bcc.n	8001450 <chRegFindThreadByWorkingArea+0x190>
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	3201      	adds	r2, #1
 8001448:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800144c:	4291      	cmp	r1, r2
 800144e:	d31f      	bcc.n	8001490 <chRegFindThreadByWorkingArea+0x1d0>

    if (((qp == &heapp->header) || (hp > qp)) &&
 8001450:	459a      	cmp	sl, r3
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8001452:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8001454:	d001      	beq.n	800145a <chRegFindThreadByWorkingArea+0x19a>
 8001456:	4299      	cmp	r1, r3
 8001458:	d918      	bls.n	800148c <chRegFindThreadByWorkingArea+0x1cc>
 800145a:	b10a      	cbz	r2, 8001460 <chRegFindThreadByWorkingArea+0x1a0>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800145c:	4291      	cmp	r1, r2
 800145e:	d215      	bcs.n	800148c <chRegFindThreadByWorkingArea+0x1cc>
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8001460:	f855 0c04 	ldr.w	r0, [r5, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 8001464:	f845 2c08 	str.w	r2, [r5, #-8]
      H_NEXT(qp) = hp;
 8001468:	6019      	str	r1, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800146a:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800146e:	3001      	adds	r0, #1
 8001470:	eb01 0cc0 	add.w	ip, r1, r0, lsl #3
 8001474:	4562      	cmp	r2, ip
 8001476:	d018      	beq.n	80014aa <chRegFindThreadByWorkingArea+0x1ea>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
 8001478:	6858      	ldr	r0, [r3, #4]
 800147a:	1c42      	adds	r2, r0, #1
 800147c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001480:	4291      	cmp	r1, r2
 8001482:	d00b      	beq.n	800149c <chRegFindThreadByWorkingArea+0x1dc>
    }
    qp = H_NEXT(qp);
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8001484:	4658      	mov	r0, fp
 8001486:	f7ff fd8b 	bl	8000fa0 <chMtxUnlock>

  return;
 800148a:	e771      	b.n	8001370 <chRegFindThreadByWorkingArea+0xb0>
    qp = H_NEXT(qp);
 800148c:	4613      	mov	r3, r2
  while (true) {
 800148e:	e7d7      	b.n	8001440 <chRegFindThreadByWorkingArea+0x180>
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 8001490:	4810      	ldr	r0, [pc, #64]	; (80014d4 <chRegFindThreadByWorkingArea+0x214>)
 8001492:	f7ff f81d 	bl	80004d0 <chSysHalt>
  chDbgCheck((mp != NULL) &&
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <chRegFindThreadByWorkingArea+0x218>)
 8001498:	f7ff f81a 	bl	80004d0 <chSysHalt>
        H_NEXT(qp) = H_NEXT(hp);
 800149c:	e955 1202 	ldrd	r1, r2, [r5, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80014a0:	3201      	adds	r2, #1
 80014a2:	4402      	add	r2, r0
        H_NEXT(qp) = H_NEXT(hp);
 80014a4:	6019      	str	r1, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80014a6:	605a      	str	r2, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 80014a8:	e7ec      	b.n	8001484 <chRegFindThreadByWorkingArea+0x1c4>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80014aa:	e9d2 2c00 	ldrd	r2, ip, [r2]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80014ae:	4460      	add	r0, ip
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80014b0:	f845 2c08 	str.w	r2, [r5, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80014b4:	f845 0c04 	str.w	r0, [r5, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80014b8:	e7de      	b.n	8001478 <chRegFindThreadByWorkingArea+0x1b8>
 80014ba:	bf00      	nop
 80014bc:	200009d8 	.word	0x200009d8
 80014c0:	08002178 	.word	0x08002178
 80014c4:	08002224 	.word	0x08002224
 80014c8:	0800213c 	.word	0x0800213c
 80014cc:	08002268 	.word	0x08002268
 80014d0:	08002160 	.word	0x08002160
 80014d4:	080021e8 	.word	0x080021e8
 80014d8:	080021dc 	.word	0x080021dc
 80014dc:	00000000 	.word	0x00000000

080014e0 <chThdCreateStatic.constprop.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 80014e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chDbgCheck((wsp != NULL) &&
 80014e4:	0744      	lsls	r4, r0, #29
 80014e6:	d106      	bne.n	80014f6 <chThdCreateStatic.constprop.0+0x16>
 80014e8:	4680      	mov	r8, r0
 80014ea:	460c      	mov	r4, r1
 80014ec:	4691      	mov	r9, r2
 80014ee:	469a      	mov	sl, r3
  chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 80014f0:	f7ff fee6 	bl	80012c0 <chRegFindThreadByWorkingArea>
 80014f4:	b110      	cbz	r0, 80014fc <chThdCreateStatic.constprop.0+0x1c>
  chDbgCheck((wsp != NULL) &&
 80014f6:	4821      	ldr	r0, [pc, #132]	; (800157c <chThdCreateStatic.constprop.0+0x9c>)
 80014f8:	f7fe ffea 	bl	80004d0 <chSysHalt>
  _thread_memfill((uint8_t *)wsp,
 80014fc:	eb08 0604 	add.w	r6, r8, r4
  while (startp < endp) {
 8001500:	45b0      	cmp	r8, r6
 8001502:	d205      	bcs.n	8001510 <chThdCreateStatic.constprop.0+0x30>
 8001504:	4645      	mov	r5, r8
    *startp++ = v;
 8001506:	2755      	movs	r7, #85	; 0x55
 8001508:	f805 7b01 	strb.w	r7, [r5], #1
  while (startp < endp) {
 800150c:	42ae      	cmp	r6, r5
 800150e:	d1fb      	bne.n	8001508 <chThdCreateStatic.constprop.0+0x28>
 8001510:	2320      	movs	r3, #32
 8001512:	f383 8811 	msr	BASEPRI, r3
  tp = (thread_t *)((uint8_t *)wsp + size -
 8001516:	3c48      	subs	r4, #72	; 0x48
 8001518:	4444      	add	r4, r8
  _dbg_check_lock();
 800151a:	f7ff fb79 	bl	8000c10 <_dbg_check_lock>
  REG_INSERT(tp);
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <chThdCreateStatic.constprop.0+0xa0>)
 8001520:	6123      	str	r3, [r4, #16]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001522:	f1a4 0224 	sub.w	r2, r4, #36	; 0x24
 8001526:	4917      	ldr	r1, [pc, #92]	; (8001584 <chThdCreateStatic.constprop.0+0xa4>)
  REG_INSERT(tp);
 8001528:	6958      	ldr	r0, [r3, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800152a:	60e2      	str	r2, [r4, #12]
 800152c:	f844 1c04 	str.w	r1, [r4, #-4]
  tp->state     = CH_STATE_WTSTART;
 8001530:	2502      	movs	r5, #2
  tp->name      = name;
 8001532:	4915      	ldr	r1, [pc, #84]	; (8001588 <chThdCreateStatic.constprop.0+0xa8>)
  tp->state     = CH_STATE_WTSTART;
 8001534:	8425      	strh	r5, [r4, #32]
  tp->refs      = (trefs_t)1;
 8001536:	2201      	movs	r2, #1
 8001538:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  tp->name      = name;
 800153c:	61a1      	str	r1, [r4, #24]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800153e:	2200      	movs	r2, #0
  queue_init(&tp->msgqueue);
 8001540:	f104 012c 	add.w	r1, r4, #44	; 0x2c
  list_init(&tp->waiting);
 8001544:	f104 0528 	add.w	r5, r4, #40	; 0x28
  REG_INSERT(tp);
 8001548:	6160      	str	r0, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800154a:	f844 2c20 	str.w	r2, [r4, #-32]
  tp->epending  = (eventmask_t)0;
 800154e:	e9c4 220d 	strd	r2, r2, [r4, #52]	; 0x34
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001552:	f844 ac24 	str.w	sl, [r4, #-36]
  tp->prio      = prio;
 8001556:	f8c4 9008 	str.w	r9, [r4, #8]
  tp->wabase = (stkalign_t *)wsp;
 800155a:	f8c4 801c 	str.w	r8, [r4, #28]
  tp->realprio  = prio;
 800155e:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
  REG_INSERT(tp);
 8001562:	6104      	str	r4, [r0, #16]
  chSchWakeupS(tp, MSG_OK);
 8001564:	4620      	mov	r0, r4
  tqp->next = (thread_t *)tqp;
 8001566:	e9c4 510a 	strd	r5, r1, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 800156a:	6321      	str	r1, [r4, #48]	; 0x30
  REG_INSERT(tp);
 800156c:	615c      	str	r4, [r3, #20]
  chSchWakeupS(tp, MSG_OK);
 800156e:	f7ff fa77 	bl	8000a60 <chSchWakeupS.constprop.0>
  chSysUnlock();
 8001572:	f7ff fb35 	bl	8000be0 <chSysUnlock.lto_priv.1>
}
 8001576:	4620      	mov	r0, r4
 8001578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800157c:	08002200 	.word	0x08002200
 8001580:	200009d8 	.word	0x200009d8
 8001584:	08000291 	.word	0x08000291
 8001588:	08002118 	.word	0x08002118
 800158c:	00000000 	.word	0x00000000

08001590 <main>:
void hal_lld_init(void) {

  /* Reset of all peripherals.
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB(~STM32_GPIO_EN_MASK);
 8001590:	4b21      	ldr	r3, [pc, #132]	; (8001618 <main+0x88>)
  PWR->CR |= PWR_CR_DBP;
 8001592:	4822      	ldr	r0, [pc, #136]	; (800161c <main+0x8c>)
  rccResetAHB(~STM32_GPIO_EN_MASK);
 8001594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001596:	f462 02fc 	orn	r2, r2, #8257536	; 0x7e0000
}

/*
 * Application entry point.
 */
int main(void) {
 800159a:	b580      	push	{r7, lr}
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
 800159e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015a0:	f402 02fc 	and.w	r2, r2, #8257536	; 0x7e0000
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 80015a6:	f04f 31ff 	mov.w	r1, #4294967295
  rccResetAHB(~STM32_GPIO_EN_MASK);
 80015aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	6119      	str	r1, [r3, #16]
 80015b0:	2200      	movs	r2, #0
 80015b2:	691c      	ldr	r4, [r3, #16]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	691c      	ldr	r4, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 80015b8:	68dc      	ldr	r4, [r3, #12]
 80015ba:	60d9      	str	r1, [r3, #12]
 80015bc:	68d9      	ldr	r1, [r3, #12]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	68d9      	ldr	r1, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 80015c2:	69d9      	ldr	r1, [r3, #28]
 80015c4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80015c8:	61d9      	str	r1, [r3, #28]
 80015ca:	69d9      	ldr	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 80015cc:	6801      	ldr	r1, [r0, #0]
 80015ce:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80015d2:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80015d4:	6a19      	ldr	r1, [r3, #32]
 80015d6:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80015da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80015de:	b086      	sub	sp, #24
 80015e0:	d003      	beq.n	80015ea <main+0x5a>
    RCC->BDCR = RCC_BDCR_BDRST;
 80015e2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80015e6:	6219      	str	r1, [r3, #32]
    RCC->BDCR = 0;
 80015e8:	621a      	str	r2, [r3, #32]
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <main+0x88>)
 80015ec:	6a1a      	ldr	r2, [r3, #32]
 80015ee:	0412      	lsls	r2, r2, #16
 80015f0:	d407      	bmi.n	8001602 <main+0x72>
    RCC->BDCR |= STM32_RTCSEL;
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015f8:	621a      	str	r2, [r3, #32]
    RCC->BDCR |= RCC_BDCR_RTCEN;
 80015fa:	6a1a      	ldr	r2, [r3, #32]
 80015fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001600:	621a      	str	r2, [r3, #32]
  dma.allocated_mask = 0U;
 8001602:	4907      	ldr	r1, [pc, #28]	; (8001620 <main+0x90>)
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <main+0x94>)
  dma.isr_mask       = 0U;
 8001606:	4c08      	ldr	r4, [pc, #32]	; (8001628 <main+0x98>)
  dma.allocated_mask = 0U;
 8001608:	2300      	movs	r3, #0
  dma.isr_mask       = 0U;
 800160a:	e9c1 3300 	strd	r3, r3, [r1]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800160e:	460a      	mov	r2, r1
 8001610:	f101 0560 	add.w	r5, r1, #96	; 0x60
 8001614:	e00b      	b.n	800162e <main+0x9e>
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	40007000 	.word	0x40007000
 8001620:	200013a4 	.word	0x200013a4
 8001624:	08002370 	.word	0x08002370
 8001628:	40020008 	.word	0x40020008
 800162c:	6844      	ldr	r4, [r0, #4]
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800162e:	6023      	str	r3, [r4, #0]
    dma.streams[i].func = NULL;
 8001630:	f842 3f08 	str.w	r3, [r2, #8]!
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001634:	4295      	cmp	r5, r2
 8001636:	f100 0010 	add.w	r0, r0, #16
 800163a:	d1f7      	bne.n	800162c <main+0x9c>
  spip->state = SPI_STOP;
 800163c:	4db1      	ldr	r5, [pc, #708]	; (8001904 <main+0x374>)
  DMA1->IFCR = 0xFFFFFFFFU;
 800163e:	4fb2      	ldr	r7, [pc, #712]	; (8001908 <main+0x378>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001640:	4ab2      	ldr	r2, [pc, #712]	; (800190c <main+0x37c>)
  DMA2->IFCR = 0xFFFFFFFFU;
 8001642:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8001964 <main+0x3d4>
  spip->config = NULL;
 8001646:	606b      	str	r3, [r5, #4]
  DMA1->IFCR = 0xFFFFFFFFU;
 8001648:	f04f 3cff 	mov.w	ip, #4294967295
 800164c:	f8c7 c004 	str.w	ip, [r7, #4]
 8001650:	2160      	movs	r1, #96	; 0x60
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001652:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001656:	f04f 0840 	mov.w	r8, #64	; 0x40
 800165a:	f04f 0e80 	mov.w	lr, #128	; 0x80
 800165e:	f44f 7700 	mov.w	r7, #512	; 0x200
  DMA2->IFCR = 0xFFFFFFFFU;
 8001662:	f8c9 c004 	str.w	ip, [r9, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001666:	f882 1306 	strb.w	r1, [r2, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800166a:	f8c2 8180 	str.w	r8, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800166e:	f8c2 8000 	str.w	r8, [r2]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001672:	f882 1307 	strb.w	r1, [r2, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001676:	f8c2 e180 	str.w	lr, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800167a:	f8c2 e000 	str.w	lr, [r2]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800167e:	f882 1308 	strb.w	r1, [r2, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001682:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001686:	6014      	str	r4, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001688:	f882 1309 	strb.w	r1, [r2, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800168c:	f8c2 7180 	str.w	r7, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001690:	6017      	str	r7, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001692:	f44f 6780 	mov.w	r7, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001696:	f882 130a 	strb.w	r1, [r2, #778]	; 0x30a
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 800169a:	4e9d      	ldr	r6, [pc, #628]	; (8001910 <main+0x380>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800169c:	f8c2 7180 	str.w	r7, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80016a0:	6017      	str	r7, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80016a2:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80016a6:	f882 1317 	strb.w	r1, [r2, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80016aa:	f8c2 7180 	str.w	r7, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80016ae:	6017      	str	r7, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80016b0:	f882 1328 	strb.w	r1, [r2, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80016b4:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80016b8:	6054      	str	r4, [r2, #4]
 80016ba:	69b4      	ldr	r4, [r6, #24]
  spip->state = SPI_STOP;
 80016bc:	4895      	ldr	r0, [pc, #596]	; (8001914 <main+0x384>)
 80016be:	4996      	ldr	r1, [pc, #600]	; (8001918 <main+0x388>)
  spip->thread = NULL;
 80016c0:	60ab      	str	r3, [r5, #8]
 80016c2:	f044 0401 	orr.w	r4, r4, #1
  spip->state = SPI_STOP;
 80016c6:	2701      	movs	r7, #1
 80016c8:	61b4      	str	r4, [r6, #24]
  SPID1.spi       = SPI1;
 80016ca:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8001968 <main+0x3d8>
 80016ce:	f8d6 9018 	ldr.w	r9, [r6, #24]
  mp->owner = NULL;
 80016d2:	616b      	str	r3, [r5, #20]
  tqp->next = (thread_t *)tqp;
 80016d4:	f105 040c 	add.w	r4, r5, #12
  tqp->prev = (thread_t *)tqp;
 80016d8:	e9c5 4403 	strd	r4, r4, [r5, #12]
 80016dc:	702f      	strb	r7, [r5, #0]
 80016de:	f8c5 801c 	str.w	r8, [r5, #28]
 80016e2:	7007      	strb	r7, [r0, #0]
 80016e4:	700f      	strb	r7, [r1, #0]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80016e6:	69f4      	ldr	r4, [r6, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80016e8:	f8df 9280 	ldr.w	r9, [pc, #640]	; 800196c <main+0x3dc>
  SPID1.dmarx     = NULL;
 80016ec:	622b      	str	r3, [r5, #32]
  ST_ENABLE_CLOCK();
 80016ee:	433c      	orrs	r4, r7
 80016f0:	61f4      	str	r4, [r6, #28]
 80016f2:	69f4      	ldr	r4, [r6, #28]
  ST_ENABLE_STOP();
 80016f4:	f8d9 8008 	ldr.w	r8, [r9, #8]
  SPID1.dmatx     = NULL;
 80016f8:	626b      	str	r3, [r5, #36]	; 0x24

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80016fa:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 80016fe:	ea48 0807 	orr.w	r8, r8, r7
  spip->thread = NULL;
 8001702:	e9c0 3301 	strd	r3, r3, [r0, #4]
  SPID2.dmatx     = NULL;
 8001706:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800170a:	e9c1 3301 	strd	r3, r3, [r1, #4]
  SPID3.dmatx     = NULL;
 800170e:	e9c1 3308 	strd	r3, r3, [r1, #32]
 8001712:	6143      	str	r3, [r0, #20]
 8001714:	614b      	str	r3, [r1, #20]
 8001716:	f8c9 8008 	str.w	r8, [r9, #8]
  SPID2.spi       = SPI2;
 800171a:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8001970 <main+0x3e0>
  tqp->next = (thread_t *)tqp;
 800171e:	4c7f      	ldr	r4, [pc, #508]	; (800191c <main+0x38c>)
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001720:	f641 481f 	movw	r8, #7199	; 0x1c1f
 8001724:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8001728:	f8c0 901c 	str.w	r9, [r0, #28]
  SPID3.spi       = SPI3;
 800172c:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8001974 <main+0x3e4>
 8001730:	f8c1 801c 	str.w	r8, [r1, #28]
 8001734:	f100 090c 	add.w	r9, r0, #12
  tqp->prev = (thread_t *)tqp;
 8001738:	e9c0 9903 	strd	r9, r9, [r0, #12]
  tqp->next = (thread_t *)tqp;
 800173c:	f101 080c 	add.w	r8, r1, #12
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_STREAM) |
 8001740:	f241 090a 	movw	r9, #4106	; 0x100a
  tqp->prev = (thread_t *)tqp;
 8001744:	e9c1 8803 	strd	r8, r8, [r1, #12]
 8001748:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_STREAM) |
 800174c:	f241 0818 	movw	r8, #4120	; 0x1018
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_STREAM) |
 8001750:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  SPID3.rxdmamode = STM32_DMA_CR_CHSEL(SPI3_RX_DMA_STREAM) |
 8001754:	f8c1 9028 	str.w	r9, [r1, #40]	; 0x28
  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 8001758:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8001978 <main+0x3e8>
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_STREAM) |
 800175c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_STREAM) |
 8001760:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
  SPID3.txdmamode = STM32_DMA_CR_CHSEL(SPI3_TX_DMA_STREAM) |
 8001764:	f8c1 802c 	str.w	r8, [r1, #44]	; 0x2c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001768:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 800176c:	f104 011c 	add.w	r1, r4, #28
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8001770:	f104 0540 	add.w	r5, r4, #64	; 0x40
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001774:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8001778:	61b3      	str	r3, [r6, #24]
  ch.vtlist.delta = (sysinterval_t)-1;
 800177a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  STM32_ST_TIM->CCR[0] = 0;
 800177e:	6373      	str	r3, [r6, #52]	; 0x34
 8001780:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8001782:	60f3      	str	r3, [r6, #12]
  ch.rlist.prio = NOPRIO;
 8001784:	60a3      	str	r3, [r4, #8]
  STM32_ST_TIM->CR2    = 0;
 8001786:	6073      	str	r3, [r6, #4]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8001788:	6124      	str	r4, [r4, #16]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800178a:	6177      	str	r7, [r6, #20]
  ch.rlist.older = (thread_t *)&ch.rlist;
 800178c:	6164      	str	r4, [r4, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800178e:	6037      	str	r7, [r6, #0]
  ch.vtlist.lasttime = (systime_t)0;
 8001790:	62a3      	str	r3, [r4, #40]	; 0x28
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001792:	f882 e31c 	strb.w	lr, [r2, #796]	; 0x31c
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8001796:	2300      	movs	r3, #0
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8001798:	e9c4 950e 	strd	r9, r5, [r4, #56]	; 0x38
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800179c:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80017a0:	61e1      	str	r1, [r4, #28]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80017a2:	6010      	str	r0, [r2, #0]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80017a4:	6221      	str	r1, [r4, #32]
  tqp->next = (thread_t *)tqp;
 80017a6:	6024      	str	r4, [r4, #0]
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80017a8:	3301      	adds	r3, #1
 80017aa:	eb04 1203 	add.w	r2, r4, r3, lsl #4
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80017ae:	2b80      	cmp	r3, #128	; 0x80
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80017b0:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80017b4:	f36f 0102 	bfc	r1, #0, #3
 80017b8:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80017bc:	d1f4      	bne.n	80017a8 <main+0x218>
  default_heap.provider = chCoreAllocAlignedWithOffset;
 80017be:	4958      	ldr	r1, [pc, #352]	; (8001920 <main+0x390>)
 80017c0:	4b58      	ldr	r3, [pc, #352]	; (8001924 <main+0x394>)
 80017c2:	4a59      	ldr	r2, [pc, #356]	; (8001928 <main+0x398>)
 80017c4:	600a      	str	r2, [r1, #0]
 80017c6:	f101 020c 	add.w	r2, r1, #12
  tqp->prev = (thread_t *)tqp;
 80017ca:	e9c1 2203 	strd	r2, r2, [r1, #12]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 80017ce:	f103 0210 	add.w	r2, r3, #16
 80017d2:	611a      	str	r2, [r3, #16]
  mp->object_size = size;
 80017d4:	2214      	movs	r2, #20
 80017d6:	619a      	str	r2, [r3, #24]
 80017d8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
 80017de:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
 80017e4:	221c      	movs	r2, #28
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
 80017e8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80017ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80017ee:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
 80017f4:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80017f8:	645a      	str	r2, [r3, #68]	; 0x44
  ch_memcore.basemem = __heap_base__;
 80017fa:	484c      	ldr	r0, [pc, #304]	; (800192c <main+0x39c>)
  mp->provider = provider;
 80017fc:	4e4c      	ldr	r6, [pc, #304]	; (8001930 <main+0x3a0>)
 80017fe:	621e      	str	r6, [r3, #32]
  H_NEXT(&default_heap.header) = NULL;
 8001800:	2200      	movs	r2, #0
  mp->align = align;
 8001802:	2504      	movs	r5, #4
  H_PAGES(&default_heap.header) = 0;
 8001804:	e9c1 2201 	strd	r2, r2, [r1, #4]
 8001808:	614a      	str	r2, [r1, #20]
 800180a:	609a      	str	r2, [r3, #8]
  mp->next = NULL;
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001810:	e9c3 3300 	strd	r3, r3, [r3]
  ch.dbg.lock_cnt = (cnt_t)0;
 8001814:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  tmp->last       = (rtcnt_t)0;
 8001818:	e9cd 2201 	strd	r2, r2, [sp, #4]
  ch.tm.offset = (rtcnt_t)0;
 800181c:	f8c4 2884 	str.w	r2, [r4, #2180]	; 0x884
  tmp->n          = (ucnt_t)0;
 8001820:	9203      	str	r2, [sp, #12]
  mp->align = align;
 8001822:	61dd      	str	r5, [r3, #28]
 8001824:	4a43      	ldr	r2, [pc, #268]	; (8001934 <main+0x3a4>)
 8001826:	635d      	str	r5, [r3, #52]	; 0x34
  mp->provider = provider;
 8001828:	639e      	str	r6, [r3, #56]	; 0x38
  ch_memcore.topmem  = __heap_end__;
 800182a:	4b43      	ldr	r3, [pc, #268]	; (8001938 <main+0x3a8>)
  ch_memcore.basemem = __heap_base__;
 800182c:	6002      	str	r2, [r0, #0]
  ch_memcore.topmem  = __heap_end__;
 800182e:	6043      	str	r3, [r0, #4]
  tmp->best       = (rtcnt_t)-1;
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
  tmp->cumulative = (rttime_t)0;
 8001834:	2200      	movs	r2, #0
 8001836:	2300      	movs	r3, #0
  tmp->best       = (rtcnt_t)-1;
 8001838:	9100      	str	r1, [sp, #0]
  tmp->cumulative = (rttime_t)0;
 800183a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    chTMStartMeasurementX(&tm);
 800183e:	4668      	mov	r0, sp
 8001840:	f7fe fdde 	bl	8000400 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8001844:	4668      	mov	r0, sp
 8001846:	f7fe fdb3 	bl	80003b0 <chTMStopMeasurementX>
  } while (i > 0U);
 800184a:	3d01      	subs	r5, #1
 800184c:	d1f7      	bne.n	800183e <main+0x2ae>
  ch.tm.offset = tm.best;
 800184e:	9900      	ldr	r1, [sp, #0]
  REG_INSERT(tp);
 8001850:	4b3a      	ldr	r3, [pc, #232]	; (800193c <main+0x3ac>)
 8001852:	6962      	ldr	r2, [r4, #20]
 8001854:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
  tp->prio      = prio;
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	f8c4 1848 	str.w	r1, [r4, #2120]	; 0x848
  tp->realprio  = prio;
 800185e:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
  tp->name      = name;
 8001862:	4e37      	ldr	r6, [pc, #220]	; (8001940 <main+0x3b0>)
  REG_INSERT(tp);
 8001864:	f8c4 2854 	str.w	r2, [r4, #2132]	; 0x854
  tp->refs      = (trefs_t)1;
 8001868:	2101      	movs	r1, #1
  tp->name      = name;
 800186a:	f8c4 6858 	str.w	r6, [r4, #2136]	; 0x858
    currp->wabase = &__main_thread_stack_base__;
 800186e:	4835      	ldr	r0, [pc, #212]	; (8001944 <main+0x3b4>)
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001870:	f884 5861 	strb.w	r5, [r4, #2145]	; 0x861
  tp->mtxlist   = NULL;
 8001874:	f8c4 5878 	str.w	r5, [r4, #2168]	; 0x878
  tp->epending  = (eventmask_t)0;
 8001878:	f8c4 5874 	str.w	r5, [r4, #2164]	; 0x874
  REG_INSERT(tp);
 800187c:	f8c4 4850 	str.w	r4, [r4, #2128]	; 0x850
  tp->refs      = (trefs_t)1;
 8001880:	f884 1862 	strb.w	r1, [r4, #2146]	; 0x862
  tlp->next = (thread_t *)tlp;
 8001884:	f103 0628 	add.w	r6, r3, #40	; 0x28
  REG_INSERT(tp);
 8001888:	6113      	str	r3, [r2, #16]
  tqp->next = (thread_t *)tqp;
 800188a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800188e:	f8c4 085c 	str.w	r0, [r4, #2140]	; 0x85c
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8001892:	e9c4 3305 	strd	r3, r3, [r4, #20]
  currp->state = CH_STATE_CURRENT;
 8001896:	f884 1860 	strb.w	r1, [r4, #2144]	; 0x860
  tlp->next = (thread_t *)tlp;
 800189a:	f8c4 6868 	str.w	r6, [r4, #2152]	; 0x868
  tqp->next = (thread_t *)tqp;
 800189e:	f8c4 286c 	str.w	r2, [r4, #2156]	; 0x86c
  tqp->prev = (thread_t *)tqp;
 80018a2:	f8c4 2870 	str.w	r2, [r4, #2160]	; 0x870
 80018a6:	2020      	movs	r0, #32
 80018a8:	f380 8811 	msr	BASEPRI, r0
  __ASM volatile ("cpsie i" : : : "memory");
 80018ac:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <main+0x3b8>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80018b0:	4a26      	ldr	r2, [pc, #152]	; (800194c <main+0x3bc>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b2:	68d9      	ldr	r1, [r3, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80018b4:	4f26      	ldr	r7, [pc, #152]	; (8001950 <main+0x3c0>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b6:	f64f 06ff 	movw	r6, #63743	; 0xf8ff
 80018ba:	4031      	ands	r1, r6
  reg_value  =  (reg_value                                   |
 80018bc:	430a      	orrs	r2, r1
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80018be:	4925      	ldr	r1, [pc, #148]	; (8001954 <main+0x3c4>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	68ca      	ldr	r2, [r1, #12]
 80018c4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80018c8:	60ca      	str	r2, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80018ca:	683a      	ldr	r2, [r7, #0]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80018cc:	e9d4 610c 	ldrd	r6, r1, [r4, #48]	; 0x30
 80018d0:	f042 0201 	orr.w	r2, r2, #1
 80018d4:	603a      	str	r2, [r7, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	2210      	movs	r2, #16
 80018d8:	77da      	strb	r2, [r3, #31]
 80018da:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 80018de:	ea56 0301 	orrs.w	r3, r6, r1
 80018e2:	d10b      	bne.n	80018fc <main+0x36c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80018e4:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 80018e8:	b662      	cpsie	i
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 80018ea:	4d1b      	ldr	r5, [pc, #108]	; (8001958 <main+0x3c8>)
 80018ec:	4628      	mov	r0, r5
 80018ee:	f7ff fce7 	bl	80012c0 <chRegFindThreadByWorkingArea>
 80018f2:	2800      	cmp	r0, #0
 80018f4:	d042      	beq.n	800197c <main+0x3ec>
 80018f6:	4819      	ldr	r0, [pc, #100]	; (800195c <main+0x3cc>)
 80018f8:	f7fe fdea 	bl	80004d0 <chSysHalt>
    chSysHalt("SV#3");
 80018fc:	4818      	ldr	r0, [pc, #96]	; (8001960 <main+0x3d0>)
 80018fe:	f7fe fde7 	bl	80004d0 <chSysHalt>
 8001902:	bf00      	nop
 8001904:	20000800 	.word	0x20000800
 8001908:	40020000 	.word	0x40020000
 800190c:	e000e100 	.word	0xe000e100
 8001910:	40021000 	.word	0x40021000
 8001914:	20000830 	.word	0x20000830
 8001918:	20000860 	.word	0x20000860
 800191c:	200009d8 	.word	0x200009d8
 8001920:	20001388 	.word	0x20001388
 8001924:	20001260 	.word	0x20001260
 8001928:	08000f51 	.word	0x08000f51
 800192c:	20001380 	.word	0x20001380
 8001930:	08000681 	.word	0x08000681
 8001934:	20001ba0 	.word	0x20001ba0
 8001938:	20008000 	.word	0x20008000
 800193c:	20001218 	.word	0x20001218
 8001940:	08002430 	.word	0x08002430
 8001944:	20000400 	.word	0x20000400
 8001948:	e000ed00 	.word	0xe000ed00
 800194c:	05fa0300 	.word	0x05fa0300
 8001950:	e0001000 	.word	0xe0001000
 8001954:	e000edf0 	.word	0xe000edf0
 8001958:	200012a8 	.word	0x200012a8
 800195c:	080021d0 	.word	0x080021d0
 8001960:	08002120 	.word	0x08002120
 8001964:	40020400 	.word	0x40020400
 8001968:	40013000 	.word	0x40013000
 800196c:	e0042000 	.word	0xe0042000
 8001970:	40003800 	.word	0x40003800
 8001974:	40003c00 	.word	0x40003c00
 8001978:	0080fff0 	.word	0x0080fff0
 800197c:	26d8      	movs	r6, #216	; 0xd8
 800197e:	462b      	mov	r3, r5
    *startp++ = v;
 8001980:	2255      	movs	r2, #85	; 0x55
  while (startp < endp) {
 8001982:	3e01      	subs	r6, #1
    *startp++ = v;
 8001984:	f803 2b01 	strb.w	r2, [r3], #1
  while (startp < endp) {
 8001988:	d1fb      	bne.n	8001982 <main+0x3f2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800198a:	2320      	movs	r3, #32
 800198c:	f383 8811 	msr	BASEPRI, r3
 8001990:	f7ff f93e 	bl	8000c10 <_dbg_check_lock>
  chDbgCheckClassI();
 8001994:	f7fe fdd4 	bl	8000540 <chDbgCheckClassI>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001998:	4a29      	ldr	r2, [pc, #164]	; (8001a40 <main+0x4b0>)
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <main+0x4b4>)
 800199c:	66ea      	str	r2, [r5, #108]	; 0x6c
 800199e:	482a      	ldr	r0, [pc, #168]	; (8001a48 <main+0x4b8>)
  REG_INSERT(tp);
 80019a0:	6961      	ldr	r1, [r4, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80019a2:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
  tp->state     = CH_STATE_WTSTART;
 80019a6:	2202      	movs	r2, #2
 80019a8:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
  tp->name      = name;
 80019ac:	4827      	ldr	r0, [pc, #156]	; (8001a4c <main+0x4bc>)
 80019ae:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
  tp->prio      = prio;
 80019b2:	2201      	movs	r2, #1
  REG_INSERT(tp);
 80019b4:	f103 0024 	add.w	r0, r3, #36	; 0x24
  tp->prio      = prio;
 80019b8:	e9c5 2326 	strd	r2, r3, [r5, #152]	; 0x98
  tp->realprio  = prio;
 80019bc:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
  tp->refs      = (trefs_t)1;
 80019c0:	f885 20b2 	strb.w	r2, [r5, #178]	; 0xb2
  tlp->next = (thread_t *)tlp;
 80019c4:	f103 024c 	add.w	r2, r3, #76	; 0x4c
  tqp->next = (thread_t *)tqp;
 80019c8:	3350      	adds	r3, #80	; 0x50
  REG_INSERT(tp);
 80019ca:	f8c5 10a4 	str.w	r1, [r5, #164]	; 0xa4
  tp->epending  = (eventmask_t)0;
 80019ce:	e9c5 6631 	strd	r6, r6, [r5, #196]	; 0xc4
  tp->wabase = tdp->wbase;
 80019d2:	f8c5 50ac 	str.w	r5, [r5, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80019d6:	672e      	str	r6, [r5, #112]	; 0x70
  REG_INSERT(tp);
 80019d8:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
 80019dc:	6108      	str	r0, [r1, #16]
 80019de:	e9c5 232e 	strd	r2, r3, [r5, #184]	; 0xb8
  tqp->prev = (thread_t *)tqp;
 80019e2:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80019e6:	6160      	str	r0, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 80019e8:	f7ff f83a 	bl	8000a60 <chSchWakeupS.constprop.0>
  chSysUnlock();
 80019ec:	f7ff f8f8 	bl	8000be0 <chSysUnlock.lto_priv.1>
  chSysInit();

  /*
   * SPI2 I/O pins setup.
   */
  palSetPadMode(GPIOB, 14, PAL_MODE_ALTERNATE(5) |
 80019f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019f4:	f7fe fc64 	bl	80002c0 <_pal_lld_setgroupmode.constprop.0>
                           PAL_STM32_OSPEED_HIGHEST);       /* New MISO.    */
  palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(5) |
 80019f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80019fc:	f7fe fc60 	bl	80002c0 <_pal_lld_setgroupmode.constprop.0>
                           PAL_STM32_OSPEED_HIGHEST);       /* New MOSI.    */

  /*
   * Prepare transmit pattern.
   */
  for (i = 0; i < sizeof(txbuf); i++)
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <main+0x4c0>)
    txbuf[i] = (uint8_t)i;
 8001a02:	f803 6b01 	strb.w	r6, [r3], #1
  for (i = 0; i < sizeof(txbuf); i++)
 8001a06:	3601      	adds	r6, #1
 8001a08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8001a0c:	d1f9      	bne.n	8001a02 <main+0x472>

  /*
   * Starting the transmitter and receiver threads.
   */
  chThdCreateStatic(spi_thread_1_wa, sizeof(spi_thread_1_wa),
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <main+0x4c4>)
 8001a10:	4811      	ldr	r0, [pc, #68]	; (8001a58 <main+0x4c8>)
 8001a12:	2281      	movs	r2, #129	; 0x81
 8001a14:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8001a18:	f7ff fd62 	bl	80014e0 <chThdCreateStatic.constprop.0>
                    NORMALPRIO + 1, spi_thread_1, NULL);
  chThdCreateStatic(spi_thread_2_wa, sizeof(spi_thread_2_wa),
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <main+0x4cc>)
 8001a1e:	4810      	ldr	r0, [pc, #64]	; (8001a60 <main+0x4d0>)
 8001a20:	2281      	movs	r2, #129	; 0x81
 8001a22:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8001a26:	f7ff fd5b 	bl	80014e0 <chThdCreateStatic.constprop.0>
                    NORMALPRIO + 1, spi_thread_2, NULL);

  /*
   * Starting the blinker thread.
   */
  chThdCreateStatic(blinker_wa, sizeof(blinker_wa),
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <main+0x4d4>)
 8001a2c:	480e      	ldr	r0, [pc, #56]	; (8001a68 <main+0x4d8>)
 8001a2e:	227f      	movs	r2, #127	; 0x7f
 8001a30:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001a34:	f7ff fd54 	bl	80014e0 <chThdCreateStatic.constprop.0>

  /*
   * Normal main() thread activity, in this demo it does nothing.
   */
  while (true) {
    chThdSleepMilliseconds(500);
 8001a38:	f7ff f9ba 	bl	8000db0 <chThdSleep.constprop.0>
  while (true) {
 8001a3c:	e7fc      	b.n	8001a38 <main+0x4a8>
 8001a3e:	bf00      	nop
 8001a40:	08000851 	.word	0x08000851
 8001a44:	20001314 	.word	0x20001314
 8001a48:	08000291 	.word	0x08000291
 8001a4c:	08002128 	.word	0x08002128
 8001a50:	200019a0 	.word	0x200019a0
 8001a54:	08001181 	.word	0x08001181
 8001a58:	20001610 	.word	0x20001610
 8001a5c:	08001221 	.word	0x08001221
 8001a60:	200017d8 	.word	0x200017d8
 8001a64:	08000f21 	.word	0x08000f21
 8001a68:	20000890 	.word	0x20000890
 8001a6c:	00000000 	.word	0x00000000

08001a70 <chThdExit>:
void chThdExit(msg_t msg) {
 8001a70:	b508      	push	{r3, lr}
 8001a72:	4605      	mov	r5, r0
 8001a74:	2320      	movs	r3, #32
 8001a76:	f383 8811 	msr	BASEPRI, r3
 8001a7a:	f7ff f8c9 	bl	8000c10 <_dbg_check_lock>
  thread_t *tp = currp;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <chThdExit+0x50>)
 8001a80:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8001a82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8001a84:	6265      	str	r5, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8001a86:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8001a8a:	42a8      	cmp	r0, r5
 8001a8c:	d006      	beq.n	8001a9c <chThdExit+0x2c>
  tlp->next = tp->queue.next;
 8001a8e:	6803      	ldr	r3, [r0, #0]
 8001a90:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001a92:	f7fe fe25 	bl	80006e0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8001a96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001a98:	42a8      	cmp	r0, r5
 8001a9a:	d1f8      	bne.n	8001a8e <chThdExit+0x1e>
  if ((tp->refs == (trefs_t)0) &&
 8001a9c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001aa0:	b93b      	cbnz	r3, 8001ab2 <chThdExit+0x42>
 8001aa2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001aa6:	079b      	lsls	r3, r3, #30
 8001aa8:	d103      	bne.n	8001ab2 <chThdExit+0x42>
    REG_REMOVE(tp);
 8001aaa:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001aae:	6113      	str	r3, [r2, #16]
 8001ab0:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8001ab2:	200f      	movs	r0, #15
 8001ab4:	f7ff f814 	bl	8000ae0 <chSchGoSleepS>
  chDbgAssert(false, "zombies apocalypse");
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <chThdExit+0x54>)
 8001aba:	f7fe fd09 	bl	80004d0 <chSysHalt>
 8001abe:	bf00      	nop
 8001ac0:	200009d8 	.word	0x200009d8
 8001ac4:	08002234 	.word	0x08002234
	...

08001ad0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
 8001ad0:	4b61      	ldr	r3, [pc, #388]	; (8001c58 <__early_init+0x188>)
  gpiop->OTYPER  = config->otyper;
 8001ad2:	4862      	ldr	r0, [pc, #392]	; (8001c5c <__early_init+0x18c>)
  rccResetAHB(STM32_GPIO_EN_MASK);
 8001ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  gpiop->OTYPER  = config->otyper;
 8001ad6:	4962      	ldr	r1, [pc, #392]	; (8001c60 <__early_init+0x190>)
  rccResetAHB(STM32_GPIO_EN_MASK);
 8001ad8:	f442 02fc 	orr.w	r2, r2, #8257536	; 0x7e0000
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8001adc:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB(STM32_GPIO_EN_MASK);
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
 8001ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  gpiop->OSPEEDR = config->ospeedr;
 8001ae2:	4f60      	ldr	r7, [pc, #384]	; (8001c64 <__early_init+0x194>)
  gpiop->OTYPER  = config->otyper;
 8001ae4:	4c60      	ldr	r4, [pc, #384]	; (8001c68 <__early_init+0x198>)
  rccResetAHB(STM32_GPIO_EN_MASK);
 8001ae6:	f422 02fc 	bic.w	r2, r2, #8257536	; 0x7e0000
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
 8001aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 8001aee:	695d      	ldr	r5, [r3, #20]
 8001af0:	f445 05fc 	orr.w	r5, r5, #8257536	; 0x7e0000
 8001af4:	615d      	str	r5, [r3, #20]
  gpiop->OTYPER  = config->otyper;
 8001af6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 8001afa:	695e      	ldr	r6, [r3, #20]
  gpiop->PUPDR   = config->pupdr;
 8001afc:	4e5b      	ldr	r6, [pc, #364]	; (8001c6c <__early_init+0x19c>)
  gpiop->OTYPER  = config->otyper;
 8001afe:	f44f 65c0 	mov.w	r5, #1536	; 0x600
 8001b02:	6055      	str	r5, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001b04:	6097      	str	r7, [r2, #8]
  gpiop->ODR     = config->odr;
 8001b06:	f64f 757f 	movw	r5, #65407	; 0xff7f
  gpiop->PUPDR   = config->pupdr;
 8001b0a:	60d6      	str	r6, [r2, #12]
  gpiop->AFRL    = config->afrl;
 8001b0c:	f44f 06a0 	mov.w	r6, #5242880	; 0x500000
  gpiop->ODR     = config->odr;
 8001b10:	6155      	str	r5, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001b12:	6216      	str	r6, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001b14:	4d56      	ldr	r5, [pc, #344]	; (8001c70 <__early_init+0x1a0>)
  gpiop->MODER   = config->moder;
 8001b16:	4e57      	ldr	r6, [pc, #348]	; (8001c74 <__early_init+0x1a4>)
  gpiop->AFRH    = config->afrh;
 8001b18:	6255      	str	r5, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001b1a:	6016      	str	r6, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8001b1c:	25c0      	movs	r5, #192	; 0xc0
  gpiop->OSPEEDR = config->ospeedr;
 8001b1e:	f24f 36c0 	movw	r6, #62400	; 0xf3c0
  gpiop->OTYPER  = config->otyper;
 8001b22:	6045      	str	r5, [r0, #4]
  gpiop->PUPDR   = config->pupdr;
 8001b24:	4a54      	ldr	r2, [pc, #336]	; (8001c78 <__early_init+0x1a8>)
  gpiop->OSPEEDR = config->ospeedr;
 8001b26:	6086      	str	r6, [r0, #8]
  gpiop->ODR     = config->odr;
 8001b28:	f64f 75ff 	movw	r5, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 8001b2c:	f04f 4688 	mov.w	r6, #1140850688	; 0x44000000
  gpiop->PUPDR   = config->pupdr;
 8001b30:	60c2      	str	r2, [r0, #12]
  gpiop->ODR     = config->odr;
 8001b32:	6145      	str	r5, [r0, #20]
  gpiop->AFRH    = config->afrh;
 8001b34:	2200      	movs	r2, #0
  gpiop->AFRL    = config->afrl;
 8001b36:	6206      	str	r6, [r0, #32]
  gpiop->MODER   = config->moder;
 8001b38:	f24a 068f 	movw	r6, #41103	; 0xa08f
  gpiop->AFRH    = config->afrh;
 8001b3c:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001b3e:	6006      	str	r6, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 8001b40:	200f      	movs	r0, #15
 8001b42:	6048      	str	r0, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001b44:	484d      	ldr	r0, [pc, #308]	; (8001c7c <__early_init+0x1ac>)
 8001b46:	6088      	str	r0, [r1, #8]
  gpiop->AFRH    = config->afrh;
 8001b48:	4e4d      	ldr	r6, [pc, #308]	; (8001c80 <__early_init+0x1b0>)
  gpiop->PUPDR   = config->pupdr;
 8001b4a:	484e      	ldr	r0, [pc, #312]	; (8001c84 <__early_init+0x1b4>)
 8001b4c:	60c8      	str	r0, [r1, #12]
  gpiop->ODR     = config->odr;
 8001b4e:	614d      	str	r5, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8001b50:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001b52:	624e      	str	r6, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001b54:	4e4c      	ldr	r6, [pc, #304]	; (8001c88 <__early_init+0x1b8>)
 8001b56:	600e      	str	r6, [r1, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8001b58:	4e4c      	ldr	r6, [pc, #304]	; (8001c8c <__early_init+0x1bc>)
  gpiop->OTYPER  = config->otyper;
 8001b5a:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001b5c:	60a6      	str	r6, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001b5e:	4e4c      	ldr	r6, [pc, #304]	; (8001c90 <__early_init+0x1c0>)
 8001b60:	60e6      	str	r6, [r4, #12]
  gpiop->ODR     = config->odr;
 8001b62:	f24f 76ff 	movw	r6, #63487	; 0xf7ff
 8001b66:	6166      	str	r6, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8001b68:	4e4a      	ldr	r6, [pc, #296]	; (8001c94 <__early_init+0x1c4>)
 8001b6a:	6226      	str	r6, [r4, #32]
  gpiop->OTYPER  = config->otyper;
 8001b6c:	484a      	ldr	r0, [pc, #296]	; (8001c98 <__early_init+0x1c8>)
  gpiop->MODER   = config->moder;
 8001b6e:	4e4b      	ldr	r6, [pc, #300]	; (8001c9c <__early_init+0x1cc>)
  gpiop->AFRH    = config->afrh;
 8001b70:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001b72:	6026      	str	r6, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8001b74:	2404      	movs	r4, #4
 8001b76:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001b78:	4c49      	ldr	r4, [pc, #292]	; (8001ca0 <__early_init+0x1d0>)
 8001b7a:	6084      	str	r4, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8001b7c:	f104 448c 	add.w	r4, r4, #1174405120	; 0x46000000
 8001b80:	f5a4 043f 	sub.w	r4, r4, #12517376	; 0xbf0000
 8001b84:	f6a4 34ab 	subw	r4, r4, #2987	; 0xbab
 8001b88:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 8001b8a:	f641 74ff 	movw	r4, #8191	; 0x1fff
 8001b8e:	6144      	str	r4, [r0, #20]
  gpiop->MODER   = config->moder;
 8001b90:	4c44      	ldr	r4, [pc, #272]	; (8001ca4 <__early_init+0x1d4>)
  gpiop->AFRL    = config->afrl;
 8001b92:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8001b94:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001b96:	6004      	str	r4, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8001b98:	f100 6056 	add.w	r0, r0, #224395264	; 0xd600000
 8001b9c:	f500 2014 	add.w	r0, r0, #606208	; 0x94000
  gpiop->OSPEEDR = config->ospeedr;
 8001ba0:	4c41      	ldr	r4, [pc, #260]	; (8001ca8 <__early_init+0x1d8>)
  gpiop->OTYPER  = config->otyper;
 8001ba2:	f8c1 2c04 	str.w	r2, [r1, #3076]	; 0xc04
  gpiop->PUPDR   = config->pupdr;
 8001ba6:	f500 60cc 	add.w	r0, r0, #1632	; 0x660
  gpiop->OSPEEDR = config->ospeedr;
 8001baa:	f8c1 4c08 	str.w	r4, [r1, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
 8001bae:	f8c1 0c0c 	str.w	r0, [r1, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
 8001bb2:	f8c1 5c14 	str.w	r5, [r1, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
 8001bb6:	f8c1 2c20 	str.w	r2, [r1, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
 8001bba:	f8c1 2c24 	str.w	r2, [r1, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
 8001bbe:	f8c1 2c00 	str.w	r2, [r1, #3072]	; 0xc00
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	0794      	lsls	r4, r2, #30
 8001bce:	d5fc      	bpl.n	8001bca <__early_init+0xfa>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001bd0:	6859      	ldr	r1, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <__early_init+0x188>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001bd4:	f021 0103 	bic.w	r1, r1, #3
 8001bd8:	6059      	str	r1, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001bda:	6853      	ldr	r3, [r2, #4]
 8001bdc:	f013 030c 	ands.w	r3, r3, #12
 8001be0:	d1fb      	bne.n	8001bda <__early_init+0x10a>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001be2:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001be4:	491c      	ldr	r1, [pc, #112]	; (8001c58 <__early_init+0x188>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001be6:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8001bea:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001bec:	6053      	str	r3, [r2, #4]
  RCC->CR |= RCC_CR_HSEON;
 8001bee:	6813      	ldr	r3, [r2, #0]
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001bf6:	680b      	ldr	r3, [r1, #0]
 8001bf8:	0398      	lsls	r0, r3, #14
 8001bfa:	d5fc      	bpl.n	8001bf6 <__early_init+0x126>
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001bfc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <__early_init+0x188>)
  RCC->CSR |= RCC_CSR_LSION;
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	624a      	str	r2, [r1, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c08:	0792      	lsls	r2, r2, #30
 8001c0a:	d5fc      	bpl.n	8001c06 <__early_init+0x136>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_SDPRE     | STM32_MCOSEL    | STM32_USBPRE    |
 8001c0c:	4a27      	ldr	r2, [pc, #156]	; (8001cac <__early_init+0x1dc>)
 8001c0e:	605a      	str	r2, [r3, #4]
               STM32_PLLMUL    | STM32_PLLSRC    | STM32_ADCPRE    |
               STM32_PPRE1     | STM32_PPRE2     | STM32_HPRE;
  RCC->CFGR2 = STM32_PREDIV;
 8001c10:	2100      	movs	r1, #0
  RCC->CFGR3 = STM32_USART3SW  | STM32_USART2SW  | STM32_I2C2SW    |
 8001c12:	2230      	movs	r2, #48	; 0x30
  RCC->CFGR2 = STM32_PREDIV;
 8001c14:	62d9      	str	r1, [r3, #44]	; 0x2c
  RCC->CFGR3 = STM32_USART3SW  | STM32_USART2SW  | STM32_I2C2SW    |
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
               STM32_I2C1SW    | STM32_USART1SW;

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8001c18:	681a      	ldr	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001c1a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  RCC->CR   |= RCC_CR_PLLON;
 8001c1e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001c22:	f501 3104 	add.w	r1, r1, #135168	; 0x21000
  RCC->CR   |= RCC_CR_PLLON;
 8001c26:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001c28:	680b      	ldr	r3, [r1, #0]
 8001c2a:	019b      	lsls	r3, r3, #6
 8001c2c:	d5fc      	bpl.n	8001c28 <__early_init+0x158>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <__early_init+0x1e0>)
 8001c30:	2212      	movs	r2, #18
 8001c32:	601a      	str	r2, [r3, #0]
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	f002 0207 	and.w	r2, r2, #7
 8001c3a:	2a02      	cmp	r2, #2
 8001c3c:	d1fa      	bne.n	8001c34 <__early_init+0x164>
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <__early_init+0x188>)
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	f042 0202 	orr.w	r2, r2, #2
 8001c46:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	f002 020c 	and.w	r2, r2, #12
 8001c4e:	2a08      	cmp	r2, #8
 8001c50:	d1fa      	bne.n	8001c48 <__early_init+0x178>

  stm32_gpio_init();
  stm32_clock_init();
}
 8001c52:	bcf0      	pop	{r4, r5, r6, r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	48000400 	.word	0x48000400
 8001c60:	48000800 	.word	0x48000800
 8001c64:	fcfccc00 	.word	0xfcfccc00
 8001c68:	48000c00 	.word	0x48000c00
 8001c6c:	24001140 	.word	0x24001140
 8001c70:	000ee440 	.word	0x000ee440
 8001c74:	aaa8400c 	.word	0xaaa8400c
 8001c78:	55550410 	.word	0x55550410
 8001c7c:	f3f00cff 	.word	0xf3f00cff
 8001c80:	00066600 	.word	0x00066600
 8001c84:	04455100 	.word	0x04455100
 8001c88:	02a00455 	.word	0x02a00455
 8001c8c:	00c03fff 	.word	0x00c03fff
 8001c90:	55154000 	.word	0x55154000
 8001c94:	07777077 	.word	0x07777077
 8001c98:	48001000 	.word	0x48001000
 8001c9c:	00402a9a 	.word	0x00402a9a
 8001ca0:	000f30f0 	.word	0x000f30f0
 8001ca4:	000fc010 	.word	0x000fc010
 8001ca8:	003c033f 	.word	0x003c033f
 8001cac:	a81d6400 	.word	0xa81d6400
 8001cb0:	40022000 	.word	0x40022000
	...

08001cc0 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8001cc4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  OSAL_IRQ_PROLOGUE();
 8001cc8:	4838      	ldr	r0, [pc, #224]	; (8001dac <VectorB0+0xec>)
 8001cca:	f7fe fbe9 	bl	80004a0 <_trace_isr_enter>
 8001cce:	f7fe fd47 	bl	8000760 <_dbg_check_enter_isr>
  sr  = timp->SR;
 8001cd2:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001cd4:	68ea      	ldr	r2, [r5, #12]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8001cda:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8001cdc:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8001cde:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8001ce0:	d408      	bmi.n	8001cf4 <VectorB0+0x34>
  OSAL_IRQ_EPILOGUE();
 8001ce2:	f7fe fd25 	bl	8000730 <_dbg_check_leave_isr>
 8001ce6:	4831      	ldr	r0, [pc, #196]	; (8001dac <VectorB0+0xec>)
 8001ce8:	f7fe fbc2 	bl	8000470 <_trace_isr_leave>
}
 8001cec:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8001cf0:	f7fe bb36 	b.w	8000360 <_port_irq_epilogue>
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8001cfa:	4e2d      	ldr	r6, [pc, #180]	; (8001db0 <VectorB0+0xf0>)
  _dbg_check_lock_from_isr();
 8001cfc:	f7fe fd60 	bl	80007c0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 8001d00:	f7fe fc1e 	bl	8000540 <chDbgCheckClassI>
  chDbgCheckClassI();
 8001d04:	f7fe fc1c 	bl	8000540 <chDbgCheckClassI>
  vtp = ch.vtlist.next;
 8001d08:	69f4      	ldr	r4, [r6, #28]
  return (systime_t)STM32_ST_TIM->CNT;
 8001d0a:	6a68      	ldr	r0, [r5, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8001d0c:	6ab3      	ldr	r3, [r6, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8001d0e:	68a2      	ldr	r2, [r4, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8001d10:	eba0 0903 	sub.w	r9, r0, r3
 8001d14:	454a      	cmp	r2, r9
 8001d16:	f106 0a1c 	add.w	sl, r6, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8001d1a:	bf98      	it	ls
 8001d1c:	2700      	movls	r7, #0
    if (nowdelta < vtp->delta) {
 8001d1e:	d825      	bhi.n	8001d6c <VectorB0+0xac>
 8001d20:	f04f 0820 	mov.w	r8, #32
 8001d24:	e000      	b.n	8001d28 <VectorB0+0x68>
 8001d26:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001d28:	6821      	ldr	r1, [r4, #0]
      fn = vtp->func;
 8001d2a:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      ch.vtlist.lasttime += vtp->delta;
 8001d2e:	4413      	add	r3, r2

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001d30:	4551      	cmp	r1, sl
      ch.vtlist.lasttime += vtp->delta;
 8001d32:	62b3      	str	r3, [r6, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001d34:	f8c1 a004 	str.w	sl, [r1, #4]
      ch.vtlist.next = vtp->next;
 8001d38:	61f1      	str	r1, [r6, #28]
      vtp->func = NULL;
 8001d3a:	60e7      	str	r7, [r4, #12]
  STM32_ST_TIM->DIER = 0U;
 8001d3c:	bf08      	it	eq
 8001d3e:	60ef      	streq	r7, [r5, #12]
      nowdelta -= vtp->delta;
 8001d40:	eba9 0902 	sub.w	r9, r9, r2
  _dbg_check_unlock_from_isr();
 8001d44:	f7fe fd24 	bl	8000790 <_dbg_check_unlock_from_isr>
 8001d48:	f387 8811 	msr	BASEPRI, r7
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8001d4c:	6920      	ldr	r0, [r4, #16]
 8001d4e:	47d8      	blx	fp
 8001d50:	f388 8811 	msr	BASEPRI, r8
  _dbg_check_lock_from_isr();
 8001d54:	f7fe fd34 	bl	80007c0 <_dbg_check_lock_from_isr>
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8001d58:	69f4      	ldr	r4, [r6, #28]
    }
    while (vtp->delta <= nowdelta);
 8001d5a:	68a2      	ldr	r2, [r4, #8]
 8001d5c:	4591      	cmp	r9, r2
 8001d5e:	d2e2      	bcs.n	8001d26 <VectorB0+0x66>
  return (systime_t)STM32_ST_TIM->CNT;
 8001d60:	6a68      	ldr	r0, [r5, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8001d62:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001d64:	eba0 0903 	sub.w	r9, r0, r3
    if (nowdelta < vtp->delta) {
 8001d68:	4591      	cmp	r9, r2
 8001d6a:	d2d9      	bcs.n	8001d20 <VectorB0+0x60>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001d6c:	4554      	cmp	r4, sl
 8001d6e:	d013      	beq.n	8001d98 <VectorB0+0xd8>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8001d70:	68a2      	ldr	r2, [r4, #8]
  ch.vtlist.lasttime += nowdelta;
 8001d72:	62b0      	str	r0, [r6, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8001d74:	1a12      	subs	r2, r2, r0
 8001d76:	4413      	add	r3, r2
  return systime + (systime_t)interval;
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	bf2c      	ite	cs
 8001d7c:	18c5      	addcs	r5, r0, r3
 8001d7e:	1c85      	addcc	r5, r0, #2
 8001d80:	60a3      	str	r3, [r4, #8]
 8001d82:	4628      	mov	r0, r5
 8001d84:	f7fe fdf4 	bl	8000970 <stSetAlarm>
 8001d88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
 8001d8c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001d90:	1aa8      	subs	r0, r5, r2
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	4283      	cmp	r3, r0
 8001d96:	d805      	bhi.n	8001da4 <VectorB0+0xe4>
  _dbg_check_unlock_from_isr();
 8001d98:	f7fe fcfa 	bl	8000790 <_dbg_check_unlock_from_isr>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f383 8811 	msr	BASEPRI, r3
 8001da2:	e79e      	b.n	8001ce2 <VectorB0+0x22>
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <VectorB0+0xf4>)
 8001da6:	f7fe fb93 	bl	80004d0 <chSysHalt>
 8001daa:	bf00      	nop
 8001dac:	08002278 	.word	0x08002278
 8001db0:	200009d8 	.word	0x200009d8
 8001db4:	0800216c 	.word	0x0800216c
	...

08001dc0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8001dc0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001dc2:	4c09      	ldr	r4, [pc, #36]	; (8001de8 <Vector130+0x28>)
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f7fe fb6b 	bl	80004a0 <_trace_isr_enter>
 8001dca:	f7fe fcc9 	bl	8000760 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA2_STREAM5);
 8001dce:	4807      	ldr	r0, [pc, #28]	; (8001dec <Vector130+0x2c>)
 8001dd0:	f7fe fdae 	bl	8000930 <dmaServeInterrupt>
  OSAL_IRQ_EPILOGUE();
 8001dd4:	f7fe fcac 	bl	8000730 <_dbg_check_leave_isr>
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7fe fb49 	bl	8000470 <_trace_isr_leave>
}
 8001dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001de2:	f7fe babd 	b.w	8000360 <_port_irq_epilogue>
 8001de6:	bf00      	nop
 8001de8:	08002358 	.word	0x08002358
 8001dec:	08002420 	.word	0x08002420

08001df0 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8001df0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001df2:	4c09      	ldr	r4, [pc, #36]	; (8001e18 <Vector12C+0x28>)
 8001df4:	4620      	mov	r0, r4
 8001df6:	f7fe fb53 	bl	80004a0 <_trace_isr_enter>
 8001dfa:	f7fe fcb1 	bl	8000760 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA2_STREAM4);
 8001dfe:	4807      	ldr	r0, [pc, #28]	; (8001e1c <Vector12C+0x2c>)
 8001e00:	f7fe fd96 	bl	8000930 <dmaServeInterrupt>
  OSAL_IRQ_EPILOGUE();
 8001e04:	f7fe fc94 	bl	8000730 <_dbg_check_leave_isr>
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f7fe fb31 	bl	8000470 <_trace_isr_leave>
}
 8001e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001e12:	f7fe baa5 	b.w	8000360 <_port_irq_epilogue>
 8001e16:	bf00      	nop
 8001e18:	0800234c 	.word	0x0800234c
 8001e1c:	08002410 	.word	0x08002410

08001e20 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8001e20:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001e22:	4c09      	ldr	r4, [pc, #36]	; (8001e48 <Vector128+0x28>)
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7fe fb3b 	bl	80004a0 <_trace_isr_enter>
 8001e2a:	f7fe fc99 	bl	8000760 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA2_STREAM3);
 8001e2e:	4807      	ldr	r0, [pc, #28]	; (8001e4c <Vector128+0x2c>)
 8001e30:	f7fe fd7e 	bl	8000930 <dmaServeInterrupt>
  OSAL_IRQ_EPILOGUE();
 8001e34:	f7fe fc7c 	bl	8000730 <_dbg_check_leave_isr>
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f7fe fb19 	bl	8000470 <_trace_isr_leave>
}
 8001e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001e42:	f7fe ba8d 	b.w	8000360 <_port_irq_epilogue>
 8001e46:	bf00      	nop
 8001e48:	08002340 	.word	0x08002340
 8001e4c:	08002400 	.word	0x08002400

08001e50 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8001e50:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001e52:	4c09      	ldr	r4, [pc, #36]	; (8001e78 <Vector124+0x28>)
 8001e54:	4620      	mov	r0, r4
 8001e56:	f7fe fb23 	bl	80004a0 <_trace_isr_enter>
 8001e5a:	f7fe fc81 	bl	8000760 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA2_STREAM2);
 8001e5e:	4807      	ldr	r0, [pc, #28]	; (8001e7c <Vector124+0x2c>)
 8001e60:	f7fe fd66 	bl	8000930 <dmaServeInterrupt>
  OSAL_IRQ_EPILOGUE();
 8001e64:	f7fe fc64 	bl	8000730 <_dbg_check_leave_isr>
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7fe fb01 	bl	8000470 <_trace_isr_leave>
}
 8001e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001e72:	f7fe ba75 	b.w	8000360 <_port_irq_epilogue>
 8001e76:	bf00      	nop
 8001e78:	08002334 	.word	0x08002334
 8001e7c:	080023f0 	.word	0x080023f0

08001e80 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8001e80:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001e82:	4c09      	ldr	r4, [pc, #36]	; (8001ea8 <Vector120+0x28>)
 8001e84:	4620      	mov	r0, r4
 8001e86:	f7fe fb0b 	bl	80004a0 <_trace_isr_enter>
 8001e8a:	f7fe fc69 	bl	8000760 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA2_STREAM1);
 8001e8e:	4807      	ldr	r0, [pc, #28]	; (8001eac <Vector120+0x2c>)
 8001e90:	f7fe fd4e 	bl	8000930 <dmaServeInterrupt>
  OSAL_IRQ_EPILOGUE();
 8001e94:	f7fe fc4c 	bl	8000730 <_dbg_check_leave_isr>
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7fe fae9 	bl	8000470 <_trace_isr_leave>
}
 8001e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001ea2:	f7fe ba5d 	b.w	8000360 <_port_irq_epilogue>
 8001ea6:	bf00      	nop
 8001ea8:	08002328 	.word	0x08002328
 8001eac:	080023e0 	.word	0x080023e0

08001eb0 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8001eb0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001eb2:	4c09      	ldr	r4, [pc, #36]	; (8001ed8 <Vector84+0x28>)
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f7fe faf3 	bl	80004a0 <_trace_isr_enter>
 8001eba:	f7fe fc51 	bl	8000760 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8001ebe:	4807      	ldr	r0, [pc, #28]	; (8001edc <Vector84+0x2c>)
 8001ec0:	f7fe fd36 	bl	8000930 <dmaServeInterrupt>
  OSAL_IRQ_EPILOGUE();
 8001ec4:	f7fe fc34 	bl	8000730 <_dbg_check_leave_isr>
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7fe fad1 	bl	8000470 <_trace_isr_leave>
}
 8001ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001ed2:	f7fe ba45 	b.w	8000360 <_port_irq_epilogue>
 8001ed6:	bf00      	nop
 8001ed8:	0800231c 	.word	0x0800231c
 8001edc:	080023d0 	.word	0x080023d0

08001ee0 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8001ee0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001ee2:	4c09      	ldr	r4, [pc, #36]	; (8001f08 <Vector80+0x28>)
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7fe fadb 	bl	80004a0 <_trace_isr_enter>
 8001eea:	f7fe fc39 	bl	8000760 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001eee:	4807      	ldr	r0, [pc, #28]	; (8001f0c <Vector80+0x2c>)
 8001ef0:	f7fe fd1e 	bl	8000930 <dmaServeInterrupt>
  OSAL_IRQ_EPILOGUE();
 8001ef4:	f7fe fc1c 	bl	8000730 <_dbg_check_leave_isr>
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f7fe fab9 	bl	8000470 <_trace_isr_leave>
}
 8001efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001f02:	f7fe ba2d 	b.w	8000360 <_port_irq_epilogue>
 8001f06:	bf00      	nop
 8001f08:	08002310 	.word	0x08002310
 8001f0c:	080023c0 	.word	0x080023c0

08001f10 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8001f10:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001f12:	4c09      	ldr	r4, [pc, #36]	; (8001f38 <Vector7C+0x28>)
 8001f14:	4620      	mov	r0, r4
 8001f16:	f7fe fac3 	bl	80004a0 <_trace_isr_enter>
 8001f1a:	f7fe fc21 	bl	8000760 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8001f1e:	4807      	ldr	r0, [pc, #28]	; (8001f3c <Vector7C+0x2c>)
 8001f20:	f7fe fd06 	bl	8000930 <dmaServeInterrupt>
  OSAL_IRQ_EPILOGUE();
 8001f24:	f7fe fc04 	bl	8000730 <_dbg_check_leave_isr>
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f7fe faa1 	bl	8000470 <_trace_isr_leave>
}
 8001f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001f32:	f7fe ba15 	b.w	8000360 <_port_irq_epilogue>
 8001f36:	bf00      	nop
 8001f38:	08002304 	.word	0x08002304
 8001f3c:	080023b0 	.word	0x080023b0

08001f40 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001f40:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001f42:	4c09      	ldr	r4, [pc, #36]	; (8001f68 <Vector78+0x28>)
 8001f44:	4620      	mov	r0, r4
 8001f46:	f7fe faab 	bl	80004a0 <_trace_isr_enter>
 8001f4a:	f7fe fc09 	bl	8000760 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001f4e:	4807      	ldr	r0, [pc, #28]	; (8001f6c <Vector78+0x2c>)
 8001f50:	f7fe fcee 	bl	8000930 <dmaServeInterrupt>
  OSAL_IRQ_EPILOGUE();
 8001f54:	f7fe fbec 	bl	8000730 <_dbg_check_leave_isr>
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7fe fa89 	bl	8000470 <_trace_isr_leave>
}
 8001f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001f62:	f7fe b9fd 	b.w	8000360 <_port_irq_epilogue>
 8001f66:	bf00      	nop
 8001f68:	080022f8 	.word	0x080022f8
 8001f6c:	080023a0 	.word	0x080023a0

08001f70 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8001f70:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001f72:	4c09      	ldr	r4, [pc, #36]	; (8001f98 <Vector74+0x28>)
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7fe fa93 	bl	80004a0 <_trace_isr_enter>
 8001f7a:	f7fe fbf1 	bl	8000760 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8001f7e:	4807      	ldr	r0, [pc, #28]	; (8001f9c <Vector74+0x2c>)
 8001f80:	f7fe fcd6 	bl	8000930 <dmaServeInterrupt>
  OSAL_IRQ_EPILOGUE();
 8001f84:	f7fe fbd4 	bl	8000730 <_dbg_check_leave_isr>
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7fe fa71 	bl	8000470 <_trace_isr_leave>
}
 8001f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001f92:	f7fe b9e5 	b.w	8000360 <_port_irq_epilogue>
 8001f96:	bf00      	nop
 8001f98:	080022d0 	.word	0x080022d0
 8001f9c:	08002390 	.word	0x08002390

08001fa0 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8001fa0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001fa2:	4c09      	ldr	r4, [pc, #36]	; (8001fc8 <Vector70+0x28>)
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7fe fa7b 	bl	80004a0 <_trace_isr_enter>
 8001faa:	f7fe fbd9 	bl	8000760 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001fae:	4807      	ldr	r0, [pc, #28]	; (8001fcc <Vector70+0x2c>)
 8001fb0:	f7fe fcbe 	bl	8000930 <dmaServeInterrupt>
  OSAL_IRQ_EPILOGUE();
 8001fb4:	f7fe fbbc 	bl	8000730 <_dbg_check_leave_isr>
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7fe fa59 	bl	8000470 <_trace_isr_leave>
}
 8001fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001fc2:	f7fe b9cd 	b.w	8000360 <_port_irq_epilogue>
 8001fc6:	bf00      	nop
 8001fc8:	080022b8 	.word	0x080022b8
 8001fcc:	08002380 	.word	0x08002380

08001fd0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001fd0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001fd2:	4c09      	ldr	r4, [pc, #36]	; (8001ff8 <Vector6C+0x28>)
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7fe fa63 	bl	80004a0 <_trace_isr_enter>
 8001fda:	f7fe fbc1 	bl	8000760 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8001fde:	4807      	ldr	r0, [pc, #28]	; (8001ffc <Vector6C+0x2c>)
 8001fe0:	f7fe fca6 	bl	8000930 <dmaServeInterrupt>
  OSAL_IRQ_EPILOGUE();
 8001fe4:	f7fe fba4 	bl	8000730 <_dbg_check_leave_isr>
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7fe fa41 	bl	8000470 <_trace_isr_leave>
}
 8001fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001ff2:	f7fe b9b5 	b.w	8000360 <_port_irq_epilogue>
 8001ff6:	bf00      	nop
 8001ff8:	080022a0 	.word	0x080022a0
 8001ffc:	08002370 	.word	0x08002370

08002000 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8002000:	b4f0      	push	{r4, r5, r6, r7}
 8002002:	4f14      	ldr	r7, [pc, #80]	; (8002054 <__init_ram_areas+0x54>)
 8002004:	4d14      	ldr	r5, [pc, #80]	; (8002058 <__init_ram_areas+0x58>)
 8002006:	4815      	ldr	r0, [pc, #84]	; (800205c <__init_ram_areas+0x5c>)
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <__init_ram_areas+0x60>)
 800200a:	4916      	ldr	r1, [pc, #88]	; (8002064 <__init_ram_areas+0x64>)
 800200c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8002010:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8002012:	4298      	cmp	r0, r3
 8002014:	d911      	bls.n	800203a <__init_ram_areas+0x3a>
 8002016:	3904      	subs	r1, #4
 8002018:	461a      	mov	r2, r3
      *p = *tp;
 800201a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800201e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8002022:	4290      	cmp	r0, r2
 8002024:	d8f9      	bhi.n	800201a <__init_ram_areas+0x1a>
 8002026:	1e42      	subs	r2, r0, #1
 8002028:	1ad2      	subs	r2, r2, r3
 800202a:	f022 0203 	bic.w	r2, r2, #3
 800202e:	3204      	adds	r2, #4
 8002030:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8002032:	429d      	cmp	r5, r3
 8002034:	d903      	bls.n	800203e <__init_ram_areas+0x3e>
      *p = 0;
 8002036:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800203a:	429d      	cmp	r5, r3
 800203c:	d8fb      	bhi.n	8002036 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800203e:	4567      	cmp	r7, ip
 8002040:	d005      	beq.n	800204e <__init_ram_areas+0x4e>
 8002042:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8002046:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 800204a:	3710      	adds	r7, #16
 800204c:	e7e1      	b.n	8002012 <__init_ram_areas+0x12>
#endif
}
 800204e:	bcf0      	pop	{r4, r5, r6, r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	08002470 	.word	0x08002470
 8002058:	20001ba0 	.word	0x20001ba0
 800205c:	20001ba0 	.word	0x20001ba0
 8002060:	20001ba0 	.word	0x20001ba0
 8002064:	080024f0 	.word	0x080024f0
	...

08002070 <__default_exit>:
  while (true) {
 8002070:	e7fe      	b.n	8002070 <__default_exit>
 8002072:	bf00      	nop
	...

08002080 <__late_init>:
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
	...

08002090 <__core_init>:
}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
