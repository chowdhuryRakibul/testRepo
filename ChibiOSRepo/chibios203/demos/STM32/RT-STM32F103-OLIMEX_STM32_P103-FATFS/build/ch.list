
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023b 	.word	0x0800023b
 8000010:	0800023b 	.word	0x0800023b
 8000014:	0800023b 	.word	0x0800023b
 8000018:	0800023b 	.word	0x0800023b
 800001c:	0800023b 	.word	0x0800023b
 8000020:	0800023b 	.word	0x0800023b
 8000024:	0800023b 	.word	0x0800023b
 8000028:	0800023b 	.word	0x0800023b
 800002c:	08009c11 	.word	0x08009c11
 8000030:	0800023b 	.word	0x0800023b
 8000034:	0800023b 	.word	0x0800023b
 8000038:	0800023b 	.word	0x0800023b
 800003c:	0800023b 	.word	0x0800023b
 8000040:	0800023b 	.word	0x0800023b
 8000044:	0800023b 	.word	0x0800023b
 8000048:	0800023b 	.word	0x0800023b
 800004c:	0800023b 	.word	0x0800023b
 8000050:	0800023b 	.word	0x0800023b
 8000054:	0800023b 	.word	0x0800023b
 8000058:	0800023b 	.word	0x0800023b
 800005c:	0800023b 	.word	0x0800023b
 8000060:	0800023b 	.word	0x0800023b
 8000064:	0800023b 	.word	0x0800023b
 8000068:	0800023b 	.word	0x0800023b
 800006c:	0800bf91 	.word	0x0800bf91
 8000070:	0800bf71 	.word	0x0800bf71
 8000074:	0800bf51 	.word	0x0800bf51
 8000078:	0800bf31 	.word	0x0800bf31
 800007c:	0800bf11 	.word	0x0800bf11
 8000080:	0800bef1 	.word	0x0800bef1
 8000084:	0800bed1 	.word	0x0800bed1
 8000088:	0800023b 	.word	0x0800023b
 800008c:	0800023b 	.word	0x0800023b
 8000090:	0800023b 	.word	0x0800023b
 8000094:	0800023b 	.word	0x0800023b
 8000098:	0800023b 	.word	0x0800023b
 800009c:	0800023b 	.word	0x0800023b
 80000a0:	0800023b 	.word	0x0800023b
 80000a4:	0800023b 	.word	0x0800023b
 80000a8:	0800023b 	.word	0x0800023b
 80000ac:	0800023b 	.word	0x0800023b
 80000b0:	0800be01 	.word	0x0800be01
 80000b4:	0800023b 	.word	0x0800023b
 80000b8:	0800023b 	.word	0x0800023b
 80000bc:	0800023b 	.word	0x0800023b
 80000c0:	0800023b 	.word	0x0800023b
 80000c4:	0800023b 	.word	0x0800023b
 80000c8:	0800023b 	.word	0x0800023b
 80000cc:	0800023b 	.word	0x0800023b
 80000d0:	0800023b 	.word	0x0800023b
 80000d4:	0800023b 	.word	0x0800023b
 80000d8:	0800bc61 	.word	0x0800bc61
 80000dc:	0800023b 	.word	0x0800023b
 80000e0:	0800023b 	.word	0x0800023b
 80000e4:	0800023b 	.word	0x0800023b
 80000e8:	0800023b 	.word	0x0800023b
 80000ec:	0800023b 	.word	0x0800023b
 80000f0:	0800023b 	.word	0x0800023b
 80000f4:	0800023b 	.word	0x0800023b
 80000f8:	0800023b 	.word	0x0800023b
 80000fc:	0800023b 	.word	0x0800023b
 8000100:	0800023b 	.word	0x0800023b
 8000104:	0800023b 	.word	0x0800023b
 8000108:	0800023b 	.word	0x0800023b
 800010c:	0800023b 	.word	0x0800023b
 8000110:	0800023b 	.word	0x0800023b
 8000114:	0800023b 	.word	0x0800023b
 8000118:	0800023b 	.word	0x0800023b
 800011c:	0800023b 	.word	0x0800023b
 8000120:	0800023b 	.word	0x0800023b
 8000124:	0800023b 	.word	0x0800023b
 8000128:	0800023b 	.word	0x0800023b
 800012c:	0800023b 	.word	0x0800023b
 8000130:	0800023b 	.word	0x0800023b
 8000134:	0800023b 	.word	0x0800023b
 8000138:	0800023b 	.word	0x0800023b
 800013c:	0800023b 	.word	0x0800023b
 8000140:	0800023b 	.word	0x0800023b
 8000144:	0800023b 	.word	0x0800023b
 8000148:	0800023b 	.word	0x0800023b
 800014c:	0800023b 	.word	0x0800023b
 8000150:	0800023b 	.word	0x0800023b
 8000154:	0800023b 	.word	0x0800023b
 8000158:	0800023b 	.word	0x0800023b
 800015c:	0800023b 	.word	0x0800023b

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4827      	ldr	r0, [pc, #156]	; (8000200 <endfiniloop+0x4>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4826      	ldr	r0, [pc, #152]	; (8000204 <endfiniloop+0x8>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800016e:	4826      	ldr	r0, [pc, #152]	; (8000208 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000170:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000174:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000178:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800017a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800017c:	f380 8814 	msr	CONTROL, r0
                isb
 8000180:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000184:	f00b fff4 	bl	800c170 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000188:	f00b fd2a 	bl	800bbe0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800018c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000190:	491e      	ldr	r1, [pc, #120]	; (800020c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000192:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <endfiniloop+0x4>)

08000194 <msloop>:
msloop:
                cmp     r1, r2
 8000194:	4291      	cmp	r1, r2
                itt     lo
 8000196:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000198:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800019c:	e7fa      	bcc.n	8000194 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800019e:	491c      	ldr	r1, [pc, #112]	; (8000210 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001a0:	4a18      	ldr	r2, [pc, #96]	; (8000204 <endfiniloop+0x8>)

080001a2 <psloop>:
psloop:
                cmp     r1, r2
 80001a2:	4291      	cmp	r1, r2
                itt     lo
 80001a4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001aa:	e7fa      	bcc.n	80001a2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80001ac:	4919      	ldr	r1, [pc, #100]	; (8000214 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80001ae:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80001b0:	4b1a      	ldr	r3, [pc, #104]	; (800021c <endfiniloop+0x20>)

080001b2 <dloop>:
dloop:
                cmp     r2, r3
 80001b2:	429a      	cmp	r2, r3
                ittt    lo
 80001b4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ba:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001be:	e7f8      	bcc.n	80001b2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001c0:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001c2:	4917      	ldr	r1, [pc, #92]	; (8000220 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <endfiniloop+0x28>)

080001c6 <bloop>:
bloop:
                cmp     r1, r2
 80001c6:	4291      	cmp	r1, r2
                itt     lo
 80001c8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001ca:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001ce:	e7fa      	bcc.n	80001c6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001d0:	f00b ff86 	bl	800c0e0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001d4:	f00b ffc4 	bl	800c160 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001d8:	4c13      	ldr	r4, [pc, #76]	; (8000228 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 80001da:	4d14      	ldr	r5, [pc, #80]	; (800022c <endfiniloop+0x30>)

080001dc <initloop>:
initloop:
                cmp     r4, r5
 80001dc:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001de:	da03      	bge.n	80001e8 <endinitloop>
                ldr     r1, [r4], #4
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001e4:	4788      	blx	r1
                b       initloop
 80001e6:	e7f9      	b.n	80001dc <initloop>

080001e8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e8:	f008 fa82 	bl	80086f0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001ec:	4c10      	ldr	r4, [pc, #64]	; (8000230 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 80001ee:	4d11      	ldr	r5, [pc, #68]	; (8000234 <endfiniloop+0x38>)

080001f0 <finiloop>:
finiloop:
                cmp     r4, r5
 80001f0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001f2:	da03      	bge.n	80001fc <endfiniloop>
                ldr     r1, [r4], #4
 80001f4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f8:	4788      	blx	r1
                b       finiloop
 80001fa:	e7f9      	b.n	80001f0 <finiloop>

080001fc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001fc:	f00b bfa8 	b.w	800c150 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000200:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000204:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000208:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000214:	0800f674 	.word	0x0800f674
                ldr     r2, =__data_base__
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800021c:	20000910 	.word	0x20000910
                ldr     r1, =__bss_base__
 8000220:	20000910 	.word	0x20000910
                ldr     r2, =__bss_end__
 8000224:	20002404 	.word	0x20002404
                ldr     r4, =__init_array_base__
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_base__
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end__
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800023a:	f000 f800 	bl	800023e <_unhandled_exception>

0800023e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023e:	e7fe      	b.n	800023e <_unhandled_exception>

08000240 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000250:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000252:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000256:	4628      	mov	r0, r5
                blx     r4
 8000258:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800025a:	2000      	movs	r0, #0
                bl      chThdExit
 800025c:	f00a fdc0 	bl	800ade0 <chThdExit>

08000260 <_zombies>:
_zombies:       b       _zombies
 8000260:	e7fe      	b.n	8000260 <_zombies>

08000262 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000262:	f009 fe5d 	bl	8009f20 <chSchDoReschedule>

08000266 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000266:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000268:	e7fe      	b.n	8000268 <_port_exit_from_isr+0x2>
	...

0800026c <memcpy>:
 800026c:	4684      	mov	ip, r0
 800026e:	ea41 0300 	orr.w	r3, r1, r0
 8000272:	f013 0303 	ands.w	r3, r3, #3
 8000276:	d149      	bne.n	800030c <memcpy+0xa0>
 8000278:	3a40      	subs	r2, #64	; 0x40
 800027a:	d323      	bcc.n	80002c4 <memcpy+0x58>
 800027c:	680b      	ldr	r3, [r1, #0]
 800027e:	6003      	str	r3, [r0, #0]
 8000280:	684b      	ldr	r3, [r1, #4]
 8000282:	6043      	str	r3, [r0, #4]
 8000284:	688b      	ldr	r3, [r1, #8]
 8000286:	6083      	str	r3, [r0, #8]
 8000288:	68cb      	ldr	r3, [r1, #12]
 800028a:	60c3      	str	r3, [r0, #12]
 800028c:	690b      	ldr	r3, [r1, #16]
 800028e:	6103      	str	r3, [r0, #16]
 8000290:	694b      	ldr	r3, [r1, #20]
 8000292:	6143      	str	r3, [r0, #20]
 8000294:	698b      	ldr	r3, [r1, #24]
 8000296:	6183      	str	r3, [r0, #24]
 8000298:	69cb      	ldr	r3, [r1, #28]
 800029a:	61c3      	str	r3, [r0, #28]
 800029c:	6a0b      	ldr	r3, [r1, #32]
 800029e:	6203      	str	r3, [r0, #32]
 80002a0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80002a2:	6243      	str	r3, [r0, #36]	; 0x24
 80002a4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80002a6:	6283      	str	r3, [r0, #40]	; 0x28
 80002a8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80002aa:	62c3      	str	r3, [r0, #44]	; 0x2c
 80002ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80002ae:	6303      	str	r3, [r0, #48]	; 0x30
 80002b0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80002b2:	6343      	str	r3, [r0, #52]	; 0x34
 80002b4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80002b6:	6383      	str	r3, [r0, #56]	; 0x38
 80002b8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80002ba:	63c3      	str	r3, [r0, #60]	; 0x3c
 80002bc:	3040      	adds	r0, #64	; 0x40
 80002be:	3140      	adds	r1, #64	; 0x40
 80002c0:	3a40      	subs	r2, #64	; 0x40
 80002c2:	d2db      	bcs.n	800027c <memcpy+0x10>
 80002c4:	3230      	adds	r2, #48	; 0x30
 80002c6:	d30b      	bcc.n	80002e0 <memcpy+0x74>
 80002c8:	680b      	ldr	r3, [r1, #0]
 80002ca:	6003      	str	r3, [r0, #0]
 80002cc:	684b      	ldr	r3, [r1, #4]
 80002ce:	6043      	str	r3, [r0, #4]
 80002d0:	688b      	ldr	r3, [r1, #8]
 80002d2:	6083      	str	r3, [r0, #8]
 80002d4:	68cb      	ldr	r3, [r1, #12]
 80002d6:	60c3      	str	r3, [r0, #12]
 80002d8:	3010      	adds	r0, #16
 80002da:	3110      	adds	r1, #16
 80002dc:	3a10      	subs	r2, #16
 80002de:	d2f3      	bcs.n	80002c8 <memcpy+0x5c>
 80002e0:	320c      	adds	r2, #12
 80002e2:	d305      	bcc.n	80002f0 <memcpy+0x84>
 80002e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e8:	f840 3b04 	str.w	r3, [r0], #4
 80002ec:	3a04      	subs	r2, #4
 80002ee:	d2f9      	bcs.n	80002e4 <memcpy+0x78>
 80002f0:	3204      	adds	r2, #4
 80002f2:	d008      	beq.n	8000306 <memcpy+0x9a>
 80002f4:	07d2      	lsls	r2, r2, #31
 80002f6:	bf1c      	itt	ne
 80002f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000300:	d301      	bcc.n	8000306 <memcpy+0x9a>
 8000302:	880b      	ldrh	r3, [r1, #0]
 8000304:	8003      	strh	r3, [r0, #0]
 8000306:	4660      	mov	r0, ip
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	2a08      	cmp	r2, #8
 800030e:	d313      	bcc.n	8000338 <memcpy+0xcc>
 8000310:	078b      	lsls	r3, r1, #30
 8000312:	d0b1      	beq.n	8000278 <memcpy+0xc>
 8000314:	f010 0303 	ands.w	r3, r0, #3
 8000318:	d0ae      	beq.n	8000278 <memcpy+0xc>
 800031a:	f1c3 0304 	rsb	r3, r3, #4
 800031e:	1ad2      	subs	r2, r2, r3
 8000320:	07db      	lsls	r3, r3, #31
 8000322:	bf1c      	itt	ne
 8000324:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000328:	f800 3b01 	strbne.w	r3, [r0], #1
 800032c:	d3a4      	bcc.n	8000278 <memcpy+0xc>
 800032e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000332:	f820 3b02 	strh.w	r3, [r0], #2
 8000336:	e79f      	b.n	8000278 <memcpy+0xc>
 8000338:	3a04      	subs	r2, #4
 800033a:	d3d9      	bcc.n	80002f0 <memcpy+0x84>
 800033c:	3a01      	subs	r2, #1
 800033e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000342:	f800 3b01 	strb.w	r3, [r0], #1
 8000346:	d2f9      	bcs.n	800033c <memcpy+0xd0>
 8000348:	780b      	ldrb	r3, [r1, #0]
 800034a:	7003      	strb	r3, [r0, #0]
 800034c:	784b      	ldrb	r3, [r1, #1]
 800034e:	7043      	strb	r3, [r0, #1]
 8000350:	788b      	ldrb	r3, [r1, #2]
 8000352:	7083      	strb	r3, [r0, #2]
 8000354:	4660      	mov	r0, ip
 8000356:	4770      	bx	lr

08000358 <strcmp>:
 8000358:	ea80 0c01 	eor.w	ip, r0, r1
 800035c:	f01c 0f03 	tst.w	ip, #3
 8000360:	d137      	bne.n	80003d2 <strcmp+0x7a>
 8000362:	f010 0c03 	ands.w	ip, r0, #3
 8000366:	f020 0003 	bic.w	r0, r0, #3
 800036a:	f021 0103 	bic.w	r1, r1, #3
 800036e:	f850 2b04 	ldr.w	r2, [r0], #4
 8000372:	bf08      	it	eq
 8000374:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000378:	d00e      	beq.n	8000398 <strcmp+0x40>
 800037a:	f08c 0c03 	eor.w	ip, ip, #3
 800037e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000382:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000386:	fa23 fc0c 	lsr.w	ip, r3, ip
 800038a:	f851 3b04 	ldr.w	r3, [r1], #4
 800038e:	ea42 020c 	orr.w	r2, r2, ip
 8000392:	ea43 030c 	orr.w	r3, r3, ip
 8000396:	bf00      	nop
 8000398:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800039c:	429a      	cmp	r2, r3
 800039e:	bf01      	itttt	eq
 80003a0:	ea2c 0c02 	biceq.w	ip, ip, r2
 80003a4:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 80003a8:	f850 2b04 	ldreq.w	r2, [r0], #4
 80003ac:	f851 3b04 	ldreq.w	r3, [r1], #4
 80003b0:	d0f2      	beq.n	8000398 <strcmp+0x40>
 80003b2:	ea4f 6002 	mov.w	r0, r2, lsl #24
 80003b6:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80003ba:	2801      	cmp	r0, #1
 80003bc:	bf28      	it	cs
 80003be:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 80003c2:	bf08      	it	eq
 80003c4:	0a1b      	lsreq	r3, r3, #8
 80003c6:	d0f4      	beq.n	80003b2 <strcmp+0x5a>
 80003c8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80003cc:	0e00      	lsrs	r0, r0, #24
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4770      	bx	lr
 80003d2:	f010 0f03 	tst.w	r0, #3
 80003d6:	d00a      	beq.n	80003ee <strcmp+0x96>
 80003d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80003dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003e0:	2a01      	cmp	r2, #1
 80003e2:	bf28      	it	cs
 80003e4:	429a      	cmpcs	r2, r3
 80003e6:	d0f4      	beq.n	80003d2 <strcmp+0x7a>
 80003e8:	eba2 0003 	sub.w	r0, r2, r3
 80003ec:	4770      	bx	lr
 80003ee:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80003f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80003f6:	f001 0503 	and.w	r5, r1, #3
 80003fa:	f021 0103 	bic.w	r1, r1, #3
 80003fe:	f851 3b04 	ldr.w	r3, [r1], #4
 8000402:	2d02      	cmp	r5, #2
 8000404:	d026      	beq.n	8000454 <strcmp+0xfc>
 8000406:	d84d      	bhi.n	80004a4 <strcmp+0x14c>
 8000408:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 800040c:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 8000410:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000414:	ea2c 0c02 	bic.w	ip, ip, r2
 8000418:	d10d      	bne.n	8000436 <strcmp+0xde>
 800041a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 800041e:	bf08      	it	eq
 8000420:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000424:	d10a      	bne.n	800043c <strcmp+0xe4>
 8000426:	ea85 0502 	eor.w	r5, r5, r2
 800042a:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 800042e:	d10c      	bne.n	800044a <strcmp+0xf2>
 8000430:	f850 2b04 	ldr.w	r2, [r0], #4
 8000434:	e7e8      	b.n	8000408 <strcmp+0xb0>
 8000436:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800043a:	e05b      	b.n	80004f4 <strcmp+0x19c>
 800043c:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 8000440:	d154      	bne.n	80004ec <strcmp+0x194>
 8000442:	780b      	ldrb	r3, [r1, #0]
 8000444:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000448:	e054      	b.n	80004f4 <strcmp+0x19c>
 800044a:	ea4f 6512 	mov.w	r5, r2, lsr #24
 800044e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000452:	e04f      	b.n	80004f4 <strcmp+0x19c>
 8000454:	ea4f 4502 	mov.w	r5, r2, lsl #16
 8000458:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800045c:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8000460:	ea2c 0c02 	bic.w	ip, ip, r2
 8000464:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 8000468:	d118      	bne.n	800049c <strcmp+0x144>
 800046a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 800046e:	bf08      	it	eq
 8000470:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000474:	d107      	bne.n	8000486 <strcmp+0x12e>
 8000476:	ea85 0502 	eor.w	r5, r5, r2
 800047a:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 800047e:	d109      	bne.n	8000494 <strcmp+0x13c>
 8000480:	f850 2b04 	ldr.w	r2, [r0], #4
 8000484:	e7e6      	b.n	8000454 <strcmp+0xfc>
 8000486:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 800048a:	d12f      	bne.n	80004ec <strcmp+0x194>
 800048c:	880b      	ldrh	r3, [r1, #0]
 800048e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000492:	e02f      	b.n	80004f4 <strcmp+0x19c>
 8000494:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8000498:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800049c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80004a0:	e028      	b.n	80004f4 <strcmp+0x19c>
 80004a2:	bf00      	nop
 80004a4:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 80004a8:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 80004ac:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80004b0:	ea2c 0c02 	bic.w	ip, ip, r2
 80004b4:	d10d      	bne.n	80004d2 <strcmp+0x17a>
 80004b6:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 80004ba:	bf08      	it	eq
 80004bc:	f851 3b04 	ldreq.w	r3, [r1], #4
 80004c0:	d10a      	bne.n	80004d8 <strcmp+0x180>
 80004c2:	ea85 0502 	eor.w	r5, r5, r2
 80004c6:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 80004ca:	d10a      	bne.n	80004e2 <strcmp+0x18a>
 80004cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80004d0:	e7e8      	b.n	80004a4 <strcmp+0x14c>
 80004d2:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80004d6:	e00d      	b.n	80004f4 <strcmp+0x19c>
 80004d8:	f012 0fff 	tst.w	r2, #255	; 0xff
 80004dc:	d006      	beq.n	80004ec <strcmp+0x194>
 80004de:	f851 3b04 	ldr.w	r3, [r1], #4
 80004e2:	ea4f 2512 	mov.w	r5, r2, lsr #8
 80004e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80004ea:	e003      	b.n	80004f4 <strcmp+0x19c>
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	bc20      	pop	{r5}
 80004f2:	4770      	bx	lr
 80004f4:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 80004f8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80004fc:	2801      	cmp	r0, #1
 80004fe:	bf28      	it	cs
 8000500:	4290      	cmpcs	r0, r2
 8000502:	bf04      	itt	eq
 8000504:	0a2d      	lsreq	r5, r5, #8
 8000506:	0a1b      	lsreq	r3, r3, #8
 8000508:	d0f4      	beq.n	80004f4 <strcmp+0x19c>
 800050a:	eba2 0000 	sub.w	r0, r2, r0
 800050e:	bc20      	pop	{r5}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
	...

08000520 <chMtxTryLock.constprop.0>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000520:	2320      	movs	r3, #32
 8000522:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <chMtxTryLock.constprop.0+0x2c>)
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	b122      	cbz	r2, 8000536 <chMtxTryLock.constprop.0+0x16>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 800052c:	2000      	movs	r0, #0
 800052e:	2300      	movs	r3, #0
 8000530:	f383 8811 	msr	BASEPRI, r3
}
 8000534:	4770      	bx	lr

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 8000536:	4a06      	ldr	r2, [pc, #24]	; (8000550 <chMtxTryLock.constprop.0+0x30>)
  mp->next = currp->mtxlist;
  currp->mtxlist = mp;
 8000538:	2001      	movs	r0, #1
  mp->owner = currp;
 800053a:	6992      	ldr	r2, [r2, #24]
  mp->next = currp->mtxlist;
 800053c:	6b91      	ldr	r1, [r2, #56]	; 0x38
  currp->mtxlist = mp;
 800053e:	6393      	str	r3, [r2, #56]	; 0x38
  mp->next = currp->mtxlist;
 8000540:	e9c3 2102 	strd	r2, r1, [r3, #8]
 8000544:	2300      	movs	r3, #0
 8000546:	f383 8811 	msr	BASEPRI, r3
}
 800054a:	4770      	bx	lr
 800054c:	20000854 	.word	0x20000854
 8000550:	20000c88 	.word	0x20000c88
	...

08000560 <chEvtRegisterMaskWithFlags.constprop.0>:
 *                      the event source is broadcasted
 * @param[in] wflags    mask of flags the listening thread is interested in
 *
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
 8000560:	b470      	push	{r4, r5, r6}
 8000562:	2320      	movs	r3, #32
 8000564:	f383 8811 	msr	BASEPRI, r3
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
  elp->wflags   = wflags;
 8000568:	f04f 34ff 	mov.w	r4, #4294967295
  elp->flags    = (eventflags_t)0;
 800056c:	2300      	movs	r3, #0
  elp->listener = currp;
 800056e:	4d06      	ldr	r5, [pc, #24]	; (8000588 <chEvtRegisterMaskWithFlags.constprop.0+0x28>)
  elp->next     = esp->next;
 8000570:	6806      	ldr	r6, [r0, #0]
  elp->listener = currp;
 8000572:	69ad      	ldr	r5, [r5, #24]
  elp->next     = esp->next;
 8000574:	600e      	str	r6, [r1, #0]
  esp->next     = elp;
 8000576:	6001      	str	r1, [r0, #0]
  elp->events   = events;
 8000578:	e9c1 5201 	strd	r5, r2, [r1, #4]
  elp->flags    = (eventflags_t)0;
 800057c:	e9c1 3403 	strd	r3, r4, [r1, #12]
 8000580:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8000584:	bc70      	pop	{r4, r5, r6}
 8000586:	4770      	bx	lr
 8000588:	20000c88 	.word	0x20000c88
 800058c:	00000000 	.word	0x00000000

08000590 <chEvtGetAndClearEvents.constprop.0>:
 8000590:	2320      	movs	r3, #32
 8000592:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
  currp->epending &= ~events;
 8000596:	2300      	movs	r3, #0
  m = currp->epending & events;
 8000598:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <chEvtGetAndClearEvents.constprop.0+0x18>)
 800059a:	6992      	ldr	r2, [r2, #24]
 800059c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
 800059e:	6353      	str	r3, [r2, #52]	; 0x34
 80005a0:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  m = chEvtGetAndClearEventsI(events);
  chSysUnlock();

  return m;
}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000c88 	.word	0x20000c88
 80005ac:	00000000 	.word	0x00000000

080005b0 <_test_assert_time_window.constprop.0>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80005b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
                (systime_t)((systime_t)end - (systime_t)start));
 80005b6:	1a09      	subs	r1, r1, r0
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80005b8:	1a1b      	subs	r3, r3, r0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 80005ba:	b289      	uxth	r1, r1
 80005bc:	b29b      	uxth	r3, r3
 80005be:	428b      	cmp	r3, r1
 80005c0:	d201      	bcs.n	80005c6 <_test_assert_time_window.constprop.0+0x16>
    return _test_fail(msg);
  return false;
 80005c2:	2000      	movs	r0, #0
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
 80005c4:	4770      	bx	lr
  test_local_fail      = true;
 80005c6:	2001      	movs	r0, #1
bool _test_assert_time_window(systime_t start,
 80005c8:	b410      	push	{r4}
  test_global_fail     = true;
 80005ca:	4904      	ldr	r1, [pc, #16]	; (80005dc <_test_assert_time_window.constprop.0+0x2c>)
  test_local_fail      = true;
 80005cc:	4c04      	ldr	r4, [pc, #16]	; (80005e0 <_test_assert_time_window.constprop.0+0x30>)
  test_failure_message = msg;
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <_test_assert_time_window.constprop.0+0x34>)
 80005d0:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <_test_assert_time_window.constprop.0+0x38>)
  test_local_fail      = true;
 80005d2:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 80005d4:	7008      	strb	r0, [r1, #0]
}
 80005d6:	bc10      	pop	{r4}
  test_failure_message = msg;
 80005d8:	601a      	str	r2, [r3, #0]
}
 80005da:	4770      	bx	lr
 80005dc:	20001c50 	.word	0x20001c50
 80005e0:	20001cf0 	.word	0x20001cf0
 80005e4:	20001c4c 	.word	0x20001c4c
 80005e8:	0800c5a4 	.word	0x0800c5a4
 80005ec:	00000000 	.word	0x00000000

080005f0 <oslib_test_008_001_setup.lto_priv.0>:
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 80005f0:	2000      	movs	r0, #0
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <oslib_test_008_001_setup.lto_priv.0+0x30>)
  heapp->provider = NULL;
 80005f4:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <oslib_test_008_001_setup.lto_priv.0+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80005f6:	1dd9      	adds	r1, r3, #7
 80005f8:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80005fc:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80005fe:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 * - [8.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_008_001_setup(void) {
 8000602:	b410      	push	{r4}
 8000604:	08db      	lsrs	r3, r3, #3
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000606:	f102 040c 	add.w	r4, r2, #12
 800060a:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 800060c:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 800060e:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8000610:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8000614:	6010      	str	r0, [r2, #0]
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 8000616:	bc10      	pop	{r4}
  H_PAGES(&heapp->header) = 0;
 8000618:	6090      	str	r0, [r2, #8]
  mp->owner = NULL;
 800061a:	6150      	str	r0, [r2, #20]
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20001c70 	.word	0x20001c70
 8000624:	20001c54 	.word	0x20001c54
	...

08000630 <oslib_test_007_003_setup.lto_priv.0>:
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8000630:	2200      	movs	r2, #0
  mp->object_size = size;
 8000632:	2104      	movs	r1, #4
  mp->next = NULL;
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <oslib_test_007_003_setup.lto_priv.0+0x18>)
 8000636:	e9c3 3300 	strd	r3, r3, [r3]
  mp->align = align;
 800063a:	e9c3 1104 	strd	r1, r1, [r3, #16]
  mp->next = NULL;
 800063e:	60da      	str	r2, [r3, #12]
  mp->provider = provider;
 8000640:	619a      	str	r2, [r3, #24]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 8000642:	609a      	str	r2, [r3, #8]
 * .
 */

static void oslib_test_007_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000810 	.word	0x20000810
 800064c:	00000000 	.word	0x00000000

08000650 <oslib_test_007_002_setup.lto_priv.0>:
 8000650:	f7ff bfee 	b.w	8000630 <oslib_test_007_003_setup.lto_priv.0>
	...

08000660 <null_provider>:
}
 8000660:	2000      	movs	r0, #0
 8000662:	4770      	bx	lr
	...

08000670 <oslib_test_007_001_setup.lto_priv.0>:
  mp->next = NULL;
 8000670:	2100      	movs	r1, #0
  mp->object_size = size;
 8000672:	2204      	movs	r2, #4
  mp->next = NULL;
 8000674:	4b02      	ldr	r3, [pc, #8]	; (8000680 <oslib_test_007_001_setup.lto_priv.0+0x10>)
  mp->align = align;
 8000676:	e9c3 2201 	strd	r2, r2, [r3, #4]
  mp->next = NULL;
 800067a:	6019      	str	r1, [r3, #0]
  mp->provider = provider;
 800067c:	60d9      	str	r1, [r3, #12]
}
 800067e:	4770      	bx	lr
 8000680:	200008a8 	.word	0x200008a8
	...

08000690 <oslib_test_003_002_setup.lto_priv.0>:

  pp->buffer = buf;
  pp->rdptr  = buf;
  pp->wrptr  = buf;
  pp->top    = &buf[n];
  pp->cnt    = (size_t)0;
 8000690:	2200      	movs	r2, #0
 * - [3.2.1] Reading while pipe is empty.
 * - [3.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_003_002_setup(void) {
 8000692:	b430      	push	{r4, r5}
  pp->buffer = buf;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <oslib_test_003_002_setup.lto_priv.0+0x40>)
 8000696:	490f      	ldr	r1, [pc, #60]	; (80006d4 <oslib_test_003_002_setup.lto_priv.0+0x44>)
  tqp->next = (thread_t *)tqp;
 8000698:	f103 0420 	add.w	r4, r3, #32
  pp->top    = &buf[n];
 800069c:	f101 0508 	add.w	r5, r1, #8
  pp->wrptr  = buf;
 80006a0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80006a4:	f103 0030 	add.w	r0, r3, #48	; 0x30
  pp->buffer = buf;
 80006a8:	6019      	str	r1, [r3, #0]
 80006aa:	f103 0140 	add.w	r1, r3, #64	; 0x40
  tqp->prev = (thread_t *)tqp;
 80006ae:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->top    = &buf[n];
 80006b2:	605d      	str	r5, [r3, #4]
 80006b4:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}
 80006b8:	bc30      	pop	{r4, r5}
 80006ba:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->reset  = false;
  pp->wtr    = NULL;
  pp->rtr    = NULL;
 80006be:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 80006c2:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 80006c4:	751a      	strb	r2, [r3, #20]
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
 80006c8:	639a      	str	r2, [r3, #56]	; 0x38
 80006ca:	649a      	str	r2, [r3, #72]	; 0x48
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	200008c0 	.word	0x200008c0
 80006d4:	20000c34 	.word	0x20000c34
	...

080006e0 <oslib_test_003_001_setup.lto_priv.0>:
  pp->cnt    = (size_t)0;
 80006e0:	2200      	movs	r2, #0
static void oslib_test_003_001_setup(void) {
 80006e2:	b430      	push	{r4, r5}
  pp->buffer = buf;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <oslib_test_003_001_setup.lto_priv.0+0x40>)
 80006e6:	490f      	ldr	r1, [pc, #60]	; (8000724 <oslib_test_003_001_setup.lto_priv.0+0x44>)
  tqp->next = (thread_t *)tqp;
 80006e8:	f103 0420 	add.w	r4, r3, #32
  pp->top    = &buf[n];
 80006ec:	f101 0510 	add.w	r5, r1, #16
  pp->wrptr  = buf;
 80006f0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80006f4:	f103 0030 	add.w	r0, r3, #48	; 0x30
  pp->buffer = buf;
 80006f8:	6019      	str	r1, [r3, #0]
 80006fa:	f103 0140 	add.w	r1, r3, #64	; 0x40
  tqp->prev = (thread_t *)tqp;
 80006fe:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->top    = &buf[n];
 8000702:	605d      	str	r5, [r3, #4]
 8000704:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
}
 8000708:	bc30      	pop	{r4, r5}
 800070a:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->rtr    = NULL;
 800070e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 8000712:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8000714:	751a      	strb	r2, [r3, #20]
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
 8000718:	639a      	str	r2, [r3, #56]	; 0x38
 800071a:	649a      	str	r2, [r3, #72]	; 0x48
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	200008c0 	.word	0x200008c0
 8000724:	20000c34 	.word	0x20000c34
	...

08000730 <oslib_test_002_003_setup.lto_priv.0>:

  mbp->buffer = buf;
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
  mbp->cnt    = (size_t)0;
 8000730:	2100      	movs	r1, #0
 *   active state.
 * - [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_002_003_setup(void) {
 8000732:	b430      	push	{r4, r5}
  mbp->buffer = buf;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <oslib_test_002_003_setup.lto_priv.0+0x2c>)
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <oslib_test_002_003_setup.lto_priv.0+0x30>)
  tqp->next = (thread_t *)tqp;
 8000738:	f103 0418 	add.w	r4, r3, #24
  mbp->top    = &buf[n];
 800073c:	f102 0510 	add.w	r5, r2, #16
 8000740:	f103 0020 	add.w	r0, r3, #32
  tqp->prev = (thread_t *)tqp;
 8000744:	e9c3 4406 	strd	r4, r4, [r3, #24]
 8000748:	605d      	str	r5, [r3, #4]
  mbp->wrptr  = buf;
 800074a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 800074e:	bc30      	pop	{r4, r5}
 8000750:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->buffer = buf;
 8000754:	601a      	str	r2, [r3, #0]
  mbp->cnt    = (size_t)0;
 8000756:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 8000758:	7519      	strb	r1, [r3, #20]
 800075a:	4770      	bx	lr
 800075c:	20000874 	.word	0x20000874
 8000760:	20001478 	.word	0x20001478
	...

08000770 <oslib_test_002_002_setup.lto_priv.0>:
 8000770:	f7ff bfde 	b.w	8000730 <oslib_test_002_003_setup.lto_priv.0>
	...

08000780 <oslib_test_002_001_setup.lto_priv.0>:
 8000780:	f7ff bfd6 	b.w	8000730 <oslib_test_002_003_setup.lto_priv.0>
	...

08000790 <rt_test_011_011_setup.lto_priv.0>:
 8000790:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 8000792:	4b02      	ldr	r3, [pc, #8]	; (800079c <rt_test_011_011_setup.lto_priv.0+0xc>)
  tqp->prev = (thread_t *)tqp;
 8000794:	e9c3 3300 	strd	r3, r3, [r3]
 8000798:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_011_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 800079a:	4770      	bx	lr
 800079c:	200014a8 	.word	0x200014a8

080007a0 <rt_test_011_010_setup.lto_priv.0>:
 80007a0:	2201      	movs	r2, #1
  tqp->next = (thread_t *)tqp;
 80007a2:	4b02      	ldr	r3, [pc, #8]	; (80007ac <rt_test_011_010_setup.lto_priv.0+0xc>)
  tqp->prev = (thread_t *)tqp;
 80007a4:	e9c3 3300 	strd	r3, r3, [r3]
 80007a8:	609a      	str	r2, [r3, #8]
}
 80007aa:	4770      	bx	lr
 80007ac:	200015c8 	.word	0x200015c8

080007b0 <tmo>:
static void tmo(void *param) {(void)param;}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
	...

080007c0 <rt_test_011_007_setup.lto_priv.0>:
 80007c0:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 80007c2:	4b02      	ldr	r3, [pc, #8]	; (80007cc <rt_test_011_007_setup.lto_priv.0+0xc>)
  tqp->prev = (thread_t *)tqp;
 80007c4:	e9c3 3300 	strd	r3, r3, [r3]
 80007c8:	609a      	str	r2, [r3, #8]
}
 80007ca:	4770      	bx	lr
 80007cc:	200015c8 	.word	0x200015c8

080007d0 <rt_test_010_002_setup.lto_priv.0>:
  mp->next = NULL;
 80007d0:	2200      	movs	r2, #0
  mp->object_size = size;
 80007d2:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
 80007d6:	2104      	movs	r1, #4
  mp->next = NULL;
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <rt_test_010_002_setup.lto_priv.0+0x14>)
  mp->align = align;
 80007da:	e9c3 0101 	strd	r0, r1, [r3, #4]
  mp->next = NULL;
 80007de:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 80007e0:	60da      	str	r2, [r3, #12]
 * .
 */

static void rt_test_010_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 80007e2:	4770      	bx	lr
 80007e4:	20001488 	.word	0x20001488
	...

080007f0 <rt_test_010_001_setup.lto_priv.0>:
  heapp->provider = NULL;
 80007f0:	2000      	movs	r0, #0
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <rt_test_010_001_setup.lto_priv.0+0x30>)
  heapp->provider = NULL;
 80007f4:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <rt_test_010_001_setup.lto_priv.0+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80007f6:	1dd9      	adds	r1, r3, #7
 80007f8:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80007fc:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80007fe:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
static void rt_test_010_001_setup(void) {
 8000802:	b410      	push	{r4}
 8000804:	08db      	lsrs	r3, r3, #3
  tqp->next = (thread_t *)tqp;
 8000806:	f102 040c 	add.w	r4, r2, #12
 800080a:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 800080c:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 800080e:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8000810:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8000814:	6010      	str	r0, [r2, #0]
}
 8000816:	bc10      	pop	{r4}
  H_PAGES(&heapp->header) = 0;
 8000818:	6090      	str	r0, [r2, #8]
 800081a:	6150      	str	r0, [r2, #20]
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	200015e0 	.word	0x200015e0
 8000824:	200013f4 	.word	0x200013f4
	...

08000830 <rt_test_009_007_setup.lto_priv.0>:
 *   has been emptied.
 * - [9.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_009_007_setup(void) {
 8000830:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000832:	f7ff fead 	bl	8000590 <chEvtGetAndClearEvents.constprop.0>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000836:	4a02      	ldr	r2, [pc, #8]	; (8000840 <rt_test_009_007_setup.lto_priv.0+0x10>)
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <rt_test_009_007_setup.lto_priv.0+0x14>)
 800083a:	6012      	str	r2, [r2, #0]
 800083c:	601b      	str	r3, [r3, #0]
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 800083e:	bd08      	pop	{r3, pc}
 8000840:	20000808 	.word	0x20000808
 8000844:	2000080c 	.word	0x2000080c
	...

08000850 <rt_test_009_006_setup.lto_priv.0>:
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000850:	f7ff be9e 	b.w	8000590 <chEvtGetAndClearEvents.constprop.0>
	...

08000860 <rt_test_009_005_setup.lto_priv.0>:
 8000860:	f7ff bff6 	b.w	8000850 <rt_test_009_006_setup.lto_priv.0>
	...

08000870 <rt_test_009_004_setup.lto_priv.0>:
 8000870:	f7ff bfee 	b.w	8000850 <rt_test_009_006_setup.lto_priv.0>
	...

08000880 <rt_test_009_003_setup.lto_priv.0>:
 8000880:	f7ff bfe6 	b.w	8000850 <rt_test_009_006_setup.lto_priv.0>
	...

08000890 <rt_test_009_002_setup.lto_priv.0>:
 8000890:	f7ff bfde 	b.w	8000850 <rt_test_009_006_setup.lto_priv.0>
	...

080008a0 <rt_test_007_009_setup.lto_priv.0>:
 80008a0:	2000      	movs	r0, #0
  tqp->next = (thread_t *)tqp;
 80008a2:	4a06      	ldr	r2, [pc, #24]	; (80008bc <rt_test_007_009_setup.lto_priv.0+0x1c>)
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <rt_test_007_009_setup.lto_priv.0+0x20>)
 80008a6:	4907      	ldr	r1, [pc, #28]	; (80008c4 <rt_test_007_009_setup.lto_priv.0+0x24>)
  tqp->prev = (thread_t *)tqp;
 80008a8:	e9c2 2200 	strd	r2, r2, [r2]
 80008ac:	e9c3 3300 	strd	r3, r3, [r3]
 80008b0:	e9c1 1100 	strd	r1, r1, [r1]
 80008b4:	6090      	str	r0, [r2, #8]
 80008b6:	6098      	str	r0, [r3, #8]

static void rt_test_007_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000854 	.word	0x20000854
 80008c0:	20000864 	.word	0x20000864
 80008c4:	20000800 	.word	0x20000800
	...

080008d0 <rt_test_007_008_setup.lto_priv.0>:
 80008d0:	2100      	movs	r1, #0
  tqp->next = (thread_t *)tqp;
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <rt_test_007_008_setup.lto_priv.0+0x14>)
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <rt_test_007_008_setup.lto_priv.0+0x18>)
  tqp->prev = (thread_t *)tqp;
 80008d6:	e9c3 3300 	strd	r3, r3, [r3]
 80008da:	e9c2 2200 	strd	r2, r2, [r2]
 80008de:	6099      	str	r1, [r3, #8]
}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000854 	.word	0x20000854
 80008e8:	20000800 	.word	0x20000800
 80008ec:	00000000 	.word	0x00000000

080008f0 <rt_test_007_007_setup.lto_priv.0>:
 80008f0:	f7ff bfee 	b.w	80008d0 <rt_test_007_008_setup.lto_priv.0>
	...

08000900 <rt_test_007_005_setup.lto_priv.0>:
 8000900:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 8000902:	4b02      	ldr	r3, [pc, #8]	; (800090c <rt_test_007_005_setup.lto_priv.0+0xc>)
  tqp->prev = (thread_t *)tqp;
 8000904:	e9c3 3300 	strd	r3, r3, [r3]
 8000908:	609a      	str	r2, [r3, #8]
}
 800090a:	4770      	bx	lr
 800090c:	20000854 	.word	0x20000854

08000910 <rt_test_007_004_setup.lto_priv.0>:
 8000910:	2100      	movs	r1, #0
  tqp->next = (thread_t *)tqp;
 8000912:	4a04      	ldr	r2, [pc, #16]	; (8000924 <rt_test_007_004_setup.lto_priv.0+0x14>)
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <rt_test_007_004_setup.lto_priv.0+0x18>)
  tqp->prev = (thread_t *)tqp;
 8000916:	e9c2 2200 	strd	r2, r2, [r2]
 800091a:	e9c3 3300 	strd	r3, r3, [r3]
 800091e:	6091      	str	r1, [r2, #8]
 8000920:	6099      	str	r1, [r3, #8]
}
 8000922:	4770      	bx	lr
 8000924:	20000854 	.word	0x20000854
 8000928:	20000864 	.word	0x20000864
 800092c:	00000000 	.word	0x00000000

08000930 <rt_test_007_001_setup.lto_priv.0>:
 8000930:	f7ff bfe6 	b.w	8000900 <rt_test_007_005_setup.lto_priv.0>
	...

08000940 <chSemWaitTimeout.constprop.0>:
 8000940:	2320      	movs	r3, #32
 8000942:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <chSemWaitTimeout.constprop.0+0x48>)
 8000948:	6899      	ldr	r1, [r3, #8]
 800094a:	1e4a      	subs	r2, r1, #1
 800094c:	2a00      	cmp	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	db04      	blt.n	800095c <chSemWaitTimeout.constprop.0+0x1c>
    sem_insert(currp, &sp->queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
  }

  return MSG_OK;
 8000952:	2000      	movs	r0, #0
 8000954:	2300      	movs	r3, #0
 8000956:	f383 8811 	msr	BASEPRI, r3
}
 800095a:	4770      	bx	lr
    if (TIME_IMMEDIATE == timeout) {
 800095c:	b180      	cbz	r0, 8000980 <chSemWaitTimeout.constprop.0+0x40>
    currp->u.wtsemp = sp;
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <chSemWaitTimeout.constprop.0+0x4c>)
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 8000960:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8000962:	6992      	ldr	r2, [r2, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 8000964:	685c      	ldr	r4, [r3, #4]
 8000966:	6253      	str	r3, [r2, #36]	; 0x24
 8000968:	e9c2 3400 	strd	r3, r4, [r2]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800096c:	4601      	mov	r1, r0
  tp->queue.prev->queue.next = tp;
 800096e:	6022      	str	r2, [r4, #0]
 8000970:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	f00a fad4 	bl	800af20 <chSchGoSleepTimeoutS>
 8000978:	2300      	movs	r3, #0
 800097a:	f383 8811 	msr	BASEPRI, r3
}
 800097e:	bd10      	pop	{r4, pc}
      return MSG_TIMEOUT;
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
      sp->cnt++;
 8000984:	6099      	str	r1, [r3, #8]
 8000986:	e7e5      	b.n	8000954 <chSemWaitTimeout.constprop.0+0x14>
 8000988:	200015bc 	.word	0x200015bc
 800098c:	20000c88 	.word	0x20000c88

08000990 <chEvtWaitOneTimeout.constprop.0>:
 * @return              The mask of the lowest event id served and cleared.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 8000990:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <chEvtWaitOneTimeout.constprop.0+0x48>)
 8000994:	699d      	ldr	r5, [r3, #24]
 8000996:	2320      	movs	r3, #32
 8000998:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800099c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800099e:	b96c      	cbnz	r4, 80009bc <chEvtWaitOneTimeout.constprop.0+0x2c>
    if (TIME_IMMEDIATE == timeout) {
 80009a0:	b910      	cbnz	r0, 80009a8 <chEvtWaitOneTimeout.constprop.0+0x18>
 80009a2:	f380 8811 	msr	BASEPRI, r0
  m ^= m & (m - (eventmask_t)1);
  ctp->epending &= ~m;
  chSysUnlock();

  return m;
}
 80009a6:	bd38      	pop	{r3, r4, r5, pc}
    ctp->u.ewmask = events;
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80009ac:	4601      	mov	r1, r0
    ctp->u.ewmask = events;
 80009ae:	626b      	str	r3, [r5, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80009b0:	200a      	movs	r0, #10
 80009b2:	f00a fab5 	bl	800af20 <chSchGoSleepTimeoutS>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	db09      	blt.n	80009ce <chEvtWaitOneTimeout.constprop.0+0x3e>
    m = ctp->epending & events;
 80009ba:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 80009bc:	4260      	negs	r0, r4
  ctp->epending &= ~m;
 80009be:	ea24 0300 	bic.w	r3, r4, r0
 80009c2:	636b      	str	r3, [r5, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 80009c4:	4020      	ands	r0, r4
 80009c6:	2300      	movs	r3, #0
 80009c8:	f383 8811 	msr	BASEPRI, r3
}
 80009cc:	bd38      	pop	{r3, r4, r5, pc}
 80009ce:	f384 8811 	msr	BASEPRI, r4
      return (eventmask_t)0;
 80009d2:	4620      	mov	r0, r4
}
 80009d4:	bd38      	pop	{r3, r4, r5, pc}
 80009d6:	bf00      	nop
 80009d8:	20000c88 	.word	0x20000c88
 80009dc:	00000000 	.word	0x00000000

080009e0 <rt_test_006_005_setup.lto_priv.0>:
  sp->cnt = n;
 80009e0:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 80009e2:	4b02      	ldr	r3, [pc, #8]	; (80009ec <rt_test_006_005_setup.lto_priv.0+0xc>)
  tqp->prev = (thread_t *)tqp;
 80009e4:	e9c3 3300 	strd	r3, r3, [r3]
 80009e8:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_006_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 80009ea:	4770      	bx	lr
 80009ec:	200015bc 	.word	0x200015bc

080009f0 <rt_test_006_004_setup.lto_priv.0>:
 80009f0:	f7ff bff6 	b.w	80009e0 <rt_test_006_005_setup.lto_priv.0>
	...

08000a00 <rt_test_006_003_setup.lto_priv.0>:
 8000a00:	f7ff bfee 	b.w	80009e0 <rt_test_006_005_setup.lto_priv.0>
	...

08000a10 <rt_test_006_002_setup.lto_priv.0>:
 8000a10:	f7ff bfe6 	b.w	80009e0 <rt_test_006_005_setup.lto_priv.0>
	...

08000a20 <rt_test_006_001_setup.lto_priv.0>:
 8000a20:	2201      	movs	r2, #1
  tqp->next = (thread_t *)tqp;
 8000a22:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <rt_test_006_001_setup.lto_priv.0+0xc>)
  tqp->prev = (thread_t *)tqp;
 8000a24:	e9c3 3300 	strd	r3, r3, [r3]
 8000a28:	609a      	str	r2, [r3, #8]
}
 8000a2a:	4770      	bx	lr
 8000a2c:	200015bc 	.word	0x200015bc

08000a30 <rt_test_005_001_setup.lto_priv.0>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_005_001_setup(void) {
  tr1 = NULL;
 8000a30:	2200      	movs	r2, #0
 8000a32:	4b01      	ldr	r3, [pc, #4]	; (8000a38 <rt_test_005_001_setup.lto_priv.0+0x8>)
 8000a34:	601a      	str	r2, [r3, #0]
}
 8000a36:	4770      	bx	lr
 8000a38:	20001d34 	.word	0x20001d34
 8000a3c:	00000000 	.word	0x00000000

08000a40 <_test_assert>:
  if (!condition)
 8000a40:	b108      	cbz	r0, 8000a46 <_test_assert+0x6>
  return false;
 8000a42:	2000      	movs	r0, #0
}
 8000a44:	4770      	bx	lr
  test_local_fail      = true;
 8000a46:	2001      	movs	r0, #1
bool _test_assert(bool condition, const char *msg) {
 8000a48:	b410      	push	{r4}
  test_global_fail     = true;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <_test_assert+0x1c>)
  test_local_fail      = true;
 8000a4c:	4c04      	ldr	r4, [pc, #16]	; (8000a60 <_test_assert+0x20>)
  test_failure_message = msg;
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <_test_assert+0x24>)
  test_local_fail      = true;
 8000a50:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000a52:	7010      	strb	r0, [r2, #0]
}
 8000a54:	bc10      	pop	{r4}
  test_failure_message = msg;
 8000a56:	6019      	str	r1, [r3, #0]
}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20001c50 	.word	0x20001c50
 8000a60:	20001cf0 	.word	0x20001cf0
 8000a64:	20001c4c 	.word	0x20001c4c
	...

08000a70 <rt_test_003_002_execute.lto_priv.0>:
    test_assert(b == false, "in range");
  }
  test_end_step(2);

  /* [3.2.3] Checking boundaries for start > end.*/
  test_set_step(3);
 8000a70:	2203      	movs	r2, #3
 8000a72:	4b01      	ldr	r3, [pc, #4]	; (8000a78 <rt_test_003_002_execute.lto_priv.0+0x8>)
 8000a74:	601a      	str	r2, [r3, #0]
    test_assert(b == true, "not in range");
    b = chTimeIsInRangeX((systime_t)10, (systime_t)100, (systime_t)10);
    test_assert(b == false, "in range");
  }
  test_end_step(3);
}
 8000a76:	4770      	bx	lr
 8000a78:	20001cf4 	.word	0x20001cf4
 8000a7c:	00000000 	.word	0x00000000

08000a80 <rt_test_003_001_execute.lto_priv.0>:
 8000a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  test_set_step(1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	4619      	mov	r1, r3
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <rt_test_003_001_execute.lto_priv.0+0x1c>)
 8000a8a:	6010      	str	r0, [r2, #0]
 8000a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a8e:	b292      	uxth	r2, r2
 8000a90:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    while (time == chVTGetSystemTimeX()) {
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d0fb      	beq.n	8000a90 <rt_test_003_001_execute.lto_priv.0+0x10>
}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20001cf4 	.word	0x20001cf4

08000aa0 <rt_test_002_003_execute.lto_priv.0>:

static void rt_test_002_003_execute(void) {

  /* [2.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <rt_test_002_003_execute.lto_priv.0+0x20>)
 8000aa4:	2320      	movs	r3, #32
 8000aa6:	6011      	str	r1, [r2, #0]
 8000aa8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000aac:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8000aae:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000ab0:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000ab4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000abc:	b662      	cpsie	i
    chSysDisable();
    chSysSuspend();
    chSysEnable();
  }
  test_end_step(1);
}
 8000abe:	4770      	bx	lr
 8000ac0:	20001cf4 	.word	0x20001cf4
	...

08000ad0 <test_terminate_threads>:
                         test_buffer + (WA_SIZE * 4)};

/*
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8000ad0:	b430      	push	{r4, r5}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000ad2:	2520      	movs	r5, #32
 8000ad4:	2400      	movs	r4, #0
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <test_terminate_threads+0x30>)
 8000ad8:	f103 0014 	add.w	r0, r3, #20
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8000adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ae0:	b14a      	cbz	r2, 8000af6 <test_terminate_threads+0x26>
 8000ae2:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 8000ae6:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8000aea:	f041 0104 	orr.w	r1, r1, #4
 8000aee:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 8000af2:	f384 8811 	msr	BASEPRI, r4
  for (i = 0; i < MAX_THREADS; i++)
 8000af6:	4283      	cmp	r3, r0
 8000af8:	d1f0      	bne.n	8000adc <test_terminate_threads+0xc>
      chThdTerminate(threads[i]);
}
 8000afa:	bc30      	pop	{r4, r5}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20001d0c 	.word	0x20001d0c
	...

08000b10 <test_printn.part.0>:

  if (!n)
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
 8000b10:	b318      	cbz	r0, 8000b5a <test_printn.part.0+0x4a>
void test_printn(uint32_t n) {
 8000b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b14:	b085      	sub	sp, #20
    p = buf;
 8000b16:	466d      	mov	r5, sp
 8000b18:	462a      	mov	r2, r5
      *p++ = (n % 10) + '0', n /= 10;
 8000b1a:	4f10      	ldr	r7, [pc, #64]	; (8000b5c <test_printn.part.0+0x4c>)
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	fba7 1300 	umull	r1, r3, r7, r0
 8000b22:	08db      	lsrs	r3, r3, #3
 8000b24:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000b28:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8000b2c:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8000b30:	b2c9      	uxtb	r1, r1
    while (n)
 8000b32:	2e09      	cmp	r6, #9
 8000b34:	4614      	mov	r4, r2
      *p++ = (n % 10) + '0', n /= 10;
 8000b36:	4618      	mov	r0, r3
 8000b38:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 8000b3c:	d8ee      	bhi.n	8000b1c <test_printn.part.0+0xc>
    while (p > buf)
 8000b3e:	42aa      	cmp	r2, r5
 8000b40:	d909      	bls.n	8000b56 <test_printn.part.0+0x46>
 8000b42:	4e07      	ldr	r6, [pc, #28]	; (8000b60 <test_printn.part.0+0x50>)
 8000b44:	e001      	b.n	8000b4a <test_printn.part.0+0x3a>
 8000b46:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      streamPut(test_chp, *--p);
 8000b4a:	6830      	ldr	r0, [r6, #0]
 8000b4c:	6803      	ldr	r3, [r0, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	4798      	blx	r3
    while (p > buf)
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d1f7      	bne.n	8000b46 <test_printn.part.0+0x36>
  }
}
 8000b56:	b005      	add	sp, #20
 8000b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b5a:	4770      	bx	lr
 8000b5c:	cccccccd 	.word	0xcccccccd
 8000b60:	20001c48 	.word	0x20001c48
	...

08000b70 <test_printn>:
  if (!n)
 8000b70:	b928      	cbnz	r0, 8000b7e <test_printn+0xe>
    streamPut(test_chp, '0');
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <test_printn+0x14>)
 8000b74:	2130      	movs	r1, #48	; 0x30
 8000b76:	6818      	ldr	r0, [r3, #0]
 8000b78:	6803      	ldr	r3, [r0, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	4718      	bx	r3
 8000b7e:	f7ff bfc7 	b.w	8000b10 <test_printn.part.0>
 8000b82:	bf00      	nop
 8000b84:	20001c48 	.word	0x20001c48
	...

08000b90 <test_emit_token>:
 8000b90:	2320      	movs	r3, #32
 8000b92:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_CFG_MAX_TOKENS])
 8000b96:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <test_emit_token+0x20>)
 8000b98:	4906      	ldr	r1, [pc, #24]	; (8000bb4 <test_emit_token+0x24>)
 8000b9a:	6813      	ldr	r3, [r2, #0]
 8000b9c:	428b      	cmp	r3, r1
 8000b9e:	d202      	bcs.n	8000ba6 <test_emit_token+0x16>
    *test_tokp++ = token;
 8000ba0:	1c59      	adds	r1, r3, #1
 8000ba2:	7018      	strb	r0, [r3, #0]
 8000ba4:	6011      	str	r1, [r2, #0]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20001d08 	.word	0x20001d08
 8000bb4:	20001d08 	.word	0x20001d08
	...

08000bc0 <obj_write>:
  return false;
}

static bool obj_write(objects_cache_t *ocp,
                      oc_object_t *objp,
                      bool async) {
 8000bc0:	b508      	push	{r3, lr}
  (void)ocp;
  (void)async;

  test_emit_token('A' + objp->obj_key);
 8000bc2:	6948      	ldr	r0, [r1, #20]
 8000bc4:	3041      	adds	r0, #65	; 0x41
 8000bc6:	b2c0      	uxtb	r0, r0
 8000bc8:	f7ff ffe2 	bl	8000b90 <test_emit_token>

  return false;
}
 8000bcc:	2000      	movs	r0, #0
 8000bce:	bd08      	pop	{r3, pc}

08000bd0 <dis_func0>:
 * Shared code.
 ****************************************************************************/

static bool exit_flag;

static int dis_func0(void) {
 8000bd0:	b508      	push	{r3, lr}

  test_emit_token('0');
 8000bd2:	2030      	movs	r0, #48	; 0x30
 8000bd4:	f7ff ffdc 	bl	8000b90 <test_emit_token>

  return (msg_t)0x55AA;
}
 8000bd8:	f245 50aa 	movw	r0, #21930	; 0x55aa
 8000bdc:	bd08      	pop	{r3, pc}
 8000bde:	bf00      	nop

08000be0 <dis_func1>:

static msg_t dis_func1(msg_t a) {
 8000be0:	b510      	push	{r4, lr}
 8000be2:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000be4:	b2c0      	uxtb	r0, r0
 8000be6:	f7ff ffd3 	bl	8000b90 <test_emit_token>

  return (msg_t)a;
}
 8000bea:	4620      	mov	r0, r4
 8000bec:	bd10      	pop	{r4, pc}
 8000bee:	bf00      	nop

08000bf0 <dis_func2>:

static msg_t dis_func2(msg_t a, msg_t b) {
 8000bf0:	b538      	push	{r3, r4, r5, lr}
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000bf6:	b2c0      	uxtb	r0, r0
 8000bf8:	f7ff ffca 	bl	8000b90 <test_emit_token>
  test_emit_token((char)b);
 8000bfc:	b2e8      	uxtb	r0, r5
 8000bfe:	f7ff ffc7 	bl	8000b90 <test_emit_token>

  return (msg_t)a;
}
 8000c02:	4620      	mov	r0, r4
 8000c04:	bd38      	pop	{r3, r4, r5, pc}
 8000c06:	bf00      	nop
	...

08000c10 <dis_func3>:

static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8000c10:	b570      	push	{r4, r5, r6, lr}
 8000c12:	460e      	mov	r6, r1
 8000c14:	4615      	mov	r5, r2
 8000c16:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000c18:	b2c0      	uxtb	r0, r0
 8000c1a:	f7ff ffb9 	bl	8000b90 <test_emit_token>
  test_emit_token((char)b);
 8000c1e:	b2f0      	uxtb	r0, r6
 8000c20:	f7ff ffb6 	bl	8000b90 <test_emit_token>
  test_emit_token((char)c);
 8000c24:	b2e8      	uxtb	r0, r5
 8000c26:	f7ff ffb3 	bl	8000b90 <test_emit_token>

  return (msg_t)a;
}
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}
 8000c2e:	bf00      	nop

08000c30 <dis_func4>:

static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8000c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c32:	460f      	mov	r7, r1
 8000c34:	4616      	mov	r6, r2
 8000c36:	461d      	mov	r5, r3
 8000c38:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000c3a:	b2c0      	uxtb	r0, r0
 8000c3c:	f7ff ffa8 	bl	8000b90 <test_emit_token>
  test_emit_token((char)b);
 8000c40:	b2f8      	uxtb	r0, r7
 8000c42:	f7ff ffa5 	bl	8000b90 <test_emit_token>
  test_emit_token((char)c);
 8000c46:	b2f0      	uxtb	r0, r6
 8000c48:	f7ff ffa2 	bl	8000b90 <test_emit_token>
  test_emit_token((char)d);
 8000c4c:	b2e8      	uxtb	r0, r5
 8000c4e:	f7ff ff9f 	bl	8000b90 <test_emit_token>

  return (msg_t)a;
}
 8000c52:	4620      	mov	r0, r4
 8000c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c56:	bf00      	nop
	...

08000c60 <dis_func_end>:

static int dis_func_end(void) {
 8000c60:	b508      	push	{r3, lr}

  test_emit_token('Z');
 8000c62:	205a      	movs	r0, #90	; 0x5a
 8000c64:	f7ff ff94 	bl	8000b90 <test_emit_token>
  exit_flag = true;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4b02      	ldr	r3, [pc, #8]	; (8000c74 <dis_func_end+0x14>)

  return (msg_t)0xAA55;
}
 8000c6c:	f64a 2055 	movw	r0, #43605	; 0xaa55
  exit_flag = true;
 8000c70:	701a      	strb	r2, [r3, #0]
}
 8000c72:	bd08      	pop	{r3, pc}
 8000c74:	20000e88 	.word	0x20000e88
	...

08000c80 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000c80:	2043      	movs	r0, #67	; 0x43
 8000c82:	f7ff bf85 	b.w	8000b90 <test_emit_token>
 8000c86:	bf00      	nop
	...

08000c90 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000c90:	2042      	movs	r0, #66	; 0x42
 8000c92:	f7ff bf7d 	b.w	8000b90 <test_emit_token>
 8000c96:	bf00      	nop
	...

08000ca0 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000ca0:	2041      	movs	r0, #65	; 0x41
 8000ca2:	f7ff bf75 	b.w	8000b90 <test_emit_token>
 8000ca6:	bf00      	nop
	...

08000cb0 <thread>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8000cb0:	7800      	ldrb	r0, [r0, #0]
 8000cb2:	f7ff bf6d 	b.w	8000b90 <test_emit_token>
 8000cb6:	bf00      	nop
	...

08000cc0 <dyn_thread1>:
 8000cc0:	f7ff bff6 	b.w	8000cb0 <thread>
	...

08000cd0 <test_println>:
void test_println(const char *msgp) {
 8000cd0:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 8000cd2:	7801      	ldrb	r1, [r0, #0]
 8000cd4:	b189      	cbz	r1, 8000cfa <test_println+0x2a>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	4d09      	ldr	r5, [pc, #36]	; (8000d00 <test_println+0x30>)
    streamPut(test_chp, *msgp++);
 8000cda:	6828      	ldr	r0, [r5, #0]
 8000cdc:	6803      	ldr	r3, [r0, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	4798      	blx	r3
  while (*msgp)
 8000ce2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d1f7      	bne.n	8000cda <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000cea:	6828      	ldr	r0, [r5, #0]
 8000cec:	2202      	movs	r2, #2
}
 8000cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000cf2:	6803      	ldr	r3, [r0, #0]
 8000cf4:	4903      	ldr	r1, [pc, #12]	; (8000d04 <test_println+0x34>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	4718      	bx	r3
 8000cfa:	4d01      	ldr	r5, [pc, #4]	; (8000d00 <test_println+0x30>)
 8000cfc:	e7f5      	b.n	8000cea <test_println+0x1a>
 8000cfe:	bf00      	nop
 8000d00:	20001c48 	.word	0x20001c48
 8000d04:	0800e2e8 	.word	0x0800e2e8
	...

08000d10 <test_print>:
  while (*msgp)
 8000d10:	7801      	ldrb	r1, [r0, #0]
 8000d12:	b159      	cbz	r1, 8000d2c <test_print+0x1c>
void test_print(const char *msgp) {
 8000d14:	b538      	push	{r3, r4, r5, lr}
 8000d16:	4604      	mov	r4, r0
 8000d18:	4d05      	ldr	r5, [pc, #20]	; (8000d30 <test_print+0x20>)
    streamPut(test_chp, *msgp++);
 8000d1a:	6828      	ldr	r0, [r5, #0]
 8000d1c:	6803      	ldr	r3, [r0, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	4798      	blx	r3
  while (*msgp)
 8000d22:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d1f7      	bne.n	8000d1a <test_print+0xa>
}
 8000d2a:	bd38      	pop	{r3, r4, r5, pc}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20001c48 	.word	0x20001c48
	...

08000d40 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 8000d40:	b4f0      	push	{r4, r5, r6, r7}
  while (cp < test_tokp) {
 8000d42:	4e0d      	ldr	r6, [pc, #52]	; (8000d78 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 8000d44:	4f0d      	ldr	r7, [pc, #52]	; (8000d7c <_test_assert_sequence+0x3c>)
  while (cp < test_tokp) {
 8000d46:	6835      	ldr	r5, [r6, #0]
  char *cp = test_tokens_buffer;
 8000d48:	463b      	mov	r3, r7
 8000d4a:	e005      	b.n	8000d58 <_test_assert_sequence+0x18>
    if (*cp++ != *expected++)
 8000d4c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8000d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d54:	4294      	cmp	r4, r2
 8000d56:	d106      	bne.n	8000d66 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 8000d58:	429d      	cmp	r5, r3
 8000d5a:	d8f7      	bhi.n	8000d4c <_test_assert_sequence+0xc>
  if (*expected)
 8000d5c:	7800      	ldrb	r0, [r0, #0]
 8000d5e:	b910      	cbnz	r0, 8000d66 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 8000d60:	6037      	str	r7, [r6, #0]
}
 8000d62:	bcf0      	pop	{r4, r5, r6, r7}
 8000d64:	4770      	bx	lr
  test_local_fail      = true;
 8000d66:	2001      	movs	r0, #1
 8000d68:	4c05      	ldr	r4, [pc, #20]	; (8000d80 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 8000d6a:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 8000d6e:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000d70:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8000d72:	6019      	str	r1, [r3, #0]
}
 8000d74:	bcf0      	pop	{r4, r5, r6, r7}
 8000d76:	4770      	bx	lr
 8000d78:	20001d08 	.word	0x20001d08
 8000d7c:	20001cf8 	.word	0x20001cf8
 8000d80:	20001cf0 	.word	0x20001cf0
 8000d84:	20001c50 	.word	0x20001c50
 8000d88:	20001c4c 	.word	0x20001c4c
 8000d8c:	00000000 	.word	0x00000000

08000d90 <print_line>:
static void print_line(void) {
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	244c      	movs	r4, #76	; 0x4c
 8000d94:	4d07      	ldr	r5, [pc, #28]	; (8000db4 <print_line+0x24>)
    streamPut(test_chp, '-');
 8000d96:	6828      	ldr	r0, [r5, #0]
 8000d98:	212d      	movs	r1, #45	; 0x2d
 8000d9a:	6803      	ldr	r3, [r0, #0]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8000da0:	3c01      	subs	r4, #1
 8000da2:	d1f8      	bne.n	8000d96 <print_line+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000da4:	6828      	ldr	r0, [r5, #0]
 8000da6:	2202      	movs	r2, #2
}
 8000da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000dac:	6803      	ldr	r3, [r0, #0]
 8000dae:	4902      	ldr	r1, [pc, #8]	; (8000db8 <print_line+0x28>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	4718      	bx	r3
 8000db4:	20001c48 	.word	0x20001c48
 8000db8:	0800e2e8 	.word	0x0800e2e8
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <ff_uni2oem.part.0>:
/* OEM <==> Unicode conversions for static code page configuration        */
/* SBCS fixed code page                                                   */
/*------------------------------------------------------------------------*/

#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	22c7      	movs	r2, #199	; 0xc7
 8000dc4:	b410      	push	{r4}
 8000dc6:	4909      	ldr	r1, [pc, #36]	; (8000dec <ff_uni2oem.part.0+0x2c>)
 8000dc8:	e003      	b.n	8000dd2 <ff_uni2oem.part.0+0x12>
	if (uni < 0x80) {	/* ASCII? */
		c = (WCHAR)uni;

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8000dca:	2b80      	cmp	r3, #128	; 0x80
 8000dcc:	d00b      	beq.n	8000de6 <ff_uni2oem.part.0+0x26>
 8000dce:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	b29c      	uxth	r4, r3
 8000dd6:	f103 0301 	add.w	r3, r3, #1
 8000dda:	d1f6      	bne.n	8000dca <ff_uni2oem.part.0+0xa>
 8000ddc:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8000de0:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8000de2:	bc10      	pop	{r4}
 8000de4:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8000de6:	2000      	movs	r0, #0
}
 8000de8:	bc10      	pop	{r4}
 8000dea:	4770      	bx	lr
 8000dec:	0800df7c 	.word	0x0800df7c

08000df0 <ff_wtoupper>:
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
 8000df0:	4a29      	ldr	r2, [pc, #164]	; (8000e98 <ff_wtoupper+0xa8>)
 8000df2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8000df6:	f641 517d 	movw	r1, #7549	; 0x1d7d
 8000dfa:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <ff_wtoupper+0xac>)
 8000dfc:	bf34      	ite	cc
 8000dfe:	2161      	movcc	r1, #97	; 0x61
 8000e00:	4613      	movcs	r3, r2
{
 8000e02:	b4f0      	push	{r4, r5, r6, r7}
		uc = (WORD)uni;
 8000e04:	b286      	uxth	r6, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 8000e06:	3304      	adds	r3, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8000e08:	b181      	cbz	r1, 8000e2c <ff_wtoupper+0x3c>
 8000e0a:	428e      	cmp	r6, r1
 8000e0c:	d30e      	bcc.n	8000e2c <ff_wtoupper+0x3c>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8000e0e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8000e12:	461f      	mov	r7, r3
 8000e14:	b2d4      	uxtb	r4, r2
			if (uc < bc + nc) {	/* In the block? */
 8000e16:	1865      	adds	r5, r4, r1
 8000e18:	42a8      	cmp	r0, r5
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8000e1a:	ea4f 2212 	mov.w	r2, r2, lsr #8
			if (uc < bc + nc) {	/* In the block? */
 8000e1e:	db07      	blt.n	8000e30 <ff_wtoupper+0x40>
 8000e20:	3304      	adds	r3, #4
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8000e22:	b172      	cbz	r2, 8000e42 <ff_wtoupper+0x52>
 8000e24:	f833 1c04 	ldrh.w	r1, [r3, #-4]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	d1ee      	bne.n	8000e0a <ff_wtoupper+0x1a>
		}
		uni = uc;
	}

	return uni;
}
 8000e2c:	bcf0      	pop	{r4, r5, r6, r7}
 8000e2e:	4770      	bx	lr
				switch (cmd) {
 8000e30:	2a08      	cmp	r2, #8
 8000e32:	d8fb      	bhi.n	8000e2c <ff_wtoupper+0x3c>
 8000e34:	e8df f002 	tbb	[pc, r2]
 8000e38:	1e22262c 	.word	0x1e22262c
 8000e3c:	0e12161a 	.word	0x0e12161a
 8000e40:	0a          	.byte	0x0a
 8000e41:	00          	.byte	0x00
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8000e42:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
 8000e46:	eb07 0344 	add.w	r3, r7, r4, lsl #1
 8000e4a:	e7dc      	b.n	8000e06 <ff_wtoupper+0x16>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8000e4c:	f5a6 50e3 	sub.w	r0, r6, #7264	; 0x1c60
 8000e50:	b280      	uxth	r0, r0
 8000e52:	e7eb      	b.n	8000e2c <ff_wtoupper+0x3c>
				case 7: uc -= 80; break;			/* Shift -80 */
 8000e54:	f1a6 0050 	sub.w	r0, r6, #80	; 0x50
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	e7e7      	b.n	8000e2c <ff_wtoupper+0x3c>
				case 6:	uc += 8; break;				/* Shift +8 */
 8000e5c:	f106 0008 	add.w	r0, r6, #8
 8000e60:	b280      	uxth	r0, r0
 8000e62:	e7e3      	b.n	8000e2c <ff_wtoupper+0x3c>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8000e64:	f1a6 001a 	sub.w	r0, r6, #26
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	e7df      	b.n	8000e2c <ff_wtoupper+0x3c>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8000e6c:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
 8000e70:	b280      	uxth	r0, r0
 8000e72:	e7db      	b.n	8000e2c <ff_wtoupper+0x3c>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8000e74:	f1a6 0020 	sub.w	r0, r6, #32
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	e7d7      	b.n	8000e2c <ff_wtoupper+0x3c>
				case 2: uc -= 16; break;			/* Shift -16 */
 8000e7c:	f1a6 0010 	sub.w	r0, r6, #16
 8000e80:	b280      	uxth	r0, r0
 8000e82:	e7d3      	b.n	8000e2c <ff_wtoupper+0x3c>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8000e84:	1a73      	subs	r3, r6, r1
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	1af0      	subs	r0, r6, r3
 8000e8c:	b280      	uxth	r0, r0
 8000e8e:	e7cd      	b.n	8000e2c <ff_wtoupper+0x3c>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8000e90:	1a41      	subs	r1, r0, r1
 8000e92:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8000e96:	e7c9      	b.n	8000e2c <ff_wtoupper+0x3c>
 8000e98:	0800de50 	.word	0x0800de50
 8000e9c:	0800dc5c 	.word	0x0800dc5c

08000ea0 <init_alloc_info.isra.0>:

/*------------------------------------------------------------------*/
/* exFAT: Initialize object allocation info with loaded entry block */
/*------------------------------------------------------------------*/

static void init_alloc_info (
 8000ea0:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
	rv = rv << 8 | ptr[1];
 8000ea4:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
	rv = rv << 8 | ptr[2];
 8000ea8:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
)
{
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
	obj->n_frag = 0;										/* No last fragment info */
 8000eaa:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[1];
 8000eac:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
	rv = rv << 8 | ptr[0];
 8000eb0:	2400      	movs	r4, #0
	rv = rv << 8 | ptr[0];
 8000eb2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
static void init_alloc_info (
 8000eb6:	b083      	sub	sp, #12
	rv = rv << 8 | ptr[0];
 8000eb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8000ebc:	608b      	str	r3, [r1, #8]
	rv = rv << 8 | ptr[0];
 8000ebe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
	rv = rv << 8 | ptr[3];
 8000ec2:	f890 803b 	ldrb.w	r8, [r0, #59]	; 0x3b
	rv = rv << 8 | ptr[0];
 8000ec6:	e9cd 3400 	strd	r3, r4, [sp]
	rv = rv << 8 | ptr[4];
 8000eca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	rv = rv << 8 | ptr[2];
 8000ecc:	f890 603a 	ldrb.w	r6, [r0, #58]	; 0x3a
 8000ed0:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
 8000ed4:	0c1b      	lsrs	r3, r3, #16
	rv = rv << 8 | ptr[1];
 8000ed6:	f890 b039 	ldrb.w	fp, [r0, #57]	; 0x39
	rv = rv << 8 | ptr[2];
 8000eda:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
	rv = rv << 8 | ptr[1];
 8000ede:	021b      	lsls	r3, r3, #8
	rv = rv << 8 | ptr[0];
 8000ee0:	9c00      	ldr	r4, [sp, #0]
	rv = rv << 8 | ptr[1];
 8000ee2:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8000ee6:	ea4b 2206 	orr.w	r2, fp, r6, lsl #8
	rv = rv << 8 | ptr[0];
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ef0:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8000ef4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 8000ef8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	obj->n_frag = 0;										/* No last fragment info */
 8000efc:	61cd      	str	r5, [r1, #28]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	71cb      	strb	r3, [r1, #7]
}
 8000f04:	b003      	add	sp, #12
 8000f06:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8000f0a:	4770      	bx	lr
 8000f0c:	0000      	movs	r0, r0
	...

08000f10 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8000f10:	6801      	ldr	r1, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
 8000f12:	b161      	cbz	r1, 8000f2e <get_ldnumber+0x1e>
 8000f14:	460a      	mov	r2, r1
 8000f16:	e001      	b.n	8000f1c <get_ldnumber+0xc>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8000f18:	2b3a      	cmp	r3, #58	; 0x3a
 8000f1a:	d005      	beq.n	8000f28 <get_ldnumber+0x18>
 8000f1c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8000f20:	2b1f      	cmp	r3, #31
 8000f22:	d8f9      	bhi.n	8000f18 <get_ldnumber+0x8>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 8000f24:	2000      	movs	r0, #0
 8000f26:	4770      	bx	lr
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8000f28:	1c8b      	adds	r3, r1, #2
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d002      	beq.n	8000f34 <get_ldnumber+0x24>
	if (!tp) return vol;	/* Invalid path name? */
 8000f2e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f32:	4770      	bx	lr
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8000f34:	780b      	ldrb	r3, [r1, #0]
 8000f36:	2b30      	cmp	r3, #48	; 0x30
 8000f38:	d1f9      	bne.n	8000f2e <get_ldnumber+0x1e>
			*path = tt;		/* Snip the drive prefix off */
 8000f3a:	6002      	str	r2, [r0, #0]
			i = (int)*tp - '0';	/* Get the LD number */
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	4770      	bx	lr

08000f40 <put_utf>:
	if (uni < 0x80) {	/* ASCII? */
 8000f40:	287f      	cmp	r0, #127	; 0x7f
{
 8000f42:	b538      	push	{r3, r4, r5, lr}
 8000f44:	460d      	mov	r5, r1
 8000f46:	4614      	mov	r4, r2
 8000f48:	d805      	bhi.n	8000f56 <put_utf+0x16>
		c = (WCHAR)uni;
 8000f4a:	b283      	uxth	r3, r0
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 8000f4c:	b16b      	cbz	r3, 8000f6a <put_utf+0x2a>
 8000f4e:	b19c      	cbz	r4, 8000f78 <put_utf+0x38>
	*buf++ = (TCHAR)wc;					/* Store the character */
 8000f50:	702b      	strb	r3, [r5, #0]
	return 1;
 8000f52:	2001      	movs	r0, #1
}
 8000f54:	bd38      	pop	{r3, r4, r5, pc}
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8000f56:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000f5a:	d206      	bcs.n	8000f6a <put_utf+0x2a>
 8000f5c:	f7ff ff30 	bl	8000dc0 <ff_uni2oem.part.0>
	if (wc >= 0x100) {	/* Is this a DBC? */
 8000f60:	28ff      	cmp	r0, #255	; 0xff
 8000f62:	4603      	mov	r3, r0
 8000f64:	d9f2      	bls.n	8000f4c <put_utf+0xc>
		if (szb < 2) return 0;
 8000f66:	2c01      	cmp	r4, #1
 8000f68:	d801      	bhi.n	8000f6e <put_utf+0x2e>
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 8000f6a:	2000      	movs	r0, #0
}
 8000f6c:	bd38      	pop	{r3, r4, r5, pc}
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 8000f6e:	0a03      	lsrs	r3, r0, #8
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 8000f70:	7068      	strb	r0, [r5, #1]
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 8000f72:	702b      	strb	r3, [r5, #0]
		return 2;
 8000f74:	2002      	movs	r0, #2
}
 8000f76:	bd38      	pop	{r3, r4, r5, pc}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 8000f78:	4620      	mov	r0, r4
}
 8000f7a:	bd38      	pop	{r3, r4, r5, pc}
 8000f7c:	0000      	movs	r0, r0
	...

08000f80 <disk_initialize.part.0>:
  switch (pdrv) {
#if HAL_USE_MMC_SPI
  case MMC:
    stat = 0;
    /* It is initialized externally, just reads the status.*/
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 8000f80:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <disk_initialize.part.0+0x18>)
}

bool mmc_lld_is_write_protected(MMCDriver *mmcp) {

  (void)mmcp;
  return !palReadPad(GPIOC, GPIOC_MMCWP);
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <disk_initialize.part.0+0x1c>)
 8000f84:	7910      	ldrb	r0, [r2, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
    stat = 0;
 8000f88:	3805      	subs	r0, #5
 8000f8a:	bf18      	it	ne
 8000f8c:	2001      	movne	r0, #1
      stat |= STA_NOINIT;
    if (mmcIsWriteProtected(&FATFS_HAL_DEVICE))
 8000f8e:	065b      	lsls	r3, r3, #25
      stat |=  STA_PROTECT;
 8000f90:	bf58      	it	pl
 8000f92:	f040 0004 	orrpl.w	r0, r0, #4
      stat |=  STA_PROTECT;
    return stat;
#endif
  }
  return STA_NOINIT;
}
 8000f96:	4770      	bx	lr
 8000f98:	20000918 	.word	0x20000918
 8000f9c:	40011000 	.word	0x40011000

08000fa0 <RemoveHandler>:
}

/*
 * Card removal event.
 */
static void RemoveHandler(eventid_t id) {
 8000fa0:	b508      	push	{r3, lr}

  (void)id;
  mmcDisconnect(&MMCD1);
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <RemoveHandler+0x10>)
 8000fa4:	f00a fb14 	bl	800b5d0 <mmcDisconnect>
  fs_ready = FALSE;
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <RemoveHandler+0x14>)
 8000fac:	701a      	strb	r2, [r3, #0]
}
 8000fae:	bd08      	pop	{r3, pc}
 8000fb0:	20000918 	.word	0x20000918
 8000fb4:	200013b0 	.word	0x200013b0
	...

08000fc0 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000fc0:	b538      	push	{r3, r4, r5, lr}
 8000fc2:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000fc4:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 8000fc6:	4284      	cmp	r4, r0
 8000fc8:	d00a      	beq.n	8000fe0 <chThdDequeueAllI.constprop.0+0x20>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000fca:	f06f 0501 	mvn.w	r5, #1
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000fce:	6803      	ldr	r3, [r0, #0]
 8000fd0:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000fd2:	605c      	str	r4, [r3, #4]
 8000fd4:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000fd6:	f009 f8db 	bl	800a190 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000fda:	6820      	ldr	r0, [r4, #0]
 8000fdc:	42a0      	cmp	r0, r4
 8000fde:	d1f6      	bne.n	8000fce <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop
	...

08000ff0 <chCondSignalI.constprop.0>:
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <chCondSignalI.constprop.0+0x18>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 8000ff4:	4298      	cmp	r0, r3
 8000ff6:	d006      	beq.n	8001006 <chCondSignalI.constprop.0+0x16>
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 8000ff8:	2100      	movs	r1, #0
  tqp->next             = tp->queue.next;
 8000ffa:	6802      	ldr	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000ffc:	6053      	str	r3, [r2, #4]
  tqp->next             = tp->queue.next;
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001002:	f009 b8c5 	b.w	800a190 <chSchReadyI>
  }
}
 8001006:	4770      	bx	lr
 8001008:	20000800 	.word	0x20000800
 800100c:	00000000 	.word	0x00000000

08001010 <chThdCreateStatic.constprop.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8001010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001012:	4604      	mov	r4, r0
 8001014:	2020      	movs	r0, #32
 8001016:	f380 8811 	msr	BASEPRI, r0
  tp->state     = CH_STATE_WTSTART;
 800101a:	2502      	movs	r5, #2
  tp->mtxlist   = NULL;
 800101c:	2600      	movs	r6, #0
  tp->refs      = (trefs_t)1;
 800101e:	2001      	movs	r0, #1
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001020:	e9c4 2337 	strd	r2, r3, [r4, #220]	; 0xdc
 8001024:	f104 03dc 	add.w	r3, r4, #220	; 0xdc
  REG_INSERT(tp);
 8001028:	4f15      	ldr	r7, [pc, #84]	; (8001080 <chThdCreateStatic.constprop.0+0x70>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800102a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <chThdCreateStatic.constprop.0+0x74>)
  tp->name      = name;
 8001030:	4a15      	ldr	r2, [pc, #84]	; (8001088 <chThdCreateStatic.constprop.0+0x78>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001032:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
  REG_INSERT(tp);
 8001036:	697b      	ldr	r3, [r7, #20]
  tp->state     = CH_STATE_WTSTART;
 8001038:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
  tp = (thread_t *)((uint8_t *)wsp + size -
 800103c:	f504 7580 	add.w	r5, r4, #256	; 0x100
  REG_INSERT(tp);
 8001040:	e9c4 7344 	strd	r7, r3, [r4, #272]	; 0x110
  tp->prio      = prio;
 8001044:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
  tp->realprio  = prio;
 8001048:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
  tp->refs      = (trefs_t)1;
 800104c:	f884 0122 	strb.w	r0, [r4, #290]	; 0x122
  tp->name      = name;
 8001050:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
  tp->epending  = (eventmask_t)0;
 8001054:	e9c4 664d 	strd	r6, r6, [r4, #308]	; 0x134
  tp->wabase = (stkalign_t *)wsp;
 8001058:	f8c4 411c 	str.w	r4, [r4, #284]	; 0x11c
  list_init(&tp->waiting);
 800105c:	f504 7294 	add.w	r2, r4, #296	; 0x128
  REG_INSERT(tp);
 8001060:	611d      	str	r5, [r3, #16]
  queue_init(&tp->msgqueue);
 8001062:	f504 7396 	add.w	r3, r4, #300	; 0x12c
  chSchWakeupS(tp, MSG_OK);
 8001066:	4628      	mov	r0, r5
 8001068:	4631      	mov	r1, r6
  tqp->next = (thread_t *)tqp;
 800106a:	e9c4 234a 	strd	r2, r3, [r4, #296]	; 0x128
  tqp->prev = (thread_t *)tqp;
 800106e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  REG_INSERT(tp);
 8001072:	617d      	str	r5, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
 8001074:	f008 ff9c 	bl	8009fb0 <chSchWakeupS>
 8001078:	f386 8811 	msr	BASEPRI, r6
}
 800107c:	4628      	mov	r0, r5
 800107e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001080:	20000c88 	.word	0x20000c88
 8001084:	08000251 	.word	0x08000251
 8001088:	0800c5b8 	.word	0x0800c5b8
 800108c:	00000000 	.word	0x00000000

08001090 <chCondSignal.constprop.0>:
void chCondSignal(condition_variable_t *cp) {
 8001090:	b508      	push	{r3, lr}
 8001092:	2320      	movs	r3, #32
 8001094:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <chCondSignal.constprop.0+0x24>)
 800109a:	6818      	ldr	r0, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 800109c:	4298      	cmp	r0, r3
 800109e:	d005      	beq.n	80010ac <chCondSignal.constprop.0+0x1c>
  tqp->next             = tp->queue.next;
 80010a0:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 80010a2:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 80010a4:	6053      	str	r3, [r2, #4]
  tqp->next             = tp->queue.next;
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	f008 ff82 	bl	8009fb0 <chSchWakeupS>
 80010ac:	2300      	movs	r3, #0
 80010ae:	f383 8811 	msr	BASEPRI, r3
}
 80010b2:	bd08      	pop	{r3, pc}
 80010b4:	20000800 	.word	0x20000800
	...

080010c0 <chSemResetWithMessage.constprop.0>:
 80010c0:	2320      	movs	r3, #32
void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg) {
 80010c2:	b570      	push	{r4, r5, r6, lr}
 80010c4:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 80010c8:	6885      	ldr	r5, [r0, #8]
  sp->cnt = n;
 80010ca:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 80010cc:	3501      	adds	r5, #1
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	dc0c      	bgt.n	80010ec <chSemResetWithMessage.constprop.0+0x2c>
 80010d2:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 80010d4:	f06f 0601 	mvn.w	r6, #1

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->prev;
 80010d8:	6860      	ldr	r0, [r4, #4]
  while (++cnt <= (cnt_t)0) {
 80010da:	3501      	adds	r5, #1

  tqp->prev             = tp->queue.prev;
 80010dc:	6843      	ldr	r3, [r0, #4]
 80010de:	6063      	str	r3, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 80010e0:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 80010e2:	f009 f855 	bl	800a190 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
 80010e6:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 80010e8:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 80010ea:	d1f5      	bne.n	80010d8 <chSemResetWithMessage.constprop.0+0x18>
  chSchRescheduleS();
 80010ec:	f008 ff38 	bl	8009f60 <chSchRescheduleS>
 80010f0:	2300      	movs	r3, #0
 80010f2:	f383 8811 	msr	BASEPRI, r3
}
 80010f6:	bd70      	pop	{r4, r5, r6, pc}
	...

08001100 <rt_test_006_001_teardown.lto_priv.0>:
 *
 * @api
 */
static inline void chSemReset(semaphore_t *sp, cnt_t n) {

  chSemResetWithMessage(sp, n, MSG_RESET);
 8001100:	2100      	movs	r1, #0
 8001102:	4801      	ldr	r0, [pc, #4]	; (8001108 <rt_test_006_001_teardown.lto_priv.0+0x8>)
 8001104:	f7ff bfdc 	b.w	80010c0 <chSemResetWithMessage.constprop.0>
 8001108:	200015bc 	.word	0x200015bc
 800110c:	00000000 	.word	0x00000000

08001110 <chMBReset.constprop.0>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBReset(mailbox_t *mbp) {
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2320      	movs	r3, #32
 8001114:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(mbp != NULL);

  mbp->wrptr = mbp->buffer;
  mbp->rdptr = mbp->buffer;
  mbp->cnt   = (size_t)0;
  mbp->reset = true;
 8001118:	2201      	movs	r2, #1
  mbp->cnt   = (size_t)0;
 800111a:	2500      	movs	r5, #0
  mbp->wrptr = mbp->buffer;
 800111c:	4c09      	ldr	r4, [pc, #36]	; (8001144 <chMBReset.constprop.0+0x34>)
 800111e:	6823      	ldr	r3, [r4, #0]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8001120:	f104 0018 	add.w	r0, r4, #24
  mbp->rdptr = mbp->buffer;
 8001124:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->reset = true;
 8001128:	7522      	strb	r2, [r4, #20]
  mbp->cnt   = (size_t)0;
 800112a:	6125      	str	r5, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 800112c:	f7ff ff48 	bl	8000fc0 <chThdDequeueAllI.constprop.0>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8001130:	f104 0020 	add.w	r0, r4, #32
 8001134:	f7ff ff44 	bl	8000fc0 <chThdDequeueAllI.constprop.0>
  chSchRescheduleS();
 8001138:	f008 ff12 	bl	8009f60 <chSchRescheduleS>
 800113c:	f385 8811 	msr	BASEPRI, r5
}
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop
 8001144:	20000874 	.word	0x20000874
	...

08001150 <oslib_test_002_003_teardown.lto_priv.0>:

static void oslib_test_002_003_teardown(void) {
  chMBReset(&mb1);
 8001150:	f7ff bfde 	b.w	8001110 <chMBReset.constprop.0>
	...

08001160 <oslib_test_002_002_teardown.lto_priv.0>:
 8001160:	f7ff bff6 	b.w	8001150 <oslib_test_002_003_teardown.lto_priv.0>
	...

08001170 <oslib_test_002_001_teardown.lto_priv.0>:
 8001170:	f7ff bfee 	b.w	8001150 <oslib_test_002_003_teardown.lto_priv.0>
	...

08001180 <chSemSignalWait.constprop.0>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8001180:	b538      	push	{r3, r4, r5, lr}
 8001182:	2320      	movs	r3, #32
 8001184:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 8001188:	4c15      	ldr	r4, [pc, #84]	; (80011e0 <chSemSignalWait.constprop.0+0x60>)
 800118a:	68a3      	ldr	r3, [r4, #8]
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	2a00      	cmp	r2, #0
 8001190:	60a2      	str	r2, [r4, #8]
 8001192:	dd19      	ble.n	80011c8 <chSemSignalWait.constprop.0+0x48>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 8001194:	2b00      	cmp	r3, #0
 8001196:	60a3      	str	r3, [r4, #8]
 8001198:	db06      	blt.n	80011a8 <chSemSignalWait.constprop.0+0x28>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 800119a:	f008 fee1 	bl	8009f60 <chSchRescheduleS>
    msg = MSG_OK;
 800119e:	2000      	movs	r0, #0
 80011a0:	2300      	movs	r3, #0
 80011a2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 80011a6:	bd38      	pop	{r3, r4, r5, pc}
    thread_t *ctp = currp;
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <chSemSignalWait.constprop.0+0x64>)
  tp->queue.prev             = tqp->prev;
 80011aa:	6863      	ldr	r3, [r4, #4]
 80011ac:	6995      	ldr	r5, [r2, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 80011ae:	2005      	movs	r0, #5
 80011b0:	e9c5 4300 	strd	r4, r3, [r5]
  tp->queue.prev->queue.next = tp;
 80011b4:	601d      	str	r5, [r3, #0]
    ctp->u.wtsemp = spw;
 80011b6:	626c      	str	r4, [r5, #36]	; 0x24
  tqp->prev                  = tp;
 80011b8:	6065      	str	r5, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 80011ba:	f008 ff81 	bl	800a0c0 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 80011be:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80011c0:	2300      	movs	r3, #0
 80011c2:	f383 8811 	msr	BASEPRI, r3
}
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
 80011c8:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 80011ca:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80011cc:	605c      	str	r4, [r3, #4]
  tqp->next             = tp->queue.next;
 80011ce:	6023      	str	r3, [r4, #0]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 80011d0:	f008 ffde 	bl	800a190 <chSchReadyI>
 80011d4:	2200      	movs	r2, #0
 80011d6:	68a3      	ldr	r3, [r4, #8]
 80011d8:	6242      	str	r2, [r0, #36]	; 0x24
 80011da:	3b01      	subs	r3, #1
 80011dc:	e7da      	b.n	8001194 <chSemSignalWait.constprop.0+0x14>
 80011de:	bf00      	nop
 80011e0:	200015bc 	.word	0x200015bc
 80011e4:	20000c88 	.word	0x20000c88
	...

080011f0 <rt_test_006_005_execute.lto_priv.0>:

static void rt_test_006_005_teardown(void) {
  test_wait_threads();
}

static void rt_test_006_005_execute(void) {
 80011f0:	b538      	push	{r3, r4, r5, lr}

  /* [6.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 80011f2:	2401      	movs	r4, #1
  return ch.rlist.current;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <rt_test_006_005_execute.lto_priv.0+0x7c>)
 80011f6:	4d1e      	ldr	r5, [pc, #120]	; (8001270 <rt_test_006_005_execute.lto_priv.0+0x80>)
  return chThdGetSelfX()->prio;
 80011f8:	699a      	ldr	r2, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 80011fa:	481e      	ldr	r0, [pc, #120]	; (8001274 <rt_test_006_005_execute.lto_priv.0+0x84>)
 80011fc:	6891      	ldr	r1, [r2, #8]
 80011fe:	2300      	movs	r3, #0
 8001200:	4421      	add	r1, r4
 8001202:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <rt_test_006_005_execute.lto_priv.0+0x88>)
  test_set_step(1);
 8001204:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001206:	f7ff ff03 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_end_step(1);

  /* [6.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 800120a:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <rt_test_006_005_execute.lto_priv.0+0x8c>)
  return (bool)(tqp->next == (const thread_t *)tqp);
 800120e:	4c1c      	ldr	r4, [pc, #112]	; (8001280 <rt_test_006_005_execute.lto_priv.0+0x90>)
 8001210:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8001212:	602b      	str	r3, [r5, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8001214:	f7ff ffb4 	bl	8001180 <chSemSignalWait.constprop.0>
 8001218:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800121a:	491a      	ldr	r1, [pc, #104]	; (8001284 <rt_test_006_005_execute.lto_priv.0+0x94>)
 800121c:	1b00      	subs	r0, r0, r4
 800121e:	fab0 f080 	clz	r0, r0
 8001222:	0940      	lsrs	r0, r0, #5
 8001224:	f7ff fc0c 	bl	8000a40 <_test_assert>
 8001228:	b100      	cbz	r0, 800122c <rt_test_006_005_execute.lto_priv.0+0x3c>
    chSemSignalWait(&sem1, &sem1);
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
  test_end_step(3);
}
 800122a:	bd38      	pop	{r3, r4, r5, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 800122c:	68a0      	ldr	r0, [r4, #8]
 800122e:	4916      	ldr	r1, [pc, #88]	; (8001288 <rt_test_006_005_execute.lto_priv.0+0x98>)
 8001230:	fab0 f080 	clz	r0, r0
 8001234:	0940      	lsrs	r0, r0, #5
 8001236:	f7ff fc03 	bl	8000a40 <_test_assert>
 800123a:	2800      	cmp	r0, #0
 800123c:	d1f5      	bne.n	800122a <rt_test_006_005_execute.lto_priv.0+0x3a>
  test_set_step(3);
 800123e:	2303      	movs	r3, #3
 8001240:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 8001242:	f7ff ff9d 	bl	8001180 <chSemSignalWait.constprop.0>
 8001246:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8001248:	490e      	ldr	r1, [pc, #56]	; (8001284 <rt_test_006_005_execute.lto_priv.0+0x94>)
 800124a:	1b00      	subs	r0, r0, r4
 800124c:	fab0 f080 	clz	r0, r0
 8001250:	0940      	lsrs	r0, r0, #5
 8001252:	f7ff fbf5 	bl	8000a40 <_test_assert>
 8001256:	2800      	cmp	r0, #0
 8001258:	d1e7      	bne.n	800122a <rt_test_006_005_execute.lto_priv.0+0x3a>
    test_assert(sem1.cnt == 0, "counter not zero");
 800125a:	68a0      	ldr	r0, [r4, #8]
 800125c:	490a      	ldr	r1, [pc, #40]	; (8001288 <rt_test_006_005_execute.lto_priv.0+0x98>)
 800125e:	fab0 f080 	clz	r0, r0
}
 8001262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 8001266:	0940      	lsrs	r0, r0, #5
 8001268:	f7ff bbea 	b.w	8000a40 <_test_assert>
 800126c:	20000c88 	.word	0x20000c88
 8001270:	20001cf4 	.word	0x20001cf4
 8001274:	200015e0 	.word	0x200015e0
 8001278:	08005341 	.word	0x08005341
 800127c:	20001d0c 	.word	0x20001d0c
 8001280:	200015bc 	.word	0x200015bc
 8001284:	0800c5c0 	.word	0x0800c5c0
 8001288:	0800c5d0 	.word	0x0800c5d0
 800128c:	00000000 	.word	0x00000000

08001290 <chEvtWaitOne.constprop.0>:
  thread_t *ctp = currp;
 8001290:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <chEvtWaitOne.constprop.0+0x34>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 8001292:	b510      	push	{r4, lr}
 8001294:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8001296:	6994      	ldr	r4, [r2, #24]
 8001298:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800129c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800129e:	b140      	cbz	r0, 80012b2 <chEvtWaitOne.constprop.0+0x22>
  m ^= m & (m - (eventmask_t)1);
 80012a0:	4243      	negs	r3, r0
  ctp->epending &= ~m;
 80012a2:	ea20 0203 	bic.w	r2, r0, r3
 80012a6:	6362      	str	r2, [r4, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 80012a8:	4018      	ands	r0, r3
 80012aa:	2300      	movs	r3, #0
 80012ac:	f383 8811 	msr	BASEPRI, r3
}
 80012b0:	bd10      	pop	{r4, pc}
    ctp->u.ewmask = events;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 80012b6:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 80012b8:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 80012ba:	f008 ff01 	bl	800a0c0 <chSchGoSleepS>
    m = ctp->epending & events;
 80012be:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80012c0:	e7ee      	b.n	80012a0 <chEvtWaitOne.constprop.0+0x10>
 80012c2:	bf00      	nop
 80012c4:	20000c88 	.word	0x20000c88
	...

080012d0 <chEvtWaitAny.constprop.0>:
  thread_t *ctp = currp;
 80012d0:	4a0c      	ldr	r2, [pc, #48]	; (8001304 <chEvtWaitAny.constprop.0+0x34>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 80012d2:	b510      	push	{r4, lr}
 80012d4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80012d6:	6994      	ldr	r4, [r2, #24]
 80012d8:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 80012dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80012de:	b120      	cbz	r0, 80012ea <chEvtWaitAny.constprop.0+0x1a>
  ctp->epending &= ~m;
 80012e0:	2300      	movs	r3, #0
 80012e2:	6363      	str	r3, [r4, #52]	; 0x34
 80012e4:	f383 8811 	msr	BASEPRI, r3
}
 80012e8:	bd10      	pop	{r4, pc}
    ctp->u.ewmask = events;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 80012ee:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 80012f0:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 80012f2:	f008 fee5 	bl	800a0c0 <chSchGoSleepS>
  ctp->epending &= ~m;
 80012f6:	2300      	movs	r3, #0
    m = ctp->epending & events;
 80012f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
  ctp->epending &= ~m;
 80012fa:	6363      	str	r3, [r4, #52]	; 0x34
 80012fc:	f383 8811 	msr	BASEPRI, r3
}
 8001300:	bd10      	pop	{r4, pc}
 8001302:	bf00      	nop
 8001304:	20000c88 	.word	0x20000c88
	...

08001310 <chEvtWaitAll.constprop.0>:
  thread_t *ctp = currp;
 8001310:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <chEvtWaitAll.constprop.0+0x34>)
eventmask_t chEvtWaitAll(eventmask_t events) {
 8001312:	b510      	push	{r4, lr}
 8001314:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8001316:	6994      	ldr	r4, [r2, #24]
 8001318:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 800131c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800131e:	f003 0205 	and.w	r2, r3, #5
 8001322:	2a05      	cmp	r2, #5
 8001324:	d005      	beq.n	8001332 <chEvtWaitAll.constprop.0+0x22>
    ctp->u.ewmask = events;
 8001326:	2305      	movs	r3, #5
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8001328:	200b      	movs	r0, #11
    ctp->u.ewmask = events;
 800132a:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800132c:	f008 fec8 	bl	800a0c0 <chSchGoSleepS>
 8001330:	6b63      	ldr	r3, [r4, #52]	; 0x34
  ctp->epending &= ~events;
 8001332:	f023 0305 	bic.w	r3, r3, #5
 8001336:	6363      	str	r3, [r4, #52]	; 0x34
 8001338:	2300      	movs	r3, #0
 800133a:	f383 8811 	msr	BASEPRI, r3
}
 800133e:	2005      	movs	r0, #5
 8001340:	bd10      	pop	{r4, pc}
 8001342:	bf00      	nop
 8001344:	20000c88 	.word	0x20000c88
	...

08001350 <bmk_thread4>:
  return ch.rlist.current;
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <bmk_thread4+0x20>)
static THD_FUNCTION(bmk_thread4, p) {
 8001352:	b510      	push	{r4, lr}
 8001354:	2320      	movs	r3, #32
 8001356:	6994      	ldr	r4, [r2, #24]
 8001358:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800135c:	2003      	movs	r0, #3
 800135e:	f008 feaf 	bl	800a0c0 <chSchGoSleepS>
  } while (msg == MSG_OK);
 8001362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f9      	beq.n	800135c <bmk_thread4+0xc>
 8001368:	2300      	movs	r3, #0
 800136a:	f383 8811 	msr	BASEPRI, r3
}
 800136e:	bd10      	pop	{r4, pc}
 8001370:	20000c88 	.word	0x20000c88
	...

08001380 <thread9>:
static THD_FUNCTION(thread9, p) {
 8001380:	b538      	push	{r3, r4, r5, lr}
 8001382:	4604      	mov	r4, r0
  chMtxLock(&m2);
 8001384:	4d05      	ldr	r5, [pc, #20]	; (800139c <thread9+0x1c>)
 8001386:	4628      	mov	r0, r5
 8001388:	f009 f83a 	bl	800a400 <chMtxLock>
  test_emit_token(*(char *)p);
 800138c:	7820      	ldrb	r0, [r4, #0]
 800138e:	f7ff fbff 	bl	8000b90 <test_emit_token>
  chMtxUnlock(&m2);
 8001392:	4628      	mov	r0, r5
}
 8001394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 8001398:	f008 bfa2 	b.w	800a2e0 <chMtxUnlock>
 800139c:	20000864 	.word	0x20000864

080013a0 <rt_test_007_005_execute.lto_priv.0>:
  test_set_step(2);
 80013a0:	2202      	movs	r2, #2
static void rt_test_007_005_execute(void) {
 80013a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013a6:	4d4d      	ldr	r5, [pc, #308]	; (80014dc <rt_test_007_005_execute.lto_priv.0+0x13c>)
  test_set_step(2);
 80013a8:	4c4d      	ldr	r4, [pc, #308]	; (80014e0 <rt_test_007_005_execute.lto_priv.0+0x140>)
  return chThdGetSelfX()->prio;
 80013aa:	69ab      	ldr	r3, [r5, #24]
 80013ac:	6022      	str	r2, [r4, #0]
 80013ae:	689e      	ldr	r6, [r3, #8]
    b = chMtxTryLock(&m1);
 80013b0:	f7ff f8b6 	bl	8000520 <chMtxTryLock.constprop.0>
    test_assert(b, "already locked");
 80013b4:	494b      	ldr	r1, [pc, #300]	; (80014e4 <rt_test_007_005_execute.lto_priv.0+0x144>)
 80013b6:	f7ff fb43 	bl	8000a40 <_test_assert>
 80013ba:	b108      	cbz	r0, 80013c0 <rt_test_007_005_execute.lto_priv.0+0x20>
}
 80013bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(3);
 80013c0:	2303      	movs	r3, #3
 80013c2:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 80013c4:	f7ff f8ac 	bl	8000520 <chMtxTryLock.constprop.0>
    test_assert(!b, "not locked");
 80013c8:	f080 0001 	eor.w	r0, r0, #1
 80013cc:	4946      	ldr	r1, [pc, #280]	; (80014e8 <rt_test_007_005_execute.lto_priv.0+0x148>)
 80013ce:	b2c0      	uxtb	r0, r0
 80013d0:	f7ff fb36 	bl	8000a40 <_test_assert>
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d1f1      	bne.n	80013bc <rt_test_007_005_execute.lto_priv.0+0x1c>
  test_set_step(4);
 80013d8:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 80013da:	4f44      	ldr	r7, [pc, #272]	; (80014ec <rt_test_007_005_execute.lto_priv.0+0x14c>)
  test_set_step(4);
 80013dc:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 80013de:	4638      	mov	r0, r7
 80013e0:	f008 ff7e 	bl	800a2e0 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 80013e4:	68b8      	ldr	r0, [r7, #8]
 80013e6:	4942      	ldr	r1, [pc, #264]	; (80014f0 <rt_test_007_005_execute.lto_priv.0+0x150>)
 80013e8:	fab0 f080 	clz	r0, r0
 80013ec:	0940      	lsrs	r0, r0, #5
 80013ee:	f7ff fb27 	bl	8000a40 <_test_assert>
 80013f2:	2800      	cmp	r0, #0
 80013f4:	d1e2      	bne.n	80013bc <rt_test_007_005_execute.lto_priv.0+0x1c>
 80013f6:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 80013f8:	493e      	ldr	r1, [pc, #248]	; (80014f4 <rt_test_007_005_execute.lto_priv.0+0x154>)
 80013fa:	1bc0      	subs	r0, r0, r7
 80013fc:	fab0 f080 	clz	r0, r0
 8001400:	0940      	lsrs	r0, r0, #5
 8001402:	f7ff fb1d 	bl	8000a40 <_test_assert>
 8001406:	2800      	cmp	r0, #0
 8001408:	d1d8      	bne.n	80013bc <rt_test_007_005_execute.lto_priv.0+0x1c>
 800140a:	69ab      	ldr	r3, [r5, #24]
  test_set_step(5);
 800140c:	2205      	movs	r2, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800140e:	6898      	ldr	r0, [r3, #8]
 8001410:	4939      	ldr	r1, [pc, #228]	; (80014f8 <rt_test_007_005_execute.lto_priv.0+0x158>)
 8001412:	1b80      	subs	r0, r0, r6
 8001414:	fab0 f080 	clz	r0, r0
 8001418:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 800141a:	6022      	str	r2, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800141c:	f7ff fb10 	bl	8000a40 <_test_assert>
 8001420:	2800      	cmp	r0, #0
 8001422:	d1cb      	bne.n	80013bc <rt_test_007_005_execute.lto_priv.0+0x1c>
  test_set_step(6);
 8001424:	2306      	movs	r3, #6
 8001426:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8001428:	f7ff f87a 	bl	8000520 <chMtxTryLock.constprop.0>
    test_assert(b, "already locked");
 800142c:	492d      	ldr	r1, [pc, #180]	; (80014e4 <rt_test_007_005_execute.lto_priv.0+0x144>)
 800142e:	f7ff fb07 	bl	8000a40 <_test_assert>
 8001432:	2800      	cmp	r0, #0
 8001434:	d1c2      	bne.n	80013bc <rt_test_007_005_execute.lto_priv.0+0x1c>
    b = chMtxTryLock(&m1);
 8001436:	f7ff f873 	bl	8000520 <chMtxTryLock.constprop.0>
    test_assert(!b, "not locked");
 800143a:	f080 0001 	eor.w	r0, r0, #1
 800143e:	492a      	ldr	r1, [pc, #168]	; (80014e8 <rt_test_007_005_execute.lto_priv.0+0x148>)
 8001440:	b2c0      	uxtb	r0, r0
 8001442:	f7ff fafd 	bl	8000a40 <_test_assert>
 8001446:	2800      	cmp	r0, #0
 8001448:	d1b8      	bne.n	80013bc <rt_test_007_005_execute.lto_priv.0+0x1c>
 800144a:	2320      	movs	r3, #32
 800144c:	f383 8811 	msr	BASEPRI, r3
 *          inheritance mechanism.
 *
 * @sclass
 */
void chMtxUnlockAllS(void) {
  thread_t *ctp = currp;
 8001450:	f8d5 9018 	ldr.w	r9, [r5, #24]

  if (ctp->mtxlist != NULL) {
 8001454:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8001458:	b1cb      	cbz	r3, 800148e <rt_test_007_005_execute.lto_priv.0+0xee>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 800145a:	4680      	mov	r8, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 800145c:	6818      	ldr	r0, [r3, #0]
      ctp->mtxlist = mp->next;
 800145e:	68da      	ldr	r2, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 8001460:	4283      	cmp	r3, r0
      ctp->mtxlist = mp->next;
 8001462:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8001466:	d035      	beq.n	80014d4 <rt_test_007_005_execute.lto_priv.0+0x134>
        mp->next    = tp->mtxlist;
 8001468:	6b81      	ldr	r1, [r0, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800146a:	6802      	ldr	r2, [r0, #0]
 800146c:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800146e:	6053      	str	r3, [r2, #4]
 8001470:	e9c3 0102 	strd	r0, r1, [r3, #8]
        tp->mtxlist = mp;
 8001474:	6383      	str	r3, [r0, #56]	; 0x38
        (void) chSchReadyI(tp);
 8001476:	f008 fe8b 	bl	800a190 <chSchReadyI>
 800147a:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
      }
    } while (ctp->mtxlist != NULL);
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1ec      	bne.n	800145c <rt_test_007_005_execute.lto_priv.0+0xbc>
    ctp->prio = ctp->realprio;
 8001482:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8001486:	f8c9 3008 	str.w	r3, [r9, #8]
    chSchRescheduleS();
 800148a:	f008 fd69 	bl	8009f60 <chSchRescheduleS>
 800148e:	2300      	movs	r3, #0
 8001490:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	4916      	ldr	r1, [pc, #88]	; (80014f0 <rt_test_007_005_execute.lto_priv.0+0x150>)
 8001498:	fab0 f080 	clz	r0, r0
 800149c:	0940      	lsrs	r0, r0, #5
 800149e:	f7ff facf 	bl	8000a40 <_test_assert>
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d18a      	bne.n	80013bc <rt_test_007_005_execute.lto_priv.0+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 80014a6:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 80014a8:	4912      	ldr	r1, [pc, #72]	; (80014f4 <rt_test_007_005_execute.lto_priv.0+0x154>)
 80014aa:	1bc0      	subs	r0, r0, r7
 80014ac:	fab0 f080 	clz	r0, r0
 80014b0:	0940      	lsrs	r0, r0, #5
 80014b2:	f7ff fac5 	bl	8000a40 <_test_assert>
 80014b6:	2800      	cmp	r0, #0
 80014b8:	d180      	bne.n	80013bc <rt_test_007_005_execute.lto_priv.0+0x1c>
 80014ba:	69aa      	ldr	r2, [r5, #24]
  test_set_step(7);
 80014bc:	2307      	movs	r3, #7
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80014be:	6890      	ldr	r0, [r2, #8]
  test_set_step(7);
 80014c0:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80014c2:	1b80      	subs	r0, r0, r6
 80014c4:	fab0 f080 	clz	r0, r0
}
 80014c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80014cc:	490a      	ldr	r1, [pc, #40]	; (80014f8 <rt_test_007_005_execute.lto_priv.0+0x158>)
 80014ce:	0940      	lsrs	r0, r0, #5
 80014d0:	f7ff bab6 	b.w	8000a40 <_test_assert>
        mp->owner = NULL;
 80014d4:	f8c3 8008 	str.w	r8, [r3, #8]
 80014d8:	4613      	mov	r3, r2
 80014da:	e7d0      	b.n	800147e <rt_test_007_005_execute.lto_priv.0+0xde>
 80014dc:	20000c88 	.word	0x20000c88
 80014e0:	20001cf4 	.word	0x20001cf4
 80014e4:	0800c5e4 	.word	0x0800c5e4
 80014e8:	0800c5f4 	.word	0x0800c5f4
 80014ec:	20000854 	.word	0x20000854
 80014f0:	0800c600 	.word	0x0800c600
 80014f4:	0800c5c0 	.word	0x0800c5c0
 80014f8:	0800c60c 	.word	0x0800c60c
 80014fc:	00000000 	.word	0x00000000

08001500 <thread1.lto_priv.2>:
static THD_FUNCTION(thread1, p) {
 8001500:	b538      	push	{r3, r4, r5, lr}
 8001502:	4604      	mov	r4, r0
  chMtxLock(&m1);
 8001504:	4d05      	ldr	r5, [pc, #20]	; (800151c <thread1.lto_priv.2+0x1c>)
 8001506:	4628      	mov	r0, r5
 8001508:	f008 ff7a 	bl	800a400 <chMtxLock>
  test_emit_token(*(char *)p);
 800150c:	7820      	ldrb	r0, [r4, #0]
 800150e:	f7ff fb3f 	bl	8000b90 <test_emit_token>
  chMtxUnlock(&m1);
 8001512:	4628      	mov	r0, r5
}
 8001514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 8001518:	f008 bee2 	b.w	800a2e0 <chMtxUnlock>
 800151c:	20000854 	.word	0x20000854

08001520 <oslib_test_007_001_execute.lto_priv.0>:
  test_set_step(1);
 8001520:	2101      	movs	r1, #1
static void oslib_test_007_001_execute(void) {
 8001522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8001526:	2204      	movs	r2, #4
 8001528:	2520      	movs	r5, #32
 800152a:	2000      	movs	r0, #0
 800152c:	4e38      	ldr	r6, [pc, #224]	; (8001610 <oslib_test_007_001_execute.lto_priv.0+0xf0>)
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <oslib_test_007_001_execute.lto_priv.0+0xf4>)
 8001530:	4c39      	ldr	r4, [pc, #228]	; (8001618 <oslib_test_007_001_execute.lto_priv.0+0xf8>)
 8001532:	6031      	str	r1, [r6, #0]
 8001534:	f385 8811 	msr	BASEPRI, r5
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8001538:	6821      	ldr	r1, [r4, #0]
  mp->next = php;
 800153a:	6023      	str	r3, [r4, #0]
  php->next = mp->next;
 800153c:	6019      	str	r1, [r3, #0]
 800153e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001542:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8001544:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001546:	440b      	add	r3, r1
  while (n != 0U) {
 8001548:	d1f4      	bne.n	8001534 <oslib_test_007_001_execute.lto_priv.0+0x14>
  test_set_step(2);
 800154a:	2302      	movs	r3, #2
 800154c:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 800154e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8001618 <oslib_test_007_001_execute.lto_priv.0+0xf8>
 8001552:	4f32      	ldr	r7, [pc, #200]	; (800161c <oslib_test_007_001_execute.lto_priv.0+0xfc>)
  test_set_step(2);
 8001554:	6033      	str	r3, [r6, #0]
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8001556:	4640      	mov	r0, r8
 8001558:	f008 fbba 	bl	8009cd0 <chPoolAlloc>
 800155c:	3800      	subs	r0, #0
 800155e:	bf18      	it	ne
 8001560:	2001      	movne	r0, #1
 8001562:	4639      	mov	r1, r7
 8001564:	f7ff fa6c 	bl	8000a40 <_test_assert>
 8001568:	2800      	cmp	r0, #0
 800156a:	d14f      	bne.n	800160c <oslib_test_007_001_execute.lto_priv.0+0xec>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800156c:	3d01      	subs	r5, #1
 800156e:	d1f2      	bne.n	8001556 <oslib_test_007_001_execute.lto_priv.0+0x36>
  test_set_step(3);
 8001570:	2303      	movs	r3, #3
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001572:	4829      	ldr	r0, [pc, #164]	; (8001618 <oslib_test_007_001_execute.lto_priv.0+0xf8>)
  test_set_step(3);
 8001574:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001576:	f008 fbab 	bl	8009cd0 <chPoolAlloc>
 800157a:	fab0 f080 	clz	r0, r0
 800157e:	4928      	ldr	r1, [pc, #160]	; (8001620 <oslib_test_007_001_execute.lto_priv.0+0x100>)
 8001580:	0940      	lsrs	r0, r0, #5
 8001582:	f7ff fa5d 	bl	8000a40 <_test_assert>
 8001586:	2800      	cmp	r0, #0
 8001588:	d140      	bne.n	800160c <oslib_test_007_001_execute.lto_priv.0+0xec>
  test_set_step(4);
 800158a:	2204      	movs	r2, #4
 800158c:	2720      	movs	r7, #32
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <oslib_test_007_001_execute.lto_priv.0+0xf4>)
 8001590:	6032      	str	r2, [r6, #0]
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8001592:	f103 0010 	add.w	r0, r3, #16
 8001596:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 800159a:	6822      	ldr	r2, [r4, #0]
  mp->next = php;
 800159c:	6023      	str	r3, [r4, #0]
  php->next = mp->next;
 800159e:	f843 2b04 	str.w	r2, [r3], #4
 80015a2:	f385 8811 	msr	BASEPRI, r5
 80015a6:	4283      	cmp	r3, r0
 80015a8:	d1f5      	bne.n	8001596 <oslib_test_007_001_execute.lto_priv.0+0x76>
  test_set_step(5);
 80015aa:	2305      	movs	r3, #5
 80015ac:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80015ae:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8001618 <oslib_test_007_001_execute.lto_priv.0+0xf8>
 80015b2:	4f1a      	ldr	r7, [pc, #104]	; (800161c <oslib_test_007_001_execute.lto_priv.0+0xfc>)
  test_set_step(5);
 80015b4:	6033      	str	r3, [r6, #0]
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80015b6:	4640      	mov	r0, r8
 80015b8:	f008 fb8a 	bl	8009cd0 <chPoolAlloc>
 80015bc:	3800      	subs	r0, #0
 80015be:	bf18      	it	ne
 80015c0:	2001      	movne	r0, #1
 80015c2:	4639      	mov	r1, r7
 80015c4:	f7ff fa3c 	bl	8000a40 <_test_assert>
 80015c8:	bb00      	cbnz	r0, 800160c <oslib_test_007_001_execute.lto_priv.0+0xec>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80015ca:	3d01      	subs	r5, #1
 80015cc:	d1f3      	bne.n	80015b6 <oslib_test_007_001_execute.lto_priv.0+0x96>
  test_set_step(6);
 80015ce:	2306      	movs	r3, #6
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80015d0:	4811      	ldr	r0, [pc, #68]	; (8001618 <oslib_test_007_001_execute.lto_priv.0+0xf8>)
  test_set_step(6);
 80015d2:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80015d4:	f008 fb7c 	bl	8009cd0 <chPoolAlloc>
 80015d8:	fab0 f080 	clz	r0, r0
 80015dc:	4910      	ldr	r1, [pc, #64]	; (8001620 <oslib_test_007_001_execute.lto_priv.0+0x100>)
 80015de:	0940      	lsrs	r0, r0, #5
 80015e0:	f7ff fa2e 	bl	8000a40 <_test_assert>
 80015e4:	b990      	cbnz	r0, 800160c <oslib_test_007_001_execute.lto_priv.0+0xec>
  test_set_step(7);
 80015e6:	2107      	movs	r1, #7
  mp->object_size = size;
 80015e8:	2304      	movs	r3, #4
  mp->provider = provider;
 80015ea:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <oslib_test_007_001_execute.lto_priv.0+0x104>)
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80015ec:	480a      	ldr	r0, [pc, #40]	; (8001618 <oslib_test_007_001_execute.lto_priv.0+0xf8>)
  test_set_step(7);
 80015ee:	6031      	str	r1, [r6, #0]
  mp->align = align;
 80015f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
  mp->next = NULL;
 80015f4:	6025      	str	r5, [r4, #0]
  mp->provider = provider;
 80015f6:	60e2      	str	r2, [r4, #12]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80015f8:	f008 fb6a 	bl	8009cd0 <chPoolAlloc>
}
 80015fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8001600:	fab0 f080 	clz	r0, r0
 8001604:	4908      	ldr	r1, [pc, #32]	; (8001628 <oslib_test_007_001_execute.lto_priv.0+0x108>)
 8001606:	0940      	lsrs	r0, r0, #5
 8001608:	f7ff ba1a 	b.w	8000a40 <_test_assert>
}
 800160c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001610:	20001cf4 	.word	0x20001cf4
 8001614:	200015a8 	.word	0x200015a8
 8001618:	200008a8 	.word	0x200008a8
 800161c:	0800c624 	.word	0x0800c624
 8001620:	0800c630 	.word	0x0800c630
 8001624:	08000661 	.word	0x08000661
 8001628:	0800c640 	.word	0x0800c640
 800162c:	00000000 	.word	0x00000000

08001630 <chThdCreateFromMemoryPool.constprop.0>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8001630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8001634:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8001690 <chThdCreateFromMemoryPool.constprop.0+0x60>
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8001638:	4607      	mov	r7, r0
 800163a:	b086      	sub	sp, #24
  wsp = chPoolAlloc(mp);
 800163c:	4640      	mov	r0, r8
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 800163e:	460e      	mov	r6, r1
 8001640:	4615      	mov	r5, r2
  wsp = chPoolAlloc(mp);
 8001642:	f008 fb45 	bl	8009cd0 <chPoolAlloc>
  if (wsp == NULL) {
 8001646:	4604      	mov	r4, r0
 8001648:	b1d8      	cbz	r0, 8001682 <chThdCreateFromMemoryPool.constprop.0+0x52>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 800164a:	f8d8 3004 	ldr.w	r3, [r8, #4]
  thread_descriptor_t td = {
 800164e:	4a0f      	ldr	r2, [pc, #60]	; (800168c <chThdCreateFromMemoryPool.constprop.0+0x5c>)
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8001650:	4403      	add	r3, r0
  thread_descriptor_t td = {
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	9700      	str	r7, [sp, #0]
 8001656:	9001      	str	r0, [sp, #4]
 8001658:	9603      	str	r6, [sp, #12]
 800165a:	9505      	str	r5, [sp, #20]
 800165c:	9204      	str	r2, [sp, #16]
 800165e:	2320      	movs	r3, #32
 8001660:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8001664:	4668      	mov	r0, sp
 8001666:	f008 fc1b 	bl	8009ea0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 800166a:	2302      	movs	r3, #2
  tp->mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 800166c:	2100      	movs	r1, #0
  tp->flags = CH_FLAG_MODE_MPOOL;
 800166e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 8001672:	f8c0 8040 	str.w	r8, [r0, #64]	; 0x40
  tp = chThdCreateSuspendedI(&td);
 8001676:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8001678:	f008 fc9a 	bl	8009fb0 <chSchWakeupS>
 800167c:	2300      	movs	r3, #0
 800167e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8001682:	4620      	mov	r0, r4
 8001684:	b006      	add	sp, #24
 8001686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800168a:	bf00      	nop
 800168c:	08000cc1 	.word	0x08000cc1
 8001690:	20001488 	.word	0x20001488
	...

080016a0 <oslib_test_001_003_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void oslib_test_001_003_execute(void) {
 80016a0:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 80016a2:	2501      	movs	r5, #1
 80016a4:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <oslib_test_001_003_execute.lto_priv.0+0x130>)
  {
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
    test_printn(CH_CFG_USE_MAILBOXES);
    test_println("");
 80016a6:	4c4b      	ldr	r4, [pc, #300]	; (80017d4 <oslib_test_001_003_execute.lto_priv.0+0x134>)
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 80016a8:	484b      	ldr	r0, [pc, #300]	; (80017d8 <oslib_test_001_003_execute.lto_priv.0+0x138>)
  test_set_step(1);
 80016aa:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 80016ac:	f7ff fb30 	bl	8000d10 <test_print>
void test_printn(uint32_t n) {
 80016b0:	4628      	mov	r0, r5
 80016b2:	f7ff fa2d 	bl	8000b10 <test_printn.part.0>
    test_println("");
 80016b6:	4620      	mov	r0, r4
 80016b8:	f7ff fb0a 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 80016bc:	4847      	ldr	r0, [pc, #284]	; (80017dc <oslib_test_001_003_execute.lto_priv.0+0x13c>)
 80016be:	f7ff fb27 	bl	8000d10 <test_print>
 80016c2:	4628      	mov	r0, r5
 80016c4:	f7ff fa24 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMCORE);
    test_println("");
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff fb01 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 80016ce:	4844      	ldr	r0, [pc, #272]	; (80017e0 <oslib_test_001_003_execute.lto_priv.0+0x140>)
 80016d0:	f7ff fb1e 	bl	8000d10 <test_print>
 80016d4:	4628      	mov	r0, r5
 80016d6:	f7ff fa1b 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_HEAP);
    test_println("");
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff faf8 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 80016e0:	4840      	ldr	r0, [pc, #256]	; (80017e4 <oslib_test_001_003_execute.lto_priv.0+0x144>)
 80016e2:	f7ff fb15 	bl	8000d10 <test_print>
 80016e6:	4628      	mov	r0, r5
 80016e8:	f7ff fa12 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMPOOLS);
    test_println("");
 80016ec:	4620      	mov	r0, r4
 80016ee:	f7ff faef 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 80016f2:	483d      	ldr	r0, [pc, #244]	; (80017e8 <oslib_test_001_003_execute.lto_priv.0+0x148>)
 80016f4:	f7ff fb0c 	bl	8000d10 <test_print>
 80016f8:	4628      	mov	r0, r5
 80016fa:	f7ff fa09 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
    test_println("");
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff fae6 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_PIPES:                   ");
 8001704:	4839      	ldr	r0, [pc, #228]	; (80017ec <oslib_test_001_003_execute.lto_priv.0+0x14c>)
 8001706:	f7ff fb03 	bl	8000d10 <test_print>
 800170a:	4628      	mov	r0, r5
 800170c:	f7ff fa00 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_PIPES);
    test_println("");
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff fadd 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_OBJ_CACHES:              ");
 8001716:	4836      	ldr	r0, [pc, #216]	; (80017f0 <oslib_test_001_003_execute.lto_priv.0+0x150>)
 8001718:	f7ff fafa 	bl	8000d10 <test_print>
 800171c:	4628      	mov	r0, r5
 800171e:	f7ff f9f7 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_CACHES);
    test_println("");
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff fad4 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_DELEGATES:               ");
 8001728:	4832      	ldr	r0, [pc, #200]	; (80017f4 <oslib_test_001_003_execute.lto_priv.0+0x154>)
 800172a:	f7ff faf1 	bl	8000d10 <test_print>
 800172e:	4628      	mov	r0, r5
 8001730:	f7ff f9ee 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_DELEGATES);
    test_println("");
 8001734:	4620      	mov	r0, r4
 8001736:	f7ff facb 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 800173a:	482f      	ldr	r0, [pc, #188]	; (80017f8 <oslib_test_001_003_execute.lto_priv.0+0x158>)
 800173c:	f7ff fae8 	bl	8000d10 <test_print>
 8001740:	4628      	mov	r0, r5
 8001742:	f7ff f9e5 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_FACTORY);
    test_println("");
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff fac2 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 800174c:	482b      	ldr	r0, [pc, #172]	; (80017fc <oslib_test_001_003_execute.lto_priv.0+0x15c>)
 800174e:	f7ff fadf 	bl	8000d10 <test_print>
 8001752:	2008      	movs	r0, #8
 8001754:	f7ff f9dc 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
    test_println("");
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff fab9 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 800175e:	4828      	ldr	r0, [pc, #160]	; (8001800 <oslib_test_001_003_execute.lto_priv.0+0x160>)
 8001760:	f7ff fad6 	bl	8000d10 <test_print>
 8001764:	4628      	mov	r0, r5
 8001766:	f7ff f9d3 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
    test_println("");
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff fab0 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 8001770:	4824      	ldr	r0, [pc, #144]	; (8001804 <oslib_test_001_003_execute.lto_priv.0+0x164>)
 8001772:	f7ff facd 	bl	8000d10 <test_print>
 8001776:	4628      	mov	r0, r5
 8001778:	f7ff f9ca 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
    test_println("");
 800177c:	4620      	mov	r0, r4
 800177e:	f7ff faa7 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 8001782:	4821      	ldr	r0, [pc, #132]	; (8001808 <oslib_test_001_003_execute.lto_priv.0+0x168>)
 8001784:	f7ff fac4 	bl	8000d10 <test_print>
 8001788:	4628      	mov	r0, r5
 800178a:	f7ff f9c1 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
    test_println("");
 800178e:	4620      	mov	r0, r4
 8001790:	f7ff fa9e 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 8001794:	481d      	ldr	r0, [pc, #116]	; (800180c <oslib_test_001_003_execute.lto_priv.0+0x16c>)
 8001796:	f7ff fabb 	bl	8000d10 <test_print>
 800179a:	4628      	mov	r0, r5
 800179c:	f7ff f9b8 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
    test_println("");
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff fa95 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 80017a6:	481a      	ldr	r0, [pc, #104]	; (8001810 <oslib_test_001_003_execute.lto_priv.0+0x170>)
 80017a8:	f7ff fab2 	bl	8000d10 <test_print>
 80017ac:	4628      	mov	r0, r5
 80017ae:	f7ff f9af 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
    test_println("");
 80017b2:	4620      	mov	r0, r4
 80017b4:	f7ff fa8c 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_FACTORY_PIPES:               ");
 80017b8:	4816      	ldr	r0, [pc, #88]	; (8001814 <oslib_test_001_003_execute.lto_priv.0+0x174>)
 80017ba:	f7ff faa9 	bl	8000d10 <test_print>
 80017be:	4628      	mov	r0, r5
 80017c0:	f7ff f9a6 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_PIPES);
    test_println("");
 80017c4:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 80017c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 80017ca:	f7ff ba81 	b.w	8000cd0 <test_println>
 80017ce:	bf00      	nop
 80017d0:	20001cf4 	.word	0x20001cf4
 80017d4:	0800e33c 	.word	0x0800e33c
 80017d8:	0800c65c 	.word	0x0800c65c
 80017dc:	0800c688 	.word	0x0800c688
 80017e0:	0800c6b4 	.word	0x0800c6b4
 80017e4:	0800c6e0 	.word	0x0800c6e0
 80017e8:	0800c70c 	.word	0x0800c70c
 80017ec:	0800c738 	.word	0x0800c738
 80017f0:	0800c764 	.word	0x0800c764
 80017f4:	0800c790 	.word	0x0800c790
 80017f8:	0800c7bc 	.word	0x0800c7bc
 80017fc:	0800c7e8 	.word	0x0800c7e8
 8001800:	0800c814 	.word	0x0800c814
 8001804:	0800c840 	.word	0x0800c840
 8001808:	0800c86c 	.word	0x0800c86c
 800180c:	0800c898 	.word	0x0800c898
 8001810:	0800c8c4 	.word	0x0800c8c4
 8001814:	0800c8f0 	.word	0x0800c8f0
	...

08001820 <oslib_test_001_002_execute.lto_priv.0>:
static void oslib_test_001_002_execute(void) {
 8001820:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8001822:	2501      	movs	r5, #1
 8001824:	4b18      	ldr	r3, [pc, #96]	; (8001888 <oslib_test_001_002_execute.lto_priv.0+0x68>)
    test_println("--- Product:                            ChibiOS/LIB");
 8001826:	4819      	ldr	r0, [pc, #100]	; (800188c <oslib_test_001_002_execute.lto_priv.0+0x6c>)
  test_set_step(1);
 8001828:	601d      	str	r5, [r3, #0]
    test_println("");
 800182a:	4c19      	ldr	r4, [pc, #100]	; (8001890 <oslib_test_001_002_execute.lto_priv.0+0x70>)
    test_println("--- Product:                            ChibiOS/LIB");
 800182c:	f7ff fa50 	bl	8000cd0 <test_println>
    test_print("--- Stable Flag:                        ");
 8001830:	4818      	ldr	r0, [pc, #96]	; (8001894 <oslib_test_001_002_execute.lto_priv.0+0x74>)
 8001832:	f7ff fa6d 	bl	8000d10 <test_print>
 8001836:	4628      	mov	r0, r5
 8001838:	f7ff f96a 	bl	8000b10 <test_printn.part.0>
    test_println("");
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff fa47 	bl	8000cd0 <test_println>
    test_print("--- Version String:                     ");
 8001842:	4815      	ldr	r0, [pc, #84]	; (8001898 <oslib_test_001_002_execute.lto_priv.0+0x78>)
 8001844:	f7ff fa64 	bl	8000d10 <test_print>
    test_println(CH_OSLIB_VERSION);
 8001848:	4814      	ldr	r0, [pc, #80]	; (800189c <oslib_test_001_002_execute.lto_priv.0+0x7c>)
 800184a:	f7ff fa41 	bl	8000cd0 <test_println>
    test_print("--- Major Number:                       ");
 800184e:	4814      	ldr	r0, [pc, #80]	; (80018a0 <oslib_test_001_002_execute.lto_priv.0+0x80>)
 8001850:	f7ff fa5e 	bl	8000d10 <test_print>
 8001854:	4628      	mov	r0, r5
 8001856:	f7ff f95b 	bl	8000b10 <test_printn.part.0>
    test_println("");
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff fa38 	bl	8000cd0 <test_println>
    test_print("--- Minor Number:                       ");
 8001860:	4810      	ldr	r0, [pc, #64]	; (80018a4 <oslib_test_001_002_execute.lto_priv.0+0x84>)
 8001862:	f7ff fa55 	bl	8000d10 <test_print>
 8001866:	2002      	movs	r0, #2
 8001868:	f7ff f952 	bl	8000b10 <test_printn.part.0>
    test_println("");
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff fa2f 	bl	8000cd0 <test_println>
    test_print("--- Patch Number:                       ");
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <oslib_test_001_002_execute.lto_priv.0+0x88>)
 8001874:	f7ff fa4c 	bl	8000d10 <test_print>
    test_printn(CH_OSLIB_PATCH);
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff f979 	bl	8000b70 <test_printn>
    test_println("");
 800187e:	4620      	mov	r0, r4
}
 8001880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001884:	f7ff ba24 	b.w	8000cd0 <test_println>
 8001888:	20001cf4 	.word	0x20001cf4
 800188c:	0800c91c 	.word	0x0800c91c
 8001890:	0800e33c 	.word	0x0800e33c
 8001894:	0800c950 	.word	0x0800c950
 8001898:	0800c97c 	.word	0x0800c97c
 800189c:	0800c9a8 	.word	0x0800c9a8
 80018a0:	0800c9b0 	.word	0x0800c9b0
 80018a4:	0800c9dc 	.word	0x0800c9dc
 80018a8:	0800ca08 	.word	0x0800ca08
 80018ac:	00000000 	.word	0x00000000

080018b0 <rt_test_011_012_execute.lto_priv.0>:
 */

static void rt_test_011_012_execute(void) {

  /* [11.12.1] The size of the system area is printed.*/
  test_set_step(1);
 80018b0:	2301      	movs	r3, #1
static void rt_test_011_012_execute(void) {
 80018b2:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80018b4:	4d32      	ldr	r5, [pc, #200]	; (8001980 <rt_test_011_012_execute.lto_priv.0+0xd0>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 80018b6:	4c33      	ldr	r4, [pc, #204]	; (8001984 <rt_test_011_012_execute.lto_priv.0+0xd4>)
    test_print("--- System: ");
 80018b8:	4833      	ldr	r0, [pc, #204]	; (8001988 <rt_test_011_012_execute.lto_priv.0+0xd8>)
  test_set_step(1);
 80018ba:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 80018bc:	f7ff fa28 	bl	8000d10 <test_print>
 80018c0:	2078      	movs	r0, #120	; 0x78
 80018c2:	f7ff f925 	bl	8000b10 <test_printn.part.0>
    test_println(" bytes");
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff fa02 	bl	8000cd0 <test_println>
  }
  test_end_step(1);

  /* [11.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 80018cc:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 80018ce:	482f      	ldr	r0, [pc, #188]	; (800198c <rt_test_011_012_execute.lto_priv.0+0xdc>)
  test_set_step(2);
 80018d0:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 80018d2:	f7ff fa1d 	bl	8000d10 <test_print>
 80018d6:	2044      	movs	r0, #68	; 0x44
 80018d8:	f7ff f91a 	bl	8000b10 <test_printn.part.0>
    test_printn(sizeof(thread_t));
    test_println(" bytes");
 80018dc:	4620      	mov	r0, r4
 80018de:	f7ff f9f7 	bl	8000cd0 <test_println>
  }
  test_end_step(2);

  /* [11.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 80018e2:	2303      	movs	r3, #3
    test_println(" bytes");
  }
  test_end_step(3);

  /* [11.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 80018e4:	2604      	movs	r6, #4
    test_print("--- Timer : ");
 80018e6:	482a      	ldr	r0, [pc, #168]	; (8001990 <rt_test_011_012_execute.lto_priv.0+0xe0>)
  test_set_step(3);
 80018e8:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 80018ea:	f7ff fa11 	bl	8000d10 <test_print>
 80018ee:	2014      	movs	r0, #20
 80018f0:	f7ff f90e 	bl	8000b10 <test_printn.part.0>
    test_println(" bytes");
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7ff f9eb 	bl	8000cd0 <test_println>
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 80018fa:	4826      	ldr	r0, [pc, #152]	; (8001994 <rt_test_011_012_execute.lto_priv.0+0xe4>)
  test_set_step(4);
 80018fc:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 80018fe:	f7ff fa07 	bl	8000d10 <test_print>
 8001902:	200c      	movs	r0, #12
 8001904:	f7ff f904 	bl	8000b10 <test_printn.part.0>
    test_printn(sizeof(semaphore_t));
    test_println(" bytes");
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff f9e1 	bl	8000cd0 <test_println>
#endif
  }
  test_end_step(4);

  /* [11.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 800190e:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8001910:	4821      	ldr	r0, [pc, #132]	; (8001998 <rt_test_011_012_execute.lto_priv.0+0xe8>)
  test_set_step(5);
 8001912:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 8001914:	f7ff f9fc 	bl	8000d10 <test_print>
 8001918:	2010      	movs	r0, #16
 800191a:	f7ff f8f9 	bl	8000b10 <test_printn.part.0>
    test_printn(sizeof(mutex_t));
    test_println(" bytes");
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff f9d6 	bl	8000cd0 <test_println>
#endif
  }
  test_end_step(5);

  /* [11.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8001924:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8001926:	481d      	ldr	r0, [pc, #116]	; (800199c <rt_test_011_012_execute.lto_priv.0+0xec>)
  test_set_step(6);
 8001928:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 800192a:	f7ff f9f1 	bl	8000d10 <test_print>
 800192e:	2008      	movs	r0, #8
 8001930:	f7ff f8ee 	bl	8000b10 <test_printn.part.0>
    test_printn(sizeof(condition_variable_t));
    test_println(" bytes");
 8001934:	4620      	mov	r0, r4
 8001936:	f7ff f9cb 	bl	8000cd0 <test_println>
#endif
  }
  test_end_step(6);

  /* [11.12.7] The size of an event source is printed.*/
  test_set_step(7);
 800193a:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 800193c:	4818      	ldr	r0, [pc, #96]	; (80019a0 <rt_test_011_012_execute.lto_priv.0+0xf0>)
  test_set_step(7);
 800193e:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 8001940:	f7ff f9e6 	bl	8000d10 <test_print>
 8001944:	4630      	mov	r0, r6
 8001946:	f7ff f8e3 	bl	8000b10 <test_printn.part.0>
    test_printn(sizeof(event_source_t));
    test_println(" bytes");
 800194a:	4620      	mov	r0, r4
 800194c:	f7ff f9c0 	bl	8000cd0 <test_println>
#endif
  }
  test_end_step(7);

  /* [11.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8001950:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8001952:	4814      	ldr	r0, [pc, #80]	; (80019a4 <rt_test_011_012_execute.lto_priv.0+0xf4>)
  test_set_step(8);
 8001954:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 8001956:	f7ff f9db 	bl	8000d10 <test_print>
 800195a:	2014      	movs	r0, #20
 800195c:	f7ff f8d8 	bl	8000b10 <test_printn.part.0>
    test_printn(sizeof(event_listener_t));
    test_println(" bytes");
 8001960:	4620      	mov	r0, r4
 8001962:	f7ff f9b5 	bl	8000cd0 <test_println>
#endif
  }
  test_end_step(8);

  /* [11.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8001966:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 8001968:	480f      	ldr	r0, [pc, #60]	; (80019a8 <rt_test_011_012_execute.lto_priv.0+0xf8>)
  test_set_step(9);
 800196a:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 800196c:	f7ff f9d0 	bl	8000d10 <test_print>
 8001970:	2028      	movs	r0, #40	; 0x28
 8001972:	f7ff f8cd 	bl	8000b10 <test_printn.part.0>
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
 8001976:	4620      	mov	r0, r4
#endif
  }
  test_end_step(9);
}
 8001978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 800197c:	f7ff b9a8 	b.w	8000cd0 <test_println>
 8001980:	20001cf4 	.word	0x20001cf4
 8001984:	0800ca44 	.word	0x0800ca44
 8001988:	0800ca34 	.word	0x0800ca34
 800198c:	0800ca4c 	.word	0x0800ca4c
 8001990:	0800ca5c 	.word	0x0800ca5c
 8001994:	0800ca6c 	.word	0x0800ca6c
 8001998:	0800ca7c 	.word	0x0800ca7c
 800199c:	0800ca8c 	.word	0x0800ca8c
 80019a0:	0800ca9c 	.word	0x0800ca9c
 80019a4:	0800caac 	.word	0x0800caac
 80019a8:	0800cabc 	.word	0x0800cabc
 80019ac:	00000000 	.word	0x00000000

080019b0 <rt_test_009_006_execute.lto_priv.0>:
static void rt_test_009_006_execute(void) {
 80019b0:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80019b2:	2401      	movs	r4, #1
 80019b4:	4d40      	ldr	r5, [pc, #256]	; (8001ab8 <rt_test_009_006_execute.lto_priv.0+0x108>)
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 80019b6:	2000      	movs	r0, #0
  test_set_step(1);
 80019b8:	602c      	str	r4, [r5, #0]
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 80019ba:	f7fe ffe9 	bl	8000990 <chEvtWaitOneTimeout.constprop.0>
    test_assert(m == 0, "spurious event");
 80019be:	fab0 f080 	clz	r0, r0
 80019c2:	493e      	ldr	r1, [pc, #248]	; (8001abc <rt_test_009_006_execute.lto_priv.0+0x10c>)
 80019c4:	0940      	lsrs	r0, r0, #5
 80019c6:	f7ff f83b 	bl	8000a40 <_test_assert>
 80019ca:	b100      	cbz	r0, 80019ce <rt_test_009_006_execute.lto_priv.0+0x1e>
}
 80019cc:	bd70      	pop	{r4, r5, r6, pc}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 80019ce:	4e3c      	ldr	r6, [pc, #240]	; (8001ac0 <rt_test_009_006_execute.lto_priv.0+0x110>)
 80019d0:	2220      	movs	r2, #32
 80019d2:	69b3      	ldr	r3, [r6, #24]
 80019d4:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 80019d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019da:	2a00      	cmp	r2, #0
 80019dc:	d150      	bne.n	8001a80 <rt_test_009_006_execute.lto_priv.0+0xd0>
 80019de:	f380 8811 	msr	BASEPRI, r0
 80019e2:	4620      	mov	r0, r4
    test_assert(m == 0, "spurious event");
 80019e4:	4935      	ldr	r1, [pc, #212]	; (8001abc <rt_test_009_006_execute.lto_priv.0+0x10c>)
 80019e6:	f7ff f82b 	bl	8000a40 <_test_assert>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d1ee      	bne.n	80019cc <rt_test_009_006_execute.lto_priv.0+0x1c>
 80019ee:	2220      	movs	r2, #32
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 80019f0:	69b3      	ldr	r3, [r6, #24]
 80019f2:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 80019f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f8:	3201      	adds	r2, #1
 80019fa:	d045      	beq.n	8001a88 <rt_test_009_006_execute.lto_priv.0+0xd8>
 80019fc:	f380 8811 	msr	BASEPRI, r0
 8001a00:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8001a02:	492e      	ldr	r1, [pc, #184]	; (8001abc <rt_test_009_006_execute.lto_priv.0+0x10c>)
 8001a04:	f7ff f81c 	bl	8000a40 <_test_assert>
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d1df      	bne.n	80019cc <rt_test_009_006_execute.lto_priv.0+0x1c>
  test_set_step(2);
 8001a0c:	2302      	movs	r3, #2
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(50));
 8001a0e:	2064      	movs	r0, #100	; 0x64
  test_set_step(2);
 8001a10:	602b      	str	r3, [r5, #0]
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(50));
 8001a12:	f7fe ffbd 	bl	8000990 <chEvtWaitOneTimeout.constprop.0>
    test_assert(m == 0, "spurious event");
 8001a16:	fab0 f080 	clz	r0, r0
 8001a1a:	4928      	ldr	r1, [pc, #160]	; (8001abc <rt_test_009_006_execute.lto_priv.0+0x10c>)
 8001a1c:	0940      	lsrs	r0, r0, #5
 8001a1e:	f7ff f80f 	bl	8000a40 <_test_assert>
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d1d2      	bne.n	80019cc <rt_test_009_006_execute.lto_priv.0+0x1c>
 8001a26:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8001a28:	69b5      	ldr	r5, [r6, #24]
 8001a2a:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 8001a2e:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8001a30:	b374      	cbz	r4, 8001a90 <rt_test_009_006_execute.lto_priv.0+0xe0>
  ctp->epending &= ~m;
 8001a32:	2300      	movs	r3, #0
 8001a34:	636b      	str	r3, [r5, #52]	; 0x34
 8001a36:	f383 8811 	msr	BASEPRI, r3
 8001a3a:	fab4 f084 	clz	r0, r4
 8001a3e:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 8001a40:	491e      	ldr	r1, [pc, #120]	; (8001abc <rt_test_009_006_execute.lto_priv.0+0x10c>)
 8001a42:	f7fe fffd 	bl	8000a40 <_test_assert>
 8001a46:	4604      	mov	r4, r0
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d1bf      	bne.n	80019cc <rt_test_009_006_execute.lto_priv.0+0x1c>
 8001a4c:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8001a4e:	69b5      	ldr	r5, [r6, #24]
 8001a50:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 8001a54:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a56:	3301      	adds	r3, #1
 8001a58:	d008      	beq.n	8001a6c <rt_test_009_006_execute.lto_priv.0+0xbc>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8001a5e:	2164      	movs	r1, #100	; 0x64
 8001a60:	200b      	movs	r0, #11
    ctp->u.ewmask = events;
 8001a62:	626b      	str	r3, [r5, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8001a64:	f009 fa5c 	bl	800af20 <chSchGoSleepTimeoutS>
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	db20      	blt.n	8001aae <rt_test_009_006_execute.lto_priv.0+0xfe>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	636b      	str	r3, [r5, #52]	; 0x34
 8001a70:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8001a74:	4620      	mov	r0, r4
}
 8001a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(m == 0, "spurious event");
 8001a7a:	4910      	ldr	r1, [pc, #64]	; (8001abc <rt_test_009_006_execute.lto_priv.0+0x10c>)
 8001a7c:	f7fe bfe0 	b.w	8000a40 <_test_assert>
  ctp->epending &= ~m;
 8001a80:	6358      	str	r0, [r3, #52]	; 0x34
 8001a82:	f380 8811 	msr	BASEPRI, r0
 8001a86:	e7ad      	b.n	80019e4 <rt_test_009_006_execute.lto_priv.0+0x34>
  ctp->epending &= ~events;
 8001a88:	6358      	str	r0, [r3, #52]	; 0x34
 8001a8a:	f380 8811 	msr	BASEPRI, r0
 8001a8e:	e7b8      	b.n	8001a02 <rt_test_009_006_execute.lto_priv.0+0x52>
    ctp->u.ewmask = events;
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8001a94:	2164      	movs	r1, #100	; 0x64
 8001a96:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 8001a98:	626b      	str	r3, [r5, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8001a9a:	f009 fa41 	bl	800af20 <chSchGoSleepTimeoutS>
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	db01      	blt.n	8001aa6 <rt_test_009_006_execute.lto_priv.0+0xf6>
    m = ctp->epending & events;
 8001aa2:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001aa4:	e7c5      	b.n	8001a32 <rt_test_009_006_execute.lto_priv.0+0x82>
 8001aa6:	f384 8811 	msr	BASEPRI, r4
 8001aaa:	2001      	movs	r0, #1
 8001aac:	e7c8      	b.n	8001a40 <rt_test_009_006_execute.lto_priv.0+0x90>
 8001aae:	f384 8811 	msr	BASEPRI, r4
 8001ab2:	2401      	movs	r4, #1
 8001ab4:	e7de      	b.n	8001a74 <rt_test_009_006_execute.lto_priv.0+0xc4>
 8001ab6:	bf00      	nop
 8001ab8:	20001cf4 	.word	0x20001cf4
 8001abc:	0800cacc 	.word	0x0800cacc
 8001ac0:	20000c88 	.word	0x20000c88
	...

08001ad0 <rt_test_001_003_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8001ad0:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8001ad2:	2501      	movs	r5, #1
 8001ad4:	4b92      	ldr	r3, [pc, #584]	; (8001d20 <rt_test_001_003_execute.lto_priv.0+0x250>)
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 8001ad6:	4c93      	ldr	r4, [pc, #588]	; (8001d24 <rt_test_001_003_execute.lto_priv.0+0x254>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8001ad8:	4893      	ldr	r0, [pc, #588]	; (8001d28 <rt_test_001_003_execute.lto_priv.0+0x258>)
  test_set_step(1);
 8001ada:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8001adc:	f7ff f918 	bl	8000d10 <test_print>
 8001ae0:	2010      	movs	r0, #16
 8001ae2:	f7ff f815 	bl	8000b10 <test_printn.part.0>
    test_println("");
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f7ff f8f2 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 8001aec:	488f      	ldr	r0, [pc, #572]	; (8001d2c <rt_test_001_003_execute.lto_priv.0+0x25c>)
 8001aee:	f7ff f90f 	bl	8000d10 <test_print>
 8001af2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001af6:	f7ff f80b 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_ST_FREQUENCY);
    test_println("");
 8001afa:	4620      	mov	r0, r4
 8001afc:	f7ff f8e8 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 8001b00:	488b      	ldr	r0, [pc, #556]	; (8001d30 <rt_test_001_003_execute.lto_priv.0+0x260>)
 8001b02:	f7ff f905 	bl	8000d10 <test_print>
 8001b06:	2020      	movs	r0, #32
 8001b08:	f7ff f802 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_INTERVALS_SIZE);
    test_println("");
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f7ff f8df 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 8001b12:	4888      	ldr	r0, [pc, #544]	; (8001d34 <rt_test_001_003_execute.lto_priv.0+0x264>)
 8001b14:	f7ff f8fc 	bl	8000d10 <test_print>
 8001b18:	2020      	movs	r0, #32
 8001b1a:	f7fe fff9 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
    test_println("");
 8001b1e:	4620      	mov	r0, r4
 8001b20:	f7ff f8d6 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8001b24:	4884      	ldr	r0, [pc, #528]	; (8001d38 <rt_test_001_003_execute.lto_priv.0+0x268>)
 8001b26:	f7ff f8f3 	bl	8000d10 <test_print>
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f7fe fff0 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_ST_TIMEDELTA);
    test_println("");
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff f8cd 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 8001b36:	4881      	ldr	r0, [pc, #516]	; (8001d3c <rt_test_001_003_execute.lto_priv.0+0x26c>)
 8001b38:	f7ff f8ea 	bl	8000d10 <test_print>
    test_printn(CH_CFG_TIME_QUANTUM);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f7ff f817 	bl	8000b70 <test_printn>
    test_println("");
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff f8c4 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 8001b48:	487d      	ldr	r0, [pc, #500]	; (8001d40 <rt_test_001_003_execute.lto_priv.0+0x270>)
 8001b4a:	f7ff f8e1 	bl	8000d10 <test_print>
    test_printn(CH_CFG_MEMCORE_SIZE);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff f80e 	bl	8000b70 <test_printn>
    test_println("");
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7ff f8bb 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 8001b5a:	487a      	ldr	r0, [pc, #488]	; (8001d44 <rt_test_001_003_execute.lto_priv.0+0x274>)
 8001b5c:	f7ff f8d8 	bl	8000d10 <test_print>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7ff f805 	bl	8000b70 <test_printn>
    test_println("");
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff f8b2 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 8001b6c:	4876      	ldr	r0, [pc, #472]	; (8001d48 <rt_test_001_003_execute.lto_priv.0+0x278>)
 8001b6e:	f7ff f8cf 	bl	8000d10 <test_print>
 8001b72:	4628      	mov	r0, r5
 8001b74:	f7fe ffcc 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
    test_println("");
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f7ff f8a9 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 8001b7e:	4873      	ldr	r0, [pc, #460]	; (8001d4c <rt_test_001_003_execute.lto_priv.0+0x27c>)
 8001b80:	f7ff f8c6 	bl	8000d10 <test_print>
 8001b84:	4628      	mov	r0, r5
 8001b86:	f7fe ffc3 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_TM);
    test_println("");
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff f8a0 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 8001b90:	486f      	ldr	r0, [pc, #444]	; (8001d50 <rt_test_001_003_execute.lto_priv.0+0x280>)
 8001b92:	f7ff f8bd 	bl	8000d10 <test_print>
 8001b96:	4628      	mov	r0, r5
 8001b98:	f7fe ffba 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_REGISTRY);
    test_println("");
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f7ff f897 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 8001ba2:	486c      	ldr	r0, [pc, #432]	; (8001d54 <rt_test_001_003_execute.lto_priv.0+0x284>)
 8001ba4:	f7ff f8b4 	bl	8000d10 <test_print>
 8001ba8:	4628      	mov	r0, r5
 8001baa:	f7fe ffb1 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_WAITEXIT);
    test_println("");
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff f88e 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 8001bb4:	4868      	ldr	r0, [pc, #416]	; (8001d58 <rt_test_001_003_execute.lto_priv.0+0x288>)
 8001bb6:	f7ff f8ab 	bl	8000d10 <test_print>
 8001bba:	4628      	mov	r0, r5
 8001bbc:	f7fe ffa8 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES);
    test_println("");
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f7ff f885 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRIORITY:     ");
 8001bc6:	4865      	ldr	r0, [pc, #404]	; (8001d5c <rt_test_001_003_execute.lto_priv.0+0x28c>)
 8001bc8:	f7ff f8a2 	bl	8000d10 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7fe ffcf 	bl	8000b70 <test_printn>
    test_println("");
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f7ff f87c 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 8001bd8:	4861      	ldr	r0, [pc, #388]	; (8001d60 <rt_test_001_003_execute.lto_priv.0+0x290>)
 8001bda:	f7ff f899 	bl	8000d10 <test_print>
 8001bde:	4628      	mov	r0, r5
 8001be0:	f7fe ff96 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES);
    test_println("");
 8001be4:	4620      	mov	r0, r4
 8001be6:	f7ff f873 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURSIVE:       ");
 8001bea:	485e      	ldr	r0, [pc, #376]	; (8001d64 <rt_test_001_003_execute.lto_priv.0+0x294>)
 8001bec:	f7ff f890 	bl	8000d10 <test_print>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7fe ffbd 	bl	8000b70 <test_printn>
    test_println("");   
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7ff f86a 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 8001bfc:	485a      	ldr	r0, [pc, #360]	; (8001d68 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8001bfe:	f7ff f887 	bl	8000d10 <test_print>
 8001c02:	4628      	mov	r0, r5
 8001c04:	f7fe ff84 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS);
    test_println("");
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f7ff f861 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEOUT:        ");
 8001c0e:	4857      	ldr	r0, [pc, #348]	; (8001d6c <rt_test_001_003_execute.lto_priv.0+0x29c>)
 8001c10:	f7ff f87e 	bl	8000d10 <test_print>
 8001c14:	4628      	mov	r0, r5
 8001c16:	f7fe ff7b 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
    test_println("");
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7ff f858 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8001c20:	4853      	ldr	r0, [pc, #332]	; (8001d70 <rt_test_001_003_execute.lto_priv.0+0x2a0>)
 8001c22:	f7ff f875 	bl	8000d10 <test_print>
 8001c26:	4628      	mov	r0, r5
 8001c28:	f7fe ff72 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS);
    test_println("");
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7ff f84f 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 8001c32:	4850      	ldr	r0, [pc, #320]	; (8001d74 <rt_test_001_003_execute.lto_priv.0+0x2a4>)
 8001c34:	f7ff f86c 	bl	8000d10 <test_print>
 8001c38:	4628      	mov	r0, r5
 8001c3a:	f7fe ff69 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
    test_println("");
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff f846 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 8001c44:	484c      	ldr	r0, [pc, #304]	; (8001d78 <rt_test_001_003_execute.lto_priv.0+0x2a8>)
 8001c46:	f7ff f863 	bl	8000d10 <test_print>
 8001c4a:	4628      	mov	r0, r5
 8001c4c:	f7fe ff60 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES);
    test_println("");
 8001c50:	4620      	mov	r0, r4
 8001c52:	f7ff f83d 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRIORITY:       ");
 8001c56:	4849      	ldr	r0, [pc, #292]	; (8001d7c <rt_test_001_003_execute.lto_priv.0+0x2ac>)
 8001c58:	f7ff f85a 	bl	8000d10 <test_print>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7fe ff87 	bl	8000b70 <test_printn>
    test_println("");
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7ff f834 	bl	8000cd0 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8001c68:	4845      	ldr	r0, [pc, #276]	; (8001d80 <rt_test_001_003_execute.lto_priv.0+0x2b0>)
 8001c6a:	f7ff f851 	bl	8000d10 <test_print>
 8001c6e:	4628      	mov	r0, r5
 8001c70:	f7fe ff4e 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_CFG_USE_DYNAMIC);
    test_println("");
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff f82b 	bl	8000cd0 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8001c7a:	4842      	ldr	r0, [pc, #264]	; (8001d84 <rt_test_001_003_execute.lto_priv.0+0x2b4>)
 8001c7c:	f7ff f848 	bl	8000d10 <test_print>
    test_printn(CH_DBG_STATISTICS);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7fe ff75 	bl	8000b70 <test_printn>
    test_println("");
 8001c86:	4620      	mov	r0, r4
 8001c88:	f7ff f822 	bl	8000cd0 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8001c8c:	483e      	ldr	r0, [pc, #248]	; (8001d88 <rt_test_001_003_execute.lto_priv.0+0x2b8>)
 8001c8e:	f7ff f83f 	bl	8000d10 <test_print>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7fe ff6c 	bl	8000b70 <test_printn>
    test_println("");
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f7ff f819 	bl	8000cd0 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8001c9e:	483b      	ldr	r0, [pc, #236]	; (8001d8c <rt_test_001_003_execute.lto_priv.0+0x2bc>)
 8001ca0:	f7ff f836 	bl	8000d10 <test_print>
    test_printn(CH_DBG_ENABLE_CHECKS);
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7fe ff63 	bl	8000b70 <test_printn>
    test_println("");
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff f810 	bl	8000cd0 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8001cb0:	4837      	ldr	r0, [pc, #220]	; (8001d90 <rt_test_001_003_execute.lto_priv.0+0x2c0>)
 8001cb2:	f7ff f82d 	bl	8000d10 <test_print>
    test_printn(CH_DBG_ENABLE_ASSERTS);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f7fe ff5a 	bl	8000b70 <test_printn>
    test_println("");
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f7ff f807 	bl	8000cd0 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 8001cc2:	4834      	ldr	r0, [pc, #208]	; (8001d94 <rt_test_001_003_execute.lto_priv.0+0x2c4>)
 8001cc4:	f7ff f824 	bl	8000d10 <test_print>
 8001cc8:	20ff      	movs	r0, #255	; 0xff
 8001cca:	f7fe ff21 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_MASK);
    test_println("");
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f7fe fffe 	bl	8000cd0 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 8001cd4:	4830      	ldr	r0, [pc, #192]	; (8001d98 <rt_test_001_003_execute.lto_priv.0+0x2c8>)
 8001cd6:	f7ff f81b 	bl	8000d10 <test_print>
 8001cda:	2080      	movs	r0, #128	; 0x80
 8001cdc:	f7fe ff18 	bl	8000b10 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
    test_println("");
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f7fe fff5 	bl	8000cd0 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 8001ce6:	482d      	ldr	r0, [pc, #180]	; (8001d9c <rt_test_001_003_execute.lto_priv.0+0x2cc>)
 8001ce8:	f7ff f812 	bl	8000d10 <test_print>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7fe ff3f 	bl	8000b70 <test_printn>
    test_println("");
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f7fe ffec 	bl	8000cd0 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8001cf8:	4829      	ldr	r0, [pc, #164]	; (8001da0 <rt_test_001_003_execute.lto_priv.0+0x2d0>)
 8001cfa:	f7ff f809 	bl	8000d10 <test_print>
    test_printn(CH_DBG_FILL_THREADS);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7fe ff36 	bl	8000b70 <test_printn>
    test_println("");
 8001d04:	4620      	mov	r0, r4
 8001d06:	f7fe ffe3 	bl	8000cd0 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 8001d0a:	4826      	ldr	r0, [pc, #152]	; (8001da4 <rt_test_001_003_execute.lto_priv.0+0x2d4>)
 8001d0c:	f7ff f800 	bl	8000d10 <test_print>
    test_printn(CH_DBG_THREADS_PROFILING);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7fe ff2d 	bl	8000b70 <test_printn>
    test_println("");
 8001d16:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 8001d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001d1c:	f7fe bfd8 	b.w	8000cd0 <test_println>
 8001d20:	20001cf4 	.word	0x20001cf4
 8001d24:	0800e33c 	.word	0x0800e33c
 8001d28:	0800cadc 	.word	0x0800cadc
 8001d2c:	0800cb08 	.word	0x0800cb08
 8001d30:	0800cb34 	.word	0x0800cb34
 8001d34:	0800cb60 	.word	0x0800cb60
 8001d38:	0800cb8c 	.word	0x0800cb8c
 8001d3c:	0800cbb8 	.word	0x0800cbb8
 8001d40:	0800cbe4 	.word	0x0800cbe4
 8001d44:	0800cc10 	.word	0x0800cc10
 8001d48:	0800cc3c 	.word	0x0800cc3c
 8001d4c:	0800cc68 	.word	0x0800cc68
 8001d50:	0800cc94 	.word	0x0800cc94
 8001d54:	0800ccc0 	.word	0x0800ccc0
 8001d58:	0800ccec 	.word	0x0800ccec
 8001d5c:	0800cd18 	.word	0x0800cd18
 8001d60:	0800cd44 	.word	0x0800cd44
 8001d64:	0800cd70 	.word	0x0800cd70
 8001d68:	0800cd9c 	.word	0x0800cd9c
 8001d6c:	0800cdc8 	.word	0x0800cdc8
 8001d70:	0800cdf4 	.word	0x0800cdf4
 8001d74:	0800ce20 	.word	0x0800ce20
 8001d78:	0800ce4c 	.word	0x0800ce4c
 8001d7c:	0800ce78 	.word	0x0800ce78
 8001d80:	0800cea4 	.word	0x0800cea4
 8001d84:	0800ced0 	.word	0x0800ced0
 8001d88:	0800cefc 	.word	0x0800cefc
 8001d8c:	0800cf28 	.word	0x0800cf28
 8001d90:	0800cf54 	.word	0x0800cf54
 8001d94:	0800cf80 	.word	0x0800cf80
 8001d98:	0800cfac 	.word	0x0800cfac
 8001d9c:	0800cfd8 	.word	0x0800cfd8
 8001da0:	0800d004 	.word	0x0800d004
 8001da4:	0800d030 	.word	0x0800d030
	...

08001db0 <rt_test_001_002_execute.lto_priv.0>:
static void rt_test_001_002_execute(void) {
 8001db0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8001db2:	2501      	movs	r5, #1
 8001db4:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <rt_test_001_002_execute.lto_priv.0+0x68>)
    test_println("--- Product:                            ChibiOS/RT");
 8001db6:	4819      	ldr	r0, [pc, #100]	; (8001e1c <rt_test_001_002_execute.lto_priv.0+0x6c>)
  test_set_step(1);
 8001db8:	601d      	str	r5, [r3, #0]
    test_println("");
 8001dba:	4c19      	ldr	r4, [pc, #100]	; (8001e20 <rt_test_001_002_execute.lto_priv.0+0x70>)
    test_println("--- Product:                            ChibiOS/RT");
 8001dbc:	f7fe ff88 	bl	8000cd0 <test_println>
    test_print("--- Stable Flag:                        ");
 8001dc0:	4818      	ldr	r0, [pc, #96]	; (8001e24 <rt_test_001_002_execute.lto_priv.0+0x74>)
 8001dc2:	f7fe ffa5 	bl	8000d10 <test_print>
 8001dc6:	4628      	mov	r0, r5
 8001dc8:	f7fe fea2 	bl	8000b10 <test_printn.part.0>
    test_println("");
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7fe ff7f 	bl	8000cd0 <test_println>
    test_print("--- Version String:                     ");
 8001dd2:	4815      	ldr	r0, [pc, #84]	; (8001e28 <rt_test_001_002_execute.lto_priv.0+0x78>)
 8001dd4:	f7fe ff9c 	bl	8000d10 <test_print>
    test_println(CH_KERNEL_VERSION);
 8001dd8:	4814      	ldr	r0, [pc, #80]	; (8001e2c <rt_test_001_002_execute.lto_priv.0+0x7c>)
 8001dda:	f7fe ff79 	bl	8000cd0 <test_println>
    test_print("--- Major Number:                       ");
 8001dde:	4814      	ldr	r0, [pc, #80]	; (8001e30 <rt_test_001_002_execute.lto_priv.0+0x80>)
 8001de0:	f7fe ff96 	bl	8000d10 <test_print>
 8001de4:	2006      	movs	r0, #6
 8001de6:	f7fe fe93 	bl	8000b10 <test_printn.part.0>
    test_println("");
 8001dea:	4620      	mov	r0, r4
 8001dec:	f7fe ff70 	bl	8000cd0 <test_println>
    test_print("--- Minor Number:                       ");
 8001df0:	4810      	ldr	r0, [pc, #64]	; (8001e34 <rt_test_001_002_execute.lto_priv.0+0x84>)
 8001df2:	f7fe ff8d 	bl	8000d10 <test_print>
 8001df6:	4628      	mov	r0, r5
 8001df8:	f7fe fe8a 	bl	8000b10 <test_printn.part.0>
    test_println("");
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7fe ff67 	bl	8000cd0 <test_println>
    test_print("--- Patch Number:                       ");
 8001e02:	480d      	ldr	r0, [pc, #52]	; (8001e38 <rt_test_001_002_execute.lto_priv.0+0x88>)
 8001e04:	f7fe ff84 	bl	8000d10 <test_print>
 8001e08:	4628      	mov	r0, r5
 8001e0a:	f7fe fe81 	bl	8000b10 <test_printn.part.0>
    test_println("");
 8001e0e:	4620      	mov	r0, r4
}
 8001e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001e14:	f7fe bf5c 	b.w	8000cd0 <test_println>
 8001e18:	20001cf4 	.word	0x20001cf4
 8001e1c:	0800d05c 	.word	0x0800d05c
 8001e20:	0800e33c 	.word	0x0800e33c
 8001e24:	0800c950 	.word	0x0800c950
 8001e28:	0800c97c 	.word	0x0800c97c
 8001e2c:	0800d090 	.word	0x0800d090
 8001e30:	0800c9b0 	.word	0x0800c9b0
 8001e34:	0800c9dc 	.word	0x0800c9dc
 8001e38:	0800ca08 	.word	0x0800ca08
 8001e3c:	00000000 	.word	0x00000000

08001e40 <rt_test_001_001_execute.lto_priv.0>:
  test_set_step(1);
 8001e40:	2201      	movs	r2, #1
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <rt_test_001_001_execute.lto_priv.0+0x74>)
static void rt_test_001_001_execute(void) {
 8001e44:	b510      	push	{r4, lr}
    test_print("--- Architecture:                       ");
 8001e46:	481c      	ldr	r0, [pc, #112]	; (8001eb8 <rt_test_001_001_execute.lto_priv.0+0x78>)
  test_set_step(1);
 8001e48:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 8001e4a:	f7fe ff61 	bl	8000d10 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 8001e4e:	481b      	ldr	r0, [pc, #108]	; (8001ebc <rt_test_001_001_execute.lto_priv.0+0x7c>)
 8001e50:	f7fe ff3e 	bl	8000cd0 <test_println>
    test_print("--- Core Variant:                       ");
 8001e54:	481a      	ldr	r0, [pc, #104]	; (8001ec0 <rt_test_001_001_execute.lto_priv.0+0x80>)
 8001e56:	f7fe ff5b 	bl	8000d10 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 8001e5a:	481a      	ldr	r0, [pc, #104]	; (8001ec4 <rt_test_001_001_execute.lto_priv.0+0x84>)
 8001e5c:	f7fe ff38 	bl	8000cd0 <test_println>
    test_print("--- Compiler:                           ");
 8001e60:	4819      	ldr	r0, [pc, #100]	; (8001ec8 <rt_test_001_001_execute.lto_priv.0+0x88>)
 8001e62:	f7fe ff55 	bl	8000d10 <test_print>
    test_println(PORT_COMPILER_NAME);
 8001e66:	4819      	ldr	r0, [pc, #100]	; (8001ecc <rt_test_001_001_execute.lto_priv.0+0x8c>)
 8001e68:	f7fe ff32 	bl	8000cd0 <test_println>
    test_print("--- Port Info:                          ");
 8001e6c:	4818      	ldr	r0, [pc, #96]	; (8001ed0 <rt_test_001_001_execute.lto_priv.0+0x90>)
 8001e6e:	f7fe ff4f 	bl	8000d10 <test_print>
    test_println(PORT_INFO);
 8001e72:	4818      	ldr	r0, [pc, #96]	; (8001ed4 <rt_test_001_001_execute.lto_priv.0+0x94>)
    test_println("");
 8001e74:	4c18      	ldr	r4, [pc, #96]	; (8001ed8 <rt_test_001_001_execute.lto_priv.0+0x98>)
    test_println(PORT_INFO);
 8001e76:	f7fe ff2b 	bl	8000cd0 <test_println>
    test_print("--- Natural alignment:                  ");
 8001e7a:	4818      	ldr	r0, [pc, #96]	; (8001edc <rt_test_001_001_execute.lto_priv.0+0x9c>)
 8001e7c:	f7fe ff48 	bl	8000d10 <test_print>
 8001e80:	2004      	movs	r0, #4
 8001e82:	f7fe fe45 	bl	8000b10 <test_printn.part.0>
    test_println("");
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7fe ff22 	bl	8000cd0 <test_println>
    test_print("--- Stack alignment:                    ");
 8001e8c:	4814      	ldr	r0, [pc, #80]	; (8001ee0 <rt_test_001_001_execute.lto_priv.0+0xa0>)
 8001e8e:	f7fe ff3f 	bl	8000d10 <test_print>
 8001e92:	2008      	movs	r0, #8
 8001e94:	f7fe fe3c 	bl	8000b10 <test_printn.part.0>
    test_println("");
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7fe ff19 	bl	8000cd0 <test_println>
    test_print("--- Working area alignment:             ");
 8001e9e:	4811      	ldr	r0, [pc, #68]	; (8001ee4 <rt_test_001_001_execute.lto_priv.0+0xa4>)
 8001ea0:	f7fe ff36 	bl	8000d10 <test_print>
 8001ea4:	2008      	movs	r0, #8
 8001ea6:	f7fe fe33 	bl	8000b10 <test_printn.part.0>
    test_println("");
 8001eaa:	4620      	mov	r0, r4
}
 8001eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 8001eb0:	f7fe bf0e 	b.w	8000cd0 <test_println>
 8001eb4:	20001cf4 	.word	0x20001cf4
 8001eb8:	0800d098 	.word	0x0800d098
 8001ebc:	0800d0c4 	.word	0x0800d0c4
 8001ec0:	0800d0cc 	.word	0x0800d0cc
 8001ec4:	0800d0f8 	.word	0x0800d0f8
 8001ec8:	0800d104 	.word	0x0800d104
 8001ecc:	0800d130 	.word	0x0800d130
 8001ed0:	0800d170 	.word	0x0800d170
 8001ed4:	0800d19c 	.word	0x0800d19c
 8001ed8:	0800e33c 	.word	0x0800e33c
 8001edc:	0800d1b4 	.word	0x0800d1b4
 8001ee0:	0800d1e0 	.word	0x0800d1e0
 8001ee4:	0800d20c 	.word	0x0800d20c
	...

08001ef0 <oslib_test_001_001_execute.lto_priv.0>:
 8001ef0:	f7ff bfa6 	b.w	8001e40 <rt_test_001_001_execute.lto_priv.0>
	...

08001f00 <chPipeWriteTimeout.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8001f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8001f04:	4d38      	ldr	r5, [pc, #224]	; (8001fe8 <chPipeWriteTimeout.constprop.0+0xe8>)
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8001f06:	b083      	sub	sp, #12
  if (pp->reset) {
 8001f08:	7d2b      	ldrb	r3, [r5, #20]
 8001f0a:	b11b      	cbz	r3, 8001f14 <chPipeWriteTimeout.constprop.0+0x14>
    return (size_t)0;
 8001f0c:	2000      	movs	r0, #0
  }

  PW_UNLOCK(pp);

  return max - n;
}
 8001f0e:	b003      	add	sp, #12
 8001f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f14:	4681      	mov	r9, r0
  PW_LOCK(pp);
 8001f16:	f105 0030 	add.w	r0, r5, #48	; 0x30
    *trp = NULL;
 8001f1a:	469a      	mov	sl, r3
 8001f1c:	464e      	mov	r6, r9
 8001f1e:	f008 fa6f 	bl	800a400 <chMtxLock>
 8001f22:	4f32      	ldr	r7, [pc, #200]	; (8001fec <chPipeWriteTimeout.constprop.0+0xec>)
  PC_LOCK(pp);
 8001f24:	f105 0820 	add.w	r8, r5, #32
 8001f28:	f8cd 9004 	str.w	r9, [sp, #4]
 8001f2c:	e020      	b.n	8001f70 <chPipeWriteTimeout.constprop.0+0x70>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8001f2e:	465a      	mov	r2, fp
 8001f30:	4639      	mov	r1, r7
 8001f32:	f7fe f99b 	bl	800026c <memcpy>
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 8001f36:	464a      	mov	r2, r9
 8001f38:	6828      	ldr	r0, [r5, #0]
 8001f3a:	eb07 010b 	add.w	r1, r7, fp
 8001f3e:	f7fe f995 	bl	800026c <memcpy>
    pp->wrptr = pp->buffer + s2;
 8001f42:	682a      	ldr	r2, [r5, #0]
  PC_UNLOCK(pp);
 8001f44:	4640      	mov	r0, r8
    pp->wrptr = pp->buffer + s2;
 8001f46:	eb02 0309 	add.w	r3, r2, r9
 8001f4a:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 8001f4c:	f008 f9c8 	bl	800a2e0 <chMtxUnlock>
 8001f50:	2320      	movs	r3, #32
      n  -= done;
 8001f52:	1b36      	subs	r6, r6, r4
      bp += done;
 8001f54:	4427      	add	r7, r4
 8001f56:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001f5a:	69e8      	ldr	r0, [r5, #28]
 8001f5c:	b120      	cbz	r0, 8001f68 <chPipeWriteTimeout.constprop.0+0x68>
    chSchWakeupS(tp, msg);
 8001f5e:	2100      	movs	r1, #0
    *trp = NULL;
 8001f60:	f8c5 a01c 	str.w	sl, [r5, #28]
    chSchWakeupS(tp, msg);
 8001f64:	f008 f824 	bl	8009fb0 <chSchWakeupS>
 8001f68:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8001f6c:	2e00      	cmp	r6, #0
 8001f6e:	d037      	beq.n	8001fe0 <chPipeWriteTimeout.constprop.0+0xe0>
  PC_LOCK(pp);
 8001f70:	4640      	mov	r0, r8
 8001f72:	f008 fa45 	bl	800a400 <chMtxLock>
 */
static inline size_t chPipeGetSize(const pipe_t *pp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(pp->top - pp->buffer);
 8001f76:	e9d5 4200 	ldrd	r4, r2, [r5]
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8001f7a:	692b      	ldr	r3, [r5, #16]
  return (size_t)(pp->top - pp->buffer);
 8001f7c:	1b14      	subs	r4, r2, r4
  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8001f7e:	1ae4      	subs	r4, r4, r3
 8001f80:	42b4      	cmp	r4, r6
 8001f82:	bf28      	it	cs
 8001f84:	4634      	movcs	r4, r6
  s1 = (size_t)(pp->top - pp->wrptr);
 8001f86:	68a8      	ldr	r0, [r5, #8]
  pp->cnt += n;
 8001f88:	4423      	add	r3, r4
  s1 = (size_t)(pp->top - pp->wrptr);
 8001f8a:	eba2 0b00 	sub.w	fp, r2, r0
  if (n < s1) {
 8001f8e:	455c      	cmp	r4, fp
  pp->cnt += n;
 8001f90:	612b      	str	r3, [r5, #16]
  if (n < s1) {
 8001f92:	d31d      	bcc.n	8001fd0 <chPipeWriteTimeout.constprop.0+0xd0>
    s2 = n - s1;
 8001f94:	eba4 090b 	sub.w	r9, r4, fp
  else if (n > s1) {
 8001f98:	d8c9      	bhi.n	8001f2e <chPipeWriteTimeout.constprop.0+0x2e>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	4639      	mov	r1, r7
 8001f9e:	f7fe f965 	bl	800026c <memcpy>
    pp->wrptr = pp->buffer;
 8001fa2:	682b      	ldr	r3, [r5, #0]
 8001fa4:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 8001fa6:	4640      	mov	r0, r8
 8001fa8:	f008 f99a 	bl	800a2e0 <chMtxUnlock>
    if (done == (size_t)0) {
 8001fac:	2c00      	cmp	r4, #0
 8001fae:	d1cf      	bne.n	8001f50 <chPipeWriteTimeout.constprop.0+0x50>
 8001fb0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	f383 8811 	msr	BASEPRI, r3
 8001fba:	f384 8811 	msr	BASEPRI, r4
 8001fbe:	eba9 0906 	sub.w	r9, r9, r6
  PW_UNLOCK(pp);
 8001fc2:	480b      	ldr	r0, [pc, #44]	; (8001ff0 <chPipeWriteTimeout.constprop.0+0xf0>)
 8001fc4:	f008 f98c 	bl	800a2e0 <chMtxUnlock>
 8001fc8:	4648      	mov	r0, r9
}
 8001fca:	b003      	add	sp, #12
 8001fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	4639      	mov	r1, r7
 8001fd4:	f7fe f94a 	bl	800026c <memcpy>
    pp->wrptr += n;
 8001fd8:	68ab      	ldr	r3, [r5, #8]
 8001fda:	4423      	add	r3, r4
 8001fdc:	60ab      	str	r3, [r5, #8]
 8001fde:	e7e2      	b.n	8001fa6 <chPipeWriteTimeout.constprop.0+0xa6>
 8001fe0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8001fe4:	e7ed      	b.n	8001fc2 <chPipeWriteTimeout.constprop.0+0xc2>
 8001fe6:	bf00      	nop
 8001fe8:	200008c0 	.word	0x200008c0
 8001fec:	0800df60 	.word	0x0800df60
 8001ff0:	200008f0 	.word	0x200008f0
	...

08002000 <chPipeReadTimeout.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 8002000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8002004:	4c36      	ldr	r4, [pc, #216]	; (80020e0 <chPipeReadTimeout.constprop.0+0xe0>)
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 8002006:	b083      	sub	sp, #12
  if (pp->reset) {
 8002008:	7d23      	ldrb	r3, [r4, #20]
 800200a:	b11b      	cbz	r3, 8002014 <chPipeReadTimeout.constprop.0+0x14>
    return (size_t)0;
 800200c:	2000      	movs	r0, #0
  }

  PR_UNLOCK(pp);

  return max - n;
}
 800200e:	b003      	add	sp, #12
 8002010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002014:	4689      	mov	r9, r1
 8002016:	4607      	mov	r7, r0
  PR_LOCK(pp);
 8002018:	f104 0040 	add.w	r0, r4, #64	; 0x40
    *trp = NULL;
 800201c:	469a      	mov	sl, r3
 800201e:	464e      	mov	r6, r9
 8002020:	f008 f9ee 	bl	800a400 <chMtxLock>
  PC_LOCK(pp);
 8002024:	f104 0820 	add.w	r8, r4, #32
 8002028:	f8cd 9004 	str.w	r9, [sp, #4]
 800202c:	e01f      	b.n	800206e <chPipeReadTimeout.constprop.0+0x6e>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800202e:	465a      	mov	r2, fp
 8002030:	4638      	mov	r0, r7
 8002032:	f7fe f91b 	bl	800026c <memcpy>
    memcpy((void *)bp, (void *)pp->buffer, s2);
 8002036:	464a      	mov	r2, r9
 8002038:	6821      	ldr	r1, [r4, #0]
 800203a:	eb07 000b 	add.w	r0, r7, fp
 800203e:	f7fe f915 	bl	800026c <memcpy>
    pp->rdptr = pp->buffer + s2;
 8002042:	6822      	ldr	r2, [r4, #0]
  PC_UNLOCK(pp);
 8002044:	4640      	mov	r0, r8
    pp->rdptr = pp->buffer + s2;
 8002046:	eb02 0309 	add.w	r3, r2, r9
 800204a:	60e3      	str	r3, [r4, #12]
  PC_UNLOCK(pp);
 800204c:	f008 f948 	bl	800a2e0 <chMtxUnlock>
 8002050:	2320      	movs	r3, #32
      n  -= done;
 8002052:	1b76      	subs	r6, r6, r5
      bp += done;
 8002054:	442f      	add	r7, r5
 8002056:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 800205a:	69a0      	ldr	r0, [r4, #24]
 800205c:	b120      	cbz	r0, 8002068 <chPipeReadTimeout.constprop.0+0x68>
    chSchWakeupS(tp, msg);
 800205e:	2100      	movs	r1, #0
    *trp = NULL;
 8002060:	f8c4 a018 	str.w	sl, [r4, #24]
    chSchWakeupS(tp, msg);
 8002064:	f007 ffa4 	bl	8009fb0 <chSchWakeupS>
 8002068:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 800206c:	b3ae      	cbz	r6, 80020da <chPipeReadTimeout.constprop.0+0xda>
  PC_LOCK(pp);
 800206e:	4640      	mov	r0, r8
 8002070:	f008 f9c6 	bl	800a400 <chMtxLock>
  s1 = (size_t)(pp->top - pp->rdptr);
 8002074:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 8002078:	42b3      	cmp	r3, r6
 800207a:	461d      	mov	r5, r3
 800207c:	bf28      	it	cs
 800207e:	4635      	movcs	r5, r6
 8002080:	6862      	ldr	r2, [r4, #4]
  pp->cnt -= n;
 8002082:	1b5b      	subs	r3, r3, r5
  s1 = (size_t)(pp->top - pp->rdptr);
 8002084:	eba2 0b01 	sub.w	fp, r2, r1
  if (n < s1) {
 8002088:	455d      	cmp	r5, fp
  pp->cnt -= n;
 800208a:	6123      	str	r3, [r4, #16]
  if (n < s1) {
 800208c:	d31d      	bcc.n	80020ca <chPipeReadTimeout.constprop.0+0xca>
    s2 = n - s1;
 800208e:	eba5 090b 	sub.w	r9, r5, fp
  else if (n > s1) {
 8002092:	d8cc      	bhi.n	800202e <chPipeReadTimeout.constprop.0+0x2e>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8002094:	462a      	mov	r2, r5
 8002096:	4638      	mov	r0, r7
 8002098:	f7fe f8e8 	bl	800026c <memcpy>
    pp->rdptr = pp->buffer;
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	60e3      	str	r3, [r4, #12]
  PC_UNLOCK(pp);
 80020a0:	4640      	mov	r0, r8
 80020a2:	f008 f91d 	bl	800a2e0 <chMtxUnlock>
    if (done == (size_t)0) {
 80020a6:	2d00      	cmp	r5, #0
 80020a8:	d1d2      	bne.n	8002050 <chPipeReadTimeout.constprop.0+0x50>
 80020aa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80020ae:	2320      	movs	r3, #32
 80020b0:	f383 8811 	msr	BASEPRI, r3
 80020b4:	f385 8811 	msr	BASEPRI, r5
 80020b8:	eba9 0906 	sub.w	r9, r9, r6
  PR_UNLOCK(pp);
 80020bc:	4809      	ldr	r0, [pc, #36]	; (80020e4 <chPipeReadTimeout.constprop.0+0xe4>)
 80020be:	f008 f90f 	bl	800a2e0 <chMtxUnlock>
 80020c2:	4648      	mov	r0, r9
}
 80020c4:	b003      	add	sp, #12
 80020c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)pp->rdptr, n);
 80020ca:	462a      	mov	r2, r5
 80020cc:	4638      	mov	r0, r7
 80020ce:	f7fe f8cd 	bl	800026c <memcpy>
    pp->rdptr += n;
 80020d2:	68e3      	ldr	r3, [r4, #12]
 80020d4:	442b      	add	r3, r5
 80020d6:	60e3      	str	r3, [r4, #12]
 80020d8:	e7e2      	b.n	80020a0 <chPipeReadTimeout.constprop.0+0xa0>
 80020da:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80020de:	e7ed      	b.n	80020bc <chPipeReadTimeout.constprop.0+0xbc>
 80020e0:	200008c0 	.word	0x200008c0
 80020e4:	20000900 	.word	0x20000900
	...

080020f0 <oslib_test_003_002_execute.lto_priv.0>:

static void oslib_test_003_002_execute(void) {

  /* [3.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 80020f0:	2301      	movs	r3, #1
static void oslib_test_003_002_execute(void) {
 80020f2:	b530      	push	{r4, r5, lr}
  test_set_step(1);
 80020f4:	4d21      	ldr	r5, [pc, #132]	; (800217c <oslib_test_003_002_execute.lto_priv.0+0x8c>)
static void oslib_test_003_002_execute(void) {
 80020f6:	b085      	sub	sp, #20
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80020f8:	2110      	movs	r1, #16
 80020fa:	4668      	mov	r0, sp
  test_set_step(1);
 80020fc:	602b      	str	r3, [r5, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80020fe:	f7ff ff7f 	bl	8002000 <chPipeReadTimeout.constprop.0>
    test_assert(n == 0, "wrong size");
 8002102:	fab0 f080 	clz	r0, r0
 8002106:	491e      	ldr	r1, [pc, #120]	; (8002180 <oslib_test_003_002_execute.lto_priv.0+0x90>)
 8002108:	0940      	lsrs	r0, r0, #5
 800210a:	f7fe fc99 	bl	8000a40 <_test_assert>
 800210e:	b940      	cbnz	r0, 8002122 <oslib_test_003_002_execute.lto_priv.0+0x32>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8002110:	4c1c      	ldr	r4, [pc, #112]	; (8002184 <oslib_test_003_002_execute.lto_priv.0+0x94>)
 8002112:	6822      	ldr	r2, [r4, #0]
 8002114:	68e3      	ldr	r3, [r4, #12]
 8002116:	4293      	cmp	r3, r2
 8002118:	d01d      	beq.n	8002156 <oslib_test_003_002_execute.lto_priv.0+0x66>
 800211a:	491b      	ldr	r1, [pc, #108]	; (8002188 <oslib_test_003_002_execute.lto_priv.0+0x98>)
 800211c:	f7fe fc90 	bl	8000a40 <_test_assert>
 8002120:	b108      	cbz	r0, 8002126 <oslib_test_003_002_execute.lto_priv.0+0x36>
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
  test_end_step(2);
}
 8002122:	b005      	add	sp, #20
 8002124:	bd30      	pop	{r4, r5, pc}
  test_set_step(2);
 8002126:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8002128:	2010      	movs	r0, #16
  test_set_step(2);
 800212a:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800212c:	f7ff fee8 	bl	8001f00 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE / 2, "wrong size");
 8002130:	f1a0 0008 	sub.w	r0, r0, #8
 8002134:	fab0 f080 	clz	r0, r0
 8002138:	4911      	ldr	r1, [pc, #68]	; (8002180 <oslib_test_003_002_execute.lto_priv.0+0x90>)
 800213a:	0940      	lsrs	r0, r0, #5
 800213c:	f7fe fc80 	bl	8000a40 <_test_assert>
 8002140:	2800      	cmp	r0, #0
 8002142:	d1ee      	bne.n	8002122 <oslib_test_003_002_execute.lto_priv.0+0x32>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8002144:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8002148:	4293      	cmp	r3, r2
 800214a:	d00c      	beq.n	8002166 <oslib_test_003_002_execute.lto_priv.0+0x76>
 800214c:	490e      	ldr	r1, [pc, #56]	; (8002188 <oslib_test_003_002_execute.lto_priv.0+0x98>)
 800214e:	f7fe fc77 	bl	8000a40 <_test_assert>
}
 8002152:	b005      	add	sp, #20
 8002154:	bd30      	pop	{r4, r5, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8002156:	68a2      	ldr	r2, [r4, #8]
 8002158:	4293      	cmp	r3, r2
 800215a:	d1de      	bne.n	800211a <oslib_test_003_002_execute.lto_priv.0+0x2a>
 800215c:	6920      	ldr	r0, [r4, #16]
 800215e:	fab0 f080 	clz	r0, r0
 8002162:	0940      	lsrs	r0, r0, #5
 8002164:	e7d9      	b.n	800211a <oslib_test_003_002_execute.lto_priv.0+0x2a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8002166:	6822      	ldr	r2, [r4, #0]
 8002168:	4293      	cmp	r3, r2
 800216a:	d1ef      	bne.n	800214c <oslib_test_003_002_execute.lto_priv.0+0x5c>
 800216c:	6920      	ldr	r0, [r4, #16]
 800216e:	f1a0 0008 	sub.w	r0, r0, #8
 8002172:	fab0 f080 	clz	r0, r0
 8002176:	0940      	lsrs	r0, r0, #5
 8002178:	e7e8      	b.n	800214c <oslib_test_003_002_execute.lto_priv.0+0x5c>
 800217a:	bf00      	nop
 800217c:	20001cf4 	.word	0x20001cf4
 8002180:	0800d238 	.word	0x0800d238
 8002184:	200008c0 	.word	0x200008c0
 8002188:	0800d244 	.word	0x0800d244
 800218c:	00000000 	.word	0x00000000

08002190 <chCacheGetObject.constprop.0>:
 * @param[in] key       object identifier within the group
 * @return              The pointer to the retrieved object.
 *
 * @api
 */
oc_object_t *chCacheGetObject(objects_cache_t *ocp,
 8002190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002194:	2320      	movs	r3, #32
 8002196:	4605      	mov	r5, r0
 8002198:	f383 8811 	msr	BASEPRI, r3

  /* Critical section enter, the hash check operation is fast.*/
  chSysLock();

  /* Checking the cache for a hit.*/
  objp = hash_get_s(ocp, group, key);
 800219c:	4e3d      	ldr	r6, [pc, #244]	; (8002294 <chCacheGetObject.constprop.0+0x104>)
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 800219e:	e9d6 3200 	ldrd	r3, r2, [r6]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	4003      	ands	r3, r0
  objp = hhp->hash_next;
 80021a6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 80021aa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  while (objp != (oc_object_t *)hhp) {
 80021ae:	42a2      	cmp	r2, r4
 80021b0:	d103      	bne.n	80021ba <chCacheGetObject.constprop.0+0x2a>
 80021b2:	e01b      	b.n	80021ec <chCacheGetObject.constprop.0+0x5c>
    objp = objp->hash_next;
 80021b4:	6824      	ldr	r4, [r4, #0]
  while (objp != (oc_object_t *)hhp) {
 80021b6:	42a2      	cmp	r2, r4
 80021b8:	d018      	beq.n	80021ec <chCacheGetObject.constprop.0+0x5c>
    if ((objp->obj_key == key) && (objp->obj_group == group)) {
 80021ba:	6963      	ldr	r3, [r4, #20]
 80021bc:	429d      	cmp	r5, r3
 80021be:	d1f9      	bne.n	80021b4 <chCacheGetObject.constprop.0+0x24>
 80021c0:	6923      	ldr	r3, [r4, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f6      	bne.n	80021b4 <chCacheGetObject.constprop.0+0x24>
    chDbgAssert((objp->obj_flags & OC_FLAG_INHASH) == OC_FLAG_INHASH,
                "not in hash");

    /* Cache hit, checking if the buffer is owned by some
       other thread.*/
    if (chSemGetCounterI(&objp->obj_sem) > (cnt_t)0) {
 80021c6:	6a23      	ldr	r3, [r4, #32]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	dd38      	ble.n	800223e <chCacheGetObject.constprop.0+0xae>

      chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == OC_FLAG_INLRU,
                  "not in LRU");

      /* Removing the object from LRU, now it is "owned".*/
      LRU_REMOVE(objp);
 80021cc:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
      objp->obj_flags &= ~OC_FLAG_INLRU;
 80021d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt--;
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f022 0201 	bic.w	r2, r2, #1
      LRU_REMOVE(objp);
 80021d8:	6081      	str	r1, [r0, #8]
 80021da:	60c8      	str	r0, [r1, #12]
      objp->obj_flags &= ~OC_FLAG_INLRU;
 80021dc:	e9c4 3208 	strd	r3, r2, [r4, #32]
 80021e0:	2300      	movs	r3, #0
 80021e2:	f383 8811 	msr	BASEPRI, r3

  /* Out of critical section and returning the object.*/
  chSysUnlock();

  return objp;
}
 80021e6:	4620      	mov	r0, r4
 80021e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021ec:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002298 <chCacheGetObject.constprop.0+0x108>
 80021f0:	2700      	movs	r7, #0
    (void) ocp->writef(ocp, objp, true);
 80021f2:	f1a8 0930 	sub.w	r9, r8, #48	; 0x30
 80021f6:	e019      	b.n	800222c <chCacheGetObject.constprop.0+0x9c>
    objp = ocp->lru.lru_prev;
 80021f8:	6a34      	ldr	r4, [r6, #32]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 80021fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021fc:	6a23      	ldr	r3, [r4, #32]
    LRU_REMOVE(objp);
 80021fe:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8002202:	3b01      	subs	r3, #1
 8002204:	6081      	str	r1, [r0, #8]
 8002206:	60c8      	str	r0, [r1, #12]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 8002208:	f022 0101 	bic.w	r1, r2, #1
 800220c:	e9c4 3108 	strd	r3, r1, [r4, #32]
    if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 8002210:	06d1      	lsls	r1, r2, #27
 8002212:	d520      	bpl.n	8002256 <chCacheGetObject.constprop.0+0xc6>
 8002214:	f387 8811 	msr	BASEPRI, r7
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 8002218:	2322      	movs	r3, #34	; 0x22
    (void) ocp->writef(ocp, objp, true);
 800221a:	4621      	mov	r1, r4
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 800221c:	6263      	str	r3, [r4, #36]	; 0x24
    (void) ocp->writef(ocp, objp, true);
 800221e:	4648      	mov	r0, r9
 8002220:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002222:	2201      	movs	r2, #1
 8002224:	4798      	blx	r3
 8002226:	2320      	movs	r3, #32
 8002228:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 800222c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800222e:	3b01      	subs	r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	63b3      	str	r3, [r6, #56]	; 0x38
 8002234:	dae0      	bge.n	80021f8 <chCacheGetObject.constprop.0+0x68>
 8002236:	4640      	mov	r0, r8
 8002238:	f007 ff7a 	bl	800a130 <chSemWaitS.part.0>
 800223c:	e7dc      	b.n	80021f8 <chCacheGetObject.constprop.0+0x68>
 800223e:	3b01      	subs	r3, #1
 8002240:	6223      	str	r3, [r4, #32]
 8002242:	f104 0018 	add.w	r0, r4, #24
 8002246:	f007 ff73 	bl	800a130 <chSemWaitS.part.0>
 800224a:	2300      	movs	r3, #0
 800224c:	f383 8811 	msr	BASEPRI, r3
}
 8002250:	4620      	mov	r0, r4
 8002252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((objp->obj_flags & OC_FLAG_INHASH) != 0U) {
 8002256:	0793      	lsls	r3, r2, #30
 8002258:	d504      	bpl.n	8002264 <chCacheGetObject.constprop.0+0xd4>
        HASH_REMOVE(objp);
 800225a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	6822      	ldr	r2, [r4, #0]
 8002262:	6053      	str	r3, [r2, #4]
    objp->obj_group = group;
 8002264:	2700      	movs	r7, #0
    HASH_INSERT(ocp, objp, group, key);
 8002266:	e9d6 3200 	ldrd	r3, r2, [r6]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 800226a:	200a      	movs	r0, #10
    HASH_INSERT(ocp, objp, group, key);
 800226c:	3b01      	subs	r3, #1
 800226e:	402b      	ands	r3, r5
 8002270:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    objp->obj_key   = key;
 8002274:	6165      	str	r5, [r4, #20]
    HASH_INSERT(ocp, objp, group, key);
 8002276:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800227a:	e9c4 1500 	strd	r1, r5, [r4]
    objp->obj_group = group;
 800227e:	6127      	str	r7, [r4, #16]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 8002280:	6260      	str	r0, [r4, #36]	; 0x24
    HASH_INSERT(ocp, objp, group, key);
 8002282:	604c      	str	r4, [r1, #4]
 8002284:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
 8002288:	2300      	movs	r3, #0
 800228a:	f383 8811 	msr	BASEPRI, r3
}
 800228e:	4620      	mov	r0, r4
 8002290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002294:	20000c44 	.word	0x20000c44
 8002298:	20000c74 	.word	0x20000c74
 800229c:	00000000 	.word	0x00000000

080022a0 <chFactoryRegisterObject.constprop.0>:
 * @retval NULL         if the object to be registered cannot be allocated or
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
 80022a0:	b538      	push	{r3, r4, r5, lr}
 80022a2:	4605      	mov	r5, r0
                                             void *objp) {
  registered_object_t *rop;

  F_LOCK();
 80022a4:	4807      	ldr	r0, [pc, #28]	; (80022c4 <chFactoryRegisterObject.constprop.0+0x24>)
 80022a6:	f008 f8ab 	bl	800a400 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 80022aa:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <chFactoryRegisterObject.constprop.0+0x28>)
 80022ac:	4807      	ldr	r0, [pc, #28]	; (80022cc <chFactoryRegisterObject.constprop.0+0x2c>)
 80022ae:	1f11      	subs	r1, r2, #4
 80022b0:	f007 fd26 	bl	8009d00 <dyn_create_object_pool.lto_priv.0>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 80022b4:	4604      	mov	r4, r0
 80022b6:	b100      	cbz	r0, 80022ba <chFactoryRegisterObject.constprop.0+0x1a>
    /* Initializing registered object data.*/
    rop->objp = objp;
 80022b8:	6105      	str	r5, [r0, #16]
  }

  F_UNLOCK();
 80022ba:	4802      	ldr	r0, [pc, #8]	; (80022c4 <chFactoryRegisterObject.constprop.0+0x24>)
 80022bc:	f008 f810 	bl	800a2e0 <chMtxUnlock>

  return rop;
}
 80022c0:	4620      	mov	r0, r4
 80022c2:	bd38      	pop	{r3, r4, r5, pc}
 80022c4:	20000d00 	.word	0x20000d00
 80022c8:	20000d14 	.word	0x20000d14
 80022cc:	0800d258 	.word	0x0800d258

080022d0 <chFactoryCreateSemaphore.constprop.0>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 80022d0:	b510      	push	{r4, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 80022d2:	480a      	ldr	r0, [pc, #40]	; (80022fc <chFactoryCreateSemaphore.constprop.0+0x2c>)
 80022d4:	f008 f894 	bl	800a400 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 80022d8:	4a09      	ldr	r2, [pc, #36]	; (8002300 <chFactoryCreateSemaphore.constprop.0+0x30>)
 80022da:	480a      	ldr	r0, [pc, #40]	; (8002304 <chFactoryCreateSemaphore.constprop.0+0x34>)
 80022dc:	1f11      	subs	r1, r2, #4
 80022de:	f007 fd0f 	bl	8009d00 <dyn_create_object_pool.lto_priv.0>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 80022e2:	4604      	mov	r4, r0
 80022e4:	b128      	cbz	r0, 80022f2 <chFactoryCreateSemaphore.constprop.0+0x22>
  sp->cnt = n;
 80022e6:	2200      	movs	r2, #0
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 80022e8:	f100 0310 	add.w	r3, r0, #16
  tqp->prev = (thread_t *)tqp;
 80022ec:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022f0:	6182      	str	r2, [r0, #24]
  }

  F_UNLOCK();
 80022f2:	4802      	ldr	r0, [pc, #8]	; (80022fc <chFactoryCreateSemaphore.constprop.0+0x2c>)
 80022f4:	f007 fff4 	bl	800a2e0 <chMtxUnlock>

  return dsp;
}
 80022f8:	4620      	mov	r0, r4
 80022fa:	bd10      	pop	{r4, pc}
 80022fc:	20000d00 	.word	0x20000d00
 8002300:	20000d2c 	.word	0x20000d2c
 8002304:	0800d260 	.word	0x0800d260
	...

08002310 <chFactoryFindObject.constprop.0>:
registered_object_t *chFactoryFindObject(const char *name) {
 8002310:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8002312:	4d07      	ldr	r5, [pc, #28]	; (8002330 <chFactoryFindObject.constprop.0+0x20>)
 8002314:	4628      	mov	r0, r5
 8002316:	f008 f873 	bl	800a400 <chMtxLock>
  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 800231a:	f105 0110 	add.w	r1, r5, #16
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <chFactoryFindObject.constprop.0+0x24>)
 8002320:	f007 fc86 	bl	8009c30 <dyn_find_object.lto_priv.0>
 8002324:	4604      	mov	r4, r0
  F_UNLOCK();
 8002326:	4628      	mov	r0, r5
 8002328:	f007 ffda 	bl	800a2e0 <chMtxUnlock>
}
 800232c:	4620      	mov	r0, r4
 800232e:	bd38      	pop	{r3, r4, r5, pc}
 8002330:	20000d00 	.word	0x20000d00
 8002334:	0800d258 	.word	0x0800d258
	...

08002340 <chFactoryFindBuffer.constprop.0>:
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 8002340:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8002342:	4d07      	ldr	r5, [pc, #28]	; (8002360 <chFactoryFindBuffer.constprop.0+0x20>)
 8002344:	4628      	mov	r0, r5
 8002346:	f008 f85b 	bl	800a400 <chMtxLock>
  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 800234a:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <chFactoryFindBuffer.constprop.0+0x24>)
 8002350:	f007 fc6e 	bl	8009c30 <dyn_find_object.lto_priv.0>
 8002354:	4604      	mov	r4, r0
  F_UNLOCK();
 8002356:	4628      	mov	r0, r5
 8002358:	f007 ffc2 	bl	800a2e0 <chMtxUnlock>
}
 800235c:	4620      	mov	r0, r4
 800235e:	bd38      	pop	{r3, r4, r5, pc}
 8002360:	20000d00 	.word	0x20000d00
 8002364:	0800d268 	.word	0x0800d268
	...

08002370 <chFactoryFindSemaphore.constprop.0>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8002370:	b538      	push	{r3, r4, r5, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8002372:	4d07      	ldr	r5, [pc, #28]	; (8002390 <chFactoryFindSemaphore.constprop.0+0x20>)
 8002374:	4628      	mov	r0, r5
 8002376:	f008 f843 	bl	800a400 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 800237a:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800237e:	4805      	ldr	r0, [pc, #20]	; (8002394 <chFactoryFindSemaphore.constprop.0+0x24>)
 8002380:	f007 fc56 	bl	8009c30 <dyn_find_object.lto_priv.0>
 8002384:	4604      	mov	r4, r0

  F_UNLOCK();
 8002386:	4628      	mov	r0, r5
 8002388:	f007 ffaa 	bl	800a2e0 <chMtxUnlock>

  return dsp;
}
 800238c:	4620      	mov	r0, r4
 800238e:	bd38      	pop	{r3, r4, r5, pc}
 8002390:	20000d00 	.word	0x20000d00
 8002394:	0800d260 	.word	0x0800d260
	...

080023a0 <chFactoryFindMailbox.constprop.0>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 80023a0:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 80023a2:	4d07      	ldr	r5, [pc, #28]	; (80023c0 <chFactoryFindMailbox.constprop.0+0x20>)
 80023a4:	4628      	mov	r0, r5
 80023a6:	f008 f82b 	bl	800a400 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 80023aa:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <chFactoryFindMailbox.constprop.0+0x24>)
 80023b0:	f007 fc3e 	bl	8009c30 <dyn_find_object.lto_priv.0>
 80023b4:	4604      	mov	r4, r0

  F_UNLOCK();
 80023b6:	4628      	mov	r0, r5
 80023b8:	f007 ff92 	bl	800a2e0 <chMtxUnlock>

  return dmp;
}
 80023bc:	4620      	mov	r0, r4
 80023be:	bd38      	pop	{r3, r4, r5, pc}
 80023c0:	20000d00 	.word	0x20000d00
 80023c4:	0800d270 	.word	0x0800d270
	...

080023d0 <chFactoryFindObjectsFIFO.constprop.0>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 80023d0:	b538      	push	{r3, r4, r5, lr}
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 80023d2:	4d07      	ldr	r5, [pc, #28]	; (80023f0 <chFactoryFindObjectsFIFO.constprop.0+0x20>)
 80023d4:	4628      	mov	r0, r5
 80023d6:	f008 f813 	bl	800a400 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 80023da:	f105 0140 	add.w	r1, r5, #64	; 0x40
 80023de:	4805      	ldr	r0, [pc, #20]	; (80023f4 <chFactoryFindObjectsFIFO.constprop.0+0x24>)
 80023e0:	f007 fc26 	bl	8009c30 <dyn_find_object.lto_priv.0>
 80023e4:	4604      	mov	r4, r0

  F_UNLOCK();
 80023e6:	4628      	mov	r0, r5
 80023e8:	f007 ff7a 	bl	800a2e0 <chMtxUnlock>

  return dofp;
}
 80023ec:	4620      	mov	r0, r4
 80023ee:	bd38      	pop	{r3, r4, r5, pc}
 80023f0:	20000d00 	.word	0x20000d00
 80023f4:	0800d278 	.word	0x0800d278
	...

08002400 <chFactoryFindPipe.constprop.0>:
 * @retval NULL         if a dynamic pipe object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 8002400:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  F_LOCK();
 8002402:	4d07      	ldr	r5, [pc, #28]	; (8002420 <chFactoryFindPipe.constprop.0+0x20>)
 8002404:	4628      	mov	r0, r5
 8002406:	f007 fffb 	bl	800a400 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_find_object(name, &ch_factory.pipe_list);
 800240a:	f105 0144 	add.w	r1, r5, #68	; 0x44
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <chFactoryFindPipe.constprop.0+0x24>)
 8002410:	f007 fc0e 	bl	8009c30 <dyn_find_object.lto_priv.0>
 8002414:	4604      	mov	r4, r0

  F_UNLOCK();
 8002416:	4628      	mov	r0, r5
 8002418:	f007 ff62 	bl	800a2e0 <chMtxUnlock>

  return dpp;
}
 800241c:	4620      	mov	r0, r4
 800241e:	bd38      	pop	{r3, r4, r5, pc}
 8002420:	20000d00 	.word	0x20000d00
 8002424:	0800d280 	.word	0x0800d280
	...

08002430 <chFactoryCreateMailbox.constprop.0>:
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8002430:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8002432:	4811      	ldr	r0, [pc, #68]	; (8002478 <chFactoryCreateMailbox.constprop.0+0x48>)
 8002434:	f007 ffe4 	bl	800a400 <chMtxLock>
  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8002438:	2278      	movs	r2, #120	; 0x78
 800243a:	4910      	ldr	r1, [pc, #64]	; (800247c <chFactoryCreateMailbox.constprop.0+0x4c>)
 800243c:	4810      	ldr	r0, [pc, #64]	; (8002480 <chFactoryCreateMailbox.constprop.0+0x50>)
 800243e:	f007 fc17 	bl	8009c70 <dyn_create_object_heap.lto_priv.0>
  if (dmp != NULL) {
 8002442:	4604      	mov	r4, r0
 8002444:	b198      	cbz	r0, 800246e <chFactoryCreateMailbox.constprop.0+0x3e>
  mbp->cnt    = (size_t)0;
 8002446:	2000      	movs	r0, #0
    chMBObjectInit(&dmp->mbx, (msg_t *)(dmp + 1), n);
 8002448:	f104 0338 	add.w	r3, r4, #56	; 0x38
  chThdQueueObjectInit(&mbp->qw);
 800244c:	f104 0128 	add.w	r1, r4, #40	; 0x28
  chThdQueueObjectInit(&mbp->qr);
 8002450:	f104 0230 	add.w	r2, r4, #48	; 0x30
  mbp->wrptr  = buf;
 8002454:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8002458:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 800245c:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->top    = &buf[n];
 8002460:	f104 0578 	add.w	r5, r4, #120	; 0x78
  mbp->cnt    = (size_t)0;
 8002464:	6220      	str	r0, [r4, #32]
  mbp->reset  = false;
 8002466:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  mbp->buffer = buf;
 800246a:	6123      	str	r3, [r4, #16]
  mbp->top    = &buf[n];
 800246c:	6165      	str	r5, [r4, #20]
  F_UNLOCK();
 800246e:	4802      	ldr	r0, [pc, #8]	; (8002478 <chFactoryCreateMailbox.constprop.0+0x48>)
 8002470:	f007 ff36 	bl	800a2e0 <chMtxUnlock>
}
 8002474:	4620      	mov	r0, r4
 8002476:	bd38      	pop	{r3, r4, r5, pc}
 8002478:	20000d00 	.word	0x20000d00
 800247c:	20000d3c 	.word	0x20000d3c
 8002480:	0800d270 	.word	0x0800d270
	...

08002490 <chFactoryCreatePipe.constprop.0>:
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 8002490:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8002492:	4815      	ldr	r0, [pc, #84]	; (80024e8 <chFactoryCreatePipe.constprop.0+0x58>)
 8002494:	f007 ffb4 	bl	800a400 <chMtxLock>
  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 8002498:	2270      	movs	r2, #112	; 0x70
 800249a:	4914      	ldr	r1, [pc, #80]	; (80024ec <chFactoryCreatePipe.constprop.0+0x5c>)
 800249c:	4814      	ldr	r0, [pc, #80]	; (80024f0 <chFactoryCreatePipe.constprop.0+0x60>)
 800249e:	f007 fbe7 	bl	8009c70 <dyn_create_object_heap.lto_priv.0>
  if (dpp != NULL) {
 80024a2:	4604      	mov	r4, r0
 80024a4:	b1d8      	cbz	r0, 80024de <chFactoryCreatePipe.constprop.0+0x4e>
  pp->cnt    = (size_t)0;
 80024a6:	2300      	movs	r3, #0
    chPipeObjectInit(&dpp->pipe, (uint8_t *)(dpp + 1), size);
 80024a8:	f100 0260 	add.w	r2, r0, #96	; 0x60
  pp->top    = &buf[n];
 80024ac:	f100 0570 	add.w	r5, r0, #112	; 0x70
  pp->rtr    = NULL;
 80024b0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
  PC_INIT(pp);
 80024b4:	3030      	adds	r0, #48	; 0x30
  PW_INIT(pp);
 80024b6:	f104 0140 	add.w	r1, r4, #64	; 0x40
  pp->cnt    = (size_t)0;
 80024ba:	6223      	str	r3, [r4, #32]
  pp->reset  = false;
 80024bc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  mp->owner = NULL;
 80024c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80024c2:	64a3      	str	r3, [r4, #72]	; 0x48
 80024c4:	65a3      	str	r3, [r4, #88]	; 0x58
  PR_INIT(pp);
 80024c6:	f104 0350 	add.w	r3, r4, #80	; 0x50
  pp->wrptr  = buf;
 80024ca:	e9c4 2206 	strd	r2, r2, [r4, #24]
 80024ce:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
 80024d2:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
 80024d6:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
  pp->buffer = buf;
 80024da:	6122      	str	r2, [r4, #16]
  pp->top    = &buf[n];
 80024dc:	6165      	str	r5, [r4, #20]
  F_UNLOCK();
 80024de:	4802      	ldr	r0, [pc, #8]	; (80024e8 <chFactoryCreatePipe.constprop.0+0x58>)
 80024e0:	f007 fefe 	bl	800a2e0 <chMtxUnlock>
}
 80024e4:	4620      	mov	r0, r4
 80024e6:	bd38      	pop	{r3, r4, r5, pc}
 80024e8:	20000d00 	.word	0x20000d00
 80024ec:	20000d44 	.word	0x20000d44
 80024f0:	0800d280 	.word	0x0800d280
	...

08002500 <chFactoryCreateBuffer.constprop.0>:
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 8002500:	b510      	push	{r4, lr}
  F_LOCK();
 8002502:	480a      	ldr	r0, [pc, #40]	; (800252c <chFactoryCreateBuffer.constprop.0+0x2c>)
 8002504:	f007 ff7c 	bl	800a400 <chMtxLock>
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	4909      	ldr	r1, [pc, #36]	; (8002530 <chFactoryCreateBuffer.constprop.0+0x30>)
 800250c:	4809      	ldr	r0, [pc, #36]	; (8002534 <chFactoryCreateBuffer.constprop.0+0x34>)
 800250e:	f007 fbaf 	bl	8009c70 <dyn_create_object_heap.lto_priv.0>
  if (dbp != NULL) {
 8002512:	4604      	mov	r4, r0
 8002514:	b120      	cbz	r0, 8002520 <chFactoryCreateBuffer.constprop.0+0x20>
    memset((void *)(dbp + 1), 0, size);
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	2100      	movs	r1, #0
 800251a:	3010      	adds	r0, #16
 800251c:	f009 fe58 	bl	800c1d0 <memset>
  F_UNLOCK();
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <chFactoryCreateBuffer.constprop.0+0x2c>)
 8002522:	f007 fedd 	bl	800a2e0 <chMtxUnlock>
}
 8002526:	4620      	mov	r0, r4
 8002528:	bd10      	pop	{r4, pc}
 800252a:	bf00      	nop
 800252c:	20000d00 	.word	0x20000d00
 8002530:	20000d24 	.word	0x20000d24
 8002534:	0800d268 	.word	0x0800d268
	...

08002540 <chFactoryCreateObjectsFIFO.constprop.0>:
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 8002540:	b570      	push	{r4, r5, r6, lr}
  F_LOCK();
 8002542:	4818      	ldr	r0, [pc, #96]	; (80025a4 <chFactoryCreateObjectsFIFO.constprop.0+0x64>)
 8002544:	f007 ff5c 	bl	800a400 <chMtxLock>
  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 8002548:	f44f 72ca 	mov.w	r2, #404	; 0x194
 800254c:	4916      	ldr	r1, [pc, #88]	; (80025a8 <chFactoryCreateObjectsFIFO.constprop.0+0x68>)
 800254e:	4817      	ldr	r0, [pc, #92]	; (80025ac <chFactoryCreateObjectsFIFO.constprop.0+0x6c>)
 8002550:	f007 fb8e 	bl	8009c70 <dyn_create_object_heap.lto_priv.0>
  if (dofp != NULL) {
 8002554:	4604      	mov	r4, r0
 8002556:	b300      	cbz	r0, 800259a <chFactoryCreateObjectsFIFO.constprop.0+0x5a>
  mp->object_size = size;
 8002558:	2210      	movs	r2, #16
  mp->next = NULL;
 800255a:	2600      	movs	r6, #0
  mp->align = align;
 800255c:	2304      	movs	r3, #4
                            (void *)&msgbuf[objn], msgbuf);
 800255e:	f100 0594 	add.w	r5, r0, #148	; 0x94
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 8002562:	4410      	add	r0, r2
 8002564:	e9c4 2308 	strd	r2, r3, [r4, #32]
  chGuardedPoolLoadArray(&ofp->free, objbuf, objn);
 8002568:	4629      	mov	r1, r5
 800256a:	e9c4 0004 	strd	r0, r0, [r4, #16]
  mp->next = NULL;
 800256e:	61e6      	str	r6, [r4, #28]
  mp->provider = provider;
 8002570:	62a6      	str	r6, [r4, #40]	; 0x28
 8002572:	61a6      	str	r6, [r4, #24]
 8002574:	f008 fa34 	bl	800a9e0 <chGuardedPoolLoadArray>
    msg_t *msgbuf = (msg_t *)(dofp + 1);
 8002578:	f104 0354 	add.w	r3, r4, #84	; 0x54
  chThdQueueObjectInit(&mbp->qw);
 800257c:	f104 0144 	add.w	r1, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
 8002580:	f104 024c 	add.w	r2, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 8002584:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8002588:	e9c4 1111 	strd	r1, r1, [r4, #68]	; 0x44
 800258c:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  mbp->top    = &buf[n];
 8002590:	6325      	str	r5, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 8002592:	63e6      	str	r6, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8002594:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  mbp->buffer = buf;
 8002598:	62e3      	str	r3, [r4, #44]	; 0x2c
  F_UNLOCK();
 800259a:	4802      	ldr	r0, [pc, #8]	; (80025a4 <chFactoryCreateObjectsFIFO.constprop.0+0x64>)
 800259c:	f007 fea0 	bl	800a2e0 <chMtxUnlock>
}
 80025a0:	4620      	mov	r0, r4
 80025a2:	bd70      	pop	{r4, r5, r6, pc}
 80025a4:	20000d00 	.word	0x20000d00
 80025a8:	20000d40 	.word	0x20000d40
 80025ac:	0800d278 	.word	0x0800d278

080025b0 <rt_test_009_002_execute.lto_priv.0>:
  test_set_step(1);
 80025b0:	2201      	movs	r2, #1
static void rt_test_009_002_execute(void) {
 80025b2:	b508      	push	{r3, lr}
  test_set_step(1);
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <rt_test_009_002_execute.lto_priv.0+0x1c>)
    chEvtDispatch(evhndl, 7);
 80025b6:	2107      	movs	r1, #7
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <rt_test_009_002_execute.lto_priv.0+0x20>)
  test_set_step(1);
 80025ba:	601a      	str	r2, [r3, #0]
    chEvtDispatch(evhndl, 7);
 80025bc:	f007 fbc8 	bl	8009d50 <chEvtDispatch>
}
 80025c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert_sequence("ABC", "invalid sequence");
 80025c4:	4903      	ldr	r1, [pc, #12]	; (80025d4 <rt_test_009_002_execute.lto_priv.0+0x24>)
 80025c6:	4804      	ldr	r0, [pc, #16]	; (80025d8 <rt_test_009_002_execute.lto_priv.0+0x28>)
 80025c8:	f7fe bbba 	b.w	8000d40 <_test_assert_sequence>
 80025cc:	20001cf4 	.word	0x20001cf4
 80025d0:	0800df0c 	.word	0x0800df0c
 80025d4:	0800d288 	.word	0x0800d288
 80025d8:	0800d29c 	.word	0x0800d29c
 80025dc:	00000000 	.word	0x00000000

080025e0 <Thread1.lto_priv.2>:

/*
 * Blinker thread.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 80025e0:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <Thread1.lto_priv.2+0x30>)
 80025e4:	4a0b      	ldr	r2, [pc, #44]	; (8002614 <Thread1.lto_priv.2+0x34>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4d0b      	ldr	r5, [pc, #44]	; (8002618 <Thread1.lto_priv.2+0x38>)

  (void)arg;

  chRegSetThreadName("blinker");
  while (TRUE) {
    palTogglePad(IOPORT3, GPIOC_LED);
 80025ea:	4c0c      	ldr	r4, [pc, #48]	; (800261c <Thread1.lto_priv.2+0x3c>)
 80025ec:	619a      	str	r2, [r3, #24]
 80025ee:	68e3      	ldr	r3, [r4, #12]
 80025f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025f4:	60e3      	str	r3, [r4, #12]
    if (fs_ready)
 80025f6:	782b      	ldrb	r3, [r5, #0]
 80025f8:	b123      	cbz	r3, 8002604 <Thread1.lto_priv.2+0x24>
      chThdSleepMilliseconds(200);
 80025fa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80025fe:	f008 ff9f 	bl	800b540 <chThdSleep>
 8002602:	e7f4      	b.n	80025ee <Thread1.lto_priv.2+0xe>
    else
      chThdSleepMilliseconds(500);
 8002604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002608:	f008 ff9a 	bl	800b540 <chThdSleep>
 800260c:	e7ef      	b.n	80025ee <Thread1.lto_priv.2+0xe>
 800260e:	bf00      	nop
 8002610:	20000c88 	.word	0x20000c88
 8002614:	0800d2a0 	.word	0x0800d2a0
 8002618:	200013b0 	.word	0x200013b0
 800261c:	40011000 	.word	0x40011000

08002620 <job_slow>:

static jobs_queue_t jq;
static job_descriptor_t jobs[JOBS_QUEUE_SIZE];
static msg_t msg_queue[JOBS_QUEUE_SIZE];

static void job_slow(void *arg) {
 8002620:	b508      	push	{r3, lr}

  test_emit_token((int)arg);
 8002622:	b2c0      	uxtb	r0, r0
 8002624:	f7fe fab4 	bl	8000b90 <test_emit_token>
  chThdSleepMilliseconds(10);
}
 8002628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chThdSleepMilliseconds(10);
 800262c:	2014      	movs	r0, #20
 800262e:	f008 bf87 	b.w	800b540 <chThdSleep>
 8002632:	bf00      	nop
	...

08002640 <rt_test_007_004_execute.lto_priv.0>:
static void rt_test_007_004_execute(void) {
 8002640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(2);
 8002644:	2702      	movs	r7, #2
  return ch.rlist.current;
 8002646:	4d40      	ldr	r5, [pc, #256]	; (8002748 <rt_test_007_004_execute.lto_priv.0+0x108>)
 8002648:	4e40      	ldr	r6, [pc, #256]	; (800274c <rt_test_007_004_execute.lto_priv.0+0x10c>)
  return chThdGetSelfX()->prio;
 800264a:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800264c:	4b40      	ldr	r3, [pc, #256]	; (8002750 <rt_test_007_004_execute.lto_priv.0+0x110>)
 800264e:	6894      	ldr	r4, [r2, #8]
 8002650:	4840      	ldr	r0, [pc, #256]	; (8002754 <rt_test_007_004_execute.lto_priv.0+0x114>)
    pa = p + 1;
 8002652:	f104 0801 	add.w	r8, r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8002656:	4641      	mov	r1, r8
 8002658:	4a3f      	ldr	r2, [pc, #252]	; (8002758 <rt_test_007_004_execute.lto_priv.0+0x118>)
  test_set_step(2);
 800265a:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800265c:	f7fe fcd8 	bl	8001010 <chThdCreateStatic.constprop.0>
 8002660:	4684      	mov	ip, r0
 8002662:	4f3e      	ldr	r7, [pc, #248]	; (800275c <rt_test_007_004_execute.lto_priv.0+0x11c>)
    pb = p + 2;
 8002664:	f104 0902 	add.w	r9, r4, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8002668:	4649      	mov	r1, r9
 800266a:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <rt_test_007_004_execute.lto_priv.0+0x120>)
 800266c:	4a3d      	ldr	r2, [pc, #244]	; (8002764 <rt_test_007_004_execute.lto_priv.0+0x124>)
 800266e:	483e      	ldr	r0, [pc, #248]	; (8002768 <rt_test_007_004_execute.lto_priv.0+0x128>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8002670:	f8c7 c000 	str.w	ip, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8002674:	f7fe fccc 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(3);
 8002678:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800267a:	4602      	mov	r2, r0
    chMtxLock(&m1);
 800267c:	483b      	ldr	r0, [pc, #236]	; (800276c <rt_test_007_004_execute.lto_priv.0+0x12c>)
  test_set_step(3);
 800267e:	6033      	str	r3, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8002680:	607a      	str	r2, [r7, #4]
    chMtxLock(&m1);
 8002682:	f007 febd 	bl	800a400 <chMtxLock>
 8002686:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8002688:	4939      	ldr	r1, [pc, #228]	; (8002770 <rt_test_007_004_execute.lto_priv.0+0x130>)
 800268a:	6898      	ldr	r0, [r3, #8]
 800268c:	1b00      	subs	r0, r0, r4
 800268e:	fab0 f080 	clz	r0, r0
 8002692:	0940      	lsrs	r0, r0, #5
 8002694:	f7fe f9d4 	bl	8000a40 <_test_assert>
 8002698:	b108      	cbz	r0, 800269e <rt_test_007_004_execute.lto_priv.0+0x5e>
}
 800269a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
 800269e:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 80026a0:	20c8      	movs	r0, #200	; 0xc8
  test_set_step(4);
 80026a2:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 80026a4:	f008 ff4c 	bl	800b540 <chThdSleep>
 80026a8:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 80026aa:	4931      	ldr	r1, [pc, #196]	; (8002770 <rt_test_007_004_execute.lto_priv.0+0x130>)
 80026ac:	6898      	ldr	r0, [r3, #8]
 80026ae:	eba0 0008 	sub.w	r0, r0, r8
 80026b2:	fab0 f080 	clz	r0, r0
 80026b6:	0940      	lsrs	r0, r0, #5
 80026b8:	f7fe f9c2 	bl	8000a40 <_test_assert>
 80026bc:	2800      	cmp	r0, #0
 80026be:	d1ec      	bne.n	800269a <rt_test_007_004_execute.lto_priv.0+0x5a>
  test_set_step(5);
 80026c0:	2305      	movs	r3, #5
    chMtxLock(&m2);
 80026c2:	482c      	ldr	r0, [pc, #176]	; (8002774 <rt_test_007_004_execute.lto_priv.0+0x134>)
  test_set_step(5);
 80026c4:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
 80026c6:	f007 fe9b 	bl	800a400 <chMtxLock>
 80026ca:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 80026cc:	4928      	ldr	r1, [pc, #160]	; (8002770 <rt_test_007_004_execute.lto_priv.0+0x130>)
 80026ce:	6898      	ldr	r0, [r3, #8]
 80026d0:	eba0 0008 	sub.w	r0, r0, r8
 80026d4:	fab0 f080 	clz	r0, r0
 80026d8:	0940      	lsrs	r0, r0, #5
 80026da:	f7fe f9b1 	bl	8000a40 <_test_assert>
 80026de:	2800      	cmp	r0, #0
 80026e0:	d1db      	bne.n	800269a <rt_test_007_004_execute.lto_priv.0+0x5a>
  test_set_step(6);
 80026e2:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 80026e4:	20c8      	movs	r0, #200	; 0xc8
  test_set_step(6);
 80026e6:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 80026e8:	f008 ff2a 	bl	800b540 <chThdSleep>
 80026ec:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 80026ee:	4920      	ldr	r1, [pc, #128]	; (8002770 <rt_test_007_004_execute.lto_priv.0+0x130>)
 80026f0:	6898      	ldr	r0, [r3, #8]
 80026f2:	eba0 0009 	sub.w	r0, r0, r9
 80026f6:	fab0 f080 	clz	r0, r0
 80026fa:	0940      	lsrs	r0, r0, #5
 80026fc:	f7fe f9a0 	bl	8000a40 <_test_assert>
 8002700:	2800      	cmp	r0, #0
 8002702:	d1ca      	bne.n	800269a <rt_test_007_004_execute.lto_priv.0+0x5a>
  test_set_step(7);
 8002704:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 8002706:	481b      	ldr	r0, [pc, #108]	; (8002774 <rt_test_007_004_execute.lto_priv.0+0x134>)
  test_set_step(7);
 8002708:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
 800270a:	f007 fde9 	bl	800a2e0 <chMtxUnlock>
 800270e:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8002710:	4917      	ldr	r1, [pc, #92]	; (8002770 <rt_test_007_004_execute.lto_priv.0+0x130>)
 8002712:	6898      	ldr	r0, [r3, #8]
 8002714:	eba0 0008 	sub.w	r0, r0, r8
 8002718:	fab0 f080 	clz	r0, r0
 800271c:	0940      	lsrs	r0, r0, #5
 800271e:	f7fe f98f 	bl	8000a40 <_test_assert>
 8002722:	2800      	cmp	r0, #0
 8002724:	d1b9      	bne.n	800269a <rt_test_007_004_execute.lto_priv.0+0x5a>
  test_set_step(8);
 8002726:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 8002728:	4810      	ldr	r0, [pc, #64]	; (800276c <rt_test_007_004_execute.lto_priv.0+0x12c>)
  test_set_step(8);
 800272a:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 800272c:	f007 fdd8 	bl	800a2e0 <chMtxUnlock>
 8002730:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8002732:	490f      	ldr	r1, [pc, #60]	; (8002770 <rt_test_007_004_execute.lto_priv.0+0x130>)
 8002734:	6898      	ldr	r0, [r3, #8]
 8002736:	1b00      	subs	r0, r0, r4
 8002738:	fab0 f080 	clz	r0, r0
}
 800273c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8002740:	0940      	lsrs	r0, r0, #5
 8002742:	f7fe b97d 	b.w	8000a40 <_test_assert>
 8002746:	bf00      	nop
 8002748:	20000c88 	.word	0x20000c88
 800274c:	20001cf4 	.word	0x20001cf4
 8002750:	0800d2a8 	.word	0x0800d2a8
 8002754:	200015e0 	.word	0x200015e0
 8002758:	08002781 	.word	0x08002781
 800275c:	20001d0c 	.word	0x20001d0c
 8002760:	0800d2ac 	.word	0x0800d2ac
 8002764:	08005bd1 	.word	0x08005bd1
 8002768:	20001728 	.word	0x20001728
 800276c:	20000854 	.word	0x20000854
 8002770:	0800c60c 	.word	0x0800c60c
 8002774:	20000864 	.word	0x20000864
	...

08002780 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8002780:	b510      	push	{r4, lr}
  chMtxLock(&m1);
 8002782:	4c06      	ldr	r4, [pc, #24]	; (800279c <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
 8002784:	2064      	movs	r0, #100	; 0x64
 8002786:	f008 fedb 	bl	800b540 <chThdSleep>
  chMtxLock(&m1);
 800278a:	4620      	mov	r0, r4
 800278c:	f007 fe38 	bl	800a400 <chMtxLock>
  chMtxUnlock(&m1);
 8002790:	4620      	mov	r0, r4
}
 8002792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8002796:	f007 bda3 	b.w	800a2e0 <chMtxUnlock>
 800279a:	bf00      	nop
 800279c:	20000854 	.word	0x20000854

080027a0 <rt_test_004_001_execute.lto_priv.0>:
  systime_t time;

  /* [4.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 80027a0:	2301      	movs	r3, #1
static void rt_test_004_001_execute(void) {
 80027a2:	b570      	push	{r4, r5, r6, lr}
 80027a4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  test_set_step(1);
 80027a8:	4e30      	ldr	r6, [pc, #192]	; (800286c <rt_test_004_001_execute.lto_priv.0+0xcc>)
  {
    time = chVTGetSystemTimeX();
    chThdSleep(100);
 80027aa:	2064      	movs	r0, #100	; 0x64
  test_set_step(1);
 80027ac:	6033      	str	r3, [r6, #0]
 80027ae:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleep(100);
 80027b0:	f008 fec6 	bl	800b540 <chThdSleep>
 80027b4:	b2a4      	uxth	r4, r4
  return systime + (systime_t)interval;
 80027b6:	f104 0167 	add.w	r1, r4, #103	; 0x67
 80027ba:	f104 0064 	add.w	r0, r4, #100	; 0x64
    test_assert_time_window(chTimeAddX(time, 100),
 80027be:	b289      	uxth	r1, r1
 80027c0:	b280      	uxth	r0, r0
 80027c2:	f7fd fef5 	bl	80005b0 <_test_assert_time_window.constprop.0>
 80027c6:	b100      	cbz	r0, 80027ca <rt_test_004_001_execute.lto_priv.0+0x2a>
    test_assert_time_window(chTimeAddX(time, 100),
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
  test_end_step(5);
}
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 80027ca:	2302      	movs	r3, #2
 80027cc:	6033      	str	r3, [r6, #0]
 80027ce:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 80027d0:	20c8      	movs	r0, #200	; 0xc8
 80027d2:	b2a4      	uxth	r4, r4
 80027d4:	f008 feb4 	bl	800b540 <chThdSleep>
 80027d8:	f104 01cb 	add.w	r1, r4, #203	; 0xcb
 80027dc:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 80027e0:	b289      	uxth	r1, r1
 80027e2:	b280      	uxth	r0, r0
 80027e4:	f7fd fee4 	bl	80005b0 <_test_assert_time_window.constprop.0>
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d1ed      	bne.n	80027c8 <rt_test_004_001_execute.lto_priv.0+0x28>
  test_set_step(3);
 80027ec:	2303      	movs	r3, #3
 80027ee:	6033      	str	r3, [r6, #0]
 80027f0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
 80027f2:	20c8      	movs	r0, #200	; 0xc8
 80027f4:	b2a4      	uxth	r4, r4
 80027f6:	f008 fea3 	bl	800b540 <chThdSleep>
 80027fa:	f104 01cb 	add.w	r1, r4, #203	; 0xcb
 80027fe:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 8002802:	b289      	uxth	r1, r1
 8002804:	b280      	uxth	r0, r0
 8002806:	f7fd fed3 	bl	80005b0 <_test_assert_time_window.constprop.0>
 800280a:	2800      	cmp	r0, #0
 800280c:	d1dc      	bne.n	80027c8 <rt_test_004_001_execute.lto_priv.0+0x28>
  test_set_step(4);
 800280e:	2304      	movs	r3, #4
 8002810:	6033      	str	r3, [r6, #0]
 8002812:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
 8002814:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002818:	b2a4      	uxth	r4, r4
 800281a:	f008 fe91 	bl	800b540 <chThdSleep>
 800281e:	f204 71d3 	addw	r1, r4, #2003	; 0x7d3
 8002822:	f504 60fa 	add.w	r0, r4, #2000	; 0x7d0
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 8002826:	b289      	uxth	r1, r1
 8002828:	b280      	uxth	r0, r0
 800282a:	f7fd fec1 	bl	80005b0 <_test_assert_time_window.constprop.0>
 800282e:	2800      	cmp	r0, #0
 8002830:	d1ca      	bne.n	80027c8 <rt_test_004_001_execute.lto_priv.0+0x28>
  test_set_step(5);
 8002832:	2305      	movs	r3, #5
 8002834:	6033      	str	r3, [r6, #0]
 8002836:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8002838:	2320      	movs	r3, #32
 800283a:	b2a4      	uxth	r4, r4
 800283c:	f104 0664 	add.w	r6, r4, #100	; 0x64
 8002840:	b2b6      	uxth	r6, r6
 8002842:	f383 8811 	msr	BASEPRI, r3
 8002846:	6a69      	ldr	r1, [r5, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8002848:	1a71      	subs	r1, r6, r1
 800284a:	b289      	uxth	r1, r1
  if (interval > (sysinterval_t)0) {
 800284c:	b951      	cbnz	r1, 8002864 <rt_test_004_001_execute.lto_priv.0+0xc4>
 800284e:	2300      	movs	r3, #0
 8002850:	f383 8811 	msr	BASEPRI, r3
  return systime + (systime_t)interval;
 8002854:	f104 0167 	add.w	r1, r4, #103	; 0x67
    test_assert_time_window(chTimeAddX(time, 100),
 8002858:	4630      	mov	r0, r6
}
 800285a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(chTimeAddX(time, 100),
 800285e:	b289      	uxth	r1, r1
 8002860:	f7fd bea6 	b.w	80005b0 <_test_assert_time_window.constprop.0>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8002864:	2008      	movs	r0, #8
 8002866:	f008 fb5b 	bl	800af20 <chSchGoSleepTimeoutS>
 800286a:	e7f0      	b.n	800284e <rt_test_004_001_execute.lto_priv.0+0xae>
 800286c:	20001cf4 	.word	0x20001cf4

08002870 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8002870:	b508      	push	{r3, lr}

  chThdSleep(1);
 8002872:	2001      	movs	r0, #1
 8002874:	f008 fe64 	bl	800b540 <chThdSleep>
 8002878:	2320      	movs	r3, #32
 800287a:	f383 8811 	msr	BASEPRI, r3
 800287e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002882:	2300      	movs	r3, #0
 8002884:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8002886:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 800288a:	b280      	uxth	r0, r0
 800288c:	bd08      	pop	{r3, pc}
 800288e:	bf00      	nop

08002890 <rt_test_011_011_execute.lto_priv.0>:
  test_set_step(1);
 8002890:	2301      	movs	r3, #1
static void rt_test_011_011_execute(void) {
 8002892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8002896:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8002914 <rt_test_011_011_execute.lto_priv.0+0x84>
    n = 0;
 800289a:	2500      	movs	r5, #0
  test_set_step(1);
 800289c:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 80028a0:	f7ff ffe6 	bl	8002870 <test_wait_tick>
 80028a4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80028a8:	4606      	mov	r6, r0
      chMtxLock(&mtx1);
 80028aa:	4c17      	ldr	r4, [pc, #92]	; (8002908 <rt_test_011_011_execute.lto_priv.0+0x78>)
 80028ac:	4620      	mov	r0, r4
 80028ae:	f007 fda7 	bl	800a400 <chMtxLock>
      chMtxUnlock(&mtx1);
 80028b2:	4620      	mov	r0, r4
 80028b4:	f007 fd14 	bl	800a2e0 <chMtxUnlock>
      chMtxLock(&mtx1);
 80028b8:	4620      	mov	r0, r4
 80028ba:	f007 fda1 	bl	800a400 <chMtxLock>
      chMtxUnlock(&mtx1);
 80028be:	4620      	mov	r0, r4
 80028c0:	f007 fd0e 	bl	800a2e0 <chMtxUnlock>
      chMtxLock(&mtx1);
 80028c4:	4620      	mov	r0, r4
 80028c6:	f007 fd9b 	bl	800a400 <chMtxLock>
      chMtxUnlock(&mtx1);
 80028ca:	4620      	mov	r0, r4
 80028cc:	f007 fd08 	bl	800a2e0 <chMtxUnlock>
      chMtxLock(&mtx1);
 80028d0:	4620      	mov	r0, r4
 80028d2:	f007 fd95 	bl	800a400 <chMtxLock>
      chMtxUnlock(&mtx1);
 80028d6:	4620      	mov	r0, r4
 80028d8:	f007 fd02 	bl	800a2e0 <chMtxUnlock>
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      n++;
 80028de:	3501      	adds	r5, #1
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80028e0:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028e8:	d3e0      	bcc.n	80028ac <rt_test_011_011_execute.lto_priv.0+0x1c>
  test_set_step(2);
 80028ea:	2302      	movs	r3, #2
    test_print("--- Score : ");
 80028ec:	4807      	ldr	r0, [pc, #28]	; (800290c <rt_test_011_011_execute.lto_priv.0+0x7c>)
  test_set_step(2);
 80028ee:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 80028f2:	f7fe fa0d 	bl	8000d10 <test_print>
    test_printn(n * 4);
 80028f6:	00a8      	lsls	r0, r5, #2
 80028f8:	f7fe f93a 	bl	8000b70 <test_printn>
}
 80028fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" lock+unlock/S");
 8002900:	4803      	ldr	r0, [pc, #12]	; (8002910 <rt_test_011_011_execute.lto_priv.0+0x80>)
 8002902:	f7fe b9e5 	b.w	8000cd0 <test_println>
 8002906:	bf00      	nop
 8002908:	200014a8 	.word	0x200014a8
 800290c:	0800d2b0 	.word	0x0800d2b0
 8002910:	0800d2c0 	.word	0x0800d2c0
 8002914:	20001cf4 	.word	0x20001cf4
	...

08002920 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8002920:	b538      	push	{r3, r4, r5, lr}
 8002922:	2520      	movs	r5, #32
 8002924:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8002928:	2100      	movs	r1, #0
 800292a:	480b      	ldr	r0, [pc, #44]	; (8002958 <evt_thread7+0x38>)
 800292c:	f007 fc98 	bl	800a260 <chEvtBroadcastFlagsI>
 8002930:	2400      	movs	r4, #0
  chSchRescheduleS();
 8002932:	f007 fb15 	bl	8009f60 <chSchRescheduleS>
 8002936:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
 800293a:	2064      	movs	r0, #100	; 0x64
 800293c:	f008 fe00 	bl	800b540 <chThdSleep>
 8002940:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <evt_thread7+0x3c>)
 8002946:	4621      	mov	r1, r4
 8002948:	f007 fc8a 	bl	800a260 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800294c:	f007 fb08 	bl	8009f60 <chSchRescheduleS>
 8002950:	f384 8811 	msr	BASEPRI, r4
}
 8002954:	bd38      	pop	{r3, r4, r5, pc}
 8002956:	bf00      	nop
 8002958:	20000808 	.word	0x20000808
 800295c:	2000080c 	.word	0x2000080c

08002960 <tmrfunc>:
static void tmrfunc(void *p) {
 8002960:	b538      	push	{r3, r4, r5, lr}
 8002962:	2220      	movs	r2, #32
 8002964:	4604      	mov	r4, r0
 8002966:	f382 8811 	msr	BASEPRI, r2
  if (cnt > 0) {
 800296a:	4d16      	ldr	r5, [pc, #88]	; (80029c4 <tmrfunc+0x64>)
 800296c:	682b      	ldr	r3, [r5, #0]
 800296e:	b1b3      	cbz	r3, 800299e <tmrfunc+0x3e>
    if (blkIsInserted(bbdp)) {
 8002970:	6803      	ldr	r3, [r0, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4798      	blx	r3
 8002976:	b1f0      	cbz	r0, 80029b6 <tmrfunc+0x56>
      if (--cnt == 0) {
 8002978:	6829      	ldr	r1, [r5, #0]
 800297a:	3901      	subs	r1, #1
 800297c:	6029      	str	r1, [r5, #0]
 800297e:	b1e9      	cbz	r1, 80029bc <tmrfunc+0x5c>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8002980:	4811      	ldr	r0, [pc, #68]	; (80029c8 <tmrfunc+0x68>)
 8002982:	68c3      	ldr	r3, [r0, #12]
 8002984:	b10b      	cbz	r3, 800298a <tmrfunc+0x2a>
    chVTDoResetI(vtp);
 8002986:	f008 fa33 	bl	800adf0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 800298a:	4623      	mov	r3, r4
 800298c:	2114      	movs	r1, #20
 800298e:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <tmrfunc+0x6c>)
 8002990:	480d      	ldr	r0, [pc, #52]	; (80029c8 <tmrfunc+0x68>)
 8002992:	f008 fa75 	bl	800ae80 <chVTDoSetI>
 8002996:	2300      	movs	r3, #0
 8002998:	f383 8811 	msr	BASEPRI, r3
}
 800299c:	bd38      	pop	{r3, r4, r5, pc}
    if (!blkIsInserted(bbdp)) {
 800299e:	6803      	ldr	r3, [r0, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4798      	blx	r3
 80029a4:	2800      	cmp	r0, #0
 80029a6:	d1eb      	bne.n	8002980 <tmrfunc+0x20>
      cnt = POLLING_INTERVAL;
 80029a8:	230a      	movs	r3, #10
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 80029aa:	4601      	mov	r1, r0
 80029ac:	4808      	ldr	r0, [pc, #32]	; (80029d0 <tmrfunc+0x70>)
 80029ae:	602b      	str	r3, [r5, #0]
 80029b0:	f007 fc56 	bl	800a260 <chEvtBroadcastFlagsI>
 80029b4:	e7e4      	b.n	8002980 <tmrfunc+0x20>
      cnt = POLLING_INTERVAL;
 80029b6:	230a      	movs	r3, #10
 80029b8:	602b      	str	r3, [r5, #0]
 80029ba:	e7e1      	b.n	8002980 <tmrfunc+0x20>
 80029bc:	4805      	ldr	r0, [pc, #20]	; (80029d4 <tmrfunc+0x74>)
 80029be:	f007 fc4f 	bl	800a260 <chEvtBroadcastFlagsI>
 80029c2:	e7dd      	b.n	8002980 <tmrfunc+0x20>
 80029c4:	20000e28 	.word	0x20000e28
 80029c8:	20001d20 	.word	0x20001d20
 80029cc:	08002961 	.word	0x08002961
 80029d0:	200015b8 	.word	0x200015b8
 80029d4:	20001410 	.word	0x20001410
	...

080029e0 <rt_test_011_009_execute.lto_priv.0>:
static void rt_test_011_009_execute(void) {
 80029e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 80029e4:	2301      	movs	r3, #1
 80029e6:	f8df a088 	ldr.w	sl, [pc, #136]	; 8002a70 <rt_test_011_009_execute.lto_priv.0+0x90>
    n = 0;
 80029ea:	2400      	movs	r4, #0
  test_set_step(1);
 80029ec:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 80029f0:	f7ff ff3e 	bl	8002870 <test_wait_tick>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 80029f4:	46a1      	mov	r9, r4
    start = test_wait_tick();
 80029f6:	4607      	mov	r7, r0
 80029f8:	f04f 0820 	mov.w	r8, #32
      chVTDoSetI(&vt1, 1, tmo, NULL);
 80029fc:	f8df b074 	ldr.w	fp, [pc, #116]	; 8002a74 <rt_test_011_009_execute.lto_priv.0+0x94>
 8002a00:	4e17      	ldr	r6, [pc, #92]	; (8002a60 <rt_test_011_009_execute.lto_priv.0+0x80>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8002a02:	4d18      	ldr	r5, [pc, #96]	; (8002a64 <rt_test_011_009_execute.lto_priv.0+0x84>)
 8002a04:	f388 8811 	msr	BASEPRI, r8
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	465a      	mov	r2, fp
 8002a0c:	4630      	mov	r0, r6
 8002a0e:	2101      	movs	r1, #1
 8002a10:	f008 fa36 	bl	800ae80 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8002a14:	465a      	mov	r2, fp
 8002a16:	2300      	movs	r3, #0
 8002a18:	f242 7110 	movw	r1, #10000	; 0x2710
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	f008 fa2f 	bl	800ae80 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8002a22:	4630      	mov	r0, r6
 8002a24:	f008 f9e4 	bl	800adf0 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8002a28:	4628      	mov	r0, r5
 8002a2a:	f008 f9e1 	bl	800adf0 <chVTDoResetI>
 8002a2e:	f389 8811 	msr	BASEPRI, r9
 8002a32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 8002a38:	3401      	adds	r4, #1
 8002a3a:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a42:	d3df      	bcc.n	8002a04 <rt_test_011_009_execute.lto_priv.0+0x24>
  test_set_step(2);
 8002a44:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8002a46:	4808      	ldr	r0, [pc, #32]	; (8002a68 <rt_test_011_009_execute.lto_priv.0+0x88>)
  test_set_step(2);
 8002a48:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 8002a4c:	f7fe f960 	bl	8000d10 <test_print>
    test_printn(n * 2);
 8002a50:	0060      	lsls	r0, r4, #1
 8002a52:	f7fe f88d 	bl	8000b70 <test_printn>
}
 8002a56:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 8002a5a:	4804      	ldr	r0, [pc, #16]	; (8002a6c <rt_test_011_009_execute.lto_priv.0+0x8c>)
 8002a5c:	f7fe b938 	b.w	8000cd0 <test_println>
 8002a60:	20001d38 	.word	0x20001d38
 8002a64:	20001d4c 	.word	0x20001d4c
 8002a68:	0800d2b0 	.word	0x0800d2b0
 8002a6c:	0800d2d0 	.word	0x0800d2d0
 8002a70:	20001cf4 	.word	0x20001cf4
 8002a74:	080007b1 	.word	0x080007b1
	...

08002a80 <ShellHandler>:
static void ShellHandler(eventid_t id) {
 8002a80:	b510      	push	{r4, lr}
  if (chThdTerminatedX(shelltp)) {
 8002a82:	4c06      	ldr	r4, [pc, #24]	; (8002a9c <ShellHandler+0x1c>)
 8002a84:	6820      	ldr	r0, [r4, #0]
 8002a86:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	d000      	beq.n	8002a90 <ShellHandler+0x10>
}
 8002a8e:	bd10      	pop	{r4, pc}
    chThdWait(shelltp);                 /* Returning memory to heap.        */
 8002a90:	f007 feee 	bl	800a870 <chThdWait>
    shelltp = NULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	6023      	str	r3, [r4, #0]
}
 8002a98:	bd10      	pop	{r4, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200015d8 	.word	0x200015d8

08002aa0 <rt_test_011_005_execute.lto_priv.0>:
  test_set_step(1);
 8002aa0:	2201      	movs	r2, #1
static void rt_test_011_005_execute(void) {
 8002aa2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8002aa6:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <rt_test_011_005_execute.lto_priv.0+0x64>)
  test_set_step(1);
 8002aa8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8002b14 <rt_test_011_005_execute.lto_priv.0+0x74>
  return chThdGetSelfX()->prio;
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f8c8 2000 	str.w	r2, [r8]
  tprio_t prio = chThdGetPriorityX() - 1;
 8002ab2:	689e      	ldr	r6, [r3, #8]
    start = test_wait_tick();
 8002ab4:	f7ff fedc 	bl	8002870 <test_wait_tick>
    n = 0;
 8002ab8:	2400      	movs	r4, #0
    start = test_wait_tick();
 8002aba:	4605      	mov	r5, r0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8002abc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8002b18 <rt_test_011_005_execute.lto_priv.0+0x78>
 8002ac0:	4f11      	ldr	r7, [pc, #68]	; (8002b08 <rt_test_011_005_execute.lto_priv.0+0x68>)
  tprio_t prio = chThdGetPriorityX() - 1;
 8002ac2:	3e01      	subs	r6, #1
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	464a      	mov	r2, r9
 8002ac8:	4631      	mov	r1, r6
 8002aca:	4638      	mov	r0, r7
 8002acc:	f7fe faa0 	bl	8001010 <chThdCreateStatic.constprop.0>
 8002ad0:	f007 fece 	bl	800a870 <chThdWait>
 8002ad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 8002ada:	3401      	adds	r4, #1
 8002adc:	1b5b      	subs	r3, r3, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002ae4:	d3ee      	bcc.n	8002ac4 <rt_test_011_005_execute.lto_priv.0+0x24>
  test_set_step(2);
 8002ae6:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8002ae8:	4808      	ldr	r0, [pc, #32]	; (8002b0c <rt_test_011_005_execute.lto_priv.0+0x6c>)
  test_set_step(2);
 8002aea:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8002aee:	f7fe f90f 	bl	8000d10 <test_print>
    test_printn(n);
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7fe f83c 	bl	8000b70 <test_printn>
}
 8002af8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 8002afc:	4804      	ldr	r0, [pc, #16]	; (8002b10 <rt_test_011_005_execute.lto_priv.0+0x70>)
 8002afe:	f7fe b8e7 	b.w	8000cd0 <test_println>
 8002b02:	bf00      	nop
 8002b04:	20000c88 	.word	0x20000c88
 8002b08:	200015e0 	.word	0x200015e0
 8002b0c:	0800d2b0 	.word	0x0800d2b0
 8002b10:	0800d2dc 	.word	0x0800d2dc
 8002b14:	20001cf4 	.word	0x20001cf4
 8002b18:	08009111 	.word	0x08009111
 8002b1c:	00000000 	.word	0x00000000

08002b20 <test_wait_threads>:
void test_wait_threads(void) {
 8002b20:	b570      	push	{r4, r5, r6, lr}
      threads[i] = NULL;
 8002b22:	2600      	movs	r6, #0
 8002b24:	4c06      	ldr	r4, [pc, #24]	; (8002b40 <test_wait_threads+0x20>)
 8002b26:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8002b2a:	f854 0b04 	ldr.w	r0, [r4], #4
 8002b2e:	b118      	cbz	r0, 8002b38 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8002b30:	f007 fe9e 	bl	800a870 <chThdWait>
      threads[i] = NULL;
 8002b34:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8002b38:	42ac      	cmp	r4, r5
 8002b3a:	d1f6      	bne.n	8002b2a <test_wait_threads+0xa>
}
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}
 8002b3e:	bf00      	nop
 8002b40:	20001d0c 	.word	0x20001d0c
	...

08002b50 <rt_test_011_008_execute.lto_priv.0>:
  test_set_step(1);
 8002b50:	2201      	movs	r2, #1
    n = 0;
 8002b52:	2300      	movs	r3, #0
static void rt_test_011_008_execute(void) {
 8002b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8002b58:	4f2f      	ldr	r7, [pc, #188]	; (8002c18 <rt_test_011_008_execute.lto_priv.0+0xc8>)
  test_set_step(1);
 8002b5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8002c30 <rt_test_011_008_execute.lto_priv.0+0xe0>
static void rt_test_011_008_execute(void) {
 8002b5e:	b082      	sub	sp, #8
  test_set_step(1);
 8002b60:	f8c8 2000 	str.w	r2, [r8]
    n = 0;
 8002b64:	9301      	str	r3, [sp, #4]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002b66:	f7ff fe83 	bl	8002870 <test_wait_tick>
  return chThdGetSelfX()->prio;
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	4e2b      	ldr	r6, [pc, #172]	; (8002c1c <rt_test_011_008_execute.lto_priv.0+0xcc>)
 8002b6e:	4d2c      	ldr	r5, [pc, #176]	; (8002c20 <rt_test_011_008_execute.lto_priv.0+0xd0>)
 8002b70:	6899      	ldr	r1, [r3, #8]
 8002b72:	4632      	mov	r2, r6
 8002b74:	ab01      	add	r3, sp, #4
 8002b76:	4628      	mov	r0, r5
 8002b78:	3901      	subs	r1, #1
 8002b7a:	f7fe fa49 	bl	8001010 <chThdCreateStatic.constprop.0>
 8002b7e:	4684      	mov	ip, r0
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4c28      	ldr	r4, [pc, #160]	; (8002c24 <rt_test_011_008_execute.lto_priv.0+0xd4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002b84:	6899      	ldr	r1, [r3, #8]
 8002b86:	4632      	mov	r2, r6
 8002b88:	ab01      	add	r3, sp, #4
 8002b8a:	3901      	subs	r1, #1
 8002b8c:	f505 70a4 	add.w	r0, r5, #328	; 0x148
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002b90:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002b94:	f7fe fa3c 	bl	8001010 <chThdCreateStatic.constprop.0>
 8002b98:	4684      	mov	ip, r0
 8002b9a:	69ba      	ldr	r2, [r7, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002b9c:	ab01      	add	r3, sp, #4
 8002b9e:	6891      	ldr	r1, [r2, #8]
 8002ba0:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8002ba4:	4632      	mov	r2, r6
 8002ba6:	3901      	subs	r1, #1
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002ba8:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002bac:	f7fe fa30 	bl	8001010 <chThdCreateStatic.constprop.0>
 8002bb0:	4684      	mov	ip, r0
 8002bb2:	69ba      	ldr	r2, [r7, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002bb4:	ab01      	add	r3, sp, #4
 8002bb6:	6891      	ldr	r1, [r2, #8]
 8002bb8:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8002bbc:	4632      	mov	r2, r6
 8002bbe:	3901      	subs	r1, #1
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002bc0:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002bc4:	f7fe fa24 	bl	8001010 <chThdCreateStatic.constprop.0>
 8002bc8:	4684      	mov	ip, r0
 8002bca:	69ba      	ldr	r2, [r7, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002bcc:	ab01      	add	r3, sp, #4
 8002bce:	6891      	ldr	r1, [r2, #8]
 8002bd0:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8002bd4:	3901      	subs	r1, #1
 8002bd6:	4632      	mov	r2, r6
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002bd8:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002bdc:	f7fe fa18 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8002be0:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002be2:	4602      	mov	r2, r0
    chThdSleepSeconds(1);
 8002be4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002be8:	6122      	str	r2, [r4, #16]
  test_set_step(2);
 8002bea:	f8c8 3000 	str.w	r3, [r8]
    chThdSleepSeconds(1);
 8002bee:	f008 fca7 	bl	800b540 <chThdSleep>
    test_terminate_threads();
 8002bf2:	f7fd ff6d 	bl	8000ad0 <test_terminate_threads>
    test_wait_threads();
 8002bf6:	f7ff ff93 	bl	8002b20 <test_wait_threads>
  test_set_step(3);
 8002bfa:	2303      	movs	r3, #3
    test_print("--- Score : ");
 8002bfc:	480a      	ldr	r0, [pc, #40]	; (8002c28 <rt_test_011_008_execute.lto_priv.0+0xd8>)
  test_set_step(3);
 8002bfe:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8002c02:	f7fe f885 	bl	8000d10 <test_print>
    test_printn(n);
 8002c06:	9801      	ldr	r0, [sp, #4]
 8002c08:	f7fd ffb2 	bl	8000b70 <test_printn>
    test_println(" ctxswc/S");
 8002c0c:	4807      	ldr	r0, [pc, #28]	; (8002c2c <rt_test_011_008_execute.lto_priv.0+0xdc>)
 8002c0e:	f7fe f85f 	bl	8000cd0 <test_println>
}
 8002c12:	b002      	add	sp, #8
 8002c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c18:	20000c88 	.word	0x20000c88
 8002c1c:	08005441 	.word	0x08005441
 8002c20:	200015e0 	.word	0x200015e0
 8002c24:	20001d0c 	.word	0x20001d0c
 8002c28:	0800d2b0 	.word	0x0800d2b0
 8002c2c:	0800d2e8 	.word	0x0800d2e8
 8002c30:	20001cf4 	.word	0x20001cf4
	...

08002c40 <rt_test_011_007_execute.lto_priv.0>:
static void rt_test_011_007_execute(void) {
 8002c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8002c44:	2401      	movs	r4, #1
  return ch.rlist.current;
 8002c46:	4d34      	ldr	r5, [pc, #208]	; (8002d18 <rt_test_011_007_execute.lto_priv.0+0xd8>)
 8002c48:	4f34      	ldr	r7, [pc, #208]	; (8002d1c <rt_test_011_007_execute.lto_priv.0+0xdc>)
  return chThdGetSelfX()->prio;
 8002c4a:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	6891      	ldr	r1, [r2, #8]
 8002c50:	4833      	ldr	r0, [pc, #204]	; (8002d20 <rt_test_011_007_execute.lto_priv.0+0xe0>)
 8002c52:	4a34      	ldr	r2, [pc, #208]	; (8002d24 <rt_test_011_007_execute.lto_priv.0+0xe4>)
 8002c54:	3105      	adds	r1, #5
  test_set_step(1);
 8002c56:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8002c58:	f7fe f9da 	bl	8001010 <chThdCreateStatic.constprop.0>
 8002c5c:	4606      	mov	r6, r0
 8002c5e:	69ab      	ldr	r3, [r5, #24]
 8002c60:	4c31      	ldr	r4, [pc, #196]	; (8002d28 <rt_test_011_007_execute.lto_priv.0+0xe8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8002c62:	6899      	ldr	r1, [r3, #8]
 8002c64:	4a2f      	ldr	r2, [pc, #188]	; (8002d24 <rt_test_011_007_execute.lto_priv.0+0xe4>)
 8002c66:	2300      	movs	r3, #0
 8002c68:	3104      	adds	r1, #4
 8002c6a:	4830      	ldr	r0, [pc, #192]	; (8002d2c <rt_test_011_007_execute.lto_priv.0+0xec>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8002c6c:	6026      	str	r6, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8002c6e:	f7fe f9cf 	bl	8001010 <chThdCreateStatic.constprop.0>
 8002c72:	4606      	mov	r6, r0
 8002c74:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8002c76:	2300      	movs	r3, #0
 8002c78:	6891      	ldr	r1, [r2, #8]
 8002c7a:	482d      	ldr	r0, [pc, #180]	; (8002d30 <rt_test_011_007_execute.lto_priv.0+0xf0>)
 8002c7c:	4a29      	ldr	r2, [pc, #164]	; (8002d24 <rt_test_011_007_execute.lto_priv.0+0xe4>)
 8002c7e:	3103      	adds	r1, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8002c80:	6066      	str	r6, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8002c82:	f7fe f9c5 	bl	8001010 <chThdCreateStatic.constprop.0>
 8002c86:	4606      	mov	r6, r0
 8002c88:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	6891      	ldr	r1, [r2, #8]
 8002c8e:	4829      	ldr	r0, [pc, #164]	; (8002d34 <rt_test_011_007_execute.lto_priv.0+0xf4>)
 8002c90:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <rt_test_011_007_execute.lto_priv.0+0xe4>)
 8002c92:	3102      	adds	r1, #2
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8002c94:	60a6      	str	r6, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8002c96:	f7fe f9bb 	bl	8001010 <chThdCreateStatic.constprop.0>
 8002c9a:	4606      	mov	r6, r0
 8002c9c:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	6891      	ldr	r1, [r2, #8]
 8002ca2:	4825      	ldr	r0, [pc, #148]	; (8002d38 <rt_test_011_007_execute.lto_priv.0+0xf8>)
 8002ca4:	4a1f      	ldr	r2, [pc, #124]	; (8002d24 <rt_test_011_007_execute.lto_priv.0+0xe4>)
 8002ca6:	3101      	adds	r1, #1
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8002ca8:	60e6      	str	r6, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8002caa:	f7fe f9b1 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8002cae:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8002cb0:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8002cb2:	603b      	str	r3, [r7, #0]
    start = test_wait_tick();
 8002cb4:	f7ff fddc 	bl	8002870 <test_wait_tick>
    n = 0;
 8002cb8:	2400      	movs	r4, #0
    start = test_wait_tick();
 8002cba:	4605      	mov	r5, r0
 8002cbc:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  chSemResetWithMessage(sp, n, MSG_RESET);
 8002cc0:	4e1e      	ldr	r6, [pc, #120]	; (8002d3c <rt_test_011_007_execute.lto_priv.0+0xfc>)
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4630      	mov	r0, r6
 8002cc6:	f7fe f9fb 	bl	80010c0 <chSemResetWithMessage.constprop.0>
 8002cca:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
      n++;
 8002cce:	3401      	adds	r4, #1
 8002cd0:	1b5b      	subs	r3, r3, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002cd8:	d3f3      	bcc.n	8002cc2 <rt_test_011_007_execute.lto_priv.0+0x82>
  test_set_step(3);
 8002cda:	2303      	movs	r3, #3
 8002cdc:	603b      	str	r3, [r7, #0]
    test_terminate_threads();
 8002cde:	f7fd fef7 	bl	8000ad0 <test_terminate_threads>
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4815      	ldr	r0, [pc, #84]	; (8002d3c <rt_test_011_007_execute.lto_priv.0+0xfc>)
 8002ce6:	f7fe f9eb 	bl	80010c0 <chSemResetWithMessage.constprop.0>
    test_wait_threads();
 8002cea:	f7ff ff19 	bl	8002b20 <test_wait_threads>
  test_set_step(4);
 8002cee:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8002cf0:	4813      	ldr	r0, [pc, #76]	; (8002d40 <rt_test_011_007_execute.lto_priv.0+0x100>)
  test_set_step(4);
 8002cf2:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 8002cf4:	f7fe f80c 	bl	8000d10 <test_print>
    test_printn(n);
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f7fd ff39 	bl	8000b70 <test_printn>
    test_printn(n * 6);
 8002cfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    test_print(" reschedules/S, ");
 8002d02:	4810      	ldr	r0, [pc, #64]	; (8002d44 <rt_test_011_007_execute.lto_priv.0+0x104>)
 8002d04:	f7fe f804 	bl	8000d10 <test_print>
    test_printn(n * 6);
 8002d08:	0060      	lsls	r0, r4, #1
 8002d0a:	f7fd ff31 	bl	8000b70 <test_printn>
}
 8002d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8002d12:	480d      	ldr	r0, [pc, #52]	; (8002d48 <rt_test_011_007_execute.lto_priv.0+0x108>)
 8002d14:	f7fd bfdc 	b.w	8000cd0 <test_println>
 8002d18:	20000c88 	.word	0x20000c88
 8002d1c:	20001cf4 	.word	0x20001cf4
 8002d20:	200015e0 	.word	0x200015e0
 8002d24:	08005151 	.word	0x08005151
 8002d28:	20001d0c 	.word	0x20001d0c
 8002d2c:	20001728 	.word	0x20001728
 8002d30:	20001870 	.word	0x20001870
 8002d34:	200019b8 	.word	0x200019b8
 8002d38:	20001b00 	.word	0x20001b00
 8002d3c:	200015c8 	.word	0x200015c8
 8002d40:	0800d2b0 	.word	0x0800d2b0
 8002d44:	0800d2f4 	.word	0x0800d2f4
 8002d48:	0800d2e8 	.word	0x0800d2e8
 8002d4c:	00000000 	.word	0x00000000

08002d50 <rt_test_011_004_execute.lto_priv.0>:
static void rt_test_011_004_execute(void) {
 8002d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8002d54:	2401      	movs	r4, #1
  return ch.rlist.current;
 8002d56:	4b2a      	ldr	r3, [pc, #168]	; (8002e00 <rt_test_011_004_execute.lto_priv.0+0xb0>)
 8002d58:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002e18 <rt_test_011_004_execute.lto_priv.0+0xc8>
  return chThdGetSelfX()->prio;
 8002d5c:	699a      	ldr	r2, [r3, #24]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8002d5e:	4829      	ldr	r0, [pc, #164]	; (8002e04 <rt_test_011_004_execute.lto_priv.0+0xb4>)
 8002d60:	6891      	ldr	r1, [r2, #8]
 8002d62:	2300      	movs	r3, #0
 8002d64:	4421      	add	r1, r4
 8002d66:	4a28      	ldr	r2, [pc, #160]	; (8002e08 <rt_test_011_004_execute.lto_priv.0+0xb8>)
  test_set_step(1);
 8002d68:	f8ca 4000 	str.w	r4, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8002d6c:	f7fe f950 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8002d70:	2202      	movs	r2, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <rt_test_011_004_execute.lto_priv.0+0xbc>)
 8002d74:	4604      	mov	r4, r0
    n = 0;
 8002d76:	2500      	movs	r5, #0
  test_set_step(2);
 8002d78:	f8ca 2000 	str.w	r2, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8002d7c:	6018      	str	r0, [r3, #0]
    start = test_wait_tick();
 8002d7e:	f7ff fd77 	bl	8002870 <test_wait_tick>
      chSchWakeupS(tp, MSG_OK);
 8002d82:	462f      	mov	r7, r5
    start = test_wait_tick();
 8002d84:	4606      	mov	r6, r0
 8002d86:	f04f 0820 	mov.w	r8, #32
 8002d8a:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8002d8e:	f388 8811 	msr	BASEPRI, r8
      chSchWakeupS(tp, MSG_OK);
 8002d92:	2100      	movs	r1, #0
 8002d94:	4620      	mov	r0, r4
 8002d96:	f007 f90b 	bl	8009fb0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f007 f907 	bl	8009fb0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8002da2:	4620      	mov	r0, r4
 8002da4:	2100      	movs	r1, #0
 8002da6:	f007 f903 	bl	8009fb0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8002daa:	4620      	mov	r0, r4
 8002dac:	2100      	movs	r1, #0
 8002dae:	f007 f8ff 	bl	8009fb0 <chSchWakeupS>
 8002db2:	f387 8811 	msr	BASEPRI, r7
 8002db6:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
      n += 4;
 8002dba:	3504      	adds	r5, #4
 8002dbc:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dc4:	d3e3      	bcc.n	8002d8e <rt_test_011_004_execute.lto_priv.0+0x3e>
  test_set_step(3);
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	f8ca 3000 	str.w	r3, [sl]
 8002dcc:	f388 8811 	msr	BASEPRI, r8
    chSchWakeupS(tp, MSG_TIMEOUT);
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f007 f8eb 	bl	8009fb0 <chSchWakeupS>
 8002dda:	f387 8811 	msr	BASEPRI, r7
    test_wait_threads();
 8002dde:	f7ff fe9f 	bl	8002b20 <test_wait_threads>
  test_set_step(4);
 8002de2:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8002de4:	480a      	ldr	r0, [pc, #40]	; (8002e10 <rt_test_011_004_execute.lto_priv.0+0xc0>)
  test_set_step(4);
 8002de6:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 8002dea:	f7fd ff91 	bl	8000d10 <test_print>
    test_printn(n * 2);
 8002dee:	0068      	lsls	r0, r5, #1
 8002df0:	f7fd febe 	bl	8000b70 <test_printn>
}
 8002df4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" ctxswc/S");
 8002df8:	4806      	ldr	r0, [pc, #24]	; (8002e14 <rt_test_011_004_execute.lto_priv.0+0xc4>)
 8002dfa:	f7fd bf69 	b.w	8000cd0 <test_println>
 8002dfe:	bf00      	nop
 8002e00:	20000c88 	.word	0x20000c88
 8002e04:	200015e0 	.word	0x200015e0
 8002e08:	08001351 	.word	0x08001351
 8002e0c:	20001d0c 	.word	0x20001d0c
 8002e10:	0800d2b0 	.word	0x0800d2b0
 8002e14:	0800d2e8 	.word	0x0800d2e8
 8002e18:	20001cf4 	.word	0x20001cf4
 8002e1c:	00000000 	.word	0x00000000

08002e20 <rt_test_010_002_execute.lto_priv.0>:
static void rt_test_010_002_execute(void) {
  unsigned i;
  tprio_t prio;

  /* [10.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8002e20:	2001      	movs	r0, #1
static void rt_test_010_002_execute(void) {
 8002e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e24:	2720      	movs	r7, #32
 8002e26:	2600      	movs	r6, #0
  test_set_step(1);
 8002e28:	4d3d      	ldr	r5, [pc, #244]	; (8002f20 <rt_test_010_002_execute.lto_priv.0+0x100>)
 8002e2a:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <rt_test_010_002_execute.lto_priv.0+0x104>)
 8002e2c:	4a3e      	ldr	r2, [pc, #248]	; (8002f28 <rt_test_010_002_execute.lto_priv.0+0x108>)
 8002e2e:	493f      	ldr	r1, [pc, #252]	; (8002f2c <rt_test_010_002_execute.lto_priv.0+0x10c>)
 8002e30:	6028      	str	r0, [r5, #0]
  {
    for (i = 0; i < 4; i++)
 8002e32:	f103 040c 	add.w	r4, r3, #12
 8002e36:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 8002e3a:	6808      	ldr	r0, [r1, #0]
 8002e3c:	6010      	str	r0, [r2, #0]
  mp->next = php;
 8002e3e:	600a      	str	r2, [r1, #0]
 8002e40:	f386 8811 	msr	BASEPRI, r6
 8002e44:	429c      	cmp	r4, r3
 8002e46:	d002      	beq.n	8002e4e <rt_test_010_002_execute.lto_priv.0+0x2e>
 8002e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e4c:	e7f3      	b.n	8002e36 <rt_test_010_002_execute.lto_priv.0+0x16>
    prio = chThdGetPriorityX();
  }
  test_end_step(2);

  /* [10.2.3] Creating the five threads.*/
  test_set_step(3);
 8002e4e:	2303      	movs	r3, #3
  return ch.rlist.current;
 8002e50:	4937      	ldr	r1, [pc, #220]	; (8002f30 <rt_test_010_002_execute.lto_priv.0+0x110>)
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8002e52:	4a38      	ldr	r2, [pc, #224]	; (8002f34 <rt_test_010_002_execute.lto_priv.0+0x114>)
  return chThdGetSelfX()->prio;
 8002e54:	6989      	ldr	r1, [r1, #24]
 8002e56:	4838      	ldr	r0, [pc, #224]	; (8002f38 <rt_test_010_002_execute.lto_priv.0+0x118>)
 8002e58:	688e      	ldr	r6, [r1, #8]
  test_set_step(3);
 8002e5a:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8002e5c:	1e71      	subs	r1, r6, #1
 8002e5e:	f7fe fbe7 	bl	8001630 <chThdCreateFromMemoryPool.constprop.0>
 8002e62:	4603      	mov	r3, r0
 8002e64:	4c35      	ldr	r4, [pc, #212]	; (8002f3c <rt_test_010_002_execute.lto_priv.0+0x11c>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8002e66:	1eb1      	subs	r1, r6, #2
 8002e68:	4a35      	ldr	r2, [pc, #212]	; (8002f40 <rt_test_010_002_execute.lto_priv.0+0x120>)
 8002e6a:	4836      	ldr	r0, [pc, #216]	; (8002f44 <rt_test_010_002_execute.lto_priv.0+0x124>)
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8002e6c:	6023      	str	r3, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8002e6e:	f7fe fbdf 	bl	8001630 <chThdCreateFromMemoryPool.constprop.0>
 8002e72:	4603      	mov	r3, r0
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8002e74:	1ef1      	subs	r1, r6, #3
 8002e76:	4a34      	ldr	r2, [pc, #208]	; (8002f48 <rt_test_010_002_execute.lto_priv.0+0x128>)
 8002e78:	4834      	ldr	r0, [pc, #208]	; (8002f4c <rt_test_010_002_execute.lto_priv.0+0x12c>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8002e7a:	6063      	str	r3, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8002e7c:	f7fe fbd8 	bl	8001630 <chThdCreateFromMemoryPool.constprop.0>
 8002e80:	4603      	mov	r3, r0
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8002e82:	1f31      	subs	r1, r6, #4
 8002e84:	4a32      	ldr	r2, [pc, #200]	; (8002f50 <rt_test_010_002_execute.lto_priv.0+0x130>)
 8002e86:	4833      	ldr	r0, [pc, #204]	; (8002f54 <rt_test_010_002_execute.lto_priv.0+0x134>)
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8002e88:	60a3      	str	r3, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8002e8a:	f7fe fbd1 	bl	8001630 <chThdCreateFromMemoryPool.constprop.0>
 8002e8e:	4603      	mov	r3, r0
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8002e90:	4a31      	ldr	r2, [pc, #196]	; (8002f58 <rt_test_010_002_execute.lto_priv.0+0x138>)
 8002e92:	1f71      	subs	r1, r6, #5
 8002e94:	4831      	ldr	r0, [pc, #196]	; (8002f5c <rt_test_010_002_execute.lto_priv.0+0x13c>)
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8002e96:	60e3      	str	r3, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8002e98:	f7fe fbca 	bl	8001630 <chThdCreateFromMemoryPool.constprop.0>
  }
  test_end_step(3);

  /* [10.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
 8002e9c:	2204      	movs	r2, #4
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8002e9e:	4606      	mov	r6, r0
  {
    test_assert((threads[0] != NULL) &&
 8002ea0:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8002ea2:	6126      	str	r6, [r4, #16]
  test_set_step(4);
 8002ea4:	602a      	str	r2, [r5, #0]
    test_assert((threads[0] != NULL) &&
 8002ea6:	b138      	cbz	r0, 8002eb8 <rt_test_010_002_execute.lto_priv.0+0x98>
 8002ea8:	6860      	ldr	r0, [r4, #4]
 8002eaa:	b128      	cbz	r0, 8002eb8 <rt_test_010_002_execute.lto_priv.0+0x98>
 8002eac:	68a0      	ldr	r0, [r4, #8]
 8002eae:	b118      	cbz	r0, 8002eb8 <rt_test_010_002_execute.lto_priv.0+0x98>
 8002eb0:	68e0      	ldr	r0, [r4, #12]
 8002eb2:	3800      	subs	r0, #0
 8002eb4:	bf18      	it	ne
 8002eb6:	2001      	movne	r0, #1
 8002eb8:	4929      	ldr	r1, [pc, #164]	; (8002f60 <rt_test_010_002_execute.lto_priv.0+0x140>)
 8002eba:	f7fd fdc1 	bl	8000a40 <_test_assert>
 8002ebe:	b100      	cbz	r0, 8002ec2 <rt_test_010_002_execute.lto_priv.0+0xa2>
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
  test_end_step(6);
}
 8002ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(threads[4] == NULL,
 8002ec2:	fab6 f086 	clz	r0, r6
 8002ec6:	4927      	ldr	r1, [pc, #156]	; (8002f64 <rt_test_010_002_execute.lto_priv.0+0x144>)
 8002ec8:	0940      	lsrs	r0, r0, #5
 8002eca:	f7fd fdb9 	bl	8000a40 <_test_assert>
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	d1f6      	bne.n	8002ec0 <rt_test_010_002_execute.lto_priv.0+0xa0>
  test_set_step(5);
 8002ed2:	2305      	movs	r3, #5
 8002ed4:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 8002ed6:	f7ff fe23 	bl	8002b20 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8002eda:	4923      	ldr	r1, [pc, #140]	; (8002f68 <rt_test_010_002_execute.lto_priv.0+0x148>)
 8002edc:	4823      	ldr	r0, [pc, #140]	; (8002f6c <rt_test_010_002_execute.lto_priv.0+0x14c>)
 8002ede:	f7fd ff2f 	bl	8000d40 <_test_assert_sequence>
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d1ec      	bne.n	8002ec0 <rt_test_010_002_execute.lto_priv.0+0xa0>
  test_set_step(6);
 8002ee6:	2306      	movs	r3, #6
 8002ee8:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8002eea:	4f10      	ldr	r7, [pc, #64]	; (8002f2c <rt_test_010_002_execute.lto_priv.0+0x10c>)
 8002eec:	4e20      	ldr	r6, [pc, #128]	; (8002f70 <rt_test_010_002_execute.lto_priv.0+0x150>)
  test_set_step(6);
 8002eee:	602b      	str	r3, [r5, #0]
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8002ef0:	4638      	mov	r0, r7
 8002ef2:	f006 feed 	bl	8009cd0 <chPoolAlloc>
 8002ef6:	3800      	subs	r0, #0
 8002ef8:	bf18      	it	ne
 8002efa:	2001      	movne	r0, #1
 8002efc:	4631      	mov	r1, r6
 8002efe:	f7fd fd9f 	bl	8000a40 <_test_assert>
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d1dc      	bne.n	8002ec0 <rt_test_010_002_execute.lto_priv.0+0xa0>
    for (i = 0; i < 4; i++)
 8002f06:	3c01      	subs	r4, #1
 8002f08:	d1f2      	bne.n	8002ef0 <rt_test_010_002_execute.lto_priv.0+0xd0>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8002f0a:	4808      	ldr	r0, [pc, #32]	; (8002f2c <rt_test_010_002_execute.lto_priv.0+0x10c>)
 8002f0c:	f006 fee0 	bl	8009cd0 <chPoolAlloc>
}
 8002f10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8002f14:	fab0 f080 	clz	r0, r0
 8002f18:	4916      	ldr	r1, [pc, #88]	; (8002f74 <rt_test_010_002_execute.lto_priv.0+0x154>)
 8002f1a:	0940      	lsrs	r0, r0, #5
 8002f1c:	f7fd bd90 	b.w	8000a40 <_test_assert>
 8002f20:	20001cf4 	.word	0x20001cf4
 8002f24:	0800e0a8 	.word	0x0800e0a8
 8002f28:	200015e0 	.word	0x200015e0
 8002f2c:	20001488 	.word	0x20001488
 8002f30:	20000c88 	.word	0x20000c88
 8002f34:	0800d2a8 	.word	0x0800d2a8
 8002f38:	0800d308 	.word	0x0800d308
 8002f3c:	20001d0c 	.word	0x20001d0c
 8002f40:	0800d2ac 	.word	0x0800d2ac
 8002f44:	0800d310 	.word	0x0800d310
 8002f48:	0800d318 	.word	0x0800d318
 8002f4c:	0800d31c 	.word	0x0800d31c
 8002f50:	0800ed00 	.word	0x0800ed00
 8002f54:	0800d324 	.word	0x0800d324
 8002f58:	0800d398 	.word	0x0800d398
 8002f5c:	0800d32c 	.word	0x0800d32c
 8002f60:	0800d334 	.word	0x0800d334
 8002f64:	0800d34c 	.word	0x0800d34c
 8002f68:	0800d288 	.word	0x0800d288
 8002f6c:	0800d368 	.word	0x0800d368
 8002f70:	0800d370 	.word	0x0800d370
 8002f74:	0800d380 	.word	0x0800d380
	...

08002f80 <rt_test_007_009_execute.lto_priv.0>:

static void rt_test_007_009_execute(void) {
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  test_end_step(1);

  /* [7.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8002f82:	2502      	movs	r5, #2
  return ch.rlist.current;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <rt_test_007_009_execute.lto_priv.0+0x7c>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8002f86:	4e1e      	ldr	r6, [pc, #120]	; (8003000 <rt_test_007_009_execute.lto_priv.0+0x80>)
  return chThdGetSelfX()->prio;
 8002f88:	699b      	ldr	r3, [r3, #24]
  test_set_step(2);
 8002f8a:	4c1e      	ldr	r4, [pc, #120]	; (8003004 <rt_test_007_009_execute.lto_priv.0+0x84>)
 8002f8c:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8002f8e:	4630      	mov	r0, r6
 8002f90:	1c79      	adds	r1, r7, #1
 8002f92:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <rt_test_007_009_execute.lto_priv.0+0x88>)
 8002f94:	4a1d      	ldr	r2, [pc, #116]	; (800300c <rt_test_007_009_execute.lto_priv.0+0x8c>)
  test_set_step(2);
 8002f96:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8002f98:	f7fe f83a 	bl	8001010 <chThdCreateStatic.constprop.0>
 8002f9c:	4602      	mov	r2, r0
  }
  test_end_step(2);

  /* [7.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8002f9e:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8002fa2:	4d1b      	ldr	r5, [pc, #108]	; (8003010 <rt_test_007_009_execute.lto_priv.0+0x90>)
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8002fa4:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8002fa6:	602a      	str	r2, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <rt_test_007_009_execute.lto_priv.0+0x94>)
 8002faa:	4a1b      	ldr	r2, [pc, #108]	; (8003018 <rt_test_007_009_execute.lto_priv.0+0x98>)
 8002fac:	f506 70a4 	add.w	r0, r6, #328	; 0x148
  test_set_step(3);
 8002fb0:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8002fb4:	f7fe f82c 	bl	8001010 <chThdCreateStatic.constprop.0>
  }
  test_end_step(3);

  /* [7.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
 8002fb8:	f04f 0c04 	mov.w	ip, #4
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8002fbc:	4686      	mov	lr, r0
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8002fbe:	1cf9      	adds	r1, r7, #3
 8002fc0:	4a16      	ldr	r2, [pc, #88]	; (800301c <rt_test_007_009_execute.lto_priv.0+0x9c>)
 8002fc2:	4b17      	ldr	r3, [pc, #92]	; (8003020 <rt_test_007_009_execute.lto_priv.0+0xa0>)
 8002fc4:	f506 7024 	add.w	r0, r6, #656	; 0x290
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8002fc8:	f8c5 e004 	str.w	lr, [r5, #4]
  test_set_step(4);
 8002fcc:	f8c4 c000 	str.w	ip, [r4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8002fd0:	f7fe f81e 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_end_step(4);

  /* [7.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8002fd4:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8002fd6:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 8002fd8:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8002fda:	f7fe f859 	bl	8001090 <chCondSignal.constprop.0>
  }
  test_end_step(5);

  /* [7.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8002fde:	2306      	movs	r3, #6
 8002fe0:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8002fe2:	f7fe f855 	bl	8001090 <chCondSignal.constprop.0>
  }
  test_end_step(6);

  /* [7.9.7] Checking the order of operations.*/
  test_set_step(7);
 8002fe6:	2307      	movs	r3, #7
 8002fe8:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 8002fea:	f7ff fd99 	bl	8002b20 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
  }
  test_end_step(7);
}
 8002fee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8002ff2:	490c      	ldr	r1, [pc, #48]	; (8003024 <rt_test_007_009_execute.lto_priv.0+0xa4>)
 8002ff4:	480c      	ldr	r0, [pc, #48]	; (8003028 <rt_test_007_009_execute.lto_priv.0+0xa8>)
 8002ff6:	f7fd bea3 	b.w	8000d40 <_test_assert_sequence>
 8002ffa:	bf00      	nop
 8002ffc:	20000c88 	.word	0x20000c88
 8003000:	200015e0 	.word	0x200015e0
 8003004:	20001cf4 	.word	0x20001cf4
 8003008:	0800d2a8 	.word	0x0800d2a8
 800300c:	08005c01 	.word	0x08005c01
 8003010:	20001d0c 	.word	0x20001d0c
 8003014:	0800d318 	.word	0x0800d318
 8003018:	08005c91 	.word	0x08005c91
 800301c:	08001381 	.word	0x08001381
 8003020:	0800d2ac 	.word	0x0800d2ac
 8003024:	0800d288 	.word	0x0800d288
 8003028:	0800d29c 	.word	0x0800d29c
 800302c:	00000000 	.word	0x00000000

08003030 <rt_test_007_008_execute.lto_priv.0>:
static void rt_test_007_008_execute(void) {
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8003032:	2401      	movs	r4, #1
  return ch.rlist.current;
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <rt_test_007_008_execute.lto_priv.0+0xa4>)
 8003036:	4e28      	ldr	r6, [pc, #160]	; (80030d8 <rt_test_007_008_execute.lto_priv.0+0xa8>)
  return chThdGetSelfX()->prio;
 8003038:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800303a:	4828      	ldr	r0, [pc, #160]	; (80030dc <rt_test_007_008_execute.lto_priv.0+0xac>)
 800303c:	6895      	ldr	r5, [r2, #8]
 800303e:	4b28      	ldr	r3, [pc, #160]	; (80030e0 <rt_test_007_008_execute.lto_priv.0+0xb0>)
 8003040:	1929      	adds	r1, r5, r4
 8003042:	4a28      	ldr	r2, [pc, #160]	; (80030e4 <rt_test_007_008_execute.lto_priv.0+0xb4>)
  test_set_step(1);
 8003044:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8003046:	f7fd ffe3 	bl	8001010 <chThdCreateStatic.constprop.0>
 800304a:	4607      	mov	r7, r0
 800304c:	4c26      	ldr	r4, [pc, #152]	; (80030e8 <rt_test_007_008_execute.lto_priv.0+0xb8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800304e:	1ca9      	adds	r1, r5, #2
 8003050:	4b26      	ldr	r3, [pc, #152]	; (80030ec <rt_test_007_008_execute.lto_priv.0+0xbc>)
 8003052:	4a24      	ldr	r2, [pc, #144]	; (80030e4 <rt_test_007_008_execute.lto_priv.0+0xb4>)
 8003054:	4826      	ldr	r0, [pc, #152]	; (80030f0 <rt_test_007_008_execute.lto_priv.0+0xc0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8003056:	6027      	str	r7, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8003058:	f7fd ffda 	bl	8001010 <chThdCreateStatic.constprop.0>
 800305c:	4607      	mov	r7, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800305e:	1ce9      	adds	r1, r5, #3
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <rt_test_007_008_execute.lto_priv.0+0xc4>)
 8003062:	4a20      	ldr	r2, [pc, #128]	; (80030e4 <rt_test_007_008_execute.lto_priv.0+0xb4>)
 8003064:	4824      	ldr	r0, [pc, #144]	; (80030f8 <rt_test_007_008_execute.lto_priv.0+0xc8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8003066:	6067      	str	r7, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8003068:	f7fd ffd2 	bl	8001010 <chThdCreateStatic.constprop.0>
 800306c:	4607      	mov	r7, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800306e:	1d29      	adds	r1, r5, #4
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <rt_test_007_008_execute.lto_priv.0+0xcc>)
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <rt_test_007_008_execute.lto_priv.0+0xb4>)
 8003074:	4822      	ldr	r0, [pc, #136]	; (8003100 <rt_test_007_008_execute.lto_priv.0+0xd0>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8003076:	60a7      	str	r7, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8003078:	f7fd ffca 	bl	8001010 <chThdCreateStatic.constprop.0>
 800307c:	4607      	mov	r7, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800307e:	4b21      	ldr	r3, [pc, #132]	; (8003104 <rt_test_007_008_execute.lto_priv.0+0xd4>)
 8003080:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <rt_test_007_008_execute.lto_priv.0+0xb4>)
 8003082:	1d69      	adds	r1, r5, #5
 8003084:	4820      	ldr	r0, [pc, #128]	; (8003108 <rt_test_007_008_execute.lto_priv.0+0xd8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8003086:	60e7      	str	r7, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8003088:	f7fd ffc2 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800308c:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800308e:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8003090:	6033      	str	r3, [r6, #0]
 8003092:	2320      	movs	r3, #32
 8003094:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8003098:	4c1c      	ldr	r4, [pc, #112]	; (800310c <rt_test_007_008_execute.lto_priv.0+0xdc>)
 800309a:	6823      	ldr	r3, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
 800309c:	42a3      	cmp	r3, r4
 800309e:	d00b      	beq.n	80030b8 <rt_test_007_008_execute.lto_priv.0+0x88>
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 80030a0:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 80030a8:	6054      	str	r4, [r2, #4]
  tqp->next             = tp->queue.next;
 80030aa:	6022      	str	r2, [r4, #0]
 80030ac:	f007 f870 	bl	800a190 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
 80030b4:	42a3      	cmp	r3, r4
 80030b6:	d1f5      	bne.n	80030a4 <rt_test_007_008_execute.lto_priv.0+0x74>
  chSchRescheduleS();
 80030b8:	f006 ff52 	bl	8009f60 <chSchRescheduleS>
 80030bc:	2300      	movs	r3, #0
 80030be:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 80030c2:	f7ff fd2d 	bl	8002b20 <test_wait_threads>
}
 80030c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80030ca:	4911      	ldr	r1, [pc, #68]	; (8003110 <rt_test_007_008_execute.lto_priv.0+0xe0>)
 80030cc:	4811      	ldr	r0, [pc, #68]	; (8003114 <rt_test_007_008_execute.lto_priv.0+0xe4>)
 80030ce:	f7fd be37 	b.w	8000d40 <_test_assert_sequence>
 80030d2:	bf00      	nop
 80030d4:	20000c88 	.word	0x20000c88
 80030d8:	20001cf4 	.word	0x20001cf4
 80030dc:	200015e0 	.word	0x200015e0
 80030e0:	0800d398 	.word	0x0800d398
 80030e4:	08005c91 	.word	0x08005c91
 80030e8:	20001d0c 	.word	0x20001d0c
 80030ec:	0800ed00 	.word	0x0800ed00
 80030f0:	20001728 	.word	0x20001728
 80030f4:	0800d318 	.word	0x0800d318
 80030f8:	20001870 	.word	0x20001870
 80030fc:	0800d2ac 	.word	0x0800d2ac
 8003100:	200019b8 	.word	0x200019b8
 8003104:	0800d2a8 	.word	0x0800d2a8
 8003108:	20001b00 	.word	0x20001b00
 800310c:	20000800 	.word	0x20000800
 8003110:	0800d288 	.word	0x0800d288
 8003114:	0800d394 	.word	0x0800d394
	...

08003120 <rt_test_007_007_execute.lto_priv.0>:
static void rt_test_007_007_execute(void) {
 8003120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8003124:	2401      	movs	r4, #1
  return ch.rlist.current;
 8003126:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <rt_test_007_007_execute.lto_priv.0+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8003128:	4e2b      	ldr	r6, [pc, #172]	; (80031d8 <rt_test_007_007_execute.lto_priv.0+0xb8>)
  return chThdGetSelfX()->prio;
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	4d2b      	ldr	r5, [pc, #172]	; (80031dc <rt_test_007_007_execute.lto_priv.0+0xbc>)
 800312e:	689f      	ldr	r7, [r3, #8]
  test_set_step(1);
 8003130:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8003200 <rt_test_007_007_execute.lto_priv.0+0xe0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8003134:	1939      	adds	r1, r7, r4
 8003136:	4632      	mov	r2, r6
 8003138:	4628      	mov	r0, r5
 800313a:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <rt_test_007_007_execute.lto_priv.0+0xc0>)
  test_set_step(1);
 800313c:	f8c8 4000 	str.w	r4, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8003140:	f7fd ff66 	bl	8001010 <chThdCreateStatic.constprop.0>
 8003144:	4684      	mov	ip, r0
 8003146:	4c27      	ldr	r4, [pc, #156]	; (80031e4 <rt_test_007_007_execute.lto_priv.0+0xc4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8003148:	4632      	mov	r2, r6
 800314a:	1cb9      	adds	r1, r7, #2
 800314c:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <rt_test_007_007_execute.lto_priv.0+0xc8>)
 800314e:	f505 70a4 	add.w	r0, r5, #328	; 0x148
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8003152:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8003156:	f7fd ff5b 	bl	8001010 <chThdCreateStatic.constprop.0>
 800315a:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800315c:	4632      	mov	r2, r6
 800315e:	1cf9      	adds	r1, r7, #3
 8003160:	4b22      	ldr	r3, [pc, #136]	; (80031ec <rt_test_007_007_execute.lto_priv.0+0xcc>)
 8003162:	f505 7024 	add.w	r0, r5, #656	; 0x290
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8003166:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800316a:	f7fd ff51 	bl	8001010 <chThdCreateStatic.constprop.0>
 800316e:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8003170:	4632      	mov	r2, r6
 8003172:	1d39      	adds	r1, r7, #4
 8003174:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <rt_test_007_007_execute.lto_priv.0+0xd0>)
 8003176:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800317a:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800317e:	f7fd ff47 	bl	8001010 <chThdCreateStatic.constprop.0>
 8003182:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8003184:	4632      	mov	r2, r6
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <rt_test_007_007_execute.lto_priv.0+0xd4>)
 8003188:	1d79      	adds	r1, r7, #5
 800318a:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800318e:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8003192:	f7fd ff3d 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8003196:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8003198:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 800319a:	f8c8 3000 	str.w	r3, [r8]
 800319e:	2320      	movs	r3, #32
 80031a0:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
 80031a4:	f7fd ff24 	bl	8000ff0 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 80031a8:	f7fd ff22 	bl	8000ff0 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 80031ac:	f7fd ff20 	bl	8000ff0 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 80031b0:	f7fd ff1e 	bl	8000ff0 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 80031b4:	f7fd ff1c 	bl	8000ff0 <chCondSignalI.constprop.0>
    chSchRescheduleS();
 80031b8:	f006 fed2 	bl	8009f60 <chSchRescheduleS>
 80031bc:	2300      	movs	r3, #0
 80031be:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 80031c2:	f7ff fcad 	bl	8002b20 <test_wait_threads>
}
 80031c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80031ca:	490b      	ldr	r1, [pc, #44]	; (80031f8 <rt_test_007_007_execute.lto_priv.0+0xd8>)
 80031cc:	480b      	ldr	r0, [pc, #44]	; (80031fc <rt_test_007_007_execute.lto_priv.0+0xdc>)
 80031ce:	f7fd bdb7 	b.w	8000d40 <_test_assert_sequence>
 80031d2:	bf00      	nop
 80031d4:	20000c88 	.word	0x20000c88
 80031d8:	08005c91 	.word	0x08005c91
 80031dc:	200015e0 	.word	0x200015e0
 80031e0:	0800d398 	.word	0x0800d398
 80031e4:	20001d0c 	.word	0x20001d0c
 80031e8:	0800ed00 	.word	0x0800ed00
 80031ec:	0800d318 	.word	0x0800d318
 80031f0:	0800d2ac 	.word	0x0800d2ac
 80031f4:	0800d2a8 	.word	0x0800d2a8
 80031f8:	0800d288 	.word	0x0800d288
 80031fc:	0800d394 	.word	0x0800d394
 8003200:	20001cf4 	.word	0x20001cf4
	...

08003210 <rt_test_006_006_teardown.lto_priv.0>:
 *   must not change from "not taken".
 * .
 */

static void rt_test_006_006_teardown(void) {
  test_wait_threads();
 8003210:	f7ff bc86 	b.w	8002b20 <test_wait_threads>
	...

08003220 <rt_test_007_004_teardown.lto_priv.0>:
 8003220:	f7ff bc7e 	b.w	8002b20 <test_wait_threads>
	...

08003230 <rt_test_007_001_execute.lto_priv.0>:
static void rt_test_007_001_execute(void) {
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(2);
 8003232:	2302      	movs	r3, #2
  test_set_step(3);
 8003234:	2503      	movs	r5, #3
  return ch.rlist.current;
 8003236:	4f27      	ldr	r7, [pc, #156]	; (80032d4 <rt_test_007_001_execute.lto_priv.0+0xa4>)
  test_set_step(2);
 8003238:	4e27      	ldr	r6, [pc, #156]	; (80032d8 <rt_test_007_001_execute.lto_priv.0+0xa8>)
  return chThdGetSelfX()->prio;
 800323a:	69ba      	ldr	r2, [r7, #24]
    chMtxLock(&m1);
 800323c:	4827      	ldr	r0, [pc, #156]	; (80032dc <rt_test_007_001_execute.lto_priv.0+0xac>)
 800323e:	6894      	ldr	r4, [r2, #8]
  test_set_step(2);
 8003240:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8003242:	f007 f8dd 	bl	800a400 <chMtxLock>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8003246:	4b26      	ldr	r3, [pc, #152]	; (80032e0 <rt_test_007_001_execute.lto_priv.0+0xb0>)
 8003248:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <rt_test_007_001_execute.lto_priv.0+0xb4>)
 800324a:	1c61      	adds	r1, r4, #1
 800324c:	4826      	ldr	r0, [pc, #152]	; (80032e8 <rt_test_007_001_execute.lto_priv.0+0xb8>)
  test_set_step(3);
 800324e:	6035      	str	r5, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8003250:	f7fd fede 	bl	8001010 <chThdCreateStatic.constprop.0>
 8003254:	4684      	mov	ip, r0
 8003256:	4d25      	ldr	r5, [pc, #148]	; (80032ec <rt_test_007_001_execute.lto_priv.0+0xbc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <rt_test_007_001_execute.lto_priv.0+0xc0>)
 800325a:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <rt_test_007_001_execute.lto_priv.0+0xb4>)
 800325c:	1ca1      	adds	r1, r4, #2
 800325e:	4825      	ldr	r0, [pc, #148]	; (80032f4 <rt_test_007_001_execute.lto_priv.0+0xc4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8003260:	f8c5 c000 	str.w	ip, [r5]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8003264:	f7fd fed4 	bl	8001010 <chThdCreateStatic.constprop.0>
 8003268:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800326a:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <rt_test_007_001_execute.lto_priv.0+0xc8>)
 800326c:	4a1d      	ldr	r2, [pc, #116]	; (80032e4 <rt_test_007_001_execute.lto_priv.0+0xb4>)
 800326e:	1ce1      	adds	r1, r4, #3
 8003270:	4822      	ldr	r0, [pc, #136]	; (80032fc <rt_test_007_001_execute.lto_priv.0+0xcc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8003272:	f8c5 c004 	str.w	ip, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8003276:	f7fd fecb 	bl	8001010 <chThdCreateStatic.constprop.0>
 800327a:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <rt_test_007_001_execute.lto_priv.0+0xd0>)
 800327e:	4a19      	ldr	r2, [pc, #100]	; (80032e4 <rt_test_007_001_execute.lto_priv.0+0xb4>)
 8003280:	1d21      	adds	r1, r4, #4
 8003282:	4820      	ldr	r0, [pc, #128]	; (8003304 <rt_test_007_001_execute.lto_priv.0+0xd4>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8003284:	f8c5 c008 	str.w	ip, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8003288:	f7fd fec2 	bl	8001010 <chThdCreateStatic.constprop.0>
 800328c:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800328e:	1d61      	adds	r1, r4, #5
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <rt_test_007_001_execute.lto_priv.0+0xd8>)
 8003292:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <rt_test_007_001_execute.lto_priv.0+0xb4>)
 8003294:	481d      	ldr	r0, [pc, #116]	; (800330c <rt_test_007_001_execute.lto_priv.0+0xdc>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8003296:	f8c5 c00c 	str.w	ip, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800329a:	f7fd feb9 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(4);
 800329e:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80032a0:	4602      	mov	r2, r0
    chMtxUnlock(&m1);
 80032a2:	480e      	ldr	r0, [pc, #56]	; (80032dc <rt_test_007_001_execute.lto_priv.0+0xac>)
  test_set_step(4);
 80032a4:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80032a6:	612a      	str	r2, [r5, #16]
    chMtxUnlock(&m1);
 80032a8:	f007 f81a 	bl	800a2e0 <chMtxUnlock>
    test_wait_threads();
 80032ac:	f7ff fc38 	bl	8002b20 <test_wait_threads>
 80032b0:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 80032b2:	4917      	ldr	r1, [pc, #92]	; (8003310 <rt_test_007_001_execute.lto_priv.0+0xe0>)
 80032b4:	6898      	ldr	r0, [r3, #8]
 80032b6:	1b00      	subs	r0, r0, r4
 80032b8:	fab0 f080 	clz	r0, r0
 80032bc:	0940      	lsrs	r0, r0, #5
 80032be:	f7fd fbbf 	bl	8000a40 <_test_assert>
 80032c2:	b100      	cbz	r0, 80032c6 <rt_test_007_001_execute.lto_priv.0+0x96>
}
 80032c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert_sequence("ABCDE", "invalid sequence");
 80032c6:	4913      	ldr	r1, [pc, #76]	; (8003314 <rt_test_007_001_execute.lto_priv.0+0xe4>)
 80032c8:	4813      	ldr	r0, [pc, #76]	; (8003318 <rt_test_007_001_execute.lto_priv.0+0xe8>)
}
 80032ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80032ce:	f7fd bd37 	b.w	8000d40 <_test_assert_sequence>
 80032d2:	bf00      	nop
 80032d4:	20000c88 	.word	0x20000c88
 80032d8:	20001cf4 	.word	0x20001cf4
 80032dc:	20000854 	.word	0x20000854
 80032e0:	0800d398 	.word	0x0800d398
 80032e4:	08001501 	.word	0x08001501
 80032e8:	200015e0 	.word	0x200015e0
 80032ec:	20001d0c 	.word	0x20001d0c
 80032f0:	0800ed00 	.word	0x0800ed00
 80032f4:	20001728 	.word	0x20001728
 80032f8:	0800d318 	.word	0x0800d318
 80032fc:	20001870 	.word	0x20001870
 8003300:	0800d2ac 	.word	0x0800d2ac
 8003304:	200019b8 	.word	0x200019b8
 8003308:	0800d2a8 	.word	0x0800d2a8
 800330c:	20001b00 	.word	0x20001b00
 8003310:	0800c60c 	.word	0x0800c60c
 8003314:	0800d288 	.word	0x0800d288
 8003318:	0800d394 	.word	0x0800d394
 800331c:	00000000 	.word	0x00000000

08003320 <rt_test_006_005_teardown.lto_priv.0>:
 8003320:	f7ff bbfe 	b.w	8002b20 <test_wait_threads>
	...

08003330 <rt_test_006_004_execute.lto_priv.0>:
static void rt_test_006_004_execute(void) {
 8003330:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8003332:	2501      	movs	r5, #1
  return ch.rlist.current;
 8003334:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <rt_test_006_004_execute.lto_priv.0+0x90>)
 8003336:	4c23      	ldr	r4, [pc, #140]	; (80033c4 <rt_test_006_004_execute.lto_priv.0+0x94>)
  return chThdGetSelfX()->prio;
 8003338:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800333a:	4823      	ldr	r0, [pc, #140]	; (80033c8 <rt_test_006_004_execute.lto_priv.0+0x98>)
 800333c:	6891      	ldr	r1, [r2, #8]
 800333e:	4b23      	ldr	r3, [pc, #140]	; (80033cc <rt_test_006_004_execute.lto_priv.0+0x9c>)
 8003340:	4429      	add	r1, r5
 8003342:	4a23      	ldr	r2, [pc, #140]	; (80033d0 <rt_test_006_004_execute.lto_priv.0+0xa0>)
  test_set_step(1);
 8003344:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8003346:	f7fd fe63 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800334a:	2502      	movs	r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800334c:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <rt_test_006_004_execute.lto_priv.0+0xa4>)
  test_set_step(2);
 800334e:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8003350:	6018      	str	r0, [r3, #0]
 8003352:	2320      	movs	r3, #32
 8003354:	f383 8811 	msr	BASEPRI, r3
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8003358:	2600      	movs	r6, #0
 800335a:	4c1f      	ldr	r4, [pc, #124]	; (80033d8 <rt_test_006_004_execute.lto_priv.0+0xa8>)
 800335c:	e002      	b.n	8003364 <rt_test_006_004_execute.lto_priv.0+0x34>
  while (n > (cnt_t)0) {
 800335e:	2d01      	cmp	r5, #1
 8003360:	d00e      	beq.n	8003380 <rt_test_006_004_execute.lto_priv.0+0x50>
 8003362:	2501      	movs	r5, #1
    if (++sp->cnt <= (cnt_t)0) {
 8003364:	68a3      	ldr	r3, [r4, #8]
 8003366:	3301      	adds	r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	60a3      	str	r3, [r4, #8]
 800336c:	dcf7      	bgt.n	800335e <rt_test_006_004_execute.lto_priv.0+0x2e>
  thread_t *tp = tqp->next;
 800336e:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8003370:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003372:	605c      	str	r4, [r3, #4]
  tqp->next             = tp->queue.next;
 8003374:	6023      	str	r3, [r4, #0]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8003376:	f006 ff0b 	bl	800a190 <chSchReadyI>
  while (n > (cnt_t)0) {
 800337a:	2d01      	cmp	r5, #1
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800337c:	6246      	str	r6, [r0, #36]	; 0x24
  while (n > (cnt_t)0) {
 800337e:	d1f0      	bne.n	8003362 <rt_test_006_004_execute.lto_priv.0+0x32>
    chSchRescheduleS();
 8003380:	f006 fdee 	bl	8009f60 <chSchRescheduleS>
 8003384:	2500      	movs	r5, #0
 8003386:	f385 8811 	msr	BASEPRI, r5
    test_wait_threads();
 800338a:	f7ff fbc9 	bl	8002b20 <test_wait_threads>
 800338e:	2320      	movs	r3, #32
 8003390:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 8003394:	68a0      	ldr	r0, [r4, #8]
 8003396:	4911      	ldr	r1, [pc, #68]	; (80033dc <rt_test_006_004_execute.lto_priv.0+0xac>)
 8003398:	f1a0 0001 	sub.w	r0, r0, #1
 800339c:	fab0 f080 	clz	r0, r0
 80033a0:	0940      	lsrs	r0, r0, #5
 80033a2:	f7fd fb4d 	bl	8000a40 <_test_assert>
 80033a6:	b110      	cbz	r0, 80033ae <rt_test_006_004_execute.lto_priv.0+0x7e>
 80033a8:	f385 8811 	msr	BASEPRI, r5
}
 80033ac:	bd70      	pop	{r4, r5, r6, pc}
 80033ae:	f380 8811 	msr	BASEPRI, r0
    test_assert_sequence("A", "invalid sequence");
 80033b2:	490b      	ldr	r1, [pc, #44]	; (80033e0 <rt_test_006_004_execute.lto_priv.0+0xb0>)
 80033b4:	4805      	ldr	r0, [pc, #20]	; (80033cc <rt_test_006_004_execute.lto_priv.0+0x9c>)
}
 80033b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
 80033ba:	f7fd bcc1 	b.w	8000d40 <_test_assert_sequence>
 80033be:	bf00      	nop
 80033c0:	20000c88 	.word	0x20000c88
 80033c4:	20001cf4 	.word	0x20001cf4
 80033c8:	200015e0 	.word	0x200015e0
 80033cc:	0800d2a8 	.word	0x0800d2a8
 80033d0:	08005361 	.word	0x08005361
 80033d4:	20001d0c 	.word	0x20001d0c
 80033d8:	200015bc 	.word	0x200015bc
 80033dc:	0800d39c 	.word	0x0800d39c
 80033e0:	0800d288 	.word	0x0800d288
	...

080033f0 <rt_test_006_003_execute.lto_priv.0>:
  test_set_step(1);
 80033f0:	2001      	movs	r0, #1
static void rt_test_006_003_execute(void) {
 80033f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80033f6:	4d4c      	ldr	r5, [pc, #304]	; (8003528 <rt_test_006_003_execute.lto_priv.0+0x138>)
 80033f8:	2320      	movs	r3, #32
 80033fa:	6028      	str	r0, [r5, #0]
 80033fc:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8003400:	4c4a      	ldr	r4, [pc, #296]	; (800352c <rt_test_006_003_execute.lto_priv.0+0x13c>)
 8003402:	68a3      	ldr	r3, [r4, #8]
 8003404:	3b01      	subs	r3, #1
 8003406:	bf5c      	itt	pl
 8003408:	60a3      	strpl	r3, [r4, #8]
 800340a:	2000      	movpl	r0, #0
 800340c:	2300      	movs	r3, #0
 800340e:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8003412:	4947      	ldr	r1, [pc, #284]	; (8003530 <rt_test_006_003_execute.lto_priv.0+0x140>)
 8003414:	f7fd fb14 	bl	8000a40 <_test_assert>
 8003418:	b108      	cbz	r0, 800341e <rt_test_006_003_execute.lto_priv.0+0x2e>
}
 800341a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return (bool)(tqp->next == (const thread_t *)tqp);
 800341e:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003420:	4944      	ldr	r1, [pc, #272]	; (8003534 <rt_test_006_003_execute.lto_priv.0+0x144>)
 8003422:	1b00      	subs	r0, r0, r4
 8003424:	fab0 f080 	clz	r0, r0
 8003428:	0940      	lsrs	r0, r0, #5
 800342a:	f7fd fb09 	bl	8000a40 <_test_assert>
 800342e:	2800      	cmp	r0, #0
 8003430:	d1f3      	bne.n	800341a <rt_test_006_003_execute.lto_priv.0+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8003432:	68a0      	ldr	r0, [r4, #8]
 8003434:	4940      	ldr	r1, [pc, #256]	; (8003538 <rt_test_006_003_execute.lto_priv.0+0x148>)
 8003436:	fab0 f080 	clz	r0, r0
 800343a:	0940      	lsrs	r0, r0, #5
 800343c:	f7fd fb00 	bl	8000a40 <_test_assert>
 8003440:	2800      	cmp	r0, #0
 8003442:	d1ea      	bne.n	800341a <rt_test_006_003_execute.lto_priv.0+0x2a>
  test_set_step(2);
 8003444:	2602      	movs	r6, #2
  return ch.rlist.current;
 8003446:	4a3d      	ldr	r2, [pc, #244]	; (800353c <rt_test_006_003_execute.lto_priv.0+0x14c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003448:	4603      	mov	r3, r0
  return chThdGetSelfX()->prio;
 800344a:	6991      	ldr	r1, [r2, #24]
 800344c:	483c      	ldr	r0, [pc, #240]	; (8003540 <rt_test_006_003_execute.lto_priv.0+0x150>)
 800344e:	6889      	ldr	r1, [r1, #8]
 8003450:	4a3c      	ldr	r2, [pc, #240]	; (8003544 <rt_test_006_003_execute.lto_priv.0+0x154>)
 8003452:	3901      	subs	r1, #1
  test_set_step(2);
 8003454:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003456:	f7fd fddb 	bl	8001010 <chThdCreateStatic.constprop.0>
 800345a:	4602      	mov	r2, r0
 800345c:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <rt_test_006_003_execute.lto_priv.0+0x158>)
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 800345e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003462:	601a      	str	r2, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 8003464:	f7fd fa6c 	bl	8000940 <chSemWaitTimeout.constprop.0>
 8003468:	4606      	mov	r6, r0
    test_wait_threads();
 800346a:	f7ff fb59 	bl	8002b20 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 800346e:	fab6 f086 	clz	r0, r6
 8003472:	492f      	ldr	r1, [pc, #188]	; (8003530 <rt_test_006_003_execute.lto_priv.0+0x140>)
 8003474:	0940      	lsrs	r0, r0, #5
 8003476:	f7fd fae3 	bl	8000a40 <_test_assert>
 800347a:	2800      	cmp	r0, #0
 800347c:	d1cd      	bne.n	800341a <rt_test_006_003_execute.lto_priv.0+0x2a>
 800347e:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003480:	492c      	ldr	r1, [pc, #176]	; (8003534 <rt_test_006_003_execute.lto_priv.0+0x144>)
 8003482:	1b00      	subs	r0, r0, r4
 8003484:	fab0 f080 	clz	r0, r0
 8003488:	0940      	lsrs	r0, r0, #5
 800348a:	f7fd fad9 	bl	8000a40 <_test_assert>
 800348e:	2800      	cmp	r0, #0
 8003490:	d1c3      	bne.n	800341a <rt_test_006_003_execute.lto_priv.0+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8003492:	68a0      	ldr	r0, [r4, #8]
 8003494:	4928      	ldr	r1, [pc, #160]	; (8003538 <rt_test_006_003_execute.lto_priv.0+0x148>)
 8003496:	fab0 f080 	clz	r0, r0
 800349a:	0940      	lsrs	r0, r0, #5
 800349c:	f7fd fad0 	bl	8000a40 <_test_assert>
 80034a0:	2800      	cmp	r0, #0
 80034a2:	d1ba      	bne.n	800341a <rt_test_006_003_execute.lto_priv.0+0x2a>
  test_set_step(3);
 80034a4:	2303      	movs	r3, #3
 80034a6:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80034a8:	f7ff f9e2 	bl	8002870 <test_wait_tick>
 80034ac:	2541      	movs	r5, #65	; 0x41
 80034ae:	4681      	mov	r9, r0
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80034b0:	4e1f      	ldr	r6, [pc, #124]	; (8003530 <rt_test_006_003_execute.lto_priv.0+0x140>)
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80034b2:	4f20      	ldr	r7, [pc, #128]	; (8003534 <rt_test_006_003_execute.lto_priv.0+0x144>)
      test_assert(sem1.cnt == 0, "counter not zero");
 80034b4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8003538 <rt_test_006_003_execute.lto_priv.0+0x148>
      test_emit_token('A' + i);
 80034b8:	4628      	mov	r0, r5
 80034ba:	f7fd fb69 	bl	8000b90 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
 80034be:	2064      	movs	r0, #100	; 0x64
 80034c0:	f7fd fa3e 	bl	8000940 <chSemWaitTimeout.constprop.0>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80034c4:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80034c8:	fab0 f080 	clz	r0, r0
 80034cc:	4631      	mov	r1, r6
 80034ce:	0940      	lsrs	r0, r0, #5
 80034d0:	f7fd fab6 	bl	8000a40 <_test_assert>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d1a0      	bne.n	800341a <rt_test_006_003_execute.lto_priv.0+0x2a>
 80034d8:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80034da:	4639      	mov	r1, r7
 80034dc:	1b00      	subs	r0, r0, r4
 80034de:	fab0 f080 	clz	r0, r0
 80034e2:	0940      	lsrs	r0, r0, #5
 80034e4:	f7fd faac 	bl	8000a40 <_test_assert>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d196      	bne.n	800341a <rt_test_006_003_execute.lto_priv.0+0x2a>
      test_assert(sem1.cnt == 0, "counter not zero");
 80034ec:	68a0      	ldr	r0, [r4, #8]
 80034ee:	4641      	mov	r1, r8
 80034f0:	fab0 f080 	clz	r0, r0
 80034f4:	0940      	lsrs	r0, r0, #5
 80034f6:	f7fd faa3 	bl	8000a40 <_test_assert>
    for (i = 0; i < 5; i++) {
 80034fa:	3501      	adds	r5, #1
 80034fc:	b2ed      	uxtb	r5, r5
      test_assert(sem1.cnt == 0, "counter not zero");
 80034fe:	2800      	cmp	r0, #0
 8003500:	d18b      	bne.n	800341a <rt_test_006_003_execute.lto_priv.0+0x2a>
    for (i = 0; i < 5; i++) {
 8003502:	2d46      	cmp	r5, #70	; 0x46
 8003504:	d1d8      	bne.n	80034b8 <rt_test_006_003_execute.lto_priv.0+0xc8>
    test_assert_sequence("ABCDE", "invalid sequence");
 8003506:	4911      	ldr	r1, [pc, #68]	; (800354c <rt_test_006_003_execute.lto_priv.0+0x15c>)
 8003508:	4811      	ldr	r0, [pc, #68]	; (8003550 <rt_test_006_003_execute.lto_priv.0+0x160>)
 800350a:	f7fd fc19 	bl	8000d40 <_test_assert_sequence>
 800350e:	2800      	cmp	r0, #0
 8003510:	d183      	bne.n	800341a <rt_test_006_003_execute.lto_priv.0+0x2a>
  return systime + (systime_t)interval;
 8003512:	f509 71fc 	add.w	r1, r9, #504	; 0x1f8
 8003516:	f509 70fa 	add.w	r0, r9, #500	; 0x1f4
    test_assert_time_window(target_time,
 800351a:	b289      	uxth	r1, r1
 800351c:	b280      	uxth	r0, r0
}
 800351e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_time_window(target_time,
 8003522:	f7fd b845 	b.w	80005b0 <_test_assert_time_window.constprop.0>
 8003526:	bf00      	nop
 8003528:	20001cf4 	.word	0x20001cf4
 800352c:	200015bc 	.word	0x200015bc
 8003530:	0800d3ac 	.word	0x0800d3ac
 8003534:	0800c5c0 	.word	0x0800c5c0
 8003538:	0800c5d0 	.word	0x0800c5d0
 800353c:	20000c88 	.word	0x20000c88
 8003540:	200015e0 	.word	0x200015e0
 8003544:	080042b1 	.word	0x080042b1
 8003548:	20001d0c 	.word	0x20001d0c
 800354c:	0800d288 	.word	0x0800d288
 8003550:	0800d394 	.word	0x0800d394
	...

08003560 <rt_test_005_001_execute.lto_priv.0>:

static void rt_test_005_001_execute(void) {
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg_t msg;

  /* [5.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8003562:	2401      	movs	r4, #1
  return ch.rlist.current;
 8003564:	4b2d      	ldr	r3, [pc, #180]	; (800361c <rt_test_005_001_execute.lto_priv.0+0xbc>)
 8003566:	4f2e      	ldr	r7, [pc, #184]	; (8003620 <rt_test_005_001_execute.lto_priv.0+0xc0>)
  return chThdGetSelfX()->prio;
 8003568:	699a      	ldr	r2, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 800356a:	482e      	ldr	r0, [pc, #184]	; (8003624 <rt_test_005_001_execute.lto_priv.0+0xc4>)
 800356c:	6891      	ldr	r1, [r2, #8]
 800356e:	4b2e      	ldr	r3, [pc, #184]	; (8003628 <rt_test_005_001_execute.lto_priv.0+0xc8>)
 8003570:	4a2e      	ldr	r2, [pc, #184]	; (800362c <rt_test_005_001_execute.lto_priv.0+0xcc>)
 8003572:	3901      	subs	r1, #1
  test_set_step(1);
 8003574:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8003576:	f7fd fd4b 	bl	8001010 <chThdCreateStatic.constprop.0>
 800357a:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <rt_test_005_001_execute.lto_priv.0+0xd0>)
 800357c:	2620      	movs	r6, #32
 800357e:	6018      	str	r0, [r3, #0]
 8003580:	f386 8811 	msr	BASEPRI, r6
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
 8003584:	4d2b      	ldr	r5, [pc, #172]	; (8003634 <rt_test_005_001_execute.lto_priv.0+0xd4>)
 8003586:	f04f 31ff 	mov.w	r1, #4294967295
 800358a:	4628      	mov	r0, r5
 800358c:	f007 ff30 	bl	800b3f0 <chThdSuspendTimeoutS>
 8003590:	2300      	movs	r3, #0
 8003592:	4604      	mov	r4, r0
 8003594:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 8003598:	6828      	ldr	r0, [r5, #0]
 800359a:	4927      	ldr	r1, [pc, #156]	; (8003638 <rt_test_005_001_execute.lto_priv.0+0xd8>)
 800359c:	fab0 f080 	clz	r0, r0
 80035a0:	0940      	lsrs	r0, r0, #5
 80035a2:	f7fd fa4d 	bl	8000a40 <_test_assert>
 80035a6:	b100      	cbz	r0, 80035aa <rt_test_005_001_execute.lto_priv.0+0x4a>
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
  test_end_step(2);
}
 80035a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 80035aa:	fab4 f084 	clz	r0, r4
 80035ae:	4923      	ldr	r1, [pc, #140]	; (800363c <rt_test_005_001_execute.lto_priv.0+0xdc>)
 80035b0:	0940      	lsrs	r0, r0, #5
 80035b2:	f7fd fa45 	bl	8000a40 <_test_assert>
 80035b6:	4604      	mov	r4, r0
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d1f5      	bne.n	80035a8 <rt_test_005_001_execute.lto_priv.0+0x48>
    test_wait_threads();
 80035bc:	f7ff fab0 	bl	8002b20 <test_wait_threads>
  test_set_step(2);
 80035c0:	2302      	movs	r3, #2
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	f386 8811 	msr	BASEPRI, r6
 80035c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    msg = chThdSuspendTimeoutS(&tr1, TIME_MS2I(1000));
 80035cc:	4628      	mov	r0, r5
 80035ce:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80035d2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80035d4:	f007 ff0c 	bl	800b3f0 <chThdSuspendTimeoutS>
 80035d8:	b2b6      	uxth	r6, r6
 80035da:	4607      	mov	r7, r0
 80035dc:	f384 8811 	msr	BASEPRI, r4
 80035e0:	f206 71d3 	addw	r1, r6, #2003	; 0x7d3
 80035e4:	f506 66fa 	add.w	r6, r6, #2000	; 0x7d0
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
 80035e8:	b289      	uxth	r1, r1
 80035ea:	b2b0      	uxth	r0, r6
 80035ec:	f7fc ffe0 	bl	80005b0 <_test_assert_time_window.constprop.0>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d1d9      	bne.n	80035a8 <rt_test_005_001_execute.lto_priv.0+0x48>
    test_assert(NULL == tr1, "not NULL");
 80035f4:	6828      	ldr	r0, [r5, #0]
 80035f6:	4910      	ldr	r1, [pc, #64]	; (8003638 <rt_test_005_001_execute.lto_priv.0+0xd8>)
 80035f8:	fab0 f080 	clz	r0, r0
 80035fc:	0940      	lsrs	r0, r0, #5
 80035fe:	f7fd fa1f 	bl	8000a40 <_test_assert>
 8003602:	2800      	cmp	r0, #0
 8003604:	d1d0      	bne.n	80035a8 <rt_test_005_001_execute.lto_priv.0+0x48>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8003606:	f1a7 30ff 	sub.w	r0, r7, #4294967295
 800360a:	fab0 f080 	clz	r0, r0
}
 800360e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8003612:	490a      	ldr	r1, [pc, #40]	; (800363c <rt_test_005_001_execute.lto_priv.0+0xdc>)
 8003614:	0940      	lsrs	r0, r0, #5
 8003616:	f7fd ba13 	b.w	8000a40 <_test_assert>
 800361a:	bf00      	nop
 800361c:	20000c88 	.word	0x20000c88
 8003620:	20001cf4 	.word	0x20001cf4
 8003624:	200015e0 	.word	0x200015e0
 8003628:	0800d2a8 	.word	0x0800d2a8
 800362c:	08004f91 	.word	0x08004f91
 8003630:	20001d0c 	.word	0x20001d0c
 8003634:	20001d34 	.word	0x20001d34
 8003638:	0800d3c4 	.word	0x0800d3c4
 800363c:	0800d3d0 	.word	0x0800d3d0

08003640 <rt_test_004_002_execute.lto_priv.0>:
 * - [4.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void rt_test_004_002_execute(void) {
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* [4.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 8003642:	2401      	movs	r4, #1
  return ch.rlist.current;
 8003644:	4d59      	ldr	r5, [pc, #356]	; (80037ac <rt_test_004_002_execute.lto_priv.0+0x16c>)
 8003646:	4e5a      	ldr	r6, [pc, #360]	; (80037b0 <rt_test_004_002_execute.lto_priv.0+0x170>)
  return chThdGetSelfX()->prio;
 8003648:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800364a:	4b5a      	ldr	r3, [pc, #360]	; (80037b4 <rt_test_004_002_execute.lto_priv.0+0x174>)
 800364c:	6891      	ldr	r1, [r2, #8]
 800364e:	485a      	ldr	r0, [pc, #360]	; (80037b8 <rt_test_004_002_execute.lto_priv.0+0x178>)
 8003650:	4a5a      	ldr	r2, [pc, #360]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
 8003652:	3905      	subs	r1, #5
  test_set_step(1);
 8003654:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8003656:	f7fd fcdb 	bl	8001010 <chThdCreateStatic.constprop.0>
 800365a:	4607      	mov	r7, r0
 800365c:	69ab      	ldr	r3, [r5, #24]
 800365e:	4c58      	ldr	r4, [pc, #352]	; (80037c0 <rt_test_004_002_execute.lto_priv.0+0x180>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8003660:	6899      	ldr	r1, [r3, #8]
 8003662:	4a56      	ldr	r2, [pc, #344]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
 8003664:	4b57      	ldr	r3, [pc, #348]	; (80037c4 <rt_test_004_002_execute.lto_priv.0+0x184>)
 8003666:	3904      	subs	r1, #4
 8003668:	4857      	ldr	r0, [pc, #348]	; (80037c8 <rt_test_004_002_execute.lto_priv.0+0x188>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800366a:	6027      	str	r7, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800366c:	f7fd fcd0 	bl	8001010 <chThdCreateStatic.constprop.0>
 8003670:	4607      	mov	r7, r0
 8003672:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8003674:	4b55      	ldr	r3, [pc, #340]	; (80037cc <rt_test_004_002_execute.lto_priv.0+0x18c>)
 8003676:	6891      	ldr	r1, [r2, #8]
 8003678:	4855      	ldr	r0, [pc, #340]	; (80037d0 <rt_test_004_002_execute.lto_priv.0+0x190>)
 800367a:	4a50      	ldr	r2, [pc, #320]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
 800367c:	3903      	subs	r1, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800367e:	6067      	str	r7, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8003680:	f7fd fcc6 	bl	8001010 <chThdCreateStatic.constprop.0>
 8003684:	4607      	mov	r7, r0
 8003686:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8003688:	4b52      	ldr	r3, [pc, #328]	; (80037d4 <rt_test_004_002_execute.lto_priv.0+0x194>)
 800368a:	6891      	ldr	r1, [r2, #8]
 800368c:	4852      	ldr	r0, [pc, #328]	; (80037d8 <rt_test_004_002_execute.lto_priv.0+0x198>)
 800368e:	4a4b      	ldr	r2, [pc, #300]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
 8003690:	3902      	subs	r1, #2
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8003692:	60a7      	str	r7, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8003694:	f7fd fcbc 	bl	8001010 <chThdCreateStatic.constprop.0>
 8003698:	4607      	mov	r7, r0
 800369a:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800369c:	4b4f      	ldr	r3, [pc, #316]	; (80037dc <rt_test_004_002_execute.lto_priv.0+0x19c>)
 800369e:	6891      	ldr	r1, [r2, #8]
 80036a0:	484f      	ldr	r0, [pc, #316]	; (80037e0 <rt_test_004_002_execute.lto_priv.0+0x1a0>)
 80036a2:	3901      	subs	r1, #1
 80036a4:	4a45      	ldr	r2, [pc, #276]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80036a6:	60e7      	str	r7, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80036a8:	f7fd fcb2 	bl	8001010 <chThdCreateStatic.constprop.0>
 80036ac:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 80036ae:	f7ff fa37 	bl	8002b20 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80036b2:	494c      	ldr	r1, [pc, #304]	; (80037e4 <rt_test_004_002_execute.lto_priv.0+0x1a4>)
 80036b4:	484c      	ldr	r0, [pc, #304]	; (80037e8 <rt_test_004_002_execute.lto_priv.0+0x1a8>)
 80036b6:	f7fd fb43 	bl	8000d40 <_test_assert_sequence>
 80036ba:	b100      	cbz	r0, 80036be <rt_test_004_002_execute.lto_priv.0+0x7e>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
  }
  test_end_step(3);
}
 80036bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80036be:	2702      	movs	r7, #2
 80036c0:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80036c2:	4b46      	ldr	r3, [pc, #280]	; (80037dc <rt_test_004_002_execute.lto_priv.0+0x19c>)
 80036c4:	6891      	ldr	r1, [r2, #8]
 80036c6:	4846      	ldr	r0, [pc, #280]	; (80037e0 <rt_test_004_002_execute.lto_priv.0+0x1a0>)
 80036c8:	4a3c      	ldr	r2, [pc, #240]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
 80036ca:	3901      	subs	r1, #1
  test_set_step(2);
 80036cc:	6037      	str	r7, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80036ce:	f7fd fc9f 	bl	8001010 <chThdCreateStatic.constprop.0>
 80036d2:	4607      	mov	r7, r0
 80036d4:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80036d6:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <rt_test_004_002_execute.lto_priv.0+0x194>)
 80036d8:	6891      	ldr	r1, [r2, #8]
 80036da:	483f      	ldr	r0, [pc, #252]	; (80037d8 <rt_test_004_002_execute.lto_priv.0+0x198>)
 80036dc:	4a37      	ldr	r2, [pc, #220]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
 80036de:	3902      	subs	r1, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80036e0:	6127      	str	r7, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80036e2:	f7fd fc95 	bl	8001010 <chThdCreateStatic.constprop.0>
 80036e6:	4607      	mov	r7, r0
 80036e8:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80036ea:	4b38      	ldr	r3, [pc, #224]	; (80037cc <rt_test_004_002_execute.lto_priv.0+0x18c>)
 80036ec:	6891      	ldr	r1, [r2, #8]
 80036ee:	4838      	ldr	r0, [pc, #224]	; (80037d0 <rt_test_004_002_execute.lto_priv.0+0x190>)
 80036f0:	4a32      	ldr	r2, [pc, #200]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
 80036f2:	3903      	subs	r1, #3
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80036f4:	60e7      	str	r7, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80036f6:	f7fd fc8b 	bl	8001010 <chThdCreateStatic.constprop.0>
 80036fa:	4607      	mov	r7, r0
 80036fc:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80036fe:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <rt_test_004_002_execute.lto_priv.0+0x184>)
 8003700:	6891      	ldr	r1, [r2, #8]
 8003702:	4831      	ldr	r0, [pc, #196]	; (80037c8 <rt_test_004_002_execute.lto_priv.0+0x188>)
 8003704:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
 8003706:	3904      	subs	r1, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8003708:	60a7      	str	r7, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800370a:	f7fd fc81 	bl	8001010 <chThdCreateStatic.constprop.0>
 800370e:	4607      	mov	r7, r0
 8003710:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8003712:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <rt_test_004_002_execute.lto_priv.0+0x174>)
 8003714:	6891      	ldr	r1, [r2, #8]
 8003716:	4828      	ldr	r0, [pc, #160]	; (80037b8 <rt_test_004_002_execute.lto_priv.0+0x178>)
 8003718:	3905      	subs	r1, #5
 800371a:	4a28      	ldr	r2, [pc, #160]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800371c:	6067      	str	r7, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800371e:	f7fd fc77 	bl	8001010 <chThdCreateStatic.constprop.0>
 8003722:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 8003724:	f7ff f9fc 	bl	8002b20 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8003728:	492e      	ldr	r1, [pc, #184]	; (80037e4 <rt_test_004_002_execute.lto_priv.0+0x1a4>)
 800372a:	482f      	ldr	r0, [pc, #188]	; (80037e8 <rt_test_004_002_execute.lto_priv.0+0x1a8>)
 800372c:	f7fd fb08 	bl	8000d40 <_test_assert_sequence>
 8003730:	2800      	cmp	r0, #0
 8003732:	d1c3      	bne.n	80036bc <rt_test_004_002_execute.lto_priv.0+0x7c>
  test_set_step(3);
 8003734:	2003      	movs	r0, #3
 8003736:	69aa      	ldr	r2, [r5, #24]
 8003738:	6030      	str	r0, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800373a:	6891      	ldr	r1, [r2, #8]
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <rt_test_004_002_execute.lto_priv.0+0x184>)
 800373e:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
 8003740:	3904      	subs	r1, #4
 8003742:	4821      	ldr	r0, [pc, #132]	; (80037c8 <rt_test_004_002_execute.lto_priv.0+0x188>)
 8003744:	f7fd fc64 	bl	8001010 <chThdCreateStatic.constprop.0>
 8003748:	4606      	mov	r6, r0
 800374a:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <rt_test_004_002_execute.lto_priv.0+0x174>)
 800374e:	6891      	ldr	r1, [r2, #8]
 8003750:	4819      	ldr	r0, [pc, #100]	; (80037b8 <rt_test_004_002_execute.lto_priv.0+0x178>)
 8003752:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
 8003754:	3905      	subs	r1, #5
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8003756:	6066      	str	r6, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8003758:	f7fd fc5a 	bl	8001010 <chThdCreateStatic.constprop.0>
 800375c:	4606      	mov	r6, r0
 800375e:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8003760:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <rt_test_004_002_execute.lto_priv.0+0x19c>)
 8003762:	6891      	ldr	r1, [r2, #8]
 8003764:	481e      	ldr	r0, [pc, #120]	; (80037e0 <rt_test_004_002_execute.lto_priv.0+0x1a0>)
 8003766:	4a15      	ldr	r2, [pc, #84]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
 8003768:	3901      	subs	r1, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800376a:	6026      	str	r6, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800376c:	f7fd fc50 	bl	8001010 <chThdCreateStatic.constprop.0>
 8003770:	4606      	mov	r6, r0
 8003772:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <rt_test_004_002_execute.lto_priv.0+0x194>)
 8003776:	6891      	ldr	r1, [r2, #8]
 8003778:	4817      	ldr	r0, [pc, #92]	; (80037d8 <rt_test_004_002_execute.lto_priv.0+0x198>)
 800377a:	4a10      	ldr	r2, [pc, #64]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
 800377c:	3902      	subs	r1, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800377e:	6126      	str	r6, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8003780:	f7fd fc46 	bl	8001010 <chThdCreateStatic.constprop.0>
 8003784:	4606      	mov	r6, r0
 8003786:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <rt_test_004_002_execute.lto_priv.0+0x18c>)
 800378a:	6891      	ldr	r1, [r2, #8]
 800378c:	4810      	ldr	r0, [pc, #64]	; (80037d0 <rt_test_004_002_execute.lto_priv.0+0x190>)
 800378e:	3903      	subs	r1, #3
 8003790:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <rt_test_004_002_execute.lto_priv.0+0x17c>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8003792:	60e6      	str	r6, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8003794:	f7fd fc3c 	bl	8001010 <chThdCreateStatic.constprop.0>
 8003798:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 800379a:	f7ff f9c1 	bl	8002b20 <test_wait_threads>
}
 800379e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80037a2:	4910      	ldr	r1, [pc, #64]	; (80037e4 <rt_test_004_002_execute.lto_priv.0+0x1a4>)
 80037a4:	4810      	ldr	r0, [pc, #64]	; (80037e8 <rt_test_004_002_execute.lto_priv.0+0x1a8>)
 80037a6:	f7fd bacb 	b.w	8000d40 <_test_assert_sequence>
 80037aa:	bf00      	nop
 80037ac:	20000c88 	.word	0x20000c88
 80037b0:	20001cf4 	.word	0x20001cf4
 80037b4:	0800d398 	.word	0x0800d398
 80037b8:	200015e0 	.word	0x200015e0
 80037bc:	08000cb1 	.word	0x08000cb1
 80037c0:	20001d0c 	.word	0x20001d0c
 80037c4:	0800ed00 	.word	0x0800ed00
 80037c8:	20001728 	.word	0x20001728
 80037cc:	0800d318 	.word	0x0800d318
 80037d0:	20001870 	.word	0x20001870
 80037d4:	0800d2ac 	.word	0x0800d2ac
 80037d8:	200019b8 	.word	0x200019b8
 80037dc:	0800d2a8 	.word	0x0800d2a8
 80037e0:	20001b00 	.word	0x20001b00
 80037e4:	0800d288 	.word	0x0800d288
 80037e8:	0800d394 	.word	0x0800d394
 80037ec:	00000000 	.word	0x00000000

080037f0 <oslib_test_009_006_execute.lto_priv.0>:
      chFactoryReleasePipe(dpp);
    }
  }
}

static void oslib_test_009_006_execute(void) {
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_pipe_t *dpp;

  /* [9.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 80037f2:	2501      	movs	r5, #1
 80037f4:	4c42      	ldr	r4, [pc, #264]	; (8003900 <oslib_test_009_006_execute.lto_priv.0+0x110>)
 80037f6:	6025      	str	r5, [r4, #0]
  {
    dpp = chFactoryFindPipe("mypipe");
 80037f8:	f7fe fe02 	bl	8002400 <chFactoryFindPipe.constprop.0>
    test_assert(dpp == NULL, "found");
 80037fc:	fab0 f080 	clz	r0, r0
 8003800:	4940      	ldr	r1, [pc, #256]	; (8003904 <oslib_test_009_006_execute.lto_priv.0+0x114>)
 8003802:	0940      	lsrs	r0, r0, #5
 8003804:	f7fd f91c 	bl	8000a40 <_test_assert>
 8003808:	b100      	cbz	r0, 800380c <oslib_test_009_006_execute.lto_priv.0+0x1c>
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
  test_end_step(6);
}
 800380a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800380c:	2302      	movs	r3, #2
 800380e:	6023      	str	r3, [r4, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 8003810:	f7fe fe3e 	bl	8002490 <chFactoryCreatePipe.constprop.0>
 8003814:	4606      	mov	r6, r0
    test_assert(dpp != NULL, "cannot create");
 8003816:	3800      	subs	r0, #0
 8003818:	bf18      	it	ne
 800381a:	2001      	movne	r0, #1
 800381c:	493a      	ldr	r1, [pc, #232]	; (8003908 <oslib_test_009_006_execute.lto_priv.0+0x118>)
 800381e:	f7fd f90f 	bl	8000a40 <_test_assert>
 8003822:	2800      	cmp	r0, #0
 8003824:	d1f1      	bne.n	800380a <oslib_test_009_006_execute.lto_priv.0+0x1a>
  test_set_step(3);
 8003826:	2303      	movs	r3, #3
 8003828:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 800382a:	f7fe fe31 	bl	8002490 <chFactoryCreatePipe.constprop.0>
    test_assert(dpp1 == NULL, "can create");
 800382e:	fab0 f080 	clz	r0, r0
 8003832:	4936      	ldr	r1, [pc, #216]	; (800390c <oslib_test_009_006_execute.lto_priv.0+0x11c>)
 8003834:	0940      	lsrs	r0, r0, #5
 8003836:	f7fd f903 	bl	8000a40 <_test_assert>
 800383a:	2800      	cmp	r0, #0
 800383c:	d1e5      	bne.n	800380a <oslib_test_009_006_execute.lto_priv.0+0x1a>
  test_set_step(4);
 800383e:	2304      	movs	r3, #4
 8003840:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 8003842:	f7fe fddd 	bl	8002400 <chFactoryFindPipe.constprop.0>
 8003846:	4607      	mov	r7, r0
    test_assert(dpp1 != NULL, "not found");
 8003848:	3800      	subs	r0, #0
 800384a:	bf18      	it	ne
 800384c:	2001      	movne	r0, #1
 800384e:	4930      	ldr	r1, [pc, #192]	; (8003910 <oslib_test_009_006_execute.lto_priv.0+0x120>)
 8003850:	f7fd f8f6 	bl	8000a40 <_test_assert>
 8003854:	2800      	cmp	r0, #0
 8003856:	d1d8      	bne.n	800380a <oslib_test_009_006_execute.lto_priv.0+0x1a>
    test_assert(dpp == dpp1, "object reference mismatch");
 8003858:	1bf0      	subs	r0, r6, r7
 800385a:	fab0 f080 	clz	r0, r0
 800385e:	492d      	ldr	r1, [pc, #180]	; (8003914 <oslib_test_009_006_execute.lto_priv.0+0x124>)
 8003860:	0940      	lsrs	r0, r0, #5
 8003862:	f7fd f8ed 	bl	8000a40 <_test_assert>
 8003866:	2800      	cmp	r0, #0
 8003868:	d1cf      	bne.n	800380a <oslib_test_009_006_execute.lto_priv.0+0x1a>
    test_assert(dpp1->element.refs == 2, "object reference mismatch");
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	4929      	ldr	r1, [pc, #164]	; (8003914 <oslib_test_009_006_execute.lto_priv.0+0x124>)
 800386e:	f1a0 0002 	sub.w	r0, r0, #2
 8003872:	fab0 f080 	clz	r0, r0
 8003876:	0940      	lsrs	r0, r0, #5
 8003878:	f7fd f8e2 	bl	8000a40 <_test_assert>
 800387c:	2800      	cmp	r0, #0
 800387e:	d1c4      	bne.n	800380a <oslib_test_009_006_execute.lto_priv.0+0x1a>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 8003880:	687b      	ldr	r3, [r7, #4]
    test_assert(dpp1 == dpp2, "object reference mismatch");
 8003882:	4628      	mov	r0, r5
 8003884:	442b      	add	r3, r5
 8003886:	4923      	ldr	r1, [pc, #140]	; (8003914 <oslib_test_009_006_execute.lto_priv.0+0x124>)
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	f7fd f8d9 	bl	8000a40 <_test_assert>
 800388e:	2800      	cmp	r0, #0
 8003890:	d1bb      	bne.n	800380a <oslib_test_009_006_execute.lto_priv.0+0x1a>
    test_assert(dpp2->element.refs == 3, "object reference mismatch");
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	491f      	ldr	r1, [pc, #124]	; (8003914 <oslib_test_009_006_execute.lto_priv.0+0x124>)
 8003896:	f1a0 0003 	sub.w	r0, r0, #3
 800389a:	fab0 f080 	clz	r0, r0
 800389e:	0940      	lsrs	r0, r0, #5
 80038a0:	f7fd f8ce 	bl	8000a40 <_test_assert>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d1b0      	bne.n	800380a <oslib_test_009_006_execute.lto_priv.0+0x1a>
    chFactoryReleasePipe(dpp2);
 80038a8:	4638      	mov	r0, r7
 80038aa:	f006 fee1 	bl	800a670 <chFactoryReleasePipe>
    test_assert(dpp1->element.refs == 2, "references mismatch");
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4919      	ldr	r1, [pc, #100]	; (8003918 <oslib_test_009_006_execute.lto_priv.0+0x128>)
 80038b2:	f1a0 0002 	sub.w	r0, r0, #2
 80038b6:	fab0 f080 	clz	r0, r0
 80038ba:	0940      	lsrs	r0, r0, #5
 80038bc:	f7fd f8c0 	bl	8000a40 <_test_assert>
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d1a2      	bne.n	800380a <oslib_test_009_006_execute.lto_priv.0+0x1a>
    chFactoryReleasePipe(dpp1);
 80038c4:	4638      	mov	r0, r7
 80038c6:	f006 fed3 	bl	800a670 <chFactoryReleasePipe>
    test_assert(dpp->element.refs == 1, "references mismatch");
 80038ca:	6870      	ldr	r0, [r6, #4]
 80038cc:	4912      	ldr	r1, [pc, #72]	; (8003918 <oslib_test_009_006_execute.lto_priv.0+0x128>)
 80038ce:	1b40      	subs	r0, r0, r5
 80038d0:	fab0 f080 	clz	r0, r0
 80038d4:	0940      	lsrs	r0, r0, #5
 80038d6:	f7fd f8b3 	bl	8000a40 <_test_assert>
 80038da:	2800      	cmp	r0, #0
 80038dc:	d195      	bne.n	800380a <oslib_test_009_006_execute.lto_priv.0+0x1a>
  test_set_step(5);
 80038de:	2305      	movs	r3, #5
    chFactoryReleasePipe(dpp);
 80038e0:	4630      	mov	r0, r6
  test_set_step(5);
 80038e2:	6023      	str	r3, [r4, #0]
    chFactoryReleasePipe(dpp);
 80038e4:	f006 fec4 	bl	800a670 <chFactoryReleasePipe>
  test_set_step(6);
 80038e8:	2306      	movs	r3, #6
 80038ea:	6023      	str	r3, [r4, #0]
    dpp = chFactoryFindPipe("mypipe");
 80038ec:	f7fe fd88 	bl	8002400 <chFactoryFindPipe.constprop.0>
}
 80038f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dpp == NULL, "found");
 80038f4:	fab0 f080 	clz	r0, r0
 80038f8:	4902      	ldr	r1, [pc, #8]	; (8003904 <oslib_test_009_006_execute.lto_priv.0+0x114>)
 80038fa:	0940      	lsrs	r0, r0, #5
 80038fc:	f7fd b8a0 	b.w	8000a40 <_test_assert>
 8003900:	20001cf4 	.word	0x20001cf4
 8003904:	0800d408 	.word	0x0800d408
 8003908:	0800d3e8 	.word	0x0800d3e8
 800390c:	0800d3f8 	.word	0x0800d3f8
 8003910:	0800d404 	.word	0x0800d404
 8003914:	0800d410 	.word	0x0800d410
 8003918:	0800d42c 	.word	0x0800d42c
 800391c:	00000000 	.word	0x00000000

08003920 <oslib_test_009_006_teardown.lto_priv.0>:
static void oslib_test_009_006_teardown(void) {
 8003920:	b510      	push	{r4, lr}
  dpp = chFactoryFindPipe("mypipe");
 8003922:	f7fe fd6d 	bl	8002400 <chFactoryFindPipe.constprop.0>
  if (dpp != NULL) {
 8003926:	b140      	cbz	r0, 800393a <oslib_test_009_006_teardown.lto_priv.0+0x1a>
    while (dpp->element.refs > 0U) {
 8003928:	6843      	ldr	r3, [r0, #4]
 800392a:	4604      	mov	r4, r0
 800392c:	b12b      	cbz	r3, 800393a <oslib_test_009_006_teardown.lto_priv.0+0x1a>
      chFactoryReleasePipe(dpp);
 800392e:	4620      	mov	r0, r4
 8003930:	f006 fe9e 	bl	800a670 <chFactoryReleasePipe>
    while (dpp->element.refs > 0U) {
 8003934:	6863      	ldr	r3, [r4, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f9      	bne.n	800392e <oslib_test_009_006_teardown.lto_priv.0+0xe>
}
 800393a:	bd10      	pop	{r4, pc}
 800393c:	0000      	movs	r0, r0
	...

08003940 <oslib_test_009_005_execute.lto_priv.0>:
static void oslib_test_009_005_execute(void) {
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8003942:	2501      	movs	r5, #1
 8003944:	4c42      	ldr	r4, [pc, #264]	; (8003a50 <oslib_test_009_005_execute.lto_priv.0+0x110>)
 8003946:	6025      	str	r5, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8003948:	f7fe fd42 	bl	80023d0 <chFactoryFindObjectsFIFO.constprop.0>
    test_assert(dofp == NULL, "found");
 800394c:	fab0 f080 	clz	r0, r0
 8003950:	4940      	ldr	r1, [pc, #256]	; (8003a54 <oslib_test_009_005_execute.lto_priv.0+0x114>)
 8003952:	0940      	lsrs	r0, r0, #5
 8003954:	f7fd f874 	bl	8000a40 <_test_assert>
 8003958:	b100      	cbz	r0, 800395c <oslib_test_009_005_execute.lto_priv.0+0x1c>
}
 800395a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800395c:	2302      	movs	r3, #2
 800395e:	6023      	str	r3, [r4, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 8003960:	f7fe fdee 	bl	8002540 <chFactoryCreateObjectsFIFO.constprop.0>
 8003964:	4606      	mov	r6, r0
    test_assert(dofp != NULL, "cannot create");
 8003966:	3800      	subs	r0, #0
 8003968:	bf18      	it	ne
 800396a:	2001      	movne	r0, #1
 800396c:	493a      	ldr	r1, [pc, #232]	; (8003a58 <oslib_test_009_005_execute.lto_priv.0+0x118>)
 800396e:	f7fd f867 	bl	8000a40 <_test_assert>
 8003972:	2800      	cmp	r0, #0
 8003974:	d1f1      	bne.n	800395a <oslib_test_009_005_execute.lto_priv.0+0x1a>
  test_set_step(3);
 8003976:	2303      	movs	r3, #3
 8003978:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800397a:	f7fe fde1 	bl	8002540 <chFactoryCreateObjectsFIFO.constprop.0>
    test_assert(dofp1 == NULL, "can create");
 800397e:	fab0 f080 	clz	r0, r0
 8003982:	4936      	ldr	r1, [pc, #216]	; (8003a5c <oslib_test_009_005_execute.lto_priv.0+0x11c>)
 8003984:	0940      	lsrs	r0, r0, #5
 8003986:	f7fd f85b 	bl	8000a40 <_test_assert>
 800398a:	2800      	cmp	r0, #0
 800398c:	d1e5      	bne.n	800395a <oslib_test_009_005_execute.lto_priv.0+0x1a>
  test_set_step(4);
 800398e:	2304      	movs	r3, #4
 8003990:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 8003992:	f7fe fd1d 	bl	80023d0 <chFactoryFindObjectsFIFO.constprop.0>
 8003996:	4607      	mov	r7, r0
    test_assert(dofp1 != NULL, "not found");
 8003998:	3800      	subs	r0, #0
 800399a:	bf18      	it	ne
 800399c:	2001      	movne	r0, #1
 800399e:	4930      	ldr	r1, [pc, #192]	; (8003a60 <oslib_test_009_005_execute.lto_priv.0+0x120>)
 80039a0:	f7fd f84e 	bl	8000a40 <_test_assert>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d1d8      	bne.n	800395a <oslib_test_009_005_execute.lto_priv.0+0x1a>
    test_assert(dofp == dofp1, "object reference mismatch");
 80039a8:	1bf0      	subs	r0, r6, r7
 80039aa:	fab0 f080 	clz	r0, r0
 80039ae:	492d      	ldr	r1, [pc, #180]	; (8003a64 <oslib_test_009_005_execute.lto_priv.0+0x124>)
 80039b0:	0940      	lsrs	r0, r0, #5
 80039b2:	f7fd f845 	bl	8000a40 <_test_assert>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d1cf      	bne.n	800395a <oslib_test_009_005_execute.lto_priv.0+0x1a>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4929      	ldr	r1, [pc, #164]	; (8003a64 <oslib_test_009_005_execute.lto_priv.0+0x124>)
 80039be:	f1a0 0002 	sub.w	r0, r0, #2
 80039c2:	fab0 f080 	clz	r0, r0
 80039c6:	0940      	lsrs	r0, r0, #5
 80039c8:	f7fd f83a 	bl	8000a40 <_test_assert>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d1c4      	bne.n	800395a <oslib_test_009_005_execute.lto_priv.0+0x1a>
 80039d0:	687b      	ldr	r3, [r7, #4]
    test_assert(dofp1 == dofp2, "object reference mismatch");
 80039d2:	4628      	mov	r0, r5
 80039d4:	442b      	add	r3, r5
 80039d6:	4923      	ldr	r1, [pc, #140]	; (8003a64 <oslib_test_009_005_execute.lto_priv.0+0x124>)
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	f7fd f831 	bl	8000a40 <_test_assert>
 80039de:	2800      	cmp	r0, #0
 80039e0:	d1bb      	bne.n	800395a <oslib_test_009_005_execute.lto_priv.0+0x1a>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	491f      	ldr	r1, [pc, #124]	; (8003a64 <oslib_test_009_005_execute.lto_priv.0+0x124>)
 80039e6:	f1a0 0003 	sub.w	r0, r0, #3
 80039ea:	fab0 f080 	clz	r0, r0
 80039ee:	0940      	lsrs	r0, r0, #5
 80039f0:	f7fd f826 	bl	8000a40 <_test_assert>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d1b0      	bne.n	800395a <oslib_test_009_005_execute.lto_priv.0+0x1a>
    chFactoryReleaseObjectsFIFO(dofp2);
 80039f8:	4638      	mov	r0, r7
 80039fa:	f006 fe51 	bl	800a6a0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4919      	ldr	r1, [pc, #100]	; (8003a68 <oslib_test_009_005_execute.lto_priv.0+0x128>)
 8003a02:	f1a0 0002 	sub.w	r0, r0, #2
 8003a06:	fab0 f080 	clz	r0, r0
 8003a0a:	0940      	lsrs	r0, r0, #5
 8003a0c:	f7fd f818 	bl	8000a40 <_test_assert>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d1a2      	bne.n	800395a <oslib_test_009_005_execute.lto_priv.0+0x1a>
    chFactoryReleaseObjectsFIFO(dofp1);
 8003a14:	4638      	mov	r0, r7
 8003a16:	f006 fe43 	bl	800a6a0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 8003a1a:	6870      	ldr	r0, [r6, #4]
 8003a1c:	4912      	ldr	r1, [pc, #72]	; (8003a68 <oslib_test_009_005_execute.lto_priv.0+0x128>)
 8003a1e:	1b40      	subs	r0, r0, r5
 8003a20:	fab0 f080 	clz	r0, r0
 8003a24:	0940      	lsrs	r0, r0, #5
 8003a26:	f7fd f80b 	bl	8000a40 <_test_assert>
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d195      	bne.n	800395a <oslib_test_009_005_execute.lto_priv.0+0x1a>
  test_set_step(5);
 8003a2e:	2305      	movs	r3, #5
    chFactoryReleaseObjectsFIFO(dofp);
 8003a30:	4630      	mov	r0, r6
  test_set_step(5);
 8003a32:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 8003a34:	f006 fe34 	bl	800a6a0 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 8003a38:	2306      	movs	r3, #6
 8003a3a:	6023      	str	r3, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8003a3c:	f7fe fcc8 	bl	80023d0 <chFactoryFindObjectsFIFO.constprop.0>
}
 8003a40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 8003a44:	fab0 f080 	clz	r0, r0
 8003a48:	4902      	ldr	r1, [pc, #8]	; (8003a54 <oslib_test_009_005_execute.lto_priv.0+0x114>)
 8003a4a:	0940      	lsrs	r0, r0, #5
 8003a4c:	f7fc bff8 	b.w	8000a40 <_test_assert>
 8003a50:	20001cf4 	.word	0x20001cf4
 8003a54:	0800d408 	.word	0x0800d408
 8003a58:	0800d3e8 	.word	0x0800d3e8
 8003a5c:	0800d3f8 	.word	0x0800d3f8
 8003a60:	0800d404 	.word	0x0800d404
 8003a64:	0800d410 	.word	0x0800d410
 8003a68:	0800d42c 	.word	0x0800d42c
 8003a6c:	00000000 	.word	0x00000000

08003a70 <oslib_test_009_005_teardown.lto_priv.0>:
static void oslib_test_009_005_teardown(void) {
 8003a70:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
 8003a72:	f7fe fcad 	bl	80023d0 <chFactoryFindObjectsFIFO.constprop.0>
  if (dofp != NULL) {
 8003a76:	b140      	cbz	r0, 8003a8a <oslib_test_009_005_teardown.lto_priv.0+0x1a>
    while (dofp->element.refs > 0U) {
 8003a78:	6843      	ldr	r3, [r0, #4]
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	b12b      	cbz	r3, 8003a8a <oslib_test_009_005_teardown.lto_priv.0+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f006 fe0e 	bl	800a6a0 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 8003a84:	6863      	ldr	r3, [r4, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f9      	bne.n	8003a7e <oslib_test_009_005_teardown.lto_priv.0+0xe>
}
 8003a8a:	bd10      	pop	{r4, pc}
 8003a8c:	0000      	movs	r0, r0
	...

08003a90 <oslib_test_009_004_execute.lto_priv.0>:
static void oslib_test_009_004_execute(void) {
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8003a92:	2501      	movs	r5, #1
 8003a94:	4c42      	ldr	r4, [pc, #264]	; (8003ba0 <oslib_test_009_004_execute.lto_priv.0+0x110>)
 8003a96:	6025      	str	r5, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 8003a98:	f7fe fc82 	bl	80023a0 <chFactoryFindMailbox.constprop.0>
    test_assert(dmp == NULL, "found");
 8003a9c:	fab0 f080 	clz	r0, r0
 8003aa0:	4940      	ldr	r1, [pc, #256]	; (8003ba4 <oslib_test_009_004_execute.lto_priv.0+0x114>)
 8003aa2:	0940      	lsrs	r0, r0, #5
 8003aa4:	f7fc ffcc 	bl	8000a40 <_test_assert>
 8003aa8:	b100      	cbz	r0, 8003aac <oslib_test_009_004_execute.lto_priv.0+0x1c>
}
 8003aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8003aac:	2302      	movs	r3, #2
 8003aae:	6023      	str	r3, [r4, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 8003ab0:	f7fe fcbe 	bl	8002430 <chFactoryCreateMailbox.constprop.0>
 8003ab4:	4606      	mov	r6, r0
    test_assert(dmp != NULL, "cannot create");
 8003ab6:	3800      	subs	r0, #0
 8003ab8:	bf18      	it	ne
 8003aba:	2001      	movne	r0, #1
 8003abc:	493a      	ldr	r1, [pc, #232]	; (8003ba8 <oslib_test_009_004_execute.lto_priv.0+0x118>)
 8003abe:	f7fc ffbf 	bl	8000a40 <_test_assert>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d1f1      	bne.n	8003aaa <oslib_test_009_004_execute.lto_priv.0+0x1a>
  test_set_step(3);
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 8003aca:	f7fe fcb1 	bl	8002430 <chFactoryCreateMailbox.constprop.0>
    test_assert(dmp1 == NULL, "can create");
 8003ace:	fab0 f080 	clz	r0, r0
 8003ad2:	4936      	ldr	r1, [pc, #216]	; (8003bac <oslib_test_009_004_execute.lto_priv.0+0x11c>)
 8003ad4:	0940      	lsrs	r0, r0, #5
 8003ad6:	f7fc ffb3 	bl	8000a40 <_test_assert>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d1e5      	bne.n	8003aaa <oslib_test_009_004_execute.lto_priv.0+0x1a>
  test_set_step(4);
 8003ade:	2304      	movs	r3, #4
 8003ae0:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 8003ae2:	f7fe fc5d 	bl	80023a0 <chFactoryFindMailbox.constprop.0>
 8003ae6:	4607      	mov	r7, r0
    test_assert(dmp1 != NULL, "not found");
 8003ae8:	3800      	subs	r0, #0
 8003aea:	bf18      	it	ne
 8003aec:	2001      	movne	r0, #1
 8003aee:	4930      	ldr	r1, [pc, #192]	; (8003bb0 <oslib_test_009_004_execute.lto_priv.0+0x120>)
 8003af0:	f7fc ffa6 	bl	8000a40 <_test_assert>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	d1d8      	bne.n	8003aaa <oslib_test_009_004_execute.lto_priv.0+0x1a>
    test_assert(dmp == dmp1, "object reference mismatch");
 8003af8:	1bf0      	subs	r0, r6, r7
 8003afa:	fab0 f080 	clz	r0, r0
 8003afe:	492d      	ldr	r1, [pc, #180]	; (8003bb4 <oslib_test_009_004_execute.lto_priv.0+0x124>)
 8003b00:	0940      	lsrs	r0, r0, #5
 8003b02:	f7fc ff9d 	bl	8000a40 <_test_assert>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d1cf      	bne.n	8003aaa <oslib_test_009_004_execute.lto_priv.0+0x1a>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4929      	ldr	r1, [pc, #164]	; (8003bb4 <oslib_test_009_004_execute.lto_priv.0+0x124>)
 8003b0e:	f1a0 0002 	sub.w	r0, r0, #2
 8003b12:	fab0 f080 	clz	r0, r0
 8003b16:	0940      	lsrs	r0, r0, #5
 8003b18:	f7fc ff92 	bl	8000a40 <_test_assert>
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d1c4      	bne.n	8003aaa <oslib_test_009_004_execute.lto_priv.0+0x1a>
 8003b20:	687b      	ldr	r3, [r7, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 8003b22:	4628      	mov	r0, r5
 8003b24:	442b      	add	r3, r5
 8003b26:	4923      	ldr	r1, [pc, #140]	; (8003bb4 <oslib_test_009_004_execute.lto_priv.0+0x124>)
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	f7fc ff89 	bl	8000a40 <_test_assert>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d1bb      	bne.n	8003aaa <oslib_test_009_004_execute.lto_priv.0+0x1a>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	491f      	ldr	r1, [pc, #124]	; (8003bb4 <oslib_test_009_004_execute.lto_priv.0+0x124>)
 8003b36:	f1a0 0003 	sub.w	r0, r0, #3
 8003b3a:	fab0 f080 	clz	r0, r0
 8003b3e:	0940      	lsrs	r0, r0, #5
 8003b40:	f7fc ff7e 	bl	8000a40 <_test_assert>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d1b0      	bne.n	8003aaa <oslib_test_009_004_execute.lto_priv.0+0x1a>
    chFactoryReleaseMailbox(dmp2);
 8003b48:	4638      	mov	r0, r7
 8003b4a:	f006 fdc1 	bl	800a6d0 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	4919      	ldr	r1, [pc, #100]	; (8003bb8 <oslib_test_009_004_execute.lto_priv.0+0x128>)
 8003b52:	f1a0 0002 	sub.w	r0, r0, #2
 8003b56:	fab0 f080 	clz	r0, r0
 8003b5a:	0940      	lsrs	r0, r0, #5
 8003b5c:	f7fc ff70 	bl	8000a40 <_test_assert>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d1a2      	bne.n	8003aaa <oslib_test_009_004_execute.lto_priv.0+0x1a>
    chFactoryReleaseMailbox(dmp1);
 8003b64:	4638      	mov	r0, r7
 8003b66:	f006 fdb3 	bl	800a6d0 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 8003b6a:	6870      	ldr	r0, [r6, #4]
 8003b6c:	4912      	ldr	r1, [pc, #72]	; (8003bb8 <oslib_test_009_004_execute.lto_priv.0+0x128>)
 8003b6e:	1b40      	subs	r0, r0, r5
 8003b70:	fab0 f080 	clz	r0, r0
 8003b74:	0940      	lsrs	r0, r0, #5
 8003b76:	f7fc ff63 	bl	8000a40 <_test_assert>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d195      	bne.n	8003aaa <oslib_test_009_004_execute.lto_priv.0+0x1a>
  test_set_step(5);
 8003b7e:	2305      	movs	r3, #5
    chFactoryReleaseMailbox(dmp);
 8003b80:	4630      	mov	r0, r6
  test_set_step(5);
 8003b82:	6023      	str	r3, [r4, #0]
    chFactoryReleaseMailbox(dmp);
 8003b84:	f006 fda4 	bl	800a6d0 <chFactoryReleaseMailbox>
  test_set_step(6);
 8003b88:	2306      	movs	r3, #6
 8003b8a:	6023      	str	r3, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 8003b8c:	f7fe fc08 	bl	80023a0 <chFactoryFindMailbox.constprop.0>
}
 8003b90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
 8003b94:	fab0 f080 	clz	r0, r0
 8003b98:	4902      	ldr	r1, [pc, #8]	; (8003ba4 <oslib_test_009_004_execute.lto_priv.0+0x114>)
 8003b9a:	0940      	lsrs	r0, r0, #5
 8003b9c:	f7fc bf50 	b.w	8000a40 <_test_assert>
 8003ba0:	20001cf4 	.word	0x20001cf4
 8003ba4:	0800d408 	.word	0x0800d408
 8003ba8:	0800d3e8 	.word	0x0800d3e8
 8003bac:	0800d3f8 	.word	0x0800d3f8
 8003bb0:	0800d404 	.word	0x0800d404
 8003bb4:	0800d410 	.word	0x0800d410
 8003bb8:	0800d42c 	.word	0x0800d42c
 8003bbc:	00000000 	.word	0x00000000

08003bc0 <oslib_test_009_004_teardown.lto_priv.0>:
static void oslib_test_009_004_teardown(void) {
 8003bc0:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
 8003bc2:	f7fe fbed 	bl	80023a0 <chFactoryFindMailbox.constprop.0>
  if (dmp != NULL) {
 8003bc6:	b140      	cbz	r0, 8003bda <oslib_test_009_004_teardown.lto_priv.0+0x1a>
    while (dmp->element.refs > 0U) {
 8003bc8:	6843      	ldr	r3, [r0, #4]
 8003bca:	4604      	mov	r4, r0
 8003bcc:	b12b      	cbz	r3, 8003bda <oslib_test_009_004_teardown.lto_priv.0+0x1a>
      chFactoryReleaseMailbox(dmp);
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f006 fd7e 	bl	800a6d0 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 8003bd4:	6863      	ldr	r3, [r4, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f9      	bne.n	8003bce <oslib_test_009_004_teardown.lto_priv.0+0xe>
}
 8003bda:	bd10      	pop	{r4, pc}
 8003bdc:	0000      	movs	r0, r0
	...

08003be0 <oslib_test_009_003_execute.lto_priv.0>:
static void oslib_test_009_003_execute(void) {
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8003be2:	2501      	movs	r5, #1
 8003be4:	4c42      	ldr	r4, [pc, #264]	; (8003cf0 <oslib_test_009_003_execute.lto_priv.0+0x110>)
 8003be6:	6025      	str	r5, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 8003be8:	f7fe fbc2 	bl	8002370 <chFactoryFindSemaphore.constprop.0>
    test_assert(dsp == NULL, "found");
 8003bec:	fab0 f080 	clz	r0, r0
 8003bf0:	4940      	ldr	r1, [pc, #256]	; (8003cf4 <oslib_test_009_003_execute.lto_priv.0+0x114>)
 8003bf2:	0940      	lsrs	r0, r0, #5
 8003bf4:	f7fc ff24 	bl	8000a40 <_test_assert>
 8003bf8:	b100      	cbz	r0, 8003bfc <oslib_test_009_003_execute.lto_priv.0+0x1c>
}
 8003bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	6023      	str	r3, [r4, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 8003c00:	f7fe fb66 	bl	80022d0 <chFactoryCreateSemaphore.constprop.0>
 8003c04:	4606      	mov	r6, r0
    test_assert(dsp != NULL, "cannot create");
 8003c06:	3800      	subs	r0, #0
 8003c08:	bf18      	it	ne
 8003c0a:	2001      	movne	r0, #1
 8003c0c:	493a      	ldr	r1, [pc, #232]	; (8003cf8 <oslib_test_009_003_execute.lto_priv.0+0x118>)
 8003c0e:	f7fc ff17 	bl	8000a40 <_test_assert>
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d1f1      	bne.n	8003bfa <oslib_test_009_003_execute.lto_priv.0+0x1a>
  test_set_step(3);
 8003c16:	2303      	movs	r3, #3
 8003c18:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 8003c1a:	f7fe fb59 	bl	80022d0 <chFactoryCreateSemaphore.constprop.0>
    test_assert(dsp1 == NULL, "can create");
 8003c1e:	fab0 f080 	clz	r0, r0
 8003c22:	4936      	ldr	r1, [pc, #216]	; (8003cfc <oslib_test_009_003_execute.lto_priv.0+0x11c>)
 8003c24:	0940      	lsrs	r0, r0, #5
 8003c26:	f7fc ff0b 	bl	8000a40 <_test_assert>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d1e5      	bne.n	8003bfa <oslib_test_009_003_execute.lto_priv.0+0x1a>
  test_set_step(4);
 8003c2e:	2304      	movs	r3, #4
 8003c30:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 8003c32:	f7fe fb9d 	bl	8002370 <chFactoryFindSemaphore.constprop.0>
 8003c36:	4607      	mov	r7, r0
    test_assert(dsp1 != NULL, "not found");
 8003c38:	3800      	subs	r0, #0
 8003c3a:	bf18      	it	ne
 8003c3c:	2001      	movne	r0, #1
 8003c3e:	4930      	ldr	r1, [pc, #192]	; (8003d00 <oslib_test_009_003_execute.lto_priv.0+0x120>)
 8003c40:	f7fc fefe 	bl	8000a40 <_test_assert>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d1d8      	bne.n	8003bfa <oslib_test_009_003_execute.lto_priv.0+0x1a>
    test_assert(dsp == dsp1, "object reference mismatch");
 8003c48:	1bf0      	subs	r0, r6, r7
 8003c4a:	fab0 f080 	clz	r0, r0
 8003c4e:	492d      	ldr	r1, [pc, #180]	; (8003d04 <oslib_test_009_003_execute.lto_priv.0+0x124>)
 8003c50:	0940      	lsrs	r0, r0, #5
 8003c52:	f7fc fef5 	bl	8000a40 <_test_assert>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d1cf      	bne.n	8003bfa <oslib_test_009_003_execute.lto_priv.0+0x1a>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4929      	ldr	r1, [pc, #164]	; (8003d04 <oslib_test_009_003_execute.lto_priv.0+0x124>)
 8003c5e:	f1a0 0002 	sub.w	r0, r0, #2
 8003c62:	fab0 f080 	clz	r0, r0
 8003c66:	0940      	lsrs	r0, r0, #5
 8003c68:	f7fc feea 	bl	8000a40 <_test_assert>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d1c4      	bne.n	8003bfa <oslib_test_009_003_execute.lto_priv.0+0x1a>
 8003c70:	687b      	ldr	r3, [r7, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 8003c72:	4628      	mov	r0, r5
 8003c74:	442b      	add	r3, r5
 8003c76:	4923      	ldr	r1, [pc, #140]	; (8003d04 <oslib_test_009_003_execute.lto_priv.0+0x124>)
 8003c78:	607b      	str	r3, [r7, #4]
 8003c7a:	f7fc fee1 	bl	8000a40 <_test_assert>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d1bb      	bne.n	8003bfa <oslib_test_009_003_execute.lto_priv.0+0x1a>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	491f      	ldr	r1, [pc, #124]	; (8003d04 <oslib_test_009_003_execute.lto_priv.0+0x124>)
 8003c86:	f1a0 0003 	sub.w	r0, r0, #3
 8003c8a:	fab0 f080 	clz	r0, r0
 8003c8e:	0940      	lsrs	r0, r0, #5
 8003c90:	f7fc fed6 	bl	8000a40 <_test_assert>
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d1b0      	bne.n	8003bfa <oslib_test_009_003_execute.lto_priv.0+0x1a>
    chFactoryReleaseSemaphore(dsp2);
 8003c98:	4638      	mov	r0, r7
 8003c9a:	f006 fbc1 	bl	800a420 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4919      	ldr	r1, [pc, #100]	; (8003d08 <oslib_test_009_003_execute.lto_priv.0+0x128>)
 8003ca2:	f1a0 0002 	sub.w	r0, r0, #2
 8003ca6:	fab0 f080 	clz	r0, r0
 8003caa:	0940      	lsrs	r0, r0, #5
 8003cac:	f7fc fec8 	bl	8000a40 <_test_assert>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	d1a2      	bne.n	8003bfa <oslib_test_009_003_execute.lto_priv.0+0x1a>
    chFactoryReleaseSemaphore(dsp1);
 8003cb4:	4638      	mov	r0, r7
 8003cb6:	f006 fbb3 	bl	800a420 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 8003cba:	6870      	ldr	r0, [r6, #4]
 8003cbc:	4912      	ldr	r1, [pc, #72]	; (8003d08 <oslib_test_009_003_execute.lto_priv.0+0x128>)
 8003cbe:	1b40      	subs	r0, r0, r5
 8003cc0:	fab0 f080 	clz	r0, r0
 8003cc4:	0940      	lsrs	r0, r0, #5
 8003cc6:	f7fc febb 	bl	8000a40 <_test_assert>
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d195      	bne.n	8003bfa <oslib_test_009_003_execute.lto_priv.0+0x1a>
  test_set_step(5);
 8003cce:	2305      	movs	r3, #5
    chFactoryReleaseSemaphore(dsp);
 8003cd0:	4630      	mov	r0, r6
  test_set_step(5);
 8003cd2:	6023      	str	r3, [r4, #0]
    chFactoryReleaseSemaphore(dsp);
 8003cd4:	f006 fba4 	bl	800a420 <chFactoryReleaseSemaphore>
  test_set_step(6);
 8003cd8:	2306      	movs	r3, #6
 8003cda:	6023      	str	r3, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 8003cdc:	f7fe fb48 	bl	8002370 <chFactoryFindSemaphore.constprop.0>
}
 8003ce0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
 8003ce4:	fab0 f080 	clz	r0, r0
 8003ce8:	4902      	ldr	r1, [pc, #8]	; (8003cf4 <oslib_test_009_003_execute.lto_priv.0+0x114>)
 8003cea:	0940      	lsrs	r0, r0, #5
 8003cec:	f7fc bea8 	b.w	8000a40 <_test_assert>
 8003cf0:	20001cf4 	.word	0x20001cf4
 8003cf4:	0800d408 	.word	0x0800d408
 8003cf8:	0800d3e8 	.word	0x0800d3e8
 8003cfc:	0800d3f8 	.word	0x0800d3f8
 8003d00:	0800d404 	.word	0x0800d404
 8003d04:	0800d410 	.word	0x0800d410
 8003d08:	0800d42c 	.word	0x0800d42c
 8003d0c:	00000000 	.word	0x00000000

08003d10 <oslib_test_009_003_teardown.lto_priv.0>:
static void oslib_test_009_003_teardown(void) {
 8003d10:	b510      	push	{r4, lr}
  dsp = chFactoryFindSemaphore("mysem");
 8003d12:	f7fe fb2d 	bl	8002370 <chFactoryFindSemaphore.constprop.0>
  if (dsp != NULL) {
 8003d16:	b140      	cbz	r0, 8003d2a <oslib_test_009_003_teardown.lto_priv.0+0x1a>
    while (dsp->element.refs > 0U) {
 8003d18:	6843      	ldr	r3, [r0, #4]
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	b12b      	cbz	r3, 8003d2a <oslib_test_009_003_teardown.lto_priv.0+0x1a>
      chFactoryReleaseSemaphore(dsp);
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f006 fb7e 	bl	800a420 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 8003d24:	6863      	ldr	r3, [r4, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f9      	bne.n	8003d1e <oslib_test_009_003_teardown.lto_priv.0+0xe>
}
 8003d2a:	bd10      	pop	{r4, pc}
 8003d2c:	0000      	movs	r0, r0
	...

08003d30 <oslib_test_009_002_execute.lto_priv.0>:
static void oslib_test_009_002_execute(void) {
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8003d32:	2501      	movs	r5, #1
 8003d34:	4c42      	ldr	r4, [pc, #264]	; (8003e40 <oslib_test_009_002_execute.lto_priv.0+0x110>)
 8003d36:	6025      	str	r5, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8003d38:	f7fe fb02 	bl	8002340 <chFactoryFindBuffer.constprop.0>
    test_assert(dbp == NULL, "found");
 8003d3c:	fab0 f080 	clz	r0, r0
 8003d40:	4940      	ldr	r1, [pc, #256]	; (8003e44 <oslib_test_009_002_execute.lto_priv.0+0x114>)
 8003d42:	0940      	lsrs	r0, r0, #5
 8003d44:	f7fc fe7c 	bl	8000a40 <_test_assert>
 8003d48:	b100      	cbz	r0, 8003d4c <oslib_test_009_002_execute.lto_priv.0+0x1c>
}
 8003d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	6023      	str	r3, [r4, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 8003d50:	f7fe fbd6 	bl	8002500 <chFactoryCreateBuffer.constprop.0>
 8003d54:	4606      	mov	r6, r0
    test_assert(dbp != NULL, "cannot create");
 8003d56:	3800      	subs	r0, #0
 8003d58:	bf18      	it	ne
 8003d5a:	2001      	movne	r0, #1
 8003d5c:	493a      	ldr	r1, [pc, #232]	; (8003e48 <oslib_test_009_002_execute.lto_priv.0+0x118>)
 8003d5e:	f7fc fe6f 	bl	8000a40 <_test_assert>
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d1f1      	bne.n	8003d4a <oslib_test_009_002_execute.lto_priv.0+0x1a>
  test_set_step(3);
 8003d66:	2303      	movs	r3, #3
 8003d68:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 8003d6a:	f7fe fbc9 	bl	8002500 <chFactoryCreateBuffer.constprop.0>
    test_assert(dbp1 == NULL, "can create");
 8003d6e:	fab0 f080 	clz	r0, r0
 8003d72:	4936      	ldr	r1, [pc, #216]	; (8003e4c <oslib_test_009_002_execute.lto_priv.0+0x11c>)
 8003d74:	0940      	lsrs	r0, r0, #5
 8003d76:	f7fc fe63 	bl	8000a40 <_test_assert>
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d1e5      	bne.n	8003d4a <oslib_test_009_002_execute.lto_priv.0+0x1a>
  test_set_step(4);
 8003d7e:	2304      	movs	r3, #4
 8003d80:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 8003d82:	f7fe fadd 	bl	8002340 <chFactoryFindBuffer.constprop.0>
 8003d86:	4607      	mov	r7, r0
    test_assert(dbp1 != NULL, "not found");
 8003d88:	3800      	subs	r0, #0
 8003d8a:	bf18      	it	ne
 8003d8c:	2001      	movne	r0, #1
 8003d8e:	4930      	ldr	r1, [pc, #192]	; (8003e50 <oslib_test_009_002_execute.lto_priv.0+0x120>)
 8003d90:	f7fc fe56 	bl	8000a40 <_test_assert>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	d1d8      	bne.n	8003d4a <oslib_test_009_002_execute.lto_priv.0+0x1a>
    test_assert(dbp == dbp1, "object reference mismatch");
 8003d98:	1bf0      	subs	r0, r6, r7
 8003d9a:	fab0 f080 	clz	r0, r0
 8003d9e:	492d      	ldr	r1, [pc, #180]	; (8003e54 <oslib_test_009_002_execute.lto_priv.0+0x124>)
 8003da0:	0940      	lsrs	r0, r0, #5
 8003da2:	f7fc fe4d 	bl	8000a40 <_test_assert>
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d1cf      	bne.n	8003d4a <oslib_test_009_002_execute.lto_priv.0+0x1a>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	4929      	ldr	r1, [pc, #164]	; (8003e54 <oslib_test_009_002_execute.lto_priv.0+0x124>)
 8003dae:	f1a0 0002 	sub.w	r0, r0, #2
 8003db2:	fab0 f080 	clz	r0, r0
 8003db6:	0940      	lsrs	r0, r0, #5
 8003db8:	f7fc fe42 	bl	8000a40 <_test_assert>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	d1c4      	bne.n	8003d4a <oslib_test_009_002_execute.lto_priv.0+0x1a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	442b      	add	r3, r5
 8003dc6:	4923      	ldr	r1, [pc, #140]	; (8003e54 <oslib_test_009_002_execute.lto_priv.0+0x124>)
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	f7fc fe39 	bl	8000a40 <_test_assert>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d1bb      	bne.n	8003d4a <oslib_test_009_002_execute.lto_priv.0+0x1a>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	491f      	ldr	r1, [pc, #124]	; (8003e54 <oslib_test_009_002_execute.lto_priv.0+0x124>)
 8003dd6:	f1a0 0003 	sub.w	r0, r0, #3
 8003dda:	fab0 f080 	clz	r0, r0
 8003dde:	0940      	lsrs	r0, r0, #5
 8003de0:	f7fc fe2e 	bl	8000a40 <_test_assert>
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d1b0      	bne.n	8003d4a <oslib_test_009_002_execute.lto_priv.0+0x1a>
    chFactoryReleaseBuffer(dbp2);
 8003de8:	4638      	mov	r0, r7
 8003dea:	f006 fc89 	bl	800a700 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4919      	ldr	r1, [pc, #100]	; (8003e58 <oslib_test_009_002_execute.lto_priv.0+0x128>)
 8003df2:	f1a0 0002 	sub.w	r0, r0, #2
 8003df6:	fab0 f080 	clz	r0, r0
 8003dfa:	0940      	lsrs	r0, r0, #5
 8003dfc:	f7fc fe20 	bl	8000a40 <_test_assert>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d1a2      	bne.n	8003d4a <oslib_test_009_002_execute.lto_priv.0+0x1a>
    chFactoryReleaseBuffer(dbp1);
 8003e04:	4638      	mov	r0, r7
 8003e06:	f006 fc7b 	bl	800a700 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 8003e0a:	6870      	ldr	r0, [r6, #4]
 8003e0c:	4912      	ldr	r1, [pc, #72]	; (8003e58 <oslib_test_009_002_execute.lto_priv.0+0x128>)
 8003e0e:	1b40      	subs	r0, r0, r5
 8003e10:	fab0 f080 	clz	r0, r0
 8003e14:	0940      	lsrs	r0, r0, #5
 8003e16:	f7fc fe13 	bl	8000a40 <_test_assert>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d195      	bne.n	8003d4a <oslib_test_009_002_execute.lto_priv.0+0x1a>
  test_set_step(5);
 8003e1e:	2305      	movs	r3, #5
    chFactoryReleaseBuffer(dbp);
 8003e20:	4630      	mov	r0, r6
  test_set_step(5);
 8003e22:	6023      	str	r3, [r4, #0]
    chFactoryReleaseBuffer(dbp);
 8003e24:	f006 fc6c 	bl	800a700 <chFactoryReleaseBuffer>
  test_set_step(6);
 8003e28:	2306      	movs	r3, #6
 8003e2a:	6023      	str	r3, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8003e2c:	f7fe fa88 	bl	8002340 <chFactoryFindBuffer.constprop.0>
}
 8003e30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
 8003e34:	fab0 f080 	clz	r0, r0
 8003e38:	4902      	ldr	r1, [pc, #8]	; (8003e44 <oslib_test_009_002_execute.lto_priv.0+0x114>)
 8003e3a:	0940      	lsrs	r0, r0, #5
 8003e3c:	f7fc be00 	b.w	8000a40 <_test_assert>
 8003e40:	20001cf4 	.word	0x20001cf4
 8003e44:	0800d408 	.word	0x0800d408
 8003e48:	0800d3e8 	.word	0x0800d3e8
 8003e4c:	0800d3f8 	.word	0x0800d3f8
 8003e50:	0800d404 	.word	0x0800d404
 8003e54:	0800d410 	.word	0x0800d410
 8003e58:	0800d42c 	.word	0x0800d42c
 8003e5c:	00000000 	.word	0x00000000

08003e60 <oslib_test_009_002_teardown.lto_priv.0>:
static void oslib_test_009_002_teardown(void) {
 8003e60:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
 8003e62:	f7fe fa6d 	bl	8002340 <chFactoryFindBuffer.constprop.0>
  if (dbp != NULL) {
 8003e66:	b140      	cbz	r0, 8003e7a <oslib_test_009_002_teardown.lto_priv.0+0x1a>
    while (dbp->element.refs > 0U) {
 8003e68:	6843      	ldr	r3, [r0, #4]
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	b12b      	cbz	r3, 8003e7a <oslib_test_009_002_teardown.lto_priv.0+0x1a>
      chFactoryReleaseBuffer(dbp);
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f006 fc46 	bl	800a700 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 8003e74:	6863      	ldr	r3, [r4, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f9      	bne.n	8003e6e <oslib_test_009_002_teardown.lto_priv.0+0xe>
}
 8003e7a:	bd10      	pop	{r4, pc}
 8003e7c:	0000      	movs	r0, r0
	...

08003e80 <oslib_test_009_001_execute.lto_priv.0>:
static void oslib_test_009_001_execute(void) {
 8003e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8003e84:	2501      	movs	r5, #1
 8003e86:	4c50      	ldr	r4, [pc, #320]	; (8003fc8 <oslib_test_009_001_execute.lto_priv.0+0x148>)
 8003e88:	6025      	str	r5, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8003e8a:	f7fe fa41 	bl	8002310 <chFactoryFindObject.constprop.0>
    test_assert(rop == NULL, "found");
 8003e8e:	fab0 f080 	clz	r0, r0
 8003e92:	494e      	ldr	r1, [pc, #312]	; (8003fcc <oslib_test_009_001_execute.lto_priv.0+0x14c>)
 8003e94:	0940      	lsrs	r0, r0, #5
 8003e96:	f7fc fdd3 	bl	8000a40 <_test_assert>
 8003e9a:	b108      	cbz	r0, 8003ea0 <oslib_test_009_001_execute.lto_priv.0+0x20>
}
 8003e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 8003ea0:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8003ea2:	484b      	ldr	r0, [pc, #300]	; (8003fd0 <oslib_test_009_001_execute.lto_priv.0+0x150>)
  test_set_step(2);
 8003ea4:	6023      	str	r3, [r4, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8003ea6:	f7fe f9fb 	bl	80022a0 <chFactoryRegisterObject.constprop.0>
 8003eaa:	4606      	mov	r6, r0
    test_assert(rop != NULL, "cannot register");
 8003eac:	3800      	subs	r0, #0
 8003eae:	bf18      	it	ne
 8003eb0:	2001      	movne	r0, #1
 8003eb2:	4948      	ldr	r1, [pc, #288]	; (8003fd4 <oslib_test_009_001_execute.lto_priv.0+0x154>)
 8003eb4:	f7fc fdc4 	bl	8000a40 <_test_assert>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d1ef      	bne.n	8003e9c <oslib_test_009_001_execute.lto_priv.0+0x1c>
  test_set_step(3);
 8003ebc:	2303      	movs	r3, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8003ebe:	4846      	ldr	r0, [pc, #280]	; (8003fd8 <oslib_test_009_001_execute.lto_priv.0+0x158>)
  test_set_step(3);
 8003ec0:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8003ec2:	f7fe f9ed 	bl	80022a0 <chFactoryRegisterObject.constprop.0>
    test_assert(rop1 == NULL, "can register");
 8003ec6:	fab0 f080 	clz	r0, r0
 8003eca:	4944      	ldr	r1, [pc, #272]	; (8003fdc <oslib_test_009_001_execute.lto_priv.0+0x15c>)
 8003ecc:	0940      	lsrs	r0, r0, #5
 8003ece:	f7fc fdb7 	bl	8000a40 <_test_assert>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d1e2      	bne.n	8003e9c <oslib_test_009_001_execute.lto_priv.0+0x1c>
  test_set_step(4);
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryFindObject("myobj");
 8003eda:	f7fe fa19 	bl	8002310 <chFactoryFindObject.constprop.0>
 8003ede:	4607      	mov	r7, r0
    test_assert(rop1 != NULL, "not found");
 8003ee0:	3800      	subs	r0, #0
 8003ee2:	bf18      	it	ne
 8003ee4:	2001      	movne	r0, #1
 8003ee6:	493e      	ldr	r1, [pc, #248]	; (8003fe0 <oslib_test_009_001_execute.lto_priv.0+0x160>)
 8003ee8:	f7fc fdaa 	bl	8000a40 <_test_assert>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d1d5      	bne.n	8003e9c <oslib_test_009_001_execute.lto_priv.0+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 8003ef0:	f245 58aa 	movw	r8, #21930	; 0x55aa
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	493b      	ldr	r1, [pc, #236]	; (8003fe4 <oslib_test_009_001_execute.lto_priv.0+0x164>)
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	eba0 0008 	sub.w	r0, r0, r8
 8003efe:	fab0 f080 	clz	r0, r0
 8003f02:	0940      	lsrs	r0, r0, #5
 8003f04:	f7fc fd9c 	bl	8000a40 <_test_assert>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d1c7      	bne.n	8003e9c <oslib_test_009_001_execute.lto_priv.0+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
 8003f0c:	1bf0      	subs	r0, r6, r7
 8003f0e:	fab0 f080 	clz	r0, r0
 8003f12:	4935      	ldr	r1, [pc, #212]	; (8003fe8 <oslib_test_009_001_execute.lto_priv.0+0x168>)
 8003f14:	0940      	lsrs	r0, r0, #5
 8003f16:	f7fc fd93 	bl	8000a40 <_test_assert>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d1be      	bne.n	8003e9c <oslib_test_009_001_execute.lto_priv.0+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4931      	ldr	r1, [pc, #196]	; (8003fe8 <oslib_test_009_001_execute.lto_priv.0+0x168>)
 8003f22:	f1a0 0002 	sub.w	r0, r0, #2
 8003f26:	fab0 f080 	clz	r0, r0
 8003f2a:	0940      	lsrs	r0, r0, #5
 8003f2c:	f7fc fd88 	bl	8000a40 <_test_assert>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d1b3      	bne.n	8003e9c <oslib_test_009_001_execute.lto_priv.0+0x1c>
 8003f34:	687b      	ldr	r3, [r7, #4]
    test_assert(rop1 == rop2, "object reference mismatch");
 8003f36:	4628      	mov	r0, r5
 8003f38:	442b      	add	r3, r5
 8003f3a:	492b      	ldr	r1, [pc, #172]	; (8003fe8 <oslib_test_009_001_execute.lto_priv.0+0x168>)
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	f7fc fd7f 	bl	8000a40 <_test_assert>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d1aa      	bne.n	8003e9c <oslib_test_009_001_execute.lto_priv.0+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4926      	ldr	r1, [pc, #152]	; (8003fe4 <oslib_test_009_001_execute.lto_priv.0+0x164>)
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	eba0 0008 	sub.w	r0, r0, r8
 8003f50:	fab0 f080 	clz	r0, r0
 8003f54:	0940      	lsrs	r0, r0, #5
 8003f56:	f7fc fd73 	bl	8000a40 <_test_assert>
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d19e      	bne.n	8003e9c <oslib_test_009_001_execute.lto_priv.0+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4921      	ldr	r1, [pc, #132]	; (8003fe8 <oslib_test_009_001_execute.lto_priv.0+0x168>)
 8003f62:	f1a0 0003 	sub.w	r0, r0, #3
 8003f66:	fab0 f080 	clz	r0, r0
 8003f6a:	0940      	lsrs	r0, r0, #5
 8003f6c:	f7fc fd68 	bl	8000a40 <_test_assert>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d193      	bne.n	8003e9c <oslib_test_009_001_execute.lto_priv.0+0x1c>
    chFactoryReleaseObject(rop2);
 8003f74:	4638      	mov	r0, r7
 8003f76:	f006 fa83 	bl	800a480 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	491b      	ldr	r1, [pc, #108]	; (8003fec <oslib_test_009_001_execute.lto_priv.0+0x16c>)
 8003f7e:	1e82      	subs	r2, r0, #2
 8003f80:	4250      	negs	r0, r2
 8003f82:	4150      	adcs	r0, r2
 8003f84:	f7fc fd5c 	bl	8000a40 <_test_assert>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d187      	bne.n	8003e9c <oslib_test_009_001_execute.lto_priv.0+0x1c>
    chFactoryReleaseObject(rop1);
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	f006 fa77 	bl	800a480 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 8003f92:	6870      	ldr	r0, [r6, #4]
 8003f94:	4915      	ldr	r1, [pc, #84]	; (8003fec <oslib_test_009_001_execute.lto_priv.0+0x16c>)
 8003f96:	1b43      	subs	r3, r0, r5
 8003f98:	4258      	negs	r0, r3
 8003f9a:	4158      	adcs	r0, r3
 8003f9c:	f7fc fd50 	bl	8000a40 <_test_assert>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	f47f af7b 	bne.w	8003e9c <oslib_test_009_001_execute.lto_priv.0+0x1c>
  test_set_step(5);
 8003fa6:	2305      	movs	r3, #5
    chFactoryReleaseObject(rop);
 8003fa8:	4630      	mov	r0, r6
  test_set_step(5);
 8003faa:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObject(rop);
 8003fac:	f006 fa68 	bl	800a480 <chFactoryReleaseObject>
  test_set_step(6);
 8003fb0:	2306      	movs	r3, #6
 8003fb2:	6023      	str	r3, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8003fb4:	f7fe f9ac 	bl	8002310 <chFactoryFindObject.constprop.0>
}
 8003fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
 8003fbc:	fab0 f080 	clz	r0, r0
 8003fc0:	4902      	ldr	r1, [pc, #8]	; (8003fcc <oslib_test_009_001_execute.lto_priv.0+0x14c>)
 8003fc2:	0940      	lsrs	r0, r0, #5
 8003fc4:	f7fc bd3c 	b.w	8000a40 <_test_assert>
 8003fc8:	20001cf4 	.word	0x20001cf4
 8003fcc:	0800d408 	.word	0x0800d408
 8003fd0:	200008b8 	.word	0x200008b8
 8003fd4:	0800d440 	.word	0x0800d440
 8003fd8:	200008bc 	.word	0x200008bc
 8003fdc:	0800d450 	.word	0x0800d450
 8003fe0:	0800d404 	.word	0x0800d404
 8003fe4:	0800d460 	.word	0x0800d460
 8003fe8:	0800d410 	.word	0x0800d410
 8003fec:	0800d42c 	.word	0x0800d42c

08003ff0 <oslib_test_009_001_teardown.lto_priv.0>:
static void oslib_test_009_001_teardown(void) {
 8003ff0:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
 8003ff2:	f7fe f98d 	bl	8002310 <chFactoryFindObject.constprop.0>
  if (rop != NULL) {
 8003ff6:	b140      	cbz	r0, 800400a <oslib_test_009_001_teardown.lto_priv.0+0x1a>
    while (rop->element.refs > 0U) {
 8003ff8:	6843      	ldr	r3, [r0, #4]
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	b12b      	cbz	r3, 800400a <oslib_test_009_001_teardown.lto_priv.0+0x1a>
      chFactoryReleaseObject(rop);
 8003ffe:	4620      	mov	r0, r4
 8004000:	f006 fa3e 	bl	800a480 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 8004004:	6863      	ldr	r3, [r4, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f9      	bne.n	8003ffe <oslib_test_009_001_teardown.lto_priv.0+0xe>
}
 800400a:	bd10      	pop	{r4, pc}
 800400c:	0000      	movs	r0, r0
	...

08004010 <rt_test_010_001_execute.lto_priv.0>:
  test_set_step(2);
 8004010:	2302      	movs	r3, #2
static void rt_test_010_001_execute(void) {
 8004012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8004016:	4a48      	ldr	r2, [pc, #288]	; (8004138 <rt_test_010_001_execute.lto_priv.0+0x128>)
 8004018:	b086      	sub	sp, #24
  return chThdGetSelfX()->prio;
 800401a:	6994      	ldr	r4, [r2, #24]
  test_set_step(2);
 800401c:	4d47      	ldr	r5, [pc, #284]	; (800413c <rt_test_010_001_execute.lto_priv.0+0x12c>)
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 800401e:	a905      	add	r1, sp, #20
 8004020:	4847      	ldr	r0, [pc, #284]	; (8004140 <rt_test_010_001_execute.lto_priv.0+0x130>)
 8004022:	aa04      	add	r2, sp, #16
 8004024:	68a6      	ldr	r6, [r4, #8]
  test_set_step(2);
 8004026:	602b      	str	r3, [r5, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8004028:	f006 fa5a 	bl	800a4e0 <chHeapStatus>
 800402c:	4604      	mov	r4, r0
    test_assert(n1 == 1, "heap fragmented");
 800402e:	f1a0 0001 	sub.w	r0, r0, #1
 8004032:	fab0 f080 	clz	r0, r0
 8004036:	4943      	ldr	r1, [pc, #268]	; (8004144 <rt_test_010_001_execute.lto_priv.0+0x134>)
 8004038:	0940      	lsrs	r0, r0, #5
 800403a:	f7fc fd01 	bl	8000a40 <_test_assert>
 800403e:	b110      	cbz	r0, 8004046 <rt_test_010_001_execute.lto_priv.0+0x36>
}
 8004040:	b006      	add	sp, #24
 8004042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(3);
 8004046:	2703      	movs	r7, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 8004048:	4b3f      	ldr	r3, [pc, #252]	; (8004148 <rt_test_010_001_execute.lto_priv.0+0x138>)
 800404a:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8004180 <rt_test_010_001_execute.lto_priv.0+0x170>
 800404e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004052:	e9cd 8300 	strd	r8, r3, [sp]
 8004056:	4a3d      	ldr	r2, [pc, #244]	; (800414c <rt_test_010_001_execute.lto_priv.0+0x13c>)
 8004058:	1e73      	subs	r3, r6, #1
 800405a:	4839      	ldr	r0, [pc, #228]	; (8004140 <rt_test_010_001_execute.lto_priv.0+0x130>)
  test_set_step(3);
 800405c:	602f      	str	r7, [r5, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 800405e:	f005 ffd7 	bl	800a010 <chThdCreateFromHeap>
 8004062:	4603      	mov	r3, r0
 8004064:	4f3a      	ldr	r7, [pc, #232]	; (8004150 <rt_test_010_001_execute.lto_priv.0+0x140>)
    test_assert(threads[0] != NULL, "thread creation failed");
 8004066:	3800      	subs	r0, #0
 8004068:	bf18      	it	ne
 800406a:	2001      	movne	r0, #1
 800406c:	4939      	ldr	r1, [pc, #228]	; (8004154 <rt_test_010_001_execute.lto_priv.0+0x144>)
    threads[0] = chThdCreateFromHeap(&heap1,
 800406e:	603b      	str	r3, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 8004070:	f7fc fce6 	bl	8000a40 <_test_assert>
 8004074:	2800      	cmp	r0, #0
 8004076:	d1e3      	bne.n	8004040 <rt_test_010_001_execute.lto_priv.0+0x30>
  test_set_step(4);
 8004078:	f04f 0c04 	mov.w	ip, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <rt_test_010_001_execute.lto_priv.0+0x148>)
 800407e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004082:	e9cd 8300 	strd	r8, r3, [sp]
 8004086:	4a35      	ldr	r2, [pc, #212]	; (800415c <rt_test_010_001_execute.lto_priv.0+0x14c>)
 8004088:	1eb3      	subs	r3, r6, #2
 800408a:	482d      	ldr	r0, [pc, #180]	; (8004140 <rt_test_010_001_execute.lto_priv.0+0x130>)
  test_set_step(4);
 800408c:	f8c5 c000 	str.w	ip, [r5]
    threads[1] = chThdCreateFromHeap(&heap1,
 8004090:	f005 ffbe 	bl	800a010 <chThdCreateFromHeap>
 8004094:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
 8004096:	3800      	subs	r0, #0
 8004098:	bf18      	it	ne
 800409a:	2001      	movne	r0, #1
 800409c:	492d      	ldr	r1, [pc, #180]	; (8004154 <rt_test_010_001_execute.lto_priv.0+0x144>)
    threads[1] = chThdCreateFromHeap(&heap1,
 800409e:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 80040a0:	f7fc fcce 	bl	8000a40 <_test_assert>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d1cb      	bne.n	8004040 <rt_test_010_001_execute.lto_priv.0+0x30>
  test_set_step(5);
 80040a8:	f04f 0c05 	mov.w	ip, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 80040ac:	4a2c      	ldr	r2, [pc, #176]	; (8004160 <rt_test_010_001_execute.lto_priv.0+0x150>)
 80040ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80040b2:	1ef3      	subs	r3, r6, #3
 80040b4:	9201      	str	r2, [sp, #4]
 80040b6:	4822      	ldr	r0, [pc, #136]	; (8004140 <rt_test_010_001_execute.lto_priv.0+0x130>)
 80040b8:	4a2a      	ldr	r2, [pc, #168]	; (8004164 <rt_test_010_001_execute.lto_priv.0+0x154>)
 80040ba:	f8cd 8000 	str.w	r8, [sp]
  test_set_step(5);
 80040be:	f8c5 c000 	str.w	ip, [r5]
    threads[2] = chThdCreateFromHeap(&heap1,
 80040c2:	f005 ffa5 	bl	800a010 <chThdCreateFromHeap>
 80040c6:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 80040c8:	fab0 f080 	clz	r0, r0
 80040cc:	4926      	ldr	r1, [pc, #152]	; (8004168 <rt_test_010_001_execute.lto_priv.0+0x158>)
 80040ce:	0940      	lsrs	r0, r0, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 80040d0:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 80040d2:	f7fc fcb5 	bl	8000a40 <_test_assert>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d1b2      	bne.n	8004040 <rt_test_010_001_execute.lto_priv.0+0x30>
  test_set_step(6);
 80040da:	2306      	movs	r3, #6
 80040dc:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 80040de:	f7fe fd1f 	bl	8002b20 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 80040e2:	4922      	ldr	r1, [pc, #136]	; (800416c <rt_test_010_001_execute.lto_priv.0+0x15c>)
 80040e4:	4822      	ldr	r0, [pc, #136]	; (8004170 <rt_test_010_001_execute.lto_priv.0+0x160>)
 80040e6:	f7fc fe2b 	bl	8000d40 <_test_assert_sequence>
 80040ea:	2800      	cmp	r0, #0
 80040ec:	d1a8      	bne.n	8004040 <rt_test_010_001_execute.lto_priv.0+0x30>
  test_set_step(7);
 80040ee:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 80040f0:	a903      	add	r1, sp, #12
 80040f2:	4813      	ldr	r0, [pc, #76]	; (8004140 <rt_test_010_001_execute.lto_priv.0+0x130>)
 80040f4:	aa02      	add	r2, sp, #8
  test_set_step(7);
 80040f6:	602b      	str	r3, [r5, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 80040f8:	f006 f9f2 	bl	800a4e0 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 80040fc:	1a20      	subs	r0, r4, r0
 80040fe:	fab0 f080 	clz	r0, r0
 8004102:	491c      	ldr	r1, [pc, #112]	; (8004174 <rt_test_010_001_execute.lto_priv.0+0x164>)
 8004104:	0940      	lsrs	r0, r0, #5
 8004106:	f7fc fc9b 	bl	8000a40 <_test_assert>
 800410a:	2800      	cmp	r0, #0
 800410c:	d198      	bne.n	8004040 <rt_test_010_001_execute.lto_priv.0+0x30>
    test_assert(total1 == total2, "total free space changed");
 800410e:	9805      	ldr	r0, [sp, #20]
 8004110:	9b03      	ldr	r3, [sp, #12]
 8004112:	4919      	ldr	r1, [pc, #100]	; (8004178 <rt_test_010_001_execute.lto_priv.0+0x168>)
 8004114:	1ac0      	subs	r0, r0, r3
 8004116:	fab0 f080 	clz	r0, r0
 800411a:	0940      	lsrs	r0, r0, #5
 800411c:	f7fc fc90 	bl	8000a40 <_test_assert>
 8004120:	2800      	cmp	r0, #0
 8004122:	d18d      	bne.n	8004040 <rt_test_010_001_execute.lto_priv.0+0x30>
    test_assert(largest1 == largest2, "largest fragment size changed");
 8004124:	9804      	ldr	r0, [sp, #16]
 8004126:	9b02      	ldr	r3, [sp, #8]
 8004128:	4914      	ldr	r1, [pc, #80]	; (800417c <rt_test_010_001_execute.lto_priv.0+0x16c>)
 800412a:	1ac0      	subs	r0, r0, r3
 800412c:	fab0 f080 	clz	r0, r0
 8004130:	0940      	lsrs	r0, r0, #5
 8004132:	f7fc fc85 	bl	8000a40 <_test_assert>
 8004136:	e783      	b.n	8004040 <rt_test_010_001_execute.lto_priv.0+0x30>
 8004138:	20000c88 	.word	0x20000c88
 800413c:	20001cf4 	.word	0x20001cf4
 8004140:	200013f4 	.word	0x200013f4
 8004144:	0800d470 	.word	0x0800d470
 8004148:	0800d2a8 	.word	0x0800d2a8
 800414c:	0800d308 	.word	0x0800d308
 8004150:	20001d0c 	.word	0x20001d0c
 8004154:	0800d334 	.word	0x0800d334
 8004158:	0800d2ac 	.word	0x0800d2ac
 800415c:	0800d310 	.word	0x0800d310
 8004160:	0800d318 	.word	0x0800d318
 8004164:	0800d31c 	.word	0x0800d31c
 8004168:	0800d34c 	.word	0x0800d34c
 800416c:	0800d288 	.word	0x0800d288
 8004170:	0800d480 	.word	0x0800d480
 8004174:	0800d484 	.word	0x0800d484
 8004178:	0800d49c 	.word	0x0800d49c
 800417c:	0800d4b8 	.word	0x0800d4b8
 8004180:	08000cc1 	.word	0x08000cc1
	...

08004190 <oslib_test_007_003_execute.lto_priv.0>:

static void oslib_test_007_003_execute(void) {

  /* [7.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 8004190:	2201      	movs	r2, #1
static void oslib_test_007_003_execute(void) {
 8004192:	b508      	push	{r3, lr}
  test_set_step(1);
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <oslib_test_007_003_execute.lto_priv.0+0x20>)
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8004196:	21c8      	movs	r1, #200	; 0xc8
 8004198:	4806      	ldr	r0, [pc, #24]	; (80041b4 <oslib_test_007_003_execute.lto_priv.0+0x24>)
  test_set_step(1);
 800419a:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 800419c:	f006 fee8 	bl	800af70 <chGuardedPoolAllocTimeout>
  }
  test_end_step(1);
}
 80041a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80041a4:	fab0 f080 	clz	r0, r0
 80041a8:	4903      	ldr	r1, [pc, #12]	; (80041b8 <oslib_test_007_003_execute.lto_priv.0+0x28>)
 80041aa:	0940      	lsrs	r0, r0, #5
 80041ac:	f7fc bc48 	b.w	8000a40 <_test_assert>
 80041b0:	20001cf4 	.word	0x20001cf4
 80041b4:	20000810 	.word	0x20000810
 80041b8:	0800c630 	.word	0x0800c630
 80041bc:	00000000 	.word	0x00000000

080041c0 <oslib_test_007_002_execute.lto_priv.0>:
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 80041c0:	4833      	ldr	r0, [pc, #204]	; (8004290 <oslib_test_007_002_execute.lto_priv.0+0xd0>)
  test_set_step(1);
 80041c2:	2301      	movs	r3, #1
static void oslib_test_007_002_execute(void) {
 80041c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c8:	4606      	mov	r6, r0
  test_set_step(1);
 80041ca:	4f32      	ldr	r7, [pc, #200]	; (8004294 <oslib_test_007_002_execute.lto_priv.0+0xd4>)
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 80041cc:	2204      	movs	r2, #4
 80041ce:	4932      	ldr	r1, [pc, #200]	; (8004298 <oslib_test_007_002_execute.lto_priv.0+0xd8>)
  test_set_step(1);
 80041d0:	603b      	str	r3, [r7, #0]
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 80041d2:	f006 fc05 	bl	800a9e0 <chGuardedPoolLoadArray>
  test_set_step(2);
 80041d6:	2302      	movs	r3, #2
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80041d8:	46b0      	mov	r8, r6
  test_set_step(2);
 80041da:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80041dc:	4d2f      	ldr	r5, [pc, #188]	; (800429c <oslib_test_007_002_execute.lto_priv.0+0xdc>)
  test_set_step(2);
 80041de:	603b      	str	r3, [r7, #0]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80041e0:	2100      	movs	r1, #0
 80041e2:	4640      	mov	r0, r8
 80041e4:	f006 fec4 	bl	800af70 <chGuardedPoolAllocTimeout>
 80041e8:	3800      	subs	r0, #0
 80041ea:	bf18      	it	ne
 80041ec:	2001      	movne	r0, #1
 80041ee:	4629      	mov	r1, r5
 80041f0:	f7fc fc26 	bl	8000a40 <_test_assert>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d148      	bne.n	800428a <oslib_test_007_002_execute.lto_priv.0+0xca>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80041f8:	3c01      	subs	r4, #1
 80041fa:	d1f1      	bne.n	80041e0 <oslib_test_007_002_execute.lto_priv.0+0x20>
  test_set_step(3);
 80041fc:	2303      	movs	r3, #3
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80041fe:	4621      	mov	r1, r4
 8004200:	4823      	ldr	r0, [pc, #140]	; (8004290 <oslib_test_007_002_execute.lto_priv.0+0xd0>)
  test_set_step(3);
 8004202:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004204:	f006 feb4 	bl	800af70 <chGuardedPoolAllocTimeout>
 8004208:	fab0 f080 	clz	r0, r0
 800420c:	4924      	ldr	r1, [pc, #144]	; (80042a0 <oslib_test_007_002_execute.lto_priv.0+0xe0>)
 800420e:	0940      	lsrs	r0, r0, #5
 8004210:	f7fc fc16 	bl	8000a40 <_test_assert>
 8004214:	2800      	cmp	r0, #0
 8004216:	d138      	bne.n	800428a <oslib_test_007_002_execute.lto_priv.0+0xca>
  test_set_step(4);
 8004218:	2304      	movs	r3, #4
 800421a:	f04f 0920 	mov.w	r9, #32
 800421e:	4d1e      	ldr	r5, [pc, #120]	; (8004298 <oslib_test_007_002_execute.lto_priv.0+0xd8>)
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8004220:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8004290 <oslib_test_007_002_execute.lto_priv.0+0xd0>
 8004224:	603b      	str	r3, [r7, #0]
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8004226:	f105 0810 	add.w	r8, r5, #16
      chGuardedPoolFree(&gmp1, &objects[i]);
 800422a:	462b      	mov	r3, r5
 800422c:	f389 8811 	msr	BASEPRI, r9
  php->next = mp->next;
 8004230:	68f2      	ldr	r2, [r6, #12]
 8004232:	4650      	mov	r0, sl
 8004234:	f845 2b04 	str.w	r2, [r5], #4
  mp->next = php;
 8004238:	60f3      	str	r3, [r6, #12]
 800423a:	f006 fb81 	bl	800a940 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 800423e:	f005 fe8f 	bl	8009f60 <chSchRescheduleS>
 8004242:	f384 8811 	msr	BASEPRI, r4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8004246:	4545      	cmp	r5, r8
 8004248:	d1ef      	bne.n	800422a <oslib_test_007_002_execute.lto_priv.0+0x6a>
  test_set_step(5);
 800424a:	2305      	movs	r3, #5
 800424c:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800424e:	4e10      	ldr	r6, [pc, #64]	; (8004290 <oslib_test_007_002_execute.lto_priv.0+0xd0>)
 8004250:	4d12      	ldr	r5, [pc, #72]	; (800429c <oslib_test_007_002_execute.lto_priv.0+0xdc>)
  test_set_step(5);
 8004252:	603b      	str	r3, [r7, #0]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8004254:	2100      	movs	r1, #0
 8004256:	4630      	mov	r0, r6
 8004258:	f006 fe8a 	bl	800af70 <chGuardedPoolAllocTimeout>
 800425c:	3800      	subs	r0, #0
 800425e:	bf18      	it	ne
 8004260:	2001      	movne	r0, #1
 8004262:	4629      	mov	r1, r5
 8004264:	f7fc fbec 	bl	8000a40 <_test_assert>
 8004268:	b978      	cbnz	r0, 800428a <oslib_test_007_002_execute.lto_priv.0+0xca>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800426a:	3c01      	subs	r4, #1
 800426c:	d1f2      	bne.n	8004254 <oslib_test_007_002_execute.lto_priv.0+0x94>
  test_set_step(6);
 800426e:	2306      	movs	r3, #6
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004270:	4621      	mov	r1, r4
 8004272:	4807      	ldr	r0, [pc, #28]	; (8004290 <oslib_test_007_002_execute.lto_priv.0+0xd0>)
  test_set_step(6);
 8004274:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004276:	f006 fe7b 	bl	800af70 <chGuardedPoolAllocTimeout>
}
 800427a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800427e:	fab0 f080 	clz	r0, r0
 8004282:	4907      	ldr	r1, [pc, #28]	; (80042a0 <oslib_test_007_002_execute.lto_priv.0+0xe0>)
 8004284:	0940      	lsrs	r0, r0, #5
 8004286:	f7fc bbdb 	b.w	8000a40 <_test_assert>
}
 800428a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428e:	bf00      	nop
 8004290:	20000810 	.word	0x20000810
 8004294:	20001cf4 	.word	0x20001cf4
 8004298:	200015a8 	.word	0x200015a8
 800429c:	0800c624 	.word	0x0800c624
 80042a0:	0800c630 	.word	0x0800c630
	...

080042b0 <thread2>:
static THD_FUNCTION(thread2, p) {
 80042b0:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 80042b2:	2064      	movs	r0, #100	; 0x64
 80042b4:	f007 f944 	bl	800b540 <chThdSleep>
 80042b8:	2320      	movs	r3, #32
 80042ba:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
 80042be:	4804      	ldr	r0, [pc, #16]	; (80042d0 <thread2+0x20>)
 80042c0:	f006 fb3e 	bl	800a940 <chSemSignalI>
  chSchRescheduleS();
 80042c4:	f005 fe4c 	bl	8009f60 <chSchRescheduleS>
 80042c8:	2300      	movs	r3, #0
 80042ca:	f383 8811 	msr	BASEPRI, r3
}
 80042ce:	bd08      	pop	{r3, pc}
 80042d0:	200015bc 	.word	0x200015bc
	...

080042e0 <thread4>:
 80042e0:	2220      	movs	r2, #32
static THD_FUNCTION(thread4, p) {
 80042e2:	b508      	push	{r3, lr}
 80042e4:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 80042e8:	6883      	ldr	r3, [r0, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	dd05      	ble.n	80042fa <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80042ee:	f005 fe37 	bl	8009f60 <chSchRescheduleS>
 80042f2:	2300      	movs	r3, #0
 80042f4:	f383 8811 	msr	BASEPRI, r3
}
 80042f8:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 80042fa:	f006 fb21 	bl	800a940 <chSemSignalI>
  chSchRescheduleS();
 80042fe:	f005 fe2f 	bl	8009f60 <chSchRescheduleS>
 8004302:	2300      	movs	r3, #0
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	bd08      	pop	{r3, pc}
 800430a:	bf00      	nop
 800430c:	0000      	movs	r0, r0
	...

08004310 <oslib_test_006_001_execute.lto_priv.0>:
 * - [6.1.5] Checking cached objects.
 * - [6.1.6] Checking non-cached objects.
 * .
 */

static void oslib_test_006_001_execute(void) {
 8004310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ocp->hashn            = hashn;
 8004314:	2408      	movs	r4, #8
  ocp->hashp            = hashp;
 8004316:	4aca      	ldr	r2, [pc, #808]	; (8004640 <oslib_test_006_001_execute.lto_priv.0+0x330>)
  ocp->lru.hash_next    = NULL;
 8004318:	2100      	movs	r1, #0
  sp->cnt = n;
 800431a:	2701      	movs	r7, #1
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 800431c:	4613      	mov	r3, r2
 800431e:	2004      	movs	r0, #4
  tqp->next = (thread_t *)tqp;
 8004320:	4ec8      	ldr	r6, [pc, #800]	; (8004644 <oslib_test_006_001_execute.lto_priv.0+0x334>)
  ocp->objvp            = objvp;
 8004322:	4dc9      	ldr	r5, [pc, #804]	; (8004648 <oslib_test_006_001_execute.lto_priv.0+0x338>)
  ocp->hashn            = hashn;
 8004324:	6034      	str	r4, [r6, #0]
  ocp->readf            = readf;
 8004326:	4cc9      	ldr	r4, [pc, #804]	; (800464c <oslib_test_006_001_execute.lto_priv.0+0x33c>)
  ocp->hashp            = hashp;
 8004328:	6072      	str	r2, [r6, #4]
  ocp->readf            = readf;
 800432a:	63f4      	str	r4, [r6, #60]	; 0x3c
 800432c:	f106 0424 	add.w	r4, r6, #36	; 0x24
  tqp->prev = (thread_t *)tqp;
 8004330:	e9c6 4409 	strd	r4, r4, [r6, #36]	; 0x24
  tqp->next = (thread_t *)tqp;
 8004334:	f106 0430 	add.w	r4, r6, #48	; 0x30
  ocp->writef           = writef;
 8004338:	4ac5      	ldr	r2, [pc, #788]	; (8004650 <oslib_test_006_001_execute.lto_priv.0+0x340>)
  tqp->prev = (thread_t *)tqp;
 800433a:	e9c6 440c 	strd	r4, r4, [r6, #48]	; 0x30
  ocp->lru.hash_prev    = NULL;
 800433e:	e9c6 1105 	strd	r1, r1, [r6, #20]
 8004342:	62f7      	str	r7, [r6, #44]	; 0x2c
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8004344:	f106 0714 	add.w	r7, r6, #20
  ocp->writef           = writef;
 8004348:	6432      	str	r2, [r6, #64]	; 0x40
  ocp->objvp            = objvp;
 800434a:	6135      	str	r5, [r6, #16]
 800434c:	f103 0240 	add.w	r2, r3, #64	; 0x40
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8004350:	6237      	str	r7, [r6, #32]
 8004352:	63b0      	str	r0, [r6, #56]	; 0x38
  ocp->objn             = objn;
 8004354:	60b0      	str	r0, [r6, #8]
    hashp->hash_prev = (oc_object_t *)hashp;
 8004356:	e9c3 3300 	strd	r3, r3, [r3]
    hashp++;
 800435a:	3308      	adds	r3, #8
  } while (hashp < &ocp->hashp[ocp->hashn]);
 800435c:	4293      	cmp	r3, r2
 800435e:	d1fa      	bne.n	8004356 <oslib_test_006_001_execute.lto_priv.0+0x46>
 8004360:	4bb9      	ldr	r3, [pc, #740]	; (8004648 <oslib_test_006_001_execute.lto_priv.0+0x338>)
 8004362:	2501      	movs	r5, #1
    objp->obj_group = 0U;
 8004364:	2200      	movs	r2, #0
  } while (hashp < &ocp->hashp[ocp->hashn]);
 8004366:	49bb      	ldr	r1, [pc, #748]	; (8004654 <oslib_test_006_001_execute.lto_priv.0+0x344>)
 8004368:	f103 0cf0 	add.w	ip, r3, #240	; 0xf0
 800436c:	e000      	b.n	8004370 <oslib_test_006_001_execute.lto_priv.0+0x60>
  } while (objn > (ucnt_t)0);
 800436e:	4603      	mov	r3, r0
    objvp = (void *)((uint8_t *)objvp + objsz);
 8004370:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8004374:	f103 0418 	add.w	r4, r3, #24
  } while (objn > (ucnt_t)0);
 8004378:	4560      	cmp	r0, ip
    LRU_INSERT_HEAD(ocp, objp);
 800437a:	e9c3 1702 	strd	r1, r7, [r3, #8]
 800437e:	e9c3 4406 	strd	r4, r4, [r3, #24]
 8004382:	621d      	str	r5, [r3, #32]
 8004384:	60cb      	str	r3, [r1, #12]
 8004386:	4619      	mov	r1, r3
    objp->obj_key   = 0U;
 8004388:	e9c3 2204 	strd	r2, r2, [r3, #16]
    objp->dptr      = NULL;
 800438c:	e9c3 5209 	strd	r5, r2, [r3, #36]	; 0x24
  } while (objn > (ucnt_t)0);
 8004390:	d1ed      	bne.n	800436e <oslib_test_006_001_execute.lto_priv.0+0x5e>
                      obj_write);
  }
  test_end_step(1);

  /* [6.1.2] Getting and releasing objects without initialization.*/
  test_set_step(2);
 8004392:	2202      	movs	r2, #2
  {
    uint32_t i;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8004394:	2700      	movs	r7, #0
  test_set_step(2);
 8004396:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 8004674 <oslib_test_006_001_execute.lto_priv.0+0x364>
 800439a:	4baf      	ldr	r3, [pc, #700]	; (8004658 <oslib_test_006_001_execute.lto_priv.0+0x348>)
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800439c:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8004664 <oslib_test_006_001_execute.lto_priv.0+0x354>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 80043a0:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004678 <oslib_test_006_001_execute.lto_priv.0+0x368>
 */
static inline void chCacheReleaseObject(objects_cache_t *ocp,
                                        oc_object_t *objp) {

  chSysLock();
  chCacheReleaseObjectI(ocp, objp);
 80043a4:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8004644 <oslib_test_006_001_execute.lto_priv.0+0x334>
  test_set_step(2);
 80043a8:	f8cb 2000 	str.w	r2, [fp]
 80043ac:	61f3      	str	r3, [r6, #28]
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 80043ae:	4638      	mov	r0, r7
 80043b0:	f7fd feee 	bl	8002190 <chCacheGetObject.constprop.0>
 80043b4:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 80043b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80043b8:	4641      	mov	r1, r8
 80043ba:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80043be:	f7fc fb3f 	bl	8000a40 <_test_assert>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	f040 813a 	bne.w	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 80043c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80043ca:	4649      	mov	r1, r9
 80043cc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80043d0:	f7fc fb36 	bl	8000a40 <_test_assert>
 80043d4:	4605      	mov	r5, r0
 80043d6:	2800      	cmp	r0, #0
 80043d8:	f040 8130 	bne.w	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
 80043dc:	2320      	movs	r3, #32
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	4621      	mov	r1, r4
 80043e4:	4650      	mov	r0, sl
 80043e6:	f006 fabb 	bl	800a960 <chCacheReleaseObjectI>
  chSchRescheduleS();
 80043ea:	f005 fdb9 	bl	8009f60 <chSchRescheduleS>
 80043ee:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 80043f2:	3701      	adds	r7, #1
 80043f4:	2f08      	cmp	r7, #8
 80043f6:	d1da      	bne.n	80043ae <oslib_test_006_001_execute.lto_priv.0+0x9e>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("", "unexpected tokens");
 80043f8:	4998      	ldr	r1, [pc, #608]	; (800465c <oslib_test_006_001_execute.lto_priv.0+0x34c>)
 80043fa:	4899      	ldr	r0, [pc, #612]	; (8004660 <oslib_test_006_001_execute.lto_priv.0+0x350>)
 80043fc:	f7fc fca0 	bl	8000d40 <_test_assert_sequence>
 8004400:	4605      	mov	r5, r0
 8004402:	2800      	cmp	r0, #0
 8004404:	f040 811a 	bne.w	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
  }
  test_end_step(2);

  /* [6.1.3] Getting and releasing objects with synchronous
     initialization.*/
  test_set_step(3);
 8004408:	2303      	movs	r3, #3
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800440a:	4f96      	ldr	r7, [pc, #600]	; (8004664 <oslib_test_006_001_execute.lto_priv.0+0x354>)
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 800440c:	f8df 926c 	ldr.w	r9, [pc, #620]	; 800467c <oslib_test_006_001_execute.lto_priv.0+0x36c>
  /* Marking it as OC_FLAG_NOTSYNC because the read operation is going
     to corrupt it in case of failure. It is responsibility of the read
     implementation to clear it if the operation succeeds.*/
  objp->obj_flags |= OC_FLAG_NOTSYNC;

  return ocp->readf(ocp, objp, async);
 8004410:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8004644 <oslib_test_006_001_execute.lto_priv.0+0x334>
  test_set_step(3);
 8004414:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8004418:	4628      	mov	r0, r5
 800441a:	f7fd feb9 	bl	8002190 <chCacheGetObject.constprop.0>
 800441e:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004420:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004422:	4639      	mov	r1, r7
 8004424:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004428:	f7fc fb0a 	bl	8000a40 <_test_assert>
 800442c:	2800      	cmp	r0, #0
 800442e:	f040 8105 	bne.w	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8004432:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004434:	4649      	mov	r1, r9
 8004436:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800443a:	f7fc fb01 	bl	8000a40 <_test_assert>
 800443e:	4602      	mov	r2, r0
 8004440:	2800      	cmp	r0, #0
 8004442:	f040 80fb 	bne.w	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8004446:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8004448:	4621      	mov	r1, r4
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 800444a:	f043 0308 	orr.w	r3, r3, #8
 800444e:	6263      	str	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8004450:	4640      	mov	r0, r8
 8004452:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004454:	4798      	blx	r3

      error = chCacheReadObject(&cache1, objp, false);

      test_assert(error == false, "returned error");
 8004456:	f080 0001 	eor.w	r0, r0, #1
 800445a:	4983      	ldr	r1, [pc, #524]	; (8004668 <oslib_test_006_001_execute.lto_priv.0+0x358>)
 800445c:	b2c0      	uxtb	r0, r0
 800445e:	f7fc faef 	bl	8000a40 <_test_assert>
 8004462:	2800      	cmp	r0, #0
 8004464:	f040 80ea 	bne.w	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004468:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800446a:	4639      	mov	r1, r7
 800446c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004470:	f7fc fae6 	bl	8000a40 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8004474:	497d      	ldr	r1, [pc, #500]	; (800466c <oslib_test_006_001_execute.lto_priv.0+0x35c>)
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004476:	2800      	cmp	r0, #0
 8004478:	f040 80e0 	bne.w	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 800447c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800447e:	f080 0008 	eor.w	r0, r0, #8
 8004482:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004486:	f7fc fadb 	bl	8000a40 <_test_assert>
 800448a:	4682      	mov	sl, r0
 800448c:	2800      	cmp	r0, #0
 800448e:	f040 80d5 	bne.w	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
 8004492:	2320      	movs	r3, #32
 8004494:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8004498:	4621      	mov	r1, r4
 800449a:	4640      	mov	r0, r8
 800449c:	f006 fa60 	bl	800a960 <chCacheReleaseObjectI>
  chSchRescheduleS();
 80044a0:	f005 fd5e 	bl	8009f60 <chSchRescheduleS>
 80044a4:	f38a 8811 	msr	BASEPRI, sl
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 80044a8:	3501      	adds	r5, #1
 80044aa:	2d08      	cmp	r5, #8
 80044ac:	d1b4      	bne.n	8004418 <oslib_test_006_001_execute.lto_priv.0+0x108>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 80044ae:	496b      	ldr	r1, [pc, #428]	; (800465c <oslib_test_006_001_execute.lto_priv.0+0x34c>)
 80044b0:	486f      	ldr	r0, [pc, #444]	; (8004670 <oslib_test_006_001_execute.lto_priv.0+0x360>)
 80044b2:	f7fc fc45 	bl	8000d40 <_test_assert_sequence>
 80044b6:	4605      	mov	r5, r0
 80044b8:	2800      	cmp	r0, #0
 80044ba:	f040 80bf 	bne.w	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
  }
  test_end_step(3);

  /* [6.1.4] Getting and releasing objects with asynchronous
     initialization.*/
  test_set_step(4);
 80044be:	2304      	movs	r3, #4
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 80044c0:	4f68      	ldr	r7, [pc, #416]	; (8004664 <oslib_test_006_001_execute.lto_priv.0+0x354>)
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 80044c2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800467c <oslib_test_006_001_execute.lto_priv.0+0x36c>
 80044c6:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8004644 <oslib_test_006_001_execute.lto_priv.0+0x334>
  test_set_step(4);
 80044ca:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 80044ce:	4628      	mov	r0, r5
 80044d0:	f7fd fe5e 	bl	8002190 <chCacheGetObject.constprop.0>
 80044d4:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 80044d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80044d8:	4639      	mov	r1, r7
 80044da:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80044de:	f7fc faaf 	bl	8000a40 <_test_assert>
 80044e2:	2800      	cmp	r0, #0
 80044e4:	f040 80aa 	bne.w	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 80044e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80044ea:	4649      	mov	r1, r9
 80044ec:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80044f0:	f7fc faa6 	bl	8000a40 <_test_assert>
 80044f4:	2800      	cmp	r0, #0
 80044f6:	f040 80a1 	bne.w	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 80044fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 80044fc:	4621      	mov	r1, r4
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 80044fe:	f043 0308 	orr.w	r3, r3, #8
 8004502:	6263      	str	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8004504:	2201      	movs	r2, #1
 8004506:	4640      	mov	r0, r8
 8004508:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800450a:	4798      	blx	r3

      error = chCacheReadObject(&cache1, objp, true);

      test_assert(error == false, "returned error");
 800450c:	f080 0001 	eor.w	r0, r0, #1
 8004510:	4955      	ldr	r1, [pc, #340]	; (8004668 <oslib_test_006_001_execute.lto_priv.0+0x358>)
 8004512:	b2c0      	uxtb	r0, r0
 8004514:	f7fc fa94 	bl	8000a40 <_test_assert>
 8004518:	2800      	cmp	r0, #0
 800451a:	f040 808f 	bne.w	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>

      objp = chCacheGetObject(&cache1, 0U, i);
 800451e:	4628      	mov	r0, r5
 8004520:	f7fd fe36 	bl	8002190 <chCacheGetObject.constprop.0>
 8004524:	4604      	mov	r4, r0

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004526:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004528:	4639      	mov	r1, r7
 800452a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800452e:	f7fc fa87 	bl	8000a40 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8004532:	494e      	ldr	r1, [pc, #312]	; (800466c <oslib_test_006_001_execute.lto_priv.0+0x35c>)
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004534:	2800      	cmp	r0, #0
 8004536:	f040 8081 	bne.w	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 800453a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800453c:	f080 0008 	eor.w	r0, r0, #8
 8004540:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004544:	f7fc fa7c 	bl	8000a40 <_test_assert>
 8004548:	4682      	mov	sl, r0
 800454a:	2800      	cmp	r0, #0
 800454c:	d176      	bne.n	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
 800454e:	2320      	movs	r3, #32
 8004550:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8004554:	4621      	mov	r1, r4
 8004556:	4640      	mov	r0, r8
 8004558:	f006 fa02 	bl	800a960 <chCacheReleaseObjectI>
  chSchRescheduleS();
 800455c:	f005 fd00 	bl	8009f60 <chSchRescheduleS>
 8004560:	f38a 8811 	msr	BASEPRI, sl
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8004564:	3501      	adds	r5, #1
 8004566:	2d08      	cmp	r5, #8
 8004568:	d1b1      	bne.n	80044ce <oslib_test_006_001_execute.lto_priv.0+0x1be>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 800456a:	493c      	ldr	r1, [pc, #240]	; (800465c <oslib_test_006_001_execute.lto_priv.0+0x34c>)
 800456c:	4840      	ldr	r0, [pc, #256]	; (8004670 <oslib_test_006_001_execute.lto_priv.0+0x360>)
 800456e:	f7fc fbe7 	bl	8000d40 <_test_assert_sequence>
 8004572:	2800      	cmp	r0, #0
 8004574:	d162      	bne.n	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
  }
  test_end_step(4);

  /* [6.1.5] Checking cached objects.*/
  test_set_step(5);
 8004576:	2305      	movs	r3, #5
  {
    uint32_t i;

    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 8004578:	2604      	movs	r6, #4
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800457a:	4f3a      	ldr	r7, [pc, #232]	; (8004664 <oslib_test_006_001_execute.lto_priv.0+0x354>)
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 800457c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800466c <oslib_test_006_001_execute.lto_priv.0+0x35c>
  chCacheReleaseObjectI(ocp, objp);
 8004580:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8004644 <oslib_test_006_001_execute.lto_priv.0+0x334>
  test_set_step(5);
 8004584:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8004588:	4630      	mov	r0, r6
 800458a:	f7fd fe01 	bl	8002190 <chCacheGetObject.constprop.0>
 800458e:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004590:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004592:	4639      	mov	r1, r7
 8004594:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004598:	f7fc fa52 	bl	8000a40 <_test_assert>
 800459c:	2800      	cmp	r0, #0
 800459e:	d14d      	bne.n	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 80045a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80045a2:	4641      	mov	r1, r8
 80045a4:	f080 0008 	eor.w	r0, r0, #8
 80045a8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80045ac:	f7fc fa48 	bl	8000a40 <_test_assert>
 80045b0:	4605      	mov	r5, r0
 80045b2:	2800      	cmp	r0, #0
 80045b4:	d142      	bne.n	800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
 80045b6:	2320      	movs	r3, #32
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	4621      	mov	r1, r4
 80045be:	4648      	mov	r0, r9
 80045c0:	f006 f9ce 	bl	800a960 <chCacheReleaseObjectI>
  chSchRescheduleS();
 80045c4:	f005 fccc 	bl	8009f60 <chSchRescheduleS>
 80045c8:	f385 8811 	msr	BASEPRI, r5
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 80045cc:	3601      	adds	r6, #1
 80045ce:	2e08      	cmp	r6, #8
 80045d0:	d1da      	bne.n	8004588 <oslib_test_006_001_execute.lto_priv.0+0x278>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("", "unexpected tokens");
 80045d2:	4922      	ldr	r1, [pc, #136]	; (800465c <oslib_test_006_001_execute.lto_priv.0+0x34c>)
 80045d4:	4822      	ldr	r0, [pc, #136]	; (8004660 <oslib_test_006_001_execute.lto_priv.0+0x350>)
 80045d6:	f7fc fbb3 	bl	8000d40 <_test_assert_sequence>
 80045da:	4604      	mov	r4, r0
 80045dc:	bb70      	cbnz	r0, 800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
  }
  test_end_step(5);

  /* [6.1.6] Checking non-cached objects.*/
  test_set_step(6);
 80045de:	2306      	movs	r3, #6
    uint32_t i;

    for (i = 0; i < NUM_OBJECTS; i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 80045e0:	4f20      	ldr	r7, [pc, #128]	; (8004664 <oslib_test_006_001_execute.lto_priv.0+0x354>)
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 80045e2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800467c <oslib_test_006_001_execute.lto_priv.0+0x36c>
  chCacheReleaseObjectI(ocp, objp);
 80045e6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8004644 <oslib_test_006_001_execute.lto_priv.0+0x334>
  test_set_step(6);
 80045ea:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 80045ee:	4620      	mov	r0, r4
 80045f0:	f7fd fdce 	bl	8002190 <chCacheGetObject.constprop.0>
 80045f4:	4605      	mov	r5, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 80045f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80045f8:	4639      	mov	r1, r7
 80045fa:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80045fe:	f7fc fa1f 	bl	8000a40 <_test_assert>
 8004602:	b9d8      	cbnz	r0, 800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8004604:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004606:	4649      	mov	r1, r9
 8004608:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800460c:	f7fc fa18 	bl	8000a40 <_test_assert>
 8004610:	4606      	mov	r6, r0
 8004612:	b998      	cbnz	r0, 800463c <oslib_test_006_001_execute.lto_priv.0+0x32c>
 8004614:	2320      	movs	r3, #32
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	4629      	mov	r1, r5
 800461c:	4640      	mov	r0, r8
 800461e:	f006 f99f 	bl	800a960 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8004622:	f005 fc9d 	bl	8009f60 <chSchRescheduleS>
 8004626:	f386 8811 	msr	BASEPRI, r6
    for (i = 0; i < NUM_OBJECTS; i++) {
 800462a:	3401      	adds	r4, #1
 800462c:	2c04      	cmp	r4, #4
 800462e:	d1de      	bne.n	80045ee <oslib_test_006_001_execute.lto_priv.0+0x2de>
    }

    test_assert_sequence("", "unexpected tokens");
  }
  test_end_step(6);
}
 8004630:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("", "unexpected tokens");
 8004634:	4909      	ldr	r1, [pc, #36]	; (800465c <oslib_test_006_001_execute.lto_priv.0+0x34c>)
 8004636:	480a      	ldr	r0, [pc, #40]	; (8004660 <oslib_test_006_001_execute.lto_priv.0+0x350>)
 8004638:	f7fc bb82 	b.w	8000d40 <_test_assert_sequence>
}
 800463c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004640:	200013b4 	.word	0x200013b4
 8004644:	20000c44 	.word	0x20000c44
 8004648:	200014b8 	.word	0x200014b8
 800464c:	08004681 	.word	0x08004681
 8004650:	08000bc1 	.word	0x08000bc1
 8004654:	20000c58 	.word	0x20000c58
 8004658:	2000156c 	.word	0x2000156c
 800465c:	0800d4fc 	.word	0x0800d4fc
 8004660:	0800e33c 	.word	0x0800e33c
 8004664:	0800d4d8 	.word	0x0800d4d8
 8004668:	0800d510 	.word	0x0800d510
 800466c:	0800d520 	.word	0x0800d520
 8004670:	0800d52c 	.word	0x0800d52c
 8004674:	20001cf4 	.word	0x20001cf4
 8004678:	0800d4e4 	.word	0x0800d4e4
 800467c:	0800d524 	.word	0x0800d524

08004680 <obj_read>:
                     bool async) {
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	460c      	mov	r4, r1
 8004684:	4615      	mov	r5, r2
  test_emit_token('a' + objp->obj_key);
 8004686:	694b      	ldr	r3, [r1, #20]
                     bool async) {
 8004688:	4606      	mov	r6, r0
  test_emit_token('a' + objp->obj_key);
 800468a:	3361      	adds	r3, #97	; 0x61
 800468c:	b2d8      	uxtb	r0, r3
 800468e:	f7fc fa7f 	bl	8000b90 <test_emit_token>
  objp->obj_flags &= ~OC_FLAG_NOTSYNC;
 8004692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004694:	f023 0308 	bic.w	r3, r3, #8
 8004698:	6263      	str	r3, [r4, #36]	; 0x24
  if (async) {
 800469a:	b90d      	cbnz	r5, 80046a0 <obj_read+0x20>
}
 800469c:	2000      	movs	r0, #0
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	2320      	movs	r3, #32
 80046a2:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 80046a6:	4621      	mov	r1, r4
 80046a8:	4630      	mov	r0, r6
 80046aa:	f006 f959 	bl	800a960 <chCacheReleaseObjectI>
  chSchRescheduleS();
 80046ae:	f005 fc57 	bl	8009f60 <chSchRescheduleS>
 80046b2:	2300      	movs	r3, #0
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	2000      	movs	r0, #0
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
 80046bc:	0000      	movs	r0, r0
	...

080046c0 <oslib_test_005_001_execute.lto_priv.0>:
 *   emitted tokens.
 * - [5.1.3] Waiting for the thread to terminate-.
 * .
 */

static void oslib_test_005_001_execute(void) {
 80046c0:	b570      	push	{r4, r5, r6, lr}
  thread_t *tp;

  /* [5.1.1] Starting the dispatcher thread.*/
  test_set_step(1);
 80046c2:	2601      	movs	r6, #1
  {
    thread_descriptor_t td = {
 80046c4:	2500      	movs	r5, #0
  return ch.rlist.current;
 80046c6:	4a4c      	ldr	r2, [pc, #304]	; (80047f8 <oslib_test_005_001_execute.lto_priv.0+0x138>)
static void oslib_test_005_001_execute(void) {
 80046c8:	b08a      	sub	sp, #40	; 0x28
  return chThdGetSelfX()->prio;
 80046ca:	6992      	ldr	r2, [r2, #24]
    thread_descriptor_t td = {
 80046cc:	4b4b      	ldr	r3, [pc, #300]	; (80047fc <oslib_test_005_001_execute.lto_priv.0+0x13c>)
      .name  = "dispatcher",
      .wbase = waThread1,
      .wend  = THD_WORKING_AREA_END(waThread1),
      .prio  = chThdGetPriorityX() + 1,
 80046ce:	6892      	ldr	r2, [r2, #8]
    thread_descriptor_t td = {
 80046d0:	494b      	ldr	r1, [pc, #300]	; (8004800 <oslib_test_005_001_execute.lto_priv.0+0x140>)
      .prio  = chThdGetPriorityX() + 1,
 80046d2:	4432      	add	r2, r6
  test_set_step(1);
 80046d4:	4c4b      	ldr	r4, [pc, #300]	; (8004804 <oslib_test_005_001_execute.lto_priv.0+0x144>)
    thread_descriptor_t td = {
 80046d6:	9207      	str	r2, [sp, #28]
 80046d8:	4a4b      	ldr	r2, [pc, #300]	; (8004808 <oslib_test_005_001_execute.lto_priv.0+0x148>)
 80046da:	9305      	str	r3, [sp, #20]
      .funcp = Thread1,
      .arg   = NULL
    };
    tp = chThdCreate(&td);
 80046dc:	a804      	add	r0, sp, #16
    thread_descriptor_t td = {
 80046de:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80046e2:	9306      	str	r3, [sp, #24]
 80046e4:	9509      	str	r5, [sp, #36]	; 0x24
 80046e6:	9104      	str	r1, [sp, #16]
 80046e8:	9208      	str	r2, [sp, #32]
  test_set_step(1);
 80046ea:	6026      	str	r6, [r4, #0]
    tp = chThdCreate(&td);
 80046ec:	f005 fcd8 	bl	800a0a0 <chThdCreate>
  }
  test_end_step(1);

  /* [5.1.2] Calling the default veneers, checking the result and the
     emitted tokens.*/
  test_set_step(2);
 80046f0:	2302      	movs	r3, #2
 * @param[in] func      pointer to the function to be called
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect0(thread_t *tp, delegate_fn0_t func) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 80046f2:	4946      	ldr	r1, [pc, #280]	; (800480c <oslib_test_005_001_execute.lto_priv.0+0x14c>)
 80046f4:	4a46      	ldr	r2, [pc, #280]	; (8004810 <oslib_test_005_001_execute.lto_priv.0+0x150>)
 80046f6:	6023      	str	r3, [r4, #0]
    tp = chThdCreate(&td);
 80046f8:	4605      	mov	r5, r0
 80046fa:	f005 fd81 	bl	800a200 <chDelegateCallVeneer>
  {
    int retval;

    retval = chDelegateCallDirect0(tp, (delegate_fn0_t)dis_func0);
    test_assert(retval == 0x55AA, "invalid return value");
 80046fe:	f245 53aa 	movw	r3, #21930	; 0x55aa
 8004702:	1ac0      	subs	r0, r0, r3
 8004704:	fab0 f080 	clz	r0, r0
 8004708:	4942      	ldr	r1, [pc, #264]	; (8004814 <oslib_test_005_001_execute.lto_priv.0+0x154>)
 800470a:	0940      	lsrs	r0, r0, #5
 800470c:	f7fc f998 	bl	8000a40 <_test_assert>
 8004710:	b108      	cbz	r0, 8004716 <oslib_test_005_001_execute.lto_priv.0+0x56>
  {
    msg_t msg = chThdWait(tp);
    test_assert(msg == 0x0FA5, "invalid exit code");
  }
  test_end_step(3);
}
 8004712:	b00a      	add	sp, #40	; 0x28
 8004714:	bd70      	pop	{r4, r5, r6, pc}
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect1(thread_t *tp, delegate_fn1_t func,
                                          msg_t p1) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn1, func, p1);
 8004716:	4940      	ldr	r1, [pc, #256]	; (8004818 <oslib_test_005_001_execute.lto_priv.0+0x158>)
 8004718:	2341      	movs	r3, #65	; 0x41
 800471a:	4628      	mov	r0, r5
 800471c:	4a3f      	ldr	r2, [pc, #252]	; (800481c <oslib_test_005_001_execute.lto_priv.0+0x15c>)
 800471e:	f005 fd6f 	bl	800a200 <chDelegateCallVeneer>
    test_assert(retval == (int)'A', "invalid return value");
 8004722:	f1a0 0041 	sub.w	r0, r0, #65	; 0x41
 8004726:	fab0 f080 	clz	r0, r0
 800472a:	493a      	ldr	r1, [pc, #232]	; (8004814 <oslib_test_005_001_execute.lto_priv.0+0x154>)
 800472c:	0940      	lsrs	r0, r0, #5
 800472e:	f7fc f987 	bl	8000a40 <_test_assert>
 8004732:	2800      	cmp	r0, #0
 8004734:	d1ed      	bne.n	8004712 <oslib_test_005_001_execute.lto_priv.0+0x52>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect2(thread_t *tp, delegate_fn2_t func,
                                          msg_t p1, msg_t p2) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn2, func, p1, p2);
 8004736:	2243      	movs	r2, #67	; 0x43
 8004738:	4939      	ldr	r1, [pc, #228]	; (8004820 <oslib_test_005_001_execute.lto_priv.0+0x160>)
 800473a:	9200      	str	r2, [sp, #0]
 800473c:	2342      	movs	r3, #66	; 0x42
 800473e:	4628      	mov	r0, r5
 8004740:	4a38      	ldr	r2, [pc, #224]	; (8004824 <oslib_test_005_001_execute.lto_priv.0+0x164>)
 8004742:	f005 fd5d 	bl	800a200 <chDelegateCallVeneer>
    test_assert(retval == (int)'B', "invalid return value");
 8004746:	f1a0 0042 	sub.w	r0, r0, #66	; 0x42
 800474a:	fab0 f080 	clz	r0, r0
 800474e:	4931      	ldr	r1, [pc, #196]	; (8004814 <oslib_test_005_001_execute.lto_priv.0+0x154>)
 8004750:	0940      	lsrs	r0, r0, #5
 8004752:	f7fc f975 	bl	8000a40 <_test_assert>
 8004756:	2800      	cmp	r0, #0
 8004758:	d1db      	bne.n	8004712 <oslib_test_005_001_execute.lto_priv.0+0x52>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect3(thread_t *tp, delegate_fn3_t func,
                                          msg_t p1, msg_t p2, msg_t p3) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn3, func, p1, p2, p3);
 800475a:	2345      	movs	r3, #69	; 0x45
 800475c:	2246      	movs	r2, #70	; 0x46
 800475e:	4932      	ldr	r1, [pc, #200]	; (8004828 <oslib_test_005_001_execute.lto_priv.0+0x168>)
 8004760:	e9cd 3200 	strd	r3, r2, [sp]
 8004764:	4628      	mov	r0, r5
 8004766:	2344      	movs	r3, #68	; 0x44
 8004768:	4a30      	ldr	r2, [pc, #192]	; (800482c <oslib_test_005_001_execute.lto_priv.0+0x16c>)
 800476a:	f005 fd49 	bl	800a200 <chDelegateCallVeneer>
    test_assert(retval == (int)'D', "invalid return value");
 800476e:	f1a0 0044 	sub.w	r0, r0, #68	; 0x44
 8004772:	fab0 f080 	clz	r0, r0
 8004776:	4927      	ldr	r1, [pc, #156]	; (8004814 <oslib_test_005_001_execute.lto_priv.0+0x154>)
 8004778:	0940      	lsrs	r0, r0, #5
 800477a:	f7fc f961 	bl	8000a40 <_test_assert>
 800477e:	2800      	cmp	r0, #0
 8004780:	d1c7      	bne.n	8004712 <oslib_test_005_001_execute.lto_priv.0+0x52>
 */
static inline msg_t chDelegateCallDirect4(thread_t *tp, delegate_fn4_t func,
                                          msg_t p1, msg_t p2, msg_t p3,
                                          msg_t p4) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn4, func, p1, p2, p3, p4);
 8004782:	2148      	movs	r1, #72	; 0x48
 8004784:	2249      	movs	r2, #73	; 0x49
 8004786:	234a      	movs	r3, #74	; 0x4a
 8004788:	4628      	mov	r0, r5
 800478a:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 800478e:	4928      	ldr	r1, [pc, #160]	; (8004830 <oslib_test_005_001_execute.lto_priv.0+0x170>)
 8004790:	2347      	movs	r3, #71	; 0x47
 8004792:	4a28      	ldr	r2, [pc, #160]	; (8004834 <oslib_test_005_001_execute.lto_priv.0+0x174>)
 8004794:	f005 fd34 	bl	800a200 <chDelegateCallVeneer>
    test_assert(retval == (int)'G', "invalid return value");
 8004798:	f1a0 0047 	sub.w	r0, r0, #71	; 0x47
 800479c:	fab0 f080 	clz	r0, r0
 80047a0:	491c      	ldr	r1, [pc, #112]	; (8004814 <oslib_test_005_001_execute.lto_priv.0+0x154>)
 80047a2:	0940      	lsrs	r0, r0, #5
 80047a4:	f7fc f94c 	bl	8000a40 <_test_assert>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d1b2      	bne.n	8004712 <oslib_test_005_001_execute.lto_priv.0+0x52>
  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 80047ac:	4917      	ldr	r1, [pc, #92]	; (800480c <oslib_test_005_001_execute.lto_priv.0+0x14c>)
 80047ae:	4628      	mov	r0, r5
 80047b0:	4a21      	ldr	r2, [pc, #132]	; (8004838 <oslib_test_005_001_execute.lto_priv.0+0x178>)
 80047b2:	f005 fd25 	bl	800a200 <chDelegateCallVeneer>
    test_assert(retval == 0xAA55, "invalid return value");
 80047b6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80047ba:	1ac0      	subs	r0, r0, r3
 80047bc:	fab0 f080 	clz	r0, r0
 80047c0:	4914      	ldr	r1, [pc, #80]	; (8004814 <oslib_test_005_001_execute.lto_priv.0+0x154>)
 80047c2:	0940      	lsrs	r0, r0, #5
 80047c4:	f7fc f93c 	bl	8000a40 <_test_assert>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d1a2      	bne.n	8004712 <oslib_test_005_001_execute.lto_priv.0+0x52>
    test_assert_sequence("0ABCDEFGHIJZ", "unexpected tokens");
 80047cc:	491b      	ldr	r1, [pc, #108]	; (800483c <oslib_test_005_001_execute.lto_priv.0+0x17c>)
 80047ce:	481c      	ldr	r0, [pc, #112]	; (8004840 <oslib_test_005_001_execute.lto_priv.0+0x180>)
 80047d0:	f7fc fab6 	bl	8000d40 <_test_assert_sequence>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d19c      	bne.n	8004712 <oslib_test_005_001_execute.lto_priv.0+0x52>
  test_set_step(3);
 80047d8:	2303      	movs	r3, #3
    msg_t msg = chThdWait(tp);
 80047da:	4628      	mov	r0, r5
  test_set_step(3);
 80047dc:	6023      	str	r3, [r4, #0]
    msg_t msg = chThdWait(tp);
 80047de:	f006 f847 	bl	800a870 <chThdWait>
    test_assert(msg == 0x0FA5, "invalid exit code");
 80047e2:	f640 73a5 	movw	r3, #4005	; 0xfa5
 80047e6:	1ac0      	subs	r0, r0, r3
 80047e8:	fab0 f080 	clz	r0, r0
 80047ec:	4915      	ldr	r1, [pc, #84]	; (8004844 <oslib_test_005_001_execute.lto_priv.0+0x184>)
 80047ee:	0940      	lsrs	r0, r0, #5
 80047f0:	f7fc f926 	bl	8000a40 <_test_assert>
  test_end_step(3);
 80047f4:	e78d      	b.n	8004712 <oslib_test_005_001_execute.lto_priv.0+0x52>
 80047f6:	bf00      	nop
 80047f8:	20000c88 	.word	0x20000c88
 80047fc:	200020f0 	.word	0x200020f0
 8004800:	0800d538 	.word	0x0800d538
 8004804:	20001cf4 	.word	0x20001cf4
 8004808:	080090c1 	.word	0x080090c1
 800480c:	08009241 	.word	0x08009241
 8004810:	08000bd1 	.word	0x08000bd1
 8004814:	0800d544 	.word	0x0800d544
 8004818:	08009221 	.word	0x08009221
 800481c:	08000be1 	.word	0x08000be1
 8004820:	08009201 	.word	0x08009201
 8004824:	08000bf1 	.word	0x08000bf1
 8004828:	080091e1 	.word	0x080091e1
 800482c:	08000c11 	.word	0x08000c11
 8004830:	080091c1 	.word	0x080091c1
 8004834:	08000c31 	.word	0x08000c31
 8004838:	08000c61 	.word	0x08000c61
 800483c:	0800d4fc 	.word	0x0800d4fc
 8004840:	0800d55c 	.word	0x0800d55c
 8004844:	0800d56c 	.word	0x0800d56c
	...

08004850 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	2620      	movs	r6, #32
 8004854:	2500      	movs	r5, #0
 8004856:	f386 8811 	msr	BASEPRI, r6
 */
static inline thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  tp = chMsgWaitS();
 800485a:	f005 fc49 	bl	800a0f0 <chMsgWaitS>
 800485e:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
 8004862:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004864:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8004868:	4621      	mov	r1, r4
 800486a:	f005 fba1 	bl	8009fb0 <chSchWakeupS>
 800486e:	f385 8811 	msr	BASEPRI, r5
  } while (msg);
 8004872:	2c00      	cmp	r4, #0
 8004874:	d1ef      	bne.n	8004856 <bmk_thread1+0x6>
}
 8004876:	bd70      	pop	{r4, r5, r6, pc}
	...

08004880 <rt_test_008_001_execute.lto_priv.0>:
 * - [8.1.1] Starting the messenger thread.
 * - [8.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_008_001_execute(void) {
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *tp;
  msg_t msg;

  /* [8.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8004882:	2401      	movs	r4, #1
  return ch.rlist.current;
 8004884:	4b15      	ldr	r3, [pc, #84]	; (80048dc <rt_test_008_001_execute.lto_priv.0+0x5c>)
 8004886:	4d16      	ldr	r5, [pc, #88]	; (80048e0 <rt_test_008_001_execute.lto_priv.0+0x60>)
 8004888:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800488a:	4a16      	ldr	r2, [pc, #88]	; (80048e4 <rt_test_008_001_execute.lto_priv.0+0x64>)
 800488c:	6899      	ldr	r1, [r3, #8]
 800488e:	4816      	ldr	r0, [pc, #88]	; (80048e8 <rt_test_008_001_execute.lto_priv.0+0x68>)
 8004890:	4421      	add	r1, r4
  test_set_step(1);
 8004892:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8004894:	f7fc fbbc 	bl	8001010 <chThdCreateStatic.constprop.0>
  }
  test_end_step(1);

  /* [8.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 8004898:	2202      	movs	r2, #2
 800489a:	2404      	movs	r4, #4
 800489c:	2720      	movs	r7, #32
 800489e:	2600      	movs	r6, #0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80048a0:	4b12      	ldr	r3, [pc, #72]	; (80048ec <rt_test_008_001_execute.lto_priv.0+0x6c>)
  test_set_step(2);
 80048a2:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80048a4:	6018      	str	r0, [r3, #0]
 80048a6:	f387 8811 	msr	BASEPRI, r7
  tp = chMsgWaitS();
 80048aa:	f005 fc21 	bl	800a0f0 <chMsgWaitS>
 80048ae:	f386 8811 	msr	BASEPRI, r6
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
      msg = chMsgGet(tp);
 80048b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80048b4:	f387 8811 	msr	BASEPRI, r7
  chSchWakeupS(tp, msg);
 80048b8:	4629      	mov	r1, r5
 80048ba:	f005 fb79 	bl	8009fb0 <chSchWakeupS>
 80048be:	f386 8811 	msr	BASEPRI, r6
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 80048c2:	b2e8      	uxtb	r0, r5
 80048c4:	f7fc f964 	bl	8000b90 <test_emit_token>
    for (i = 0; i < 4; i++) {
 80048c8:	3c01      	subs	r4, #1
 80048ca:	d1ec      	bne.n	80048a6 <rt_test_008_001_execute.lto_priv.0+0x26>
    }
    test_wait_threads();
 80048cc:	f7fe f928 	bl	8002b20 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
  }
  test_end_step(2);
}
 80048d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 80048d4:	4906      	ldr	r1, [pc, #24]	; (80048f0 <rt_test_008_001_execute.lto_priv.0+0x70>)
 80048d6:	4807      	ldr	r0, [pc, #28]	; (80048f4 <rt_test_008_001_execute.lto_priv.0+0x74>)
 80048d8:	f7fc ba32 	b.w	8000d40 <_test_assert_sequence>
 80048dc:	20000c88 	.word	0x20000c88
 80048e0:	20001cf4 	.word	0x20001cf4
 80048e4:	08005721 	.word	0x08005721
 80048e8:	200015e0 	.word	0x200015e0
 80048ec:	20001d0c 	.word	0x20001d0c
 80048f0:	0800d288 	.word	0x0800d288
 80048f4:	0800d368 	.word	0x0800d368
	...

08004900 <oslib_test_004_001_execute.lto_priv.0>:
 * - [4.1.3] Sending jobs with various timings.
 * - [4.1.4] Sending two null jobs to make threads exit.
 * .
 */

static void oslib_test_004_001_execute(void) {
 8004900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  mp->align = align;
 8004904:	2204      	movs	r2, #4
  mp->next = NULL;
 8004906:	2500      	movs	r5, #0
  mp->object_size = size;
 8004908:	2608      	movs	r6, #8
  thread_t *tp1, *tp2;

  /* [4.1.1] Initializing the Jobs Queue object.*/
  test_set_step(1);
 800490a:	2301      	movs	r3, #1
  mp->next = NULL;
 800490c:	4c44      	ldr	r4, [pc, #272]	; (8004a20 <oslib_test_004_001_execute.lto_priv.0+0x120>)
 800490e:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8004a50 <oslib_test_004_001_execute.lto_priv.0+0x150>
static void oslib_test_004_001_execute(void) {
 8004912:	b08c      	sub	sp, #48	; 0x30
 8004914:	e9c4 5603 	strd	r5, r6, [r4, #12]
                                   msg_t *msgbuf) {

  chDbgCheck((jobsn > 0U) && (jobsbuf != NULL) && (msgbuf != NULL));

  chGuardedPoolObjectInit(&jqp->free, sizeof (job_descriptor_t));
  chGuardedPoolLoadArray(&jqp->free, (void *)jobsbuf, jobsn);
 8004918:	4620      	mov	r0, r4
 800491a:	4942      	ldr	r1, [pc, #264]	; (8004a24 <oslib_test_004_001_execute.lto_priv.0+0x124>)
  mp->align = align;
 800491c:	6162      	str	r2, [r4, #20]
  mp->provider = provider;
 800491e:	61a5      	str	r5, [r4, #24]
 8004920:	60a5      	str	r5, [r4, #8]
 8004922:	e9c4 4400 	strd	r4, r4, [r4]
  test_set_step(1);
 8004926:	f8c8 3000 	str.w	r3, [r8]
 800492a:	f006 f859 	bl	800a9e0 <chGuardedPoolLoadArray>
    chJobObjectInit(&jq, JOBS_QUEUE_SIZE, jobs, msg_queue);
  }
  test_end_step(1);

  /* [4.1.2] Starting the dispatcher threads.*/
  test_set_step(2);
 800492e:	2002      	movs	r0, #2
 8004930:	4f3d      	ldr	r7, [pc, #244]	; (8004a28 <oslib_test_004_001_execute.lto_priv.0+0x128>)
 8004932:	4b3e      	ldr	r3, [pc, #248]	; (8004a2c <oslib_test_004_001_execute.lto_priv.0+0x12c>)
  return chThdGetSelfX()->prio;
 8004934:	69ba      	ldr	r2, [r7, #24]
  {
    thread_descriptor_t td1 = {
 8004936:	493e      	ldr	r1, [pc, #248]	; (8004a30 <oslib_test_004_001_execute.lto_priv.0+0x130>)
      .name  = "dispatcher1",
      .wbase = wa1Thread1,
      .wend  = THD_WORKING_AREA_END(wa1Thread1),
      .prio  = chThdGetPriorityX() - 1,
 8004938:	6892      	ldr	r2, [r2, #8]
  mbp->wrptr  = buf;
 800493a:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  mbp->buffer = buf;
 800493e:	61e3      	str	r3, [r4, #28]
  mbp->top    = &buf[n];
 8004940:	3310      	adds	r3, #16
 8004942:	3a01      	subs	r2, #1
 8004944:	6223      	str	r3, [r4, #32]
    thread_descriptor_t td1 = {
 8004946:	f501 73e4 	add.w	r3, r1, #456	; 0x1c8
 800494a:	f8df c108 	ldr.w	ip, [pc, #264]	; 8004a54 <oslib_test_004_001_execute.lto_priv.0+0x154>
 800494e:	4e39      	ldr	r6, [pc, #228]	; (8004a34 <oslib_test_004_001_execute.lto_priv.0+0x134>)
 8004950:	9209      	str	r2, [sp, #36]	; 0x24
 8004952:	9308      	str	r3, [sp, #32]
  tqp->next = (thread_t *)tqp;
 8004954:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8004958:	f104 033c 	add.w	r3, r4, #60	; 0x3c
  tqp->prev = (thread_t *)tqp;
 800495c:	e9c4 220d 	strd	r2, r2, [r4, #52]	; 0x34
 8004960:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  mbp->cnt    = (size_t)0;
 8004964:	62e5      	str	r5, [r4, #44]	; 0x2c
  mbp->reset  = false;
 8004966:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  test_set_step(2);
 800496a:	f8c8 0000 	str.w	r0, [r8]
      .funcp = Thread1,
      .arg   = NULL
    };
    tp1 = chThdCreate(&td1);
 800496e:	a806      	add	r0, sp, #24
    thread_descriptor_t td1 = {
 8004970:	950b      	str	r5, [sp, #44]	; 0x2c
 8004972:	9107      	str	r1, [sp, #28]
 8004974:	f8cd c018 	str.w	ip, [sp, #24]
 8004978:	960a      	str	r6, [sp, #40]	; 0x28
    tp1 = chThdCreate(&td1);
 800497a:	f005 fb91 	bl	800a0a0 <chThdCreate>
 800497e:	69bb      	ldr	r3, [r7, #24]

    thread_descriptor_t td2 = {
 8004980:	4a2d      	ldr	r2, [pc, #180]	; (8004a38 <oslib_test_004_001_execute.lto_priv.0+0x138>)
      .name  = "dispatcher2",
      .wbase = wa2Thread1,
      .wend  = THD_WORKING_AREA_END(wa2Thread1),
      .prio  = chThdGetPriorityX() - 2,
 8004982:	689b      	ldr	r3, [r3, #8]
    thread_descriptor_t td2 = {
 8004984:	492d      	ldr	r1, [pc, #180]	; (8004a3c <oslib_test_004_001_execute.lto_priv.0+0x13c>)
      .prio  = chThdGetPriorityX() - 2,
 8004986:	3b02      	subs	r3, #2
    thread_descriptor_t td2 = {
 8004988:	9505      	str	r5, [sp, #20]
    tp1 = chThdCreate(&td1);
 800498a:	4681      	mov	r9, r0
    thread_descriptor_t td2 = {
 800498c:	f502 75e4 	add.w	r5, r2, #456	; 0x1c8
      .funcp = Thread1,
      .arg   = NULL
    };
    tp2 = chThdCreate(&td2);
 8004990:	4668      	mov	r0, sp
    thread_descriptor_t td2 = {
 8004992:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8004996:	9303      	str	r3, [sp, #12]
 8004998:	9604      	str	r6, [sp, #16]
 800499a:	9100      	str	r1, [sp, #0]
    tp2 = chThdCreate(&td2);
 800499c:	f005 fb80 	bl	800a0a0 <chThdCreate>
  }
  test_end_step(2);

  /* [4.1.3] Sending jobs with various timings.*/
  test_set_step(3);
 80049a0:	2303      	movs	r3, #3
    tp2 = chThdCreate(&td2);
 80049a2:	4682      	mov	sl, r0
  test_set_step(3);
 80049a4:	2561      	movs	r5, #97	; 0x61
 80049a6:	4f26      	ldr	r7, [pc, #152]	; (8004a40 <oslib_test_004_001_execute.lto_priv.0+0x140>)
 80049a8:	f8c8 3000 	str.w	r3, [r8]
 * @api
 */
static inline void chJobPost(jobs_queue_t *jqp, job_descriptor_t *jp) {
  msg_t msg;

  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80049ac:	f104 061c 	add.w	r6, r4, #28
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80049b0:	f04f 31ff 	mov.w	r1, #4294967295
 80049b4:	4620      	mov	r0, r4
 80049b6:	f006 fadb 	bl	800af70 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80049ba:	2200      	movs	r2, #0
    job_descriptor_t *jdp;

    for (i = 0; i < 8; i++) {
      jdp = chJobGet(&jq);
      jdp->jobfunc = job_slow;
      jdp->jobarg  = (void *)('a' + i);
 80049bc:	e9c0 7500 	strd	r7, r5, [r0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80049c0:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80049c2:	3501      	adds	r5, #1
 80049c4:	4630      	mov	r0, r6
 80049c6:	f006 fb5b 	bl	800b080 <chMBPostTimeout>
    for (i = 0; i < 8; i++) {
 80049ca:	2d69      	cmp	r5, #105	; 0x69
 80049cc:	d1f0      	bne.n	80049b0 <oslib_test_004_001_execute.lto_priv.0+0xb0>
    }
  }
  test_end_step(3);

  /* [4.1.4] Sending two null jobs to make threads exit.*/
  test_set_step(4);
 80049ce:	2304      	movs	r3, #4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80049d0:	f04f 31ff 	mov.w	r1, #4294967295
 80049d4:	4812      	ldr	r0, [pc, #72]	; (8004a20 <oslib_test_004_001_execute.lto_priv.0+0x120>)
 80049d6:	f8c8 3000 	str.w	r3, [r8]
  {
    job_descriptor_t *jdp;

    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
 80049da:	2400      	movs	r4, #0
 80049dc:	f006 fac8 	bl	800af70 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80049e0:	4622      	mov	r2, r4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80049e2:	4601      	mov	r1, r0
    jdp->jobarg  = NULL;
 80049e4:	e9c0 4400 	strd	r4, r4, [r0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80049e8:	4816      	ldr	r0, [pc, #88]	; (8004a44 <oslib_test_004_001_execute.lto_priv.0+0x144>)
 80049ea:	f006 fb49 	bl	800b080 <chMBPostTimeout>
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80049ee:	f04f 31ff 	mov.w	r1, #4294967295
 80049f2:	480b      	ldr	r0, [pc, #44]	; (8004a20 <oslib_test_004_001_execute.lto_priv.0+0x120>)
 80049f4:	f006 fabc 	bl	800af70 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80049f8:	4622      	mov	r2, r4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80049fa:	4601      	mov	r1, r0
    chJobPost(&jq, jdp);
    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
    jdp->jobarg  = NULL;
 80049fc:	e9c0 4400 	strd	r4, r4, [r0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8004a00:	4810      	ldr	r0, [pc, #64]	; (8004a44 <oslib_test_004_001_execute.lto_priv.0+0x144>)
 8004a02:	f006 fb3d 	bl	800b080 <chMBPostTimeout>
    chJobPost(&jq, jdp);
    (void) chThdWait(tp1);
 8004a06:	4648      	mov	r0, r9
 8004a08:	f005 ff32 	bl	800a870 <chThdWait>
    (void) chThdWait(tp2);
 8004a0c:	4650      	mov	r0, sl
 8004a0e:	f005 ff2f 	bl	800a870 <chThdWait>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 8004a12:	490d      	ldr	r1, [pc, #52]	; (8004a48 <oslib_test_004_001_execute.lto_priv.0+0x148>)
 8004a14:	480d      	ldr	r0, [pc, #52]	; (8004a4c <oslib_test_004_001_execute.lto_priv.0+0x14c>)
 8004a16:	f7fc f993 	bl	8000d40 <_test_assert_sequence>
  }
  test_end_step(4);
}
 8004a1a:	b00c      	add	sp, #48	; 0x30
 8004a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a20:	20001434 	.word	0x20001434
 8004a24:	20001414 	.word	0x20001414
 8004a28:	20000c88 	.word	0x20000c88
 8004a2c:	20001498 	.word	0x20001498
 8004a30:	20001d60 	.word	0x20001d60
 8004a34:	08004a61 	.word	0x08004a61
 8004a38:	20001f28 	.word	0x20001f28
 8004a3c:	0800d58c 	.word	0x0800d58c
 8004a40:	08002621 	.word	0x08002621
 8004a44:	20001450 	.word	0x20001450
 8004a48:	0800d4fc 	.word	0x0800d4fc
 8004a4c:	0800d52c 	.word	0x0800d52c
 8004a50:	20001cf4 	.word	0x20001cf4
 8004a54:	0800d580 	.word	0x0800d580
	...

08004a60 <Thread1.lto_priv.0>:
static THD_FUNCTION(Thread1, arg) {
 8004a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a64:	4e11      	ldr	r6, [pc, #68]	; (8004aac <Thread1.lto_priv.0+0x4c>)
 8004a66:	b082      	sub	sp, #8
 8004a68:	46b0      	mov	r8, r6
 */
static inline msg_t chJobDispatch(jobs_queue_t *jqp) {
  msg_t msg, jmsg;

  /* Waiting for a job.*/
  msg = chMBFetchTimeout(&jqp->mbx, &jmsg, TIME_INFINITE);
 8004a6a:	f106 071c 	add.w	r7, r6, #28
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	4638      	mov	r0, r7
 8004a74:	a901      	add	r1, sp, #4
 8004a76:	f006 facb 	bl	800b010 <chMBFetchTimeout>
  if (msg == MSG_OK) {
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	b110      	cbz	r0, 8004a84 <Thread1.lto_priv.0+0x24>
}
 8004a7e:	b002      	add	sp, #8
 8004a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    job_descriptor_t *jp = (job_descriptor_t *)jmsg;
 8004a84:	9d01      	ldr	r5, [sp, #4]

    chDbgAssert(jp != NULL, "is NULL");

    if (jp->jobfunc != NULL) {
 8004a86:	682b      	ldr	r3, [r5, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f8      	beq.n	8004a7e <Thread1.lto_priv.0+0x1e>

      /* Invoking the job function.*/
      jp->jobfunc(jp->jobarg);
 8004a8c:	6868      	ldr	r0, [r5, #4]
 8004a8e:	4798      	blx	r3
 8004a90:	2320      	movs	r3, #32
 8004a92:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8004a96:	68f3      	ldr	r3, [r6, #12]
 8004a98:	4640      	mov	r0, r8
 8004a9a:	602b      	str	r3, [r5, #0]
  mp->next = php;
 8004a9c:	60f5      	str	r5, [r6, #12]
 8004a9e:	f005 ff4f 	bl	800a940 <chSemSignalI>
  chSchRescheduleS();
 8004aa2:	f005 fa5d 	bl	8009f60 <chSchRescheduleS>
 8004aa6:	f384 8811 	msr	BASEPRI, r4
  } while (msg == MSG_OK);
 8004aaa:	e7e0      	b.n	8004a6e <Thread1.lto_priv.0+0xe>
 8004aac:	20001434 	.word	0x20001434

08004ab0 <oslib_test_003_001_execute.lto_priv.0>:
static void oslib_test_003_001_execute(void) {
 8004ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
  test_set_step(1);
 8004ab2:	2601      	movs	r6, #1
  pp->cnt   = (size_t)0;
 8004ab4:	2500      	movs	r5, #0
  PC_LOCK(pp);
 8004ab6:	4c1b      	ldr	r4, [pc, #108]	; (8004b24 <oslib_test_003_001_execute.lto_priv.0+0x74>)
 8004ab8:	4f1b      	ldr	r7, [pc, #108]	; (8004b28 <oslib_test_003_001_execute.lto_priv.0+0x78>)
static void oslib_test_003_001_execute(void) {
 8004aba:	b085      	sub	sp, #20
 8004abc:	f104 0020 	add.w	r0, r4, #32
  test_set_step(1);
 8004ac0:	603e      	str	r6, [r7, #0]
 8004ac2:	f005 fc9d 	bl	800a400 <chMtxLock>
  pp->wrptr = pp->buffer;
 8004ac6:	6823      	ldr	r3, [r4, #0]
  pp->reset = true;
 8004ac8:	7526      	strb	r6, [r4, #20]
  pp->rdptr = pp->buffer;
 8004aca:	e9c4 3302 	strd	r3, r3, [r4, #8]
  pp->cnt   = (size_t)0;
 8004ace:	6125      	str	r5, [r4, #16]
 8004ad0:	2320      	movs	r3, #32
 8004ad2:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(&pp->wtr, MSG_RESET);
 8004ad6:	f06f 0101 	mvn.w	r1, #1
 8004ada:	f104 0018 	add.w	r0, r4, #24
 8004ade:	f005 ff9f 	bl	800aa20 <chThdResumeI>
  chThdResumeI(&pp->rtr, MSG_RESET);
 8004ae2:	f06f 0101 	mvn.w	r1, #1
 8004ae6:	f104 001c 	add.w	r0, r4, #28
 8004aea:	f005 ff99 	bl	800aa20 <chThdResumeI>
  chSchRescheduleS();
 8004aee:	f005 fa37 	bl	8009f60 <chSchRescheduleS>
 8004af2:	f385 8811 	msr	BASEPRI, r5
  PC_UNLOCK(pp);
 8004af6:	f104 0020 	add.w	r0, r4, #32
 8004afa:	f005 fbf1 	bl	800a2e0 <chMtxUnlock>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	68e3      	ldr	r3, [r4, #12]
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d006      	beq.n	8004b14 <oslib_test_003_001_execute.lto_priv.0+0x64>
 8004b06:	4628      	mov	r0, r5
 8004b08:	4908      	ldr	r1, [pc, #32]	; (8004b2c <oslib_test_003_001_execute.lto_priv.0+0x7c>)
 8004b0a:	f7fb ff99 	bl	8000a40 <_test_assert>
 8004b0e:	b178      	cbz	r0, 8004b30 <oslib_test_003_001_execute.lto_priv.0+0x80>
}
 8004b10:	b005      	add	sp, #20
 8004b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004b14:	68a2      	ldr	r2, [r4, #8]
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d1f5      	bne.n	8004b06 <oslib_test_003_001_execute.lto_priv.0+0x56>
 8004b1a:	6925      	ldr	r5, [r4, #16]
 8004b1c:	fab5 f085 	clz	r0, r5
 8004b20:	0940      	lsrs	r0, r0, #5
 8004b22:	e7f1      	b.n	8004b08 <oslib_test_003_001_execute.lto_priv.0+0x58>
 8004b24:	200008c0 	.word	0x200008c0
 8004b28:	20001cf4 	.word	0x20001cf4
 8004b2c:	0800d244 	.word	0x0800d244
  test_set_step(2);
 8004b30:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8004b32:	2010      	movs	r0, #16
  test_set_step(2);
 8004b34:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8004b36:	f7fd f9e3 	bl	8001f00 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 0, "not reset");
 8004b3a:	fab0 f080 	clz	r0, r0
 8004b3e:	49c2      	ldr	r1, [pc, #776]	; (8004e48 <oslib_test_003_001_execute.lto_priv.0+0x398>)
 8004b40:	0940      	lsrs	r0, r0, #5
 8004b42:	f7fb ff7d 	bl	8000a40 <_test_assert>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	d1e2      	bne.n	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	68e3      	ldr	r3, [r4, #12]
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	f000 818b 	beq.w	8004e6a <oslib_test_003_001_execute.lto_priv.0+0x3ba>
 8004b54:	49bd      	ldr	r1, [pc, #756]	; (8004e4c <oslib_test_003_001_execute.lto_priv.0+0x39c>)
 8004b56:	f7fb ff73 	bl	8000a40 <_test_assert>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d1d8      	bne.n	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
  test_set_step(3);
 8004b5e:	2303      	movs	r3, #3
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8004b60:	2110      	movs	r1, #16
 8004b62:	4668      	mov	r0, sp
  test_set_step(3);
 8004b64:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8004b66:	f7fd fa4b 	bl	8002000 <chPipeReadTimeout.constprop.0>
    test_assert(n == 0, "not reset");
 8004b6a:	fab0 f080 	clz	r0, r0
 8004b6e:	49b6      	ldr	r1, [pc, #728]	; (8004e48 <oslib_test_003_001_execute.lto_priv.0+0x398>)
 8004b70:	0940      	lsrs	r0, r0, #5
 8004b72:	f7fb ff65 	bl	8000a40 <_test_assert>
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d1ca      	bne.n	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004b7a:	6822      	ldr	r2, [r4, #0]
 8004b7c:	68e3      	ldr	r3, [r4, #12]
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	f000 8185 	beq.w	8004e8e <oslib_test_003_001_execute.lto_priv.0+0x3de>
 8004b84:	49b1      	ldr	r1, [pc, #708]	; (8004e4c <oslib_test_003_001_execute.lto_priv.0+0x39c>)
 8004b86:	f7fb ff5b 	bl	8000a40 <_test_assert>
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	d1c0      	bne.n	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
  test_set_step(4);
 8004b8e:	2104      	movs	r1, #4
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004b90:	6822      	ldr	r2, [r4, #0]
 8004b92:	68e3      	ldr	r3, [r4, #12]
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 8004b94:	7520      	strb	r0, [r4, #20]
 8004b96:	4293      	cmp	r3, r2
  test_set_step(4);
 8004b98:	6039      	str	r1, [r7, #0]
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004b9a:	f000 816f 	beq.w	8004e7c <oslib_test_003_001_execute.lto_priv.0+0x3cc>
 8004b9e:	49ab      	ldr	r1, [pc, #684]	; (8004e4c <oslib_test_003_001_execute.lto_priv.0+0x39c>)
 8004ba0:	f7fb ff4e 	bl	8000a40 <_test_assert>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d1b3      	bne.n	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
  test_set_step(5);
 8004ba8:	2305      	movs	r3, #5
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8004baa:	2010      	movs	r0, #16
  test_set_step(5);
 8004bac:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8004bae:	f7fd f9a7 	bl	8001f00 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 8004bb2:	f1a0 0010 	sub.w	r0, r0, #16
 8004bb6:	fab0 f080 	clz	r0, r0
 8004bba:	49a5      	ldr	r1, [pc, #660]	; (8004e50 <oslib_test_003_001_execute.lto_priv.0+0x3a0>)
 8004bbc:	0940      	lsrs	r0, r0, #5
 8004bbe:	f7fb ff3f 	bl	8000a40 <_test_assert>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d1a4      	bne.n	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004bc6:	6822      	ldr	r2, [r4, #0]
 8004bc8:	68e3      	ldr	r3, [r4, #12]
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	f000 8168 	beq.w	8004ea0 <oslib_test_003_001_execute.lto_priv.0+0x3f0>
 8004bd0:	499e      	ldr	r1, [pc, #632]	; (8004e4c <oslib_test_003_001_execute.lto_priv.0+0x39c>)
 8004bd2:	f7fb ff35 	bl	8000a40 <_test_assert>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d19a      	bne.n	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
  test_set_step(6);
 8004bda:	2306      	movs	r3, #6
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8004bdc:	2110      	movs	r1, #16
 8004bde:	4668      	mov	r0, sp
  test_set_step(6);
 8004be0:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8004be2:	f7fd fa0d 	bl	8002000 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 8004be6:	f1a0 0010 	sub.w	r0, r0, #16
 8004bea:	fab0 f080 	clz	r0, r0
 8004bee:	4998      	ldr	r1, [pc, #608]	; (8004e50 <oslib_test_003_001_execute.lto_priv.0+0x3a0>)
 8004bf0:	0940      	lsrs	r0, r0, #5
 8004bf2:	f7fb ff25 	bl	8000a40 <_test_assert>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d18a      	bne.n	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	68e3      	ldr	r3, [r4, #12]
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	f000 8159 	beq.w	8004eb6 <oslib_test_003_001_execute.lto_priv.0+0x406>
 8004c04:	4991      	ldr	r1, [pc, #580]	; (8004e4c <oslib_test_003_001_execute.lto_priv.0+0x39c>)
 8004c06:	f7fb ff1b 	bl	8000a40 <_test_assert>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d180      	bne.n	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8004c0e:	4b91      	ldr	r3, [pc, #580]	; (8004e54 <oslib_test_003_001_execute.lto_priv.0+0x3a4>)
 8004c10:	9a00      	ldr	r2, [sp, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	f000 8158 	beq.w	8004ec8 <oslib_test_003_001_execute.lto_priv.0+0x418>
 8004c18:	2001      	movs	r0, #1
 8004c1a:	498f      	ldr	r1, [pc, #572]	; (8004e58 <oslib_test_003_001_execute.lto_priv.0+0x3a8>)
 8004c1c:	f080 0001 	eor.w	r0, r0, #1
 8004c20:	f7fb ff0e 	bl	8000a40 <_test_assert>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	f47f af73 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
  test_set_step(7);
 8004c2a:	2307      	movs	r3, #7
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 8004c2c:	2004      	movs	r0, #4
  test_set_step(7);
 8004c2e:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 8004c30:	f7fd f966 	bl	8001f00 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 4, "wrong size");
 8004c34:	f1a0 0004 	sub.w	r0, r0, #4
 8004c38:	fab0 f080 	clz	r0, r0
 8004c3c:	4984      	ldr	r1, [pc, #528]	; (8004e50 <oslib_test_003_001_execute.lto_priv.0+0x3a0>)
 8004c3e:	0940      	lsrs	r0, r0, #5
 8004c40:	f7fb fefe 	bl	8000a40 <_test_assert>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	f47f af63 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8004c4a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d003      	beq.n	8004c5a <oslib_test_003_001_execute.lto_priv.0+0x1aa>
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	4293      	cmp	r3, r2
 8004c56:	f000 8152 	beq.w	8004efe <oslib_test_003_001_execute.lto_priv.0+0x44e>
 8004c5a:	497c      	ldr	r1, [pc, #496]	; (8004e4c <oslib_test_003_001_execute.lto_priv.0+0x39c>)
 8004c5c:	f7fb fef0 	bl	8000a40 <_test_assert>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	f47f af55 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
  test_set_step(8);
 8004c66:	2308      	movs	r3, #8
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8004c68:	200c      	movs	r0, #12
  test_set_step(8);
 8004c6a:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8004c6c:	f7fd f948 	bl	8001f00 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 8004c70:	f1a0 0c0c 	sub.w	ip, r0, #12
 8004c74:	f1dc 0000 	rsbs	r0, ip, #0
 8004c78:	eb40 000c 	adc.w	r0, r0, ip
 8004c7c:	4974      	ldr	r1, [pc, #464]	; (8004e50 <oslib_test_003_001_execute.lto_priv.0+0x3a0>)
 8004c7e:	f7fb fedf 	bl	8000a40 <_test_assert>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	f47f af44 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004c88:	6822      	ldr	r2, [r4, #0]
 8004c8a:	68e3      	ldr	r3, [r4, #12]
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	f000 813e 	beq.w	8004f0e <oslib_test_003_001_execute.lto_priv.0+0x45e>
 8004c92:	496e      	ldr	r1, [pc, #440]	; (8004e4c <oslib_test_003_001_execute.lto_priv.0+0x39c>)
 8004c94:	f7fb fed4 	bl	8000a40 <_test_assert>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	f47f af39 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
  test_set_step(9);
 8004c9e:	2309      	movs	r3, #9
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 8004ca0:	2104      	movs	r1, #4
 8004ca2:	4668      	mov	r0, sp
  test_set_step(9);
 8004ca4:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 8004ca6:	f7fd f9ab 	bl	8002000 <chPipeReadTimeout.constprop.0>
    test_assert(n == 4, "wrong size");
 8004caa:	1f05      	subs	r5, r0, #4
 8004cac:	4268      	negs	r0, r5
 8004cae:	4168      	adcs	r0, r5
 8004cb0:	4967      	ldr	r1, [pc, #412]	; (8004e50 <oslib_test_003_001_execute.lto_priv.0+0x3a0>)
 8004cb2:	f7fb fec5 	bl	8000a40 <_test_assert>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	f47f af2a 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	68e2      	ldr	r2, [r4, #12]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d003      	beq.n	8004ccc <oslib_test_003_001_execute.lto_priv.0+0x21c>
 8004cc4:	68a2      	ldr	r2, [r4, #8]
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	f000 8145 	beq.w	8004f56 <oslib_test_003_001_execute.lto_priv.0+0x4a6>
 8004ccc:	495f      	ldr	r1, [pc, #380]	; (8004e4c <oslib_test_003_001_execute.lto_priv.0+0x39c>)
 8004cce:	f7fb feb7 	bl	8000a40 <_test_assert>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	f47f af1c 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 8004cd8:	9800      	ldr	r0, [sp, #0]
 8004cda:	4b5e      	ldr	r3, [pc, #376]	; (8004e54 <oslib_test_003_001_execute.lto_priv.0+0x3a4>)
 8004cdc:	495e      	ldr	r1, [pc, #376]	; (8004e58 <oslib_test_003_001_execute.lto_priv.0+0x3a8>)
 8004cde:	1ac2      	subs	r2, r0, r3
 8004ce0:	4250      	negs	r0, r2
 8004ce2:	4150      	adcs	r0, r2
 8004ce4:	f7fb feac 	bl	8000a40 <_test_assert>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	f47f af11 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
  test_set_step(10);
 8004cee:	230a      	movs	r3, #10
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8004cf0:	210c      	movs	r1, #12
 8004cf2:	4668      	mov	r0, sp
  test_set_step(10);
 8004cf4:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8004cf6:	f7fd f983 	bl	8002000 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 8004cfa:	f1a0 030c 	sub.w	r3, r0, #12
 8004cfe:	4258      	negs	r0, r3
 8004d00:	4158      	adcs	r0, r3
 8004d02:	4953      	ldr	r1, [pc, #332]	; (8004e50 <oslib_test_003_001_execute.lto_priv.0+0x3a0>)
 8004d04:	f7fb fe9c 	bl	8000a40 <_test_assert>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	f47f af01 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	68e3      	ldr	r3, [r4, #12]
 8004d12:	4293      	cmp	r3, r2
 8004d14:	f000 8105 	beq.w	8004f22 <oslib_test_003_001_execute.lto_priv.0+0x472>
 8004d18:	494c      	ldr	r1, [pc, #304]	; (8004e4c <oslib_test_003_001_execute.lto_priv.0+0x39c>)
 8004d1a:	f7fb fe91 	bl	8000a40 <_test_assert>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	f47f aef6 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 8004d24:	4669      	mov	r1, sp
 8004d26:	220c      	movs	r2, #12
 8004d28:	484c      	ldr	r0, [pc, #304]	; (8004e5c <oslib_test_003_001_execute.lto_priv.0+0x3ac>)
 8004d2a:	f007 fa23 	bl	800c174 <memcmp>
 8004d2e:	fab0 f080 	clz	r0, r0
 8004d32:	4949      	ldr	r1, [pc, #292]	; (8004e58 <oslib_test_003_001_execute.lto_priv.0+0x3a8>)
 8004d34:	0940      	lsrs	r0, r0, #5
 8004d36:	f7fb fe83 	bl	8000a40 <_test_assert>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	f47f aee8 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
  test_set_step(11);
 8004d40:	230b      	movs	r3, #11
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 8004d42:	2005      	movs	r0, #5
  test_set_step(11);
 8004d44:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 8004d46:	f7fd f8db 	bl	8001f00 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 8004d4a:	f1a0 0e05 	sub.w	lr, r0, #5
 8004d4e:	f1de 0000 	rsbs	r0, lr, #0
 8004d52:	eb40 000e 	adc.w	r0, r0, lr
 8004d56:	493e      	ldr	r1, [pc, #248]	; (8004e50 <oslib_test_003_001_execute.lto_priv.0+0x3a0>)
 8004d58:	f7fb fe72 	bl	8000a40 <_test_assert>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f47f aed7 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8004d62:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d003      	beq.n	8004d72 <oslib_test_003_001_execute.lto_priv.0+0x2c2>
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	f000 80e1 	beq.w	8004f34 <oslib_test_003_001_execute.lto_priv.0+0x484>
 8004d72:	4936      	ldr	r1, [pc, #216]	; (8004e4c <oslib_test_003_001_execute.lto_priv.0+0x39c>)
 8004d74:	f7fb fe64 	bl	8000a40 <_test_assert>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	f47f aec9 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
  test_set_step(12);
 8004d7e:	230c      	movs	r3, #12
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 8004d80:	2105      	movs	r1, #5
 8004d82:	4668      	mov	r0, sp
  test_set_step(12);
 8004d84:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 8004d86:	f7fd f93b 	bl	8002000 <chPipeReadTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 8004d8a:	1f46      	subs	r6, r0, #5
 8004d8c:	4270      	negs	r0, r6
 8004d8e:	4170      	adcs	r0, r6
 8004d90:	492f      	ldr	r1, [pc, #188]	; (8004e50 <oslib_test_003_001_execute.lto_priv.0+0x3a0>)
 8004d92:	f7fb fe55 	bl	8000a40 <_test_assert>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	f47f aeba 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8004d9c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8004da0:	4293      	cmp	r3, r2
 8004da2:	f000 80e8 	beq.w	8004f76 <oslib_test_003_001_execute.lto_priv.0+0x4c6>
 8004da6:	4929      	ldr	r1, [pc, #164]	; (8004e4c <oslib_test_003_001_execute.lto_priv.0+0x39c>)
 8004da8:	f7fb fe4a 	bl	8000a40 <_test_assert>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	f47f aeaf 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 8004db2:	4669      	mov	r1, sp
 8004db4:	2205      	movs	r2, #5
 8004db6:	4829      	ldr	r0, [pc, #164]	; (8004e5c <oslib_test_003_001_execute.lto_priv.0+0x3ac>)
 8004db8:	f007 f9dc 	bl	800c174 <memcmp>
 8004dbc:	fab0 f080 	clz	r0, r0
 8004dc0:	4925      	ldr	r1, [pc, #148]	; (8004e58 <oslib_test_003_001_execute.lto_priv.0+0x3a8>)
 8004dc2:	0940      	lsrs	r0, r0, #5
 8004dc4:	f7fb fe3c 	bl	8000a40 <_test_assert>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	f47f aea1 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
  test_set_step(13);
 8004dce:	230d      	movs	r3, #13
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8004dd0:	2010      	movs	r0, #16
  test_set_step(13);
 8004dd2:	603b      	str	r3, [r7, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8004dd4:	f7fd f894 	bl	8001f00 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 8004dd8:	f1a0 0510 	sub.w	r5, r0, #16
 8004ddc:	4268      	negs	r0, r5
 8004dde:	4168      	adcs	r0, r5
 8004de0:	491b      	ldr	r1, [pc, #108]	; (8004e50 <oslib_test_003_001_execute.lto_priv.0+0x3a0>)
 8004de2:	f7fb fe2d 	bl	8000a40 <_test_assert>
 8004de6:	2800      	cmp	r0, #0
 8004de8:	f47f ae92 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8004dec:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8004df0:	4293      	cmp	r3, r2
 8004df2:	f000 80b6 	beq.w	8004f62 <oslib_test_003_001_execute.lto_priv.0+0x4b2>
 8004df6:	4915      	ldr	r1, [pc, #84]	; (8004e4c <oslib_test_003_001_execute.lto_priv.0+0x39c>)
 8004df8:	f7fb fe22 	bl	8000a40 <_test_assert>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	f47f ae87 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
  test_set_step(14);
 8004e02:	230e      	movs	r3, #14
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8004e04:	2110      	movs	r1, #16
 8004e06:	4668      	mov	r0, sp
  test_set_step(14);
 8004e08:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8004e0a:	f7fd f8f9 	bl	8002000 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 8004e0e:	f1a0 0310 	sub.w	r3, r0, #16
 8004e12:	4258      	negs	r0, r3
 8004e14:	4158      	adcs	r0, r3
 8004e16:	490e      	ldr	r1, [pc, #56]	; (8004e50 <oslib_test_003_001_execute.lto_priv.0+0x3a0>)
 8004e18:	f7fb fe12 	bl	8000a40 <_test_assert>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	f47f ae77 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8004e22:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8004e26:	4293      	cmp	r3, r2
 8004e28:	f000 808c 	beq.w	8004f44 <oslib_test_003_001_execute.lto_priv.0+0x494>
 8004e2c:	4907      	ldr	r1, [pc, #28]	; (8004e4c <oslib_test_003_001_execute.lto_priv.0+0x39c>)
 8004e2e:	f7fb fe07 	bl	8000a40 <_test_assert>
 8004e32:	2800      	cmp	r0, #0
 8004e34:	f47f ae6c 	bne.w	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8004e38:	4669      	mov	r1, sp
 8004e3a:	2210      	movs	r2, #16
 8004e3c:	4807      	ldr	r0, [pc, #28]	; (8004e5c <oslib_test_003_001_execute.lto_priv.0+0x3ac>)
 8004e3e:	f007 f999 	bl	800c174 <memcmp>
 8004e42:	fab0 f080 	clz	r0, r0
 8004e46:	e00b      	b.n	8004e60 <oslib_test_003_001_execute.lto_priv.0+0x3b0>
 8004e48:	0800d598 	.word	0x0800d598
 8004e4c:	0800d244 	.word	0x0800d244
 8004e50:	0800d238 	.word	0x0800d238
 8004e54:	33323130 	.word	0x33323130
 8004e58:	0800d5a4 	.word	0x0800d5a4
 8004e5c:	0800df60 	.word	0x0800df60
 8004e60:	4949      	ldr	r1, [pc, #292]	; (8004f88 <oslib_test_003_001_execute.lto_priv.0+0x4d8>)
 8004e62:	0940      	lsrs	r0, r0, #5
 8004e64:	f7fb fdec 	bl	8000a40 <_test_assert>
  test_end_step(14);
 8004e68:	e652      	b.n	8004b10 <oslib_test_003_001_execute.lto_priv.0+0x60>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004e6a:	68a2      	ldr	r2, [r4, #8]
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	f47f ae71 	bne.w	8004b54 <oslib_test_003_001_execute.lto_priv.0+0xa4>
 8004e72:	6920      	ldr	r0, [r4, #16]
 8004e74:	fab0 f080 	clz	r0, r0
 8004e78:	0940      	lsrs	r0, r0, #5
 8004e7a:	e66b      	b.n	8004b54 <oslib_test_003_001_execute.lto_priv.0+0xa4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004e7c:	68a2      	ldr	r2, [r4, #8]
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	f47f ae8d 	bne.w	8004b9e <oslib_test_003_001_execute.lto_priv.0+0xee>
 8004e84:	6920      	ldr	r0, [r4, #16]
 8004e86:	fab0 f080 	clz	r0, r0
 8004e8a:	0940      	lsrs	r0, r0, #5
 8004e8c:	e687      	b.n	8004b9e <oslib_test_003_001_execute.lto_priv.0+0xee>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004e8e:	68a2      	ldr	r2, [r4, #8]
 8004e90:	4293      	cmp	r3, r2
 8004e92:	f47f ae77 	bne.w	8004b84 <oslib_test_003_001_execute.lto_priv.0+0xd4>
 8004e96:	6920      	ldr	r0, [r4, #16]
 8004e98:	fab0 f080 	clz	r0, r0
 8004e9c:	0940      	lsrs	r0, r0, #5
 8004e9e:	e671      	b.n	8004b84 <oslib_test_003_001_execute.lto_priv.0+0xd4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004ea0:	68a2      	ldr	r2, [r4, #8]
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	f47f ae94 	bne.w	8004bd0 <oslib_test_003_001_execute.lto_priv.0+0x120>
 8004ea8:	6920      	ldr	r0, [r4, #16]
 8004eaa:	f1a0 0010 	sub.w	r0, r0, #16
 8004eae:	fab0 f080 	clz	r0, r0
 8004eb2:	0940      	lsrs	r0, r0, #5
 8004eb4:	e68c      	b.n	8004bd0 <oslib_test_003_001_execute.lto_priv.0+0x120>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004eb6:	68a2      	ldr	r2, [r4, #8]
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	f47f aea3 	bne.w	8004c04 <oslib_test_003_001_execute.lto_priv.0+0x154>
 8004ebe:	6920      	ldr	r0, [r4, #16]
 8004ec0:	fab0 f080 	clz	r0, r0
 8004ec4:	0940      	lsrs	r0, r0, #5
 8004ec6:	e69d      	b.n	8004c04 <oslib_test_003_001_execute.lto_priv.0+0x154>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8004ec8:	9a01      	ldr	r2, [sp, #4]
 8004eca:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	f47f aea2 	bne.w	8004c18 <oslib_test_003_001_execute.lto_priv.0+0x168>
 8004ed4:	f103 6330 	add.w	r3, r3, #184549376	; 0xb000000
 8004ed8:	9a02      	ldr	r2, [sp, #8]
 8004eda:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
 8004ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	f47f ae98 	bne.w	8004c18 <oslib_test_003_001_execute.lto_priv.0+0x168>
 8004ee8:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8004eec:	9a03      	ldr	r2, [sp, #12]
 8004eee:	f503 2381 	add.w	r3, r3, #264192	; 0x40800
 8004ef2:	f203 330b 	addw	r3, r3, #779	; 0x30b
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	f47f ae8e 	bne.w	8004c18 <oslib_test_003_001_execute.lto_priv.0+0x168>
 8004efc:	e68d      	b.n	8004c1a <oslib_test_003_001_execute.lto_priv.0+0x16a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8004efe:	6920      	ldr	r0, [r4, #16]
 8004f00:	f1a0 0e04 	sub.w	lr, r0, #4
 8004f04:	f1de 0000 	rsbs	r0, lr, #0
 8004f08:	eb40 000e 	adc.w	r0, r0, lr
 8004f0c:	e6a5      	b.n	8004c5a <oslib_test_003_001_execute.lto_priv.0+0x1aa>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004f0e:	68a2      	ldr	r2, [r4, #8]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	f47f aebe 	bne.w	8004c92 <oslib_test_003_001_execute.lto_priv.0+0x1e2>
 8004f16:	6920      	ldr	r0, [r4, #16]
 8004f18:	f1a0 0610 	sub.w	r6, r0, #16
 8004f1c:	4270      	negs	r0, r6
 8004f1e:	4170      	adcs	r0, r6
 8004f20:	e6b7      	b.n	8004c92 <oslib_test_003_001_execute.lto_priv.0+0x1e2>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004f22:	68a2      	ldr	r2, [r4, #8]
 8004f24:	4293      	cmp	r3, r2
 8004f26:	f47f aef7 	bne.w	8004d18 <oslib_test_003_001_execute.lto_priv.0+0x268>
 8004f2a:	6920      	ldr	r0, [r4, #16]
 8004f2c:	fab0 f080 	clz	r0, r0
 8004f30:	0940      	lsrs	r0, r0, #5
 8004f32:	e6f1      	b.n	8004d18 <oslib_test_003_001_execute.lto_priv.0+0x268>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8004f34:	6920      	ldr	r0, [r4, #16]
 8004f36:	f1a0 0c05 	sub.w	ip, r0, #5
 8004f3a:	f1dc 0000 	rsbs	r0, ip, #0
 8004f3e:	eb40 000c 	adc.w	r0, r0, ip
 8004f42:	e716      	b.n	8004d72 <oslib_test_003_001_execute.lto_priv.0+0x2c2>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	4293      	cmp	r3, r2
 8004f48:	f43f af70 	beq.w	8004e2c <oslib_test_003_001_execute.lto_priv.0+0x37c>
 8004f4c:	6920      	ldr	r0, [r4, #16]
 8004f4e:	fab0 f080 	clz	r0, r0
 8004f52:	0940      	lsrs	r0, r0, #5
 8004f54:	e76a      	b.n	8004e2c <oslib_test_003_001_execute.lto_priv.0+0x37c>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 8004f56:	6920      	ldr	r0, [r4, #16]
 8004f58:	f1a0 010c 	sub.w	r1, r0, #12
 8004f5c:	4248      	negs	r0, r1
 8004f5e:	4148      	adcs	r0, r1
 8004f60:	e6b4      	b.n	8004ccc <oslib_test_003_001_execute.lto_priv.0+0x21c>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8004f62:	6822      	ldr	r2, [r4, #0]
 8004f64:	4293      	cmp	r3, r2
 8004f66:	f43f af46 	beq.w	8004df6 <oslib_test_003_001_execute.lto_priv.0+0x346>
 8004f6a:	6920      	ldr	r0, [r4, #16]
 8004f6c:	f1a0 0210 	sub.w	r2, r0, #16
 8004f70:	4250      	negs	r0, r2
 8004f72:	4150      	adcs	r0, r2
 8004f74:	e73f      	b.n	8004df6 <oslib_test_003_001_execute.lto_priv.0+0x346>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8004f76:	6822      	ldr	r2, [r4, #0]
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	f43f af14 	beq.w	8004da6 <oslib_test_003_001_execute.lto_priv.0+0x2f6>
 8004f7e:	6920      	ldr	r0, [r4, #16]
 8004f80:	fab0 f080 	clz	r0, r0
 8004f84:	0940      	lsrs	r0, r0, #5
 8004f86:	e70e      	b.n	8004da6 <oslib_test_003_001_execute.lto_priv.0+0x2f6>
 8004f88:	0800d5a4 	.word	0x0800d5a4
 8004f8c:	00000000 	.word	0x00000000

08004f90 <thread1.lto_priv.0>:
static THD_FUNCTION(thread1, p) {
 8004f90:	b510      	push	{r4, lr}
 8004f92:	2320      	movs	r3, #32
 8004f94:	4604      	mov	r4, r0
 8004f96:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(&tr1, MSG_OK);
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	4806      	ldr	r0, [pc, #24]	; (8004fb8 <thread1.lto_priv.0+0x28>)
 8004f9e:	f005 fd3f 	bl	800aa20 <chThdResumeI>
  chSchRescheduleS();
 8004fa2:	f004 ffdd 	bl	8009f60 <chSchRescheduleS>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8004fac:	7820      	ldrb	r0, [r4, #0]
}
 8004fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8004fb2:	f7fb bded 	b.w	8000b90 <test_emit_token>
 8004fb6:	bf00      	nop
 8004fb8:	20001d34 	.word	0x20001d34
 8004fbc:	00000000 	.word	0x00000000

08004fc0 <rt_test_006_002_execute.lto_priv.0>:
static void rt_test_006_002_execute(void) {
 8004fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8004fc4:	2501      	movs	r5, #1
  return ch.rlist.current;
 8004fc6:	4f2e      	ldr	r7, [pc, #184]	; (8005080 <rt_test_006_002_execute.lto_priv.0+0xc0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004fc8:	4e2e      	ldr	r6, [pc, #184]	; (8005084 <rt_test_006_002_execute.lto_priv.0+0xc4>)
  return chThdGetSelfX()->prio;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	4c2e      	ldr	r4, [pc, #184]	; (8005088 <rt_test_006_002_execute.lto_priv.0+0xc8>)
 8004fce:	6899      	ldr	r1, [r3, #8]
  test_set_step(1);
 8004fd0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80050b0 <rt_test_006_002_execute.lto_priv.0+0xf0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	4b2c      	ldr	r3, [pc, #176]	; (800508c <rt_test_006_002_execute.lto_priv.0+0xcc>)
 8004fda:	3105      	adds	r1, #5
  test_set_step(1);
 8004fdc:	f8c8 5000 	str.w	r5, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004fe0:	f7fc f816 	bl	8001010 <chThdCreateStatic.constprop.0>
 8004fe4:	4684      	mov	ip, r0
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	4d29      	ldr	r5, [pc, #164]	; (8005090 <rt_test_006_002_execute.lto_priv.0+0xd0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8004fea:	6899      	ldr	r1, [r3, #8]
 8004fec:	4632      	mov	r2, r6
 8004fee:	4b29      	ldr	r3, [pc, #164]	; (8005094 <rt_test_006_002_execute.lto_priv.0+0xd4>)
 8004ff0:	3101      	adds	r1, #1
 8004ff2:	f504 70a4 	add.w	r0, r4, #328	; 0x148
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004ff6:	f8c5 c000 	str.w	ip, [r5]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8004ffa:	f7fc f809 	bl	8001010 <chThdCreateStatic.constprop.0>
 8004ffe:	4684      	mov	ip, r0
 8005000:	69bb      	ldr	r3, [r7, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005002:	4632      	mov	r2, r6
 8005004:	6899      	ldr	r1, [r3, #8]
 8005006:	f504 7024 	add.w	r0, r4, #656	; 0x290
 800500a:	4b23      	ldr	r3, [pc, #140]	; (8005098 <rt_test_006_002_execute.lto_priv.0+0xd8>)
 800500c:	3103      	adds	r1, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 800500e:	f8c5 c004 	str.w	ip, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005012:	f7fb fffd 	bl	8001010 <chThdCreateStatic.constprop.0>
 8005016:	4684      	mov	ip, r0
 8005018:	69bb      	ldr	r3, [r7, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800501a:	4632      	mov	r2, r6
 800501c:	6899      	ldr	r1, [r3, #8]
 800501e:	f504 7076 	add.w	r0, r4, #984	; 0x3d8
 8005022:	4b1e      	ldr	r3, [pc, #120]	; (800509c <rt_test_006_002_execute.lto_priv.0+0xdc>)
 8005024:	3104      	adds	r1, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005026:	f8c5 c008 	str.w	ip, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800502a:	f7fb fff1 	bl	8001010 <chThdCreateStatic.constprop.0>
 800502e:	4684      	mov	ip, r0
 8005030:	69bb      	ldr	r3, [r7, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8005032:	4632      	mov	r2, r6
 8005034:	6899      	ldr	r1, [r3, #8]
 8005036:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 800503a:	3102      	adds	r1, #2
 800503c:	4b18      	ldr	r3, [pc, #96]	; (80050a0 <rt_test_006_002_execute.lto_priv.0+0xe0>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800503e:	f8c5 c00c 	str.w	ip, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8005042:	f7fb ffe5 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8005046:	2302      	movs	r3, #2
    chSemSignal(&sem1);
 8005048:	4c16      	ldr	r4, [pc, #88]	; (80050a4 <rt_test_006_002_execute.lto_priv.0+0xe4>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800504a:	6128      	str	r0, [r5, #16]
    chSemSignal(&sem1);
 800504c:	4620      	mov	r0, r4
  test_set_step(2);
 800504e:	f8c8 3000 	str.w	r3, [r8]
    chSemSignal(&sem1);
 8005052:	f005 f805 	bl	800a060 <chSemSignal>
    chSemSignal(&sem1);
 8005056:	4620      	mov	r0, r4
 8005058:	f005 f802 	bl	800a060 <chSemSignal>
    chSemSignal(&sem1);
 800505c:	4620      	mov	r0, r4
 800505e:	f004 ffff 	bl	800a060 <chSemSignal>
    chSemSignal(&sem1);
 8005062:	4620      	mov	r0, r4
 8005064:	f004 fffc 	bl	800a060 <chSemSignal>
    chSemSignal(&sem1);
 8005068:	4620      	mov	r0, r4
 800506a:	f004 fff9 	bl	800a060 <chSemSignal>
    test_wait_threads();
 800506e:	f7fd fd57 	bl	8002b20 <test_wait_threads>
}
 8005072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8005076:	490c      	ldr	r1, [pc, #48]	; (80050a8 <rt_test_006_002_execute.lto_priv.0+0xe8>)
 8005078:	480c      	ldr	r0, [pc, #48]	; (80050ac <rt_test_006_002_execute.lto_priv.0+0xec>)
 800507a:	f7fb be61 	b.w	8000d40 <_test_assert_sequence>
 800507e:	bf00      	nop
 8005080:	20000c88 	.word	0x20000c88
 8005084:	08005361 	.word	0x08005361
 8005088:	200015e0 	.word	0x200015e0
 800508c:	0800d2a8 	.word	0x0800d2a8
 8005090:	20001d0c 	.word	0x20001d0c
 8005094:	0800d2ac 	.word	0x0800d2ac
 8005098:	0800d318 	.word	0x0800d318
 800509c:	0800ed00 	.word	0x0800ed00
 80050a0:	0800d398 	.word	0x0800d398
 80050a4:	200015bc 	.word	0x200015bc
 80050a8:	0800d288 	.word	0x0800d288
 80050ac:	0800d394 	.word	0x0800d394
 80050b0:	20001cf4 	.word	0x20001cf4
	...

080050c0 <rt_test_011_010_execute.lto_priv.0>:
  test_set_step(1);
 80050c0:	2301      	movs	r3, #1
static void rt_test_011_010_execute(void) {
 80050c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80050c6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8005144 <rt_test_011_010_execute.lto_priv.0+0x84>
    n = 0;
 80050ca:	2500      	movs	r5, #0
  test_set_step(1);
 80050cc:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 80050d0:	f7fd fbce 	bl	8002870 <test_wait_tick>
 80050d4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80050d8:	4606      	mov	r6, r0
      chSemWait(&sem1);
 80050da:	4c17      	ldr	r4, [pc, #92]	; (8005138 <rt_test_011_010_execute.lto_priv.0+0x78>)
 80050dc:	4620      	mov	r0, r4
 80050de:	f005 f83f 	bl	800a160 <chSemWait>
      chSemSignal(&sem1);
 80050e2:	4620      	mov	r0, r4
 80050e4:	f004 ffbc 	bl	800a060 <chSemSignal>
      chSemWait(&sem1);
 80050e8:	4620      	mov	r0, r4
 80050ea:	f005 f839 	bl	800a160 <chSemWait>
      chSemSignal(&sem1);
 80050ee:	4620      	mov	r0, r4
 80050f0:	f004 ffb6 	bl	800a060 <chSemSignal>
      chSemWait(&sem1);
 80050f4:	4620      	mov	r0, r4
 80050f6:	f005 f833 	bl	800a160 <chSemWait>
      chSemSignal(&sem1);
 80050fa:	4620      	mov	r0, r4
 80050fc:	f004 ffb0 	bl	800a060 <chSemSignal>
      chSemWait(&sem1);
 8005100:	4620      	mov	r0, r4
 8005102:	f005 f82d 	bl	800a160 <chSemWait>
      chSemSignal(&sem1);
 8005106:	4620      	mov	r0, r4
 8005108:	f004 ffaa 	bl	800a060 <chSemSignal>
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      n++;
 800510e:	3501      	adds	r5, #1
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8005110:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 8005112:	b29b      	uxth	r3, r3
 8005114:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005118:	d3e0      	bcc.n	80050dc <rt_test_011_010_execute.lto_priv.0+0x1c>
  test_set_step(2);
 800511a:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800511c:	4807      	ldr	r0, [pc, #28]	; (800513c <rt_test_011_010_execute.lto_priv.0+0x7c>)
  test_set_step(2);
 800511e:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8005122:	f7fb fdf5 	bl	8000d10 <test_print>
    test_printn(n * 4);
 8005126:	00a8      	lsls	r0, r5, #2
 8005128:	f7fb fd22 	bl	8000b70 <test_printn>
}
 800512c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" wait+signal/S");
 8005130:	4803      	ldr	r0, [pc, #12]	; (8005140 <rt_test_011_010_execute.lto_priv.0+0x80>)
 8005132:	f7fb bdcd 	b.w	8000cd0 <test_println>
 8005136:	bf00      	nop
 8005138:	200015c8 	.word	0x200015c8
 800513c:	0800d2b0 	.word	0x0800d2b0
 8005140:	0800d5b8 	.word	0x0800d5b8
 8005144:	20001cf4 	.word	0x20001cf4
	...

08005150 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 8005150:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8005152:	4c08      	ldr	r4, [pc, #32]	; (8005174 <bmk_thread7+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8005154:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8005156:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800515a:	075a      	lsls	r2, r3, #29
 800515c:	d408      	bmi.n	8005170 <bmk_thread7+0x20>
    chSemWait(&sem1);
 800515e:	4d06      	ldr	r5, [pc, #24]	; (8005178 <bmk_thread7+0x28>)
 8005160:	4628      	mov	r0, r5
 8005162:	f004 fffd 	bl	800a160 <chSemWait>
 8005166:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8005168:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800516c:	075b      	lsls	r3, r3, #29
 800516e:	d5f7      	bpl.n	8005160 <bmk_thread7+0x10>
}
 8005170:	bd38      	pop	{r3, r4, r5, pc}
 8005172:	bf00      	nop
 8005174:	20000c88 	.word	0x20000c88
 8005178:	200015c8 	.word	0x200015c8
 800517c:	00000000 	.word	0x00000000

08005180 <rt_test_006_006_execute.lto_priv.0>:
}

static void rt_test_006_006_execute(void) {
 8005180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [6.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8005184:	2301      	movs	r3, #1
 8005186:	f04f 0800 	mov.w	r8, #0
static void rt_test_006_006_execute(void) {
 800518a:	b084      	sub	sp, #16
  test_set_step(1);
 800518c:	4e5f      	ldr	r6, [pc, #380]	; (800530c <rt_test_006_006_execute.lto_priv.0+0x18c>)
  tqp->next = (thread_t *)tqp;
 800518e:	ad01      	add	r5, sp, #4
 8005190:	2720      	movs	r7, #32
  tqp->prev = (thread_t *)tqp;
 8005192:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8005196:	6033      	str	r3, [r6, #0]
 8005198:	f8cd 800c 	str.w	r8, [sp, #12]
 800519c:	f387 8811 	msr	BASEPRI, r7
 */
static inline bool chBSemGetStateI(const binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 80051a0:	9803      	ldr	r0, [sp, #12]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80051a2:	495b      	ldr	r1, [pc, #364]	; (8005310 <rt_test_006_006_execute.lto_priv.0+0x190>)
 80051a4:	4540      	cmp	r0, r8
 80051a6:	bfcc      	ite	gt
 80051a8:	2000      	movgt	r0, #0
 80051aa:	2001      	movle	r0, #1
 80051ac:	f7fb fc48 	bl	8000a40 <_test_assert>
 80051b0:	b120      	cbz	r0, 80051bc <rt_test_006_006_execute.lto_priv.0+0x3c>
 80051b2:	f388 8811 	msr	BASEPRI, r8
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
  test_end_step(6);
}
 80051b6:	b004      	add	sp, #16
 80051b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051bc:	4604      	mov	r4, r0
 80051be:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80051c2:	2302      	movs	r3, #2
 80051c4:	4601      	mov	r1, r0
 80051c6:	4628      	mov	r0, r5
 80051c8:	6033      	str	r3, [r6, #0]
 80051ca:	f7fb ff79 	bl	80010c0 <chSemResetWithMessage.constprop.0>
 80051ce:	f387 8811 	msr	BASEPRI, r7
 80051d2:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80051d4:	494e      	ldr	r1, [pc, #312]	; (8005310 <rt_test_006_006_execute.lto_priv.0+0x190>)
 80051d6:	2800      	cmp	r0, #0
 80051d8:	bfcc      	ite	gt
 80051da:	2000      	movgt	r0, #0
 80051dc:	2001      	movle	r0, #1
 80051de:	f7fb fc2f 	bl	8000a40 <_test_assert>
 80051e2:	4680      	mov	r8, r0
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d172      	bne.n	80052ce <rt_test_006_006_execute.lto_priv.0+0x14e>
 80051e8:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 80051ec:	2403      	movs	r4, #3
  return ch.rlist.current;
 80051ee:	4a49      	ldr	r2, [pc, #292]	; (8005314 <rt_test_006_006_execute.lto_priv.0+0x194>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80051f0:	462b      	mov	r3, r5
  return chThdGetSelfX()->prio;
 80051f2:	6991      	ldr	r1, [r2, #24]
 80051f4:	4848      	ldr	r0, [pc, #288]	; (8005318 <rt_test_006_006_execute.lto_priv.0+0x198>)
 80051f6:	6889      	ldr	r1, [r1, #8]
 80051f8:	4a48      	ldr	r2, [pc, #288]	; (800531c <rt_test_006_006_execute.lto_priv.0+0x19c>)
 80051fa:	3901      	subs	r1, #1
  test_set_step(3);
 80051fc:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80051fe:	f7fb ff07 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(4);
 8005202:	2304      	movs	r3, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8005204:	4601      	mov	r1, r0
 8005206:	4a46      	ldr	r2, [pc, #280]	; (8005320 <rt_test_006_006_execute.lto_priv.0+0x1a0>)
  return chSemWait(&bsp->sem);
 8005208:	4628      	mov	r0, r5
 800520a:	6011      	str	r1, [r2, #0]
  test_set_step(4);
 800520c:	6033      	str	r3, [r6, #0]
 800520e:	f004 ffa7 	bl	800a160 <chSemWait>
 8005212:	4604      	mov	r4, r0
 8005214:	f387 8811 	msr	BASEPRI, r7
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8005218:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 800521a:	493d      	ldr	r1, [pc, #244]	; (8005310 <rt_test_006_006_execute.lto_priv.0+0x190>)
 800521c:	2800      	cmp	r0, #0
 800521e:	bfcc      	ite	gt
 8005220:	2000      	movgt	r0, #0
 8005222:	2001      	movle	r0, #1
 8005224:	f7fb fc0c 	bl	8000a40 <_test_assert>
 8005228:	2800      	cmp	r0, #0
 800522a:	d1c2      	bne.n	80051b2 <rt_test_006_006_execute.lto_priv.0+0x32>
 800522c:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
 8005230:	fab4 f084 	clz	r0, r4
 8005234:	493b      	ldr	r1, [pc, #236]	; (8005324 <rt_test_006_006_execute.lto_priv.0+0x1a4>)
 8005236:	0940      	lsrs	r0, r0, #5
 8005238:	f7fb fc02 	bl	8000a40 <_test_assert>
 800523c:	2800      	cmp	r0, #0
 800523e:	d1ba      	bne.n	80051b6 <rt_test_006_006_execute.lto_priv.0+0x36>
  test_set_step(5);
 8005240:	2305      	movs	r3, #5
 8005242:	6033      	str	r3, [r6, #0]
 8005244:	f387 8811 	msr	BASEPRI, r7
  if (bsp->sem.cnt < (cnt_t)1) {
 8005248:	9b03      	ldr	r3, [sp, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	dd44      	ble.n	80052d8 <rt_test_006_006_execute.lto_priv.0+0x158>
  chSchRescheduleS();
 800524e:	f004 fe87 	bl	8009f60 <chSchRescheduleS>
 8005252:	f04f 0800 	mov.w	r8, #0
 8005256:	f388 8811 	msr	BASEPRI, r8
 800525a:	2720      	movs	r7, #32
 800525c:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8005260:	9803      	ldr	r0, [sp, #12]
 8005262:	4931      	ldr	r1, [pc, #196]	; (8005328 <rt_test_006_006_execute.lto_priv.0+0x1a8>)
 8005264:	4540      	cmp	r0, r8
 8005266:	bfd4      	ite	le
 8005268:	2000      	movle	r0, #0
 800526a:	2001      	movgt	r0, #1
 800526c:	f7fb fbe8 	bl	8000a40 <_test_assert>
 8005270:	4604      	mov	r4, r0
 8005272:	2800      	cmp	r0, #0
 8005274:	d19d      	bne.n	80051b2 <rt_test_006_006_execute.lto_priv.0+0x32>
 8005276:	f380 8811 	msr	BASEPRI, r0
 800527a:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 800527e:	9803      	ldr	r0, [sp, #12]
 8005280:	492a      	ldr	r1, [pc, #168]	; (800532c <rt_test_006_006_execute.lto_priv.0+0x1ac>)
 8005282:	f1a0 0001 	sub.w	r0, r0, #1
 8005286:	fab0 f080 	clz	r0, r0
 800528a:	0940      	lsrs	r0, r0, #5
 800528c:	f7fb fbd8 	bl	8000a40 <_test_assert>
 8005290:	b9e8      	cbnz	r0, 80052ce <rt_test_006_006_execute.lto_priv.0+0x14e>
 8005292:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 8005296:	2306      	movs	r3, #6
 8005298:	6033      	str	r3, [r6, #0]
 800529a:	f387 8811 	msr	BASEPRI, r7
  if (bsp->sem.cnt < (cnt_t)1) {
 800529e:	9b03      	ldr	r3, [sp, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	dd2f      	ble.n	8005304 <rt_test_006_006_execute.lto_priv.0+0x184>
  chSchRescheduleS();
 80052a4:	f004 fe5c 	bl	8009f60 <chSchRescheduleS>
 80052a8:	2500      	movs	r5, #0
 80052aa:	f385 8811 	msr	BASEPRI, r5
 80052ae:	2620      	movs	r6, #32
 80052b0:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 80052b4:	9803      	ldr	r0, [sp, #12]
 80052b6:	491e      	ldr	r1, [pc, #120]	; (8005330 <rt_test_006_006_execute.lto_priv.0+0x1b0>)
 80052b8:	42a8      	cmp	r0, r5
 80052ba:	bfd4      	ite	le
 80052bc:	2000      	movle	r0, #0
 80052be:	2001      	movgt	r0, #1
 80052c0:	f7fb fbbe 	bl	8000a40 <_test_assert>
 80052c4:	4604      	mov	r4, r0
 80052c6:	b158      	cbz	r0, 80052e0 <rt_test_006_006_execute.lto_priv.0+0x160>
 80052c8:	f385 8811 	msr	BASEPRI, r5
 80052cc:	e773      	b.n	80051b6 <rt_test_006_006_execute.lto_priv.0+0x36>
 80052ce:	f384 8811 	msr	BASEPRI, r4
}
 80052d2:	b004      	add	sp, #16
 80052d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chSemSignalI(&bsp->sem);
 80052d8:	4628      	mov	r0, r5
 80052da:	f005 fb31 	bl	800a940 <chSemSignalI>
 80052de:	e7b6      	b.n	800524e <rt_test_006_006_execute.lto_priv.0+0xce>
 80052e0:	f380 8811 	msr	BASEPRI, r0
 80052e4:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 80052e8:	9803      	ldr	r0, [sp, #12]
 80052ea:	4910      	ldr	r1, [pc, #64]	; (800532c <rt_test_006_006_execute.lto_priv.0+0x1ac>)
 80052ec:	f1a0 0001 	sub.w	r0, r0, #1
 80052f0:	fab0 f080 	clz	r0, r0
 80052f4:	0940      	lsrs	r0, r0, #5
 80052f6:	f7fb fba3 	bl	8000a40 <_test_assert>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d1e7      	bne.n	80052ce <rt_test_006_006_execute.lto_priv.0+0x14e>
 80052fe:	f380 8811 	msr	BASEPRI, r0
  test_end_step(6);
 8005302:	e758      	b.n	80051b6 <rt_test_006_006_execute.lto_priv.0+0x36>
 8005304:	4628      	mov	r0, r5
 8005306:	f005 fb1b 	bl	800a940 <chSemSignalI>
 800530a:	e7cb      	b.n	80052a4 <rt_test_006_006_execute.lto_priv.0+0x124>
 800530c:	20001cf4 	.word	0x20001cf4
 8005310:	0800d5c8 	.word	0x0800d5c8
 8005314:	20000c88 	.word	0x20000c88
 8005318:	200015e0 	.word	0x200015e0
 800531c:	080042e1 	.word	0x080042e1
 8005320:	20001d0c 	.word	0x20001d0c
 8005324:	0800d5d4 	.word	0x0800d5d4
 8005328:	0800d5e8 	.word	0x0800d5e8
 800532c:	0800d5f4 	.word	0x0800d5f4
 8005330:	0800d5cc 	.word	0x0800d5cc
	...

08005340 <thread3>:
static THD_FUNCTION(thread3, p) {
 8005340:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 8005342:	4c04      	ldr	r4, [pc, #16]	; (8005354 <thread3+0x14>)
 8005344:	4620      	mov	r0, r4
 8005346:	f004 ff0b 	bl	800a160 <chSemWait>
  chSemSignal(&sem1);
 800534a:	4620      	mov	r0, r4
}
 800534c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 8005350:	f004 be86 	b.w	800a060 <chSemSignal>
 8005354:	200015bc 	.word	0x200015bc
	...

08005360 <thread1.lto_priv.1>:
static THD_FUNCTION(thread1, p) {
 8005360:	b510      	push	{r4, lr}
 8005362:	4604      	mov	r4, r0
  chSemWait(&sem1);
 8005364:	4803      	ldr	r0, [pc, #12]	; (8005374 <thread1.lto_priv.1+0x14>)
 8005366:	f004 fefb 	bl	800a160 <chSemWait>
  test_emit_token(*(char *)p);
 800536a:	7820      	ldrb	r0, [r4, #0]
}
 800536c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8005370:	f7fb bc0e 	b.w	8000b90 <test_emit_token>
 8005374:	200015bc 	.word	0x200015bc
	...

08005380 <rt_test_006_001_execute.lto_priv.0>:
static void rt_test_006_001_execute(void) {
 8005380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8005384:	2301      	movs	r3, #1
    msg = chSemWait(&sem1);
 8005386:	4c2a      	ldr	r4, [pc, #168]	; (8005430 <rt_test_006_001_execute.lto_priv.0+0xb0>)
  test_set_step(1);
 8005388:	4f2a      	ldr	r7, [pc, #168]	; (8005434 <rt_test_006_001_execute.lto_priv.0+0xb4>)
    msg = chSemWait(&sem1);
 800538a:	4620      	mov	r0, r4
  test_set_step(1);
 800538c:	603b      	str	r3, [r7, #0]
    msg = chSemWait(&sem1);
 800538e:	f004 fee7 	bl	800a160 <chSemWait>
 8005392:	2620      	movs	r6, #32
 8005394:	4605      	mov	r5, r0
 8005396:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 800539a:	68a0      	ldr	r0, [r4, #8]
 800539c:	4926      	ldr	r1, [pc, #152]	; (8005438 <rt_test_006_001_execute.lto_priv.0+0xb8>)
 800539e:	fab0 f080 	clz	r0, r0
 80053a2:	0940      	lsrs	r0, r0, #5
 80053a4:	f7fb fb4c 	bl	8000a40 <_test_assert>
 80053a8:	b120      	cbz	r0, 80053b4 <rt_test_006_001_execute.lto_priv.0+0x34>
 80053aa:	2300      	movs	r3, #0
 80053ac:	f383 8811 	msr	BASEPRI, r3
}
 80053b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053b4:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
 80053b8:	fab5 f085 	clz	r0, r5
 80053bc:	491f      	ldr	r1, [pc, #124]	; (800543c <rt_test_006_001_execute.lto_priv.0+0xbc>)
 80053be:	0940      	lsrs	r0, r0, #5
 80053c0:	f7fb fb3e 	bl	8000a40 <_test_assert>
 80053c4:	4605      	mov	r5, r0
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d1f2      	bne.n	80053b0 <rt_test_006_001_execute.lto_priv.0+0x30>
  test_set_step(2);
 80053ca:	f04f 0902 	mov.w	r9, #2
    chSemSignal(&sem1);
 80053ce:	4620      	mov	r0, r4
  test_set_step(2);
 80053d0:	f8c7 9000 	str.w	r9, [r7]
    chSemSignal(&sem1);
 80053d4:	f004 fe44 	bl	800a060 <chSemSignal>
 80053d8:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 80053dc:	68a0      	ldr	r0, [r4, #8]
 80053de:	4916      	ldr	r1, [pc, #88]	; (8005438 <rt_test_006_001_execute.lto_priv.0+0xb8>)
 80053e0:	f1a0 0001 	sub.w	r0, r0, #1
 80053e4:	fab0 f080 	clz	r0, r0
 80053e8:	0940      	lsrs	r0, r0, #5
 80053ea:	f7fb fb29 	bl	8000a40 <_test_assert>
 80053ee:	4680      	mov	r8, r0
 80053f0:	b118      	cbz	r0, 80053fa <rt_test_006_001_execute.lto_priv.0+0x7a>
 80053f2:	f385 8811 	msr	BASEPRI, r5
}
 80053f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fa:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 80053fe:	2303      	movs	r3, #3
 8005400:	4649      	mov	r1, r9
 8005402:	4620      	mov	r0, r4
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	f7fb fe5b 	bl	80010c0 <chSemResetWithMessage.constprop.0>
 800540a:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 800540e:	68a0      	ldr	r0, [r4, #8]
 8005410:	4909      	ldr	r1, [pc, #36]	; (8005438 <rt_test_006_001_execute.lto_priv.0+0xb8>)
 8005412:	f1a0 0002 	sub.w	r0, r0, #2
 8005416:	fab0 f080 	clz	r0, r0
 800541a:	0940      	lsrs	r0, r0, #5
 800541c:	f7fb fb10 	bl	8000a40 <_test_assert>
 8005420:	b910      	cbnz	r0, 8005428 <rt_test_006_001_execute.lto_priv.0+0xa8>
 8005422:	f380 8811 	msr	BASEPRI, r0
  test_end_step(3);
 8005426:	e7c3      	b.n	80053b0 <rt_test_006_001_execute.lto_priv.0+0x30>
 8005428:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 800542c:	e7c0      	b.n	80053b0 <rt_test_006_001_execute.lto_priv.0+0x30>
 800542e:	bf00      	nop
 8005430:	200015bc 	.word	0x200015bc
 8005434:	20001cf4 	.word	0x20001cf4
 8005438:	0800d608 	.word	0x0800d608
 800543c:	0800d3d0 	.word	0x0800d3d0

08005440 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	4604      	mov	r4, r0
 8005444:	4d08      	ldr	r5, [pc, #32]	; (8005468 <bmk_thread8+0x28>)
    chThdYield();
 8005446:	f004 fcfb 	bl	8009e40 <chThdYield>
    chThdYield();
 800544a:	f004 fcf9 	bl	8009e40 <chThdYield>
    chThdYield();
 800544e:	f004 fcf7 	bl	8009e40 <chThdYield>
    chThdYield();
 8005452:	f004 fcf5 	bl	8009e40 <chThdYield>
    (*(uint32_t *)p) += 4;
 8005456:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8005458:	69aa      	ldr	r2, [r5, #24]
 800545a:	3304      	adds	r3, #4
 800545c:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
 800545e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8005462:	075b      	lsls	r3, r3, #29
 8005464:	d5ef      	bpl.n	8005446 <bmk_thread8+0x6>
}
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	20000c88 	.word	0x20000c88
 800546c:	00000000 	.word	0x00000000

08005470 <rt_test_011_006_execute.lto_priv.0>:
  test_set_step(1);
 8005470:	2201      	movs	r2, #1
static void rt_test_011_006_execute(void) {
 8005472:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8005476:	4b17      	ldr	r3, [pc, #92]	; (80054d4 <rt_test_011_006_execute.lto_priv.0+0x64>)
  test_set_step(1);
 8005478:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80054e4 <rt_test_011_006_execute.lto_priv.0+0x74>
  return chThdGetSelfX()->prio;
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f8c8 2000 	str.w	r2, [r8]
  tprio_t prio = chThdGetPriorityX() + 1;
 8005482:	689e      	ldr	r6, [r3, #8]
    n = 0;
 8005484:	2400      	movs	r4, #0
  tprio_t prio = chThdGetPriorityX() + 1;
 8005486:	4416      	add	r6, r2
    start = test_wait_tick();
 8005488:	f7fd f9f2 	bl	8002870 <test_wait_tick>
 800548c:	4605      	mov	r5, r0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800548e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80054e8 <rt_test_011_006_execute.lto_priv.0+0x78>
 8005492:	4f11      	ldr	r7, [pc, #68]	; (80054d8 <rt_test_011_006_execute.lto_priv.0+0x68>)
 8005494:	2300      	movs	r3, #0
 8005496:	464a      	mov	r2, r9
 8005498:	4631      	mov	r1, r6
 800549a:	4638      	mov	r0, r7
 800549c:	f7fb fdb8 	bl	8001010 <chThdCreateStatic.constprop.0>
 80054a0:	f005 f946 	bl	800a730 <chThdRelease>
 80054a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 80054aa:	3401      	adds	r4, #1
 80054ac:	1b5b      	subs	r3, r3, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80054b4:	d3ee      	bcc.n	8005494 <rt_test_011_006_execute.lto_priv.0+0x24>
  test_set_step(2);
 80054b6:	2302      	movs	r3, #2
    test_print("--- Score : ");
 80054b8:	4808      	ldr	r0, [pc, #32]	; (80054dc <rt_test_011_006_execute.lto_priv.0+0x6c>)
  test_set_step(2);
 80054ba:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 80054be:	f7fb fc27 	bl	8000d10 <test_print>
    test_printn(n);
 80054c2:	4620      	mov	r0, r4
 80054c4:	f7fb fb54 	bl	8000b70 <test_printn>
}
 80054c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 80054cc:	4804      	ldr	r0, [pc, #16]	; (80054e0 <rt_test_011_006_execute.lto_priv.0+0x70>)
 80054ce:	f7fb bbff 	b.w	8000cd0 <test_println>
 80054d2:	bf00      	nop
 80054d4:	20000c88 	.word	0x20000c88
 80054d8:	200015e0 	.word	0x200015e0
 80054dc:	0800d2b0 	.word	0x0800d2b0
 80054e0:	0800d2dc 	.word	0x0800d2dc
 80054e4:	20001cf4 	.word	0x20001cf4
 80054e8:	08009111 	.word	0x08009111
 80054ec:	00000000 	.word	0x00000000

080054f0 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	4605      	mov	r5, r0
  start = test_wait_tick();
 80054f4:	f7fd f9bc 	bl	8002870 <test_wait_tick>
  uint32_t n = 0;
 80054f8:	2400      	movs	r4, #0
  start = test_wait_tick();
 80054fa:	4606      	mov	r6, r0
 80054fc:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    (void)chMsgSend(tp, 1);
 8005500:	2101      	movs	r1, #1
 8005502:	4628      	mov	r0, r5
 8005504:	f004 fe5c 	bl	800a1c0 <chMsgSend>
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    n++;
 800550a:	3401      	adds	r4, #1
 800550c:	1b9b      	subs	r3, r3, r6
  } while (chVTIsSystemTimeWithinX(start, end));
 800550e:	b29b      	uxth	r3, r3
 8005510:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005514:	d3f4      	bcc.n	8005500 <msg_loop_test+0x10>
  (void)chMsgSend(tp, 0);
 8005516:	4628      	mov	r0, r5
 8005518:	2100      	movs	r1, #0
 800551a:	f004 fe51 	bl	800a1c0 <chMsgSend>
}
 800551e:	4620      	mov	r0, r4
 8005520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005522:	bf00      	nop
	...

08005530 <rt_test_011_003_execute.lto_priv.0>:
static void rt_test_011_003_execute(void) {
 8005530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005534:	2401      	movs	r4, #1
  return ch.rlist.current;
 8005536:	4e2f      	ldr	r6, [pc, #188]	; (80055f4 <rt_test_011_003_execute.lto_priv.0+0xc4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005538:	4d2f      	ldr	r5, [pc, #188]	; (80055f8 <rt_test_011_003_execute.lto_priv.0+0xc8>)
  return chThdGetSelfX()->prio;
 800553a:	69b3      	ldr	r3, [r6, #24]
  test_set_step(1);
 800553c:	4f2f      	ldr	r7, [pc, #188]	; (80055fc <rt_test_011_003_execute.lto_priv.0+0xcc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800553e:	6899      	ldr	r1, [r3, #8]
 8005540:	4628      	mov	r0, r5
 8005542:	4421      	add	r1, r4
 8005544:	2300      	movs	r3, #0
 8005546:	4a2e      	ldr	r2, [pc, #184]	; (8005600 <rt_test_011_003_execute.lto_priv.0+0xd0>)
  test_set_step(1);
 8005548:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800554a:	f7fb fd61 	bl	8001010 <chThdCreateStatic.constprop.0>
 800554e:	4603      	mov	r3, r0
  test_set_step(2);
 8005550:	f04f 0c02 	mov.w	ip, #2
 8005554:	69b2      	ldr	r2, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005556:	4c2b      	ldr	r4, [pc, #172]	; (8005604 <rt_test_011_003_execute.lto_priv.0+0xd4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8005558:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8005614 <rt_test_011_003_execute.lto_priv.0+0xe4>
 800555c:	6891      	ldr	r1, [r2, #8]
 800555e:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8005562:	4642      	mov	r2, r8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005564:	6023      	str	r3, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8005566:	3902      	subs	r1, #2
 8005568:	2300      	movs	r3, #0
  test_set_step(2);
 800556a:	f8c7 c000 	str.w	ip, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800556e:	f7fb fd4f 	bl	8001010 <chThdCreateStatic.constprop.0>
 8005572:	4684      	mov	ip, r0
 8005574:	69b3      	ldr	r3, [r6, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8005576:	4642      	mov	r2, r8
 8005578:	6899      	ldr	r1, [r3, #8]
 800557a:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800557e:	2300      	movs	r3, #0
 8005580:	3903      	subs	r1, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8005582:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8005586:	f7fb fd43 	bl	8001010 <chThdCreateStatic.constprop.0>
 800558a:	4684      	mov	ip, r0
 800558c:	69b3      	ldr	r3, [r6, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800558e:	4642      	mov	r2, r8
 8005590:	6899      	ldr	r1, [r3, #8]
 8005592:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8005596:	2300      	movs	r3, #0
 8005598:	3904      	subs	r1, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 800559a:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800559e:	f7fb fd37 	bl	8001010 <chThdCreateStatic.constprop.0>
 80055a2:	4684      	mov	ip, r0
 80055a4:	69b3      	ldr	r3, [r6, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80055a6:	4642      	mov	r2, r8
 80055a8:	6899      	ldr	r1, [r3, #8]
 80055aa:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 80055ae:	3905      	subs	r1, #5
 80055b0:	2300      	movs	r3, #0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 80055b2:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80055b6:	f7fb fd2b 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(3);
 80055ba:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80055bc:	4602      	mov	r2, r0
    n = msg_loop_test(threads[0]);
 80055be:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80055c0:	6122      	str	r2, [r4, #16]
  test_set_step(3);
 80055c2:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 80055c4:	f7ff ff94 	bl	80054f0 <msg_loop_test>
 80055c8:	4604      	mov	r4, r0
    test_wait_threads();
 80055ca:	f7fd faa9 	bl	8002b20 <test_wait_threads>
  test_set_step(4);
 80055ce:	2304      	movs	r3, #4
    test_print("--- Score : ");
 80055d0:	480d      	ldr	r0, [pc, #52]	; (8005608 <rt_test_011_003_execute.lto_priv.0+0xd8>)
  test_set_step(4);
 80055d2:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 80055d4:	f7fb fb9c 	bl	8000d10 <test_print>
    test_printn(n);
 80055d8:	4620      	mov	r0, r4
 80055da:	f7fb fac9 	bl	8000b70 <test_printn>
    test_print(" msgs/S, ");
 80055de:	480b      	ldr	r0, [pc, #44]	; (800560c <rt_test_011_003_execute.lto_priv.0+0xdc>)
 80055e0:	f7fb fb96 	bl	8000d10 <test_print>
    test_printn(n << 1);
 80055e4:	0060      	lsls	r0, r4, #1
 80055e6:	f7fb fac3 	bl	8000b70 <test_printn>
}
 80055ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 80055ee:	4808      	ldr	r0, [pc, #32]	; (8005610 <rt_test_011_003_execute.lto_priv.0+0xe0>)
 80055f0:	f7fb bb6e 	b.w	8000cd0 <test_println>
 80055f4:	20000c88 	.word	0x20000c88
 80055f8:	200015e0 	.word	0x200015e0
 80055fc:	20001cf4 	.word	0x20001cf4
 8005600:	08004851 	.word	0x08004851
 8005604:	20001d0c 	.word	0x20001d0c
 8005608:	0800d2b0 	.word	0x0800d2b0
 800560c:	0800d61c 	.word	0x0800d61c
 8005610:	0800d2e8 	.word	0x0800d2e8
 8005614:	08009111 	.word	0x08009111
	...

08005620 <rt_test_011_002_execute.lto_priv.0>:
static void rt_test_011_002_execute(void) {
 8005620:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8005622:	2401      	movs	r4, #1
  return ch.rlist.current;
 8005624:	4b13      	ldr	r3, [pc, #76]	; (8005674 <rt_test_011_002_execute.lto_priv.0+0x54>)
 8005626:	4d14      	ldr	r5, [pc, #80]	; (8005678 <rt_test_011_002_execute.lto_priv.0+0x58>)
  return chThdGetSelfX()->prio;
 8005628:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800562a:	4814      	ldr	r0, [pc, #80]	; (800567c <rt_test_011_002_execute.lto_priv.0+0x5c>)
 800562c:	6891      	ldr	r1, [r2, #8]
 800562e:	2300      	movs	r3, #0
 8005630:	4421      	add	r1, r4
 8005632:	4a13      	ldr	r2, [pc, #76]	; (8005680 <rt_test_011_002_execute.lto_priv.0+0x60>)
  test_set_step(1);
 8005634:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005636:	f7fb fceb 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800563a:	2202      	movs	r2, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800563c:	4b11      	ldr	r3, [pc, #68]	; (8005684 <rt_test_011_002_execute.lto_priv.0+0x64>)
  test_set_step(2);
 800563e:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005640:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 8005642:	f7ff ff55 	bl	80054f0 <msg_loop_test>
 8005646:	4604      	mov	r4, r0
    test_wait_threads();
 8005648:	f7fd fa6a 	bl	8002b20 <test_wait_threads>
  test_set_step(3);
 800564c:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800564e:	480e      	ldr	r0, [pc, #56]	; (8005688 <rt_test_011_002_execute.lto_priv.0+0x68>)
  test_set_step(3);
 8005650:	602b      	str	r3, [r5, #0]
    test_print("--- Score : ");
 8005652:	f7fb fb5d 	bl	8000d10 <test_print>
    test_printn(n);
 8005656:	4620      	mov	r0, r4
 8005658:	f7fb fa8a 	bl	8000b70 <test_printn>
    test_print(" msgs/S, ");
 800565c:	480b      	ldr	r0, [pc, #44]	; (800568c <rt_test_011_002_execute.lto_priv.0+0x6c>)
 800565e:	f7fb fb57 	bl	8000d10 <test_print>
    test_printn(n << 1);
 8005662:	0060      	lsls	r0, r4, #1
 8005664:	f7fb fa84 	bl	8000b70 <test_printn>
}
 8005668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 800566c:	4808      	ldr	r0, [pc, #32]	; (8005690 <rt_test_011_002_execute.lto_priv.0+0x70>)
 800566e:	f7fb bb2f 	b.w	8000cd0 <test_println>
 8005672:	bf00      	nop
 8005674:	20000c88 	.word	0x20000c88
 8005678:	20001cf4 	.word	0x20001cf4
 800567c:	200015e0 	.word	0x200015e0
 8005680:	08004851 	.word	0x08004851
 8005684:	20001d0c 	.word	0x20001d0c
 8005688:	0800d2b0 	.word	0x0800d2b0
 800568c:	0800d61c 	.word	0x0800d61c
 8005690:	0800d2e8 	.word	0x0800d2e8
	...

080056a0 <rt_test_011_001_execute.lto_priv.0>:
static void rt_test_011_001_execute(void) {
 80056a0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 80056a2:	2401      	movs	r4, #1
  return ch.rlist.current;
 80056a4:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <rt_test_011_001_execute.lto_priv.0+0x54>)
 80056a6:	4d14      	ldr	r5, [pc, #80]	; (80056f8 <rt_test_011_001_execute.lto_priv.0+0x58>)
  return chThdGetSelfX()->prio;
 80056a8:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80056aa:	4814      	ldr	r0, [pc, #80]	; (80056fc <rt_test_011_001_execute.lto_priv.0+0x5c>)
 80056ac:	6891      	ldr	r1, [r2, #8]
 80056ae:	2300      	movs	r3, #0
 80056b0:	3901      	subs	r1, #1
 80056b2:	4a13      	ldr	r2, [pc, #76]	; (8005700 <rt_test_011_001_execute.lto_priv.0+0x60>)
  test_set_step(1);
 80056b4:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80056b6:	f7fb fcab 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 80056ba:	2202      	movs	r2, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80056bc:	4b11      	ldr	r3, [pc, #68]	; (8005704 <rt_test_011_001_execute.lto_priv.0+0x64>)
  test_set_step(2);
 80056be:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80056c0:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 80056c2:	f7ff ff15 	bl	80054f0 <msg_loop_test>
 80056c6:	4604      	mov	r4, r0
    test_wait_threads();
 80056c8:	f7fd fa2a 	bl	8002b20 <test_wait_threads>
  test_set_step(3);
 80056cc:	2303      	movs	r3, #3
    test_print("--- Score : ");
 80056ce:	480e      	ldr	r0, [pc, #56]	; (8005708 <rt_test_011_001_execute.lto_priv.0+0x68>)
  test_set_step(3);
 80056d0:	602b      	str	r3, [r5, #0]
    test_print("--- Score : ");
 80056d2:	f7fb fb1d 	bl	8000d10 <test_print>
    test_printn(n);
 80056d6:	4620      	mov	r0, r4
 80056d8:	f7fb fa4a 	bl	8000b70 <test_printn>
    test_print(" msgs/S, ");
 80056dc:	480b      	ldr	r0, [pc, #44]	; (800570c <rt_test_011_001_execute.lto_priv.0+0x6c>)
 80056de:	f7fb fb17 	bl	8000d10 <test_print>
    test_printn(n << 1);
 80056e2:	0060      	lsls	r0, r4, #1
 80056e4:	f7fb fa44 	bl	8000b70 <test_printn>
}
 80056e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 80056ec:	4808      	ldr	r0, [pc, #32]	; (8005710 <rt_test_011_001_execute.lto_priv.0+0x70>)
 80056ee:	f7fb baef 	b.w	8000cd0 <test_println>
 80056f2:	bf00      	nop
 80056f4:	20000c88 	.word	0x20000c88
 80056f8:	20001cf4 	.word	0x20001cf4
 80056fc:	200015e0 	.word	0x200015e0
 8005700:	08004851 	.word	0x08004851
 8005704:	20001d0c 	.word	0x20001d0c
 8005708:	0800d2b0 	.word	0x0800d2b0
 800570c:	0800d61c 	.word	0x0800d61c
 8005710:	0800d2e8 	.word	0x0800d2e8
	...

08005720 <msg_thread1>:
static THD_FUNCTION(msg_thread1, p) {
 8005720:	b510      	push	{r4, lr}
 8005722:	4604      	mov	r4, r0
  chMsgSend(p, 'A');
 8005724:	2141      	movs	r1, #65	; 0x41
 8005726:	f004 fd4b 	bl	800a1c0 <chMsgSend>
  chMsgSend(p, 'B');
 800572a:	4620      	mov	r0, r4
 800572c:	2142      	movs	r1, #66	; 0x42
 800572e:	f004 fd47 	bl	800a1c0 <chMsgSend>
  chMsgSend(p, 'C');
 8005732:	4620      	mov	r0, r4
 8005734:	2143      	movs	r1, #67	; 0x43
 8005736:	f004 fd43 	bl	800a1c0 <chMsgSend>
  chMsgSend(p, 'D');
 800573a:	4620      	mov	r0, r4
}
 800573c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 8005740:	2144      	movs	r1, #68	; 0x44
 8005742:	f004 bd3d 	b.w	800a1c0 <chMsgSend>
 8005746:	bf00      	nop
	...

08005750 <rt_test_009_007_execute.lto_priv.0>:

static void rt_test_009_007_execute(void) {
 8005750:	b5f0      	push	{r4, r5, r6, r7, lr}
  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8005752:	4e2b      	ldr	r6, [pc, #172]	; (8005800 <rt_test_009_007_execute.lto_priv.0+0xb0>)
 8005754:	b08b      	sub	sp, #44	; 0x2c
 8005756:	4f2b      	ldr	r7, [pc, #172]	; (8005804 <rt_test_009_007_execute.lto_priv.0+0xb4>)
 8005758:	4630      	mov	r0, r6
 800575a:	2201      	movs	r2, #1
 800575c:	a905      	add	r1, sp, #20
 800575e:	f7fa feff 	bl	8000560 <chEvtRegisterMaskWithFlags.constprop.0>
 8005762:	4669      	mov	r1, sp
 8005764:	2204      	movs	r2, #4
 8005766:	4638      	mov	r0, r7
 8005768:	f7fa fefa 	bl	8000560 <chEvtRegisterMaskWithFlags.constprop.0>
  test_end_step(1);

  /* [9.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 800576c:	2302      	movs	r3, #2
 800576e:	4d26      	ldr	r5, [pc, #152]	; (8005808 <rt_test_009_007_execute.lto_priv.0+0xb8>)
 8005770:	602b      	str	r3, [r5, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005772:	f7fd f87d 	bl	8002870 <test_wait_tick>
  return ch.rlist.current;
 8005776:	4a25      	ldr	r2, [pc, #148]	; (800580c <rt_test_009_007_execute.lto_priv.0+0xbc>)
 8005778:	4604      	mov	r4, r0
  return chThdGetSelfX()->prio;
 800577a:	6991      	ldr	r1, [r2, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800577c:	4b24      	ldr	r3, [pc, #144]	; (8005810 <rt_test_009_007_execute.lto_priv.0+0xc0>)
 800577e:	6889      	ldr	r1, [r1, #8]
 8005780:	4a24      	ldr	r2, [pc, #144]	; (8005814 <rt_test_009_007_execute.lto_priv.0+0xc4>)
 8005782:	3901      	subs	r1, #1
 8005784:	4824      	ldr	r0, [pc, #144]	; (8005818 <rt_test_009_007_execute.lto_priv.0+0xc8>)
 8005786:	f7fb fc43 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_end_step(2);

  /* [9.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 800578a:	2203      	movs	r2, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800578c:	4b23      	ldr	r3, [pc, #140]	; (800581c <rt_test_009_007_execute.lto_priv.0+0xcc>)
  test_set_step(3);
 800578e:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005790:	6018      	str	r0, [r3, #0]
  {
    m = chEvtWaitAll(5);
 8005792:	f7fb fdbd 	bl	8001310 <chEvtWaitAll.constprop.0>
  return systime + (systime_t)interval;
 8005796:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800579a:	f104 0064 	add.w	r0, r4, #100	; 0x64
    test_assert_time_window(target_time,
 800579e:	b289      	uxth	r1, r1
 80057a0:	b280      	uxth	r0, r0
 80057a2:	f7fa ff05 	bl	80005b0 <_test_assert_time_window.constprop.0>
 80057a6:	b108      	cbz	r0, 80057ac <rt_test_009_007_execute.lto_priv.0+0x5c>
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
  test_end_step(4);
}
 80057a8:	b00b      	add	sp, #44	; 0x2c
 80057aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80057ac:	f7fa fef0 	bl	8000590 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 80057b0:	fab0 f080 	clz	r0, r0
 80057b4:	491a      	ldr	r1, [pc, #104]	; (8005820 <rt_test_009_007_execute.lto_priv.0+0xd0>)
 80057b6:	0940      	lsrs	r0, r0, #5
 80057b8:	f7fb f942 	bl	8000a40 <_test_assert>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d1f3      	bne.n	80057a8 <rt_test_009_007_execute.lto_priv.0+0x58>
    test_wait_threads();
 80057c0:	f7fd f9ae 	bl	8002b20 <test_wait_threads>
  test_set_step(4);
 80057c4:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el1);
 80057c6:	4630      	mov	r0, r6
 80057c8:	a905      	add	r1, sp, #20
  test_set_step(4);
 80057ca:	602b      	str	r3, [r5, #0]
    chEvtUnregister(&es1, &el1);
 80057cc:	f004 faf0 	bl	8009db0 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 80057d0:	4669      	mov	r1, sp
 80057d2:	4638      	mov	r0, r7
 80057d4:	f004 faec 	bl	8009db0 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 80057d8:	6830      	ldr	r0, [r6, #0]
 80057da:	4912      	ldr	r1, [pc, #72]	; (8005824 <rt_test_009_007_execute.lto_priv.0+0xd4>)
 80057dc:	1b80      	subs	r0, r0, r6
 80057de:	fab0 f080 	clz	r0, r0
 80057e2:	0940      	lsrs	r0, r0, #5
 80057e4:	f7fb f92c 	bl	8000a40 <_test_assert>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d1dd      	bne.n	80057a8 <rt_test_009_007_execute.lto_priv.0+0x58>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 80057ec:	6838      	ldr	r0, [r7, #0]
 80057ee:	490d      	ldr	r1, [pc, #52]	; (8005824 <rt_test_009_007_execute.lto_priv.0+0xd4>)
 80057f0:	1bc0      	subs	r0, r0, r7
 80057f2:	fab0 f080 	clz	r0, r0
 80057f6:	0940      	lsrs	r0, r0, #5
 80057f8:	f7fb f922 	bl	8000a40 <_test_assert>
 80057fc:	e7d4      	b.n	80057a8 <rt_test_009_007_execute.lto_priv.0+0x58>
 80057fe:	bf00      	nop
 8005800:	20000808 	.word	0x20000808
 8005804:	2000080c 	.word	0x2000080c
 8005808:	20001cf4 	.word	0x20001cf4
 800580c:	20000c88 	.word	0x20000c88
 8005810:	0800d2a8 	.word	0x0800d2a8
 8005814:	08002921 	.word	0x08002921
 8005818:	200015e0 	.word	0x200015e0
 800581c:	20001d0c 	.word	0x20001d0c
 8005820:	0800d628 	.word	0x0800d628
 8005824:	0800d634 	.word	0x0800d634
	...

08005830 <rt_test_009_001_execute.lto_priv.0>:
static void rt_test_009_001_execute(void) {
 8005830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(2);
 8005834:	2502      	movs	r5, #2
  esp->next = (event_listener_t *)esp;
 8005836:	4c29      	ldr	r4, [pc, #164]	; (80058dc <rt_test_009_001_execute.lto_priv.0+0xac>)
static void rt_test_009_001_execute(void) {
 8005838:	b08a      	sub	sp, #40	; 0x28
  test_set_step(2);
 800583a:	4f29      	ldr	r7, [pc, #164]	; (80058e0 <rt_test_009_001_execute.lto_priv.0+0xb0>)
  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 800583c:	4620      	mov	r0, r4
 800583e:	a905      	add	r1, sp, #20
 8005840:	2201      	movs	r2, #1
 8005842:	603d      	str	r5, [r7, #0]
  esp->next = (event_listener_t *)esp;
 8005844:	6024      	str	r4, [r4, #0]
  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8005846:	f7fa fe8b 	bl	8000560 <chEvtRegisterMaskWithFlags.constprop.0>
 800584a:	462a      	mov	r2, r5
 800584c:	4669      	mov	r1, sp
 800584e:	f7fa fe87 	bl	8000560 <chEvtRegisterMaskWithFlags.constprop.0>
 8005852:	2620      	movs	r6, #32
 8005854:	f386 8811 	msr	BASEPRI, r6
  return (bool)(esp != (event_source_t *)esp->next);
 8005858:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 800585a:	4922      	ldr	r1, [pc, #136]	; (80058e4 <rt_test_009_001_execute.lto_priv.0+0xb4>)
 800585c:	1b00      	subs	r0, r0, r4
 800585e:	bf18      	it	ne
 8005860:	2001      	movne	r0, #1
 8005862:	f7fb f8ed 	bl	8000a40 <_test_assert>
 8005866:	b128      	cbz	r0, 8005874 <rt_test_009_001_execute.lto_priv.0+0x44>
 8005868:	2300      	movs	r3, #0
 800586a:	f383 8811 	msr	BASEPRI, r3
}
 800586e:	b00a      	add	sp, #40	; 0x28
 8005870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005874:	4605      	mov	r5, r0
 8005876:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 800587a:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
 800587c:	4620      	mov	r0, r4
 800587e:	a905      	add	r1, sp, #20
  test_set_step(3);
 8005880:	603b      	str	r3, [r7, #0]
    chEvtUnregister(&es1, &el1);
 8005882:	f004 fa95 	bl	8009db0 <chEvtUnregister>
 8005886:	f386 8811 	msr	BASEPRI, r6
 800588a:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 800588c:	4915      	ldr	r1, [pc, #84]	; (80058e4 <rt_test_009_001_execute.lto_priv.0+0xb4>)
 800588e:	1b00      	subs	r0, r0, r4
 8005890:	bf18      	it	ne
 8005892:	2001      	movne	r0, #1
 8005894:	f7fb f8d4 	bl	8000a40 <_test_assert>
 8005898:	4680      	mov	r8, r0
 800589a:	b120      	cbz	r0, 80058a6 <rt_test_009_001_execute.lto_priv.0+0x76>
 800589c:	f385 8811 	msr	BASEPRI, r5
}
 80058a0:	b00a      	add	sp, #40	; 0x28
 80058a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a6:	f380 8811 	msr	BASEPRI, r0
  test_set_step(4);
 80058aa:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
 80058ac:	4669      	mov	r1, sp
 80058ae:	4620      	mov	r0, r4
  test_set_step(4);
 80058b0:	603b      	str	r3, [r7, #0]
    chEvtUnregister(&es1, &el2);
 80058b2:	f004 fa7d 	bl	8009db0 <chEvtUnregister>
 80058b6:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 80058ba:	6820      	ldr	r0, [r4, #0]
 80058bc:	490a      	ldr	r1, [pc, #40]	; (80058e8 <rt_test_009_001_execute.lto_priv.0+0xb8>)
 80058be:	1b00      	subs	r0, r0, r4
 80058c0:	fab0 f080 	clz	r0, r0
 80058c4:	0940      	lsrs	r0, r0, #5
 80058c6:	f7fb f8bb 	bl	8000a40 <_test_assert>
 80058ca:	b920      	cbnz	r0, 80058d6 <rt_test_009_001_execute.lto_priv.0+0xa6>
 80058cc:	f380 8811 	msr	BASEPRI, r0
}
 80058d0:	b00a      	add	sp, #40	; 0x28
 80058d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d6:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 80058da:	e7c8      	b.n	800586e <rt_test_009_001_execute.lto_priv.0+0x3e>
 80058dc:	20000808 	.word	0x20000808
 80058e0:	20001cf4 	.word	0x20001cf4
 80058e4:	0800d644 	.word	0x0800d644
 80058e8:	0800d634 	.word	0x0800d634
 80058ec:	00000000 	.word	0x00000000

080058f0 <rt_test_009_005_execute.lto_priv.0>:
static void rt_test_009_005_execute(void) {
 80058f0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 80058f2:	2301      	movs	r3, #1
 80058f4:	4c2b      	ldr	r4, [pc, #172]	; (80059a4 <rt_test_009_005_execute.lto_priv.0+0xb4>)
    chEvtAddEvents(5);
 80058f6:	2005      	movs	r0, #5
  test_set_step(1);
 80058f8:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(5);
 80058fa:	f004 fa49 	bl	8009d90 <chEvtAddEvents>
  test_set_step(2);
 80058fe:	2302      	movs	r3, #2
 8005900:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 8005902:	f7fb fd05 	bl	8001310 <chEvtWaitAll.constprop.0>
    test_assert(m == 5, "unexpected pending bit");
 8005906:	f1a0 0005 	sub.w	r0, r0, #5
 800590a:	fab0 f080 	clz	r0, r0
 800590e:	4926      	ldr	r1, [pc, #152]	; (80059a8 <rt_test_009_005_execute.lto_priv.0+0xb8>)
 8005910:	0940      	lsrs	r0, r0, #5
 8005912:	f7fb f895 	bl	8000a40 <_test_assert>
 8005916:	b100      	cbz	r0, 800591a <rt_test_009_005_execute.lto_priv.0+0x2a>
}
 8005918:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800591a:	f7fa fe39 	bl	8000590 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 800591e:	fab0 f080 	clz	r0, r0
 8005922:	4922      	ldr	r1, [pc, #136]	; (80059ac <rt_test_009_005_execute.lto_priv.0+0xbc>)
 8005924:	0940      	lsrs	r0, r0, #5
 8005926:	f7fb f88b 	bl	8000a40 <_test_assert>
 800592a:	2800      	cmp	r0, #0
 800592c:	d1f4      	bne.n	8005918 <rt_test_009_005_execute.lto_priv.0+0x28>
  test_set_step(3);
 800592e:	2303      	movs	r3, #3
    chEvtAddEvents(4);
 8005930:	2004      	movs	r0, #4
  test_set_step(3);
 8005932:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(4);
 8005934:	f004 fa2c 	bl	8009d90 <chEvtAddEvents>
  test_set_step(4);
 8005938:	2304      	movs	r3, #4
 800593a:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800593c:	f7fc ff98 	bl	8002870 <test_wait_tick>
  return ch.rlist.current;
 8005940:	4b1b      	ldr	r3, [pc, #108]	; (80059b0 <rt_test_009_005_execute.lto_priv.0+0xc0>)
 8005942:	4605      	mov	r5, r0
 8005944:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005946:	4a1b      	ldr	r2, [pc, #108]	; (80059b4 <rt_test_009_005_execute.lto_priv.0+0xc4>)
 8005948:	6899      	ldr	r1, [r3, #8]
 800594a:	481b      	ldr	r0, [pc, #108]	; (80059b8 <rt_test_009_005_execute.lto_priv.0+0xc8>)
 800594c:	3901      	subs	r1, #1
 800594e:	f7fb fb5f 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(5);
 8005952:	2205      	movs	r2, #5
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <rt_test_009_005_execute.lto_priv.0+0xcc>)
  test_set_step(5);
 8005956:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005958:	6018      	str	r0, [r3, #0]
    m = chEvtWaitAll(5);
 800595a:	f7fb fcd9 	bl	8001310 <chEvtWaitAll.constprop.0>
 800595e:	f105 0168 	add.w	r1, r5, #104	; 0x68
 8005962:	4604      	mov	r4, r0
 8005964:	f105 0064 	add.w	r0, r5, #100	; 0x64
    test_assert_time_window(target_time,
 8005968:	b289      	uxth	r1, r1
 800596a:	b280      	uxth	r0, r0
 800596c:	f7fa fe20 	bl	80005b0 <_test_assert_time_window.constprop.0>
 8005970:	2800      	cmp	r0, #0
 8005972:	d1d1      	bne.n	8005918 <rt_test_009_005_execute.lto_priv.0+0x28>
    test_assert(m == 5, "event flags error");
 8005974:	f1a4 0005 	sub.w	r0, r4, #5
 8005978:	fab0 f080 	clz	r0, r0
 800597c:	4910      	ldr	r1, [pc, #64]	; (80059c0 <rt_test_009_005_execute.lto_priv.0+0xd0>)
 800597e:	0940      	lsrs	r0, r0, #5
 8005980:	f7fb f85e 	bl	8000a40 <_test_assert>
 8005984:	2800      	cmp	r0, #0
 8005986:	d1c7      	bne.n	8005918 <rt_test_009_005_execute.lto_priv.0+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005988:	f7fa fe02 	bl	8000590 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 800598c:	fab0 f080 	clz	r0, r0
 8005990:	4906      	ldr	r1, [pc, #24]	; (80059ac <rt_test_009_005_execute.lto_priv.0+0xbc>)
 8005992:	0940      	lsrs	r0, r0, #5
 8005994:	f7fb f854 	bl	8000a40 <_test_assert>
 8005998:	2800      	cmp	r0, #0
 800599a:	d1bd      	bne.n	8005918 <rt_test_009_005_execute.lto_priv.0+0x28>
}
 800599c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 80059a0:	f7fd b8be 	b.w	8002b20 <test_wait_threads>
 80059a4:	20001cf4 	.word	0x20001cf4
 80059a8:	0800d650 	.word	0x0800d650
 80059ac:	0800d628 	.word	0x0800d628
 80059b0:	20000c88 	.word	0x20000c88
 80059b4:	08005ba1 	.word	0x08005ba1
 80059b8:	200015e0 	.word	0x200015e0
 80059bc:	20001d0c 	.word	0x20001d0c
 80059c0:	0800d668 	.word	0x0800d668
	...

080059d0 <rt_test_009_004_execute.lto_priv.0>:
static void rt_test_009_004_execute(void) {
 80059d0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 80059d2:	2301      	movs	r3, #1
 80059d4:	4c29      	ldr	r4, [pc, #164]	; (8005a7c <rt_test_009_004_execute.lto_priv.0+0xac>)
    chEvtAddEvents(5);
 80059d6:	2005      	movs	r0, #5
  test_set_step(1);
 80059d8:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(5);
 80059da:	f004 f9d9 	bl	8009d90 <chEvtAddEvents>
  test_set_step(2);
 80059de:	2302      	movs	r3, #2
 80059e0:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 80059e2:	f7fb fc75 	bl	80012d0 <chEvtWaitAny.constprop.0>
    test_assert(m == 5, "unexpected pending bit");
 80059e6:	f1a0 0005 	sub.w	r0, r0, #5
 80059ea:	fab0 f080 	clz	r0, r0
 80059ee:	4924      	ldr	r1, [pc, #144]	; (8005a80 <rt_test_009_004_execute.lto_priv.0+0xb0>)
 80059f0:	0940      	lsrs	r0, r0, #5
 80059f2:	f7fb f825 	bl	8000a40 <_test_assert>
 80059f6:	b100      	cbz	r0, 80059fa <rt_test_009_004_execute.lto_priv.0+0x2a>
}
 80059f8:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80059fa:	f7fa fdc9 	bl	8000590 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 80059fe:	fab0 f080 	clz	r0, r0
 8005a02:	4920      	ldr	r1, [pc, #128]	; (8005a84 <rt_test_009_004_execute.lto_priv.0+0xb4>)
 8005a04:	0940      	lsrs	r0, r0, #5
 8005a06:	f7fb f81b 	bl	8000a40 <_test_assert>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d1f4      	bne.n	80059f8 <rt_test_009_004_execute.lto_priv.0+0x28>
  test_set_step(3);
 8005a0e:	2303      	movs	r3, #3
 8005a10:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005a12:	f7fc ff2d 	bl	8002870 <test_wait_tick>
 8005a16:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <rt_test_009_004_execute.lto_priv.0+0xb8>)
 8005a18:	4605      	mov	r5, r0
 8005a1a:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005a1c:	4a1b      	ldr	r2, [pc, #108]	; (8005a8c <rt_test_009_004_execute.lto_priv.0+0xbc>)
 8005a1e:	6899      	ldr	r1, [r3, #8]
 8005a20:	481b      	ldr	r0, [pc, #108]	; (8005a90 <rt_test_009_004_execute.lto_priv.0+0xc0>)
 8005a22:	3901      	subs	r1, #1
 8005a24:	f7fb faf4 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(4);
 8005a28:	2204      	movs	r2, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005a2a:	4b1a      	ldr	r3, [pc, #104]	; (8005a94 <rt_test_009_004_execute.lto_priv.0+0xc4>)
  test_set_step(4);
 8005a2c:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005a2e:	6018      	str	r0, [r3, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8005a30:	f7fb fc4e 	bl	80012d0 <chEvtWaitAny.constprop.0>
 8005a34:	f105 0168 	add.w	r1, r5, #104	; 0x68
 8005a38:	4604      	mov	r4, r0
 8005a3a:	f105 0064 	add.w	r0, r5, #100	; 0x64
    test_assert_time_window(target_time,
 8005a3e:	b289      	uxth	r1, r1
 8005a40:	b280      	uxth	r0, r0
 8005a42:	f7fa fdb5 	bl	80005b0 <_test_assert_time_window.constprop.0>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d1d6      	bne.n	80059f8 <rt_test_009_004_execute.lto_priv.0+0x28>
    test_assert(m == 1, "event flag error");
 8005a4a:	f1a4 0001 	sub.w	r0, r4, #1
 8005a4e:	fab0 f080 	clz	r0, r0
 8005a52:	4911      	ldr	r1, [pc, #68]	; (8005a98 <rt_test_009_004_execute.lto_priv.0+0xc8>)
 8005a54:	0940      	lsrs	r0, r0, #5
 8005a56:	f7fa fff3 	bl	8000a40 <_test_assert>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d1cc      	bne.n	80059f8 <rt_test_009_004_execute.lto_priv.0+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005a5e:	f7fa fd97 	bl	8000590 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8005a62:	fab0 f080 	clz	r0, r0
 8005a66:	4907      	ldr	r1, [pc, #28]	; (8005a84 <rt_test_009_004_execute.lto_priv.0+0xb4>)
 8005a68:	0940      	lsrs	r0, r0, #5
 8005a6a:	f7fa ffe9 	bl	8000a40 <_test_assert>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d1c2      	bne.n	80059f8 <rt_test_009_004_execute.lto_priv.0+0x28>
}
 8005a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8005a76:	f7fd b853 	b.w	8002b20 <test_wait_threads>
 8005a7a:	bf00      	nop
 8005a7c:	20001cf4 	.word	0x20001cf4
 8005a80:	0800d650 	.word	0x0800d650
 8005a84:	0800d628 	.word	0x0800d628
 8005a88:	20000c88 	.word	0x20000c88
 8005a8c:	08005ba1 	.word	0x08005ba1
 8005a90:	200015e0 	.word	0x200015e0
 8005a94:	20001d0c 	.word	0x20001d0c
 8005a98:	0800d67c 	.word	0x0800d67c
 8005a9c:	00000000 	.word	0x00000000

08005aa0 <rt_test_009_003_execute.lto_priv.0>:
static void rt_test_009_003_execute(void) {
 8005aa0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	4c35      	ldr	r4, [pc, #212]	; (8005b7c <rt_test_009_003_execute.lto_priv.0+0xdc>)
    chEvtAddEvents(7);
 8005aa6:	2007      	movs	r0, #7
  test_set_step(1);
 8005aa8:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(7);
 8005aaa:	f004 f971 	bl	8009d90 <chEvtAddEvents>
  test_set_step(2);
 8005aae:	2302      	movs	r3, #2
 8005ab0:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8005ab2:	f7fb fbed 	bl	8001290 <chEvtWaitOne.constprop.0>
    test_assert(m == 1, "single event error");
 8005ab6:	f1a0 0001 	sub.w	r0, r0, #1
 8005aba:	fab0 f080 	clz	r0, r0
 8005abe:	4930      	ldr	r1, [pc, #192]	; (8005b80 <rt_test_009_003_execute.lto_priv.0+0xe0>)
 8005ac0:	0940      	lsrs	r0, r0, #5
 8005ac2:	f7fa ffbd 	bl	8000a40 <_test_assert>
 8005ac6:	b100      	cbz	r0, 8005aca <rt_test_009_003_execute.lto_priv.0+0x2a>
}
 8005ac8:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 8005aca:	f7fb fbe1 	bl	8001290 <chEvtWaitOne.constprop.0>
    test_assert(m == 2, "single event error");
 8005ace:	f1a0 0002 	sub.w	r0, r0, #2
 8005ad2:	fab0 f080 	clz	r0, r0
 8005ad6:	492a      	ldr	r1, [pc, #168]	; (8005b80 <rt_test_009_003_execute.lto_priv.0+0xe0>)
 8005ad8:	0940      	lsrs	r0, r0, #5
 8005ada:	f7fa ffb1 	bl	8000a40 <_test_assert>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d1f2      	bne.n	8005ac8 <rt_test_009_003_execute.lto_priv.0+0x28>
    m = chEvtWaitOne(ALL_EVENTS);
 8005ae2:	f7fb fbd5 	bl	8001290 <chEvtWaitOne.constprop.0>
    test_assert(m == 4, "single event error");
 8005ae6:	f1a0 0004 	sub.w	r0, r0, #4
 8005aea:	fab0 f080 	clz	r0, r0
 8005aee:	4924      	ldr	r1, [pc, #144]	; (8005b80 <rt_test_009_003_execute.lto_priv.0+0xe0>)
 8005af0:	0940      	lsrs	r0, r0, #5
 8005af2:	f7fa ffa5 	bl	8000a40 <_test_assert>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d1e6      	bne.n	8005ac8 <rt_test_009_003_execute.lto_priv.0+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005afa:	f7fa fd49 	bl	8000590 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8005afe:	fab0 f080 	clz	r0, r0
 8005b02:	4920      	ldr	r1, [pc, #128]	; (8005b84 <rt_test_009_003_execute.lto_priv.0+0xe4>)
 8005b04:	0940      	lsrs	r0, r0, #5
 8005b06:	f7fa ff9b 	bl	8000a40 <_test_assert>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	d1dc      	bne.n	8005ac8 <rt_test_009_003_execute.lto_priv.0+0x28>
  test_set_step(3);
 8005b0e:	2303      	movs	r3, #3
 8005b10:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005b12:	f7fc fead 	bl	8002870 <test_wait_tick>
 8005b16:	4b1c      	ldr	r3, [pc, #112]	; (8005b88 <rt_test_009_003_execute.lto_priv.0+0xe8>)
 8005b18:	4605      	mov	r5, r0
 8005b1a:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005b1c:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <rt_test_009_003_execute.lto_priv.0+0xec>)
 8005b1e:	6899      	ldr	r1, [r3, #8]
 8005b20:	481b      	ldr	r0, [pc, #108]	; (8005b90 <rt_test_009_003_execute.lto_priv.0+0xf0>)
 8005b22:	3901      	subs	r1, #1
 8005b24:	f7fb fa74 	bl	8001010 <chThdCreateStatic.constprop.0>
  test_set_step(4);
 8005b28:	2204      	movs	r2, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005b2a:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <rt_test_009_003_execute.lto_priv.0+0xf4>)
  test_set_step(4);
 8005b2c:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005b2e:	6018      	str	r0, [r3, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8005b30:	f7fb fbae 	bl	8001290 <chEvtWaitOne.constprop.0>
 8005b34:	f105 0168 	add.w	r1, r5, #104	; 0x68
 8005b38:	4604      	mov	r4, r0
 8005b3a:	f105 0064 	add.w	r0, r5, #100	; 0x64
    test_assert_time_window(target_time,
 8005b3e:	b289      	uxth	r1, r1
 8005b40:	b280      	uxth	r0, r0
 8005b42:	f7fa fd35 	bl	80005b0 <_test_assert_time_window.constprop.0>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d1be      	bne.n	8005ac8 <rt_test_009_003_execute.lto_priv.0+0x28>
    test_assert(m == 1, "event flag error");
 8005b4a:	f1a4 0001 	sub.w	r0, r4, #1
 8005b4e:	fab0 f080 	clz	r0, r0
 8005b52:	4911      	ldr	r1, [pc, #68]	; (8005b98 <rt_test_009_003_execute.lto_priv.0+0xf8>)
 8005b54:	0940      	lsrs	r0, r0, #5
 8005b56:	f7fa ff73 	bl	8000a40 <_test_assert>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d1b4      	bne.n	8005ac8 <rt_test_009_003_execute.lto_priv.0+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005b5e:	f7fa fd17 	bl	8000590 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8005b62:	fab0 f080 	clz	r0, r0
 8005b66:	4907      	ldr	r1, [pc, #28]	; (8005b84 <rt_test_009_003_execute.lto_priv.0+0xe4>)
 8005b68:	0940      	lsrs	r0, r0, #5
 8005b6a:	f7fa ff69 	bl	8000a40 <_test_assert>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d1aa      	bne.n	8005ac8 <rt_test_009_003_execute.lto_priv.0+0x28>
}
 8005b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8005b76:	f7fc bfd3 	b.w	8002b20 <test_wait_threads>
 8005b7a:	bf00      	nop
 8005b7c:	20001cf4 	.word	0x20001cf4
 8005b80:	0800d690 	.word	0x0800d690
 8005b84:	0800d628 	.word	0x0800d628
 8005b88:	20000c88 	.word	0x20000c88
 8005b8c:	08005ba1 	.word	0x08005ba1
 8005b90:	200015e0 	.word	0x200015e0
 8005b94:	20001d0c 	.word	0x20001d0c
 8005b98:	0800d67c 	.word	0x0800d67c
 8005b9c:	00000000 	.word	0x00000000

08005ba0 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 8005ba4:	2064      	movs	r0, #100	; 0x64
 8005ba6:	f005 fccb 	bl	800b540 <chThdSleep>
 8005baa:	2320      	movs	r3, #32
 8005bac:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f004 fb3c 	bl	800a230 <chEvtSignalI>
  chSchRescheduleS();
 8005bb8:	f004 f9d2 	bl	8009f60 <chSchRescheduleS>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f383 8811 	msr	BASEPRI, r3
}
 8005bc2:	bd10      	pop	{r4, pc}
	...

08005bd0 <thread4B>:
  chThdSleepMilliseconds(150);
 8005bd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
static THD_FUNCTION(thread4B, p) {
 8005bd4:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 8005bd6:	f005 fcb3 	bl	800b540 <chThdSleep>
 8005bda:	2320      	movs	r3, #32
 8005bdc:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8005be0:	4c06      	ldr	r4, [pc, #24]	; (8005bfc <thread4B+0x2c>)
 8005be2:	4620      	mov	r0, r4
 8005be4:	f004 fbac 	bl	800a340 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8005be8:	4620      	mov	r0, r4
 8005bea:	f004 fb51 	bl	800a290 <chMtxUnlockS>
  chSchRescheduleS();
 8005bee:	f004 f9b7 	bl	8009f60 <chSchRescheduleS>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f383 8811 	msr	BASEPRI, r3
}
 8005bf8:	bd10      	pop	{r4, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000864 	.word	0x20000864

08005c00 <thread8>:
static THD_FUNCTION(thread8, p) {
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	4604      	mov	r4, r0
  chMtxLock(&m2);
 8005c04:	481c      	ldr	r0, [pc, #112]	; (8005c78 <thread8+0x78>)
 8005c06:	f004 fbfb 	bl	800a400 <chMtxLock>
  chMtxLock(&m1);
 8005c0a:	481c      	ldr	r0, [pc, #112]	; (8005c7c <thread8+0x7c>)
 8005c0c:	f004 fbf8 	bl	800a400 <chMtxLock>
 8005c10:	2320      	movs	r3, #32
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	4d1a      	ldr	r5, [pc, #104]	; (8005c80 <thread8+0x80>)
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8005c18:	69ab      	ldr	r3, [r5, #24]
 8005c1a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(mp != NULL, "not owning a mutex");

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f004 fb37 	bl	800a290 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8005c22:	4918      	ldr	r1, [pc, #96]	; (8005c84 <thread8+0x84>)
 8005c24:	69aa      	ldr	r2, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 8005c26:	4608      	mov	r0, r1
 8005c28:	460b      	mov	r3, r1
 8005c2a:	6251      	str	r1, [r2, #36]	; 0x24
 8005c2c:	e003      	b.n	8005c36 <thread8+0x36>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005c2e:	689f      	ldr	r7, [r3, #8]
 8005c30:	6891      	ldr	r1, [r2, #8]
 8005c32:	428f      	cmp	r7, r1
 8005c34:	d302      	bcc.n	8005c3c <thread8+0x3c>
    cp = cp->queue.next;
 8005c36:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005c38:	4283      	cmp	r3, r0
 8005c3a:	d1f8      	bne.n	8005c2e <thread8+0x2e>
  tp->queue.prev             = cp->queue.prev;
 8005c3c:	6859      	ldr	r1, [r3, #4]
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8005c3e:	2007      	movs	r0, #7
 8005c40:	e9c2 3100 	strd	r3, r1, [r2]
  tp->queue.prev->queue.next = tp;
 8005c44:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 8005c46:	605a      	str	r2, [r3, #4]
 8005c48:	f004 fa3a 	bl	800a0c0 <chSchGoSleepS>
  }

  return currp->u.rdymsg;
 8005c4c:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	3301      	adds	r3, #1
 8005c52:	d002      	beq.n	8005c5a <thread8+0x5a>
    chMtxLockS(mp);
 8005c54:	4630      	mov	r0, r6
 8005c56:	f004 fb73 	bl	800a340 <chMtxLockS>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8005c60:	7820      	ldrb	r0, [r4, #0]
 8005c62:	f7fa ff95 	bl	8000b90 <test_emit_token>
  chMtxUnlock(&m1);
 8005c66:	4805      	ldr	r0, [pc, #20]	; (8005c7c <thread8+0x7c>)
 8005c68:	f004 fb3a 	bl	800a2e0 <chMtxUnlock>
}
 8005c6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 8005c70:	4801      	ldr	r0, [pc, #4]	; (8005c78 <thread8+0x78>)
 8005c72:	f004 bb35 	b.w	800a2e0 <chMtxUnlock>
 8005c76:	bf00      	nop
 8005c78:	20000864 	.word	0x20000864
 8005c7c:	20000854 	.word	0x20000854
 8005c80:	20000c88 	.word	0x20000c88
 8005c84:	20000800 	.word	0x20000800
	...

08005c90 <thread6>:
static THD_FUNCTION(thread6, p) {
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	4605      	mov	r5, r0
  chMtxLock(&m1);
 8005c94:	4816      	ldr	r0, [pc, #88]	; (8005cf0 <thread6+0x60>)
 8005c96:	f004 fbb3 	bl	800a400 <chMtxLock>
 8005c9a:	2320      	movs	r3, #32
 8005c9c:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
 8005ca0:	4b14      	ldr	r3, [pc, #80]	; (8005cf4 <thread6+0x64>)
 8005ca2:	699c      	ldr	r4, [r3, #24]
 8005ca4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  chMtxUnlockS(mp);
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f004 faf2 	bl	800a290 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 8005cac:	4a12      	ldr	r2, [pc, #72]	; (8005cf8 <thread6+0x68>)
  thread_t *cp = (thread_t *)tqp;
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	6262      	str	r2, [r4, #36]	; 0x24
 8005cb4:	e003      	b.n	8005cbe <thread6+0x2e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005cb6:	6898      	ldr	r0, [r3, #8]
 8005cb8:	68a2      	ldr	r2, [r4, #8]
 8005cba:	4290      	cmp	r0, r2
 8005cbc:	d302      	bcc.n	8005cc4 <thread6+0x34>
    cp = cp->queue.next;
 8005cbe:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005cc0:	428b      	cmp	r3, r1
 8005cc2:	d1f8      	bne.n	8005cb6 <thread6+0x26>
  tp->queue.prev             = cp->queue.prev;
 8005cc4:	685a      	ldr	r2, [r3, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 8005cc6:	2007      	movs	r0, #7
 8005cc8:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8005ccc:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005cce:	605c      	str	r4, [r3, #4]
 8005cd0:	f004 f9f6 	bl	800a0c0 <chSchGoSleepS>
  chMtxLockS(mp);
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	f004 fb33 	bl	800a340 <chMtxLockS>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8005ce0:	7828      	ldrb	r0, [r5, #0]
 8005ce2:	f7fa ff55 	bl	8000b90 <test_emit_token>
}
 8005ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chMtxUnlock(&m1);
 8005cea:	4801      	ldr	r0, [pc, #4]	; (8005cf0 <thread6+0x60>)
 8005cec:	f004 baf8 	b.w	800a2e0 <chMtxUnlock>
 8005cf0:	20000854 	.word	0x20000854
 8005cf4:	20000c88 	.word	0x20000c88
 8005cf8:	20000800 	.word	0x20000800
 8005cfc:	00000000 	.word	0x00000000

08005d00 <rt_test_004_004_execute.lto_priv.0>:
  }
  test_end_step(1);

  /* [4.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8005d00:	2202      	movs	r2, #2
static void rt_test_004_004_execute(void) {
 8005d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d06:	4d2f      	ldr	r5, [pc, #188]	; (8005dc4 <rt_test_004_004_execute.lto_priv.0+0xc4>)
  test_set_step(2);
 8005d08:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8005dd8 <rt_test_004_004_execute.lto_priv.0+0xd8>
 8005d0c:	69ab      	ldr	r3, [r5, #24]
 8005d0e:	f8c8 2000 	str.w	r2, [r8]
  return chThdGetSelfX()->prio;
 8005d12:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
 8005d14:	18a6      	adds	r6, r4, r2
  {
    p1 = chThdSetPriority(prio + 1);
 8005d16:	1c67      	adds	r7, r4, #1
 8005d18:	4638      	mov	r0, r7
    chThdGetSelfX()->prio += 2;
 8005d1a:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8005d1c:	f004 f930 	bl	8009f80 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8005d20:	1b00      	subs	r0, r0, r4
 8005d22:	fab0 f080 	clz	r0, r0
 8005d26:	4928      	ldr	r1, [pc, #160]	; (8005dc8 <rt_test_004_004_execute.lto_priv.0+0xc8>)
 8005d28:	0940      	lsrs	r0, r0, #5
 8005d2a:	f7fa fe89 	bl	8000a40 <_test_assert>
 8005d2e:	b108      	cbz	r0, 8005d34 <rt_test_004_004_execute.lto_priv.0+0x34>
    chThdGetSelfX()->prio = prio;
    chThdGetSelfX()->realprio = prio;
    chSysUnlock();
  }
  test_end_step(4);
}
 8005d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8005d34:	69ab      	ldr	r3, [r5, #24]
 8005d36:	4925      	ldr	r1, [pc, #148]	; (8005dcc <rt_test_004_004_execute.lto_priv.0+0xcc>)
 8005d38:	6898      	ldr	r0, [r3, #8]
 8005d3a:	1b80      	subs	r0, r0, r6
 8005d3c:	fab0 f080 	clz	r0, r0
 8005d40:	0940      	lsrs	r0, r0, #5
 8005d42:	f7fa fe7d 	bl	8000a40 <_test_assert>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d1f2      	bne.n	8005d30 <rt_test_004_004_execute.lto_priv.0+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 8005d4a:	69ab      	ldr	r3, [r5, #24]
 8005d4c:	4920      	ldr	r1, [pc, #128]	; (8005dd0 <rt_test_004_004_execute.lto_priv.0+0xd0>)
 8005d4e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005d50:	1bc0      	subs	r0, r0, r7
 8005d52:	fab0 f080 	clz	r0, r0
 8005d56:	0940      	lsrs	r0, r0, #5
 8005d58:	f7fa fe72 	bl	8000a40 <_test_assert>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d1e7      	bne.n	8005d30 <rt_test_004_004_execute.lto_priv.0+0x30>
  test_set_step(3);
 8005d60:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
 8005d62:	18e6      	adds	r6, r4, r3
 8005d64:	4630      	mov	r0, r6
  test_set_step(3);
 8005d66:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
 8005d6a:	f004 f909 	bl	8009f80 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8005d6e:	1a38      	subs	r0, r7, r0
 8005d70:	fab0 f080 	clz	r0, r0
 8005d74:	4914      	ldr	r1, [pc, #80]	; (8005dc8 <rt_test_004_004_execute.lto_priv.0+0xc8>)
 8005d76:	0940      	lsrs	r0, r0, #5
 8005d78:	f7fa fe62 	bl	8000a40 <_test_assert>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d1d7      	bne.n	8005d30 <rt_test_004_004_execute.lto_priv.0+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 8005d80:	69ab      	ldr	r3, [r5, #24]
 8005d82:	4912      	ldr	r1, [pc, #72]	; (8005dcc <rt_test_004_004_execute.lto_priv.0+0xcc>)
 8005d84:	6898      	ldr	r0, [r3, #8]
 8005d86:	1b80      	subs	r0, r0, r6
 8005d88:	fab0 f080 	clz	r0, r0
 8005d8c:	0940      	lsrs	r0, r0, #5
 8005d8e:	f7fa fe57 	bl	8000a40 <_test_assert>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d1cc      	bne.n	8005d30 <rt_test_004_004_execute.lto_priv.0+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8005d96:	69ab      	ldr	r3, [r5, #24]
 8005d98:	490e      	ldr	r1, [pc, #56]	; (8005dd4 <rt_test_004_004_execute.lto_priv.0+0xd4>)
 8005d9a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005d9c:	1b80      	subs	r0, r0, r6
 8005d9e:	fab0 f080 	clz	r0, r0
 8005da2:	0940      	lsrs	r0, r0, #5
 8005da4:	f7fa fe4c 	bl	8000a40 <_test_assert>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d1c1      	bne.n	8005d30 <rt_test_004_004_execute.lto_priv.0+0x30>
  test_set_step(4);
 8005dac:	2304      	movs	r3, #4
 8005dae:	f8c8 3000 	str.w	r3, [r8]
 8005db2:	2320      	movs	r3, #32
 8005db4:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8005db8:	69ab      	ldr	r3, [r5, #24]
    chThdGetSelfX()->prio = prio;
 8005dba:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 8005dbc:	63dc      	str	r4, [r3, #60]	; 0x3c
 8005dbe:	f380 8811 	msr	BASEPRI, r0
  test_end_step(4);
 8005dc2:	e7b5      	b.n	8005d30 <rt_test_004_004_execute.lto_priv.0+0x30>
 8005dc4:	20000c88 	.word	0x20000c88
 8005dc8:	0800d6a4 	.word	0x0800d6a4
 8005dcc:	0800d6c8 	.word	0x0800d6c8
 8005dd0:	0800d6e4 	.word	0x0800d6e4
 8005dd4:	0800d70c 	.word	0x0800d70c
 8005dd8:	20001cf4 	.word	0x20001cf4
 8005ddc:	00000000 	.word	0x00000000

08005de0 <rt_test_004_003_execute.lto_priv.0>:
  test_set_step(1);
 8005de0:	2201      	movs	r2, #1
static void rt_test_004_003_execute(void) {
 8005de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de6:	4f1d      	ldr	r7, [pc, #116]	; (8005e5c <rt_test_004_003_execute.lto_priv.0+0x7c>)
  test_set_step(1);
 8005de8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8005e68 <rt_test_004_003_execute.lto_priv.0+0x88>
  return chThdGetSelfX()->prio;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f8c8 2000 	str.w	r2, [r8]
 8005df2:	689e      	ldr	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8005df4:	18b5      	adds	r5, r6, r2
 8005df6:	4628      	mov	r0, r5
 8005df8:	f004 f8c2 	bl	8009f80 <chThdSetPriority>
 8005dfc:	4604      	mov	r4, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 8005dfe:	1b80      	subs	r0, r0, r6
 8005e00:	fab0 f080 	clz	r0, r0
 8005e04:	4916      	ldr	r1, [pc, #88]	; (8005e60 <rt_test_004_003_execute.lto_priv.0+0x80>)
 8005e06:	0940      	lsrs	r0, r0, #5
 8005e08:	f7fa fe1a 	bl	8000a40 <_test_assert>
 8005e0c:	b108      	cbz	r0, 8005e12 <rt_test_004_003_execute.lto_priv.0+0x32>
}
 8005e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e12:	69bb      	ldr	r3, [r7, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8005e14:	4913      	ldr	r1, [pc, #76]	; (8005e64 <rt_test_004_003_execute.lto_priv.0+0x84>)
 8005e16:	6898      	ldr	r0, [r3, #8]
 8005e18:	1b40      	subs	r0, r0, r5
 8005e1a:	fab0 f080 	clz	r0, r0
 8005e1e:	0940      	lsrs	r0, r0, #5
 8005e20:	f7fa fe0e 	bl	8000a40 <_test_assert>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d1f2      	bne.n	8005e0e <rt_test_004_003_execute.lto_priv.0+0x2e>
  test_set_step(2);
 8005e28:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
 8005e2a:	4620      	mov	r0, r4
  test_set_step(2);
 8005e2c:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(p1);
 8005e30:	f004 f8a6 	bl	8009f80 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8005e34:	1a28      	subs	r0, r5, r0
 8005e36:	fab0 f080 	clz	r0, r0
 8005e3a:	4909      	ldr	r1, [pc, #36]	; (8005e60 <rt_test_004_003_execute.lto_priv.0+0x80>)
 8005e3c:	0940      	lsrs	r0, r0, #5
 8005e3e:	f7fa fdff 	bl	8000a40 <_test_assert>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d1e3      	bne.n	8005e0e <rt_test_004_003_execute.lto_priv.0+0x2e>
 8005e46:	69bb      	ldr	r3, [r7, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8005e48:	4906      	ldr	r1, [pc, #24]	; (8005e64 <rt_test_004_003_execute.lto_priv.0+0x84>)
 8005e4a:	6898      	ldr	r0, [r3, #8]
 8005e4c:	1b80      	subs	r0, r0, r6
 8005e4e:	fab0 f080 	clz	r0, r0
}
 8005e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8005e56:	0940      	lsrs	r0, r0, #5
 8005e58:	f7fa bdf2 	b.w	8000a40 <_test_assert>
 8005e5c:	20000c88 	.word	0x20000c88
 8005e60:	0800d6a4 	.word	0x0800d6a4
 8005e64:	0800d6c8 	.word	0x0800d6c8
 8005e68:	20001cf4 	.word	0x20001cf4
 8005e6c:	00000000 	.word	0x00000000

08005e70 <rt_test_002_002_execute.lto_priv.0>:
  test_set_step(1);
 8005e70:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 8005e72:	b510      	push	{r4, lr}
  test_set_step(1);
 8005e74:	4c30      	ldr	r4, [pc, #192]	; (8005f38 <rt_test_002_002_execute.lto_priv.0+0xc8>)
static void rt_test_002_002_execute(void) {
 8005e76:	b086      	sub	sp, #24
  test_set_step(1);
 8005e78:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e7a:	f3ef 8311 	mrs	r3, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8005e7e:	b91b      	cbnz	r3, 8005e88 <rt_test_002_002_execute.lto_priv.0+0x18>
 8005e80:	f005 fe4e 	bl	800bb20 <chSysGetStatusAndLockX.part.0>
 * @retval true         the word specified an enabled interrupts status.
 */
__STATIC_FORCEINLINE bool port_irq_enabled(syssts_t sts) {

#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 8005e84:	f005 fe3c 	bl	800bb00 <chSysRestoreStatusX.part.0>
  test_set_step(2);
 8005e88:	2202      	movs	r2, #2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005e8a:	2320      	movs	r3, #32
 8005e8c:	6022      	str	r2, [r4, #0]
 8005e8e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e92:	f3ef 8311 	mrs	r3, BASEPRI
 8005e96:	b91b      	cbnz	r3, 8005ea0 <rt_test_002_002_execute.lto_priv.0+0x30>
 8005e98:	f005 fe42 	bl	800bb20 <chSysGetStatusAndLockX.part.0>
 8005e9c:	f005 fe30 	bl	800bb00 <chSysRestoreStatusX.part.0>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005eaa:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8005eae:	b913      	cbnz	r3, 8005eb6 <rt_test_002_002_execute.lto_priv.0+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8005eba:	b913      	cbnz	r3, 8005ec2 <rt_test_002_002_execute.lto_priv.0+0x52>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005ebc:	2320      	movs	r3, #32
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8005ec8:	2104      	movs	r1, #4
 8005eca:	2220      	movs	r2, #32
 8005ecc:	6021      	str	r1, [r4, #0]
 8005ece:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ed2:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8005ed6:	b10a      	cbz	r2, 8005edc <rt_test_002_002_execute.lto_priv.0+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005ed8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005edc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee0:	b113      	cbz	r3, 8005ee8 <rt_test_002_002_execute.lto_priv.0+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 8005ee8:	2205      	movs	r2, #5
  vtp->func = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	6022      	str	r2, [r4, #0]
 8005eee:	9304      	str	r3, [sp, #16]
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8005ef6:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8005ef8:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
 8005efa:	b113      	cbz	r3, 8005f02 <rt_test_002_002_execute.lto_priv.0+0x92>
    chVTDoResetI(vtp);
 8005efc:	4620      	mov	r0, r4
 8005efe:	f004 ff77 	bl	800adf0 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8005f02:	4620      	mov	r0, r4
 8005f04:	2300      	movs	r3, #0
 8005f06:	2101      	movs	r1, #1
 8005f08:	4a0c      	ldr	r2, [pc, #48]	; (8005f3c <rt_test_002_002_execute.lto_priv.0+0xcc>)
 8005f0a:	f004 ffb9 	bl	800ae80 <chVTDoSetI>
 8005f0e:	2400      	movs	r4, #0
 8005f10:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
 8005f14:	200a      	movs	r0, #10
 8005f16:	f005 fb13 	bl	800b540 <chThdSleep>
 8005f1a:	2320      	movs	r3, #32
 8005f1c:	f383 8811 	msr	BASEPRI, r3
  b = chVTIsArmedI(vtp);
 8005f20:	9804      	ldr	r0, [sp, #16]
 8005f22:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8005f26:	fab0 f080 	clz	r0, r0
 8005f2a:	4905      	ldr	r1, [pc, #20]	; (8005f40 <rt_test_002_002_execute.lto_priv.0+0xd0>)
 8005f2c:	0940      	lsrs	r0, r0, #5
 8005f2e:	f7fa fd87 	bl	8000a40 <_test_assert>
}
 8005f32:	b006      	add	sp, #24
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	bf00      	nop
 8005f38:	20001cf4 	.word	0x20001cf4
 8005f3c:	08005f51 	.word	0x08005f51
 8005f40:	0800d72c 	.word	0x0800d72c
	...

08005f50 <vtcb>:
static void vtcb(void *p) {
 8005f50:	b508      	push	{r3, lr}
 8005f52:	2320      	movs	r3, #32
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f382 8811 	msr	BASEPRI, r2
 8005f5e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f62:	f3ef 8311 	mrs	r3, BASEPRI
 8005f66:	b91b      	cbnz	r3, 8005f70 <vtcb+0x20>
 8005f68:	f005 fdda 	bl	800bb20 <chSysGetStatusAndLockX.part.0>
 8005f6c:	f005 fdc8 	bl	800bb00 <chSysRestoreStatusX.part.0>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005f70:	2300      	movs	r3, #0
 8005f72:	f383 8811 	msr	BASEPRI, r3
}
 8005f76:	bd08      	pop	{r3, pc}
	...

08005f80 <rt_test_002_001_execute.lto_priv.0>:
  test_set_step(1);
 8005f80:	2001      	movs	r0, #1
static void rt_test_002_001_execute(void) {
 8005f82:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8005f84:	4e23      	ldr	r6, [pc, #140]	; (8006014 <rt_test_002_001_execute.lto_priv.0+0x94>)
 8005f86:	2520      	movs	r5, #32
 8005f88:	6030      	str	r0, [r6, #0]
 8005f8a:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 8005f8e:	f005 fdcf 	bl	800bb30 <chSysIntegrityCheckI>
 8005f92:	2300      	movs	r3, #0
 8005f94:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 8005f98:	f080 0001 	eor.w	r0, r0, #1
 8005f9c:	491e      	ldr	r1, [pc, #120]	; (8006018 <rt_test_002_001_execute.lto_priv.0+0x98>)
 8005f9e:	b2c0      	uxtb	r0, r0
 8005fa0:	f7fa fd4e 	bl	8000a40 <_test_assert>
 8005fa4:	b100      	cbz	r0, 8005fa8 <rt_test_002_001_execute.lto_priv.0+0x28>
}
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 8005fa8:	4604      	mov	r4, r0
 8005faa:	2002      	movs	r0, #2
 8005fac:	6030      	str	r0, [r6, #0]
 8005fae:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8005fb2:	f005 fdbd 	bl	800bb30 <chSysIntegrityCheckI>
 8005fb6:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "virtual timers list check failed");
 8005fba:	f080 0001 	eor.w	r0, r0, #1
 8005fbe:	4917      	ldr	r1, [pc, #92]	; (800601c <rt_test_002_001_execute.lto_priv.0+0x9c>)
 8005fc0:	b2c0      	uxtb	r0, r0
 8005fc2:	f7fa fd3d 	bl	8000a40 <_test_assert>
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d1ec      	bne.n	8005fa6 <rt_test_002_001_execute.lto_priv.0+0x26>
  test_set_step(3);
 8005fcc:	2303      	movs	r3, #3
 8005fce:	6033      	str	r3, [r6, #0]
 8005fd0:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8005fd4:	2004      	movs	r0, #4
 8005fd6:	f005 fdab 	bl	800bb30 <chSysIntegrityCheckI>
 8005fda:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "registry list check failed");
 8005fde:	f080 0001 	eor.w	r0, r0, #1
 8005fe2:	490f      	ldr	r1, [pc, #60]	; (8006020 <rt_test_002_001_execute.lto_priv.0+0xa0>)
 8005fe4:	b2c0      	uxtb	r0, r0
 8005fe6:	f7fa fd2b 	bl	8000a40 <_test_assert>
 8005fea:	4604      	mov	r4, r0
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d1da      	bne.n	8005fa6 <rt_test_002_001_execute.lto_priv.0+0x26>
  test_set_step(4);
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	6033      	str	r3, [r6, #0]
 8005ff4:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 8005ff8:	2008      	movs	r0, #8
 8005ffa:	f005 fd99 	bl	800bb30 <chSysIntegrityCheckI>
 8005ffe:	f384 8811 	msr	BASEPRI, r4
}
 8006002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 8006006:	f080 0001 	eor.w	r0, r0, #1
 800600a:	4906      	ldr	r1, [pc, #24]	; (8006024 <rt_test_002_001_execute.lto_priv.0+0xa4>)
 800600c:	b2c0      	uxtb	r0, r0
 800600e:	f7fa bd17 	b.w	8000a40 <_test_assert>
 8006012:	bf00      	nop
 8006014:	20001cf4 	.word	0x20001cf4
 8006018:	0800d740 	.word	0x0800d740
 800601c:	0800d758 	.word	0x0800d758
 8006020:	0800d77c 	.word	0x0800d77c
 8006024:	0800d798 	.word	0x0800d798
	...

08006030 <move_window.part.0>:
static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
 8006030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Is the disk access window dirty */
 8006034:	78c3      	ldrb	r3, [r0, #3]
static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
 8006036:	4604      	mov	r4, r0
 8006038:	460d      	mov	r5, r1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 800603a:	f100 083c 	add.w	r8, r0, #60	; 0x3c
	if (fs->wflag) {	/* Is the disk access window dirty */
 800603e:	bb0b      	cbnz	r3, 8006084 <move_window.part.0+0x54>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8006040:	7866      	ldrb	r6, [r4, #1]
    BYTE *buff,       /* Data buffer to store read data */
    DWORD sector,     /* Sector address (LBA) */
    UINT count        /* Number of sectors to read (1..255) */
)
{
  switch (pdrv) {
 8006042:	b91e      	cbnz	r6, 800604c <move_window.part.0+0x1c>
#if HAL_USE_MMC_SPI
  case MMC:
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 8006044:	4f1d      	ldr	r7, [pc, #116]	; (80060bc <move_window.part.0+0x8c>)
 8006046:	793b      	ldrb	r3, [r7, #4]
 8006048:	2b05      	cmp	r3, #5
 800604a:	d006      	beq.n	800605a <move_window.part.0+0x2a>
				res = FR_DISK_ERR;
 800604c:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 800604e:	f04f 35ff 	mov.w	r5, #4294967295
}
 8006052:	4630      	mov	r0, r6
			fs->winsect = sector;
 8006054:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8006056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return RES_NOTRDY;
    if (mmcStartSequentialRead(&FATFS_HAL_DEVICE, sector))
 800605a:	4629      	mov	r1, r5
 800605c:	4638      	mov	r0, r7
 800605e:	f005 ffef 	bl	800c040 <mmcStartSequentialRead>
 8006062:	2800      	cmp	r0, #0
 8006064:	d1f2      	bne.n	800604c <move_window.part.0+0x1c>
      return RES_ERROR;
    while (count > 0) {
      if (mmcSequentialRead(&FATFS_HAL_DEVICE, buff))
 8006066:	4641      	mov	r1, r8
 8006068:	4638      	mov	r0, r7
 800606a:	f005 ffb9 	bl	800bfe0 <mmcSequentialRead>
 800606e:	2800      	cmp	r0, #0
 8006070:	d1ec      	bne.n	800604c <move_window.part.0+0x1c>
    (uint8_t)(0x40U | MMCSD_CMD_STOP_TRANSMISSION), 0, 0, 0, 0, 1, 0xFF
  };

  osalDbgCheck(mmcp != NULL);

  if (mmcp->state != BLK_READING) {
 8006072:	793b      	ldrb	r3, [r7, #4]
 8006074:	2b06      	cmp	r3, #6
 8006076:	d1e9      	bne.n	800604c <move_window.part.0+0x1c>
 8006078:	4638      	mov	r0, r7
 800607a:	f005 ff99 	bl	800bfb0 <mmcStopSequentialRead.part.0>
        return RES_ERROR;
      buff += MMCSD_BLOCK_SIZE;
      count--;
    }
    if (mmcStopSequentialRead(&FATFS_HAL_DEVICE))
 800607e:	2800      	cmp	r0, #0
 8006080:	d0e7      	beq.n	8006052 <move_window.part.0+0x22>
 8006082:	e7e3      	b.n	800604c <move_window.part.0+0x1c>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8006084:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006086:	4641      	mov	r1, r8
 8006088:	2301      	movs	r3, #1
 800608a:	7840      	ldrb	r0, [r0, #1]
 800608c:	f005 fb90 	bl	800b7b0 <disk_write>
 8006090:	b980      	cbnz	r0, 80060b4 <move_window.part.0+0x84>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8006092:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006094:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006096:	6a22      	ldr	r2, [r4, #32]
 8006098:	1acb      	subs	r3, r1, r3
 800609a:	4293      	cmp	r3, r2
			fs->wflag = 0;	/* Clear window dirty flag */
 800609c:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800609e:	d2cf      	bcs.n	8006040 <move_window.part.0+0x10>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80060a0:	78a3      	ldrb	r3, [r4, #2]
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d1cc      	bne.n	8006040 <move_window.part.0+0x10>
 80060a6:	440a      	add	r2, r1
 80060a8:	2301      	movs	r3, #1
 80060aa:	4641      	mov	r1, r8
 80060ac:	7860      	ldrb	r0, [r4, #1]
 80060ae:	f005 fb7f 	bl	800b7b0 <disk_write>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80060b2:	e7c5      	b.n	8006040 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 80060b4:	2601      	movs	r6, #1
}
 80060b6:	4630      	mov	r0, r6
 80060b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060bc:	20000918 	.word	0x20000918

080060c0 <check_fs>:
static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80060c0:	f04f 33ff 	mov.w	r3, #4294967295
 80060c4:	2200      	movs	r2, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80060c6:	4299      	cmp	r1, r3
{
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80060cc:	70c2      	strb	r2, [r0, #3]
 80060ce:	6383      	str	r3, [r0, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 80060d0:	d003      	beq.n	80060da <check_fs+0x1a>
 80060d2:	f7ff ffad 	bl	8006030 <move_window.part.0>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d14c      	bne.n	8006174 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80060da:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 80060de:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
 80060e2:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
 80060e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d13e      	bne.n	800616c <check_fs+0xac>
		r = *d++ - *s++;
 80060ee:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
 80060f2:	4921      	ldr	r1, [pc, #132]	; (8006178 <check_fs+0xb8>)
 80060f4:	f104 023d 	add.w	r2, r4, #61	; 0x3d
 80060f8:	f1a6 03eb 	sub.w	r3, r6, #235	; 0xeb
	} while (--cnt && r == 0);
 80060fc:	f104 0547 	add.w	r5, r4, #71	; 0x47
 8006100:	b953      	cbnz	r3, 8006118 <check_fs+0x58>
		r = *d++ - *s++;
 8006102:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006106:	f811 0b01 	ldrb.w	r0, [r1], #1
	} while (--cnt && r == 0);
 800610a:	42aa      	cmp	r2, r5
		r = *d++ - *s++;
 800610c:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 8006110:	d1f6      	bne.n	8006100 <check_fs+0x40>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 8006112:	b90b      	cbnz	r3, 8006118 <check_fs+0x58>
 8006114:	2001      	movs	r0, #1
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
	}
	return 2;	/* Valid BS but not FAT */
}
 8006116:	bd70      	pop	{r4, r5, r6, pc}
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8006118:	2eeb      	cmp	r6, #235	; 0xeb
 800611a:	d005      	beq.n	8006128 <check_fs+0x68>
 800611c:	3618      	adds	r6, #24
 800611e:	b2f6      	uxtb	r6, r6
 8006120:	2e01      	cmp	r6, #1
 8006122:	d901      	bls.n	8006128 <check_fs+0x68>
	return 2;	/* Valid BS but not FAT */
 8006124:	2002      	movs	r0, #2
}
 8006126:	bd70      	pop	{r4, r5, r6, pc}
	} while (--cnt && r == 0);
 8006128:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 800612c:	2b46      	cmp	r3, #70	; 0x46
 800612e:	d107      	bne.n	8006140 <check_fs+0x80>
 8006130:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
 8006134:	2b41      	cmp	r3, #65	; 0x41
 8006136:	d103      	bne.n	8006140 <check_fs+0x80>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8006138:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800613c:	2b54      	cmp	r3, #84	; 0x54
 800613e:	d017      	beq.n	8006170 <check_fs+0xb0>
		r = *d++ - *s++;
 8006140:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8006144:	490d      	ldr	r1, [pc, #52]	; (800617c <check_fs+0xbc>)
 8006146:	f104 028f 	add.w	r2, r4, #143	; 0x8f
 800614a:	3b46      	subs	r3, #70	; 0x46
	} while (--cnt && r == 0);
 800614c:	3493      	adds	r4, #147	; 0x93
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e8      	bne.n	8006124 <check_fs+0x64>
		r = *d++ - *s++;
 8006152:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006156:	f811 0b01 	ldrb.w	r0, [r1], #1
	} while (--cnt && r == 0);
 800615a:	4294      	cmp	r4, r2
		r = *d++ - *s++;
 800615c:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 8006160:	d1f5      	bne.n	800614e <check_fs+0x8e>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8006162:	2b00      	cmp	r3, #0
 8006164:	bf14      	ite	ne
 8006166:	2002      	movne	r0, #2
 8006168:	2000      	moveq	r0, #0
}
 800616a:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 800616c:	2003      	movs	r0, #3
}
 800616e:	bd70      	pop	{r4, r5, r6, pc}
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8006170:	2000      	movs	r0, #0
}
 8006172:	bd70      	pop	{r4, r5, r6, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006174:	2004      	movs	r0, #4
}
 8006176:	bd70      	pop	{r4, r5, r6, pc}
 8006178:	0800d7b1 	.word	0x0800d7b1
 800617c:	0800d7bd 	.word	0x0800d7bd

08006180 <find_volume.constprop.0>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006180:	2300      	movs	r3, #0
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
 8006182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8006186:	600b      	str	r3, [r1, #0]
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
 8006188:	b089      	sub	sp, #36	; 0x24
 800618a:	460d      	mov	r5, r1
	vol = get_ldnumber(path);
 800618c:	f7fa fec0 	bl	8000f10 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006190:	1e06      	subs	r6, r0, #0
 8006192:	f2c0 80fc 	blt.w	800638e <find_volume.constprop.0+0x20e>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8006196:	4b8b      	ldr	r3, [pc, #556]	; (80063c4 <find_volume.constprop.0+0x244>)
 8006198:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800619c:	2c00      	cmp	r4, #0
 800619e:	f000 8104 	beq.w	80063aa <find_volume.constprop.0+0x22a>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80061a2:	602c      	str	r4, [r5, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80061a4:	7823      	ldrb	r3, [r4, #0]
 80061a6:	b11b      	cbz	r3, 80061b0 <find_volume.constprop.0+0x30>
  switch (pdrv) {
 80061a8:	7863      	ldrb	r3, [r4, #1]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 80d9 	beq.w	8006362 <find_volume.constprop.0+0x1e2>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 80061b0:	2300      	movs	r3, #0
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80061b2:	b2f6      	uxtb	r6, r6
 80061b4:	7066      	strb	r6, [r4, #1]
	fs->fs_type = 0;					/* Clear the filesystem object */
 80061b6:	7023      	strb	r3, [r4, #0]
 80061b8:	2e00      	cmp	r6, #0
 80061ba:	f040 80a7 	bne.w	800630c <find_volume.constprop.0+0x18c>
 80061be:	f7fa fedf 	bl	8000f80 <disk_initialize.part.0>
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80061c2:	f010 0501 	ands.w	r5, r0, #1
 80061c6:	f040 80a1 	bne.w	800630c <find_volume.constprop.0+0x18c>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80061ca:	4629      	mov	r1, r5
 80061cc:	4620      	mov	r0, r4
 80061ce:	f7ff ff77 	bl	80060c0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80061d2:	2802      	cmp	r0, #2
 80061d4:	f000 809f 	beq.w	8006316 <find_volume.constprop.0+0x196>
		do {							/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80061d8:	2804      	cmp	r0, #4
 80061da:	f000 80dd 	beq.w	8006398 <find_volume.constprop.0+0x218>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80061de:	2801      	cmp	r0, #1
	bsect = 0;
 80061e0:	bf98      	it	ls
 80061e2:	46aa      	movls	sl, r5
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80061e4:	f200 80b8 	bhi.w	8006358 <find_volume.constprop.0+0x1d8>

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 80061e8:	2801      	cmp	r0, #1
 80061ea:	f000 80c4 	beq.w	8006376 <find_volume.constprop.0+0x1f6>
	rv = rv << 8 | ptr[0];
 80061ee:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80061f2:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80061f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80061fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061fe:	f040 80ab 	bne.w	8006358 <find_volume.constprop.0+0x1d8>
	rv = rv << 8 | ptr[0];
 8006202:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 8006206:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800620a:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800620e:	f000 80ce 	beq.w	80063ae <find_volume.constprop.0+0x22e>
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006212:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
		fs->fsize = fasize;
 8006216:	6223      	str	r3, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006218:	1e51      	subs	r1, r2, #1
 800621a:	2901      	cmp	r1, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800621c:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800621e:	f200 809b 	bhi.w	8006358 <find_volume.constprop.0+0x1d8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006222:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8006226:	b2b9      	uxth	r1, r7
 8006228:	8161      	strh	r1, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800622a:	2900      	cmp	r1, #0
 800622c:	f000 8094 	beq.w	8006358 <find_volume.constprop.0+0x1d8>
 8006230:	1e79      	subs	r1, r7, #1
 8006232:	4239      	tst	r1, r7
 8006234:	f040 8090 	bne.w	8006358 <find_volume.constprop.0+0x1d8>
	rv = rv << 8 | ptr[0];
 8006238:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 800623c:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8006240:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8006244:	468c      	mov	ip, r1

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006246:	f01c 0f0f 	tst.w	ip, #15
	rv = rv << 8 | ptr[0];
 800624a:	b209      	sxth	r1, r1
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800624c:	f8a4 c008 	strh.w	ip, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006250:	f040 8082 	bne.w	8006358 <find_volume.constprop.0+0x1d8>
	rv = rv << 8 | ptr[0];
 8006254:	f894 6050 	ldrb.w	r6, [r4, #80]	; 0x50
 8006258:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800625c:	ea50 2006 	orrs.w	r0, r0, r6, lsl #8
 8006260:	d109      	bne.n	8006276 <find_volume.constprop.0+0xf6>
	rv = rv << 8 | ptr[2];
 8006262:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
	rv = rv << 8 | ptr[1];
 8006266:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
	rv = rv << 8 | ptr[0];
 800626a:	f894 605c 	ldrb.w	r6, [r4, #92]	; 0x5c
	rv = rv << 8 | ptr[1];
 800626e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
	rv = rv << 8 | ptr[0];
 8006272:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8006276:	f894 604b 	ldrb.w	r6, [r4, #75]	; 0x4b
 800627a:	f894 e04a 	ldrb.w	lr, [r4, #74]	; 0x4a

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800627e:	ea5e 2e06 	orrs.w	lr, lr, r6, lsl #8
 8006282:	d069      	beq.n	8006358 <find_volume.constprop.0+0x1d8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006284:	fb03 f202 	mul.w	r2, r3, r2

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006288:	eb0e 181c 	add.w	r8, lr, ip, lsr #4
 800628c:	4490      	add	r8, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800628e:	4580      	cmp	r8, r0
 8006290:	d862      	bhi.n	8006358 <find_volume.constprop.0+0x1d8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006292:	eba0 0008 	sub.w	r0, r0, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006296:	42b8      	cmp	r0, r7
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006298:	fbb0 f6f7 	udiv	r6, r0, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800629c:	d35c      	bcc.n	8006358 <find_volume.constprop.0+0x1d8>
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800629e:	484a      	ldr	r0, [pc, #296]	; (80063c8 <find_volume.constprop.0+0x248>)
 80062a0:	4286      	cmp	r6, r0
 80062a2:	d859      	bhi.n	8006358 <find_volume.constprop.0+0x1d8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80062a4:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80062a8:	4286      	cmp	r6, r0
 80062aa:	f200 814b 	bhi.w	8006544 <find_volume.constprop.0+0x3c4>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80062ae:	f640 71f5 	movw	r1, #4085	; 0xff5
 80062b2:	428e      	cmp	r6, r1
		if (fmt == 0) return FR_NO_FILESYSTEM;

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80062b4:	f106 0602 	add.w	r6, r6, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80062b8:	f200 81b8 	bhi.w	800662c <find_volume.constprop.0+0x4ac>
		fs->volbase = bsect;							/* Volume start sector */
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80062bc:	eb0e 010a 	add.w	r1, lr, sl
		fs->database = bsect + sysect;					/* Data start sector */
 80062c0:	eb08 000a 	add.w	r0, r8, sl
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80062c4:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80062c6:	62a1      	str	r1, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80062c8:	6320      	str	r0, [r4, #48]	; 0x30
		fs->volbase = bsect;							/* Volume start sector */
 80062ca:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80062ce:	f1bc 0f00 	cmp.w	ip, #0
 80062d2:	d041      	beq.n	8006358 <find_volume.constprop.0+0x1d8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80062d4:	440a      	add	r2, r1
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80062d6:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80062da:	f006 0601 	and.w	r6, r6, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80062de:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80062e0:	eb06 0251 	add.w	r2, r6, r1, lsr #1
 80062e4:	2101      	movs	r1, #1
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80062e6:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 80062ea:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
 80062ee:	d333      	bcc.n	8006358 <find_volume.constprop.0+0x1d8>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80062f0:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 80062f4:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80062f6:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fs->fsi_flag = 0x80;
 80062fa:	7122      	strb	r2, [r4, #4]
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
	fs->id = ++Fsid;		/* Volume mount ID */
 80062fc:	4a33      	ldr	r2, [pc, #204]	; (80063cc <find_volume.constprop.0+0x24c>)
	fs->fs_type = fmt;		/* FAT sub-type */
 80062fe:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8006300:	8813      	ldrh	r3, [r2, #0]
 8006302:	3301      	adds	r3, #1
 8006304:	b29b      	uxth	r3, r3
 8006306:	8013      	strh	r3, [r2, #0]
 8006308:	80e3      	strh	r3, [r4, #6]
 800630a:	e000      	b.n	800630e <find_volume.constprop.0+0x18e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800630c:	2503      	movs	r5, #3
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800630e:	4628      	mov	r0, r5
 8006310:	b009      	add	sp, #36	; 0x24
 8006312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006316:	ae04      	add	r6, sp, #16
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006318:	4631      	mov	r1, r6
 800631a:	f504 73fd 	add.w	r3, r4, #506	; 0x1fa
 800631e:	f204 273a 	addw	r7, r4, #570	; 0x23a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006322:	791a      	ldrb	r2, [r3, #4]
 8006324:	b13a      	cbz	r2, 8006336 <find_volume.constprop.0+0x1b6>
	rv = rv << 8 | ptr[2];
 8006326:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
	rv = rv << 8 | ptr[1];
 800632a:	7a58      	ldrb	r0, [r3, #9]
	rv = rv << 8 | ptr[0];
 800632c:	7a1a      	ldrb	r2, [r3, #8]
	rv = rv << 8 | ptr[1];
 800632e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 8006332:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006336:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006338:	429f      	cmp	r7, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800633a:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800633e:	d1f0      	bne.n	8006322 <find_volume.constprop.0+0x1a2>
 8006340:	f106 0710 	add.w	r7, r6, #16
			bsect = br[i];
 8006344:	f856 ab04 	ldr.w	sl, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006348:	f1ba 0f00 	cmp.w	sl, #0
 800634c:	d126      	bne.n	800639c <find_volume.constprop.0+0x21c>
 800634e:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006350:	42be      	cmp	r6, r7
 8006352:	d1f7      	bne.n	8006344 <find_volume.constprop.0+0x1c4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006354:	2804      	cmp	r0, #4
 8006356:	d01f      	beq.n	8006398 <find_volume.constprop.0+0x218>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006358:	250d      	movs	r5, #13
}
 800635a:	4628      	mov	r0, r5
 800635c:	b009      	add	sp, #36	; 0x24
 800635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006362:	f7fa fe0d 	bl	8000f80 <disk_initialize.part.0>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006366:	f010 0501 	ands.w	r5, r0, #1
 800636a:	f47f af21 	bne.w	80061b0 <find_volume.constprop.0+0x30>
}
 800636e:	4628      	mov	r0, r5
 8006370:	b009      	add	sp, #36	; 0x24
 8006372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006376:	f104 0346 	add.w	r3, r4, #70	; 0x46
 800637a:	f104 027b 	add.w	r2, r4, #123	; 0x7b
 800637e:	e001      	b.n	8006384 <find_volume.constprop.0+0x204>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8006380:	4293      	cmp	r3, r2
 8006382:	d025      	beq.n	80063d0 <find_volume.constprop.0+0x250>
 8006384:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006388:	2900      	cmp	r1, #0
 800638a:	d0f9      	beq.n	8006380 <find_volume.constprop.0+0x200>
 800638c:	e7e4      	b.n	8006358 <find_volume.constprop.0+0x1d8>
	if (vol < 0) return FR_INVALID_DRIVE;
 800638e:	250b      	movs	r5, #11
}
 8006390:	4628      	mov	r0, r5
 8006392:	b009      	add	sp, #36	; 0x24
 8006394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006398:	2501      	movs	r5, #1
 800639a:	e7b8      	b.n	800630e <find_volume.constprop.0+0x18e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800639c:	4651      	mov	r1, sl
 800639e:	4620      	mov	r0, r4
 80063a0:	f7ff fe8e 	bl	80060c0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80063a4:	2801      	cmp	r0, #1
 80063a6:	d8d3      	bhi.n	8006350 <find_volume.constprop.0+0x1d0>
 80063a8:	e71e      	b.n	80061e8 <find_volume.constprop.0+0x68>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80063aa:	250c      	movs	r5, #12
 80063ac:	e7af      	b.n	800630e <find_volume.constprop.0+0x18e>
	rv = rv << 8 | ptr[2];
 80063ae:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
	rv = rv << 8 | ptr[1];
 80063b2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 80063b6:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	rv = rv << 8 | ptr[1];
 80063ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80063be:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80063c2:	e726      	b.n	8006212 <find_volume.constprop.0+0x92>
 80063c4:	20000910 	.word	0x20000910
 80063c8:	0ffffff5 	.word	0x0ffffff5
 80063cc:	20000914 	.word	0x20000914
	rv = rv << 8 | ptr[0];
 80063d0:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 80063d4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80063d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 80063dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e0:	d1ba      	bne.n	8006358 <find_volume.constprop.0+0x1d8>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80063e2:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80063e6:	2b09      	cmp	r3, #9
 80063e8:	d1b6      	bne.n	8006358 <find_volume.constprop.0+0x1d8>
	rv = rv << 8 | ptr[2];
 80063ea:	2300      	movs	r3, #0
 80063ec:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[4];
 80063f0:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[2];
 80063f4:	e9cd 2300 	strd	r2, r3, [sp]
	rv = rv << 8 | ptr[1];
 80063f8:	2300      	movs	r3, #0
 80063fa:	f894 2085 	ldrb.w	r2, [r4, #133]	; 0x85
	rv = rv << 8 | ptr[3];
 80063fe:	f894 8087 	ldrb.w	r8, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[2];
 8006402:	9800      	ldr	r0, [sp, #0]
	rv = rv << 8 | ptr[1];
 8006404:	e9cd 2302 	strd	r2, r3, [sp, #8]
	rv = rv << 8 | ptr[2];
 8006408:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
 800640c:	ea40 2608 	orr.w	r6, r0, r8, lsl #8
 8006410:	0c3f      	lsrs	r7, r7, #16
	rv = rv << 8 | ptr[1];
 8006412:	9802      	ldr	r0, [sp, #8]
	rv = rv << 8 | ptr[0];
 8006414:	f894 b084 	ldrb.w	fp, [r4, #132]	; 0x84
	rv = rv << 8 | ptr[1];
 8006418:	023f      	lsls	r7, r7, #8
 800641a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800641e:	ea47 6716 	orr.w	r7, r7, r6, lsr #24
	rv = rv << 8 | ptr[0];
 8006422:	023f      	lsls	r7, r7, #8
 8006424:	ea4b 2200 	orr.w	r2, fp, r0, lsl #8
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8006428:	eb12 0b0a 	adds.w	fp, r2, sl
	rv = rv << 8 | ptr[0];
 800642c:	ea47 6310 	orr.w	r3, r7, r0, lsr #24
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8006430:	f143 0c00 	adc.w	ip, r3, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8006434:	f1bc 0f01 	cmp.w	ip, #1
 8006438:	bf08      	it	eq
 800643a:	f1bb 0f00 	cmpeq.w	fp, #0
 800643e:	d28b      	bcs.n	8006358 <find_volume.constprop.0+0x1d8>
	rv = rv << 8 | ptr[2];
 8006440:	f8b4 6092 	ldrh.w	r6, [r4, #146]	; 0x92
	rv = rv << 8 | ptr[1];
 8006444:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
	rv = rv << 8 | ptr[0];
 8006448:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 800644c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8006450:	f894 60aa 	ldrb.w	r6, [r4, #170]	; 0xaa
	rv = rv << 8 | ptr[0];
 8006454:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8006458:	2e01      	cmp	r6, #1
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800645a:	6223      	str	r3, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800645c:	70a6      	strb	r6, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800645e:	f47f af7b 	bne.w	8006358 <find_volume.constprop.0+0x1d8>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8006462:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 8006466:	409e      	lsls	r6, r3
 8006468:	b2b3      	uxth	r3, r6
 800646a:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800646c:	2b00      	cmp	r3, #0
 800646e:	f43f af73 	beq.w	8006358 <find_volume.constprop.0+0x1d8>
	rv = rv << 8 | ptr[2];
 8006472:	f8b4 209a 	ldrh.w	r2, [r4, #154]	; 0x9a
	rv = rv << 8 | ptr[1];
 8006476:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
	rv = rv << 8 | ptr[0];
 800647a:	f894 7098 	ldrb.w	r7, [r4, #152]	; 0x98
	rv = rv << 8 | ptr[1];
 800647e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8006482:	4a97      	ldr	r2, [pc, #604]	; (80066e0 <find_volume.constprop.0+0x560>)
	rv = rv << 8 | ptr[0];
 8006484:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8006488:	4297      	cmp	r7, r2
 800648a:	f63f af65 	bhi.w	8006358 <find_volume.constprop.0+0x1d8>
	rv = rv << 8 | ptr[2];
 800648e:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
	rv = rv << 8 | ptr[1];
 8006492:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
	rv = rv << 8 | ptr[0];
 8006496:	f894 e094 	ldrb.w	lr, [r4, #148]	; 0x94
	rv = rv << 8 | ptr[1];
 800649a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800649e:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80064a2:	2300      	movs	r3, #0
 80064a4:	b2b6      	uxth	r6, r6
 80064a6:	fb07 f606 	mul.w	r6, r7, r6
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80064aa:	eb0e 000a 	add.w	r0, lr, sl
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80064ae:	1982      	adds	r2, r0, r6
	rv = rv << 8 | ptr[2];
 80064b0:	f8b4 808e 	ldrh.w	r8, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 80064b4:	f894 608d 	ldrb.w	r6, [r4, #141]	; 0x8d
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80064b8:	f143 0300 	adc.w	r3, r3, #0
	rv = rv << 8 | ptr[1];
 80064bc:	ea46 2808 	orr.w	r8, r6, r8, lsl #8
	rv = rv << 8 | ptr[0];
 80064c0:	f894 608c 	ldrb.w	r6, [r4, #140]	; 0x8c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80064c4:	459c      	cmp	ip, r3
	rv = rv << 8 | ptr[0];
 80064c6:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
		fs->n_fatent = nclst + 2;
 80064ca:	f107 0702 	add.w	r7, r7, #2
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80064ce:	4456      	add	r6, sl
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80064d0:	bf08      	it	eq
 80064d2:	4593      	cmpeq	fp, r2
		fs->n_fatent = nclst + 2;
 80064d4:	61e7      	str	r7, [r4, #28]
		fs->volbase = bsect;
 80064d6:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80064da:	6320      	str	r0, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80064dc:	62a6      	str	r6, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80064de:	f4ff af3b 	bcc.w	8006358 <find_volume.constprop.0+0x1d8>
		so = i = 0;
 80064e2:	460f      	mov	r7, r1
 80064e4:	460e      	mov	r6, r1
	rv = rv << 8 | ptr[1];
 80064e6:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
	rv = rv << 8 | ptr[2];
 80064ea:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
	rv = rv << 8 | ptr[0];
 80064ee:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
	rv = rv << 8 | ptr[1];
 80064f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80064f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 80064fa:	62e3      	str	r3, [r4, #44]	; 0x2c
			if (i == 0) {
 80064fc:	b9c6      	cbnz	r6, 8006530 <find_volume.constprop.0+0x3b0>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 80064fe:	8963      	ldrh	r3, [r4, #10]
 8006500:	42bb      	cmp	r3, r7
 8006502:	f67f af29 	bls.w	8006358 <find_volume.constprop.0+0x1d8>
	clst -= 2;		/* Cluster number is origin from 2 */
 8006506:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8006508:	69e2      	ldr	r2, [r4, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
 800650a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800650c:	3a02      	subs	r2, #2
 800650e:	4291      	cmp	r1, r2
 8006510:	bf2f      	iteee	cs
 8006512:	4639      	movcs	r1, r7
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8006514:	6b22      	ldrcc	r2, [r4, #48]	; 0x30
 8006516:	fb01 2303 	mlacc	r3, r1, r3, r2
 800651a:	19d9      	addcc	r1, r3, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800651c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				so++;
 800651e:	3701      	adds	r7, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006520:	428b      	cmp	r3, r1
 8006522:	d005      	beq.n	8006530 <find_volume.constprop.0+0x3b0>
 8006524:	4620      	mov	r0, r4
 8006526:	f7ff fd83 	bl	8006030 <move_window.part.0>
				if (move_window(fs, clst2sect(fs, fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800652a:	2800      	cmp	r0, #0
 800652c:	f47f af34 	bne.w	8006398 <find_volume.constprop.0+0x218>
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 8006530:	19a3      	adds	r3, r4, r6
 8006532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 8006536:	f106 0220 	add.w	r2, r6, #32
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 800653a:	2b81      	cmp	r3, #129	; 0x81
 800653c:	d039      	beq.n	80065b2 <find_volume.constprop.0+0x432>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800653e:	f3c2 0608 	ubfx	r6, r2, #0, #9
 8006542:	e7db      	b.n	80064fc <find_volume.constprop.0+0x37c>
	rv = rv << 8 | ptr[0];
 8006544:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
 8006548:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800654c:	3602      	adds	r6, #2
	rv = rv << 8 | ptr[0];
 800654e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006552:	4311      	orrs	r1, r2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006554:	eb0e 070a 	add.w	r7, lr, sl
		fs->database = bsect + sysect;					/* Data start sector */
 8006558:	eb08 000a 	add.w	r0, r8, sl
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800655c:	b209      	sxth	r1, r1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800655e:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006560:	62a7      	str	r7, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006562:	6320      	str	r0, [r4, #48]	; 0x30
		fs->volbase = bsect;							/* Volume start sector */
 8006564:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006568:	2900      	cmp	r1, #0
 800656a:	f47f aef5 	bne.w	8006358 <find_volume.constprop.0+0x1d8>
	rv = rv << 8 | ptr[2];
 800656e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 8006572:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
	rv = rv << 8 | ptr[0];
 8006576:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800657a:	00b6      	lsls	r6, r6, #2
	rv = rv << 8 | ptr[1];
 800657c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006580:	f206 12ff 	addw	r2, r6, #511	; 0x1ff
	rv = rv << 8 | ptr[0];
 8006584:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006588:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800658c:	62e1      	str	r1, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800658e:	f4ff aee3 	bcc.w	8006358 <find_volume.constprop.0+0x1d8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006592:	f04f 32ff 	mov.w	r2, #4294967295
		fs->fsi_flag = 0x80;
 8006596:	2180      	movs	r1, #128	; 0x80
	rv = rv << 8 | ptr[0];
 8006598:	f894 006d 	ldrb.w	r0, [r4, #109]	; 0x6d
 800659c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80065a0:	61a2      	str	r2, [r4, #24]
	rv = rv << 8 | ptr[0];
 80065a2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80065a6:	2b01      	cmp	r3, #1
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80065a8:	6162      	str	r2, [r4, #20]
		fs->fsi_flag = 0x80;
 80065aa:	7121      	strb	r1, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80065ac:	d050      	beq.n	8006650 <find_volume.constprop.0+0x4d0>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80065ae:	2103      	movs	r1, #3
 80065b0:	e6a4      	b.n	80062fc <find_volume.constprop.0+0x17c>
		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
 80065b2:	3614      	adds	r6, #20
 80065b4:	f104 073c 	add.w	r7, r4, #60	; 0x3c
 80065b8:	19bb      	adds	r3, r7, r6
	rv = rv << 8 | ptr[2];
 80065ba:	885a      	ldrh	r2, [r3, #2]
	rv = rv << 8 | ptr[1];
 80065bc:	785b      	ldrb	r3, [r3, #1]
	rv = rv << 8 | ptr[0];
 80065be:	5dbe      	ldrb	r6, [r7, r6]
	rv = rv << 8 | ptr[1];
 80065c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80065c4:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
 80065c8:	2e01      	cmp	r6, #1
 80065ca:	f67f aec5 	bls.w	8006358 <find_volume.constprop.0+0x1d8>
 80065ce:	69e3      	ldr	r3, [r4, #28]
 80065d0:	429e      	cmp	r6, r3
 80065d2:	f4bf aec1 	bcs.w	8006358 <find_volume.constprop.0+0x1d8>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 80065d6:	8963      	ldrh	r3, [r4, #10]
 80065d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80065da:	1eb1      	subs	r1, r6, #2
 80065dc:	fb01 2303 	mla	r3, r1, r3, r2
 80065e0:	6363      	str	r3, [r4, #52]	; 0x34
 80065e2:	e002      	b.n	80065ea <find_volume.constprop.0+0x46a>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
 80065e4:	42b3      	cmp	r3, r6
 80065e6:	f47f aeb7 	bne.w	8006358 <find_volume.constprop.0+0x1d8>
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 80065ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80065ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 80065ee:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80065f2:	4299      	cmp	r1, r3
 80065f4:	d005      	beq.n	8006602 <find_volume.constprop.0+0x482>
 80065f6:	4620      	mov	r0, r4
 80065f8:	f7ff fd1a 	bl	8006030 <move_window.part.0>
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 80065fc:	2800      	cmp	r0, #0
 80065fe:	f47f aecb 	bne.w	8006398 <find_volume.constprop.0+0x218>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 8006602:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 8006606:	eb07 0081 	add.w	r0, r7, r1, lsl #2
	rv = rv << 8 | ptr[2];
 800660a:	f8b0 c002 	ldrh.w	ip, [r0, #2]
	rv = rv << 8 | ptr[1];
 800660e:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8006610:	f817 3021 	ldrb.w	r3, [r7, r1, lsl #2]
	rv = rv << 8 | ptr[1];
 8006614:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
	rv = rv << 8 | ptr[0];
 8006618:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800661c:	1c5a      	adds	r2, r3, #1
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
 800661e:	f106 0601 	add.w	r6, r6, #1
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8006622:	d1df      	bne.n	80065e4 <find_volume.constprop.0+0x464>
		fmt = FS_EXFAT;			/* FAT sub-type */
 8006624:	2104      	movs	r1, #4
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006626:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800662a:	e667      	b.n	80062fc <find_volume.constprop.0+0x17c>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800662c:	eb0e 000a 	add.w	r0, lr, sl
		fs->database = bsect + sysect;					/* Data start sector */
 8006630:	eb08 010a 	add.w	r1, r8, sl
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006634:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006636:	62a0      	str	r0, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006638:	6321      	str	r1, [r4, #48]	; 0x30
		fs->volbase = bsect;							/* Volume start sector */
 800663a:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800663e:	f1bc 0f00 	cmp.w	ip, #0
 8006642:	f43f ae89 	beq.w	8006358 <find_volume.constprop.0+0x1d8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006646:	4402      	add	r2, r0
 8006648:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800664a:	2102      	movs	r1, #2
 800664c:	0072      	lsls	r2, r6, #1
 800664e:	e64a      	b.n	80062e6 <find_volume.constprop.0+0x166>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006650:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			&& move_window(fs, bsect + 1) == FR_OK)
 8006652:	f10a 0101 	add.w	r1, sl, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006656:	4299      	cmp	r1, r3
 8006658:	d004      	beq.n	8006664 <find_volume.constprop.0+0x4e4>
 800665a:	4620      	mov	r0, r4
 800665c:	f7ff fce8 	bl	8006030 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006660:	2800      	cmp	r0, #0
 8006662:	d1a4      	bne.n	80065ae <find_volume.constprop.0+0x42e>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8006664:	f64a 2255 	movw	r2, #43605	; 0xaa55
			fs->fsi_flag = 0;
 8006668:	2000      	movs	r0, #0
	rv = rv << 8 | ptr[0];
 800666a:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
 800666e:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
			fs->fsi_flag = 0;
 8006672:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8006674:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8006678:	4293      	cmp	r3, r2
 800667a:	d198      	bne.n	80065ae <find_volume.constprop.0+0x42e>
	rv = rv << 8 | ptr[2];
 800667c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
	rv = rv << 8 | ptr[1];
 800667e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
	rv = rv << 8 | ptr[0];
 8006682:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	rv = rv << 8 | ptr[1];
 8006686:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800668a:	4916      	ldr	r1, [pc, #88]	; (80066e4 <find_volume.constprop.0+0x564>)
	rv = rv << 8 | ptr[0];
 800668c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006690:	428b      	cmp	r3, r1
 8006692:	d18c      	bne.n	80065ae <find_volume.constprop.0+0x42e>
	rv = rv << 8 | ptr[2];
 8006694:	f8b4 1222 	ldrh.w	r1, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 8006698:	f894 2221 	ldrb.w	r2, [r4, #545]	; 0x221
	rv = rv << 8 | ptr[0];
 800669c:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
	rv = rv << 8 | ptr[1];
 80066a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80066a4:	4910      	ldr	r1, [pc, #64]	; (80066e8 <find_volume.constprop.0+0x568>)
	rv = rv << 8 | ptr[0];
 80066a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80066aa:	428b      	cmp	r3, r1
 80066ac:	f47f af7f 	bne.w	80065ae <find_volume.constprop.0+0x42e>
	rv = rv << 8 | ptr[2];
 80066b0:	f8b4 0226 	ldrh.w	r0, [r4, #550]	; 0x226
	rv = rv << 8 | ptr[1];
 80066b4:	f894 2225 	ldrb.w	r2, [r4, #549]	; 0x225
 80066b8:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
 80066bc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[2];
 80066c0:	f8b4 622a 	ldrh.w	r6, [r4, #554]	; 0x22a
	rv = rv << 8 | ptr[0];
 80066c4:	f894 0224 	ldrb.w	r0, [r4, #548]	; 0x224
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80066c8:	2103      	movs	r1, #3
	rv = rv << 8 | ptr[0];
 80066ca:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	rv = rv << 8 | ptr[1];
 80066ce:	ea43 2206 	orr.w	r2, r3, r6, lsl #8
	rv = rv << 8 | ptr[0];
 80066d2:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80066d6:	61a0      	str	r0, [r4, #24]
	rv = rv << 8 | ptr[0];
 80066d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80066dc:	6163      	str	r3, [r4, #20]
 80066de:	e60d      	b.n	80062fc <find_volume.constprop.0+0x17c>
 80066e0:	7ffffffd 	.word	0x7ffffffd
 80066e4:	41615252 	.word	0x41615252
 80066e8:	61417272 	.word	0x61417272
 80066ec:	00000000 	.word	0x00000000

080066f0 <InsertHandler>:
static void InsertHandler(eventid_t id) {
 80066f0:	b530      	push	{r4, r5, lr}
  if (mmcConnect(&MMCD1))
 80066f2:	4815      	ldr	r0, [pc, #84]	; (8006748 <InsertHandler+0x58>)
static void InsertHandler(eventid_t id) {
 80066f4:	b085      	sub	sp, #20
  if (mmcConnect(&MMCD1))
 80066f6:	f005 f953 	bl	800b9a0 <mmcConnect>
 80066fa:	b108      	cbz	r0, 8006700 <InsertHandler+0x10>
}
 80066fc:	b005      	add	sp, #20
 80066fe:	bd30      	pop	{r4, r5, pc}

/*-----------------------------------------------------------------------*/
/* Mount/Unmount a Logical Drive                                         */
/*-----------------------------------------------------------------------*/

FRESULT f_mount (
 8006700:	4b12      	ldr	r3, [pc, #72]	; (800674c <InsertHandler+0x5c>)
 8006702:	4a13      	ldr	r2, [pc, #76]	; (8006750 <InsertHandler+0x60>)
 8006704:	4604      	mov	r4, r0
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006706:	a801      	add	r0, sp, #4
	const TCHAR *rp = path;
 8006708:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800670c:	9203      	str	r2, [sp, #12]
	vol = get_ldnumber(&rp);
 800670e:	f7fa fbff 	bl	8000f10 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006712:	1e03      	subs	r3, r0, #0
 8006714:	db14      	blt.n	8006740 <InsertHandler+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006716:	4d0f      	ldr	r5, [pc, #60]	; (8006754 <InsertHandler+0x64>)
 8006718:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]

	if (cfs) {
 800671c:	b102      	cbz	r2, 8006720 <InsertHandler+0x30>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800671e:	7014      	strb	r4, [r2, #0]
	}

	if (fs) {
 8006720:	9a03      	ldr	r2, [sp, #12]
 8006722:	b10a      	cbz	r2, 8006728 <InsertHandler+0x38>
		fs->fs_type = 0;				/* Clear new fs object */
 8006724:	2100      	movs	r1, #0
 8006726:	7011      	strb	r1, [r2, #0]
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006728:	a903      	add	r1, sp, #12
 800672a:	a802      	add	r0, sp, #8
	FatFs[vol] = fs;					/* Register new fs object */
 800672c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006730:	f7ff fd26 	bl	8006180 <find_volume.constprop.0>
  if (err != FR_OK) {
 8006734:	b920      	cbnz	r0, 8006740 <InsertHandler+0x50>
  fs_ready = TRUE;
 8006736:	2201      	movs	r2, #1
 8006738:	4b07      	ldr	r3, [pc, #28]	; (8006758 <InsertHandler+0x68>)
 800673a:	701a      	strb	r2, [r3, #0]
}
 800673c:	b005      	add	sp, #20
 800673e:	bd30      	pop	{r4, r5, pc}
    mmcDisconnect(&MMCD1);
 8006740:	4801      	ldr	r0, [pc, #4]	; (8006748 <InsertHandler+0x58>)
 8006742:	f004 ff45 	bl	800b5d0 <mmcDisconnect>
    return;
 8006746:	e7d9      	b.n	80066fc <InsertHandler+0xc>
 8006748:	20000918 	.word	0x20000918
 800674c:	0800d7c4 	.word	0x0800d7c4
 8006750:	200009c8 	.word	0x200009c8
 8006754:	20000910 	.word	0x20000910
 8006758:	200013b0 	.word	0x200013b0
 800675c:	00000000 	.word	0x00000000

08006760 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006760:	2901      	cmp	r1, #1
 8006762:	d911      	bls.n	8006788 <get_fat+0x28>
{
 8006764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = obj->fs;
 8006768:	6805      	ldr	r5, [r0, #0]
 800676a:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800676c:	69eb      	ldr	r3, [r5, #28]
 800676e:	428b      	cmp	r3, r1
 8006770:	d802      	bhi.n	8006778 <get_fat+0x18>
		val = 1;	/* Internal error */
 8006772:	2001      	movs	r0, #1
}
 8006774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (fs->fs_type) {
 8006778:	782b      	ldrb	r3, [r5, #0]
 800677a:	3b01      	subs	r3, #1
 800677c:	2b03      	cmp	r3, #3
 800677e:	d8f8      	bhi.n	8006772 <get_fat+0x12>
 8006780:	e8df f003 	tbb	[pc, r3]
 8006784:	04183247 	.word	0x04183247
		val = 1;	/* Internal error */
 8006788:	2001      	movs	r0, #1
}
 800678a:	4770      	bx	lr
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800678c:	e9d0 7804 	ldrd	r7, r8, [r0, #16]
 8006790:	ea57 0308 	orrs.w	r3, r7, r8
 8006794:	d065      	beq.n	8006862 <get_fat+0x102>
 8006796:	6881      	ldr	r1, [r0, #8]
 8006798:	2900      	cmp	r1, #0
 800679a:	d062      	beq.n	8006862 <get_fat+0x102>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800679c:	79c6      	ldrb	r6, [r0, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800679e:	1a61      	subs	r1, r4, r1
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 80067a0:	2e02      	cmp	r6, #2
 80067a2:	f000 8082 	beq.w	80068aa <get_fat+0x14a>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80067a6:	2e03      	cmp	r6, #3
 80067a8:	d15e      	bne.n	8006868 <get_fat+0x108>
 80067aa:	6983      	ldr	r3, [r0, #24]
 80067ac:	428b      	cmp	r3, r1
 80067ae:	d95b      	bls.n	8006868 <get_fat+0x108>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 80067b0:	1c60      	adds	r0, r4, #1
 80067b2:	e7df      	b.n	8006774 <get_fat+0x14>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067b4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067b8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067bc:	4299      	cmp	r1, r3
 80067be:	d004      	beq.n	80067ca <get_fat+0x6a>
 80067c0:	4628      	mov	r0, r5
 80067c2:	f7ff fc35 	bl	8006030 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d169      	bne.n	800689e <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80067ca:	00a4      	lsls	r4, r4, #2
 80067cc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80067d0:	353c      	adds	r5, #60	; 0x3c
 80067d2:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[2];
 80067d4:	885a      	ldrh	r2, [r3, #2]
	rv = rv << 8 | ptr[1];
 80067d6:	785b      	ldrb	r3, [r3, #1]
	rv = rv << 8 | ptr[0];
 80067d8:	5d28      	ldrb	r0, [r5, r4]
	rv = rv << 8 | ptr[1];
 80067da:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80067de:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80067e2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80067e6:	e7c5      	b.n	8006774 <get_fat+0x14>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80067e8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80067ec:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067f0:	4299      	cmp	r1, r3
 80067f2:	d004      	beq.n	80067fe <get_fat+0x9e>
 80067f4:	4628      	mov	r0, r5
 80067f6:	f7ff fc1b 	bl	8006030 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d14f      	bne.n	800689e <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80067fe:	0064      	lsls	r4, r4, #1
 8006800:	f404 73ff 	and.w	r3, r4, #510	; 0x1fe
 8006804:	353c      	adds	r5, #60	; 0x3c
 8006806:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[0];
 8006808:	7854      	ldrb	r4, [r2, #1]
 800680a:	5ce8      	ldrb	r0, [r5, r3]
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800680c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			break;
 8006810:	e7b0      	b.n	8006774 <get_fat+0x14>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006812:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006814:	6baa      	ldr	r2, [r5, #56]	; 0x38
			bc = (UINT)clst; bc += bc / 2;
 8006816:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800681a:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800681e:	4291      	cmp	r1, r2
 8006820:	d006      	beq.n	8006830 <get_fat+0xd0>
 8006822:	4628      	mov	r0, r5
 8006824:	f7ff fc04 	bl	8006030 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006828:	2800      	cmp	r0, #0
 800682a:	d138      	bne.n	800689e <get_fat+0x13e>
 800682c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800682e:	6baa      	ldr	r2, [r5, #56]	; 0x38
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8006830:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8006834:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006836:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800683a:	4428      	add	r0, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800683c:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800683e:	f890 603c 	ldrb.w	r6, [r0, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006842:	d003      	beq.n	800684c <get_fat+0xec>
 8006844:	4628      	mov	r0, r5
 8006846:	f7ff fbf3 	bl	8006030 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800684a:	bb40      	cbnz	r0, 800689e <get_fat+0x13e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800684c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8006850:	443d      	add	r5, r7
 8006852:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8006856:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8006858:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800685c:	d522      	bpl.n	80068a4 <get_fat+0x144>
 800685e:	0900      	lsrs	r0, r0, #4
 8006860:	e788      	b.n	8006774 <get_fat+0x14>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8006862:	79c3      	ldrb	r3, [r0, #7]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d184      	bne.n	8006772 <get_fat+0x12>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8006868:	69c3      	ldr	r3, [r0, #28]
 800686a:	bb73      	cbnz	r3, 80068ca <get_fat+0x16a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800686c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 800686e:	6bab      	ldr	r3, [r5, #56]	; 0x38
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006870:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006874:	4299      	cmp	r1, r3
 8006876:	d003      	beq.n	8006880 <get_fat+0x120>
 8006878:	4628      	mov	r0, r5
 800687a:	f7ff fbd9 	bl	8006030 <move_window.part.0>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800687e:	b970      	cbnz	r0, 800689e <get_fat+0x13e>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8006880:	00a3      	lsls	r3, r4, #2
 8006882:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006886:	353c      	adds	r5, #60	; 0x3c
 8006888:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[2];
 800688a:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 800688c:	7852      	ldrb	r2, [r2, #1]
	rv = rv << 8 | ptr[0];
 800688e:	5ce8      	ldrb	r0, [r5, r3]
	rv = rv << 8 | ptr[1];
 8006890:	ea42 2301 	orr.w	r3, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006894:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8006898:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800689c:	e76a      	b.n	8006774 <get_fat+0x14>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800689e:	f04f 30ff 	mov.w	r0, #4294967295
 80068a2:	e767      	b.n	8006774 <get_fat+0x14>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80068a4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80068a8:	e764      	b.n	8006774 <get_fat+0x14>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80068aa:	f117 32ff 	adds.w	r2, r7, #4294967295
 80068ae:	8968      	ldrh	r0, [r5, #10]
 80068b0:	ea4f 2352 	mov.w	r3, r2, lsr #9
 80068b4:	f148 35ff 	adc.w	r5, r8, #4294967295
 80068b8:	ea43 53c5 	orr.w	r3, r3, r5, lsl #23
 80068bc:	fbb3 f3f0 	udiv	r3, r3, r0
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 80068c0:	4299      	cmp	r1, r3
 80068c2:	f63f af56 	bhi.w	8006772 <get_fat+0x12>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 80068c6:	f47f af73 	bne.w	80067b0 <get_fat+0x50>
 80068ca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return val;
 80068ce:	e751      	b.n	8006774 <get_fat+0x14>

080068d0 <dir_sdi.constprop.0>:
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80068d0:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 80068d2:	2300      	movs	r3, #0
	FATFS *fs = dp->obj.fs;
 80068d4:	6805      	ldr	r5, [r0, #0]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80068d6:	6881      	ldr	r1, [r0, #8]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80068d8:	782a      	ldrb	r2, [r5, #0]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80068da:	4604      	mov	r4, r0
	dp->dptr = ofs;				/* Set current offset */
 80068dc:	6303      	str	r3, [r0, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80068de:	b981      	cbnz	r1, 8006902 <dir_sdi.constprop.0+0x32>
 80068e0:	2a02      	cmp	r2, #2
 80068e2:	d809      	bhi.n	80068f8 <dir_sdi.constprop.0+0x28>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80068e4:	892b      	ldrh	r3, [r5, #8]
 80068e6:	b1fb      	cbz	r3, 8006928 <dir_sdi.constprop.0+0x58>
		dp->sect = fs->dirbase;
 80068e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80068ea:	63a3      	str	r3, [r4, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 80068ec:	6361      	str	r1, [r4, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 80068ee:	b1db      	cbz	r3, 8006928 <dir_sdi.constprop.0+0x58>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80068f0:	353c      	adds	r5, #60	; 0x3c
	return FR_OK;
 80068f2:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80068f4:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
		clst = fs->dirbase;
 80068f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80068fa:	71c1      	strb	r1, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d0f1      	beq.n	80068e4 <dir_sdi.constprop.0+0x14>
 8006900:	4619      	mov	r1, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006902:	896b      	ldrh	r3, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006904:	b12b      	cbz	r3, 8006912 <dir_sdi.constprop.0+0x42>
 8006906:	e011      	b.n	800692c <dir_sdi.constprop.0+0x5c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006908:	2801      	cmp	r0, #1
 800690a:	d90d      	bls.n	8006928 <dir_sdi.constprop.0+0x58>
 800690c:	69eb      	ldr	r3, [r5, #28]
 800690e:	4298      	cmp	r0, r3
 8006910:	d20a      	bcs.n	8006928 <dir_sdi.constprop.0+0x58>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006912:	4620      	mov	r0, r4
 8006914:	f7ff ff24 	bl	8006760 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006918:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800691a:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800691c:	d1f4      	bne.n	8006908 <dir_sdi.constprop.0+0x38>
 800691e:	2001      	movs	r0, #1
}
 8006920:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = clst2sect(fs, clst);
 8006922:	2300      	movs	r3, #0
 8006924:	e9c4 130d 	strd	r1, r3, [r4, #52]	; 0x34
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8006928:	2002      	movs	r0, #2
}
 800692a:	bd38      	pop	{r3, r4, r5, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800692c:	69ea      	ldr	r2, [r5, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
 800692e:	1e88      	subs	r0, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8006930:	3a02      	subs	r2, #2
 8006932:	4290      	cmp	r0, r2
 8006934:	d2f5      	bcs.n	8006922 <dir_sdi.constprop.0+0x52>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8006936:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006938:	fb00 2303 	mla	r3, r0, r3, r2
		dp->sect = clst2sect(fs, clst);
 800693c:	63a3      	str	r3, [r4, #56]	; 0x38
 800693e:	e7d5      	b.n	80068ec <dir_sdi.constprop.0+0x1c>

08006940 <dir_next.constprop.0>:
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 8006940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8006944:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006946:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8006948:	7833      	ldrb	r3, [r6, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800694a:	3520      	adds	r5, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800694c:	2b04      	cmp	r3, #4
 800694e:	bf0c      	ite	eq
 8006950:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 8006954:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 8006958:	429d      	cmp	r5, r3
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800695a:	4604      	mov	r4, r0
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800695c:	d304      	bcc.n	8006968 <dir_next.constprop.0+0x28>
 800695e:	2300      	movs	r3, #0
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8006960:	2004      	movs	r0, #4
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8006962:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8006968:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800696a:	b383      	cbz	r3, 80069ce <dir_next.constprop.0+0x8e>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800696c:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8006970:	b9ef      	cbnz	r7, 80069ae <dir_next.constprop.0+0x6e>
		if (dp->clust == 0) {	/* Static table */
 8006972:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
 8006974:	3301      	adds	r3, #1
 8006976:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 8006978:	b301      	cbz	r1, 80069bc <dir_next.constprop.0+0x7c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800697a:	8973      	ldrh	r3, [r6, #10]
 800697c:	3b01      	subs	r3, #1
 800697e:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 8006982:	d114      	bne.n	80069ae <dir_next.constprop.0+0x6e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8006984:	f7ff feec 	bl	8006760 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8006988:	2801      	cmp	r0, #1
 800698a:	d91e      	bls.n	80069ca <dir_next.constprop.0+0x8a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d01a      	beq.n	80069c6 <dir_next.constprop.0+0x86>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8006990:	69f3      	ldr	r3, [r6, #28]
 8006992:	4298      	cmp	r0, r3
 8006994:	d2e3      	bcs.n	800695e <dir_next.constprop.0+0x1e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8006996:	3b02      	subs	r3, #2
	clst -= 2;		/* Cluster number is origin from 2 */
 8006998:	1e82      	subs	r2, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800699a:	429a      	cmp	r2, r3
				dp->clust = clst;		/* Initialize data for new cluster */
 800699c:	6360      	str	r0, [r4, #52]	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800699e:	d204      	bcs.n	80069aa <dir_next.constprop.0+0x6a>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 80069a0:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 80069a4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80069a6:	fb02 3808 	mla	r8, r2, r8, r3
				dp->sect = clst2sect(fs, clst);
 80069aa:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80069ae:	363c      	adds	r6, #60	; 0x3c
 80069b0:	443e      	add	r6, r7
	return FR_OK;
 80069b2:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80069b4:	63e6      	str	r6, [r4, #60]	; 0x3c
	dp->dptr = ofs;						/* Current entry */
 80069b6:	6325      	str	r5, [r4, #48]	; 0x30
}
 80069b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80069bc:	8933      	ldrh	r3, [r6, #8]
 80069be:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80069c2:	d8f4      	bhi.n	80069ae <dir_next.constprop.0+0x6e>
 80069c4:	e7cb      	b.n	800695e <dir_next.constprop.0+0x1e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80069c6:	2001      	movs	r0, #1
 80069c8:	e7cc      	b.n	8006964 <dir_next.constprop.0+0x24>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80069ca:	2002      	movs	r0, #2
 80069cc:	e7ca      	b.n	8006964 <dir_next.constprop.0+0x24>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80069ce:	2004      	movs	r0, #4
 80069d0:	e7c8      	b.n	8006964 <dir_next.constprop.0+0x24>
 80069d2:	bf00      	nop
	...

080069e0 <dir_read.constprop.0>:
static FRESULT dir_read (
 80069e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 80069e4:	27ff      	movs	r7, #255	; 0xff
static FRESULT dir_read (
 80069e6:	4605      	mov	r5, r0
	BYTE ord = 0xFF, sum = 0xFF;
 80069e8:	463e      	mov	r6, r7
	FRESULT res = FR_NO_FILE;
 80069ea:	2404      	movs	r4, #4
	FATFS *fs = dp->obj.fs;
 80069ec:	f8d0 8000 	ldr.w	r8, [r0]
 80069f0:	e011      	b.n	8006a16 <dir_read.constprop.0+0x36>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80069f2:	7ae2      	ldrb	r2, [r4, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80069f4:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80069f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80069fa:	71aa      	strb	r2, [r5, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80069fc:	d005      	beq.n	8006a0a <dir_read.constprop.0+0x2a>
 80069fe:	2b2e      	cmp	r3, #46	; 0x2e
 8006a00:	d003      	beq.n	8006a0a <dir_read.constprop.0+0x2a>
 8006a02:	f022 0120 	bic.w	r1, r2, #32
 8006a06:	2908      	cmp	r1, #8
 8006a08:	d131      	bne.n	8006a6e <dir_read.constprop.0+0x8e>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006a0a:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f7ff ff97 	bl	8006940 <dir_next.constprop.0>
		if (res != FR_OK) break;
 8006a12:	4604      	mov	r4, r0
 8006a14:	bb30      	cbnz	r0, 8006a64 <dir_read.constprop.0+0x84>
	while (dp->sect) {
 8006a16:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8006a18:	2900      	cmp	r1, #0
 8006a1a:	d066      	beq.n	8006aea <dir_read.constprop.0+0x10a>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a1c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8006a20:	428b      	cmp	r3, r1
 8006a22:	d004      	beq.n	8006a2e <dir_read.constprop.0+0x4e>
 8006a24:	4640      	mov	r0, r8
 8006a26:	f7ff fb03 	bl	8006030 <move_window.part.0>
		if (res != FR_OK) break;
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	b9d0      	cbnz	r0, 8006a64 <dir_read.constprop.0+0x84>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8006a2e:	6bec      	ldr	r4, [r5, #60]	; 0x3c
 8006a30:	7823      	ldrb	r3, [r4, #0]
		if (b == 0) {
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d05f      	beq.n	8006af6 <dir_read.constprop.0+0x116>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006a36:	f898 2000 	ldrb.w	r2, [r8]
 8006a3a:	2a04      	cmp	r2, #4
 8006a3c:	d1d9      	bne.n	80069f2 <dir_read.constprop.0+0x12>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 8006a3e:	2b85      	cmp	r3, #133	; 0x85
 8006a40:	d1e4      	bne.n	8006a0c <dir_read.constprop.0+0x2c>
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8006a42:	6828      	ldr	r0, [r5, #0]
	res = move_window(dp->obj.fs, dp->sect);
 8006a44:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a46:	6b83      	ldr	r3, [r0, #56]	; 0x38
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8006a48:	6b2a      	ldr	r2, [r5, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a4a:	4299      	cmp	r1, r3
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8006a4c:	6907      	ldr	r7, [r0, #16]
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8006a4e:	64ea      	str	r2, [r5, #76]	; 0x4c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a50:	d004      	beq.n	8006a5c <dir_read.constprop.0+0x7c>
 8006a52:	f7ff faed 	bl	8006030 <move_window.part.0>
	if (res != FR_OK) return res;
 8006a56:	4604      	mov	r4, r0
 8006a58:	b920      	cbnz	r0, 8006a64 <dir_read.constprop.0+0x84>
 8006a5a:	6bec      	ldr	r4, [r5, #60]	; 0x3c
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 8006a5c:	7822      	ldrb	r2, [r4, #0]
 8006a5e:	2a85      	cmp	r2, #133	; 0x85
 8006a60:	d04b      	beq.n	8006afa <dir_read.constprop.0+0x11a>
 8006a62:	2402      	movs	r4, #2
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006a64:	2300      	movs	r3, #0
 8006a66:	63ab      	str	r3, [r5, #56]	; 0x38
}
 8006a68:	4620      	mov	r0, r4
 8006a6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (attr == AM_LFN) {			/* An LFN entry is found */
 8006a6e:	2a0f      	cmp	r2, #15
 8006a70:	f040 80bd 	bne.w	8006bee <dir_read.constprop.0+0x20e>
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
 8006a74:	065a      	lsls	r2, r3, #25
 8006a76:	d535      	bpl.n	8006ae4 <dir_read.constprop.0+0x104>
						dp->blk_ofs = dp->dptr;
 8006a78:	6b2a      	ldr	r2, [r5, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
 8006a7a:	7b67      	ldrb	r7, [r4, #13]
						b &= (BYTE)~LLEF; ord = b;
 8006a7c:	f003 06bf 	and.w	r6, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8006a80:	64ea      	str	r2, [r5, #76]	; 0x4c
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006a82:	7b63      	ldrb	r3, [r4, #13]
 8006a84:	42bb      	cmp	r3, r7
 8006a86:	d1c0      	bne.n	8006a0a <dir_read.constprop.0+0x2a>
	rv = rv << 8 | ptr[0];
 8006a88:	7ee2      	ldrb	r2, [r4, #27]
 8006a8a:	7ea3      	ldrb	r3, [r4, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8006a8c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8006a90:	d1bb      	bne.n	8006a0a <dir_read.constprop.0+0x2a>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006a92:	2201      	movs	r2, #1
 8006a94:	7821      	ldrb	r1, [r4, #0]
 8006a96:	4879      	ldr	r0, [pc, #484]	; (8006c7c <dir_read.constprop.0+0x29c>)
 8006a98:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006a9c:	3901      	subs	r1, #1
 8006a9e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006aa2:	f64f 7aff 	movw	sl, #65535	; 0xffff
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006aa6:	4694      	mov	ip, r2
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006aa8:	f8d8 900c 	ldr.w	r9, [r8, #12]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006aac:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006ab0:	f100 0e0c 	add.w	lr, r0, #12
 8006ab4:	e00a      	b.n	8006acc <dir_read.constprop.0+0xec>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
 8006ab6:	29fe      	cmp	r1, #254	; 0xfe
 8006ab8:	d8a7      	bhi.n	8006a0a <dir_read.constprop.0+0x2a>
	rv = rv << 8 | ptr[0];
 8006aba:	469c      	mov	ip, r3
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006abc:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
 8006ac0:	3101      	adds	r1, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006ac2:	4570      	cmp	r0, lr
 8006ac4:	f000 8087 	beq.w	8006bd6 <dir_read.constprop.0+0x1f6>
 8006ac8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006acc:	18a3      	adds	r3, r4, r2
	rv = rv << 8 | ptr[0];
 8006ace:	f893 b001 	ldrb.w	fp, [r3, #1]
 8006ad2:	5ca3      	ldrb	r3, [r4, r2]
 8006ad4:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
		if (wc != 0) {
 8006ad8:	f1bc 0f00 	cmp.w	ip, #0
 8006adc:	d1eb      	bne.n	8006ab6 <dir_read.constprop.0+0xd6>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006ade:	4553      	cmp	r3, sl
 8006ae0:	d0ef      	beq.n	8006ac2 <dir_read.constprop.0+0xe2>
 8006ae2:	e792      	b.n	8006a0a <dir_read.constprop.0+0x2a>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006ae4:	42b3      	cmp	r3, r6
 8006ae6:	d190      	bne.n	8006a0a <dir_read.constprop.0+0x2a>
 8006ae8:	e7cb      	b.n	8006a82 <dir_read.constprop.0+0xa2>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006aea:	2c00      	cmp	r4, #0
 8006aec:	d1ba      	bne.n	8006a64 <dir_read.constprop.0+0x84>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006aee:	2400      	movs	r4, #0
}
 8006af0:	4620      	mov	r0, r4
 8006af2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006af6:	2404      	movs	r4, #4
 8006af8:	e7b4      	b.n	8006a64 <dir_read.constprop.0+0x84>
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8006afa:	463b      	mov	r3, r7
 8006afc:	f107 0620 	add.w	r6, r7, #32
 8006b00:	e001      	b.n	8006b06 <dir_read.constprop.0+0x126>
 8006b02:	f814 2f01 	ldrb.w	r2, [r4, #1]!
			*d++ = *s++;
 8006b06:	f803 2b01 	strb.w	r2, [r3], #1
		} while (--cnt);
 8006b0a:	429e      	cmp	r6, r3
 8006b0c:	d1f9      	bne.n	8006b02 <dir_read.constprop.0+0x122>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8006b0e:	f897 9001 	ldrb.w	r9, [r7, #1]
 8006b12:	f109 0901 	add.w	r9, r9, #1
 8006b16:	ea4f 1949 	mov.w	r9, r9, lsl #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8006b1a:	f1a9 0360 	sub.w	r3, r9, #96	; 0x60
 8006b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b22:	d89e      	bhi.n	8006a62 <dir_read.constprop.0+0x82>
	res = dir_next(dp, 0);
 8006b24:	4628      	mov	r0, r5
 8006b26:	f7ff ff0b 	bl	8006940 <dir_next.constprop.0>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8006b2a:	2804      	cmp	r0, #4
	res = dir_next(dp, 0);
 8006b2c:	4604      	mov	r4, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8006b2e:	d098      	beq.n	8006a62 <dir_read.constprop.0+0x82>
	if (res != FR_OK) return res;
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d197      	bne.n	8006a64 <dir_read.constprop.0+0x84>
	res = move_window(dp->obj.fs, dp->sect);
 8006b34:	6828      	ldr	r0, [r5, #0]
 8006b36:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b38:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006b3a:	4299      	cmp	r1, r3
 8006b3c:	d004      	beq.n	8006b48 <dir_read.constprop.0+0x168>
 8006b3e:	f7ff fa77 	bl	8006030 <move_window.part.0>
	if (res != FR_OK) return res;
 8006b42:	4604      	mov	r4, r0
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d18d      	bne.n	8006a64 <dir_read.constprop.0+0x84>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 8006b48:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006b4a:	781a      	ldrb	r2, [r3, #0]
 8006b4c:	2ac0      	cmp	r2, #192	; 0xc0
 8006b4e:	d188      	bne.n	8006a62 <dir_read.constprop.0+0x82>
 8006b50:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006b54:	e001      	b.n	8006b5a <dir_read.constprop.0+0x17a>
 8006b56:	f813 2f01 	ldrb.w	r2, [r3, #1]!
			*d++ = *s++;
 8006b5a:	f806 2b01 	strb.w	r2, [r6], #1
		} while (--cnt);
 8006b5e:	42b1      	cmp	r1, r6
 8006b60:	d1f9      	bne.n	8006b56 <dir_read.constprop.0+0x176>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8006b62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b66:	4a46      	ldr	r2, [pc, #280]	; (8006c80 <dir_read.constprop.0+0x2a0>)
 8006b68:	332c      	adds	r3, #44	; 0x2c
 8006b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6e:	08db      	lsrs	r3, r3, #3
 8006b70:	ebb9 1f43 	cmp.w	r9, r3, lsl #5
 8006b74:	f4ff af75 	bcc.w	8006a62 <dir_read.constprop.0+0x82>
	i = 2 * SZDIRE;	/* Name offset to load */
 8006b78:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8006b7c:	f107 0660 	add.w	r6, r7, #96	; 0x60
 8006b80:	e005      	b.n	8006b8e <dir_read.constprop.0+0x1ae>
	} while ((i += SZDIRE) < sz_ent);
 8006b82:	f10a 0a20 	add.w	sl, sl, #32
 8006b86:	45d1      	cmp	r9, sl
 8006b88:	f106 0620 	add.w	r6, r6, #32
 8006b8c:	d946      	bls.n	8006c1c <dir_read.constprop.0+0x23c>
		res = dir_next(dp, 0);
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f7ff fed6 	bl	8006940 <dir_next.constprop.0>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8006b94:	2804      	cmp	r0, #4
		res = dir_next(dp, 0);
 8006b96:	4604      	mov	r4, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8006b98:	f43f af63 	beq.w	8006a62 <dir_read.constprop.0+0x82>
		if (res != FR_OK) return res;
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f47f af61 	bne.w	8006a64 <dir_read.constprop.0+0x84>
		res = move_window(dp->obj.fs, dp->sect);
 8006ba2:	6828      	ldr	r0, [r5, #0]
 8006ba4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ba6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006ba8:	4299      	cmp	r1, r3
 8006baa:	d002      	beq.n	8006bb2 <dir_read.constprop.0+0x1d2>
 8006bac:	f7ff fa40 	bl	8006030 <move_window.part.0>
		if (res != FR_OK) return res;
 8006bb0:	bb90      	cbnz	r0, 8006c18 <dir_read.constprop.0+0x238>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 8006bb2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8006bb4:	7811      	ldrb	r1, [r2, #0]
 8006bb6:	29c1      	cmp	r1, #193	; 0xc1
 8006bb8:	f47f af53 	bne.w	8006a62 <dir_read.constprop.0+0x82>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8006bbc:	f5ba 7f18 	cmp.w	sl, #608	; 0x260
 8006bc0:	d2df      	bcs.n	8006b82 <dir_read.constprop.0+0x1a2>
 8006bc2:	f1a6 0320 	sub.w	r3, r6, #32
 8006bc6:	e001      	b.n	8006bcc <dir_read.constprop.0+0x1ec>
 8006bc8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
			*d++ = *s++;
 8006bcc:	f803 1b01 	strb.w	r1, [r3], #1
		} while (--cnt);
 8006bd0:	42b3      	cmp	r3, r6
 8006bd2:	d1f9      	bne.n	8006bc8 <dir_read.constprop.0+0x1e8>
 8006bd4:	e7d5      	b.n	8006b82 <dir_read.constprop.0+0x1a2>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006bd6:	7823      	ldrb	r3, [r4, #0]
 8006bd8:	065b      	lsls	r3, r3, #25
 8006bda:	d505      	bpl.n	8006be8 <dir_read.constprop.0+0x208>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
 8006bdc:	29fe      	cmp	r1, #254	; 0xfe
 8006bde:	f63f af14 	bhi.w	8006a0a <dir_read.constprop.0+0x2a>
		lfnbuf[i] = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006be8:	3e01      	subs	r6, #1
 8006bea:	b2f6      	uxtb	r6, r6
 8006bec:	e70e      	b.n	8006a0c <dir_read.constprop.0+0x2c>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006bee:	b976      	cbnz	r6, 8006c0e <dir_read.constprop.0+0x22e>
 8006bf0:	f104 010b 	add.w	r1, r4, #11
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006bf4:	f814 2b01 	ldrb.w	r2, [r4], #1
 8006bf8:	01f3      	lsls	r3, r6, #7
 8006bfa:	ea43 0656 	orr.w	r6, r3, r6, lsr #1
 8006bfe:	4416      	add	r6, r2
	} while (--n);
 8006c00:	428c      	cmp	r4, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006c02:	f006 06ff 	and.w	r6, r6, #255	; 0xff
	} while (--n);
 8006c06:	d1f5      	bne.n	8006bf4 <dir_read.constprop.0+0x214>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006c08:	42be      	cmp	r6, r7
 8006c0a:	f43f af70 	beq.w	8006aee <dir_read.constprop.0+0x10e>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c12:	2400      	movs	r4, #0
 8006c14:	64eb      	str	r3, [r5, #76]	; 0x4c
 8006c16:	e727      	b.n	8006a68 <dir_read.constprop.0+0x88>
 8006c18:	4604      	mov	r4, r0
 8006c1a:	e723      	b.n	8006a64 <dir_read.constprop.0+0x84>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 8006c1c:	f5ba 7f18 	cmp.w	sl, #608	; 0x260
 8006c20:	d825      	bhi.n	8006c6e <dir_read.constprop.0+0x28e>
	for (i = sum = 0; i < szblk; i++) {
 8006c22:	2300      	movs	r3, #0
 8006c24:	4619      	mov	r1, r3
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8006c26:	7878      	ldrb	r0, [r7, #1]
 8006c28:	3001      	adds	r0, #1
 8006c2a:	0140      	lsls	r0, r0, #5
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 8006c2c:	2902      	cmp	r1, #2
 8006c2e:	d10d      	bne.n	8006c4c <dir_read.constprop.0+0x26c>
	for (i = sum = 0; i < szblk; i++) {
 8006c30:	2106      	movs	r1, #6
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8006c32:	793a      	ldrb	r2, [r7, #4]
 8006c34:	797e      	ldrb	r6, [r7, #5]
 8006c36:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 8006c3a:	b292      	uxth	r2, r2
 8006c3c:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 8006c40:	f3c3 024e 	ubfx	r2, r3, #1, #15
 8006c44:	eb06 33c3 	add.w	r3, r6, r3, lsl #15
 8006c48:	4413      	add	r3, r2
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	5c7a      	ldrb	r2, [r7, r1]
	for (i = sum = 0; i < szblk; i++) {
 8006c4e:	3101      	adds	r1, #1
 8006c50:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 8006c54:	b292      	uxth	r2, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8006c56:	eb02 0353 	add.w	r3, r2, r3, lsr #1
	for (i = sum = 0; i < szblk; i++) {
 8006c5a:	4288      	cmp	r0, r1
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8006c5c:	b29b      	uxth	r3, r3
	for (i = sum = 0; i < szblk; i++) {
 8006c5e:	d8e5      	bhi.n	8006c2c <dir_read.constprop.0+0x24c>
	rv = rv << 8 | ptr[0];
 8006c60:	78f9      	ldrb	r1, [r7, #3]
 8006c62:	78ba      	ldrb	r2, [r7, #2]
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8006c64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	f47f aefa 	bne.w	8006a62 <dir_read.constprop.0+0x82>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8006c6e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006c72:	791b      	ldrb	r3, [r3, #4]
 8006c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c78:	71ab      	strb	r3, [r5, #6]
 8006c7a:	e6f5      	b.n	8006a68 <dir_read.constprop.0+0x88>
 8006c7c:	0800dbb4 	.word	0x0800dbb4
 8006c80:	88888889 	.word	0x88888889
	...

08006c90 <chThdDequeueNextI.constprop.0>:
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8006c90:	4603      	mov	r3, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006c92:	6800      	ldr	r0, [r0, #0]
  if (queue_notempty(tqp)) {
 8006c94:	4283      	cmp	r3, r0
 8006c96:	d006      	beq.n	8006ca6 <chThdDequeueNextI.constprop.0+0x16>
  tp->u.rdymsg = msg;
 8006c98:	2100      	movs	r1, #0
  tqp->next             = tp->queue.next;
 8006c9a:	6802      	ldr	r2, [r0, #0]
 8006c9c:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8006c9e:	6053      	str	r3, [r2, #4]
 8006ca0:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8006ca2:	f003 ba75 	b.w	800a190 <chSchReadyI>
}
 8006ca6:	4770      	bx	lr
	...

08006cb0 <chMBPostI.constprop.0>:

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <chMBPostI.constprop.0+0x40>)
 8006cb2:	7d1a      	ldrb	r2, [r3, #20]
 8006cb4:	b9c2      	cbnz	r2, 8006ce8 <chMBPostI.constprop.0+0x38>
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006cb6:	691a      	ldr	r2, [r3, #16]
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	e9d3 6100 	ldrd	r6, r1, [r3]
  return (size_t)(mbp->top - mbp->buffer);
 8006cbe:	1b8c      	subs	r4, r1, r6
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8006cc0:	ebb2 0fa4 	cmp.w	r2, r4, asr #2
 8006cc4:	d00d      	beq.n	8006ce2 <chMBPostI.constprop.0+0x32>
    *mbp->wrptr++ = msg;
 8006cc6:	689d      	ldr	r5, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;
 8006cc8:	3201      	adds	r2, #1
    *mbp->wrptr++ = msg;
 8006cca:	1d2c      	adds	r4, r5, #4
 8006ccc:	609c      	str	r4, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
 8006cce:	42a1      	cmp	r1, r4
    *mbp->wrptr++ = msg;
 8006cd0:	6028      	str	r0, [r5, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8006cd2:	4808      	ldr	r0, [pc, #32]	; (8006cf4 <chMBPostI.constprop.0+0x44>)
      mbp->wrptr = mbp->buffer;
 8006cd4:	bf98      	it	ls
 8006cd6:	609e      	strls	r6, [r3, #8]
    mbp->cnt++;
 8006cd8:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8006cda:	f7ff ffd9 	bl	8006c90 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 8006cde:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8006ce0:	bd70      	pop	{r4, r5, r6, pc}
  return MSG_TIMEOUT;
 8006ce2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_RESET;
 8006ce8:	f06f 0001 	mvn.w	r0, #1
}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000874 	.word	0x20000874
 8006cf4:	20000894 	.word	0x20000894
	...

08006d00 <chMBPostAheadTimeout.constprop.0>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	4606      	mov	r6, r0
 8006d04:	460d      	mov	r5, r1
 8006d06:	2320      	movs	r3, #32
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	4c15      	ldr	r4, [pc, #84]	; (8006d64 <chMBPostAheadTimeout.constprop.0+0x64>)

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8006d0e:	f104 0718 	add.w	r7, r4, #24
 8006d12:	e00b      	b.n	8006d2c <chMBPostAheadTimeout.constprop.0+0x2c>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006d14:	6923      	ldr	r3, [r4, #16]
 8006d16:	e9d4 2100 	ldrd	r2, r1, [r4]
  return (size_t)(mbp->top - mbp->buffer);
 8006d1a:	1a88      	subs	r0, r1, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8006d1c:	ebb3 0fa0 	cmp.w	r3, r0, asr #2
 8006d20:	d10d      	bne.n	8006d3e <chMBPostAheadTimeout.constprop.0+0x3e>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8006d22:	4629      	mov	r1, r5
 8006d24:	4638      	mov	r0, r7
 8006d26:	f004 f95b 	bl	800afe0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8006d2a:	b920      	cbnz	r0, 8006d36 <chMBPostAheadTimeout.constprop.0+0x36>
    if (mbp->reset) {
 8006d2c:	7d23      	ldrb	r3, [r4, #20]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0f0      	beq.n	8006d14 <chMBPostAheadTimeout.constprop.0+0x14>
      return MSG_RESET;
 8006d32:	f06f 0001 	mvn.w	r0, #1
 8006d36:	2300      	movs	r3, #0
 8006d38:	f383 8811 	msr	BASEPRI, r3
}
 8006d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (--mbp->rdptr < mbp->buffer) {
 8006d3e:	68e0      	ldr	r0, [r4, #12]
      mbp->cnt++;
 8006d40:	3301      	adds	r3, #1
      if (--mbp->rdptr < mbp->buffer) {
 8006d42:	3804      	subs	r0, #4
 8006d44:	4282      	cmp	r2, r0
        mbp->rdptr = mbp->top - 1;
 8006d46:	bf88      	it	hi
 8006d48:	1f08      	subhi	r0, r1, #4
 8006d4a:	60e0      	str	r0, [r4, #12]
      *mbp->rdptr = msg;
 8006d4c:	6006      	str	r6, [r0, #0]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8006d4e:	4806      	ldr	r0, [pc, #24]	; (8006d68 <chMBPostAheadTimeout.constprop.0+0x68>)
      mbp->cnt++;
 8006d50:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8006d52:	f7ff ff9d 	bl	8006c90 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 8006d56:	f003 f903 	bl	8009f60 <chSchRescheduleS>
      return MSG_OK;
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f383 8811 	msr	BASEPRI, r3
}
 8006d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d64:	20000874 	.word	0x20000874
 8006d68:	20000894 	.word	0x20000894
 8006d6c:	00000000 	.word	0x00000000

08006d70 <oslib_test_002_001_execute.lto_priv.0>:
  test_set_step(1);
 8006d70:	2301      	movs	r3, #1
static void oslib_test_002_001_execute(void) {
 8006d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8006d76:	4fbb      	ldr	r7, [pc, #748]	; (8007064 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
static void oslib_test_002_001_execute(void) {
 8006d78:	b082      	sub	sp, #8
 8006d7a:	2620      	movs	r6, #32
  test_set_step(1);
 8006d7c:	603b      	str	r3, [r7, #0]
 8006d7e:	f386 8811 	msr	BASEPRI, r6
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006d82:	4cb9      	ldr	r4, [pc, #740]	; (8007068 <oslib_test_002_001_execute.lto_priv.0+0x2f8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8006d84:	49b9      	ldr	r1, [pc, #740]	; (800706c <oslib_test_002_001_execute.lto_priv.0+0x2fc>)
 8006d86:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8006d88:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d8c:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006d8e:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8006d92:	f1a0 0004 	sub.w	r0, r0, #4
 8006d96:	fab0 f080 	clz	r0, r0
 8006d9a:	0940      	lsrs	r0, r0, #5
 8006d9c:	f7f9 fe50 	bl	8000a40 <_test_assert>
 8006da0:	b128      	cbz	r0, 8006dae <oslib_test_002_001_execute.lto_priv.0+0x3e>
 8006da2:	2300      	movs	r3, #0
 8006da4:	f383 8811 	msr	BASEPRI, r3
}
 8006da8:	b002      	add	sp, #8
 8006daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dae:	4605      	mov	r5, r0
 8006db0:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8006db4:	2302      	movs	r3, #2
 8006db6:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8006db8:	f7fa f9aa 	bl	8001110 <chMBReset.constprop.0>
 8006dbc:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8006dc0:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006dc4:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8006dc6:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006dc8:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006dcc:	f1a0 0004 	sub.w	r0, r0, #4
 8006dd0:	fab0 f080 	clz	r0, r0
 8006dd4:	49a6      	ldr	r1, [pc, #664]	; (8007070 <oslib_test_002_001_execute.lto_priv.0+0x300>)
 8006dd6:	0940      	lsrs	r0, r0, #5
 8006dd8:	f7f9 fe32 	bl	8000a40 <_test_assert>
 8006ddc:	4680      	mov	r8, r0
 8006dde:	b988      	cbnz	r0, 8006e04 <oslib_test_002_001_execute.lto_priv.0+0x94>
 8006de0:	f380 8811 	msr	BASEPRI, r0
 8006de4:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8006de8:	6920      	ldr	r0, [r4, #16]
 8006dea:	49a2      	ldr	r1, [pc, #648]	; (8007074 <oslib_test_002_001_execute.lto_priv.0+0x304>)
 8006dec:	fab0 f080 	clz	r0, r0
 8006df0:	0940      	lsrs	r0, r0, #5
 8006df2:	f7f9 fe25 	bl	8000a40 <_test_assert>
 8006df6:	4605      	mov	r5, r0
 8006df8:	b148      	cbz	r0, 8006e0e <oslib_test_002_001_execute.lto_priv.0+0x9e>
 8006dfa:	f388 8811 	msr	BASEPRI, r8
}
 8006dfe:	b002      	add	sp, #8
 8006e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e04:	f385 8811 	msr	BASEPRI, r5
 8006e08:	b002      	add	sp, #8
 8006e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e0e:	f380 8811 	msr	BASEPRI, r0
 8006e12:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8006e16:	6820      	ldr	r0, [r4, #0]
 8006e18:	68a3      	ldr	r3, [r4, #8]
 8006e1a:	4997      	ldr	r1, [pc, #604]	; (8007078 <oslib_test_002_001_execute.lto_priv.0+0x308>)
 8006e1c:	1ac0      	subs	r0, r0, r3
 8006e1e:	fab0 f080 	clz	r0, r0
 8006e22:	0940      	lsrs	r0, r0, #5
 8006e24:	f7f9 fe0c 	bl	8000a40 <_test_assert>
 8006e28:	4680      	mov	r8, r0
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	d1ea      	bne.n	8006e04 <oslib_test_002_001_execute.lto_priv.0+0x94>
 8006e2e:	f380 8811 	msr	BASEPRI, r0
 8006e32:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8006e36:	6820      	ldr	r0, [r4, #0]
 8006e38:	68e3      	ldr	r3, [r4, #12]
 8006e3a:	4990      	ldr	r1, [pc, #576]	; (800707c <oslib_test_002_001_execute.lto_priv.0+0x30c>)
 8006e3c:	1ac0      	subs	r0, r0, r3
 8006e3e:	fab0 f080 	clz	r0, r0
 8006e42:	0940      	lsrs	r0, r0, #5
 8006e44:	f7f9 fdfc 	bl	8000a40 <_test_assert>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d1d6      	bne.n	8006dfa <oslib_test_002_001_execute.lto_priv.0+0x8a>
 8006e4c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8006e50:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8006e52:	4601      	mov	r1, r0
 8006e54:	f04f 32ff 	mov.w	r2, #4294967295
 8006e58:	4620      	mov	r0, r4
  test_set_step(3);
 8006e5a:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8006e5c:	f004 f910 	bl	800b080 <chMBPostTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8006e60:	1c85      	adds	r5, r0, #2
 8006e62:	bf14      	ite	ne
 8006e64:	2000      	movne	r0, #0
 8006e66:	2001      	moveq	r0, #1
 8006e68:	4985      	ldr	r1, [pc, #532]	; (8007080 <oslib_test_002_001_execute.lto_priv.0+0x310>)
 8006e6a:	f7f9 fde9 	bl	8000a40 <_test_assert>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d19a      	bne.n	8006da8 <oslib_test_002_001_execute.lto_priv.0+0x38>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8006e72:	f04f 31ff 	mov.w	r1, #4294967295
 8006e76:	f7ff ff43 	bl	8006d00 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8006e7a:	1c82      	adds	r2, r0, #2
 8006e7c:	bf14      	ite	ne
 8006e7e:	2000      	movne	r0, #0
 8006e80:	2001      	moveq	r0, #1
 8006e82:	497f      	ldr	r1, [pc, #508]	; (8007080 <oslib_test_002_001_execute.lto_priv.0+0x310>)
 8006e84:	f7f9 fddc 	bl	8000a40 <_test_assert>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d18d      	bne.n	8006da8 <oslib_test_002_001_execute.lto_priv.0+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8006e8c:	a901      	add	r1, sp, #4
 8006e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e92:	4620      	mov	r0, r4
 8006e94:	f004 f8bc 	bl	800b010 <chMBFetchTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8006e98:	1c83      	adds	r3, r0, #2
 8006e9a:	bf14      	ite	ne
 8006e9c:	2000      	movne	r0, #0
 8006e9e:	2001      	moveq	r0, #1
 8006ea0:	4977      	ldr	r1, [pc, #476]	; (8007080 <oslib_test_002_001_execute.lto_priv.0+0x310>)
 8006ea2:	f7f9 fdcd 	bl	8000a40 <_test_assert>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f47f af7e 	bne.w	8006da8 <oslib_test_002_001_execute.lto_priv.0+0x38>
  test_set_step(4);
 8006eac:	2304      	movs	r3, #4
 8006eae:	2542      	movs	r5, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006eb0:	46a0      	mov	r8, r4
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006eb2:	4e74      	ldr	r6, [pc, #464]	; (8007084 <oslib_test_002_001_execute.lto_priv.0+0x314>)
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 8006eb4:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8006eb6:	603b      	str	r3, [r7, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006eb8:	4629      	mov	r1, r5
 8006eba:	f04f 32ff 	mov.w	r2, #4294967295
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	f004 f8de 	bl	800b080 <chMBPostTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006ec4:	fab0 f080 	clz	r0, r0
 8006ec8:	4631      	mov	r1, r6
 8006eca:	0940      	lsrs	r0, r0, #5
 8006ecc:	f7f9 fdb8 	bl	8000a40 <_test_assert>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8006ed0:	3501      	adds	r5, #1
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	f47f af68 	bne.w	8006da8 <oslib_test_002_001_execute.lto_priv.0+0x38>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8006ed8:	2d45      	cmp	r5, #69	; 0x45
 8006eda:	d1ed      	bne.n	8006eb8 <oslib_test_002_001_execute.lto_priv.0+0x148>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 8006edc:	f04f 31ff 	mov.w	r1, #4294967295
 8006ee0:	2041      	movs	r0, #65	; 0x41
 8006ee2:	f7ff ff0d 	bl	8006d00 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006ee6:	fab0 f080 	clz	r0, r0
 8006eea:	4966      	ldr	r1, [pc, #408]	; (8007084 <oslib_test_002_001_execute.lto_priv.0+0x314>)
 8006eec:	0940      	lsrs	r0, r0, #5
 8006eee:	f7f9 fda7 	bl	8000a40 <_test_assert>
 8006ef2:	4605      	mov	r5, r0
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f47f af57 	bne.w	8006da8 <oslib_test_002_001_execute.lto_priv.0+0x38>
  test_set_step(5);
 8006efa:	2305      	movs	r3, #5
 8006efc:	f04f 0820 	mov.w	r8, #32
 8006f00:	603b      	str	r3, [r7, #0]
 8006f02:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8006f06:	6922      	ldr	r2, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8006f08:	e9d4 1300 	ldrd	r1, r3, [r4]
 8006f0c:	1a5b      	subs	r3, r3, r1
 8006f0e:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8006f12:	bf0c      	ite	eq
 8006f14:	2001      	moveq	r0, #1
 8006f16:	2000      	movne	r0, #0
 8006f18:	495b      	ldr	r1, [pc, #364]	; (8007088 <oslib_test_002_001_execute.lto_priv.0+0x318>)
 8006f1a:	f7f9 fd91 	bl	8000a40 <_test_assert>
 8006f1e:	4606      	mov	r6, r0
 8006f20:	2800      	cmp	r0, #0
 8006f22:	f47f af6f 	bne.w	8006e04 <oslib_test_002_001_execute.lto_priv.0+0x94>
 8006f26:	f380 8811 	msr	BASEPRI, r0
 8006f2a:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8006f2e:	6920      	ldr	r0, [r4, #16]
 8006f30:	4956      	ldr	r1, [pc, #344]	; (800708c <oslib_test_002_001_execute.lto_priv.0+0x31c>)
 8006f32:	f1a0 0c04 	sub.w	ip, r0, #4
 8006f36:	f1dc 0000 	rsbs	r0, ip, #0
 8006f3a:	eb40 000c 	adc.w	r0, r0, ip
 8006f3e:	f7f9 fd7f 	bl	8000a40 <_test_assert>
 8006f42:	4605      	mov	r5, r0
 8006f44:	b110      	cbz	r0, 8006f4c <oslib_test_002_001_execute.lto_priv.0+0x1dc>
 8006f46:	f386 8811 	msr	BASEPRI, r6
 8006f4a:	e72d      	b.n	8006da8 <oslib_test_002_001_execute.lto_priv.0+0x38>
 8006f4c:	f380 8811 	msr	BASEPRI, r0
 8006f50:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8006f54:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8006f58:	1ac6      	subs	r6, r0, r3
 8006f5a:	4270      	negs	r0, r6
 8006f5c:	4170      	adcs	r0, r6
 8006f5e:	494c      	ldr	r1, [pc, #304]	; (8007090 <oslib_test_002_001_execute.lto_priv.0+0x320>)
 8006f60:	f7f9 fd6e 	bl	8000a40 <_test_assert>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	f47f af4d 	bne.w	8006e04 <oslib_test_002_001_execute.lto_priv.0+0x94>
 8006f6a:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 8006f6e:	2306      	movs	r3, #6
 8006f70:	2504      	movs	r5, #4
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8006f72:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8007068 <oslib_test_002_001_execute.lto_priv.0+0x2f8>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006f76:	4e43      	ldr	r6, [pc, #268]	; (8007084 <oslib_test_002_001_execute.lto_priv.0+0x314>)
  test_set_step(6);
 8006f78:	603b      	str	r3, [r7, #0]
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8006f7a:	a901      	add	r1, sp, #4
 8006f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f80:	4640      	mov	r0, r8
 8006f82:	f004 f845 	bl	800b010 <chMBFetchTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006f86:	fab0 f080 	clz	r0, r0
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	0940      	lsrs	r0, r0, #5
 8006f8e:	f7f9 fd57 	bl	8000a40 <_test_assert>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	f47f af08 	bne.w	8006da8 <oslib_test_002_001_execute.lto_priv.0+0x38>
      test_emit_token(msg2);
 8006f98:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006f9c:	f7f9 fdf8 	bl	8000b90 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8006fa0:	3d01      	subs	r5, #1
 8006fa2:	d1ea      	bne.n	8006f7a <oslib_test_002_001_execute.lto_priv.0+0x20a>
    test_assert_sequence("ABCD", "wrong get sequence");
 8006fa4:	493b      	ldr	r1, [pc, #236]	; (8007094 <oslib_test_002_001_execute.lto_priv.0+0x324>)
 8006fa6:	483c      	ldr	r0, [pc, #240]	; (8007098 <oslib_test_002_001_execute.lto_priv.0+0x328>)
 8006fa8:	f7f9 feca 	bl	8000d40 <_test_assert_sequence>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	f47f aefb 	bne.w	8006da8 <oslib_test_002_001_execute.lto_priv.0+0x38>
  test_set_step(7);
 8006fb2:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006fb4:	2146      	movs	r1, #70	; 0x46
 8006fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fba:	482b      	ldr	r0, [pc, #172]	; (8007068 <oslib_test_002_001_execute.lto_priv.0+0x2f8>)
  test_set_step(7);
 8006fbc:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006fbe:	f004 f85f 	bl	800b080 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006fc2:	fab0 f080 	clz	r0, r0
 8006fc6:	492f      	ldr	r1, [pc, #188]	; (8007084 <oslib_test_002_001_execute.lto_priv.0+0x314>)
 8006fc8:	0940      	lsrs	r0, r0, #5
 8006fca:	f7f9 fd39 	bl	8000a40 <_test_assert>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	f47f aeea 	bne.w	8006da8 <oslib_test_002_001_execute.lto_priv.0+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8006fd4:	a901      	add	r1, sp, #4
 8006fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fda:	4823      	ldr	r0, [pc, #140]	; (8007068 <oslib_test_002_001_execute.lto_priv.0+0x2f8>)
 8006fdc:	f004 f818 	bl	800b010 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006fe0:	fab0 f080 	clz	r0, r0
 8006fe4:	4927      	ldr	r1, [pc, #156]	; (8007084 <oslib_test_002_001_execute.lto_priv.0+0x314>)
 8006fe6:	0940      	lsrs	r0, r0, #5
 8006fe8:	f7f9 fd2a 	bl	8000a40 <_test_assert>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	f47f aedb 	bne.w	8006da8 <oslib_test_002_001_execute.lto_priv.0+0x38>
  test_set_step(8);
 8006ff2:	2308      	movs	r3, #8
 8006ff4:	2620      	movs	r6, #32
 8006ff6:	603b      	str	r3, [r7, #0]
 8006ff8:	f386 8811 	msr	BASEPRI, r6
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006ffc:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8006ffe:	e9d4 1200 	ldrd	r1, r2, [r4]
 8007002:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8007004:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8007008:	1f19      	subs	r1, r3, #4
 800700a:	4248      	negs	r0, r1
 800700c:	4148      	adcs	r0, r1
 800700e:	4918      	ldr	r1, [pc, #96]	; (8007070 <oslib_test_002_001_execute.lto_priv.0+0x300>)
 8007010:	f7f9 fd16 	bl	8000a40 <_test_assert>
 8007014:	2800      	cmp	r0, #0
 8007016:	f47f aef5 	bne.w	8006e04 <oslib_test_002_001_execute.lto_priv.0+0x94>
 800701a:	f385 8811 	msr	BASEPRI, r5
 800701e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8007022:	6920      	ldr	r0, [r4, #16]
 8007024:	4913      	ldr	r1, [pc, #76]	; (8007074 <oslib_test_002_001_execute.lto_priv.0+0x304>)
 8007026:	fab0 f080 	clz	r0, r0
 800702a:	0940      	lsrs	r0, r0, #5
 800702c:	f7f9 fd08 	bl	8000a40 <_test_assert>
 8007030:	2800      	cmp	r0, #0
 8007032:	f47f aee7 	bne.w	8006e04 <oslib_test_002_001_execute.lto_priv.0+0x94>
 8007036:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800703a:	6820      	ldr	r0, [r4, #0]
 800703c:	68a3      	ldr	r3, [r4, #8]
 800703e:	490e      	ldr	r1, [pc, #56]	; (8007078 <oslib_test_002_001_execute.lto_priv.0+0x308>)
 8007040:	1ac2      	subs	r2, r0, r3
 8007042:	4250      	negs	r0, r2
 8007044:	4150      	adcs	r0, r2
 8007046:	f7f9 fcfb 	bl	8000a40 <_test_assert>
 800704a:	2800      	cmp	r0, #0
 800704c:	f47f aeac 	bne.w	8006da8 <oslib_test_002_001_execute.lto_priv.0+0x38>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8007050:	6820      	ldr	r0, [r4, #0]
 8007052:	68e3      	ldr	r3, [r4, #12]
 8007054:	4909      	ldr	r1, [pc, #36]	; (800707c <oslib_test_002_001_execute.lto_priv.0+0x30c>)
 8007056:	1ac3      	subs	r3, r0, r3
 8007058:	4258      	negs	r0, r3
 800705a:	4158      	adcs	r0, r3
 800705c:	f7f9 fcf0 	bl	8000a40 <_test_assert>
 8007060:	e6a2      	b.n	8006da8 <oslib_test_002_001_execute.lto_priv.0+0x38>
 8007062:	bf00      	nop
 8007064:	20001cf4 	.word	0x20001cf4
 8007068:	20000874 	.word	0x20000874
 800706c:	0800d238 	.word	0x0800d238
 8007070:	0800d7c8 	.word	0x0800d7c8
 8007074:	0800d7d4 	.word	0x0800d7d4
 8007078:	0800d7e0 	.word	0x0800d7e0
 800707c:	0800d804 	.word	0x0800d804
 8007080:	0800d828 	.word	0x0800d828
 8007084:	0800d3ac 	.word	0x0800d3ac
 8007088:	0800d83c 	.word	0x0800d83c
 800708c:	0800d848 	.word	0x0800d848
 8007090:	0800d854 	.word	0x0800d854
 8007094:	0800d86c 	.word	0x0800d86c
 8007098:	0800d368 	.word	0x0800d368
 800709c:	00000000 	.word	0x00000000

080070a0 <chMBPostAheadI.constprop.0>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 80070a0:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 80070a2:	4b0f      	ldr	r3, [pc, #60]	; (80070e0 <chMBPostAheadI.constprop.0+0x40>)
 80070a4:	7d1a      	ldrb	r2, [r3, #20]
 80070a6:	b9ba      	cbnz	r2, 80070d8 <chMBPostAheadI.constprop.0+0x38>
 80070a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80070ac:	6919      	ldr	r1, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80070ae:	1b2a      	subs	r2, r5, r4
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80070b0:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 80070b4:	d00d      	beq.n	80070d2 <chMBPostAheadI.constprop.0+0x32>
    if (--mbp->rdptr < mbp->buffer) {
 80070b6:	68da      	ldr	r2, [r3, #12]
      mbp->rdptr = mbp->top - 1;
    }
    *mbp->rdptr = msg;
    mbp->cnt++;
 80070b8:	3101      	adds	r1, #1
    if (--mbp->rdptr < mbp->buffer) {
 80070ba:	3a04      	subs	r2, #4
 80070bc:	4294      	cmp	r4, r2
      mbp->rdptr = mbp->top - 1;
 80070be:	bf88      	it	hi
 80070c0:	1f2a      	subhi	r2, r5, #4
 80070c2:	60da      	str	r2, [r3, #12]
    *mbp->rdptr = msg;
 80070c4:	6010      	str	r0, [r2, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80070c6:	4807      	ldr	r0, [pc, #28]	; (80070e4 <chMBPostAheadI.constprop.0+0x44>)
    mbp->cnt++;
 80070c8:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80070ca:	f7ff fde1 	bl	8006c90 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 80070ce:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 80070d0:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 80070d2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 80070d8:	f06f 0001 	mvn.w	r0, #1
}
 80070dc:	bd38      	pop	{r3, r4, r5, pc}
 80070de:	bf00      	nop
 80070e0:	20000874 	.word	0x20000874
 80070e4:	20000894 	.word	0x20000894
	...

080070f0 <chMBFetchI.constprop.0>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 80070f0:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 80070f2:	4b0f      	ldr	r3, [pc, #60]	; (8007130 <chMBFetchI.constprop.0+0x40>)
 80070f4:	7d1a      	ldrb	r2, [r3, #20]
 80070f6:	b9ba      	cbnz	r2, 8007128 <chMBFetchI.constprop.0+0x38>
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	b192      	cbz	r2, 8007122 <chMBFetchI.constprop.0+0x32>
    *msgp = *mbp->rdptr++;
 80070fc:	68dc      	ldr	r4, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
 80070fe:	685d      	ldr	r5, [r3, #4]
    *msgp = *mbp->rdptr++;
 8007100:	1d21      	adds	r1, r4, #4
    if (mbp->rdptr >= mbp->top) {
 8007102:	42a9      	cmp	r1, r5
    *msgp = *mbp->rdptr++;
 8007104:	6824      	ldr	r4, [r4, #0]
 8007106:	60d9      	str	r1, [r3, #12]
      mbp->rdptr = mbp->buffer;
 8007108:	bf28      	it	cs
 800710a:	6819      	ldrcs	r1, [r3, #0]
    *msgp = *mbp->rdptr++;
 800710c:	6004      	str	r4, [r0, #0]
    }
    mbp->cnt--;
 800710e:	f102 32ff 	add.w	r2, r2, #4294967295

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8007112:	4808      	ldr	r0, [pc, #32]	; (8007134 <chMBFetchI.constprop.0+0x44>)
      mbp->rdptr = mbp->buffer;
 8007114:	bf28      	it	cs
 8007116:	60d9      	strcs	r1, [r3, #12]
    mbp->cnt--;
 8007118:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 800711a:	f7ff fdb9 	bl	8006c90 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 800711e:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8007120:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8007122:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007126:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8007128:	f06f 0001 	mvn.w	r0, #1
}
 800712c:	bd38      	pop	{r3, r4, r5, pc}
 800712e:	bf00      	nop
 8007130:	20000874 	.word	0x20000874
 8007134:	2000088c 	.word	0x2000088c
	...

08007140 <oslib_test_002_003_execute.lto_priv.0>:
}

static void oslib_test_002_003_execute(void) {
 8007140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007144:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8007260 <oslib_test_002_003_execute.lto_priv.0+0x120>
  msg_t msg1, msg2;
  unsigned i;

  /* [2.3.1] Filling the mailbox.*/
  test_set_step(1);
 8007148:	2301      	movs	r3, #1
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800714a:	4646      	mov	r6, r8
  test_set_step(1);
 800714c:	2442      	movs	r4, #66	; 0x42
 800714e:	4f42      	ldr	r7, [pc, #264]	; (8007258 <oslib_test_002_003_execute.lto_priv.0+0x118>)
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8007150:	4d42      	ldr	r5, [pc, #264]	; (800725c <oslib_test_002_003_execute.lto_priv.0+0x11c>)
static void oslib_test_002_003_execute(void) {
 8007152:	b082      	sub	sp, #8
  test_set_step(1);
 8007154:	603b      	str	r3, [r7, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8007156:	4621      	mov	r1, r4
 8007158:	f04f 32ff 	mov.w	r2, #4294967295
 800715c:	4630      	mov	r0, r6
 800715e:	f003 ff8f 	bl	800b080 <chMBPostTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8007162:	fab0 f080 	clz	r0, r0
 8007166:	4629      	mov	r1, r5
 8007168:	0940      	lsrs	r0, r0, #5
 800716a:	f7f9 fc69 	bl	8000a40 <_test_assert>
    for (i = 0; i < MB_SIZE; i++) {
 800716e:	3401      	adds	r4, #1
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8007170:	b990      	cbnz	r0, 8007198 <oslib_test_002_003_execute.lto_priv.0+0x58>
    for (i = 0; i < MB_SIZE; i++) {
 8007172:	2c46      	cmp	r4, #70	; 0x46
 8007174:	d1ef      	bne.n	8007156 <oslib_test_002_003_execute.lto_priv.0+0x16>
  }
  test_end_step(1);

  /* [2.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 8007176:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8007178:	2201      	movs	r2, #1
 800717a:	2158      	movs	r1, #88	; 0x58
 800717c:	4838      	ldr	r0, [pc, #224]	; (8007260 <oslib_test_002_003_execute.lto_priv.0+0x120>)
  test_set_step(2);
 800717e:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8007180:	f003 ff7e 	bl	800b080 <chMBPostTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8007184:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8007188:	fab0 f080 	clz	r0, r0
 800718c:	4933      	ldr	r1, [pc, #204]	; (800725c <oslib_test_002_003_execute.lto_priv.0+0x11c>)
 800718e:	0940      	lsrs	r0, r0, #5
 8007190:	f7f9 fc56 	bl	8000a40 <_test_assert>
 8007194:	4604      	mov	r4, r0
 8007196:	b110      	cbz	r0, 800719e <oslib_test_002_003_execute.lto_priv.0+0x5e>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
  test_end_step(4);
}
 8007198:	b002      	add	sp, #8
 800719a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800719e:	2520      	movs	r5, #32
 80071a0:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostI(&mb1, 'X');
 80071a4:	2058      	movs	r0, #88	; 0x58
 80071a6:	f7ff fd83 	bl	8006cb0 <chMBPostI.constprop.0>
 80071aa:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80071ae:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80071b2:	fab0 f080 	clz	r0, r0
 80071b6:	4929      	ldr	r1, [pc, #164]	; (800725c <oslib_test_002_003_execute.lto_priv.0+0x11c>)
 80071b8:	0940      	lsrs	r0, r0, #5
 80071ba:	f7f9 fc41 	bl	8000a40 <_test_assert>
 80071be:	2800      	cmp	r0, #0
 80071c0:	d1ea      	bne.n	8007198 <oslib_test_002_003_execute.lto_priv.0+0x58>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 80071c2:	2101      	movs	r1, #1
 80071c4:	2058      	movs	r0, #88	; 0x58
 80071c6:	f7ff fd9b 	bl	8006d00 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80071ca:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80071ce:	fab0 f080 	clz	r0, r0
 80071d2:	4922      	ldr	r1, [pc, #136]	; (800725c <oslib_test_002_003_execute.lto_priv.0+0x11c>)
 80071d4:	0940      	lsrs	r0, r0, #5
 80071d6:	f7f9 fc33 	bl	8000a40 <_test_assert>
 80071da:	4604      	mov	r4, r0
 80071dc:	2800      	cmp	r0, #0
 80071de:	d1db      	bne.n	8007198 <oslib_test_002_003_execute.lto_priv.0+0x58>
 80071e0:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostAheadI(&mb1, 'X');
 80071e4:	2058      	movs	r0, #88	; 0x58
 80071e6:	f7ff ff5b 	bl	80070a0 <chMBPostAheadI.constprop.0>
 80071ea:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80071ee:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80071f2:	fab0 f080 	clz	r0, r0
 80071f6:	4919      	ldr	r1, [pc, #100]	; (800725c <oslib_test_002_003_execute.lto_priv.0+0x11c>)
 80071f8:	0940      	lsrs	r0, r0, #5
 80071fa:	f7f9 fc21 	bl	8000a40 <_test_assert>
 80071fe:	4604      	mov	r4, r0
 8007200:	2800      	cmp	r0, #0
 8007202:	d1c9      	bne.n	8007198 <oslib_test_002_003_execute.lto_priv.0+0x58>
  test_set_step(3);
 8007204:	2303      	movs	r3, #3
 8007206:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8007208:	f7f9 ff82 	bl	8001110 <chMBReset.constprop.0>
  test_set_step(4);
 800720c:	2304      	movs	r3, #4
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800720e:	2201      	movs	r2, #1
 8007210:	eb0d 0103 	add.w	r1, sp, r3
 8007214:	4812      	ldr	r0, [pc, #72]	; (8007260 <oslib_test_002_003_execute.lto_priv.0+0x120>)
  mbp->reset = false;
 8007216:	f888 4014 	strb.w	r4, [r8, #20]
  test_set_step(4);
 800721a:	603b      	str	r3, [r7, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800721c:	f003 fef8 	bl	800b010 <chMBFetchTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8007220:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8007224:	fab0 f080 	clz	r0, r0
 8007228:	490c      	ldr	r1, [pc, #48]	; (800725c <oslib_test_002_003_execute.lto_priv.0+0x11c>)
 800722a:	0940      	lsrs	r0, r0, #5
 800722c:	f7f9 fc08 	bl	8000a40 <_test_assert>
 8007230:	4604      	mov	r4, r0
 8007232:	2800      	cmp	r0, #0
 8007234:	d1b0      	bne.n	8007198 <oslib_test_002_003_execute.lto_priv.0+0x58>
 8007236:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBFetchI(&mb1, &msg2);
 800723a:	a801      	add	r0, sp, #4
 800723c:	f7ff ff58 	bl	80070f0 <chMBFetchI.constprop.0>
 8007240:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8007244:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8007248:	fab0 f080 	clz	r0, r0
 800724c:	4903      	ldr	r1, [pc, #12]	; (800725c <oslib_test_002_003_execute.lto_priv.0+0x11c>)
 800724e:	0940      	lsrs	r0, r0, #5
 8007250:	f7f9 fbf6 	bl	8000a40 <_test_assert>
 8007254:	e7a0      	b.n	8007198 <oslib_test_002_003_execute.lto_priv.0+0x58>
 8007256:	bf00      	nop
 8007258:	20001cf4 	.word	0x20001cf4
 800725c:	0800d3ac 	.word	0x0800d3ac
 8007260:	20000874 	.word	0x20000874
	...

08007270 <oslib_test_002_002_execute.lto_priv.0>:
static void oslib_test_002_002_execute(void) {
 8007270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8007274:	f04f 0801 	mov.w	r8, #1
 8007278:	4fae      	ldr	r7, [pc, #696]	; (8007534 <oslib_test_002_002_execute.lto_priv.0+0x2c4>)
static void oslib_test_002_002_execute(void) {
 800727a:	b082      	sub	sp, #8
 800727c:	2620      	movs	r6, #32
  test_set_step(1);
 800727e:	f8c7 8000 	str.w	r8, [r7]
 8007282:	f386 8811 	msr	BASEPRI, r6
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8007286:	4cac      	ldr	r4, [pc, #688]	; (8007538 <oslib_test_002_002_execute.lto_priv.0+0x2c8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8007288:	49ac      	ldr	r1, [pc, #688]	; (800753c <oslib_test_002_002_execute.lto_priv.0+0x2cc>)
 800728a:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800728c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007290:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8007292:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8007296:	f1a0 0004 	sub.w	r0, r0, #4
 800729a:	fab0 f080 	clz	r0, r0
 800729e:	0940      	lsrs	r0, r0, #5
 80072a0:	f7f9 fbce 	bl	8000a40 <_test_assert>
 80072a4:	b128      	cbz	r0, 80072b2 <oslib_test_002_002_execute.lto_priv.0+0x42>
 80072a6:	2300      	movs	r3, #0
 80072a8:	f383 8811 	msr	BASEPRI, r3
}
 80072ac:	b002      	add	sp, #8
 80072ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b2:	4605      	mov	r5, r0
 80072b4:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80072b8:	2302      	movs	r3, #2
 80072ba:	603b      	str	r3, [r7, #0]
 80072bc:	f386 8811 	msr	BASEPRI, r6
  mbp->wrptr = mbp->buffer;
 80072c0:	6823      	ldr	r3, [r4, #0]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80072c2:	f104 0018 	add.w	r0, r4, #24
  mbp->rdptr = mbp->buffer;
 80072c6:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 80072ca:	6125      	str	r5, [r4, #16]
  mbp->reset = true;
 80072cc:	f884 8014 	strb.w	r8, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80072d0:	f7f9 fe76 	bl	8000fc0 <chThdDequeueAllI.constprop.0>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 80072d4:	f104 0020 	add.w	r0, r4, #32
 80072d8:	f7f9 fe72 	bl	8000fc0 <chThdDequeueAllI.constprop.0>
 80072dc:	f385 8811 	msr	BASEPRI, r5
 80072e0:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80072e4:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80072e8:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80072ea:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80072ec:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80072f0:	f1a0 0004 	sub.w	r0, r0, #4
 80072f4:	fab0 f080 	clz	r0, r0
 80072f8:	4991      	ldr	r1, [pc, #580]	; (8007540 <oslib_test_002_002_execute.lto_priv.0+0x2d0>)
 80072fa:	0940      	lsrs	r0, r0, #5
 80072fc:	f7f9 fba0 	bl	8000a40 <_test_assert>
 8007300:	4680      	mov	r8, r0
 8007302:	b988      	cbnz	r0, 8007328 <oslib_test_002_002_execute.lto_priv.0+0xb8>
 8007304:	f380 8811 	msr	BASEPRI, r0
 8007308:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800730c:	6920      	ldr	r0, [r4, #16]
 800730e:	498d      	ldr	r1, [pc, #564]	; (8007544 <oslib_test_002_002_execute.lto_priv.0+0x2d4>)
 8007310:	fab0 f080 	clz	r0, r0
 8007314:	0940      	lsrs	r0, r0, #5
 8007316:	f7f9 fb93 	bl	8000a40 <_test_assert>
 800731a:	4605      	mov	r5, r0
 800731c:	b148      	cbz	r0, 8007332 <oslib_test_002_002_execute.lto_priv.0+0xc2>
 800731e:	f388 8811 	msr	BASEPRI, r8
}
 8007322:	b002      	add	sp, #8
 8007324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007328:	f385 8811 	msr	BASEPRI, r5
 800732c:	b002      	add	sp, #8
 800732e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007332:	f380 8811 	msr	BASEPRI, r0
 8007336:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800733a:	6820      	ldr	r0, [r4, #0]
 800733c:	68a3      	ldr	r3, [r4, #8]
 800733e:	4982      	ldr	r1, [pc, #520]	; (8007548 <oslib_test_002_002_execute.lto_priv.0+0x2d8>)
 8007340:	1ac0      	subs	r0, r0, r3
 8007342:	fab0 f080 	clz	r0, r0
 8007346:	0940      	lsrs	r0, r0, #5
 8007348:	f7f9 fb7a 	bl	8000a40 <_test_assert>
 800734c:	4680      	mov	r8, r0
 800734e:	2800      	cmp	r0, #0
 8007350:	d1ea      	bne.n	8007328 <oslib_test_002_002_execute.lto_priv.0+0xb8>
 8007352:	f380 8811 	msr	BASEPRI, r0
 8007356:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800735a:	6820      	ldr	r0, [r4, #0]
 800735c:	68e3      	ldr	r3, [r4, #12]
 800735e:	497b      	ldr	r1, [pc, #492]	; (800754c <oslib_test_002_002_execute.lto_priv.0+0x2dc>)
 8007360:	1ac0      	subs	r0, r0, r3
 8007362:	fab0 f080 	clz	r0, r0
 8007366:	0940      	lsrs	r0, r0, #5
 8007368:	f7f9 fb6a 	bl	8000a40 <_test_assert>
 800736c:	2800      	cmp	r0, #0
 800736e:	d1d6      	bne.n	800731e <oslib_test_002_002_execute.lto_priv.0+0xae>
 8007370:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8007374:	2303      	movs	r3, #3
 8007376:	4682      	mov	sl, r0
 8007378:	f04f 0842 	mov.w	r8, #66	; 0x42
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800737c:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007550 <oslib_test_002_002_execute.lto_priv.0+0x2e0>
  mbp->reset = false;
 8007380:	7520      	strb	r0, [r4, #20]
  test_set_step(3);
 8007382:	603b      	str	r3, [r7, #0]
 8007384:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBPostI(&mb1, 'B' + i);
 8007388:	4640      	mov	r0, r8
 800738a:	f7ff fc91 	bl	8006cb0 <chMBPostI.constprop.0>
 800738e:	f38a 8811 	msr	BASEPRI, sl
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8007392:	fab0 f080 	clz	r0, r0
 8007396:	4649      	mov	r1, r9
 8007398:	0940      	lsrs	r0, r0, #5
 800739a:	f7f9 fb51 	bl	8000a40 <_test_assert>
    for (i = 0; i < MB_SIZE - 1; i++) {
 800739e:	f108 0801 	add.w	r8, r8, #1
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80073a2:	4605      	mov	r5, r0
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d181      	bne.n	80072ac <oslib_test_002_002_execute.lto_priv.0+0x3c>
    for (i = 0; i < MB_SIZE - 1; i++) {
 80073a8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80073ac:	d1ea      	bne.n	8007384 <oslib_test_002_002_execute.lto_priv.0+0x114>
 80073ae:	f386 8811 	msr	BASEPRI, r6
    msg1 = chMBPostAheadI(&mb1, 'A');
 80073b2:	2041      	movs	r0, #65	; 0x41
 80073b4:	f7ff fe74 	bl	80070a0 <chMBPostAheadI.constprop.0>
 80073b8:	f385 8811 	msr	BASEPRI, r5
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80073bc:	fab0 f080 	clz	r0, r0
 80073c0:	4963      	ldr	r1, [pc, #396]	; (8007550 <oslib_test_002_002_execute.lto_priv.0+0x2e0>)
 80073c2:	0940      	lsrs	r0, r0, #5
 80073c4:	f7f9 fb3c 	bl	8000a40 <_test_assert>
 80073c8:	4605      	mov	r5, r0
 80073ca:	2800      	cmp	r0, #0
 80073cc:	f47f af6e 	bne.w	80072ac <oslib_test_002_002_execute.lto_priv.0+0x3c>
  test_set_step(4);
 80073d0:	f04f 0904 	mov.w	r9, #4
 80073d4:	f8c7 9000 	str.w	r9, [r7]
 80073d8:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 80073dc:	6922      	ldr	r2, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80073de:	e9d4 1300 	ldrd	r1, r3, [r4]
 80073e2:	1a5b      	subs	r3, r3, r1
 80073e4:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80073e8:	bf0c      	ite	eq
 80073ea:	2001      	moveq	r0, #1
 80073ec:	2000      	movne	r0, #0
 80073ee:	4959      	ldr	r1, [pc, #356]	; (8007554 <oslib_test_002_002_execute.lto_priv.0+0x2e4>)
 80073f0:	f7f9 fb26 	bl	8000a40 <_test_assert>
 80073f4:	4680      	mov	r8, r0
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d196      	bne.n	8007328 <oslib_test_002_002_execute.lto_priv.0+0xb8>
 80073fa:	f380 8811 	msr	BASEPRI, r0
 80073fe:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8007402:	6920      	ldr	r0, [r4, #16]
 8007404:	4954      	ldr	r1, [pc, #336]	; (8007558 <oslib_test_002_002_execute.lto_priv.0+0x2e8>)
 8007406:	f1a0 0004 	sub.w	r0, r0, #4
 800740a:	fab0 f080 	clz	r0, r0
 800740e:	0940      	lsrs	r0, r0, #5
 8007410:	f7f9 fb16 	bl	8000a40 <_test_assert>
 8007414:	4605      	mov	r5, r0
 8007416:	2800      	cmp	r0, #0
 8007418:	d181      	bne.n	800731e <oslib_test_002_002_execute.lto_priv.0+0xae>
 800741a:	f380 8811 	msr	BASEPRI, r0
 800741e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8007422:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8007426:	1ac0      	subs	r0, r0, r3
 8007428:	fab0 f080 	clz	r0, r0
 800742c:	494b      	ldr	r1, [pc, #300]	; (800755c <oslib_test_002_002_execute.lto_priv.0+0x2ec>)
 800742e:	0940      	lsrs	r0, r0, #5
 8007430:	f7f9 fb06 	bl	8000a40 <_test_assert>
 8007434:	2800      	cmp	r0, #0
 8007436:	f47f af77 	bne.w	8007328 <oslib_test_002_002_execute.lto_priv.0+0xb8>
 800743a:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 800743e:	2305      	movs	r3, #5
 8007440:	4605      	mov	r5, r0
 8007442:	2620      	movs	r6, #32
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8007444:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8007550 <oslib_test_002_002_execute.lto_priv.0+0x2e0>
  test_set_step(5);
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBFetchI(&mb1, &msg2);
 800744e:	a801      	add	r0, sp, #4
 8007450:	f7ff fe4e 	bl	80070f0 <chMBFetchI.constprop.0>
 8007454:	f385 8811 	msr	BASEPRI, r5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8007458:	fab0 f080 	clz	r0, r0
 800745c:	4641      	mov	r1, r8
 800745e:	0940      	lsrs	r0, r0, #5
 8007460:	f7f9 faee 	bl	8000a40 <_test_assert>
 8007464:	2800      	cmp	r0, #0
 8007466:	f47f af21 	bne.w	80072ac <oslib_test_002_002_execute.lto_priv.0+0x3c>
      test_emit_token(msg2);
 800746a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800746e:	f7f9 fb8f 	bl	8000b90 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8007472:	f1b9 0901 	subs.w	r9, r9, #1
 8007476:	d1e8      	bne.n	800744a <oslib_test_002_002_execute.lto_priv.0+0x1da>
    test_assert_sequence("ABCD", "wrong get sequence");
 8007478:	4939      	ldr	r1, [pc, #228]	; (8007560 <oslib_test_002_002_execute.lto_priv.0+0x2f0>)
 800747a:	483a      	ldr	r0, [pc, #232]	; (8007564 <oslib_test_002_002_execute.lto_priv.0+0x2f4>)
 800747c:	f7f9 fc60 	bl	8000d40 <_test_assert_sequence>
 8007480:	2800      	cmp	r0, #0
 8007482:	f47f af13 	bne.w	80072ac <oslib_test_002_002_execute.lto_priv.0+0x3c>
  test_set_step(6);
 8007486:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8007488:	2146      	movs	r1, #70	; 0x46
 800748a:	f04f 32ff 	mov.w	r2, #4294967295
 800748e:	482a      	ldr	r0, [pc, #168]	; (8007538 <oslib_test_002_002_execute.lto_priv.0+0x2c8>)
  test_set_step(6);
 8007490:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8007492:	f003 fdf5 	bl	800b080 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8007496:	fab0 f080 	clz	r0, r0
 800749a:	492d      	ldr	r1, [pc, #180]	; (8007550 <oslib_test_002_002_execute.lto_priv.0+0x2e0>)
 800749c:	0940      	lsrs	r0, r0, #5
 800749e:	f7f9 facf 	bl	8000a40 <_test_assert>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	f47f af02 	bne.w	80072ac <oslib_test_002_002_execute.lto_priv.0+0x3c>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 80074a8:	a901      	add	r1, sp, #4
 80074aa:	f04f 32ff 	mov.w	r2, #4294967295
 80074ae:	4822      	ldr	r0, [pc, #136]	; (8007538 <oslib_test_002_002_execute.lto_priv.0+0x2c8>)
 80074b0:	f003 fdae 	bl	800b010 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80074b4:	fab0 f080 	clz	r0, r0
 80074b8:	4925      	ldr	r1, [pc, #148]	; (8007550 <oslib_test_002_002_execute.lto_priv.0+0x2e0>)
 80074ba:	0940      	lsrs	r0, r0, #5
 80074bc:	f7f9 fac0 	bl	8000a40 <_test_assert>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	f47f aef3 	bne.w	80072ac <oslib_test_002_002_execute.lto_priv.0+0x3c>
  test_set_step(7);
 80074c6:	2307      	movs	r3, #7
 80074c8:	603b      	str	r3, [r7, #0]
 80074ca:	f386 8811 	msr	BASEPRI, r6
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80074ce:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80074d0:	e9d4 1200 	ldrd	r1, r2, [r4]
 80074d4:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80074d6:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80074da:	1f19      	subs	r1, r3, #4
 80074dc:	4248      	negs	r0, r1
 80074de:	4148      	adcs	r0, r1
 80074e0:	4917      	ldr	r1, [pc, #92]	; (8007540 <oslib_test_002_002_execute.lto_priv.0+0x2d0>)
 80074e2:	f7f9 faad 	bl	8000a40 <_test_assert>
 80074e6:	bb08      	cbnz	r0, 800752c <oslib_test_002_002_execute.lto_priv.0+0x2bc>
 80074e8:	f389 8811 	msr	BASEPRI, r9
 80074ec:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80074f0:	6920      	ldr	r0, [r4, #16]
 80074f2:	4914      	ldr	r1, [pc, #80]	; (8007544 <oslib_test_002_002_execute.lto_priv.0+0x2d4>)
 80074f4:	fab0 f080 	clz	r0, r0
 80074f8:	0940      	lsrs	r0, r0, #5
 80074fa:	f7f9 faa1 	bl	8000a40 <_test_assert>
 80074fe:	b9a8      	cbnz	r0, 800752c <oslib_test_002_002_execute.lto_priv.0+0x2bc>
 8007500:	f389 8811 	msr	BASEPRI, r9
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	68a3      	ldr	r3, [r4, #8]
 8007508:	490f      	ldr	r1, [pc, #60]	; (8007548 <oslib_test_002_002_execute.lto_priv.0+0x2d8>)
 800750a:	1ac2      	subs	r2, r0, r3
 800750c:	4250      	negs	r0, r2
 800750e:	4150      	adcs	r0, r2
 8007510:	f7f9 fa96 	bl	8000a40 <_test_assert>
 8007514:	2800      	cmp	r0, #0
 8007516:	f47f aec9 	bne.w	80072ac <oslib_test_002_002_execute.lto_priv.0+0x3c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800751a:	6820      	ldr	r0, [r4, #0]
 800751c:	68e3      	ldr	r3, [r4, #12]
 800751e:	490b      	ldr	r1, [pc, #44]	; (800754c <oslib_test_002_002_execute.lto_priv.0+0x2dc>)
 8007520:	1ac3      	subs	r3, r0, r3
 8007522:	4258      	negs	r0, r3
 8007524:	4158      	adcs	r0, r3
 8007526:	f7f9 fa8b 	bl	8000a40 <_test_assert>
 800752a:	e6bf      	b.n	80072ac <oslib_test_002_002_execute.lto_priv.0+0x3c>
 800752c:	f389 8811 	msr	BASEPRI, r9
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8007530:	e6bc      	b.n	80072ac <oslib_test_002_002_execute.lto_priv.0+0x3c>
 8007532:	bf00      	nop
 8007534:	20001cf4 	.word	0x20001cf4
 8007538:	20000874 	.word	0x20000874
 800753c:	0800d238 	.word	0x0800d238
 8007540:	0800d7c8 	.word	0x0800d7c8
 8007544:	0800d7d4 	.word	0x0800d7d4
 8007548:	0800d7e0 	.word	0x0800d7e0
 800754c:	0800d804 	.word	0x0800d804
 8007550:	0800d3ac 	.word	0x0800d3ac
 8007554:	0800d83c 	.word	0x0800d83c
 8007558:	0800d848 	.word	0x0800d848
 800755c:	0800d854 	.word	0x0800d854
 8007560:	0800d86c 	.word	0x0800d86c
 8007564:	0800d368 	.word	0x0800d368
	...

08007570 <dmaStreamAllocI.part.0.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8007570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    osalDbgCheck(false);
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
 8007574:	2601      	movs	r6, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8007576:	4c29      	ldr	r4, [pc, #164]	; (800761c <dmaStreamAllocI.part.0.constprop.0+0xac>)
    uint32_t mask = (1U << i);
 8007578:	fa06 f500 	lsl.w	r5, r6, r0
    if ((dma.allocated_mask & mask) == 0U) {
 800757c:	6822      	ldr	r2, [r4, #0]
 800757e:	4215      	tst	r5, r2

      return dmastp;
    }
  }

  return NULL;
 8007580:	bf18      	it	ne
 8007582:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 8007584:	d001      	beq.n	800758a <dmaStreamAllocI.part.0.constprop.0+0x1a>
}
 8007586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800758a:	4603      	mov	r3, r0
        rccEnableDMA1(true);
 800758c:	f8df c098 	ldr.w	ip, [pc, #152]	; 8007628 <dmaStreamAllocI.part.0.constprop.0+0xb8>
      dma.allocated_mask  |= mask;
 8007590:	432a      	orrs	r2, r5
 8007592:	6022      	str	r2, [r4, #0]
        rccEnableDMA1(true);
 8007594:	f8dc 0014 	ldr.w	r0, [ip, #20]
      dma.streams[i].func  = func;
 8007598:	199a      	adds	r2, r3, r6
 800759a:	f844 1032 	str.w	r1, [r4, r2, lsl #3]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800759e:	4f20      	ldr	r7, [pc, #128]	; (8007620 <dmaStreamAllocI.part.0.constprop.0+0xb0>)
      dma.streams[i].param = param;
 80075a0:	4920      	ldr	r1, [pc, #128]	; (8007624 <dmaStreamAllocI.part.0.constprop.0+0xb4>)
        rccEnableDMA1(true);
 80075a2:	ea40 0e06 	orr.w	lr, r0, r6
      dma.streams[i].param = param;
 80075a6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80075aa:	6051      	str	r1, [r2, #4]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80075ac:	eb07 1003 	add.w	r0, r7, r3, lsl #4
        rccEnableDMA1(true);
 80075b0:	f8cc e014 	str.w	lr, [ip, #20]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 80075b4:	6882      	ldr	r2, [r0, #8]
 80075b6:	f8d4 e004 	ldr.w	lr, [r4, #4]
        rccEnableDMA1(true);
 80075ba:	f8dc 1014 	ldr.w	r1, [ip, #20]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 80075be:	ea1e 0f02 	tst.w	lr, r2
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80075c2:	ea4f 1303 	mov.w	r3, r3, lsl #4
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 80075c6:	d012      	beq.n	80075ee <dmaStreamAllocI.part.0.constprop.0+0x7e>
      dmaStreamDisable(dmastp);
 80075c8:	210e      	movs	r1, #14
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80075ca:	f04f 0c00 	mov.w	ip, #0
      dmaStreamDisable(dmastp);
 80075ce:	18fe      	adds	r6, r7, r3
 80075d0:	6872      	ldr	r2, [r6, #4]
 80075d2:	58ff      	ldr	r7, [r7, r3]
 80075d4:	7b76      	ldrb	r6, [r6, #13]
        dma.isr_mask |= mask;
 80075d6:	ea45 030e 	orr.w	r3, r5, lr
      dmaStreamDisable(dmastp);
 80075da:	6815      	ldr	r5, [r2, #0]
 80075dc:	40b1      	lsls	r1, r6
 80075de:	f025 050f 	bic.w	r5, r5, #15
        dma.isr_mask |= mask;
 80075e2:	6063      	str	r3, [r4, #4]
      dmaStreamDisable(dmastp);
 80075e4:	6015      	str	r5, [r2, #0]
 80075e6:	6079      	str	r1, [r7, #4]
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80075e8:	f8c2 c000 	str.w	ip, [r2]
 80075ec:	e7cb      	b.n	8007586 <dmaStreamAllocI.part.0.constprop.0+0x16>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80075ee:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
          nvicEnableVector(dmastp->vector, priority);
 80075f2:	7bc2      	ldrb	r2, [r0, #15]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80075f4:	0951      	lsrs	r1, r2, #5
 80075f6:	0089      	lsls	r1, r1, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80075f8:	f102 4860 	add.w	r8, r2, #3758096384	; 0xe0000000
 80075fc:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007600:	f002 021f 	and.w	r2, r2, #31
 8007604:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
 8007608:	fa06 f202 	lsl.w	r2, r6, r2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800760c:	f508 4861 	add.w	r8, r8, #57600	; 0xe100
 8007610:	f888 c300 	strb.w	ip, [r8, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007614:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007618:	600a      	str	r2, [r1, #0]
 800761a:	e7d5      	b.n	80075c8 <dmaStreamAllocI.part.0.constprop.0+0x58>
 800761c:	20000e48 	.word	0x20000e48
 8007620:	0800dbc4 	.word	0x0800dbc4
 8007624:	20000c04 	.word	0x20000c04
 8007628:	40021000 	.word	0x40021000
 800762c:	00000000 	.word	0x00000000

08007630 <chHeapAllocAligned.constprop.0>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8007630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 8007634:	4e38      	ldr	r6, [pc, #224]	; (8007718 <chHeapAllocAligned.constprop.0+0xe8>)
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8007636:	b083      	sub	sp, #12
    heapp = &default_heap;
 8007638:	2800      	cmp	r0, #0
 800763a:	bf18      	it	ne
 800763c:	4606      	movne	r6, r0

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 800763e:	f106 080c 	add.w	r8, r6, #12
 8007642:	4640      	mov	r0, r8
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8007644:	1dcf      	adds	r7, r1, #7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8007646:	460d      	mov	r5, r1
  H_LOCK(heapp);
 8007648:	f002 feda 	bl	800a400 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 800764c:	6872      	ldr	r2, [r6, #4]
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800764e:	08ff      	lsrs	r7, r7, #3
 8007650:	1d30      	adds	r0, r6, #4
  while (H_NEXT(qp) != NULL) {
 8007652:	b90a      	cbnz	r2, 8007658 <chHeapAllocAligned.constprop.0+0x28>
 8007654:	e017      	b.n	8007686 <chHeapAllocAligned.constprop.0+0x56>
 8007656:	461a      	mov	r2, r3
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8007658:	6851      	ldr	r1, [r2, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800765a:	f102 030f 	add.w	r3, r2, #15
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800765e:	1c4c      	adds	r4, r1, #1
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8007660:	f023 0307 	bic.w	r3, r3, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8007664:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8007668:	f1a3 0c08 	sub.w	ip, r3, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800766c:	45a4      	cmp	ip, r4
 800766e:	d206      	bcs.n	800767e <chHeapAllocAligned.constprop.0+0x4e>
 8007670:	eba4 0e03 	sub.w	lr, r4, r3
 8007674:	ebb7 0fee 	cmp.w	r7, lr, asr #3
 8007678:	ea4f 09ee 	mov.w	r9, lr, asr #3
 800767c:	d914      	bls.n	80076a8 <chHeapAllocAligned.constprop.0+0x78>
  while (H_NEXT(qp) != NULL) {
 800767e:	6813      	ldr	r3, [r2, #0]
 8007680:	4610      	mov	r0, r2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e7      	bne.n	8007656 <chHeapAllocAligned.constprop.0+0x26>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8007686:	4640      	mov	r0, r8
 8007688:	f002 fe2a 	bl	800a2e0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 800768c:	6833      	ldr	r3, [r6, #0]
 800768e:	b13b      	cbz	r3, 80076a0 <chHeapAllocAligned.constprop.0+0x70>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8007690:	2208      	movs	r2, #8
 8007692:	00f8      	lsls	r0, r7, #3
 8007694:	4611      	mov	r1, r2
 8007696:	4798      	blx	r3
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8007698:	4603      	mov	r3, r0
 800769a:	b108      	cbz	r0, 80076a0 <chHeapAllocAligned.constprop.0+0x70>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 800769c:	e940 6502 	strd	r6, r5, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	b003      	add	sp, #12
 80076a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
 80076a8:	4594      	cmp	ip, r2
 80076aa:	d81c      	bhi.n	80076e6 <chHeapAllocAligned.constprop.0+0xb6>
        if (H_PAGES(hp) == pages) {
 80076ac:	428f      	cmp	r7, r1
 80076ae:	d02d      	beq.n	800770c <chHeapAllocAligned.constprop.0+0xdc>
          H_NEXT(qp) = fp;
 80076b0:	4694      	mov	ip, r2
          fp = H_BLOCK(hp) + pages;
 80076b2:	f107 0e01 	add.w	lr, r7, #1
 80076b6:	eb02 07ce 	add.w	r7, r2, lr, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 80076ba:	f107 0108 	add.w	r1, r7, #8
          H_NEXT(fp) = H_NEXT(hp);
 80076be:	6813      	ldr	r3, [r2, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 80076c0:	1a61      	subs	r1, r4, r1
 80076c2:	10c9      	asrs	r1, r1, #3
          H_NEXT(fp) = H_NEXT(hp);
 80076c4:	f842 303e 	str.w	r3, [r2, lr, lsl #3]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 80076c8:	6079      	str	r1, [r7, #4]
 80076ca:	f102 0308 	add.w	r3, r2, #8
          H_NEXT(qp) = fp;
 80076ce:	6007      	str	r7, [r0, #0]
      H_UNLOCK(heapp);
 80076d0:	4640      	mov	r0, r8
      H_HEAP(hp) = heapp;
 80076d2:	e9cc 6500 	strd	r6, r5, [ip]
 80076d6:	9301      	str	r3, [sp, #4]
      H_UNLOCK(heapp);
 80076d8:	f002 fe02 	bl	800a2e0 <chMtxUnlock>
 80076dc:	9b01      	ldr	r3, [sp, #4]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	b003      	add	sp, #12
 80076e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 80076e6:	f102 0108 	add.w	r1, r2, #8
 80076ea:	ebac 0101 	sub.w	r1, ip, r1
 80076ee:	10c9      	asrs	r1, r1, #3
        if (bpages > pages) {
 80076f0:	454f      	cmp	r7, r9
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 80076f2:	6051      	str	r1, [r2, #4]
        if (bpages > pages) {
 80076f4:	d2ec      	bcs.n	80076d0 <chHeapAllocAligned.constprop.0+0xa0>
          H_PAGES(fp) = (bpages - pages) - 1U;
 80076f6:	43f9      	mvns	r1, r7
          H_NEXT(fp) = H_NEXT(hp);
 80076f8:	6814      	ldr	r4, [r2, #0]
          fp = H_BLOCK(ahp) + pages;
 80076fa:	3701      	adds	r7, #1
 80076fc:	eb0c 00c7 	add.w	r0, ip, r7, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 8007700:	4449      	add	r1, r9
 8007702:	6041      	str	r1, [r0, #4]
          H_NEXT(fp) = H_NEXT(hp);
 8007704:	f84c 4037 	str.w	r4, [ip, r7, lsl #3]
          H_NEXT(hp) = fp;
 8007708:	6010      	str	r0, [r2, #0]
 800770a:	e7e1      	b.n	80076d0 <chHeapAllocAligned.constprop.0+0xa0>
          H_NEXT(qp) = H_NEXT(hp);
 800770c:	4613      	mov	r3, r2
 800770e:	f853 1b08 	ldr.w	r1, [r3], #8
 8007712:	4694      	mov	ip, r2
 8007714:	6001      	str	r1, [r0, #0]
 8007716:	e7db      	b.n	80076d0 <chHeapAllocAligned.constprop.0+0xa0>
 8007718:	20000e2c 	.word	0x20000e2c
 800771c:	00000000 	.word	0x00000000

08007720 <scan_files.constprop.0>:
static FRESULT scan_files(BaseSequentialStream *chp, char *path) {
 8007720:	4603      	mov	r3, r0
 8007722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007726:	b0a3      	sub	sp, #140	; 0x8c
 8007728:	9302      	str	r3, [sp, #8]
 800772a:	4bb7      	ldr	r3, [pc, #732]	; (8007a08 <scan_files.constprop.0+0x2e8>)


	if (!dp) return FR_INVALID_OBJECT;

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800772c:	a90c      	add	r1, sp, #48	; 0x30
 800772e:	a80d      	add	r0, sp, #52	; 0x34
 8007730:	930d      	str	r3, [sp, #52]	; 0x34
 8007732:	f7fe fd25 	bl	8006180 <find_volume.constprop.0>
	if (res == FR_OK) {
 8007736:	4680      	mov	r8, r0
 8007738:	b118      	cbz	r0, 8007742 <scan_files.constprop.0+0x22>
}
 800773a:	4640      	mov	r0, r8
 800773c:	b023      	add	sp, #140	; 0x8c
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->obj.fs = fs;
 8007742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8007744:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8007748:	930e      	str	r3, [sp, #56]	; 0x38
 800774a:	f7ff ff71 	bl	8007630 <chHeapAllocAligned.constprop.0>
		INIT_NAMBUF(fs);
 800774e:	9005      	str	r0, [sp, #20]
 8007750:	2800      	cmp	r0, #0
 8007752:	d044      	beq.n	80077de <scan_files.constprop.0+0xbe>
 8007754:	9905      	ldr	r1, [sp, #20]
 8007756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007758:	f501 7300 	add.w	r3, r1, #512	; 0x200
	FATFS *fs = dp->obj.fs;
 800775c:	980e      	ldr	r0, [sp, #56]	; 0x38
		INIT_NAMBUF(fs);
 800775e:	e9c2 1303 	strd	r1, r3, [r2, #12]
 8007762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	FATFS *fs = dp->obj.fs;
 8007764:	9004      	str	r0, [sp, #16]
 8007766:	4699      	mov	r9, r3
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800776c:	2a2f      	cmp	r2, #47	; 0x2f
 800776e:	d0fa      	beq.n	8007766 <scan_files.constprop.0+0x46>
 8007770:	2a5c      	cmp	r2, #92	; 0x5c
 8007772:	d0f8      	beq.n	8007766 <scan_files.constprop.0+0x46>
		dp->obj.sclust = 0;					/* Start from root directory */
 8007774:	2300      	movs	r3, #0
 8007776:	9310      	str	r3, [sp, #64]	; 0x40
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 8007778:	9315      	str	r3, [sp, #84]	; 0x54
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800777a:	f899 2000 	ldrb.w	r2, [r9]
 800777e:	2a1f      	cmp	r2, #31
 8007780:	d933      	bls.n	80077ea <scan_files.constprop.0+0xca>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8007782:	9307      	str	r3, [sp, #28]
	FATFS *fs = dp->obj.fs;
 8007784:	9b04      	ldr	r3, [sp, #16]
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8007786:	2400      	movs	r4, #0
 8007788:	68df      	ldr	r7, [r3, #12]
 800778a:	f109 0101 	add.w	r1, r9, #1
 800778e:	1ebd      	subs	r5, r7, #2
	wc = (BYTE)*p++;			/* Get a byte */
 8007790:	b293      	uxth	r3, r2
	if (wc != 0) {
 8007792:	2a00      	cmp	r2, #0
 8007794:	f040 8081 	bne.w	800789a <scan_files.constprop.0+0x17a>
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 8007798:	780a      	ldrb	r2, [r1, #0]
 800779a:	4689      	mov	r9, r1
 800779c:	2a2f      	cmp	r2, #47	; 0x2f
 800779e:	f101 0101 	add.w	r1, r1, #1
 80077a2:	d0f9      	beq.n	8007798 <scan_files.constprop.0+0x78>
 80077a4:	2a5c      	cmp	r2, #92	; 0x5c
 80077a6:	d0f7      	beq.n	8007798 <scan_files.constprop.0+0x78>
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	bf34      	ite	cc
 80077ac:	2504      	movcc	r5, #4
 80077ae:	2500      	movcs	r5, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80077b0:	b154      	cbz	r4, 80077c8 <scan_files.constprop.0+0xa8>
 80077b2:	eb07 0244 	add.w	r2, r7, r4, lsl #1
		wc = lfn[di - 1];
 80077b6:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (wc != ' ' && wc != '.') break;
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	d002      	beq.n	80077c4 <scan_files.constprop.0+0xa4>
 80077be:	2b2e      	cmp	r3, #46	; 0x2e
 80077c0:	f040 8096 	bne.w	80078f0 <scan_files.constprop.0+0x1d0>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80077c4:	3c01      	subs	r4, #1
 80077c6:	d1f6      	bne.n	80077b6 <scan_files.constprop.0+0x96>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 80077c8:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 80077ca:	f04f 0806 	mov.w	r8, #6
/*------------------------------------------------------------------------*/
/* Free a memory block                                                    */
/*------------------------------------------------------------------------*/
void ff_memfree(void *mblock) {

  chHeapFree(mblock);
 80077ce:	9805      	ldr	r0, [sp, #20]
	lfn[di] = 0;							/* LFN is created into the working buffer */
 80077d0:	803b      	strh	r3, [r7, #0]
 80077d2:	f002 fef5 	bl	800a5c0 <chHeapFree>
 80077d6:	4640      	mov	r0, r8
 80077d8:	b023      	add	sp, #140	; 0x8c
 80077da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
 80077de:	f04f 0811 	mov.w	r8, #17
 80077e2:	4640      	mov	r0, r8
 80077e4:	b023      	add	sp, #140	; 0x8c
 80077e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NONAME;
 80077ea:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80077ec:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 80077f0:	4658      	mov	r0, fp
		dp->fn[NSFLAG] = NS_NONAME;
 80077f2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
		res = dir_sdi(dp, 0);
 80077f6:	f7ff f86b 	bl	80068d0 <dir_sdi.constprop.0>
		if (res == FR_OK) {						/* Follow completed */
 80077fa:	4680      	mov	r8, r0
 80077fc:	2800      	cmp	r0, #0
 80077fe:	f040 84c3 	bne.w	8008188 <scan_files.constprop.0+0xa68>
 8007802:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007806:	0617      	lsls	r7, r2, #24
 8007808:	f100 8464 	bmi.w	80080d4 <scan_files.constprop.0+0x9b4>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 800780c:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8007810:	06de      	lsls	r6, r3, #27
 8007812:	d53c      	bpl.n	800788e <scan_files.constprop.0+0x16e>
					if (fs->fs_type == FS_EXFAT) {
 8007814:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007816:	7818      	ldrb	r0, [r3, #0]
 8007818:	2804      	cmp	r0, #4
 800781a:	f000 844c 	beq.w	80080b6 <scan_files.constprop.0+0x996>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800781e:	991d      	ldr	r1, [sp, #116]	; 0x74
	if (fs->fs_type == FS_FAT32) {
 8007820:	2803      	cmp	r0, #3
	rv = rv << 8 | ptr[0];
 8007822:	7ecc      	ldrb	r4, [r1, #27]
 8007824:	7e8a      	ldrb	r2, [r1, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 8007826:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800782a:	d105      	bne.n	8007838 <scan_files.constprop.0+0x118>
	rv = rv << 8 | ptr[0];
 800782c:	7d48      	ldrb	r0, [r1, #21]
 800782e:	7d09      	ldrb	r1, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007830:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8007834:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007838:	9210      	str	r2, [sp, #64]	; 0x40
				dp->obj.id = fs->id;
 800783a:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800783c:	4658      	mov	r0, fp
				dp->obj.id = fs->id;
 800783e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007842:	f7ff f845 	bl	80068d0 <dir_sdi.constprop.0>
 8007846:	4604      	mov	r4, r0
 8007848:	9805      	ldr	r0, [sp, #20]
 800784a:	f002 feb9 	bl	800a5c0 <chHeapFree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800784e:	2c04      	cmp	r4, #4
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007850:	4625      	mov	r5, r4
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007852:	f000 83ef 	beq.w	8008034 <scan_files.constprop.0+0x914>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8007856:	2c00      	cmp	r4, #0
 8007858:	f040 815e 	bne.w	8007b18 <scan_files.constprop.0+0x3f8>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800785c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800785e:	b185      	cbz	r5, 8007882 <scan_files.constprop.0+0x162>
    i = strlen(path);
 8007860:	4869      	ldr	r0, [pc, #420]	; (8007a08 <scan_files.constprop.0+0x2e8>)
 8007862:	f004 fdcb 	bl	800c3fc <strlen>
	fno->fname[0] = 0;			/* Invaidate file info */
 8007866:	4681      	mov	r9, r0
 8007868:	f8cd b010 	str.w	fp, [sp, #16]
 800786c:	4c67      	ldr	r4, [pc, #412]	; (8007a0c <scan_files.constprop.0+0x2ec>)
 800786e:	f8dd b008 	ldr.w	fp, [sp, #8]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007872:	782b      	ldrb	r3, [r5, #0]
 8007874:	b12b      	cbz	r3, 8007882 <scan_files.constprop.0+0x162>
 8007876:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800787a:	88eb      	ldrh	r3, [r5, #6]
 800787c:	429a      	cmp	r2, r3
 800787e:	f000 8281 	beq.w	8007d84 <scan_files.constprop.0+0x664>
	FRESULT res = FR_INVALID_OBJECT;
 8007882:	f04f 0809 	mov.w	r8, #9
}
 8007886:	4640      	mov	r0, r8
 8007888:	b023      	add	sp, #140	; 0x8c
 800788a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788e:	9805      	ldr	r0, [sp, #20]
 8007890:	f002 fe96 	bl	800a5c0 <chHeapFree>
					res = FR_NO_PATH;
 8007894:	f04f 0805 	mov.w	r8, #5
 8007898:	e74f      	b.n	800773a <scan_files.constprop.0+0x1a>
	if (oem < 0x80) {	/* ASCII? */
 800789a:	2b7f      	cmp	r3, #127	; 0x7f
 800789c:	d906      	bls.n	80078ac <scan_files.constprop.0+0x18c>
			if (oem < 0x100) c = p[oem - 0x80];
 800789e:	4b5c      	ldr	r3, [pc, #368]	; (8007a10 <scan_files.constprop.0+0x2f0>)
 80078a0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80078a4:	3a80      	subs	r2, #128	; 0x80
 80078a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 80078aa:	b1db      	cbz	r3, 80078e4 <scan_files.constprop.0+0x1c4>
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 80078ac:	2b1f      	cmp	r3, #31
 80078ae:	f67f af73 	bls.w	8007798 <scan_files.constprop.0+0x78>
 80078b2:	2b2f      	cmp	r3, #47	; 0x2f
 80078b4:	f43f af70 	beq.w	8007798 <scan_files.constprop.0+0x78>
 80078b8:	2b5c      	cmp	r3, #92	; 0x5c
 80078ba:	f43f af6d 	beq.w	8007798 <scan_files.constprop.0+0x78>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80078be:	2b7f      	cmp	r3, #127	; 0x7f
 80078c0:	d907      	bls.n	80078d2 <scan_files.constprop.0+0x1b2>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80078c2:	2cff      	cmp	r4, #255	; 0xff
 80078c4:	d00e      	beq.n	80078e4 <scan_files.constprop.0+0x1c4>
		lfn[di++] = wc;					/* Store the Unicode character */
 80078c6:	f825 3f02 	strh.w	r3, [r5, #2]!
 80078ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078ce:	3401      	adds	r4, #1
 80078d0:	e75e      	b.n	8007790 <scan_files.constprop.0+0x70>
	while (*str && *str != chr) str++;
 80078d2:	2222      	movs	r2, #34	; 0x22
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80078d4:	484f      	ldr	r0, [pc, #316]	; (8007a14 <scan_files.constprop.0+0x2f4>)
 80078d6:	e003      	b.n	80078e0 <scan_files.constprop.0+0x1c0>
	while (*str && *str != chr) str++;
 80078d8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80078dc:	2a00      	cmp	r2, #0
 80078de:	d0f0      	beq.n	80078c2 <scan_files.constprop.0+0x1a2>
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d1f9      	bne.n	80078d8 <scan_files.constprop.0+0x1b8>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80078e4:	f04f 0806 	mov.w	r8, #6
 80078e8:	9805      	ldr	r0, [sp, #20]
 80078ea:	f002 fe69 	bl	800a5c0 <chHeapFree>
 80078ee:	e724      	b.n	800773a <scan_files.constprop.0+0x1a>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 80078f0:	9b07      	ldr	r3, [sp, #28]
 80078f2:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 80078f6:	883b      	ldrh	r3, [r7, #0]
 80078f8:	2b20      	cmp	r3, #32
 80078fa:	f040 814e 	bne.w	8007b9a <scan_files.constprop.0+0x47a>
 80078fe:	2200      	movs	r2, #0
 8007900:	1cbb      	adds	r3, r7, #2
 8007902:	4619      	mov	r1, r3
 8007904:	f833 0b02 	ldrh.w	r0, [r3], #2
 8007908:	4616      	mov	r6, r2
 800790a:	2820      	cmp	r0, #32
 800790c:	f102 0201 	add.w	r2, r2, #1
 8007910:	d0f7      	beq.n	8007902 <scan_files.constprop.0+0x1e2>
 8007912:	3602      	adds	r6, #2
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8007914:	f045 0503 	orr.w	r5, r5, #3
 8007918:	b2ed      	uxtb	r5, r5
 800791a:	eb07 0344 	add.w	r3, r7, r4, lsl #1
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 800791e:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 8007922:	2a2e      	cmp	r2, #46	; 0x2e
 8007924:	d001      	beq.n	800792a <scan_files.constprop.0+0x20a>
 8007926:	3c01      	subs	r4, #1
 8007928:	d1f9      	bne.n	800791e <scan_files.constprop.0+0x1fe>
		*d++ = (BYTE)val;
 800792a:	2020      	movs	r0, #32
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800792c:	ab1e      	add	r3, sp, #120	; 0x78
 800792e:	f10d 0283 	add.w	r2, sp, #131	; 0x83
		*d++ = (BYTE)val;
 8007932:	f803 0b01 	strb.w	r0, [r3], #1
	} while (--cnt);
 8007936:	4293      	cmp	r3, r2
 8007938:	d1fb      	bne.n	8007932 <scan_files.constprop.0+0x212>
		wc = lfn[si++];					/* Get an LFN character */
 800793a:	8808      	ldrh	r0, [r1, #0]
		if (wc == 0) break;				/* Break on end of the LFN */
 800793c:	2800      	cmp	r0, #0
 800793e:	f000 83f9 	beq.w	8008134 <scan_files.constprop.0+0xa14>
	i = b = 0; ni = 8;
 8007942:	f04f 0800 	mov.w	r8, #0
 8007946:	f04f 0a08 	mov.w	sl, #8
 800794a:	46c3      	mov	fp, r8
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 800794c:	2820      	cmp	r0, #32
 800794e:	d017      	beq.n	8007980 <scan_files.constprop.0+0x260>
 8007950:	282e      	cmp	r0, #46	; 0x2e
 8007952:	f000 80f8 	beq.w	8007b46 <scan_files.constprop.0+0x426>
		if (i >= ni || si == di) {		/* End of field? */
 8007956:	45d3      	cmp	fp, sl
 8007958:	f080 8106 	bcs.w	8007b68 <scan_files.constprop.0+0x448>
 800795c:	42b4      	cmp	r4, r6
 800795e:	f000 80f5 	beq.w	8007b4c <scan_files.constprop.0+0x42c>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 8007962:	287f      	cmp	r0, #127	; 0x7f
 8007964:	f200 8131 	bhi.w	8007bca <scan_files.constprop.0+0x4aa>
	while (*str && *str != chr) str++;
 8007968:	232b      	movs	r3, #43	; 0x2b
 800796a:	4a2b      	ldr	r2, [pc, #172]	; (8007a18 <scan_files.constprop.0+0x2f8>)
 800796c:	e004      	b.n	8007978 <scan_files.constprop.0+0x258>
 800796e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 83d3 	beq.w	800811e <scan_files.constprop.0+0x9fe>
 8007978:	4283      	cmp	r3, r0
 800797a:	d1f8      	bne.n	800796e <scan_files.constprop.0+0x24e>
 800797c:	462b      	mov	r3, r5
 800797e:	e135      	b.n	8007bec <scan_files.constprop.0+0x4cc>
			cf |= NS_LOSS | NS_LFN;
 8007980:	f045 0503 	orr.w	r5, r5, #3
 8007984:	b2ed      	uxtb	r5, r5
		wc = lfn[si++];					/* Get an LFN character */
 8007986:	f837 0016 	ldrh.w	r0, [r7, r6, lsl #1]
 800798a:	3601      	adds	r6, #1
		if (wc == 0) break;				/* Break on end of the LFN */
 800798c:	2800      	cmp	r0, #0
 800798e:	d1dd      	bne.n	800794c <scan_files.constprop.0+0x22c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007990:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8007994:	2be5      	cmp	r3, #229	; 0xe5
 8007996:	bf04      	itt	eq
 8007998:	2305      	moveq	r3, #5
 800799a:	f88d 3078 	strbeq.w	r3, [sp, #120]	; 0x78
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800799e:	f1ba 0f08 	cmp.w	sl, #8
 80079a2:	f000 80ed 	beq.w	8007b80 <scan_files.constprop.0+0x460>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 80079a6:	f008 030c 	and.w	r3, r8, #12
 80079aa:	2b0c      	cmp	r3, #12
 80079ac:	f000 80f1 	beq.w	8007b92 <scan_files.constprop.0+0x472>
 80079b0:	f008 0303 	and.w	r3, r8, #3
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	f000 80ec 	beq.w	8007b92 <scan_files.constprop.0+0x472>
 80079ba:	f005 0302 	and.w	r3, r5, #2
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 80079be:	b95b      	cbnz	r3, 80079d8 <scan_files.constprop.0+0x2b8>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 80079c0:	f018 0f01 	tst.w	r8, #1
 80079c4:	bf1c      	itt	ne
 80079c6:	f045 0510 	orrne.w	r5, r5, #16
 80079ca:	b2ed      	uxtbne	r5, r5
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 80079cc:	f018 0f04 	tst.w	r8, #4
 80079d0:	bf1c      	itt	ne
 80079d2:	f045 0508 	orrne.w	r5, r5, #8
 80079d6:	b2ed      	uxtbne	r5, r5
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80079d8:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 80079dc:	4658      	mov	r0, fp
	FATFS *fs = dp->obj.fs;
 80079de:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 80079e0:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80079e4:	f7fe ff74 	bl	80068d0 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 80079e8:	2800      	cmp	r0, #0
 80079ea:	f040 808e 	bne.w	8007b0a <scan_files.constprop.0+0x3ea>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80079ee:	7833      	ldrb	r3, [r6, #0]
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	f000 8106 	beq.w	8007c02 <scan_files.constprop.0+0x4e2>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80079f6:	f04f 33ff 	mov.w	r3, #4294967295
 80079fa:	f04f 0aff 	mov.w	sl, #255	; 0xff
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80079fe:	4698      	mov	r8, r3
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007a00:	4654      	mov	r4, sl
 8007a02:	9321      	str	r3, [sp, #132]	; 0x84
 8007a04:	e014      	b.n	8007a30 <scan_files.constprop.0+0x310>
 8007a06:	bf00      	nop
 8007a08:	20000e8c 	.word	0x20000e8c
 8007a0c:	20001290 	.word	0x20001290
 8007a10:	0800df7c 	.word	0x0800df7c
 8007a14:	0800d880 	.word	0x0800d880
 8007a18:	0800d88c 	.word	0x0800d88c
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007a1c:	2b0f      	cmp	r3, #15
 8007a1e:	d05e      	beq.n	8007ade <scan_files.constprop.0+0x3be>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007a20:	24ff      	movs	r4, #255	; 0xff
 8007a22:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
		res = dir_next(dp, 0);	/* Next entry */
 8007a26:	4658      	mov	r0, fp
 8007a28:	f7fe ff8a 	bl	8006940 <dir_next.constprop.0>
	} while (res == FR_OK);
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d16c      	bne.n	8007b0a <scan_files.constprop.0+0x3ea>
		res = move_window(fs, dp->sect);
 8007a30:	991c      	ldr	r1, [sp, #112]	; 0x70
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a32:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007a34:	4299      	cmp	r1, r3
 8007a36:	d004      	beq.n	8007a42 <scan_files.constprop.0+0x322>
 8007a38:	4630      	mov	r0, r6
 8007a3a:	f7fe faf9 	bl	8006030 <move_window.part.0>
		if (res != FR_OK) break;
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d163      	bne.n	8007b0a <scan_files.constprop.0+0x3ea>
		c = dp->dir[DIR_Name];
 8007a42:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007a44:	782a      	ldrb	r2, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007a46:	2a00      	cmp	r2, #0
 8007a48:	f000 82ec 	beq.w	8008024 <scan_files.constprop.0+0x904>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007a4c:	7ae9      	ldrb	r1, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007a4e:	2ae5      	cmp	r2, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007a50:	f001 033f 	and.w	r3, r1, #63	; 0x3f
 8007a54:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007a58:	d0e2      	beq.n	8007a20 <scan_files.constprop.0+0x300>
 8007a5a:	0709      	lsls	r1, r1, #28
 8007a5c:	d4de      	bmi.n	8007a1c <scan_files.constprop.0+0x2fc>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007a5e:	2b0f      	cmp	r3, #15
 8007a60:	d03d      	beq.n	8007ade <scan_files.constprop.0+0x3be>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007a62:	2c00      	cmp	r4, #0
 8007a64:	d05a      	beq.n	8007b1c <scan_files.constprop.0+0x3fc>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007a66:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8007a6a:	07d1      	lsls	r1, r2, #31
 8007a6c:	d4d8      	bmi.n	8007a20 <scan_files.constprop.0+0x300>
		r = *d++ - *s++;
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
 8007a74:	f810 3b0b 	ldrb.w	r3, [r0], #11
 8007a78:	3501      	adds	r5, #1
 8007a7a:	1a5b      	subs	r3, r3, r1
 8007a7c:	f10d 0179 	add.w	r1, sp, #121	; 0x79
	} while (--cnt && r == 0);
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1cd      	bne.n	8007a20 <scan_files.constprop.0+0x300>
		r = *d++ - *s++;
 8007a84:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a88:	f811 4b01 	ldrb.w	r4, [r1], #1
	} while (--cnt && r == 0);
 8007a8c:	4285      	cmp	r5, r0
		r = *d++ - *s++;
 8007a8e:	eba3 0304 	sub.w	r3, r3, r4
	} while (--cnt && r == 0);
 8007a92:	d1f5      	bne.n	8007a80 <scan_files.constprop.0+0x360>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1c3      	bne.n	8007a20 <scan_files.constprop.0+0x300>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a98:	0753      	lsls	r3, r2, #29
 8007a9a:	f53f aeb4 	bmi.w	8007806 <scan_files.constprop.0+0xe6>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007a9e:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8007aa2:	06db      	lsls	r3, r3, #27
 8007aa4:	f140 8319 	bpl.w	80080da <scan_files.constprop.0+0x9ba>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8007aa8:	9b04      	ldr	r3, [sp, #16]
 8007aaa:	7819      	ldrb	r1, [r3, #0]
 8007aac:	2904      	cmp	r1, #4
 8007aae:	d07b      	beq.n	8007ba8 <scan_files.constprop.0+0x488>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007ab0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007ab2:	9b04      	ldr	r3, [sp, #16]
 8007ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ab8:	333c      	adds	r3, #60	; 0x3c
 8007aba:	4413      	add	r3, r2
	rv = rv << 8 | ptr[0];
 8007abc:	7ed8      	ldrb	r0, [r3, #27]
 8007abe:	7e9a      	ldrb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8007ac0:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8007ac2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8007ac6:	d105      	bne.n	8007ad4 <scan_files.constprop.0+0x3b4>
	rv = rv << 8 | ptr[0];
 8007ac8:	7d59      	ldrb	r1, [r3, #21]
 8007aca:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007acc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007ad0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007ad4:	9210      	str	r2, [sp, #64]	; 0x40
 8007ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ad8:	f899 2000 	ldrb.w	r2, [r9]
 8007adc:	e653      	b.n	8007786 <scan_files.constprop.0+0x66>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007ade:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8007ae2:	065b      	lsls	r3, r3, #25
 8007ae4:	d49f      	bmi.n	8007a26 <scan_files.constprop.0+0x306>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007ae6:	0657      	lsls	r7, r2, #25
 8007ae8:	d52a      	bpl.n	8007b40 <scan_files.constprop.0+0x420>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007aea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
						sum = dp->dir[LDIR_Chksum];
 8007aec:	f895 a00d 	ldrb.w	sl, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007af0:	f002 04bf 	and.w	r4, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007af4:	9321      	str	r3, [sp, #132]	; 0x84
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007af6:	7b6b      	ldrb	r3, [r5, #13]
 8007af8:	4553      	cmp	r3, sl
 8007afa:	f000 80f8 	beq.w	8007cee <scan_files.constprop.0+0x5ce>
		res = dir_next(dp, 0);	/* Next entry */
 8007afe:	4658      	mov	r0, fp
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007b00:	24ff      	movs	r4, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8007b02:	f7fe ff1d 	bl	8006940 <dir_next.constprop.0>
	} while (res == FR_OK);
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d092      	beq.n	8007a30 <scan_files.constprop.0+0x310>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007b0a:	2804      	cmp	r0, #4
 8007b0c:	4605      	mov	r5, r0
 8007b0e:	f000 8289 	beq.w	8008024 <scan_files.constprop.0+0x904>
 8007b12:	9805      	ldr	r0, [sp, #20]
 8007b14:	f002 fd54 	bl	800a5c0 <chHeapFree>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007b18:	46a8      	mov	r8, r5
 8007b1a:	e60e      	b.n	800773a <scan_files.constprop.0+0x1a>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007b1c:	462a      	mov	r2, r5
 8007b1e:	f105 000b 	add.w	r0, r5, #11
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007b22:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007b26:	01e3      	lsls	r3, r4, #7
 8007b28:	ea43 0454 	orr.w	r4, r3, r4, lsr #1
 8007b2c:	440c      	add	r4, r1
	} while (--n);
 8007b2e:	4282      	cmp	r2, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007b30:	f004 04ff 	and.w	r4, r4, #255	; 0xff
	} while (--n);
 8007b34:	d1f5      	bne.n	8007b22 <scan_files.constprop.0+0x402>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007b36:	4554      	cmp	r4, sl
 8007b38:	d195      	bne.n	8007a66 <scan_files.constprop.0+0x346>
 8007b3a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8007b3e:	e7ab      	b.n	8007a98 <scan_files.constprop.0+0x378>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007b40:	42a2      	cmp	r2, r4
 8007b42:	d1dc      	bne.n	8007afe <scan_files.constprop.0+0x3de>
 8007b44:	e7d7      	b.n	8007af6 <scan_files.constprop.0+0x3d6>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8007b46:	42b4      	cmp	r4, r6
 8007b48:	f47f af1a 	bne.w	8007980 <scan_files.constprop.0+0x260>
			if (ni == 11) {				/* Name extension overflow? */
 8007b4c:	f1ba 0f0b 	cmp.w	sl, #11
 8007b50:	f000 82c6 	beq.w	80080e0 <scan_files.constprop.0+0x9c0>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8007b54:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8007b58:	4626      	mov	r6, r4
 8007b5a:	f04f 0a0b 	mov.w	sl, #11
 8007b5e:	f04f 0b08 	mov.w	fp, #8
 8007b62:	fa5f f888 	uxtb.w	r8, r8
 8007b66:	e70e      	b.n	8007986 <scan_files.constprop.0+0x266>
			if (ni == 11) {				/* Name extension overflow? */
 8007b68:	f1ba 0f0b 	cmp.w	sl, #11
 8007b6c:	f000 82b8 	beq.w	80080e0 <scan_files.constprop.0+0x9c0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8007b70:	42b4      	cmp	r4, r6
 8007b72:	d0ef      	beq.n	8007b54 <scan_files.constprop.0+0x434>
 8007b74:	f045 0503 	orr.w	r5, r5, #3
 8007b78:	b2ed      	uxtb	r5, r5
			if (si > di) break;						/* No name extension? */
 8007b7a:	f4ff af09 	bcc.w	8007990 <scan_files.constprop.0+0x270>
 8007b7e:	e7e9      	b.n	8007b54 <scan_files.constprop.0+0x434>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8007b80:	ea4f 0888 	mov.w	r8, r8, lsl #2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8007b84:	f008 030c 	and.w	r3, r8, #12
 8007b88:	2b0c      	cmp	r3, #12
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8007b8a:	fa5f f888 	uxtb.w	r8, r8
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8007b8e:	f47f af14 	bne.w	80079ba <scan_files.constprop.0+0x29a>
 8007b92:	f045 0502 	orr.w	r5, r5, #2
 8007b96:	b2ed      	uxtb	r5, r5
 8007b98:	e71e      	b.n	80079d8 <scan_files.constprop.0+0x2b8>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8007b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	f04f 0601 	mov.w	r6, #1
 8007ba2:	f47f aeba 	bne.w	800791a <scan_files.constprop.0+0x1fa>
 8007ba6:	e6b5      	b.n	8007914 <scan_files.constprop.0+0x1f4>
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8007ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007baa:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
 8007bae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bb2:	4303      	orrs	r3, r0
 8007bb4:	9317      	str	r3, [sp, #92]	; 0x5c
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8007bb6:	9b04      	ldr	r3, [sp, #16]
				dp->obj.c_scl = dp->obj.sclust;
 8007bb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
				dp->obj.c_ofs = dp->blk_ofs;
 8007bba:	9c21      	ldr	r4, [sp, #132]	; 0x84
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8007bbc:	6918      	ldr	r0, [r3, #16]
 8007bbe:	4659      	mov	r1, fp
				dp->obj.c_scl = dp->obj.sclust;
 8007bc0:	9216      	str	r2, [sp, #88]	; 0x58
				dp->obj.c_ofs = dp->blk_ofs;
 8007bc2:	9418      	str	r4, [sp, #96]	; 0x60
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8007bc4:	f7f9 f96c 	bl	8000ea0 <init_alloc_info.isra.0>
 8007bc8:	e785      	b.n	8007ad6 <scan_files.constprop.0+0x3b6>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8007bca:	f045 0302 	orr.w	r3, r5, #2
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	f7f9 f8f5 	bl	8000dc0 <ff_uni2oem.part.0>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8007bd6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007bda:	9b00      	ldr	r3, [sp, #0]
 8007bdc:	d072      	beq.n	8007cc4 <scan_files.constprop.0+0x5a4>
 8007bde:	4aae      	ldr	r2, [pc, #696]	; (8007e98 <scan_files.constprop.0+0x778>)
 8007be0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007be4:	5c10      	ldrb	r0, [r2, r0]
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8007be6:	2800      	cmp	r0, #0
 8007be8:	f040 82cb 	bne.w	8008182 <scan_files.constprop.0+0xa62>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007bec:	205f      	movs	r0, #95	; 0x5f
 8007bee:	f043 0503 	orr.w	r5, r3, #3
 8007bf2:	b2ed      	uxtb	r5, r5
		dp->fn[i++] = (BYTE)wc;
 8007bf4:	ab22      	add	r3, sp, #136	; 0x88
 8007bf6:	445b      	add	r3, fp
 8007bf8:	f803 0c10 	strb.w	r0, [r3, #-16]
 8007bfc:	f10b 0b01 	add.w	fp, fp, #1
 8007c00:	e6c1      	b.n	8007986 <scan_files.constprop.0+0x266>
	while ((chr = *name++) != 0) {
 8007c02:	68f4      	ldr	r4, [r6, #12]
 8007c04:	f834 2b02 	ldrh.w	r2, [r4], #2
 8007c08:	2a00      	cmp	r2, #0
 8007c0a:	f000 82b6 	beq.w	800817a <scan_files.constprop.0+0xa5a>
	WORD sum = 0;
 8007c0e:	4605      	mov	r5, r0
 8007c10:	4610      	mov	r0, r2
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8007c12:	f7f9 f8ed 	bl	8000df0 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8007c16:	b2c3      	uxtb	r3, r0
 8007c18:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 8007c1c:	eb03 33c5 	add.w	r3, r3, r5, lsl #15
 8007c20:	b299      	uxth	r1, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8007c22:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007c26:	eb03 0351 	add.w	r3, r3, r1, lsr #1
	while ((chr = *name++) != 0) {
 8007c2a:	f834 0b02 	ldrh.w	r0, [r4], #2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8007c2e:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 8007c32:	b29d      	uxth	r5, r3
	while ((chr = *name++) != 0) {
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d1ec      	bne.n	8007c12 <scan_files.constprop.0+0x4f2>
 8007c38:	9500      	str	r5, [sp, #0]
 8007c3a:	f8cd 9020 	str.w	r9, [sp, #32]
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 8007c3e:	4658      	mov	r0, fp
 8007c40:	f7fe fece 	bl	80069e0 <dir_read.constprop.0>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	f47f af60 	bne.w	8007b0a <scan_files.constprop.0+0x3ea>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8007c4a:	6937      	ldr	r7, [r6, #16]
	rv = rv << 8 | ptr[0];
 8007c4c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8007c50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8007c54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007c58:	9a00      	ldr	r2, [sp, #0]
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d1ef      	bne.n	8007c3e <scan_files.constprop.0+0x51e>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8007c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 8264 	beq.w	8008130 <scan_files.constprop.0+0xa10>
 8007c68:	f103 38ff 	add.w	r8, r3, #4294967295
 8007c6c:	fa5f f888 	uxtb.w	r8, r8
 8007c70:	f108 0301 	add.w	r3, r8, #1
 8007c74:	4604      	mov	r4, r0
 8007c76:	2540      	movs	r5, #64	; 0x40
 8007c78:	9306      	str	r3, [sp, #24]
 8007c7a:	e000      	b.n	8007c7e <scan_files.constprop.0+0x55e>
 8007c7c:	461c      	mov	r4, r3
				if ((di % SZDIRE) == 0) di += 2;
 8007c7e:	06e8      	lsls	r0, r5, #27
 8007c80:	bf08      	it	eq
 8007c82:	3502      	addeq	r5, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8007c84:	197b      	adds	r3, r7, r5
	rv = rv << 8 | ptr[0];
 8007c86:	7858      	ldrb	r0, [r3, #1]
 8007c88:	5d7b      	ldrb	r3, [r7, r5]
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8007c8a:	3502      	adds	r5, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8007c8c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8007c90:	f7f9 f8ae 	bl	8000df0 <ff_wtoupper>
 8007c94:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8007c98:	4681      	mov	r9, r0
 8007c9a:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
 8007c9e:	f7f9 f8a7 	bl	8000df0 <ff_wtoupper>
 8007ca2:	4581      	cmp	r9, r0
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8007ca4:	f104 0301 	add.w	r3, r4, #1
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8007ca8:	d1c9      	bne.n	8007c3e <scan_files.constprop.0+0x51e>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8007caa:	4544      	cmp	r4, r8
 8007cac:	d1e6      	bne.n	8007c7c <scan_files.constprop.0+0x55c>
 8007cae:	9b06      	ldr	r3, [sp, #24]
 8007cb0:	eb0a 0243 	add.w	r2, sl, r3, lsl #1
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8007cb4:	8813      	ldrh	r3, [r2, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1c1      	bne.n	8007c3e <scan_files.constprop.0+0x51e>
 8007cba:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cbe:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8007cc2:	e6e9      	b.n	8007a98 <scan_files.constprop.0+0x378>
		if (wc >= 0x100) {				/* Is this a DBC? */
 8007cc4:	28ff      	cmp	r0, #255	; 0xff
 8007cc6:	d98e      	bls.n	8007be6 <scan_files.constprop.0+0x4c6>
			if (i >= ni - 1) {			/* Field overflow? */
 8007cc8:	f10a 32ff 	add.w	r2, sl, #4294967295
 8007ccc:	455a      	cmp	r2, fp
 8007cce:	d909      	bls.n	8007ce4 <scan_files.constprop.0+0x5c4>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8007cd0:	aa22      	add	r2, sp, #136	; 0x88
 8007cd2:	445a      	add	r2, fp
 8007cd4:	0a01      	lsrs	r1, r0, #8
 8007cd6:	461d      	mov	r5, r3
 8007cd8:	f10b 0b01 	add.w	fp, fp, #1
 8007cdc:	f802 1c10 	strb.w	r1, [r2, #-16]
 8007ce0:	b2c0      	uxtb	r0, r0
 8007ce2:	e787      	b.n	8007bf4 <scan_files.constprop.0+0x4d4>
				cf |= NS_LOSS | NS_LFN;
 8007ce4:	f045 0503 	orr.w	r5, r5, #3
 8007ce8:	46d3      	mov	fp, sl
 8007cea:	b2ed      	uxtb	r5, r5
 8007cec:	e64b      	b.n	8007986 <scan_files.constprop.0+0x266>
	rv = rv << 8 | ptr[0];
 8007cee:	7eea      	ldrb	r2, [r5, #27]
 8007cf0:	7eab      	ldrb	r3, [r5, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007cf2:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8007cf6:	f47f af02 	bne.w	8007afe <scan_files.constprop.0+0x3de>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	782b      	ldrb	r3, [r5, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007cfe:	68f2      	ldr	r2, [r6, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007d00:	9309      	str	r3, [sp, #36]	; 0x24
 8007d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d06:	3b01      	subs	r3, #1
 8007d08:	f8df c194 	ldr.w	ip, [pc, #404]	; 8007ea0 <scan_files.constprop.0+0x780>
 8007d0c:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8007d10:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007d14:	9600      	str	r6, [sp, #0]
 8007d16:	940a      	str	r4, [sp, #40]	; 0x28
 8007d18:	f8cd 9020 	str.w	r9, [sp, #32]
 8007d1c:	462c      	mov	r4, r5
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007d1e:	4608      	mov	r0, r1
 8007d20:	4616      	mov	r6, r2
 8007d22:	4699      	mov	r9, r3
 8007d24:	4665      	mov	r5, ip
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007d26:	920b      	str	r2, [sp, #44]	; 0x2c
 8007d28:	f8cd a018 	str.w	sl, [sp, #24]
 8007d2c:	e015      	b.n	8007d5a <scan_files.constprop.0+0x63a>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007d2e:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 8007d32:	d820      	bhi.n	8007d76 <scan_files.constprop.0+0x656>
 8007d34:	4638      	mov	r0, r7
 8007d36:	f7f9 f85b 	bl	8000df0 <ff_wtoupper>
 8007d3a:	4684      	mov	ip, r0
 8007d3c:	f836 0019 	ldrh.w	r0, [r6, r9, lsl #1]
 8007d40:	46e1      	mov	r9, ip
 8007d42:	f7f9 f855 	bl	8000df0 <ff_wtoupper>
 8007d46:	4581      	cmp	r9, r0
 8007d48:	d115      	bne.n	8007d76 <scan_files.constprop.0+0x656>
	rv = rv << 8 | ptr[0];
 8007d4a:	4638      	mov	r0, r7
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007d4c:	46d1      	mov	r9, sl
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007d4e:	4b53      	ldr	r3, [pc, #332]	; (8007e9c <scan_files.constprop.0+0x77c>)
 8007d50:	42ab      	cmp	r3, r5
 8007d52:	f000 81d1 	beq.w	80080f8 <scan_files.constprop.0+0x9d8>
 8007d56:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007d5a:	1867      	adds	r7, r4, r1
	rv = rv << 8 | ptr[0];
 8007d5c:	787f      	ldrb	r7, [r7, #1]
 8007d5e:	f814 c001 	ldrb.w	ip, [r4, r1]
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007d62:	f109 0a01 	add.w	sl, r9, #1
	rv = rv << 8 | ptr[0];
 8007d66:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
		if (wc != 0) {
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d1df      	bne.n	8007d2e <scan_files.constprop.0+0x60e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d72:	429f      	cmp	r7, r3
 8007d74:	d0eb      	beq.n	8007d4e <scan_files.constprop.0+0x62e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007d76:	24ff      	movs	r4, #255	; 0xff
 8007d78:	9e00      	ldr	r6, [sp, #0]
 8007d7a:	f8dd a018 	ldr.w	sl, [sp, #24]
 8007d7e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d82:	e650      	b.n	8007a26 <scan_files.constprop.0+0x306>
 8007d84:	786b      	ldrb	r3, [r5, #1]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f47f ad7b 	bne.w	8007882 <scan_files.constprop.0+0x162>
 8007d8c:	f7f9 f8f8 	bl	8000f80 <disk_initialize.part.0>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007d90:	f010 0001 	ands.w	r0, r0, #1
 8007d94:	f47f ad75 	bne.w	8007882 <scan_files.constprop.0+0x162>
 8007d98:	f44f 618c 	mov.w	r1, #1120	; 0x460
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007d9c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007d9e:	f7ff fc47 	bl	8007630 <chHeapAllocAligned.constprop.0>
			INIT_NAMBUF(fs);
 8007da2:	4605      	mov	r5, r0
 8007da4:	2800      	cmp	r0, #0
 8007da6:	f43f ad1a 	beq.w	80077de <scan_files.constprop.0+0xbe>
 8007daa:	f500 7300 	add.w	r3, r0, #512	; 0x200
 8007dae:	e9c6 0303 	strd	r0, r3, [r6, #12]
			res = DIR_READ_FILE(dp);		/* Read an item */
 8007db2:	9804      	ldr	r0, [sp, #16]
 8007db4:	f7fe fe14 	bl	80069e0 <dir_read.constprop.0>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
 8007db8:	f010 06fb 	ands.w	r6, r0, #251	; 0xfb
 8007dbc:	d004      	beq.n	8007dc8 <scan_files.constprop.0+0x6a8>
 8007dbe:	4680      	mov	r8, r0
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f002 fbfd 	bl	800a5c0 <chHeapFree>
 8007dc6:	e4b8      	b.n	800773a <scan_files.constprop.0+0x1a>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8007dc8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
	FATFS *fs = dp->obj.fs;
 8007dca:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	fno->fname[0] = 0;			/* Invaidate file info */
 8007dce:	76a6      	strb	r6, [r4, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 80a8 	beq.w	8007f26 <scan_files.constprop.0+0x806>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8007dd6:	f898 3000 	ldrb.w	r3, [r8]
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	f000 812e 	beq.w	800803c <scan_files.constprop.0+0x91c>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007de0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007de2:	3301      	adds	r3, #1
 8007de4:	d034      	beq.n	8007e50 <scan_files.constprop.0+0x730>
			while (fs->lfnbuf[si] != 0) {
 8007de6:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8007dea:	f8be 3000 	ldrh.w	r3, [lr]
 8007dee:	b353      	cbz	r3, 8007e46 <scan_files.constprop.0+0x726>
			si = di = hs = 0;
 8007df0:	2600      	movs	r6, #0
			while (fs->lfnbuf[si] != 0) {
 8007df2:	f04f 0a02 	mov.w	sl, #2
			si = di = hs = 0;
 8007df6:	4637      	mov	r7, r6
 8007df8:	e00d      	b.n	8007e16 <scan_files.constprop.0+0x6f6>
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
 8007dfa:	f7f9 f8a1 	bl	8000f40 <put_utf>
				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f000 810a 	beq.w	8008018 <scan_files.constprop.0+0x8f8>
 8007e04:	f8d8 e00c 	ldr.w	lr, [r8, #12]
				hs = 0;
 8007e08:	2700      	movs	r7, #0
			while (fs->lfnbuf[si] != 0) {
 8007e0a:	f83e 300a 	ldrh.w	r3, [lr, sl]
				di += wc;
 8007e0e:	4406      	add	r6, r0
 8007e10:	f10a 0a02 	add.w	sl, sl, #2
			while (fs->lfnbuf[si] != 0) {
 8007e14:	b1b3      	cbz	r3, 8007e44 <scan_files.constprop.0+0x724>
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
 8007e16:	f106 011a 	add.w	r1, r6, #26
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8007e1a:	f503 5c20 	add.w	ip, r3, #10240	; 0x2800
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
 8007e1e:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
 8007e22:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8007e26:	4421      	add	r1, r4
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8007e28:	fa1f fc8c 	uxth.w	ip, ip
 8007e2c:	2f00      	cmp	r7, #0
 8007e2e:	d1e4      	bne.n	8007dfa <scan_files.constprop.0+0x6da>
 8007e30:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
 8007e34:	d2e1      	bcs.n	8007dfa <scan_files.constprop.0+0x6da>
 8007e36:	461f      	mov	r7, r3
			while (fs->lfnbuf[si] != 0) {
 8007e38:	f83e 300a 	ldrh.w	r3, [lr, sl]
 8007e3c:	f10a 0a02 	add.w	sl, sl, #2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e8      	bne.n	8007e16 <scan_files.constprop.0+0x6f6>
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 8007e44:	b107      	cbz	r7, 8007e48 <scan_files.constprop.0+0x728>
			si = di = hs = 0;
 8007e46:	2600      	movs	r6, #0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4426      	add	r6, r4
 8007e4c:	76b3      	strb	r3, [r6, #26]
 8007e4e:	7ea6      	ldrb	r6, [r4, #26]
		wc = dp->dir[si++];			/* Get a char */
 8007e50:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8007e52:	2100      	movs	r1, #0
 8007e54:	1e7a      	subs	r2, r7, #1
 8007e56:	f107 0c0a 	add.w	ip, r7, #10
 8007e5a:	e005      	b.n	8007e68 <scan_files.constprop.0+0x748>
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 8007e5c:	1860      	adds	r0, r4, r1
 8007e5e:	7343      	strb	r3, [r0, #13]
 8007e60:	3101      	adds	r1, #1
	while (si < 11) {		/* Get SFN from SFN entry */
 8007e62:	4594      	cmp	ip, r2
 8007e64:	f000 808f 	beq.w	8007f86 <scan_files.constprop.0+0x866>
 8007e68:	4610      	mov	r0, r2
		wc = dp->dir[si++];			/* Get a char */
 8007e6a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 8007e6e:	3807      	subs	r0, #7
		if (wc == ' ') continue;	/* Skip padding spaces */
 8007e70:	2b20      	cmp	r3, #32
		wc = dp->dir[si++];			/* Get a char */
 8007e72:	fa1f fe83 	uxth.w	lr, r3
		if (wc == ' ') continue;	/* Skip padding spaces */
 8007e76:	d0f4      	beq.n	8007e62 <scan_files.constprop.0+0x742>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 8007e78:	f1be 0f05 	cmp.w	lr, #5
 8007e7c:	bf08      	it	eq
 8007e7e:	23e5      	moveq	r3, #229	; 0xe5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 8007e80:	42b8      	cmp	r0, r7
 8007e82:	d1eb      	bne.n	8007e5c <scan_files.constprop.0+0x73c>
 8007e84:	290b      	cmp	r1, #11
 8007e86:	d8e9      	bhi.n	8007e5c <scan_files.constprop.0+0x73c>
 8007e88:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
 8007e8c:	1860      	adds	r0, r4, r1
 8007e8e:	f880 e00d 	strb.w	lr, [r0, #13]
 8007e92:	3101      	adds	r1, #1
 8007e94:	e7e2      	b.n	8007e5c <scan_files.constprop.0+0x73c>
 8007e96:	bf00      	nop
 8007e98:	0800db34 	.word	0x0800db34
 8007e9c:	0800dbc0 	.word	0x0800dbc0
 8007ea0:	0800dbb4 	.word	0x0800dbb4
 8007ea4:	f8dd 9000 	ldr.w	r9, [sp]
 8007ea8:	9d02      	ldr	r5, [sp, #8]
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8007eaa:	233f      	movs	r3, #63	; 0x3f
 8007eac:	2601      	movs	r6, #1
 8007eae:	76a3      	strb	r3, [r4, #26]
	fno->fname[di] = 0;						/* Terminate the name */
 8007eb0:	2700      	movs	r7, #0
 8007eb2:	4426      	add	r6, r4
 8007eb4:	76b7      	strb	r7, [r6, #26]
	fno->altname[0] = 0;					/* exFAT does not support SFN */
 8007eb6:	7367      	strb	r7, [r4, #13]
	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
 8007eb8:	f89a 3004 	ldrb.w	r3, [sl, #4]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8007ebc:	06da      	lsls	r2, r3, #27
	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
 8007ebe:	7323      	strb	r3, [r4, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8007ec0:	f100 8142 	bmi.w	8008148 <scan_files.constprop.0+0xa28>
	rv = rv << 8 | ptr[2];
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f89a 203a 	ldrb.w	r2, [sl, #58]	; 0x3a
	rv = rv << 8 | ptr[3];
 8007eca:	f89a 003b 	ldrb.w	r0, [sl, #59]	; 0x3b
	rv = rv << 8 | ptr[2];
 8007ece:	e9cd 2300 	strd	r2, r3, [sp]
	rv = rv << 8 | ptr[1];
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f89a 2039 	ldrb.w	r2, [sl, #57]	; 0x39
	rv = rv << 8 | ptr[0];
 8007ed8:	f89a 7038 	ldrb.w	r7, [sl, #56]	; 0x38
	rv = rv << 8 | ptr[1];
 8007edc:	e9cd 2302 	strd	r2, r3, [sp, #8]
	rv = rv << 8 | ptr[4];
 8007ee0:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
	rv = rv << 8 | ptr[2];
 8007ee4:	9a00      	ldr	r2, [sp, #0]
 8007ee6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8007eea:	0c1b      	lsrs	r3, r3, #16
 8007eec:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[1];
 8007ef0:	9902      	ldr	r1, [sp, #8]
 8007ef2:	021b      	lsls	r3, r3, #8
 8007ef4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007ef8:	ea41 2602 	orr.w	r6, r1, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8007efc:	021b      	lsls	r3, r3, #8
 8007efe:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8007f02:	ea47 2706 	orr.w	r7, r7, r6, lsl #8
	rv = rv << 8 | ptr[0];
 8007f06:	f89a 200d 	ldrb.w	r2, [sl, #13]
 8007f0a:	f89a 100c 	ldrb.w	r1, [sl, #12]
 8007f0e:	f89a 000f 	ldrb.w	r0, [sl, #15]
 8007f12:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8007f16:	f89a 200e 	ldrb.w	r2, [sl, #14]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8007f1a:	6063      	str	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 8007f1c:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8007f20:	6027      	str	r7, [r4, #0]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 8007f22:	8161      	strh	r1, [r4, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 8007f24:	8123      	strh	r3, [r4, #8]
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
 8007f26:	9804      	ldr	r0, [sp, #16]
 8007f28:	f7fe fd0a 	bl	8006940 <dir_next.constprop.0>
 8007f2c:	4607      	mov	r7, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007f2e:	2f04      	cmp	r7, #4
 8007f30:	4628      	mov	r0, r5
 8007f32:	d069      	beq.n	8008008 <scan_files.constprop.0+0x8e8>
 8007f34:	f002 fb44 	bl	800a5c0 <chHeapFree>
    while (((res = f_readdir(&dir, &fno)) == FR_OK) && fno.fname[0]) {
 8007f38:	2f00      	cmp	r7, #0
 8007f3a:	d16a      	bne.n	8008012 <scan_files.constprop.0+0x8f2>
 8007f3c:	7ea7      	ldrb	r7, [r4, #26]
 8007f3e:	2f00      	cmp	r7, #0
 8007f40:	d067      	beq.n	8008012 <scan_files.constprop.0+0x8f2>
      if (fno.fattrib & AM_DIR) {
 8007f42:	7b23      	ldrb	r3, [r4, #12]
 8007f44:	06dd      	lsls	r5, r3, #27
 8007f46:	d517      	bpl.n	8007f78 <scan_files.constprop.0+0x858>
        *(path + i) = '/';
 8007f48:	232f      	movs	r3, #47	; 0x2f
        strcpy(path + i + 1, fn);
 8007f4a:	4d93      	ldr	r5, [pc, #588]	; (8008198 <scan_files.constprop.0+0xa78>)
 8007f4c:	f109 0001 	add.w	r0, r9, #1
        *(path + i) = '/';
 8007f50:	f805 3009 	strb.w	r3, [r5, r9]
        strcpy(path + i + 1, fn);
 8007f54:	4991      	ldr	r1, [pc, #580]	; (800819c <scan_files.constprop.0+0xa7c>)
 8007f56:	4428      	add	r0, r5
 8007f58:	f004 f9f2 	bl	800c340 <strcpy>
        res = scan_files(chp, path);
 8007f5c:	4658      	mov	r0, fp
 8007f5e:	f7ff fbdf 	bl	8007720 <scan_files.constprop.0>
        *(path + i) = '\0';
 8007f62:	2300      	movs	r3, #0
        if (res != FR_OK)
 8007f64:	4607      	mov	r7, r0
        *(path + i) = '\0';
 8007f66:	f805 3009 	strb.w	r3, [r5, r9]
        if (res != FR_OK)
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d151      	bne.n	8008012 <scan_files.constprop.0+0x8f2>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007f6e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007f70:	2d00      	cmp	r5, #0
 8007f72:	f47f ac7e 	bne.w	8007872 <scan_files.constprop.0+0x152>
 8007f76:	e484      	b.n	8007882 <scan_files.constprop.0+0x162>
        chprintf(chp, "%s/%s\r\n", path, fn);
 8007f78:	4658      	mov	r0, fp
 8007f7a:	4b88      	ldr	r3, [pc, #544]	; (800819c <scan_files.constprop.0+0xa7c>)
 8007f7c:	4a86      	ldr	r2, [pc, #536]	; (8008198 <scan_files.constprop.0+0xa78>)
 8007f7e:	4988      	ldr	r1, [pc, #544]	; (80081a0 <scan_files.constprop.0+0xa80>)
 8007f80:	f001 fb56 	bl	8009630 <chprintf>
 8007f84:	e7f3      	b.n	8007f6e <scan_files.constprop.0+0x84e>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 8007f86:	2200      	movs	r2, #0
 8007f88:	1863      	adds	r3, r4, r1
 8007f8a:	735a      	strb	r2, [r3, #13]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 8007f8c:	b9fe      	cbnz	r6, 8007fce <scan_files.constprop.0+0x8ae>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	d044      	beq.n	800801c <scan_files.constprop.0+0x8fc>
			for (si = di = 0; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8007f92:	7b63      	ldrb	r3, [r4, #13]
 8007f94:	b1ab      	cbz	r3, 8007fc2 <scan_files.constprop.0+0x8a2>
 8007f96:	4a83      	ldr	r2, [pc, #524]	; (80081a4 <scan_files.constprop.0+0xa84>)
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & ((si >= 9) ? NS_EXT : NS_BODY))) wc += 0x20;
 8007f98:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 8007f9c:	2919      	cmp	r1, #25
 8007f9e:	d80a      	bhi.n	8007fb6 <scan_files.constprop.0+0x896>
 8007fa0:	2e08      	cmp	r6, #8
 8007fa2:	bf8c      	ite	hi
 8007fa4:	2110      	movhi	r1, #16
 8007fa6:	2108      	movls	r1, #8
 8007fa8:	7b38      	ldrb	r0, [r7, #12]
 8007faa:	f103 0c20 	add.w	ip, r3, #32
 8007fae:	4208      	tst	r0, r1
 8007fb0:	bf18      	it	ne
 8007fb2:	fa5f f38c 	uxtbne.w	r3, ip
				fno->fname[di] = (TCHAR)wc;
 8007fb6:	7353      	strb	r3, [r2, #13]
			for (si = di = 0; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8007fb8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007fbc:	3601      	adds	r6, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1ea      	bne.n	8007f98 <scan_files.constprop.0+0x878>
		fno->fname[di] = 0;	/* Terminate the LFN */
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	4426      	add	r6, r4
 8007fc6:	76b3      	strb	r3, [r6, #26]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 8007fc8:	7b3b      	ldrb	r3, [r7, #12]
 8007fca:	b903      	cbnz	r3, 8007fce <scan_files.constprop.0+0x8ae>
 8007fcc:	7363      	strb	r3, [r4, #13]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8007fce:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[2];
 8007fd0:	8bf8      	ldrh	r0, [r7, #30]
	rv = rv << 8 | ptr[1];
 8007fd2:	7f7a      	ldrb	r2, [r7, #29]
	rv = rv << 8 | ptr[0];
 8007fd4:	7f3b      	ldrb	r3, [r7, #28]
	rv = rv << 8 | ptr[1];
 8007fd6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8007fda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8007fde:	7df8      	ldrb	r0, [r7, #23]
 8007fe0:	7dba      	ldrb	r2, [r7, #22]
 8007fe2:	7e7e      	ldrb	r6, [r7, #25]
 8007fe4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8007fe8:	6023      	str	r3, [r4, #0]
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8007fea:	7af8      	ldrb	r0, [r7, #11]
	rv = rv << 8 | ptr[0];
 8007fec:	7e3b      	ldrb	r3, [r7, #24]
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8007fee:	7320      	strb	r0, [r4, #12]
	rv = rv << 8 | ptr[0];
 8007ff0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
				res = dir_next(dp, 0);		/* Increment index for next */
 8007ff4:	9804      	ldr	r0, [sp, #16]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8007ff6:	8162      	strh	r2, [r4, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8007ff8:	8123      	strh	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8007ffa:	6061      	str	r1, [r4, #4]
				res = dir_next(dp, 0);		/* Increment index for next */
 8007ffc:	f7fe fca0 	bl	8006940 <dir_next.constprop.0>
 8008000:	4607      	mov	r7, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008002:	2f04      	cmp	r7, #4
 8008004:	4628      	mov	r0, r5
 8008006:	d195      	bne.n	8007f34 <scan_files.constprop.0+0x814>
 8008008:	f002 fada 	bl	800a5c0 <chHeapFree>
    while (((res = f_readdir(&dir, &fno)) == FR_OK) && fno.fname[0]) {
 800800c:	7ea7      	ldrb	r7, [r4, #26]
 800800e:	2f00      	cmp	r7, #0
 8008010:	d197      	bne.n	8007f42 <scan_files.constprop.0+0x822>
 8008012:	46b8      	mov	r8, r7
 8008014:	f7ff bb91 	b.w	800773a <scan_files.constprop.0+0x1a>
				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
 8008018:	4606      	mov	r6, r0
 800801a:	e713      	b.n	8007e44 <scan_files.constprop.0+0x724>
			fno->fname[di++] = '?';
 800801c:	233f      	movs	r3, #63	; 0x3f
 800801e:	2601      	movs	r6, #1
 8008020:	76a3      	strb	r3, [r4, #26]
 8008022:	e7ce      	b.n	8007fc2 <scan_files.constprop.0+0x8a2>
			ns = dp->fn[NSFLAG];
 8008024:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008028:	075a      	lsls	r2, r3, #29
 800802a:	f57f ac30 	bpl.w	800788e <scan_files.constprop.0+0x16e>
 800802e:	9805      	ldr	r0, [sp, #20]
 8008030:	f002 fac6 	bl	800a5c0 <chHeapFree>
 8008034:	f04f 0805 	mov.w	r8, #5
 8008038:	f7ff bb7f 	b.w	800773a <scan_files.constprop.0+0x1a>
		get_xfileinfo(fs->dirbuf, fno);
 800803c:	f8d8 a010 	ldr.w	sl, [r8, #16]
	while (nc < dirb[XDIR_NumName]) {
 8008040:	f89a 3023 	ldrb.w	r3, [sl, #35]	; 0x23
 8008044:	2b00      	cmp	r3, #0
 8008046:	f43f af30 	beq.w	8007eaa <scan_files.constprop.0+0x78a>
	nc = 0; hs = 0; di = 0;
 800804a:	f8cd 9000 	str.w	r9, [sp]
 800804e:	9502      	str	r5, [sp, #8]
	si = SZDIRE * 2;	/* 1st C1 entry */
 8008050:	2740      	movs	r7, #64	; 0x40
	nc = 0; hs = 0; di = 0;
 8008052:	46b0      	mov	r8, r6
 8008054:	4635      	mov	r5, r6
 8008056:	4699      	mov	r9, r3
 8008058:	e00e      	b.n	8008078 <scan_files.constprop.0+0x958>
		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800805a:	f7f8 ff71 	bl	8000f40 <put_utf>
		if (wc == 0) { di = 0; break; }	/* Buffer overflow or wrong encoding? */
 800805e:	2800      	cmp	r0, #0
 8008060:	f43f af20 	beq.w	8007ea4 <scan_files.constprop.0+0x784>
		hs = 0;
 8008064:	2500      	movs	r5, #0
 8008066:	f89a 9023 	ldrb.w	r9, [sl, #35]	; 0x23
		di += wc;
 800806a:	4406      	add	r6, r0
	while (nc < dirb[XDIR_NumName]) {
 800806c:	45c8      	cmp	r8, r9
 800806e:	d26d      	bcs.n	800814c <scan_files.constprop.0+0xa2c>
		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
 8008070:	f5b7 7f18 	cmp.w	r7, #608	; 0x260
 8008074:	f4bf af16 	bcs.w	8007ea4 <scan_files.constprop.0+0x784>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8008078:	06f8      	lsls	r0, r7, #27
 800807a:	bf08      	it	eq
 800807c:	3702      	addeq	r7, #2
		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
 800807e:	eb0a 0307 	add.w	r3, sl, r7
	rv = rv << 8 | ptr[0];
 8008082:	7858      	ldrb	r0, [r3, #1]
 8008084:	f81a 3007 	ldrb.w	r3, [sl, r7]
		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8008088:	f106 011a 	add.w	r1, r6, #26
	rv = rv << 8 | ptr[0];
 800808c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8008090:	f503 5c20 	add.w	ip, r3, #10240	; 0x2800
		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8008094:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
 8008098:	4421      	add	r1, r4
		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
 800809a:	f108 0801 	add.w	r8, r8, #1
		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800809e:	ea43 4005 	orr.w	r0, r3, r5, lsl #16
		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 80080a2:	fa1f fc8c 	uxth.w	ip, ip
		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
 80080a6:	3702      	adds	r7, #2
		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	d1d6      	bne.n	800805a <scan_files.constprop.0+0x93a>
 80080ac:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
 80080b0:	d2d3      	bcs.n	800805a <scan_files.constprop.0+0x93a>
 80080b2:	461d      	mov	r5, r3
 80080b4:	e7da      	b.n	800806c <scan_files.constprop.0+0x94c>
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 80080b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080b8:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 80080bc:	6918      	ldr	r0, [r3, #16]
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
 80080be:	9c10      	ldr	r4, [sp, #64]	; 0x40
						dp->obj.c_ofs = dp->blk_ofs;
 80080c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 80080c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80080c6:	430a      	orrs	r2, r1
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 80080c8:	4659      	mov	r1, fp
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 80080ca:	9217      	str	r2, [sp, #92]	; 0x5c
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
 80080cc:	9416      	str	r4, [sp, #88]	; 0x58
						dp->obj.c_ofs = dp->blk_ofs;
 80080ce:	9318      	str	r3, [sp, #96]	; 0x60
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 80080d0:	f7f8 fee6 	bl	8000ea0 <init_alloc_info.isra.0>
 80080d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080d6:	f7ff bbb0 	b.w	800783a <scan_files.constprop.0+0x11a>
				res = FR_NO_PATH; break;
 80080da:	f04f 0805 	mov.w	r8, #5
 80080de:	e403      	b.n	80078e8 <scan_files.constprop.0+0x1c8>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80080e0:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
				cf |= NS_LOSS | NS_LFN;
 80080e4:	f045 0503 	orr.w	r5, r5, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80080e8:	2be5      	cmp	r3, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN;
 80080ea:	b2ed      	uxtb	r5, r5
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80080ec:	f47f ac5b 	bne.w	80079a6 <scan_files.constprop.0+0x286>
 80080f0:	2305      	movs	r3, #5
 80080f2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 80080f6:	e456      	b.n	80079a6 <scan_files.constprop.0+0x286>
 80080f8:	464b      	mov	r3, r9
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80080fa:	e9dd 9208 	ldrd	r9, r2, [sp, #32]
 80080fe:	0655      	lsls	r5, r2, #25
 8008100:	9e00      	ldr	r6, [sp, #0]
 8008102:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008104:	f8dd a018 	ldr.w	sl, [sp, #24]
 8008108:	d506      	bpl.n	8008118 <scan_files.constprop.0+0x9f8>
 800810a:	b128      	cbz	r0, 8008118 <scan_files.constprop.0+0x9f8>
 800810c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800810e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f47f acf3 	bne.w	8007afe <scan_files.constprop.0+0x3de>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008118:	3c01      	subs	r4, #1
 800811a:	b2e4      	uxtb	r4, r4
 800811c:	e483      	b.n	8007a26 <scan_files.constprop.0+0x306>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800811e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008122:	b29b      	uxth	r3, r3
 8008124:	2b19      	cmp	r3, #25
 8008126:	d81d      	bhi.n	8008164 <scan_files.constprop.0+0xa44>
					b |= 2;
 8008128:	f048 0802 	orr.w	r8, r8, #2
 800812c:	b2c0      	uxtb	r0, r0
 800812e:	e561      	b.n	8007bf4 <scan_files.constprop.0+0x4d4>
 8008130:	68f2      	ldr	r2, [r6, #12]
 8008132:	e5bf      	b.n	8007cb4 <scan_files.constprop.0+0x594>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008134:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8008138:	2be5      	cmp	r3, #229	; 0xe5
 800813a:	f47f ac4d 	bne.w	80079d8 <scan_files.constprop.0+0x2b8>
 800813e:	2305      	movs	r3, #5
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8008140:	4680      	mov	r8, r0
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008142:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8008146:	e438      	b.n	80079ba <scan_files.constprop.0+0x29a>
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8008148:	463b      	mov	r3, r7
 800814a:	e6dc      	b.n	8007f06 <scan_files.constprop.0+0x7e6>
 800814c:	46ae      	mov	lr, r5
 800814e:	f8dd 9000 	ldr.w	r9, [sp]
 8008152:	9d02      	ldr	r5, [sp, #8]
	if (hs != 0) di = 0;					/* Broken surrogate pair? */
 8008154:	f1be 0f00 	cmp.w	lr, #0
 8008158:	f47f aea7 	bne.w	8007eaa <scan_files.constprop.0+0x78a>
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800815c:	2e00      	cmp	r6, #0
 800815e:	f47f aea7 	bne.w	8007eb0 <scan_files.constprop.0+0x790>
 8008162:	e6a2      	b.n	8007eaa <scan_files.constprop.0+0x78a>
				if (IsLower(wc)) {		/* ASCII lower case? */
 8008164:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008168:	b29b      	uxth	r3, r3
 800816a:	2b19      	cmp	r3, #25
					b |= 1; wc -= 0x20;
 800816c:	bf97      	itett	ls
 800816e:	3820      	subls	r0, #32
 8008170:	b2c0      	uxtbhi	r0, r0
 8008172:	b2c0      	uxtbls	r0, r0
 8008174:	f048 0801 	orrls.w	r8, r8, #1
 8008178:	e53c      	b.n	8007bf4 <scan_files.constprop.0+0x4d4>
	WORD sum = 0;
 800817a:	9200      	str	r2, [sp, #0]
 800817c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008180:	e55d      	b.n	8007c3e <scan_files.constprop.0+0x51e>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8008182:	461d      	mov	r5, r3
 8008184:	f7ff bbf0 	b.w	8007968 <scan_files.constprop.0+0x248>
 8008188:	9805      	ldr	r0, [sp, #20]
 800818a:	f002 fa19 	bl	800a5c0 <chHeapFree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800818e:	f1b8 0f04 	cmp.w	r8, #4
 8008192:	f47f aad2 	bne.w	800773a <scan_files.constprop.0+0x1a>
 8008196:	e74d      	b.n	8008034 <scan_files.constprop.0+0x914>
 8008198:	20000e8c 	.word	0x20000e8c
 800819c:	200012aa 	.word	0x200012aa
 80081a0:	0800d894 	.word	0x0800d894
 80081a4:	2000129d 	.word	0x2000129d
	...

080081b0 <cmd_tree>:
static void cmd_tree(BaseSequentialStream *chp, int argc, char *argv[]) {
 80081b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (argc > 0) {
 80081b4:	2900      	cmp	r1, #0
static void cmd_tree(BaseSequentialStream *chp, int argc, char *argv[]) {
 80081b6:	b090      	sub	sp, #64	; 0x40
  if (argc > 0) {
 80081b8:	dc18      	bgt.n	80081ec <cmd_tree+0x3c>
  if (!fs_ready) {
 80081ba:	4b5c      	ldr	r3, [pc, #368]	; (800832c <cmd_tree+0x17c>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	b17b      	cbz	r3, 80081e0 <cmd_tree+0x30>
#if !FF_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Get Number of Free Clusters                                           */
/*-----------------------------------------------------------------------*/

FRESULT f_getfree (
 80081c0:	4b5b      	ldr	r3, [pc, #364]	; (8008330 <cmd_tree+0x180>)
 80081c2:	4607      	mov	r7, r0
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80081c4:	a902      	add	r1, sp, #8
 80081c6:	a803      	add	r0, sp, #12
 80081c8:	9303      	str	r3, [sp, #12]
 80081ca:	f7fd ffd9 	bl	8006180 <find_volume.constprop.0>
	if (res == FR_OK) {
 80081ce:	4604      	mov	r4, r0
 80081d0:	b190      	cbz	r0, 80081f8 <cmd_tree+0x48>
    chprintf(chp, "FS: f_getfree() failed\r\n");
 80081d2:	4638      	mov	r0, r7
 80081d4:	4957      	ldr	r1, [pc, #348]	; (8008334 <cmd_tree+0x184>)
 80081d6:	f001 fa2b 	bl	8009630 <chprintf>
}
 80081da:	b010      	add	sp, #64	; 0x40
 80081dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chprintf(chp, "File System not mounted\r\n");
 80081e0:	4955      	ldr	r1, [pc, #340]	; (8008338 <cmd_tree+0x188>)
 80081e2:	f001 fa25 	bl	8009630 <chprintf>
}
 80081e6:	b010      	add	sp, #64	; 0x40
 80081e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chprintf(chp, "Usage: tree\r\n");
 80081ec:	4953      	ldr	r1, [pc, #332]	; (800833c <cmd_tree+0x18c>)
 80081ee:	f001 fa1f 	bl	8009630 <chprintf>
}
 80081f2:	b010      	add	sp, #64	; 0x40
 80081f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*fatfs = fs;				/* Return ptr to the fs object */
 80081f8:	9802      	ldr	r0, [sp, #8]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80081fa:	e9d0 6806 	ldrd	r6, r8, [r0, #24]
 80081fe:	f1a8 0502 	sub.w	r5, r8, #2
 8008202:	42ae      	cmp	r6, r5
 8008204:	d930      	bls.n	8008268 <cmd_tree+0xb8>
			*nclst = fs->free_clst;
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 8008206:	7803      	ldrb	r3, [r0, #0]
			nfree = 0;
 8008208:	4626      	mov	r6, r4
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 800820a:	2b01      	cmp	r3, #1
 800820c:	d04d      	beq.n	80082aa <cmd_tree+0xfa>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) nfree++;
				} while (++clst < fs->n_fatent);
			} else {
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
 800820e:	2b04      	cmp	r3, #4
 8008210:	d065      	beq.n	80082de <cmd_tree+0x12e>
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
 8008212:	6a81      	ldr	r1, [r0, #40]	; 0x28
					i = 0;					/* Offset in the sector */
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
 8008214:	b94c      	cbnz	r4, 800822a <cmd_tree+0x7a>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008216:	6b83      	ldr	r3, [r0, #56]	; 0x38
							res = move_window(fs, sect++);
 8008218:	1c4d      	adds	r5, r1, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800821a:	4299      	cmp	r1, r3
 800821c:	d043      	beq.n	80082a6 <cmd_tree+0xf6>
 800821e:	f7fd ff07 	bl	8006030 <move_window.part.0>
							if (res != FR_OK) break;
 8008222:	2800      	cmp	r0, #0
 8008224:	d154      	bne.n	80082d0 <cmd_tree+0x120>
							res = move_window(fs, sect++);
 8008226:	4629      	mov	r1, r5
 8008228:	9802      	ldr	r0, [sp, #8]
						}
						if (fs->fs_type == FS_FAT16) {
 800822a:	7803      	ldrb	r3, [r0, #0]
 800822c:	2b02      	cmp	r3, #2
 800822e:	d02f      	beq.n	8008290 <cmd_tree+0xe0>
							if (ld_word(fs->win + i) == 0) nfree++;
							i += 2;
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 8008230:	f100 053c 	add.w	r5, r0, #60	; 0x3c
 8008234:	eb05 0c04 	add.w	ip, r5, r4
	rv = rv << 8 | ptr[2];
 8008238:	f8bc e002 	ldrh.w	lr, [ip, #2]
	rv = rv << 8 | ptr[1];
 800823c:	f89c 2001 	ldrb.w	r2, [ip, #1]
	rv = rv << 8 | ptr[0];
 8008240:	5d2b      	ldrb	r3, [r5, r4]
	rv = rv << 8 | ptr[1];
 8008242:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	rv = rv << 8 | ptr[0];
 8008246:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 800824a:	f033 4370 	bics.w	r3, r3, #4026531840	; 0xf0000000
 800824e:	bf08      	it	eq
 8008250:	3601      	addeq	r6, #1
							i += 4;
 8008252:	3404      	adds	r4, #4
						}
						i %= SS(fs);
					} while (--clst);
 8008254:	f1b8 0801 	subs.w	r8, r8, #1
						i %= SS(fs);
 8008258:	f3c4 0408 	ubfx	r4, r4, #0, #9
					} while (--clst);
 800825c:	d1da      	bne.n	8008214 <cmd_tree+0x64>
				}
			}
			*nclst = nfree;			/* Return the free clusters */
			fs->free_clst = nfree;	/* Now free_clst is valid */
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 800825e:	7903      	ldrb	r3, [r0, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008260:	6186      	str	r6, [r0, #24]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 8008262:	f043 0301 	orr.w	r3, r3, #1
 8008266:	7103      	strb	r3, [r0, #4]
           clusters, (uint32_t)SDC_FS.csize,
 8008268:	4b35      	ldr	r3, [pc, #212]	; (8008340 <cmd_tree+0x190>)
  chprintf(chp,
 800826a:	4632      	mov	r2, r6
 800826c:	895b      	ldrh	r3, [r3, #10]
 800826e:	4935      	ldr	r1, [pc, #212]	; (8008344 <cmd_tree+0x194>)
 8008270:	fb06 f603 	mul.w	r6, r6, r3
 8008274:	0276      	lsls	r6, r6, #9
 8008276:	4638      	mov	r0, r7
 8008278:	9600      	str	r6, [sp, #0]
 800827a:	f001 f9d9 	bl	8009630 <chprintf>
  fbuff[0] = 0;
 800827e:	2200      	movs	r2, #0
 8008280:	4b31      	ldr	r3, [pc, #196]	; (8008348 <cmd_tree+0x198>)
  scan_files(chp, (char *)fbuff);
 8008282:	4638      	mov	r0, r7
  fbuff[0] = 0;
 8008284:	701a      	strb	r2, [r3, #0]
  scan_files(chp, (char *)fbuff);
 8008286:	f7ff fa4b 	bl	8007720 <scan_files.constprop.0>
}
 800828a:	b010      	add	sp, #64	; 0x40
 800828c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
							if (ld_word(fs->win + i) == 0) nfree++;
 8008290:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8008294:	191a      	adds	r2, r3, r4
	rv = rv << 8 | ptr[0];
 8008296:	7852      	ldrb	r2, [r2, #1]
 8008298:	5d1b      	ldrb	r3, [r3, r4]
							i += 2;
 800829a:	3402      	adds	r4, #2
							if (ld_word(fs->win + i) == 0) nfree++;
 800829c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80082a0:	bf08      	it	eq
 80082a2:	3601      	addeq	r6, #1
 80082a4:	e7d6      	b.n	8008254 <cmd_tree+0xa4>
							res = move_window(fs, sect++);
 80082a6:	4629      	mov	r1, r5
 80082a8:	e7bf      	b.n	800822a <cmd_tree+0x7a>
				clst = 2; obj.fs = fs;
 80082aa:	2402      	movs	r4, #2
 80082ac:	9004      	str	r0, [sp, #16]
 80082ae:	e007      	b.n	80082c0 <cmd_tree+0x110>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80082b0:	2801      	cmp	r0, #1
 80082b2:	d00d      	beq.n	80082d0 <cmd_tree+0x120>
					if (stat == 0) nfree++;
 80082b4:	b900      	cbnz	r0, 80082b8 <cmd_tree+0x108>
 80082b6:	3601      	adds	r6, #1
				} while (++clst < fs->n_fatent);
 80082b8:	9802      	ldr	r0, [sp, #8]
 80082ba:	69c3      	ldr	r3, [r0, #28]
 80082bc:	429c      	cmp	r4, r3
 80082be:	d2ce      	bcs.n	800825e <cmd_tree+0xae>
					stat = get_fat(&obj, clst);
 80082c0:	4621      	mov	r1, r4
 80082c2:	a804      	add	r0, sp, #16
 80082c4:	f7fe fa4c 	bl	8006760 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80082c8:	1c43      	adds	r3, r0, #1
				} while (++clst < fs->n_fatent);
 80082ca:	f104 0401 	add.w	r4, r4, #1
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80082ce:	d1ef      	bne.n	80082b0 <cmd_tree+0x100>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80082d0:	9b02      	ldr	r3, [sp, #8]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 80082d2:	791a      	ldrb	r2, [r3, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80082d4:	619e      	str	r6, [r3, #24]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 80082d6:	f042 0201 	orr.w	r2, r2, #1
 80082da:	711a      	strb	r2, [r3, #4]
  if (err != FR_OK) {
 80082dc:	e779      	b.n	80081d2 <cmd_tree+0x22>
					sect = fs->bitbase;			/* Bitmap sector */
 80082de:	6b41      	ldr	r1, [r0, #52]	; 0x34
						if (i == 0) {
 80082e0:	b954      	cbnz	r4, 80082f8 <cmd_tree+0x148>
	if (sector != fs->winsect) {	/* Window offset changed? */
 80082e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
							res = move_window(fs, sect++);
 80082e4:	f101 0801 	add.w	r8, r1, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80082e8:	4299      	cmp	r1, r3
 80082ea:	d01c      	beq.n	8008326 <cmd_tree+0x176>
 80082ec:	f7fd fea0 	bl	8006030 <move_window.part.0>
							if (res != FR_OK) break;
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d1ed      	bne.n	80082d0 <cmd_tree+0x120>
							res = move_window(fs, sect++);
 80082f4:	4641      	mov	r1, r8
 80082f6:	9802      	ldr	r0, [sp, #8]
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 80082f8:	1903      	adds	r3, r0, r4
 80082fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082fe:	f1a5 0208 	sub.w	r2, r5, #8
 8008302:	2d00      	cmp	r5, #0
 8008304:	d0ab      	beq.n	800825e <cmd_tree+0xae>
							if (!(bm & 1)) nfree++;
 8008306:	f013 0f01 	tst.w	r3, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800830a:	f105 35ff 	add.w	r5, r5, #4294967295
							if (!(bm & 1)) nfree++;
 800830e:	bf08      	it	eq
 8008310:	3601      	addeq	r6, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8008312:	4295      	cmp	r5, r2
							bm >>= 1;
 8008314:	ea4f 0353 	mov.w	r3, r3, lsr #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8008318:	d1f3      	bne.n	8008302 <cmd_tree+0x152>
						i = (i + 1) % SS(fs);
 800831a:	3401      	adds	r4, #1
 800831c:	f3c4 0408 	ubfx	r4, r4, #0, #9
					} while (clst);
 8008320:	2d00      	cmp	r5, #0
 8008322:	d1dd      	bne.n	80082e0 <cmd_tree+0x130>
 8008324:	e79b      	b.n	800825e <cmd_tree+0xae>
							res = move_window(fs, sect++);
 8008326:	4641      	mov	r1, r8
 8008328:	e7e6      	b.n	80082f8 <cmd_tree+0x148>
 800832a:	bf00      	nop
 800832c:	200013b0 	.word	0x200013b0
 8008330:	0800d7c4 	.word	0x0800d7c4
 8008334:	0800d8c8 	.word	0x0800d8c8
 8008338:	0800d8ac 	.word	0x0800d8ac
 800833c:	0800d89c 	.word	0x0800d89c
 8008340:	200009c8 	.word	0x200009c8
 8008344:	0800d8e4 	.word	0x0800d8e4
 8008348:	20000e8c 	.word	0x20000e8c
 800834c:	00000000 	.word	0x00000000

08008350 <oslib_test_008_002_execute.lto_priv.0>:
  void *p1;
  size_t total_size, largest_size;

  /* [8.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8008350:	2301      	movs	r3, #1
static void oslib_test_008_002_execute(void) {
 8008352:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8008354:	4e14      	ldr	r6, [pc, #80]	; (80083a8 <oslib_test_008_002_execute.lto_priv.0+0x58>)
static void oslib_test_008_002_execute(void) {
 8008356:	b082      	sub	sp, #8
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8008358:	466a      	mov	r2, sp
 800835a:	a901      	add	r1, sp, #4
 800835c:	2000      	movs	r0, #0
  test_set_step(1);
 800835e:	6033      	str	r3, [r6, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8008360:	f002 f8be 	bl	800a4e0 <chHeapStatus>
 8008364:	2110      	movs	r1, #16
 8008366:	4811      	ldr	r0, [pc, #68]	; (80083ac <oslib_test_008_002_execute.lto_priv.0+0x5c>)
 8008368:	f7ff f962 	bl	8007630 <chHeapAllocAligned.constprop.0>
 800836c:	4605      	mov	r5, r0
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 800836e:	3800      	subs	r0, #0
 8008370:	bf18      	it	ne
 8008372:	2001      	movne	r0, #1
 8008374:	490e      	ldr	r1, [pc, #56]	; (80083b0 <oslib_test_008_002_execute.lto_priv.0+0x60>)
 8008376:	f7f8 fb63 	bl	8000a40 <_test_assert>
 800837a:	b108      	cbz	r0, 8008380 <oslib_test_008_002_execute.lto_priv.0+0x30>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
  test_end_step(2);
}
 800837c:	b002      	add	sp, #8
 800837e:	bd70      	pop	{r4, r5, r6, pc}
    chHeapFree(p1);
 8008380:	4604      	mov	r4, r0
 8008382:	4628      	mov	r0, r5
 8008384:	f002 f91c 	bl	800a5c0 <chHeapFree>
  test_set_step(2);
 8008388:	2302      	movs	r3, #2
 800838a:	4620      	mov	r0, r4
 800838c:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8008390:	6033      	str	r3, [r6, #0]
 8008392:	f7ff f94d 	bl	8007630 <chHeapAllocAligned.constprop.0>
    test_assert(p1 == NULL, "allocation not failed");
 8008396:	fab0 f080 	clz	r0, r0
 800839a:	4906      	ldr	r1, [pc, #24]	; (80083b4 <oslib_test_008_002_execute.lto_priv.0+0x64>)
 800839c:	0940      	lsrs	r0, r0, #5
 800839e:	f7f8 fb4f 	bl	8000a40 <_test_assert>
}
 80083a2:	b002      	add	sp, #8
 80083a4:	bd70      	pop	{r4, r5, r6, pc}
 80083a6:	bf00      	nop
 80083a8:	20001cf4 	.word	0x20001cf4
 80083ac:	20001c54 	.word	0x20001c54
 80083b0:	0800d928 	.word	0x0800d928
 80083b4:	0800d93c 	.word	0x0800d93c
	...

080083c0 <oslib_test_008_001_execute.lto_priv.0>:
  test_set_step(1);
 80083c0:	2301      	movs	r3, #1
static void oslib_test_008_001_execute(void) {
 80083c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80083c6:	4cc0      	ldr	r4, [pc, #768]	; (80086c8 <oslib_test_008_001_execute.lto_priv.0+0x308>)
static void oslib_test_008_001_execute(void) {
 80083c8:	b084      	sub	sp, #16
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80083ca:	4669      	mov	r1, sp
 80083cc:	2200      	movs	r2, #0
 80083ce:	48bf      	ldr	r0, [pc, #764]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
  test_set_step(1);
 80083d0:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80083d2:	f002 f885 	bl	800a4e0 <chHeapStatus>
 80083d6:	f1a0 0001 	sub.w	r0, r0, #1
 80083da:	fab0 f080 	clz	r0, r0
 80083de:	49bc      	ldr	r1, [pc, #752]	; (80086d0 <oslib_test_008_001_execute.lto_priv.0+0x310>)
 80083e0:	0940      	lsrs	r0, r0, #5
 80083e2:	f7f8 fb2d 	bl	8000a40 <_test_assert>
 80083e6:	b110      	cbz	r0, 80083ee <oslib_test_008_001_execute.lto_priv.0+0x2e>
}
 80083e8:	b004      	add	sp, #16
 80083ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 80083ee:	2302      	movs	r3, #2
 80083f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80083f4:	48b5      	ldr	r0, [pc, #724]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 80083f6:	6023      	str	r3, [r4, #0]
 80083f8:	f7ff f91a 	bl	8007630 <chHeapAllocAligned.constprop.0>
    test_assert(p1 == NULL, "allocation not failed");
 80083fc:	fab0 f080 	clz	r0, r0
 8008400:	49b4      	ldr	r1, [pc, #720]	; (80086d4 <oslib_test_008_001_execute.lto_priv.0+0x314>)
 8008402:	0940      	lsrs	r0, r0, #5
 8008404:	f7f8 fb1c 	bl	8000a40 <_test_assert>
 8008408:	2800      	cmp	r0, #0
 800840a:	d1ed      	bne.n	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
  test_set_step(3);
 800840c:	2303      	movs	r3, #3
 800840e:	2110      	movs	r1, #16
 8008410:	48ae      	ldr	r0, [pc, #696]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 8008412:	6023      	str	r3, [r4, #0]
 8008414:	f7ff f90c 	bl	8007630 <chHeapAllocAligned.constprop.0>
 8008418:	4605      	mov	r5, r0
    test_assert(p1 != NULL, "allocation failed");
 800841a:	3800      	subs	r0, #0
 800841c:	bf18      	it	ne
 800841e:	2001      	movne	r0, #1
 8008420:	49ad      	ldr	r1, [pc, #692]	; (80086d8 <oslib_test_008_001_execute.lto_priv.0+0x318>)
 8008422:	f7f8 fb0d 	bl	8000a40 <_test_assert>
 8008426:	2800      	cmp	r0, #0
 8008428:	d1de      	bne.n	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
    chHeapFree(p1);
 800842a:	4628      	mov	r0, r5
 800842c:	f002 f8c8 	bl	800a5c0 <chHeapFree>
  test_set_step(4);
 8008430:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8008432:	a903      	add	r1, sp, #12
 8008434:	48a5      	ldr	r0, [pc, #660]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 8008436:	aa02      	add	r2, sp, #8
  test_set_step(4);
 8008438:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800843a:	f002 f851 	bl	800a4e0 <chHeapStatus>
 800843e:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 8008440:	f1a0 0001 	sub.w	r0, r0, #1
 8008444:	fab0 f080 	clz	r0, r0
 8008448:	49a4      	ldr	r1, [pc, #656]	; (80086dc <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 800844a:	0940      	lsrs	r0, r0, #5
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800844c:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 800844e:	f7f8 faf7 	bl	8000a40 <_test_assert>
 8008452:	2800      	cmp	r0, #0
 8008454:	d1c8      	bne.n	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 8008456:	9803      	ldr	r0, [sp, #12]
 8008458:	49a1      	ldr	r1, [pc, #644]	; (80086e0 <oslib_test_008_001_execute.lto_priv.0+0x320>)
 800845a:	280f      	cmp	r0, #15
 800845c:	bf94      	ite	ls
 800845e:	2000      	movls	r0, #0
 8008460:	2001      	movhi	r0, #1
 8008462:	f7f8 faed 	bl	8000a40 <_test_assert>
 8008466:	2800      	cmp	r0, #0
 8008468:	d1be      	bne.n	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 800846a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 800846e:	1ac0      	subs	r0, r0, r3
 8008470:	fab0 f080 	clz	r0, r0
 8008474:	499a      	ldr	r1, [pc, #616]	; (80086e0 <oslib_test_008_001_execute.lto_priv.0+0x320>)
 8008476:	0940      	lsrs	r0, r0, #5
 8008478:	f7f8 fae2 	bl	8000a40 <_test_assert>
 800847c:	4605      	mov	r5, r0
 800847e:	2800      	cmp	r0, #0
 8008480:	d1b2      	bne.n	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
  test_set_step(5);
 8008482:	2305      	movs	r3, #5
 8008484:	2110      	movs	r1, #16
 8008486:	4891      	ldr	r0, [pc, #580]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	f7ff f8d1 	bl	8007630 <chHeapAllocAligned.constprop.0>
 800848e:	2110      	movs	r1, #16
 8008490:	4680      	mov	r8, r0
 8008492:	488e      	ldr	r0, [pc, #568]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 8008494:	f7ff f8cc 	bl	8007630 <chHeapAllocAligned.constprop.0>
 8008498:	2110      	movs	r1, #16
 800849a:	4607      	mov	r7, r0
 800849c:	488b      	ldr	r0, [pc, #556]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 800849e:	f7ff f8c7 	bl	8007630 <chHeapAllocAligned.constprop.0>
 80084a2:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 80084a4:	4640      	mov	r0, r8
 80084a6:	f002 f88b 	bl	800a5c0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 80084aa:	4638      	mov	r0, r7
 80084ac:	f002 f888 	bl	800a5c0 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 80084b0:	4630      	mov	r0, r6
 80084b2:	f002 f885 	bl	800a5c0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80084b6:	462a      	mov	r2, r5
 80084b8:	a901      	add	r1, sp, #4
 80084ba:	4884      	ldr	r0, [pc, #528]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 80084bc:	f002 f810 	bl	800a4e0 <chHeapStatus>
 80084c0:	f1a0 0001 	sub.w	r0, r0, #1
 80084c4:	fab0 f080 	clz	r0, r0
 80084c8:	4981      	ldr	r1, [pc, #516]	; (80086d0 <oslib_test_008_001_execute.lto_priv.0+0x310>)
 80084ca:	0940      	lsrs	r0, r0, #5
 80084cc:	f7f8 fab8 	bl	8000a40 <_test_assert>
 80084d0:	4605      	mov	r5, r0
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d188      	bne.n	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
  test_set_step(6);
 80084d6:	2306      	movs	r3, #6
 80084d8:	2110      	movs	r1, #16
 80084da:	487c      	ldr	r0, [pc, #496]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	f7ff f8a7 	bl	8007630 <chHeapAllocAligned.constprop.0>
 80084e2:	2110      	movs	r1, #16
 80084e4:	4606      	mov	r6, r0
 80084e6:	4879      	ldr	r0, [pc, #484]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 80084e8:	f7ff f8a2 	bl	8007630 <chHeapAllocAligned.constprop.0>
 80084ec:	4607      	mov	r7, r0
 80084ee:	2110      	movs	r1, #16
 80084f0:	4876      	ldr	r0, [pc, #472]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 80084f2:	f7ff f89d 	bl	8007630 <chHeapAllocAligned.constprop.0>
    chHeapFree(p3);                                 /* Merges forward.*/
 80084f6:	f002 f863 	bl	800a5c0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 80084fa:	4638      	mov	r0, r7
 80084fc:	f002 f860 	bl	800a5c0 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 8008500:	4630      	mov	r0, r6
 8008502:	f002 f85d 	bl	800a5c0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8008506:	462a      	mov	r2, r5
 8008508:	a901      	add	r1, sp, #4
 800850a:	4870      	ldr	r0, [pc, #448]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 800850c:	f001 ffe8 	bl	800a4e0 <chHeapStatus>
 8008510:	f1a0 0001 	sub.w	r0, r0, #1
 8008514:	fab0 f080 	clz	r0, r0
 8008518:	496d      	ldr	r1, [pc, #436]	; (80086d0 <oslib_test_008_001_execute.lto_priv.0+0x310>)
 800851a:	0940      	lsrs	r0, r0, #5
 800851c:	f7f8 fa90 	bl	8000a40 <_test_assert>
 8008520:	4605      	mov	r5, r0
 8008522:	2800      	cmp	r0, #0
 8008524:	f47f af60 	bne.w	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
  test_set_step(7);
 8008528:	2307      	movs	r3, #7
 800852a:	2111      	movs	r1, #17
 800852c:	4867      	ldr	r0, [pc, #412]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	f7ff f87e 	bl	8007630 <chHeapAllocAligned.constprop.0>
 8008534:	2110      	movs	r1, #16
 8008536:	4606      	mov	r6, r0
 8008538:	4864      	ldr	r0, [pc, #400]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 800853a:	f7ff f879 	bl	8007630 <chHeapAllocAligned.constprop.0>
 800853e:	4603      	mov	r3, r0
    chHeapFree(p1);
 8008540:	4630      	mov	r0, r6
 8008542:	461e      	mov	r6, r3
 8008544:	f002 f83c 	bl	800a5c0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8008548:	462a      	mov	r2, r5
 800854a:	a901      	add	r1, sp, #4
 800854c:	485f      	ldr	r0, [pc, #380]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 800854e:	f001 ffc7 	bl	800a4e0 <chHeapStatus>
 8008552:	f1a0 0002 	sub.w	r0, r0, #2
 8008556:	fab0 f080 	clz	r0, r0
 800855a:	4962      	ldr	r1, [pc, #392]	; (80086e4 <oslib_test_008_001_execute.lto_priv.0+0x324>)
 800855c:	0940      	lsrs	r0, r0, #5
 800855e:	f7f8 fa6f 	bl	8000a40 <_test_assert>
 8008562:	4605      	mov	r5, r0
 8008564:	2800      	cmp	r0, #0
 8008566:	f47f af3f 	bne.w	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
 800856a:	2110      	movs	r1, #16
 800856c:	4857      	ldr	r0, [pc, #348]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 800856e:	f7ff f85f 	bl	8007630 <chHeapAllocAligned.constprop.0>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 8008572:	462a      	mov	r2, r5
 8008574:	4607      	mov	r7, r0
 8008576:	a901      	add	r1, sp, #4
 8008578:	4854      	ldr	r0, [pc, #336]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 800857a:	f001 ffb1 	bl	800a4e0 <chHeapStatus>
 800857e:	2801      	cmp	r0, #1
 8008580:	f000 809f 	beq.w	80086c2 <oslib_test_008_001_execute.lto_priv.0+0x302>
 8008584:	2200      	movs	r2, #0
 8008586:	4851      	ldr	r0, [pc, #324]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 8008588:	a901      	add	r1, sp, #4
 800858a:	f001 ffa9 	bl	800a4e0 <chHeapStatus>
 800858e:	f1a0 0e02 	sub.w	lr, r0, #2
 8008592:	f1de 0000 	rsbs	r0, lr, #0
 8008596:	eb40 000e 	adc.w	r0, r0, lr
 800859a:	494d      	ldr	r1, [pc, #308]	; (80086d0 <oslib_test_008_001_execute.lto_priv.0+0x310>)
 800859c:	f7f8 fa50 	bl	8000a40 <_test_assert>
 80085a0:	4605      	mov	r5, r0
 80085a2:	2800      	cmp	r0, #0
 80085a4:	f47f af20 	bne.w	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
    chHeapFree(p2);
 80085a8:	4630      	mov	r0, r6
 80085aa:	f002 f809 	bl	800a5c0 <chHeapFree>
    chHeapFree(p1);
 80085ae:	4638      	mov	r0, r7
 80085b0:	f002 f806 	bl	800a5c0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80085b4:	462a      	mov	r2, r5
 80085b6:	a901      	add	r1, sp, #4
 80085b8:	4844      	ldr	r0, [pc, #272]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 80085ba:	f001 ff91 	bl	800a4e0 <chHeapStatus>
 80085be:	f100 3cff 	add.w	ip, r0, #4294967295
 80085c2:	f1dc 0000 	rsbs	r0, ip, #0
 80085c6:	4942      	ldr	r1, [pc, #264]	; (80086d0 <oslib_test_008_001_execute.lto_priv.0+0x310>)
 80085c8:	eb40 000c 	adc.w	r0, r0, ip
 80085cc:	f7f8 fa38 	bl	8000a40 <_test_assert>
 80085d0:	4605      	mov	r5, r0
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f47f af08 	bne.w	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
  test_set_step(8);
 80085d8:	2308      	movs	r3, #8
 80085da:	2110      	movs	r1, #16
 80085dc:	483b      	ldr	r0, [pc, #236]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 80085de:	6023      	str	r3, [r4, #0]
 80085e0:	f7ff f826 	bl	8007630 <chHeapAllocAligned.constprop.0>
 80085e4:	2110      	movs	r1, #16
 80085e6:	4607      	mov	r7, r0
 80085e8:	4838      	ldr	r0, [pc, #224]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 80085ea:	f7ff f821 	bl	8007630 <chHeapAllocAligned.constprop.0>
 80085ee:	4606      	mov	r6, r0
    chHeapFree(p1);
 80085f0:	4638      	mov	r0, r7
 80085f2:	f001 ffe5 	bl	800a5c0 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 80085f6:	462a      	mov	r2, r5
 80085f8:	a901      	add	r1, sp, #4
 80085fa:	4834      	ldr	r0, [pc, #208]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 80085fc:	f001 ff70 	bl	800a4e0 <chHeapStatus>
 8008600:	1e87      	subs	r7, r0, #2
 8008602:	4278      	negs	r0, r7
 8008604:	4937      	ldr	r1, [pc, #220]	; (80086e4 <oslib_test_008_001_execute.lto_priv.0+0x324>)
 8008606:	4178      	adcs	r0, r7
 8008608:	f7f8 fa1a 	bl	8000a40 <_test_assert>
 800860c:	4605      	mov	r5, r0
 800860e:	2800      	cmp	r0, #0
 8008610:	f47f aeea 	bne.w	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
 8008614:	2120      	movs	r1, #32
 8008616:	482d      	ldr	r0, [pc, #180]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 8008618:	f7ff f80a 	bl	8007630 <chHeapAllocAligned.constprop.0>
    chHeapFree(p1);
 800861c:	f001 ffd0 	bl	800a5c0 <chHeapFree>
    chHeapFree(p2);
 8008620:	4630      	mov	r0, r6
 8008622:	f001 ffcd 	bl	800a5c0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8008626:	462a      	mov	r2, r5
 8008628:	a901      	add	r1, sp, #4
 800862a:	4828      	ldr	r0, [pc, #160]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 800862c:	f001 ff58 	bl	800a4e0 <chHeapStatus>
 8008630:	1e45      	subs	r5, r0, #1
 8008632:	4268      	negs	r0, r5
 8008634:	4926      	ldr	r1, [pc, #152]	; (80086d0 <oslib_test_008_001_execute.lto_priv.0+0x310>)
 8008636:	4168      	adcs	r0, r5
 8008638:	f7f8 fa02 	bl	8000a40 <_test_assert>
 800863c:	4602      	mov	r2, r0
 800863e:	2800      	cmp	r0, #0
 8008640:	f47f aed2 	bne.w	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
  test_set_step(9);
 8008644:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 8008646:	a901      	add	r1, sp, #4
 8008648:	4820      	ldr	r0, [pc, #128]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
  test_set_step(9);
 800864a:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 800864c:	f001 ff48 	bl	800a4e0 <chHeapStatus>
 8008650:	9901      	ldr	r1, [sp, #4]
 8008652:	481e      	ldr	r0, [pc, #120]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 8008654:	f7fe ffec 	bl	8007630 <chHeapAllocAligned.constprop.0>
 8008658:	4606      	mov	r6, r0
    test_assert(p1 != NULL, "allocation failed");
 800865a:	3800      	subs	r0, #0
 800865c:	bf18      	it	ne
 800865e:	2001      	movne	r0, #1
 8008660:	491d      	ldr	r1, [pc, #116]	; (80086d8 <oslib_test_008_001_execute.lto_priv.0+0x318>)
 8008662:	f7f8 f9ed 	bl	8000a40 <_test_assert>
 8008666:	4602      	mov	r2, r0
 8008668:	2800      	cmp	r0, #0
 800866a:	f47f aebd 	bne.w	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 800866e:	4601      	mov	r1, r0
 8008670:	4816      	ldr	r0, [pc, #88]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
 8008672:	f001 ff35 	bl	800a4e0 <chHeapStatus>
 8008676:	fab0 f080 	clz	r0, r0
 800867a:	491b      	ldr	r1, [pc, #108]	; (80086e8 <oslib_test_008_001_execute.lto_priv.0+0x328>)
 800867c:	0940      	lsrs	r0, r0, #5
 800867e:	f7f8 f9df 	bl	8000a40 <_test_assert>
 8008682:	4605      	mov	r5, r0
 8008684:	2800      	cmp	r0, #0
 8008686:	f47f aeaf 	bne.w	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
    chHeapFree(p1);
 800868a:	4630      	mov	r0, r6
 800868c:	f001 ff98 	bl	800a5c0 <chHeapFree>
  test_set_step(10);
 8008690:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8008692:	462a      	mov	r2, r5
 8008694:	a901      	add	r1, sp, #4
 8008696:	480d      	ldr	r0, [pc, #52]	; (80086cc <oslib_test_008_001_execute.lto_priv.0+0x30c>)
  test_set_step(10);
 8008698:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800869a:	f001 ff21 	bl	800a4e0 <chHeapStatus>
 800869e:	1e42      	subs	r2, r0, #1
 80086a0:	4250      	negs	r0, r2
 80086a2:	4150      	adcs	r0, r2
 80086a4:	490a      	ldr	r1, [pc, #40]	; (80086d0 <oslib_test_008_001_execute.lto_priv.0+0x310>)
 80086a6:	f7f8 f9cb 	bl	8000a40 <_test_assert>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	f47f ae9c 	bne.w	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
    test_assert(n == sz, "size changed");
 80086b0:	e9dd 3000 	ldrd	r3, r0, [sp]
 80086b4:	1ac3      	subs	r3, r0, r3
 80086b6:	4258      	negs	r0, r3
 80086b8:	490c      	ldr	r1, [pc, #48]	; (80086ec <oslib_test_008_001_execute.lto_priv.0+0x32c>)
 80086ba:	4158      	adcs	r0, r3
 80086bc:	f7f8 f9c0 	bl	8000a40 <_test_assert>
 80086c0:	e692      	b.n	80083e8 <oslib_test_008_001_execute.lto_priv.0+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 80086c2:	2001      	movs	r0, #1
 80086c4:	e769      	b.n	800859a <oslib_test_008_001_execute.lto_priv.0+0x1da>
 80086c6:	bf00      	nop
 80086c8:	20001cf4 	.word	0x20001cf4
 80086cc:	20001c54 	.word	0x20001c54
 80086d0:	0800d470 	.word	0x0800d470
 80086d4:	0800d93c 	.word	0x0800d93c
 80086d8:	0800d928 	.word	0x0800d928
 80086dc:	0800d954 	.word	0x0800d954
 80086e0:	0800d968 	.word	0x0800d968
 80086e4:	0800d980 	.word	0x0800d980
 80086e8:	0800d7c8 	.word	0x0800d7c8
 80086ec:	0800d990 	.word	0x0800d990

080086f0 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 80086f0:	f04f 34ff 	mov.w	r4, #4294967295
 80086f4:	2000      	movs	r0, #0
 80086f6:	4a12      	ldr	r2, [pc, #72]	; (8008740 <main+0x50>)
}

/*
 * Application entry point.
 */
int main(void) {
 80086f8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80086fc:	6916      	ldr	r6, [r2, #16]
 80086fe:	6114      	str	r4, [r2, #16]
 8008700:	6916      	ldr	r6, [r2, #16]
 8008702:	6110      	str	r0, [r2, #16]
 8008704:	6916      	ldr	r6, [r2, #16]
  rccResetAPB2(0xFFFFFFFF);
 8008706:	68d6      	ldr	r6, [r2, #12]
 8008708:	60d4      	str	r4, [r2, #12]
 800870a:	68d4      	ldr	r4, [r2, #12]
 800870c:	60d0      	str	r0, [r2, #12]
 800870e:	68d4      	ldr	r4, [r2, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(true);
 8008710:	69d4      	ldr	r4, [r2, #28]
  PWR->CR |= PWR_CR_DBP;
 8008712:	4d0c      	ldr	r5, [pc, #48]	; (8008744 <main+0x54>)
  rccEnablePWRInterface(true);
 8008714:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8008718:	61d4      	str	r4, [r2, #28]
 800871a:	69d4      	ldr	r4, [r2, #28]
  rccEnableBKPInterface(true);
 800871c:	69d4      	ldr	r4, [r2, #28]
  dma.isr_mask       = 0U;
 800871e:	4601      	mov	r1, r0
 8008720:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8008724:	61d4      	str	r4, [r2, #28]
 8008726:	69d2      	ldr	r2, [r2, #28]
  PWR->CR |= PWR_CR_DBP;
 8008728:	682c      	ldr	r4, [r5, #0]
  dma.allocated_mask = 0U;
 800872a:	4a07      	ldr	r2, [pc, #28]	; (8008748 <main+0x58>)
 800872c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8008730:	602c      	str	r4, [r5, #0]
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8008732:	4603      	mov	r3, r0
  dma.isr_mask       = 0U;
 8008734:	e9c2 0000 	strd	r0, r0, [r2]
 8008738:	4c04      	ldr	r4, [pc, #16]	; (800874c <main+0x5c>)
 800873a:	4d05      	ldr	r5, [pc, #20]	; (8008750 <main+0x60>)
 800873c:	b093      	sub	sp, #76	; 0x4c
 800873e:	e00a      	b.n	8008756 <main+0x66>
 8008740:	40021000 	.word	0x40021000
 8008744:	40007000 	.word	0x40007000
 8008748:	20000e48 	.word	0x20000e48
 800874c:	40020008 	.word	0x40020008
 8008750:	0800dbc4 	.word	0x0800dbc4
 8008754:	6844      	ldr	r4, [r0, #4]
    dma.streams[i].func = NULL;
 8008756:	1850      	adds	r0, r2, r1
 8008758:	3108      	adds	r1, #8
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800875a:	2938      	cmp	r1, #56	; 0x38
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800875c:	6023      	str	r3, [r4, #0]
    dma.streams[i].func = NULL;
 800875e:	6083      	str	r3, [r0, #8]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8008760:	eb05 0041 	add.w	r0, r5, r1, lsl #1
 8008764:	d1f6      	bne.n	8008754 <main+0x64>
  DMA1->IFCR = 0xFFFFFFFFU;
 8008766:	f04f 31ff 	mov.w	r1, #4294967295
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800876a:	f04f 0960 	mov.w	r9, #96	; 0x60
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800876e:	2640      	movs	r6, #64	; 0x40
 8008770:	4acd      	ldr	r2, [pc, #820]	; (8008aa8 <main+0x3b8>)
 8008772:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8008776:	6051      	str	r1, [r2, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8008778:	4acc      	ldr	r2, [pc, #816]	; (8008aac <main+0x3bc>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800877a:	f04f 0e80 	mov.w	lr, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800877e:	f882 9306 	strb.w	r9, [r2, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008782:	f44f 7500 	mov.w	r5, #512	; 0x200
 8008786:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800878a:	6016      	str	r6, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800878c:	f44f 6680 	mov.w	r6, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8008790:	f882 9307 	strb.w	r9, [r2, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008794:	f8c2 e180 	str.w	lr, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8008798:	f8c2 e000 	str.w	lr, [r2]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800879c:	f882 9308 	strb.w	r9, [r2, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80087a0:	f8c2 a180 	str.w	sl, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80087a4:	f8c2 a000 	str.w	sl, [r2]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80087a8:	f882 9309 	strb.w	r9, [r2, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80087ac:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80087b0:	6015      	str	r5, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80087b2:	f882 930a 	strb.w	r9, [r2, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80087b6:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80087ba:	6016      	str	r6, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80087bc:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 80087c0:	f04f 3c88 	mov.w	ip, #2290649224	; 0x88888888
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80087c4:	f882 9317 	strb.w	r9, [r2, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80087c8:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80087cc:	6016      	str	r6, [r2, #0]
  rccEnableAPB2(APB2_EN_MASK, true);
 80087ce:	f106 567e 	add.w	r6, r6, #1065353216	; 0x3f800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80087d2:	f882 9328 	strb.w	r9, [r2, #808]	; 0x328
 80087d6:	f506 3604 	add.w	r6, r6, #135168	; 0x21000
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80087da:	f8c2 a184 	str.w	sl, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80087de:	f8c2 a004 	str.w	sl, [r2, #4]
 80087e2:	f8d6 a018 	ldr.w	sl, [r6, #24]
  GPIOA->ODR = config->PAData.odr;
 80087e6:	f8df 9308 	ldr.w	r9, [pc, #776]	; 8008af0 <main+0x400>
  rccEnableAPB2(APB2_EN_MASK, true);
 80087ea:	f04a 0a7d 	orr.w	sl, sl, #125	; 0x7d
 80087ee:	f8c6 a018 	str.w	sl, [r6, #24]
  GPIOA->CRH = config->PAData.crh;
 80087f2:	f8df a300 	ldr.w	sl, [pc, #768]	; 8008af4 <main+0x404>
  rccEnableAPB2(APB2_EN_MASK, true);
 80087f6:	69b7      	ldr	r7, [r6, #24]
  GPIOA->ODR = config->PAData.odr;
 80087f8:	f8c9 100c 	str.w	r1, [r9, #12]
  GPIOA->CRH = config->PAData.crh;
 80087fc:	f8c9 a004 	str.w	sl, [r9, #4]
  GPIOA->CRL = config->PAData.crl;
 8008800:	f50a 2a80 	add.w	sl, sl, #262144	; 0x40000
 8008804:	f50a 7a3f 	add.w	sl, sl, #764	; 0x2fc
 8008808:	f8c9 a000 	str.w	sl, [r9]
  GPIOB->CRH = config->PBData.crh;
 800880c:	f109 49e9 	add.w	r9, r9, #1954545664	; 0x74800000
  GPIOB->ODR = config->PBData.odr;
 8008810:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8008af8 <main+0x408>
  GPIOB->CRH = config->PBData.crh;
 8008814:	f509 195e 	add.w	r9, r9, #3637248	; 0x378000
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8008818:	4ca5      	ldr	r4, [pc, #660]	; (8008ab0 <main+0x3c0>)
 800881a:	f109 0988 	add.w	r9, r9, #136	; 0x88
  GPIOB->ODR = config->PBData.odr;
 800881e:	f8ca 100c 	str.w	r1, [sl, #12]
  GPIOB->CRH = config->PBData.crh;
 8008822:	f8ca 9004 	str.w	r9, [sl, #4]
  GPIOB->CRL = config->PBData.crl;
 8008826:	f8ca c000 	str.w	ip, [sl]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 800882a:	f10a 4a91 	add.w	sl, sl, #1216348160	; 0x48800000
  GPIOC->ODR = config->PCData.odr;
 800882e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8008afc <main+0x40c>
 8008832:	46a0      	mov	r8, r4
  GPIOC->CRH = config->PCData.crh;
 8008834:	f50a 3a09 	add.w	sl, sl, #140288	; 0x22400
 8008838:	f50a 7a62 	add.w	sl, sl, #904	; 0x388
  GPIOC->ODR = config->PCData.odr;
 800883c:	f8c9 100c 	str.w	r1, [r9, #12]
  GPIOC->CRH = config->PCData.crh;
 8008840:	f8c9 a004 	str.w	sl, [r9, #4]
  GPIOC->CRL = config->PCData.crl;
 8008844:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8008b00 <main+0x410>
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8008848:	62a3      	str	r3, [r4, #40]	; 0x28
 800884a:	f8c9 a000 	str.w	sl, [r9]
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 800884e:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8008b04 <main+0x414>
  GPIOD->ODR = config->PDData.odr;
 8008852:	f8c9 140c 	str.w	r1, [r9, #1036]	; 0x40c
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8008856:	2710      	movs	r7, #16
  GPIOD->CRH = config->PDData.crh;
 8008858:	f8c9 c404 	str.w	ip, [r9, #1028]	; 0x404
  GPIOD->CRL = config->PDData.crl;
 800885c:	f8c9 a400 	str.w	sl, [r9, #1024]	; 0x400
  iqp->q_link    = link;
 8008860:	62e4      	str	r4, [r4, #44]	; 0x2c
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8008862:	f8c9 180c 	str.w	r1, [r9, #2060]	; 0x80c
  GPIOE->CRH = config->PEData.crh;
 8008866:	f8c9 c804 	str.w	ip, [r9, #2052]	; 0x804
  GPIOE->CRL = config->PEData.crl;
 800886a:	f8c9 c800 	str.w	ip, [r9, #2048]	; 0x800
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800886e:	f04f 0901 	mov.w	r9, #1
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8008872:	f104 0c74 	add.w	ip, r4, #116	; 0x74
 8008876:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
  oqp->q_notify  = onfy;
 800887a:	f8df c28c 	ldr.w	ip, [pc, #652]	; 8008b08 <main+0x418>
  iqp->q_counter = 0;
 800887e:	6163      	str	r3, [r4, #20]
  oqp->q_notify  = onfy;
 8008880:	f8c4 c04c 	str.w	ip, [r4, #76]	; 0x4c
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8008884:	f8df c284 	ldr.w	ip, [pc, #644]	; 8008b0c <main+0x41c>
 8008888:	f884 9008 	strb.w	r9, [r4, #8]
 800888c:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
  sdp->vmt = &vmt;
 8008890:	f8df c27c 	ldr.w	ip, [pc, #636]	; 8008b10 <main+0x420>
  oqp->q_counter = size;
 8008894:	63a7      	str	r7, [r4, #56]	; 0x38
 8008896:	f848 cb04 	str.w	ip, [r8], #4
  esp->next = (event_listener_t *)esp;
 800889a:	f8c4 8004 	str.w	r8, [r4, #4]
  tqp->next = (thread_t *)tqp;
 800889e:	f104 080c 	add.w	r8, r4, #12
  tqp->prev = (thread_t *)tqp;
 80088a2:	e9c4 8803 	strd	r8, r8, [r4, #12]
  iqp->q_buffer  = bp;
 80088a6:	f104 0854 	add.w	r8, r4, #84	; 0x54
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80088aa:	f8df c268 	ldr.w	ip, [pc, #616]	; 8008b14 <main+0x424>
  iqp->q_wrptr   = bp;
 80088ae:	e9c4 8808 	strd	r8, r8, [r4, #32]
  iqp->q_buffer  = bp;
 80088b2:	f8c4 8018 	str.w	r8, [r4, #24]
  iqp->q_top     = bp + size;
 80088b6:	f104 0864 	add.w	r8, r4, #100	; 0x64
  oqp->q_wrptr   = bp;
 80088ba:	e9c4 8811 	strd	r8, r8, [r4, #68]	; 0x44
  iqp->q_top     = bp + size;
 80088be:	f8c4 801c 	str.w	r8, [r4, #28]
  oqp->q_buffer  = bp;
 80088c2:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
  tqp->next = (thread_t *)tqp;
 80088c6:	f104 0830 	add.w	r8, r4, #48	; 0x30
  tqp->prev = (thread_t *)tqp;
 80088ca:	e9c4 880c 	strd	r8, r8, [r4, #48]	; 0x30
  tqp->next = (thread_t *)tqp;
 80088ce:	f10c 080c 	add.w	r8, ip, #12
  spip->config = NULL;
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80088d2:	e9cc 3301 	strd	r3, r3, [ip, #4]
  spip->state = SPI_STOP;
 80088d6:	f88c 9000 	strb.w	r9, [ip]
  oqp->q_link    = link;
 80088da:	6524      	str	r4, [r4, #80]	; 0x50
  tqp->prev = (thread_t *)tqp;
 80088dc:	e9cc 8803 	strd	r8, r8, [ip, #12]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80088e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80088e4:	f8cc 3014 	str.w	r3, [ip, #20]
 80088e8:	f048 0801 	orr.w	r8, r8, #1
 80088ec:	f8c6 801c 	str.w	r8, [r6, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80088f0:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8008b18 <main+0x428>
  ST_ENABLE_CLOCK();
 80088f4:	69f6      	ldr	r6, [r6, #28]
  ST_ENABLE_STOP();
 80088f6:	f8d8 6004 	ldr.w	r6, [r8, #4]
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = NULL;
 80088fa:	f8cc 3020 	str.w	r3, [ip, #32]
 80088fe:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  SPID2.dmatx     = NULL;
 8008902:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
 8008906:	f8c8 6004 	str.w	r6, [r8, #4]
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 800890a:	f241 060a 	movw	r6, #4106	; 0x100a

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800890e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008912:	f8cc 6028 	str.w	r6, [ip, #40]	; 0x28
 8008916:	f648 469f 	movw	r6, #35999	; 0x8c9f
 800891a:	6286      	str	r6, [r0, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 800891c:	f241 0618 	movw	r6, #4120	; 0x1018
 8008920:	f8cc 602c 	str.w	r6, [ip, #44]	; 0x2c
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8008924:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8008928:	62c6      	str	r6, [r0, #44]	; 0x2c
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800892a:	2601      	movs	r6, #1
  STM32_ST_TIM->CCMR1  = 0;
 800892c:	6183      	str	r3, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800892e:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8008930:	60c3      	str	r3, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 8008932:	6043      	str	r3, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8008934:	6146      	str	r6, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8008936:	6006      	str	r6, [r0, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008938:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
  SPID2.spi       = SPI2;
 800893c:	f500 5060 	add.w	r0, r0, #14336	; 0x3800
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8008940:	f882 e31c 	strb.w	lr, [r2, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008944:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
 8008948:	f8cc 001c 	str.w	r0, [ip, #28]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800894c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  mp->align = align;
 8008950:	f04f 0b04 	mov.w	fp, #4
  tqp->next = (thread_t *)tqp;
 8008954:	4e57      	ldr	r6, [pc, #348]	; (8008ab4 <main+0x3c4>)
 8008956:	6010      	str	r0, [r2, #0]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8008958:	f106 021c 	add.w	r2, r6, #28
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.basemem = __heap_base__;
 800895c:	4f56      	ldr	r7, [pc, #344]	; (8008ab8 <main+0x3c8>)
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 800895e:	e9c6 2207 	strd	r2, r2, [r6, #28]
 8008962:	4a56      	ldr	r2, [pc, #344]	; (8008abc <main+0x3cc>)
  ch.rlist.prio = NOPRIO;
 8008964:	60b3      	str	r3, [r6, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8008966:	6271      	str	r1, [r6, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8008968:	8533      	strh	r3, [r6, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 800896a:	e9c6 6600 	strd	r6, r6, [r6]
  ch.rlist.older = (thread_t *)&ch.rlist;
 800896e:	e9c6 6604 	strd	r6, r6, [r6, #16]
 8008972:	603a      	str	r2, [r7, #0]
  tqp->next = (thread_t *)tqp;
 8008974:	4a52      	ldr	r2, [pc, #328]	; (8008ac0 <main+0x3d0>)
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8008976:	910c      	str	r1, [sp, #48]	; 0x30
  ch_memcore.topmem  = __heap_end__;
 8008978:	4952      	ldr	r1, [pc, #328]	; (8008ac4 <main+0x3d4>)
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800897a:	4853      	ldr	r0, [pc, #332]	; (8008ac8 <main+0x3d8>)
 800897c:	6079      	str	r1, [r7, #4]
  dlp->next = (dyn_element_t *)dlp;
 800897e:	f102 0710 	add.w	r7, r2, #16
 8008982:	6117      	str	r7, [r2, #16]
  mp->object_size = size;
 8008984:	2714      	movs	r7, #20
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8008986:	f04f 0800 	mov.w	r8, #0
 800898a:	f04f 0900 	mov.w	r9, #0
  H_PAGES(&default_heap.header) = 0;
 800898e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8008992:	6143      	str	r3, [r0, #20]
  tmp->last       = (rtcnt_t)0;
 8008994:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  ch.tm.offset = (rtcnt_t)0;
 8008998:	6773      	str	r3, [r6, #116]	; 0x74
  tmp->n          = (ucnt_t)0;
 800899a:	930f      	str	r3, [sp, #60]	; 0x3c
 800899c:	6093      	str	r3, [r2, #8]
  mp->next = NULL;
 800899e:	6153      	str	r3, [r2, #20]
 80089a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089a2:	f102 0328 	add.w	r3, r2, #40	; 0x28
 80089a6:	6293      	str	r3, [r2, #40]	; 0x28
  mp->object_size = size;
 80089a8:	231c      	movs	r3, #28
  tmp->cumulative = (rttime_t)0;
 80089aa:	465d      	mov	r5, fp
  default_heap.provider = chCoreAllocAlignedWithOffset;
 80089ac:	4947      	ldr	r1, [pc, #284]	; (8008acc <main+0x3dc>)
 80089ae:	6197      	str	r7, [r2, #24]
 80089b0:	6001      	str	r1, [r0, #0]
 80089b2:	f100 010c 	add.w	r1, r0, #12
  tqp->prev = (thread_t *)tqp;
 80089b6:	e9c0 1103 	strd	r1, r1, [r0, #12]
 80089ba:	f102 0024 	add.w	r0, r2, #36	; 0x24
 80089be:	f102 073c 	add.w	r7, r2, #60	; 0x3c
 80089c2:	6250      	str	r0, [r2, #36]	; 0x24
 80089c4:	f102 0040 	add.w	r0, r2, #64	; 0x40
  mp->provider = provider;
 80089c8:	4941      	ldr	r1, [pc, #260]	; (8008ad0 <main+0x3e0>)
 80089ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80089ce:	e9c2 2200 	strd	r2, r2, [r2]
 80089d2:	e9c2 700f 	strd	r7, r0, [r2, #60]	; 0x3c
 80089d6:	f102 0c44 	add.w	ip, r2, #68	; 0x44
  mp->object_size = size;
 80089da:	6313      	str	r3, [r2, #48]	; 0x30
 80089dc:	f8c2 c044 	str.w	ip, [r2, #68]	; 0x44
  mp->align = align;
 80089e0:	f8c2 b01c 	str.w	fp, [r2, #28]
 80089e4:	f8c2 b034 	str.w	fp, [r2, #52]	; 0x34
  mp->provider = provider;
 80089e8:	6211      	str	r1, [r2, #32]
 80089ea:	6391      	str	r1, [r2, #56]	; 0x38
    chTMStartMeasurementX(&tm);
 80089ec:	a80c      	add	r0, sp, #48	; 0x30
 80089ee:	f001 fa1f 	bl	8009e30 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 80089f2:	a80c      	add	r0, sp, #48	; 0x30
 80089f4:	f001 f9f4 	bl	8009de0 <chTMStopMeasurementX>
  } while (i > 0U);
 80089f8:	3d01      	subs	r5, #1
 80089fa:	d1f7      	bne.n	80089ec <main+0x2fc>
  tp->prio      = prio;
 80089fc:	2280      	movs	r2, #128	; 0x80
  tp->refs      = (trefs_t)1;
 80089fe:	2101      	movs	r1, #1
  REG_INSERT(tp);
 8008a00:	4b34      	ldr	r3, [pc, #208]	; (8008ad4 <main+0x3e4>)
  tp->prio      = prio;
 8008a02:	63b2      	str	r2, [r6, #56]	; 0x38
  tp->realprio  = prio;
 8008a04:	66f2      	str	r2, [r6, #108]	; 0x6c
  ch.tm.offset = tm.best;
 8008a06:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  REG_INSERT(tp);
 8008a08:	6972      	ldr	r2, [r6, #20]
  tp->name      = name;
 8008a0a:	4833      	ldr	r0, [pc, #204]	; (8008ad8 <main+0x3e8>)
  REG_INSERT(tp);
 8008a0c:	6472      	str	r2, [r6, #68]	; 0x44
  tp->name      = name;
 8008a0e:	64b0      	str	r0, [r6, #72]	; 0x48
  tp->epending  = (eventmask_t)0;
 8008a10:	e9c6 5519 	strd	r5, r5, [r6, #100]	; 0x64
  tp->flags     = CH_FLAG_MODE_STATIC;
 8008a14:	f886 5051 	strb.w	r5, [r6, #81]	; 0x51
  REG_INSERT(tp);
 8008a18:	6436      	str	r6, [r6, #64]	; 0x40
  tp->refs      = (trefs_t)1;
 8008a1a:	f886 1052 	strb.w	r1, [r6, #82]	; 0x52
 8008a1e:	6777      	str	r7, [r6, #116]	; 0x74
  tlp->next = (thread_t *)tlp;
 8008a20:	f103 0028 	add.w	r0, r3, #40	; 0x28
  REG_INSERT(tp);
 8008a24:	6113      	str	r3, [r2, #16]
  tqp->next = (thread_t *)tqp;
 8008a26:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8008a2a:	e9c6 3305 	strd	r3, r3, [r6, #20]
 8008a2e:	e9c6 0216 	strd	r0, r2, [r6, #88]	; 0x58
  currp->state = CH_STATE_CURRENT;
 8008a32:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
  currp->wabase = NULL;
 8008a36:	64f5      	str	r5, [r6, #76]	; 0x4c
  tqp->prev = (thread_t *)tqp;
 8008a38:	6632      	str	r2, [r6, #96]	; 0x60
 8008a3a:	2620      	movs	r6, #32
 8008a3c:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
 8008a40:	b662      	cpsie	i
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a42:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a46:	2710      	movs	r7, #16
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a48:	4b24      	ldr	r3, [pc, #144]	; (8008adc <main+0x3ec>)
  reg_value  =  (reg_value                                   |
 8008a4a:	4a25      	ldr	r2, [pc, #148]	; (8008ae0 <main+0x3f0>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a4c:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a4e:	4001      	ands	r1, r0
  reg_value  =  (reg_value                                   |
 8008a50:	430a      	orrs	r2, r1

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008a52:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
  SCB->AIRCR =  reg_value;
 8008a56:	60da      	str	r2, [r3, #12]
 8008a58:	f6a0 300f 	subw	r0, r0, #2831	; 0xb0f
 8008a5c:	68c2      	ldr	r2, [r0, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8008a5e:	4921      	ldr	r1, [pc, #132]	; (8008ae4 <main+0x3f4>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008a60:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008a64:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8008a66:	680a      	ldr	r2, [r1, #0]
 8008a68:	f042 0201 	orr.w	r2, r2, #1
 8008a6c:	600a      	str	r2, [r1, #0]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a6e:	77df      	strb	r7, [r3, #31]
 8008a70:	f883 6022 	strb.w	r6, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008a74:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 8008a78:	b662      	cpsie	i
    (void) chThdCreate(&idle_descriptor);
 8008a7a:	481b      	ldr	r0, [pc, #108]	; (8008ae8 <main+0x3f8>)
 8008a7c:	f001 fb10 	bl	800a0a0 <chThdCreate>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008a80:	f386 8811 	msr	BASEPRI, r6
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8008a84:	7a23      	ldrb	r3, [r4, #8]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d148      	bne.n	8008b1c <main+0x42c>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008a8a:	2140      	movs	r1, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8008a8c:	20c0      	movs	r0, #192	; 0xc0
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8008a8e:	4b17      	ldr	r3, [pc, #92]	; (8008aec <main+0x3fc>)
 8008a90:	69da      	ldr	r2, [r3, #28]
 8008a92:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008a96:	61da      	str	r2, [r3, #28]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	4b04      	ldr	r3, [pc, #16]	; (8008aac <main+0x3bc>)
 8008a9c:	f883 0326 	strb.w	r0, [r3, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008aa0:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8008aa4:	6059      	str	r1, [r3, #4]
 8008aa6:	e039      	b.n	8008b1c <main+0x42c>
 8008aa8:	40020000 	.word	0x40020000
 8008aac:	e000e100 	.word	0xe000e100
 8008ab0:	2000094c 	.word	0x2000094c
 8008ab4:	20000c88 	.word	0x20000c88
 8008ab8:	20000e20 	.word	0x20000e20
 8008abc:	20002408 	.word	0x20002408
 8008ac0:	20000d00 	.word	0x20000d00
 8008ac4:	20005000 	.word	0x20005000
 8008ac8:	20000e2c 	.word	0x20000e2c
 8008acc:	08009251 	.word	0x08009251
 8008ad0:	08009191 	.word	0x08009191
 8008ad4:	20000cb8 	.word	0x20000cb8
 8008ad8:	0800dc34 	.word	0x0800dc34
 8008adc:	e000ed00 	.word	0xe000ed00
 8008ae0:	05fa0300 	.word	0x05fa0300
 8008ae4:	e0001000 	.word	0xe0001000
 8008ae8:	0800df24 	.word	0x0800df24
 8008aec:	40021000 	.word	0x40021000
 8008af0:	40010800 	.word	0x40010800
 8008af4:	88844888 	.word	0x88844888
 8008af8:	40010c00 	.word	0x40010c00
 8008afc:	40011000 	.word	0x40011000
 8008b00:	44848888 	.word	0x44848888
 8008b04:	88888844 	.word	0x88888844
 8008b08:	08009321 	.word	0x08009321
 8008b0c:	40004400 	.word	0x40004400
 8008b10:	0800e07c 	.word	0x0800e07c
 8008b14:	20000c04 	.word	0x20000c04
 8008b18:	e0042000 	.word	0xe0042000
  u->BRR = fck;
 8008b1c:	f240 3ea9 	movw	lr, #937	; 0x3a9
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8008b20:	f04f 0c40 	mov.w	ip, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8008b24:	2701      	movs	r7, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8008b26:	f242 162c 	movw	r6, #8492	; 0x212c
  u->SR = 0;
 8008b2a:	2300      	movs	r3, #0
    sdp->rxmask = 0xFF;
 8008b2c:	20ff      	movs	r0, #255	; 0xff

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8008b2e:	2102      	movs	r1, #2
  USART_TypeDef *u = sdp->usart;
 8008b30:	6f62      	ldr	r2, [r4, #116]	; 0x74
  u->BRR = fck;
 8008b32:	f8c2 e008 	str.w	lr, [r2, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8008b36:	f8c2 c010 	str.w	ip, [r2, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8008b3a:	6157      	str	r7, [r2, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8008b3c:	60d6      	str	r6, [r2, #12]
  u->SR = 0;
 8008b3e:	6013      	str	r3, [r2, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8008b40:	6816      	ldr	r6, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8008b42:	6852      	ldr	r2, [r2, #4]
    sdp->rxmask = 0xFF;
 8008b44:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
 8008b48:	7221      	strb	r1, [r4, #8]
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	2408      	movs	r4, #8
  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 8008b50:	4618      	mov	r0, r3
 8008b52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b56:	4937      	ldr	r1, [pc, #220]	; (8008c34 <main+0x544>)
 8008b58:	6009      	str	r1, [r1, #0]
    crh <<= 4;
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
    else
      crl |= cfg;
    if ((mask & 0x8000) == 0)
 8008b5a:	0411      	lsls	r1, r2, #16
    mh <<= 4;
 8008b5c:	ea4f 1000 	mov.w	r0, r0, lsl #4
    crh <<= 4;
 8008b60:	ea4f 1303 	mov.w	r3, r3, lsl #4
    ml <<= 4;
 8008b64:	ea4f 1505 	mov.w	r5, r5, lsl #4
      mh |= 0xf;
 8008b68:	bf54      	ite	pl
 8008b6a:	f040 000f 	orrpl.w	r0, r0, #15
    else
      crh |= cfg;
 8008b6e:	f043 0303 	orrmi.w	r3, r3, #3
  for (i = 0; i < 8; i++) {
 8008b72:	3c01      	subs	r4, #1
      ml |= 0xf;
 8008b74:	f045 050f 	orr.w	r5, r5, #15
    mask <<= 1;
 8008b78:	ea4f 0242 	mov.w	r2, r2, lsl #1
  for (i = 0; i < 8; i++) {
 8008b7c:	d1ed      	bne.n	8008b5a <main+0x46a>

  /*
   * Initializes the MMC driver to work with SPI2.
   */
  palSetPadMode(IOPORT2, GPIOB_SPI2NSS, PAL_MODE_OUTPUT_PUSHPULL);
  palSetPad(IOPORT2, GPIOB_SPI2NSS);
 8008b7e:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  mmcp->state = BLK_ACTIVE;
 8008b82:	2602      	movs	r6, #2
  }
  port->CRH = (port->CRH & mh) | crh;
 8008b84:	4a2c      	ldr	r2, [pc, #176]	; (8008c38 <main+0x548>)
  mmcp->vmt = &mmc_vmt;
 8008b86:	4f2d      	ldr	r7, [pc, #180]	; (8008c3c <main+0x54c>)
 8008b88:	6851      	ldr	r1, [r2, #4]
 8008b8a:	4001      	ands	r1, r0
 8008b8c:	430b      	orrs	r3, r1
 8008b8e:	6053      	str	r3, [r2, #4]
  port->CRL = (port->CRL & ml) | crl;
 8008b90:	6811      	ldr	r1, [r2, #0]
 8008b92:	4b2b      	ldr	r3, [pc, #172]	; (8008c40 <main+0x550>)
 8008b94:	400d      	ands	r5, r1
 8008b96:	6015      	str	r5, [r2, #0]
  mmcp->config = config;
 8008b98:	482a      	ldr	r0, [pc, #168]	; (8008c44 <main+0x554>)
 8008b9a:	f8c2 c010 	str.w	ip, [r2, #16]
 8008b9e:	492a      	ldr	r1, [pc, #168]	; (8008c48 <main+0x558>)
 8008ba0:	4a2a      	ldr	r2, [pc, #168]	; (8008c4c <main+0x55c>)
  mmcp->state = BLK_ACTIVE;
 8008ba2:	711e      	strb	r6, [r3, #4]
  mmcp->block_addresses = false;
 8008ba4:	f883 4030 	strb.w	r4, [r3, #48]	; 0x30
  mmcp->vmt = &mmc_vmt;
 8008ba8:	601f      	str	r7, [r3, #0]
  mmcp->config = config;
 8008baa:	62d8      	str	r0, [r3, #44]	; 0x2c
 8008bac:	6009      	str	r1, [r1, #0]
 8008bae:	2320      	movs	r3, #32
 8008bb0:	6012      	str	r2, [r2, #0]
 8008bb2:	f383 8811 	msr	BASEPRI, r3
  cnt = POLLING_INTERVAL;
 8008bb6:	210a      	movs	r1, #10
  if (chVTIsArmedI(vtp)) {
 8008bb8:	4825      	ldr	r0, [pc, #148]	; (8008c50 <main+0x560>)
 8008bba:	4a26      	ldr	r2, [pc, #152]	; (8008c54 <main+0x564>)
 8008bbc:	68c3      	ldr	r3, [r0, #12]
 8008bbe:	6011      	str	r1, [r2, #0]
 8008bc0:	b10b      	cbz	r3, 8008bc6 <main+0x4d6>
    chVTDoResetI(vtp);
 8008bc2:	f002 f915 	bl	800adf0 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8008bc6:	2114      	movs	r1, #20
 8008bc8:	4b1d      	ldr	r3, [pc, #116]	; (8008c40 <main+0x550>)
 8008bca:	4a23      	ldr	r2, [pc, #140]	; (8008c58 <main+0x568>)
 8008bcc:	4820      	ldr	r0, [pc, #128]	; (8008c50 <main+0x560>)
 8008bce:	f002 f957 	bl	800ae80 <chVTDoSetI>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f383 8811 	msr	BASEPRI, r3
  tmr_init(&MMCD1);

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO+1, Thread1, NULL);
 8008bd8:	2181      	movs	r1, #129	; 0x81
 8008bda:	4a20      	ldr	r2, [pc, #128]	; (8008c5c <main+0x56c>)
 8008bdc:	4820      	ldr	r0, [pc, #128]	; (8008c60 <main+0x570>)
 8008bde:	f7f8 fa17 	bl	8001010 <chThdCreateStatic.constprop.0>
  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8008be2:	2201      	movs	r2, #1
 8008be4:	4818      	ldr	r0, [pc, #96]	; (8008c48 <main+0x558>)
 8008be6:	a90c      	add	r1, sp, #48	; 0x30
 8008be8:	f7f7 fcba 	bl	8000560 <chEvtRegisterMaskWithFlags.constprop.0>
 8008bec:	2202      	movs	r2, #2
 8008bee:	4817      	ldr	r0, [pc, #92]	; (8008c4c <main+0x55c>)
 8008bf0:	a907      	add	r1, sp, #28
 8008bf2:	f7f7 fcb5 	bl	8000560 <chEvtRegisterMaskWithFlags.constprop.0>
 8008bf6:	2204      	movs	r2, #4
 8008bf8:	480e      	ldr	r0, [pc, #56]	; (8008c34 <main+0x544>)
 8008bfa:	a902      	add	r1, sp, #8
 8008bfc:	f7f7 fcb0 	bl	8000560 <chEvtRegisterMaskWithFlags.constprop.0>
 8008c00:	4c18      	ldr	r4, [pc, #96]	; (8008c64 <main+0x574>)
 8008c02:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8008c74 <main+0x584>
 8008c06:	4f18      	ldr	r7, [pc, #96]	; (8008c68 <main+0x578>)
  chEvtRegister(&inserted_event, &el0, 0);
  chEvtRegister(&removed_event, &el1, 1);
  chEvtRegister(&shell_terminated, &el2, 2);
  while (true) {
    if (!shelltp) {
      shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 8008c08:	4e18      	ldr	r6, [pc, #96]	; (8008c6c <main+0x57c>)
                                    "shell", NORMALPRIO + 1,
                                    shellThread, (void *)&shell_cfg1);
    }
    chEvtDispatch(evhndl, chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(500)));
 8008c0a:	4d19      	ldr	r5, [pc, #100]	; (8008c70 <main+0x580>)
    if (!shelltp) {
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	b940      	cbnz	r0, 8008c22 <main+0x532>
      shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 8008c10:	2381      	movs	r3, #129	; 0x81
 8008c12:	4632      	mov	r2, r6
 8008c14:	f640 01c8 	movw	r1, #2248	; 0x8c8
 8008c18:	e9cd 7800 	strd	r7, r8, [sp]
 8008c1c:	f001 f9f8 	bl	800a010 <chThdCreateFromHeap>
 8008c20:	6020      	str	r0, [r4, #0]
    chEvtDispatch(evhndl, chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(500)));
 8008c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c26:	f7f7 feb3 	bl	8000990 <chEvtWaitOneTimeout.constprop.0>
 8008c2a:	4601      	mov	r1, r0
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f001 f88f 	bl	8009d50 <chEvtDispatch>
  while (true) {
 8008c32:	e7eb      	b.n	8008c0c <main+0x51c>
 8008c34:	200015d4 	.word	0x200015d4
 8008c38:	40010c00 	.word	0x40010c00
 8008c3c:	0800df3c 	.word	0x0800df3c
 8008c40:	20000918 	.word	0x20000918
 8008c44:	2000089c 	.word	0x2000089c
 8008c48:	20001410 	.word	0x20001410
 8008c4c:	200015b8 	.word	0x200015b8
 8008c50:	20001d20 	.word	0x20001d20
 8008c54:	20000e28 	.word	0x20000e28
 8008c58:	08002961 	.word	0x08002961
 8008c5c:	080025e1 	.word	0x080025e1
 8008c60:	200022b8 	.word	0x200022b8
 8008c64:	200015d8 	.word	0x200015d8
 8008c68:	0800ab81 	.word	0x0800ab81
 8008c6c:	0800d9a0 	.word	0x0800d9a0
 8008c70:	0800df18 	.word	0x0800df18
 8008c74:	0800df74 	.word	0x0800df74
	...

08008c80 <test_execute>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8008c80:	4603      	mov	r3, r0
 8008c82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c86:	468a      	mov	sl, r1
  int tseq, tcase;

  test_chp = stream;
 8008c88:	4ca4      	ldr	r4, [pc, #656]	; (8008f1c <test_execute+0x29c>)
  test_println("");
 8008c8a:	48a5      	ldr	r0, [pc, #660]	; (8008f20 <test_execute+0x2a0>)
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8008c8c:	b083      	sub	sp, #12
  test_chp = stream;
 8008c8e:	6023      	str	r3, [r4, #0]
  test_println("");
 8008c90:	f7f8 f81e 	bl	8000cd0 <test_println>
  if (tsp->name != NULL) {
 8008c94:	f8da 3000 	ldr.w	r3, [sl]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 81f1 	beq.w	8009080 <test_execute+0x400>
  while (*msgp)
 8008c9e:	212a      	movs	r1, #42	; 0x2a
  if (tsp->name != NULL) {
 8008ca0:	4da0      	ldr	r5, [pc, #640]	; (8008f24 <test_execute+0x2a4>)
    streamPut(test_chp, *msgp++);
 8008ca2:	6820      	ldr	r0, [r4, #0]
 8008ca4:	6803      	ldr	r3, [r0, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	4798      	blx	r3
  while (*msgp)
 8008caa:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008cae:	2900      	cmp	r1, #0
 8008cb0:	d1f7      	bne.n	8008ca2 <test_execute+0x22>
    test_print("*** ");
    test_println(tsp->name);
 8008cb2:	f8da 0000 	ldr.w	r0, [sl]
 8008cb6:	f7f8 f80b 	bl	8000cd0 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 8008cba:	489b      	ldr	r0, [pc, #620]	; (8008f28 <test_execute+0x2a8>)
 8008cbc:	f7f8 f808 	bl	8000cd0 <test_println>
  while (*msgp)
 8008cc0:	212a      	movs	r1, #42	; 0x2a
  test_println("***");
 8008cc2:	4d9a      	ldr	r5, [pc, #616]	; (8008f2c <test_execute+0x2ac>)
    streamPut(test_chp, *msgp++);
 8008cc4:	6820      	ldr	r0, [r4, #0]
 8008cc6:	6803      	ldr	r3, [r0, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	4798      	blx	r3
  while (*msgp)
 8008ccc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	d1f7      	bne.n	8008cc4 <test_execute+0x44>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8008cd4:	4896      	ldr	r0, [pc, #600]	; (8008f30 <test_execute+0x2b0>)
 8008cd6:	f7f7 fffb 	bl	8000cd0 <test_println>
  while (*msgp)
 8008cda:	212a      	movs	r1, #42	; 0x2a
  test_println(__DATE__ " - " __TIME__);
 8008cdc:	4d95      	ldr	r5, [pc, #596]	; (8008f34 <test_execute+0x2b4>)
    streamPut(test_chp, *msgp++);
 8008cde:	6820      	ldr	r0, [r4, #0]
 8008ce0:	6803      	ldr	r3, [r0, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	4798      	blx	r3
  while (*msgp)
 8008ce6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008cea:	2900      	cmp	r1, #0
 8008cec:	d1f7      	bne.n	8008cde <test_execute+0x5e>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8008cee:	4892      	ldr	r0, [pc, #584]	; (8008f38 <test_execute+0x2b8>)
 8008cf0:	f7f7 ffee 	bl	8000cd0 <test_println>
  while (*msgp)
 8008cf4:	212a      	movs	r1, #42	; 0x2a
  test_println(PLATFORM_NAME);
 8008cf6:	4d91      	ldr	r5, [pc, #580]	; (8008f3c <test_execute+0x2bc>)
    streamPut(test_chp, *msgp++);
 8008cf8:	6820      	ldr	r0, [r4, #0]
 8008cfa:	6803      	ldr	r3, [r0, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	4798      	blx	r3
  while (*msgp)
 8008d00:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008d04:	2900      	cmp	r1, #0
 8008d06:	d1f7      	bne.n	8008cf8 <test_execute+0x78>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8008d08:	488d      	ldr	r0, [pc, #564]	; (8008f40 <test_execute+0x2c0>)
 8008d0a:	f7f7 ffe1 	bl	8000cd0 <test_println>
  {
    extern uint8_t __text_base__,   __text_end__,
                   __rodata_base__, __rodata_end__,
                   __data_base__,   __data_end__,
                   __bss_base__,    __bss_end__;
    test_println("***");
 8008d0e:	4886      	ldr	r0, [pc, #536]	; (8008f28 <test_execute+0x2a8>)
 8008d10:	f7f7 ffde 	bl	8000cd0 <test_println>
  while (*msgp)
 8008d14:	212a      	movs	r1, #42	; 0x2a
    test_println("***");
 8008d16:	4d8b      	ldr	r5, [pc, #556]	; (8008f44 <test_execute+0x2c4>)
    streamPut(test_chp, *msgp++);
 8008d18:	6820      	ldr	r0, [r4, #0]
 8008d1a:	6803      	ldr	r3, [r0, #0]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	4798      	blx	r3
  while (*msgp)
 8008d20:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008d24:	2900      	cmp	r1, #0
 8008d26:	d1f7      	bne.n	8008d18 <test_execute+0x98>
    test_print("*** Text size:    ");
    test_printn((uint32_t)(&__text_end__ - &__text_base__));
 8008d28:	4b87      	ldr	r3, [pc, #540]	; (8008f48 <test_execute+0x2c8>)
 8008d2a:	4888      	ldr	r0, [pc, #544]	; (8008f4c <test_execute+0x2cc>)
    test_println(" bytes");
 8008d2c:	4d88      	ldr	r5, [pc, #544]	; (8008f50 <test_execute+0x2d0>)
    test_printn((uint32_t)(&__text_end__ - &__text_base__));
 8008d2e:	1ac0      	subs	r0, r0, r3
 8008d30:	f7f7 ff1e 	bl	8000b70 <test_printn>
    test_println(" bytes");
 8008d34:	4887      	ldr	r0, [pc, #540]	; (8008f54 <test_execute+0x2d4>)
 8008d36:	f7f7 ffcb 	bl	8000cd0 <test_println>
  while (*msgp)
 8008d3a:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8008d3c:	6820      	ldr	r0, [r4, #0]
 8008d3e:	6803      	ldr	r3, [r0, #0]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	4798      	blx	r3
  while (*msgp)
 8008d44:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008d48:	2900      	cmp	r1, #0
 8008d4a:	d1f7      	bne.n	8008d3c <test_execute+0xbc>
    test_print("*** RO data size: ");
    test_printn((uint32_t)(&__rodata_end__ - &__rodata_base__));
 8008d4c:	4b82      	ldr	r3, [pc, #520]	; (8008f58 <test_execute+0x2d8>)
 8008d4e:	4883      	ldr	r0, [pc, #524]	; (8008f5c <test_execute+0x2dc>)
    test_println(" bytes");
 8008d50:	4d83      	ldr	r5, [pc, #524]	; (8008f60 <test_execute+0x2e0>)
    test_printn((uint32_t)(&__rodata_end__ - &__rodata_base__));
 8008d52:	1ac0      	subs	r0, r0, r3
 8008d54:	f7f7 ff0c 	bl	8000b70 <test_printn>
    test_println(" bytes");
 8008d58:	487e      	ldr	r0, [pc, #504]	; (8008f54 <test_execute+0x2d4>)
 8008d5a:	f7f7 ffb9 	bl	8000cd0 <test_println>
  while (*msgp)
 8008d5e:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8008d60:	6820      	ldr	r0, [r4, #0]
 8008d62:	6803      	ldr	r3, [r0, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	4798      	blx	r3
  while (*msgp)
 8008d68:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008d6c:	2900      	cmp	r1, #0
 8008d6e:	d1f7      	bne.n	8008d60 <test_execute+0xe0>
 8008d70:	212a      	movs	r1, #42	; 0x2a
    test_print("*** Data size:    ");
    test_printn((uint32_t)(&__data_end__ - &__data_base__));
 8008d72:	4b7c      	ldr	r3, [pc, #496]	; (8008f64 <test_execute+0x2e4>)
 8008d74:	487c      	ldr	r0, [pc, #496]	; (8008f68 <test_execute+0x2e8>)
  while (*msgp)
 8008d76:	9101      	str	r1, [sp, #4]
    test_printn((uint32_t)(&__data_end__ - &__data_base__));
 8008d78:	1ac0      	subs	r0, r0, r3
 8008d7a:	f7f7 fef9 	bl	8000b70 <test_printn>
    test_println(" bytes");
 8008d7e:	4875      	ldr	r0, [pc, #468]	; (8008f54 <test_execute+0x2d4>)
 8008d80:	f7f7 ffa6 	bl	8000cd0 <test_println>
 8008d84:	4d79      	ldr	r5, [pc, #484]	; (8008f6c <test_execute+0x2ec>)
 8008d86:	9901      	ldr	r1, [sp, #4]
    streamPut(test_chp, *msgp++);
 8008d88:	6820      	ldr	r0, [r4, #0]
 8008d8a:	6803      	ldr	r3, [r0, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	4798      	blx	r3
  while (*msgp)
 8008d90:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008d94:	2900      	cmp	r1, #0
 8008d96:	d1f7      	bne.n	8008d88 <test_execute+0x108>
    test_print("*** BSS size:     ");
    test_printn((uint32_t)(&__bss_end__ - &__bss_base__));
 8008d98:	4b75      	ldr	r3, [pc, #468]	; (8008f70 <test_execute+0x2f0>)
 8008d9a:	4876      	ldr	r0, [pc, #472]	; (8008f74 <test_execute+0x2f4>)
 8008d9c:	9101      	str	r1, [sp, #4]
 8008d9e:	1ac0      	subs	r0, r0, r3
 8008da0:	f7f7 fee6 	bl	8000b70 <test_printn>
    test_println(" bytes");
 8008da4:	486b      	ldr	r0, [pc, #428]	; (8008f54 <test_execute+0x2d4>)
 8008da6:	f7f7 ff93 	bl	8000cd0 <test_println>
  }
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 8008daa:	485d      	ldr	r0, [pc, #372]	; (8008f20 <test_execute+0x2a0>)
 8008dac:	f7f7 ff90 	bl	8000cd0 <test_println>

  test_global_fail = false;
  tseq = 0;
  while (tsp->sequences[tseq] != NULL) {
 8008db0:	f8da 3004 	ldr.w	r3, [sl, #4]
  test_global_fail = false;
 8008db4:	4a70      	ldr	r2, [pc, #448]	; (8008f78 <test_execute+0x2f8>)
 8008db6:	9901      	ldr	r1, [sp, #4]
  while (tsp->sequences[tseq] != NULL) {
 8008db8:	681b      	ldr	r3, [r3, #0]
  test_global_fail = false;
 8008dba:	7011      	strb	r1, [r2, #0]
  while (tsp->sequences[tseq] != NULL) {
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 80f6 	beq.w	8008fae <test_execute+0x32e>
  tseq = 0;
 8008dc2:	4689      	mov	r9, r1
  while (tsp->sequences[tseq] != NULL) {
 8008dc4:	468b      	mov	fp, r1
 8008dc6:	254c      	movs	r5, #76	; 0x4c
    streamPut(test_chp, '=');
 8008dc8:	6820      	ldr	r0, [r4, #0]
 8008dca:	213d      	movs	r1, #61	; 0x3d
 8008dcc:	6803      	ldr	r3, [r0, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8008dd2:	3d01      	subs	r5, #1
 8008dd4:	d1f8      	bne.n	8008dc8 <test_execute+0x148>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8008dd6:	6820      	ldr	r0, [r4, #0]
 8008dd8:	4968      	ldr	r1, [pc, #416]	; (8008f7c <test_execute+0x2fc>)
 8008dda:	6803      	ldr	r3, [r0, #0]
 8008ddc:	2202      	movs	r2, #2
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	4798      	blx	r3
  while (*msgp)
 8008de2:	213d      	movs	r1, #61	; 0x3d
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8008de4:	4d66      	ldr	r5, [pc, #408]	; (8008f80 <test_execute+0x300>)
    streamPut(test_chp, *msgp++);
 8008de6:	6820      	ldr	r0, [r4, #0]
 8008de8:	6803      	ldr	r3, [r0, #0]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	4798      	blx	r3
  while (*msgp)
 8008dee:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008df2:	2900      	cmp	r1, #0
 8008df4:	d1f7      	bne.n	8008de6 <test_execute+0x166>
#if TEST_CFG_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 8008df6:	f109 0901 	add.w	r9, r9, #1
 8008dfa:	4648      	mov	r0, r9
 8008dfc:	f7f7 feb8 	bl	8000b70 <test_printn>
  while (*msgp)
 8008e00:	2120      	movs	r1, #32
    test_printn(tseq + 1);
 8008e02:	4d60      	ldr	r5, [pc, #384]	; (8008f84 <test_execute+0x304>)
    streamPut(test_chp, *msgp++);
 8008e04:	6820      	ldr	r0, [r4, #0]
 8008e06:	6803      	ldr	r3, [r0, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	4798      	blx	r3
  while (*msgp)
 8008e0c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008e10:	2900      	cmp	r1, #0
 8008e12:	d1f7      	bne.n	8008e04 <test_execute+0x184>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 8008e14:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008e18:	f853 300b 	ldr.w	r3, [r3, fp]
 8008e1c:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
 8008e1e:	7829      	ldrb	r1, [r5, #0]
 8008e20:	b139      	cbz	r1, 8008e32 <test_execute+0x1b2>
    streamPut(test_chp, *msgp++);
 8008e22:	6820      	ldr	r0, [r4, #0]
 8008e24:	6803      	ldr	r3, [r0, #0]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	4798      	blx	r3
  while (*msgp)
 8008e2a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008e2e:	2900      	cmp	r1, #0
 8008e30:	d1f7      	bne.n	8008e22 <test_execute+0x1a2>
    test_println(")");
 8008e32:	4855      	ldr	r0, [pc, #340]	; (8008f88 <test_execute+0x308>)
 8008e34:	f7f7 ff4c 	bl	8000cd0 <test_println>
#endif
    tcase = 0;
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8008e38:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008e3c:	f852 300b 	ldr.w	r3, [r2, fp]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 80ab 	beq.w	8008fa0 <test_execute+0x320>
    tcase = 0;
 8008e4a:	2600      	movs	r6, #0
 8008e4c:	4d4f      	ldr	r5, [pc, #316]	; (8008f8c <test_execute+0x30c>)
      print_line();
 8008e4e:	f7f7 ff9f 	bl	8000d90 <print_line>
  while (*msgp)
 8008e52:	212d      	movs	r1, #45	; 0x2d
      print_line();
 8008e54:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8008f9c <test_execute+0x31c>
 8008e58:	00b7      	lsls	r7, r6, #2
    streamPut(test_chp, *msgp++);
 8008e5a:	6820      	ldr	r0, [r4, #0]
 8008e5c:	6803      	ldr	r3, [r0, #0]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	4798      	blx	r3
  while (*msgp)
 8008e62:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8008e66:	2900      	cmp	r1, #0
 8008e68:	d1f7      	bne.n	8008e5a <test_execute+0x1da>
      test_print("--- Test Case ");
      test_printn(tseq + 1);
 8008e6a:	4648      	mov	r0, r9
 8008e6c:	f7f7 fe80 	bl	8000b70 <test_printn>
    streamPut(test_chp, *msgp++);
 8008e70:	6820      	ldr	r0, [r4, #0]
 8008e72:	212e      	movs	r1, #46	; 0x2e
 8008e74:	6803      	ldr	r3, [r0, #0]
      test_print(".");
      test_printn(tcase + 1);
 8008e76:	3601      	adds	r6, #1
    streamPut(test_chp, *msgp++);
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	4798      	blx	r3
      test_printn(tcase + 1);
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f7f7 fe77 	bl	8000b70 <test_printn>
  while (*msgp)
 8008e82:	2120      	movs	r1, #32
      test_printn(tcase + 1);
 8008e84:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8008f84 <test_execute+0x304>
    streamPut(test_chp, *msgp++);
 8008e88:	6820      	ldr	r0, [r4, #0]
 8008e8a:	6803      	ldr	r3, [r0, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	4798      	blx	r3
  while (*msgp)
 8008e90:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8008e94:	2900      	cmp	r1, #0
 8008e96:	d1f7      	bne.n	8008e88 <test_execute+0x208>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 8008e98:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008e9c:	f853 300b 	ldr.w	r3, [r3, fp]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	59db      	ldr	r3, [r3, r7]
 8008ea4:	f8d3 8000 	ldr.w	r8, [r3]
  while (*msgp)
 8008ea8:	f898 1000 	ldrb.w	r1, [r8]
 8008eac:	b139      	cbz	r1, 8008ebe <test_execute+0x23e>
    streamPut(test_chp, *msgp++);
 8008eae:	6820      	ldr	r0, [r4, #0]
 8008eb0:	6803      	ldr	r3, [r0, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	4798      	blx	r3
  while (*msgp)
 8008eb6:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8008eba:	2900      	cmp	r1, #0
 8008ebc:	d1f7      	bne.n	8008eae <test_execute+0x22e>
      test_println(")");
 8008ebe:	4832      	ldr	r0, [pc, #200]	; (8008f88 <test_execute+0x308>)
 8008ec0:	f7f7 ff06 	bl	8000cd0 <test_println>
 *
 * @api
 */
static inline void osalThreadSleep(sysinterval_t delay) {

  chThdSleep(delay);
 8008ec4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008ec8:	f002 fb3a 	bl	800b540 <chThdSleep>
  test_local_fail = false;
 8008ecc:	2200      	movs	r2, #0
#if TEST_CFG_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_CFG_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8008ece:	f8da 3004 	ldr.w	r3, [sl, #4]
  test_tokp = test_tokens_buffer;
 8008ed2:	492f      	ldr	r1, [pc, #188]	; (8008f90 <test_execute+0x310>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8008ed4:	f853 300b 	ldr.w	r3, [r3, fp]
  test_tokp = test_tokens_buffer;
 8008ed8:	6029      	str	r1, [r5, #0]
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8008eda:	685b      	ldr	r3, [r3, #4]
  test_local_fail = false;
 8008edc:	492d      	ldr	r1, [pc, #180]	; (8008f94 <test_execute+0x314>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8008ede:	f853 8007 	ldr.w	r8, [r3, r7]
  test_local_fail = false;
 8008ee2:	700a      	strb	r2, [r1, #0]
  if (tcp->setup != NULL)
 8008ee4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ee8:	b103      	cbz	r3, 8008eec <test_execute+0x26c>
    tcp->setup();
 8008eea:	4798      	blx	r3
  tcp->execute();
 8008eec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ef0:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8008ef2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ef6:	b103      	cbz	r3, 8008efa <test_execute+0x27a>
    tcp->teardown();
 8008ef8:	4798      	blx	r3
      if (test_local_fail) {
 8008efa:	4b26      	ldr	r3, [pc, #152]	; (8008f94 <test_execute+0x314>)
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d170      	bne.n	8008fe4 <test_execute+0x364>
        test_print("] \"");
        test_print(test_failure_message);
        test_println("\")");
      }
      else {
        test_println("--- Result: SUCCESS");
 8008f02:	4825      	ldr	r0, [pc, #148]	; (8008f98 <test_execute+0x318>)
 8008f04:	f7f7 fee4 	bl	8000cd0 <test_println>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8008f08:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008f0c:	f852 300b 	ldr.w	r3, [r2, fp]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	441f      	add	r7, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d199      	bne.n	8008e4e <test_execute+0x1ce>
 8008f1a:	e041      	b.n	8008fa0 <test_execute+0x320>
 8008f1c:	20001c48 	.word	0x20001c48
 8008f20:	0800e33c 	.word	0x0800e33c
 8008f24:	0800d9a8 	.word	0x0800d9a8
 8008f28:	0800daa4 	.word	0x0800daa4
 8008f2c:	0800d9b0 	.word	0x0800d9b0
 8008f30:	0800daa8 	.word	0x0800daa8
 8008f34:	0800d9c4 	.word	0x0800d9c4
 8008f38:	0800dac0 	.word	0x0800dac0
 8008f3c:	0800d9d8 	.word	0x0800d9d8
 8008f40:	0800daec 	.word	0x0800daec
 8008f44:	0800d9ec 	.word	0x0800d9ec
 8008f48:	08000160 	.word	0x08000160
 8008f4c:	0800c5a4 	.word	0x0800c5a4
 8008f50:	0800da00 	.word	0x0800da00
 8008f54:	0800ca44 	.word	0x0800ca44
 8008f58:	0800c5a4 	.word	0x0800c5a4
 8008f5c:	0800f674 	.word	0x0800f674
 8008f60:	0800da14 	.word	0x0800da14
 8008f64:	20000800 	.word	0x20000800
 8008f68:	20000910 	.word	0x20000910
 8008f6c:	0800da28 	.word	0x0800da28
 8008f70:	20000910 	.word	0x20000910
 8008f74:	20002404 	.word	0x20002404
 8008f78:	20001c50 	.word	0x20001c50
 8008f7c:	0800e2e8 	.word	0x0800e2e8
 8008f80:	0800da3c 	.word	0x0800da3c
 8008f84:	0800da50 	.word	0x0800da50
 8008f88:	0800db00 	.word	0x0800db00
 8008f8c:	20001d08 	.word	0x20001d08
 8008f90:	20001cf8 	.word	0x20001cf8
 8008f94:	20001cf0 	.word	0x20001cf0
 8008f98:	0800db08 	.word	0x0800db08
 8008f9c:	0800da54 	.word	0x0800da54
  while (tsp->sequences[tseq] != NULL) {
 8008fa0:	f10b 0b04 	add.w	fp, fp, #4
 8008fa4:	f852 300b 	ldr.w	r3, [r2, fp]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f47f af0c 	bne.w	8008dc6 <test_execute+0x146>
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 8008fae:	f7f7 feef 	bl	8000d90 <print_line>
  test_println("");
 8008fb2:	4835      	ldr	r0, [pc, #212]	; (8009088 <test_execute+0x408>)
 8008fb4:	f7f7 fe8c 	bl	8000cd0 <test_println>
  while (*msgp)
 8008fb8:	2146      	movs	r1, #70	; 0x46
  test_println("");
 8008fba:	4d34      	ldr	r5, [pc, #208]	; (800908c <test_execute+0x40c>)
    streamPut(test_chp, *msgp++);
 8008fbc:	6820      	ldr	r0, [r4, #0]
 8008fbe:	6803      	ldr	r3, [r0, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	4798      	blx	r3
  while (*msgp)
 8008fc4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008fc8:	2900      	cmp	r1, #0
 8008fca:	d1f7      	bne.n	8008fbc <test_execute+0x33c>
  test_print("Final result: ");
  if (test_global_fail)
 8008fcc:	4b30      	ldr	r3, [pc, #192]	; (8009090 <test_execute+0x410>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d04d      	beq.n	8009070 <test_execute+0x3f0>
    test_println("FAILURE");
 8008fd4:	482f      	ldr	r0, [pc, #188]	; (8009094 <test_execute+0x414>)
 8008fd6:	f7f7 fe7b 	bl	8000cd0 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 8008fda:	4b2d      	ldr	r3, [pc, #180]	; (8009090 <test_execute+0x410>)
 8008fdc:	7818      	ldrb	r0, [r3, #0]
 8008fde:	b003      	add	sp, #12
 8008fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*msgp)
 8008fe4:	212d      	movs	r1, #45	; 0x2d
      if (test_local_fail) {
 8008fe6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80090b0 <test_execute+0x430>
    streamPut(test_chp, *msgp++);
 8008fea:	6820      	ldr	r0, [r4, #0]
 8008fec:	6803      	ldr	r3, [r0, #0]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	4798      	blx	r3
  while (*msgp)
 8008ff2:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8008ff6:	2900      	cmp	r1, #0
 8008ff8:	d1f7      	bne.n	8008fea <test_execute+0x36a>
        test_printn(test_step);
 8008ffa:	4b27      	ldr	r3, [pc, #156]	; (8009098 <test_execute+0x418>)
 8008ffc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80090b4 <test_execute+0x434>
 8009000:	6818      	ldr	r0, [r3, #0]
 8009002:	f7f7 fdb5 	bl	8000b70 <test_printn>
  while (*msgp)
 8009006:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8009008:	6820      	ldr	r0, [r4, #0]
 800900a:	6803      	ldr	r3, [r0, #0]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	4798      	blx	r3
  while (*msgp)
 8009010:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8009014:	2900      	cmp	r1, #0
 8009016:	d1f7      	bne.n	8009008 <test_execute+0x388>
  while (cp < test_tokp)
 8009018:	682b      	ldr	r3, [r5, #0]
 800901a:	4a20      	ldr	r2, [pc, #128]	; (800909c <test_execute+0x41c>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d90a      	bls.n	8009036 <test_execute+0x3b6>
  char *cp = test_tokens_buffer;
 8009020:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800909c <test_execute+0x41c>
    streamPut(test_chp, *cp++);
 8009024:	6820      	ldr	r0, [r4, #0]
 8009026:	f818 1b01 	ldrb.w	r1, [r8], #1
 800902a:	6803      	ldr	r3, [r0, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	4798      	blx	r3
  while (cp < test_tokp)
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	4598      	cmp	r8, r3
 8009034:	d3f6      	bcc.n	8009024 <test_execute+0x3a4>
  while (*msgp)
 8009036:	215d      	movs	r1, #93	; 0x5d
 8009038:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80090b8 <test_execute+0x438>
    streamPut(test_chp, *msgp++);
 800903c:	6820      	ldr	r0, [r4, #0]
 800903e:	6803      	ldr	r3, [r0, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	4798      	blx	r3
  while (*msgp)
 8009044:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8009048:	2900      	cmp	r1, #0
 800904a:	d1f7      	bne.n	800903c <test_execute+0x3bc>
        test_print(test_failure_message);
 800904c:	4b14      	ldr	r3, [pc, #80]	; (80090a0 <test_execute+0x420>)
 800904e:	f8d3 8000 	ldr.w	r8, [r3]
  while (*msgp)
 8009052:	f898 1000 	ldrb.w	r1, [r8]
 8009056:	b139      	cbz	r1, 8009068 <test_execute+0x3e8>
    streamPut(test_chp, *msgp++);
 8009058:	6820      	ldr	r0, [r4, #0]
 800905a:	6803      	ldr	r3, [r0, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	4798      	blx	r3
  while (*msgp)
 8009060:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8009064:	2900      	cmp	r1, #0
 8009066:	d1f7      	bne.n	8009058 <test_execute+0x3d8>
        test_println("\")");
 8009068:	480e      	ldr	r0, [pc, #56]	; (80090a4 <test_execute+0x424>)
 800906a:	f7f7 fe31 	bl	8000cd0 <test_println>
 800906e:	e74b      	b.n	8008f08 <test_execute+0x288>
    test_println("SUCCESS");
 8009070:	480d      	ldr	r0, [pc, #52]	; (80090a8 <test_execute+0x428>)
 8009072:	f7f7 fe2d 	bl	8000cd0 <test_println>
}
 8009076:	4b06      	ldr	r3, [pc, #24]	; (8009090 <test_execute+0x410>)
 8009078:	7818      	ldrb	r0, [r3, #0]
 800907a:	b003      	add	sp, #12
 800907c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("*** Test Suite");
 8009080:	480a      	ldr	r0, [pc, #40]	; (80090ac <test_execute+0x42c>)
 8009082:	f7f7 fe25 	bl	8000cd0 <test_println>
 8009086:	e618      	b.n	8008cba <test_execute+0x3a>
 8009088:	0800e33c 	.word	0x0800e33c
 800908c:	0800da84 	.word	0x0800da84
 8009090:	20001c50 	.word	0x20001c50
 8009094:	0800db1c 	.word	0x0800db1c
 8009098:	20001cf4 	.word	0x20001cf4
 800909c:	20001cf8 	.word	0x20001cf8
 80090a0:	20001c4c 	.word	0x20001c4c
 80090a4:	0800db04 	.word	0x0800db04
 80090a8:	0800db14 	.word	0x0800db14
 80090ac:	0800da94 	.word	0x0800da94
 80090b0:	0800da64 	.word	0x0800da64
 80090b4:	0800da7c 	.word	0x0800da7c
 80090b8:	0800da80 	.word	0x0800da80
 80090bc:	00000000 	.word	0x00000000

080090c0 <Thread1.lto_priv.1>:
static THD_FUNCTION(Thread1, arg) {
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  exit_flag = false;
 80090c2:	2300      	movs	r3, #0
 80090c4:	2620      	movs	r6, #32
 80090c6:	461d      	mov	r5, r3
 80090c8:	4f0e      	ldr	r7, [pc, #56]	; (8009104 <Thread1.lto_priv.1+0x44>)
 80090ca:	703b      	strb	r3, [r7, #0]
 80090cc:	f386 8811 	msr	BASEPRI, r6
  tp = chMsgWaitS();
 80090d0:	f001 f80e 	bl	800a0f0 <chMsgWaitS>
 80090d4:	4604      	mov	r4, r0
 80090d6:	f385 8811 	msr	BASEPRI, r5
  thread_t *tp;
  const call_message_t *cmp;
  msg_t ret;

  tp = chMsgWait();
  cmp = (const call_message_t *)chMsgGet(tp);
 80090da:	6a43      	ldr	r3, [r0, #36]	; 0x24
  ret = cmp->veneer(cmp->argsp);
 80090dc:	e9d3 2000 	ldrd	r2, r0, [r3]
 80090e0:	4790      	blx	r2
 80090e2:	4601      	mov	r1, r0
 80090e4:	f386 8811 	msr	BASEPRI, r6
  chSchWakeupS(tp, msg);
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 ff61 	bl	8009fb0 <chSchWakeupS>
 80090ee:	f385 8811 	msr	BASEPRI, r5
  } while (!exit_flag);
 80090f2:	783b      	ldrb	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d0e9      	beq.n	80090cc <Thread1.lto_priv.1+0xc>
}
 80090f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chThdExit(0x0FA5);
 80090fc:	f640 70a5 	movw	r0, #4005	; 0xfa5
 8009100:	f001 be6e 	b.w	800ade0 <chThdExit>
 8009104:	20000e88 	.word	0x20000e88
	...

08009110 <bmk_thread3>:
  chThdExit((msg_t)p);
 8009110:	f001 be66 	b.w	800ade0 <chThdExit>
	...

08009120 <mmc_lld_is_write_protected>:
 8009120:	4b03      	ldr	r3, [pc, #12]	; (8009130 <mmc_lld_is_write_protected+0x10>)
 8009122:	6898      	ldr	r0, [r3, #8]
 8009124:	f080 0040 	eor.w	r0, r0, #64	; 0x40
}
 8009128:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	40011000 	.word	0x40011000
	...

08009140 <_port_irq_epilogue>:
 8009140:	2320      	movs	r3, #32
 8009142:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8009146:	4b0d      	ldr	r3, [pc, #52]	; (800917c <_port_irq_epilogue+0x3c>)
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800914e:	d102      	bne.n	8009156 <_port_irq_epilogue+0x16>
 8009150:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8009154:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8009156:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800915a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800915e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8009160:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8009162:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8009166:	4a06      	ldr	r2, [pc, #24]	; (8009180 <_port_irq_epilogue+0x40>)
 8009168:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800916a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800916c:	6889      	ldr	r1, [r1, #8]
 800916e:	6892      	ldr	r2, [r2, #8]
 8009170:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8009172:	bf8c      	ite	hi
 8009174:	4a03      	ldrhi	r2, [pc, #12]	; (8009184 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8009176:	4a04      	ldrls	r2, [pc, #16]	; (8009188 <_port_irq_epilogue+0x48>)
 8009178:	619a      	str	r2, [r3, #24]
 800917a:	4770      	bx	lr
 800917c:	e000ed00 	.word	0xe000ed00
 8009180:	20000c88 	.word	0x20000c88
 8009184:	08000263 	.word	0x08000263
 8009188:	08000266 	.word	0x08000266
 800918c:	00000000 	.word	0x00000000

08009190 <chCoreAllocAlignedI.lto_priv.0>:
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8009190:	4b08      	ldr	r3, [pc, #32]	; (80091b4 <chCoreAllocAlignedI.lto_priv.0+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8009192:	b410      	push	{r4}
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8009194:	e9d3 4200 	ldrd	r4, r2, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8009198:	4249      	negs	r1, r1
 800919a:	1a10      	subs	r0, r2, r0
 800919c:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800919e:	42a0      	cmp	r0, r4
 80091a0:	d304      	bcc.n	80091ac <chCoreAllocAlignedI.lto_priv.0+0x1c>
 80091a2:	4282      	cmp	r2, r0
 80091a4:	d302      	bcc.n	80091ac <chCoreAllocAlignedI.lto_priv.0+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80091a6:	bc10      	pop	{r4}
    return NULL;
  }

  ch_memcore.topmem = prev;
 80091a8:	6058      	str	r0, [r3, #4]
 80091aa:	4770      	bx	lr
    return NULL;
 80091ac:	2000      	movs	r0, #0
 80091ae:	bc10      	pop	{r4}
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	20000e20 	.word	0x20000e20
	...

080091c0 <__ch_delegate_fn4>:
msg_t __ch_delegate_fn4(va_list *argsp) {
 80091c0:	b470      	push	{r4, r5, r6}
 80091c2:	4604      	mov	r4, r0
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80091c4:	6803      	ldr	r3, [r0, #0]
 80091c6:	1d1d      	adds	r5, r3, #4
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 80091c8:	68da      	ldr	r2, [r3, #12]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80091ca:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80091ce:	6025      	str	r5, [r4, #0]
 80091d0:	681d      	ldr	r5, [r3, #0]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 80091d2:	f103 0614 	add.w	r6, r3, #20
  return fn4(p1, p2, p3, p4);
 80091d6:	46ac      	mov	ip, r5
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 80091d8:	6026      	str	r6, [r4, #0]
  return fn4(p1, p2, p3, p4);
 80091da:	691b      	ldr	r3, [r3, #16]
}
 80091dc:	bc70      	pop	{r4, r5, r6}
  return fn4(p1, p2, p3, p4);
 80091de:	4760      	bx	ip

080091e0 <__ch_delegate_fn3>:
msg_t __ch_delegate_fn3(va_list *argsp) {
 80091e0:	4602      	mov	r2, r0
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 80091e2:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn3(va_list *argsp) {
 80091e4:	b430      	push	{r4, r5}
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80091e6:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 80091ea:	1d1c      	adds	r4, r3, #4
 80091ec:	6014      	str	r4, [r2, #0]
 80091ee:	681c      	ldr	r4, [r3, #0]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 80091f0:	f103 0510 	add.w	r5, r3, #16
 80091f4:	6015      	str	r5, [r2, #0]
  return fn3(p1, p2, p3);
 80091f6:	68da      	ldr	r2, [r3, #12]
 80091f8:	4623      	mov	r3, r4
}
 80091fa:	bc30      	pop	{r4, r5}
  return fn3(p1, p2, p3);
 80091fc:	4718      	bx	r3
 80091fe:	bf00      	nop

08009200 <__ch_delegate_fn2>:
msg_t __ch_delegate_fn2(va_list *argsp) {
 8009200:	4602      	mov	r2, r0
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8009202:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn2(va_list *argsp) {
 8009204:	b410      	push	{r4}
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8009206:	1d19      	adds	r1, r3, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8009208:	6858      	ldr	r0, [r3, #4]
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 800920a:	6011      	str	r1, [r2, #0]
 800920c:	681c      	ldr	r4, [r3, #0]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 800920e:	f103 010c 	add.w	r1, r3, #12
 8009212:	6011      	str	r1, [r2, #0]
  return fn2(p1, p2);
 8009214:	6899      	ldr	r1, [r3, #8]
 8009216:	4623      	mov	r3, r4
}
 8009218:	bc10      	pop	{r4}
  return fn2(p1, p2);
 800921a:	4718      	bx	r3
 800921c:	0000      	movs	r0, r0
	...

08009220 <__ch_delegate_fn1>:
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8009220:	6801      	ldr	r1, [r0, #0]
msg_t __ch_delegate_fn1(va_list *argsp) {
 8009222:	4603      	mov	r3, r0
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8009224:	460a      	mov	r2, r1
 8009226:	1d08      	adds	r0, r1, #4
msg_t __ch_delegate_fn1(va_list *argsp) {
 8009228:	b410      	push	{r4}
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 800922a:	6018      	str	r0, [r3, #0]
 800922c:	f852 4b08 	ldr.w	r4, [r2], #8
  return fn1(p1);
 8009230:	6848      	ldr	r0, [r1, #4]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8009232:	601a      	str	r2, [r3, #0]
  return fn1(p1);
 8009234:	4623      	mov	r3, r4
}
 8009236:	bc10      	pop	{r4}
  return fn1(p1);
 8009238:	4718      	bx	r3
 800923a:	bf00      	nop
 800923c:	0000      	movs	r0, r0
	...

08009240 <__ch_delegate_fn0>:
  delegate_fn0_t fn0 = (delegate_fn0_t)va_arg(*argsp, delegate_fn0_t);
 8009240:	6803      	ldr	r3, [r0, #0]
 8009242:	1d1a      	adds	r2, r3, #4
 8009244:	6002      	str	r2, [r0, #0]
  return fn0();
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4718      	bx	r3
 800924a:	bf00      	nop
 800924c:	0000      	movs	r0, r0
	...

08009250 <chCoreAllocFromTop>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009250:	2320      	movs	r3, #32
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8009252:	b430      	push	{r4, r5}
 8009254:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8009258:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <chCoreAllocFromTop+0x38>)
 800925a:	4249      	negs	r1, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800925c:	e9d3 4500 	ldrd	r4, r5, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8009260:	1a28      	subs	r0, r5, r0
 8009262:	4008      	ands	r0, r1
  prev = p - offset;
 8009264:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8009266:	42a2      	cmp	r2, r4
 8009268:	d307      	bcc.n	800927a <chCoreAllocFromTop+0x2a>
 800926a:	4295      	cmp	r5, r2
 800926c:	d305      	bcc.n	800927a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800926e:	605a      	str	r2, [r3, #4]
 8009270:	2300      	movs	r3, #0
 8009272:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8009276:	bc30      	pop	{r4, r5}
 8009278:	4770      	bx	lr
    return NULL;
 800927a:	2000      	movs	r0, #0
 800927c:	2300      	movs	r3, #0
 800927e:	f383 8811 	msr	BASEPRI, r3
}
 8009282:	bc30      	pop	{r4, r5}
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	20000e20 	.word	0x20000e20
 800928c:	00000000 	.word	0x00000000

08009290 <wakeup.lto_priv.0>:
 8009290:	2320      	movs	r3, #32
 8009292:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8009296:	f890 3020 	ldrb.w	r3, [r0, #32]
 800929a:	2b07      	cmp	r3, #7
 800929c:	d80d      	bhi.n	80092ba <wakeup.lto_priv.0+0x2a>
 800929e:	e8df f003 	tbb	[pc, r3]
 80092a2:	0c27      	.short	0x0c27
 80092a4:	0408230c 	.word	0x0408230c
 80092a8:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 80092aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80092ac:	6893      	ldr	r3, [r2, #8]
 80092ae:	3301      	adds	r3, #1
 80092b0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80092b2:	e9d0 3200 	ldrd	r3, r2, [r0]
 80092b6:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80092b8:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 80092ba:	2200      	movs	r2, #0
static void wakeup(void *p) {
 80092bc:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
 80092be:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->prio >= tp->prio);
 80092c2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80092c4:	4b0c      	ldr	r3, [pc, #48]	; (80092f8 <wakeup.lto_priv.0+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 80092c6:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80092c8:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80092cc:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	428a      	cmp	r2, r1
 80092d2:	d2fb      	bcs.n	80092cc <wakeup.lto_priv.0+0x3c>
  tp->queue.prev             = cp->queue.prev;
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	2100      	movs	r1, #0
 80092d8:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80092dc:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80092de:	6058      	str	r0, [r3, #4]
 80092e0:	f381 8811 	msr	BASEPRI, r1
}
 80092e4:	bc10      	pop	{r4}
 80092e6:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80092e8:	2200      	movs	r2, #0
 80092ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80092ec:	601a      	str	r2, [r3, #0]
    break;
 80092ee:	e7e4      	b.n	80092ba <wakeup.lto_priv.0+0x2a>
 80092f0:	2300      	movs	r3, #0
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	4770      	bx	lr
 80092f8:	20000c88 	.word	0x20000c88
 80092fc:	00000000 	.word	0x00000000

08009300 <_idle_thread.lto_priv.0>:
__STATIC_FORCEINLINE void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 8009300:	e7fe      	b.n	8009300 <_idle_thread.lto_priv.0>
 8009302:	bf00      	nop
	...

08009310 <mmc_lld_is_card_inserted>:
  return palReadPad(GPIOC, GPIOC_MMCCP);
 8009310:	4b02      	ldr	r3, [pc, #8]	; (800931c <mmc_lld_is_card_inserted+0xc>)
 8009312:	6898      	ldr	r0, [r3, #8]
}
 8009314:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	40011000 	.word	0x40011000

08009320 <notify2.lto_priv.0>:
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8009320:	4a02      	ldr	r2, [pc, #8]	; (800932c <notify2.lto_priv.0+0xc>)
 8009322:	68d3      	ldr	r3, [r2, #12]
 8009324:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009328:	60d3      	str	r3, [r2, #12]
}
 800932a:	4770      	bx	lr
 800932c:	40004400 	.word	0x40004400

08009330 <spi_lld_serve_tx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8009330:	070b      	lsls	r3, r1, #28
 8009332:	d400      	bmi.n	8009336 <spi_lld_serve_tx_interrupt+0x6>
}
 8009334:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 8009336:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8009338:	4b01      	ldr	r3, [pc, #4]	; (8009340 <spi_lld_serve_tx_interrupt+0x10>)
 800933a:	4a02      	ldr	r2, [pc, #8]	; (8009344 <spi_lld_serve_tx_interrupt+0x14>)
 800933c:	62da      	str	r2, [r3, #44]	; 0x2c
 800933e:	e7fe      	b.n	800933e <spi_lld_serve_tx_interrupt+0xe>
 8009340:	20000c88 	.word	0x20000c88
 8009344:	0800e0b8 	.word	0x0800e0b8
	...

08009350 <dmaServeInterrupt>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
 8009350:	b430      	push	{r4, r5}
  uint32_t flags;
  uint32_t selfindex = (uint32_t)dmastp->selfindex;

  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8009352:	6802      	ldr	r2, [r0, #0]
 8009354:	7b43      	ldrb	r3, [r0, #13]
 8009356:	6811      	ldr	r1, [r2, #0]
  if (flags & dmastp->channel->CCR) {
 8009358:	6844      	ldr	r4, [r0, #4]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 800935a:	40d9      	lsrs	r1, r3
  if (flags & dmastp->channel->CCR) {
 800935c:	6824      	ldr	r4, [r4, #0]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 800935e:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8009362:	420c      	tst	r4, r1
 8009364:	d00e      	beq.n	8009384 <dmaServeInterrupt+0x34>
  uint32_t selfindex = (uint32_t)dmastp->selfindex;
 8009366:	7b80      	ldrb	r0, [r0, #14]
    dmastp->dma->IFCR = flags << dmastp->shift;
    if (dma.streams[selfindex].func) {
 8009368:	4c07      	ldr	r4, [pc, #28]	; (8009388 <dmaServeInterrupt+0x38>)
 800936a:	3001      	adds	r0, #1
 800936c:	f854 5030 	ldr.w	r5, [r4, r0, lsl #3]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8009370:	fa01 f303 	lsl.w	r3, r1, r3
 8009374:	6053      	str	r3, [r2, #4]
    if (dma.streams[selfindex].func) {
 8009376:	b12d      	cbz	r5, 8009384 <dmaServeInterrupt+0x34>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8009378:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800937c:	462b      	mov	r3, r5
    }
  }
}
 800937e:	bc30      	pop	{r4, r5}
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8009380:	6840      	ldr	r0, [r0, #4]
 8009382:	4718      	bx	r3
}
 8009384:	bc30      	pop	{r4, r5}
 8009386:	4770      	bx	lr
 8009388:	20000e48 	.word	0x20000e48
 800938c:	00000000 	.word	0x00000000

08009390 <dmaStreamFreeI>:
void dmaStreamFreeI(const stm32_dma_stream_t *dmastp) {
 8009390:	b4f0      	push	{r4, r5, r6, r7}
  dma.allocated_mask &= ~(1U << selfindex);
 8009392:	2701      	movs	r7, #1
  uint32_t selfindex = (uint32_t)dmastp->selfindex;
 8009394:	7b81      	ldrb	r1, [r0, #14]
  dma.allocated_mask &= ~(1U << selfindex);
 8009396:	4a16      	ldr	r2, [pc, #88]	; (80093f0 <dmaStreamFreeI+0x60>)
 8009398:	fa07 f601 	lsl.w	r6, r7, r1
  if ((dma.isr_mask & dmastp->cmask) == 0U) {
 800939c:	6885      	ldr	r5, [r0, #8]
  dma.isr_mask &= ~(1U << selfindex);
 800939e:	e9d2 4300 	ldrd	r4, r3, [r2]
 80093a2:	ea23 0306 	bic.w	r3, r3, r6
  dma.allocated_mask &= ~(1U << selfindex);
 80093a6:	ea24 0406 	bic.w	r4, r4, r6
  dma.isr_mask &= ~(1U << selfindex);
 80093aa:	e9c2 4300 	strd	r4, r3, [r2]
  if ((dma.isr_mask & dmastp->cmask) == 0U) {
 80093ae:	402b      	ands	r3, r5
 80093b0:	d010      	beq.n	80093d4 <dmaStreamFreeI+0x44>
  dma.streams[selfindex].func  = NULL;
 80093b2:	2000      	movs	r0, #0
 80093b4:	1c4b      	adds	r3, r1, #1
  dma.streams[selfindex].param = NULL;
 80093b6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  dma.streams[selfindex].func  = NULL;
 80093ba:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 80093be:	0663      	lsls	r3, r4, #25
  dma.streams[selfindex].param = NULL;
 80093c0:	6048      	str	r0, [r1, #4]
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 80093c2:	d105      	bne.n	80093d0 <dmaStreamFreeI+0x40>
    rccDisableDMA1();
 80093c4:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <dmaStreamFreeI+0x64>)
 80093c6:	695a      	ldr	r2, [r3, #20]
 80093c8:	f022 0201 	bic.w	r2, r2, #1
 80093cc:	615a      	str	r2, [r3, #20]
 80093ce:	695b      	ldr	r3, [r3, #20]
}
 80093d0:	bcf0      	pop	{r4, r5, r6, r7}
 80093d2:	4770      	bx	lr
    nvicDisableVector(dmastp->vector);
 80093d4:	7bc0      	ldrb	r0, [r0, #15]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80093d6:	4e08      	ldr	r6, [pc, #32]	; (80093f8 <dmaStreamFreeI+0x68>)
 80093d8:	0945      	lsrs	r5, r0, #5
 80093da:	f000 0c1f 	and.w	ip, r0, #31
 80093de:	3520      	adds	r5, #32
 80093e0:	fa07 f70c 	lsl.w	r7, r7, ip
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80093e4:	4430      	add	r0, r6
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80093e6:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
  NVIC->IP[n] = 0U;
 80093ea:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 80093ee:	e7e0      	b.n	80093b2 <dmaStreamFreeI+0x22>
 80093f0:	20000e48 	.word	0x20000e48
 80093f4:	40021000 	.word	0x40021000
 80093f8:	e000e100 	.word	0xe000e100
 80093fc:	00000000 	.word	0x00000000

08009400 <spiUnselect>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009400:	2320      	movs	r3, #32
 8009402:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 8009406:	2301      	movs	r3, #1
 8009408:	6842      	ldr	r2, [r0, #4]
 800940a:	2100      	movs	r1, #0
 800940c:	68d0      	ldr	r0, [r2, #12]
 800940e:	6892      	ldr	r2, [r2, #8]
 8009410:	4083      	lsls	r3, r0
 8009412:	6113      	str	r3, [r2, #16]
 8009414:	f381 8811 	msr	BASEPRI, r1
  osalSysUnlock();
}
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	0000      	movs	r0, r0
	...

08009420 <spiSelect>:
 8009420:	2320      	movs	r3, #32
 8009422:	f383 8811 	msr	BASEPRI, r3
  spiSelectI(spip);
 8009426:	2301      	movs	r3, #1
 8009428:	6842      	ldr	r2, [r0, #4]
 800942a:	2100      	movs	r1, #0
 800942c:	68d0      	ldr	r0, [r2, #12]
 800942e:	6892      	ldr	r2, [r2, #8]
 8009430:	4083      	lsls	r3, r0
 8009432:	6153      	str	r3, [r2, #20]
 8009434:	f381 8811 	msr	BASEPRI, r1
}
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	0000      	movs	r0, r0
	...

08009440 <spiStop>:
void spiStop(SPIDriver *spip) {
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	2320      	movs	r3, #32
 8009444:	4604      	mov	r4, r0
 8009446:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void spi_lld_stop(SPIDriver *spip) {

  /* If in ready state then disables the SPI clock.*/
  if (spip->state == SPI_READY) {
 800944a:	7803      	ldrb	r3, [r0, #0]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d006      	beq.n	800945e <spiStop+0x1e>
  spip->config = NULL;
 8009450:	2300      	movs	r3, #0
  spip->state  = SPI_STOP;
 8009452:	2201      	movs	r2, #1
  spip->config = NULL;
 8009454:	6063      	str	r3, [r4, #4]
  spip->state  = SPI_STOP;
 8009456:	7022      	strb	r2, [r4, #0]
 8009458:	f383 8811 	msr	BASEPRI, r3
}
 800945c:	bd38      	pop	{r3, r4, r5, pc}

    /* SPI disable.*/
    spip->spi->CR1 &= ~SPI_CR1_SPE;
    spip->spi->CR1  = 0;
 800945e:	2500      	movs	r5, #0
    spip->spi->CR2  = 0;
    dmaStreamFreeI(spip->dmarx);
 8009460:	e9d0 3007 	ldrd	r3, r0, [r0, #28]
    spip->spi->CR1 &= ~SPI_CR1_SPE;
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800946a:	601a      	str	r2, [r3, #0]
    spip->spi->CR1  = 0;
 800946c:	601d      	str	r5, [r3, #0]
    spip->spi->CR2  = 0;
 800946e:	605d      	str	r5, [r3, #4]
    dmaStreamFreeI(spip->dmarx);
 8009470:	f7ff ff8e 	bl	8009390 <dmaStreamFreeI>
    dmaStreamFreeI(spip->dmatx);
 8009474:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009476:	f7ff ff8b 	bl	8009390 <dmaStreamFreeI>
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip)
      rccDisableSPI1();
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip)
 800947a:	4b06      	ldr	r3, [pc, #24]	; (8009494 <spiStop+0x54>)
    spip->dmatx = NULL;
 800947c:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (&SPID2 == spip)
 8009480:	429c      	cmp	r4, r3
 8009482:	d1e5      	bne.n	8009450 <spiStop+0x10>
      rccDisableSPI2();
 8009484:	4b04      	ldr	r3, [pc, #16]	; (8009498 <spiStop+0x58>)
 8009486:	69da      	ldr	r2, [r3, #28]
 8009488:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800948c:	61da      	str	r2, [r3, #28]
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	e7de      	b.n	8009450 <spiStop+0x10>
 8009492:	bf00      	nop
 8009494:	20000c04 	.word	0x20000c04
 8009498:	40021000 	.word	0x40021000
 800949c:	00000000 	.word	0x00000000

080094a0 <_ctl.lto_priv.0>:
}
 80094a0:	2000      	movs	r0, #0
 80094a2:	4770      	bx	lr
	...

080094b0 <mmcGetInfo>:
 */
bool mmcGetInfo(MMCDriver *mmcp, BlockDeviceInfo *bdip) {

  osalDbgCheck((mmcp != NULL) && (bdip != NULL));

  if (mmcp->state != BLK_READY) {
 80094b0:	7903      	ldrb	r3, [r0, #4]
 80094b2:	2b05      	cmp	r3, #5
 80094b4:	d106      	bne.n	80094c4 <mmcGetInfo+0x14>
    return HAL_FAILED;
  }

  bdip->blk_num  = mmcp->capacity;
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 80094b6:	f44f 7300 	mov.w	r3, #512	; 0x200
  bdip->blk_num  = mmcp->capacity;
 80094ba:	6a82      	ldr	r2, [r0, #40]	; 0x28

  return HAL_SUCCESS;
 80094bc:	2000      	movs	r0, #0
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 80094be:	e9c1 3200 	strd	r3, r2, [r1]
  return HAL_SUCCESS;
 80094c2:	4770      	bx	lr
    return HAL_FAILED;
 80094c4:	2001      	movs	r0, #1
}
 80094c6:	4770      	bx	lr
	...

080094d0 <test_rt>:
#endif

#if (SHELL_CMD_TEST_ENABLED == TRUE) || defined(__DOXYGEN__)
static THD_FUNCTION(test_rt, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &rt_test_suite);
 80094d0:	4901      	ldr	r1, [pc, #4]	; (80094d8 <test_rt+0x8>)
 80094d2:	f7ff bbd5 	b.w	8008c80 <test_execute>
 80094d6:	bf00      	nop
 80094d8:	0800f5ac 	.word	0x0800f5ac
 80094dc:	00000000 	.word	0x00000000

080094e0 <test_oslib>:
}

static THD_FUNCTION(test_oslib, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &oslib_test_suite);
 80094e0:	4901      	ldr	r1, [pc, #4]	; (80094e8 <test_oslib+0x8>)
 80094e2:	f7ff bbcd 	b.w	8008c80 <test_execute>
 80094e6:	bf00      	nop
 80094e8:	0800f0cc 	.word	0x0800f0cc
 80094ec:	00000000 	.word	0x00000000

080094f0 <parse_arguments>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static char *parse_arguments(char *str, char **saveptr) {
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	460d      	mov	r5, r1
  char *p;

  if (str != NULL)
 80094f4:	b1b0      	cbz	r0, 8009524 <parse_arguments+0x34>
 80094f6:	4604      	mov	r4, r0
    *saveptr = str;
 80094f8:	6028      	str	r0, [r5, #0]
  if (!p) {
    return NULL;
  }

  /* Skipping white space.*/
  p += strspn(p, " \t");
 80094fa:	4620      	mov	r0, r4
 80094fc:	4910      	ldr	r1, [pc, #64]	; (8009540 <parse_arguments+0x50>)
 80094fe:	f003 f839 	bl	800c574 <strspn>

  if (*p == '"') {
 8009502:	5c21      	ldrb	r1, [r4, r0]
  p += strspn(p, " \t");
 8009504:	4404      	add	r4, r0
  if (*p == '"') {
 8009506:	2922      	cmp	r1, #34	; 0x22
 8009508:	d012      	beq.n	8009530 <parse_arguments+0x40>
    p++;
    *saveptr = strpbrk(p, "\"");
  }
  else {
    /* The delimiter is white space.*/
    *saveptr = strpbrk(p, " \t");
 800950a:	4620      	mov	r0, r4
 800950c:	490c      	ldr	r1, [pc, #48]	; (8009540 <parse_arguments+0x50>)
 800950e:	f003 f815 	bl	800c53c <strpbrk>
  }

  /* Replacing the delimiter with a zero.*/
  if (*saveptr != NULL) {
 8009512:	b198      	cbz	r0, 800953c <parse_arguments+0x4c>
    *(*saveptr)++ = '\0';
 8009514:	2300      	movs	r3, #0
 8009516:	1c42      	adds	r2, r0, #1
 8009518:	602a      	str	r2, [r5, #0]
 800951a:	7003      	strb	r3, [r0, #0]
  }

  return *p != '\0' ? p : NULL;
 800951c:	7823      	ldrb	r3, [r4, #0]
 800951e:	b123      	cbz	r3, 800952a <parse_arguments+0x3a>
}
 8009520:	4620      	mov	r0, r4
 8009522:	bd38      	pop	{r3, r4, r5, pc}
  p = *saveptr;
 8009524:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8009526:	2c00      	cmp	r4, #0
 8009528:	d1e7      	bne.n	80094fa <parse_arguments+0xa>
    return NULL;
 800952a:	2400      	movs	r4, #0
}
 800952c:	4620      	mov	r0, r4
 800952e:	bd38      	pop	{r3, r4, r5, pc}
    p++;
 8009530:	3401      	adds	r4, #1
    *saveptr = strpbrk(p, "\"");
 8009532:	4620      	mov	r0, r4
 8009534:	f002 fe9c 	bl	800c270 <strchr>
  if (*saveptr != NULL) {
 8009538:	2800      	cmp	r0, #0
 800953a:	d1eb      	bne.n	8009514 <parse_arguments+0x24>
 800953c:	6028      	str	r0, [r5, #0]
 800953e:	e7ed      	b.n	800951c <parse_arguments+0x2c>
 8009540:	0800e0c4 	.word	0x0800e0c4
	...

08009550 <spiStart>:
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 8009550:	b570      	push	{r4, r5, r6, lr}
 8009552:	2320      	movs	r3, #32
 8009554:	4604      	mov	r4, r0
 8009556:	f383 8811 	msr	BASEPRI, r3
  if (spip->state == SPI_STOP) {
 800955a:	7803      	ldrb	r3, [r0, #0]
  spip->config = config;
 800955c:	6041      	str	r1, [r0, #4]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d038      	beq.n	80095d4 <spiStart+0x84>
 8009562:	69c2      	ldr	r2, [r0, #28]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8009564:	8a0d      	ldrh	r5, [r1, #16]
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8009566:	e9d4 030a 	ldrd	r0, r3, [r4, #40]	; 0x28
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800956a:	052e      	lsls	r6, r5, #20
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 800956c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8009570:	d41f      	bmi.n	80095b2 <spiStart+0x62>
  if (spip->config->circular) {
 8009572:	780e      	ldrb	r6, [r1, #0]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009574:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8009576:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
  if (spip->config->circular) {
 800957a:	b326      	cbz	r6, 80095c6 <spiStart+0x76>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800957c:	f040 0024 	orr.w	r0, r0, #36	; 0x24
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8009580:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8009584:	e9c4 030a 	strd	r0, r3, [r4, #40]	; 0x28
  spip->state = SPI_READY;
 8009588:	2002      	movs	r0, #2
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 800958a:	8a4b      	ldrh	r3, [r1, #18]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 800958c:	6811      	ldr	r1, [r2, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 800958e:	f043 0307 	orr.w	r3, r3, #7
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8009592:	f445 7541 	orr.w	r5, r5, #772	; 0x304
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8009596:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800959a:	6011      	str	r1, [r2, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800959c:	6015      	str	r5, [r2, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 800959e:	6053      	str	r3, [r2, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 80095a0:	6813      	ldr	r3, [r2, #0]
 80095a2:	2100      	movs	r1, #0
 80095a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095a8:	6013      	str	r3, [r2, #0]
 80095aa:	7020      	strb	r0, [r4, #0]
 80095ac:	f381 8811 	msr	BASEPRI, r1
}
 80095b0:	bd70      	pop	{r4, r5, r6, pc}
  if (spip->config->circular) {
 80095b2:	780e      	ldrb	r6, [r1, #0]
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80095b4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80095b8:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80095bc:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80095be:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
  if (spip->config->circular) {
 80095c2:	2e00      	cmp	r6, #0
 80095c4:	d1da      	bne.n	800957c <spiStart+0x2c>
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80095c6:	f020 0024 	bic.w	r0, r0, #36	; 0x24
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80095ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095ce:	e9c4 030a 	strd	r0, r3, [r4, #40]	; 0x28
 80095d2:	e7d9      	b.n	8009588 <spiStart+0x38>
    if (&SPID2 == spip) {
 80095d4:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <spiStart+0xc4>)
 80095d6:	4298      	cmp	r0, r3
 80095d8:	d009      	beq.n	80095ee <spiStart+0x9e>
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80095da:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80095de:	69e2      	ldr	r2, [r4, #28]
 80095e0:	6845      	ldr	r5, [r0, #4]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80095e2:	6858      	ldr	r0, [r3, #4]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80095e4:	f102 030c 	add.w	r3, r2, #12
 80095e8:	60ab      	str	r3, [r5, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80095ea:	6083      	str	r3, [r0, #8]
 80095ec:	e7ba      	b.n	8009564 <spiStart+0x14>
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 80095ee:	490a      	ldr	r1, [pc, #40]	; (8009618 <spiStart+0xc8>)
 80095f0:	2003      	movs	r0, #3
 80095f2:	f7fd ffbd 	bl	8007570 <dmaStreamAllocI.part.0.constprop.0>
 80095f6:	4603      	mov	r3, r0
 80095f8:	4908      	ldr	r1, [pc, #32]	; (800961c <spiStart+0xcc>)
 80095fa:	2004      	movs	r0, #4
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI2_RX_DMA_STREAM,
 80095fc:	6223      	str	r3, [r4, #32]
 80095fe:	f7fd ffb7 	bl	8007570 <dmaStreamAllocI.part.0.constprop.0>
      rccEnableSPI2(true);
 8009602:	4b07      	ldr	r3, [pc, #28]	; (8009620 <spiStart+0xd0>)
 8009604:	6861      	ldr	r1, [r4, #4]
 8009606:	69da      	ldr	r2, [r3, #28]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI2_TX_DMA_STREAM,
 8009608:	6260      	str	r0, [r4, #36]	; 0x24
      rccEnableSPI2(true);
 800960a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800960e:	61da      	str	r2, [r3, #28]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	e7e2      	b.n	80095da <spiStart+0x8a>
 8009614:	20000c04 	.word	0x20000c04
 8009618:	0800aa41 	.word	0x0800aa41
 800961c:	08009331 	.word	0x08009331
 8009620:	40021000 	.word	0x40021000
	...

08009630 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8009630:	b40e      	push	{r1, r2, r3}
 8009632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	ab0f      	add	r3, sp, #60	; 0x3c
 800963a:	f853 4b04 	ldr.w	r4, [r3], #4
    c = *fmt++;
 800963e:	4622      	mov	r2, r4
 8009640:	f812 1b01 	ldrb.w	r1, [r2], #1
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8009644:	9302      	str	r3, [sp, #8]
    if (c == 0) {
 8009646:	2900      	cmp	r1, #0
 8009648:	f000 823e 	beq.w	8009ac8 <chprintf+0x498>
 800964c:	4606      	mov	r6, r0
 800964e:	4698      	mov	r8, r3
  int n = 0;
 8009650:	2700      	movs	r7, #0
 8009652:	e00b      	b.n	800966c <chprintf+0x3c>
      streamPut(chp, (uint8_t)c);
 8009654:	6833      	ldr	r3, [r6, #0]
 8009656:	4630      	mov	r0, r6
 8009658:	68db      	ldr	r3, [r3, #12]
      n++;
 800965a:	4614      	mov	r4, r2
 800965c:	3701      	adds	r7, #1
      streamPut(chp, (uint8_t)c);
 800965e:	4798      	blx	r3
    c = *fmt++;
 8009660:	4622      	mov	r2, r4
 8009662:	f812 1b01 	ldrb.w	r1, [r2], #1
    if (c == 0) {
 8009666:	2900      	cmp	r1, #0
 8009668:	f000 80c0 	beq.w	80097ec <chprintf+0x1bc>
    if (c != '%') {
 800966c:	2925      	cmp	r1, #37	; 0x25
 800966e:	d1f1      	bne.n	8009654 <chprintf+0x24>
    if (*fmt == '-') {
 8009670:	7863      	ldrb	r3, [r4, #1]
 8009672:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8009674:	bf08      	it	eq
 8009676:	1ca2      	addeq	r2, r4, #2
    if (*fmt == '+') {
 8009678:	7813      	ldrb	r3, [r2, #0]
      left_align = true;
 800967a:	bf0c      	ite	eq
 800967c:	f04f 0c01 	moveq.w	ip, #1
    left_align = false;
 8009680:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '+') {
 8009684:	2b2b      	cmp	r3, #43	; 0x2b
      do_sign = true;
 8009686:	bf05      	ittet	eq
 8009688:	2501      	moveq	r5, #1
 800968a:	7853      	ldrbeq	r3, [r2, #1]
    do_sign = false;
 800968c:	2500      	movne	r5, #0
      fmt++;
 800968e:	1952      	addeq	r2, r2, r5
    if (*fmt == '0') {
 8009690:	2b30      	cmp	r3, #48	; 0x30
      filler = '0';
 8009692:	bf05      	ittet	eq
 8009694:	469a      	moveq	sl, r3
      fmt++;
 8009696:	7853      	ldrbeq	r3, [r2, #1]
    filler = ' ';
 8009698:	f04f 0a20 	movne.w	sl, #32
      fmt++;
 800969c:	3201      	addeq	r2, #1
    if ( *fmt == '*') {
 800969e:	2b2a      	cmp	r3, #42	; 0x2a
 80096a0:	f040 80ad 	bne.w	80097fe <chprintf+0x1ce>
      width = va_arg(ap, int);
 80096a4:	f858 1b04 	ldr.w	r1, [r8], #4
      c = *fmt++;
 80096a8:	7853      	ldrb	r3, [r2, #1]
 80096aa:	1c94      	adds	r4, r2, #2
    if (c == '.') {
 80096ac:	2b2e      	cmp	r3, #46	; 0x2e
 80096ae:	f000 8131 	beq.w	8009914 <chprintf+0x2e4>
    precision = 0;
 80096b2:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 80096b4:	f003 00df 	and.w	r0, r3, #223	; 0xdf
 80096b8:	284c      	cmp	r0, #76	; 0x4c
 80096ba:	f000 80b3 	beq.w	8009824 <chprintf+0x1f4>
      is_long = (c >= 'A') && (c <= 'Z');
 80096be:	f1a3 0e44 	sub.w	lr, r3, #68	; 0x44
    switch (c) {
 80096c2:	f1be 0f34 	cmp.w	lr, #52	; 0x34
 80096c6:	f200 8199 	bhi.w	80099fc <chprintf+0x3cc>
 80096ca:	e8df f01e 	tbh	[pc, lr, lsl #1]
 80096ce:	0163      	.short	0x0163
 80096d0:	01970197 	.word	0x01970197
 80096d4:	01970197 	.word	0x01970197
 80096d8:	01970163 	.word	0x01970163
 80096dc:	01970197 	.word	0x01970197
 80096e0:	01970197 	.word	0x01970197
 80096e4:	0035019b 	.word	0x0035019b
 80096e8:	01970197 	.word	0x01970197
 80096ec:	01970197 	.word	0x01970197
 80096f0:	01970095 	.word	0x01970095
 80096f4:	00350197 	.word	0x00350197
 80096f8:	01970197 	.word	0x01970197
 80096fc:	01970197 	.word	0x01970197
 8009700:	01970197 	.word	0x01970197
 8009704:	01970197 	.word	0x01970197
 8009708:	01970197 	.word	0x01970197
 800970c:	0163014f 	.word	0x0163014f
 8009710:	01970197 	.word	0x01970197
 8009714:	01970197 	.word	0x01970197
 8009718:	01970163 	.word	0x01970163
 800971c:	01970197 	.word	0x01970197
 8009720:	01970197 	.word	0x01970197
 8009724:	0035019b 	.word	0x0035019b
 8009728:	01970197 	.word	0x01970197
 800972c:	0197012e 	.word	0x0197012e
 8009730:	01970095 	.word	0x01970095
 8009734:	00350197 	.word	0x00350197
      if (c == 0) {
 8009738:	f04f 0e10 	mov.w	lr, #16
        l = va_arg(ap, unsigned int);
 800973c:	f858 0b04 	ldr.w	r0, [r8], #4
  q = p + MAX_FILLER;
 8009740:	f10d 0317 	add.w	r3, sp, #23
 8009744:	e000      	b.n	8009748 <chprintf+0x118>
  } while ((ll /= radix) != 0);
 8009746:	462b      	mov	r3, r5
    i = (int)(l % radix);
 8009748:	4681      	mov	r9, r0
 800974a:	fbb0 f0fe 	udiv	r0, r0, lr
 800974e:	fb0e 9b10 	mls	fp, lr, r0, r9
    i += '0';
 8009752:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    if (i > '9') {
 8009756:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 8009758:	bfc8      	it	gt
 800975a:	f10b 0237 	addgt.w	r2, fp, #55	; 0x37
    *--q = i;
 800975e:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8009760:	45f1      	cmp	r9, lr
    *--q = i;
 8009762:	f103 35ff 	add.w	r5, r3, #4294967295
 8009766:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 800976a:	d2ec      	bcs.n	8009746 <chprintf+0x116>
  i = (int)(p + MAX_FILLER - q);
 800976c:	f10d 0e17 	add.w	lr, sp, #23
 8009770:	469b      	mov	fp, r3
 8009772:	4673      	mov	r3, lr
 8009774:	f10d 090c 	add.w	r9, sp, #12
 8009778:	1b5d      	subs	r5, r3, r5
 800977a:	4648      	mov	r0, r9
 800977c:	465b      	mov	r3, fp
 800977e:	e001      	b.n	8009784 <chprintf+0x154>
 8009780:	f813 2b01 	ldrb.w	r2, [r3], #1
  while (--i);
 8009784:	4573      	cmp	r3, lr
    *p++ = *q++;
 8009786:	f800 2b01 	strb.w	r2, [r0], #1
  while (--i);
 800978a:	d1f9      	bne.n	8009780 <chprintf+0x150>
 800978c:	1b49      	subs	r1, r1, r5
 800978e:	3d01      	subs	r5, #1
    if ((width -= i) < 0) {
 8009790:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8009794:	f1bc 0f00 	cmp.w	ip, #0
 8009798:	d104      	bne.n	80097a4 <chprintf+0x174>
    if (width < 0) {
 800979a:	2900      	cmp	r1, #0
      width = -width;
 800979c:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 80097a0:	f300 8144 	bgt.w	8009a2c <chprintf+0x3fc>
    while (--i >= 0) {
 80097a4:	2d00      	cmp	r5, #0
 80097a6:	db0e      	blt.n	80097c6 <chprintf+0x196>
 80097a8:	1c6b      	adds	r3, r5, #1
 80097aa:	444b      	add	r3, r9
 80097ac:	9401      	str	r4, [sp, #4]
 80097ae:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)*s++);
 80097b0:	6832      	ldr	r2, [r6, #0]
 80097b2:	f819 1b01 	ldrb.w	r1, [r9], #1
 80097b6:	4630      	mov	r0, r6
 80097b8:	68d2      	ldr	r2, [r2, #12]
 80097ba:	4790      	blx	r2
    while (--i >= 0) {
 80097bc:	45a1      	cmp	r9, r4
 80097be:	d1f7      	bne.n	80097b0 <chprintf+0x180>
 80097c0:	3701      	adds	r7, #1
 80097c2:	9c01      	ldr	r4, [sp, #4]
 80097c4:	442f      	add	r7, r5
    while (width) {
 80097c6:	f1bb 0f00 	cmp.w	fp, #0
 80097ca:	f43f af49 	beq.w	8009660 <chprintf+0x30>
 80097ce:	465d      	mov	r5, fp
      streamPut(chp, (uint8_t)filler);
 80097d0:	6833      	ldr	r3, [r6, #0]
 80097d2:	4651      	mov	r1, sl
 80097d4:	4630      	mov	r0, r6
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	4798      	blx	r3
    while (width) {
 80097da:	3d01      	subs	r5, #1
 80097dc:	d1f8      	bne.n	80097d0 <chprintf+0x1a0>
    c = *fmt++;
 80097de:	4622      	mov	r2, r4
 80097e0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80097e4:	445f      	add	r7, fp
    if (c == 0) {
 80097e6:	2900      	cmp	r1, #0
 80097e8:	f47f af40 	bne.w	800966c <chprintf+0x3c>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80097ec:	4638      	mov	r0, r7
 80097ee:	b006      	add	sp, #24
 80097f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	b003      	add	sp, #12
 80097f6:	4770      	bx	lr
      if (c == 0) {
 80097f8:	f04f 0e0a 	mov.w	lr, #10
 80097fc:	e79e      	b.n	800973c <chprintf+0x10c>
        c = *fmt++;
 80097fe:	1c54      	adds	r4, r2, #1
        if (c == 0) {
 8009800:	2b00      	cmp	r3, #0
 8009802:	d0f3      	beq.n	80097ec <chprintf+0x1bc>
      width = 0;
 8009804:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 8009806:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800980a:	b2d2      	uxtb	r2, r2
 800980c:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 800980e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 8009812:	f63f af4b 	bhi.w	80096ac <chprintf+0x7c>
        c = *fmt++;
 8009816:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 800981a:	eb02 0140 	add.w	r1, r2, r0, lsl #1
        if (c == 0) {
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1f1      	bne.n	8009806 <chprintf+0x1d6>
 8009822:	e7e3      	b.n	80097ec <chprintf+0x1bc>
      c = *fmt++;
 8009824:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == 0) {
 8009828:	2b00      	cmp	r3, #0
 800982a:	d0df      	beq.n	80097ec <chprintf+0x1bc>
    switch (c) {
 800982c:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
 8009830:	2834      	cmp	r0, #52	; 0x34
 8009832:	f200 80e3 	bhi.w	80099fc <chprintf+0x3cc>
 8009836:	f20f 0e08 	addw	lr, pc, #8
 800983a:	f85e f020 	ldr.w	pc, [lr, r0, lsl #2]
 800983e:	bf00      	nop
 8009840:	08009995 	.word	0x08009995
 8009844:	080099fd 	.word	0x080099fd
 8009848:	080099fd 	.word	0x080099fd
 800984c:	080099fd 	.word	0x080099fd
 8009850:	080099fd 	.word	0x080099fd
 8009854:	08009995 	.word	0x08009995
 8009858:	080099fd 	.word	0x080099fd
 800985c:	080099fd 	.word	0x080099fd
 8009860:	080099fd 	.word	0x080099fd
 8009864:	080099fd 	.word	0x080099fd
 8009868:	080099fd 	.word	0x080099fd
 800986c:	08009a05 	.word	0x08009a05
 8009870:	08009739 	.word	0x08009739
 8009874:	080099fd 	.word	0x080099fd
 8009878:	080099fd 	.word	0x080099fd
 800987c:	080099fd 	.word	0x080099fd
 8009880:	080099fd 	.word	0x080099fd
 8009884:	080097f9 	.word	0x080097f9
 8009888:	080099fd 	.word	0x080099fd
 800988c:	080099fd 	.word	0x080099fd
 8009890:	08009739 	.word	0x08009739
 8009894:	080099fd 	.word	0x080099fd
 8009898:	080099fd 	.word	0x080099fd
 800989c:	080099fd 	.word	0x080099fd
 80098a0:	080099fd 	.word	0x080099fd
 80098a4:	080099fd 	.word	0x080099fd
 80098a8:	080099fd 	.word	0x080099fd
 80098ac:	080099fd 	.word	0x080099fd
 80098b0:	080099fd 	.word	0x080099fd
 80098b4:	080099fd 	.word	0x080099fd
 80098b8:	080099fd 	.word	0x080099fd
 80098bc:	0800996d 	.word	0x0800996d
 80098c0:	08009995 	.word	0x08009995
 80098c4:	080099fd 	.word	0x080099fd
 80098c8:	080099fd 	.word	0x080099fd
 80098cc:	080099fd 	.word	0x080099fd
 80098d0:	080099fd 	.word	0x080099fd
 80098d4:	08009995 	.word	0x08009995
 80098d8:	080099fd 	.word	0x080099fd
 80098dc:	080099fd 	.word	0x080099fd
 80098e0:	080099fd 	.word	0x080099fd
 80098e4:	080099fd 	.word	0x080099fd
 80098e8:	080099fd 	.word	0x080099fd
 80098ec:	08009a05 	.word	0x08009a05
 80098f0:	08009739 	.word	0x08009739
 80098f4:	080099fd 	.word	0x080099fd
 80098f8:	080099fd 	.word	0x080099fd
 80098fc:	0800992b 	.word	0x0800992b
 8009900:	080099fd 	.word	0x080099fd
 8009904:	080097f9 	.word	0x080097f9
 8009908:	080099fd 	.word	0x080099fd
 800990c:	080099fd 	.word	0x080099fd
 8009910:	08009739 	.word	0x08009739
      c = *fmt++;
 8009914:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8009916:	2b00      	cmp	r3, #0
 8009918:	f43f af68 	beq.w	80097ec <chprintf+0x1bc>
      if (c == '*') {
 800991c:	2b2a      	cmp	r3, #42	; 0x2a
 800991e:	d174      	bne.n	8009a0a <chprintf+0x3da>
        c = *fmt++;
 8009920:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 8009922:	f858 2b04 	ldr.w	r2, [r8], #4
        c = *fmt++;
 8009926:	3402      	adds	r4, #2
 8009928:	e6c4      	b.n	80096b4 <chprintf+0x84>
      if ((s = va_arg(ap, char *)) == 0) {
 800992a:	f858 9b04 	ldr.w	r9, [r8], #4
 800992e:	f1b9 0f00 	cmp.w	r9, #0
 8009932:	f000 80bf 	beq.w	8009ab4 <chprintf+0x484>
 8009936:	f899 3000 	ldrb.w	r3, [r9]
      if (precision == 0) {
 800993a:	2a00      	cmp	r2, #0
 800993c:	f040 80aa 	bne.w	8009a94 <chprintf+0x464>
      for (p = s; *p && (--precision >= 0); p++)
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 80ab 	beq.w	8009a9c <chprintf+0x46c>
 8009946:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800994a:	464d      	mov	r5, r9
 800994c:	e001      	b.n	8009952 <chprintf+0x322>
 800994e:	42d3      	cmn	r3, r2
 8009950:	d405      	bmi.n	800995e <chprintf+0x32e>
 8009952:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8009956:	eba9 0305 	sub.w	r3, r9, r5
 800995a:	2800      	cmp	r0, #0
 800995c:	d1f7      	bne.n	800994e <chprintf+0x31e>
 800995e:	eba5 0509 	sub.w	r5, r5, r9
 8009962:	1b49      	subs	r1, r1, r5
      filler = ' ';
 8009964:	f04f 0a20 	mov.w	sl, #32
 8009968:	3d01      	subs	r5, #1
 800996a:	e711      	b.n	8009790 <chprintf+0x160>
      filler = ' ';
 800996c:	f04f 0a20 	mov.w	sl, #32
      *p++ = va_arg(ap, int);
 8009970:	f858 3b04 	ldr.w	r3, [r8], #4
 8009974:	3901      	subs	r1, #1
 8009976:	f88d 300c 	strb.w	r3, [sp, #12]
    if ((width -= i) < 0) {
 800997a:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 800997e:	f1bc 0f00 	cmp.w	ip, #0
 8009982:	d103      	bne.n	800998c <chprintf+0x35c>
    if (width < 0) {
 8009984:	2900      	cmp	r1, #0
      width = -width;
 8009986:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 800998a:	dc6e      	bgt.n	8009a6a <chprintf+0x43a>
    if (left_align == false) {
 800998c:	2500      	movs	r5, #0
 800998e:	f10d 090c 	add.w	r9, sp, #12
 8009992:	e709      	b.n	80097a8 <chprintf+0x178>
        l = va_arg(ap, int);
 8009994:	f858 eb04 	ldr.w	lr, [r8], #4
      if (l < 0) {
 8009998:	f1be 0f00 	cmp.w	lr, #0
 800999c:	db5b      	blt.n	8009a56 <chprintf+0x426>
        if (do_sign) {
 800999e:	2d00      	cmp	r5, #0
 80099a0:	f000 808e 	beq.w	8009ac0 <chprintf+0x490>
          *p++ = '+';
 80099a4:	232b      	movs	r3, #43	; 0x2b
 80099a6:	f10d 050d 	add.w	r5, sp, #13
 80099aa:	f88d 300c 	strb.w	r3, [sp, #12]
 80099ae:	f10d 090c 	add.w	r9, sp, #12
  q = p + MAX_FILLER;
 80099b2:	f105 030b 	add.w	r3, r5, #11
 80099b6:	461a      	mov	r2, r3
 80099b8:	9301      	str	r3, [sp, #4]
    i = (int)(l % radix);
 80099ba:	4b48      	ldr	r3, [pc, #288]	; (8009adc <chprintf+0x4ac>)
 80099bc:	46f3      	mov	fp, lr
 80099be:	fba3 030e 	umull	r0, r3, r3, lr
 80099c2:	08db      	lsrs	r3, r3, #3
 80099c4:	4618      	mov	r0, r3
 80099c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80099ca:	ebae 0343 	sub.w	r3, lr, r3, lsl #1
    i += '0';
 80099ce:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 80099d0:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 80099d2:	f1bb 0f09 	cmp.w	fp, #9
    l /= radix;
 80099d6:	4686      	mov	lr, r0
    *--q = i;
 80099d8:	f802 3d01 	strb.w	r3, [r2, #-1]!
  } while ((ll /= radix) != 0);
 80099dc:	dced      	bgt.n	80099ba <chprintf+0x38a>
  i = (int)(p + MAX_FILLER - q);
 80099de:	9801      	ldr	r0, [sp, #4]
 80099e0:	1a80      	subs	r0, r0, r2
 80099e2:	4428      	add	r0, r5
 80099e4:	e001      	b.n	80099ea <chprintf+0x3ba>
 80099e6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 80099ea:	f805 3b01 	strb.w	r3, [r5], #1
  while (--i);
 80099ee:	4285      	cmp	r5, r0
 80099f0:	d1f9      	bne.n	80099e6 <chprintf+0x3b6>
 80099f2:	eba5 0509 	sub.w	r5, r5, r9
 80099f6:	1b49      	subs	r1, r1, r5
 80099f8:	3d01      	subs	r5, #1
 80099fa:	e6c9      	b.n	8009790 <chprintf+0x160>
      *p++ = c;
 80099fc:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8009a00:	3901      	subs	r1, #1
 8009a02:	e7ba      	b.n	800997a <chprintf+0x34a>
      if (c == 0) {
 8009a04:	f04f 0e08 	mov.w	lr, #8
 8009a08:	e698      	b.n	800973c <chprintf+0x10c>
    precision = 0;
 8009a0a:	2200      	movs	r2, #0
      c = *fmt++;
 8009a0c:	3401      	adds	r4, #1
        while (c >= '0' && c <= '9') {
 8009a0e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8009a12:	b2c0      	uxtb	r0, r0
 8009a14:	2809      	cmp	r0, #9
          precision = precision * 10 + c;
 8009a16:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 8009a1a:	f63f ae4b 	bhi.w	80096b4 <chprintf+0x84>
          c = *fmt++;
 8009a1e:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 8009a22:	eb00 024e 	add.w	r2, r0, lr, lsl #1
          if (c == 0) {
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1f1      	bne.n	8009a0e <chprintf+0x3de>
 8009a2a:	e6df      	b.n	80097ec <chprintf+0x1bc>
      width = -width;
 8009a2c:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8009a30:	f899 1000 	ldrb.w	r1, [r9]
 8009a34:	292d      	cmp	r1, #45	; 0x2d
 8009a36:	d021      	beq.n	8009a7c <chprintf+0x44c>
        streamPut(chp, (uint8_t)filler);
 8009a38:	6833      	ldr	r3, [r6, #0]
 8009a3a:	4651      	mov	r1, sl
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	4798      	blx	r3
      } while (++width != 0);
 8009a42:	f11b 0b01 	adds.w	fp, fp, #1
 8009a46:	d1f7      	bne.n	8009a38 <chprintf+0x408>
 8009a48:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 8009a4a:	2d00      	cmp	r5, #0
 8009a4c:	eba7 0703 	sub.w	r7, r7, r3
 8009a50:	f6bf aeaa 	bge.w	80097a8 <chprintf+0x178>
 8009a54:	e604      	b.n	8009660 <chprintf+0x30>
        *p++ = '-';
 8009a56:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8009a58:	f1ce 0e00 	rsb	lr, lr, #0
        *p++ = '-';
 8009a5c:	f88d 300c 	strb.w	r3, [sp, #12]
 8009a60:	f10d 050d 	add.w	r5, sp, #13
 8009a64:	f10d 090c 	add.w	r9, sp, #12
 8009a68:	e7a3      	b.n	80099b2 <chprintf+0x382>
      if (*s == '-' && filler == '0') {
 8009a6a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    if (width < 0) {
 8009a6e:	f10d 090c 	add.w	r9, sp, #12
      if (*s == '-' && filler == '0') {
 8009a72:	292d      	cmp	r1, #45	; 0x2d
    if (width < 0) {
 8009a74:	4665      	mov	r5, ip
      width = -width;
 8009a76:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8009a7a:	d1dd      	bne.n	8009a38 <chprintf+0x408>
 8009a7c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8009a80:	d1da      	bne.n	8009a38 <chprintf+0x408>
        streamPut(chp, (uint8_t)*s++);
 8009a82:	6832      	ldr	r2, [r6, #0]
 8009a84:	4630      	mov	r0, r6
 8009a86:	68d2      	ldr	r2, [r2, #12]
 8009a88:	4790      	blx	r2
 8009a8a:	f109 0901 	add.w	r9, r9, #1
        n++;
 8009a8e:	3701      	adds	r7, #1
        i--;
 8009a90:	3d01      	subs	r5, #1
 8009a92:	e7d1      	b.n	8009a38 <chprintf+0x408>
      for (p = s; *p && (--precision >= 0); p++)
 8009a94:	b113      	cbz	r3, 8009a9c <chprintf+0x46c>
 8009a96:	3a01      	subs	r2, #1
 8009a98:	f57f af57 	bpl.w	800994a <chprintf+0x31a>
    if ((width -= i) < 0) {
 8009a9c:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8009aa0:	f1bc 0f00 	cmp.w	ip, #0
 8009aa4:	d103      	bne.n	8009aae <chprintf+0x47e>
    if (width < 0) {
 8009aa6:	2900      	cmp	r1, #0
      width = -width;
 8009aa8:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8009aac:	dc0e      	bgt.n	8009acc <chprintf+0x49c>
    if (left_align == false) {
 8009aae:	f04f 0a20 	mov.w	sl, #32
 8009ab2:	e688      	b.n	80097c6 <chprintf+0x196>
        s = "(null)";
 8009ab4:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8009ae0 <chprintf+0x4b0>
      if (precision == 0) {
 8009ab8:	2a00      	cmp	r2, #0
 8009aba:	f43f af44 	beq.w	8009946 <chprintf+0x316>
 8009abe:	e7ea      	b.n	8009a96 <chprintf+0x466>
    p = tmpbuf;
 8009ac0:	f10d 090c 	add.w	r9, sp, #12
 8009ac4:	464d      	mov	r5, r9
 8009ac6:	e774      	b.n	80099b2 <chprintf+0x382>
  int n = 0;
 8009ac8:	460f      	mov	r7, r1
  return formatted_bytes;
 8009aca:	e68f      	b.n	80097ec <chprintf+0x1bc>
    if (width < 0) {
 8009acc:	f04f 0a20 	mov.w	sl, #32
 8009ad0:	f04f 35ff 	mov.w	r5, #4294967295
      width = -width;
 8009ad4:	f8cd b004 	str.w	fp, [sp, #4]
 8009ad8:	e7aa      	b.n	8009a30 <chprintf+0x400>
 8009ada:	bf00      	nop
 8009adc:	cccccccd 	.word	0xcccccccd
 8009ae0:	0800e0c8 	.word	0x0800e0c8
	...

08009af0 <cmd_systime>:
  if (argc > 0) {
 8009af0:	2900      	cmp	r1, #0
 8009af2:	dc0c      	bgt.n	8009b0e <cmd_systime+0x1e>
 8009af4:	2320      	movs	r3, #32
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009afe:	2300      	movs	r3, #0
 8009b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b02:	f383 8811 	msr	BASEPRI, r3
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 8009b06:	4904      	ldr	r1, [pc, #16]	; (8009b18 <cmd_systime+0x28>)
 8009b08:	b292      	uxth	r2, r2
 8009b0a:	f7ff bd91 	b.w	8009630 <chprintf>
    shellUsage(chp, "systime");
 8009b0e:	4a03      	ldr	r2, [pc, #12]	; (8009b1c <cmd_systime+0x2c>)
 8009b10:	4903      	ldr	r1, [pc, #12]	; (8009b20 <cmd_systime+0x30>)
 8009b12:	f7ff bd8d 	b.w	8009630 <chprintf>
 8009b16:	bf00      	nop
 8009b18:	0800e0e4 	.word	0x0800e0e4
 8009b1c:	0800e0d0 	.word	0x0800e0d0
 8009b20:	0800e0d8 	.word	0x0800e0d8
	...

08009b30 <cmd_echo>:
  if (argc != 1) {
 8009b30:	2901      	cmp	r1, #1
 8009b32:	d003      	beq.n	8009b3c <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 8009b34:	4a03      	ldr	r2, [pc, #12]	; (8009b44 <cmd_echo+0x14>)
 8009b36:	4904      	ldr	r1, [pc, #16]	; (8009b48 <cmd_echo+0x18>)
 8009b38:	f7ff bd7a 	b.w	8009630 <chprintf>
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 8009b3c:	6812      	ldr	r2, [r2, #0]
 8009b3e:	4903      	ldr	r1, [pc, #12]	; (8009b4c <cmd_echo+0x1c>)
 8009b40:	f7ff bd76 	b.w	8009630 <chprintf>
 8009b44:	0800e0ec 	.word	0x0800e0ec
 8009b48:	0800e0d8 	.word	0x0800e0d8
 8009b4c:	0800e0fc 	.word	0x0800e0fc

08009b50 <cmd_info>:
  if (argc > 0) {
 8009b50:	2900      	cmp	r1, #0
 8009b52:	dc2e      	bgt.n	8009bb2 <cmd_info+0x62>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009b54:	b510      	push	{r4, lr}
 8009b56:	4604      	mov	r4, r0
 8009b58:	b082      	sub	sp, #8
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 8009b5a:	4a18      	ldr	r2, [pc, #96]	; (8009bbc <cmd_info+0x6c>)
 8009b5c:	4918      	ldr	r1, [pc, #96]	; (8009bc0 <cmd_info+0x70>)
 8009b5e:	f7ff fd67 	bl	8009630 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 8009b62:	4620      	mov	r0, r4
 8009b64:	4a17      	ldr	r2, [pc, #92]	; (8009bc4 <cmd_info+0x74>)
 8009b66:	4918      	ldr	r1, [pc, #96]	; (8009bc8 <cmd_info+0x78>)
 8009b68:	f7ff fd62 	bl	8009630 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	4a17      	ldr	r2, [pc, #92]	; (8009bcc <cmd_info+0x7c>)
 8009b70:	4917      	ldr	r1, [pc, #92]	; (8009bd0 <cmd_info+0x80>)
 8009b72:	f7ff fd5d 	bl	8009630 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 8009b76:	4620      	mov	r0, r4
 8009b78:	4a16      	ldr	r2, [pc, #88]	; (8009bd4 <cmd_info+0x84>)
 8009b7a:	4917      	ldr	r1, [pc, #92]	; (8009bd8 <cmd_info+0x88>)
 8009b7c:	f7ff fd58 	bl	8009630 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 8009b80:	4620      	mov	r0, r4
 8009b82:	4a16      	ldr	r2, [pc, #88]	; (8009bdc <cmd_info+0x8c>)
 8009b84:	4916      	ldr	r1, [pc, #88]	; (8009be0 <cmd_info+0x90>)
 8009b86:	f7ff fd53 	bl	8009630 <chprintf>
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	4a15      	ldr	r2, [pc, #84]	; (8009be4 <cmd_info+0x94>)
 8009b8e:	4916      	ldr	r1, [pc, #88]	; (8009be8 <cmd_info+0x98>)
 8009b90:	f7ff fd4e 	bl	8009630 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 8009b94:	4620      	mov	r0, r4
 8009b96:	4a15      	ldr	r2, [pc, #84]	; (8009bec <cmd_info+0x9c>)
 8009b98:	4915      	ldr	r1, [pc, #84]	; (8009bf0 <cmd_info+0xa0>)
 8009b9a:	f7ff fd49 	bl	8009630 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 8009b9e:	4b15      	ldr	r3, [pc, #84]	; (8009bf4 <cmd_info+0xa4>)
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	4a14      	ldr	r2, [pc, #80]	; (8009bf8 <cmd_info+0xa8>)
 8009ba6:	4b15      	ldr	r3, [pc, #84]	; (8009bfc <cmd_info+0xac>)
 8009ba8:	4915      	ldr	r1, [pc, #84]	; (8009c00 <cmd_info+0xb0>)
 8009baa:	f7ff fd41 	bl	8009630 <chprintf>
}
 8009bae:	b002      	add	sp, #8
 8009bb0:	bd10      	pop	{r4, pc}
    shellUsage(chp, "info");
 8009bb2:	4a14      	ldr	r2, [pc, #80]	; (8009c04 <cmd_info+0xb4>)
 8009bb4:	4914      	ldr	r1, [pc, #80]	; (8009c08 <cmd_info+0xb8>)
 8009bb6:	f7ff bd3b 	b.w	8009630 <chprintf>
 8009bba:	bf00      	nop
 8009bbc:	0800d090 	.word	0x0800d090
 8009bc0:	0800e10c 	.word	0x0800e10c
 8009bc4:	0800d130 	.word	0x0800d130
 8009bc8:	0800e120 	.word	0x0800e120
 8009bcc:	0800d0c4 	.word	0x0800d0c4
 8009bd0:	0800e134 	.word	0x0800e134
 8009bd4:	0800d0f8 	.word	0x0800d0f8
 8009bd8:	0800e148 	.word	0x0800e148
 8009bdc:	0800d19c 	.word	0x0800d19c
 8009be0:	0800e15c 	.word	0x0800e15c
 8009be4:	0800dac0 	.word	0x0800dac0
 8009be8:	0800e170 	.word	0x0800e170
 8009bec:	0800daec 	.word	0x0800daec
 8009bf0:	0800e184 	.word	0x0800e184
 8009bf4:	0800e1c0 	.word	0x0800e1c0
 8009bf8:	0800e19c 	.word	0x0800e19c
 8009bfc:	0800e198 	.word	0x0800e198
 8009c00:	0800e1a8 	.word	0x0800e1a8
 8009c04:	0800e104 	.word	0x0800e104
 8009c08:	0800e0d8 	.word	0x0800e0d8
 8009c0c:	00000000 	.word	0x00000000

08009c10 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8009c10:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8009c14:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8009c16:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f383 8811 	msr	BASEPRI, r3
}
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
	...

08009c30 <dyn_find_object.lto_priv.0>:
static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 8009c30:	b570      	push	{r4, r5, r6, lr}
  dyn_element_t *p = dlp->next;
 8009c32:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8009c34:	42a1      	cmp	r1, r4
 8009c36:	d012      	beq.n	8009c5e <dyn_find_object.lto_priv.0+0x2e>
 8009c38:	460d      	mov	r5, r1
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	e002      	b.n	8009c44 <dyn_find_object.lto_priv.0+0x14>
    p = p->next;
 8009c3e:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009c40:	42a5      	cmp	r5, r4
 8009c42:	d00c      	beq.n	8009c5e <dyn_find_object.lto_priv.0+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009c44:	2208      	movs	r2, #8
 8009c46:	4631      	mov	r1, r6
 8009c48:	18a0      	adds	r0, r4, r2
 8009c4a:	f002 fc05 	bl	800c458 <strncmp>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d1f5      	bne.n	8009c3e <dyn_find_object.lto_priv.0+0xe>
  if (dep != NULL) {
 8009c52:	b114      	cbz	r4, 8009c5a <dyn_find_object.lto_priv.0+0x2a>
    dep->refs++;
 8009c54:	6863      	ldr	r3, [r4, #4]
 8009c56:	3301      	adds	r3, #1
 8009c58:	6063      	str	r3, [r4, #4]
}
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8009c5e:	2400      	movs	r4, #0
}
 8009c60:	4620      	mov	r0, r4
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c70 <dyn_create_object_heap.lto_priv.0>:
                                             size_t size) {
 8009c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8009c72:	680c      	ldr	r4, [r1, #0]
                                             size_t size) {
 8009c74:	460d      	mov	r5, r1
  while (p != (dyn_element_t *)dlp) {
 8009c76:	42a1      	cmp	r1, r4
                                             size_t size) {
 8009c78:	4606      	mov	r6, r0
 8009c7a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8009c7c:	d103      	bne.n	8009c86 <dyn_create_object_heap.lto_priv.0+0x16>
 8009c7e:	e00d      	b.n	8009c9c <dyn_create_object_heap.lto_priv.0+0x2c>
    p = p->next;
 8009c80:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009c82:	42a5      	cmp	r5, r4
 8009c84:	d00a      	beq.n	8009c9c <dyn_create_object_heap.lto_priv.0+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009c86:	2208      	movs	r2, #8
 8009c88:	4631      	mov	r1, r6
 8009c8a:	18a0      	adds	r0, r4, r2
 8009c8c:	f002 fbe4 	bl	800c458 <strncmp>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d1f5      	bne.n	8009c80 <dyn_create_object_heap.lto_priv.0+0x10>
  if (dep != NULL) {
 8009c94:	b114      	cbz	r4, 8009c9c <dyn_create_object_heap.lto_priv.0+0x2c>
    return NULL;
 8009c96:	4604      	mov	r4, r0
}
 8009c98:	4620      	mov	r0, r4
 8009c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	f7fd fcc6 	bl	8007630 <chHeapAllocAligned.constprop.0>
  if (dep == NULL) {
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d0f6      	beq.n	8009c98 <dyn_create_object_heap.lto_priv.0+0x28>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8009caa:	2208      	movs	r2, #8
 8009cac:	4631      	mov	r1, r6
 8009cae:	4410      	add	r0, r2
 8009cb0:	f002 fc10 	bl	800c4d4 <strncpy>
  dep->refs = (ucnt_t)1;
 8009cb4:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8009cb6:	682b      	ldr	r3, [r5, #0]
}
 8009cb8:	4620      	mov	r0, r4
  dep->next = dlp->next;
 8009cba:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = dep;
 8009cbe:	602c      	str	r4, [r5, #0]
}
 8009cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc2:	bf00      	nop
	...

08009cd0 <chPoolAlloc>:
void *chPoolAlloc(memory_pool_t *mp) {
 8009cd0:	b508      	push	{r3, lr}
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 8009cda:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 8009cdc:	b128      	cbz	r0, 8009cea <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
 8009cde:	6802      	ldr	r2, [r0, #0]
 8009ce0:	601a      	str	r2, [r3, #0]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f383 8811 	msr	BASEPRI, r3
}
 8009ce8:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
 8009cea:	68da      	ldr	r2, [r3, #12]
 8009cec:	2a00      	cmp	r2, #0
 8009cee:	d0f8      	beq.n	8009ce2 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, mp->align);
 8009cf0:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8009cf4:	4790      	blx	r2
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f383 8811 	msr	BASEPRI, r3
}
 8009cfc:	bd08      	pop	{r3, pc}
 8009cfe:	bf00      	nop

08009d00 <dyn_create_object_pool.lto_priv.0>:
                                             memory_pool_t *mp) {
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8009d02:	680c      	ldr	r4, [r1, #0]
                                             memory_pool_t *mp) {
 8009d04:	460d      	mov	r5, r1
  while (p != (dyn_element_t *)dlp) {
 8009d06:	42a1      	cmp	r1, r4
                                             memory_pool_t *mp) {
 8009d08:	4606      	mov	r6, r0
 8009d0a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8009d0c:	d103      	bne.n	8009d16 <dyn_create_object_pool.lto_priv.0+0x16>
 8009d0e:	e00d      	b.n	8009d2c <dyn_create_object_pool.lto_priv.0+0x2c>
    p = p->next;
 8009d10:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009d12:	42a5      	cmp	r5, r4
 8009d14:	d00a      	beq.n	8009d2c <dyn_create_object_pool.lto_priv.0+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009d16:	2208      	movs	r2, #8
 8009d18:	4631      	mov	r1, r6
 8009d1a:	18a0      	adds	r0, r4, r2
 8009d1c:	f002 fb9c 	bl	800c458 <strncmp>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	d1f5      	bne.n	8009d10 <dyn_create_object_pool.lto_priv.0+0x10>
  if (dep != NULL) {
 8009d24:	b114      	cbz	r4, 8009d2c <dyn_create_object_pool.lto_priv.0+0x2c>
    return NULL;
 8009d26:	4604      	mov	r4, r0
}
 8009d28:	4620      	mov	r0, r4
 8009d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dep = (dyn_element_t *)chPoolAlloc(mp);
 8009d2c:	4638      	mov	r0, r7
 8009d2e:	f7ff ffcf 	bl	8009cd0 <chPoolAlloc>
  if (dep == NULL) {
 8009d32:	4604      	mov	r4, r0
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d0f7      	beq.n	8009d28 <dyn_create_object_pool.lto_priv.0+0x28>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8009d38:	2208      	movs	r2, #8
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4410      	add	r0, r2
 8009d3e:	f002 fbc9 	bl	800c4d4 <strncpy>
  dep->refs = (ucnt_t)1;
 8009d42:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8009d44:	682b      	ldr	r3, [r5, #0]
}
 8009d46:	4620      	mov	r0, r4
  dep->next = dlp->next;
 8009d48:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = (dyn_element_t *)dep;
 8009d4c:	602c      	str	r4, [r5, #0]
}
 8009d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d50 <chEvtDispatch>:
  while (events != (eventmask_t)0) {
 8009d50:	b1b1      	cbz	r1, 8009d80 <chEvtDispatch+0x30>
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 8009d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d54:	4607      	mov	r7, r0
 8009d56:	460d      	mov	r5, r1
  eid = (eventid_t)0;
 8009d58:	2400      	movs	r4, #0
      events &= ~EVENT_MASK(eid);
 8009d5a:	2601      	movs	r6, #1
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8009d5c:	fa25 f304 	lsr.w	r3, r5, r4
 8009d60:	07db      	lsls	r3, r3, #31
      events &= ~EVENT_MASK(eid);
 8009d62:	fa06 f204 	lsl.w	r2, r6, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8009d66:	d509      	bpl.n	8009d7c <chEvtDispatch+0x2c>
      handlers[eid](eid);
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 8009d6e:	ea25 0502 	bic.w	r5, r5, r2
    eid++;
 8009d72:	3401      	adds	r4, #1
      handlers[eid](eid);
 8009d74:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 8009d76:	2d00      	cmp	r5, #0
 8009d78:	d1f0      	bne.n	8009d5c <chEvtDispatch+0xc>
}
 8009d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eid++;
 8009d7c:	3401      	adds	r4, #1
  while (events != (eventmask_t)0) {
 8009d7e:	e7ed      	b.n	8009d5c <chEvtDispatch+0xc>
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
	...

08009d90 <chEvtAddEvents>:
 8009d90:	2320      	movs	r3, #32
 8009d92:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8009d96:	4b04      	ldr	r3, [pc, #16]	; (8009da8 <chEvtAddEvents+0x18>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009d9e:	4308      	orrs	r0, r1
 8009da0:	6358      	str	r0, [r3, #52]	; 0x34
 8009da2:	f382 8811 	msr	BASEPRI, r2
}
 8009da6:	4770      	bx	lr
 8009da8:	20000c88 	.word	0x20000c88
 8009dac:	00000000 	.word	0x00000000

08009db0 <chEvtUnregister>:
 8009db0:	2320      	movs	r3, #32
 8009db2:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8009db6:	4603      	mov	r3, r0
 8009db8:	e001      	b.n	8009dbe <chEvtUnregister+0xe>
    if (p->next == elp) {
 8009dba:	428b      	cmp	r3, r1
 8009dbc:	d007      	beq.n	8009dce <chEvtUnregister+0x1e>
  while (p->next != (event_listener_t *)esp) {
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4283      	cmp	r3, r0
 8009dc4:	d1f9      	bne.n	8009dba <chEvtUnregister+0xa>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	f383 8811 	msr	BASEPRI, r3
}
 8009dcc:	4770      	bx	lr
      p->next = elp->next;
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6013      	str	r3, [r2, #0]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	f383 8811 	msr	BASEPRI, r3
}
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	0000      	movs	r0, r0
	...

08009de0 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8009de0:	4a0e      	ldr	r2, [pc, #56]	; (8009e1c <chTMStopMeasurementX+0x3c>)
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8009de2:	4b0f      	ldr	r3, [pc, #60]	; (8009e20 <chTMStopMeasurementX+0x40>)
 8009de4:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8009de6:	685b      	ldr	r3, [r3, #4]
  tmp->last = (now - tmp->last) - offset;
 8009de8:	6882      	ldr	r2, [r0, #8]
 8009dea:	1a5b      	subs	r3, r3, r1
 8009dec:	1a9b      	subs	r3, r3, r2
  tmp->n++;
 8009dee:	68c2      	ldr	r2, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8009df0:	b430      	push	{r4, r5}
  tmp->cumulative += (rttime_t)tmp->last;
 8009df2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
 8009df6:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 8009df8:	3201      	adds	r2, #1
  tmp->cumulative += (rttime_t)tmp->last;
 8009dfa:	18e4      	adds	r4, r4, r3
  tmp->last = (now - tmp->last) - offset;
 8009dfc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if (tmp->last < tmp->best) {
 8009e00:	6802      	ldr	r2, [r0, #0]
  tmp->cumulative += (rttime_t)tmp->last;
 8009e02:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8009e06:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8009e08:	bf88      	it	hi
 8009e0a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8009e0c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8009e0e:	e9c0 4504 	strd	r4, r5, [r0, #16]
}
 8009e12:	bc30      	pop	{r4, r5}
    tmp->best = tmp->last;
 8009e14:	bf38      	it	cc
 8009e16:	6003      	strcc	r3, [r0, #0]
}
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	20000c88 	.word	0x20000c88
 8009e20:	e0001000 	.word	0xe0001000
	...

08009e30 <chTMStartMeasurementX>:
 8009e30:	4b01      	ldr	r3, [pc, #4]	; (8009e38 <chTMStartMeasurementX+0x8>)
 8009e32:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8009e34:	6083      	str	r3, [r0, #8]
}
 8009e36:	4770      	bx	lr
 8009e38:	e0001000 	.word	0xe0001000
 8009e3c:	00000000 	.word	0x00000000

08009e40 <chThdYield>:
 8009e40:	2320      	movs	r3, #32
void chThdYield(void) {
 8009e42:	b570      	push	{r4, r5, r6, lr}
 8009e44:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8009e48:	4a12      	ldr	r2, [pc, #72]	; (8009e94 <chThdYield+0x54>)
 8009e4a:	6810      	ldr	r0, [r2, #0]
 8009e4c:	6991      	ldr	r1, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8009e4e:	6883      	ldr	r3, [r0, #8]
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8009e50:	688c      	ldr	r4, [r1, #8]
  if (chSchCanYieldS()) {
 8009e52:	42a3      	cmp	r3, r4
 8009e54:	d203      	bcs.n	8009e5e <chThdYield+0x1e>
 8009e56:	2300      	movs	r3, #0
 8009e58:	f383 8811 	msr	BASEPRI, r3
}
 8009e5c:	bd70      	pop	{r4, r5, r6, pc}
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8009e5e:	2601      	movs	r6, #1
  tp->state = CH_STATE_READY;
 8009e60:	2500      	movs	r5, #0
  tqp->next             = tp->queue.next;
 8009e62:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009e64:	605a      	str	r2, [r3, #4]
  tqp->next             = tp->queue.next;
 8009e66:	6013      	str	r3, [r2, #0]
  currp->state = CH_STATE_CURRENT;
 8009e68:	f880 6020 	strb.w	r6, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8009e6c:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8009e6e:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8009e72:	e000      	b.n	8009e76 <chThdYield+0x36>
 8009e74:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8009e76:	689a      	ldr	r2, [r3, #8]
 8009e78:	4294      	cmp	r4, r2
 8009e7a:	d9fb      	bls.n	8009e74 <chThdYield+0x34>
  tp->queue.prev             = cp->queue.prev;
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8009e82:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8009e84:	6059      	str	r1, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8009e86:	f7f6 f9db 	bl	8000240 <_port_switch>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	bd70      	pop	{r4, r5, r6, pc}
 8009e92:	bf00      	nop
 8009e94:	20000c88 	.word	0x20000c88
	...

08009ea0 <chThdCreateSuspendedI>:
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8009ea0:	b4f0      	push	{r4, r5, r6, r7}
  tp->flags     = CH_FLAG_MODE_STATIC;
 8009ea2:	2100      	movs	r1, #0
  tp->state     = CH_STATE_WTSTART;
 8009ea4:	2702      	movs	r7, #2
  tp->refs      = (trefs_t)1;
 8009ea6:	2501      	movs	r5, #1
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8009ea8:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 8009eaa:	6846      	ldr	r6, [r0, #4]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8009eac:	6904      	ldr	r4, [r0, #16]
  REG_INSERT(tp);
 8009eae:	4a19      	ldr	r2, [pc, #100]	; (8009f14 <chThdCreateSuspendedI+0x74>)
  tp->wabase = tdp->wbase;
 8009eb0:	f843 6c2c 	str.w	r6, [r3, #-44]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8009eb4:	f843 4c6c 	str.w	r4, [r3, #-108]
  return _thread_init(tp, tdp->name, tdp->prio);
 8009eb8:	6806      	ldr	r6, [r0, #0]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8009eba:	6944      	ldr	r4, [r0, #20]
  return _thread_init(tp, tdp->name, tdp->prio);
 8009ebc:	68c0      	ldr	r0, [r0, #12]
  tp->refs      = (trefs_t)1;
 8009ebe:	f803 5c26 	strb.w	r5, [r3, #-38]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8009ec2:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8009ec6:	f803 7c28 	strb.w	r7, [r3, #-40]
  REG_INSERT(tp);
 8009eca:	f843 2c38 	str.w	r2, [r3, #-56]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8009ece:	4d12      	ldr	r5, [pc, #72]	; (8009f18 <chThdCreateSuspendedI+0x78>)
 8009ed0:	f843 4c68 	str.w	r4, [r3, #-104]
  tp->prio      = prio;
 8009ed4:	f843 0c40 	str.w	r0, [r3, #-64]
  REG_INSERT(tp);
 8009ed8:	6954      	ldr	r4, [r2, #20]
  tp->realprio  = prio;
 8009eda:	f843 0c0c 	str.w	r0, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8009ede:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
  tp->epending  = (eventmask_t)0;
 8009ee2:	e943 1105 	strd	r1, r1, [r3, #-20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8009ee6:	f843 0c3c 	str.w	r0, [r3, #-60]
 8009eea:	f843 5c4c 	str.w	r5, [r3, #-76]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8009eee:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  list_init(&tp->waiting);
 8009ef2:	f1a3 0520 	sub.w	r5, r3, #32
  queue_init(&tp->msgqueue);
 8009ef6:	f1a3 011c 	sub.w	r1, r3, #28
  tp->name      = name;
 8009efa:	f843 6c30 	str.w	r6, [r3, #-48]
  REG_INSERT(tp);
 8009efe:	f843 4c34 	str.w	r4, [r3, #-52]
 8009f02:	6120      	str	r0, [r4, #16]
 8009f04:	6150      	str	r0, [r2, #20]
  tqp->next = (thread_t *)tqp;
 8009f06:	e943 5108 	strd	r5, r1, [r3, #-32]
}
 8009f0a:	bcf0      	pop	{r4, r5, r6, r7}
  tqp->prev = (thread_t *)tqp;
 8009f0c:	f843 1c18 	str.w	r1, [r3, #-24]
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	20000c88 	.word	0x20000c88
 8009f18:	08000251 	.word	0x08000251
 8009f1c:	00000000 	.word	0x00000000

08009f20 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8009f20:	b430      	push	{r4, r5}
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8009f22:	2401      	movs	r4, #1
  tp->state = CH_STATE_READY;
 8009f24:	2500      	movs	r5, #0
  thread_t *otp = currp;
 8009f26:	4a0c      	ldr	r2, [pc, #48]	; (8009f58 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 8009f28:	6810      	ldr	r0, [r2, #0]
 8009f2a:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 8009f2c:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009f2e:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8009f30:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8009f34:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 8009f36:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8009f38:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8009f3a:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8009f3e:	e000      	b.n	8009f42 <chSchDoReschedule+0x22>
 8009f40:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	4294      	cmp	r4, r2
 8009f46:	d3fb      	bcc.n	8009f40 <chSchDoReschedule+0x20>
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 8009f48:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8009f50:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8009f52:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 8009f54:	f7f6 b974 	b.w	8000240 <_port_switch>
 8009f58:	20000c88 	.word	0x20000c88
 8009f5c:	00000000 	.word	0x00000000

08009f60 <chSchRescheduleS>:
  return firstprio(&ch.rlist.queue) > currp->prio;
 8009f60:	4b04      	ldr	r3, [pc, #16]	; (8009f74 <chSchRescheduleS+0x14>)
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 8009f66:	6892      	ldr	r2, [r2, #8]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d800      	bhi.n	8009f70 <chSchRescheduleS+0x10>
}
 8009f6e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8009f70:	f7ff bfd6 	b.w	8009f20 <chSchDoReschedule>
 8009f74:	20000c88 	.word	0x20000c88
	...

08009f80 <chThdSetPriority>:
 8009f80:	2220      	movs	r2, #32
tprio_t chThdSetPriority(tprio_t newprio) {
 8009f82:	b510      	push	{r4, lr}
 8009f84:	f382 8811 	msr	BASEPRI, r2
  oldprio = currp->realprio;
 8009f88:	4a08      	ldr	r2, [pc, #32]	; (8009fac <chThdSetPriority+0x2c>)
 8009f8a:	6992      	ldr	r2, [r2, #24]
 8009f8c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8009f8e:	6891      	ldr	r1, [r2, #8]
 8009f90:	42a1      	cmp	r1, r4
 8009f92:	d001      	beq.n	8009f98 <chThdSetPriority+0x18>
 8009f94:	4281      	cmp	r1, r0
 8009f96:	d200      	bcs.n	8009f9a <chThdSetPriority+0x1a>
    currp->prio = newprio;
 8009f98:	6090      	str	r0, [r2, #8]
  currp->realprio = newprio;
 8009f9a:	63d0      	str	r0, [r2, #60]	; 0x3c
  chSchRescheduleS();
 8009f9c:	f7ff ffe0 	bl	8009f60 <chSchRescheduleS>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f383 8811 	msr	BASEPRI, r3
}
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	bd10      	pop	{r4, pc}
 8009faa:	bf00      	nop
 8009fac:	20000c88 	.word	0x20000c88

08009fb0 <chSchWakeupS>:
  thread_t *otp = currp;
 8009fb0:	4b15      	ldr	r3, [pc, #84]	; (800a008 <chSchWakeupS+0x58>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8009fb2:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8009fb4:	699e      	ldr	r6, [r3, #24]
  if (ntp->prio <= otp->prio) {
 8009fb6:	6884      	ldr	r4, [r0, #8]
 8009fb8:	68b5      	ldr	r5, [r6, #8]
  ntp->u.rdymsg = msg;
 8009fba:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8009fbc:	42ac      	cmp	r4, r5
 8009fbe:	d80d      	bhi.n	8009fdc <chSchWakeupS+0x2c>
  tp->state = CH_STATE_READY;
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8009fc6:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8009fc8:	689a      	ldr	r2, [r3, #8]
 8009fca:	4294      	cmp	r4, r2
 8009fcc:	d9fb      	bls.n	8009fc6 <chSchWakeupS+0x16>
}
 8009fce:	bc70      	pop	{r4, r5, r6}
  tp->queue.prev             = cp->queue.prev;
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8009fd6:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8009fd8:	6058      	str	r0, [r3, #4]
}
 8009fda:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 8009fdc:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
 8009fde:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
 8009fe0:	f886 1020 	strb.w	r1, [r6, #32]
    cp = cp->queue.next;
 8009fe4:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 8009fe6:	6894      	ldr	r4, [r2, #8]
 8009fe8:	42a5      	cmp	r5, r4
 8009fea:	d3fb      	bcc.n	8009fe4 <chSchWakeupS+0x34>
    ntp->state = CH_STATE_CURRENT;
 8009fec:	2401      	movs	r4, #1
  tp->queue.prev             = cp->queue.prev;
 8009fee:	6851      	ldr	r1, [r2, #4]
 8009ff0:	e9c6 2100 	strd	r2, r1, [r6]
  tp->queue.prev->queue.next = tp;
 8009ff4:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 8009ff6:	6056      	str	r6, [r2, #4]
    chSysSwitch(ntp, otp);
 8009ff8:	4631      	mov	r1, r6
    ntp->state = CH_STATE_CURRENT;
 8009ffa:	f880 4020 	strb.w	r4, [r0, #32]
}
 8009ffe:	bc70      	pop	{r4, r5, r6}
    currp = ntp;
 800a000:	6198      	str	r0, [r3, #24]
    chSysSwitch(ntp, otp);
 800a002:	f7f6 b91d 	b.w	8000240 <_port_switch>
 800a006:	bf00      	nop
 800a008:	20000c88 	.word	0x20000c88
 800a00c:	00000000 	.word	0x00000000

0800a010 <chThdCreateFromHeap>:
                              tfunc_t pf, void *arg) {
 800a010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a012:	b087      	sub	sp, #28
 800a014:	4617      	mov	r7, r2
 800a016:	461e      	mov	r6, r3
 800a018:	460d      	mov	r5, r1
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800a01a:	f7fd fb09 	bl	8007630 <chHeapAllocAligned.constprop.0>
  if (wsp == NULL) {
 800a01e:	4604      	mov	r4, r0
 800a020:	b1c0      	cbz	r0, 800a054 <chThdCreateFromHeap+0x44>
  thread_descriptor_t td = {
 800a022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    (stkalign_t *)((uint8_t *)wsp + size),
 800a024:	4405      	add	r5, r0
  thread_descriptor_t td = {
 800a026:	9304      	str	r3, [sp, #16]
 800a028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a02a:	9502      	str	r5, [sp, #8]
 800a02c:	9305      	str	r3, [sp, #20]
 800a02e:	e9cd 7000 	strd	r7, r0, [sp]
 800a032:	9603      	str	r6, [sp, #12]
 800a034:	2320      	movs	r3, #32
 800a036:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 800a03a:	4668      	mov	r0, sp
 800a03c:	f7ff ff30 	bl	8009ea0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 800a040:	2301      	movs	r3, #1
  chSchWakeupS(tp, MSG_OK);
 800a042:	2100      	movs	r1, #0
  tp->flags = CH_FLAG_MODE_HEAP;
 800a044:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp = chThdCreateSuspendedI(&td);
 800a048:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800a04a:	f7ff ffb1 	bl	8009fb0 <chSchWakeupS>
 800a04e:	2300      	movs	r3, #0
 800a050:	f383 8811 	msr	BASEPRI, r3
}
 800a054:	4620      	mov	r0, r4
 800a056:	b007      	add	sp, #28
 800a058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a05a:	bf00      	nop
 800a05c:	0000      	movs	r0, r0
	...

0800a060 <chSemSignal>:
 800a060:	2220      	movs	r2, #32
void chSemSignal(semaphore_t *sp) {
 800a062:	b508      	push	{r3, lr}
 800a064:	f382 8811 	msr	BASEPRI, r2
  if (++sp->cnt <= (cnt_t)0) {
 800a068:	6882      	ldr	r2, [r0, #8]
 800a06a:	3201      	adds	r2, #1
 800a06c:	2a00      	cmp	r2, #0
 800a06e:	6082      	str	r2, [r0, #8]
 800a070:	dd03      	ble.n	800a07a <chSemSignal+0x1a>
 800a072:	2300      	movs	r3, #0
 800a074:	f383 8811 	msr	BASEPRI, r3
}
 800a078:	bd08      	pop	{r3, pc}
 800a07a:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 800a07c:	6800      	ldr	r0, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 800a07e:	2100      	movs	r1, #0
  tqp->next             = tp->queue.next;
 800a080:	6802      	ldr	r2, [r0, #0]
 800a082:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800a084:	6053      	str	r3, [r2, #4]
 800a086:	f7ff ff93 	bl	8009fb0 <chSchWakeupS>
 800a08a:	2300      	movs	r3, #0
 800a08c:	f383 8811 	msr	BASEPRI, r3
}
 800a090:	bd08      	pop	{r3, pc}
 800a092:	bf00      	nop
	...

0800a0a0 <chThdCreate>:
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	2320      	movs	r3, #32
 800a0a4:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(tdp);
 800a0a8:	f7ff fefa 	bl	8009ea0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800a0ac:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(tdp);
 800a0ae:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800a0b0:	f7ff ff7e 	bl	8009fb0 <chSchWakeupS>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f383 8811 	msr	BASEPRI, r3
}
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	bd10      	pop	{r4, pc}
 800a0be:	bf00      	nop

0800a0c0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 800a0c0:	b430      	push	{r4, r5}
  currp->state = CH_STATE_CURRENT;
 800a0c2:	2501      	movs	r5, #1
  thread_t *otp = currp;
 800a0c4:	4b07      	ldr	r3, [pc, #28]	; (800a0e4 <chSchGoSleepS+0x24>)
 800a0c6:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 800a0c8:	681a      	ldr	r2, [r3, #0]
  otp->state = newstate;
 800a0ca:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800a0ce:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
 800a0d0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 800a0d2:	6063      	str	r3, [r4, #4]
  currp->state = CH_STATE_CURRENT;
 800a0d4:	f882 5020 	strb.w	r5, [r2, #32]
  tqp->next             = tp->queue.next;
 800a0d8:	601c      	str	r4, [r3, #0]
}
 800a0da:	bc30      	pop	{r4, r5}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800a0dc:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800a0de:	f7f6 b8af 	b.w	8000240 <_port_switch>
 800a0e2:	bf00      	nop
 800a0e4:	20000c88 	.word	0x20000c88
	...

0800a0f0 <chMsgWaitS>:
 *
 * @return              A pointer to the thread carrying the message.
 *
 * @sclass
 */
thread_t *chMsgWaitS(void) {
 800a0f0:	b510      	push	{r4, lr}
  thread_t *tp;

  chDbgCheckClassS();

  if (!chMsgIsPendingI(currp)) {
 800a0f2:	4c0b      	ldr	r4, [pc, #44]	; (800a120 <chMsgWaitS+0x30>)
 800a0f4:	69a2      	ldr	r2, [r4, #24]
  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 800a0fc:	4298      	cmp	r0, r3
 800a0fe:	d006      	beq.n	800a10e <chMsgWaitS+0x1e>
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 800a100:	240d      	movs	r4, #13
 800a102:	6801      	ldr	r1, [r0, #0]
 800a104:	62d1      	str	r1, [r2, #44]	; 0x2c
  tqp->next->queue.prev = (thread_t *)tqp;
 800a106:	604b      	str	r3, [r1, #4]
 800a108:	f880 4020 	strb.w	r4, [r0, #32]

  return tp;
}
 800a10c:	bd10      	pop	{r4, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 800a10e:	200e      	movs	r0, #14
 800a110:	f7ff ffd6 	bl	800a0c0 <chSchGoSleepS>
 800a114:	69a2      	ldr	r2, [r4, #24]
 800a116:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800a118:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 800a11c:	e7f0      	b.n	800a100 <chMsgWaitS+0x10>
 800a11e:	bf00      	nop
 800a120:	20000c88 	.word	0x20000c88
	...

0800a130 <chSemWaitS.part.0>:
msg_t chSemWaitS(semaphore_t *sp) {
 800a130:	4603      	mov	r3, r0
 800a132:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 800a134:	4c06      	ldr	r4, [pc, #24]	; (800a150 <chSemWaitS.part.0+0x20>)
    chSchGoSleepS(CH_STATE_WTSEM);
 800a136:	2005      	movs	r0, #5
    currp->u.wtsemp = sp;
 800a138:	69a2      	ldr	r2, [r4, #24]
 800a13a:	6253      	str	r3, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 800a13c:	6859      	ldr	r1, [r3, #4]
 800a13e:	e9c2 3100 	strd	r3, r1, [r2]
  tp->queue.prev->queue.next = tp;
 800a142:	600a      	str	r2, [r1, #0]
  tqp->prev                  = tp;
 800a144:	605a      	str	r2, [r3, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 800a146:	f7ff ffbb 	bl	800a0c0 <chSchGoSleepS>
    return currp->u.rdymsg;
 800a14a:	69a3      	ldr	r3, [r4, #24]
}
 800a14c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a14e:	bd10      	pop	{r4, pc}
 800a150:	20000c88 	.word	0x20000c88
	...

0800a160 <chSemWait>:
msg_t chSemWait(semaphore_t *sp) {
 800a160:	b508      	push	{r3, lr}
 800a162:	2320      	movs	r3, #32
 800a164:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 800a168:	6883      	ldr	r3, [r0, #8]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	6083      	str	r3, [r0, #8]
 800a170:	db04      	blt.n	800a17c <chSemWait+0x1c>
  return MSG_OK;
 800a172:	2000      	movs	r0, #0
 800a174:	2300      	movs	r3, #0
 800a176:	f383 8811 	msr	BASEPRI, r3
}
 800a17a:	bd08      	pop	{r3, pc}
 800a17c:	f7ff ffd8 	bl	800a130 <chSemWaitS.part.0>
 800a180:	2300      	movs	r3, #0
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	bd08      	pop	{r3, pc}
	...

0800a190 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 800a190:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 800a192:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 800a194:	4b06      	ldr	r3, [pc, #24]	; (800a1b0 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 800a196:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800a19a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800a19c:	689a      	ldr	r2, [r3, #8]
 800a19e:	428a      	cmp	r2, r1
 800a1a0:	d2fb      	bcs.n	800a19a <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800a1a8:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800a1aa:	6058      	str	r0, [r3, #4]
}
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	20000c88 	.word	0x20000c88
	...

0800a1c0 <chMsgSend>:
  thread_t *ctp = currp;
 800a1c0:	4a0e      	ldr	r2, [pc, #56]	; (800a1fc <chMsgSend+0x3c>)
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 800a1c2:	b510      	push	{r4, lr}
  thread_t *ctp = currp;
 800a1c4:	6994      	ldr	r4, [r2, #24]
 800a1c6:	2220      	movs	r2, #32
 800a1c8:	f382 8811 	msr	BASEPRI, r2
  ctp->u.sentmsg = msg;
 800a1cc:	6261      	str	r1, [r4, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 800a1ce:	6b02      	ldr	r2, [r0, #48]	; 0x30
  msg_insert(ctp, &tp->msgqueue);
 800a1d0:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 800a1d4:	e9c4 1200 	strd	r1, r2, [r4]
  tp->queue.prev->queue.next = tp;
 800a1d8:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 800a1da:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 800a1de:	6304      	str	r4, [r0, #48]	; 0x30
 800a1e0:	2a0e      	cmp	r2, #14
 800a1e2:	d007      	beq.n	800a1f4 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 800a1e4:	200c      	movs	r0, #12
 800a1e6:	f7ff ff6b 	bl	800a0c0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 800a1ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f383 8811 	msr	BASEPRI, r3
}
 800a1f2:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
 800a1f4:	f7ff ffcc 	bl	800a190 <chSchReadyI>
 800a1f8:	e7f4      	b.n	800a1e4 <chMsgSend+0x24>
 800a1fa:	bf00      	nop
 800a1fc:	20000c88 	.word	0x20000c88

0800a200 <chDelegateCallVeneer>:
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 800a200:	b40e      	push	{r1, r2, r3}
 800a202:	b510      	push	{r4, lr}
 800a204:	b085      	sub	sp, #20
 800a206:	ab07      	add	r3, sp, #28
 800a208:	f853 4b04 	ldr.w	r4, [r3], #4
  cm.argsp  = &args;
 800a20c:	aa01      	add	r2, sp, #4
  msg = chMsgSend(tp, (msg_t)&cm);
 800a20e:	a902      	add	r1, sp, #8
  cm.veneer = veneer;
 800a210:	e9cd 3401 	strd	r3, r4, [sp, #4]
  cm.argsp  = &args;
 800a214:	9203      	str	r2, [sp, #12]
  msg = chMsgSend(tp, (msg_t)&cm);
 800a216:	f7ff ffd3 	bl	800a1c0 <chMsgSend>
}
 800a21a:	b005      	add	sp, #20
 800a21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a220:	b003      	add	sp, #12
 800a222:	4770      	bx	lr
	...

0800a230 <chEvtSignalI>:
  tp->epending |= events;
 800a230:	6b42      	ldr	r2, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800a232:	f890 3020 	ldrb.w	r3, [r0, #32]
  tp->epending |= events;
 800a236:	4311      	orrs	r1, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 800a238:	2b0a      	cmp	r3, #10
  tp->epending |= events;
 800a23a:	6341      	str	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800a23c:	d009      	beq.n	800a252 <chEvtSignalI+0x22>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800a23e:	2b0b      	cmp	r3, #11
 800a240:	d000      	beq.n	800a244 <chEvtSignalI+0x14>
}
 800a242:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800a244:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 800a246:	438b      	bics	r3, r1
 800a248:	d1fb      	bne.n	800a242 <chEvtSignalI+0x12>
    tp->u.rdymsg = MSG_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800a24e:	f7ff bf9f 	b.w	800a190 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800a252:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800a254:	4219      	tst	r1, r3
 800a256:	d1f8      	bne.n	800a24a <chEvtSignalI+0x1a>
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	0000      	movs	r0, r0
	...

0800a260 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800a260:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 800a262:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 800a264:	42a0      	cmp	r0, r4
 800a266:	d00f      	beq.n	800a288 <chEvtBroadcastFlagsI+0x28>
 800a268:	4606      	mov	r6, r0
 800a26a:	460d      	mov	r5, r1
    elp->flags |= flags;
 800a26c:	68e3      	ldr	r3, [r4, #12]
 800a26e:	432b      	orrs	r3, r5
 800a270:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 800a272:	b115      	cbz	r5, 800a27a <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 800a274:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 800a276:	421d      	tst	r5, r3
 800a278:	d003      	beq.n	800a282 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 800a27a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800a27e:	f7ff ffd7 	bl	800a230 <chEvtSignalI>
    elp = elp->next;
 800a282:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800a284:	42a6      	cmp	r6, r4
 800a286:	d1f1      	bne.n	800a26c <chEvtBroadcastFlagsI+0xc>
}
 800a288:	bd70      	pop	{r4, r5, r6, pc}
 800a28a:	bf00      	nop
 800a28c:	0000      	movs	r0, r0
	...

0800a290 <chMtxUnlockS>:
void chMtxUnlockS(mutex_t *mp) {
 800a290:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 800a292:	4a11      	ldr	r2, [pc, #68]	; (800a2d8 <chMtxUnlockS+0x48>)
    ctp->mtxlist = mp->next;
 800a294:	68c3      	ldr	r3, [r0, #12]
  return (bool)(tqp->next != (const thread_t *)tqp);
 800a296:	6800      	ldr	r0, [r0, #0]
void chMtxUnlockS(mutex_t *mp) {
 800a298:	b430      	push	{r4, r5}
  thread_t *ctp = currp;
 800a29a:	6995      	ldr	r5, [r2, #24]
    if (chMtxQueueNotEmptyS(mp)) {
 800a29c:	4288      	cmp	r0, r1
    ctp->mtxlist = mp->next;
 800a29e:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 800a2a0:	d016      	beq.n	800a2d0 <chMtxUnlockS+0x40>
      tprio_t newprio = ctp->realprio;
 800a2a2:	6bec      	ldr	r4, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 800a2a4:	b14b      	cbz	r3, 800a2ba <chMtxUnlockS+0x2a>
 800a2a6:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d003      	beq.n	800a2b4 <chMtxUnlockS+0x24>
 800a2ac:	6892      	ldr	r2, [r2, #8]
 800a2ae:	4294      	cmp	r4, r2
 800a2b0:	bf38      	it	cc
 800a2b2:	4614      	movcc	r4, r2
        lmp = lmp->next;
 800a2b4:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1f5      	bne.n	800a2a6 <chMtxUnlockS+0x16>
      mp->next = tp->mtxlist;
 800a2ba:	6b82      	ldr	r2, [r0, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800a2bc:	6803      	ldr	r3, [r0, #0]
      ctp->prio = newprio;
 800a2be:	60ac      	str	r4, [r5, #8]
 800a2c0:	600b      	str	r3, [r1, #0]
}
 800a2c2:	bc30      	pop	{r4, r5}
  tqp->next->queue.prev = (thread_t *)tqp;
 800a2c4:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 800a2c6:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 800a2ca:	6381      	str	r1, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 800a2cc:	f7ff bf60 	b.w	800a190 <chSchReadyI>
      mp->owner = NULL;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	bc30      	pop	{r4, r5}
      mp->owner = NULL;
 800a2d4:	6083      	str	r3, [r0, #8]
}
 800a2d6:	4770      	bx	lr
 800a2d8:	20000c88 	.word	0x20000c88
 800a2dc:	00000000 	.word	0x00000000

0800a2e0 <chMtxUnlock>:
void chMtxUnlock(mutex_t *mp) {
 800a2e0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 800a2e2:	4b16      	ldr	r3, [pc, #88]	; (800a33c <chMtxUnlock+0x5c>)
void chMtxUnlock(mutex_t *mp) {
 800a2e4:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 800a2e6:	699d      	ldr	r5, [r3, #24]
 800a2e8:	2320      	movs	r3, #32
 800a2ea:	f383 8811 	msr	BASEPRI, r3
    ctp->mtxlist = mp->next;
 800a2ee:	68c3      	ldr	r3, [r0, #12]
  return (bool)(tqp->next != (const thread_t *)tqp);
 800a2f0:	6800      	ldr	r0, [r0, #0]
 800a2f2:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 800a2f4:	4288      	cmp	r0, r1
 800a2f6:	d01b      	beq.n	800a330 <chMtxUnlock+0x50>
      tprio_t newprio = ctp->realprio;
 800a2f8:	6bec      	ldr	r4, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 800a2fa:	b14b      	cbz	r3, 800a310 <chMtxUnlock+0x30>
 800a2fc:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d003      	beq.n	800a30a <chMtxUnlock+0x2a>
 800a302:	6892      	ldr	r2, [r2, #8]
 800a304:	4294      	cmp	r4, r2
 800a306:	bf38      	it	cc
 800a308:	4614      	movcc	r4, r2
        lmp = lmp->next;
 800a30a:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1f5      	bne.n	800a2fc <chMtxUnlock+0x1c>
      mp->next = tp->mtxlist;
 800a310:	6b82      	ldr	r2, [r0, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800a312:	6803      	ldr	r3, [r0, #0]
      ctp->prio = newprio;
 800a314:	60ac      	str	r4, [r5, #8]
 800a316:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800a318:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 800a31a:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 800a31e:	6381      	str	r1, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 800a320:	f7ff ff36 	bl	800a190 <chSchReadyI>
      chSchRescheduleS();
 800a324:	f7ff fe1c 	bl	8009f60 <chSchRescheduleS>
 800a328:	2300      	movs	r3, #0
 800a32a:	f383 8811 	msr	BASEPRI, r3
}
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
      mp->owner = NULL;
 800a330:	2300      	movs	r3, #0
 800a332:	6083      	str	r3, [r0, #8]
 800a334:	2300      	movs	r3, #0
 800a336:	f383 8811 	msr	BASEPRI, r3
}
 800a33a:	bd38      	pop	{r3, r4, r5, pc}
 800a33c:	20000c88 	.word	0x20000c88

0800a340 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 800a344:	4b2d      	ldr	r3, [pc, #180]	; (800a3fc <chMtxLockS+0xbc>)
  if (mp->owner != NULL) {
 800a346:	6880      	ldr	r0, [r0, #8]
  thread_t *ctp = currp;
 800a348:	699d      	ldr	r5, [r3, #24]
  if (mp->owner != NULL) {
 800a34a:	b330      	cbz	r0, 800a39a <chMtxLockS+0x5a>
      while (tp->prio < ctp->prio) {
 800a34c:	68aa      	ldr	r2, [r5, #8]
 800a34e:	6883      	ldr	r3, [r0, #8]
 800a350:	4293      	cmp	r3, r2
 800a352:	d207      	bcs.n	800a364 <chMtxLockS+0x24>
        switch (tp->state) {
 800a354:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 800a358:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 800a35a:	2b06      	cmp	r3, #6
 800a35c:	d035      	beq.n	800a3ca <chMtxLockS+0x8a>
 800a35e:	2b07      	cmp	r3, #7
 800a360:	d020      	beq.n	800a3a4 <chMtxLockS+0x64>
 800a362:	b19b      	cbz	r3, 800a38c <chMtxLockS+0x4c>
  thread_t *cp = (thread_t *)tqp;
 800a364:	4623      	mov	r3, r4
 800a366:	e003      	b.n	800a370 <chMtxLockS+0x30>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800a368:	6899      	ldr	r1, [r3, #8]
 800a36a:	68aa      	ldr	r2, [r5, #8]
 800a36c:	4291      	cmp	r1, r2
 800a36e:	d302      	bcc.n	800a376 <chMtxLockS+0x36>
    cp = cp->queue.next;
 800a370:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800a372:	429c      	cmp	r4, r3
 800a374:	d1f8      	bne.n	800a368 <chMtxLockS+0x28>
  tp->queue.prev             = cp->queue.prev;
 800a376:	685a      	ldr	r2, [r3, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 800a378:	2006      	movs	r0, #6
 800a37a:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 800a37e:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 800a380:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 800a382:	626c      	str	r4, [r5, #36]	; 0x24
}
 800a384:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 800a388:	f7ff be9a 	b.w	800a0c0 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 800a38c:	e9d0 3200 	ldrd	r3, r2, [r0]
 800a390:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800a392:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 800a394:	f7ff fefc 	bl	800a190 <chSchReadyI>
          break;
 800a398:	e7e4      	b.n	800a364 <chMtxLockS+0x24>
    mp->next = ctp->mtxlist;
 800a39a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a39c:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 800a3a0:	63ac      	str	r4, [r5, #56]	; 0x38
}
 800a3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800a3a4:	6a46      	ldr	r6, [r0, #36]	; 0x24
  tp->queue.prev->queue.next = tp->queue.next;
 800a3a6:	6847      	ldr	r7, [r0, #4]
 800a3a8:	6801      	ldr	r1, [r0, #0]
  thread_t *cp = (thread_t *)tqp;
 800a3aa:	4633      	mov	r3, r6
  tp->queue.prev->queue.next = tp->queue.next;
 800a3ac:	6039      	str	r1, [r7, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800a3ae:	604f      	str	r7, [r1, #4]
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 800a3b0:	e002      	b.n	800a3b8 <chMtxLockS+0x78>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800a3b2:	6899      	ldr	r1, [r3, #8]
 800a3b4:	428a      	cmp	r2, r1
 800a3b6:	d802      	bhi.n	800a3be <chMtxLockS+0x7e>
    cp = cp->queue.next;
 800a3b8:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800a3ba:	429e      	cmp	r6, r3
 800a3bc:	d1f9      	bne.n	800a3b2 <chMtxLockS+0x72>
  tp->queue.prev             = cp->queue.prev;
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800a3c4:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800a3c6:	6058      	str	r0, [r3, #4]
 800a3c8:	e7cc      	b.n	800a364 <chMtxLockS+0x24>
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800a3ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
  tp->queue.prev->queue.next = tp->queue.next;
 800a3cc:	6847      	ldr	r7, [r0, #4]
 800a3ce:	6801      	ldr	r1, [r0, #0]
  thread_t *cp = (thread_t *)tqp;
 800a3d0:	4633      	mov	r3, r6
  tp->queue.prev->queue.next = tp->queue.next;
 800a3d2:	6039      	str	r1, [r7, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800a3d4:	604f      	str	r7, [r1, #4]
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 800a3d6:	e002      	b.n	800a3de <chMtxLockS+0x9e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800a3d8:	6899      	ldr	r1, [r3, #8]
 800a3da:	428a      	cmp	r2, r1
 800a3dc:	d802      	bhi.n	800a3e4 <chMtxLockS+0xa4>
    cp = cp->queue.next;
 800a3de:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800a3e0:	429e      	cmp	r6, r3
 800a3e2:	d1f9      	bne.n	800a3d8 <chMtxLockS+0x98>
  tp->queue.prev             = cp->queue.prev;
 800a3e4:	685a      	ldr	r2, [r3, #4]
 800a3e6:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800a3ea:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800a3ec:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 800a3ee:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 800a3f0:	68aa      	ldr	r2, [r5, #8]
 800a3f2:	6883      	ldr	r3, [r0, #8]
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d3ad      	bcc.n	800a354 <chMtxLockS+0x14>
 800a3f8:	e7b4      	b.n	800a364 <chMtxLockS+0x24>
 800a3fa:	bf00      	nop
 800a3fc:	20000c88 	.word	0x20000c88

0800a400 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 800a400:	b508      	push	{r3, lr}
 800a402:	2320      	movs	r3, #32
 800a404:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800a408:	f7ff ff9a 	bl	800a340 <chMtxLockS>
 800a40c:	2300      	movs	r3, #0
 800a40e:	f383 8811 	msr	BASEPRI, r3
}
 800a412:	bd08      	pop	{r3, pc}
	...

0800a420 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4604      	mov	r4, r0
  F_LOCK();
 800a424:	4d13      	ldr	r5, [pc, #76]	; (800a474 <chFactoryReleaseSemaphore+0x54>)
 800a426:	4628      	mov	r0, r5
 800a428:	f7ff ffea 	bl	800a400 <chMtxLock>
  dep->refs--;
 800a42c:	6863      	ldr	r3, [r4, #4]
 800a42e:	3b01      	subs	r3, #1
 800a430:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800a432:	b99b      	cbnz	r3, 800a45c <chFactoryReleaseSemaphore+0x3c>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800a434:	f105 0228 	add.w	r2, r5, #40	; 0x28
 800a438:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 800a43a:	4619      	mov	r1, r3
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4293      	cmp	r3, r2
 800a440:	d011      	beq.n	800a466 <chFactoryReleaseSemaphore+0x46>
    if (prev->next == element) {
 800a442:	429c      	cmp	r4, r3
 800a444:	d1f9      	bne.n	800a43a <chFactoryReleaseSemaphore+0x1a>
      prev->next = element->next;
 800a446:	6822      	ldr	r2, [r4, #0]
 800a448:	2320      	movs	r3, #32
 800a44a:	600a      	str	r2, [r1, #0]
 800a44c:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 800a450:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800a452:	2300      	movs	r3, #0
 800a454:	6022      	str	r2, [r4, #0]
  mp->next = php;
 800a456:	62ec      	str	r4, [r5, #44]	; 0x2c
 800a458:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 800a45c:	4805      	ldr	r0, [pc, #20]	; (800a474 <chFactoryReleaseSemaphore+0x54>)
}
 800a45e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800a462:	f7ff bf3d 	b.w	800a2e0 <chMtxUnlock>
 800a466:	2320      	movs	r3, #32
 800a468:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 800a46c:	2300      	movs	r3, #0
 800a46e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800a470:	601a      	str	r2, [r3, #0]
 800a472:	deff      	udf	#255	; 0xff
 800a474:	20000d00 	.word	0x20000d00
	...

0800a480 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop) {
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	4604      	mov	r4, r0
  F_LOCK();
 800a484:	4d13      	ldr	r5, [pc, #76]	; (800a4d4 <chFactoryReleaseObject+0x54>)
 800a486:	4628      	mov	r0, r5
 800a488:	f7ff ffba 	bl	800a400 <chMtxLock>
  dep->refs--;
 800a48c:	6863      	ldr	r3, [r4, #4]
 800a48e:	3b01      	subs	r3, #1
 800a490:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800a492:	b99b      	cbnz	r3, 800a4bc <chFactoryReleaseObject+0x3c>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800a494:	f105 0210 	add.w	r2, r5, #16
 800a498:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 800a49a:	4619      	mov	r1, r3
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d011      	beq.n	800a4c6 <chFactoryReleaseObject+0x46>
    if (prev->next == element) {
 800a4a2:	429c      	cmp	r4, r3
 800a4a4:	d1f9      	bne.n	800a49a <chFactoryReleaseObject+0x1a>
      prev->next = element->next;
 800a4a6:	6822      	ldr	r2, [r4, #0]
 800a4a8:	2320      	movs	r3, #32
 800a4aa:	600a      	str	r2, [r1, #0]
 800a4ac:	f383 8811 	msr	BASEPRI, r3
 800a4b0:	696a      	ldr	r2, [r5, #20]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	6022      	str	r2, [r4, #0]
  mp->next = php;
 800a4b6:	616c      	str	r4, [r5, #20]
 800a4b8:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 800a4bc:	4805      	ldr	r0, [pc, #20]	; (800a4d4 <chFactoryReleaseObject+0x54>)
}
 800a4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800a4c2:	f7ff bf0d 	b.w	800a2e0 <chMtxUnlock>
 800a4c6:	2320      	movs	r3, #32
 800a4c8:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	696a      	ldr	r2, [r5, #20]
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	deff      	udf	#255	; 0xff
 800a4d4:	20000d00 	.word	0x20000d00
	...

0800a4e0 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 800a4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 800a4e4:	4c16      	ldr	r4, [pc, #88]	; (800a540 <chHeapStatus+0x60>)
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 800a4e6:	4689      	mov	r9, r1
    heapp = &default_heap;
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	bf18      	it	ne
 800a4ec:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 800a4ee:	f104 0a0c 	add.w	sl, r4, #12
 800a4f2:	4650      	mov	r0, sl
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 800a4f4:	4690      	mov	r8, r2
  H_LOCK(heapp);
 800a4f6:	f7ff ff83 	bl	800a400 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 800a4fa:	6863      	ldr	r3, [r4, #4]
 800a4fc:	b1e3      	cbz	r3, 800a538 <chHeapStatus+0x58>
  lpages = 0U;
 800a4fe:	2500      	movs	r5, #0
  tpages = 0U;
 800a500:	462e      	mov	r6, r5
  n = 0U;
 800a502:	462f      	mov	r7, r5
  while (H_NEXT(qp) != NULL) {
 800a504:	cb18      	ldmia	r3, {r3, r4}
 800a506:	42a5      	cmp	r5, r4
 800a508:	bf38      	it	cc
 800a50a:	4625      	movcc	r5, r4
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 800a50c:	3701      	adds	r7, #1
    tpages += pages;
 800a50e:	4426      	add	r6, r4
  while (H_NEXT(qp) != NULL) {
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1f7      	bne.n	800a504 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 800a514:	f1b9 0f00 	cmp.w	r9, #0
 800a518:	d002      	beq.n	800a520 <chHeapStatus+0x40>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800a51a:	00f6      	lsls	r6, r6, #3
 800a51c:	f8c9 6000 	str.w	r6, [r9]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 800a520:	f1b8 0f00 	cmp.w	r8, #0
 800a524:	d002      	beq.n	800a52c <chHeapStatus+0x4c>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 800a526:	00ed      	lsls	r5, r5, #3
 800a528:	f8c8 5000 	str.w	r5, [r8]
  }
  H_UNLOCK(heapp);
 800a52c:	4650      	mov	r0, sl
 800a52e:	f7ff fed7 	bl	800a2e0 <chMtxUnlock>

  return n;
}
 800a532:	4638      	mov	r0, r7
 800a534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  lpages = 0U;
 800a538:	461d      	mov	r5, r3
  tpages = 0U;
 800a53a:	461e      	mov	r6, r3
  n = 0U;
 800a53c:	461f      	mov	r7, r3
 800a53e:	e7e9      	b.n	800a514 <chHeapStatus+0x34>
 800a540:	20000e2c 	.word	0x20000e2c
	...

0800a550 <cmd_mem>:
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 800a550:	b530      	push	{r4, r5, lr}
  if (argc > 0) {
 800a552:	2900      	cmp	r1, #0
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 800a554:	b083      	sub	sp, #12
  if (argc > 0) {
 800a556:	dc1f      	bgt.n	800a598 <cmd_mem+0x48>
  n = chHeapStatus(NULL, &total, &largest);
 800a558:	4604      	mov	r4, r0
 800a55a:	466a      	mov	r2, sp
 800a55c:	a901      	add	r1, sp, #4
 800a55e:	2000      	movs	r0, #0
 800a560:	f7ff ffbe 	bl	800a4e0 <chHeapStatus>
 800a564:	4605      	mov	r5, r0
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 800a566:	4b0f      	ldr	r3, [pc, #60]	; (800a5a4 <cmd_mem+0x54>)
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 800a568:	4620      	mov	r0, r4
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	490e      	ldr	r1, [pc, #56]	; (800a5a8 <cmd_mem+0x58>)
 800a570:	1ad2      	subs	r2, r2, r3
 800a572:	f7ff f85d 	bl	8009630 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 800a576:	462a      	mov	r2, r5
 800a578:	4620      	mov	r0, r4
 800a57a:	490c      	ldr	r1, [pc, #48]	; (800a5ac <cmd_mem+0x5c>)
 800a57c:	f7ff f858 	bl	8009630 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 800a580:	9a01      	ldr	r2, [sp, #4]
 800a582:	4620      	mov	r0, r4
 800a584:	490a      	ldr	r1, [pc, #40]	; (800a5b0 <cmd_mem+0x60>)
 800a586:	f7ff f853 	bl	8009630 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 800a58a:	4620      	mov	r0, r4
 800a58c:	9a00      	ldr	r2, [sp, #0]
 800a58e:	4909      	ldr	r1, [pc, #36]	; (800a5b4 <cmd_mem+0x64>)
 800a590:	f7ff f84e 	bl	8009630 <chprintf>
}
 800a594:	b003      	add	sp, #12
 800a596:	bd30      	pop	{r4, r5, pc}
    shellUsage(chp, "mem");
 800a598:	4a07      	ldr	r2, [pc, #28]	; (800a5b8 <cmd_mem+0x68>)
 800a59a:	4908      	ldr	r1, [pc, #32]	; (800a5bc <cmd_mem+0x6c>)
 800a59c:	f7ff f848 	bl	8009630 <chprintf>
}
 800a5a0:	b003      	add	sp, #12
 800a5a2:	bd30      	pop	{r4, r5, pc}
 800a5a4:	20000e20 	.word	0x20000e20
 800a5a8:	0800e1d0 	.word	0x0800e1d0
 800a5ac:	0800e1f0 	.word	0x0800e1f0
 800a5b0:	0800e208 	.word	0x0800e208
 800a5b4:	0800e228 	.word	0x0800e228
 800a5b8:	0800e1cc 	.word	0x0800e1cc
 800a5bc:	0800e0d8 	.word	0x0800e0d8

0800a5c0 <chHeapFree>:
void chHeapFree(void *p) {
 800a5c0:	b570      	push	{r4, r5, r6, lr}
  heapp = H_HEAP(hp);
 800a5c2:	e950 4302 	ldrd	r4, r3, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800a5c6:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800a5c8:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 800a5ca:	f104 060c 	add.w	r6, r4, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800a5ce:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 800a5d2:	4605      	mov	r5, r0
  qp = &heapp->header;
 800a5d4:	3404      	adds	r4, #4
  H_LOCK(heapp);
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	f7ff ff12 	bl	800a400 <chMtxLock>
  qp = &heapp->header;
 800a5dc:	4623      	mov	r3, r4
  hp = (heap_header_t *)p - 1U;
 800a5de:	f1a5 0108 	sub.w	r1, r5, #8
    if (((qp == &heapp->header) || (hp > qp)) &&
 800a5e2:	42a3      	cmp	r3, r4
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800a5e4:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 800a5e6:	d001      	beq.n	800a5ec <chHeapFree+0x2c>
 800a5e8:	4299      	cmp	r1, r3
 800a5ea:	d902      	bls.n	800a5f2 <chHeapFree+0x32>
 800a5ec:	b11a      	cbz	r2, 800a5f6 <chHeapFree+0x36>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800a5ee:	4291      	cmp	r1, r2
 800a5f0:	d301      	bcc.n	800a5f6 <chHeapFree+0x36>
    qp = H_NEXT(qp);
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	e7f5      	b.n	800a5e2 <chHeapFree+0x22>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800a5f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 800a5fa:	f845 2c08 	str.w	r2, [r5, #-8]
      H_NEXT(qp) = hp;
 800a5fe:	6019      	str	r1, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800a600:	f855 0c08 	ldr.w	r0, [r5, #-8]
 800a604:	1c62      	adds	r2, r4, #1
 800a606:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800a60a:	42a0      	cmp	r0, r4
 800a60c:	d00a      	beq.n	800a624 <chHeapFree+0x64>
      if ((H_LIMIT(qp) == hp)) {
 800a60e:	6858      	ldr	r0, [r3, #4]
 800a610:	1c42      	adds	r2, r0, #1
 800a612:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800a616:	4291      	cmp	r1, r2
 800a618:	d00e      	beq.n	800a638 <chHeapFree+0x78>
  H_UNLOCK(heapp);
 800a61a:	4630      	mov	r0, r6
}
 800a61c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  H_UNLOCK(heapp);
 800a620:	f7ff be5e 	b.w	800a2e0 <chMtxUnlock>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800a624:	c811      	ldmia	r0, {r0, r4}
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 800a626:	4422      	add	r2, r4
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800a628:	e945 0202 	strd	r0, r2, [r5, #-8]
      if ((H_LIMIT(qp) == hp)) {
 800a62c:	6858      	ldr	r0, [r3, #4]
 800a62e:	1c42      	adds	r2, r0, #1
 800a630:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800a634:	4291      	cmp	r1, r2
 800a636:	d1f0      	bne.n	800a61a <chHeapFree+0x5a>
        H_NEXT(qp) = H_NEXT(hp);
 800a638:	e955 1202 	ldrd	r1, r2, [r5, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 800a63c:	3201      	adds	r2, #1
 800a63e:	4410      	add	r0, r2
        H_NEXT(qp) = H_NEXT(hp);
 800a640:	e9c3 1000 	strd	r1, r0, [r3]
  H_UNLOCK(heapp);
 800a644:	4630      	mov	r0, r6
}
 800a646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  H_UNLOCK(heapp);
 800a64a:	f7ff be49 	b.w	800a2e0 <chMtxUnlock>
 800a64e:	bf00      	nop

0800a650 <dyn_release_object_heap.part.0>:
static void dyn_release_object_heap(dyn_element_t *dep,
 800a650:	4603      	mov	r3, r0
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800a652:	4608      	mov	r0, r1
 800a654:	e001      	b.n	800a65a <dyn_release_object_heap.part.0+0xa>
    if (prev->next == element) {
 800a656:	4283      	cmp	r3, r0
 800a658:	d006      	beq.n	800a668 <dyn_release_object_heap.part.0+0x18>
  while (prev->next != (dyn_element_t *)dlp) {
 800a65a:	4602      	mov	r2, r0
 800a65c:	6800      	ldr	r0, [r0, #0]
 800a65e:	4288      	cmp	r0, r1
 800a660:	d1f9      	bne.n	800a656 <dyn_release_object_heap.part.0+0x6>
  return NULL;
 800a662:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800a664:	f7ff bfac 	b.w	800a5c0 <chHeapFree>
      prev->next = element->next;
 800a668:	6803      	ldr	r3, [r0, #0]
 800a66a:	6013      	str	r3, [r2, #0]
    chHeapFree((void *)dep);
 800a66c:	f7ff bfa8 	b.w	800a5c0 <chHeapFree>

0800a670 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 800a670:	b510      	push	{r4, lr}
 800a672:	4604      	mov	r4, r0

  F_LOCK();
 800a674:	4807      	ldr	r0, [pc, #28]	; (800a694 <chFactoryReleasePipe+0x24>)
 800a676:	f7ff fec3 	bl	800a400 <chMtxLock>
  dep->refs--;
 800a67a:	6863      	ldr	r3, [r4, #4]
 800a67c:	3b01      	subs	r3, #1
 800a67e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800a680:	b91b      	cbnz	r3, 800a68a <chFactoryReleasePipe+0x1a>
 800a682:	4620      	mov	r0, r4
 800a684:	4904      	ldr	r1, [pc, #16]	; (800a698 <chFactoryReleasePipe+0x28>)
 800a686:	f7ff ffe3 	bl	800a650 <dyn_release_object_heap.part.0>

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);

  F_UNLOCK();
}
 800a68a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800a68e:	4801      	ldr	r0, [pc, #4]	; (800a694 <chFactoryReleasePipe+0x24>)
 800a690:	f7ff be26 	b.w	800a2e0 <chMtxUnlock>
 800a694:	20000d00 	.word	0x20000d00
 800a698:	20000d44 	.word	0x20000d44
 800a69c:	00000000 	.word	0x00000000

0800a6a0 <chFactoryReleaseObjectsFIFO>:
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 800a6a0:	b510      	push	{r4, lr}
 800a6a2:	4604      	mov	r4, r0
  F_LOCK();
 800a6a4:	4807      	ldr	r0, [pc, #28]	; (800a6c4 <chFactoryReleaseObjectsFIFO+0x24>)
 800a6a6:	f7ff feab 	bl	800a400 <chMtxLock>
  dep->refs--;
 800a6aa:	6863      	ldr	r3, [r4, #4]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800a6b0:	b91b      	cbnz	r3, 800a6ba <chFactoryReleaseObjectsFIFO+0x1a>
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	4904      	ldr	r1, [pc, #16]	; (800a6c8 <chFactoryReleaseObjectsFIFO+0x28>)
 800a6b6:	f7ff ffcb 	bl	800a650 <dyn_release_object_heap.part.0>
}
 800a6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800a6be:	4801      	ldr	r0, [pc, #4]	; (800a6c4 <chFactoryReleaseObjectsFIFO+0x24>)
 800a6c0:	f7ff be0e 	b.w	800a2e0 <chMtxUnlock>
 800a6c4:	20000d00 	.word	0x20000d00
 800a6c8:	20000d40 	.word	0x20000d40
 800a6cc:	00000000 	.word	0x00000000

0800a6d0 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 800a6d0:	b510      	push	{r4, lr}
 800a6d2:	4604      	mov	r4, r0
  F_LOCK();
 800a6d4:	4807      	ldr	r0, [pc, #28]	; (800a6f4 <chFactoryReleaseMailbox+0x24>)
 800a6d6:	f7ff fe93 	bl	800a400 <chMtxLock>
  dep->refs--;
 800a6da:	6863      	ldr	r3, [r4, #4]
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800a6e0:	b91b      	cbnz	r3, 800a6ea <chFactoryReleaseMailbox+0x1a>
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	4904      	ldr	r1, [pc, #16]	; (800a6f8 <chFactoryReleaseMailbox+0x28>)
 800a6e6:	f7ff ffb3 	bl	800a650 <dyn_release_object_heap.part.0>
}
 800a6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800a6ee:	4801      	ldr	r0, [pc, #4]	; (800a6f4 <chFactoryReleaseMailbox+0x24>)
 800a6f0:	f7ff bdf6 	b.w	800a2e0 <chMtxUnlock>
 800a6f4:	20000d00 	.word	0x20000d00
 800a6f8:	20000d3c 	.word	0x20000d3c
 800a6fc:	00000000 	.word	0x00000000

0800a700 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 800a700:	b510      	push	{r4, lr}
 800a702:	4604      	mov	r4, r0
  F_LOCK();
 800a704:	4807      	ldr	r0, [pc, #28]	; (800a724 <chFactoryReleaseBuffer+0x24>)
 800a706:	f7ff fe7b 	bl	800a400 <chMtxLock>
  dep->refs--;
 800a70a:	6863      	ldr	r3, [r4, #4]
 800a70c:	3b01      	subs	r3, #1
 800a70e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800a710:	b91b      	cbnz	r3, 800a71a <chFactoryReleaseBuffer+0x1a>
 800a712:	4620      	mov	r0, r4
 800a714:	4904      	ldr	r1, [pc, #16]	; (800a728 <chFactoryReleaseBuffer+0x28>)
 800a716:	f7ff ff9b 	bl	800a650 <dyn_release_object_heap.part.0>
}
 800a71a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800a71e:	4801      	ldr	r0, [pc, #4]	; (800a724 <chFactoryReleaseBuffer+0x24>)
 800a720:	f7ff bdde 	b.w	800a2e0 <chMtxUnlock>
 800a724:	20000d00 	.word	0x20000d00
 800a728:	20000d24 	.word	0x20000d24
 800a72c:	00000000 	.word	0x00000000

0800a730 <chThdRelease>:
 800a730:	2220      	movs	r2, #32
 800a732:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 800a736:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800a73a:	3b01      	subs	r3, #1
 800a73c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 800a740:	6a03      	ldr	r3, [r0, #32]
 800a742:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800a746:	2b0f      	cmp	r3, #15
 800a748:	d003      	beq.n	800a752 <chThdRelease+0x22>
 800a74a:	2300      	movs	r3, #0
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	4770      	bx	lr
void chThdRelease(thread_t *tp) {
 800a752:	b410      	push	{r4}
    REG_REMOVE(tp);
 800a754:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 800a758:	611c      	str	r4, [r3, #16]
 800a75a:	6904      	ldr	r4, [r0, #16]
 800a75c:	2100      	movs	r1, #0
 800a75e:	6163      	str	r3, [r4, #20]
 800a760:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 800a764:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a768:	f003 0303 	and.w	r3, r3, #3
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d00d      	beq.n	800a78c <chThdRelease+0x5c>
 800a770:	2b02      	cmp	r3, #2
 800a772:	d001      	beq.n	800a778 <chThdRelease+0x48>
}
 800a774:	bc10      	pop	{r4}
 800a776:	4770      	bx	lr
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 800a778:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a77a:	69c0      	ldr	r0, [r0, #28]
 800a77c:	f382 8811 	msr	BASEPRI, r2
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	6002      	str	r2, [r0, #0]
  mp->next = php;
 800a784:	6018      	str	r0, [r3, #0]
 800a786:	f381 8811 	msr	BASEPRI, r1
 800a78a:	e7f3      	b.n	800a774 <chThdRelease+0x44>
      chHeapFree(chThdGetWorkingAreaX(tp));
 800a78c:	69c0      	ldr	r0, [r0, #28]
}
 800a78e:	bc10      	pop	{r4}
      chHeapFree(chThdGetWorkingAreaX(tp));
 800a790:	f7ff bf16 	b.w	800a5c0 <chHeapFree>
	...

0800a7a0 <cmd_threads>:
  if (argc > 0) {
 800a7a0:	2900      	cmp	r1, #0
 800a7a2:	dc4c      	bgt.n	800a83e <cmd_threads+0x9e>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800a7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 800a7a8:	4927      	ldr	r1, [pc, #156]	; (800a848 <cmd_threads+0xa8>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	2620      	movs	r6, #32
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 800a7b0:	f7fe ff3e 	bl	8009630 <chprintf>
 800a7b4:	f386 8811 	msr	BASEPRI, r6
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 800a7b8:	4f24      	ldr	r7, [pc, #144]	; (800a84c <cmd_threads+0xac>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	693c      	ldr	r4, [r7, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 800a7be:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800a7c8:	f382 8811 	msr	BASEPRI, r2
#endif
  chSysUnlock();

  return tp;
 800a7cc:	f8df a088 	ldr.w	sl, [pc, #136]	; 800a858 <cmd_threads+0xb8>
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800a7d0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800a85c <cmd_threads+0xbc>
 800a7d4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800a860 <cmd_threads+0xc0>
 800a7d8:	e00b      	b.n	800a7f2 <cmd_threads+0x52>
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
    ntp->refs++;
 800a7da:	f89b 3022 	ldrb.w	r3, [fp, #34]	; 0x22
 800a7de:	2200      	movs	r2, #0
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
 800a7e6:	f382 8811 	msr	BASEPRI, r2
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f7ff ffa0 	bl	800a730 <chThdRelease>
 800a7f0:	465c      	mov	r4, fp
             tp->name == NULL ? "" : tp->name);
 800a7f2:	69a1      	ldr	r1, [r4, #24]
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 800a7f4:	f894 3020 	ldrb.w	r3, [r4, #32]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800a7f8:	2900      	cmp	r1, #0
 800a7fa:	bf08      	it	eq
 800a7fc:	4649      	moveq	r1, r9
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 800a7fe:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800a802:	f85a e023 	ldr.w	lr, [sl, r3, lsl #2]
 800a806:	3801      	subs	r0, #1
    uint32_t stklimit = (uint32_t)tp->wabase;
 800a808:	69e2      	ldr	r2, [r4, #28]
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 800a80a:	e9d4 c302 	ldrd	ip, r3, [r4, #8]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800a80e:	e9cd e103 	strd	lr, r1, [sp, #12]
 800a812:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 800a816:	4641      	mov	r1, r8
 800a818:	4628      	mov	r0, r5
 800a81a:	9400      	str	r4, [sp, #0]
 800a81c:	f7fe ff08 	bl	8009630 <chprintf>
 800a820:	f386 8811 	msr	BASEPRI, r6
  ntp = tp->newer;
 800a824:	f8d4 b010 	ldr.w	fp, [r4, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 800a828:	45bb      	cmp	fp, r7
 800a82a:	d1d6      	bne.n	800a7da <cmd_threads+0x3a>
 800a82c:	2300      	movs	r3, #0
 800a82e:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 800a832:	4620      	mov	r0, r4
}
 800a834:	b007      	add	sp, #28
 800a836:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83a:	f7ff bf79 	b.w	800a730 <chThdRelease>
    shellUsage(chp, "threads");
 800a83e:	4a04      	ldr	r2, [pc, #16]	; (800a850 <cmd_threads+0xb0>)
 800a840:	4904      	ldr	r1, [pc, #16]	; (800a854 <cmd_threads+0xb4>)
 800a842:	f7fe bef5 	b.w	8009630 <chprintf>
 800a846:	bf00      	nop
 800a848:	0800e248 	.word	0x0800e248
 800a84c:	20000c88 	.word	0x20000c88
 800a850:	0800e92c 	.word	0x0800e92c
 800a854:	0800e0d8 	.word	0x0800e0d8
 800a858:	0800f628 	.word	0x0800f628
 800a85c:	0800e33c 	.word	0x0800e33c
 800a860:	0800e288 	.word	0x0800e288
	...

0800a870 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	2320      	movs	r3, #32
 800a874:	4604      	mov	r4, r0
 800a876:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 800a87a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a87e:	2b0f      	cmp	r3, #15
 800a880:	d007      	beq.n	800a892 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
 800a882:	4b08      	ldr	r3, [pc, #32]	; (800a8a4 <chThdWait+0x34>)
  tp->queue.next = tlp->next;
 800a884:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a886:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 800a888:	2009      	movs	r0, #9
 800a88a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 800a88c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a88e:	f7ff fc17 	bl	800a0c0 <chSchGoSleepS>
  msg = tp->u.exitcode;
 800a892:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a894:	2300      	movs	r3, #0
 800a896:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 800a89a:	4620      	mov	r0, r4
 800a89c:	f7ff ff48 	bl	800a730 <chThdRelease>
}
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	20000c88 	.word	0x20000c88
	...

0800a8b0 <cmd_test>:
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 800a8b0:	b510      	push	{r4, lr}
  thread_t *tp;
  tfunc_t tfp;

  (void)argv;
  if (argc != 1) {
 800a8b2:	2901      	cmp	r1, #1
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	b082      	sub	sp, #8
  if (argc != 1) {
 800a8b8:	d121      	bne.n	800a8fe <cmd_test+0x4e>
    shellUsage(chp, "test rt|oslib");
    return;
  }
  if (!strcmp(argv[0], "rt")) {
 800a8ba:	6810      	ldr	r0, [r2, #0]
 800a8bc:	7803      	ldrb	r3, [r0, #0]
 800a8be:	2b72      	cmp	r3, #114	; 0x72
 800a8c0:	d015      	beq.n	800a8ee <cmd_test+0x3e>
    tfp = test_rt;
  }
  else if (!strcmp(argv[0], "oslib")) {
 800a8c2:	4916      	ldr	r1, [pc, #88]	; (800a91c <cmd_test+0x6c>)
 800a8c4:	f7f5 fd48 	bl	8000358 <strcmp>
 800a8c8:	b9c8      	cbnz	r0, 800a8fe <cmd_test+0x4e>
    tfp = test_oslib;
 800a8ca:	4815      	ldr	r0, [pc, #84]	; (800a920 <cmd_test+0x70>)
  return ch.rlist.current;
 800a8cc:	4b15      	ldr	r3, [pc, #84]	; (800a924 <cmd_test+0x74>)
  }
  else {
    shellUsage(chp, "test rt|oslib");
    return;
  }
  tp = chThdCreateFromHeap(NULL, SHELL_CMD_TEST_WA_SIZE,
 800a8ce:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
  return chThdGetSelfX()->prio;
 800a8d2:	699b      	ldr	r3, [r3, #24]
 800a8d4:	4a14      	ldr	r2, [pc, #80]	; (800a928 <cmd_test+0x78>)
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	e9cd 0400 	strd	r0, r4, [sp]
 800a8dc:	2000      	movs	r0, #0
 800a8de:	f7ff fb97 	bl	800a010 <chThdCreateFromHeap>
                           "test", chThdGetPriorityX(),
                           tfp, chp);
  if (tp == NULL) {
 800a8e2:	b1a0      	cbz	r0, 800a90e <cmd_test+0x5e>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
    return;
  }
  chThdWait(tp);
}
 800a8e4:	b002      	add	sp, #8
 800a8e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdWait(tp);
 800a8ea:	f7ff bfc1 	b.w	800a870 <chThdWait>
  if (!strcmp(argv[0], "rt")) {
 800a8ee:	7843      	ldrb	r3, [r0, #1]
 800a8f0:	2b74      	cmp	r3, #116	; 0x74
 800a8f2:	d1e6      	bne.n	800a8c2 <cmd_test+0x12>
 800a8f4:	7883      	ldrb	r3, [r0, #2]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e3      	bne.n	800a8c2 <cmd_test+0x12>
    tfp = test_rt;
 800a8fa:	480c      	ldr	r0, [pc, #48]	; (800a92c <cmd_test+0x7c>)
 800a8fc:	e7e6      	b.n	800a8cc <cmd_test+0x1c>
    shellUsage(chp, "test rt|oslib");
 800a8fe:	4620      	mov	r0, r4
 800a900:	4a0b      	ldr	r2, [pc, #44]	; (800a930 <cmd_test+0x80>)
 800a902:	490c      	ldr	r1, [pc, #48]	; (800a934 <cmd_test+0x84>)
}
 800a904:	b002      	add	sp, #8
 800a906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    shellUsage(chp, "test rt|oslib");
 800a90a:	f7fe be91 	b.w	8009630 <chprintf>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 800a90e:	4620      	mov	r0, r4
 800a910:	4909      	ldr	r1, [pc, #36]	; (800a938 <cmd_test+0x88>)
}
 800a912:	b002      	add	sp, #8
 800a914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 800a918:	f7fe be8a 	b.w	8009630 <chprintf>
 800a91c:	0800e2b8 	.word	0x0800e2b8
 800a920:	080094e1 	.word	0x080094e1
 800a924:	20000c88 	.word	0x20000c88
 800a928:	0800e7f4 	.word	0x0800e7f4
 800a92c:	080094d1 	.word	0x080094d1
 800a930:	0800e2b0 	.word	0x0800e2b0
 800a934:	0800e0d8 	.word	0x0800e0d8
 800a938:	0800e2c0 	.word	0x0800e2c0
 800a93c:	00000000 	.word	0x00000000

0800a940 <chSemSignalI>:
  if (++sp->cnt <= (cnt_t)0) {
 800a940:	6882      	ldr	r2, [r0, #8]
void chSemSignalI(semaphore_t *sp) {
 800a942:	4603      	mov	r3, r0
  if (++sp->cnt <= (cnt_t)0) {
 800a944:	3201      	adds	r2, #1
 800a946:	2a00      	cmp	r2, #0
 800a948:	6082      	str	r2, [r0, #8]
 800a94a:	dd00      	ble.n	800a94e <chSemSignalI+0xe>
}
 800a94c:	4770      	bx	lr
    tp->u.rdymsg = MSG_OK;
 800a94e:	2100      	movs	r1, #0
  thread_t *tp = tqp->next;
 800a950:	6800      	ldr	r0, [r0, #0]
  tqp->next             = tp->queue.next;
 800a952:	6802      	ldr	r2, [r0, #0]
 800a954:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800a956:	6053      	str	r3, [r2, #4]
 800a958:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800a95a:	f7ff bc19 	b.w	800a190 <chSchReadyI>
 800a95e:	bf00      	nop

0800a960 <chCacheReleaseObjectI>:
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a960:	6a0b      	ldr	r3, [r1, #32]
                           oc_object_t *objp) {
 800a962:	b570      	push	{r4, r5, r6, lr}
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a964:	2b00      	cmp	r3, #0
                           oc_object_t *objp) {
 800a966:	460c      	mov	r4, r1
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a968:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a96a:	db2f      	blt.n	800a9cc <chCacheReleaseObjectI+0x6c>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800a96c:	0719      	lsls	r1, r3, #28
 800a96e:	d414      	bmi.n	800a99a <chCacheReleaseObjectI+0x3a>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800a970:	069a      	lsls	r2, r3, #26
 800a972:	d423      	bmi.n	800a9bc <chCacheReleaseObjectI+0x5c>
      LRU_INSERT_HEAD(ocp, objp);
 800a974:	69c2      	ldr	r2, [r0, #28]
 800a976:	f100 0114 	add.w	r1, r0, #20
 800a97a:	e9c4 2102 	strd	r2, r1, [r4, #8]
 800a97e:	60d4      	str	r4, [r2, #12]
 800a980:	61c4      	str	r4, [r0, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 800a982:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800a986:	f043 0301 	orr.w	r3, r3, #1
 800a98a:	6263      	str	r3, [r4, #36]	; 0x24
  chSemSignalI(&ocp->lru_sem);
 800a98c:	3030      	adds	r0, #48	; 0x30
 800a98e:	f7ff ffd7 	bl	800a940 <chSemSignalI>
 800a992:	6a23      	ldr	r3, [r4, #32]
 800a994:	3301      	adds	r3, #1
 800a996:	6223      	str	r3, [r4, #32]
}
 800a998:	bd70      	pop	{r4, r5, r6, pc}
    objp->obj_group = 0U;
 800a99a:	2300      	movs	r3, #0
    HASH_REMOVE(objp);
 800a99c:	e9d4 1500 	ldrd	r1, r5, [r4]
    objp->obj_flags = OC_FLAG_INLRU;
 800a9a0:	2601      	movs	r6, #1
    LRU_INSERT_TAIL(ocp, objp);
 800a9a2:	6a02      	ldr	r2, [r0, #32]
    HASH_REMOVE(objp);
 800a9a4:	6029      	str	r1, [r5, #0]
 800a9a6:	604d      	str	r5, [r1, #4]
    LRU_INSERT_TAIL(ocp, objp);
 800a9a8:	f100 0114 	add.w	r1, r0, #20
 800a9ac:	e9c4 1202 	strd	r1, r2, [r4, #8]
 800a9b0:	6094      	str	r4, [r2, #8]
 800a9b2:	6204      	str	r4, [r0, #32]
    objp->obj_key   = 0U;
 800a9b4:	e9c4 3304 	strd	r3, r3, [r4, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 800a9b8:	6266      	str	r6, [r4, #36]	; 0x24
 800a9ba:	e7e7      	b.n	800a98c <chCacheReleaseObjectI+0x2c>
      LRU_INSERT_TAIL(ocp, objp);
 800a9bc:	6a02      	ldr	r2, [r0, #32]
 800a9be:	f100 0114 	add.w	r1, r0, #20
 800a9c2:	e9c4 1202 	strd	r1, r2, [r4, #8]
 800a9c6:	6094      	str	r4, [r2, #8]
 800a9c8:	6204      	str	r4, [r0, #32]
 800a9ca:	e7da      	b.n	800a982 <chCacheReleaseObjectI+0x22>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a9cc:	f003 031a 	and.w	r3, r3, #26
    chSemSignalI(&objp->obj_sem);
 800a9d0:	f101 0018 	add.w	r0, r1, #24
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a9d4:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a9d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    chSemSignalI(&objp->obj_sem);
 800a9da:	f7ff bfb1 	b.w	800a940 <chSemSignalI>
 800a9de:	bf00      	nop

0800a9e0 <chGuardedPoolLoadArray>:
void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 800a9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	4616      	mov	r6, r2
 800a9ea:	f04f 0820 	mov.w	r8, #32
 800a9ee:	2700      	movs	r7, #0
 800a9f0:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 800a9f4:	68eb      	ldr	r3, [r5, #12]
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	6023      	str	r3, [r4, #0]
  mp->next = php;
 800a9fa:	60ec      	str	r4, [r5, #12]
 800a9fc:	f7ff ffa0 	bl	800a940 <chSemSignalI>
  chSchRescheduleS();
 800aa00:	f7ff faae 	bl	8009f60 <chSchRescheduleS>
 800aa04:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800aa08:	692b      	ldr	r3, [r5, #16]
  while (n != 0U) {
 800aa0a:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800aa0c:	441c      	add	r4, r3
  while (n != 0U) {
 800aa0e:	d1ef      	bne.n	800a9f0 <chGuardedPoolLoadArray+0x10>
}
 800aa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800aa20 <chThdResumeI>:
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 800aa20:	4603      	mov	r3, r0
  if (*trp != NULL) {
 800aa22:	6800      	ldr	r0, [r0, #0]
 800aa24:	b120      	cbz	r0, 800aa30 <chThdResumeI+0x10>
    *trp = NULL;
 800aa26:	2200      	movs	r2, #0
 800aa28:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
 800aa2a:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800aa2c:	f7ff bbb0 	b.w	800a190 <chSchReadyI>
}
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
	...

0800aa40 <spi_lld_serve_rx_interrupt>:
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 800aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800aa42:	070c      	lsls	r4, r1, #28
 800aa44:	d444      	bmi.n	800aad0 <spi_lld_serve_rx_interrupt+0x90>
  if (spip->config->circular) {
 800aa46:	6843      	ldr	r3, [r0, #4]
 800aa48:	4604      	mov	r4, r0
 800aa4a:	781a      	ldrb	r2, [r3, #0]
 800aa4c:	bb4a      	cbnz	r2, 800aaa2 <spi_lld_serve_rx_interrupt+0x62>
    dmaStreamDisable(spip->dmatx);
 800aa4e:	220e      	movs	r2, #14
 800aa50:	6a45      	ldr	r5, [r0, #36]	; 0x24
    _spi_isr_code(spip);
 800aa52:	685e      	ldr	r6, [r3, #4]
    dmaStreamDisable(spip->dmatx);
 800aa54:	686f      	ldr	r7, [r5, #4]
    dmaStreamDisable(spip->dmarx);
 800aa56:	6a03      	ldr	r3, [r0, #32]
    dmaStreamDisable(spip->dmatx);
 800aa58:	6839      	ldr	r1, [r7, #0]
 800aa5a:	f021 010f 	bic.w	r1, r1, #15
 800aa5e:	6039      	str	r1, [r7, #0]
 800aa60:	7b69      	ldrb	r1, [r5, #13]
 800aa62:	682f      	ldr	r7, [r5, #0]
 800aa64:	fa02 f101 	lsl.w	r1, r2, r1
    dmaStreamDisable(spip->dmarx);
 800aa68:	685d      	ldr	r5, [r3, #4]
    dmaStreamDisable(spip->dmatx);
 800aa6a:	6079      	str	r1, [r7, #4]
    dmaStreamDisable(spip->dmarx);
 800aa6c:	6829      	ldr	r1, [r5, #0]
 800aa6e:	681f      	ldr	r7, [r3, #0]
 800aa70:	f021 010f 	bic.w	r1, r1, #15
 800aa74:	6029      	str	r1, [r5, #0]
 800aa76:	7b5b      	ldrb	r3, [r3, #13]
 800aa78:	409a      	lsls	r2, r3
 800aa7a:	607a      	str	r2, [r7, #4]
    _spi_isr_code(spip);
 800aa7c:	b36e      	cbz	r6, 800aada <spi_lld_serve_rx_interrupt+0x9a>
 800aa7e:	2304      	movs	r3, #4
 800aa80:	7003      	strb	r3, [r0, #0]
 800aa82:	47b0      	blx	r6
 800aa84:	7823      	ldrb	r3, [r4, #0]
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	d027      	beq.n	800aada <spi_lld_serve_rx_interrupt+0x9a>
 800aa8a:	2320      	movs	r3, #32
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800aa90:	2100      	movs	r1, #0
 800aa92:	f104 0008 	add.w	r0, r4, #8
 800aa96:	f7ff ffc3 	bl	800aa20 <chThdResumeI>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f383 8811 	msr	BASEPRI, r3
}
 800aaa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 800aaa2:	074a      	lsls	r2, r1, #29
 800aaa4:	460d      	mov	r5, r1
 800aaa6:	d503      	bpl.n	800aab0 <spi_lld_serve_rx_interrupt+0x70>
      _spi_isr_half_code(spip);
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d0f8      	beq.n	800aaa0 <spi_lld_serve_rx_interrupt+0x60>
 800aaae:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 800aab0:	07ab      	lsls	r3, r5, #30
 800aab2:	d5f5      	bpl.n	800aaa0 <spi_lld_serve_rx_interrupt+0x60>
      _spi_isr_full_code(spip);
 800aab4:	6863      	ldr	r3, [r4, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d0f1      	beq.n	800aaa0 <spi_lld_serve_rx_interrupt+0x60>
 800aabc:	2204      	movs	r2, #4
 800aabe:	4620      	mov	r0, r4
 800aac0:	7022      	strb	r2, [r4, #0]
 800aac2:	4798      	blx	r3
 800aac4:	7823      	ldrb	r3, [r4, #0]
 800aac6:	2b04      	cmp	r3, #4
 800aac8:	d1ea      	bne.n	800aaa0 <spi_lld_serve_rx_interrupt+0x60>
 800aaca:	2303      	movs	r3, #3
 800aacc:	7023      	strb	r3, [r4, #0]
}
 800aace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800aad0:	b672      	cpsid	i
 800aad2:	4b03      	ldr	r3, [pc, #12]	; (800aae0 <spi_lld_serve_rx_interrupt+0xa0>)
 800aad4:	4a03      	ldr	r2, [pc, #12]	; (800aae4 <spi_lld_serve_rx_interrupt+0xa4>)
 800aad6:	62da      	str	r2, [r3, #44]	; 0x2c
 800aad8:	e7fe      	b.n	800aad8 <spi_lld_serve_rx_interrupt+0x98>
    _spi_isr_code(spip);
 800aada:	2302      	movs	r3, #2
 800aadc:	7023      	strb	r3, [r4, #0]
 800aade:	e7d4      	b.n	800aa8a <spi_lld_serve_rx_interrupt+0x4a>
 800aae0:	20000c88 	.word	0x20000c88
 800aae4:	0800e0b8 	.word	0x0800e0b8
	...

0800aaf0 <chThdExitS>:
void chThdExitS(msg_t msg) {
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4603      	mov	r3, r0
  thread_t *tp = currp;
 800aaf4:	4a0f      	ldr	r2, [pc, #60]	; (800ab34 <chThdExitS+0x44>)
 800aaf6:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 800aaf8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800aafa:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800aafe:	42a8      	cmp	r0, r5
  tp->u.exitcode = msg;
 800ab00:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 800ab02:	d006      	beq.n	800ab12 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 800ab04:	6803      	ldr	r3, [r0, #0]
 800ab06:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800ab08:	f7ff fb42 	bl	800a190 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800ab0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800ab0e:	42a8      	cmp	r0, r5
 800ab10:	d1f8      	bne.n	800ab04 <chThdExitS+0x14>
  if ((tp->refs == (trefs_t)0) &&
 800ab12:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800ab16:	b93b      	cbnz	r3, 800ab28 <chThdExitS+0x38>
 800ab18:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800ab1c:	079b      	lsls	r3, r3, #30
 800ab1e:	d103      	bne.n	800ab28 <chThdExitS+0x38>
    REG_REMOVE(tp);
 800ab20:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ab24:	6113      	str	r3, [r2, #16]
 800ab26:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 800ab28:	200f      	movs	r0, #15
}
 800ab2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800ab2e:	f7ff bac7 	b.w	800a0c0 <chSchGoSleepS>
 800ab32:	bf00      	nop
 800ab34:	20000c88 	.word	0x20000c88
	...

0800ab40 <cmd_exit>:
  if (argc > 0) {
 800ab40:	2900      	cmp	r1, #0
 800ab42:	dc0c      	bgt.n	800ab5e <cmd_exit+0x1e>
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 800ab44:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800ab46:	2320      	movs	r3, #32
 800ab48:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 800ab4c:	4806      	ldr	r0, [pc, #24]	; (800ab68 <cmd_exit+0x28>)
 800ab4e:	2100      	movs	r1, #0
 800ab50:	f7ff fb86 	bl	800a260 <chEvtBroadcastFlagsI>
}
 800ab54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 800ab58:	2000      	movs	r0, #0
 800ab5a:	f7ff bfc9 	b.w	800aaf0 <chThdExitS>
    shellUsage(chp, "exit");
 800ab5e:	4a03      	ldr	r2, [pc, #12]	; (800ab6c <cmd_exit+0x2c>)
 800ab60:	4903      	ldr	r1, [pc, #12]	; (800ab70 <cmd_exit+0x30>)
 800ab62:	f7fe bd65 	b.w	8009630 <chprintf>
 800ab66:	bf00      	nop
 800ab68:	200015d4 	.word	0x200015d4
 800ab6c:	0800e2d0 	.word	0x0800e2d0
 800ab70:	0800e0d8 	.word	0x0800e0d8
	...

0800ab80 <shellThread>:
THD_FUNCTION(shellThread, p) {
 800ab80:	4601      	mov	r1, r0
 800ab82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab86:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800adcc <shellThread+0x24c>
  BaseSequentialStream *chp = scfg->sc_channel;
 800ab8a:	6807      	ldr	r7, [r0, #0]
 800ab8c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800ab90:	4a7f      	ldr	r2, [pc, #508]	; (800ad90 <shellThread+0x210>)
  const ShellCommand *scp = scfg->sc_commands;
 800ab92:	6849      	ldr	r1, [r1, #4]
THD_FUNCTION(shellThread, p) {
 800ab94:	b09b      	sub	sp, #108	; 0x6c
 800ab96:	619a      	str	r2, [r3, #24]
 800ab98:	9000      	str	r0, [sp, #0]
  const ShellCommand *scp = scfg->sc_commands;
 800ab9a:	9101      	str	r1, [sp, #4]
  chprintf(chp, SHELL_NEWLINE_STR);
 800ab9c:	4638      	mov	r0, r7
 800ab9e:	497d      	ldr	r1, [pc, #500]	; (800ad94 <shellThread+0x214>)
 800aba0:	f7fe fd46 	bl	8009630 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 800aba4:	4638      	mov	r0, r7
 800aba6:	497c      	ldr	r1, [pc, #496]	; (800ad98 <shellThread+0x218>)
 800aba8:	f7fe fd42 	bl	8009630 <chprintf>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 800abac:	f8d9 3018 	ldr.w	r3, [r9, #24]
  while (!chThdShouldTerminateX()) {
 800abb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800abb4:	075a      	lsls	r2, r3, #29
 800abb6:	d47e      	bmi.n	800acb6 <shellThread+0x136>
    chprintf(chp, SHELL_PROMPT_STR);
 800abb8:	f8df a214 	ldr.w	sl, [pc, #532]	; 800add0 <shellThread+0x250>
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, SHELL_NEWLINE_STR);
 800abbc:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 800ad94 <shellThread+0x214>
 800abc0:	ae0a      	add	r6, sp, #40	; 0x28
  char *p = line;
 800abc2:	4634      	mov	r4, r6
    chprintf(chp, SHELL_PROMPT_STR);
 800abc4:	4651      	mov	r1, sl
 800abc6:	4638      	mov	r0, r7
 800abc8:	f7fe fd32 	bl	8009630 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 800abcc:	9b00      	ldr	r3, [sp, #0]
 800abce:	f8d3 8000 	ldr.w	r8, [r3]
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 800abd2:	f8d8 3000 	ldr.w	r3, [r8]
 800abd6:	2201      	movs	r2, #1
 800abd8:	4640      	mov	r0, r8
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	f10d 010f 	add.w	r1, sp, #15
 800abe0:	4798      	blx	r3
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d07f      	beq.n	800ace6 <shellThread+0x166>
    if (c == 4) {
 800abe6:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800abea:	2904      	cmp	r1, #4
 800abec:	d077      	beq.n	800acde <shellThread+0x15e>
    if ((c == 8) || (c == 127)) {
 800abee:	2908      	cmp	r1, #8
      continue;
    }
#endif
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 800abf0:	f10d 0367 	add.w	r3, sp, #103	; 0x67
    if ((c == 8) || (c == 127)) {
 800abf4:	d011      	beq.n	800ac1a <shellThread+0x9a>
 800abf6:	297f      	cmp	r1, #127	; 0x7f
 800abf8:	d00f      	beq.n	800ac1a <shellThread+0x9a>
    if (c == '\r') {
 800abfa:	290d      	cmp	r1, #13
 800abfc:	d023      	beq.n	800ac46 <shellThread+0xc6>
    if (c < 0x20)
 800abfe:	291f      	cmp	r1, #31
 800ac00:	d9e7      	bls.n	800abd2 <shellThread+0x52>
    if (p < line + size - 1) {
 800ac02:	429c      	cmp	r4, r3
 800ac04:	d2e5      	bcs.n	800abd2 <shellThread+0x52>
      streamPut(chp, c);
 800ac06:	f8d8 3000 	ldr.w	r3, [r8]
 800ac0a:	4640      	mov	r0, r8
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	4798      	blx	r3
      *p++ = (char)c;
 800ac10:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800ac14:	f804 3b01 	strb.w	r3, [r4], #1
 800ac18:	e7db      	b.n	800abd2 <shellThread+0x52>
      if (p != line) {
 800ac1a:	42b4      	cmp	r4, r6
 800ac1c:	d0d9      	beq.n	800abd2 <shellThread+0x52>
        streamPut(chp, 0x08);
 800ac1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac22:	2108      	movs	r1, #8
 800ac24:	4640      	mov	r0, r8
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	4798      	blx	r3
        streamPut(chp, 0x20);
 800ac2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ac2e:	2120      	movs	r1, #32
 800ac30:	4640      	mov	r0, r8
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	4798      	blx	r3
        streamPut(chp, 0x08);
 800ac36:	f8d8 3000 	ldr.w	r3, [r8]
 800ac3a:	2108      	movs	r1, #8
 800ac3c:	4640      	mov	r0, r8
 800ac3e:	68db      	ldr	r3, [r3, #12]
        p--;
 800ac40:	3c01      	subs	r4, #1
        streamPut(chp, 0x08);
 800ac42:	4798      	blx	r3
 800ac44:	e7c5      	b.n	800abd2 <shellThread+0x52>
      *p = 0;
 800ac46:	2500      	movs	r5, #0
      chprintf(chp, SHELL_NEWLINE_STR);
 800ac48:	4640      	mov	r0, r8
 800ac4a:	4659      	mov	r1, fp
 800ac4c:	f7fe fcf0 	bl	8009630 <chprintf>
      *p = 0;
 800ac50:	7025      	strb	r5, [r4, #0]
    lp = parse_arguments(line, &tokp);
 800ac52:	a904      	add	r1, sp, #16
 800ac54:	4630      	mov	r0, r6
 800ac56:	f7fe fc4b 	bl	80094f0 <parse_arguments>
    n = 0;
 800ac5a:	46a8      	mov	r8, r5
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800ac5c:	a904      	add	r1, sp, #16
    lp = parse_arguments(line, &tokp);
 800ac5e:	4605      	mov	r5, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800ac60:	2000      	movs	r0, #0
 800ac62:	ac05      	add	r4, sp, #20
 800ac64:	f7fe fc44 	bl	80094f0 <parse_arguments>
 800ac68:	b160      	cbz	r0, 800ac84 <shellThread+0x104>
      if (n >= SHELL_MAX_ARGUMENTS) {
 800ac6a:	f1b8 0f04 	cmp.w	r8, #4
 800ac6e:	d02f      	beq.n	800acd0 <shellThread+0x150>
      args[n++] = lp;
 800ac70:	f844 0b04 	str.w	r0, [r4], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800ac74:	a904      	add	r1, sp, #16
 800ac76:	2000      	movs	r0, #0
      args[n++] = lp;
 800ac78:	f108 0801 	add.w	r8, r8, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800ac7c:	f7fe fc38 	bl	80094f0 <parse_arguments>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d1f2      	bne.n	800ac6a <shellThread+0xea>
    args[n] = NULL;
 800ac84:	ab1a      	add	r3, sp, #104	; 0x68
 800ac86:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 800ac8a:	f842 0c54 	str.w	r0, [r2, #-84]
    if (cmd != NULL) {
 800ac8e:	b165      	cbz	r5, 800acaa <shellThread+0x12a>
      if (strcmp(cmd, "help") == 0) {
 800ac90:	4628      	mov	r0, r5
 800ac92:	4942      	ldr	r1, [pc, #264]	; (800ad9c <shellThread+0x21c>)
 800ac94:	f7f5 fb60 	bl	8000358 <strcmp>
 800ac98:	bb70      	cbnz	r0, 800acf8 <shellThread+0x178>
        if (n > 0) {
 800ac9a:	f1b8 0f00 	cmp.w	r8, #0
 800ac9e:	d03c      	beq.n	800ad1a <shellThread+0x19a>
          shellUsage(chp, "help");
 800aca0:	4638      	mov	r0, r7
 800aca2:	4a3e      	ldr	r2, [pc, #248]	; (800ad9c <shellThread+0x21c>)
 800aca4:	493e      	ldr	r1, [pc, #248]	; (800ada0 <shellThread+0x220>)
 800aca6:	f7fe fcc3 	bl	8009630 <chprintf>
 800acaa:	f8d9 3018 	ldr.w	r3, [r9, #24]
  while (!chThdShouldTerminateX()) {
 800acae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800acb2:	075b      	lsls	r3, r3, #29
 800acb4:	d585      	bpl.n	800abc2 <shellThread+0x42>
 800acb6:	2320      	movs	r3, #32
 800acb8:	f383 8811 	msr	BASEPRI, r3
 800acbc:	2100      	movs	r1, #0
 800acbe:	4839      	ldr	r0, [pc, #228]	; (800ada4 <shellThread+0x224>)
 800acc0:	f7ff face 	bl	800a260 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 800acc4:	2000      	movs	r0, #0
 800acc6:	f7ff ff13 	bl	800aaf0 <chThdExitS>
}
 800acca:	b01b      	add	sp, #108	; 0x6c
 800accc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 800acd0:	4638      	mov	r0, r7
 800acd2:	4935      	ldr	r1, [pc, #212]	; (800ada8 <shellThread+0x228>)
 800acd4:	f7fe fcac 	bl	8009630 <chprintf>
    args[n] = NULL;
 800acd8:	2300      	movs	r3, #0
 800acda:	9309      	str	r3, [sp, #36]	; 0x24
    if (cmd != NULL) {
 800acdc:	e7e5      	b.n	800acaa <shellThread+0x12a>
      chprintf(chp, "^D");
 800acde:	4640      	mov	r0, r8
 800ace0:	4932      	ldr	r1, [pc, #200]	; (800adac <shellThread+0x22c>)
 800ace2:	f7fe fca5 	bl	8009630 <chprintf>
      chprintf(chp, SHELL_NEWLINE_STR);
 800ace6:	4638      	mov	r0, r7
 800ace8:	492a      	ldr	r1, [pc, #168]	; (800ad94 <shellThread+0x214>)
 800acea:	f7fe fca1 	bl	8009630 <chprintf>
      chprintf(chp, "logout");
 800acee:	4638      	mov	r0, r7
 800acf0:	492f      	ldr	r1, [pc, #188]	; (800adb0 <shellThread+0x230>)
 800acf2:	f7fe fc9d 	bl	8009630 <chprintf>
      break;
 800acf6:	e7de      	b.n	800acb6 <shellThread+0x136>
 800acf8:	4c2e      	ldr	r4, [pc, #184]	; (800adb4 <shellThread+0x234>)
  while (scp->sc_name != NULL) {
 800acfa:	482f      	ldr	r0, [pc, #188]	; (800adb8 <shellThread+0x238>)
 800acfc:	e002      	b.n	800ad04 <shellThread+0x184>
 800acfe:	f854 0f08 	ldr.w	r0, [r4, #8]!
 800ad02:	b300      	cbz	r0, 800ad46 <shellThread+0x1c6>
    if (strcmp(scp->sc_name, name) == 0) {
 800ad04:	4629      	mov	r1, r5
 800ad06:	f7f5 fb27 	bl	8000358 <strcmp>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d1f7      	bne.n	800acfe <shellThread+0x17e>
      scp->sc_function(chp, argc, argv);
 800ad0e:	4641      	mov	r1, r8
 800ad10:	4638      	mov	r0, r7
 800ad12:	6864      	ldr	r4, [r4, #4]
 800ad14:	aa05      	add	r2, sp, #20
 800ad16:	47a0      	blx	r4
      return false;
 800ad18:	e7c7      	b.n	800acaa <shellThread+0x12a>
        chprintf(chp, "Commands: help ");
 800ad1a:	4638      	mov	r0, r7
 800ad1c:	4927      	ldr	r1, [pc, #156]	; (800adbc <shellThread+0x23c>)
 800ad1e:	f7fe fc87 	bl	8009630 <chprintf>
  while (scp->sc_name != NULL) {
 800ad22:	4c24      	ldr	r4, [pc, #144]	; (800adb4 <shellThread+0x234>)
 800ad24:	4a24      	ldr	r2, [pc, #144]	; (800adb8 <shellThread+0x238>)
    chprintf(chp, "%s ", scp->sc_name);
 800ad26:	4d26      	ldr	r5, [pc, #152]	; (800adc0 <shellThread+0x240>)
 800ad28:	4629      	mov	r1, r5
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	f7fe fc80 	bl	8009630 <chprintf>
  while (scp->sc_name != NULL) {
 800ad30:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800ad34:	2a00      	cmp	r2, #0
 800ad36:	d1f7      	bne.n	800ad28 <shellThread+0x1a8>
        if (scp != NULL)
 800ad38:	9c01      	ldr	r4, [sp, #4]
 800ad3a:	b9e4      	cbnz	r4, 800ad76 <shellThread+0x1f6>
        chprintf(chp, SHELL_NEWLINE_STR);
 800ad3c:	4659      	mov	r1, fp
 800ad3e:	4638      	mov	r0, r7
 800ad40:	f7fe fc76 	bl	8009630 <chprintf>
 800ad44:	e7b1      	b.n	800acaa <shellThread+0x12a>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 800ad46:	9c01      	ldr	r4, [sp, #4]
 800ad48:	b15c      	cbz	r4, 800ad62 <shellThread+0x1e2>
  while (scp->sc_name != NULL) {
 800ad4a:	6820      	ldr	r0, [r4, #0]
 800ad4c:	b918      	cbnz	r0, 800ad56 <shellThread+0x1d6>
 800ad4e:	e008      	b.n	800ad62 <shellThread+0x1e2>
 800ad50:	f854 0f08 	ldr.w	r0, [r4, #8]!
 800ad54:	b128      	cbz	r0, 800ad62 <shellThread+0x1e2>
    if (strcmp(scp->sc_name, name) == 0) {
 800ad56:	4629      	mov	r1, r5
 800ad58:	f7f5 fafe 	bl	8000358 <strcmp>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d1f7      	bne.n	800ad50 <shellThread+0x1d0>
 800ad60:	e7d5      	b.n	800ad0e <shellThread+0x18e>
        chprintf(chp, "%s", cmd);
 800ad62:	462a      	mov	r2, r5
 800ad64:	4638      	mov	r0, r7
 800ad66:	4917      	ldr	r1, [pc, #92]	; (800adc4 <shellThread+0x244>)
 800ad68:	f7fe fc62 	bl	8009630 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	4916      	ldr	r1, [pc, #88]	; (800adc8 <shellThread+0x248>)
 800ad70:	f7fe fc5e 	bl	8009630 <chprintf>
 800ad74:	e799      	b.n	800acaa <shellThread+0x12a>
  while (scp->sc_name != NULL) {
 800ad76:	6822      	ldr	r2, [r4, #0]
 800ad78:	2a00      	cmp	r2, #0
 800ad7a:	d0df      	beq.n	800ad3c <shellThread+0x1bc>
    chprintf(chp, "%s ", scp->sc_name);
 800ad7c:	4d10      	ldr	r5, [pc, #64]	; (800adc0 <shellThread+0x240>)
 800ad7e:	4629      	mov	r1, r5
 800ad80:	4638      	mov	r0, r7
 800ad82:	f7fe fc55 	bl	8009630 <chprintf>
  while (scp->sc_name != NULL) {
 800ad86:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800ad8a:	2a00      	cmp	r2, #0
 800ad8c:	d1f7      	bne.n	800ad7e <shellThread+0x1fe>
 800ad8e:	e7d5      	b.n	800ad3c <shellThread+0x1bc>
 800ad90:	0800d9a0 	.word	0x0800d9a0
 800ad94:	0800e2e8 	.word	0x0800e2e8
 800ad98:	0800e2d8 	.word	0x0800e2d8
 800ad9c:	0800e318 	.word	0x0800e318
 800ada0:	0800e0d8 	.word	0x0800e0d8
 800ada4:	200015d4 	.word	0x200015d4
 800ada8:	0800e300 	.word	0x0800e300
 800adac:	0800e2f4 	.word	0x0800e2f4
 800adb0:	0800e2f8 	.word	0x0800e2f8
 800adb4:	0800f5e4 	.word	0x0800f5e4
 800adb8:	0800e2d0 	.word	0x0800e2d0
 800adbc:	0800e320 	.word	0x0800e320
 800adc0:	0800e330 	.word	0x0800e330
 800adc4:	0800e334 	.word	0x0800e334
 800adc8:	0800e338 	.word	0x0800e338
 800adcc:	20000c88 	.word	0x20000c88
 800add0:	0800e2ec 	.word	0x0800e2ec
	...

0800ade0 <chThdExit>:
 800ade0:	2320      	movs	r3, #32
 800ade2:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 800ade6:	f7ff be83 	b.w	800aaf0 <chThdExitS>
 800adea:	bf00      	nop
 800adec:	0000      	movs	r0, r0
	...

0800adf0 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800adf0:	4b1f      	ldr	r3, [pc, #124]	; (800ae70 <chVTDoResetI+0x80>)
void chVTDoResetI(virtual_timer_t *vtp) {
 800adf2:	b430      	push	{r4, r5}
  if (ch.vtlist.next != vtp) {
 800adf4:	69da      	ldr	r2, [r3, #28]
 800adf6:	4282      	cmp	r2, r0
 800adf8:	d00f      	beq.n	800ae1a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 800adfa:	e9d0 2100 	ldrd	r2, r1, [r0]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
 800adfe:	2400      	movs	r4, #0
    vtp->prev->next = vtp->next;
 800ae00:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 800ae02:	6802      	ldr	r2, [r0, #0]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800ae04:	331c      	adds	r3, #28
 800ae06:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 800ae08:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 800ae0a:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800ae0c:	d003      	beq.n	800ae16 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 800ae0e:	6881      	ldr	r1, [r0, #8]
 800ae10:	6893      	ldr	r3, [r2, #8]
 800ae12:	440b      	add	r3, r1
 800ae14:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800ae16:	bc30      	pop	{r4, r5}
 800ae18:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 800ae1a:	4618      	mov	r0, r3
  vtp->func = NULL;
 800ae1c:	2400      	movs	r4, #0
  ch.vtlist.next = vtp->next;
 800ae1e:	6811      	ldr	r1, [r2, #0]
 800ae20:	f840 1f1c 	str.w	r1, [r0, #28]!
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800ae24:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 800ae26:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 800ae28:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800ae2a:	d01c      	beq.n	800ae66 <chVTDoResetI+0x76>
 800ae2c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  ch.vtlist.next->delta += vtp->delta;
 800ae30:	6895      	ldr	r5, [r2, #8]
 800ae32:	688a      	ldr	r2, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 800ae34:	8d18      	ldrh	r0, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 800ae36:	1953      	adds	r3, r2, r5
 800ae38:	608b      	str	r3, [r1, #8]
 800ae3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800ae3c:	1a12      	subs	r2, r2, r0
 800ae3e:	b292      	uxth	r2, r2
  if (nowdelta >= ch.vtlist.next->delta) {
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d9e8      	bls.n	800ae16 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 800ae44:	1a99      	subs	r1, r3, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800ae46:	2901      	cmp	r1, #1
 800ae48:	d90b      	bls.n	800ae62 <chVTDoResetI+0x72>
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 800ae4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	bf28      	it	cs
 800ae52:	4613      	movcs	r3, r2
}
 800ae54:	bc30      	pop	{r4, r5}
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800ae56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 800ae5a:	4403      	add	r3, r0
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	6353      	str	r3, [r2, #52]	; 0x34
 800ae60:	4770      	bx	lr
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800ae62:	1c93      	adds	r3, r2, #2
 800ae64:	e7f6      	b.n	800ae54 <chVTDoResetI+0x64>
  STM32_ST_TIM->DIER = 0U;
 800ae66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae6a:	60dc      	str	r4, [r3, #12]
    return;
 800ae6c:	e7d3      	b.n	800ae16 <chVTDoResetI+0x26>
 800ae6e:	bf00      	nop
 800ae70:	20000c88 	.word	0x20000c88
	...

0800ae80 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 800ae80:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800ae82:	4d24      	ldr	r5, [pc, #144]	; (800af14 <chVTDoSetI+0x94>)
  return (systime_t)STM32_ST_TIM->CNT;
 800ae84:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 800ae88:	462f      	mov	r7, r5
 800ae8a:	f857 4f1c 	ldr.w	r4, [r7, #28]!
 800ae8e:	2902      	cmp	r1, #2
  vtp->func = vtfunc;
 800ae90:	60c2      	str	r2, [r0, #12]
 800ae92:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800ae94:	bf38      	it	cc
 800ae96:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800ae98:	42bc      	cmp	r4, r7
  vtp->par = par;
 800ae9a:	6103      	str	r3, [r0, #16]
 800ae9c:	b293      	uxth	r3, r2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800ae9e:	d023      	beq.n	800aee8 <chVTDoSetI+0x68>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800aea0:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 800aea2:	1a9b      	subs	r3, r3, r2
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	18c9      	adds	r1, r1, r3
      delta -= p->delta;
 800aea8:	68a3      	ldr	r3, [r4, #8]
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 800aeaa:	d312      	bcc.n	800aed2 <chVTDoSetI+0x52>
      p = p->next;
 800aeac:	6824      	ldr	r4, [r4, #0]
      delta -= p->delta;
 800aeae:	1ac9      	subs	r1, r1, r3
      p = p->next;
 800aeb0:	68a3      	ldr	r3, [r4, #8]
  while (p->delta < delta) {
 800aeb2:	428b      	cmp	r3, r1
 800aeb4:	d3fa      	bcc.n	800aeac <chVTDoSetI+0x2c>
  ch.vtlist.delta = (sysinterval_t)-1;
 800aeb6:	f04f 32ff 	mov.w	r2, #4294967295
  vtp->prev = vtp->next->prev;
 800aeba:	6863      	ldr	r3, [r4, #4]
 800aebc:	e9c0 4300 	strd	r4, r3, [r0]
  vtp->prev->next = vtp;
 800aec0:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
 800aec2:	6060      	str	r0, [r4, #4]
  vtp->delta = delta;
 800aec4:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
 800aec6:	68a3      	ldr	r3, [r4, #8]
 800aec8:	1a59      	subs	r1, r3, r1
 800aeca:	60a1      	str	r1, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 800aecc:	626a      	str	r2, [r5, #36]	; 0x24
}
 800aece:	bcf0      	pop	{r4, r5, r6, r7}
 800aed0:	4770      	bx	lr
    else if (delta < p->delta) {
 800aed2:	428b      	cmp	r3, r1
 800aed4:	d9ed      	bls.n	800aeb2 <chVTDoSetI+0x32>
  return systime + (systime_t)interval;
 800aed6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800aeda:	42b9      	cmp	r1, r7
 800aedc:	bf94      	ite	ls
 800aede:	1852      	addls	r2, r2, r1
 800aee0:	19d2      	addhi	r2, r2, r7
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800aee2:	b292      	uxth	r2, r2
 800aee4:	6372      	str	r2, [r6, #52]	; 0x34
 800aee6:	e7e4      	b.n	800aeb2 <chVTDoSetI+0x32>
 800aee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aeec:	4291      	cmp	r1, r2
 800aeee:	bf94      	ite	ls
 800aef0:	185a      	addls	r2, r3, r1
 800aef2:	189a      	addhi	r2, r3, r2
  STM32_ST_TIM->SR     = 0;
 800aef4:	f04f 0c00 	mov.w	ip, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800aef8:	2702      	movs	r7, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800aefa:	b292      	uxth	r2, r2
      ch.vtlist.prev = vtp;
 800aefc:	e9c5 0007 	strd	r0, r0, [r5, #28]
      ch.vtlist.lasttime = now;
 800af00:	852b      	strh	r3, [r5, #40]	; 0x28
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800af02:	e9c0 4400 	strd	r4, r4, [r0]
      vtp->delta = delay;
 800af06:	6081      	str	r1, [r0, #8]
 800af08:	6372      	str	r2, [r6, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800af0a:	f8c6 c010 	str.w	ip, [r6, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800af0e:	60f7      	str	r7, [r6, #12]
 800af10:	e7dd      	b.n	800aece <chVTDoSetI+0x4e>
 800af12:	bf00      	nop
 800af14:	20000c88 	.word	0x20000c88
	...

0800af20 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 800af20:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != timeout) {
 800af22:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 800af24:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 800af26:	d012      	beq.n	800af4e <chSchGoSleepTimeoutS+0x2e>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 800af28:	4604      	mov	r4, r0
 800af2a:	4d0c      	ldr	r5, [pc, #48]	; (800af5c <chSchGoSleepTimeoutS+0x3c>)
 800af2c:	4a0c      	ldr	r2, [pc, #48]	; (800af60 <chSchGoSleepTimeoutS+0x40>)
 800af2e:	69ab      	ldr	r3, [r5, #24]
 800af30:	a801      	add	r0, sp, #4
 800af32:	f7ff ffa5 	bl	800ae80 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800af36:	4620      	mov	r0, r4
 800af38:	f7ff f8c2 	bl	800a0c0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800af3c:	9b04      	ldr	r3, [sp, #16]
 800af3e:	b113      	cbz	r3, 800af46 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 800af40:	a801      	add	r0, sp, #4
 800af42:	f7ff ff55 	bl	800adf0 <chVTDoResetI>
  return currp->u.rdymsg;
 800af46:	69ab      	ldr	r3, [r5, #24]
}
 800af48:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800af4a:	b007      	add	sp, #28
 800af4c:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
 800af4e:	f7ff f8b7 	bl	800a0c0 <chSchGoSleepS>
 800af52:	4d02      	ldr	r5, [pc, #8]	; (800af5c <chSchGoSleepTimeoutS+0x3c>)
  return currp->u.rdymsg;
 800af54:	69ab      	ldr	r3, [r5, #24]
}
 800af56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800af58:	b007      	add	sp, #28
 800af5a:	bd30      	pop	{r4, r5, pc}
 800af5c:	20000c88 	.word	0x20000c88
 800af60:	08009291 	.word	0x08009291
	...

0800af70 <chGuardedPoolAllocTimeout>:
                                sysinterval_t timeout) {
 800af70:	b510      	push	{r4, lr}
 800af72:	2320      	movs	r3, #32
 800af74:	4604      	mov	r4, r0
 800af76:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 800af7a:	6882      	ldr	r2, [r0, #8]
 800af7c:	1e53      	subs	r3, r2, #1
 800af7e:	2b00      	cmp	r3, #0
 800af80:	6083      	str	r3, [r0, #8]
 800af82:	db07      	blt.n	800af94 <chGuardedPoolAllocTimeout+0x24>
  objp = mp->next;
 800af84:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 800af86:	b1c8      	cbz	r0, 800afbc <chGuardedPoolAllocTimeout+0x4c>
    mp->next = mp->next->next;
 800af88:	6803      	ldr	r3, [r0, #0]
 800af8a:	60e3      	str	r3, [r4, #12]
 800af8c:	2300      	movs	r3, #0
 800af8e:	f383 8811 	msr	BASEPRI, r3
}
 800af92:	bd10      	pop	{r4, pc}
    if (TIME_IMMEDIATE == timeout) {
 800af94:	4608      	mov	r0, r1
 800af96:	b1d9      	cbz	r1, 800afd0 <chGuardedPoolAllocTimeout+0x60>
    currp->u.wtsemp = sp;
 800af98:	4b0e      	ldr	r3, [pc, #56]	; (800afd4 <chGuardedPoolAllocTimeout+0x64>)
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800af9a:	2005      	movs	r0, #5
    currp->u.wtsemp = sp;
 800af9c:	699b      	ldr	r3, [r3, #24]
 800af9e:	625c      	str	r4, [r3, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 800afa0:	6862      	ldr	r2, [r4, #4]
 800afa2:	e9c3 4200 	strd	r4, r2, [r3]
  tp->queue.prev->queue.next = tp;
 800afa6:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 800afa8:	6063      	str	r3, [r4, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800afaa:	f7ff ffb9 	bl	800af20 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 800afae:	2800      	cmp	r0, #0
 800afb0:	d0e8      	beq.n	800af84 <chGuardedPoolAllocTimeout+0x14>
    return NULL;
 800afb2:	2000      	movs	r0, #0
 800afb4:	2300      	movs	r3, #0
 800afb6:	f383 8811 	msr	BASEPRI, r3
}
 800afba:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
 800afbc:	69a3      	ldr	r3, [r4, #24]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0f7      	beq.n	800afb2 <chGuardedPoolAllocTimeout+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 800afc2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800afc6:	4798      	blx	r3
 800afc8:	2300      	movs	r3, #0
 800afca:	f383 8811 	msr	BASEPRI, r3
}
 800afce:	bd10      	pop	{r4, pc}
      sp->cnt++;
 800afd0:	60a2      	str	r2, [r4, #8]
  if (msg != MSG_OK) {
 800afd2:	e7db      	b.n	800af8c <chGuardedPoolAllocTimeout+0x1c>
 800afd4:	20000c88 	.word	0x20000c88
	...

0800afe0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 800afe0:	b161      	cbz	r1, 800affc <chThdEnqueueTimeoutS+0x1c>
 800afe2:	4603      	mov	r3, r0
  queue_insert(currp, tqp);
 800afe4:	4a07      	ldr	r2, [pc, #28]	; (800b004 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 800afe6:	b410      	push	{r4}
  queue_insert(currp, tqp);
 800afe8:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 800afea:	6844      	ldr	r4, [r0, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800afec:	2004      	movs	r0, #4
 800afee:	e9c2 3400 	strd	r3, r4, [r2]
  tp->queue.prev->queue.next = tp;
 800aff2:	6022      	str	r2, [r4, #0]
}
 800aff4:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 800aff6:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800aff8:	f7ff bf92 	b.w	800af20 <chSchGoSleepTimeoutS>
}
 800affc:	f04f 30ff 	mov.w	r0, #4294967295
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	20000c88 	.word	0x20000c88
	...

0800b010 <chMBFetchTimeout>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 800b010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b012:	4604      	mov	r4, r0
 800b014:	460e      	mov	r6, r1
 800b016:	4615      	mov	r5, r2
 800b018:	2320      	movs	r3, #32
 800b01a:	f383 8811 	msr	BASEPRI, r3
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800b01e:	18c7      	adds	r7, r0, r3
 800b020:	e006      	b.n	800b030 <chMBFetchTimeout+0x20>
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800b022:	6923      	ldr	r3, [r4, #16]
 800b024:	b96b      	cbnz	r3, 800b042 <chMBFetchTimeout+0x32>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800b026:	4629      	mov	r1, r5
 800b028:	4638      	mov	r0, r7
 800b02a:	f7ff ffd9 	bl	800afe0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800b02e:	b920      	cbnz	r0, 800b03a <chMBFetchTimeout+0x2a>
    if (mbp->reset) {
 800b030:	7d23      	ldrb	r3, [r4, #20]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d0f5      	beq.n	800b022 <chMBFetchTimeout+0x12>
      return MSG_RESET;
 800b036:	f06f 0001 	mvn.w	r0, #1
 800b03a:	2300      	movs	r3, #0
 800b03c:	f383 8811 	msr	BASEPRI, r3
}
 800b040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *msgp = *mbp->rdptr++;
 800b042:	68e1      	ldr	r1, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 800b044:	6860      	ldr	r0, [r4, #4]
      *msgp = *mbp->rdptr++;
 800b046:	1d0a      	adds	r2, r1, #4
      if (mbp->rdptr >= mbp->top) {
 800b048:	4282      	cmp	r2, r0
      *msgp = *mbp->rdptr++;
 800b04a:	6809      	ldr	r1, [r1, #0]
 800b04c:	60e2      	str	r2, [r4, #12]
        mbp->rdptr = mbp->buffer;
 800b04e:	bf28      	it	cs
 800b050:	6822      	ldrcs	r2, [r4, #0]
      mbp->cnt--;
 800b052:	f103 33ff 	add.w	r3, r3, #4294967295
      *msgp = *mbp->rdptr++;
 800b056:	6031      	str	r1, [r6, #0]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 800b058:	f104 0018 	add.w	r0, r4, #24
        mbp->rdptr = mbp->buffer;
 800b05c:	bf28      	it	cs
 800b05e:	60e2      	strcs	r2, [r4, #12]
      mbp->cnt--;
 800b060:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 800b062:	f7fb fe15 	bl	8006c90 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 800b066:	f7fe ff7b 	bl	8009f60 <chSchRescheduleS>
      return MSG_OK;
 800b06a:	2000      	movs	r0, #0
 800b06c:	2300      	movs	r3, #0
 800b06e:	f383 8811 	msr	BASEPRI, r3
}
 800b072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b080 <chMBPostTimeout>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800b080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b082:	4604      	mov	r4, r0
 800b084:	460e      	mov	r6, r1
 800b086:	4615      	mov	r5, r2
 800b088:	2320      	movs	r3, #32
 800b08a:	f383 8811 	msr	BASEPRI, r3
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800b08e:	f100 0718 	add.w	r7, r0, #24
 800b092:	e00b      	b.n	800b0ac <chMBPostTimeout+0x2c>
 800b094:	6923      	ldr	r3, [r4, #16]
 800b096:	e9d4 1200 	ldrd	r1, r2, [r4]
  return (size_t)(mbp->top - mbp->buffer);
 800b09a:	1a50      	subs	r0, r2, r1
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800b09c:	ebb3 0fa0 	cmp.w	r3, r0, asr #2
 800b0a0:	d10d      	bne.n	800b0be <chMBPostTimeout+0x3e>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	4638      	mov	r0, r7
 800b0a6:	f7ff ff9b 	bl	800afe0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800b0aa:	b920      	cbnz	r0, 800b0b6 <chMBPostTimeout+0x36>
    if (mbp->reset) {
 800b0ac:	7d23      	ldrb	r3, [r4, #20]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d0f0      	beq.n	800b094 <chMBPostTimeout+0x14>
      return MSG_RESET;
 800b0b2:	f06f 0001 	mvn.w	r0, #1
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f383 8811 	msr	BASEPRI, r3
}
 800b0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *mbp->wrptr++ = msg;
 800b0be:	68a5      	ldr	r5, [r4, #8]
      mbp->cnt++;
 800b0c0:	3301      	adds	r3, #1
      *mbp->wrptr++ = msg;
 800b0c2:	1d28      	adds	r0, r5, #4
      if (mbp->wrptr >= mbp->top) {
 800b0c4:	4282      	cmp	r2, r0
      *mbp->wrptr++ = msg;
 800b0c6:	60a0      	str	r0, [r4, #8]
 800b0c8:	602e      	str	r6, [r5, #0]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 800b0ca:	f104 0020 	add.w	r0, r4, #32
        mbp->wrptr = mbp->buffer;
 800b0ce:	bf98      	it	ls
 800b0d0:	60a1      	strls	r1, [r4, #8]
      mbp->cnt++;
 800b0d2:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 800b0d4:	f7fb fddc 	bl	8006c90 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 800b0d8:	f7fe ff42 	bl	8009f60 <chSchRescheduleS>
      return MSG_OK;
 800b0dc:	2000      	movs	r0, #0
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f383 8811 	msr	BASEPRI, r3
}
 800b0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0e6:	bf00      	nop
	...

0800b0f0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	b085      	sub	sp, #20
 800b0f6:	f04f 0920 	mov.w	r9, #32
 800b0fa:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 800b0fe:	69c7      	ldr	r7, [r0, #28]
 800b100:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 800b104:	b3aa      	cbz	r2, 800b172 <oqWriteTimeout+0x82>
 800b106:	4604      	mov	r4, r0
 800b108:	460e      	mov	r6, r1
 800b10a:	f04f 0a00 	mov.w	sl, #0
 800b10e:	f8dd b00c 	ldr.w	fp, [sp, #12]
  if (n > oqGetEmptyI(oqp)) {
 800b112:	68a2      	ldr	r2, [r4, #8]
 800b114:	4593      	cmp	fp, r2
 800b116:	bf98      	it	ls
 800b118:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800b11a:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 800b11e:	bf88      	it	hi
 800b120:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800b122:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 800b126:	45a8      	cmp	r8, r5
 800b128:	d844      	bhi.n	800b1b4 <oqWriteTimeout+0xc4>
  else if (n > s1) {
 800b12a:	d229      	bcs.n	800b180 <oqWriteTimeout+0x90>
    s2 = n - s1;
 800b12c:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800b130:	4642      	mov	r2, r8
 800b132:	4631      	mov	r1, r6
    s2 = n - s1;
 800b134:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800b136:	f7f5 f899 	bl	800026c <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 800b13a:	eb06 0108 	add.w	r1, r6, r8
 800b13e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b142:	68e0      	ldr	r0, [r4, #12]
 800b144:	4642      	mov	r2, r8
 800b146:	f7f5 f891 	bl	800026c <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 800b14a:	4643      	mov	r3, r8
  oqp->q_counter -= n;
 800b14c:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 800b14e:	68e1      	ldr	r1, [r4, #12]
  oqp->q_counter -= n;
 800b150:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 800b152:	18cb      	adds	r3, r1, r3
 800b154:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 800b156:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 800b158:	b10f      	cbz	r7, 800b15e <oqWriteTimeout+0x6e>
        nfy(oqp);
 800b15a:	4620      	mov	r0, r4
 800b15c:	47b8      	blx	r7
 800b15e:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 800b162:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 800b166:	442e      	add	r6, r5
 800b168:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800b16c:	f1bb 0f00 	cmp.w	fp, #0
 800b170:	d1cf      	bne.n	800b112 <oqWriteTimeout+0x22>
 800b172:	2300      	movs	r3, #0
  if (n > oqGetEmptyI(oqp)) {
 800b174:	9803      	ldr	r0, [sp, #12]
 800b176:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 800b17a:	b005      	add	sp, #20
 800b17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800b180:	462a      	mov	r2, r5
 800b182:	4631      	mov	r1, r6
 800b184:	f7f5 f872 	bl	800026c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 800b188:	68e2      	ldr	r2, [r4, #12]
 800b18a:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 800b18c:	68a2      	ldr	r2, [r4, #8]
 800b18e:	1b52      	subs	r2, r2, r5
 800b190:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 800b192:	2d00      	cmp	r5, #0
 800b194:	d1e0      	bne.n	800b158 <oqWriteTimeout+0x68>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 800b196:	4620      	mov	r0, r4
 800b198:	9902      	ldr	r1, [sp, #8]
 800b19a:	f7ff ff21 	bl	800afe0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d0b7      	beq.n	800b112 <oqWriteTimeout+0x22>
 800b1a2:	9b03      	ldr	r3, [sp, #12]
 800b1a4:	eba3 000b 	sub.w	r0, r3, fp
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f383 8811 	msr	BASEPRI, r3
}
 800b1ae:	b005      	add	sp, #20
 800b1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800b1b4:	462a      	mov	r2, r5
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	f7f5 f858 	bl	800026c <memcpy>
    oqp->q_wrptr += n;
 800b1bc:	6962      	ldr	r2, [r4, #20]
 800b1be:	442a      	add	r2, r5
 800b1c0:	6162      	str	r2, [r4, #20]
 800b1c2:	e7e3      	b.n	800b18c <oqWriteTimeout+0x9c>
	...

0800b1d0 <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 800b1d0:	3030      	adds	r0, #48	; 0x30
 800b1d2:	f7ff bf8d 	b.w	800b0f0 <oqWriteTimeout>
 800b1d6:	bf00      	nop
	...

0800b1e0 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 800b1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e4:	3030      	adds	r0, #48	; 0x30
 800b1e6:	f7ff bf83 	b.w	800b0f0 <oqWriteTimeout>
 800b1ea:	bf00      	nop
 800b1ec:	0000      	movs	r0, r0
	...

0800b1f0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 800b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	460f      	mov	r7, r1
 800b1f6:	4616      	mov	r6, r2
 800b1f8:	2320      	movs	r3, #32
 800b1fa:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800b1fe:	e005      	b.n	800b20c <oqPutTimeout+0x1c>
 800b200:	4631      	mov	r1, r6
 800b202:	4620      	mov	r0, r4
 800b204:	f7ff feec 	bl	800afe0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 800b208:	2800      	cmp	r0, #0
 800b20a:	db17      	blt.n	800b23c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
 800b20c:	68a5      	ldr	r5, [r4, #8]
 800b20e:	2d00      	cmp	r5, #0
 800b210:	d0f6      	beq.n	800b200 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 800b212:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 800b214:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800b216:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 800b218:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800b21a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800b21c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800b21e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800b220:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b224:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800b226:	bf24      	itt	cs
 800b228:	68e3      	ldrcs	r3, [r4, #12]
 800b22a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800b22c:	69e3      	ldr	r3, [r4, #28]
 800b22e:	b10b      	cbz	r3, 800b234 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 800b230:	4620      	mov	r0, r4
 800b232:	4798      	blx	r3
 800b234:	2000      	movs	r0, #0
 800b236:	f380 8811 	msr	BASEPRI, r0
}
 800b23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b23c:	f385 8811 	msr	BASEPRI, r5
 800b240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b242:	bf00      	nop
	...

0800b250 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 800b250:	3030      	adds	r0, #48	; 0x30
 800b252:	f7ff bfcd 	b.w	800b1f0 <oqPutTimeout>
 800b256:	bf00      	nop
	...

0800b260 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 800b260:	f04f 32ff 	mov.w	r2, #4294967295
 800b264:	3030      	adds	r0, #48	; 0x30
 800b266:	f7ff bfc3 	b.w	800b1f0 <oqPutTimeout>
 800b26a:	bf00      	nop
 800b26c:	0000      	movs	r0, r0
	...

0800b270 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	b085      	sub	sp, #20
 800b276:	f04f 0920 	mov.w	r9, #32
 800b27a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 800b27e:	69c7      	ldr	r7, [r0, #28]
 800b280:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800b284:	2a00      	cmp	r2, #0
 800b286:	d035      	beq.n	800b2f4 <iqReadTimeout+0x84>
 800b288:	4604      	mov	r4, r0
 800b28a:	460e      	mov	r6, r1
 800b28c:	f04f 0a00 	mov.w	sl, #0
 800b290:	f8dd b00c 	ldr.w	fp, [sp, #12]
  if (n > iqGetFullI(iqp)) {
 800b294:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800b296:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 800b298:	4593      	cmp	fp, r2
 800b29a:	bf98      	it	ls
 800b29c:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800b29e:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 800b2a0:	bf88      	it	hi
 800b2a2:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800b2a4:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 800b2a8:	45a8      	cmp	r8, r5
 800b2aa:	d844      	bhi.n	800b336 <iqReadTimeout+0xc6>
  else if (n > s1) {
 800b2ac:	d229      	bcs.n	800b302 <iqReadTimeout+0x92>
    s2 = n - s1;
 800b2ae:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 800b2b2:	4642      	mov	r2, r8
 800b2b4:	4630      	mov	r0, r6
    s2 = n - s1;
 800b2b6:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 800b2b8:	f7f4 ffd8 	bl	800026c <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 800b2bc:	eb06 0008 	add.w	r0, r6, r8
 800b2c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b2c4:	68e1      	ldr	r1, [r4, #12]
 800b2c6:	4642      	mov	r2, r8
 800b2c8:	f7f4 ffd0 	bl	800026c <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 800b2cc:	4643      	mov	r3, r8
  iqp->q_counter -= n;
 800b2ce:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 800b2d0:	68e1      	ldr	r1, [r4, #12]
  iqp->q_counter -= n;
 800b2d2:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 800b2d4:	18cb      	adds	r3, r1, r3
 800b2d6:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 800b2d8:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 800b2da:	b10f      	cbz	r7, 800b2e0 <iqReadTimeout+0x70>
        nfy(iqp);
 800b2dc:	4620      	mov	r0, r4
 800b2de:	47b8      	blx	r7
 800b2e0:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 800b2e4:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 800b2e8:	442e      	add	r6, r5
 800b2ea:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800b2ee:	f1bb 0f00 	cmp.w	fp, #0
 800b2f2:	d1cf      	bne.n	800b294 <iqReadTimeout+0x24>
 800b2f4:	2300      	movs	r3, #0
  if (n > iqGetFullI(iqp)) {
 800b2f6:	9803      	ldr	r0, [sp, #12]
 800b2f8:	f383 8811 	msr	BASEPRI, r3
}
 800b2fc:	b005      	add	sp, #20
 800b2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800b302:	462a      	mov	r2, r5
 800b304:	4630      	mov	r0, r6
 800b306:	f7f4 ffb1 	bl	800026c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 800b30a:	68e2      	ldr	r2, [r4, #12]
 800b30c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800b30e:	68a2      	ldr	r2, [r4, #8]
 800b310:	1b52      	subs	r2, r2, r5
 800b312:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 800b314:	2d00      	cmp	r5, #0
 800b316:	d1e0      	bne.n	800b2da <iqReadTimeout+0x6a>
 800b318:	4620      	mov	r0, r4
 800b31a:	9902      	ldr	r1, [sp, #8]
 800b31c:	f7ff fe60 	bl	800afe0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800b320:	2800      	cmp	r0, #0
 800b322:	d0b7      	beq.n	800b294 <iqReadTimeout+0x24>
 800b324:	9b03      	ldr	r3, [sp, #12]
 800b326:	eba3 000b 	sub.w	r0, r3, fp
 800b32a:	2300      	movs	r3, #0
 800b32c:	f383 8811 	msr	BASEPRI, r3
}
 800b330:	b005      	add	sp, #20
 800b332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800b336:	462a      	mov	r2, r5
 800b338:	4630      	mov	r0, r6
 800b33a:	f7f4 ff97 	bl	800026c <memcpy>
    iqp->q_rdptr += n;
 800b33e:	69a2      	ldr	r2, [r4, #24]
 800b340:	442a      	add	r2, r5
 800b342:	61a2      	str	r2, [r4, #24]
 800b344:	e7e3      	b.n	800b30e <iqReadTimeout+0x9e>
 800b346:	bf00      	nop
	...

0800b350 <_readt.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800b350:	300c      	adds	r0, #12
 800b352:	f7ff bf8d 	b.w	800b270 <iqReadTimeout>
 800b356:	bf00      	nop
	...

0800b360 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 800b360:	f04f 33ff 	mov.w	r3, #4294967295
 800b364:	300c      	adds	r0, #12
 800b366:	f7ff bf83 	b.w	800b270 <iqReadTimeout>
 800b36a:	bf00      	nop
 800b36c:	0000      	movs	r0, r0
	...

0800b370 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	2320      	movs	r3, #32
 800b374:	4605      	mov	r5, r0
 800b376:	460e      	mov	r6, r1
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	e005      	b.n	800b38a <iqGetTimeout+0x1a>
 800b37e:	4631      	mov	r1, r6
 800b380:	4628      	mov	r0, r5
 800b382:	f7ff fe2d 	bl	800afe0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 800b386:	2800      	cmp	r0, #0
 800b388:	db18      	blt.n	800b3bc <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 800b38a:	68ac      	ldr	r4, [r5, #8]
 800b38c:	2c00      	cmp	r4, #0
 800b38e:	d0f6      	beq.n	800b37e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 800b390:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 800b392:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800b394:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 800b396:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 800b398:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800b39a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800b39c:	60ab      	str	r3, [r5, #8]
    iqp->q_rdptr = iqp->q_buffer;
 800b39e:	bf28      	it	cs
 800b3a0:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 800b3a2:	61aa      	str	r2, [r5, #24]
 800b3a4:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800b3a6:	bf28      	it	cs
 800b3a8:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 800b3aa:	69eb      	ldr	r3, [r5, #28]
 800b3ac:	b10b      	cbz	r3, 800b3b2 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	4798      	blx	r3
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 800b3b8:	4620      	mov	r0, r4
}
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}
 800b3bc:	f384 8811 	msr	BASEPRI, r4
 800b3c0:	bd70      	pop	{r4, r5, r6, pc}
 800b3c2:	bf00      	nop
	...

0800b3d0 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 800b3d0:	300c      	adds	r0, #12
 800b3d2:	f7ff bfcd 	b.w	800b370 <iqGetTimeout>
 800b3d6:	bf00      	nop
	...

0800b3e0 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 800b3e0:	f04f 31ff 	mov.w	r1, #4294967295
 800b3e4:	300c      	adds	r0, #12
 800b3e6:	f7ff bfc3 	b.w	800b370 <iqGetTimeout>
 800b3ea:	bf00      	nop
 800b3ec:	0000      	movs	r0, r0
	...

0800b3f0 <chThdSuspendTimeoutS>:
  return ch.rlist.current;
 800b3f0:	4a05      	ldr	r2, [pc, #20]	; (800b408 <chThdSuspendTimeoutS+0x18>)
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	6992      	ldr	r2, [r2, #24]
  if (TIME_IMMEDIATE == timeout) {
 800b3f6:	b121      	cbz	r1, 800b402 <chThdSuspendTimeoutS+0x12>
  *trp = tp;
 800b3f8:	6002      	str	r2, [r0, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800b3fa:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 800b3fc:	6253      	str	r3, [r2, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800b3fe:	f7ff bd8f 	b.w	800af20 <chSchGoSleepTimeoutS>
}
 800b402:	f04f 30ff 	mov.w	r0, #4294967295
 800b406:	4770      	bx	lr
 800b408:	20000c88 	.word	0x20000c88
 800b40c:	00000000 	.word	0x00000000

0800b410 <spiReceive>:
 800b410:	2320      	movs	r3, #32
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 800b412:	b570      	push	{r4, r5, r6, lr}
 800b414:	f383 8811 	msr	BASEPRI, r3

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800b418:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartReceiveI(spip, n, rxbuf);
 800b41c:	2503      	movs	r5, #3
 800b41e:	7005      	strb	r5, [r0, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800b420:	6864      	ldr	r4, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800b422:	6a85      	ldr	r5, [r0, #40]	; 0x28
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	4e0d      	ldr	r6, [pc, #52]	; (800b45c <spiReceive+0x4c>)
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800b428:	60e2      	str	r2, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 800b42a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800b42c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  dmaStreamSetTransactionSize(spip->dmarx, n);
 800b430:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800b432:	6025      	str	r5, [r4, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800b434:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800b436:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 800b438:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 800b43a:	6822      	ldr	r2, [r4, #0]
  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 800b43c:	f04f 31ff 	mov.w	r1, #4294967295
 800b440:	f042 0201 	orr.w	r2, r2, #1
 800b444:	6022      	str	r2, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	3008      	adds	r0, #8
 800b44a:	f042 0201 	orr.w	r2, r2, #1
 800b44e:	601a      	str	r2, [r3, #0]
 800b450:	f7ff ffce 	bl	800b3f0 <chThdSuspendTimeoutS>
 800b454:	2300      	movs	r3, #0
 800b456:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 800b45a:	bd70      	pop	{r4, r5, r6, pc}
 800b45c:	0800eea4 	.word	0x0800eea4

0800b460 <recvr1.isra.0>:
static uint8_t recvr1(MMCDriver *mmcp) {
 800b460:	b530      	push	{r4, r5, lr}
 800b462:	2409      	movs	r4, #9
 800b464:	4605      	mov	r5, r0
 800b466:	b083      	sub	sp, #12
    spiReceive(mmcp->config->spip, 1, r1);
 800b468:	682b      	ldr	r3, [r5, #0]
 800b46a:	2101      	movs	r1, #1
 800b46c:	6818      	ldr	r0, [r3, #0]
 800b46e:	aa01      	add	r2, sp, #4
 800b470:	f7ff ffce 	bl	800b410 <spiReceive>
    if (r1[0] != 0xFFU) {
 800b474:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800b478:	28ff      	cmp	r0, #255	; 0xff
 800b47a:	d101      	bne.n	800b480 <recvr1.isra.0+0x20>
  for (i = 0; i < 9; i++) {
 800b47c:	3c01      	subs	r4, #1
 800b47e:	d1f3      	bne.n	800b468 <recvr1.isra.0+0x8>
}
 800b480:	b003      	add	sp, #12
 800b482:	bd30      	pop	{r4, r5, pc}
	...

0800b490 <spiSend>:
 800b490:	2320      	movs	r3, #32
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 800b492:	b570      	push	{r4, r5, r6, lr}
 800b494:	f383 8811 	msr	BASEPRI, r3
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800b498:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
  spiStartSendI(spip, n, txbuf);
 800b49c:	2503      	movs	r5, #3
 800b49e:	7005      	strb	r5, [r0, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800b4a0:	6864      	ldr	r4, [r4, #4]
 800b4a2:	4e0e      	ldr	r6, [pc, #56]	; (800b4dc <spiSend+0x4c>)
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800b4a4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800b4a6:	685b      	ldr	r3, [r3, #4]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800b4a8:	60e6      	str	r6, [r4, #12]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800b4aa:	6a86      	ldr	r6, [r0, #40]	; 0x28
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800b4ac:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  dmaStreamSetTransactionSize(spip->dmarx, n);
 800b4b0:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800b4b2:	6026      	str	r6, [r4, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800b4b4:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800b4b6:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800b4b8:	601d      	str	r5, [r3, #0]
  dmaStreamEnable(spip->dmarx);
 800b4ba:	6822      	ldr	r2, [r4, #0]
 800b4bc:	f04f 31ff 	mov.w	r1, #4294967295
 800b4c0:	f042 0201 	orr.w	r2, r2, #1
 800b4c4:	6022      	str	r2, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	3008      	adds	r0, #8
 800b4ca:	f042 0201 	orr.w	r2, r2, #1
 800b4ce:	601a      	str	r2, [r3, #0]
 800b4d0:	f7ff ff8e 	bl	800b3f0 <chThdSuspendTimeoutS>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	f383 8811 	msr	BASEPRI, r3
}
 800b4da:	bd70      	pop	{r4, r5, r6, pc}
 800b4dc:	20002400 	.word	0x20002400

0800b4e0 <spiIgnore>:
 800b4e0:	2320      	movs	r3, #32
void spiIgnore(SPIDriver *spip, size_t n) {
 800b4e2:	b570      	push	{r4, r5, r6, lr}
 800b4e4:	f383 8811 	msr	BASEPRI, r3
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800b4e8:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
  spiStartIgnoreI(spip, n);
 800b4ec:	2403      	movs	r4, #3
 800b4ee:	7004      	strb	r4, [r0, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800b4f0:	6852      	ldr	r2, [r2, #4]
 800b4f2:	4c0e      	ldr	r4, [pc, #56]	; (800b52c <spiIgnore+0x4c>)
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800b4f4:	685b      	ldr	r3, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800b4f6:	6a86      	ldr	r6, [r0, #40]	; 0x28
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800b4f8:	4d0d      	ldr	r5, [pc, #52]	; (800b530 <spiIgnore+0x50>)
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800b4fa:	60d4      	str	r4, [r2, #12]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 800b4fc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  dmaStreamSetTransactionSize(spip->dmarx, n);
 800b4fe:	6051      	str	r1, [r2, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800b500:	6016      	str	r6, [r2, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800b502:	60dd      	str	r5, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800b504:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 800b506:	601c      	str	r4, [r3, #0]
  dmaStreamEnable(spip->dmarx);
 800b508:	6811      	ldr	r1, [r2, #0]
 800b50a:	3008      	adds	r0, #8
 800b50c:	f041 0101 	orr.w	r1, r1, #1
 800b510:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	f04f 31ff 	mov.w	r1, #4294967295
 800b518:	f042 0201 	orr.w	r2, r2, #1
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	f7ff ff67 	bl	800b3f0 <chThdSuspendTimeoutS>
 800b522:	2300      	movs	r3, #0
 800b524:	f383 8811 	msr	BASEPRI, r3
}
 800b528:	bd70      	pop	{r4, r5, r6, pc}
 800b52a:	bf00      	nop
 800b52c:	20002400 	.word	0x20002400
 800b530:	0800eea4 	.word	0x0800eea4
	...

0800b540 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 800b540:	b508      	push	{r3, lr}
 800b542:	4601      	mov	r1, r0
 800b544:	2320      	movs	r3, #32
 800b546:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800b54a:	2008      	movs	r0, #8
 800b54c:	f7ff fce8 	bl	800af20 <chSchGoSleepTimeoutS>
 800b550:	2300      	movs	r3, #0
 800b552:	f383 8811 	msr	BASEPRI, r3
}
 800b556:	bd08      	pop	{r3, pc}
	...

0800b560 <sync.isra.0>:
static void sync(MMCDriver *mmcp) {
 800b560:	b510      	push	{r4, lr}
  spiSelect(mmcp->config->spip);
 800b562:	6803      	ldr	r3, [r0, #0]
static void sync(MMCDriver *mmcp) {
 800b564:	4604      	mov	r4, r0
 800b566:	b082      	sub	sp, #8
  spiSelect(mmcp->config->spip);
 800b568:	6818      	ldr	r0, [r3, #0]
 800b56a:	f7fd ff59 	bl	8009420 <spiSelect>
 800b56e:	e002      	b.n	800b576 <sync.isra.0+0x16>
  chThdSleep(delay);
 800b570:	2002      	movs	r0, #2
 800b572:	f7ff ffe5 	bl	800b540 <chThdSleep>
    spiReceive(mmcp->config->spip, 1, buf);
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	2101      	movs	r1, #1
 800b57a:	6818      	ldr	r0, [r3, #0]
 800b57c:	aa01      	add	r2, sp, #4
 800b57e:	f7ff ff47 	bl	800b410 <spiReceive>
    if (buf[0] == 0xFFU) {
 800b582:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b586:	2bff      	cmp	r3, #255	; 0xff
 800b588:	d1f2      	bne.n	800b570 <sync.isra.0+0x10>
  spiUnselect(mmcp->config->spip);
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	6818      	ldr	r0, [r3, #0]
 800b58e:	f7fd ff37 	bl	8009400 <spiUnselect>
}
 800b592:	b002      	add	sp, #8
 800b594:	bd10      	pop	{r4, pc}
 800b596:	bf00      	nop
	...

0800b5a0 <mmcSync>:
bool mmcSync(MMCDriver *mmcp) {
 800b5a0:	b570      	push	{r4, r5, r6, lr}
  if (mmcp->state != BLK_READY) {
 800b5a2:	7905      	ldrb	r5, [r0, #4]
 800b5a4:	2d05      	cmp	r5, #5
 800b5a6:	d001      	beq.n	800b5ac <mmcSync+0xc>
    return HAL_FAILED;
 800b5a8:	2001      	movs	r0, #1
}
 800b5aa:	bd70      	pop	{r4, r5, r6, pc}
  mmcp->state = BLK_SYNCING;
 800b5ac:	2308      	movs	r3, #8
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	4604      	mov	r4, r0
  mmcp->state = BLK_SYNCING;
 800b5b2:	7103      	strb	r3, [r0, #4]
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800b5b4:	f856 3f2c 	ldr.w	r3, [r6, #44]!
 800b5b8:	6818      	ldr	r0, [r3, #0]
 800b5ba:	6899      	ldr	r1, [r3, #8]
 800b5bc:	f7fd ffc8 	bl	8009550 <spiStart>
  sync(mmcp);
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f7ff ffcd 	bl	800b560 <sync.isra.0>
  mmcp->state = BLK_READY;
 800b5c6:	7125      	strb	r5, [r4, #4]
 800b5c8:	2000      	movs	r0, #0
}
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
 800b5cc:	0000      	movs	r0, r0
	...

0800b5d0 <mmcDisconnect>:
bool mmcDisconnect(MMCDriver *mmcp) {
 800b5d0:	b538      	push	{r3, r4, r5, lr}
 800b5d2:	2320      	movs	r3, #32
 800b5d4:	f383 8811 	msr	BASEPRI, r3
  if (mmcp->state == BLK_ACTIVE) {
 800b5d8:	7903      	ldrb	r3, [r0, #4]
 800b5da:	2b02      	cmp	r3, #2
 800b5dc:	d017      	beq.n	800b60e <mmcDisconnect+0x3e>
  mmcp->state = BLK_DISCONNECTING;
 800b5de:	2204      	movs	r2, #4
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	7102      	strb	r2, [r0, #4]
 800b5e6:	f383 8811 	msr	BASEPRI, r3
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	f855 3f2c 	ldr.w	r3, [r5, #44]!
 800b5f0:	6899      	ldr	r1, [r3, #8]
 800b5f2:	6818      	ldr	r0, [r3, #0]
 800b5f4:	f7fd ffac 	bl	8009550 <spiStart>
  sync(mmcp);
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	f7ff ffb1 	bl	800b560 <sync.isra.0>
  spiStop(mmcp->config->spip);
 800b5fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b600:	6818      	ldr	r0, [r3, #0]
 800b602:	f7fd ff1d 	bl	8009440 <spiStop>
  mmcp->state = BLK_ACTIVE;
 800b606:	2302      	movs	r3, #2
 800b608:	7123      	strb	r3, [r4, #4]
}
 800b60a:	2000      	movs	r0, #0
 800b60c:	bd38      	pop	{r3, r4, r5, pc}
 800b60e:	2300      	movs	r3, #0
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	2000      	movs	r0, #0
 800b616:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b620 <wait.isra.0>:
static void wait(MMCDriver *mmcp) {
 800b620:	b530      	push	{r4, r5, lr}
 800b622:	2410      	movs	r4, #16
 800b624:	4605      	mov	r5, r0
 800b626:	b083      	sub	sp, #12
    spiReceive(mmcp->config->spip, 1, buf);
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	2101      	movs	r1, #1
 800b62c:	6818      	ldr	r0, [r3, #0]
 800b62e:	aa01      	add	r2, sp, #4
 800b630:	f7ff feee 	bl	800b410 <spiReceive>
    if (buf[0] == 0xFFU) {
 800b634:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b638:	2bff      	cmp	r3, #255	; 0xff
 800b63a:	d00f      	beq.n	800b65c <wait.isra.0+0x3c>
  for (i = 0; i < 16; i++) {
 800b63c:	3c01      	subs	r4, #1
 800b63e:	d1f3      	bne.n	800b628 <wait.isra.0+0x8>
 800b640:	e002      	b.n	800b648 <wait.isra.0+0x28>
 800b642:	2002      	movs	r0, #2
 800b644:	f7ff ff7c 	bl	800b540 <chThdSleep>
    spiReceive(mmcp->config->spip, 1, buf);
 800b648:	682b      	ldr	r3, [r5, #0]
 800b64a:	2101      	movs	r1, #1
 800b64c:	6818      	ldr	r0, [r3, #0]
 800b64e:	aa01      	add	r2, sp, #4
 800b650:	f7ff fede 	bl	800b410 <spiReceive>
    if (buf[0] == 0xFFU) {
 800b654:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b658:	2bff      	cmp	r3, #255	; 0xff
 800b65a:	d1f2      	bne.n	800b642 <wait.isra.0+0x22>
}
 800b65c:	b003      	add	sp, #12
 800b65e:	bd30      	pop	{r4, r5, pc}

0800b660 <mmcSequentialWrite>:
  if (mmcp->state != BLK_WRITING) {
 800b660:	7903      	ldrb	r3, [r0, #4]
 800b662:	2b07      	cmp	r3, #7
 800b664:	d001      	beq.n	800b66a <mmcSequentialWrite+0xa>
    return HAL_FAILED;
 800b666:	2001      	movs	r0, #1
}
 800b668:	4770      	bx	lr
bool mmcSequentialWrite(MMCDriver *mmcp, const uint8_t *buffer) {
 800b66a:	b530      	push	{r4, r5, lr}
 800b66c:	4604      	mov	r4, r0
 800b66e:	460d      	mov	r5, r1
  spiSend(mmcp->config->spip, sizeof(start), start);    /* Data prologue.   */
 800b670:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
bool mmcSequentialWrite(MMCDriver *mmcp, const uint8_t *buffer) {
 800b672:	b083      	sub	sp, #12
  spiSend(mmcp->config->spip, sizeof(start), start);    /* Data prologue.   */
 800b674:	6818      	ldr	r0, [r3, #0]
 800b676:	2102      	movs	r1, #2
 800b678:	4a16      	ldr	r2, [pc, #88]	; (800b6d4 <mmcSequentialWrite+0x74>)
 800b67a:	f7ff ff09 	bl	800b490 <spiSend>
  spiSend(mmcp->config->spip, MMCSD_BLOCK_SIZE, buffer);/* Data.            */
 800b67e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b680:	462a      	mov	r2, r5
 800b682:	6818      	ldr	r0, [r3, #0]
 800b684:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b688:	f7ff ff02 	bl	800b490 <spiSend>
  spiIgnore(mmcp->config->spip, 2);                     /* CRC ignored.     */
 800b68c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b68e:	2102      	movs	r1, #2
 800b690:	6818      	ldr	r0, [r3, #0]
 800b692:	f7ff ff25 	bl	800b4e0 <spiIgnore>
  spiReceive(mmcp->config->spip, 1, b);
 800b696:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b698:	2101      	movs	r1, #1
 800b69a:	6818      	ldr	r0, [r3, #0]
 800b69c:	aa01      	add	r2, sp, #4
 800b69e:	f7ff feb7 	bl	800b410 <spiReceive>
  if ((b[0] & 0x1FU) == 0x05U) {
 800b6a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b6a6:	f003 031f 	and.w	r3, r3, #31
 800b6aa:	2b05      	cmp	r3, #5
 800b6ac:	d00c      	beq.n	800b6c8 <mmcSequentialWrite+0x68>
  spiUnselect(mmcp->config->spip);
 800b6ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b6b0:	6818      	ldr	r0, [r3, #0]
 800b6b2:	f7fd fea5 	bl	8009400 <spiUnselect>
  spiStop(mmcp->config->spip);
 800b6b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b6b8:	6818      	ldr	r0, [r3, #0]
 800b6ba:	f7fd fec1 	bl	8009440 <spiStop>
  mmcp->state = BLK_READY;
 800b6be:	2305      	movs	r3, #5
 800b6c0:	2001      	movs	r0, #1
 800b6c2:	7123      	strb	r3, [r4, #4]
}
 800b6c4:	b003      	add	sp, #12
 800b6c6:	bd30      	pop	{r4, r5, pc}
    wait(mmcp);
 800b6c8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800b6cc:	f7ff ffa8 	bl	800b620 <wait.isra.0>
    return HAL_SUCCESS;
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	e7f7      	b.n	800b6c4 <mmcSequentialWrite+0x64>
 800b6d4:	0800f624 	.word	0x0800f624
	...

0800b6e0 <send_hdr>:
static void send_hdr(MMCDriver *mmcp, uint8_t cmd, uint32_t arg) {
 800b6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6e2:	4617      	mov	r7, r2
 800b6e4:	460c      	mov	r4, r1
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	4606      	mov	r6, r0
  wait(mmcp);
 800b6ea:	302c      	adds	r0, #44	; 0x2c
 800b6ec:	f7ff ff98 	bl	800b620 <wait.isra.0>
  buf[0] = (uint8_t)0x40U | cmd;
 800b6f0:	f044 0140 	orr.w	r1, r4, #64	; 0x40
  buf[2] = (uint8_t)(arg >> 16U);
 800b6f4:	0c3a      	lsrs	r2, r7, #16
  buf[3] = (uint8_t)(arg >> 8U);
 800b6f6:	0a3b      	lsrs	r3, r7, #8
  buf[1] = (uint8_t)(arg >> 24U);
 800b6f8:	0e38      	lsrs	r0, r7, #24
  buf[2] = (uint8_t)(arg >> 16U);
 800b6fa:	f88d 2002 	strb.w	r2, [sp, #2]
  buf[3] = (uint8_t)(arg >> 8U);
 800b6fe:	f88d 3003 	strb.w	r3, [sp, #3]
  buf[4] = (uint8_t)arg;
 800b702:	2500      	movs	r5, #0
 800b704:	4c0f      	ldr	r4, [pc, #60]	; (800b744 <send_hdr+0x64>)
  buf[0] = (uint8_t)0x40U | cmd;
 800b706:	f88d 1000 	strb.w	r1, [sp]
  buf[4] = (uint8_t)arg;
 800b70a:	f88d 7004 	strb.w	r7, [sp, #4]
  buf[1] = (uint8_t)(arg >> 24U);
 800b70e:	f88d 0001 	strb.w	r0, [sp, #1]
  while (len > 0U) {
 800b712:	f10d 0301 	add.w	r3, sp, #1
 800b716:	f10d 0205 	add.w	r2, sp, #5
 800b71a:	e001      	b.n	800b720 <send_hdr+0x40>
 800b71c:	f813 1b01 	ldrb.w	r1, [r3], #1
    crc = crc7_lookup_table[(crc << 1) ^ (*buffer++)];
 800b720:	ea81 0145 	eor.w	r1, r1, r5, lsl #1
  while (len > 0U) {
 800b724:	429a      	cmp	r2, r3
    crc = crc7_lookup_table[(crc << 1) ^ (*buffer++)];
 800b726:	5c65      	ldrb	r5, [r4, r1]
  while (len > 0U) {
 800b728:	d1f8      	bne.n	800b71c <send_hdr+0x3c>
  buf[5] = ((crc7(0, buf, 5U) & 0x7FU) << 1U) | 0x01U;
 800b72a:	0069      	lsls	r1, r5, #1
  spiSend(mmcp->config->spip, 6, buf);
 800b72c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  buf[5] = ((crc7(0, buf, 5U) & 0x7FU) << 1U) | 0x01U;
 800b72e:	f041 0101 	orr.w	r1, r1, #1
 800b732:	f88d 1005 	strb.w	r1, [sp, #5]
  spiSend(mmcp->config->spip, 6, buf);
 800b736:	466a      	mov	r2, sp
 800b738:	2106      	movs	r1, #6
 800b73a:	6818      	ldr	r0, [r3, #0]
 800b73c:	f7ff fea8 	bl	800b490 <spiSend>
}
 800b740:	b003      	add	sp, #12
 800b742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b744:	0800eda4 	.word	0x0800eda4
	...

0800b750 <mmcStartSequentialWrite>:
  mmcp->state = BLK_WRITING;
 800b750:	2207      	movs	r2, #7
bool mmcStartSequentialWrite(MMCDriver *mmcp, uint32_t startblk) {
 800b752:	b538      	push	{r3, r4, r5, lr}
 800b754:	4604      	mov	r4, r0
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800b756:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  mmcp->state = BLK_WRITING;
 800b758:	7102      	strb	r2, [r0, #4]
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800b75a:	6818      	ldr	r0, [r3, #0]
bool mmcStartSequentialWrite(MMCDriver *mmcp, uint32_t startblk) {
 800b75c:	460d      	mov	r5, r1
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800b75e:	6899      	ldr	r1, [r3, #8]
 800b760:	f7fd fef6 	bl	8009550 <spiStart>
  spiSelect(mmcp->config->spip);
 800b764:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b766:	6818      	ldr	r0, [r3, #0]
 800b768:	f7fd fe5a 	bl	8009420 <spiSelect>
  if (mmcp->block_addresses) {
 800b76c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800b770:	b153      	cbz	r3, 800b788 <mmcStartSequentialWrite+0x38>
    send_hdr(mmcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK, startblk);
 800b772:	4620      	mov	r0, r4
 800b774:	462a      	mov	r2, r5
 800b776:	2119      	movs	r1, #25
 800b778:	f7ff ffb2 	bl	800b6e0 <send_hdr>
  if (recvr1(mmcp) != 0x00U) {
 800b77c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800b780:	f7ff fe6e 	bl	800b460 <recvr1.isra.0>
 800b784:	b958      	cbnz	r0, 800b79e <mmcStartSequentialWrite+0x4e>
}
 800b786:	bd38      	pop	{r3, r4, r5, pc}
    send_hdr(mmcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK,
 800b788:	4620      	mov	r0, r4
 800b78a:	2119      	movs	r1, #25
 800b78c:	026a      	lsls	r2, r5, #9
 800b78e:	f7ff ffa7 	bl	800b6e0 <send_hdr>
  if (recvr1(mmcp) != 0x00U) {
 800b792:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800b796:	f7ff fe63 	bl	800b460 <recvr1.isra.0>
 800b79a:	2800      	cmp	r0, #0
 800b79c:	d0f3      	beq.n	800b786 <mmcStartSequentialWrite+0x36>
    spiStop(mmcp->config->spip);
 800b79e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b7a0:	6818      	ldr	r0, [r3, #0]
 800b7a2:	f7fd fe4d 	bl	8009440 <spiStop>
    mmcp->state = BLK_READY;
 800b7a6:	2305      	movs	r3, #5
 800b7a8:	7123      	strb	r3, [r4, #4]
 800b7aa:	2001      	movs	r0, #1
}
 800b7ac:	bd38      	pop	{r3, r4, r5, pc}
 800b7ae:	bf00      	nop

0800b7b0 <disk_write>:
    const BYTE *buff, /* Data to be written */
    DWORD sector,     /* Sector address (LBA) */
    UINT count        /* Number of sectors to write (1..255) */
)
{
  switch (pdrv) {
 800b7b0:	bb10      	cbnz	r0, 800b7f8 <disk_write+0x48>
{
 800b7b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if HAL_USE_MMC_SPI
  case MMC:
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800b7b4:	4e1b      	ldr	r6, [pc, #108]	; (800b824 <disk_write+0x74>)
 800b7b6:	461d      	mov	r5, r3
 800b7b8:	7933      	ldrb	r3, [r6, #4]
 800b7ba:	2b05      	cmp	r3, #5
 800b7bc:	d001      	beq.n	800b7c2 <disk_write+0x12>
        return RES_NOTRDY;
 800b7be:	2003      	movs	r0, #3
      return RES_ERROR;
    return RES_OK;
#endif
  }
  return RES_PARERR;
}
 800b7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return !palReadPad(GPIOC, GPIOC_MMCWP);
 800b7c2:	4b19      	ldr	r3, [pc, #100]	; (800b828 <disk_write+0x78>)
 800b7c4:	689b      	ldr	r3, [r3, #8]
    if (mmcIsWriteProtected(&FATFS_HAL_DEVICE))
 800b7c6:	065b      	lsls	r3, r3, #25
 800b7c8:	d518      	bpl.n	800b7fc <disk_write+0x4c>
    if (mmcStartSequentialWrite(&FATFS_HAL_DEVICE, sector))
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	f7ff ffbe 	bl	800b750 <mmcStartSequentialWrite>
 800b7d4:	b970      	cbnz	r0, 800b7f4 <disk_write+0x44>
    while (count > 0) {
 800b7d6:	b19d      	cbz	r5, 800b800 <disk_write+0x50>
        if (mmcSequentialWrite(&FATFS_HAL_DEVICE, buff))
 800b7d8:	4637      	mov	r7, r6
 800b7da:	eb04 2545 	add.w	r5, r4, r5, lsl #9
 800b7de:	e001      	b.n	800b7e4 <disk_write+0x34>
    while (count > 0) {
 800b7e0:	42a5      	cmp	r5, r4
 800b7e2:	d00d      	beq.n	800b800 <disk_write+0x50>
        if (mmcSequentialWrite(&FATFS_HAL_DEVICE, buff))
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	f7ff ff3a 	bl	800b660 <mmcSequentialWrite>
        buff += MMCSD_BLOCK_SIZE;
 800b7ec:	f504 7400 	add.w	r4, r4, #512	; 0x200
        if (mmcSequentialWrite(&FATFS_HAL_DEVICE, buff))
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d0f5      	beq.n	800b7e0 <disk_write+0x30>
        return RES_ERROR;
 800b7f4:	2001      	movs	r0, #1
}
 800b7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return RES_PARERR;
 800b7f8:	2004      	movs	r0, #4
}
 800b7fa:	4770      	bx	lr
        return RES_WRPRT;
 800b7fc:	2002      	movs	r0, #2
}
 800b7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (mmcp->state != BLK_WRITING) {
 800b800:	7933      	ldrb	r3, [r6, #4]
 800b802:	2b07      	cmp	r3, #7
 800b804:	d1f6      	bne.n	800b7f4 <disk_write+0x44>
  spiSend(mmcp->config->spip, sizeof(stop), stop);
 800b806:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800b808:	2102      	movs	r1, #2
 800b80a:	4a08      	ldr	r2, [pc, #32]	; (800b82c <disk_write+0x7c>)
 800b80c:	6818      	ldr	r0, [r3, #0]
 800b80e:	f7ff fe3f 	bl	800b490 <spiSend>
  spiUnselect(mmcp->config->spip);
 800b812:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800b814:	6818      	ldr	r0, [r3, #0]
 800b816:	f7fd fdf3 	bl	8009400 <spiUnselect>
  mmcp->state = BLK_READY;
 800b81a:	2305      	movs	r3, #5
    return RES_OK;
 800b81c:	2000      	movs	r0, #0
 800b81e:	7133      	strb	r3, [r6, #4]
}
 800b820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b822:	bf00      	nop
 800b824:	20000918 	.word	0x20000918
 800b828:	40011000 	.word	0x40011000
 800b82c:	0800f668 	.word	0x0800f668

0800b830 <mmc_write.lto_priv.0>:
                 const uint8_t *buffer, uint32_t n) {
 800b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b832:	4614      	mov	r4, r2
 800b834:	461d      	mov	r5, r3
 800b836:	4606      	mov	r6, r0
  if (mmcStartSequentialWrite((MMCDriver *)instance, startblk)) {
 800b838:	f7ff ff8a 	bl	800b750 <mmcStartSequentialWrite>
 800b83c:	b960      	cbnz	r0, 800b858 <mmc_write.lto_priv.0+0x28>
  while (n > 0U) {
 800b83e:	4607      	mov	r7, r0
 800b840:	b915      	cbnz	r5, 800b848 <mmc_write.lto_priv.0+0x18>
 800b842:	e00c      	b.n	800b85e <mmc_write.lto_priv.0+0x2e>
 800b844:	3d01      	subs	r5, #1
 800b846:	d00a      	beq.n	800b85e <mmc_write.lto_priv.0+0x2e>
    if (mmcSequentialWrite((MMCDriver *)instance, buffer)) {
 800b848:	4621      	mov	r1, r4
 800b84a:	4630      	mov	r0, r6
 800b84c:	f7ff ff08 	bl	800b660 <mmcSequentialWrite>
    buffer += MMCSD_BLOCK_SIZE;
 800b850:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (mmcSequentialWrite((MMCDriver *)instance, buffer)) {
 800b854:	2800      	cmp	r0, #0
 800b856:	d0f5      	beq.n	800b844 <mmc_write.lto_priv.0+0x14>
    return HAL_FAILED;
 800b858:	2701      	movs	r7, #1
}
 800b85a:	4638      	mov	r0, r7
 800b85c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (mmcp->state != BLK_WRITING) {
 800b85e:	7933      	ldrb	r3, [r6, #4]
 800b860:	2b07      	cmp	r3, #7
 800b862:	d1f9      	bne.n	800b858 <mmc_write.lto_priv.0+0x28>
  spiSend(mmcp->config->spip, sizeof(stop), stop);
 800b864:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800b866:	2102      	movs	r1, #2
 800b868:	4a05      	ldr	r2, [pc, #20]	; (800b880 <mmc_write.lto_priv.0+0x50>)
 800b86a:	6818      	ldr	r0, [r3, #0]
 800b86c:	f7ff fe10 	bl	800b490 <spiSend>
  spiUnselect(mmcp->config->spip);
 800b870:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800b872:	6818      	ldr	r0, [r3, #0]
 800b874:	f7fd fdc4 	bl	8009400 <spiUnselect>
  mmcp->state = BLK_READY;
 800b878:	2305      	movs	r3, #5
 800b87a:	7133      	strb	r3, [r6, #4]
}
 800b87c:	4638      	mov	r0, r7
 800b87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b880:	0800f668 	.word	0x0800f668
	...

0800b890 <read_CxD>:
static bool read_CxD(MMCDriver *mmcp, uint8_t cmd, uint32_t cxd[4]) {
 800b890:	b570      	push	{r4, r5, r6, lr}
 800b892:	4605      	mov	r5, r0
 800b894:	460c      	mov	r4, r1
  spiSelect(mmcp->config->spip);
 800b896:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
static bool read_CxD(MMCDriver *mmcp, uint8_t cmd, uint32_t cxd[4]) {
 800b898:	b084      	sub	sp, #16
  spiSelect(mmcp->config->spip);
 800b89a:	6818      	ldr	r0, [r3, #0]
static bool read_CxD(MMCDriver *mmcp, uint8_t cmd, uint32_t cxd[4]) {
 800b89c:	4616      	mov	r6, r2
  spiSelect(mmcp->config->spip);
 800b89e:	f7fd fdbf 	bl	8009420 <spiSelect>
  send_hdr(mmcp, cmd, 0);
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f7ff ff1a 	bl	800b6e0 <send_hdr>
  if (recvr1(mmcp) != 0x00U) {
 800b8ac:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 800b8b0:	f7ff fdd6 	bl	800b460 <recvr1.isra.0>
 800b8b4:	bb58      	cbnz	r0, 800b90e <read_CxD+0x7e>
 800b8b6:	f242 7410 	movw	r4, #10000	; 0x2710
 800b8ba:	e001      	b.n	800b8c0 <read_CxD+0x30>
  for (i = 0U; i < MMC_WAIT_DATA; i++) {
 800b8bc:	3c01      	subs	r4, #1
 800b8be:	d02d      	beq.n	800b91c <read_CxD+0x8c>
    spiReceive(mmcp->config->spip, 1, buf);
 800b8c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b8c2:	466a      	mov	r2, sp
 800b8c4:	6818      	ldr	r0, [r3, #0]
 800b8c6:	2101      	movs	r1, #1
 800b8c8:	f7ff fda2 	bl	800b410 <spiReceive>
    if (buf[0] == 0xFEU) {
 800b8cc:	f89d 3000 	ldrb.w	r3, [sp]
 800b8d0:	2bfe      	cmp	r3, #254	; 0xfe
 800b8d2:	d1f3      	bne.n	800b8bc <read_CxD+0x2c>
      spiReceive(mmcp->config->spip, 16, buf);
 800b8d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b8d6:	2110      	movs	r1, #16
 800b8d8:	6818      	ldr	r0, [r3, #0]
 800b8da:	466a      	mov	r2, sp
 800b8dc:	f7ff fd98 	bl	800b410 <spiReceive>
      for (wp = &cxd[3]; wp >= cxd; wp--) {
 800b8e0:	466b      	mov	r3, sp
 800b8e2:	f106 010c 	add.w	r1, r6, #12
 800b8e6:	1f30      	subs	r0, r6, #4
        *wp = ((uint32_t)bp[0] << 24U) | ((uint32_t)bp[1] << 16U) |
 800b8e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ec:	ba12      	rev	r2, r2
 800b8ee:	f841 2904 	str.w	r2, [r1], #-4
      for (wp = &cxd[3]; wp >= cxd; wp--) {
 800b8f2:	4288      	cmp	r0, r1
 800b8f4:	d1f8      	bne.n	800b8e8 <read_CxD+0x58>
      spiIgnore(mmcp->config->spip, 2);
 800b8f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b8f8:	2102      	movs	r1, #2
 800b8fa:	6818      	ldr	r0, [r3, #0]
 800b8fc:	f7ff fdf0 	bl	800b4e0 <spiIgnore>
      spiUnselect(mmcp->config->spip);
 800b900:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b902:	6818      	ldr	r0, [r3, #0]
 800b904:	f7fd fd7c 	bl	8009400 <spiUnselect>
      return HAL_SUCCESS;
 800b908:	2000      	movs	r0, #0
}
 800b90a:	b004      	add	sp, #16
 800b90c:	bd70      	pop	{r4, r5, r6, pc}
    spiUnselect(mmcp->config->spip);
 800b90e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b910:	6818      	ldr	r0, [r3, #0]
 800b912:	f7fd fd75 	bl	8009400 <spiUnselect>
    return HAL_FAILED;
 800b916:	2001      	movs	r0, #1
}
 800b918:	b004      	add	sp, #16
 800b91a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_FAILED;
 800b91c:	2001      	movs	r0, #1
}
 800b91e:	b004      	add	sp, #16
 800b920:	bd70      	pop	{r4, r5, r6, pc}
 800b922:	bf00      	nop
	...

0800b930 <send_command_R3>:
                               uint8_t *response) {
 800b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b932:	4604      	mov	r4, r0
 800b934:	460d      	mov	r5, r1
 800b936:	4617      	mov	r7, r2
  spiSelect(mmcp->config->spip);
 800b938:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
                               uint8_t *response) {
 800b93a:	461e      	mov	r6, r3
  spiSelect(mmcp->config->spip);
 800b93c:	6800      	ldr	r0, [r0, #0]
 800b93e:	f7fd fd6f 	bl	8009420 <spiSelect>
  send_hdr(mmcp, cmd, arg);
 800b942:	463a      	mov	r2, r7
 800b944:	4629      	mov	r1, r5
 800b946:	4620      	mov	r0, r4
 800b948:	f7ff feca 	bl	800b6e0 <send_hdr>
  r1 = recvr1(mmcp);
 800b94c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800b950:	f7ff fd86 	bl	800b460 <recvr1.isra.0>
 800b954:	4605      	mov	r5, r0
  spiReceive(mmcp->config->spip, 4, buffer);
 800b956:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b958:	4632      	mov	r2, r6
 800b95a:	2104      	movs	r1, #4
 800b95c:	6818      	ldr	r0, [r3, #0]
 800b95e:	f7ff fd57 	bl	800b410 <spiReceive>
  spiUnselect(mmcp->config->spip);
 800b962:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b964:	6818      	ldr	r0, [r3, #0]
 800b966:	f7fd fd4b 	bl	8009400 <spiUnselect>
}
 800b96a:	4628      	mov	r0, r5
 800b96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b96e:	bf00      	nop

0800b970 <send_command_R1>:
static uint8_t send_command_R1(MMCDriver *mmcp, uint8_t cmd, uint32_t arg) {
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	4604      	mov	r4, r0
 800b974:	460d      	mov	r5, r1
 800b976:	4616      	mov	r6, r2
  spiSelect(mmcp->config->spip);
 800b978:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b97a:	6818      	ldr	r0, [r3, #0]
 800b97c:	f7fd fd50 	bl	8009420 <spiSelect>
  send_hdr(mmcp, cmd, arg);
 800b980:	4632      	mov	r2, r6
 800b982:	4629      	mov	r1, r5
 800b984:	4620      	mov	r0, r4
 800b986:	f7ff feab 	bl	800b6e0 <send_hdr>
  r1 = recvr1(mmcp);
 800b98a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800b98e:	f7ff fd67 	bl	800b460 <recvr1.isra.0>
  spiUnselect(mmcp->config->spip);
 800b992:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  r1 = recvr1(mmcp);
 800b994:	4604      	mov	r4, r0
  spiUnselect(mmcp->config->spip);
 800b996:	6818      	ldr	r0, [r3, #0]
 800b998:	f7fd fd32 	bl	8009400 <spiUnselect>
}
 800b99c:	4620      	mov	r0, r4
 800b99e:	bd70      	pop	{r4, r5, r6, pc}

0800b9a0 <mmcConnect>:
  mmcp->state = BLK_CONNECTING;
 800b9a0:	2103      	movs	r1, #3
  mmcp->block_addresses = false;
 800b9a2:	2200      	movs	r2, #0
bool mmcConnect(MMCDriver *mmcp) {
 800b9a4:	b570      	push	{r4, r5, r6, lr}
 800b9a6:	4604      	mov	r4, r0
  spiStart(mmcp->config->spip, mmcp->config->lscfg);
 800b9a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  mmcp->state = BLK_CONNECTING;
 800b9aa:	7101      	strb	r1, [r0, #4]
  mmcp->block_addresses = false;
 800b9ac:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
bool mmcConnect(MMCDriver *mmcp) {
 800b9b0:	b082      	sub	sp, #8
  spiStart(mmcp->config->spip, mmcp->config->lscfg);
 800b9b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9b6:	f7fd fdcb 	bl	8009550 <spiStart>
  spiIgnore(mmcp->config->spip, 16);
 800b9ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b9bc:	2110      	movs	r1, #16
 800b9be:	6818      	ldr	r0, [r3, #0]
 800b9c0:	f7ff fd8e 	bl	800b4e0 <spiIgnore>
 800b9c4:	250a      	movs	r5, #10
 800b9c6:	e002      	b.n	800b9ce <mmcConnect+0x2e>
 800b9c8:	2014      	movs	r0, #20
 800b9ca:	f7ff fdb9 	bl	800b540 <chThdSleep>
    if (send_command_R1(mmcp, MMCSD_CMD_GO_IDLE_STATE, 0) == 0x01U) {
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	f7ff ffcc 	bl	800b970 <send_command_R1>
 800b9d8:	2801      	cmp	r0, #1
 800b9da:	d00a      	beq.n	800b9f2 <mmcConnect+0x52>
    if (++i >= MMC_CMD0_RETRY) {
 800b9dc:	3d01      	subs	r5, #1
 800b9de:	d1f3      	bne.n	800b9c8 <mmcConnect+0x28>
  spiStop(mmcp->config->spip);
 800b9e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b9e2:	6818      	ldr	r0, [r3, #0]
 800b9e4:	f7fd fd2c 	bl	8009440 <spiStop>
  mmcp->state = BLK_ACTIVE;
 800b9e8:	2302      	movs	r3, #2
  return HAL_FAILED;
 800b9ea:	2001      	movs	r0, #1
  mmcp->state = BLK_ACTIVE;
 800b9ec:	7123      	strb	r3, [r4, #4]
}
 800b9ee:	b002      	add	sp, #8
 800b9f0:	bd70      	pop	{r4, r5, r6, pc}
  if (send_command_R3(mmcp, MMCSD_CMD_SEND_IF_COND,
 800b9f2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b9f6:	2108      	movs	r1, #8
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	ab01      	add	r3, sp, #4
 800b9fc:	f7ff ff98 	bl	800b930 <send_command_R3>
 800ba00:	2805      	cmp	r0, #5
 800ba02:	d023      	beq.n	800ba4c <mmcConnect+0xac>
 800ba04:	2564      	movs	r5, #100	; 0x64
          (send_command_R3(mmcp, MMCSD_CMD_APP_OP_COND, 0x400001AAU, r3) == 0x00U)) {
 800ba06:	4e3b      	ldr	r6, [pc, #236]	; (800baf4 <mmcConnect+0x154>)
 800ba08:	e004      	b.n	800ba14 <mmcConnect+0x74>
      if (++i >= MMC_ACMD41_RETRY) {
 800ba0a:	3d01      	subs	r5, #1
 800ba0c:	d0e8      	beq.n	800b9e0 <mmcConnect+0x40>
 800ba0e:	2014      	movs	r0, #20
 800ba10:	f7ff fd96 	bl	800b540 <chThdSleep>
      if ((send_command_R1(mmcp, MMCSD_CMD_APP_CMD, 0) <= 0x01U) &&
 800ba14:	2200      	movs	r2, #0
 800ba16:	2137      	movs	r1, #55	; 0x37
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f7ff ffa9 	bl	800b970 <send_command_R1>
 800ba1e:	2801      	cmp	r0, #1
 800ba20:	d8f3      	bhi.n	800ba0a <mmcConnect+0x6a>
          (send_command_R3(mmcp, MMCSD_CMD_APP_OP_COND, 0x400001AAU, r3) == 0x00U)) {
 800ba22:	4632      	mov	r2, r6
 800ba24:	2129      	movs	r1, #41	; 0x29
 800ba26:	4620      	mov	r0, r4
 800ba28:	ab01      	add	r3, sp, #4
 800ba2a:	f7ff ff81 	bl	800b930 <send_command_R3>
      if ((send_command_R1(mmcp, MMCSD_CMD_APP_CMD, 0) <= 0x01U) &&
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d1eb      	bne.n	800ba0a <mmcConnect+0x6a>
    (void) send_command_R3(mmcp, MMCSD_CMD_READ_OCR, 0, r3);
 800ba32:	4602      	mov	r2, r0
 800ba34:	ab01      	add	r3, sp, #4
 800ba36:	213a      	movs	r1, #58	; 0x3a
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f7ff ff79 	bl	800b930 <send_command_R3>
    if ((r3[0] & 0x40U) != 0U) {
 800ba3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ba42:	065b      	lsls	r3, r3, #25
      mmcp->block_addresses = true;
 800ba44:	bf44      	itt	mi
 800ba46:	2301      	movmi	r3, #1
 800ba48:	f884 3030 	strbmi.w	r3, [r4, #48]	; 0x30
  if (send_command_R3(mmcp, MMCSD_CMD_SEND_IF_COND,
 800ba4c:	2564      	movs	r5, #100	; 0x64
 800ba4e:	e006      	b.n	800ba5e <mmcConnect+0xbe>
    if (b != 0x01U) {
 800ba50:	2801      	cmp	r0, #1
 800ba52:	d1c5      	bne.n	800b9e0 <mmcConnect+0x40>
    if (++i >= MMC_CMD1_RETRY) {
 800ba54:	3d01      	subs	r5, #1
 800ba56:	d0c3      	beq.n	800b9e0 <mmcConnect+0x40>
 800ba58:	2014      	movs	r0, #20
 800ba5a:	f7ff fd71 	bl	800b540 <chThdSleep>
    uint8_t b = send_command_R1(mmcp, MMCSD_CMD_INIT, 0);
 800ba5e:	2200      	movs	r2, #0
 800ba60:	2101      	movs	r1, #1
 800ba62:	4620      	mov	r0, r4
 800ba64:	f7ff ff84 	bl	800b970 <send_command_R1>
    if (b == 0x00U) {
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	d1f1      	bne.n	800ba50 <mmcConnect+0xb0>
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800ba6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ba6e:	6899      	ldr	r1, [r3, #8]
 800ba70:	6818      	ldr	r0, [r3, #0]
 800ba72:	f7fd fd6d 	bl	8009550 <spiStart>
  if (send_command_R1(mmcp, MMCSD_CMD_SET_BLOCKLEN,
 800ba76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba7a:	2110      	movs	r1, #16
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f7ff ff77 	bl	800b970 <send_command_R1>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d1ac      	bne.n	800b9e0 <mmcConnect+0x40>
  if (read_CxD(mmcp, MMCSD_CMD_SEND_CSD, mmcp->csd)) {
 800ba86:	2109      	movs	r1, #9
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f104 0218 	add.w	r2, r4, #24
 800ba8e:	f7ff feff 	bl	800b890 <read_CxD>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d1a4      	bne.n	800b9e0 <mmcConnect+0x40>
  /* One or two pieces?*/
  if (startidx < endidx) {
    return (data[startidx] >> startoff) |               /* Two pieces case. */
           ((data[endidx] & endmask) << (32U - startoff));
  }
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 800ba96:	6a63      	ldr	r3, [r4, #36]	; 0x24
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
  uint32_t a, b, c;

  osalDbgCheck(NULL != csd);

  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 800ba98:	0f9b      	lsrs	r3, r3, #30
 800ba9a:	d003      	beq.n	800baa4 <mmcConnect+0x104>
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d020      	beq.n	800bae2 <mmcConnect+0x142>
  mmcp->capacity = _mmcsd_get_capacity(mmcp->csd);
 800baa0:	62a0      	str	r0, [r4, #40]	; 0x28
  if (mmcp->capacity == 0U) {
 800baa2:	e79d      	b.n	800b9e0 <mmcConnect+0x40>
           ((data[endidx] & endmask) << (32U - startoff));
 800baa4:	f640 73fc 	movw	r3, #4092	; 0xffc
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 800baa8:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
           ((data[endidx] & endmask) << (32U - startoff));
 800baac:	ea03 0382 	and.w	r3, r3, r2, lsl #2
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 800bab0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 800bab4:	f3c1 31c2 	ubfx	r1, r1, #15, #3
 800bab8:	f3c2 4203 	ubfx	r2, r2, #16, #4
  case 0:
    /* CSD version 1.0 */
    a = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_SLICE);
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
 800babc:	3301      	adds	r3, #1
 800babe:	3102      	adds	r1, #2
 800bac0:	3a09      	subs	r2, #9
 800bac2:	408b      	lsls	r3, r1
 800bac4:	4093      	lsls	r3, r2
  mmcp->capacity = _mmcsd_get_capacity(mmcp->csd);
 800bac6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (mmcp->capacity == 0U) {
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d089      	beq.n	800b9e0 <mmcConnect+0x40>
  if (read_CxD(mmcp, MMCSD_CMD_SEND_CID, mmcp->cid)) {
 800bacc:	210a      	movs	r1, #10
 800bace:	4620      	mov	r0, r4
 800bad0:	f104 0208 	add.w	r2, r4, #8
 800bad4:	f7ff fedc 	bl	800b890 <read_CxD>
 800bad8:	2800      	cmp	r0, #0
 800bada:	d181      	bne.n	800b9e0 <mmcConnect+0x40>
  mmcp->state = BLK_READY;
 800badc:	2305      	movs	r3, #5
 800bade:	7123      	strb	r3, [r4, #4]
  return HAL_SUCCESS;
 800bae0:	e785      	b.n	800b9ee <mmcConnect+0x4e>
           ((data[endidx] & endmask) << (32U - startoff));
 800bae2:	6a23      	ldr	r3, [r4, #32]
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 800bae4:	8be2      	ldrh	r2, [r4, #30]
           ((data[endidx] & endmask) << (32U - startoff));
 800bae6:	041b      	lsls	r3, r3, #16
 800bae8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 800baec:	4313      	orrs	r3, r2
  case 1:
    /* CSD version 2.0.*/
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
 800baee:	3301      	adds	r3, #1
 800baf0:	029b      	lsls	r3, r3, #10
 800baf2:	e7e8      	b.n	800bac6 <mmcConnect+0x126>
 800baf4:	400001aa 	.word	0x400001aa
	...

0800bb00 <chSysRestoreStatusX.part.0>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 800bb00:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb02:	f3ef 8405 	mrs	r4, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 800bb06:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 800bb0a:	b11c      	cbz	r4, 800bb14 <chSysRestoreStatusX.part.0+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f383 8811 	msr	BASEPRI, r3
    else {
      chSchRescheduleS();
      chSysUnlock();
    }
  }
}
 800bb12:	bd10      	pop	{r4, pc}
      chSchRescheduleS();
 800bb14:	f7fe fa24 	bl	8009f60 <chSchRescheduleS>
 800bb18:	f384 8811 	msr	BASEPRI, r4
}
 800bb1c:	bd10      	pop	{r4, pc}
 800bb1e:	bf00      	nop

0800bb20 <chSysGetStatusAndLockX.part.0>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb20:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800bb24:	2320      	movs	r3, #32
 800bb26:	f383 8811 	msr	BASEPRI, r3
}
 800bb2a:	4770      	bx	lr
 800bb2c:	0000      	movs	r0, r0
	...

0800bb30 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 800bb30:	07c2      	lsls	r2, r0, #31
bool chSysIntegrityCheckI(unsigned testmask) {
 800bb32:	b410      	push	{r4}
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 800bb34:	d510      	bpl.n	800bb58 <chSysIntegrityCheckI+0x28>
    tp = ch.rlist.queue.next;
 800bb36:	4b26      	ldr	r3, [pc, #152]	; (800bbd0 <chSysIntegrityCheckI+0xa0>)
 800bb38:	6819      	ldr	r1, [r3, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800bb3a:	4299      	cmp	r1, r3
 800bb3c:	d03c      	beq.n	800bbb8 <chSysIntegrityCheckI+0x88>
    n = (cnt_t)0;
 800bb3e:	2200      	movs	r2, #0
      tp = tp->queue.next;
 800bb40:	6809      	ldr	r1, [r1, #0]
      n++;
 800bb42:	3201      	adds	r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 800bb44:	4299      	cmp	r1, r3
 800bb46:	d1fb      	bne.n	800bb40 <chSysIntegrityCheckI+0x10>
    tp = ch.rlist.queue.prev;
 800bb48:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800bb4a:	428c      	cmp	r4, r1
 800bb4c:	d031      	beq.n	800bbb2 <chSysIntegrityCheckI+0x82>
      tp = tp->queue.prev;
 800bb4e:	6864      	ldr	r4, [r4, #4]
      n--;
 800bb50:	3a01      	subs	r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 800bb52:	429c      	cmp	r4, r3
 800bb54:	d1fb      	bne.n	800bb4e <chSysIntegrityCheckI+0x1e>
    if (n != (cnt_t)0) {
 800bb56:	bb62      	cbnz	r2, 800bbb2 <chSysIntegrityCheckI+0x82>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 800bb58:	0783      	lsls	r3, r0, #30
 800bb5a:	d512      	bpl.n	800bb82 <chSysIntegrityCheckI+0x52>
    vtp = ch.vtlist.next;
 800bb5c:	4b1c      	ldr	r3, [pc, #112]	; (800bbd0 <chSysIntegrityCheckI+0xa0>)
 800bb5e:	461c      	mov	r4, r3
 800bb60:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800bb64:	42a1      	cmp	r1, r4
 800bb66:	d02d      	beq.n	800bbc4 <chSysIntegrityCheckI+0x94>
    n = (cnt_t)0;
 800bb68:	2200      	movs	r2, #0
      vtp = vtp->next;
 800bb6a:	6809      	ldr	r1, [r1, #0]
      n++;
 800bb6c:	3201      	adds	r2, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800bb6e:	42a1      	cmp	r1, r4
 800bb70:	d1fb      	bne.n	800bb6a <chSysIntegrityCheckI+0x3a>
    vtp = ch.vtlist.prev;
 800bb72:	6a1b      	ldr	r3, [r3, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800bb74:	428b      	cmp	r3, r1
 800bb76:	d01c      	beq.n	800bbb2 <chSysIntegrityCheckI+0x82>
      vtp = vtp->prev;
 800bb78:	685b      	ldr	r3, [r3, #4]
      n--;
 800bb7a:	3a01      	subs	r2, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800bb7c:	42a3      	cmp	r3, r4
 800bb7e:	d1fb      	bne.n	800bb78 <chSysIntegrityCheckI+0x48>
    if (n != (cnt_t)0) {
 800bb80:	b9ba      	cbnz	r2, 800bbb2 <chSysIntegrityCheckI+0x82>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 800bb82:	f010 0004 	ands.w	r0, r0, #4
 800bb86:	d012      	beq.n	800bbae <chSysIntegrityCheckI+0x7e>
    tp = ch.rlist.newer;
 800bb88:	4b11      	ldr	r3, [pc, #68]	; (800bbd0 <chSysIntegrityCheckI+0xa0>)
    n = (cnt_t)0;
 800bb8a:	2000      	movs	r0, #0
    tp = ch.rlist.newer;
 800bb8c:	691a      	ldr	r2, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d003      	beq.n	800bb9a <chSysIntegrityCheckI+0x6a>
      tp = tp->newer;
 800bb92:	6912      	ldr	r2, [r2, #16]
      n++;
 800bb94:	3001      	adds	r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d1fb      	bne.n	800bb92 <chSysIntegrityCheckI+0x62>
    tp = ch.rlist.older;
 800bb9a:	695a      	ldr	r2, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d003      	beq.n	800bba8 <chSysIntegrityCheckI+0x78>
      tp = tp->older;
 800bba0:	6952      	ldr	r2, [r2, #20]
      n--;
 800bba2:	3801      	subs	r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d1fb      	bne.n	800bba0 <chSysIntegrityCheckI+0x70>
    if (n != (cnt_t)0) {
 800bba8:	3800      	subs	r0, #0
 800bbaa:	bf18      	it	ne
 800bbac:	2001      	movne	r0, #1
}
 800bbae:	bc10      	pop	{r4}
 800bbb0:	4770      	bx	lr
      return true;
 800bbb2:	2001      	movs	r0, #1
}
 800bbb4:	bc10      	pop	{r4}
 800bbb6:	4770      	bx	lr
    tp = ch.rlist.queue.prev;
 800bbb8:	685c      	ldr	r4, [r3, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800bbba:	429c      	cmp	r4, r3
    n = (cnt_t)0;
 800bbbc:	bf18      	it	ne
 800bbbe:	2200      	movne	r2, #0
    while (tp != (thread_t *)&ch.rlist.queue) {
 800bbc0:	d1c5      	bne.n	800bb4e <chSysIntegrityCheckI+0x1e>
 800bbc2:	e7c9      	b.n	800bb58 <chSysIntegrityCheckI+0x28>
    vtp = ch.vtlist.prev;
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800bbc6:	42a3      	cmp	r3, r4
    n = (cnt_t)0;
 800bbc8:	bf18      	it	ne
 800bbca:	2200      	movne	r2, #0
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800bbcc:	d1d4      	bne.n	800bb78 <chSysIntegrityCheckI+0x48>
 800bbce:	e7d8      	b.n	800bb82 <chSysIntegrityCheckI+0x52>
 800bbd0:	20000c88 	.word	0x20000c88
	...

0800bbe0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800bbe0:	4a1b      	ldr	r2, [pc, #108]	; (800bc50 <__early_init+0x70>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800bbe2:	4613      	mov	r3, r2
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800bbe4:	6811      	ldr	r1, [r2, #0]
 800bbe6:	f041 0101 	orr.w	r1, r1, #1
 800bbea:	6011      	str	r1, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	0791      	lsls	r1, r2, #30
 800bbf0:	d5fc      	bpl.n	800bbec <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800bbf2:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800bbf4:	6819      	ldr	r1, [r3, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800bbf6:	4a16      	ldr	r2, [pc, #88]	; (800bc50 <__early_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800bbf8:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800bbfc:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800bbfe:	6058      	str	r0, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800bc00:	6853      	ldr	r3, [r2, #4]
 800bc02:	f013 0f0c 	tst.w	r3, #12
 800bc06:	d1fb      	bne.n	800bc00 <__early_init+0x20>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 800bc08:	6811      	ldr	r1, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800bc0a:	4b11      	ldr	r3, [pc, #68]	; (800bc50 <__early_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 800bc0c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800bc10:	6011      	str	r1, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	0392      	lsls	r2, r2, #14
 800bc16:	d5fc      	bpl.n	800bc12 <__early_init+0x32>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800bc18:	6859      	ldr	r1, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800bc1a:	4a0d      	ldr	r2, [pc, #52]	; (800bc50 <__early_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800bc1c:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 800bc20:	6059      	str	r1, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
 800bc22:	6819      	ldr	r1, [r3, #0]
 800bc24:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800bc28:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800bc2a:	6813      	ldr	r3, [r2, #0]
 800bc2c:	019b      	lsls	r3, r3, #6
 800bc2e:	d5fc      	bpl.n	800bc2a <__early_init+0x4a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800bc30:	2112      	movs	r1, #18
 800bc32:	4b08      	ldr	r3, [pc, #32]	; (800bc54 <__early_init+0x74>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 800bc34:	4808      	ldr	r0, [pc, #32]	; (800bc58 <__early_init+0x78>)
 800bc36:	6050      	str	r0, [r2, #4]
  FLASH->ACR = STM32_FLASHBITS;
 800bc38:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800bc3a:	6853      	ldr	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800bc3c:	4904      	ldr	r1, [pc, #16]	; (800bc50 <__early_init+0x70>)
  RCC->CFGR |= STM32_SW;
 800bc3e:	f043 0302 	orr.w	r3, r3, #2
 800bc42:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800bc44:	684b      	ldr	r3, [r1, #4]
 800bc46:	f003 030c 	and.w	r3, r3, #12
 800bc4a:	2b08      	cmp	r3, #8
 800bc4c:	d1fa      	bne.n	800bc44 <__early_init+0x64>
}
 800bc4e:	4770      	bx	lr
 800bc50:	40021000 	.word	0x40021000
 800bc54:	40022000 	.word	0x40022000
 800bc58:	001d6400 	.word	0x001d6400
 800bc5c:	00000000 	.word	0x00000000

0800bc60 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 800bc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 800bc64:	4c62      	ldr	r4, [pc, #392]	; (800bdf0 <VectorD8+0x190>)
 800bc66:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 800bc68:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 800bc6c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 800bc6e:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 800bc70:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 800bc72:	d476      	bmi.n	800bd62 <VectorD8+0x102>
 800bc74:	2320      	movs	r3, #32
 800bc76:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800bc7a:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 800bc7e:	d044      	beq.n	800bd0a <VectorD8+0xaa>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800bc80:	4f5c      	ldr	r7, [pc, #368]	; (800bdf4 <VectorD8+0x194>)
  chThdDequeueNextI(tqp, msg);
 800bc82:	f107 0908 	add.w	r9, r7, #8
 800bc86:	e008      	b.n	800bc9a <VectorD8+0x3a>
    if (sr & USART_SR_RXNE)
 800bc88:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800bc8a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800bc8e:	d41e      	bmi.n	800bcce <VectorD8+0x6e>
    sr = u->SR;
 800bc90:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800bc92:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 800bc96:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800bc98:	d037      	beq.n	800bd0a <VectorD8+0xaa>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800bc9a:	072b      	lsls	r3, r5, #28
 800bc9c:	d0f4      	beq.n	800bc88 <VectorD8+0x28>
    sts |= SD_OVERRUN_ERROR;
 800bc9e:	f015 0f08 	tst.w	r5, #8
 800bca2:	bf0c      	ite	eq
 800bca4:	2100      	moveq	r1, #0
 800bca6:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800bca8:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 800bcaa:	bf48      	it	mi
 800bcac:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 800bcb0:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 800bcb2:	bf48      	it	mi
 800bcb4:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800bcb8:	076b      	lsls	r3, r5, #29
  chEvtBroadcastFlagsI(esp, flags);
 800bcba:	4638      	mov	r0, r7
    sts |= SD_NOISE_ERROR;
 800bcbc:	bf48      	it	mi
 800bcbe:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 800bcc2:	f7fe facd 	bl	800a260 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 800bcc6:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800bcc8:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800bccc:	d5e0      	bpl.n	800bc90 <VectorD8+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800bcce:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 800bcd0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 800bcd4:	b3a3      	cbz	r3, 800bd40 <VectorD8+0xe0>
  if (!iqIsFullI(iqp)) {
 800bcd6:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d038      	beq.n	800bd50 <VectorD8+0xf0>
    iqp->q_counter++;
 800bcde:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 800bce0:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 800bce2:	3201      	adds	r2, #1
 800bce4:	ea05 050a 	and.w	r5, r5, sl
 800bce8:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 800bcea:	6221      	str	r1, [r4, #32]
 800bcec:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 800bcee:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d301      	bcc.n	800bcfa <VectorD8+0x9a>
      iqp->q_wrptr = iqp->q_buffer;
 800bcf6:	69a3      	ldr	r3, [r4, #24]
 800bcf8:	6223      	str	r3, [r4, #32]
  chThdDequeueNextI(tqp, msg);
 800bcfa:	4648      	mov	r0, r9
 800bcfc:	f7fa ffc8 	bl	8006c90 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 800bd00:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800bd02:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 800bd06:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800bd08:	d1c7      	bne.n	800bc9a <VectorD8+0x3a>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800bd10:	f018 0f80 	tst.w	r8, #128	; 0x80
 800bd14:	d001      	beq.n	800bd1a <VectorD8+0xba>
 800bd16:	062a      	lsls	r2, r5, #24
 800bd18:	d432      	bmi.n	800bd80 <VectorD8+0x120>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800bd1a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800bd1e:	d00b      	beq.n	800bd38 <VectorD8+0xd8>
 800bd20:	066b      	lsls	r3, r5, #25
 800bd22:	d509      	bpl.n	800bd38 <VectorD8+0xd8>
 800bd24:	2320      	movs	r3, #32
 800bd26:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 800bd2a:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d043      	beq.n	800bdba <VectorD8+0x15a>
 800bd32:	2300      	movs	r3, #0
 800bd34:	f383 8811 	msr	BASEPRI, r3
}
 800bd38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 800bd3c:	f7fd ba00 	b.w	8009140 <_port_irq_epilogue>
  chEvtBroadcastFlagsI(esp, flags);
 800bd40:	2104      	movs	r1, #4
 800bd42:	4638      	mov	r0, r7
 800bd44:	f7fe fa8c 	bl	800a260 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 800bd48:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d1c6      	bne.n	800bcde <VectorD8+0x7e>
 800bd50:	6962      	ldr	r2, [r4, #20]
 800bd52:	2a00      	cmp	r2, #0
 800bd54:	d0c3      	beq.n	800bcde <VectorD8+0x7e>
 800bd56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	f7fe fa80 	bl	800a260 <chEvtBroadcastFlagsI>
 800bd60:	e796      	b.n	800bc90 <VectorD8+0x30>
 800bd62:	2320      	movs	r3, #32
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bd6c:	1d20      	adds	r0, r4, #4
 800bd6e:	f7fe fa77 	bl	800a260 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 800bd72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bd76:	2300      	movs	r3, #0
 800bd78:	6032      	str	r2, [r6, #0]
 800bd7a:	f383 8811 	msr	BASEPRI, r3
 800bd7e:	e779      	b.n	800bc74 <VectorD8+0x14>
 800bd80:	2320      	movs	r3, #32
 800bd82:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 800bd86:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d022      	beq.n	800bdd4 <VectorD8+0x174>
    oqp->q_counter++;
 800bd8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 800bd90:	6c20      	ldr	r0, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 800bd92:	1c59      	adds	r1, r3, #1
    oqp->q_counter++;
 800bd94:	3201      	adds	r2, #1
 800bd96:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800bd98:	64a1      	str	r1, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 800bd9a:	4281      	cmp	r1, r0
    b = *oqp->q_rdptr++;
 800bd9c:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 800bd9e:	d301      	bcc.n	800bda4 <VectorD8+0x144>
      oqp->q_rdptr = oqp->q_buffer;
 800bda0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bda2:	64a3      	str	r3, [r4, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 800bda4:	4814      	ldr	r0, [pc, #80]	; (800bdf8 <VectorD8+0x198>)
 800bda6:	f7fa ff73 	bl	8006c90 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 800bdaa:	6077      	str	r7, [r6, #4]
 800bdac:	2300      	movs	r3, #0
 800bdae:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800bdb2:	f018 0f40 	tst.w	r8, #64	; 0x40
 800bdb6:	d0bf      	beq.n	800bd38 <VectorD8+0xd8>
 800bdb8:	e7b2      	b.n	800bd20 <VectorD8+0xc0>
    if (oqIsEmptyI(&sdp->oqueue)) {
 800bdba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d0b8      	beq.n	800bd32 <VectorD8+0xd2>
  chEvtBroadcastFlagsI(esp, flags);
 800bdc0:	2110      	movs	r1, #16
 800bdc2:	480c      	ldr	r0, [pc, #48]	; (800bdf4 <VectorD8+0x194>)
 800bdc4:	f7fe fa4c 	bl	800a260 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800bdc8:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800bdcc:	ea08 0303 	and.w	r3, r8, r3
 800bdd0:	60f3      	str	r3, [r6, #12]
 800bdd2:	e7ae      	b.n	800bd32 <VectorD8+0xd2>
  if (!oqIsEmptyI(oqp)) {
 800bdd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bdd6:	2a00      	cmp	r2, #0
 800bdd8:	d0d9      	beq.n	800bd8e <VectorD8+0x12e>
 800bdda:	2108      	movs	r1, #8
 800bddc:	4805      	ldr	r0, [pc, #20]	; (800bdf4 <VectorD8+0x194>)
 800bdde:	f7fe fa3f 	bl	800a260 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 800bde2:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800bde6:	ea08 0303 	and.w	r3, r8, r3
 800bdea:	60f3      	str	r3, [r6, #12]
 800bdec:	e7de      	b.n	800bdac <VectorD8+0x14c>
 800bdee:	bf00      	nop
 800bdf0:	2000094c 	.word	0x2000094c
 800bdf4:	20000950 	.word	0x20000950
 800bdf8:	2000097c 	.word	0x2000097c
 800bdfc:	00000000 	.word	0x00000000

0800be00 <VectorB0>:
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 800be00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
OSAL_IRQ_HANDLER(ST_HANDLER) {
 800be04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sr  = timp->SR;
 800be08:	690b      	ldr	r3, [r1, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 800be0a:	68ca      	ldr	r2, [r1, #12]
 800be0c:	4013      	ands	r3, r2
 800be0e:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 800be10:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 800be12:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 800be14:	610a      	str	r2, [r1, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 800be16:	d403      	bmi.n	800be20 <VectorB0+0x20>
}
 800be18:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800be1c:	f7fd b990 	b.w	8009140 <_port_irq_epilogue>
 800be20:	2320      	movs	r3, #32
 800be22:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 800be26:	4e28      	ldr	r6, [pc, #160]	; (800bec8 <VectorB0+0xc8>)
  return (systime_t)STM32_ST_TIM->CNT;
 800be28:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800be2a:	8d32      	ldrh	r2, [r6, #40]	; 0x28
  vtp = ch.vtlist.next;
 800be2c:	69f0      	ldr	r0, [r6, #28]
 800be2e:	b29b      	uxth	r3, r3

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 800be30:	f8d0 c008 	ldr.w	ip, [r0, #8]
  return (sysinterval_t)((systime_t)(end - start));
 800be34:	1a9c      	subs	r4, r3, r2
 800be36:	b2a4      	uxth	r4, r4
 800be38:	4564      	cmp	r4, ip
 800be3a:	bf38      	it	cc
 800be3c:	f106 081c 	addcc.w	r8, r6, #28
 800be40:	d326      	bcc.n	800be90 <VectorB0+0x90>
  STM32_ST_TIM->DIER = 0U;
 800be42:	460d      	mov	r5, r1
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 800be44:	2700      	movs	r7, #0
 800be46:	f106 081c 	add.w	r8, r6, #28
 800be4a:	f04f 0920 	mov.w	r9, #32
 800be4e:	e000      	b.n	800be52 <VectorB0+0x52>
 800be50:	8d32      	ldrh	r2, [r6, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800be52:	6803      	ldr	r3, [r0, #0]
      ch.vtlist.lasttime += vtp->delta;
 800be54:	4462      	add	r2, ip

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800be56:	4543      	cmp	r3, r8
      ch.vtlist.lasttime += vtp->delta;
 800be58:	8532      	strh	r2, [r6, #40]	; 0x28
      nowdelta -= vtp->delta;
 800be5a:	eba4 040c 	sub.w	r4, r4, ip
      fn = vtp->func;
 800be5e:	68c2      	ldr	r2, [r0, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800be60:	f8c3 8004 	str.w	r8, [r3, #4]
      ch.vtlist.next = vtp->next;
 800be64:	61f3      	str	r3, [r6, #28]
      vtp->func = NULL;
 800be66:	60c7      	str	r7, [r0, #12]
 800be68:	bf08      	it	eq
 800be6a:	60ef      	streq	r7, [r5, #12]
 800be6c:	f387 8811 	msr	BASEPRI, r7
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800be70:	6900      	ldr	r0, [r0, #16]
 800be72:	4790      	blx	r2
 800be74:	f389 8811 	msr	BASEPRI, r9
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 800be78:	69f0      	ldr	r0, [r6, #28]
    }
    while (vtp->delta <= nowdelta);
 800be7a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800be7e:	4564      	cmp	r4, ip
 800be80:	d2e6      	bcs.n	800be50 <VectorB0+0x50>
  return (systime_t)STM32_ST_TIM->CNT;
 800be82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800be84:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 800be86:	b29b      	uxth	r3, r3
 800be88:	1a9c      	subs	r4, r3, r2
 800be8a:	b2a4      	uxth	r4, r4
    if (nowdelta < vtp->delta) {
 800be8c:	4564      	cmp	r4, ip
 800be8e:	d2dc      	bcs.n	800be4a <VectorB0+0x4a>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800be90:	4540      	cmp	r0, r8
 800be92:	d011      	beq.n	800beb8 <VectorB0+0xb8>
  return systime + (systime_t)interval;
 800be94:	f64f 71ff 	movw	r1, #65535	; 0xffff
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 800be98:	6882      	ldr	r2, [r0, #8]
  ch.vtlist.lasttime += nowdelta;
 800be9a:	8533      	strh	r3, [r6, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 800be9c:	1b14      	subs	r4, r2, r4
 800be9e:	42a1      	cmp	r1, r4
 800bea0:	460a      	mov	r2, r1
 800bea2:	bf28      	it	cs
 800bea4:	4622      	movcs	r2, r4
 800bea6:	2a02      	cmp	r2, #2
 800bea8:	bf2c      	ite	cs
 800beaa:	189b      	addcs	r3, r3, r2
 800beac:	3302      	addcc	r3, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800beae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	6084      	str	r4, [r0, #8]
 800beb6:	6353      	str	r3, [r2, #52]	; 0x34
 800beb8:	2300      	movs	r3, #0
 800beba:	f383 8811 	msr	BASEPRI, r3
}
 800bebe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800bec2:	f7fd b93d 	b.w	8009140 <_port_irq_epilogue>
 800bec6:	bf00      	nop
 800bec8:	20000c88 	.word	0x20000c88
 800becc:	00000000 	.word	0x00000000

0800bed0 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 800bed0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 800bed2:	4803      	ldr	r0, [pc, #12]	; (800bee0 <Vector84+0x10>)
 800bed4:	f7fd fa3c 	bl	8009350 <dmaServeInterrupt>
}
 800bed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800bedc:	f7fd b930 	b.w	8009140 <_port_irq_epilogue>
 800bee0:	0800dc24 	.word	0x0800dc24
	...

0800bef0 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800bef0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 800bef2:	4803      	ldr	r0, [pc, #12]	; (800bf00 <Vector80+0x10>)
 800bef4:	f7fd fa2c 	bl	8009350 <dmaServeInterrupt>
}
 800bef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800befc:	f7fd b920 	b.w	8009140 <_port_irq_epilogue>
 800bf00:	0800dc14 	.word	0x0800dc14
	...

0800bf10 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800bf10:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 800bf12:	4803      	ldr	r0, [pc, #12]	; (800bf20 <Vector7C+0x10>)
 800bf14:	f7fd fa1c 	bl	8009350 <dmaServeInterrupt>
}
 800bf18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800bf1c:	f7fd b910 	b.w	8009140 <_port_irq_epilogue>
 800bf20:	0800dc04 	.word	0x0800dc04
	...

0800bf30 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 800bf30:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 800bf32:	4803      	ldr	r0, [pc, #12]	; (800bf40 <Vector78+0x10>)
 800bf34:	f7fd fa0c 	bl	8009350 <dmaServeInterrupt>
}
 800bf38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800bf3c:	f7fd b900 	b.w	8009140 <_port_irq_epilogue>
 800bf40:	0800dbf4 	.word	0x0800dbf4
	...

0800bf50 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800bf50:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 800bf52:	4803      	ldr	r0, [pc, #12]	; (800bf60 <Vector74+0x10>)
 800bf54:	f7fd f9fc 	bl	8009350 <dmaServeInterrupt>
}
 800bf58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800bf5c:	f7fd b8f0 	b.w	8009140 <_port_irq_epilogue>
 800bf60:	0800dbe4 	.word	0x0800dbe4
	...

0800bf70 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800bf70:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 800bf72:	4803      	ldr	r0, [pc, #12]	; (800bf80 <Vector70+0x10>)
 800bf74:	f7fd f9ec 	bl	8009350 <dmaServeInterrupt>
}
 800bf78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800bf7c:	f7fd b8e0 	b.w	8009140 <_port_irq_epilogue>
 800bf80:	0800dbd4 	.word	0x0800dbd4
	...

0800bf90 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 800bf90:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 800bf92:	4803      	ldr	r0, [pc, #12]	; (800bfa0 <Vector6C+0x10>)
 800bf94:	f7fd f9dc 	bl	8009350 <dmaServeInterrupt>
}
 800bf98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800bf9c:	f7fd b8d0 	b.w	8009140 <_port_irq_epilogue>
 800bfa0:	0800dbc4 	.word	0x0800dbc4
	...

0800bfb0 <mmcStopSequentialRead.part.0>:
bool mmcStopSequentialRead(MMCDriver *mmcp) {
 800bfb0:	b538      	push	{r3, r4, r5, lr}
  spiSend(mmcp->config->spip, sizeof(stopcmd), stopcmd);
 800bfb2:	4605      	mov	r5, r0
bool mmcStopSequentialRead(MMCDriver *mmcp) {
 800bfb4:	4604      	mov	r4, r0
  spiSend(mmcp->config->spip, sizeof(stopcmd), stopcmd);
 800bfb6:	f855 3f2c 	ldr.w	r3, [r5, #44]!
 800bfba:	2107      	movs	r1, #7
 800bfbc:	4a07      	ldr	r2, [pc, #28]	; (800bfdc <mmcStopSequentialRead.part.0+0x2c>)
 800bfbe:	6818      	ldr	r0, [r3, #0]
 800bfc0:	f7ff fa66 	bl	800b490 <spiSend>
  (void) recvr1(mmcp);
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	f7ff fa4b 	bl	800b460 <recvr1.isra.0>
  spiUnselect(mmcp->config->spip);
 800bfca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bfcc:	6818      	ldr	r0, [r3, #0]
 800bfce:	f7fd fa17 	bl	8009400 <spiUnselect>
  mmcp->state = BLK_READY;
 800bfd2:	2305      	movs	r3, #5
 800bfd4:	7123      	strb	r3, [r4, #4]
}
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	bd38      	pop	{r3, r4, r5, pc}
 800bfda:	bf00      	nop
 800bfdc:	0800f66c 	.word	0x0800f66c

0800bfe0 <mmcSequentialRead>:
  if (mmcp->state != BLK_READING) {
 800bfe0:	7903      	ldrb	r3, [r0, #4]
 800bfe2:	2b06      	cmp	r3, #6
 800bfe4:	d11e      	bne.n	800c024 <mmcSequentialRead+0x44>
bool mmcSequentialRead(MMCDriver *mmcp, uint8_t *buffer) {
 800bfe6:	b570      	push	{r4, r5, r6, lr}
 800bfe8:	4606      	mov	r6, r0
 800bfea:	460d      	mov	r5, r1
  if (mmcp->state != BLK_READING) {
 800bfec:	f242 7410 	movw	r4, #10000	; 0x2710
 800bff0:	e001      	b.n	800bff6 <mmcSequentialRead+0x16>
  for (i = 0; i < MMC_WAIT_DATA; i++) {
 800bff2:	3c01      	subs	r4, #1
 800bff4:	d018      	beq.n	800c028 <mmcSequentialRead+0x48>
    spiReceive(mmcp->config->spip, 1, buffer);
 800bff6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800bff8:	462a      	mov	r2, r5
 800bffa:	6818      	ldr	r0, [r3, #0]
 800bffc:	2101      	movs	r1, #1
 800bffe:	f7ff fa07 	bl	800b410 <spiReceive>
    if (buffer[0] == 0xFEU) {
 800c002:	782b      	ldrb	r3, [r5, #0]
 800c004:	2bfe      	cmp	r3, #254	; 0xfe
 800c006:	d1f4      	bne.n	800bff2 <mmcSequentialRead+0x12>
      spiReceive(mmcp->config->spip, MMCSD_BLOCK_SIZE, buffer);
 800c008:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800c00a:	462a      	mov	r2, r5
 800c00c:	6818      	ldr	r0, [r3, #0]
 800c00e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c012:	f7ff f9fd 	bl	800b410 <spiReceive>
      spiIgnore(mmcp->config->spip, 2);
 800c016:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800c018:	2102      	movs	r1, #2
 800c01a:	6818      	ldr	r0, [r3, #0]
 800c01c:	f7ff fa60 	bl	800b4e0 <spiIgnore>
      return HAL_SUCCESS;
 800c020:	2000      	movs	r0, #0
}
 800c022:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_FAILED;
 800c024:	2001      	movs	r0, #1
}
 800c026:	4770      	bx	lr
  spiUnselect(mmcp->config->spip);
 800c028:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800c02a:	6818      	ldr	r0, [r3, #0]
 800c02c:	f7fd f9e8 	bl	8009400 <spiUnselect>
  spiStop(mmcp->config->spip);
 800c030:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800c032:	6818      	ldr	r0, [r3, #0]
 800c034:	f7fd fa04 	bl	8009440 <spiStop>
  mmcp->state = BLK_READY;
 800c038:	2305      	movs	r3, #5
 800c03a:	7133      	strb	r3, [r6, #4]
 800c03c:	2001      	movs	r0, #1
}
 800c03e:	bd70      	pop	{r4, r5, r6, pc}

0800c040 <mmcStartSequentialRead>:
  mmcp->state = BLK_READING;
 800c040:	2206      	movs	r2, #6
bool mmcStartSequentialRead(MMCDriver *mmcp, uint32_t startblk) {
 800c042:	b538      	push	{r3, r4, r5, lr}
 800c044:	4604      	mov	r4, r0
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800c046:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  mmcp->state = BLK_READING;
 800c048:	7102      	strb	r2, [r0, #4]
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800c04a:	6818      	ldr	r0, [r3, #0]
bool mmcStartSequentialRead(MMCDriver *mmcp, uint32_t startblk) {
 800c04c:	460d      	mov	r5, r1
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800c04e:	6899      	ldr	r1, [r3, #8]
 800c050:	f7fd fa7e 	bl	8009550 <spiStart>
  spiSelect(mmcp->config->spip);
 800c054:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c056:	6818      	ldr	r0, [r3, #0]
 800c058:	f7fd f9e2 	bl	8009420 <spiSelect>
  if (mmcp->block_addresses) {
 800c05c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800c060:	b153      	cbz	r3, 800c078 <mmcStartSequentialRead+0x38>
    send_hdr(mmcp, MMCSD_CMD_READ_MULTIPLE_BLOCK, startblk);
 800c062:	4620      	mov	r0, r4
 800c064:	462a      	mov	r2, r5
 800c066:	2112      	movs	r1, #18
 800c068:	f7ff fb3a 	bl	800b6e0 <send_hdr>
  if (recvr1(mmcp) != 0x00U) {
 800c06c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800c070:	f7ff f9f6 	bl	800b460 <recvr1.isra.0>
 800c074:	b958      	cbnz	r0, 800c08e <mmcStartSequentialRead+0x4e>
}
 800c076:	bd38      	pop	{r3, r4, r5, pc}
    send_hdr(mmcp, MMCSD_CMD_READ_MULTIPLE_BLOCK, startblk * MMCSD_BLOCK_SIZE);
 800c078:	4620      	mov	r0, r4
 800c07a:	2112      	movs	r1, #18
 800c07c:	026a      	lsls	r2, r5, #9
 800c07e:	f7ff fb2f 	bl	800b6e0 <send_hdr>
  if (recvr1(mmcp) != 0x00U) {
 800c082:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800c086:	f7ff f9eb 	bl	800b460 <recvr1.isra.0>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	d0f3      	beq.n	800c076 <mmcStartSequentialRead+0x36>
    spiStop(mmcp->config->spip);
 800c08e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c090:	6818      	ldr	r0, [r3, #0]
 800c092:	f7fd f9d5 	bl	8009440 <spiStop>
    mmcp->state = BLK_READY;
 800c096:	2305      	movs	r3, #5
 800c098:	7123      	strb	r3, [r4, #4]
 800c09a:	2001      	movs	r0, #1
}
 800c09c:	bd38      	pop	{r3, r4, r5, pc}
 800c09e:	bf00      	nop

0800c0a0 <mmc_read.lto_priv.0>:
                uint8_t *buffer, uint32_t n) {
 800c0a0:	b570      	push	{r4, r5, r6, lr}
 800c0a2:	4614      	mov	r4, r2
 800c0a4:	461d      	mov	r5, r3
 800c0a6:	4606      	mov	r6, r0
  if (mmcStartSequentialRead((MMCDriver *)instance, startblk)) {
 800c0a8:	f7ff ffca 	bl	800c040 <mmcStartSequentialRead>
 800c0ac:	b958      	cbnz	r0, 800c0c6 <mmc_read.lto_priv.0+0x26>
  while (n > 0U) {
 800c0ae:	b915      	cbnz	r5, 800c0b6 <mmc_read.lto_priv.0+0x16>
 800c0b0:	e00b      	b.n	800c0ca <mmc_read.lto_priv.0+0x2a>
 800c0b2:	3d01      	subs	r5, #1
 800c0b4:	d009      	beq.n	800c0ca <mmc_read.lto_priv.0+0x2a>
    if (mmcSequentialRead((MMCDriver *)instance, buffer)) {
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	f7ff ff91 	bl	800bfe0 <mmcSequentialRead>
    buffer += MMCSD_BLOCK_SIZE;
 800c0be:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (mmcSequentialRead((MMCDriver *)instance, buffer)) {
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d0f5      	beq.n	800c0b2 <mmc_read.lto_priv.0+0x12>
}
 800c0c6:	2001      	movs	r0, #1
 800c0c8:	bd70      	pop	{r4, r5, r6, pc}
  if (mmcp->state != BLK_READING) {
 800c0ca:	7933      	ldrb	r3, [r6, #4]
 800c0cc:	2b06      	cmp	r3, #6
 800c0ce:	d1fa      	bne.n	800c0c6 <mmc_read.lto_priv.0+0x26>
 800c0d0:	4630      	mov	r0, r6
}
 800c0d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0d6:	f7ff bf6b 	b.w	800bfb0 <mmcStopSequentialRead.part.0>
 800c0da:	bf00      	nop
 800c0dc:	0000      	movs	r0, r0
	...

0800c0e0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 800c0e0:	b4f0      	push	{r4, r5, r6, r7}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 800c0e2:	2600      	movs	r6, #0
 800c0e4:	4f13      	ldr	r7, [pc, #76]	; (800c134 <__init_ram_areas+0x54>)
void __init_ram_areas(void) {
 800c0e6:	4d14      	ldr	r5, [pc, #80]	; (800c138 <__init_ram_areas+0x58>)
 800c0e8:	4814      	ldr	r0, [pc, #80]	; (800c13c <__init_ram_areas+0x5c>)
 800c0ea:	4b15      	ldr	r3, [pc, #84]	; (800c140 <__init_ram_areas+0x60>)
 800c0ec:	4915      	ldr	r1, [pc, #84]	; (800c144 <__init_ram_areas+0x64>)
 800c0ee:	f107 0c70 	add.w	ip, r7, #112	; 0x70
    while (p < rap->clear_area) {
 800c0f2:	4298      	cmp	r0, r3
 800c0f4:	d911      	bls.n	800c11a <__init_ram_areas+0x3a>
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	3904      	subs	r1, #4
      *p = *tp;
 800c0fa:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800c0fe:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 800c102:	4290      	cmp	r0, r2
 800c104:	d8f9      	bhi.n	800c0fa <__init_ram_areas+0x1a>
 800c106:	1e42      	subs	r2, r0, #1
 800c108:	1ad2      	subs	r2, r2, r3
 800c10a:	f022 0203 	bic.w	r2, r2, #3
 800c10e:	3204      	adds	r2, #4
 800c110:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 800c112:	429d      	cmp	r5, r3
 800c114:	d903      	bls.n	800c11e <__init_ram_areas+0x3e>
      *p = 0;
 800c116:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800c11a:	429d      	cmp	r5, r3
 800c11c:	d8fb      	bhi.n	800c116 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800c11e:	4567      	cmp	r7, ip
 800c120:	d005      	beq.n	800c12e <__init_ram_areas+0x4e>
 800c122:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 800c126:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 800c12a:	3710      	adds	r7, #16
 800c12c:	e7e1      	b.n	800c0f2 <__init_ram_areas+0x12>
#endif
}
 800c12e:	bcf0      	pop	{r4, r5, r6, r7}
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	0800f0fc 	.word	0x0800f0fc
 800c138:	20002404 	.word	0x20002404
 800c13c:	20002404 	.word	0x20002404
 800c140:	20002404 	.word	0x20002404
 800c144:	0800f784 	.word	0x0800f784
	...

0800c150 <__default_exit>:
  while (true) {
 800c150:	e7fe      	b.n	800c150 <__default_exit>
 800c152:	bf00      	nop
	...

0800c160 <__late_init>:
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
	...

0800c170 <__core_init>:
}
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop

0800c174 <memcmp>:
 800c174:	2a03      	cmp	r2, #3
 800c176:	b470      	push	{r4, r5, r6}
 800c178:	d912      	bls.n	800c1a0 <memcmp+0x2c>
 800c17a:	ea40 0501 	orr.w	r5, r0, r1
 800c17e:	07ad      	lsls	r5, r5, #30
 800c180:	4604      	mov	r4, r0
 800c182:	460b      	mov	r3, r1
 800c184:	d11d      	bne.n	800c1c2 <memcmp+0x4e>
 800c186:	4619      	mov	r1, r3
 800c188:	4620      	mov	r0, r4
 800c18a:	f853 5b04 	ldr.w	r5, [r3], #4
 800c18e:	f854 6b04 	ldr.w	r6, [r4], #4
 800c192:	42ae      	cmp	r6, r5
 800c194:	d115      	bne.n	800c1c2 <memcmp+0x4e>
 800c196:	3a04      	subs	r2, #4
 800c198:	2a03      	cmp	r2, #3
 800c19a:	4620      	mov	r0, r4
 800c19c:	4619      	mov	r1, r3
 800c19e:	d8f2      	bhi.n	800c186 <memcmp+0x12>
 800c1a0:	1e56      	subs	r6, r2, #1
 800c1a2:	b19a      	cbz	r2, 800c1cc <memcmp+0x58>
 800c1a4:	3901      	subs	r1, #1
 800c1a6:	1e44      	subs	r4, r0, #1
 800c1a8:	e001      	b.n	800c1ae <memcmp+0x3a>
 800c1aa:	18c3      	adds	r3, r0, r3
 800c1ac:	d00b      	beq.n	800c1c6 <memcmp+0x52>
 800c1ae:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800c1b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c1b6:	1b33      	subs	r3, r6, r4
 800c1b8:	4295      	cmp	r5, r2
 800c1ba:	d0f6      	beq.n	800c1aa <memcmp+0x36>
 800c1bc:	1aa8      	subs	r0, r5, r2
 800c1be:	bc70      	pop	{r4, r5, r6}
 800c1c0:	4770      	bx	lr
 800c1c2:	1e56      	subs	r6, r2, #1
 800c1c4:	e7ee      	b.n	800c1a4 <memcmp+0x30>
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	bc70      	pop	{r4, r5, r6}
 800c1ca:	4770      	bx	lr
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	e7f6      	b.n	800c1be <memcmp+0x4a>

0800c1d0 <memset>:
 800c1d0:	b4f0      	push	{r4, r5, r6, r7}
 800c1d2:	0786      	lsls	r6, r0, #30
 800c1d4:	d046      	beq.n	800c264 <memset+0x94>
 800c1d6:	1e54      	subs	r4, r2, #1
 800c1d8:	2a00      	cmp	r2, #0
 800c1da:	d03c      	beq.n	800c256 <memset+0x86>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	b2ca      	uxtb	r2, r1
 800c1e0:	e001      	b.n	800c1e6 <memset+0x16>
 800c1e2:	3c01      	subs	r4, #1
 800c1e4:	d337      	bcc.n	800c256 <memset+0x86>
 800c1e6:	f803 2b01 	strb.w	r2, [r3], #1
 800c1ea:	079d      	lsls	r5, r3, #30
 800c1ec:	d1f9      	bne.n	800c1e2 <memset+0x12>
 800c1ee:	2c03      	cmp	r4, #3
 800c1f0:	d92a      	bls.n	800c248 <memset+0x78>
 800c1f2:	b2cd      	uxtb	r5, r1
 800c1f4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800c1f8:	2c0f      	cmp	r4, #15
 800c1fa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800c1fe:	d934      	bls.n	800c26a <memset+0x9a>
 800c200:	f1a4 0210 	sub.w	r2, r4, #16
 800c204:	f022 0c0f 	bic.w	ip, r2, #15
 800c208:	f103 0720 	add.w	r7, r3, #32
 800c20c:	0916      	lsrs	r6, r2, #4
 800c20e:	4467      	add	r7, ip
 800c210:	f103 0210 	add.w	r2, r3, #16
 800c214:	e942 5504 	strd	r5, r5, [r2, #-16]
 800c218:	e942 5502 	strd	r5, r5, [r2, #-8]
 800c21c:	3210      	adds	r2, #16
 800c21e:	42ba      	cmp	r2, r7
 800c220:	d1f8      	bne.n	800c214 <memset+0x44>
 800c222:	1c72      	adds	r2, r6, #1
 800c224:	f014 0f0c 	tst.w	r4, #12
 800c228:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800c22c:	f004 060f 	and.w	r6, r4, #15
 800c230:	d013      	beq.n	800c25a <memset+0x8a>
 800c232:	1f33      	subs	r3, r6, #4
 800c234:	f023 0303 	bic.w	r3, r3, #3
 800c238:	3304      	adds	r3, #4
 800c23a:	4413      	add	r3, r2
 800c23c:	f842 5b04 	str.w	r5, [r2], #4
 800c240:	4293      	cmp	r3, r2
 800c242:	d1fb      	bne.n	800c23c <memset+0x6c>
 800c244:	f006 0403 	and.w	r4, r6, #3
 800c248:	b12c      	cbz	r4, 800c256 <memset+0x86>
 800c24a:	b2ca      	uxtb	r2, r1
 800c24c:	441c      	add	r4, r3
 800c24e:	f803 2b01 	strb.w	r2, [r3], #1
 800c252:	429c      	cmp	r4, r3
 800c254:	d1fb      	bne.n	800c24e <memset+0x7e>
 800c256:	bcf0      	pop	{r4, r5, r6, r7}
 800c258:	4770      	bx	lr
 800c25a:	4634      	mov	r4, r6
 800c25c:	4613      	mov	r3, r2
 800c25e:	2c00      	cmp	r4, #0
 800c260:	d1f3      	bne.n	800c24a <memset+0x7a>
 800c262:	e7f8      	b.n	800c256 <memset+0x86>
 800c264:	4614      	mov	r4, r2
 800c266:	4603      	mov	r3, r0
 800c268:	e7c1      	b.n	800c1ee <memset+0x1e>
 800c26a:	461a      	mov	r2, r3
 800c26c:	4626      	mov	r6, r4
 800c26e:	e7e0      	b.n	800c232 <memset+0x62>

0800c270 <strchr>:
 800c270:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800c274:	4603      	mov	r3, r0
 800c276:	d044      	beq.n	800c302 <strchr+0x92>
 800c278:	0782      	lsls	r2, r0, #30
 800c27a:	d132      	bne.n	800c2e2 <strchr+0x72>
 800c27c:	b470      	push	{r4, r5, r6}
 800c27e:	6804      	ldr	r4, [r0, #0]
 800c280:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800c284:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800c288:	ea86 0504 	eor.w	r5, r6, r4
 800c28c:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 800c290:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800c294:	ea23 0305 	bic.w	r3, r3, r5
 800c298:	ea22 0204 	bic.w	r2, r2, r4
 800c29c:	4313      	orrs	r3, r2
 800c29e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800c2a2:	d10f      	bne.n	800c2c4 <strchr+0x54>
 800c2a4:	f850 4f04 	ldr.w	r4, [r0, #4]!
 800c2a8:	ea84 0506 	eor.w	r5, r4, r6
 800c2ac:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 800c2b0:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 800c2b4:	ea22 0205 	bic.w	r2, r2, r5
 800c2b8:	ea23 0304 	bic.w	r3, r3, r4
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800c2c2:	d0ef      	beq.n	800c2a4 <strchr+0x34>
 800c2c4:	7803      	ldrb	r3, [r0, #0]
 800c2c6:	b923      	cbnz	r3, 800c2d2 <strchr+0x62>
 800c2c8:	e036      	b.n	800c338 <strchr+0xc8>
 800c2ca:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d032      	beq.n	800c338 <strchr+0xc8>
 800c2d2:	4299      	cmp	r1, r3
 800c2d4:	d1f9      	bne.n	800c2ca <strchr+0x5a>
 800c2d6:	e030      	b.n	800c33a <strchr+0xca>
 800c2d8:	428a      	cmp	r2, r1
 800c2da:	d011      	beq.n	800c300 <strchr+0x90>
 800c2dc:	079a      	lsls	r2, r3, #30
 800c2de:	4618      	mov	r0, r3
 800c2e0:	d0cc      	beq.n	800c27c <strchr+0xc>
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2e8:	2a00      	cmp	r2, #0
 800c2ea:	d1f5      	bne.n	800c2d8 <strchr+0x68>
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	4770      	bx	lr
 800c2f0:	0799      	lsls	r1, r3, #30
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	d007      	beq.n	800c306 <strchr+0x96>
 800c2f6:	781a      	ldrb	r2, [r3, #0]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	2a00      	cmp	r2, #0
 800c2fe:	d1f7      	bne.n	800c2f0 <strchr+0x80>
 800c300:	4770      	bx	lr
 800c302:	0782      	lsls	r2, r0, #30
 800c304:	d1f7      	bne.n	800c2f6 <strchr+0x86>
 800c306:	6802      	ldr	r2, [r0, #0]
 800c308:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800c30c:	ea23 0302 	bic.w	r3, r3, r2
 800c310:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800c314:	d108      	bne.n	800c328 <strchr+0xb8>
 800c316:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800c31a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800c31e:	ea23 0302 	bic.w	r3, r3, r2
 800c322:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800c326:	d0f6      	beq.n	800c316 <strchr+0xa6>
 800c328:	7803      	ldrb	r3, [r0, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d0e8      	beq.n	800c300 <strchr+0x90>
 800c32e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1fb      	bne.n	800c32e <strchr+0xbe>
 800c336:	4770      	bx	lr
 800c338:	4618      	mov	r0, r3
 800c33a:	bc70      	pop	{r4, r5, r6}
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop

0800c340 <strcpy>:
 800c340:	ea80 0201 	eor.w	r2, r0, r1
 800c344:	4684      	mov	ip, r0
 800c346:	f012 0f03 	tst.w	r2, #3
 800c34a:	d14f      	bne.n	800c3ec <strcpy+0xac>
 800c34c:	f011 0f03 	tst.w	r1, #3
 800c350:	d132      	bne.n	800c3b8 <strcpy+0x78>
 800c352:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800c356:	f011 0f04 	tst.w	r1, #4
 800c35a:	f851 3b04 	ldr.w	r3, [r1], #4
 800c35e:	d00b      	beq.n	800c378 <strcpy+0x38>
 800c360:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800c364:	439a      	bics	r2, r3
 800c366:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c36a:	bf04      	itt	eq
 800c36c:	f84c 3b04 	streq.w	r3, [ip], #4
 800c370:	f851 3b04 	ldreq.w	r3, [r1], #4
 800c374:	d116      	bne.n	800c3a4 <strcpy+0x64>
 800c376:	bf00      	nop
 800c378:	f851 4b04 	ldr.w	r4, [r1], #4
 800c37c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800c380:	439a      	bics	r2, r3
 800c382:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c386:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800c38a:	d10b      	bne.n	800c3a4 <strcpy+0x64>
 800c38c:	f84c 3b04 	str.w	r3, [ip], #4
 800c390:	43a2      	bics	r2, r4
 800c392:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c396:	bf04      	itt	eq
 800c398:	f851 3b04 	ldreq.w	r3, [r1], #4
 800c39c:	f84c 4b04 	streq.w	r4, [ip], #4
 800c3a0:	d0ea      	beq.n	800c378 <strcpy+0x38>
 800c3a2:	4623      	mov	r3, r4
 800c3a4:	f80c 3b01 	strb.w	r3, [ip], #1
 800c3a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c3ac:	ea4f 2333 	mov.w	r3, r3, ror #8
 800c3b0:	d1f8      	bne.n	800c3a4 <strcpy+0x64>
 800c3b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3b6:	4770      	bx	lr
 800c3b8:	f011 0f01 	tst.w	r1, #1
 800c3bc:	d006      	beq.n	800c3cc <strcpy+0x8c>
 800c3be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3c2:	f80c 2b01 	strb.w	r2, [ip], #1
 800c3c6:	2a00      	cmp	r2, #0
 800c3c8:	bf08      	it	eq
 800c3ca:	4770      	bxeq	lr
 800c3cc:	f011 0f02 	tst.w	r1, #2
 800c3d0:	d0bf      	beq.n	800c352 <strcpy+0x12>
 800c3d2:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c3d6:	f012 0fff 	tst.w	r2, #255	; 0xff
 800c3da:	bf16      	itet	ne
 800c3dc:	f82c 2b02 	strhne.w	r2, [ip], #2
 800c3e0:	f88c 2000 	strbeq.w	r2, [ip]
 800c3e4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 800c3e8:	d1b3      	bne.n	800c352 <strcpy+0x12>
 800c3ea:	4770      	bx	lr
 800c3ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3f0:	f80c 2b01 	strb.w	r2, [ip], #1
 800c3f4:	2a00      	cmp	r2, #0
 800c3f6:	d1f9      	bne.n	800c3ec <strcpy+0xac>
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop

0800c3fc <strlen>:
 800c3fc:	f020 0103 	bic.w	r1, r0, #3
 800c400:	f010 0003 	ands.w	r0, r0, #3
 800c404:	f1c0 0000 	rsb	r0, r0, #0
 800c408:	f851 3b04 	ldr.w	r3, [r1], #4
 800c40c:	f100 0c04 	add.w	ip, r0, #4
 800c410:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800c414:	f06f 0200 	mvn.w	r2, #0
 800c418:	bf1c      	itt	ne
 800c41a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800c41e:	4313      	orrne	r3, r2
 800c420:	f04f 0c01 	mov.w	ip, #1
 800c424:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800c428:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800c42c:	eba3 020c 	sub.w	r2, r3, ip
 800c430:	ea22 0203 	bic.w	r2, r2, r3
 800c434:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800c438:	bf04      	itt	eq
 800c43a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800c43e:	3004      	addeq	r0, #4
 800c440:	d0f4      	beq.n	800c42c <strlen+0x30>
 800c442:	f1c2 0100 	rsb	r1, r2, #0
 800c446:	ea02 0201 	and.w	r2, r2, r1
 800c44a:	fab2 f282 	clz	r2, r2
 800c44e:	f1c2 021f 	rsb	r2, r2, #31
 800c452:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800c456:	4770      	bx	lr

0800c458 <strncmp>:
 800c458:	b39a      	cbz	r2, 800c4c2 <strncmp+0x6a>
 800c45a:	b4f0      	push	{r4, r5, r6, r7}
 800c45c:	ea40 0501 	orr.w	r5, r0, r1
 800c460:	07ad      	lsls	r5, r5, #30
 800c462:	4604      	mov	r4, r0
 800c464:	4603      	mov	r3, r0
 800c466:	4608      	mov	r0, r1
 800c468:	d028      	beq.n	800c4bc <strncmp+0x64>
 800c46a:	7820      	ldrb	r0, [r4, #0]
 800c46c:	780b      	ldrb	r3, [r1, #0]
 800c46e:	4283      	cmp	r3, r0
 800c470:	d129      	bne.n	800c4c6 <strncmp+0x6e>
 800c472:	2a01      	cmp	r2, #1
 800c474:	d02a      	beq.n	800c4cc <strncmp+0x74>
 800c476:	4625      	mov	r5, r4
 800c478:	b150      	cbz	r0, 800c490 <strncmp+0x38>
 800c47a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800c47e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c482:	4298      	cmp	r0, r3
 800c484:	d11f      	bne.n	800c4c6 <strncmp+0x6e>
 800c486:	43eb      	mvns	r3, r5
 800c488:	4413      	add	r3, r2
 800c48a:	18e3      	adds	r3, r4, r3
 800c48c:	d1f4      	bne.n	800c478 <strncmp+0x20>
 800c48e:	4618      	mov	r0, r3
 800c490:	bcf0      	pop	{r4, r5, r6, r7}
 800c492:	4770      	bx	lr
 800c494:	6807      	ldr	r7, [r0, #0]
 800c496:	461c      	mov	r4, r3
 800c498:	f853 5b04 	ldr.w	r5, [r3], #4
 800c49c:	4601      	mov	r1, r0
 800c49e:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 800c4a2:	42bd      	cmp	r5, r7
 800c4a4:	f100 0004 	add.w	r0, r0, #4
 800c4a8:	ea26 0605 	bic.w	r6, r6, r5
 800c4ac:	d1dd      	bne.n	800c46a <strncmp+0x12>
 800c4ae:	3a04      	subs	r2, #4
 800c4b0:	d00c      	beq.n	800c4cc <strncmp+0x74>
 800c4b2:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 800c4b6:	d109      	bne.n	800c4cc <strncmp+0x74>
 800c4b8:	461c      	mov	r4, r3
 800c4ba:	4601      	mov	r1, r0
 800c4bc:	2a03      	cmp	r2, #3
 800c4be:	d8e9      	bhi.n	800c494 <strncmp+0x3c>
 800c4c0:	e7d3      	b.n	800c46a <strncmp+0x12>
 800c4c2:	4610      	mov	r0, r2
 800c4c4:	4770      	bx	lr
 800c4c6:	1ac0      	subs	r0, r0, r3
 800c4c8:	bcf0      	pop	{r4, r5, r6, r7}
 800c4ca:	4770      	bx	lr
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	bcf0      	pop	{r4, r5, r6, r7}
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop

0800c4d4 <strncpy>:
 800c4d4:	b470      	push	{r4, r5, r6}
 800c4d6:	ea40 0401 	orr.w	r4, r0, r1
 800c4da:	07a3      	lsls	r3, r4, #30
 800c4dc:	d122      	bne.n	800c524 <strncpy+0x50>
 800c4de:	2a03      	cmp	r2, #3
 800c4e0:	d920      	bls.n	800c524 <strncpy+0x50>
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	f853 6b04 	ldr.w	r6, [r3], #4
 800c4ec:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 800c4f0:	ea25 0506 	bic.w	r5, r5, r6
 800c4f4:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 800c4f8:	d115      	bne.n	800c526 <strncpy+0x52>
 800c4fa:	3a04      	subs	r2, #4
 800c4fc:	2a03      	cmp	r2, #3
 800c4fe:	4619      	mov	r1, r3
 800c500:	f844 6b04 	str.w	r6, [r4], #4
 800c504:	d8ef      	bhi.n	800c4e6 <strncpy+0x12>
 800c506:	1e4d      	subs	r5, r1, #1
 800c508:	b152      	cbz	r2, 800c520 <strncpy+0x4c>
 800c50a:	4623      	mov	r3, r4
 800c50c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800c510:	1e56      	subs	r6, r2, #1
 800c512:	f803 1b01 	strb.w	r1, [r3], #1
 800c516:	b141      	cbz	r1, 800c52a <strncpy+0x56>
 800c518:	4632      	mov	r2, r6
 800c51a:	461c      	mov	r4, r3
 800c51c:	2a00      	cmp	r2, #0
 800c51e:	d1f4      	bne.n	800c50a <strncpy+0x36>
 800c520:	bc70      	pop	{r4, r5, r6}
 800c522:	4770      	bx	lr
 800c524:	4604      	mov	r4, r0
 800c526:	1e4d      	subs	r5, r1, #1
 800c528:	e7ee      	b.n	800c508 <strncpy+0x34>
 800c52a:	4422      	add	r2, r4
 800c52c:	2e00      	cmp	r6, #0
 800c52e:	d0f7      	beq.n	800c520 <strncpy+0x4c>
 800c530:	f803 1b01 	strb.w	r1, [r3], #1
 800c534:	4293      	cmp	r3, r2
 800c536:	d1fb      	bne.n	800c530 <strncpy+0x5c>
 800c538:	bc70      	pop	{r4, r5, r6}
 800c53a:	4770      	bx	lr

0800c53c <strpbrk>:
 800c53c:	b430      	push	{r4, r5}
 800c53e:	7804      	ldrb	r4, [r0, #0]
 800c540:	b1a4      	cbz	r4, 800c56c <strpbrk+0x30>
 800c542:	780d      	ldrb	r5, [r1, #0]
 800c544:	460a      	mov	r2, r1
 800c546:	462b      	mov	r3, r5
 800c548:	b91d      	cbnz	r5, 800c552 <strpbrk+0x16>
 800c54a:	e00a      	b.n	800c562 <strpbrk+0x26>
 800c54c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c550:	b13b      	cbz	r3, 800c562 <strpbrk+0x26>
 800c552:	429c      	cmp	r4, r3
 800c554:	d1fa      	bne.n	800c54c <strpbrk+0x10>
 800c556:	7813      	ldrb	r3, [r2, #0]
 800c558:	bc30      	pop	{r4, r5}
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	bf08      	it	eq
 800c55e:	2000      	moveq	r0, #0
 800c560:	4770      	bx	lr
 800c562:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800c566:	2c00      	cmp	r4, #0
 800c568:	d1ec      	bne.n	800c544 <strpbrk+0x8>
 800c56a:	e7f4      	b.n	800c556 <strpbrk+0x1a>
 800c56c:	4620      	mov	r0, r4
 800c56e:	bc30      	pop	{r4, r5}
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop

0800c574 <strspn>:
 800c574:	b470      	push	{r4, r5, r6}
 800c576:	7804      	ldrb	r4, [r0, #0]
 800c578:	b18c      	cbz	r4, 800c59e <strspn+0x2a>
 800c57a:	4605      	mov	r5, r0
 800c57c:	780e      	ldrb	r6, [r1, #0]
 800c57e:	b15e      	cbz	r6, 800c598 <strspn+0x24>
 800c580:	460a      	mov	r2, r1
 800c582:	4633      	mov	r3, r6
 800c584:	e002      	b.n	800c58c <strspn+0x18>
 800c586:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c58a:	b12b      	cbz	r3, 800c598 <strspn+0x24>
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	d1fa      	bne.n	800c586 <strspn+0x12>
 800c590:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800c594:	2c00      	cmp	r4, #0
 800c596:	d1f2      	bne.n	800c57e <strspn+0xa>
 800c598:	1a28      	subs	r0, r5, r0
 800c59a:	bc70      	pop	{r4, r5, r6}
 800c59c:	4770      	bx	lr
 800c59e:	4620      	mov	r0, r4
 800c5a0:	e7fb      	b.n	800c59a <strspn+0x26>
 800c5a2:	bf00      	nop
