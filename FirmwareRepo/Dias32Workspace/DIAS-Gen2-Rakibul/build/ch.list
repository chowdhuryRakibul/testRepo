
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	0800bbc1 	.word	0x0800bbc1
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	08015301 	.word	0x08015301
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	08005d91 	.word	0x08005d91
 800004c:	08005e21 	.word	0x08005e21
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	08015101 	.word	0x08015101
 800005c:	08004111 	.word	0x08004111
 8000060:	08004181 	.word	0x08004181
 8000064:	080041f1 	.word	0x080041f1
 8000068:	08004261 	.word	0x08004261
 800006c:	080046a1 	.word	0x080046a1
 8000070:	080046f1 	.word	0x080046f1
 8000074:	08004741 	.word	0x08004741
 8000078:	08004791 	.word	0x08004791
 800007c:	080047e1 	.word	0x080047e1
 8000080:	08004831 	.word	0x08004831
 8000084:	08004881 	.word	0x08004881
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	080042d1 	.word	0x080042d1
 80000a0:	080002db 	.word	0x080002db
 80000a4:	080002db 	.word	0x080002db
 80000a8:	080002db 	.word	0x080002db
 80000ac:	080002db 	.word	0x080002db
 80000b0:	08006f21 	.word	0x08006f21
 80000b4:	080002db 	.word	0x080002db
 80000b8:	080002db 	.word	0x080002db
 80000bc:	08005611 	.word	0x08005611
 80000c0:	08005641 	.word	0x08005641
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	08015841 	.word	0x08015841
 80000d0:	080002db 	.word	0x080002db
 80000d4:	080002db 	.word	0x080002db
 80000d8:	08007421 	.word	0x08007421
 80000dc:	08007451 	.word	0x08007451
 80000e0:	080151f1 	.word	0x080151f1
 80000e4:	08005e81 	.word	0x08005e81
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	080048d1 	.word	0x080048d1
 8000100:	080002db 	.word	0x080002db
 8000104:	080067f1 	.word	0x080067f1
 8000108:	080071b1 	.word	0x080071b1
 800010c:	080002db 	.word	0x080002db
 8000110:	080002db 	.word	0x080002db
 8000114:	080002db 	.word	0x080002db
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	08004921 	.word	0x08004921
 8000124:	08004971 	.word	0x08004971
 8000128:	080049c1 	.word	0x080049c1
 800012c:	08004a11 	.word	0x08004a11
 8000130:	08004a61 	.word	0x08004a61
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	080002db 	.word	0x080002db
 8000150:	08004ab1 	.word	0x08004ab1
 8000154:	08004b01 	.word	0x08004b01
 8000158:	08004b51 	.word	0x08004b51
 800015c:	08007481 	.word	0x08007481
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
                msr     MSP, r0
 8000204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
                msr     PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800021c:	f380 8814 	msr	CONTROL, r0
                isb
 8000220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000224:	f000 f87c 	bl	8000320 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000228:	f000 f92a 	bl	8000480 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
msloop:
                cmp     r1, r2
 8000234:	4291      	cmp	r1, r2
                itt     lo
 8000236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800023c:	e7fa      	bcc.n	8000234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
psloop:
                cmp     r1, r2
 8000242:	4291      	cmp	r1, r2
                itt     lo
 8000244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024a:	e7fa      	bcc.n	8000242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
dloop:
                cmp     r2, r3
 8000252:	429a      	cmp	r2, r3
                ittt    lo
 8000254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800025e:	e7f8      	bcc.n	8000252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000260:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
bloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800026e:	e7fa      	bcc.n	8000266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000270:	f000 f876 	bl	8000360 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000274:	f000 f864 	bl	8000340 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
initloop:
                cmp     r4, r5
 800027c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800027e:	da03      	bge.n	8000288 <endinitloop>
                ldr     r1, [r4], #4
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000284:	4788      	blx	r1
                b       initloop
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000288:	f016 fe82 	bl	8016f90 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
finiloop:
                cmp     r4, r5
 8000290:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000292:	da03      	bge.n	800029c <endfiniloop>
                ldr     r1, [r4], #4
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000298:	4788      	blx	r1
                b       finiloop
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800029c:	f000 b858 	b.w	8000350 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002a4:	20001a00 	.word	0x20001a00
                ldr     r0, =_vectors
 80002a8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 80002b4:	0801b1b8 	.word	0x0801b1b8
                ldr     r2, =_data_start
 80002b8:	20001a00 	.word	0x20001a00
                ldr     r3, =_data_end
 80002bc:	2000201c 	.word	0x2000201c
                ldr     r1, =_bss_start
 80002c0:	20002020 	.word	0x20002020
                ldr     r2, =_bss_end
 80002c4:	2001030c 	.word	0x2001030c
                ldr     r4, =__init_array_start
 80002c8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002cc:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_start
 80002d0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002e8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ea:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <_port_thread_start>:
_port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      _port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002f0:	f007 fbae 	bl	8007a50 <_dbg_check_unlock>
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 80002f4:	f008 fe9c 	bl	8009030 <_stats_stop_measure_crit_thd>
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f8:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002fa:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002fe:	4628      	mov	r0, r5
                blx     r4
 8000300:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 8000302:	2000      	movs	r0, #0
                bl      chThdExit
 8000304:	f008 fb44 	bl	8008990 <chThdExit>

08000308 <_port_switch_from_isr>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch_from_isr
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
 8000308:	f008 fe8a 	bl	8009020 <_stats_start_measure_crit_thd>
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 800030c:	f007 fb88 	bl	8007a20 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 8000310:	f008 f8d6 	bl	80084c0 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 8000314:	f007 fb9c 	bl	8007a50 <_dbg_check_unlock>
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 8000318:	f008 fe8a 	bl	8009030 <_stats_stop_measure_crit_thd>

0800031c <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 800031c:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 800031e:	e7fe      	b.n	800031e <_port_exit_from_isr+0x2>

08000320 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	f3af 8000 	nop.w
 8000328:	f3af 8000 	nop.w
 800032c:	f3af 8000 	nop.w
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __early_init(void) {}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	f3af 8000 	nop.w
 8000338:	f3af 8000 	nop.w
 800033c:	f3af 8000 	nop.w

08000340 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	f3af 8000 	nop.w
 8000348:	f3af 8000 	nop.w
 800034c:	f3af 8000 	nop.w

08000350 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000350:	e7fe      	b.n	8000350 <__default_exit>
 8000352:	bf00      	nop
 8000354:	f3af 8000 	nop.w
 8000358:	f3af 8000 	nop.w
 800035c:	f3af 8000 	nop.w

08000360 <__init_ram_areas>:
/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8000360:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <__init_ram_areas+0x30>)
 8000362:	e011      	b.n	8000388 <__init_ram_areas+0x28>
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
 8000364:	f850 1b04 	ldr.w	r1, [r0], #4
 8000368:	f843 1b04 	str.w	r1, [r3], #4
    while (p < rap->clear_area) {
 800036c:	6891      	ldr	r1, [r2, #8]
 800036e:	4299      	cmp	r1, r3
 8000370:	d8f8      	bhi.n	8000364 <__init_ram_areas+0x4>
 8000372:	e002      	b.n	800037a <__init_ram_areas+0x1a>
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8000374:	2100      	movs	r1, #0
 8000376:	f843 1b04 	str.w	r1, [r3], #4
    while (p < rap->no_init_area) {
 800037a:	68d1      	ldr	r1, [r2, #12]
 800037c:	4299      	cmp	r1, r3
 800037e:	d8f9      	bhi.n	8000374 <__init_ram_areas+0x14>
      p++;
    }
    rap++;
 8000380:	3210      	adds	r2, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000382:	4b04      	ldr	r3, [pc, #16]	; (8000394 <__init_ram_areas+0x34>)
 8000384:	429a      	cmp	r2, r3
 8000386:	d202      	bcs.n	800038e <__init_ram_areas+0x2e>
    uint32_t *tp = rap->init_text_area;
 8000388:	6810      	ldr	r0, [r2, #0]
    uint32_t *p = rap->init_area;
 800038a:	6853      	ldr	r3, [r2, #4]
    while (p < rap->clear_area) {
 800038c:	e7ee      	b.n	800036c <__init_ram_areas+0xc>
#endif
}
 800038e:	4770      	bx	lr
 8000390:	08018b88 	.word	0x08018b88
 8000394:	08018c08 	.word	0x08018c08
	...

080003a0 <gpio_init>:
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80003a0:	684b      	ldr	r3, [r1, #4]
 80003a2:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80003a4:	688b      	ldr	r3, [r1, #8]
 80003a6:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80003a8:	68cb      	ldr	r3, [r1, #12]
 80003aa:	60c3      	str	r3, [r0, #12]
  gpiop->ODR     = config->odr;
 80003ac:	690b      	ldr	r3, [r1, #16]
 80003ae:	6143      	str	r3, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80003b0:	694b      	ldr	r3, [r1, #20]
 80003b2:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80003b4:	698b      	ldr	r3, [r1, #24]
 80003b6:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80003b8:	680b      	ldr	r3, [r1, #0]
 80003ba:	6003      	str	r3, [r0, #0]
}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
 80003c0:	b510      	push	{r4, lr}

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80003c2:	4b21      	ldr	r3, [pc, #132]	; (8000448 <stm32_gpio_init+0x88>)
 80003c4:	691a      	ldr	r2, [r3, #16]
 80003c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80003ca:	430a      	orrs	r2, r1
 80003cc:	611a      	str	r2, [r3, #16]
 80003ce:	691a      	ldr	r2, [r3, #16]
 80003d0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80003d4:	f022 0201 	bic.w	r2, r2, #1
 80003d8:	611a      	str	r2, [r3, #16]
 80003da:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80003dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003de:	430a      	orrs	r2, r1
 80003e0:	631a      	str	r2, [r3, #48]	; 0x30
 80003e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003e4:	430a      	orrs	r2, r1
 80003e6:	651a      	str	r2, [r3, #80]	; 0x50
 80003e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
 80003ea:	4c18      	ldr	r4, [pc, #96]	; (800044c <stm32_gpio_init+0x8c>)
 80003ec:	4621      	mov	r1, r4
 80003ee:	4818      	ldr	r0, [pc, #96]	; (8000450 <stm32_gpio_init+0x90>)
 80003f0:	f7ff ffd6 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
 80003f4:	f104 011c 	add.w	r1, r4, #28
 80003f8:	4816      	ldr	r0, [pc, #88]	; (8000454 <stm32_gpio_init+0x94>)
 80003fa:	f7ff ffd1 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
 80003fe:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8000402:	4815      	ldr	r0, [pc, #84]	; (8000458 <stm32_gpio_init+0x98>)
 8000404:	f7ff ffcc 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
 8000408:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800040c:	4813      	ldr	r0, [pc, #76]	; (800045c <stm32_gpio_init+0x9c>)
 800040e:	f7ff ffc7 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
 8000412:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8000416:	4812      	ldr	r0, [pc, #72]	; (8000460 <stm32_gpio_init+0xa0>)
 8000418:	f7ff ffc2 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOF
  gpio_init(GPIOF, &gpio_default_config.PFData);
 800041c:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8000420:	4810      	ldr	r0, [pc, #64]	; (8000464 <stm32_gpio_init+0xa4>)
 8000422:	f7ff ffbd 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
 8000426:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
 800042a:	480f      	ldr	r0, [pc, #60]	; (8000468 <stm32_gpio_init+0xa8>)
 800042c:	f7ff ffb8 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
 8000430:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 8000434:	480d      	ldr	r0, [pc, #52]	; (800046c <stm32_gpio_init+0xac>)
 8000436:	f7ff ffb3 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOI
  gpio_init(GPIOI, &gpio_default_config.PIData);
 800043a:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 800043e:	480c      	ldr	r0, [pc, #48]	; (8000470 <stm32_gpio_init+0xb0>)
 8000440:	f7ff ffae 	bl	80003a0 <gpio_init>
  gpio_init(GPIOJ, &gpio_default_config.PJData);
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
#endif
}
 8000444:	bd10      	pop	{r4, pc}
 8000446:	bf00      	nop
 8000448:	40023800 	.word	0x40023800
 800044c:	08018c08 	.word	0x08018c08
 8000450:	40020000 	.word	0x40020000
 8000454:	40020400 	.word	0x40020400
 8000458:	40020800 	.word	0x40020800
 800045c:	40020c00 	.word	0x40020c00
 8000460:	40021000 	.word	0x40021000
 8000464:	40021400 	.word	0x40021400
 8000468:	40021800 	.word	0x40021800
 800046c:	40021c00 	.word	0x40021c00
 8000470:	40022000 	.word	0x40022000
 8000474:	f3af 8000 	nop.w
 8000478:	f3af 8000 	nop.w
 800047c:	f3af 8000 	nop.w

08000480 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8000480:	b508      	push	{r3, lr}

  stm32_gpio_init();
 8000482:	f7ff ff9d 	bl	80003c0 <stm32_gpio_init>
  stm32_clock_init();
 8000486:	f004 f87b 	bl	8004580 <stm32_clock_init>
}
 800048a:	bd08      	pop	{r3, pc}
 800048c:	f3af 8000 	nop.w

08000490 <sdc_lld_is_card_inserted>:
 * @brief   SDC card detection.
 */
bool sdc_lld_is_card_inserted(SDCDriver *sdcp) {
  static bool last_status = false;

  if (blkIsTransferring(sdcp))
 8000490:	7902      	ldrb	r2, [r0, #4]
 8000492:	1ed3      	subs	r3, r2, #3
 8000494:	b2db      	uxtb	r3, r3
 8000496:	2b01      	cmp	r3, #1
 8000498:	d90a      	bls.n	80004b0 <sdc_lld_is_card_inserted+0x20>
 800049a:	2a06      	cmp	r2, #6
 800049c:	d008      	beq.n	80004b0 <sdc_lld_is_card_inserted+0x20>
 800049e:	2a07      	cmp	r2, #7
 80004a0:	d006      	beq.n	80004b0 <sdc_lld_is_card_inserted+0x20>
    return last_status;
  return last_status = (bool)palReadPad(GPIOC, GPIOC_SD_D3);
 80004a2:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <sdc_lld_is_card_inserted+0x28>)
 80004a4:	6918      	ldr	r0, [r3, #16]
 80004a6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <sdc_lld_is_card_inserted+0x2c>)
 80004ac:	7018      	strb	r0, [r3, #0]
}
 80004ae:	4770      	bx	lr
    return last_status;
 80004b0:	4b02      	ldr	r3, [pc, #8]	; (80004bc <sdc_lld_is_card_inserted+0x2c>)
 80004b2:	7818      	ldrb	r0, [r3, #0]
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40020800 	.word	0x40020800
 80004bc:	20002020 	.word	0x20002020

080004c0 <sdc_lld_is_write_protected>:
 */
bool sdc_lld_is_write_protected(SDCDriver *sdcp) {

  (void)sdcp;
  return false;
}
 80004c0:	2000      	movs	r0, #0
 80004c2:	4770      	bx	lr
 80004c4:	f3af 8000 	nop.w
 80004c8:	f3af 8000 	nop.w
 80004cc:	f3af 8000 	nop.w

080004d0 <boardInit>:
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {

}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
	...

080004e0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 80004e0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 80004e2:	f004 f815 	bl	8004510 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 80004e6:	f004 fd1b 	bl	8004f20 <_pal_lld_init>
#endif
#if (HAL_USE_DAC == TRUE) || defined(__DOXYGEN__)
  dacInit();
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
 80004ea:	f001 fb51 	bl	8001b90 <gptInit>
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 80004ee:	f001 fcff 	bl	8001ef0 <i2cInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 80004f2:	f002 fe0d 	bl	8003110 <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
 80004f6:	f002 fc6b 	bl	8002dd0 <sdcInit>
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 80004fa:	f002 ff49 	bl	8003390 <spiInit>
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
#endif
#if (HAL_USE_RTC == TRUE) || defined(__DOXYGEN__)
  rtcInit();
 80004fe:	f001 ff5f 	bl	80023c0 <rtcInit>
#endif

  /* Community driver overlay initialization.*/
#if defined(HAL_USE_COMMUNITY) || defined(__DOXYGEN__)
#if (HAL_USE_COMMUNITY == TRUE) || defined(__DOXYGEN__)
  halCommunityInit();
 8000502:	f003 faed 	bl	8003ae0 <halCommunityInit>
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8000506:	f7ff ffe3 	bl	80004d0 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 800050a:	f000 f801 	bl	8000510 <stInit>
#endif
}
 800050e:	bd08      	pop	{r3, pc}

08000510 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 8000510:	b508      	push	{r3, lr}

  st_lld_init();
 8000512:	f006 fd35 	bl	8006f80 <st_lld_init>
}
 8000516:	bd08      	pop	{r3, pc}
 8000518:	f3af 8000 	nop.w
 800051c:	f3af 8000 	nop.w

08000520 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8000520:	b510      	push	{r4, lr}
 8000522:	4604      	mov	r4, r0
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000528:	68db      	ldr	r3, [r3, #12]

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 800052a:	f013 0f02 	tst.w	r3, #2
 800052e:	d107      	bne.n	8000540 <stStartAlarm+0x20>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000534:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800053a:	2202      	movs	r2, #2
 800053c:	60da      	str	r2, [r3, #12]

  st_lld_start_alarm(abstime);
}
 800053e:	bd10      	pop	{r4, pc}
  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8000540:	4801      	ldr	r0, [pc, #4]	; (8000548 <stStartAlarm+0x28>)
 8000542:	f007 f8dd 	bl	8007700 <chSysHalt>
 8000546:	e7f3      	b.n	8000530 <stStartAlarm+0x10>
 8000548:	08018d04 	.word	0x08018d04
 800054c:	f3af 8000 	nop.w

08000550 <stStopAlarm>:
  STM32_ST_TIM->DIER = 0;
 8000550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	f3af 8000 	nop.w

08000560 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8000560:	b510      	push	{r4, lr}
 8000562:	4604      	mov	r4, r0
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000568:	68db      	ldr	r3, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 800056a:	f013 0f02 	tst.w	r3, #2
 800056e:	d003      	beq.n	8000578 <stSetAlarm+0x18>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000574:	635c      	str	r4, [r3, #52]	; 0x34

  st_lld_set_alarm(abstime);
}
 8000576:	bd10      	pop	{r4, pc}
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8000578:	4801      	ldr	r0, [pc, #4]	; (8000580 <stSetAlarm+0x20>)
 800057a:	f007 f8c1 	bl	8007700 <chSysHalt>
 800057e:	e7f7      	b.n	8000570 <stSetAlarm+0x10>
 8000580:	08018d14 	.word	0x08018d14
 8000584:	f3af 8000 	nop.w
 8000588:	f3af 8000 	nop.w
 800058c:	f3af 8000 	nop.w

08000590 <stGetAlarm>:
 *
 * @return              The currently set alarm time.
 *
 * @api
 */
systime_t stGetAlarm(void) {
 8000590:	b508      	push	{r3, lr}
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000592:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000596:	68db      	ldr	r3, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8000598:	f013 0f02 	tst.w	r3, #2
 800059c:	d003      	beq.n	80005a6 <stGetAlarm+0x16>
  return (systime_t)STM32_ST_TIM->CCR[0];
 800059e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a2:	6b58      	ldr	r0, [r3, #52]	; 0x34

  return st_lld_get_alarm();
}
 80005a4:	bd08      	pop	{r3, pc}
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <stGetAlarm+0x20>)
 80005a8:	f007 f8aa 	bl	8007700 <chSysHalt>
 80005ac:	e7f7      	b.n	800059e <stGetAlarm+0xe>
 80005ae:	bf00      	nop
 80005b0:	08018d20 	.word	0x08018d20
	...

080005c0 <ibqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t infy, void *link) {
 80005c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005c4:	4688      	mov	r8, r1
 80005c6:	4615      	mov	r5, r2
 80005c8:	461e      	mov	r6, r3
 80005ca:	9f06      	ldr	r7, [sp, #24]

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
 80005cc:	4604      	mov	r4, r0
 80005ce:	b110      	cbz	r0, 80005d6 <ibqObjectInit+0x16>
 80005d0:	b10a      	cbz	r2, 80005d6 <ibqObjectInit+0x16>
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d802      	bhi.n	80005dc <ibqObjectInit+0x1c>
 80005d6:	480d      	ldr	r0, [pc, #52]	; (800060c <ibqObjectInit+0x4c>)
 80005d8:	f007 f892 	bl	8007700 <chSysHalt>
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80005dc:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
 80005de:	6064      	str	r4, [r4, #4]

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->suspended = suspended;
 80005e0:	f884 8008 	strb.w	r8, [r4, #8]
  ibqp->bcounter  = 0;
 80005e4:	2200      	movs	r2, #0
 80005e6:	60e2      	str	r2, [r4, #12]
  ibqp->brdptr    = bp;
 80005e8:	6165      	str	r5, [r4, #20]
  ibqp->bwrptr    = bp;
 80005ea:	6125      	str	r5, [r4, #16]
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80005ec:	3604      	adds	r6, #4
 80005ee:	fb07 5106 	mla	r1, r7, r6, r5
 80005f2:	61a1      	str	r1, [r4, #24]
  ibqp->bsize     = size + sizeof (size_t);
 80005f4:	61e6      	str	r6, [r4, #28]
  ibqp->bn        = n;
 80005f6:	6227      	str	r7, [r4, #32]
  ibqp->buffers   = bp;
 80005f8:	6265      	str	r5, [r4, #36]	; 0x24
  ibqp->ptr       = NULL;
 80005fa:	62a2      	str	r2, [r4, #40]	; 0x28
  ibqp->top       = NULL;
 80005fc:	62e2      	str	r2, [r4, #44]	; 0x2c
  ibqp->notify    = infy;
 80005fe:	9b07      	ldr	r3, [sp, #28]
 8000600:	6323      	str	r3, [r4, #48]	; 0x30
  ibqp->link      = link;
 8000602:	9b08      	ldr	r3, [sp, #32]
 8000604:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800060a:	bf00      	nop
 800060c:	08018d2c 	.word	0x08018d2c

08000610 <ibqResetI>:
 *
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 *
 * @iclass
 */
void ibqResetI(input_buffers_queue_t *ibqp) {
 8000610:	b510      	push	{r4, lr}
 8000612:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8000614:	f007 faa4 	bl	8007b60 <chDbgCheckClassI>

  ibqp->bcounter  = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	60e3      	str	r3, [r4, #12]
  ibqp->brdptr    = ibqp->buffers;
 800061c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800061e:	6162      	str	r2, [r4, #20]
  ibqp->bwrptr    = ibqp->buffers;
 8000620:	6122      	str	r2, [r4, #16]
  ibqp->ptr       = NULL;
 8000622:	62a3      	str	r3, [r4, #40]	; 0x28
  ibqp->top       = NULL;
 8000624:	62e3      	str	r3, [r4, #44]	; 0x2c
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8000626:	f06f 0101 	mvn.w	r1, #1
 800062a:	4620      	mov	r0, r4
 800062c:	f008 fc18 	bl	8008e60 <chThdDequeueAllI>
  osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
}
 8000630:	bd10      	pop	{r4, pc}
 8000632:	bf00      	nop
 8000634:	f3af 8000 	nop.w
 8000638:	f3af 8000 	nop.w
 800063c:	f3af 8000 	nop.w

08000640 <ibqGetEmptyBufferI>:
 * @return              A pointer to the next buffer to be filled.
 * @retval NULL         if the queue is full.
 *
 * @iclass
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 8000640:	b510      	push	{r4, lr}
 8000642:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8000644:	f007 fa8c 	bl	8007b60 <chDbgCheckClassI>

  if (ibqIsFullI(ibqp)) {
 8000648:	6920      	ldr	r0, [r4, #16]
 800064a:	6963      	ldr	r3, [r4, #20]
 800064c:	4298      	cmp	r0, r3
 800064e:	d003      	beq.n	8000658 <ibqGetEmptyBufferI+0x18>
 8000650:	2300      	movs	r3, #0
 8000652:	b933      	cbnz	r3, 8000662 <ibqGetEmptyBufferI+0x22>
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 8000654:	3004      	adds	r0, #4
}
 8000656:	bd10      	pop	{r4, pc}
  if (ibqIsFullI(ibqp)) {
 8000658:	68e3      	ldr	r3, [r4, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <ibqGetEmptyBufferI+0x12>
 800065e:	2301      	movs	r3, #1
 8000660:	e7f7      	b.n	8000652 <ibqGetEmptyBufferI+0x12>
    return NULL;
 8000662:	2000      	movs	r0, #0
 8000664:	e7f7      	b.n	8000656 <ibqGetEmptyBufferI+0x16>
 8000666:	bf00      	nop
 8000668:	f3af 8000 	nop.w
 800066c:	f3af 8000 	nop.w

08000670 <ibqPostFullBufferI>:
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @iclass
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 8000670:	b538      	push	{r3, r4, r5, lr}
 8000672:	4604      	mov	r4, r0
 8000674:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8000676:	f007 fa73 	bl	8007b60 <chDbgCheckClassI>

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 800067a:	b11d      	cbz	r5, 8000684 <ibqPostFullBufferI+0x14>
 800067c:	69e3      	ldr	r3, [r4, #28]
 800067e:	3b04      	subs	r3, #4
 8000680:	42ab      	cmp	r3, r5
 8000682:	d202      	bcs.n	800068a <ibqPostFullBufferI+0x1a>
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <ibqPostFullBufferI+0x60>)
 8000686:	f007 f83b 	bl	8007700 <chSysHalt>
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 800068a:	6922      	ldr	r2, [r4, #16]
 800068c:	6963      	ldr	r3, [r4, #20]
 800068e:	429a      	cmp	r2, r3
 8000690:	d014      	beq.n	80006bc <ibqPostFullBufferI+0x4c>
 8000692:	2300      	movs	r3, #0
 8000694:	b9bb      	cbnz	r3, 80006c6 <ibqPostFullBufferI+0x56>

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8000696:	6923      	ldr	r3, [r4, #16]
 8000698:	601d      	str	r5, [r3, #0]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 800069a:	68e3      	ldr	r3, [r4, #12]
 800069c:	3301      	adds	r3, #1
 800069e:	60e3      	str	r3, [r4, #12]
  ibqp->bwrptr += ibqp->bsize;
 80006a0:	69e2      	ldr	r2, [r4, #28]
 80006a2:	6923      	ldr	r3, [r4, #16]
 80006a4:	4413      	add	r3, r2
 80006a6:	6123      	str	r3, [r4, #16]
  if (ibqp->bwrptr >= ibqp->btop) {
 80006a8:	69a2      	ldr	r2, [r4, #24]
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d301      	bcc.n	80006b2 <ibqPostFullBufferI+0x42>
    ibqp->bwrptr = ibqp->buffers;
 80006ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006b0:	6123      	str	r3, [r4, #16]
  chThdDequeueNextI(tqp, msg);
 80006b2:	2100      	movs	r1, #0
 80006b4:	4620      	mov	r0, r4
 80006b6:	f008 fbb3 	bl	8008e20 <chThdDequeueNextI>
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
}
 80006ba:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 80006bc:	68e3      	ldr	r3, [r4, #12]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0e8      	beq.n	8000694 <ibqPostFullBufferI+0x24>
 80006c2:	2301      	movs	r3, #1
 80006c4:	e7e6      	b.n	8000694 <ibqPostFullBufferI+0x24>
 80006c6:	4802      	ldr	r0, [pc, #8]	; (80006d0 <ibqPostFullBufferI+0x60>)
 80006c8:	f007 f81a 	bl	8007700 <chSysHalt>
 80006cc:	e7e3      	b.n	8000696 <ibqPostFullBufferI+0x26>
 80006ce:	bf00      	nop
 80006d0:	08018d3c 	.word	0x08018d3c
 80006d4:	f3af 8000 	nop.w
 80006d8:	f3af 8000 	nop.w
 80006dc:	f3af 8000 	nop.w

080006e0 <ibqGetFullBufferTimeoutS>:
   *                      suspended state.
   *
   * @sclass
   */
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 sysinterval_t timeout) {
 80006e0:	b5d0      	push	{r4, r6, r7, lr}
 80006e2:	4604      	mov	r4, r0
 80006e4:	4616      	mov	r6, r2
 80006e6:	461f      	mov	r7, r3

  osalDbgCheckClassS();
 80006e8:	f007 fa52 	bl	8007b90 <chDbgCheckClassS>

  while (ibqIsEmptyI(ibqp)) {
 80006ec:	68e3      	ldr	r3, [r4, #12]
 80006ee:	b94b      	cbnz	r3, 8000704 <ibqGetFullBufferTimeoutS+0x24>
    if (ibqp->suspended) {
 80006f0:	7a23      	ldrb	r3, [r4, #8]
 80006f2:	b9ab      	cbnz	r3, 8000720 <ibqGetFullBufferTimeoutS+0x40>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80006f4:	4632      	mov	r2, r6
 80006f6:	463b      	mov	r3, r7
 80006f8:	4620      	mov	r0, r4
 80006fa:	f008 fb79 	bl	8008df0 <chThdEnqueueTimeoutS>
      return MSG_RESET;
    }
    msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
    if (msg < MSG_OK) {
 80006fe:	2800      	cmp	r0, #0
 8000700:	daf4      	bge.n	80006ec <ibqGetFullBufferTimeoutS+0xc>
 8000702:	e008      	b.n	8000716 <ibqGetFullBufferTimeoutS+0x36>
       return msg;
    }
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 8000704:	68e3      	ldr	r3, [r4, #12]
 8000706:	b13b      	cbz	r3, 8000718 <ibqGetFullBufferTimeoutS+0x38>

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8000708:	6962      	ldr	r2, [r4, #20]
 800070a:	1d13      	adds	r3, r2, #4
 800070c:	62a3      	str	r3, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 800070e:	6812      	ldr	r2, [r2, #0]
 8000710:	4413      	add	r3, r2
 8000712:	62e3      	str	r3, [r4, #44]	; 0x2c

  return MSG_OK;
 8000714:	2000      	movs	r0, #0
}
 8000716:	bdd0      	pop	{r4, r6, r7, pc}
  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <ibqGetFullBufferTimeoutS+0x48>)
 800071a:	f006 fff1 	bl	8007700 <chSysHalt>
 800071e:	e7f3      	b.n	8000708 <ibqGetFullBufferTimeoutS+0x28>
      return MSG_RESET;
 8000720:	f06f 0001 	mvn.w	r0, #1
 8000724:	e7f7      	b.n	8000716 <ibqGetFullBufferTimeoutS+0x36>
 8000726:	bf00      	nop
 8000728:	08018d50 	.word	0x08018d50
 800072c:	f3af 8000 	nop.w

08000730 <ibqGetFullBufferTimeout>:
                              sysinterval_t timeout) {
 8000730:	b5d0      	push	{r4, r6, r7, lr}
 8000732:	4604      	mov	r4, r0
 8000734:	4616      	mov	r6, r2
 8000736:	461f      	mov	r7, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000738:	2320      	movs	r3, #32
 800073a:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800073e:	f008 fc6f 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000742:	f007 f96d 	bl	8007a20 <_dbg_check_lock>
  msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8000746:	4632      	mov	r2, r6
 8000748:	463b      	mov	r3, r7
 800074a:	4620      	mov	r0, r4
 800074c:	f7ff ffc8 	bl	80006e0 <ibqGetFullBufferTimeoutS>
 8000750:	4604      	mov	r4, r0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000752:	f007 f97d 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000756:	f008 fc6b 	bl	8009030 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <ibqGetFullBufferTimeout+0x50>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	429a      	cmp	r2, r3
 8000760:	d004      	beq.n	800076c <ibqGetFullBufferTimeout+0x3c>
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	6899      	ldr	r1, [r3, #8]
 8000766:	6893      	ldr	r3, [r2, #8]
 8000768:	4299      	cmp	r1, r3
 800076a:	d304      	bcc.n	8000776 <ibqGetFullBufferTimeout+0x46>
 800076c:	2300      	movs	r3, #0
 800076e:	f383 8811 	msr	BASEPRI, r3
}
 8000772:	4620      	mov	r0, r4
 8000774:	bdd0      	pop	{r4, r6, r7, pc}
 8000776:	4803      	ldr	r0, [pc, #12]	; (8000784 <ibqGetFullBufferTimeout+0x54>)
 8000778:	f006 ffc2 	bl	8007700 <chSysHalt>
 800077c:	e7f6      	b.n	800076c <ibqGetFullBufferTimeout+0x3c>
 800077e:	bf00      	nop
 8000780:	200050f8 	.word	0x200050f8
 8000784:	08018d6c 	.word	0x08018d6c
 8000788:	f3af 8000 	nop.w
 800078c:	f3af 8000 	nop.w

08000790 <ibqReleaseEmptyBufferS>:
   *
   * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
   *
   * @sclass
   */
  void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 8000790:	b510      	push	{r4, lr}
 8000792:	4604      	mov	r4, r0

  osalDbgCheckClassS();
 8000794:	f007 f9fc 	bl	8007b90 <chDbgCheckClassS>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 8000798:	68e3      	ldr	r3, [r4, #12]
 800079a:	b193      	cbz	r3, 80007c2 <ibqReleaseEmptyBufferS+0x32>

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 800079c:	68e3      	ldr	r3, [r4, #12]
 800079e:	3b01      	subs	r3, #1
 80007a0:	60e3      	str	r3, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 80007a2:	69e2      	ldr	r2, [r4, #28]
 80007a4:	6963      	ldr	r3, [r4, #20]
 80007a6:	4413      	add	r3, r2
 80007a8:	6163      	str	r3, [r4, #20]
  if (ibqp->brdptr >= ibqp->btop) {
 80007aa:	69a2      	ldr	r2, [r4, #24]
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d301      	bcc.n	80007b4 <ibqReleaseEmptyBufferS+0x24>
    ibqp->brdptr = ibqp->buffers;
 80007b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007b2:	6163      	str	r3, [r4, #20]
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 80007b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007ba:	b10b      	cbz	r3, 80007c0 <ibqReleaseEmptyBufferS+0x30>
    ibqp->notify(ibqp);
 80007bc:	4620      	mov	r0, r4
 80007be:	4798      	blx	r3
  }
}
 80007c0:	bd10      	pop	{r4, pc}
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 80007c2:	4802      	ldr	r0, [pc, #8]	; (80007cc <ibqReleaseEmptyBufferS+0x3c>)
 80007c4:	f006 ff9c 	bl	8007700 <chSysHalt>
 80007c8:	e7e8      	b.n	800079c <ibqReleaseEmptyBufferS+0xc>
 80007ca:	bf00      	nop
 80007cc:	08018d78 	.word	0x08018d78

080007d0 <ibqReleaseEmptyBuffer>:
void ibqReleaseEmptyBuffer(input_buffers_queue_t *ibqp) {
 80007d0:	b510      	push	{r4, lr}
 80007d2:	4604      	mov	r4, r0
 80007d4:	2320      	movs	r3, #32
 80007d6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80007da:	f008 fc21 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80007de:	f007 f91f 	bl	8007a20 <_dbg_check_lock>
  ibqReleaseEmptyBufferS(ibqp);
 80007e2:	4620      	mov	r0, r4
 80007e4:	f7ff ffd4 	bl	8000790 <ibqReleaseEmptyBufferS>
  _dbg_check_unlock();
 80007e8:	f007 f932 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80007ec:	f008 fc20 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <ibqReleaseEmptyBuffer+0x44>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d004      	beq.n	8000802 <ibqReleaseEmptyBuffer+0x32>
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	6899      	ldr	r1, [r3, #8]
 80007fc:	6893      	ldr	r3, [r2, #8]
 80007fe:	4299      	cmp	r1, r3
 8000800:	d303      	bcc.n	800080a <ibqReleaseEmptyBuffer+0x3a>
 8000802:	2300      	movs	r3, #0
 8000804:	f383 8811 	msr	BASEPRI, r3
}
 8000808:	bd10      	pop	{r4, pc}
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <ibqReleaseEmptyBuffer+0x48>)
 800080c:	f006 ff78 	bl	8007700 <chSysHalt>
 8000810:	e7f7      	b.n	8000802 <ibqReleaseEmptyBuffer+0x32>
 8000812:	bf00      	nop
 8000814:	200050f8 	.word	0x200050f8
 8000818:	08018d6c 	.word	0x08018d6c
 800081c:	f3af 8000 	nop.w

08000820 <ibqGetTimeout>:
 * @retval MSG_RESET    if the queue has been reset or has been put in
 *                      suspended state.
 *
 * @api
 */
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8000820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000822:	4604      	mov	r4, r0
 8000824:	4616      	mov	r6, r2
 8000826:	461f      	mov	r7, r3
 8000828:	2320      	movs	r3, #32
 800082a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800082e:	f008 fbf7 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000832:	f007 f8f5 	bl	8007a20 <_dbg_check_lock>
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
 8000836:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000838:	b1c3      	cbz	r3, 800086c <ibqGetTimeout+0x4c>
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 800083a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800083c:	f813 5b01 	ldrb.w	r5, [r3], #1
  ibqp->ptr++;
 8000840:	62a3      	str	r3, [r4, #40]	; 0x28

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 8000842:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000844:	4293      	cmp	r3, r2
 8000846:	d22e      	bcs.n	80008a6 <ibqGetTimeout+0x86>
  _dbg_check_unlock();
 8000848:	f007 f902 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800084c:	f008 fbf0 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <ibqGetTimeout+0x98>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	429a      	cmp	r2, r3
 8000856:	d004      	beq.n	8000862 <ibqGetTimeout+0x42>
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	6899      	ldr	r1, [r3, #8]
 800085c:	6893      	ldr	r3, [r2, #8]
 800085e:	4299      	cmp	r1, r3
 8000860:	d325      	bcc.n	80008ae <ibqGetTimeout+0x8e>
 8000862:	2300      	movs	r3, #0
 8000864:	f383 8811 	msr	BASEPRI, r3
    ibqReleaseEmptyBufferS(ibqp);
  }

  osalSysUnlock();
  return msg;
}
 8000868:	4628      	mov	r0, r5
 800086a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 800086c:	4632      	mov	r2, r6
 800086e:	463b      	mov	r3, r7
 8000870:	4620      	mov	r0, r4
 8000872:	f7ff ff35 	bl	80006e0 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 8000876:	4605      	mov	r5, r0
 8000878:	2800      	cmp	r0, #0
 800087a:	d0de      	beq.n	800083a <ibqGetTimeout+0x1a>
  _dbg_check_unlock();
 800087c:	f007 f8e8 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000880:	f008 fbd6 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <ibqGetTimeout+0x98>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	429a      	cmp	r2, r3
 800088a:	d004      	beq.n	8000896 <ibqGetTimeout+0x76>
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	6899      	ldr	r1, [r3, #8]
 8000890:	6893      	ldr	r3, [r2, #8]
 8000892:	4299      	cmp	r1, r3
 8000894:	d303      	bcc.n	800089e <ibqGetTimeout+0x7e>
 8000896:	2300      	movs	r3, #0
 8000898:	f383 8811 	msr	BASEPRI, r3
 800089c:	e7e4      	b.n	8000868 <ibqGetTimeout+0x48>
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <ibqGetTimeout+0x9c>)
 80008a0:	f006 ff2e 	bl	8007700 <chSysHalt>
 80008a4:	e7f7      	b.n	8000896 <ibqGetTimeout+0x76>
    ibqReleaseEmptyBufferS(ibqp);
 80008a6:	4620      	mov	r0, r4
 80008a8:	f7ff ff72 	bl	8000790 <ibqReleaseEmptyBufferS>
 80008ac:	e7cc      	b.n	8000848 <ibqGetTimeout+0x28>
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <ibqGetTimeout+0x9c>)
 80008b0:	f006 ff26 	bl	8007700 <chSysHalt>
 80008b4:	e7d5      	b.n	8000862 <ibqGetTimeout+0x42>
 80008b6:	bf00      	nop
 80008b8:	200050f8 	.word	0x200050f8
 80008bc:	08018d6c 	.word	0x08018d6c

080008c0 <ibqReadTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80008c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
  size_t r = 0;

  osalDbgCheck(n > 0U);
 80008c8:	4690      	mov	r8, r2
 80008ca:	b142      	cbz	r2, 80008de <ibqReadTimeout+0x1e>
 80008cc:	2320      	movs	r3, #32
 80008ce:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80008d2:	f008 fba5 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80008d6:	f007 f8a3 	bl	8007a20 <_dbg_check_lock>
  size_t r = 0;
 80008da:	2600      	movs	r6, #0
 80008dc:	e047      	b.n	800096e <ibqReadTimeout+0xae>
  osalDbgCheck(n > 0U);
 80008de:	483b      	ldr	r0, [pc, #236]	; (80009cc <ibqReadTimeout+0x10c>)
 80008e0:	f006 ff0e 	bl	8007700 <chSysHalt>
 80008e4:	e7f2      	b.n	80008cc <ibqReadTimeout+0xc>
    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
      msg_t msg;

      /* Getting a data buffer using the specified timeout.*/
      msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 80008e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80008ea:	4620      	mov	r0, r4
 80008ec:	f7ff fef8 	bl	80006e0 <ibqGetFullBufferTimeoutS>

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d03f      	beq.n	8000974 <ibqReadTimeout+0xb4>
  _dbg_check_unlock();
 80008f4:	f007 f8ac 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80008f8:	f008 fb9a 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80008fc:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <ibqReadTimeout+0x110>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	429a      	cmp	r2, r3
 8000902:	d004      	beq.n	800090e <ibqReadTimeout+0x4e>
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	6899      	ldr	r1, [r3, #8]
 8000908:	6893      	ldr	r3, [r2, #8]
 800090a:	4299      	cmp	r1, r3
 800090c:	d305      	bcc.n	800091a <ibqReadTimeout+0x5a>
 800090e:	2300      	movs	r3, #0
 8000910:	f383 8811 	msr	BASEPRI, r3
    if (r >= n) {
      return r;
    }
    osalSysLock();
  }
}
 8000914:	4630      	mov	r0, r6
 8000916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800091a:	482e      	ldr	r0, [pc, #184]	; (80009d4 <ibqReadTimeout+0x114>)
 800091c:	f006 fef0 	bl	8007700 <chSysHalt>
 8000920:	e7f5      	b.n	800090e <ibqReadTimeout+0x4e>
      memcpy(bp, ibqp->ptr, size);
 8000922:	462a      	mov	r2, r5
 8000924:	4638      	mov	r0, r7
 8000926:	f017 fb1b 	bl	8017f60 <memcpy>
      bp        += size;
 800092a:	442f      	add	r7, r5
      ibqp->ptr += size;
 800092c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800092e:	442b      	add	r3, r5
 8000930:	62a3      	str	r3, [r4, #40]	; 0x28
      r         += size;
 8000932:	442e      	add	r6, r5
    if (ibqp->ptr >= ibqp->top) {
 8000934:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000936:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000938:	429a      	cmp	r2, r3
 800093a:	d23e      	bcs.n	80009ba <ibqReadTimeout+0xfa>
  _dbg_check_unlock();
 800093c:	f007 f888 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000940:	f008 fb76 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <ibqReadTimeout+0x110>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	429a      	cmp	r2, r3
 800094a:	d004      	beq.n	8000956 <ibqReadTimeout+0x96>
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	6899      	ldr	r1, [r3, #8]
 8000950:	6893      	ldr	r3, [r2, #8]
 8000952:	4299      	cmp	r1, r3
 8000954:	d335      	bcc.n	80009c2 <ibqReadTimeout+0x102>
 8000956:	2300      	movs	r3, #0
 8000958:	f383 8811 	msr	BASEPRI, r3
    if (r >= n) {
 800095c:	4546      	cmp	r6, r8
 800095e:	d2d9      	bcs.n	8000914 <ibqReadTimeout+0x54>
 8000960:	2320      	movs	r3, #32
 8000962:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000966:	f008 fb5b 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800096a:	f007 f859 	bl	8007a20 <_dbg_check_lock>
    if (ibqp->ptr == NULL) {
 800096e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0b8      	beq.n	80008e6 <ibqReadTimeout+0x26>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8000974:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000976:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000978:	1a5b      	subs	r3, r3, r1
    if (size > (n - r)) {
 800097a:	eba8 0506 	sub.w	r5, r8, r6
 800097e:	429d      	cmp	r5, r3
 8000980:	d300      	bcc.n	8000984 <ibqReadTimeout+0xc4>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8000982:	461d      	mov	r5, r3
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8000984:	2d40      	cmp	r5, #64	; 0x40
 8000986:	d9cc      	bls.n	8000922 <ibqReadTimeout+0x62>
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8000988:	460b      	mov	r3, r1
 800098a:	463a      	mov	r2, r7
 800098c:	3140      	adds	r1, #64	; 0x40
 800098e:	f8d3 e000 	ldr.w	lr, [r3]
 8000992:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8000996:	689d      	ldr	r5, [r3, #8]
 8000998:	68d8      	ldr	r0, [r3, #12]
 800099a:	f8c2 e000 	str.w	lr, [r2]
 800099e:	f8c2 c004 	str.w	ip, [r2, #4]
 80009a2:	6095      	str	r5, [r2, #8]
 80009a4:	60d0      	str	r0, [r2, #12]
 80009a6:	3310      	adds	r3, #16
 80009a8:	3210      	adds	r2, #16
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d1ef      	bne.n	800098e <ibqReadTimeout+0xce>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 80009ae:	3740      	adds	r7, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80009b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009b2:	3340      	adds	r3, #64	; 0x40
 80009b4:	62a3      	str	r3, [r4, #40]	; 0x28
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 80009b6:	3640      	adds	r6, #64	; 0x40
 80009b8:	e7bc      	b.n	8000934 <ibqReadTimeout+0x74>
      ibqReleaseEmptyBufferS(ibqp);
 80009ba:	4620      	mov	r0, r4
 80009bc:	f7ff fee8 	bl	8000790 <ibqReleaseEmptyBufferS>
 80009c0:	e7bc      	b.n	800093c <ibqReadTimeout+0x7c>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80009c2:	4804      	ldr	r0, [pc, #16]	; (80009d4 <ibqReadTimeout+0x114>)
 80009c4:	f006 fe9c 	bl	8007700 <chSysHalt>
 80009c8:	e7c5      	b.n	8000956 <ibqReadTimeout+0x96>
 80009ca:	bf00      	nop
 80009cc:	08018d90 	.word	0x08018d90
 80009d0:	200050f8 	.word	0x200050f8
 80009d4:	08018d6c 	.word	0x08018d6c
 80009d8:	f3af 8000 	nop.w
 80009dc:	f3af 8000 	nop.w

080009e0 <obqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t onfy, void *link) {
 80009e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009e4:	4688      	mov	r8, r1
 80009e6:	4615      	mov	r5, r2
 80009e8:	461e      	mov	r6, r3
 80009ea:	9f06      	ldr	r7, [sp, #24]

  osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 80009ec:	4604      	mov	r4, r0
 80009ee:	b110      	cbz	r0, 80009f6 <obqObjectInit+0x16>
 80009f0:	b10a      	cbz	r2, 80009f6 <obqObjectInit+0x16>
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d802      	bhi.n	80009fc <obqObjectInit+0x1c>
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <obqObjectInit+0x4c>)
 80009f8:	f006 fe82 	bl	8007700 <chSysHalt>
  tqp->next = (thread_t *)tqp;
 80009fc:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
 80009fe:	6064      	str	r4, [r4, #4]

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->suspended = suspended;
 8000a00:	f884 8008 	strb.w	r8, [r4, #8]
  obqp->bcounter  = n;
 8000a04:	60e7      	str	r7, [r4, #12]
  obqp->brdptr    = bp;
 8000a06:	6165      	str	r5, [r4, #20]
  obqp->bwrptr    = bp;
 8000a08:	6125      	str	r5, [r4, #16]
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8000a0a:	3604      	adds	r6, #4
 8000a0c:	fb07 5206 	mla	r2, r7, r6, r5
 8000a10:	61a2      	str	r2, [r4, #24]
  obqp->bsize     = size + sizeof (size_t);
 8000a12:	61e6      	str	r6, [r4, #28]
  obqp->bn        = n;
 8000a14:	6227      	str	r7, [r4, #32]
  obqp->buffers   = bp;
 8000a16:	6265      	str	r5, [r4, #36]	; 0x24
  obqp->ptr       = NULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62a3      	str	r3, [r4, #40]	; 0x28
  obqp->top       = NULL;
 8000a1c:	62e3      	str	r3, [r4, #44]	; 0x2c
  obqp->notify    = onfy;
 8000a1e:	9b07      	ldr	r3, [sp, #28]
 8000a20:	6323      	str	r3, [r4, #48]	; 0x30
  obqp->link      = link;
 8000a22:	9b08      	ldr	r3, [sp, #32]
 8000a24:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a2a:	bf00      	nop
 8000a2c:	08018da0 	.word	0x08018da0

08000a30 <obqResetI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqResetI(output_buffers_queue_t *obqp) {
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8000a34:	f007 f894 	bl	8007b60 <chDbgCheckClassI>

  obqp->bcounter  = bqSizeX(obqp);
 8000a38:	6a23      	ldr	r3, [r4, #32]
 8000a3a:	60e3      	str	r3, [r4, #12]
  obqp->brdptr    = obqp->buffers;
 8000a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a3e:	6163      	str	r3, [r4, #20]
  obqp->bwrptr    = obqp->buffers;
 8000a40:	6123      	str	r3, [r4, #16]
  obqp->ptr       = NULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62a3      	str	r3, [r4, #40]	; 0x28
  obqp->top       = NULL;
 8000a46:	62e3      	str	r3, [r4, #44]	; 0x2c
  chThdDequeueAllI(tqp, msg);
 8000a48:	f06f 0101 	mvn.w	r1, #1
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	f008 fa07 	bl	8008e60 <chThdDequeueAllI>
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
}
 8000a52:	bd10      	pop	{r4, pc}
 8000a54:	f3af 8000 	nop.w
 8000a58:	f3af 8000 	nop.w
 8000a5c:	f3af 8000 	nop.w

08000a60 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 8000a60:	b538      	push	{r3, r4, r5, lr}
 8000a62:	4604      	mov	r4, r0
 8000a64:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8000a66:	f007 f87b 	bl	8007b60 <chDbgCheckClassI>

  if (obqIsEmptyI(obqp)) {
 8000a6a:	6922      	ldr	r2, [r4, #16]
 8000a6c:	6963      	ldr	r3, [r4, #20]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d006      	beq.n	8000a80 <obqGetFullBufferI+0x20>
 8000a72:	2200      	movs	r2, #0
 8000a74:	b94a      	cbnz	r2, 8000a8a <obqGetFullBufferI+0x2a>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	602b      	str	r3, [r5, #0]

  return obqp->brdptr + sizeof (size_t);
 8000a7a:	6960      	ldr	r0, [r4, #20]
 8000a7c:	3004      	adds	r0, #4
}
 8000a7e:	bd38      	pop	{r3, r4, r5, pc}
  if (obqIsEmptyI(obqp)) {
 8000a80:	68e2      	ldr	r2, [r4, #12]
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d0f6      	beq.n	8000a74 <obqGetFullBufferI+0x14>
 8000a86:	2201      	movs	r2, #1
 8000a88:	e7f4      	b.n	8000a74 <obqGetFullBufferI+0x14>
    return NULL;
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	e7f7      	b.n	8000a7e <obqGetFullBufferI+0x1e>
 8000a8e:	bf00      	nop

08000a90 <obqReleaseEmptyBufferI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 8000a90:	b510      	push	{r4, lr}
 8000a92:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8000a94:	f007 f864 	bl	8007b60 <chDbgCheckClassI>
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 8000a98:	6922      	ldr	r2, [r4, #16]
 8000a9a:	6963      	ldr	r3, [r4, #20]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d012      	beq.n	8000ac6 <obqReleaseEmptyBufferI+0x36>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	b9ab      	cbnz	r3, 8000ad0 <obqReleaseEmptyBufferI+0x40>

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8000aa4:	68e3      	ldr	r3, [r4, #12]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	60e3      	str	r3, [r4, #12]
  obqp->brdptr += obqp->bsize;
 8000aaa:	69e2      	ldr	r2, [r4, #28]
 8000aac:	6963      	ldr	r3, [r4, #20]
 8000aae:	4413      	add	r3, r2
 8000ab0:	6163      	str	r3, [r4, #20]
  if (obqp->brdptr >= obqp->btop) {
 8000ab2:	69a2      	ldr	r2, [r4, #24]
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d301      	bcc.n	8000abc <obqReleaseEmptyBufferI+0x2c>
    obqp->brdptr = obqp->buffers;
 8000ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000aba:	6163      	str	r3, [r4, #20]
  chThdDequeueNextI(tqp, msg);
 8000abc:	2100      	movs	r1, #0
 8000abe:	4620      	mov	r0, r4
 8000ac0:	f008 f9ae 	bl	8008e20 <chThdDequeueNextI>
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
}
 8000ac4:	bd10      	pop	{r4, pc}
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 8000ac6:	68e3      	ldr	r3, [r4, #12]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d0ea      	beq.n	8000aa2 <obqReleaseEmptyBufferI+0x12>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e7e8      	b.n	8000aa2 <obqReleaseEmptyBufferI+0x12>
 8000ad0:	4801      	ldr	r0, [pc, #4]	; (8000ad8 <obqReleaseEmptyBufferI+0x48>)
 8000ad2:	f006 fe15 	bl	8007700 <chSysHalt>
 8000ad6:	e7e5      	b.n	8000aa4 <obqReleaseEmptyBufferI+0x14>
 8000ad8:	08018db0 	.word	0x08018db0
 8000adc:	f3af 8000 	nop.w

08000ae0 <obqGetEmptyBufferTimeoutS>:
 *                      suspended state.
 *
 * @sclass
 */
msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                sysinterval_t timeout) {
 8000ae0:	b5d0      	push	{r4, r6, r7, lr}
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4616      	mov	r6, r2
 8000ae6:	461f      	mov	r7, r3

  osalDbgCheckClassS();
 8000ae8:	f007 f852 	bl	8007b90 <chDbgCheckClassS>

  while (obqIsFullI(obqp)) {
 8000aec:	68e3      	ldr	r3, [r4, #12]
 8000aee:	b94b      	cbnz	r3, 8000b04 <obqGetEmptyBufferTimeoutS+0x24>
    if (obqp->suspended) {
 8000af0:	7a23      	ldrb	r3, [r4, #8]
 8000af2:	b9ab      	cbnz	r3, 8000b20 <obqGetEmptyBufferTimeoutS+0x40>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8000af4:	4632      	mov	r2, r6
 8000af6:	463b      	mov	r3, r7
 8000af8:	4620      	mov	r0, r4
 8000afa:	f008 f979 	bl	8008df0 <chThdEnqueueTimeoutS>
      return MSG_RESET;
    }
    msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
    if (msg < MSG_OK) {
 8000afe:	2800      	cmp	r0, #0
 8000b00:	daf4      	bge.n	8000aec <obqGetEmptyBufferTimeoutS+0xc>
 8000b02:	e008      	b.n	8000b16 <obqGetEmptyBufferTimeoutS+0x36>
      return msg;
    }
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");
 8000b04:	68e3      	ldr	r3, [r4, #12]
 8000b06:	b13b      	cbz	r3, 8000b18 <obqGetEmptyBufferTimeoutS+0x38>

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8000b08:	6923      	ldr	r3, [r4, #16]
 8000b0a:	1d1a      	adds	r2, r3, #4
 8000b0c:	62a2      	str	r2, [r4, #40]	; 0x28
  obqp->top = obqp->bwrptr + obqp->bsize;
 8000b0e:	69e2      	ldr	r2, [r4, #28]
 8000b10:	4413      	add	r3, r2
 8000b12:	62e3      	str	r3, [r4, #44]	; 0x2c

  return MSG_OK;
 8000b14:	2000      	movs	r0, #0
}
 8000b16:	bdd0      	pop	{r4, r6, r7, pc}
  osalDbgAssert(!obqIsFullI(obqp), "still full");
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <obqGetEmptyBufferTimeoutS+0x48>)
 8000b1a:	f006 fdf1 	bl	8007700 <chSysHalt>
 8000b1e:	e7f3      	b.n	8000b08 <obqGetEmptyBufferTimeoutS+0x28>
      return MSG_RESET;
 8000b20:	f06f 0001 	mvn.w	r0, #1
 8000b24:	e7f7      	b.n	8000b16 <obqGetEmptyBufferTimeoutS+0x36>
 8000b26:	bf00      	nop
 8000b28:	08018dc8 	.word	0x08018dc8
 8000b2c:	f3af 8000 	nop.w

08000b30 <obqGetEmptyBufferTimeout>:
                               sysinterval_t timeout) {
 8000b30:	b5d0      	push	{r4, r6, r7, lr}
 8000b32:	4604      	mov	r4, r0
 8000b34:	4616      	mov	r6, r2
 8000b36:	461f      	mov	r7, r3
 8000b38:	2320      	movs	r3, #32
 8000b3a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000b3e:	f008 fa6f 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000b42:	f006 ff6d 	bl	8007a20 <_dbg_check_lock>
  msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8000b46:	4632      	mov	r2, r6
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f7ff ffc8 	bl	8000ae0 <obqGetEmptyBufferTimeoutS>
 8000b50:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8000b52:	f006 ff7d 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000b56:	f008 fa6b 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <obqGetEmptyBufferTimeout+0x50>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d004      	beq.n	8000b6c <obqGetEmptyBufferTimeout+0x3c>
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	6899      	ldr	r1, [r3, #8]
 8000b66:	6893      	ldr	r3, [r2, #8]
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	d304      	bcc.n	8000b76 <obqGetEmptyBufferTimeout+0x46>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f383 8811 	msr	BASEPRI, r3
}
 8000b72:	4620      	mov	r0, r4
 8000b74:	bdd0      	pop	{r4, r6, r7, pc}
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <obqGetEmptyBufferTimeout+0x54>)
 8000b78:	f006 fdc2 	bl	8007700 <chSysHalt>
 8000b7c:	e7f6      	b.n	8000b6c <obqGetEmptyBufferTimeout+0x3c>
 8000b7e:	bf00      	nop
 8000b80:	200050f8 	.word	0x200050f8
 8000b84:	08018d6c 	.word	0x08018d6c
 8000b88:	f3af 8000 	nop.w
 8000b8c:	f3af 8000 	nop.w

08000b90 <obqPostFullBufferS>:
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @sclass
 */
void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4604      	mov	r4, r0
 8000b94:	460d      	mov	r5, r1

  osalDbgCheckClassS();
 8000b96:	f006 fffb 	bl	8007b90 <chDbgCheckClassS>
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 8000b9a:	b11d      	cbz	r5, 8000ba4 <obqPostFullBufferS+0x14>
 8000b9c:	69e3      	ldr	r3, [r4, #28]
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d202      	bcs.n	8000baa <obqPostFullBufferS+0x1a>
 8000ba4:	480e      	ldr	r0, [pc, #56]	; (8000be0 <obqPostFullBufferS+0x50>)
 8000ba6:	f006 fdab 	bl	8007700 <chSysHalt>
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 8000baa:	68e3      	ldr	r3, [r4, #12]
 8000bac:	b1a3      	cbz	r3, 8000bd8 <obqPostFullBufferS+0x48>

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8000bae:	6923      	ldr	r3, [r4, #16]
 8000bb0:	601d      	str	r5, [r3, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8000bb2:	68e3      	ldr	r3, [r4, #12]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	60e3      	str	r3, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 8000bb8:	69e2      	ldr	r2, [r4, #28]
 8000bba:	6923      	ldr	r3, [r4, #16]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	6123      	str	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 8000bc0:	69a2      	ldr	r2, [r4, #24]
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d301      	bcc.n	8000bca <obqPostFullBufferS+0x3a>
    obqp->bwrptr = obqp->buffers;
 8000bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bc8:	6123      	str	r3, [r4, #16]
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8000bce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bd0:	b10b      	cbz	r3, 8000bd6 <obqPostFullBufferS+0x46>
    obqp->notify(obqp);
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	4798      	blx	r3
  }
}
 8000bd6:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 8000bd8:	4801      	ldr	r0, [pc, #4]	; (8000be0 <obqPostFullBufferS+0x50>)
 8000bda:	f006 fd91 	bl	8007700 <chSysHalt>
 8000bde:	e7e6      	b.n	8000bae <obqPostFullBufferS+0x1e>
 8000be0:	08018de4 	.word	0x08018de4
 8000be4:	f3af 8000 	nop.w
 8000be8:	f3af 8000 	nop.w
 8000bec:	f3af 8000 	nop.w

08000bf0 <obqPostFullBuffer>:
void obqPostFullBuffer(output_buffers_queue_t *obqp, size_t size) {
 8000bf0:	b538      	push	{r3, r4, r5, lr}
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	460d      	mov	r5, r1
 8000bf6:	2320      	movs	r3, #32
 8000bf8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000bfc:	f008 fa10 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000c00:	f006 ff0e 	bl	8007a20 <_dbg_check_lock>
  obqPostFullBufferS(obqp, size);
 8000c04:	4629      	mov	r1, r5
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff ffc2 	bl	8000b90 <obqPostFullBufferS>
  _dbg_check_unlock();
 8000c0c:	f006 ff20 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000c10:	f008 fa0e 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <obqPostFullBuffer+0x48>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d004      	beq.n	8000c26 <obqPostFullBuffer+0x36>
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	6899      	ldr	r1, [r3, #8]
 8000c20:	6893      	ldr	r3, [r2, #8]
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d303      	bcc.n	8000c2e <obqPostFullBuffer+0x3e>
 8000c26:	2300      	movs	r3, #0
 8000c28:	f383 8811 	msr	BASEPRI, r3
}
 8000c2c:	bd38      	pop	{r3, r4, r5, pc}
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <obqPostFullBuffer+0x4c>)
 8000c30:	f006 fd66 	bl	8007700 <chSysHalt>
 8000c34:	e7f7      	b.n	8000c26 <obqPostFullBuffer+0x36>
 8000c36:	bf00      	nop
 8000c38:	200050f8 	.word	0x200050f8
 8000c3c:	08018d6c 	.word	0x08018d6c

08000c40 <obqPutTimeout>:
 *                      suspended state.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    sysinterval_t timeout) {
 8000c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c44:	4604      	mov	r4, r0
 8000c46:	4688      	mov	r8, r1
 8000c48:	4616      	mov	r6, r2
 8000c4a:	461f      	mov	r7, r3
 8000c4c:	2320      	movs	r3, #32
 8000c4e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000c52:	f008 f9e5 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000c56:	f006 fee3 	bl	8007a20 <_dbg_check_lock>
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 8000c5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c5c:	b1e3      	cbz	r3, 8000c98 <obqPutTimeout+0x58>
      return msg;
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
 8000c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c60:	f883 8000 	strb.w	r8, [r3]
  obqp->ptr++;
 8000c64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c66:	3301      	adds	r3, #1
 8000c68:	62a3      	str	r3, [r4, #40]	; 0x28

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8000c6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d230      	bcs.n	8000cd2 <obqPutTimeout+0x92>
  _dbg_check_unlock();
 8000c70:	f006 feee 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000c74:	f008 f9dc 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <obqPutTimeout+0xa8>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d004      	beq.n	8000c8a <obqPutTimeout+0x4a>
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	6899      	ldr	r1, [r3, #8]
 8000c84:	6893      	ldr	r3, [r2, #8]
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d329      	bcc.n	8000cde <obqPutTimeout+0x9e>
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f380 8811 	msr	BASEPRI, r0
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
  }

  osalSysUnlock();
  return MSG_OK;
 8000c90:	4605      	mov	r5, r0
}
 8000c92:	4628      	mov	r0, r5
 8000c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8000c98:	4632      	mov	r2, r6
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f7ff ff1f 	bl	8000ae0 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8000ca2:	4605      	mov	r5, r0
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d0da      	beq.n	8000c5e <obqPutTimeout+0x1e>
  _dbg_check_unlock();
 8000ca8:	f006 fed2 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000cac:	f008 f9c0 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <obqPutTimeout+0xa8>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d004      	beq.n	8000cc2 <obqPutTimeout+0x82>
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	6899      	ldr	r1, [r3, #8]
 8000cbc:	6893      	ldr	r3, [r2, #8]
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	d303      	bcc.n	8000cca <obqPutTimeout+0x8a>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f383 8811 	msr	BASEPRI, r3
 8000cc8:	e7e3      	b.n	8000c92 <obqPutTimeout+0x52>
 8000cca:	4808      	ldr	r0, [pc, #32]	; (8000cec <obqPutTimeout+0xac>)
 8000ccc:	f006 fd18 	bl	8007700 <chSysHalt>
 8000cd0:	e7f7      	b.n	8000cc2 <obqPutTimeout+0x82>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8000cd2:	69e1      	ldr	r1, [r4, #28]
 8000cd4:	3904      	subs	r1, #4
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f7ff ff5a 	bl	8000b90 <obqPostFullBufferS>
 8000cdc:	e7c8      	b.n	8000c70 <obqPutTimeout+0x30>
 8000cde:	4803      	ldr	r0, [pc, #12]	; (8000cec <obqPutTimeout+0xac>)
 8000ce0:	f006 fd0e 	bl	8007700 <chSysHalt>
 8000ce4:	e7d1      	b.n	8000c8a <obqPutTimeout+0x4a>
 8000ce6:	bf00      	nop
 8000ce8:	200050f8 	.word	0x200050f8
 8000cec:	08018d6c 	.word	0x08018d6c

08000cf0 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
 8000cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	460f      	mov	r7, r1
  size_t w = 0;

  osalDbgCheck(n > 0U);
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	b142      	cbz	r2, 8000d0e <obqWriteTimeout+0x1e>
 8000cfc:	2320      	movs	r3, #32
 8000cfe:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000d02:	f008 f98d 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000d06:	f006 fe8b 	bl	8007a20 <_dbg_check_lock>
  size_t w = 0;
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	e047      	b.n	8000d9e <obqWriteTimeout+0xae>
  osalDbgCheck(n > 0U);
 8000d0e:	483c      	ldr	r0, [pc, #240]	; (8000e00 <obqWriteTimeout+0x110>)
 8000d10:	f006 fcf6 	bl	8007700 <chSysHalt>
 8000d14:	e7f2      	b.n	8000cfc <obqWriteTimeout+0xc>
    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
      msg_t msg;

      /* Getting an empty buffer using the specified timeout.*/
      msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8000d16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f7ff fee0 	bl	8000ae0 <obqGetEmptyBufferTimeoutS>

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8000d20:	2800      	cmp	r0, #0
 8000d22:	d03f      	beq.n	8000da4 <obqWriteTimeout+0xb4>
  _dbg_check_unlock();
 8000d24:	f006 fe94 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000d28:	f008 f982 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000d2c:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <obqWriteTimeout+0x114>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d004      	beq.n	8000d3e <obqWriteTimeout+0x4e>
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	6899      	ldr	r1, [r3, #8]
 8000d38:	6893      	ldr	r3, [r2, #8]
 8000d3a:	4299      	cmp	r1, r3
 8000d3c:	d305      	bcc.n	8000d4a <obqWriteTimeout+0x5a>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f383 8811 	msr	BASEPRI, r3
    if (w >= n) {
      return w;
    }
    osalSysLock();
  }
}
 8000d44:	4630      	mov	r0, r6
 8000d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d4a:	482f      	ldr	r0, [pc, #188]	; (8000e08 <obqWriteTimeout+0x118>)
 8000d4c:	f006 fcd8 	bl	8007700 <chSysHalt>
 8000d50:	e7f5      	b.n	8000d3e <obqWriteTimeout+0x4e>
      memcpy(obqp->ptr, bp, size);
 8000d52:	462a      	mov	r2, r5
 8000d54:	4639      	mov	r1, r7
 8000d56:	f017 f903 	bl	8017f60 <memcpy>
      bp        += size;
 8000d5a:	442f      	add	r7, r5
      obqp->ptr += size;
 8000d5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d5e:	442b      	add	r3, r5
 8000d60:	62a3      	str	r3, [r4, #40]	; 0x28
      w         += size;
 8000d62:	442e      	add	r6, r5
    if (obqp->ptr >= obqp->top) {
 8000d64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d23e      	bcs.n	8000dea <obqWriteTimeout+0xfa>
  _dbg_check_unlock();
 8000d6c:	f006 fe70 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000d70:	f008 f95e 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <obqWriteTimeout+0x114>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d004      	beq.n	8000d86 <obqWriteTimeout+0x96>
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	6899      	ldr	r1, [r3, #8]
 8000d80:	6893      	ldr	r3, [r2, #8]
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d337      	bcc.n	8000df6 <obqWriteTimeout+0x106>
 8000d86:	2300      	movs	r3, #0
 8000d88:	f383 8811 	msr	BASEPRI, r3
    if (w >= n) {
 8000d8c:	4546      	cmp	r6, r8
 8000d8e:	d2d9      	bcs.n	8000d44 <obqWriteTimeout+0x54>
 8000d90:	2320      	movs	r3, #32
 8000d92:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000d96:	f008 f943 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000d9a:	f006 fe41 	bl	8007a20 <_dbg_check_lock>
    if (obqp->ptr == NULL) {
 8000d9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0b8      	beq.n	8000d16 <obqWriteTimeout+0x26>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8000da4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000da6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000da8:	1a1b      	subs	r3, r3, r0
    if (size > (n - w)) {
 8000daa:	eba8 0506 	sub.w	r5, r8, r6
 8000dae:	429d      	cmp	r5, r3
 8000db0:	d300      	bcc.n	8000db4 <obqWriteTimeout+0xc4>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8000db2:	461d      	mov	r5, r3
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8000db4:	2d40      	cmp	r5, #64	; 0x40
 8000db6:	d9cc      	bls.n	8000d52 <obqWriteTimeout+0x62>
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8000db8:	463b      	mov	r3, r7
 8000dba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000dbe:	f8d3 e000 	ldr.w	lr, [r3]
 8000dc2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8000dc6:	689d      	ldr	r5, [r3, #8]
 8000dc8:	68d9      	ldr	r1, [r3, #12]
 8000dca:	f8c0 e000 	str.w	lr, [r0]
 8000dce:	f8c0 c004 	str.w	ip, [r0, #4]
 8000dd2:	6085      	str	r5, [r0, #8]
 8000dd4:	60c1      	str	r1, [r0, #12]
 8000dd6:	3310      	adds	r3, #16
 8000dd8:	3010      	adds	r0, #16
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d1ef      	bne.n	8000dbe <obqWriteTimeout+0xce>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 8000dde:	3740      	adds	r7, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8000de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000de2:	3340      	adds	r3, #64	; 0x40
 8000de4:	62a3      	str	r3, [r4, #40]	; 0x28
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 8000de6:	3640      	adds	r6, #64	; 0x40
 8000de8:	e7bc      	b.n	8000d64 <obqWriteTimeout+0x74>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8000dea:	69e1      	ldr	r1, [r4, #28]
 8000dec:	3904      	subs	r1, #4
 8000dee:	4620      	mov	r0, r4
 8000df0:	f7ff fece 	bl	8000b90 <obqPostFullBufferS>
 8000df4:	e7ba      	b.n	8000d6c <obqWriteTimeout+0x7c>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000df6:	4804      	ldr	r0, [pc, #16]	; (8000e08 <obqWriteTimeout+0x118>)
 8000df8:	f006 fc82 	bl	8007700 <chSysHalt>
 8000dfc:	e7c3      	b.n	8000d86 <obqWriteTimeout+0x96>
 8000dfe:	bf00      	nop
 8000e00:	08018df8 	.word	0x08018df8
 8000e04:	200050f8 	.word	0x200050f8
 8000e08:	08018d6c 	.word	0x08018d6c
 8000e0c:	f3af 8000 	nop.w

08000e10 <obqTryFlushI>:
 * @retval false        if no new filled buffer has been posted to the queue.
 * @retval true         if a new filled buffer has been posted to the queue.
 *
 * @iclass
 */
bool obqTryFlushI(output_buffers_queue_t *obqp) {
 8000e10:	b510      	push	{r4, lr}
 8000e12:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8000e14:	f006 fea4 	bl	8007b60 <chDbgCheckClassI>

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8000e18:	6922      	ldr	r2, [r4, #16]
 8000e1a:	6963      	ldr	r3, [r4, #20]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d017      	beq.n	8000e50 <obqTryFlushI+0x40>
 8000e20:	2300      	movs	r3, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	b19b      	cbz	r3, 8000e4e <obqTryFlushI+0x3e>
 8000e26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e28:	b1bb      	cbz	r3, 8000e5a <obqTryFlushI+0x4a>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8000e2a:	1a9b      	subs	r3, r3, r2

    if (size > 0U) {
 8000e2c:	3b04      	subs	r3, #4
 8000e2e:	d016      	beq.n	8000e5e <obqTryFlushI+0x4e>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8000e30:	6013      	str	r3, [r2, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8000e32:	68e3      	ldr	r3, [r4, #12]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	60e3      	str	r3, [r4, #12]
      obqp->bwrptr += obqp->bsize;
 8000e38:	69e2      	ldr	r2, [r4, #28]
 8000e3a:	6923      	ldr	r3, [r4, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	6123      	str	r3, [r4, #16]
      if (obqp->bwrptr >= obqp->btop) {
 8000e40:	69a2      	ldr	r2, [r4, #24]
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d301      	bcc.n	8000e4a <obqTryFlushI+0x3a>
        obqp->bwrptr = obqp->buffers;
 8000e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e48:	6123      	str	r3, [r4, #16]
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62a3      	str	r3, [r4, #40]	; 0x28

      return true;
    }
  }
  return false;
}
 8000e4e:	bd10      	pop	{r4, pc}
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8000e50:	68e3      	ldr	r3, [r4, #12]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0e5      	beq.n	8000e22 <obqTryFlushI+0x12>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e7e3      	b.n	8000e22 <obqTryFlushI+0x12>
  return false;
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	e7f7      	b.n	8000e4e <obqTryFlushI+0x3e>
 8000e5e:	2000      	movs	r0, #0
 8000e60:	e7f5      	b.n	8000e4e <obqTryFlushI+0x3e>
 8000e62:	bf00      	nop
 8000e64:	f3af 8000 	nop.w
 8000e68:	f3af 8000 	nop.w
 8000e6c:	f3af 8000 	nop.w

08000e70 <obqFlush>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @api
 */
void obqFlush(output_buffers_queue_t *obqp) {
 8000e70:	b510      	push	{r4, lr}
 8000e72:	4604      	mov	r4, r0
 8000e74:	2320      	movs	r3, #32
 8000e76:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000e7a:	f008 f8d1 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000e7e:	f006 fdcf 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();

  /* If there is a buffer partially filled and not being written.*/
  if (obqp->ptr != NULL) {
 8000e82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000e84:	b119      	cbz	r1, 8000e8e <obqFlush+0x1e>
    size_t size = ((size_t)obqp->ptr - (size_t)obqp->bwrptr) - sizeof (size_t);
 8000e86:	6923      	ldr	r3, [r4, #16]
 8000e88:	1ac9      	subs	r1, r1, r3

    if (size > 0U) {
 8000e8a:	3904      	subs	r1, #4
 8000e8c:	d110      	bne.n	8000eb0 <obqFlush+0x40>
  _dbg_check_unlock();
 8000e8e:	f006 fddf 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000e92:	f008 f8cd 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <obqFlush+0x50>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d004      	beq.n	8000ea8 <obqFlush+0x38>
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	6899      	ldr	r1, [r3, #8]
 8000ea2:	6893      	ldr	r3, [r2, #8]
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	d307      	bcc.n	8000eb8 <obqFlush+0x48>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f383 8811 	msr	BASEPRI, r3
      obqPostFullBufferS(obqp, size);
    }
  }

  osalSysUnlock();
}
 8000eae:	bd10      	pop	{r4, pc}
      obqPostFullBufferS(obqp, size);
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f7ff fe6d 	bl	8000b90 <obqPostFullBufferS>
 8000eb6:	e7ea      	b.n	8000e8e <obqFlush+0x1e>
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <obqFlush+0x54>)
 8000eba:	f006 fc21 	bl	8007700 <chSysHalt>
 8000ebe:	e7f3      	b.n	8000ea8 <obqFlush+0x38>
 8000ec0:	200050f8 	.word	0x200050f8
 8000ec4:	08018d6c 	.word	0x08018d6c
	...

08000ed0 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8000ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	460f      	mov	r7, r1
  size_t s1, s2;

  osalDbgCheck(n > 0U);
 8000ed8:	4615      	mov	r5, r2
 8000eda:	b1b2      	cbz	r2, 8000f0a <iq_read+0x3a>

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 8000edc:	68a3      	ldr	r3, [r4, #8]
 8000ede:	42ab      	cmp	r3, r5
 8000ee0:	d200      	bcs.n	8000ee4 <iq_read+0x14>
    n = iqGetFullI(iqp);
 8000ee2:	68a5      	ldr	r5, [r4, #8]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000ee4:	6926      	ldr	r6, [r4, #16]
 8000ee6:	69a1      	ldr	r1, [r4, #24]
 8000ee8:	1a76      	subs	r6, r6, r1
  /*lint -restore*/
  if (n < s1) {
 8000eea:	42b5      	cmp	r5, r6
 8000eec:	d311      	bcc.n	8000f12 <iq_read+0x42>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
    iqp->q_rdptr += n;
  }
  else if (n > s1) {
 8000eee:	42b5      	cmp	r5, r6
 8000ef0:	d817      	bhi.n	8000f22 <iq_read+0x52>
    s2 = n - s1;
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
    iqp->q_rdptr = iqp->q_buffer + s2;
  }
  else { /* n == s1 */
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000ef2:	462a      	mov	r2, r5
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	f017 f833 	bl	8017f60 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8000efa:	68e3      	ldr	r3, [r4, #12]
 8000efc:	61a3      	str	r3, [r4, #24]
  }

  iqp->q_counter -= n;
 8000efe:	68a3      	ldr	r3, [r4, #8]
 8000f00:	1b5b      	subs	r3, r3, r5
 8000f02:	60a3      	str	r3, [r4, #8]
  return n;
}
 8000f04:	4628      	mov	r0, r5
 8000f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  osalDbgCheck(n > 0U);
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <iq_read+0x70>)
 8000f0c:	f006 fbf8 	bl	8007700 <chSysHalt>
 8000f10:	e7e4      	b.n	8000edc <iq_read+0xc>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000f12:	462a      	mov	r2, r5
 8000f14:	4638      	mov	r0, r7
 8000f16:	f017 f823 	bl	8017f60 <memcpy>
    iqp->q_rdptr += n;
 8000f1a:	69a3      	ldr	r3, [r4, #24]
 8000f1c:	442b      	add	r3, r5
 8000f1e:	61a3      	str	r3, [r4, #24]
 8000f20:	e7ed      	b.n	8000efe <iq_read+0x2e>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000f22:	4632      	mov	r2, r6
 8000f24:	4638      	mov	r0, r7
 8000f26:	f017 f81b 	bl	8017f60 <memcpy>
    s2 = n - s1;
 8000f2a:	eba5 0806 	sub.w	r8, r5, r6
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8000f2e:	4642      	mov	r2, r8
 8000f30:	68e1      	ldr	r1, [r4, #12]
 8000f32:	19b8      	adds	r0, r7, r6
 8000f34:	f017 f814 	bl	8017f60 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8000f38:	68e2      	ldr	r2, [r4, #12]
 8000f3a:	4442      	add	r2, r8
 8000f3c:	61a2      	str	r2, [r4, #24]
 8000f3e:	e7de      	b.n	8000efe <iq_read+0x2e>
 8000f40:	08018e08 	.word	0x08018e08
 8000f44:	f3af 8000 	nop.w
 8000f48:	f3af 8000 	nop.w
 8000f4c:	f3af 8000 	nop.w

08000f50 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 8000f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f54:	4604      	mov	r4, r0
 8000f56:	460f      	mov	r7, r1
  size_t s1, s2;

  osalDbgCheck(n > 0U);
 8000f58:	4615      	mov	r5, r2
 8000f5a:	b1b2      	cbz	r2, 8000f8a <oq_write+0x3a>

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 8000f5c:	68a3      	ldr	r3, [r4, #8]
 8000f5e:	42ab      	cmp	r3, r5
 8000f60:	d200      	bcs.n	8000f64 <oq_write+0x14>
    n = oqGetEmptyI(oqp);
 8000f62:	68a5      	ldr	r5, [r4, #8]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000f64:	6926      	ldr	r6, [r4, #16]
 8000f66:	6960      	ldr	r0, [r4, #20]
 8000f68:	1a36      	subs	r6, r6, r0
  /*lint -restore*/
  if (n < s1) {
 8000f6a:	42b5      	cmp	r5, r6
 8000f6c:	d311      	bcc.n	8000f92 <oq_write+0x42>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
    oqp->q_wrptr += n;
  }
  else if (n > s1) {
 8000f6e:	42b5      	cmp	r5, r6
 8000f70:	d817      	bhi.n	8000fa2 <oq_write+0x52>
    s2 = n - s1;
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
    oqp->q_wrptr = oqp->q_buffer + s2;
  }
  else { /* n == s1 */
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000f72:	462a      	mov	r2, r5
 8000f74:	4639      	mov	r1, r7
 8000f76:	f016 fff3 	bl	8017f60 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8000f7a:	68e3      	ldr	r3, [r4, #12]
 8000f7c:	6163      	str	r3, [r4, #20]
  }

  oqp->q_counter -= n;
 8000f7e:	68a3      	ldr	r3, [r4, #8]
 8000f80:	1b5b      	subs	r3, r3, r5
 8000f82:	60a3      	str	r3, [r4, #8]
  return n;
}
 8000f84:	4628      	mov	r0, r5
 8000f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  osalDbgCheck(n > 0U);
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <oq_write+0x70>)
 8000f8c:	f006 fbb8 	bl	8007700 <chSysHalt>
 8000f90:	e7e4      	b.n	8000f5c <oq_write+0xc>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000f92:	462a      	mov	r2, r5
 8000f94:	4639      	mov	r1, r7
 8000f96:	f016 ffe3 	bl	8017f60 <memcpy>
    oqp->q_wrptr += n;
 8000f9a:	6963      	ldr	r3, [r4, #20]
 8000f9c:	442b      	add	r3, r5
 8000f9e:	6163      	str	r3, [r4, #20]
 8000fa0:	e7ed      	b.n	8000f7e <oq_write+0x2e>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000fa2:	4632      	mov	r2, r6
 8000fa4:	4639      	mov	r1, r7
 8000fa6:	f016 ffdb 	bl	8017f60 <memcpy>
    s2 = n - s1;
 8000faa:	eba5 0806 	sub.w	r8, r5, r6
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8000fae:	4642      	mov	r2, r8
 8000fb0:	19b9      	adds	r1, r7, r6
 8000fb2:	68e0      	ldr	r0, [r4, #12]
 8000fb4:	f016 ffd4 	bl	8017f60 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8000fb8:	68e2      	ldr	r2, [r4, #12]
 8000fba:	4442      	add	r2, r8
 8000fbc:	6162      	str	r2, [r4, #20]
 8000fbe:	e7de      	b.n	8000f7e <oq_write+0x2e>
 8000fc0:	08018e10 	.word	0x08018e10
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	f3af 8000 	nop.w
 8000fcc:	f3af 8000 	nop.w

08000fd0 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 8000fd0:	b410      	push	{r4}
  tqp->next = (thread_t *)tqp;
 8000fd2:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 8000fd4:	6040      	str	r0, [r0, #4]

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	6084      	str	r4, [r0, #8]
  iqp->q_buffer  = bp;
 8000fda:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 8000fdc:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 8000fde:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
 8000fe0:	440a      	add	r2, r1
 8000fe2:	6102      	str	r2, [r0, #16]
  iqp->q_notify  = infy;
 8000fe4:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
 8000fe6:	9b01      	ldr	r3, [sp, #4]
 8000fe8:	6203      	str	r3, [r0, #32]
}
 8000fea:	bc10      	pop	{r4}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <iqResetI>:
 *
 * @param[in] iqp       pointer to an @p input_queue_t structure
 *
 * @iclass
 */
void iqResetI(input_queue_t *iqp) {
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8000ff4:	f006 fdb4 	bl	8007b60 <chDbgCheckClassI>

  iqp->q_rdptr = iqp->q_buffer;
 8000ff8:	68e3      	ldr	r3, [r4, #12]
 8000ffa:	61a3      	str	r3, [r4, #24]
  iqp->q_wrptr = iqp->q_buffer;
 8000ffc:	6163      	str	r3, [r4, #20]
  iqp->q_counter = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60a3      	str	r3, [r4, #8]
  chThdDequeueAllI(tqp, msg);
 8001002:	f06f 0101 	mvn.w	r1, #1
 8001006:	4620      	mov	r0, r4
 8001008:	f007 ff2a 	bl	8008e60 <chThdDequeueAllI>
  osalThreadDequeueAllI(&iqp->q_waiting, MSG_RESET);
}
 800100c:	bd10      	pop	{r4, pc}
 800100e:	bf00      	nop

08001010 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4604      	mov	r4, r0
 8001014:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8001016:	f006 fda3 	bl	8007b60 <chDbgCheckClassI>

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 800101a:	6963      	ldr	r3, [r4, #20]
 800101c:	69a2      	ldr	r2, [r4, #24]
 800101e:	4293      	cmp	r3, r2
 8001020:	d013      	beq.n	800104a <iqPutI+0x3a>
 8001022:	2200      	movs	r2, #0
 8001024:	b9b2      	cbnz	r2, 8001054 <iqPutI+0x44>
    iqp->q_counter++;
 8001026:	68a2      	ldr	r2, [r4, #8]
 8001028:	3201      	adds	r2, #1
 800102a:	60a2      	str	r2, [r4, #8]
    *iqp->q_wrptr++ = b;
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	6162      	str	r2, [r4, #20]
 8001030:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8001032:	6962      	ldr	r2, [r4, #20]
 8001034:	6923      	ldr	r3, [r4, #16]
 8001036:	429a      	cmp	r2, r3
 8001038:	d301      	bcc.n	800103e <iqPutI+0x2e>
      iqp->q_wrptr = iqp->q_buffer;
 800103a:	68e3      	ldr	r3, [r4, #12]
 800103c:	6163      	str	r3, [r4, #20]
  chThdDequeueNextI(tqp, msg);
 800103e:	2100      	movs	r1, #0
 8001040:	4620      	mov	r0, r4
 8001042:	f007 feed 	bl	8008e20 <chThdDequeueNextI>
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);

    return MSG_OK;
 8001046:	2000      	movs	r0, #0
  }

  return MSG_TIMEOUT;
}
 8001048:	bd38      	pop	{r3, r4, r5, pc}
  if (!iqIsFullI(iqp)) {
 800104a:	68a2      	ldr	r2, [r4, #8]
 800104c:	2a00      	cmp	r2, #0
 800104e:	d0e9      	beq.n	8001024 <iqPutI+0x14>
 8001050:	2201      	movs	r2, #1
 8001052:	e7e7      	b.n	8001024 <iqPutI+0x14>
  return MSG_TIMEOUT;
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	e7f6      	b.n	8001048 <iqPutI+0x38>
 800105a:	bf00      	nop
 800105c:	f3af 8000 	nop.w

08001060 <iqGetI>:
 * @retval MSG_TIMEOUT  if the queue is empty.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @iclass
 */
msg_t iqGetI(input_queue_t *iqp) {
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8001064:	f006 fd7c 	bl	8007b60 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!iqIsEmptyI(iqp)) {
 8001068:	68a3      	ldr	r3, [r4, #8]
 800106a:	b18b      	cbz	r3, 8001090 <iqGetI+0x30>
    uint8_t b;

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 800106c:	68a3      	ldr	r3, [r4, #8]
 800106e:	3b01      	subs	r3, #1
 8001070:	60a3      	str	r3, [r4, #8]
    b = *iqp->q_rdptr++;
 8001072:	69a2      	ldr	r2, [r4, #24]
 8001074:	1c53      	adds	r3, r2, #1
 8001076:	61a3      	str	r3, [r4, #24]
 8001078:	7815      	ldrb	r5, [r2, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 800107a:	6922      	ldr	r2, [r4, #16]
 800107c:	4293      	cmp	r3, r2
 800107e:	d301      	bcc.n	8001084 <iqGetI+0x24>
      iqp->q_rdptr = iqp->q_buffer;
 8001080:	68e3      	ldr	r3, [r4, #12]
 8001082:	61a3      	str	r3, [r4, #24]
    }

    /* Inform the low side that the queue has at least one slot available.*/
    if (iqp->q_notify != NULL) {
 8001084:	69e3      	ldr	r3, [r4, #28]
 8001086:	b10b      	cbz	r3, 800108c <iqGetI+0x2c>
      iqp->q_notify(iqp);
 8001088:	4620      	mov	r0, r4
 800108a:	4798      	blx	r3
    }

    return (msg_t)b;
 800108c:	4628      	mov	r0, r5
  }

  return MSG_TIMEOUT;
}
 800108e:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	e7fb      	b.n	800108e <iqGetI+0x2e>
 8001096:	bf00      	nop
 8001098:	f3af 8000 	nop.w
 800109c:	f3af 8000 	nop.w

080010a0 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	4604      	mov	r4, r0
 80010a4:	4616      	mov	r6, r2
 80010a6:	461f      	mov	r7, r3
 80010a8:	2320      	movs	r3, #32
 80010aa:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80010ae:	f007 ffb7 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80010b2:	f006 fcb5 	bl	8007a20 <_dbg_check_lock>
  uint8_t b;

  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 80010b6:	68a3      	ldr	r3, [r4, #8]
 80010b8:	b9db      	cbnz	r3, 80010f2 <iqGetTimeout+0x52>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80010ba:	4632      	mov	r2, r6
 80010bc:	463b      	mov	r3, r7
 80010be:	4620      	mov	r0, r4
 80010c0:	f007 fe96 	bl	8008df0 <chThdEnqueueTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 80010c4:	1e05      	subs	r5, r0, #0
 80010c6:	daf6      	bge.n	80010b6 <iqGetTimeout+0x16>
  _dbg_check_unlock();
 80010c8:	f006 fcc2 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80010cc:	f007 ffb0 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <iqGetTimeout+0xa0>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d004      	beq.n	80010e2 <iqGetTimeout+0x42>
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	6899      	ldr	r1, [r3, #8]
 80010dc:	6893      	ldr	r3, [r2, #8]
 80010de:	4299      	cmp	r1, r3
 80010e0:	d303      	bcc.n	80010ea <iqGetTimeout+0x4a>
 80010e2:	2300      	movs	r3, #0
 80010e4:	f383 8811 	msr	BASEPRI, r3
 80010e8:	e023      	b.n	8001132 <iqGetTimeout+0x92>
 80010ea:	4816      	ldr	r0, [pc, #88]	; (8001144 <iqGetTimeout+0xa4>)
 80010ec:	f006 fb08 	bl	8007700 <chSysHalt>
 80010f0:	e7f7      	b.n	80010e2 <iqGetTimeout+0x42>
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 80010f2:	68a3      	ldr	r3, [r4, #8]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 80010f8:	69a2      	ldr	r2, [r4, #24]
 80010fa:	1c53      	adds	r3, r2, #1
 80010fc:	61a3      	str	r3, [r4, #24]
 80010fe:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001100:	6922      	ldr	r2, [r4, #16]
 8001102:	4293      	cmp	r3, r2
 8001104:	d301      	bcc.n	800110a <iqGetTimeout+0x6a>
    iqp->q_rdptr = iqp->q_buffer;
 8001106:	68e3      	ldr	r3, [r4, #12]
 8001108:	61a3      	str	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 800110a:	69e3      	ldr	r3, [r4, #28]
 800110c:	b10b      	cbz	r3, 8001112 <iqGetTimeout+0x72>
    iqp->q_notify(iqp);
 800110e:	4620      	mov	r0, r4
 8001110:	4798      	blx	r3
  _dbg_check_unlock();
 8001112:	f006 fc9d 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001116:	f007 ff8b 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <iqGetTimeout+0xa0>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d004      	beq.n	800112c <iqGetTimeout+0x8c>
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	6899      	ldr	r1, [r3, #8]
 8001126:	6893      	ldr	r3, [r2, #8]
 8001128:	4299      	cmp	r1, r3
 800112a:	d304      	bcc.n	8001136 <iqGetTimeout+0x96>
 800112c:	2300      	movs	r3, #0
 800112e:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return (msg_t)b;
}
 8001132:	4628      	mov	r0, r5
 8001134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <iqGetTimeout+0xa4>)
 8001138:	f006 fae2 	bl	8007700 <chSysHalt>
 800113c:	e7f6      	b.n	800112c <iqGetTimeout+0x8c>
 800113e:	bf00      	nop
 8001140:	200050f8 	.word	0x200050f8
 8001144:	08018e1c 	.word	0x08018e1c
 8001148:	f3af 8000 	nop.w
 800114c:	f3af 8000 	nop.w

08001150 <iqReadI>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @iclass
 */
size_t iqReadI(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8001150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001152:	4604      	mov	r4, r0
 8001154:	460e      	mov	r6, r1
 8001156:	4617      	mov	r7, r2
  qnotify_t nfy = iqp->q_notify;
 8001158:	69c5      	ldr	r5, [r0, #28]
  size_t rd;

  osalDbgCheckClassI();
 800115a:	f006 fd01 	bl	8007b60 <chDbgCheckClassI>

  rd = iq_read(iqp, bp, n);
 800115e:	463a      	mov	r2, r7
 8001160:	4631      	mov	r1, r6
 8001162:	4620      	mov	r0, r4
 8001164:	f7ff feb4 	bl	8000ed0 <iq_read>

  /* Inform the low side that the queue has at least one character
     available.*/
  if ((rd > (size_t)0) && (nfy != NULL)) {
 8001168:	4606      	mov	r6, r0
 800116a:	b110      	cbz	r0, 8001172 <iqReadI+0x22>
 800116c:	b10d      	cbz	r5, 8001172 <iqReadI+0x22>
    nfy(iqp);
 800116e:	4620      	mov	r0, r4
 8001170:	47a8      	blx	r5
  }

  return rd;
}
 8001172:	4630      	mov	r0, r6
 8001174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001176:	bf00      	nop
 8001178:	f3af 8000 	nop.w
 800117c:	f3af 8000 	nop.w

08001180 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8001180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001184:	4607      	mov	r7, r0
 8001186:	460d      	mov	r5, r1
  qnotify_t nfy = iqp->q_notify;
 8001188:	f8d0 801c 	ldr.w	r8, [r0, #28]
  size_t max = n;

  osalDbgCheck(n > 0U);
 800118c:	4691      	mov	r9, r2
 800118e:	b142      	cbz	r2, 80011a2 <iqReadTimeout+0x22>
 8001190:	2320      	movs	r3, #32
 8001192:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001196:	f007 ff43 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800119a:	f006 fc41 	bl	8007a20 <_dbg_check_lock>
 800119e:	464c      	mov	r4, r9
 80011a0:	e02c      	b.n	80011fc <iqReadTimeout+0x7c>
 80011a2:	4827      	ldr	r0, [pc, #156]	; (8001240 <iqReadTimeout+0xc0>)
 80011a4:	f006 faac 	bl	8007700 <chSysHalt>
 80011a8:	e7f2      	b.n	8001190 <iqReadTimeout+0x10>
 80011aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80011ae:	4638      	mov	r0, r7
 80011b0:	f007 fe1e 	bl	8008df0 <chThdEnqueueTimeoutS>
    done = iq_read(iqp, bp, n);
    if (done == (size_t)0) {
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80011b4:	b310      	cbz	r0, 80011fc <iqReadTimeout+0x7c>
  _dbg_check_unlock();
 80011b6:	f006 fc4b 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80011ba:	f007 ff39 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <iqReadTimeout+0xc4>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d004      	beq.n	80011d0 <iqReadTimeout+0x50>
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	6899      	ldr	r1, [r3, #8]
 80011ca:	6893      	ldr	r3, [r2, #8]
 80011cc:	4299      	cmp	r1, r3
 80011ce:	d332      	bcc.n	8001236 <iqReadTimeout+0xb6>
 80011d0:	2300      	movs	r3, #0
 80011d2:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80011d6:	eba9 0004 	sub.w	r0, r9, r4
 80011da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011de:	481a      	ldr	r0, [pc, #104]	; (8001248 <iqReadTimeout+0xc8>)
 80011e0:	f006 fa8e 	bl	8007700 <chSysHalt>
 80011e4:	2300      	movs	r3, #0
 80011e6:	f383 8811 	msr	BASEPRI, r3
      n  -= done;
 80011ea:	1ba4      	subs	r4, r4, r6
      bp += done;
 80011ec:	4435      	add	r5, r6
 80011ee:	2320      	movs	r3, #32
 80011f0:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80011f4:	f007 ff14 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80011f8:	f006 fc12 	bl	8007a20 <_dbg_check_lock>
  while (n > 0U) {
 80011fc:	2c00      	cmp	r4, #0
 80011fe:	d0da      	beq.n	80011b6 <iqReadTimeout+0x36>
    done = iq_read(iqp, bp, n);
 8001200:	4622      	mov	r2, r4
 8001202:	4629      	mov	r1, r5
 8001204:	4638      	mov	r0, r7
 8001206:	f7ff fe63 	bl	8000ed0 <iq_read>
    if (done == (size_t)0) {
 800120a:	4606      	mov	r6, r0
 800120c:	2800      	cmp	r0, #0
 800120e:	d0cc      	beq.n	80011aa <iqReadTimeout+0x2a>
      if (nfy != NULL) {
 8001210:	f1b8 0f00 	cmp.w	r8, #0
 8001214:	d001      	beq.n	800121a <iqReadTimeout+0x9a>
        nfy(iqp);
 8001216:	4638      	mov	r0, r7
 8001218:	47c0      	blx	r8
  _dbg_check_unlock();
 800121a:	f006 fc19 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800121e:	f007 ff07 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <iqReadTimeout+0xc4>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d0dc      	beq.n	80011e4 <iqReadTimeout+0x64>
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	6899      	ldr	r1, [r3, #8]
 800122e:	6893      	ldr	r3, [r2, #8]
 8001230:	4299      	cmp	r1, r3
 8001232:	d2d7      	bcs.n	80011e4 <iqReadTimeout+0x64>
 8001234:	e7d3      	b.n	80011de <iqReadTimeout+0x5e>
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <iqReadTimeout+0xc8>)
 8001238:	f006 fa62 	bl	8007700 <chSysHalt>
 800123c:	e7c8      	b.n	80011d0 <iqReadTimeout+0x50>
 800123e:	bf00      	nop
 8001240:	08018e28 	.word	0x08018e28
 8001244:	200050f8 	.word	0x200050f8
 8001248:	08018e1c 	.word	0x08018e1c
 800124c:	f3af 8000 	nop.w

08001250 <oqObjectInit>:
  tqp->next = (thread_t *)tqp;
 8001250:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 8001252:	6040      	str	r0, [r0, #4]
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001254:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 8001256:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 8001258:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 800125a:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
 800125c:	4411      	add	r1, r2
 800125e:	6101      	str	r1, [r0, #16]
  oqp->q_notify  = onfy;
 8001260:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
 8001262:	9b00      	ldr	r3, [sp, #0]
 8001264:	6203      	str	r3, [r0, #32]
}
 8001266:	4770      	bx	lr
 8001268:	f3af 8000 	nop.w
 800126c:	f3af 8000 	nop.w

08001270 <oqResetI>:
 *
 * @param[in] oqp       pointer to an @p output_queue_t structure
 *
 * @iclass
 */
void oqResetI(output_queue_t *oqp) {
 8001270:	b510      	push	{r4, lr}
 8001272:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8001274:	f006 fc74 	bl	8007b60 <chDbgCheckClassI>

  oqp->q_rdptr = oqp->q_buffer;
 8001278:	68e2      	ldr	r2, [r4, #12]
 800127a:	61a2      	str	r2, [r4, #24]
  oqp->q_wrptr = oqp->q_buffer;
 800127c:	6162      	str	r2, [r4, #20]
  oqp->q_counter = qSizeX(oqp);
 800127e:	6923      	ldr	r3, [r4, #16]
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	60a3      	str	r3, [r4, #8]
  chThdDequeueAllI(tqp, msg);
 8001284:	f06f 0101 	mvn.w	r1, #1
 8001288:	4620      	mov	r0, r4
 800128a:	f007 fde9 	bl	8008e60 <chThdDequeueAllI>
  osalThreadDequeueAllI(&oqp->q_waiting, MSG_RESET);
}
 800128e:	bd10      	pop	{r4, pc}

08001290 <oqPutI>:
 * @retval MSG_TIMEOUT  if the queue is full.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @iclass
 */
msg_t oqPutI(output_queue_t *oqp, uint8_t b) {
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8001296:	f006 fc63 	bl	8007b60 <chDbgCheckClassI>

  /* Queue space check.*/
  while (!oqIsFullI(oqp)) {
 800129a:	68a3      	ldr	r3, [r4, #8]
 800129c:	b193      	cbz	r3, 80012c4 <oqPutI+0x34>
    /* Putting the character into the queue.*/
    oqp->q_counter--;
 800129e:	68a3      	ldr	r3, [r4, #8]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = b;
 80012a4:	6963      	ldr	r3, [r4, #20]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	6162      	str	r2, [r4, #20]
 80012aa:	701d      	strb	r5, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 80012ac:	6962      	ldr	r2, [r4, #20]
 80012ae:	6923      	ldr	r3, [r4, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d301      	bcc.n	80012b8 <oqPutI+0x28>
      oqp->q_wrptr = oqp->q_buffer;
 80012b4:	68e3      	ldr	r3, [r4, #12]
 80012b6:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (oqp->q_notify != NULL) {
 80012b8:	69e3      	ldr	r3, [r4, #28]
 80012ba:	b133      	cbz	r3, 80012ca <oqPutI+0x3a>
      oqp->q_notify(oqp);
 80012bc:	4620      	mov	r0, r4
 80012be:	4798      	blx	r3
    }

    return MSG_OK;
 80012c0:	2000      	movs	r0, #0
  }

  return MSG_TIMEOUT;
}
 80012c2:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	e7fb      	b.n	80012c2 <oqPutI+0x32>
    return MSG_OK;
 80012ca:	2000      	movs	r0, #0
 80012cc:	e7f9      	b.n	80012c2 <oqPutI+0x32>
 80012ce:	bf00      	nop

080012d0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 80012d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012d4:	4604      	mov	r4, r0
 80012d6:	4688      	mov	r8, r1
 80012d8:	4616      	mov	r6, r2
 80012da:	461f      	mov	r7, r3
 80012dc:	2320      	movs	r3, #32
 80012de:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80012e2:	f007 fe9d 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80012e6:	f006 fb9b 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 80012ea:	68a3      	ldr	r3, [r4, #8]
 80012ec:	b9db      	cbnz	r3, 8001326 <oqPutTimeout+0x56>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80012ee:	4632      	mov	r2, r6
 80012f0:	463b      	mov	r3, r7
 80012f2:	4620      	mov	r0, r4
 80012f4:	f007 fd7c 	bl	8008df0 <chThdEnqueueTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 80012f8:	1e05      	subs	r5, r0, #0
 80012fa:	daf6      	bge.n	80012ea <oqPutTimeout+0x1a>
  _dbg_check_unlock();
 80012fc:	f006 fba8 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001300:	f007 fe96 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001304:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <oqPutTimeout+0xa8>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d004      	beq.n	8001316 <oqPutTimeout+0x46>
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	6899      	ldr	r1, [r3, #8]
 8001310:	6893      	ldr	r3, [r2, #8]
 8001312:	4299      	cmp	r1, r3
 8001314:	d303      	bcc.n	800131e <oqPutTimeout+0x4e>
 8001316:	2300      	movs	r3, #0
 8001318:	f383 8811 	msr	BASEPRI, r3
 800131c:	e025      	b.n	800136a <oqPutTimeout+0x9a>
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <oqPutTimeout+0xac>)
 8001320:	f006 f9ee 	bl	8007700 <chSysHalt>
 8001324:	e7f7      	b.n	8001316 <oqPutTimeout+0x46>
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001326:	68a3      	ldr	r3, [r4, #8]
 8001328:	3b01      	subs	r3, #1
 800132a:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800132c:	6963      	ldr	r3, [r4, #20]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	6162      	str	r2, [r4, #20]
 8001332:	f883 8000 	strb.w	r8, [r3]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001336:	6962      	ldr	r2, [r4, #20]
 8001338:	6923      	ldr	r3, [r4, #16]
 800133a:	429a      	cmp	r2, r3
 800133c:	d301      	bcc.n	8001342 <oqPutTimeout+0x72>
    oqp->q_wrptr = oqp->q_buffer;
 800133e:	68e3      	ldr	r3, [r4, #12]
 8001340:	6163      	str	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8001342:	69e3      	ldr	r3, [r4, #28]
 8001344:	b10b      	cbz	r3, 800134a <oqPutTimeout+0x7a>
    oqp->q_notify(oqp);
 8001346:	4620      	mov	r0, r4
 8001348:	4798      	blx	r3
  _dbg_check_unlock();
 800134a:	f006 fb81 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800134e:	f007 fe6f 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <oqPutTimeout+0xa8>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d004      	beq.n	8001364 <oqPutTimeout+0x94>
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	6899      	ldr	r1, [r3, #8]
 800135e:	6893      	ldr	r3, [r2, #8]
 8001360:	4299      	cmp	r1, r3
 8001362:	d305      	bcc.n	8001370 <oqPutTimeout+0xa0>
 8001364:	2500      	movs	r5, #0
 8001366:	f385 8811 	msr	BASEPRI, r5
  }

  osalSysUnlock();

  return MSG_OK;
}
 800136a:	4628      	mov	r0, r5
 800136c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <oqPutTimeout+0xac>)
 8001372:	f006 f9c5 	bl	8007700 <chSysHalt>
 8001376:	e7f5      	b.n	8001364 <oqPutTimeout+0x94>
 8001378:	200050f8 	.word	0x200050f8
 800137c:	08018e1c 	.word	0x08018e1c

08001380 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 8001380:	b538      	push	{r3, r4, r5, lr}
 8001382:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8001384:	f006 fbec 	bl	8007b60 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8001388:	6962      	ldr	r2, [r4, #20]
 800138a:	69a3      	ldr	r3, [r4, #24]
 800138c:	429a      	cmp	r2, r3
 800138e:	d012      	beq.n	80013b6 <oqGetI+0x36>
 8001390:	2200      	movs	r2, #0
 8001392:	b9aa      	cbnz	r2, 80013c0 <oqGetI+0x40>
    uint8_t b;

    oqp->q_counter++;
 8001394:	68a2      	ldr	r2, [r4, #8]
 8001396:	3201      	adds	r2, #1
 8001398:	60a2      	str	r2, [r4, #8]
    b = *oqp->q_rdptr++;
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	61a2      	str	r2, [r4, #24]
 800139e:	781d      	ldrb	r5, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 80013a0:	6923      	ldr	r3, [r4, #16]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d301      	bcc.n	80013aa <oqGetI+0x2a>
      oqp->q_rdptr = oqp->q_buffer;
 80013a6:	68e3      	ldr	r3, [r4, #12]
 80013a8:	61a3      	str	r3, [r4, #24]
  chThdDequeueNextI(tqp, msg);
 80013aa:	2100      	movs	r1, #0
 80013ac:	4620      	mov	r0, r4
 80013ae:	f007 fd37 	bl	8008e20 <chThdDequeueNextI>
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);

    return (msg_t)b;
 80013b2:	4628      	mov	r0, r5
  }

  return MSG_TIMEOUT;
}
 80013b4:	bd38      	pop	{r3, r4, r5, pc}
  if (!oqIsEmptyI(oqp)) {
 80013b6:	68a2      	ldr	r2, [r4, #8]
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	d0ea      	beq.n	8001392 <oqGetI+0x12>
 80013bc:	2201      	movs	r2, #1
 80013be:	e7e8      	b.n	8001392 <oqGetI+0x12>
  return MSG_TIMEOUT;
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	e7f6      	b.n	80013b4 <oqGetI+0x34>
 80013c6:	bf00      	nop
 80013c8:	f3af 8000 	nop.w
 80013cc:	f3af 8000 	nop.w

080013d0 <oqWriteI>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @iclass
 */
size_t oqWriteI(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d2:	4604      	mov	r4, r0
 80013d4:	460e      	mov	r6, r1
 80013d6:	4617      	mov	r7, r2
  qnotify_t nfy = oqp->q_notify;
 80013d8:	69c5      	ldr	r5, [r0, #28]
  size_t wr;

  osalDbgCheckClassI();
 80013da:	f006 fbc1 	bl	8007b60 <chDbgCheckClassI>

  wr = oq_write(oqp, bp, n);
 80013de:	463a      	mov	r2, r7
 80013e0:	4631      	mov	r1, r6
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff fdb4 	bl	8000f50 <oq_write>

  /* Inform the low side that the queue has at least one character
     available.*/
  if ((wr > (size_t)0) && (nfy != NULL)) {
 80013e8:	4606      	mov	r6, r0
 80013ea:	b110      	cbz	r0, 80013f2 <oqWriteI+0x22>
 80013ec:	b10d      	cbz	r5, 80013f2 <oqWriteI+0x22>
    nfy(oqp);
 80013ee:	4620      	mov	r0, r4
 80013f0:	47a8      	blx	r5
  }

  return wr;
}
 80013f2:	4630      	mov	r0, r6
 80013f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	f3af 8000 	nop.w
 80013fc:	f3af 8000 	nop.w

08001400 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001404:	4607      	mov	r7, r0
 8001406:	460d      	mov	r5, r1
  qnotify_t nfy = oqp->q_notify;
 8001408:	f8d0 801c 	ldr.w	r8, [r0, #28]
  size_t max = n;

  osalDbgCheck(n > 0U);
 800140c:	4691      	mov	r9, r2
 800140e:	b142      	cbz	r2, 8001422 <oqWriteTimeout+0x22>
 8001410:	2320      	movs	r3, #32
 8001412:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001416:	f007 fe03 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800141a:	f006 fb01 	bl	8007a20 <_dbg_check_lock>
 800141e:	464c      	mov	r4, r9
 8001420:	e02c      	b.n	800147c <oqWriteTimeout+0x7c>
 8001422:	4827      	ldr	r0, [pc, #156]	; (80014c0 <oqWriteTimeout+0xc0>)
 8001424:	f006 f96c 	bl	8007700 <chSysHalt>
 8001428:	e7f2      	b.n	8001410 <oqWriteTimeout+0x10>
  return chThdEnqueueTimeoutS(tqp, timeout);
 800142a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800142e:	4638      	mov	r0, r7
 8001430:	f007 fcde 	bl	8008df0 <chThdEnqueueTimeoutS>
    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8001434:	b310      	cbz	r0, 800147c <oqWriteTimeout+0x7c>
  _dbg_check_unlock();
 8001436:	f006 fb0b 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800143a:	f007 fdf9 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <oqWriteTimeout+0xc4>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d004      	beq.n	8001450 <oqWriteTimeout+0x50>
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	6899      	ldr	r1, [r3, #8]
 800144a:	6893      	ldr	r3, [r2, #8]
 800144c:	4299      	cmp	r1, r3
 800144e:	d332      	bcc.n	80014b6 <oqWriteTimeout+0xb6>
 8001450:	2300      	movs	r3, #0
 8001452:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8001456:	eba9 0004 	sub.w	r0, r9, r4
 800145a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800145e:	481a      	ldr	r0, [pc, #104]	; (80014c8 <oqWriteTimeout+0xc8>)
 8001460:	f006 f94e 	bl	8007700 <chSysHalt>
 8001464:	2300      	movs	r3, #0
 8001466:	f383 8811 	msr	BASEPRI, r3
      n  -= done;
 800146a:	1ba4      	subs	r4, r4, r6
      bp += done;
 800146c:	4435      	add	r5, r6
 800146e:	2320      	movs	r3, #32
 8001470:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001474:	f007 fdd4 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001478:	f006 fad2 	bl	8007a20 <_dbg_check_lock>
  while (n > 0U) {
 800147c:	2c00      	cmp	r4, #0
 800147e:	d0da      	beq.n	8001436 <oqWriteTimeout+0x36>
    done = oq_write(oqp, bp, n);
 8001480:	4622      	mov	r2, r4
 8001482:	4629      	mov	r1, r5
 8001484:	4638      	mov	r0, r7
 8001486:	f7ff fd63 	bl	8000f50 <oq_write>
    if (done == (size_t)0) {
 800148a:	4606      	mov	r6, r0
 800148c:	2800      	cmp	r0, #0
 800148e:	d0cc      	beq.n	800142a <oqWriteTimeout+0x2a>
      if (nfy != NULL) {
 8001490:	f1b8 0f00 	cmp.w	r8, #0
 8001494:	d001      	beq.n	800149a <oqWriteTimeout+0x9a>
        nfy(oqp);
 8001496:	4638      	mov	r0, r7
 8001498:	47c0      	blx	r8
  _dbg_check_unlock();
 800149a:	f006 fad9 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800149e:	f007 fdc7 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <oqWriteTimeout+0xc4>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d0dc      	beq.n	8001464 <oqWriteTimeout+0x64>
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	6899      	ldr	r1, [r3, #8]
 80014ae:	6893      	ldr	r3, [r2, #8]
 80014b0:	4299      	cmp	r1, r3
 80014b2:	d2d7      	bcs.n	8001464 <oqWriteTimeout+0x64>
 80014b4:	e7d3      	b.n	800145e <oqWriteTimeout+0x5e>
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <oqWriteTimeout+0xc8>)
 80014b8:	f006 f922 	bl	8007700 <chSysHalt>
 80014bc:	e7c8      	b.n	8001450 <oqWriteTimeout+0x50>
 80014be:	bf00      	nop
 80014c0:	08018e38 	.word	0x08018e38
 80014c4:	200050f8 	.word	0x200050f8
 80014c8:	08018e1c 	.word	0x08018e1c
 80014cc:	00000000 	.word	0x00000000

080014d0 <_mmcsd_get_slice>:
 *
 * @notapi
 */
uint32_t _mmcsd_get_slice(const uint32_t *data,
                          uint32_t end,
                          uint32_t start) {
 80014d0:	b570      	push	{r4, r5, r6, lr}
 80014d2:	4605      	mov	r5, r0
 80014d4:	460c      	mov	r4, r1
 80014d6:	4616      	mov	r6, r2
  unsigned startidx, endidx, startoff;
  uint32_t endmask;

  osalDbgCheck((end >= start) && ((end - start) < 32U));
 80014d8:	4291      	cmp	r1, r2
 80014da:	d302      	bcc.n	80014e2 <_mmcsd_get_slice+0x12>
 80014dc:	1a8b      	subs	r3, r1, r2
 80014de:	2b1f      	cmp	r3, #31
 80014e0:	d902      	bls.n	80014e8 <_mmcsd_get_slice+0x18>
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <_mmcsd_get_slice+0x54>)
 80014e4:	f006 f90c 	bl	8007700 <chSysHalt>

  startidx = start / 32U;
 80014e8:	0973      	lsrs	r3, r6, #5
  startoff = start % 32U;
 80014ea:	f006 061f 	and.w	r6, r6, #31
  endidx   = end / 32U;
 80014ee:	0962      	lsrs	r2, r4, #5
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;
 80014f0:	f004 041f 	and.w	r4, r4, #31
 80014f4:	3401      	adds	r4, #1
 80014f6:	2001      	movs	r0, #1
 80014f8:	fa00 f404 	lsl.w	r4, r0, r4
 80014fc:	3c01      	subs	r4, #1

  /* One or two pieces?*/
  if (startidx < endidx) {
 80014fe:	4293      	cmp	r3, r2
 8001500:	d304      	bcc.n	800150c <_mmcsd_get_slice+0x3c>
    return (data[startidx] >> startoff) |               /* Two pieces case. */
           ((data[endidx] & endmask) << (32U - startoff));
  }
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 8001502:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8001506:	4020      	ands	r0, r4
 8001508:	40f0      	lsrs	r0, r6
}
 800150a:	bd70      	pop	{r4, r5, r6, pc}
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 800150c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8001510:	40f3      	lsrs	r3, r6
           ((data[endidx] & endmask) << (32U - startoff));
 8001512:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8001516:	4020      	ands	r0, r4
 8001518:	f1c6 0620 	rsb	r6, r6, #32
 800151c:	40b0      	lsls	r0, r6
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 800151e:	4318      	orrs	r0, r3
 8001520:	e7f3      	b.n	800150a <_mmcsd_get_slice+0x3a>
 8001522:	bf00      	nop
 8001524:	08018e48 	.word	0x08018e48
 8001528:	f3af 8000 	nop.w
 800152c:	f3af 8000 	nop.w

08001530 <_mmcsd_get_capacity>:
 * @return              The card capacity.
 * @retval 0            CSD format error
 *
 * @notapi
 */
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
 8001530:	b570      	push	{r4, r5, r6, lr}
  uint32_t a, b, c;

  osalDbgCheck(NULL != csd);
 8001532:	4605      	mov	r5, r0
 8001534:	b148      	cbz	r0, 800154a <_mmcsd_get_capacity+0x1a>

  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8001536:	227e      	movs	r2, #126	; 0x7e
 8001538:	217f      	movs	r1, #127	; 0x7f
 800153a:	4628      	mov	r0, r5
 800153c:	f7ff ffc8 	bl	80014d0 <_mmcsd_get_slice>
 8001540:	b138      	cbz	r0, 8001552 <_mmcsd_get_capacity+0x22>
 8001542:	2801      	cmp	r0, #1
 8001544:	d01d      	beq.n	8001582 <_mmcsd_get_capacity+0x52>
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
  default:
    /* Reserved value detected.*/
    break;
  }
  return 0U;
 8001546:	2000      	movs	r0, #0
 8001548:	e01a      	b.n	8001580 <_mmcsd_get_capacity+0x50>
  osalDbgCheck(NULL != csd);
 800154a:	4812      	ldr	r0, [pc, #72]	; (8001594 <_mmcsd_get_capacity+0x64>)
 800154c:	f006 f8d8 	bl	8007700 <chSysHalt>
 8001550:	e7f1      	b.n	8001536 <_mmcsd_get_capacity+0x6>
    a = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_SLICE);
 8001552:	223e      	movs	r2, #62	; 0x3e
 8001554:	2149      	movs	r1, #73	; 0x49
 8001556:	4628      	mov	r0, r5
 8001558:	f7ff ffba 	bl	80014d0 <_mmcsd_get_slice>
 800155c:	4604      	mov	r4, r0
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 800155e:	222f      	movs	r2, #47	; 0x2f
 8001560:	2131      	movs	r1, #49	; 0x31
 8001562:	4628      	mov	r0, r5
 8001564:	f7ff ffb4 	bl	80014d0 <_mmcsd_get_slice>
 8001568:	4606      	mov	r6, r0
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
 800156a:	2250      	movs	r2, #80	; 0x50
 800156c:	2153      	movs	r1, #83	; 0x53
 800156e:	4628      	mov	r0, r5
 8001570:	f7ff ffae 	bl	80014d0 <_mmcsd_get_slice>
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
 8001574:	3401      	adds	r4, #1
 8001576:	3602      	adds	r6, #2
 8001578:	40b4      	lsls	r4, r6
 800157a:	3809      	subs	r0, #9
 800157c:	fa04 f000 	lsl.w	r0, r4, r0
}
 8001580:	bd70      	pop	{r4, r5, r6, pc}
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
 8001582:	2230      	movs	r2, #48	; 0x30
 8001584:	2145      	movs	r1, #69	; 0x45
 8001586:	4628      	mov	r0, r5
 8001588:	f7ff ffa2 	bl	80014d0 <_mmcsd_get_slice>
 800158c:	3001      	adds	r0, #1
 800158e:	0280      	lsls	r0, r0, #10
 8001590:	e7f6      	b.n	8001580 <_mmcsd_get_capacity+0x50>
 8001592:	bf00      	nop
 8001594:	08018e5c 	.word	0x08018e5c
 8001598:	f3af 8000 	nop.w
 800159c:	f3af 8000 	nop.w

080015a0 <_mmcsd_get_capacity_ext>:
 *
 * @return              The card capacity.
 *
 * @notapi
 */
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {
 80015a0:	b510      	push	{r4, lr}

  osalDbgCheck(NULL != ext_csd);
 80015a2:	4604      	mov	r4, r0
 80015a4:	b170      	cbz	r0, 80015c4 <_mmcsd_get_capacity_ext+0x24>

  return ((uint32_t)ext_csd[215] << 24U) +
 80015a6:	f894 00d7 	ldrb.w	r0, [r4, #215]	; 0xd7
         ((uint32_t)ext_csd[214] << 16U) +
 80015aa:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
 80015ae:	041b      	lsls	r3, r3, #16
  return ((uint32_t)ext_csd[215] << 24U) +
 80015b0:	eb03 6300 	add.w	r3, r3, r0, lsl #24
         ((uint32_t)ext_csd[213] << 8U)  +
 80015b4:	f894 00d5 	ldrb.w	r0, [r4, #213]	; 0xd5
         ((uint32_t)ext_csd[214] << 16U) +
 80015b8:	eb03 2300 	add.w	r3, r3, r0, lsl #8
         (uint32_t)ext_csd[212];
 80015bc:	f894 00d4 	ldrb.w	r0, [r4, #212]	; 0xd4
}
 80015c0:	4418      	add	r0, r3
 80015c2:	bd10      	pop	{r4, pc}
  osalDbgCheck(NULL != ext_csd);
 80015c4:	4801      	ldr	r0, [pc, #4]	; (80015cc <_mmcsd_get_capacity_ext+0x2c>)
 80015c6:	f006 f89b 	bl	8007700 <chSysHalt>
 80015ca:	e7ec      	b.n	80015a6 <_mmcsd_get_capacity_ext+0x6>
 80015cc:	08018e70 	.word	0x08018e70

080015d0 <_mmcsd_unpack_sdc_cid>:
 * @param[out] cidsdc   pointer to the @p unpacked_sdc_cid_t object
 *
 * @notapi
 */
void _mmcsd_unpack_sdc_cid(const MMCSDBlockDevice *sdcp,
                           unpacked_sdc_cid_t *cidsdc) {
 80015d0:	b538      	push	{r3, r4, r5, lr}
 80015d2:	460d      	mov	r5, r1
  const uint32_t *cid;

  osalDbgCheck((NULL != sdcp) && (NULL != cidsdc));
 80015d4:	4604      	mov	r4, r0
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d054      	beq.n	8001684 <_mmcsd_unpack_sdc_cid+0xb4>
 80015da:	2900      	cmp	r1, #0
 80015dc:	d052      	beq.n	8001684 <_mmcsd_unpack_sdc_cid+0xb4>

  cid = sdcp->cid;
 80015de:	3408      	adds	r4, #8
  cidsdc->crc    = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_SDC_CRC_SLICE);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2107      	movs	r1, #7
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff ff73 	bl	80014d0 <_mmcsd_get_slice>
 80015ea:	7528      	strb	r0, [r5, #20]
  cidsdc->mdt_y  = (uint16_t)_mmcsd_get_slice(cid, MMCSD_CID_SDC_MDT_Y_SLICE) +
 80015ec:	220c      	movs	r2, #12
 80015ee:	2113      	movs	r1, #19
 80015f0:	4620      	mov	r0, r4
 80015f2:	f7ff ff6d 	bl	80014d0 <_mmcsd_get_slice>
 80015f6:	b280      	uxth	r0, r0
 80015f8:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 80015fc:	8268      	strh	r0, [r5, #18]
                             2000U;
  cidsdc->mdt_m  = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_SDC_MDT_M_SLICE);
 80015fe:	2208      	movs	r2, #8
 8001600:	210b      	movs	r1, #11
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff ff64 	bl	80014d0 <_mmcsd_get_slice>
 8001608:	7428      	strb	r0, [r5, #16]
  cidsdc->mid    = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_SDC_MID_SLICE);
 800160a:	2278      	movs	r2, #120	; 0x78
 800160c:	217f      	movs	r1, #127	; 0x7f
 800160e:	4620      	mov	r0, r4
 8001610:	f7ff ff5e 	bl	80014d0 <_mmcsd_get_slice>
 8001614:	7028      	strb	r0, [r5, #0]
  cidsdc->oid    = (uint16_t)_mmcsd_get_slice(cid, MMCSD_CID_SDC_OID_SLICE);
 8001616:	2268      	movs	r2, #104	; 0x68
 8001618:	2177      	movs	r1, #119	; 0x77
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff ff58 	bl	80014d0 <_mmcsd_get_slice>
 8001620:	8068      	strh	r0, [r5, #2]
  cidsdc->pnm[4] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_SDC_PNM0_SLICE);
 8001622:	2240      	movs	r2, #64	; 0x40
 8001624:	2147      	movs	r1, #71	; 0x47
 8001626:	4620      	mov	r0, r4
 8001628:	f7ff ff52 	bl	80014d0 <_mmcsd_get_slice>
 800162c:	7228      	strb	r0, [r5, #8]
  cidsdc->pnm[3] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_SDC_PNM1_SLICE);
 800162e:	2248      	movs	r2, #72	; 0x48
 8001630:	214f      	movs	r1, #79	; 0x4f
 8001632:	4620      	mov	r0, r4
 8001634:	f7ff ff4c 	bl	80014d0 <_mmcsd_get_slice>
 8001638:	71e8      	strb	r0, [r5, #7]
  cidsdc->pnm[2] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_SDC_PNM2_SLICE);
 800163a:	2250      	movs	r2, #80	; 0x50
 800163c:	2157      	movs	r1, #87	; 0x57
 800163e:	4620      	mov	r0, r4
 8001640:	f7ff ff46 	bl	80014d0 <_mmcsd_get_slice>
 8001644:	71a8      	strb	r0, [r5, #6]
  cidsdc->pnm[1] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_SDC_PNM3_SLICE);
 8001646:	2258      	movs	r2, #88	; 0x58
 8001648:	215f      	movs	r1, #95	; 0x5f
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff ff40 	bl	80014d0 <_mmcsd_get_slice>
 8001650:	7168      	strb	r0, [r5, #5]
  cidsdc->pnm[0] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_SDC_PNM4_SLICE);
 8001652:	2260      	movs	r2, #96	; 0x60
 8001654:	2167      	movs	r1, #103	; 0x67
 8001656:	4620      	mov	r0, r4
 8001658:	f7ff ff3a 	bl	80014d0 <_mmcsd_get_slice>
 800165c:	7128      	strb	r0, [r5, #4]
  cidsdc->prv_n  = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_SDC_PRV_N_SLICE);
 800165e:	223c      	movs	r2, #60	; 0x3c
 8001660:	213f      	movs	r1, #63	; 0x3f
 8001662:	4620      	mov	r0, r4
 8001664:	f7ff ff34 	bl	80014d0 <_mmcsd_get_slice>
 8001668:	7268      	strb	r0, [r5, #9]
  cidsdc->prv_m  = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_SDC_PRV_M_SLICE);
 800166a:	2238      	movs	r2, #56	; 0x38
 800166c:	213b      	movs	r1, #59	; 0x3b
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff ff2e 	bl	80014d0 <_mmcsd_get_slice>
 8001674:	72a8      	strb	r0, [r5, #10]
  cidsdc->psn    =           _mmcsd_get_slice(cid, MMCSD_CID_SDC_PSN_SLICE);
 8001676:	2218      	movs	r2, #24
 8001678:	2137      	movs	r1, #55	; 0x37
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff ff28 	bl	80014d0 <_mmcsd_get_slice>
 8001680:	60e8      	str	r0, [r5, #12]
}
 8001682:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((NULL != sdcp) && (NULL != cidsdc));
 8001684:	4801      	ldr	r0, [pc, #4]	; (800168c <_mmcsd_unpack_sdc_cid+0xbc>)
 8001686:	f006 f83b 	bl	8007700 <chSysHalt>
 800168a:	e7a8      	b.n	80015de <_mmcsd_unpack_sdc_cid+0xe>
 800168c:	08018e88 	.word	0x08018e88

08001690 <_mmcsd_unpack_mmc_cid>:
 * @param[out] cidmmc   pointer to the @p unpacked_mmc_cid_t object
 *
 * @notapi
 */
void _mmcsd_unpack_mmc_cid(const MMCSDBlockDevice *sdcp,
                           unpacked_mmc_cid_t *cidmmc) {
 8001690:	b538      	push	{r3, r4, r5, lr}
 8001692:	460d      	mov	r5, r1
  const uint32_t *cid;

  osalDbgCheck((NULL != sdcp) && (NULL != cidmmc));
 8001694:	4604      	mov	r4, r0
 8001696:	2800      	cmp	r0, #0
 8001698:	d05a      	beq.n	8001750 <_mmcsd_unpack_mmc_cid+0xc0>
 800169a:	2900      	cmp	r1, #0
 800169c:	d058      	beq.n	8001750 <_mmcsd_unpack_mmc_cid+0xc0>

  cid = sdcp->cid;
 800169e:	3408      	adds	r4, #8
  cidmmc->crc    = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_MMC_CRC_SLICE);
 80016a0:	2201      	movs	r2, #1
 80016a2:	2107      	movs	r1, #7
 80016a4:	4620      	mov	r0, r4
 80016a6:	f7ff ff13 	bl	80014d0 <_mmcsd_get_slice>
 80016aa:	7528      	strb	r0, [r5, #20]
  cidmmc->mdt_y  = (uint16_t)_mmcsd_get_slice(cid, MMCSD_CID_MMC_MDT_Y_SLICE) +
 80016ac:	2208      	movs	r2, #8
 80016ae:	210b      	movs	r1, #11
 80016b0:	4620      	mov	r0, r4
 80016b2:	f7ff ff0d 	bl	80014d0 <_mmcsd_get_slice>
 80016b6:	b280      	uxth	r0, r0
 80016b8:	f200 70cd 	addw	r0, r0, #1997	; 0x7cd
 80016bc:	8268      	strh	r0, [r5, #18]
                             1997U;
  cidmmc->mdt_m  = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_MMC_MDT_M_SLICE);
 80016be:	220c      	movs	r2, #12
 80016c0:	210f      	movs	r1, #15
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff ff04 	bl	80014d0 <_mmcsd_get_slice>
 80016c8:	7428      	strb	r0, [r5, #16]
  cidmmc->mid    = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_MMC_MID_SLICE);
 80016ca:	2278      	movs	r2, #120	; 0x78
 80016cc:	217f      	movs	r1, #127	; 0x7f
 80016ce:	4620      	mov	r0, r4
 80016d0:	f7ff fefe 	bl	80014d0 <_mmcsd_get_slice>
 80016d4:	7028      	strb	r0, [r5, #0]
  cidmmc->oid    = (uint16_t)_mmcsd_get_slice(cid, MMCSD_CID_MMC_OID_SLICE);
 80016d6:	2268      	movs	r2, #104	; 0x68
 80016d8:	2177      	movs	r1, #119	; 0x77
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff fef8 	bl	80014d0 <_mmcsd_get_slice>
 80016e0:	8068      	strh	r0, [r5, #2]
  cidmmc->pnm[5] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_MMC_PNM0_SLICE);
 80016e2:	2238      	movs	r2, #56	; 0x38
 80016e4:	213f      	movs	r1, #63	; 0x3f
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff fef2 	bl	80014d0 <_mmcsd_get_slice>
 80016ec:	7268      	strb	r0, [r5, #9]
  cidmmc->pnm[4] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_MMC_PNM1_SLICE);
 80016ee:	2240      	movs	r2, #64	; 0x40
 80016f0:	2147      	movs	r1, #71	; 0x47
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff feec 	bl	80014d0 <_mmcsd_get_slice>
 80016f8:	7228      	strb	r0, [r5, #8]
  cidmmc->pnm[3] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_MMC_PNM2_SLICE);
 80016fa:	2248      	movs	r2, #72	; 0x48
 80016fc:	214f      	movs	r1, #79	; 0x4f
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff fee6 	bl	80014d0 <_mmcsd_get_slice>
 8001704:	71e8      	strb	r0, [r5, #7]
  cidmmc->pnm[2] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_MMC_PNM3_SLICE);
 8001706:	2250      	movs	r2, #80	; 0x50
 8001708:	2157      	movs	r1, #87	; 0x57
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff fee0 	bl	80014d0 <_mmcsd_get_slice>
 8001710:	71a8      	strb	r0, [r5, #6]
  cidmmc->pnm[1] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_MMC_PNM4_SLICE);
 8001712:	2258      	movs	r2, #88	; 0x58
 8001714:	215f      	movs	r1, #95	; 0x5f
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff feda 	bl	80014d0 <_mmcsd_get_slice>
 800171c:	7168      	strb	r0, [r5, #5]
  cidmmc->pnm[0] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_MMC_PNM5_SLICE);
 800171e:	2260      	movs	r2, #96	; 0x60
 8001720:	2167      	movs	r1, #103	; 0x67
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff fed4 	bl	80014d0 <_mmcsd_get_slice>
 8001728:	7128      	strb	r0, [r5, #4]
  cidmmc->prv_n  = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_MMC_PRV_N_SLICE);
 800172a:	2234      	movs	r2, #52	; 0x34
 800172c:	2137      	movs	r1, #55	; 0x37
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff fece 	bl	80014d0 <_mmcsd_get_slice>
 8001734:	72a8      	strb	r0, [r5, #10]
  cidmmc->prv_m  = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_MMC_PRV_M_SLICE);
 8001736:	2230      	movs	r2, #48	; 0x30
 8001738:	2133      	movs	r1, #51	; 0x33
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff fec8 	bl	80014d0 <_mmcsd_get_slice>
 8001740:	72e8      	strb	r0, [r5, #11]
  cidmmc->psn    =           _mmcsd_get_slice(cid, MMCSD_CID_MMC_PSN_SLICE);
 8001742:	2210      	movs	r2, #16
 8001744:	212f      	movs	r1, #47	; 0x2f
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff fec2 	bl	80014d0 <_mmcsd_get_slice>
 800174c:	60e8      	str	r0, [r5, #12]
}
 800174e:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((NULL != sdcp) && (NULL != cidmmc));
 8001750:	4801      	ldr	r0, [pc, #4]	; (8001758 <_mmcsd_unpack_mmc_cid+0xc8>)
 8001752:	f005 ffd5 	bl	8007700 <chSysHalt>
 8001756:	e7a2      	b.n	800169e <_mmcsd_unpack_mmc_cid+0xe>
 8001758:	08018ea0 	.word	0x08018ea0
 800175c:	f3af 8000 	nop.w

08001760 <_mmcsd_unpack_csd_mmc>:
 * @param[out] csdmmc   pointer to the @p unpacked_mmc_csd_t object
 *
 * @notapi
 */
void _mmcsd_unpack_csd_mmc(const MMCSDBlockDevice *sdcp,
                           unpacked_mmc_csd_t *csdmmc) {
 8001760:	b538      	push	{r3, r4, r5, lr}
 8001762:	460d      	mov	r5, r1
  const uint32_t *csd;

  osalDbgCheck((NULL != sdcp) && (NULL != csdmmc));
 8001764:	4604      	mov	r4, r0
 8001766:	2800      	cmp	r0, #0
 8001768:	f000 80c4 	beq.w	80018f4 <_mmcsd_unpack_csd_mmc+0x194>
 800176c:	2900      	cmp	r1, #0
 800176e:	f000 80c1 	beq.w	80018f4 <_mmcsd_unpack_csd_mmc+0x194>

  csd = sdcp->csd;
 8001772:	3418      	adds	r4, #24
  csdmmc->c_size             = (uint16_t)_mmcsd_get_slice(csd, MMCSD_CSD_MMC_C_SIZE_SLICE);
 8001774:	223e      	movs	r2, #62	; 0x3e
 8001776:	2149      	movs	r1, #73	; 0x49
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff fea9 	bl	80014d0 <_mmcsd_get_slice>
 800177e:	81e8      	strh	r0, [r5, #14]
  csdmmc->c_size_mult        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_C_SIZE_MULT_SLICE);
 8001780:	222f      	movs	r2, #47	; 0x2f
 8001782:	2131      	movs	r1, #49	; 0x31
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff fea3 	bl	80014d0 <_mmcsd_get_slice>
 800178a:	7528      	strb	r0, [r5, #20]
  csdmmc->ccc                = (uint16_t)_mmcsd_get_slice(csd, MMCSD_CSD_MMC_CCC_SLICE);
 800178c:	2254      	movs	r2, #84	; 0x54
 800178e:	215f      	movs	r1, #95	; 0x5f
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff fe9d 	bl	80014d0 <_mmcsd_get_slice>
 8001796:	80e8      	strh	r0, [r5, #6]
  csdmmc->copy               = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_COPY_SLICE);
 8001798:	220e      	movs	r2, #14
 800179a:	4611      	mov	r1, r2
 800179c:	4620      	mov	r0, r4
 800179e:	f7ff fe97 	bl	80014d0 <_mmcsd_get_slice>
 80017a2:	77e8      	strb	r0, [r5, #31]
  csdmmc->crc                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_CRC_SLICE);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2107      	movs	r1, #7
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7ff fe91 	bl	80014d0 <_mmcsd_get_slice>
 80017ae:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  csdmmc->csd_structure      = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_CSD_STRUCTURE_SLICE);
 80017b2:	227e      	movs	r2, #126	; 0x7e
 80017b4:	217f      	movs	r1, #127	; 0x7f
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff fe8a 	bl	80014d0 <_mmcsd_get_slice>
 80017bc:	7028      	strb	r0, [r5, #0]
  csdmmc->dsr_imp            = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_DSR_IMP_SLICE);
 80017be:	224c      	movs	r2, #76	; 0x4c
 80017c0:	4611      	mov	r1, r2
 80017c2:	4620      	mov	r0, r4
 80017c4:	f7ff fe84 	bl	80014d0 <_mmcsd_get_slice>
 80017c8:	7328      	strb	r0, [r5, #12]
  csdmmc->ecc                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_ECC_SLICE);
 80017ca:	2208      	movs	r2, #8
 80017cc:	2109      	movs	r1, #9
 80017ce:	4620      	mov	r0, r4
 80017d0:	f7ff fe7e 	bl	80014d0 <_mmcsd_get_slice>
 80017d4:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
  csdmmc->erase_grp_mult     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_ERASE_GRP_MULT_SLICE);
 80017d8:	2225      	movs	r2, #37	; 0x25
 80017da:	2129      	movs	r1, #41	; 0x29
 80017dc:	4620      	mov	r0, r4
 80017de:	f7ff fe77 	bl	80014d0 <_mmcsd_get_slice>
 80017e2:	75a8      	strb	r0, [r5, #22]
  csdmmc->erase_grp_size     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_ERASE_GRP_SIZE_SLICE);
 80017e4:	222a      	movs	r2, #42	; 0x2a
 80017e6:	212e      	movs	r1, #46	; 0x2e
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff fe71 	bl	80014d0 <_mmcsd_get_slice>
 80017ee:	7568      	strb	r0, [r5, #21]
  csdmmc->file_format        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_FILE_FORMAT_SLICE);
 80017f0:	220a      	movs	r2, #10
 80017f2:	210b      	movs	r1, #11
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff fe6b 	bl	80014d0 <_mmcsd_get_slice>
 80017fa:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
  csdmmc->file_format_grp    = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_FILE_FORMAT_GRP_SLICE);
 80017fe:	220f      	movs	r2, #15
 8001800:	4611      	mov	r1, r2
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff fe64 	bl	80014d0 <_mmcsd_get_slice>
 8001808:	77a8      	strb	r0, [r5, #30]
  csdmmc->nsac               = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_NSAC_SLICE);
 800180a:	2268      	movs	r2, #104	; 0x68
 800180c:	216f      	movs	r1, #111	; 0x6f
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff fe5e 	bl	80014d0 <_mmcsd_get_slice>
 8001814:	70e8      	strb	r0, [r5, #3]
  csdmmc->perm_write_protect = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_PERM_WRITE_PROTECT_SLICE);
 8001816:	220d      	movs	r2, #13
 8001818:	4611      	mov	r1, r2
 800181a:	4620      	mov	r0, r4
 800181c:	f7ff fe58 	bl	80014d0 <_mmcsd_get_slice>
 8001820:	f885 0020 	strb.w	r0, [r5, #32]
  csdmmc->r2w_factor         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_R2W_FACTOR_SLICE);
 8001824:	221a      	movs	r2, #26
 8001826:	211c      	movs	r1, #28
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fe51 	bl	80014d0 <_mmcsd_get_slice>
 800182e:	76a8      	strb	r0, [r5, #26]
  csdmmc->read_bl_len        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_READ_BL_LEN_SLICE);
 8001830:	2250      	movs	r2, #80	; 0x50
 8001832:	2153      	movs	r1, #83	; 0x53
 8001834:	4620      	mov	r0, r4
 8001836:	f7ff fe4b 	bl	80014d0 <_mmcsd_get_slice>
 800183a:	7228      	strb	r0, [r5, #8]
  csdmmc->read_bl_partial    = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_READ_BL_PARTIAL_SLICE);
 800183c:	224f      	movs	r2, #79	; 0x4f
 800183e:	4611      	mov	r1, r2
 8001840:	4620      	mov	r0, r4
 8001842:	f7ff fe45 	bl	80014d0 <_mmcsd_get_slice>
 8001846:	7268      	strb	r0, [r5, #9]
  csdmmc->read_blk_misalign  = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_READ_BLK_MISALIGN_SLICE);
 8001848:	224d      	movs	r2, #77	; 0x4d
 800184a:	4611      	mov	r1, r2
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff fe3f 	bl	80014d0 <_mmcsd_get_slice>
 8001852:	72e8      	strb	r0, [r5, #11]
  csdmmc->spec_vers          = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_SPEC_VERS_SLICE);
 8001854:	227a      	movs	r2, #122	; 0x7a
 8001856:	217d      	movs	r1, #125	; 0x7d
 8001858:	4620      	mov	r0, r4
 800185a:	f7ff fe39 	bl	80014d0 <_mmcsd_get_slice>
 800185e:	7068      	strb	r0, [r5, #1]
  csdmmc->taac               = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_TAAC_SLICE);
 8001860:	2270      	movs	r2, #112	; 0x70
 8001862:	2177      	movs	r1, #119	; 0x77
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fe33 	bl	80014d0 <_mmcsd_get_slice>
 800186a:	70a8      	strb	r0, [r5, #2]
  csdmmc->tmp_write_protect  = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_TMP_WRITE_PROTECT_SLICE);
 800186c:	220c      	movs	r2, #12
 800186e:	4611      	mov	r1, r2
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff fe2d 	bl	80014d0 <_mmcsd_get_slice>
 8001876:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
  csdmmc->tran_speed         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_TRAN_SPEED_SLICE);
 800187a:	2260      	movs	r2, #96	; 0x60
 800187c:	2167      	movs	r1, #103	; 0x67
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff fe26 	bl	80014d0 <_mmcsd_get_slice>
 8001884:	7128      	strb	r0, [r5, #4]
  csdmmc->vdd_r_curr_max     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_VDD_R_CURR_MAX_SLICE);
 8001886:	2238      	movs	r2, #56	; 0x38
 8001888:	213a      	movs	r1, #58	; 0x3a
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff fe20 	bl	80014d0 <_mmcsd_get_slice>
 8001890:	7468      	strb	r0, [r5, #17]
  csdmmc->vdd_r_curr_min     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_VDD_R_CURR_MIN_SLICE);
 8001892:	223b      	movs	r2, #59	; 0x3b
 8001894:	213d      	movs	r1, #61	; 0x3d
 8001896:	4620      	mov	r0, r4
 8001898:	f7ff fe1a 	bl	80014d0 <_mmcsd_get_slice>
 800189c:	7428      	strb	r0, [r5, #16]
  csdmmc->vdd_w_curr_max     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_VDD_W_CURR_MAX_SLICE);
 800189e:	2232      	movs	r2, #50	; 0x32
 80018a0:	2134      	movs	r1, #52	; 0x34
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff fe14 	bl	80014d0 <_mmcsd_get_slice>
 80018a8:	74e8      	strb	r0, [r5, #19]
  csdmmc->vdd_w_curr_min     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_VDD_W_CURR_MIN_SLICE);
 80018aa:	2235      	movs	r2, #53	; 0x35
 80018ac:	2137      	movs	r1, #55	; 0x37
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff fe0e 	bl	80014d0 <_mmcsd_get_slice>
 80018b4:	74a8      	strb	r0, [r5, #18]
  csdmmc->wp_grp_enable      = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_WP_GRP_ENABLE_SLICE);
 80018b6:	221f      	movs	r2, #31
 80018b8:	4611      	mov	r1, r2
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7ff fe08 	bl	80014d0 <_mmcsd_get_slice>
 80018c0:	7628      	strb	r0, [r5, #24]
  csdmmc->wp_grp_size        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_WP_GRP_SIZE_SLICE);
 80018c2:	2220      	movs	r2, #32
 80018c4:	2124      	movs	r1, #36	; 0x24
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff fe02 	bl	80014d0 <_mmcsd_get_slice>
 80018cc:	75e8      	strb	r0, [r5, #23]
  csdmmc->write_bl_len       = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_WRITE_BL_LEN_SLICE);
 80018ce:	2216      	movs	r2, #22
 80018d0:	2119      	movs	r1, #25
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff fdfc 	bl	80014d0 <_mmcsd_get_slice>
 80018d8:	76e8      	strb	r0, [r5, #27]
  csdmmc->write_bl_partial   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_WRITE_BL_PARTIAL_SLICE);
 80018da:	2215      	movs	r2, #21
 80018dc:	4611      	mov	r1, r2
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff fdf6 	bl	80014d0 <_mmcsd_get_slice>
 80018e4:	7728      	strb	r0, [r5, #28]
  csdmmc->write_blk_misalign = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_WRITE_BLK_MISALIGN_SLICE);
 80018e6:	224e      	movs	r2, #78	; 0x4e
 80018e8:	4611      	mov	r1, r2
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff fdf0 	bl	80014d0 <_mmcsd_get_slice>
 80018f0:	72a8      	strb	r0, [r5, #10]
}
 80018f2:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((NULL != sdcp) && (NULL != csdmmc));
 80018f4:	4801      	ldr	r0, [pc, #4]	; (80018fc <_mmcsd_unpack_csd_mmc+0x19c>)
 80018f6:	f005 ff03 	bl	8007700 <chSysHalt>
 80018fa:	e73a      	b.n	8001772 <_mmcsd_unpack_csd_mmc+0x12>
 80018fc:	08018eb8 	.word	0x08018eb8

08001900 <_mmcsd_unpack_csd_v10>:
 * @param[out] csd10    pointer to the @p unpacked_sdc_csd_10_t object
 *
 * @notapi
 */
void _mmcsd_unpack_csd_v10(const MMCSDBlockDevice *sdcp,
                           unpacked_sdc_csd_10_t *csd10) {
 8001900:	b538      	push	{r3, r4, r5, lr}
 8001902:	460d      	mov	r5, r1
  const uint32_t *csd;

  osalDbgCheck(NULL != sdcp);
 8001904:	4604      	mov	r4, r0
 8001906:	2800      	cmp	r0, #0
 8001908:	f000 8098 	beq.w	8001a3c <_mmcsd_unpack_csd_v10+0x13c>

  csd = sdcp->csd;
 800190c:	3418      	adds	r4, #24
  csd10->c_size              = (uint16_t)_mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_SLICE);
 800190e:	223e      	movs	r2, #62	; 0x3e
 8001910:	2149      	movs	r1, #73	; 0x49
 8001912:	4620      	mov	r0, r4
 8001914:	f7ff fddc 	bl	80014d0 <_mmcsd_get_slice>
 8001918:	81a8      	strh	r0, [r5, #12]
  csd10->c_size_mult         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 800191a:	222f      	movs	r2, #47	; 0x2f
 800191c:	2131      	movs	r1, #49	; 0x31
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff fdd6 	bl	80014d0 <_mmcsd_get_slice>
 8001924:	74a8      	strb	r0, [r5, #18]
  csd10->ccc                 = (uint16_t)_mmcsd_get_slice(csd, MMCSD_CSD_10_CCC_SLICE);
 8001926:	2254      	movs	r2, #84	; 0x54
 8001928:	215f      	movs	r1, #95	; 0x5f
 800192a:	4620      	mov	r0, r4
 800192c:	f7ff fdd0 	bl	80014d0 <_mmcsd_get_slice>
 8001930:	80a8      	strh	r0, [r5, #4]
  csd10->copy                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_COPY_SLICE);
 8001932:	220e      	movs	r2, #14
 8001934:	4611      	mov	r1, r2
 8001936:	4620      	mov	r0, r4
 8001938:	f7ff fdca 	bl	80014d0 <_mmcsd_get_slice>
 800193c:	76e8      	strb	r0, [r5, #27]
  csd10->crc                 = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_CRC_SLICE);
 800193e:	2201      	movs	r2, #1
 8001940:	2107      	movs	r1, #7
 8001942:	4620      	mov	r0, r4
 8001944:	f7ff fdc4 	bl	80014d0 <_mmcsd_get_slice>
 8001948:	77e8      	strb	r0, [r5, #31]
  csd10->csd_structure       = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE);
 800194a:	227e      	movs	r2, #126	; 0x7e
 800194c:	217f      	movs	r1, #127	; 0x7f
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff fdbe 	bl	80014d0 <_mmcsd_get_slice>
 8001954:	7028      	strb	r0, [r5, #0]
  csd10->dsr_imp             = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_DSR_IMP_SLICE);
 8001956:	224c      	movs	r2, #76	; 0x4c
 8001958:	4611      	mov	r1, r2
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff fdb8 	bl	80014d0 <_mmcsd_get_slice>
 8001960:	72a8      	strb	r0, [r5, #10]
  csd10->erase_blk_en        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_ERASE_BLK_EN_SLICE);
 8001962:	222e      	movs	r2, #46	; 0x2e
 8001964:	4611      	mov	r1, r2
 8001966:	4620      	mov	r0, r4
 8001968:	f7ff fdb2 	bl	80014d0 <_mmcsd_get_slice>
 800196c:	74e8      	strb	r0, [r5, #19]
  csd10->erase_sector_size   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_ERASE_SECTOR_SIZE_SLICE);
 800196e:	2227      	movs	r2, #39	; 0x27
 8001970:	212d      	movs	r1, #45	; 0x2d
 8001972:	4620      	mov	r0, r4
 8001974:	f7ff fdac 	bl	80014d0 <_mmcsd_get_slice>
 8001978:	7528      	strb	r0, [r5, #20]
  csd10->file_format         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_FILE_FORMAT_SLICE);
 800197a:	220a      	movs	r2, #10
 800197c:	210b      	movs	r1, #11
 800197e:	4620      	mov	r0, r4
 8001980:	f7ff fda6 	bl	80014d0 <_mmcsd_get_slice>
 8001984:	77a8      	strb	r0, [r5, #30]
  csd10->file_format_grp     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_FILE_FORMAT_GRP_SLICE);
 8001986:	220f      	movs	r2, #15
 8001988:	4611      	mov	r1, r2
 800198a:	4620      	mov	r0, r4
 800198c:	f7ff fda0 	bl	80014d0 <_mmcsd_get_slice>
 8001990:	76a8      	strb	r0, [r5, #26]
  csd10->nsac                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_NSAC_SLICE);
 8001992:	2268      	movs	r2, #104	; 0x68
 8001994:	216f      	movs	r1, #111	; 0x6f
 8001996:	4620      	mov	r0, r4
 8001998:	f7ff fd9a 	bl	80014d0 <_mmcsd_get_slice>
 800199c:	70a8      	strb	r0, [r5, #2]
  csd10->perm_write_protect  = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_PERM_WRITE_PROTECT_SLICE);
 800199e:	220d      	movs	r2, #13
 80019a0:	4611      	mov	r1, r2
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff fd94 	bl	80014d0 <_mmcsd_get_slice>
 80019a8:	7728      	strb	r0, [r5, #28]
  csd10->r2w_factor          = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_R2W_FACTOR_SLICE);
 80019aa:	221a      	movs	r2, #26
 80019ac:	211c      	movs	r1, #28
 80019ae:	4620      	mov	r0, r4
 80019b0:	f7ff fd8e 	bl	80014d0 <_mmcsd_get_slice>
 80019b4:	75e8      	strb	r0, [r5, #23]
  csd10->read_bl_len         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
 80019b6:	2250      	movs	r2, #80	; 0x50
 80019b8:	2153      	movs	r1, #83	; 0x53
 80019ba:	4620      	mov	r0, r4
 80019bc:	f7ff fd88 	bl	80014d0 <_mmcsd_get_slice>
 80019c0:	71a8      	strb	r0, [r5, #6]
  csd10->read_bl_partial     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_PARTIAL_SLICE);
 80019c2:	224f      	movs	r2, #79	; 0x4f
 80019c4:	4611      	mov	r1, r2
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fd82 	bl	80014d0 <_mmcsd_get_slice>
 80019cc:	71e8      	strb	r0, [r5, #7]
  csd10->read_blk_misalign   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BLK_MISALIGN_SLICE);
 80019ce:	224d      	movs	r2, #77	; 0x4d
 80019d0:	4611      	mov	r1, r2
 80019d2:	4620      	mov	r0, r4
 80019d4:	f7ff fd7c 	bl	80014d0 <_mmcsd_get_slice>
 80019d8:	7268      	strb	r0, [r5, #9]
  csd10->taac                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_TAAC_SLICE);
 80019da:	2270      	movs	r2, #112	; 0x70
 80019dc:	2177      	movs	r1, #119	; 0x77
 80019de:	4620      	mov	r0, r4
 80019e0:	f7ff fd76 	bl	80014d0 <_mmcsd_get_slice>
 80019e4:	7068      	strb	r0, [r5, #1]
  csd10->tmp_write_protect   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_TMP_WRITE_PROTECT_SLICE);
 80019e6:	220c      	movs	r2, #12
 80019e8:	4611      	mov	r1, r2
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff fd70 	bl	80014d0 <_mmcsd_get_slice>
 80019f0:	7768      	strb	r0, [r5, #29]
  csd10->tran_speed          = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_TRANS_SPEED_SLICE);
 80019f2:	2260      	movs	r2, #96	; 0x60
 80019f4:	2167      	movs	r1, #103	; 0x67
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7ff fd6a 	bl	80014d0 <_mmcsd_get_slice>
 80019fc:	70e8      	strb	r0, [r5, #3]
  csd10->wp_grp_enable       = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_WP_GRP_ENABLE_SLICE);
 80019fe:	221f      	movs	r2, #31
 8001a00:	4611      	mov	r1, r2
 8001a02:	4620      	mov	r0, r4
 8001a04:	f7ff fd64 	bl	80014d0 <_mmcsd_get_slice>
 8001a08:	75a8      	strb	r0, [r5, #22]
  csd10->wp_grp_size         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_WP_GRP_SIZE_SLICE);
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	2126      	movs	r1, #38	; 0x26
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f7ff fd5e 	bl	80014d0 <_mmcsd_get_slice>
 8001a14:	7568      	strb	r0, [r5, #21]
  csd10->write_bl_len        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_WRITE_BL_LEN_SLICE);
 8001a16:	220c      	movs	r2, #12
 8001a18:	2119      	movs	r1, #25
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f7ff fd58 	bl	80014d0 <_mmcsd_get_slice>
 8001a20:	7628      	strb	r0, [r5, #24]
  csd10->write_bl_partial    = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_WRITE_BL_PARTIAL_SLICE);
 8001a22:	2215      	movs	r2, #21
 8001a24:	4611      	mov	r1, r2
 8001a26:	4620      	mov	r0, r4
 8001a28:	f7ff fd52 	bl	80014d0 <_mmcsd_get_slice>
 8001a2c:	7668      	strb	r0, [r5, #25]
  csd10->write_blk_misalign  = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_WRITE_BLK_MISALIGN_SLICE);
 8001a2e:	224e      	movs	r2, #78	; 0x4e
 8001a30:	4611      	mov	r1, r2
 8001a32:	4620      	mov	r0, r4
 8001a34:	f7ff fd4c 	bl	80014d0 <_mmcsd_get_slice>
 8001a38:	7228      	strb	r0, [r5, #8]
}
 8001a3a:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(NULL != sdcp);
 8001a3c:	4801      	ldr	r0, [pc, #4]	; (8001a44 <_mmcsd_unpack_csd_v10+0x144>)
 8001a3e:	f005 fe5f 	bl	8007700 <chSysHalt>
 8001a42:	e763      	b.n	800190c <_mmcsd_unpack_csd_v10+0xc>
 8001a44:	08018ed0 	.word	0x08018ed0
 8001a48:	f3af 8000 	nop.w
 8001a4c:	f3af 8000 	nop.w

08001a50 <_mmcsd_unpack_csd_v20>:
 * @param[out] csd20    pointer to the @p unpacked_sdc_csd_20_t object
 *
 * @notapi
 */
void _mmcsd_unpack_csd_v20(const MMCSDBlockDevice *sdcp,
                           unpacked_sdc_csd_20_t *csd20) {
 8001a50:	b538      	push	{r3, r4, r5, lr}
 8001a52:	460d      	mov	r5, r1
  const uint32_t *csd;

  osalDbgCheck(NULL != sdcp);
 8001a54:	4604      	mov	r4, r0
 8001a56:	2800      	cmp	r0, #0
 8001a58:	f000 8092 	beq.w	8001b80 <_mmcsd_unpack_csd_v20+0x130>

  csd = sdcp->csd;
 8001a5c:	3418      	adds	r4, #24
  csd20->c_size              =           _mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE);
 8001a5e:	2230      	movs	r2, #48	; 0x30
 8001a60:	2145      	movs	r1, #69	; 0x45
 8001a62:	4620      	mov	r0, r4
 8001a64:	f7ff fd34 	bl	80014d0 <_mmcsd_get_slice>
 8001a68:	60e8      	str	r0, [r5, #12]
  csd20->crc                 = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_CRC_SLICE);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2107      	movs	r1, #7
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f7ff fd2e 	bl	80014d0 <_mmcsd_get_slice>
 8001a74:	7728      	strb	r0, [r5, #28]
  csd20->ccc                 = (uint16_t)_mmcsd_get_slice(csd, MMCSD_CSD_20_CCC_SLICE);
 8001a76:	2254      	movs	r2, #84	; 0x54
 8001a78:	215f      	movs	r1, #95	; 0x5f
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f7ff fd28 	bl	80014d0 <_mmcsd_get_slice>
 8001a80:	80a8      	strh	r0, [r5, #4]
  csd20->copy                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_COPY_SLICE);
 8001a82:	220e      	movs	r2, #14
 8001a84:	4611      	mov	r1, r2
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff fd22 	bl	80014d0 <_mmcsd_get_slice>
 8001a8c:	7628      	strb	r0, [r5, #24]
  csd20->csd_structure       = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_CSD_STRUCTURE_SLICE);
 8001a8e:	227e      	movs	r2, #126	; 0x7e
 8001a90:	217f      	movs	r1, #127	; 0x7f
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7ff fd1c 	bl	80014d0 <_mmcsd_get_slice>
 8001a98:	7028      	strb	r0, [r5, #0]
  csd20->dsr_imp             = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_DSR_IMP_SLICE);
 8001a9a:	224c      	movs	r2, #76	; 0x4c
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7ff fd16 	bl	80014d0 <_mmcsd_get_slice>
 8001aa4:	72a8      	strb	r0, [r5, #10]
  csd20->erase_blk_en        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_ERASE_BLK_EN_SLICE);
 8001aa6:	222e      	movs	r2, #46	; 0x2e
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff fd10 	bl	80014d0 <_mmcsd_get_slice>
 8001ab0:	7428      	strb	r0, [r5, #16]
  csd20->file_format         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_FILE_FORMAT_SLICE);
 8001ab2:	220a      	movs	r2, #10
 8001ab4:	210b      	movs	r1, #11
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7ff fd0a 	bl	80014d0 <_mmcsd_get_slice>
 8001abc:	76e8      	strb	r0, [r5, #27]
  csd20->file_format_grp     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_FILE_FORMAT_GRP_SLICE);
 8001abe:	220f      	movs	r2, #15
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff fd04 	bl	80014d0 <_mmcsd_get_slice>
 8001ac8:	75e8      	strb	r0, [r5, #23]
  csd20->nsac                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_NSAC_SLICE);
 8001aca:	2268      	movs	r2, #104	; 0x68
 8001acc:	216f      	movs	r1, #111	; 0x6f
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f7ff fcfe 	bl	80014d0 <_mmcsd_get_slice>
 8001ad4:	70a8      	strb	r0, [r5, #2]
  csd20->perm_write_protect  = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_PERM_WRITE_PROTECT_SLICE);
 8001ad6:	220d      	movs	r2, #13
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4620      	mov	r0, r4
 8001adc:	f7ff fcf8 	bl	80014d0 <_mmcsd_get_slice>
 8001ae0:	7668      	strb	r0, [r5, #25]
  csd20->r2w_factor          = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_R2W_FACTOR_SLICE);
 8001ae2:	221a      	movs	r2, #26
 8001ae4:	211c      	movs	r1, #28
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f7ff fcf2 	bl	80014d0 <_mmcsd_get_slice>
 8001aec:	7528      	strb	r0, [r5, #20]
  csd20->read_bl_len         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_READ_BL_LEN_SLICE);
 8001aee:	2250      	movs	r2, #80	; 0x50
 8001af0:	2153      	movs	r1, #83	; 0x53
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff fcec 	bl	80014d0 <_mmcsd_get_slice>
 8001af8:	71a8      	strb	r0, [r5, #6]
  csd20->read_bl_partial     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_READ_BL_PARTIAL_SLICE);
 8001afa:	224f      	movs	r2, #79	; 0x4f
 8001afc:	4611      	mov	r1, r2
 8001afe:	4620      	mov	r0, r4
 8001b00:	f7ff fce6 	bl	80014d0 <_mmcsd_get_slice>
 8001b04:	71e8      	strb	r0, [r5, #7]
  csd20->read_blk_misalign   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_READ_BLK_MISALIGN_SLICE);
 8001b06:	224d      	movs	r2, #77	; 0x4d
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff fce0 	bl	80014d0 <_mmcsd_get_slice>
 8001b10:	7268      	strb	r0, [r5, #9]
  csd20->erase_sector_size   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_ERASE_SECTOR_SIZE_SLICE);
 8001b12:	2227      	movs	r2, #39	; 0x27
 8001b14:	212d      	movs	r1, #45	; 0x2d
 8001b16:	4620      	mov	r0, r4
 8001b18:	f7ff fcda 	bl	80014d0 <_mmcsd_get_slice>
 8001b1c:	7468      	strb	r0, [r5, #17]
  csd20->taac                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_TAAC_SLICE);
 8001b1e:	2270      	movs	r2, #112	; 0x70
 8001b20:	2177      	movs	r1, #119	; 0x77
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7ff fcd4 	bl	80014d0 <_mmcsd_get_slice>
 8001b28:	7068      	strb	r0, [r5, #1]
  csd20->tmp_write_protect   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_TMP_WRITE_PROTECT_SLICE);
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7ff fcce 	bl	80014d0 <_mmcsd_get_slice>
 8001b34:	76a8      	strb	r0, [r5, #26]
  csd20->tran_speed          = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_TRANS_SPEED_SLICE);
 8001b36:	2260      	movs	r2, #96	; 0x60
 8001b38:	2167      	movs	r1, #103	; 0x67
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f7ff fcc8 	bl	80014d0 <_mmcsd_get_slice>
 8001b40:	70e8      	strb	r0, [r5, #3]
  csd20->wp_grp_enable       = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_WP_GRP_ENABLE_SLICE);
 8001b42:	221f      	movs	r2, #31
 8001b44:	4611      	mov	r1, r2
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff fcc2 	bl	80014d0 <_mmcsd_get_slice>
 8001b4c:	74e8      	strb	r0, [r5, #19]
  csd20->wp_grp_size         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_WP_GRP_SIZE_SLICE);
 8001b4e:	2220      	movs	r2, #32
 8001b50:	2126      	movs	r1, #38	; 0x26
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7ff fcbc 	bl	80014d0 <_mmcsd_get_slice>
 8001b58:	74a8      	strb	r0, [r5, #18]
  csd20->write_bl_len        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_WRITE_BL_LEN_SLICE);
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	2119      	movs	r1, #25
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff fcb6 	bl	80014d0 <_mmcsd_get_slice>
 8001b64:	7568      	strb	r0, [r5, #21]
  csd20->write_bl_partial    = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_WRITE_BL_PARTIAL_SLICE);
 8001b66:	2215      	movs	r2, #21
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7ff fcb0 	bl	80014d0 <_mmcsd_get_slice>
 8001b70:	75a8      	strb	r0, [r5, #22]
  csd20->write_blk_misalign  = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_WRITE_BLK_MISALIGN_SLICE);
 8001b72:	224e      	movs	r2, #78	; 0x4e
 8001b74:	4611      	mov	r1, r2
 8001b76:	4620      	mov	r0, r4
 8001b78:	f7ff fcaa 	bl	80014d0 <_mmcsd_get_slice>
 8001b7c:	7228      	strb	r0, [r5, #8]
}
 8001b7e:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(NULL != sdcp);
 8001b80:	4801      	ldr	r0, [pc, #4]	; (8001b88 <_mmcsd_unpack_csd_v20+0x138>)
 8001b82:	f005 fdbd 	bl	8007700 <chSysHalt>
 8001b86:	e769      	b.n	8001a5c <_mmcsd_unpack_csd_v20+0xc>
 8001b88:	08018ee8 	.word	0x08018ee8
 8001b8c:	00000000 	.word	0x00000000

08001b90 <gptInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void gptInit(void) {
 8001b90:	b508      	push	{r3, lr}

  gpt_lld_init();
 8001b92:	f005 fa25 	bl	8006fe0 <gpt_lld_init>
}
 8001b96:	bd08      	pop	{r3, pc}
 8001b98:	f3af 8000 	nop.w
 8001b9c:	f3af 8000 	nop.w

08001ba0 <gptObjectInit>:
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	7003      	strb	r3, [r0, #0]
  gptp->config = NULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	6043      	str	r3, [r0, #4]
}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	f3af 8000 	nop.w

08001bb0 <gptStart>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] config    pointer to the @p GPTConfig object
 *
 * @api
 */
void gptStart(GPTDriver *gptp, const GPTConfig *config) {
 8001bb0:	b538      	push	{r3, r4, r5, lr}
 8001bb2:	460d      	mov	r5, r1

  osalDbgCheck((gptp != NULL) && (config != NULL));
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	b330      	cbz	r0, 8001c06 <gptStart+0x56>
 8001bb8:	b329      	cbz	r1, 8001c06 <gptStart+0x56>
 8001bba:	2320      	movs	r3, #32
 8001bbc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001bc0:	f007 fa2e 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001bc4:	f005 ff2c 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
 8001bc8:	7823      	ldrb	r3, [r4, #0]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d902      	bls.n	8001bd8 <gptStart+0x28>
 8001bd2:	4811      	ldr	r0, [pc, #68]	; (8001c18 <gptStart+0x68>)
 8001bd4:	f005 fd94 	bl	8007700 <chSysHalt>
              "invalid state");
  gptp->config = config;
 8001bd8:	6065      	str	r5, [r4, #4]
  gpt_lld_start(gptp);
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f005 fa10 	bl	8007000 <gpt_lld_start>
  gptp->state = GPT_READY;
 8001be0:	2302      	movs	r3, #2
 8001be2:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 8001be4:	f005 ff34 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001be8:	f007 fa22 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <gptStart+0x6c>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d004      	beq.n	8001bfe <gptStart+0x4e>
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	6899      	ldr	r1, [r3, #8]
 8001bf8:	6893      	ldr	r3, [r2, #8]
 8001bfa:	4299      	cmp	r1, r3
 8001bfc:	d307      	bcc.n	8001c0e <gptStart+0x5e>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8001c04:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((gptp != NULL) && (config != NULL));
 8001c06:	4804      	ldr	r0, [pc, #16]	; (8001c18 <gptStart+0x68>)
 8001c08:	f005 fd7a 	bl	8007700 <chSysHalt>
 8001c0c:	e7d5      	b.n	8001bba <gptStart+0xa>
 8001c0e:	4804      	ldr	r0, [pc, #16]	; (8001c20 <gptStart+0x70>)
 8001c10:	f005 fd76 	bl	8007700 <chSysHalt>
 8001c14:	e7f3      	b.n	8001bfe <gptStart+0x4e>
 8001c16:	bf00      	nop
 8001c18:	08018f00 	.word	0x08018f00
 8001c1c:	200050f8 	.word	0x200050f8
 8001c20:	08018f0c 	.word	0x08018f0c
 8001c24:	f3af 8000 	nop.w
 8001c28:	f3af 8000 	nop.w
 8001c2c:	f3af 8000 	nop.w

08001c30 <gptStop>:
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @api
 */
void gptStop(GPTDriver *gptp) {
 8001c30:	b510      	push	{r4, lr}

  osalDbgCheck(gptp != NULL);
 8001c32:	4604      	mov	r4, r0
 8001c34:	b330      	cbz	r0, 8001c84 <gptStop+0x54>
 8001c36:	2320      	movs	r3, #32
 8001c38:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001c3c:	f007 f9f0 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001c40:	f005 feee 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();

  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
 8001c44:	7823      	ldrb	r3, [r4, #0]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d902      	bls.n	8001c54 <gptStop+0x24>
 8001c4e:	4811      	ldr	r0, [pc, #68]	; (8001c94 <gptStop+0x64>)
 8001c50:	f005 fd56 	bl	8007700 <chSysHalt>
                "invalid state");

  gpt_lld_stop(gptp);
 8001c54:	4620      	mov	r0, r4
 8001c56:	f005 fa23 	bl	80070a0 <gpt_lld_stop>
  gptp->config = NULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	6063      	str	r3, [r4, #4]
  gptp->state  = GPT_STOP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 8001c62:	f005 fef5 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001c66:	f007 f9e3 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <gptStop+0x68>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d004      	beq.n	8001c7c <gptStop+0x4c>
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	6899      	ldr	r1, [r3, #8]
 8001c76:	6893      	ldr	r3, [r2, #8]
 8001c78:	4299      	cmp	r1, r3
 8001c7a:	d307      	bcc.n	8001c8c <gptStop+0x5c>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f383 8811 	msr	BASEPRI, r3

  osalSysUnlock();
}
 8001c82:	bd10      	pop	{r4, pc}
  osalDbgCheck(gptp != NULL);
 8001c84:	4803      	ldr	r0, [pc, #12]	; (8001c94 <gptStop+0x64>)
 8001c86:	f005 fd3b 	bl	8007700 <chSysHalt>
 8001c8a:	e7d4      	b.n	8001c36 <gptStop+0x6>
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <gptStop+0x6c>)
 8001c8e:	f005 fd37 	bl	8007700 <chSysHalt>
 8001c92:	e7f3      	b.n	8001c7c <gptStop+0x4c>
 8001c94:	08018f18 	.word	0x08018f18
 8001c98:	200050f8 	.word	0x200050f8
 8001c9c:	08018f0c 	.word	0x08018f0c

08001ca0 <gptChangeInterval>:
 * @param[in] gptp      pointer to a @p GPTDriver object
 * @param[in] interval  new cycle time in timer ticks
 *
 * @api
 */
void gptChangeInterval(GPTDriver *gptp, gptcnt_t interval) {
 8001ca0:	b538      	push	{r3, r4, r5, lr}
 8001ca2:	460c      	mov	r4, r1

  osalDbgCheck(gptp != NULL);
 8001ca4:	4605      	mov	r5, r0
 8001ca6:	b300      	cbz	r0, 8001cea <gptChangeInterval+0x4a>
 8001ca8:	2320      	movs	r3, #32
 8001caa:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001cae:	f007 f9b7 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001cb2:	f005 feb5 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(gptp->state == GPT_CONTINUOUS,
 8001cb6:	782b      	ldrb	r3, [r5, #0]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d002      	beq.n	8001cc2 <gptChangeInterval+0x22>
 8001cbc:	480f      	ldr	r0, [pc, #60]	; (8001cfc <gptChangeInterval+0x5c>)
 8001cbe:	f005 fd1f 	bl	8007700 <chSysHalt>
                "invalid state");
  gptChangeIntervalI(gptp, interval);
 8001cc2:	68eb      	ldr	r3, [r5, #12]
 8001cc4:	3c01      	subs	r4, #1
 8001cc6:	62dc      	str	r4, [r3, #44]	; 0x2c
  _dbg_check_unlock();
 8001cc8:	f005 fec2 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001ccc:	f007 f9b0 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <gptChangeInterval+0x60>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d004      	beq.n	8001ce2 <gptChangeInterval+0x42>
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	6899      	ldr	r1, [r3, #8]
 8001cdc:	6893      	ldr	r3, [r2, #8]
 8001cde:	4299      	cmp	r1, r3
 8001ce0:	d307      	bcc.n	8001cf2 <gptChangeInterval+0x52>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8001ce8:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(gptp != NULL);
 8001cea:	4804      	ldr	r0, [pc, #16]	; (8001cfc <gptChangeInterval+0x5c>)
 8001cec:	f005 fd08 	bl	8007700 <chSysHalt>
 8001cf0:	e7da      	b.n	8001ca8 <gptChangeInterval+0x8>
 8001cf2:	4804      	ldr	r0, [pc, #16]	; (8001d04 <gptChangeInterval+0x64>)
 8001cf4:	f005 fd04 	bl	8007700 <chSysHalt>
 8001cf8:	e7f3      	b.n	8001ce2 <gptChangeInterval+0x42>
 8001cfa:	bf00      	nop
 8001cfc:	08018f20 	.word	0x08018f20
 8001d00:	200050f8 	.word	0x200050f8
 8001d04:	08018f0c 	.word	0x08018f0c
 8001d08:	f3af 8000 	nop.w
 8001d0c:	f3af 8000 	nop.w

08001d10 <gptStartContinuousI>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] interval  period in ticks
 *
 * @iclass
 */
void gptStartContinuousI(GPTDriver *gptp, gptcnt_t interval) {
 8001d10:	b538      	push	{r3, r4, r5, lr}
 8001d12:	4604      	mov	r4, r0
 8001d14:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8001d16:	f005 ff23 	bl	8007b60 <chDbgCheckClassI>
  osalDbgCheck(gptp != NULL);
 8001d1a:	b164      	cbz	r4, 8001d36 <gptStartContinuousI+0x26>
  osalDbgAssert(gptp->state == GPT_READY,
 8001d1c:	7823      	ldrb	r3, [r4, #0]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d002      	beq.n	8001d28 <gptStartContinuousI+0x18>
 8001d22:	4807      	ldr	r0, [pc, #28]	; (8001d40 <gptStartContinuousI+0x30>)
 8001d24:	f005 fcec 	bl	8007700 <chSysHalt>
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	7023      	strb	r3, [r4, #0]
  gpt_lld_start_timer(gptp, interval);
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f005 f9de 	bl	80070f0 <gpt_lld_start_timer>
}
 8001d34:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(gptp != NULL);
 8001d36:	4802      	ldr	r0, [pc, #8]	; (8001d40 <gptStartContinuousI+0x30>)
 8001d38:	f005 fce2 	bl	8007700 <chSysHalt>
 8001d3c:	e7ee      	b.n	8001d1c <gptStartContinuousI+0xc>
 8001d3e:	bf00      	nop
 8001d40:	08018f34 	.word	0x08018f34
 8001d44:	f3af 8000 	nop.w
 8001d48:	f3af 8000 	nop.w
 8001d4c:	f3af 8000 	nop.w

08001d50 <gptStartContinuous>:
void gptStartContinuous(GPTDriver *gptp, gptcnt_t interval) {
 8001d50:	b538      	push	{r3, r4, r5, lr}
 8001d52:	4604      	mov	r4, r0
 8001d54:	460d      	mov	r5, r1
 8001d56:	2320      	movs	r3, #32
 8001d58:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001d5c:	f007 f960 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001d60:	f005 fe5e 	bl	8007a20 <_dbg_check_lock>
  gptStartContinuousI(gptp, interval);
 8001d64:	4629      	mov	r1, r5
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff ffd2 	bl	8001d10 <gptStartContinuousI>
  _dbg_check_unlock();
 8001d6c:	f005 fe70 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001d70:	f007 f95e 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <gptStartContinuous+0x48>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d004      	beq.n	8001d86 <gptStartContinuous+0x36>
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	6899      	ldr	r1, [r3, #8]
 8001d80:	6893      	ldr	r3, [r2, #8]
 8001d82:	4299      	cmp	r1, r3
 8001d84:	d303      	bcc.n	8001d8e <gptStartContinuous+0x3e>
 8001d86:	2300      	movs	r3, #0
 8001d88:	f383 8811 	msr	BASEPRI, r3
}
 8001d8c:	bd38      	pop	{r3, r4, r5, pc}
 8001d8e:	4803      	ldr	r0, [pc, #12]	; (8001d9c <gptStartContinuous+0x4c>)
 8001d90:	f005 fcb6 	bl	8007700 <chSysHalt>
 8001d94:	e7f7      	b.n	8001d86 <gptStartContinuous+0x36>
 8001d96:	bf00      	nop
 8001d98:	200050f8 	.word	0x200050f8
 8001d9c:	08018f0c 	.word	0x08018f0c

08001da0 <gptStartOneShotI>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] interval  time interval in ticks
 *
 * @api
 */
void gptStartOneShotI(GPTDriver *gptp, gptcnt_t interval) {
 8001da0:	b538      	push	{r3, r4, r5, lr}
 8001da2:	4604      	mov	r4, r0
 8001da4:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8001da6:	f005 fedb 	bl	8007b60 <chDbgCheckClassI>
  osalDbgCheck(gptp != NULL);
 8001daa:	b17c      	cbz	r4, 8001dcc <gptStartOneShotI+0x2c>
  osalDbgCheck(gptp->config->callback != NULL);
 8001dac:	6863      	ldr	r3, [r4, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	b183      	cbz	r3, 8001dd4 <gptStartOneShotI+0x34>
  osalDbgAssert(gptp->state == GPT_READY,
 8001db2:	7823      	ldrb	r3, [r4, #0]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d002      	beq.n	8001dbe <gptStartOneShotI+0x1e>
 8001db8:	4808      	ldr	r0, [pc, #32]	; (8001ddc <gptStartOneShotI+0x3c>)
 8001dba:	f005 fca1 	bl	8007700 <chSysHalt>
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	7023      	strb	r3, [r4, #0]
  gpt_lld_start_timer(gptp, interval);
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f005 f993 	bl	80070f0 <gpt_lld_start_timer>
}
 8001dca:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(gptp != NULL);
 8001dcc:	4803      	ldr	r0, [pc, #12]	; (8001ddc <gptStartOneShotI+0x3c>)
 8001dce:	f005 fc97 	bl	8007700 <chSysHalt>
 8001dd2:	e7eb      	b.n	8001dac <gptStartOneShotI+0xc>
  osalDbgCheck(gptp->config->callback != NULL);
 8001dd4:	4801      	ldr	r0, [pc, #4]	; (8001ddc <gptStartOneShotI+0x3c>)
 8001dd6:	f005 fc93 	bl	8007700 <chSysHalt>
 8001dda:	e7ea      	b.n	8001db2 <gptStartOneShotI+0x12>
 8001ddc:	08018f48 	.word	0x08018f48

08001de0 <gptStartOneShot>:
void gptStartOneShot(GPTDriver *gptp, gptcnt_t interval) {
 8001de0:	b538      	push	{r3, r4, r5, lr}
 8001de2:	4604      	mov	r4, r0
 8001de4:	460d      	mov	r5, r1
 8001de6:	2320      	movs	r3, #32
 8001de8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001dec:	f007 f918 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001df0:	f005 fe16 	bl	8007a20 <_dbg_check_lock>
  gptStartOneShotI(gptp, interval);
 8001df4:	4629      	mov	r1, r5
 8001df6:	4620      	mov	r0, r4
 8001df8:	f7ff ffd2 	bl	8001da0 <gptStartOneShotI>
  _dbg_check_unlock();
 8001dfc:	f005 fe28 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001e00:	f007 f916 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <gptStartOneShot+0x48>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d004      	beq.n	8001e16 <gptStartOneShot+0x36>
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	6899      	ldr	r1, [r3, #8]
 8001e10:	6893      	ldr	r3, [r2, #8]
 8001e12:	4299      	cmp	r1, r3
 8001e14:	d303      	bcc.n	8001e1e <gptStartOneShot+0x3e>
 8001e16:	2300      	movs	r3, #0
 8001e18:	f383 8811 	msr	BASEPRI, r3
}
 8001e1c:	bd38      	pop	{r3, r4, r5, pc}
 8001e1e:	4803      	ldr	r0, [pc, #12]	; (8001e2c <gptStartOneShot+0x4c>)
 8001e20:	f005 fc6e 	bl	8007700 <chSysHalt>
 8001e24:	e7f7      	b.n	8001e16 <gptStartOneShot+0x36>
 8001e26:	bf00      	nop
 8001e28:	200050f8 	.word	0x200050f8
 8001e2c:	08018f0c 	.word	0x08018f0c

08001e30 <gptStopTimerI>:
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @api
 */
void gptStopTimerI(GPTDriver *gptp) {
 8001e30:	b510      	push	{r4, lr}
 8001e32:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8001e34:	f005 fe94 	bl	8007b60 <chDbgCheckClassI>
  osalDbgCheck(gptp != NULL);
 8001e38:	b154      	cbz	r4, 8001e50 <gptStopTimerI+0x20>
  osalDbgAssert((gptp->state == GPT_READY) || (gptp->state == GPT_CONTINUOUS) ||
 8001e3a:	7823      	ldrb	r3, [r4, #0]
 8001e3c:	3b02      	subs	r3, #2
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d809      	bhi.n	8001e58 <gptStopTimerI+0x28>
                (gptp->state == GPT_ONESHOT),
                "invalid state");

  gptp->state = GPT_READY;
 8001e44:	2302      	movs	r3, #2
 8001e46:	7023      	strb	r3, [r4, #0]
  gpt_lld_stop_timer(gptp);
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f005 f969 	bl	8007120 <gpt_lld_stop_timer>
}
 8001e4e:	bd10      	pop	{r4, pc}
  osalDbgCheck(gptp != NULL);
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <gptStopTimerI+0x30>)
 8001e52:	f005 fc55 	bl	8007700 <chSysHalt>
 8001e56:	e7f0      	b.n	8001e3a <gptStopTimerI+0xa>
  osalDbgAssert((gptp->state == GPT_READY) || (gptp->state == GPT_CONTINUOUS) ||
 8001e58:	4801      	ldr	r0, [pc, #4]	; (8001e60 <gptStopTimerI+0x30>)
 8001e5a:	f005 fc51 	bl	8007700 <chSysHalt>
 8001e5e:	e7f1      	b.n	8001e44 <gptStopTimerI+0x14>
 8001e60:	08018f5c 	.word	0x08018f5c
 8001e64:	f3af 8000 	nop.w
 8001e68:	f3af 8000 	nop.w
 8001e6c:	f3af 8000 	nop.w

08001e70 <gptStopTimer>:
void gptStopTimer(GPTDriver *gptp) {
 8001e70:	b510      	push	{r4, lr}
 8001e72:	4604      	mov	r4, r0
 8001e74:	2320      	movs	r3, #32
 8001e76:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001e7a:	f007 f8d1 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001e7e:	f005 fdcf 	bl	8007a20 <_dbg_check_lock>
  gptStopTimerI(gptp);
 8001e82:	4620      	mov	r0, r4
 8001e84:	f7ff ffd4 	bl	8001e30 <gptStopTimerI>
  _dbg_check_unlock();
 8001e88:	f005 fde2 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001e8c:	f007 f8d0 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <gptStopTimer+0x44>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d004      	beq.n	8001ea2 <gptStopTimer+0x32>
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	6899      	ldr	r1, [r3, #8]
 8001e9c:	6893      	ldr	r3, [r2, #8]
 8001e9e:	4299      	cmp	r1, r3
 8001ea0:	d303      	bcc.n	8001eaa <gptStopTimer+0x3a>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f383 8811 	msr	BASEPRI, r3
}
 8001ea8:	bd10      	pop	{r4, pc}
 8001eaa:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <gptStopTimer+0x48>)
 8001eac:	f005 fc28 	bl	8007700 <chSysHalt>
 8001eb0:	e7f7      	b.n	8001ea2 <gptStopTimer+0x32>
 8001eb2:	bf00      	nop
 8001eb4:	200050f8 	.word	0x200050f8
 8001eb8:	08018f0c 	.word	0x08018f0c
 8001ebc:	f3af 8000 	nop.w

08001ec0 <gptPolledDelay>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] interval  time interval in ticks
 *
 * @api
 */
void gptPolledDelay(GPTDriver *gptp, gptcnt_t interval) {
 8001ec0:	b538      	push	{r3, r4, r5, lr}
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	460d      	mov	r5, r1

  osalDbgAssert(gptp->state == GPT_READY,
 8001ec6:	7803      	ldrb	r3, [r0, #0]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d002      	beq.n	8001ed2 <gptPolledDelay+0x12>
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <gptPolledDelay+0x24>)
 8001ece:	f005 fc17 	bl	8007700 <chSysHalt>
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	7023      	strb	r3, [r4, #0]
  gpt_lld_polled_delay(gptp, interval);
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f005 f931 	bl	8007140 <gpt_lld_polled_delay>
  gptp->state = GPT_READY;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	7023      	strb	r3, [r4, #0]
}
 8001ee2:	bd38      	pop	{r3, r4, r5, pc}
 8001ee4:	08018f6c 	.word	0x08018f6c
	...

08001ef0 <i2cInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void i2cInit(void) {
 8001ef0:	b508      	push	{r3, lr}

  i2c_lld_init();
 8001ef2:	f003 fbcd 	bl	8005690 <i2c_lld_init>
}
 8001ef6:	bd08      	pop	{r3, pc}
 8001ef8:	f3af 8000 	nop.w
 8001efc:	f3af 8000 	nop.w

08001f00 <i2cObjectInit>:
 *
 * @param[out] i2cp     pointer to the @p I2CDriver object
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {
 8001f00:	b508      	push	{r3, lr}

  i2cp->state  = I2C_STOP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	7003      	strb	r3, [r0, #0]
  i2cp->config = NULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	6043      	str	r3, [r0, #4]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8001f0a:	300c      	adds	r0, #12
 8001f0c:	f007 fb90 	bl	8009630 <chMtxObjectInit>
#endif

#if defined(I2C_DRIVER_EXT_INIT_HOOK)
  I2C_DRIVER_EXT_INIT_HOOK(i2cp);
#endif
}
 8001f10:	bd08      	pop	{r3, pc}
 8001f12:	bf00      	nop
 8001f14:	f3af 8000 	nop.w
 8001f18:	f3af 8000 	nop.w
 8001f1c:	f3af 8000 	nop.w

08001f20 <i2cStart>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] config    pointer to the @p I2CConfig object
 *
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
 8001f20:	b538      	push	{r3, r4, r5, lr}
 8001f22:	460d      	mov	r5, r1

  osalDbgCheck((i2cp != NULL) && (config != NULL));
 8001f24:	4604      	mov	r4, r0
 8001f26:	b340      	cbz	r0, 8001f7a <i2cStart+0x5a>
 8001f28:	b339      	cbz	r1, 8001f7a <i2cStart+0x5a>
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 8001f2a:	7822      	ldrb	r2, [r4, #0]
 8001f2c:	1e53      	subs	r3, r2, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d904      	bls.n	8001f3e <i2cStart+0x1e>
 8001f34:	2a05      	cmp	r2, #5
 8001f36:	d002      	beq.n	8001f3e <i2cStart+0x1e>
 8001f38:	4814      	ldr	r0, [pc, #80]	; (8001f8c <i2cStart+0x6c>)
 8001f3a:	f005 fbe1 	bl	8007700 <chSysHalt>
 8001f3e:	2320      	movs	r3, #32
 8001f40:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001f44:	f007 f86c 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001f48:	f005 fd6a 	bl	8007a20 <_dbg_check_lock>
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 8001f4c:	6065      	str	r5, [r4, #4]
  i2c_lld_start(i2cp);
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f003 fbae 	bl	80056b0 <i2c_lld_start>
  i2cp->state = I2C_READY;
 8001f54:	2302      	movs	r3, #2
 8001f56:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 8001f58:	f005 fd7a 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001f5c:	f007 f868 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <i2cStart+0x70>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d004      	beq.n	8001f72 <i2cStart+0x52>
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	6899      	ldr	r1, [r3, #8]
 8001f6c:	6893      	ldr	r3, [r2, #8]
 8001f6e:	4299      	cmp	r1, r3
 8001f70:	d307      	bcc.n	8001f82 <i2cStart+0x62>
 8001f72:	2300      	movs	r3, #0
 8001f74:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8001f78:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((i2cp != NULL) && (config != NULL));
 8001f7a:	4804      	ldr	r0, [pc, #16]	; (8001f8c <i2cStart+0x6c>)
 8001f7c:	f005 fbc0 	bl	8007700 <chSysHalt>
 8001f80:	e7d3      	b.n	8001f2a <i2cStart+0xa>
 8001f82:	4804      	ldr	r0, [pc, #16]	; (8001f94 <i2cStart+0x74>)
 8001f84:	f005 fbbc 	bl	8007700 <chSysHalt>
 8001f88:	e7f3      	b.n	8001f72 <i2cStart+0x52>
 8001f8a:	bf00      	nop
 8001f8c:	08018f7c 	.word	0x08018f7c
 8001f90:	200050f8 	.word	0x200050f8
 8001f94:	08018f88 	.word	0x08018f88
 8001f98:	f3af 8000 	nop.w
 8001f9c:	f3af 8000 	nop.w

08001fa0 <i2cStop>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cStop(I2CDriver *i2cp) {
 8001fa0:	b510      	push	{r4, lr}

  osalDbgCheck(i2cp != NULL);
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	b340      	cbz	r0, 8001ff8 <i2cStop+0x58>
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001fac:	f007 f838 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001fb0:	f005 fd36 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();

  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 8001fb4:	7822      	ldrb	r2, [r4, #0]
 8001fb6:	1e53      	subs	r3, r2, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d904      	bls.n	8001fc8 <i2cStop+0x28>
 8001fbe:	2a05      	cmp	r2, #5
 8001fc0:	d002      	beq.n	8001fc8 <i2cStop+0x28>
 8001fc2:	4811      	ldr	r0, [pc, #68]	; (8002008 <i2cStop+0x68>)
 8001fc4:	f005 fb9c 	bl	8007700 <chSysHalt>
                (i2cp->state == I2C_LOCKED), "invalid state");

  i2c_lld_stop(i2cp);
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f003 fbe9 	bl	80057a0 <i2c_lld_stop>
  i2cp->config = NULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	6063      	str	r3, [r4, #4]
  i2cp->state  = I2C_STOP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 8001fd6:	f005 fd3b 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001fda:	f007 f829 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <i2cStop+0x6c>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d004      	beq.n	8001ff0 <i2cStop+0x50>
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	6899      	ldr	r1, [r3, #8]
 8001fea:	6893      	ldr	r3, [r2, #8]
 8001fec:	4299      	cmp	r1, r3
 8001fee:	d307      	bcc.n	8002000 <i2cStop+0x60>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f383 8811 	msr	BASEPRI, r3

  osalSysUnlock();
}
 8001ff6:	bd10      	pop	{r4, pc}
  osalDbgCheck(i2cp != NULL);
 8001ff8:	4803      	ldr	r0, [pc, #12]	; (8002008 <i2cStop+0x68>)
 8001ffa:	f005 fb81 	bl	8007700 <chSysHalt>
 8001ffe:	e7d2      	b.n	8001fa6 <i2cStop+0x6>
 8002000:	4803      	ldr	r0, [pc, #12]	; (8002010 <i2cStop+0x70>)
 8002002:	f005 fb7d 	bl	8007700 <chSysHalt>
 8002006:	e7f3      	b.n	8001ff0 <i2cStop+0x50>
 8002008:	08018f94 	.word	0x08018f94
 800200c:	200050f8 	.word	0x200050f8
 8002010:	08018f88 	.word	0x08018f88
 8002014:	f3af 8000 	nop.w
 8002018:	f3af 8000 	nop.w
 800201c:	f3af 8000 	nop.w

08002020 <i2cGetErrors>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @return              The errors mask.
 *
 * @api
 */
i2cflags_t i2cGetErrors(I2CDriver *i2cp) {
 8002020:	b510      	push	{r4, lr}

  osalDbgCheck(i2cp != NULL);
 8002022:	4604      	mov	r4, r0
 8002024:	b108      	cbz	r0, 800202a <i2cGetErrors+0xa>

  return i2c_lld_get_errors(i2cp);
}
 8002026:	68a0      	ldr	r0, [r4, #8]
 8002028:	bd10      	pop	{r4, pc}
  osalDbgCheck(i2cp != NULL);
 800202a:	4802      	ldr	r0, [pc, #8]	; (8002034 <i2cGetErrors+0x14>)
 800202c:	f005 fb68 	bl	8007700 <chSysHalt>
 8002030:	e7f9      	b.n	8002026 <i2cGetErrors+0x6>
 8002032:	bf00      	nop
 8002034:	08018f9c 	.word	0x08018f9c
 8002038:	f3af 8000 	nop.w
 800203c:	f3af 8000 	nop.w

08002040 <i2cMasterTransmitTimeout>:
                               i2caddr_t addr,
                               const uint8_t *txbuf,
                               size_t txbytes,
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               sysinterval_t timeout) {
 8002040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002044:	b085      	sub	sp, #20
 8002046:	468b      	mov	fp, r1
 8002048:	4692      	mov	sl, r2
 800204a:	461f      	mov	r7, r3
 800204c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800204e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8002050:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
  msg_t rdymsg;

  osalDbgCheck((i2cp != NULL) &&
 8002054:	4604      	mov	r4, r0
 8002056:	b130      	cbz	r0, 8002066 <i2cMasterTransmitTimeout+0x26>
 8002058:	b12b      	cbz	r3, 8002066 <i2cMasterTransmitTimeout+0x26>
 800205a:	b122      	cbz	r2, 8002066 <i2cMasterTransmitTimeout+0x26>
 800205c:	b105      	cbz	r5, 8002060 <i2cMasterTransmitTimeout+0x20>
 800205e:	b116      	cbz	r6, 8002066 <i2cMasterTransmitTimeout+0x26>
 8002060:	ea58 0309 	orrs.w	r3, r8, r9
 8002064:	d102      	bne.n	800206c <i2cMasterTransmitTimeout+0x2c>
 8002066:	4820      	ldr	r0, [pc, #128]	; (80020e8 <i2cMasterTransmitTimeout+0xa8>)
 8002068:	f005 fb4a 	bl	8007700 <chSysHalt>
               (txbytes > 0U) && (txbuf != NULL) &&
               ((rxbytes == 0U) || ((rxbytes > 0U) && (rxbuf != NULL))) &&
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 800206c:	7823      	ldrb	r3, [r4, #0]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d12e      	bne.n	80020d0 <i2cMasterTransmitTimeout+0x90>
 8002072:	2320      	movs	r3, #32
 8002074:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002078:	f006 ffd2 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800207c:	f005 fcd0 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8002080:	2300      	movs	r3, #0
 8002082:	60a3      	str	r3, [r4, #8]
  i2cp->state = I2C_ACTIVE_TX;
 8002084:	2303      	movs	r3, #3
 8002086:	7023      	strb	r3, [r4, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8002088:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800208c:	9501      	str	r5, [sp, #4]
 800208e:	9600      	str	r6, [sp, #0]
 8002090:	463b      	mov	r3, r7
 8002092:	4652      	mov	r2, sl
 8002094:	4659      	mov	r1, fp
 8002096:	4620      	mov	r0, r4
 8002098:	f003 fc4a 	bl	8005930 <i2c_lld_master_transmit_timeout>
 800209c:	4605      	mov	r5, r0
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 800209e:	f1b0 3fff 	cmp.w	r0, #4294967295
 80020a2:	d019      	beq.n	80020d8 <i2cMasterTransmitTimeout+0x98>
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
 80020a4:	2302      	movs	r3, #2
 80020a6:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 80020a8:	f005 fcd2 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80020ac:	f006 ffc0 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <i2cMasterTransmitTimeout+0xac>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d004      	beq.n	80020c2 <i2cMasterTransmitTimeout+0x82>
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	6899      	ldr	r1, [r3, #8]
 80020bc:	6893      	ldr	r3, [r2, #8]
 80020be:	4299      	cmp	r1, r3
 80020c0:	d30d      	bcc.n	80020de <i2cMasterTransmitTimeout+0x9e>
 80020c2:	2300      	movs	r3, #0
 80020c4:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();
  return rdymsg;
}
 80020c8:	4628      	mov	r0, r5
 80020ca:	b005      	add	sp, #20
 80020cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <i2cMasterTransmitTimeout+0xa8>)
 80020d2:	f005 fb15 	bl	8007700 <chSysHalt>
 80020d6:	e7cc      	b.n	8002072 <i2cMasterTransmitTimeout+0x32>
    i2cp->state = I2C_LOCKED;
 80020d8:	2305      	movs	r3, #5
 80020da:	7023      	strb	r3, [r4, #0]
 80020dc:	e7e4      	b.n	80020a8 <i2cMasterTransmitTimeout+0x68>
 80020de:	4804      	ldr	r0, [pc, #16]	; (80020f0 <i2cMasterTransmitTimeout+0xb0>)
 80020e0:	f005 fb0e 	bl	8007700 <chSysHalt>
 80020e4:	e7ed      	b.n	80020c2 <i2cMasterTransmitTimeout+0x82>
 80020e6:	bf00      	nop
 80020e8:	08018fac 	.word	0x08018fac
 80020ec:	200050f8 	.word	0x200050f8
 80020f0:	08018f88 	.word	0x08018f88
 80020f4:	f3af 8000 	nop.w
 80020f8:	f3af 8000 	nop.w
 80020fc:	f3af 8000 	nop.w

08002100 <i2cMasterReceiveTimeout>:
 */
msg_t i2cMasterReceiveTimeout(I2CDriver *i2cp,
                              i2caddr_t addr,
                              uint8_t *rxbuf,
                              size_t rxbytes,
                              sysinterval_t timeout) {
 8002100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002104:	b083      	sub	sp, #12
 8002106:	460d      	mov	r5, r1
 8002108:	4691      	mov	r9, r2
 800210a:	4698      	mov	r8, r3
 800210c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28

  msg_t rdymsg;

  osalDbgCheck((i2cp != NULL) && (addr != 0U) &&
 8002110:	4604      	mov	r4, r0
 8002112:	b128      	cbz	r0, 8002120 <i2cMasterReceiveTimeout+0x20>
 8002114:	b121      	cbz	r1, 8002120 <i2cMasterReceiveTimeout+0x20>
 8002116:	b11b      	cbz	r3, 8002120 <i2cMasterReceiveTimeout+0x20>
 8002118:	b112      	cbz	r2, 8002120 <i2cMasterReceiveTimeout+0x20>
 800211a:	ea56 0307 	orrs.w	r3, r6, r7
 800211e:	d102      	bne.n	8002126 <i2cMasterReceiveTimeout+0x26>
 8002120:	481e      	ldr	r0, [pc, #120]	; (800219c <i2cMasterReceiveTimeout+0x9c>)
 8002122:	f005 faed 	bl	8007700 <chSysHalt>
               (rxbytes > 0U) && (rxbuf != NULL) &&
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 8002126:	7823      	ldrb	r3, [r4, #0]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d12c      	bne.n	8002186 <i2cMasterReceiveTimeout+0x86>
 800212c:	2320      	movs	r3, #32
 800212e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002132:	f006 ff75 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002136:	f005 fc73 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 800213a:	2300      	movs	r3, #0
 800213c:	60a3      	str	r3, [r4, #8]
  i2cp->state = I2C_ACTIVE_RX;
 800213e:	2304      	movs	r3, #4
 8002140:	7023      	strb	r3, [r4, #0]
  rdymsg = i2c_lld_master_receive_timeout(i2cp, addr, rxbuf, rxbytes, timeout);
 8002142:	e9cd 6700 	strd	r6, r7, [sp]
 8002146:	4643      	mov	r3, r8
 8002148:	464a      	mov	r2, r9
 800214a:	4629      	mov	r1, r5
 800214c:	4620      	mov	r0, r4
 800214e:	f003 fb57 	bl	8005800 <i2c_lld_master_receive_timeout>
 8002152:	4605      	mov	r5, r0
  if (rdymsg == MSG_TIMEOUT) {
 8002154:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002158:	d019      	beq.n	800218e <i2cMasterReceiveTimeout+0x8e>
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
 800215a:	2302      	movs	r3, #2
 800215c:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 800215e:	f005 fc77 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002162:	f006 ff65 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <i2cMasterReceiveTimeout+0xa0>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d004      	beq.n	8002178 <i2cMasterReceiveTimeout+0x78>
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	6899      	ldr	r1, [r3, #8]
 8002172:	6893      	ldr	r3, [r2, #8]
 8002174:	4299      	cmp	r1, r3
 8002176:	d30d      	bcc.n	8002194 <i2cMasterReceiveTimeout+0x94>
 8002178:	2300      	movs	r3, #0
 800217a:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();
  return rdymsg;
}
 800217e:	4628      	mov	r0, r5
 8002180:	b003      	add	sp, #12
 8002182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <i2cMasterReceiveTimeout+0x9c>)
 8002188:	f005 faba 	bl	8007700 <chSysHalt>
 800218c:	e7ce      	b.n	800212c <i2cMasterReceiveTimeout+0x2c>
    i2cp->state = I2C_LOCKED;
 800218e:	2305      	movs	r3, #5
 8002190:	7023      	strb	r3, [r4, #0]
 8002192:	e7e4      	b.n	800215e <i2cMasterReceiveTimeout+0x5e>
 8002194:	4803      	ldr	r0, [pc, #12]	; (80021a4 <i2cMasterReceiveTimeout+0xa4>)
 8002196:	f005 fab3 	bl	8007700 <chSysHalt>
 800219a:	e7ed      	b.n	8002178 <i2cMasterReceiveTimeout+0x78>
 800219c:	08018fc8 	.word	0x08018fc8
 80021a0:	200050f8 	.word	0x200050f8
 80021a4:	08018f88 	.word	0x08018f88
 80021a8:	f3af 8000 	nop.w
 80021ac:	f3af 8000 	nop.w

080021b0 <i2cAcquireBus>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cAcquireBus(I2CDriver *i2cp) {
 80021b0:	b510      	push	{r4, lr}

  osalDbgCheck(i2cp != NULL);
 80021b2:	4604      	mov	r4, r0
 80021b4:	b120      	cbz	r0, 80021c0 <i2cAcquireBus+0x10>
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 80021b6:	f104 000c 	add.w	r0, r4, #12
 80021ba:	f007 fac9 	bl	8009750 <chMtxLock>

  osalMutexLock(&i2cp->mutex);
}
 80021be:	bd10      	pop	{r4, pc}
  osalDbgCheck(i2cp != NULL);
 80021c0:	4801      	ldr	r0, [pc, #4]	; (80021c8 <i2cAcquireBus+0x18>)
 80021c2:	f005 fa9d 	bl	8007700 <chSysHalt>
 80021c6:	e7f6      	b.n	80021b6 <i2cAcquireBus+0x6>
 80021c8:	08018fe0 	.word	0x08018fe0
 80021cc:	f3af 8000 	nop.w

080021d0 <i2cReleaseBus>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cReleaseBus(I2CDriver *i2cp) {
 80021d0:	b510      	push	{r4, lr}

  osalDbgCheck(i2cp != NULL);
 80021d2:	4604      	mov	r4, r0
 80021d4:	b120      	cbz	r0, 80021e0 <i2cReleaseBus+0x10>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 80021d6:	f104 000c 	add.w	r0, r4, #12
 80021da:	f007 fb29 	bl	8009830 <chMtxUnlock>

  osalMutexUnlock(&i2cp->mutex);
}
 80021de:	bd10      	pop	{r4, pc}
  osalDbgCheck(i2cp != NULL);
 80021e0:	4801      	ldr	r0, [pc, #4]	; (80021e8 <i2cReleaseBus+0x18>)
 80021e2:	f005 fa8d 	bl	8007700 <chSysHalt>
 80021e6:	e7f6      	b.n	80021d6 <i2cReleaseBus+0x6>
 80021e8:	08018ff0 	.word	0x08018ff0
 80021ec:	00000000 	.word	0x00000000

080021f0 <palReadBus>:
 * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
 * @return              The bus logical states.
 *
 * @special
 */
ioportmask_t palReadBus(const IOBus *bus) {
 80021f0:	b510      	push	{r4, lr}

  osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
 80021f2:	4604      	mov	r4, r0
 80021f4:	b110      	cbz	r0, 80021fc <palReadBus+0xc>
 80021f6:	6883      	ldr	r3, [r0, #8]
 80021f8:	2b0f      	cmp	r3, #15
 80021fa:	d902      	bls.n	8002202 <palReadBus+0x12>
 80021fc:	4804      	ldr	r0, [pc, #16]	; (8002210 <palReadBus+0x20>)
 80021fe:	f005 fa7f 	bl	8007700 <chSysHalt>

  return palReadGroup(bus->portid, bus->mask, bus->offset);
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	68a0      	ldr	r0, [r4, #8]
 8002208:	40c3      	lsrs	r3, r0
 800220a:	6860      	ldr	r0, [r4, #4]
}
 800220c:	4018      	ands	r0, r3
 800220e:	bd10      	pop	{r4, pc}
 8002210:	08019000 	.word	0x08019000
 8002214:	f3af 8000 	nop.w
 8002218:	f3af 8000 	nop.w
 800221c:	f3af 8000 	nop.w

08002220 <palWriteBus>:
 *                      the bus width are masked so most significant bits are
 *                      lost.
 *
 * @special
 */
void palWriteBus(const IOBus *bus, ioportmask_t bits) {
 8002220:	b538      	push	{r3, r4, r5, lr}
 8002222:	460d      	mov	r5, r1

  osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
 8002224:	4604      	mov	r4, r0
 8002226:	b110      	cbz	r0, 800222e <palWriteBus+0xe>
 8002228:	6883      	ldr	r3, [r0, #8]
 800222a:	2b0f      	cmp	r3, #15
 800222c:	d902      	bls.n	8002234 <palWriteBus+0x14>
 800222e:	4808      	ldr	r0, [pc, #32]	; (8002250 <palWriteBus+0x30>)
 8002230:	f005 fa66 	bl	8007700 <chSysHalt>

  palWriteGroup(bus->portid, bus->mask, bus->offset, bits);
 8002234:	6861      	ldr	r1, [r4, #4]
 8002236:	ea21 0305 	bic.w	r3, r1, r5
 800223a:	68a2      	ldr	r2, [r4, #8]
 800223c:	f102 0010 	add.w	r0, r2, #16
 8002240:	4083      	lsls	r3, r0
 8002242:	4029      	ands	r1, r5
 8002244:	4091      	lsls	r1, r2
 8002246:	4319      	orrs	r1, r3
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	6199      	str	r1, [r3, #24]
}
 800224c:	bd38      	pop	{r3, r4, r5, pc}
 800224e:	bf00      	nop
 8002250:	0801900c 	.word	0x0801900c
 8002254:	f3af 8000 	nop.w
 8002258:	f3af 8000 	nop.w
 800225c:	f3af 8000 	nop.w

08002260 <palSetBusMode>:
 * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
 * @param[in] mode      the mode
 *
 * @special
 */
void palSetBusMode(const IOBus *bus, iomode_t mode) {
 8002260:	b538      	push	{r3, r4, r5, lr}
 8002262:	460d      	mov	r5, r1

  osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
 8002264:	4604      	mov	r4, r0
 8002266:	b110      	cbz	r0, 800226e <palSetBusMode+0xe>
 8002268:	6883      	ldr	r3, [r0, #8]
 800226a:	2b0f      	cmp	r3, #15
 800226c:	d902      	bls.n	8002274 <palSetBusMode+0x14>
 800226e:	4805      	ldr	r0, [pc, #20]	; (8002284 <palSetBusMode+0x24>)
 8002270:	f005 fa46 	bl	8007700 <chSysHalt>

  palSetGroupMode(bus->portid, bus->mask, bus->offset, mode);
 8002274:	6861      	ldr	r1, [r4, #4]
 8002276:	68a3      	ldr	r3, [r4, #8]
 8002278:	462a      	mov	r2, r5
 800227a:	4099      	lsls	r1, r3
 800227c:	6820      	ldr	r0, [r4, #0]
 800227e:	f002 fe5f 	bl	8004f40 <_pal_lld_setgroupmode>
}
 8002282:	bd38      	pop	{r3, r4, r5, pc}
 8002284:	08019018 	.word	0x08019018
 8002288:	f3af 8000 	nop.w
 800228c:	f3af 8000 	nop.w

08002290 <palSetPadCallbackI>:
 */
void palSetPadCallbackI(ioportid_t port, iopadid_t pad,
                        palcallback_t cb, void *arg) {

  palevent_t *pep = pal_lld_get_pad_event(port, pad);
  pep->cb = cb;
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <palSetPadCallbackI+0xc>)
 8002292:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002296:	608a      	str	r2, [r1, #8]
  pep->arg = arg;
 8002298:	60cb      	str	r3, [r1, #12]
}
 800229a:	4770      	bx	lr
 800229c:	200046e8 	.word	0x200046e8

080022a0 <palSetLineCallbackI>:
 *
 * @iclass
 */
void palSetLineCallbackI(ioline_t line, palcallback_t cb, void *arg) {

  palevent_t *pep = pal_lld_get_line_event(line);
 80022a0:	f000 000f 	and.w	r0, r0, #15
  pep->cb = cb;
 80022a4:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <palSetLineCallbackI+0x10>)
 80022a6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80022aa:	6081      	str	r1, [r0, #8]
  pep->arg = arg;
 80022ac:	60c2      	str	r2, [r0, #12]
}
 80022ae:	4770      	bx	lr
 80022b0:	200046e8 	.word	0x200046e8
 80022b4:	f3af 8000 	nop.w
 80022b8:	f3af 8000 	nop.w
 80022bc:	f3af 8000 	nop.w

080022c0 <palWaitPadTimeoutS>:
 *
 * @sclass
 */
msg_t palWaitPadTimeoutS(ioportid_t port,
                         iopadid_t pad,
                         sysinterval_t timeout) {
 80022c0:	b508      	push	{r3, lr}
  return chThdEnqueueTimeoutS(tqp, timeout);
 80022c2:	4803      	ldr	r0, [pc, #12]	; (80022d0 <palWaitPadTimeoutS+0x10>)
 80022c4:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80022c8:	f006 fd92 	bl	8008df0 <chThdEnqueueTimeoutS>

  palevent_t *pep = pal_lld_get_pad_event(port, pad);
  return osalThreadEnqueueTimeoutS(&pep->threads, timeout);
}
 80022cc:	bd08      	pop	{r3, pc}
 80022ce:	bf00      	nop
 80022d0:	200046e8 	.word	0x200046e8
 80022d4:	f3af 8000 	nop.w
 80022d8:	f3af 8000 	nop.w
 80022dc:	f3af 8000 	nop.w

080022e0 <palWaitPadTimeout>:
 *
 * @api
 */
msg_t palWaitPadTimeout(ioportid_t port,
                        iopadid_t pad,
                        sysinterval_t timeout) {
 80022e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e2:	4604      	mov	r4, r0
 80022e4:	460d      	mov	r5, r1
 80022e6:	4616      	mov	r6, r2
 80022e8:	461f      	mov	r7, r3
 80022ea:	2320      	movs	r3, #32
 80022ec:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80022f0:	f006 fe96 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80022f4:	f005 fb94 	bl	8007a20 <_dbg_check_lock>
  msg_t msg;

  osalSysLock();
  msg = palWaitPadTimeoutS(port, pad, timeout);
 80022f8:	4632      	mov	r2, r6
 80022fa:	463b      	mov	r3, r7
 80022fc:	4629      	mov	r1, r5
 80022fe:	4620      	mov	r0, r4
 8002300:	f7ff ffde 	bl	80022c0 <palWaitPadTimeoutS>
 8002304:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8002306:	f005 fba3 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800230a:	f006 fe91 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <palWaitPadTimeout+0x54>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d004      	beq.n	8002320 <palWaitPadTimeout+0x40>
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	6893      	ldr	r3, [r2, #8]
 800231c:	4299      	cmp	r1, r3
 800231e:	d304      	bcc.n	800232a <palWaitPadTimeout+0x4a>
 8002320:	2300      	movs	r3, #0
 8002322:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
  return msg;
}
 8002326:	4620      	mov	r0, r4
 8002328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800232a:	4803      	ldr	r0, [pc, #12]	; (8002338 <palWaitPadTimeout+0x58>)
 800232c:	f005 f9e8 	bl	8007700 <chSysHalt>
 8002330:	e7f6      	b.n	8002320 <palWaitPadTimeout+0x40>
 8002332:	bf00      	nop
 8002334:	200050f8 	.word	0x200050f8
 8002338:	08019028 	.word	0x08019028
 800233c:	f3af 8000 	nop.w

08002340 <palWaitLineTimeoutS>:
 *                      waiting for an edge.
 *
 * @sclass
 */
msg_t palWaitLineTimeoutS(ioline_t line,
                          sysinterval_t timeout) {
 8002340:	b508      	push	{r3, lr}

  palevent_t *pep = pal_lld_get_line_event(line);
 8002342:	f000 000f 	and.w	r0, r0, #15
 8002346:	4903      	ldr	r1, [pc, #12]	; (8002354 <palWaitLineTimeoutS+0x14>)
 8002348:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800234c:	f006 fd50 	bl	8008df0 <chThdEnqueueTimeoutS>
  return osalThreadEnqueueTimeoutS(&pep->threads, timeout);
}
 8002350:	bd08      	pop	{r3, pc}
 8002352:	bf00      	nop
 8002354:	200046e8 	.word	0x200046e8
 8002358:	f3af 8000 	nop.w
 800235c:	f3af 8000 	nop.w

08002360 <palWaitLineTimeout>:
 * @retval MSG_RESET    if the event has been disabled while the thread was
 *                      waiting for an edge.
 *
 * @api
 */
msg_t palWaitLineTimeout(ioline_t line, sysinterval_t timeout) {
 8002360:	b5d0      	push	{r4, r6, r7, lr}
 8002362:	4604      	mov	r4, r0
 8002364:	4616      	mov	r6, r2
 8002366:	461f      	mov	r7, r3
 8002368:	2320      	movs	r3, #32
 800236a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800236e:	f006 fe57 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002372:	f005 fb55 	bl	8007a20 <_dbg_check_lock>
  msg_t msg;

  osalSysLock();
  msg= palWaitLineTimeoutS(line, timeout);
 8002376:	4632      	mov	r2, r6
 8002378:	463b      	mov	r3, r7
 800237a:	4620      	mov	r0, r4
 800237c:	f7ff ffe0 	bl	8002340 <palWaitLineTimeoutS>
 8002380:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8002382:	f005 fb65 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002386:	f006 fe53 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <palWaitLineTimeout+0x50>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d004      	beq.n	800239c <palWaitLineTimeout+0x3c>
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	6893      	ldr	r3, [r2, #8]
 8002398:	4299      	cmp	r1, r3
 800239a:	d304      	bcc.n	80023a6 <palWaitLineTimeout+0x46>
 800239c:	2300      	movs	r3, #0
 800239e:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
  return msg;
}
 80023a2:	4620      	mov	r0, r4
 80023a4:	bdd0      	pop	{r4, r6, r7, pc}
 80023a6:	4803      	ldr	r0, [pc, #12]	; (80023b4 <palWaitLineTimeout+0x54>)
 80023a8:	f005 f9aa 	bl	8007700 <chSysHalt>
 80023ac:	e7f6      	b.n	800239c <palWaitLineTimeout+0x3c>
 80023ae:	bf00      	nop
 80023b0:	200050f8 	.word	0x200050f8
 80023b4:	08019028 	.word	0x08019028
	...

080023c0 <rtcInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void rtcInit(void) {
 80023c0:	b508      	push	{r3, lr}

  rtc_lld_init();
 80023c2:	f003 fd95 	bl	8005ef0 <rtc_lld_init>
}
 80023c6:	bd08      	pop	{r3, pc}
 80023c8:	f3af 8000 	nop.w
 80023cc:	f3af 8000 	nop.w

080023d0 <rtcObjectInit>:
 * @init
 */
void rtcObjectInit(RTCDriver *rtcp) {

#if RTC_HAS_STORAGE == TRUE
  rtcp->vmt = &_rtc_lld_vmt;
 80023d0:	4b01      	ldr	r3, [pc, #4]	; (80023d8 <rtcObjectInit+0x8>)
 80023d2:	6003      	str	r3, [r0, #0]
#else
  (void)rtcp;
#endif
}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20001a10 	.word	0x20001a10
 80023dc:	f3af 8000 	nop.w

080023e0 <rtcSetTime>:
 * @param[in] rtcp      pointer to RTC driver structure
 * @param[in] timespec  pointer to a @p RTCDateTime structure
 *
 * @special
 */
void rtcSetTime(RTCDriver *rtcp, const RTCDateTime *timespec) {
 80023e0:	b538      	push	{r3, r4, r5, lr}
 80023e2:	460c      	mov	r4, r1

  osalDbgCheck((rtcp != NULL) && (timespec != NULL));
 80023e4:	4605      	mov	r5, r0
 80023e6:	b128      	cbz	r0, 80023f4 <rtcSetTime+0x14>
 80023e8:	b121      	cbz	r1, 80023f4 <rtcSetTime+0x14>

  rtc_lld_set_time(rtcp, timespec);
 80023ea:	4621      	mov	r1, r4
 80023ec:	4628      	mov	r0, r5
 80023ee:	f003 fdbf 	bl	8005f70 <rtc_lld_set_time>
}
 80023f2:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((rtcp != NULL) && (timespec != NULL));
 80023f4:	4801      	ldr	r0, [pc, #4]	; (80023fc <rtcSetTime+0x1c>)
 80023f6:	f005 f983 	bl	8007700 <chSysHalt>
 80023fa:	e7f6      	b.n	80023ea <rtcSetTime+0xa>
 80023fc:	08019034 	.word	0x08019034

08002400 <rtcGetTime>:
 * @param[in] rtcp      pointer to RTC driver structure
 * @param[out] timespec pointer to a @p RTCDateTime structure
 *
 * @special
 */
void rtcGetTime(RTCDriver *rtcp, RTCDateTime *timespec) {
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	460c      	mov	r4, r1

  osalDbgCheck((rtcp != NULL) && (timespec != NULL));
 8002404:	4605      	mov	r5, r0
 8002406:	b128      	cbz	r0, 8002414 <rtcGetTime+0x14>
 8002408:	b121      	cbz	r1, 8002414 <rtcGetTime+0x14>

  rtc_lld_get_time(rtcp, timespec);
 800240a:	4621      	mov	r1, r4
 800240c:	4628      	mov	r0, r5
 800240e:	f003 fddf 	bl	8005fd0 <rtc_lld_get_time>
}
 8002412:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((rtcp != NULL) && (timespec != NULL));
 8002414:	4801      	ldr	r0, [pc, #4]	; (800241c <rtcGetTime+0x1c>)
 8002416:	f005 f973 	bl	8007700 <chSysHalt>
 800241a:	e7f6      	b.n	800240a <rtcGetTime+0xa>
 800241c:	08019040 	.word	0x08019040

08002420 <rtcSetAlarm>:
 *
 * @special
 */
void rtcSetAlarm(RTCDriver *rtcp,
                 rtcalarm_t alarm,
                 const RTCAlarm *alarmspec) {
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	460c      	mov	r4, r1
 8002424:	4616      	mov	r6, r2

  osalDbgCheck((rtcp != NULL) && (alarm < (rtcalarm_t)RTC_ALARMS));
 8002426:	4605      	mov	r5, r0
 8002428:	b108      	cbz	r0, 800242e <rtcSetAlarm+0xe>
 800242a:	2901      	cmp	r1, #1
 800242c:	d902      	bls.n	8002434 <rtcSetAlarm+0x14>
 800242e:	4804      	ldr	r0, [pc, #16]	; (8002440 <rtcSetAlarm+0x20>)
 8002430:	f005 f966 	bl	8007700 <chSysHalt>

  rtc_lld_set_alarm(rtcp, alarm, alarmspec);
 8002434:	4632      	mov	r2, r6
 8002436:	4621      	mov	r1, r4
 8002438:	4628      	mov	r0, r5
 800243a:	f003 fe01 	bl	8006040 <rtc_lld_set_alarm>
}
 800243e:	bd70      	pop	{r4, r5, r6, pc}
 8002440:	0801904c 	.word	0x0801904c
 8002444:	f3af 8000 	nop.w
 8002448:	f3af 8000 	nop.w
 800244c:	f3af 8000 	nop.w

08002450 <rtcGetAlarm>:
 *
 * @special
 */
void rtcGetAlarm(RTCDriver *rtcp,
                 rtcalarm_t alarm,
                 RTCAlarm *alarmspec) {
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	460c      	mov	r4, r1
 8002454:	4615      	mov	r5, r2

  osalDbgCheck((rtcp != NULL) &&
 8002456:	4606      	mov	r6, r0
 8002458:	b108      	cbz	r0, 800245e <rtcGetAlarm+0xe>
 800245a:	2901      	cmp	r1, #1
 800245c:	d908      	bls.n	8002470 <rtcGetAlarm+0x20>
 800245e:	4806      	ldr	r0, [pc, #24]	; (8002478 <rtcGetAlarm+0x28>)
 8002460:	f005 f94e 	bl	8007700 <chSysHalt>
               (alarm < (rtcalarm_t)RTC_ALARMS) &&
               (alarmspec != NULL));

  rtc_lld_get_alarm(rtcp, alarm, alarmspec);
 8002464:	462a      	mov	r2, r5
 8002466:	4621      	mov	r1, r4
 8002468:	4630      	mov	r0, r6
 800246a:	f003 fe39 	bl	80060e0 <rtc_lld_get_alarm>
}
 800246e:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgCheck((rtcp != NULL) &&
 8002470:	2a00      	cmp	r2, #0
 8002472:	d1f7      	bne.n	8002464 <rtcGetAlarm+0x14>
 8002474:	e7f3      	b.n	800245e <rtcGetAlarm+0xe>
 8002476:	bf00      	nop
 8002478:	08019058 	.word	0x08019058
 800247c:	f3af 8000 	nop.w

08002480 <rtcSetCallback>:
 * @param[in] rtcp      pointer to RTC driver structure
 * @param[in] callback  callback function pointer or @p NULL
 *
 * @special
 */
void rtcSetCallback(RTCDriver *rtcp, rtccb_t callback) {
 8002480:	b538      	push	{r3, r4, r5, lr}
 8002482:	460d      	mov	r5, r1

  osalDbgCheck(rtcp != NULL);
 8002484:	4604      	mov	r4, r0
 8002486:	b120      	cbz	r0, 8002492 <rtcSetCallback+0x12>

  rtc_lld_set_callback(rtcp, callback);
 8002488:	4629      	mov	r1, r5
 800248a:	4620      	mov	r0, r4
 800248c:	f003 fe38 	bl	8006100 <rtc_lld_set_callback>
}
 8002490:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(rtcp != NULL);
 8002492:	4802      	ldr	r0, [pc, #8]	; (800249c <rtcSetCallback+0x1c>)
 8002494:	f005 f934 	bl	8007700 <chSysHalt>
 8002498:	e7f6      	b.n	8002488 <rtcSetCallback+0x8>
 800249a:	bf00      	nop
 800249c:	08019064 	.word	0x08019064

080024a0 <rtcConvertDateTimeToStructTm>:
 *
 * @api
 */
void rtcConvertDateTimeToStructTm(const RTCDateTime *timespec,
                                  struct tm *timp,
                                  uint32_t *tv_msec) {
 80024a0:	b430      	push	{r4, r5}
  int sec;

  timp->tm_year  = (int)timespec->year + (1980 - 1900);
 80024a2:	7803      	ldrb	r3, [r0, #0]
 80024a4:	3350      	adds	r3, #80	; 0x50
 80024a6:	614b      	str	r3, [r1, #20]
  timp->tm_mon   = (int)timespec->month - 1;
 80024a8:	7843      	ldrb	r3, [r0, #1]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3b01      	subs	r3, #1
 80024b0:	610b      	str	r3, [r1, #16]
  timp->tm_mday  = (int)timespec->day;
 80024b2:	7883      	ldrb	r3, [r0, #2]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	60cb      	str	r3, [r1, #12]
  timp->tm_isdst = (int)timespec->dstflag;
 80024ba:	7843      	ldrb	r3, [r0, #1]
 80024bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80024c0:	620b      	str	r3, [r1, #32]
  timp->tm_wday  = (int)timespec->dayofweek - 1;
 80024c2:	7843      	ldrb	r3, [r0, #1]
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	3b01      	subs	r3, #1
 80024c8:	618b      	str	r3, [r1, #24]

  sec = (int)timespec->millisecond / 1000;
 80024ca:	6843      	ldr	r3, [r0, #4]
 80024cc:	f3c3 031a 	ubfx	r3, r3, #0, #27
 80024d0:	4c17      	ldr	r4, [pc, #92]	; (8002530 <rtcConvertDateTimeToStructTm+0x90>)
 80024d2:	fb84 5403 	smull	r5, r4, r4, r3
 80024d6:	11a4      	asrs	r4, r4, #6
  timp->tm_hour = sec / 3600;
 80024d8:	4d16      	ldr	r5, [pc, #88]	; (8002534 <rtcConvertDateTimeToStructTm+0x94>)
 80024da:	fb85 5303 	smull	r5, r3, r5, r3
 80024de:	151b      	asrs	r3, r3, #20
 80024e0:	608b      	str	r3, [r1, #8]
  sec %= 3600;
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <rtcConvertDateTimeToStructTm+0x98>)
 80024e4:	fb83 5304 	smull	r5, r3, r3, r4
 80024e8:	4423      	add	r3, r4
 80024ea:	12db      	asrs	r3, r3, #11
 80024ec:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 80024f0:	fb05 4313 	mls	r3, r5, r3, r4
  timp->tm_min = sec / 60;
 80024f4:	4c11      	ldr	r4, [pc, #68]	; (800253c <rtcConvertDateTimeToStructTm+0x9c>)
 80024f6:	fb84 5403 	smull	r5, r4, r4, r3
 80024fa:	18e5      	adds	r5, r4, r3
 80024fc:	17dc      	asrs	r4, r3, #31
 80024fe:	ebc4 1465 	rsb	r4, r4, r5, asr #5
 8002502:	604c      	str	r4, [r1, #4]
  timp->tm_sec = sec % 60;
 8002504:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8002508:	00a5      	lsls	r5, r4, #2
 800250a:	1b5d      	subs	r5, r3, r5
 800250c:	600d      	str	r5, [r1, #0]

  if (NULL != tv_msec) {
 800250e:	b162      	cbz	r2, 800252a <rtcConvertDateTimeToStructTm+0x8a>
 8002510:	4611      	mov	r1, r2
    *tv_msec = (uint32_t)timespec->millisecond % 1000U;
 8002512:	6842      	ldr	r2, [r0, #4]
 8002514:	f3c2 021a 	ubfx	r2, r2, #0, #27
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <rtcConvertDateTimeToStructTm+0x90>)
 800251a:	fba3 0302 	umull	r0, r3, r3, r2
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002524:	fb00 2313 	mls	r3, r0, r3, r2
 8002528:	600b      	str	r3, [r1, #0]
  }
}
 800252a:	bc30      	pop	{r4, r5}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	10624dd3 	.word	0x10624dd3
 8002534:	4a90be59 	.word	0x4a90be59
 8002538:	91a2b3c5 	.word	0x91a2b3c5
 800253c:	88888889 	.word	0x88888889

08002540 <rtcConvertStructTmToDateTime>:
 *
 * @api
 */
void rtcConvertStructTmToDateTime(const struct tm *timp,
                                  uint32_t tv_msec,
                                  RTCDateTime *timespec) {
 8002540:	b430      	push	{r4, r5}

  /*lint -save -e9034 [10.4] Verified assignments to bit fields.*/
  timespec->year      = (uint32_t)timp->tm_year - (1980U - 1900U);
 8002542:	6944      	ldr	r4, [r0, #20]
 8002544:	3c50      	subs	r4, #80	; 0x50
 8002546:	7014      	strb	r4, [r2, #0]
  timespec->month     = (uint32_t)timp->tm_mon + 1U;
 8002548:	6904      	ldr	r4, [r0, #16]
 800254a:	3401      	adds	r4, #1
 800254c:	7853      	ldrb	r3, [r2, #1]
 800254e:	f364 0303 	bfi	r3, r4, #0, #4
 8002552:	7053      	strb	r3, [r2, #1]
  timespec->day       = (uint32_t)timp->tm_mday;
 8002554:	68c4      	ldr	r4, [r0, #12]
 8002556:	7893      	ldrb	r3, [r2, #2]
 8002558:	f364 0304 	bfi	r3, r4, #0, #5
 800255c:	7093      	strb	r3, [r2, #2]
  timespec->dayofweek = (uint32_t)timp->tm_wday + 1U;
 800255e:	6984      	ldr	r4, [r0, #24]
 8002560:	3401      	adds	r4, #1
 8002562:	7853      	ldrb	r3, [r2, #1]
 8002564:	f364 1347 	bfi	r3, r4, #5, #3
 8002568:	7053      	strb	r3, [r2, #1]
  if (-1 == timp->tm_isdst) {
 800256a:	6a03      	ldr	r3, [r0, #32]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d018      	beq.n	80025a4 <rtcConvertStructTmToDateTime+0x64>
    timespec->dstflag = 0U;  /* set zero if dst is unknown */
  }
  else {
    timespec->dstflag = (uint32_t)timp->tm_isdst;
 8002572:	7854      	ldrb	r4, [r2, #1]
 8002574:	f363 1404 	bfi	r4, r3, #4, #1
 8002578:	7054      	strb	r4, [r2, #1]
  }
  /*lint -restore*/
  /*lint -save -e9033 [10.8] Verified assignments to bit fields.*/
  timespec->millisecond = tv_msec + (uint32_t)(((timp->tm_hour * 3600) +
 800257a:	6883      	ldr	r3, [r0, #8]
                                                (timp->tm_min * 60) +
 800257c:	6844      	ldr	r4, [r0, #4]
 800257e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8002582:	00a5      	lsls	r5, r4, #2
  timespec->millisecond = tv_msec + (uint32_t)(((timp->tm_hour * 3600) +
 8002584:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8002588:	fb04 5303 	mla	r3, r4, r3, r5
                                                 timp->tm_sec) * 1000);
 800258c:	6800      	ldr	r0, [r0, #0]
                                                (timp->tm_min * 60) +
 800258e:	4403      	add	r3, r0
  timespec->millisecond = tv_msec + (uint32_t)(((timp->tm_hour * 3600) +
 8002590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002594:	fb00 1103 	mla	r1, r0, r3, r1
 8002598:	6853      	ldr	r3, [r2, #4]
 800259a:	f361 031a 	bfi	r3, r1, #0, #27
 800259e:	6053      	str	r3, [r2, #4]
  /*lint -restore*/
}
 80025a0:	bc30      	pop	{r4, r5}
 80025a2:	4770      	bx	lr
    timespec->dstflag = 0U;  /* set zero if dst is unknown */
 80025a4:	7853      	ldrb	r3, [r2, #1]
 80025a6:	f36f 1304 	bfc	r3, #4, #1
 80025aa:	7053      	strb	r3, [r2, #1]
 80025ac:	e7e5      	b.n	800257a <rtcConvertStructTmToDateTime+0x3a>
 80025ae:	bf00      	nop

080025b0 <rtcConvertDateTimeToFAT>:
 * @param[out] timespec pointer to a @p RTCDateTime structure
 * @return              FAT date/time value.
 *
 * @api
 */
uint32_t rtcConvertDateTimeToFAT(const RTCDateTime *timespec) {
 80025b0:	b470      	push	{r4, r5, r6}
  uint32_t fattime;
  uint32_t sec, min, hour, day, month;

  sec   = timespec->millisecond / 1000U;
 80025b2:	6842      	ldr	r2, [r0, #4]
 80025b4:	f3c2 021a 	ubfx	r2, r2, #0, #27
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <rtcConvertDateTimeToFAT+0x80>)
 80025ba:	fba3 3202 	umull	r3, r2, r3, r2
 80025be:	0992      	lsrs	r2, r2, #6
  hour  = sec / 3600U;
 80025c0:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <rtcConvertDateTimeToFAT+0x84>)
 80025c2:	fba3 1302 	umull	r1, r3, r3, r2
 80025c6:	0adc      	lsrs	r4, r3, #11
  sec  %= 3600U;
 80025c8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80025cc:	fb01 2114 	mls	r1, r1, r4, r2
  min   = sec / 60U;
 80025d0:	4b19      	ldr	r3, [pc, #100]	; (8002638 <rtcConvertDateTimeToFAT+0x88>)
 80025d2:	fba3 2301 	umull	r2, r3, r3, r1
 80025d6:	095b      	lsrs	r3, r3, #5
  sec  %= 60U;
 80025d8:	ebc3 1503 	rsb	r5, r3, r3, lsl #4
 80025dc:	00aa      	lsls	r2, r5, #2
 80025de:	1a8a      	subs	r2, r1, r2
  day   = timespec->day;
 80025e0:	7881      	ldrb	r1, [r0, #2]
 80025e2:	f001 011f 	and.w	r1, r1, #31
  month = timespec->month;
 80025e6:	7845      	ldrb	r5, [r0, #1]
 80025e8:	f005 060f 	and.w	r6, r5, #15

  /* handle DST flag */
  if (1U == timespec->dstflag) {
 80025ec:	f015 0f10 	tst.w	r5, #16
 80025f0:	d002      	beq.n	80025f8 <rtcConvertDateTimeToFAT+0x48>
    hour += 1U;
 80025f2:	3401      	adds	r4, #1
    if (hour == 24U) {
 80025f4:	2c18      	cmp	r4, #24
 80025f6:	d00d      	beq.n	8002614 <rtcConvertDateTimeToFAT+0x64>
      }
    }
  }

  fattime  = sec   >> 1U;
  fattime |= min   << 5U;
 80025f8:	015b      	lsls	r3, r3, #5
 80025fa:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
  fattime |= hour  << 11U;
 80025fe:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
  fattime |= day   << 16U;
 8002602:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  fattime |= month << 21U;
 8002606:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
  fattime |= (uint32_t)timespec->year << 25U;
 800260a:	7800      	ldrb	r0, [r0, #0]

  return fattime;
}
 800260c:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
 8002610:	bc70      	pop	{r4, r5, r6}
 8002612:	4770      	bx	lr
      day += 1U;
 8002614:	3101      	adds	r1, #1
      if (day > month_len[month - 1U]) {
 8002616:	1e75      	subs	r5, r6, #1
 8002618:	4c08      	ldr	r4, [pc, #32]	; (800263c <rtcConvertDateTimeToFAT+0x8c>)
 800261a:	442c      	add	r4, r5
 800261c:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
 8002620:	428c      	cmp	r4, r1
 8002622:	d203      	bcs.n	800262c <rtcConvertDateTimeToFAT+0x7c>
        month += 1U;
 8002624:	3601      	adds	r6, #1
        day = 1U;
 8002626:	2101      	movs	r1, #1
      hour = 0U;
 8002628:	2400      	movs	r4, #0
 800262a:	e7e5      	b.n	80025f8 <rtcConvertDateTimeToFAT+0x48>
 800262c:	2400      	movs	r4, #0
 800262e:	e7e3      	b.n	80025f8 <rtcConvertDateTimeToFAT+0x48>
 8002630:	10624dd3 	.word	0x10624dd3
 8002634:	91a2b3c5 	.word	0x91a2b3c5
 8002638:	88888889 	.word	0x88888889
 800263c:	08019034 	.word	0x08019034

08002640 <sdc_cmd6_extract_info>:
 * @notapi
 */
static uint16_t sdc_cmd6_extract_info(sd_switch_function_t function,
                                      const uint8_t *buf) {

  unsigned start = 12U - ((unsigned)function * 2U);
 8002640:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
 8002644:	0043      	lsls	r3, r0, #1
 8002646:	f103 020c 	add.w	r2, r3, #12

  return ((uint16_t)buf[start] << 8U) | (uint16_t)buf[start + 1U];
 800264a:	5c88      	ldrb	r0, [r1, r2]
 800264c:	4419      	add	r1, r3
 800264e:	7b4b      	ldrb	r3, [r1, #13]
}
 8002650:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	f3af 8000 	nop.w
 800265c:	f3af 8000 	nop.w

08002660 <sdc_cmd6_check_status>:
                                 const uint8_t *buf) {

  uint32_t tmp;
  uint32_t status;

  tmp = ((uint32_t)buf[14] << 16U) |
 8002660:	7b8a      	ldrb	r2, [r1, #14]
        ((uint32_t)buf[15] << 8U) |
 8002662:	7bcb      	ldrb	r3, [r1, #15]
 8002664:	021b      	lsls	r3, r3, #8
  tmp = ((uint32_t)buf[14] << 16U) |
 8002666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        (uint32_t)buf[16];
 800266a:	7c0a      	ldrb	r2, [r1, #16]
  tmp = ((uint32_t)buf[14] << 16U) |
 800266c:	4313      	orrs	r3, r2
  status = (tmp >> ((uint32_t)function * 4U)) & 0xFU;
 800266e:	0080      	lsls	r0, r0, #2
 8002670:	40c3      	lsrs	r3, r0
 8002672:	f003 030f 	and.w	r3, r3, #15
  if (0xFU != status) {
 8002676:	2b0f      	cmp	r3, #15
 8002678:	d001      	beq.n	800267e <sdc_cmd6_check_status+0x1e>
    return HAL_SUCCESS;
 800267a:	2000      	movs	r0, #0
 800267c:	4770      	bx	lr
  }
  return HAL_FAILED;
 800267e:	2001      	movs	r0, #1
}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	f3af 8000 	nop.w
 8002688:	f3af 8000 	nop.w
 800268c:	f3af 8000 	nop.w

08002690 <mmc_cmd6_construct>:
                                   uint32_t value, uint32_t cmd_set) {
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	4607      	mov	r7, r0
 8002694:	460c      	mov	r4, r1
 8002696:	4616      	mov	r6, r2
 8002698:	461d      	mov	r5, r3
  osalDbgAssert(idx <= 191U, "This field is not writable");
 800269a:	29bf      	cmp	r1, #191	; 0xbf
 800269c:	d808      	bhi.n	80026b0 <mmc_cmd6_construct+0x20>
  osalDbgAssert(cmd_set < 8U, "This field has only 3 bits");
 800269e:	2d07      	cmp	r5, #7
 80026a0:	d80a      	bhi.n	80026b8 <mmc_cmd6_construct+0x28>
  return ((uint32_t)access << 24U) | (idx << 16U) | (value << 8U) | cmd_set;
 80026a2:	0420      	lsls	r0, r4, #16
 80026a4:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
 80026a8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
}
 80026ac:	4328      	orrs	r0, r5
 80026ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgAssert(idx <= 191U, "This field is not writable");
 80026b0:	4803      	ldr	r0, [pc, #12]	; (80026c0 <mmc_cmd6_construct+0x30>)
 80026b2:	f005 f825 	bl	8007700 <chSysHalt>
 80026b6:	e7f2      	b.n	800269e <mmc_cmd6_construct+0xe>
  osalDbgAssert(cmd_set < 8U, "This field has only 3 bits");
 80026b8:	4801      	ldr	r0, [pc, #4]	; (80026c0 <mmc_cmd6_construct+0x30>)
 80026ba:	f005 f821 	bl	8007700 <chSysHalt>
 80026be:	e7f0      	b.n	80026a2 <mmc_cmd6_construct+0x12>
 80026c0:	08019080 	.word	0x08019080
 80026c4:	f3af 8000 	nop.w
 80026c8:	f3af 8000 	nop.w
 80026cc:	f3af 8000 	nop.w

080026d0 <mmc_detect_bus_clk>:
 * @notapi
 */
static bool mmc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
  uint32_t cmdarg;
  uint32_t resp[1];
  uint8_t *scratchpad = sdcp->config->scratchpad;
 80026d0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80026d2:	681b      	ldr	r3, [r3, #0]

  /* Safe default.*/
  *clk = SDC_CLK_25MHz;
 80026d4:	2200      	movs	r2, #0
 80026d6:	700a      	strb	r2, [r1, #0]

  /* Use safe default when there is no space for data.*/
  if (NULL == scratchpad) {
 80026d8:	b1cb      	cbz	r3, 800270e <mmc_detect_bus_clk+0x3e>
static bool mmc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 80026da:	b530      	push	{r4, r5, lr}
 80026dc:	b083      	sub	sp, #12
 80026de:	460d      	mov	r5, r1
 80026e0:	4604      	mov	r4, r0
    return HAL_SUCCESS;
  }

  cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 185, 1, 0);
 80026e2:	4613      	mov	r3, r2
 80026e4:	2201      	movs	r2, #1
 80026e6:	21b9      	movs	r1, #185	; 0xb9
 80026e8:	2003      	movs	r0, #3
 80026ea:	f7ff ffd1 	bl	8002690 <mmc_cmd6_construct>
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 80026ee:	ab01      	add	r3, sp, #4
 80026f0:	4602      	mov	r2, r0
 80026f2:	2106      	movs	r1, #6
 80026f4:	4620      	mov	r0, r4
 80026f6:	f004 f993 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 80026fa:	b928      	cbnz	r0, 8002708 <mmc_detect_bus_clk+0x38>
                                   MMCSD_R1_ERROR(resp[0]))) {
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <mmc_detect_bus_clk+0x44>)
 80026fe:	9a01      	ldr	r2, [sp, #4]
 8002700:	4013      	ands	r3, r2
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8002702:	b90b      	cbnz	r3, 8002708 <mmc_detect_bus_clk+0x38>
    *clk = SDC_CLK_50MHz;
 8002704:	2301      	movs	r3, #1
 8002706:	702b      	strb	r3, [r5, #0]
  }

  return HAL_SUCCESS;
}
 8002708:	2000      	movs	r0, #0
 800270a:	b003      	add	sp, #12
 800270c:	bd30      	pop	{r4, r5, pc}
 800270e:	2000      	movs	r0, #0
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	fdffe008 	.word	0xfdffe008
 8002718:	f3af 8000 	nop.w
 800271c:	f3af 8000 	nop.w

08002720 <sdc_cmd6_construct>:
                                   uint32_t value) {
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	4605      	mov	r5, r0
 8002724:	460e      	mov	r6, r1
 8002726:	4614      	mov	r4, r2
  osalDbgAssert((value < 16U), "This field has only 4 bits");
 8002728:	2a0f      	cmp	r2, #15
 800272a:	d80a      	bhi.n	8002742 <sdc_cmd6_construct+0x22>
  ret &= ~((uint32_t)0xFU << ((uint32_t)function * 4U));
 800272c:	00b1      	lsls	r1, r6, #2
 800272e:	200f      	movs	r0, #15
 8002730:	4088      	lsls	r0, r1
 8002732:	43c0      	mvns	r0, r0
 8002734:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  ret |= value << ((uint32_t)function * 4U);
 8002738:	408c      	lsls	r4, r1
 800273a:	4320      	orrs	r0, r4
}
 800273c:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
 8002740:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert((value < 16U), "This field has only 4 bits");
 8002742:	4802      	ldr	r0, [pc, #8]	; (800274c <sdc_cmd6_construct+0x2c>)
 8002744:	f004 ffdc 	bl	8007700 <chSysHalt>
 8002748:	e7f0      	b.n	800272c <sdc_cmd6_construct+0xc>
 800274a:	bf00      	nop
 800274c:	08019094 	.word	0x08019094

08002750 <sdcGetInfo>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdcGetInfo(SDCDriver *sdcp, BlockDeviceInfo *bdip) {
 8002750:	b538      	push	{r3, r4, r5, lr}
 8002752:	460c      	mov	r4, r1

  osalDbgCheck((sdcp != NULL) && (bdip != NULL));
 8002754:	4605      	mov	r5, r0
 8002756:	b128      	cbz	r0, 8002764 <sdcGetInfo+0x14>
 8002758:	b121      	cbz	r1, 8002764 <sdcGetInfo+0x14>

  if (sdcp->state != BLK_READY) {
 800275a:	792b      	ldrb	r3, [r5, #4]
 800275c:	2b05      	cmp	r3, #5
 800275e:	d005      	beq.n	800276c <sdcGetInfo+0x1c>
    return HAL_FAILED;
 8002760:	2001      	movs	r0, #1

  bdip->blk_num = sdcp->capacity;
  bdip->blk_size = MMCSD_BLOCK_SIZE;

  return HAL_SUCCESS;
}
 8002762:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((sdcp != NULL) && (bdip != NULL));
 8002764:	4805      	ldr	r0, [pc, #20]	; (800277c <sdcGetInfo+0x2c>)
 8002766:	f004 ffcb 	bl	8007700 <chSysHalt>
 800276a:	e7f6      	b.n	800275a <sdcGetInfo+0xa>
  bdip->blk_num = sdcp->capacity;
 800276c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800276e:	6063      	str	r3, [r4, #4]
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 8002770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002774:	6023      	str	r3, [r4, #0]
  return HAL_SUCCESS;
 8002776:	2000      	movs	r0, #0
 8002778:	e7f3      	b.n	8002762 <sdcGetInfo+0x12>
 800277a:	bf00      	nop
 800277c:	080190a8 	.word	0x080190a8

08002780 <mode_detect>:
static bool mode_detect(SDCDriver *sdcp) {
 8002780:	b530      	push	{r4, r5, lr}
 8002782:	b083      	sub	sp, #12
 8002784:	4604      	mov	r4, r0
  if (!sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_IF_COND,
 8002786:	ab01      	add	r3, sp, #4
 8002788:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800278c:	2108      	movs	r1, #8
 800278e:	f004 f947 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8002792:	b9d0      	cbnz	r0, 80027ca <mode_detect+0x4a>
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
 8002794:	2301      	movs	r3, #1
 8002796:	6323      	str	r3, [r4, #48]	; 0x30
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
 8002798:	9b01      	ldr	r3, [sp, #4]
 800279a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d003      	beq.n	80027aa <mode_detect+0x2a>
      return HAL_FAILED;
 80027a2:	2501      	movs	r5, #1
}
 80027a4:	4628      	mov	r0, r5
 80027a6:	b003      	add	sp, #12
 80027a8:	bd30      	pop	{r4, r5, pc}
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80027aa:	ab01      	add	r3, sp, #4
 80027ac:	2200      	movs	r2, #0
 80027ae:	2137      	movs	r1, #55	; 0x37
 80027b0:	4620      	mov	r0, r4
 80027b2:	f004 f935 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 80027b6:	4605      	mov	r5, r0
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d1f3      	bne.n	80027a4 <mode_detect+0x24>
        MMCSD_R1_ERROR(resp[0])) {
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <mode_detect+0x78>)
 80027be:	9a01      	ldr	r2, [sp, #4]
 80027c0:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0ee      	beq.n	80027a4 <mode_detect+0x24>
      return HAL_FAILED;
 80027c6:	2501      	movs	r5, #1
 80027c8:	e7ec      	b.n	80027a4 <mode_detect+0x24>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80027ca:	ab01      	add	r3, sp, #4
 80027cc:	2200      	movs	r2, #0
 80027ce:	2137      	movs	r1, #55	; 0x37
 80027d0:	4620      	mov	r0, r4
 80027d2:	f004 f925 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 80027d6:	4605      	mov	r5, r0
 80027d8:	b918      	cbnz	r0, 80027e2 <mode_detect+0x62>
        MMCSD_R1_ERROR(resp[0])) {
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <mode_detect+0x78>)
 80027dc:	9a01      	ldr	r2, [sp, #4]
 80027de:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80027e0:	b11b      	cbz	r3, 80027ea <mode_detect+0x6a>
      sdcp->cardmode = SDC_MODE_CARDTYPE_MMC;
 80027e2:	2302      	movs	r3, #2
 80027e4:	6323      	str	r3, [r4, #48]	; 0x30
  return HAL_SUCCESS;
 80027e6:	2500      	movs	r5, #0
      sdcp->cardmode = SDC_MODE_CARDTYPE_MMC;
 80027e8:	e7dc      	b.n	80027a4 <mode_detect+0x24>
      sdcp->cardmode = SDC_MODE_CARDTYPE_SDV11;
 80027ea:	2100      	movs	r1, #0
 80027ec:	6321      	str	r1, [r4, #48]	; 0x30
      sdc_lld_send_cmd_none(sdcp, MMCSD_CMD_GO_IDLE_STATE, 0);
 80027ee:	460a      	mov	r2, r1
 80027f0:	4620      	mov	r0, r4
 80027f2:	f004 f8e5 	bl	80069c0 <sdc_lld_send_cmd_none>
 80027f6:	e7d5      	b.n	80027a4 <mode_detect+0x24>
 80027f8:	fdffe008 	.word	0xfdffe008
 80027fc:	f3af 8000 	nop.w

08002800 <mmc_init>:
static bool mmc_init(SDCDriver *sdcp) {
 8002800:	b530      	push	{r4, r5, lr}
 8002802:	b083      	sub	sp, #12
 8002804:	4605      	mov	r5, r0
  i = 0;
 8002806:	2400      	movs	r4, #0
    if (sdc_lld_send_cmd_short(sdcp, MMCSD_CMD_INIT, ocr, resp)) {
 8002808:	ab01      	add	r3, sp, #4
 800280a:	4a0f      	ldr	r2, [pc, #60]	; (8002848 <mmc_init+0x48>)
 800280c:	2101      	movs	r1, #1
 800280e:	4628      	mov	r0, r5
 8002810:	f004 f8e6 	bl	80069e0 <sdc_lld_send_cmd_short>
 8002814:	4602      	mov	r2, r0
 8002816:	b990      	cbnz	r0, 800283e <mmc_init+0x3e>
    if ((resp[0] & 0x80000000U) != 0U) {
 8002818:	9b01      	ldr	r3, [sp, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	db08      	blt.n	8002830 <mmc_init+0x30>
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 800281e:	3401      	adds	r4, #1
 8002820:	2c63      	cmp	r4, #99	; 0x63
 8002822:	d80f      	bhi.n	8002844 <mmc_init+0x44>
  chThdSleep(delay);
 8002824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002828:	2100      	movs	r1, #0
 800282a:	f006 f971 	bl	8008b10 <chThdSleep>
 800282e:	e7eb      	b.n	8002808 <mmc_init+0x8>
      if ((resp[0] & 0x40000000U) != 0U) {
 8002830:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8002834:	d003      	beq.n	800283e <mmc_init+0x3e>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 8002836:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002838:	f043 0310 	orr.w	r3, r3, #16
 800283c:	632b      	str	r3, [r5, #48]	; 0x30
}
 800283e:	4610      	mov	r0, r2
 8002840:	b003      	add	sp, #12
 8002842:	bd30      	pop	{r4, r5, pc}
      return HAL_FAILED;
 8002844:	2201      	movs	r2, #1
 8002846:	e7fa      	b.n	800283e <mmc_init+0x3e>
 8002848:	c0ff8000 	.word	0xc0ff8000
 800284c:	f3af 8000 	nop.w

08002850 <sdc_init>:
static bool sdc_init(SDCDriver *sdcp) {
 8002850:	b570      	push	{r4, r5, r6, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	4605      	mov	r5, r0
  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_SDV20) {
 8002856:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	2b01      	cmp	r3, #1
 800285e:	d021      	beq.n	80028a4 <sdc_init+0x54>
    ocr = SDC_INIT_OCR;
 8002860:	4e18      	ldr	r6, [pc, #96]	; (80028c4 <sdc_init+0x74>)
  i = 0;
 8002862:	2400      	movs	r4, #0
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002864:	ab01      	add	r3, sp, #4
 8002866:	2200      	movs	r2, #0
 8002868:	2137      	movs	r1, #55	; 0x37
 800286a:	4628      	mov	r0, r5
 800286c:	f004 f8d8 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8002870:	4603      	mov	r3, r0
 8002872:	bb10      	cbnz	r0, 80028ba <sdc_init+0x6a>
        MMCSD_R1_ERROR(resp[0])) {
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <sdc_init+0x78>)
 8002876:	9a01      	ldr	r2, [sp, #4]
 8002878:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 800287a:	b9eb      	cbnz	r3, 80028b8 <sdc_init+0x68>
    if (sdc_lld_send_cmd_short(sdcp, MMCSD_CMD_APP_OP_COND, ocr, resp)) {
 800287c:	ab01      	add	r3, sp, #4
 800287e:	4632      	mov	r2, r6
 8002880:	2129      	movs	r1, #41	; 0x29
 8002882:	4628      	mov	r0, r5
 8002884:	f004 f8ac 	bl	80069e0 <sdc_lld_send_cmd_short>
 8002888:	4603      	mov	r3, r0
 800288a:	b9b0      	cbnz	r0, 80028ba <sdc_init+0x6a>
    if ((resp[0] & 0x80000000U) != 0U) {
 800288c:	9a01      	ldr	r2, [sp, #4]
 800288e:	2a00      	cmp	r2, #0
 8002890:	db0a      	blt.n	80028a8 <sdc_init+0x58>
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 8002892:	3401      	adds	r4, #1
 8002894:	2c63      	cmp	r4, #99	; 0x63
 8002896:	d813      	bhi.n	80028c0 <sdc_init+0x70>
 8002898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800289c:	2100      	movs	r1, #0
 800289e:	f006 f937 	bl	8008b10 <chThdSleep>
 80028a2:	e7df      	b.n	8002864 <sdc_init+0x14>
    ocr = SDC_INIT_OCR_V20;
 80028a4:	4e09      	ldr	r6, [pc, #36]	; (80028cc <sdc_init+0x7c>)
 80028a6:	e7dc      	b.n	8002862 <sdc_init+0x12>
      if ((resp[0] & 0x40000000U) != 0U) {
 80028a8:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
 80028ac:	d005      	beq.n	80028ba <sdc_init+0x6a>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 80028ae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80028b0:	f042 0210 	orr.w	r2, r2, #16
 80028b4:	632a      	str	r2, [r5, #48]	; 0x30
 80028b6:	e000      	b.n	80028ba <sdc_init+0x6a>
      return HAL_FAILED;
 80028b8:	2301      	movs	r3, #1
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	b002      	add	sp, #8
 80028be:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_FAILED;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e7fa      	b.n	80028ba <sdc_init+0x6a>
 80028c4:	80100000 	.word	0x80100000
 80028c8:	fdffe008 	.word	0xfdffe008
 80028cc:	50ff8000 	.word	0x50ff8000

080028d0 <sdc_detect_bus_clk>:
static bool sdc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 80028d0:	b570      	push	{r4, r5, r6, lr}
 80028d2:	b092      	sub	sp, #72	; 0x48
 80028d4:	4606      	mov	r6, r0
 80028d6:	460d      	mov	r5, r1
  *clk = SDC_CLK_25MHz;
 80028d8:	2300      	movs	r3, #0
 80028da:	700b      	strb	r3, [r1, #0]
  if (0U == _mmcsd_get_slice(sdcp->csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 80028dc:	227e      	movs	r2, #126	; 0x7e
 80028de:	217f      	movs	r1, #127	; 0x7f
 80028e0:	3018      	adds	r0, #24
 80028e2:	f7fe fdf5 	bl	80014d0 <_mmcsd_get_slice>
 80028e6:	b920      	cbnz	r0, 80028f2 <sdc_detect_bus_clk+0x22>
    *clk = SDC_CLK_25MHz;
 80028e8:	2400      	movs	r4, #0
 80028ea:	702c      	strb	r4, [r5, #0]
}
 80028ec:	4620      	mov	r0, r4
 80028ee:	b012      	add	sp, #72	; 0x48
 80028f0:	bd70      	pop	{r4, r5, r6, pc}
  if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, 0)) {
 80028f2:	2300      	movs	r3, #0
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2306      	movs	r3, #6
 80028f8:	2240      	movs	r2, #64	; 0x40
 80028fa:	a902      	add	r1, sp, #8
 80028fc:	4630      	mov	r0, r6
 80028fe:	f004 f9cf 	bl	8006ca0 <sdc_lld_read_special>
 8002902:	4604      	mov	r4, r0
 8002904:	2800      	cmp	r0, #0
 8002906:	d1f1      	bne.n	80028ec <sdc_detect_bus_clk+0x1c>
  if ((sdc_cmd6_extract_info(SD_SWITCH_FUNCTION_SPEED, tmp) & 2U) == 2U) {
 8002908:	a902      	add	r1, sp, #8
 800290a:	f7ff fe99 	bl	8002640 <sdc_cmd6_extract_info>
 800290e:	f010 0f02 	tst.w	r0, #2
 8002912:	d0eb      	beq.n	80028ec <sdc_detect_bus_clk+0x1c>
    cmdarg = sdc_cmd6_construct(SD_SWITCH_SET, SD_SWITCH_FUNCTION_SPEED, 1);
 8002914:	2201      	movs	r2, #1
 8002916:	2100      	movs	r1, #0
 8002918:	4610      	mov	r0, r2
 800291a:	f7ff ff01 	bl	8002720 <sdc_cmd6_construct>
    if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, cmdarg)) {
 800291e:	9000      	str	r0, [sp, #0]
 8002920:	2306      	movs	r3, #6
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	a902      	add	r1, sp, #8
 8002926:	4630      	mov	r0, r6
 8002928:	f004 f9ba 	bl	8006ca0 <sdc_lld_read_special>
 800292c:	4604      	mov	r4, r0
 800292e:	2800      	cmp	r0, #0
 8002930:	d1dc      	bne.n	80028ec <sdc_detect_bus_clk+0x1c>
    if (HAL_SUCCESS == sdc_cmd6_check_status(SD_SWITCH_FUNCTION_SPEED, tmp)) {
 8002932:	a902      	add	r1, sp, #8
 8002934:	f7ff fe94 	bl	8002660 <sdc_cmd6_check_status>
 8002938:	b110      	cbz	r0, 8002940 <sdc_detect_bus_clk+0x70>
      *clk = SDC_CLK_25MHz;
 800293a:	2300      	movs	r3, #0
 800293c:	702b      	strb	r3, [r5, #0]
 800293e:	e7d5      	b.n	80028ec <sdc_detect_bus_clk+0x1c>
      *clk = SDC_CLK_50MHz;
 8002940:	2201      	movs	r2, #1
 8002942:	702a      	strb	r2, [r5, #0]
  return HAL_SUCCESS;
 8002944:	4604      	mov	r4, r0
 8002946:	e7d1      	b.n	80028ec <sdc_detect_bus_clk+0x1c>
 8002948:	f3af 8000 	nop.w
 800294c:	f3af 8000 	nop.w

08002950 <detect_bus_clk>:
static bool detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 8002950:	b508      	push	{r3, lr}
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8002952:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	2b02      	cmp	r3, #2
 800295a:	d002      	beq.n	8002962 <detect_bus_clk+0x12>
  return sdc_detect_bus_clk(sdcp, clk);
 800295c:	f7ff ffb8 	bl	80028d0 <sdc_detect_bus_clk>
}
 8002960:	bd08      	pop	{r3, pc}
    return mmc_detect_bus_clk(sdcp, clk);
 8002962:	f7ff feb5 	bl	80026d0 <mmc_detect_bus_clk>
 8002966:	e7fb      	b.n	8002960 <detect_bus_clk+0x10>

08002968 <sdc_set_bus_width>:
  if (SDC_MODE_1BIT == sdcp->config->bus_width) {
 8002968:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800296a:	791b      	ldrb	r3, [r3, #4]
 800296c:	b31b      	cbz	r3, 80029b6 <sdc_set_bus_width+0x4e>
  else if (SDC_MODE_4BIT == sdcp->config->bus_width) {
 800296e:	2b01      	cmp	r3, #1
 8002970:	d124      	bne.n	80029bc <sdc_set_bus_width+0x54>
static bool sdc_set_bus_width(SDCDriver *sdcp) {
 8002972:	b510      	push	{r4, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	4604      	mov	r4, r0
    sdc_lld_set_bus_mode(sdcp, SDC_MODE_4BIT);
 8002978:	2101      	movs	r1, #1
 800297a:	f004 f809 	bl	8006990 <sdc_lld_set_bus_mode>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 800297e:	ab01      	add	r3, sp, #4
 8002980:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002982:	2137      	movs	r1, #55	; 0x37
 8002984:	4620      	mov	r0, r4
 8002986:	f004 f84b 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 800298a:	4603      	mov	r3, r0
 800298c:	b980      	cbnz	r0, 80029b0 <sdc_set_bus_width+0x48>
        MMCSD_R1_ERROR(resp[0])) {
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <sdc_set_bus_width+0x5c>)
 8002990:	9a01      	ldr	r2, [sp, #4]
 8002992:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 8002994:	b9a3      	cbnz	r3, 80029c0 <sdc_set_bus_width+0x58>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 8002996:	ab01      	add	r3, sp, #4
 8002998:	2202      	movs	r2, #2
 800299a:	2106      	movs	r1, #6
 800299c:	4620      	mov	r0, r4
 800299e:	f004 f83f 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 80029a2:	4603      	mov	r3, r0
 80029a4:	b920      	cbnz	r0, 80029b0 <sdc_set_bus_width+0x48>
        MMCSD_R1_ERROR(resp[0])) {
 80029a6:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <sdc_set_bus_width+0x5c>)
 80029a8:	9901      	ldr	r1, [sp, #4]
 80029aa:	400a      	ands	r2, r1
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 80029ac:	b102      	cbz	r2, 80029b0 <sdc_set_bus_width+0x48>
      return HAL_FAILED;
 80029ae:	2301      	movs	r3, #1
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	b002      	add	sp, #8
 80029b4:	bd10      	pop	{r4, pc}
    return HAL_SUCCESS;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	4770      	bx	lr
    return HAL_FAILED;
 80029bc:	2301      	movs	r3, #1
 80029be:	e7fb      	b.n	80029b8 <sdc_set_bus_width+0x50>
      return HAL_FAILED;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e7f5      	b.n	80029b0 <sdc_set_bus_width+0x48>
 80029c4:	fdffe008 	.word	0xfdffe008

080029c8 <mmc_set_bus_width>:
static bool mmc_set_bus_width(SDCDriver *sdcp) {
 80029c8:	b530      	push	{r4, r5, lr}
 80029ca:	b083      	sub	sp, #12
 80029cc:	4604      	mov	r4, r0
  uint32_t cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 0, 0);
 80029ce:	2300      	movs	r3, #0
 80029d0:	461a      	mov	r2, r3
 80029d2:	21b7      	movs	r1, #183	; 0xb7
 80029d4:	2003      	movs	r0, #3
 80029d6:	f7ff fe5b 	bl	8002690 <mmc_cmd6_construct>
  switch (sdcp->config->bus_width) {
 80029da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029dc:	791b      	ldrb	r3, [r3, #4]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d007      	beq.n	80029f2 <mmc_set_bus_width+0x2a>
 80029e2:	4605      	mov	r5, r0
 80029e4:	b34b      	cbz	r3, 8002a3a <mmc_set_bus_width+0x72>
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d01f      	beq.n	8002a2a <mmc_set_bus_width+0x62>
    osalDbgAssert(false, "unexpected case");
 80029ea:	4815      	ldr	r0, [pc, #84]	; (8002a40 <mmc_set_bus_width+0x78>)
 80029ec:	f004 fe88 	bl	8007700 <chSysHalt>
    break;
 80029f0:	e006      	b.n	8002a00 <mmc_set_bus_width+0x38>
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 1, 0);
 80029f2:	2300      	movs	r3, #0
 80029f4:	2201      	movs	r2, #1
 80029f6:	21b7      	movs	r1, #183	; 0xb7
 80029f8:	2003      	movs	r0, #3
 80029fa:	f7ff fe49 	bl	8002690 <mmc_cmd6_construct>
 80029fe:	4605      	mov	r5, r0
  sdc_lld_set_bus_mode(sdcp, sdcp->config->bus_width);
 8002a00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a02:	7919      	ldrb	r1, [r3, #4]
 8002a04:	4620      	mov	r0, r4
 8002a06:	f003 ffc3 	bl	8006990 <sdc_lld_set_bus_mode>
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8002a0a:	ab01      	add	r3, sp, #4
 8002a0c:	462a      	mov	r2, r5
 8002a0e:	2106      	movs	r1, #6
 8002a10:	4620      	mov	r0, r4
 8002a12:	f004 f805 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8002a16:	4603      	mov	r3, r0
 8002a18:	b920      	cbnz	r0, 8002a24 <mmc_set_bus_width+0x5c>
      MMCSD_R1_ERROR(resp[0])) {
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <mmc_set_bus_width+0x7c>)
 8002a1c:	9901      	ldr	r1, [sp, #4]
 8002a1e:	400a      	ands	r2, r1
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8002a20:	b102      	cbz	r2, 8002a24 <mmc_set_bus_width+0x5c>
    return HAL_FAILED;
 8002a22:	2301      	movs	r3, #1
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	b003      	add	sp, #12
 8002a28:	bd30      	pop	{r4, r5, pc}
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 2, 0);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	21b7      	movs	r1, #183	; 0xb7
 8002a30:	2003      	movs	r0, #3
 8002a32:	f7ff fe2d 	bl	8002690 <mmc_cmd6_construct>
 8002a36:	4605      	mov	r5, r0
    break;
 8002a38:	e7e2      	b.n	8002a00 <mmc_set_bus_width+0x38>
    return HAL_SUCCESS;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e7f2      	b.n	8002a24 <mmc_set_bus_width+0x5c>
 8002a3e:	bf00      	nop
 8002a40:	080190b4 	.word	0x080190b4
 8002a44:	fdffe008 	.word	0xfdffe008
 8002a48:	f3af 8000 	nop.w
 8002a4c:	f3af 8000 	nop.w

08002a50 <sdcConnect>:
bool sdcConnect(SDCDriver *sdcp) {
 8002a50:	b530      	push	{r4, r5, lr}
 8002a52:	b085      	sub	sp, #20
  sdcbusclk_t clk = SDC_CLK_25MHz;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f88d 300b 	strb.w	r3, [sp, #11]
  osalDbgCheck(sdcp != NULL);
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	b360      	cbz	r0, 8002ab8 <sdcConnect+0x68>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 8002a5e:	7923      	ldrb	r3, [r4, #4]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d001      	beq.n	8002a68 <sdcConnect+0x18>
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d12b      	bne.n	8002ac0 <sdcConnect+0x70>
  sdcp->state = BLK_CONNECTING;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	7123      	strb	r3, [r4, #4]
  sdc_lld_start_clk(sdcp);
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f003 ff67 	bl	8006940 <sdc_lld_start_clk>
  sdc_lld_send_cmd_none(sdcp, MMCSD_CMD_GO_IDLE_STATE, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	4611      	mov	r1, r2
 8002a76:	4620      	mov	r0, r4
 8002a78:	f003 ffa2 	bl	80069c0 <sdc_lld_send_cmd_none>
  if (HAL_FAILED == mode_detect(sdcp)) {
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f7ff fe7f 	bl	8002780 <mode_detect>
 8002a82:	b980      	cbnz	r0, 8002aa6 <sdcConnect+0x56>
  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_MMC) {
 8002a84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d01c      	beq.n	8002ac8 <sdcConnect+0x78>
    if (HAL_FAILED == sdc_init(sdcp)) {
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7ff fede 	bl	8002850 <sdc_init>
 8002a94:	b938      	cbnz	r0, 8002aa6 <sdcConnect+0x56>
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_ALL_SEND_CID, 0, sdcp->cid)) {
 8002a96:	f104 0308 	add.w	r3, r4, #8
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f004 f8d6 	bl	8006c50 <sdc_lld_send_cmd_long_crc>
 8002aa4:	b1b0      	cbz	r0, 8002ad4 <sdcConnect+0x84>
  sdc_lld_stop_clk(sdcp);
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f003 ff6a 	bl	8006980 <sdc_lld_stop_clk>
  sdcp->state = BLK_ACTIVE;
 8002aac:	2302      	movs	r3, #2
 8002aae:	7123      	strb	r3, [r4, #4]
  return HAL_FAILED;
 8002ab0:	2501      	movs	r5, #1
}
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	b005      	add	sp, #20
 8002ab6:	bd30      	pop	{r4, r5, pc}
  osalDbgCheck(sdcp != NULL);
 8002ab8:	4841      	ldr	r0, [pc, #260]	; (8002bc0 <sdcConnect+0x170>)
 8002aba:	f004 fe21 	bl	8007700 <chSysHalt>
 8002abe:	e7ce      	b.n	8002a5e <sdcConnect+0xe>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 8002ac0:	483f      	ldr	r0, [pc, #252]	; (8002bc0 <sdcConnect+0x170>)
 8002ac2:	f004 fe1d 	bl	8007700 <chSysHalt>
 8002ac6:	e7cf      	b.n	8002a68 <sdcConnect+0x18>
    if (HAL_FAILED == mmc_init(sdcp)) {
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f7ff fe99 	bl	8002800 <mmc_init>
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	d1e9      	bne.n	8002aa6 <sdcConnect+0x56>
 8002ad2:	e7e0      	b.n	8002a96 <sdcConnect+0x46>
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_RELATIVE_ADDR,
 8002ad4:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2103      	movs	r1, #3
 8002adc:	4620      	mov	r0, r4
 8002ade:	f003 ff9f 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	d1df      	bne.n	8002aa6 <sdcConnect+0x56>
                                sdcp->rca, sdcp->csd)) {
 8002ae6:	f104 0518 	add.w	r5, r4, #24
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_SEND_CSD,
 8002aea:	462b      	mov	r3, r5
 8002aec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002aee:	2109      	movs	r1, #9
 8002af0:	4620      	mov	r0, r4
 8002af2:	f004 f8ad 	bl	8006c50 <sdc_lld_send_cmd_long_crc>
 8002af6:	2800      	cmp	r0, #0
 8002af8:	d1d5      	bne.n	8002aa6 <sdcConnect+0x56>
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEL_DESEL_CARD,
 8002afa:	ab03      	add	r3, sp, #12
 8002afc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002afe:	2107      	movs	r1, #7
 8002b00:	4620      	mov	r0, r4
 8002b02:	f003 ff8d 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d1cd      	bne.n	8002aa6 <sdcConnect+0x56>
  if (HAL_SUCCESS != detect_bus_clk(sdcp, &clk)) {
 8002b0a:	f10d 010b 	add.w	r1, sp, #11
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f7ff ff1e 	bl	8002950 <detect_bus_clk>
 8002b14:	2800      	cmp	r0, #0
 8002b16:	d1c6      	bne.n	8002aa6 <sdcConnect+0x56>
  sdc_lld_set_data_clk(sdcp, clk);
 8002b18:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f003 ff27 	bl	8006970 <sdc_lld_set_data_clk>
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8002b22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d01f      	beq.n	8002b6c <sdcConnect+0x11c>
    sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	f7fe fcff 	bl	8001530 <_mmcsd_get_capacity>
 8002b32:	62a0      	str	r0, [r4, #40]	; 0x28
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BLOCKLEN,
 8002b34:	ab03      	add	r3, sp, #12
 8002b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b3a:	2110      	movs	r1, #16
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f003 ff6f 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8002b42:	4605      	mov	r5, r0
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d1ae      	bne.n	8002aa6 <sdcConnect+0x56>
      MMCSD_R1_ERROR(resp[0])) {
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <sdcConnect+0x174>)
 8002b4a:	9a03      	ldr	r2, [sp, #12]
 8002b4c:	4013      	ands	r3, r2
                                 MMCSD_BLOCK_SIZE, resp) ||
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1a9      	bne.n	8002aa6 <sdcConnect+0x56>
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
 8002b52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d927      	bls.n	8002bac <sdcConnect+0x15c>
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d1a2      	bne.n	8002aa6 <sdcConnect+0x56>
    if (HAL_FAILED == mmc_set_bus_width(sdcp)) {
 8002b60:	4620      	mov	r0, r4
 8002b62:	f7ff ff31 	bl	80029c8 <mmc_set_bus_width>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d19d      	bne.n	8002aa6 <sdcConnect+0x56>
 8002b6a:	e025      	b.n	8002bb8 <sdcConnect+0x168>
    if (_mmcsd_get_slice(sdcp->csd, MMCSD_CSD_MMC_CSD_STRUCTURE_SLICE) > 1U) {
 8002b6c:	227e      	movs	r2, #126	; 0x7e
 8002b6e:	217f      	movs	r1, #127	; 0x7f
 8002b70:	4628      	mov	r0, r5
 8002b72:	f7fe fcad 	bl	80014d0 <_mmcsd_get_slice>
 8002b76:	2801      	cmp	r0, #1
 8002b78:	d913      	bls.n	8002ba2 <sdcConnect+0x152>
      uint8_t *ext_csd = sdcp->config->scratchpad;
 8002b7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b7c:	681d      	ldr	r5, [r3, #0]
      if (NULL == ext_csd) {
 8002b7e:	2d00      	cmp	r5, #0
 8002b80:	d091      	beq.n	8002aa6 <sdcConnect+0x56>
      if(sdc_lld_read_special(sdcp, ext_csd, 512, MMCSD_CMD_SEND_EXT_CSD, 0)) {
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2308      	movs	r3, #8
 8002b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f004 f886 	bl	8006ca0 <sdc_lld_read_special>
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d186      	bne.n	8002aa6 <sdcConnect+0x56>
      sdcp->capacity = _mmcsd_get_capacity_ext(ext_csd);
 8002b98:	4628      	mov	r0, r5
 8002b9a:	f7fe fd01 	bl	80015a0 <_mmcsd_get_capacity_ext>
 8002b9e:	62a0      	str	r0, [r4, #40]	; 0x28
 8002ba0:	e7c8      	b.n	8002b34 <sdcConnect+0xe4>
      sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f7fe fcc4 	bl	8001530 <_mmcsd_get_capacity>
 8002ba8:	62a0      	str	r0, [r4, #40]	; 0x28
 8002baa:	e7c3      	b.n	8002b34 <sdcConnect+0xe4>
    if (HAL_FAILED == sdc_set_bus_width(sdcp)) {
 8002bac:	4620      	mov	r0, r4
 8002bae:	f7ff fedb 	bl	8002968 <sdc_set_bus_width>
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	f47f af77 	bne.w	8002aa6 <sdcConnect+0x56>
  sdcp->state = BLK_READY;
 8002bb8:	2305      	movs	r3, #5
 8002bba:	7123      	strb	r3, [r4, #4]
  return HAL_SUCCESS;
 8002bbc:	e779      	b.n	8002ab2 <sdcConnect+0x62>
 8002bbe:	bf00      	nop
 8002bc0:	080190c8 	.word	0x080190c8
 8002bc4:	fdffe008 	.word	0xfdffe008
 8002bc8:	f3af 8000 	nop.w
 8002bcc:	f3af 8000 	nop.w

08002bd0 <sdcRead>:
bool sdcRead(SDCDriver *sdcp, uint32_t startblk, uint8_t *buf, uint32_t n) {
 8002bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd2:	460e      	mov	r6, r1
 8002bd4:	4617      	mov	r7, r2
 8002bd6:	461d      	mov	r5, r3
  osalDbgCheck((sdcp != NULL) && (buf != NULL) && (n > 0U));
 8002bd8:	4604      	mov	r4, r0
 8002bda:	b108      	cbz	r0, 8002be0 <sdcRead+0x10>
 8002bdc:	b102      	cbz	r2, 8002be0 <sdcRead+0x10>
 8002bde:	b913      	cbnz	r3, 8002be6 <sdcRead+0x16>
 8002be0:	480f      	ldr	r0, [pc, #60]	; (8002c20 <sdcRead+0x50>)
 8002be2:	f004 fd8d 	bl	8007700 <chSysHalt>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002be6:	7923      	ldrb	r3, [r4, #4]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d10a      	bne.n	8002c02 <sdcRead+0x32>
  if ((startblk + n - 1U) > sdcp->capacity) {
 8002bec:	19ab      	adds	r3, r5, r6
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d909      	bls.n	8002c0a <sdcRead+0x3a>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8002bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfc:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_FAILED;
 8002bfe:	2001      	movs	r0, #1
}
 8002c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002c02:	4807      	ldr	r0, [pc, #28]	; (8002c20 <sdcRead+0x50>)
 8002c04:	f004 fd7c 	bl	8007700 <chSysHalt>
 8002c08:	e7f0      	b.n	8002bec <sdcRead+0x1c>
  sdcp->state = BLK_READING;
 8002c0a:	2306      	movs	r3, #6
 8002c0c:	7123      	strb	r3, [r4, #4]
  status = sdc_lld_read(sdcp, startblk, buf, n);
 8002c0e:	462b      	mov	r3, r5
 8002c10:	463a      	mov	r2, r7
 8002c12:	4631      	mov	r1, r6
 8002c14:	4620      	mov	r0, r4
 8002c16:	f004 f91b 	bl	8006e50 <sdc_lld_read>
  sdcp->state = BLK_READY;
 8002c1a:	2305      	movs	r3, #5
 8002c1c:	7123      	strb	r3, [r4, #4]
  return status;
 8002c1e:	e7ef      	b.n	8002c00 <sdcRead+0x30>
 8002c20:	080190d4 	.word	0x080190d4
 8002c24:	f3af 8000 	nop.w
 8002c28:	f3af 8000 	nop.w
 8002c2c:	f3af 8000 	nop.w

08002c30 <sdcWrite>:
              const uint8_t *buf, uint32_t n) {
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	460e      	mov	r6, r1
 8002c34:	4617      	mov	r7, r2
 8002c36:	461d      	mov	r5, r3
  osalDbgCheck((sdcp != NULL) && (buf != NULL) && (n > 0U));
 8002c38:	4604      	mov	r4, r0
 8002c3a:	b108      	cbz	r0, 8002c40 <sdcWrite+0x10>
 8002c3c:	b102      	cbz	r2, 8002c40 <sdcWrite+0x10>
 8002c3e:	b913      	cbnz	r3, 8002c46 <sdcWrite+0x16>
 8002c40:	480f      	ldr	r0, [pc, #60]	; (8002c80 <sdcWrite+0x50>)
 8002c42:	f004 fd5d 	bl	8007700 <chSysHalt>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002c46:	7923      	ldrb	r3, [r4, #4]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d10a      	bne.n	8002c62 <sdcWrite+0x32>
  if ((startblk + n - 1U) > sdcp->capacity) {
 8002c4c:	19ab      	adds	r3, r5, r6
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d909      	bls.n	8002c6a <sdcWrite+0x3a>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8002c56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5c:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_FAILED;
 8002c5e:	2001      	movs	r0, #1
}
 8002c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002c62:	4807      	ldr	r0, [pc, #28]	; (8002c80 <sdcWrite+0x50>)
 8002c64:	f004 fd4c 	bl	8007700 <chSysHalt>
 8002c68:	e7f0      	b.n	8002c4c <sdcWrite+0x1c>
  sdcp->state = BLK_WRITING;
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	7123      	strb	r3, [r4, #4]
  status = sdc_lld_write(sdcp, startblk, buf, n);
 8002c6e:	462b      	mov	r3, r5
 8002c70:	463a      	mov	r2, r7
 8002c72:	4631      	mov	r1, r6
 8002c74:	4620      	mov	r0, r4
 8002c76:	f004 f91b 	bl	8006eb0 <sdc_lld_write>
  sdcp->state = BLK_READY;
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	7123      	strb	r3, [r4, #4]
  return status;
 8002c7e:	e7ef      	b.n	8002c60 <sdcWrite+0x30>
 8002c80:	080190dc 	.word	0x080190dc
 8002c84:	f3af 8000 	nop.w
 8002c88:	f3af 8000 	nop.w
 8002c8c:	f3af 8000 	nop.w

08002c90 <sdcSync>:
bool sdcSync(SDCDriver *sdcp) {
 8002c90:	b510      	push	{r4, lr}
  osalDbgCheck(sdcp != NULL);
 8002c92:	4604      	mov	r4, r0
 8002c94:	b120      	cbz	r0, 8002ca0 <sdcSync+0x10>
  if (sdcp->state != BLK_READY) {
 8002c96:	7923      	ldrb	r3, [r4, #4]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d005      	beq.n	8002ca8 <sdcSync+0x18>
    return HAL_FAILED;
 8002c9c:	2001      	movs	r0, #1
}
 8002c9e:	bd10      	pop	{r4, pc}
  osalDbgCheck(sdcp != NULL);
 8002ca0:	4805      	ldr	r0, [pc, #20]	; (8002cb8 <sdcSync+0x28>)
 8002ca2:	f004 fd2d 	bl	8007700 <chSysHalt>
 8002ca6:	e7f6      	b.n	8002c96 <sdcSync+0x6>
  sdcp->state = BLK_SYNCING;
 8002ca8:	2308      	movs	r3, #8
 8002caa:	7123      	strb	r3, [r4, #4]
  result = sdc_lld_sync(sdcp);
 8002cac:	4620      	mov	r0, r4
 8002cae:	f004 f92f 	bl	8006f10 <sdc_lld_sync>
  sdcp->state = BLK_READY;
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	7123      	strb	r3, [r4, #4]
  return result;
 8002cb6:	e7f2      	b.n	8002c9e <sdcSync+0xe>
 8002cb8:	080190e8 	.word	0x080190e8
 8002cbc:	f3af 8000 	nop.w

08002cc0 <_sdc_wait_for_transfer_state>:
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	4604      	mov	r4, r0
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
 8002cc6:	ab01      	add	r3, sp, #4
 8002cc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002cca:	210d      	movs	r1, #13
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f003 fea7 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8002cd2:	4601      	mov	r1, r0
 8002cd4:	b990      	cbnz	r0, 8002cfc <_sdc_wait_for_transfer_state+0x3c>
        MMCSD_R1_ERROR(resp[0])) {
 8002cd6:	9b01      	ldr	r3, [sp, #4]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <_sdc_wait_for_transfer_state+0x44>)
 8002cda:	401a      	ands	r2, r3
                                   sdcp->rca, resp) ||
 8002cdc:	b95a      	cbnz	r2, 8002cf6 <_sdc_wait_for_transfer_state+0x36>
    switch (MMCSD_R1_STS(resp[0])) {
 8002cde:	f3c3 2343 	ubfx	r3, r3, #9, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d00a      	beq.n	8002cfc <_sdc_wait_for_transfer_state+0x3c>
 8002ce6:	d308      	bcc.n	8002cfa <_sdc_wait_for_transfer_state+0x3a>
 8002ce8:	2b07      	cmp	r3, #7
 8002cea:	d806      	bhi.n	8002cfa <_sdc_wait_for_transfer_state+0x3a>
 8002cec:	2064      	movs	r0, #100	; 0x64
 8002cee:	2100      	movs	r1, #0
 8002cf0:	f005 ff0e 	bl	8008b10 <chThdSleep>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
 8002cf4:	e7e7      	b.n	8002cc6 <_sdc_wait_for_transfer_state+0x6>
      return HAL_FAILED;
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	e000      	b.n	8002cfc <_sdc_wait_for_transfer_state+0x3c>
      return HAL_FAILED;
 8002cfa:	2101      	movs	r1, #1
}
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	b002      	add	sp, #8
 8002d00:	bd10      	pop	{r4, pc}
 8002d02:	bf00      	nop
 8002d04:	fdffe008 	.word	0xfdffe008
 8002d08:	f3af 8000 	nop.w
 8002d0c:	f3af 8000 	nop.w

08002d10 <sdcDisconnect>:
bool sdcDisconnect(SDCDriver *sdcp) {
 8002d10:	b538      	push	{r3, r4, r5, lr}
  osalDbgCheck(sdcp != NULL);
 8002d12:	4604      	mov	r4, r0
 8002d14:	b360      	cbz	r0, 8002d70 <sdcDisconnect+0x60>
 8002d16:	2320      	movs	r3, #32
 8002d18:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002d1c:	f006 f980 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002d20:	f004 fe7e 	bl	8007a20 <_dbg_check_lock>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 8002d24:	7923      	ldrb	r3, [r4, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d001      	beq.n	8002d2e <sdcDisconnect+0x1e>
 8002d2a:	2b05      	cmp	r3, #5
 8002d2c:	d124      	bne.n	8002d78 <sdcDisconnect+0x68>
  if (sdcp->state == BLK_ACTIVE) {
 8002d2e:	7923      	ldrb	r3, [r4, #4]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d025      	beq.n	8002d80 <sdcDisconnect+0x70>
  sdcp->state = BLK_DISCONNECTING;
 8002d34:	2304      	movs	r3, #4
 8002d36:	7123      	strb	r3, [r4, #4]
  _dbg_check_unlock();
 8002d38:	f004 fe8a 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002d3c:	f006 f978 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <sdcDisconnect+0xb0>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d004      	beq.n	8002d52 <sdcDisconnect+0x42>
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	6893      	ldr	r3, [r2, #8]
 8002d4e:	4299      	cmp	r1, r3
 8002d50:	d32b      	bcc.n	8002daa <sdcDisconnect+0x9a>
 8002d52:	2300      	movs	r3, #0
 8002d54:	f383 8811 	msr	BASEPRI, r3
  if (_sdc_wait_for_transfer_state(sdcp)) {
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff ffb1 	bl	8002cc0 <_sdc_wait_for_transfer_state>
 8002d5e:	4605      	mov	r5, r0
 8002d60:	bb38      	cbnz	r0, 8002db2 <sdcDisconnect+0xa2>
  sdc_lld_stop_clk(sdcp);
 8002d62:	4620      	mov	r0, r4
 8002d64:	f003 fe0c 	bl	8006980 <sdc_lld_stop_clk>
  sdcp->state = BLK_ACTIVE;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	7123      	strb	r3, [r4, #4]
}
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(sdcp != NULL);
 8002d70:	4814      	ldr	r0, [pc, #80]	; (8002dc4 <sdcDisconnect+0xb4>)
 8002d72:	f004 fcc5 	bl	8007700 <chSysHalt>
 8002d76:	e7ce      	b.n	8002d16 <sdcDisconnect+0x6>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 8002d78:	4812      	ldr	r0, [pc, #72]	; (8002dc4 <sdcDisconnect+0xb4>)
 8002d7a:	f004 fcc1 	bl	8007700 <chSysHalt>
 8002d7e:	e7d6      	b.n	8002d2e <sdcDisconnect+0x1e>
  _dbg_check_unlock();
 8002d80:	f004 fe66 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002d84:	f006 f954 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002d88:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <sdcDisconnect+0xb0>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d004      	beq.n	8002d9a <sdcDisconnect+0x8a>
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	6899      	ldr	r1, [r3, #8]
 8002d94:	6893      	ldr	r3, [r2, #8]
 8002d96:	4299      	cmp	r1, r3
 8002d98:	d303      	bcc.n	8002da2 <sdcDisconnect+0x92>
 8002d9a:	2500      	movs	r5, #0
 8002d9c:	f385 8811 	msr	BASEPRI, r5
 8002da0:	e7e4      	b.n	8002d6c <sdcDisconnect+0x5c>
 8002da2:	4809      	ldr	r0, [pc, #36]	; (8002dc8 <sdcDisconnect+0xb8>)
 8002da4:	f004 fcac 	bl	8007700 <chSysHalt>
 8002da8:	e7f7      	b.n	8002d9a <sdcDisconnect+0x8a>
 8002daa:	4807      	ldr	r0, [pc, #28]	; (8002dc8 <sdcDisconnect+0xb8>)
 8002dac:	f004 fca8 	bl	8007700 <chSysHalt>
 8002db0:	e7cf      	b.n	8002d52 <sdcDisconnect+0x42>
    sdc_lld_stop_clk(sdcp);
 8002db2:	4620      	mov	r0, r4
 8002db4:	f003 fde4 	bl	8006980 <sdc_lld_stop_clk>
    sdcp->state = BLK_ACTIVE;
 8002db8:	2302      	movs	r3, #2
 8002dba:	7123      	strb	r3, [r4, #4]
    return HAL_FAILED;
 8002dbc:	e7d6      	b.n	8002d6c <sdcDisconnect+0x5c>
 8002dbe:	bf00      	nop
 8002dc0:	200050f8 	.word	0x200050f8
 8002dc4:	080190f0 	.word	0x080190f0
 8002dc8:	08019100 	.word	0x08019100
 8002dcc:	f3af 8000 	nop.w

08002dd0 <sdcInit>:
void sdcInit(void) {
 8002dd0:	b508      	push	{r3, lr}
  sdc_lld_init();
 8002dd2:	f003 fd3d 	bl	8006850 <sdc_lld_init>
}
 8002dd6:	bd08      	pop	{r3, pc}
 8002dd8:	f3af 8000 	nop.w
 8002ddc:	f3af 8000 	nop.w

08002de0 <sdcObjectInit>:
  sdcp->vmt      = &sdc_vmt;
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <sdcObjectInit+0x14>)
 8002de2:	6003      	str	r3, [r0, #0]
  sdcp->state    = BLK_STOP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	7103      	strb	r3, [r0, #4]
  sdcp->errors   = SDC_NO_ERROR;
 8002de8:	2300      	movs	r3, #0
 8002dea:	6343      	str	r3, [r0, #52]	; 0x34
  sdcp->config   = NULL;
 8002dec:	62c3      	str	r3, [r0, #44]	; 0x2c
  sdcp->capacity = 0;
 8002dee:	6283      	str	r3, [r0, #40]	; 0x28
}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	0801910c 	.word	0x0801910c
 8002df8:	f3af 8000 	nop.w
 8002dfc:	f3af 8000 	nop.w

08002e00 <sdcStart>:
void sdcStart(SDCDriver *sdcp, const SDCConfig *config) {
 8002e00:	b538      	push	{r3, r4, r5, lr}
 8002e02:	460d      	mov	r5, r1
  osalDbgCheck(sdcp != NULL);
 8002e04:	4604      	mov	r4, r0
 8002e06:	b328      	cbz	r0, 8002e54 <sdcStart+0x54>
 8002e08:	2320      	movs	r3, #32
 8002e0a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002e0e:	f006 f907 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002e12:	f004 fe05 	bl	8007a20 <_dbg_check_lock>
  osalDbgAssert((sdcp->state == BLK_STOP) || (sdcp->state == BLK_ACTIVE),
 8002e16:	7923      	ldrb	r3, [r4, #4]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d902      	bls.n	8002e26 <sdcStart+0x26>
 8002e20:	4810      	ldr	r0, [pc, #64]	; (8002e64 <sdcStart+0x64>)
 8002e22:	f004 fc6d 	bl	8007700 <chSysHalt>
  sdcp->config = config;
 8002e26:	62e5      	str	r5, [r4, #44]	; 0x2c
  sdc_lld_start(sdcp);
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f003 fd29 	bl	8006880 <sdc_lld_start>
  sdcp->state = BLK_ACTIVE;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	7123      	strb	r3, [r4, #4]
  _dbg_check_unlock();
 8002e32:	f004 fe0d 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002e36:	f006 f8fb 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <sdcStart+0x68>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d004      	beq.n	8002e4c <sdcStart+0x4c>
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	6899      	ldr	r1, [r3, #8]
 8002e46:	6893      	ldr	r3, [r2, #8]
 8002e48:	4299      	cmp	r1, r3
 8002e4a:	d307      	bcc.n	8002e5c <sdcStart+0x5c>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f383 8811 	msr	BASEPRI, r3
}
 8002e52:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(sdcp != NULL);
 8002e54:	4803      	ldr	r0, [pc, #12]	; (8002e64 <sdcStart+0x64>)
 8002e56:	f004 fc53 	bl	8007700 <chSysHalt>
 8002e5a:	e7d5      	b.n	8002e08 <sdcStart+0x8>
 8002e5c:	4803      	ldr	r0, [pc, #12]	; (8002e6c <sdcStart+0x6c>)
 8002e5e:	f004 fc4f 	bl	8007700 <chSysHalt>
 8002e62:	e7f3      	b.n	8002e4c <sdcStart+0x4c>
 8002e64:	08019130 	.word	0x08019130
 8002e68:	200050f8 	.word	0x200050f8
 8002e6c:	08019100 	.word	0x08019100

08002e70 <sdcStop>:
void sdcStop(SDCDriver *sdcp) {
 8002e70:	b510      	push	{r4, lr}
  osalDbgCheck(sdcp != NULL);
 8002e72:	4604      	mov	r4, r0
 8002e74:	b330      	cbz	r0, 8002ec4 <sdcStop+0x54>
 8002e76:	2320      	movs	r3, #32
 8002e78:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002e7c:	f006 f8d0 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002e80:	f004 fdce 	bl	8007a20 <_dbg_check_lock>
  osalDbgAssert((sdcp->state == BLK_STOP) || (sdcp->state == BLK_ACTIVE),
 8002e84:	7923      	ldrb	r3, [r4, #4]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d902      	bls.n	8002e94 <sdcStop+0x24>
 8002e8e:	4811      	ldr	r0, [pc, #68]	; (8002ed4 <sdcStop+0x64>)
 8002e90:	f004 fc36 	bl	8007700 <chSysHalt>
  sdc_lld_stop(sdcp);
 8002e94:	4620      	mov	r0, r4
 8002e96:	f003 fd33 	bl	8006900 <sdc_lld_stop>
  sdcp->config = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
  sdcp->state  = BLK_STOP;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	7123      	strb	r3, [r4, #4]
  _dbg_check_unlock();
 8002ea2:	f004 fdd5 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002ea6:	f006 f8c3 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <sdcStop+0x68>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d004      	beq.n	8002ebc <sdcStop+0x4c>
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	6893      	ldr	r3, [r2, #8]
 8002eb8:	4299      	cmp	r1, r3
 8002eba:	d307      	bcc.n	8002ecc <sdcStop+0x5c>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f383 8811 	msr	BASEPRI, r3
}
 8002ec2:	bd10      	pop	{r4, pc}
  osalDbgCheck(sdcp != NULL);
 8002ec4:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <sdcStop+0x64>)
 8002ec6:	f004 fc1b 	bl	8007700 <chSysHalt>
 8002eca:	e7d4      	b.n	8002e76 <sdcStop+0x6>
 8002ecc:	4803      	ldr	r0, [pc, #12]	; (8002edc <sdcStop+0x6c>)
 8002ece:	f004 fc17 	bl	8007700 <chSysHalt>
 8002ed2:	e7f3      	b.n	8002ebc <sdcStop+0x4c>
 8002ed4:	0801913c 	.word	0x0801913c
 8002ed8:	200050f8 	.word	0x200050f8
 8002edc:	08019100 	.word	0x08019100

08002ee0 <sdcGetAndClearErrors>:
sdcflags_t sdcGetAndClearErrors(SDCDriver *sdcp) {
 8002ee0:	b538      	push	{r3, r4, r5, lr}
  osalDbgCheck(sdcp != NULL);
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	b308      	cbz	r0, 8002f2a <sdcGetAndClearErrors+0x4a>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002ee6:	7923      	ldrb	r3, [r4, #4]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d002      	beq.n	8002ef2 <sdcGetAndClearErrors+0x12>
 8002eec:	4813      	ldr	r0, [pc, #76]	; (8002f3c <sdcGetAndClearErrors+0x5c>)
 8002eee:	f004 fc07 	bl	8007700 <chSysHalt>
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002ef8:	f006 f892 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002efc:	f004 fd90 	bl	8007a20 <_dbg_check_lock>
  flags = sdcp->errors;
 8002f00:	6b65      	ldr	r5, [r4, #52]	; 0x34
  sdcp->errors = SDC_NO_ERROR;
 8002f02:	2300      	movs	r3, #0
 8002f04:	6363      	str	r3, [r4, #52]	; 0x34
  _dbg_check_unlock();
 8002f06:	f004 fda3 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002f0a:	f006 f891 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <sdcGetAndClearErrors+0x60>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d004      	beq.n	8002f20 <sdcGetAndClearErrors+0x40>
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	6899      	ldr	r1, [r3, #8]
 8002f1a:	6893      	ldr	r3, [r2, #8]
 8002f1c:	4299      	cmp	r1, r3
 8002f1e:	d308      	bcc.n	8002f32 <sdcGetAndClearErrors+0x52>
 8002f20:	2300      	movs	r3, #0
 8002f22:	f383 8811 	msr	BASEPRI, r3
}
 8002f26:	4628      	mov	r0, r5
 8002f28:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(sdcp != NULL);
 8002f2a:	4804      	ldr	r0, [pc, #16]	; (8002f3c <sdcGetAndClearErrors+0x5c>)
 8002f2c:	f004 fbe8 	bl	8007700 <chSysHalt>
 8002f30:	e7d9      	b.n	8002ee6 <sdcGetAndClearErrors+0x6>
 8002f32:	4804      	ldr	r0, [pc, #16]	; (8002f44 <sdcGetAndClearErrors+0x64>)
 8002f34:	f004 fbe4 	bl	8007700 <chSysHalt>
 8002f38:	e7f2      	b.n	8002f20 <sdcGetAndClearErrors+0x40>
 8002f3a:	bf00      	nop
 8002f3c:	08019144 	.word	0x08019144
 8002f40:	200050f8 	.word	0x200050f8
 8002f44:	08019100 	.word	0x08019100
 8002f48:	f3af 8000 	nop.w
 8002f4c:	f3af 8000 	nop.w

08002f50 <sdcErase>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdcErase(SDCDriver *sdcp, uint32_t startblk, uint32_t endblk) {
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	460d      	mov	r5, r1
 8002f56:	4616      	mov	r6, r2
  uint32_t resp[1];

  osalDbgCheck((sdcp != NULL));
 8002f58:	4604      	mov	r4, r0
 8002f5a:	b1a0      	cbz	r0, 8002f86 <sdcErase+0x36>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002f5c:	7923      	ldrb	r3, [r4, #4]
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d115      	bne.n	8002f8e <sdcErase+0x3e>

  /* Erase operation in progress.*/
  sdcp->state = BLK_WRITING;
 8002f62:	2307      	movs	r3, #7
 8002f64:	7123      	strb	r3, [r4, #4]

  /* Handling command differences between HC and normal cards.*/
  if ((sdcp->cardmode & SDC_MODE_HIGH_CAPACITY) != 0U) {
 8002f66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f68:	f013 0f10 	tst.w	r3, #16
 8002f6c:	d001      	beq.n	8002f72 <sdcErase+0x22>
    startblk *= MMCSD_BLOCK_SIZE;
 8002f6e:	026d      	lsls	r5, r5, #9
    endblk *= MMCSD_BLOCK_SIZE;
 8002f70:	0276      	lsls	r6, r6, #9
  }

  if (_sdc_wait_for_transfer_state(sdcp)) {
 8002f72:	4620      	mov	r0, r4
 8002f74:	f7ff fea4 	bl	8002cc0 <_sdc_wait_for_transfer_state>
 8002f78:	b168      	cbz	r0, 8002f96 <sdcErase+0x46>

  sdcp->state = BLK_READY;
  return HAL_SUCCESS;

failed:
  sdcp->state = BLK_READY;
 8002f7a:	2305      	movs	r3, #5
 8002f7c:	7123      	strb	r3, [r4, #4]
  return HAL_FAILED;
 8002f7e:	2301      	movs	r3, #1
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	b002      	add	sp, #8
 8002f84:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgCheck((sdcp != NULL));
 8002f86:	481c      	ldr	r0, [pc, #112]	; (8002ff8 <sdcErase+0xa8>)
 8002f88:	f004 fbba 	bl	8007700 <chSysHalt>
 8002f8c:	e7e6      	b.n	8002f5c <sdcErase+0xc>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002f8e:	481a      	ldr	r0, [pc, #104]	; (8002ff8 <sdcErase+0xa8>)
 8002f90:	f004 fbb6 	bl	8007700 <chSysHalt>
 8002f94:	e7e5      	b.n	8002f62 <sdcErase+0x12>
  if ((sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_ERASE_RW_BLK_START,
 8002f96:	ab01      	add	r3, sp, #4
 8002f98:	462a      	mov	r2, r5
 8002f9a:	2120      	movs	r1, #32
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f003 fd3f 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d1e9      	bne.n	8002f7a <sdcErase+0x2a>
      MMCSD_R1_ERROR(resp[0])) {
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <sdcErase+0xac>)
 8002fa8:	9a01      	ldr	r2, [sp, #4]
 8002faa:	4013      	ands	r3, r2
                                  startblk, resp) != HAL_SUCCESS) ||
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e4      	bne.n	8002f7a <sdcErase+0x2a>
  if ((sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_ERASE_RW_BLK_END,
 8002fb0:	ab01      	add	r3, sp, #4
 8002fb2:	4632      	mov	r2, r6
 8002fb4:	2121      	movs	r1, #33	; 0x21
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f003 fd32 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d1dc      	bne.n	8002f7a <sdcErase+0x2a>
      MMCSD_R1_ERROR(resp[0])) {
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <sdcErase+0xac>)
 8002fc2:	9a01      	ldr	r2, [sp, #4]
 8002fc4:	4013      	ands	r3, r2
                                  endblk, resp) != HAL_SUCCESS) ||
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1d7      	bne.n	8002f7a <sdcErase+0x2a>
  if ((sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_ERASE,
 8002fca:	ab01      	add	r3, sp, #4
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2126      	movs	r1, #38	; 0x26
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f003 fd25 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	d1cf      	bne.n	8002f7a <sdcErase+0x2a>
      MMCSD_R1_ERROR(resp[0])) {
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <sdcErase+0xac>)
 8002fdc:	9a01      	ldr	r2, [sp, #4]
 8002fde:	4013      	ands	r3, r2
                                  0, resp) != HAL_SUCCESS) ||
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ca      	bne.n	8002f7a <sdcErase+0x2a>
  if (_sdc_wait_for_transfer_state(sdcp)) {
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f7ff fe6b 	bl	8002cc0 <_sdc_wait_for_transfer_state>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2800      	cmp	r0, #0
 8002fee:	d1c4      	bne.n	8002f7a <sdcErase+0x2a>
  sdcp->state = BLK_READY;
 8002ff0:	2205      	movs	r2, #5
 8002ff2:	7122      	strb	r2, [r4, #4]
  return HAL_SUCCESS;
 8002ff4:	e7c4      	b.n	8002f80 <sdcErase+0x30>
 8002ff6:	bf00      	nop
 8002ff8:	0801915c 	.word	0x0801915c
 8002ffc:	fdffe008 	.word	0xfdffe008

08003000 <_ctl>:
                     sysinterval_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
}

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8003000:	b538      	push	{r3, r4, r5, lr}
 8003002:	460c      	mov	r4, r1
 8003004:	4615      	mov	r5, r2
  SerialDriver *sdp = (SerialDriver *)ip;

  osalDbgCheck(sdp != NULL);
 8003006:	b138      	cbz	r0, 8003018 <_ctl+0x18>

  switch (operation) {
 8003008:	b154      	cbz	r4, 8003020 <_ctl+0x20>
 800300a:	2c01      	cmp	r4, #1
 800300c:	d10b      	bne.n	8003026 <_ctl+0x26>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
 800300e:	b155      	cbz	r5, 8003026 <_ctl+0x26>
 8003010:	4806      	ldr	r0, [pc, #24]	; (800302c <_ctl+0x2c>)
 8003012:	f004 fb75 	bl	8007700 <chSysHalt>
 8003016:	e006      	b.n	8003026 <_ctl+0x26>
  osalDbgCheck(sdp != NULL);
 8003018:	4804      	ldr	r0, [pc, #16]	; (800302c <_ctl+0x2c>)
 800301a:	f004 fb71 	bl	8007700 <chSysHalt>
 800301e:	e7f3      	b.n	8003008 <_ctl+0x8>
    break;
  case CHN_CTL_INVALID:
    osalDbgAssert(false, "invalid CTL operation");
 8003020:	4802      	ldr	r0, [pc, #8]	; (800302c <_ctl+0x2c>)
 8003022:	f004 fb6d 	bl	8007700 <chSysHalt>
#else
    break;
#endif
  }
  return MSG_OK;
}
 8003026:	2000      	movs	r0, #0
 8003028:	bd38      	pop	{r3, r4, r5, pc}
 800302a:	bf00      	nop
 800302c:	08019168 	.word	0x08019168

08003030 <_readt>:
                     sysinterval_t timeout) {
 8003030:	b530      	push	{r4, r5, lr}
 8003032:	b083      	sub	sp, #12
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003034:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003038:	e9cd 4500 	strd	r4, r5, [sp]
 800303c:	300c      	adds	r0, #12
 800303e:	f7fe f89f 	bl	8001180 <iqReadTimeout>
}
 8003042:	b003      	add	sp, #12
 8003044:	bd30      	pop	{r4, r5, pc}
 8003046:	bf00      	nop
 8003048:	f3af 8000 	nop.w
 800304c:	f3af 8000 	nop.w

08003050 <_read>:
static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8003050:	b530      	push	{r4, r5, lr}
 8003052:	b083      	sub	sp, #12
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003054:	f04f 34ff 	mov.w	r4, #4294967295
 8003058:	f04f 35ff 	mov.w	r5, #4294967295
 800305c:	e9cd 4500 	strd	r4, r5, [sp]
 8003060:	300c      	adds	r0, #12
 8003062:	f7fe f88d 	bl	8001180 <iqReadTimeout>
}
 8003066:	b003      	add	sp, #12
 8003068:	bd30      	pop	{r4, r5, pc}
 800306a:	bf00      	nop
 800306c:	f3af 8000 	nop.w

08003070 <_writet>:
                      sysinterval_t timeout) {
 8003070:	b530      	push	{r4, r5, lr}
 8003072:	b083      	sub	sp, #12
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003074:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003078:	e9cd 4500 	strd	r4, r5, [sp]
 800307c:	3030      	adds	r0, #48	; 0x30
 800307e:	f7fe f9bf 	bl	8001400 <oqWriteTimeout>
}
 8003082:	b003      	add	sp, #12
 8003084:	bd30      	pop	{r4, r5, pc}
 8003086:	bf00      	nop
 8003088:	f3af 8000 	nop.w
 800308c:	f3af 8000 	nop.w

08003090 <_write>:
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8003090:	b530      	push	{r4, r5, lr}
 8003092:	b083      	sub	sp, #12
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003094:	f04f 34ff 	mov.w	r4, #4294967295
 8003098:	f04f 35ff 	mov.w	r5, #4294967295
 800309c:	e9cd 4500 	strd	r4, r5, [sp]
 80030a0:	3030      	adds	r0, #48	; 0x30
 80030a2:	f7fe f9ad 	bl	8001400 <oqWriteTimeout>
}
 80030a6:	b003      	add	sp, #12
 80030a8:	bd30      	pop	{r4, r5, pc}
 80030aa:	bf00      	nop
 80030ac:	f3af 8000 	nop.w

080030b0 <_gett>:
static msg_t _gett(void *ip, sysinterval_t timeout) {
 80030b0:	b508      	push	{r3, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80030b2:	300c      	adds	r0, #12
 80030b4:	f7fd fff4 	bl	80010a0 <iqGetTimeout>
}
 80030b8:	bd08      	pop	{r3, pc}
 80030ba:	bf00      	nop
 80030bc:	f3af 8000 	nop.w

080030c0 <_get>:
static msg_t _get(void *ip) {
 80030c0:	b508      	push	{r3, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80030c2:	f04f 32ff 	mov.w	r2, #4294967295
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	300c      	adds	r0, #12
 80030cc:	f7fd ffe8 	bl	80010a0 <iqGetTimeout>
}
 80030d0:	bd08      	pop	{r3, pc}
 80030d2:	bf00      	nop
 80030d4:	f3af 8000 	nop.w
 80030d8:	f3af 8000 	nop.w
 80030dc:	f3af 8000 	nop.w

080030e0 <_putt>:
static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 80030e0:	b508      	push	{r3, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80030e2:	3030      	adds	r0, #48	; 0x30
 80030e4:	f7fe f8f4 	bl	80012d0 <oqPutTimeout>
}
 80030e8:	bd08      	pop	{r3, pc}
 80030ea:	bf00      	nop
 80030ec:	f3af 8000 	nop.w

080030f0 <_put>:
static msg_t _put(void *ip, uint8_t b) {
 80030f0:	b508      	push	{r3, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80030f2:	f04f 32ff 	mov.w	r2, #4294967295
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	3030      	adds	r0, #48	; 0x30
 80030fc:	f7fe f8e8 	bl	80012d0 <oqPutTimeout>
}
 8003100:	bd08      	pop	{r3, pc}
 8003102:	bf00      	nop
 8003104:	f3af 8000 	nop.w
 8003108:	f3af 8000 	nop.w
 800310c:	f3af 8000 	nop.w

08003110 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 8003110:	b508      	push	{r3, lr}

  sd_lld_init();
 8003112:	f004 f9cd 	bl	80074b0 <sd_lld_init>
}
 8003116:	bd08      	pop	{r3, pc}
 8003118:	f3af 8000 	nop.w
 800311c:	f3af 8000 	nop.w

08003120 <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8003120:	b530      	push	{r4, r5, lr}
 8003122:	b083      	sub	sp, #12
 8003124:	4604      	mov	r4, r0
 8003126:	4615      	mov	r5, r2

  sdp->vmt = &vmt;
 8003128:	4603      	mov	r3, r0
 800312a:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <sdObjectInit+0x40>)
 800312c:	f843 2b04 	str.w	r2, [r3], #4
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8003130:	6043      	str	r3, [r0, #4]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8003132:	2301      	movs	r3, #1
 8003134:	7203      	strb	r3, [r0, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8003136:	9000      	str	r0, [sp, #0]
 8003138:	460b      	mov	r3, r1
 800313a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800313e:	f100 0154 	add.w	r1, r0, #84	; 0x54
 8003142:	300c      	adds	r0, #12
 8003144:	f7fd ff44 	bl	8000fd0 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8003148:	9400      	str	r4, [sp, #0]
 800314a:	462b      	mov	r3, r5
 800314c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003150:	f504 71aa 	add.w	r1, r4, #340	; 0x154
 8003154:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003158:	f7fe f87a 	bl	8001250 <oqObjectInit>
}
 800315c:	b003      	add	sp, #12
 800315e:	bd30      	pop	{r4, r5, pc}
 8003160:	08019170 	.word	0x08019170
 8003164:	f3af 8000 	nop.w
 8003168:	f3af 8000 	nop.w
 800316c:	f3af 8000 	nop.w

08003170 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	460d      	mov	r5, r1

  osalDbgCheck(sdp != NULL);
 8003174:	4604      	mov	r4, r0
 8003176:	b328      	cbz	r0, 80031c4 <sdStart+0x54>
 8003178:	2320      	movs	r3, #32
 800317a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800317e:	f005 ff4f 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003182:	f004 fc4d 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 8003186:	7a23      	ldrb	r3, [r4, #8]
 8003188:	3b01      	subs	r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d902      	bls.n	8003196 <sdStart+0x26>
 8003190:	4810      	ldr	r0, [pc, #64]	; (80031d4 <sdStart+0x64>)
 8003192:	f004 fab5 	bl	8007700 <chSysHalt>
                "invalid state");
  sd_lld_start(sdp, config);
 8003196:	4629      	mov	r1, r5
 8003198:	4620      	mov	r0, r4
 800319a:	f004 f9b9 	bl	8007510 <sd_lld_start>
  sdp->state = SD_READY;
 800319e:	2302      	movs	r3, #2
 80031a0:	7223      	strb	r3, [r4, #8]
  _dbg_check_unlock();
 80031a2:	f004 fc55 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80031a6:	f005 ff43 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <sdStart+0x68>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d004      	beq.n	80031bc <sdStart+0x4c>
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	6899      	ldr	r1, [r3, #8]
 80031b6:	6893      	ldr	r3, [r2, #8]
 80031b8:	4299      	cmp	r1, r3
 80031ba:	d307      	bcc.n	80031cc <sdStart+0x5c>
 80031bc:	2300      	movs	r3, #0
 80031be:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80031c2:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(sdp != NULL);
 80031c4:	4803      	ldr	r0, [pc, #12]	; (80031d4 <sdStart+0x64>)
 80031c6:	f004 fa9b 	bl	8007700 <chSysHalt>
 80031ca:	e7d5      	b.n	8003178 <sdStart+0x8>
 80031cc:	4803      	ldr	r0, [pc, #12]	; (80031dc <sdStart+0x6c>)
 80031ce:	f004 fa97 	bl	8007700 <chSysHalt>
 80031d2:	e7f3      	b.n	80031bc <sdStart+0x4c>
 80031d4:	08019198 	.word	0x08019198
 80031d8:	200050f8 	.word	0x200050f8
 80031dc:	080191a0 	.word	0x080191a0

080031e0 <sdStop>:
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 *
 * @api
 */
void sdStop(SerialDriver *sdp) {
 80031e0:	b510      	push	{r4, lr}

  osalDbgCheck(sdp != NULL);
 80031e2:	4604      	mov	r4, r0
 80031e4:	b370      	cbz	r0, 8003244 <sdStop+0x64>
 80031e6:	2320      	movs	r3, #32
 80031e8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80031ec:	f005 ff18 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80031f0:	f004 fc16 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();

  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 80031f4:	7a23      	ldrb	r3, [r4, #8]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d902      	bls.n	8003204 <sdStop+0x24>
 80031fe:	4815      	ldr	r0, [pc, #84]	; (8003254 <sdStop+0x74>)
 8003200:	f004 fa7e 	bl	8007700 <chSysHalt>
                "invalid state");

  sd_lld_stop(sdp);
 8003204:	4620      	mov	r0, r4
 8003206:	f004 f9d3 	bl	80075b0 <sd_lld_stop>
  sdp->state = SD_STOP;
 800320a:	2301      	movs	r3, #1
 800320c:	7223      	strb	r3, [r4, #8]
  oqResetI(&sdp->oqueue);
 800320e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003212:	f7fe f82d 	bl	8001270 <oqResetI>
  iqResetI(&sdp->iqueue);
 8003216:	f104 000c 	add.w	r0, r4, #12
 800321a:	f7fd fee9 	bl	8000ff0 <iqResetI>
  chSchRescheduleS();
 800321e:	f005 f937 	bl	8008490 <chSchRescheduleS>
  _dbg_check_unlock();
 8003222:	f004 fc15 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003226:	f005 ff03 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <sdStop+0x78>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d004      	beq.n	800323c <sdStop+0x5c>
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	6899      	ldr	r1, [r3, #8]
 8003236:	6893      	ldr	r3, [r2, #8]
 8003238:	4299      	cmp	r1, r3
 800323a:	d307      	bcc.n	800324c <sdStop+0x6c>
 800323c:	2300      	movs	r3, #0
 800323e:	f383 8811 	msr	BASEPRI, r3
  osalOsRescheduleS();

  osalSysUnlock();
}
 8003242:	bd10      	pop	{r4, pc}
  osalDbgCheck(sdp != NULL);
 8003244:	4803      	ldr	r0, [pc, #12]	; (8003254 <sdStop+0x74>)
 8003246:	f004 fa5b 	bl	8007700 <chSysHalt>
 800324a:	e7cc      	b.n	80031e6 <sdStop+0x6>
 800324c:	4803      	ldr	r0, [pc, #12]	; (800325c <sdStop+0x7c>)
 800324e:	f004 fa57 	bl	8007700 <chSysHalt>
 8003252:	e7f3      	b.n	800323c <sdStop+0x5c>
 8003254:	080191ac 	.word	0x080191ac
 8003258:	200050f8 	.word	0x200050f8
 800325c:	080191a0 	.word	0x080191a0

08003260 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8003260:	b538      	push	{r3, r4, r5, lr}
 8003262:	4604      	mov	r4, r0
 8003264:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8003266:	f004 fc7b 	bl	8007b60 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);
 800326a:	b14c      	cbz	r4, 8003280 <sdIncomingDataI+0x20>

  if (iqIsEmptyI(&sdp->iqueue))
 800326c:	6963      	ldr	r3, [r4, #20]
 800326e:	b15b      	cbz	r3, 8003288 <sdIncomingDataI+0x28>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8003270:	4629      	mov	r1, r5
 8003272:	f104 000c 	add.w	r0, r4, #12
 8003276:	f7fd fecb 	bl	8001010 <iqPutI>
 800327a:	2800      	cmp	r0, #0
 800327c:	db09      	blt.n	8003292 <sdIncomingDataI+0x32>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
 800327e:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(sdp != NULL);
 8003280:	4807      	ldr	r0, [pc, #28]	; (80032a0 <sdIncomingDataI+0x40>)
 8003282:	f004 fa3d 	bl	8007700 <chSysHalt>
 8003286:	e7f1      	b.n	800326c <sdIncomingDataI+0xc>
  chEvtBroadcastFlagsI(esp, flags);
 8003288:	2104      	movs	r1, #4
 800328a:	1860      	adds	r0, r4, r1
 800328c:	f006 fe58 	bl	8009f40 <chEvtBroadcastFlagsI>
 8003290:	e7ee      	b.n	8003270 <sdIncomingDataI+0x10>
 8003292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003296:	1d20      	adds	r0, r4, #4
 8003298:	f006 fe52 	bl	8009f40 <chEvtBroadcastFlagsI>
}
 800329c:	e7ef      	b.n	800327e <sdIncomingDataI+0x1e>
 800329e:	bf00      	nop
 80032a0:	080191b4 	.word	0x080191b4
 80032a4:	f3af 8000 	nop.w
 80032a8:	f3af 8000 	nop.w
 80032ac:	f3af 8000 	nop.w

080032b0 <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
 80032b0:	b538      	push	{r3, r4, r5, lr}
 80032b2:	4604      	mov	r4, r0
  msg_t  b;

  osalDbgCheckClassI();
 80032b4:	f004 fc54 	bl	8007b60 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);
 80032b8:	b13c      	cbz	r4, 80032ca <sdRequestDataI+0x1a>

  b = oqGetI(&sdp->oqueue);
 80032ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80032be:	f7fe f85f 	bl	8001380 <oqGetI>
  if (b < MSG_OK)
 80032c2:	1e05      	subs	r5, r0, #0
 80032c4:	db05      	blt.n	80032d2 <sdRequestDataI+0x22>
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
 80032c6:	4628      	mov	r0, r5
 80032c8:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(sdp != NULL);
 80032ca:	4804      	ldr	r0, [pc, #16]	; (80032dc <sdRequestDataI+0x2c>)
 80032cc:	f004 fa18 	bl	8007700 <chSysHalt>
 80032d0:	e7f3      	b.n	80032ba <sdRequestDataI+0xa>
 80032d2:	2108      	movs	r1, #8
 80032d4:	1d20      	adds	r0, r4, #4
 80032d6:	f006 fe33 	bl	8009f40 <chEvtBroadcastFlagsI>
  return b;
 80032da:	e7f4      	b.n	80032c6 <sdRequestDataI+0x16>
 80032dc:	080191c4 	.word	0x080191c4

080032e0 <sdPutWouldBlock>:
 *
 * @deprecated
 *
 * @api
 */
bool sdPutWouldBlock(SerialDriver *sdp) {
 80032e0:	b510      	push	{r4, lr}
 80032e2:	4604      	mov	r4, r0
 80032e4:	2320      	movs	r3, #32
 80032e6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80032ea:	f005 fe99 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80032ee:	f004 fb97 	bl	8007a20 <_dbg_check_lock>
  bool b;

  osalSysLock();
  b = oqIsFullI(&sdp->oqueue);
 80032f2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80032f4:	fab4 f484 	clz	r4, r4
 80032f8:	0964      	lsrs	r4, r4, #5
  _dbg_check_unlock();
 80032fa:	f004 fba9 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80032fe:	f005 fe97 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <sdPutWouldBlock+0x48>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d004      	beq.n	8003314 <sdPutWouldBlock+0x34>
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	6899      	ldr	r1, [r3, #8]
 800330e:	6893      	ldr	r3, [r2, #8]
 8003310:	4299      	cmp	r1, r3
 8003312:	d304      	bcc.n	800331e <sdPutWouldBlock+0x3e>
 8003314:	2300      	movs	r3, #0
 8003316:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();

  return b;
}
 800331a:	4620      	mov	r0, r4
 800331c:	bd10      	pop	{r4, pc}
 800331e:	4803      	ldr	r0, [pc, #12]	; (800332c <sdPutWouldBlock+0x4c>)
 8003320:	f004 f9ee 	bl	8007700 <chSysHalt>
 8003324:	e7f6      	b.n	8003314 <sdPutWouldBlock+0x34>
 8003326:	bf00      	nop
 8003328:	200050f8 	.word	0x200050f8
 800332c:	080191a0 	.word	0x080191a0

08003330 <sdGetWouldBlock>:
 *
 * @deprecated
 *
 * @api
 */
bool sdGetWouldBlock(SerialDriver *sdp) {
 8003330:	b510      	push	{r4, lr}
 8003332:	4604      	mov	r4, r0
 8003334:	2320      	movs	r3, #32
 8003336:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800333a:	f005 fe71 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800333e:	f004 fb6f 	bl	8007a20 <_dbg_check_lock>
  bool b;

  osalSysLock();
  b = iqIsEmptyI(&sdp->iqueue);
 8003342:	6964      	ldr	r4, [r4, #20]
 8003344:	fab4 f484 	clz	r4, r4
 8003348:	0964      	lsrs	r4, r4, #5
  _dbg_check_unlock();
 800334a:	f004 fb81 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800334e:	f005 fe6f 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <sdGetWouldBlock+0x48>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d004      	beq.n	8003364 <sdGetWouldBlock+0x34>
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	6893      	ldr	r3, [r2, #8]
 8003360:	4299      	cmp	r1, r3
 8003362:	d304      	bcc.n	800336e <sdGetWouldBlock+0x3e>
 8003364:	2300      	movs	r3, #0
 8003366:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();

  return b;
}
 800336a:	4620      	mov	r0, r4
 800336c:	bd10      	pop	{r4, pc}
 800336e:	4803      	ldr	r0, [pc, #12]	; (800337c <sdGetWouldBlock+0x4c>)
 8003370:	f004 f9c6 	bl	8007700 <chSysHalt>
 8003374:	e7f6      	b.n	8003364 <sdGetWouldBlock+0x34>
 8003376:	bf00      	nop
 8003378:	200050f8 	.word	0x200050f8
 800337c:	080191a0 	.word	0x080191a0

08003380 <sdControl>:
 * @retval MSG_TIMEOUT  in case of operation timeout.
 * @retval MSG_RESET    in case of operation reset.
 *
 * @api
 */
msg_t sdControl(SerialDriver *sdp, unsigned int operation, void *arg) {
 8003380:	b508      	push	{r3, lr}

  return _ctl((void *)sdp, operation, arg);
 8003382:	f7ff fe3d 	bl	8003000 <_ctl>
}
 8003386:	bd08      	pop	{r3, pc}
	...

08003390 <spiInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void spiInit(void) {
 8003390:	b508      	push	{r3, lr}

  spi_lld_init();
 8003392:	f002 ff9d 	bl	80062d0 <spi_lld_init>
}
 8003396:	bd08      	pop	{r3, pc}
 8003398:	f3af 8000 	nop.w
 800339c:	f3af 8000 	nop.w

080033a0 <spiObjectInit>:
 *
 * @param[out] spip     pointer to the @p SPIDriver object
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {
 80033a0:	b508      	push	{r3, lr}

  spip->state = SPI_STOP;
 80033a2:	2301      	movs	r3, #1
 80033a4:	7003      	strb	r3, [r0, #0]
  spip->config = NULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	6043      	str	r3, [r0, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80033aa:	6083      	str	r3, [r0, #8]
  chMtxObjectInit(mp);
 80033ac:	300c      	adds	r0, #12
 80033ae:	f006 f93f 	bl	8009630 <chMtxObjectInit>
  osalMutexObjectInit(&spip->mutex);
#endif
#if defined(SPI_DRIVER_EXT_INIT_HOOK)
  SPI_DRIVER_EXT_INIT_HOOK(spip);
#endif
}
 80033b2:	bd08      	pop	{r3, pc}
 80033b4:	f3af 8000 	nop.w
 80033b8:	f3af 8000 	nop.w
 80033bc:	f3af 8000 	nop.w

080033c0 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 80033c0:	b538      	push	{r3, r4, r5, lr}
 80033c2:	460d      	mov	r5, r1

  osalDbgCheck((spip != NULL) && (config != NULL));
 80033c4:	4604      	mov	r4, r0
 80033c6:	b330      	cbz	r0, 8003416 <spiStart+0x56>
 80033c8:	b329      	cbz	r1, 8003416 <spiStart+0x56>
 80033ca:	2320      	movs	r3, #32
 80033cc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80033d0:	f005 fe26 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80033d4:	f004 fb24 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 80033d8:	7823      	ldrb	r3, [r4, #0]
 80033da:	3b01      	subs	r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d902      	bls.n	80033e8 <spiStart+0x28>
 80033e2:	4811      	ldr	r0, [pc, #68]	; (8003428 <spiStart+0x68>)
 80033e4:	f004 f98c 	bl	8007700 <chSysHalt>
                "invalid state");
  spip->config = config;
 80033e8:	6065      	str	r5, [r4, #4]
  spi_lld_start(spip);
 80033ea:	4620      	mov	r0, r4
 80033ec:	f002 ff98 	bl	8006320 <spi_lld_start>
  spip->state = SPI_READY;
 80033f0:	2302      	movs	r3, #2
 80033f2:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 80033f4:	f004 fb2c 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80033f8:	f005 fe1a 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <spiStart+0x6c>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d004      	beq.n	800340e <spiStart+0x4e>
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	6899      	ldr	r1, [r3, #8]
 8003408:	6893      	ldr	r3, [r2, #8]
 800340a:	4299      	cmp	r1, r3
 800340c:	d307      	bcc.n	800341e <spiStart+0x5e>
 800340e:	2300      	movs	r3, #0
 8003410:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8003414:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((spip != NULL) && (config != NULL));
 8003416:	4804      	ldr	r0, [pc, #16]	; (8003428 <spiStart+0x68>)
 8003418:	f004 f972 	bl	8007700 <chSysHalt>
 800341c:	e7d5      	b.n	80033ca <spiStart+0xa>
 800341e:	4804      	ldr	r0, [pc, #16]	; (8003430 <spiStart+0x70>)
 8003420:	f004 f96e 	bl	8007700 <chSysHalt>
 8003424:	e7f3      	b.n	800340e <spiStart+0x4e>
 8003426:	bf00      	nop
 8003428:	080191d4 	.word	0x080191d4
 800342c:	200050f8 	.word	0x200050f8
 8003430:	080191e0 	.word	0x080191e0
 8003434:	f3af 8000 	nop.w
 8003438:	f3af 8000 	nop.w
 800343c:	f3af 8000 	nop.w

08003440 <spiStop>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiStop(SPIDriver *spip) {
 8003440:	b510      	push	{r4, lr}

  osalDbgCheck(spip != NULL);
 8003442:	4604      	mov	r4, r0
 8003444:	b330      	cbz	r0, 8003494 <spiStop+0x54>
 8003446:	2320      	movs	r3, #32
 8003448:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800344c:	f005 fde8 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003450:	f004 fae6 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();

  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 8003454:	7823      	ldrb	r3, [r4, #0]
 8003456:	3b01      	subs	r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d902      	bls.n	8003464 <spiStop+0x24>
 800345e:	4811      	ldr	r0, [pc, #68]	; (80034a4 <spiStop+0x64>)
 8003460:	f004 f94e 	bl	8007700 <chSysHalt>
                "invalid state");

  spi_lld_stop(spip);
 8003464:	4620      	mov	r0, r4
 8003466:	f003 f80b 	bl	8006480 <spi_lld_stop>
  spip->config = NULL;
 800346a:	2300      	movs	r3, #0
 800346c:	6063      	str	r3, [r4, #4]
  spip->state  = SPI_STOP;
 800346e:	2301      	movs	r3, #1
 8003470:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 8003472:	f004 faed 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003476:	f005 fddb 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <spiStop+0x68>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d004      	beq.n	800348c <spiStop+0x4c>
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	6899      	ldr	r1, [r3, #8]
 8003486:	6893      	ldr	r3, [r2, #8]
 8003488:	4299      	cmp	r1, r3
 800348a:	d307      	bcc.n	800349c <spiStop+0x5c>
 800348c:	2300      	movs	r3, #0
 800348e:	f383 8811 	msr	BASEPRI, r3

  osalSysUnlock();
}
 8003492:	bd10      	pop	{r4, pc}
  osalDbgCheck(spip != NULL);
 8003494:	4803      	ldr	r0, [pc, #12]	; (80034a4 <spiStop+0x64>)
 8003496:	f004 f933 	bl	8007700 <chSysHalt>
 800349a:	e7d4      	b.n	8003446 <spiStop+0x6>
 800349c:	4803      	ldr	r0, [pc, #12]	; (80034ac <spiStop+0x6c>)
 800349e:	f004 f92f 	bl	8007700 <chSysHalt>
 80034a2:	e7f3      	b.n	800348c <spiStop+0x4c>
 80034a4:	080191ec 	.word	0x080191ec
 80034a8:	200050f8 	.word	0x200050f8
 80034ac:	080191e0 	.word	0x080191e0

080034b0 <spiSelect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 80034b0:	b510      	push	{r4, lr}

  osalDbgCheck(spip != NULL);
 80034b2:	4604      	mov	r4, r0
 80034b4:	b320      	cbz	r0, 8003500 <spiSelect+0x50>
 80034b6:	2320      	movs	r3, #32
 80034b8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80034bc:	f005 fdb0 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80034c0:	f004 faae 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 80034c4:	7823      	ldrb	r3, [r4, #0]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d002      	beq.n	80034d0 <spiSelect+0x20>
 80034ca:	4811      	ldr	r0, [pc, #68]	; (8003510 <spiSelect+0x60>)
 80034cc:	f004 f918 	bl	8007700 <chSysHalt>
  spiSelectI(spip);
 80034d0:	6862      	ldr	r2, [r4, #4]
 80034d2:	68d1      	ldr	r1, [r2, #12]
 80034d4:	2301      	movs	r3, #1
 80034d6:	408b      	lsls	r3, r1
 80034d8:	6892      	ldr	r2, [r2, #8]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	8353      	strh	r3, [r2, #26]
  _dbg_check_unlock();
 80034de:	f004 fab7 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80034e2:	f005 fda5 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <spiSelect+0x64>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d004      	beq.n	80034f8 <spiSelect+0x48>
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	6899      	ldr	r1, [r3, #8]
 80034f2:	6893      	ldr	r3, [r2, #8]
 80034f4:	4299      	cmp	r1, r3
 80034f6:	d307      	bcc.n	8003508 <spiSelect+0x58>
 80034f8:	2300      	movs	r3, #0
 80034fa:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80034fe:	bd10      	pop	{r4, pc}
  osalDbgCheck(spip != NULL);
 8003500:	4803      	ldr	r0, [pc, #12]	; (8003510 <spiSelect+0x60>)
 8003502:	f004 f8fd 	bl	8007700 <chSysHalt>
 8003506:	e7d6      	b.n	80034b6 <spiSelect+0x6>
 8003508:	4803      	ldr	r0, [pc, #12]	; (8003518 <spiSelect+0x68>)
 800350a:	f004 f8f9 	bl	8007700 <chSysHalt>
 800350e:	e7f3      	b.n	80034f8 <spiSelect+0x48>
 8003510:	080191f4 	.word	0x080191f4
 8003514:	200050f8 	.word	0x200050f8
 8003518:	080191e0 	.word	0x080191e0
 800351c:	f3af 8000 	nop.w

08003520 <spiUnselect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 8003520:	b510      	push	{r4, lr}

  osalDbgCheck(spip != NULL);
 8003522:	4604      	mov	r4, r0
 8003524:	b320      	cbz	r0, 8003570 <spiUnselect+0x50>
 8003526:	2320      	movs	r3, #32
 8003528:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800352c:	f005 fd78 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003530:	f004 fa76 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8003534:	7823      	ldrb	r3, [r4, #0]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d002      	beq.n	8003540 <spiUnselect+0x20>
 800353a:	4811      	ldr	r0, [pc, #68]	; (8003580 <spiUnselect+0x60>)
 800353c:	f004 f8e0 	bl	8007700 <chSysHalt>
  spiUnselectI(spip);
 8003540:	6862      	ldr	r2, [r4, #4]
 8003542:	68d1      	ldr	r1, [r2, #12]
 8003544:	2301      	movs	r3, #1
 8003546:	408b      	lsls	r3, r1
 8003548:	6892      	ldr	r2, [r2, #8]
 800354a:	b29b      	uxth	r3, r3
 800354c:	8313      	strh	r3, [r2, #24]
  _dbg_check_unlock();
 800354e:	f004 fa7f 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003552:	f005 fd6d 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <spiUnselect+0x64>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d004      	beq.n	8003568 <spiUnselect+0x48>
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	6899      	ldr	r1, [r3, #8]
 8003562:	6893      	ldr	r3, [r2, #8]
 8003564:	4299      	cmp	r1, r3
 8003566:	d307      	bcc.n	8003578 <spiUnselect+0x58>
 8003568:	2300      	movs	r3, #0
 800356a:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800356e:	bd10      	pop	{r4, pc}
  osalDbgCheck(spip != NULL);
 8003570:	4803      	ldr	r0, [pc, #12]	; (8003580 <spiUnselect+0x60>)
 8003572:	f004 f8c5 	bl	8007700 <chSysHalt>
 8003576:	e7d6      	b.n	8003526 <spiUnselect+0x6>
 8003578:	4803      	ldr	r0, [pc, #12]	; (8003588 <spiUnselect+0x68>)
 800357a:	f004 f8c1 	bl	8007700 <chSysHalt>
 800357e:	e7f3      	b.n	8003568 <spiUnselect+0x48>
 8003580:	08019200 	.word	0x08019200
 8003584:	200050f8 	.word	0x200050f8
 8003588:	080191e0 	.word	0x080191e0
 800358c:	f3af 8000 	nop.w

08003590 <spiStartIgnore>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] n         number of words to be ignored
 *
 * @api
 */
void spiStartIgnore(SPIDriver *spip, size_t n) {
 8003590:	b538      	push	{r3, r4, r5, lr}
 8003592:	460d      	mov	r5, r1

  osalDbgCheck((spip != NULL) && (n > 0U));
 8003594:	4604      	mov	r4, r0
 8003596:	b100      	cbz	r0, 800359a <spiStartIgnore+0xa>
 8003598:	b911      	cbnz	r1, 80035a0 <spiStartIgnore+0x10>
 800359a:	4815      	ldr	r0, [pc, #84]	; (80035f0 <spiStartIgnore+0x60>)
 800359c:	f004 f8b0 	bl	8007700 <chSysHalt>
 80035a0:	2320      	movs	r3, #32
 80035a2:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80035a6:	f005 fd3b 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80035aa:	f004 fa39 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 80035ae:	7823      	ldrb	r3, [r4, #0]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d002      	beq.n	80035ba <spiStartIgnore+0x2a>
 80035b4:	480e      	ldr	r0, [pc, #56]	; (80035f0 <spiStartIgnore+0x60>)
 80035b6:	f004 f8a3 	bl	8007700 <chSysHalt>
  spiStartIgnoreI(spip, n);
 80035ba:	2303      	movs	r3, #3
 80035bc:	7023      	strb	r3, [r4, #0]
 80035be:	4629      	mov	r1, r5
 80035c0:	4620      	mov	r0, r4
 80035c2:	f002 ff9d 	bl	8006500 <spi_lld_ignore>
  _dbg_check_unlock();
 80035c6:	f004 fa43 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80035ca:	f005 fd31 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <spiStartIgnore+0x64>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d004      	beq.n	80035e0 <spiStartIgnore+0x50>
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	6899      	ldr	r1, [r3, #8]
 80035da:	6893      	ldr	r3, [r2, #8]
 80035dc:	4299      	cmp	r1, r3
 80035de:	d303      	bcc.n	80035e8 <spiStartIgnore+0x58>
 80035e0:	2300      	movs	r3, #0
 80035e2:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80035e6:	bd38      	pop	{r3, r4, r5, pc}
 80035e8:	4803      	ldr	r0, [pc, #12]	; (80035f8 <spiStartIgnore+0x68>)
 80035ea:	f004 f889 	bl	8007700 <chSysHalt>
 80035ee:	e7f7      	b.n	80035e0 <spiStartIgnore+0x50>
 80035f0:	0801920c 	.word	0x0801920c
 80035f4:	200050f8 	.word	0x200050f8
 80035f8:	080191e0 	.word	0x080191e0
 80035fc:	f3af 8000 	nop.w

08003600 <spiStartExchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiStartExchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003602:	460d      	mov	r5, r1
 8003604:	4617      	mov	r7, r2
 8003606:	461e      	mov	r6, r3

  osalDbgCheck((spip != NULL) && (n > 0U) &&
 8003608:	4604      	mov	r4, r0
 800360a:	b110      	cbz	r0, 8003612 <spiStartExchange+0x12>
 800360c:	b109      	cbz	r1, 8003612 <spiStartExchange+0x12>
 800360e:	b103      	cbz	r3, 8003612 <spiStartExchange+0x12>
 8003610:	b912      	cbnz	r2, 8003618 <spiStartExchange+0x18>
 8003612:	4816      	ldr	r0, [pc, #88]	; (800366c <spiStartExchange+0x6c>)
 8003614:	f004 f874 	bl	8007700 <chSysHalt>
 8003618:	2320      	movs	r3, #32
 800361a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800361e:	f005 fcff 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003622:	f004 f9fd 	bl	8007a20 <_dbg_check_lock>
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8003626:	7823      	ldrb	r3, [r4, #0]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d002      	beq.n	8003632 <spiStartExchange+0x32>
 800362c:	480f      	ldr	r0, [pc, #60]	; (800366c <spiStartExchange+0x6c>)
 800362e:	f004 f867 	bl	8007700 <chSysHalt>
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 8003632:	2303      	movs	r3, #3
 8003634:	7023      	strb	r3, [r4, #0]
 8003636:	4633      	mov	r3, r6
 8003638:	463a      	mov	r2, r7
 800363a:	4629      	mov	r1, r5
 800363c:	4620      	mov	r0, r4
 800363e:	f002 ff97 	bl	8006570 <spi_lld_exchange>
  _dbg_check_unlock();
 8003642:	f004 fa05 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003646:	f005 fcf3 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <spiStartExchange+0x70>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d004      	beq.n	800365c <spiStartExchange+0x5c>
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	6899      	ldr	r1, [r3, #8]
 8003656:	6893      	ldr	r3, [r2, #8]
 8003658:	4299      	cmp	r1, r3
 800365a:	d303      	bcc.n	8003664 <spiStartExchange+0x64>
 800365c:	2300      	movs	r3, #0
 800365e:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8003662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003664:	4803      	ldr	r0, [pc, #12]	; (8003674 <spiStartExchange+0x74>)
 8003666:	f004 f84b 	bl	8007700 <chSysHalt>
 800366a:	e7f7      	b.n	800365c <spiStartExchange+0x5c>
 800366c:	0801921c 	.word	0x0801921c
 8003670:	200050f8 	.word	0x200050f8
 8003674:	080191e0 	.word	0x080191e0
 8003678:	f3af 8000 	nop.w
 800367c:	f3af 8000 	nop.w

08003680 <spiStartSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiStartSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	460d      	mov	r5, r1
 8003684:	4616      	mov	r6, r2

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 8003686:	4604      	mov	r4, r0
 8003688:	b108      	cbz	r0, 800368e <spiStartSend+0xe>
 800368a:	b101      	cbz	r1, 800368e <spiStartSend+0xe>
 800368c:	b912      	cbnz	r2, 8003694 <spiStartSend+0x14>
 800368e:	4816      	ldr	r0, [pc, #88]	; (80036e8 <spiStartSend+0x68>)
 8003690:	f004 f836 	bl	8007700 <chSysHalt>
 8003694:	2320      	movs	r3, #32
 8003696:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800369a:	f005 fcc1 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800369e:	f004 f9bf 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 80036a2:	7823      	ldrb	r3, [r4, #0]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d002      	beq.n	80036ae <spiStartSend+0x2e>
 80036a8:	480f      	ldr	r0, [pc, #60]	; (80036e8 <spiStartSend+0x68>)
 80036aa:	f004 f829 	bl	8007700 <chSysHalt>
  spiStartSendI(spip, n, txbuf);
 80036ae:	2303      	movs	r3, #3
 80036b0:	7023      	strb	r3, [r4, #0]
 80036b2:	4632      	mov	r2, r6
 80036b4:	4629      	mov	r1, r5
 80036b6:	4620      	mov	r0, r4
 80036b8:	f002 ff92 	bl	80065e0 <spi_lld_send>
  _dbg_check_unlock();
 80036bc:	f004 f9c8 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80036c0:	f005 fcb6 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80036c4:	4b09      	ldr	r3, [pc, #36]	; (80036ec <spiStartSend+0x6c>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d004      	beq.n	80036d6 <spiStartSend+0x56>
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	6899      	ldr	r1, [r3, #8]
 80036d0:	6893      	ldr	r3, [r2, #8]
 80036d2:	4299      	cmp	r1, r3
 80036d4:	d303      	bcc.n	80036de <spiStartSend+0x5e>
 80036d6:	2300      	movs	r3, #0
 80036d8:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80036dc:	bd70      	pop	{r4, r5, r6, pc}
 80036de:	4804      	ldr	r0, [pc, #16]	; (80036f0 <spiStartSend+0x70>)
 80036e0:	f004 f80e 	bl	8007700 <chSysHalt>
 80036e4:	e7f7      	b.n	80036d6 <spiStartSend+0x56>
 80036e6:	bf00      	nop
 80036e8:	08019230 	.word	0x08019230
 80036ec:	200050f8 	.word	0x200050f8
 80036f0:	080191e0 	.word	0x080191e0
 80036f4:	f3af 8000 	nop.w
 80036f8:	f3af 8000 	nop.w
 80036fc:	f3af 8000 	nop.w

08003700 <spiStartReceive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiStartReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	460d      	mov	r5, r1
 8003704:	4616      	mov	r6, r2

  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
 8003706:	4604      	mov	r4, r0
 8003708:	b108      	cbz	r0, 800370e <spiStartReceive+0xe>
 800370a:	b101      	cbz	r1, 800370e <spiStartReceive+0xe>
 800370c:	b912      	cbnz	r2, 8003714 <spiStartReceive+0x14>
 800370e:	4816      	ldr	r0, [pc, #88]	; (8003768 <spiStartReceive+0x68>)
 8003710:	f003 fff6 	bl	8007700 <chSysHalt>
 8003714:	2320      	movs	r3, #32
 8003716:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800371a:	f005 fc81 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800371e:	f004 f97f 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8003722:	7823      	ldrb	r3, [r4, #0]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d002      	beq.n	800372e <spiStartReceive+0x2e>
 8003728:	480f      	ldr	r0, [pc, #60]	; (8003768 <spiStartReceive+0x68>)
 800372a:	f003 ffe9 	bl	8007700 <chSysHalt>
  spiStartReceiveI(spip, n, rxbuf);
 800372e:	2303      	movs	r3, #3
 8003730:	7023      	strb	r3, [r4, #0]
 8003732:	4632      	mov	r2, r6
 8003734:	4629      	mov	r1, r5
 8003736:	4620      	mov	r0, r4
 8003738:	f002 ff8a 	bl	8006650 <spi_lld_receive>
  _dbg_check_unlock();
 800373c:	f004 f988 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003740:	f005 fc76 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <spiStartReceive+0x6c>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d004      	beq.n	8003756 <spiStartReceive+0x56>
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	6893      	ldr	r3, [r2, #8]
 8003752:	4299      	cmp	r1, r3
 8003754:	d303      	bcc.n	800375e <spiStartReceive+0x5e>
 8003756:	2300      	movs	r3, #0
 8003758:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800375c:	bd70      	pop	{r4, r5, r6, pc}
 800375e:	4804      	ldr	r0, [pc, #16]	; (8003770 <spiStartReceive+0x70>)
 8003760:	f003 ffce 	bl	8007700 <chSysHalt>
 8003764:	e7f7      	b.n	8003756 <spiStartReceive+0x56>
 8003766:	bf00      	nop
 8003768:	08019240 	.word	0x08019240
 800376c:	200050f8 	.word	0x200050f8
 8003770:	080191e0 	.word	0x080191e0
 8003774:	f3af 8000 	nop.w
 8003778:	f3af 8000 	nop.w
 800377c:	f3af 8000 	nop.w

08003780 <spiAbortI>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @iclass
 */
void spiAbortI(SPIDriver *spip) {
 8003780:	b510      	push	{r4, lr}
 8003782:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8003784:	f004 f9ec 	bl	8007b60 <chDbgCheckClassI>

  osalDbgCheck(spip != NULL);
 8003788:	b194      	cbz	r4, 80037b0 <spiAbortI+0x30>
  osalDbgAssert((spip->state == SPI_ACTIVE) || (spip->state == SPI_COMPLETE),
 800378a:	7823      	ldrb	r3, [r4, #0]
 800378c:	3b03      	subs	r3, #3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d902      	bls.n	800379a <spiAbortI+0x1a>
 8003794:	4808      	ldr	r0, [pc, #32]	; (80037b8 <spiAbortI+0x38>)
 8003796:	f003 ffb3 	bl	8007700 <chSysHalt>
                "invalid state");

  spi_lld_abort(spip);
 800379a:	4620      	mov	r0, r4
 800379c:	f002 ff90 	bl	80066c0 <spi_lld_abort>
  spip->state = SPI_READY;
 80037a0:	4620      	mov	r0, r4
 80037a2:	2302      	movs	r3, #2
 80037a4:	f800 3b08 	strb.w	r3, [r0], #8
  chThdResumeI(trp, msg);
 80037a8:	2100      	movs	r1, #0
 80037aa:	f005 fac9 	bl	8008d40 <chThdResumeI>
#if SPI_USE_WAIT == TRUE
  osalThreadResumeI(&spip->thread, MSG_OK);
#endif
}
 80037ae:	bd10      	pop	{r4, pc}
  osalDbgCheck(spip != NULL);
 80037b0:	4801      	ldr	r0, [pc, #4]	; (80037b8 <spiAbortI+0x38>)
 80037b2:	f003 ffa5 	bl	8007700 <chSysHalt>
 80037b6:	e7e8      	b.n	800378a <spiAbortI+0xa>
 80037b8:	08019250 	.word	0x08019250
 80037bc:	f3af 8000 	nop.w

080037c0 <spiAbort>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiAbort(SPIDriver *spip) {
 80037c0:	b510      	push	{r4, lr}
 80037c2:	4604      	mov	r4, r0
 80037c4:	2320      	movs	r3, #32
 80037c6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80037ca:	f005 fc29 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80037ce:	f004 f927 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((spip->state == SPI_READY) || (spip->state == SPI_ACTIVE),
 80037d2:	7823      	ldrb	r3, [r4, #0]
 80037d4:	3b02      	subs	r3, #2
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d813      	bhi.n	8003804 <spiAbort+0x44>
                "invalid state");
  if (spip->state == SPI_ACTIVE) {
 80037dc:	7823      	ldrb	r3, [r4, #0]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d014      	beq.n	800380c <spiAbort+0x4c>
  _dbg_check_unlock();
 80037e2:	f004 f935 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80037e6:	f005 fc23 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <spiAbort+0x60>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d004      	beq.n	80037fc <spiAbort+0x3c>
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	6899      	ldr	r1, [r3, #8]
 80037f6:	6893      	ldr	r3, [r2, #8]
 80037f8:	4299      	cmp	r1, r3
 80037fa:	d30d      	bcc.n	8003818 <spiAbort+0x58>
 80037fc:	2300      	movs	r3, #0
 80037fe:	f383 8811 	msr	BASEPRI, r3
    spiAbortI(spip);
    osalOsRescheduleS();
  }
  osalSysUnlock();
}
 8003802:	bd10      	pop	{r4, pc}
  osalDbgAssert((spip->state == SPI_READY) || (spip->state == SPI_ACTIVE),
 8003804:	4807      	ldr	r0, [pc, #28]	; (8003824 <spiAbort+0x64>)
 8003806:	f003 ff7b 	bl	8007700 <chSysHalt>
 800380a:	e7e7      	b.n	80037dc <spiAbort+0x1c>
    spiAbortI(spip);
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff ffb7 	bl	8003780 <spiAbortI>
  chSchRescheduleS();
 8003812:	f004 fe3d 	bl	8008490 <chSchRescheduleS>
 8003816:	e7e4      	b.n	80037e2 <spiAbort+0x22>
 8003818:	4803      	ldr	r0, [pc, #12]	; (8003828 <spiAbort+0x68>)
 800381a:	f003 ff71 	bl	8007700 <chSysHalt>
 800381e:	e7ed      	b.n	80037fc <spiAbort+0x3c>
 8003820:	200050f8 	.word	0x200050f8
 8003824:	0801925c 	.word	0x0801925c
 8003828:	080191e0 	.word	0x080191e0
 800382c:	f3af 8000 	nop.w

08003830 <spiIgnore>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] n         number of words to be ignored
 *
 * @api
 */
void spiIgnore(SPIDriver *spip, size_t n) {
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	460d      	mov	r5, r1

  osalDbgCheck((spip != NULL) && (n > 0U));
 8003834:	4604      	mov	r4, r0
 8003836:	b100      	cbz	r0, 800383a <spiIgnore+0xa>
 8003838:	b911      	cbnz	r1, 8003840 <spiIgnore+0x10>
 800383a:	481e      	ldr	r0, [pc, #120]	; (80038b4 <spiIgnore+0x84>)
 800383c:	f003 ff60 	bl	8007700 <chSysHalt>
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8003840:	6863      	ldr	r3, [r4, #4]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b113      	cbz	r3, 800384c <spiIgnore+0x1c>
 8003846:	f015 0f01 	tst.w	r5, #1
 800384a:	d12b      	bne.n	80038a4 <spiIgnore+0x74>
 800384c:	2320      	movs	r3, #32
 800384e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8003852:	f005 fbe5 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003856:	f004 f8e3 	bl	8007a20 <_dbg_check_lock>
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800385a:	7823      	ldrb	r3, [r4, #0]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d002      	beq.n	8003866 <spiIgnore+0x36>
 8003860:	4814      	ldr	r0, [pc, #80]	; (80038b4 <spiIgnore+0x84>)
 8003862:	f003 ff4d 	bl	8007700 <chSysHalt>
  spiStartIgnoreI(spip, n);
 8003866:	2303      	movs	r3, #3
 8003868:	7023      	strb	r3, [r4, #0]
 800386a:	4629      	mov	r1, r5
 800386c:	4620      	mov	r0, r4
 800386e:	f002 fe47 	bl	8006500 <spi_lld_ignore>
  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 8003872:	f04f 32ff 	mov.w	r2, #4294967295
 8003876:	f04f 33ff 	mov.w	r3, #4294967295
 800387a:	f104 0008 	add.w	r0, r4, #8
 800387e:	f005 fa3f 	bl	8008d00 <chThdSuspendTimeoutS>
  _dbg_check_unlock();
 8003882:	f004 f8e5 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003886:	f005 fbd3 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <spiIgnore+0x88>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d004      	beq.n	800389c <spiIgnore+0x6c>
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	6899      	ldr	r1, [r3, #8]
 8003896:	6893      	ldr	r3, [r2, #8]
 8003898:	4299      	cmp	r1, r3
 800389a:	d307      	bcc.n	80038ac <spiIgnore+0x7c>
 800389c:	2300      	movs	r3, #0
 800389e:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 80038a4:	4803      	ldr	r0, [pc, #12]	; (80038b4 <spiIgnore+0x84>)
 80038a6:	f003 ff2b 	bl	8007700 <chSysHalt>
 80038aa:	e7cf      	b.n	800384c <spiIgnore+0x1c>
 80038ac:	4803      	ldr	r0, [pc, #12]	; (80038bc <spiIgnore+0x8c>)
 80038ae:	f003 ff27 	bl	8007700 <chSysHalt>
 80038b2:	e7f3      	b.n	800389c <spiIgnore+0x6c>
 80038b4:	08019268 	.word	0x08019268
 80038b8:	200050f8 	.word	0x200050f8
 80038bc:	080191e0 	.word	0x080191e0

080038c0 <spiExchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiExchange(SPIDriver *spip, size_t n,
                 const void *txbuf, void *rxbuf) {
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	460d      	mov	r5, r1
 80038c4:	4617      	mov	r7, r2
 80038c6:	461e      	mov	r6, r3

  osalDbgCheck((spip != NULL) && (n > 0U) &&
 80038c8:	4604      	mov	r4, r0
 80038ca:	b110      	cbz	r0, 80038d2 <spiExchange+0x12>
 80038cc:	b109      	cbz	r1, 80038d2 <spiExchange+0x12>
 80038ce:	b103      	cbz	r3, 80038d2 <spiExchange+0x12>
 80038d0:	b912      	cbnz	r2, 80038d8 <spiExchange+0x18>
 80038d2:	481f      	ldr	r0, [pc, #124]	; (8003950 <spiExchange+0x90>)
 80038d4:	f003 ff14 	bl	8007700 <chSysHalt>
               (rxbuf != NULL) && (txbuf != NULL));
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 80038d8:	6863      	ldr	r3, [r4, #4]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	b113      	cbz	r3, 80038e4 <spiExchange+0x24>
 80038de:	f015 0f01 	tst.w	r5, #1
 80038e2:	d12d      	bne.n	8003940 <spiExchange+0x80>
 80038e4:	2320      	movs	r3, #32
 80038e6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80038ea:	f005 fb99 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80038ee:	f004 f897 	bl	8007a20 <_dbg_check_lock>
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 80038f2:	7823      	ldrb	r3, [r4, #0]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d002      	beq.n	80038fe <spiExchange+0x3e>
 80038f8:	4815      	ldr	r0, [pc, #84]	; (8003950 <spiExchange+0x90>)
 80038fa:	f003 ff01 	bl	8007700 <chSysHalt>
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 80038fe:	2303      	movs	r3, #3
 8003900:	7023      	strb	r3, [r4, #0]
 8003902:	4633      	mov	r3, r6
 8003904:	463a      	mov	r2, r7
 8003906:	4629      	mov	r1, r5
 8003908:	4620      	mov	r0, r4
 800390a:	f002 fe31 	bl	8006570 <spi_lld_exchange>
 800390e:	f04f 32ff 	mov.w	r2, #4294967295
 8003912:	f04f 33ff 	mov.w	r3, #4294967295
 8003916:	f104 0008 	add.w	r0, r4, #8
 800391a:	f005 f9f1 	bl	8008d00 <chThdSuspendTimeoutS>
  _dbg_check_unlock();
 800391e:	f004 f897 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003922:	f005 fb85 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <spiExchange+0x94>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d004      	beq.n	8003938 <spiExchange+0x78>
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	6899      	ldr	r1, [r3, #8]
 8003932:	6893      	ldr	r3, [r2, #8]
 8003934:	4299      	cmp	r1, r3
 8003936:	d307      	bcc.n	8003948 <spiExchange+0x88>
 8003938:	2300      	movs	r3, #0
 800393a:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 800393e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8003940:	4803      	ldr	r0, [pc, #12]	; (8003950 <spiExchange+0x90>)
 8003942:	f003 fedd 	bl	8007700 <chSysHalt>
 8003946:	e7cd      	b.n	80038e4 <spiExchange+0x24>
 8003948:	4803      	ldr	r0, [pc, #12]	; (8003958 <spiExchange+0x98>)
 800394a:	f003 fed9 	bl	8007700 <chSysHalt>
 800394e:	e7f3      	b.n	8003938 <spiExchange+0x78>
 8003950:	08019274 	.word	0x08019274
 8003954:	200050f8 	.word	0x200050f8
 8003958:	080191e0 	.word	0x080191e0
 800395c:	f3af 8000 	nop.w

08003960 <spiSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	460d      	mov	r5, r1
 8003964:	4616      	mov	r6, r2

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 8003966:	4604      	mov	r4, r0
 8003968:	b108      	cbz	r0, 800396e <spiSend+0xe>
 800396a:	b101      	cbz	r1, 800396e <spiSend+0xe>
 800396c:	b912      	cbnz	r2, 8003974 <spiSend+0x14>
 800396e:	481f      	ldr	r0, [pc, #124]	; (80039ec <spiSend+0x8c>)
 8003970:	f003 fec6 	bl	8007700 <chSysHalt>
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8003974:	6863      	ldr	r3, [r4, #4]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	b113      	cbz	r3, 8003980 <spiSend+0x20>
 800397a:	f015 0f01 	tst.w	r5, #1
 800397e:	d12c      	bne.n	80039da <spiSend+0x7a>
 8003980:	2320      	movs	r3, #32
 8003982:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8003986:	f005 fb4b 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800398a:	f004 f849 	bl	8007a20 <_dbg_check_lock>
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800398e:	7823      	ldrb	r3, [r4, #0]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d002      	beq.n	800399a <spiSend+0x3a>
 8003994:	4815      	ldr	r0, [pc, #84]	; (80039ec <spiSend+0x8c>)
 8003996:	f003 feb3 	bl	8007700 <chSysHalt>
  spiStartSendI(spip, n, txbuf);
 800399a:	2303      	movs	r3, #3
 800399c:	7023      	strb	r3, [r4, #0]
 800399e:	4632      	mov	r2, r6
 80039a0:	4629      	mov	r1, r5
 80039a2:	4620      	mov	r0, r4
 80039a4:	f002 fe1c 	bl	80065e0 <spi_lld_send>
 80039a8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
 80039b0:	f104 0008 	add.w	r0, r4, #8
 80039b4:	f005 f9a4 	bl	8008d00 <chThdSuspendTimeoutS>
  _dbg_check_unlock();
 80039b8:	f004 f84a 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80039bc:	f005 fb38 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <spiSend+0x90>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d004      	beq.n	80039d2 <spiSend+0x72>
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	6899      	ldr	r1, [r3, #8]
 80039cc:	6893      	ldr	r3, [r2, #8]
 80039ce:	4299      	cmp	r1, r3
 80039d0:	d307      	bcc.n	80039e2 <spiSend+0x82>
 80039d2:	2300      	movs	r3, #0
 80039d4:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 80039d8:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 80039da:	4804      	ldr	r0, [pc, #16]	; (80039ec <spiSend+0x8c>)
 80039dc:	f003 fe90 	bl	8007700 <chSysHalt>
 80039e0:	e7ce      	b.n	8003980 <spiSend+0x20>
 80039e2:	4804      	ldr	r0, [pc, #16]	; (80039f4 <spiSend+0x94>)
 80039e4:	f003 fe8c 	bl	8007700 <chSysHalt>
 80039e8:	e7f3      	b.n	80039d2 <spiSend+0x72>
 80039ea:	bf00      	nop
 80039ec:	08019280 	.word	0x08019280
 80039f0:	200050f8 	.word	0x200050f8
 80039f4:	080191e0 	.word	0x080191e0
 80039f8:	f3af 8000 	nop.w
 80039fc:	f3af 8000 	nop.w

08003a00 <spiReceive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	460d      	mov	r5, r1
 8003a04:	4616      	mov	r6, r2

  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
 8003a06:	4604      	mov	r4, r0
 8003a08:	b108      	cbz	r0, 8003a0e <spiReceive+0xe>
 8003a0a:	b101      	cbz	r1, 8003a0e <spiReceive+0xe>
 8003a0c:	b912      	cbnz	r2, 8003a14 <spiReceive+0x14>
 8003a0e:	481f      	ldr	r0, [pc, #124]	; (8003a8c <spiReceive+0x8c>)
 8003a10:	f003 fe76 	bl	8007700 <chSysHalt>
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8003a14:	6863      	ldr	r3, [r4, #4]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	b113      	cbz	r3, 8003a20 <spiReceive+0x20>
 8003a1a:	f015 0f01 	tst.w	r5, #1
 8003a1e:	d12c      	bne.n	8003a7a <spiReceive+0x7a>
 8003a20:	2320      	movs	r3, #32
 8003a22:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8003a26:	f005 fafb 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003a2a:	f003 fff9 	bl	8007a20 <_dbg_check_lock>
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8003a2e:	7823      	ldrb	r3, [r4, #0]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d002      	beq.n	8003a3a <spiReceive+0x3a>
 8003a34:	4815      	ldr	r0, [pc, #84]	; (8003a8c <spiReceive+0x8c>)
 8003a36:	f003 fe63 	bl	8007700 <chSysHalt>
  spiStartReceiveI(spip, n, rxbuf);
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	7023      	strb	r3, [r4, #0]
 8003a3e:	4632      	mov	r2, r6
 8003a40:	4629      	mov	r1, r5
 8003a42:	4620      	mov	r0, r4
 8003a44:	f002 fe04 	bl	8006650 <spi_lld_receive>
 8003a48:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a50:	f104 0008 	add.w	r0, r4, #8
 8003a54:	f005 f954 	bl	8008d00 <chThdSuspendTimeoutS>
  _dbg_check_unlock();
 8003a58:	f003 fffa 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003a5c:	f005 fae8 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <spiReceive+0x90>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d004      	beq.n	8003a72 <spiReceive+0x72>
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	6899      	ldr	r1, [r3, #8]
 8003a6c:	6893      	ldr	r3, [r2, #8]
 8003a6e:	4299      	cmp	r1, r3
 8003a70:	d307      	bcc.n	8003a82 <spiReceive+0x82>
 8003a72:	2300      	movs	r3, #0
 8003a74:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 8003a78:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8003a7a:	4804      	ldr	r0, [pc, #16]	; (8003a8c <spiReceive+0x8c>)
 8003a7c:	f003 fe40 	bl	8007700 <chSysHalt>
 8003a80:	e7ce      	b.n	8003a20 <spiReceive+0x20>
 8003a82:	4804      	ldr	r0, [pc, #16]	; (8003a94 <spiReceive+0x94>)
 8003a84:	f003 fe3c 	bl	8007700 <chSysHalt>
 8003a88:	e7f3      	b.n	8003a72 <spiReceive+0x72>
 8003a8a:	bf00      	nop
 8003a8c:	08019288 	.word	0x08019288
 8003a90:	200050f8 	.word	0x200050f8
 8003a94:	080191e0 	.word	0x080191e0
 8003a98:	f3af 8000 	nop.w
 8003a9c:	f3af 8000 	nop.w

08003aa0 <spiAcquireBus>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiAcquireBus(SPIDriver *spip) {
 8003aa0:	b510      	push	{r4, lr}

  osalDbgCheck(spip != NULL);
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	b120      	cbz	r0, 8003ab0 <spiAcquireBus+0x10>
  chMtxLock(mp);
 8003aa6:	f104 000c 	add.w	r0, r4, #12
 8003aaa:	f005 fe51 	bl	8009750 <chMtxLock>

  osalMutexLock(&spip->mutex);
}
 8003aae:	bd10      	pop	{r4, pc}
  osalDbgCheck(spip != NULL);
 8003ab0:	4801      	ldr	r0, [pc, #4]	; (8003ab8 <spiAcquireBus+0x18>)
 8003ab2:	f003 fe25 	bl	8007700 <chSysHalt>
 8003ab6:	e7f6      	b.n	8003aa6 <spiAcquireBus+0x6>
 8003ab8:	08019294 	.word	0x08019294
 8003abc:	f3af 8000 	nop.w

08003ac0 <spiReleaseBus>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiReleaseBus(SPIDriver *spip) {
 8003ac0:	b510      	push	{r4, lr}

  osalDbgCheck(spip != NULL);
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	b120      	cbz	r0, 8003ad0 <spiReleaseBus+0x10>
  chMtxUnlock(mp);
 8003ac6:	f104 000c 	add.w	r0, r4, #12
 8003aca:	f005 feb1 	bl	8009830 <chMtxUnlock>

  osalMutexUnlock(&spip->mutex);
}
 8003ace:	bd10      	pop	{r4, pc}
  osalDbgCheck(spip != NULL);
 8003ad0:	4801      	ldr	r0, [pc, #4]	; (8003ad8 <spiReleaseBus+0x18>)
 8003ad2:	f003 fe15 	bl	8007700 <chSysHalt>
 8003ad6:	e7f6      	b.n	8003ac6 <spiReleaseBus+0x6>
 8003ad8:	080192a4 	.word	0x080192a4
 8003adc:	00000000 	.word	0x00000000

08003ae0 <halCommunityInit>:
#endif

#if HAL_USE_FSMC || defined(__DOXYGEN__)
  fsmcInit();
#endif
}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
	...

08003af0 <EepromFindDevice>:
const EepromDevice *EepromFindDevice(uint8_t id) {

  uint8_t i;
  const EepromDevice *drv;

  for (i = 0; i < EEPROM_TABLE_SIZE; i++) {
 8003af0:	2300      	movs	r3, #0
 8003af2:	b113      	cbz	r3, 8003afa <EepromFindDevice+0xa>
    if (drv->id == id) {
      return drv;
    }
  }

  return NULL;
 8003af4:	2200      	movs	r2, #0
}
 8003af6:	4610      	mov	r0, r2
 8003af8:	4770      	bx	lr
    drv = __eeprom_drv_table[i];
 8003afa:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <EepromFindDevice+0x1c>)
 8003afc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (drv->id == id) {
 8003b00:	7811      	ldrb	r1, [r2, #0]
 8003b02:	4281      	cmp	r1, r0
 8003b04:	d0f7      	beq.n	8003af6 <EepromFindDevice+0x6>
  for (i = 0; i < EEPROM_TABLE_SIZE; i++) {
 8003b06:	3301      	adds	r3, #1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	e7f2      	b.n	8003af2 <EepromFindDevice+0x2>
 8003b0c:	20001a00 	.word	0x20001a00

08003b10 <EepromFileOpen>:
 * @note      Fucntion allways successfully open file. All checking makes
 *            in read/write functions.
 */
EepromFileStream *EepromFileOpen(EepromFileStream *efs,
                                 const EepromFileConfig *eepcfg,
                                 const EepromDevice *eepdev) {
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	460c      	mov	r4, r1
 8003b14:	4616      	mov	r6, r2

  osalDbgAssert((efs != NULL) && (eepcfg != NULL) && (eepdev != NULL) &&
 8003b16:	4605      	mov	r5, r0
 8003b18:	b118      	cbz	r0, 8003b22 <EepromFileOpen+0x12>
 8003b1a:	b111      	cbz	r1, 8003b22 <EepromFileOpen+0x12>
 8003b1c:	b10a      	cbz	r2, 8003b22 <EepromFileOpen+0x12>
 8003b1e:	6853      	ldr	r3, [r2, #4]
 8003b20:	b913      	cbnz	r3, 8003b28 <EepromFileOpen+0x18>
 8003b22:	4815      	ldr	r0, [pc, #84]	; (8003b78 <EepromFileOpen+0x68>)
 8003b24:	f003 fdec 	bl	8007700 <chSysHalt>
             (eepdev->efsvmt != NULL), "EepromFileOpen");
  osalDbgAssert(efs->vmt != eepdev->efsvmt, "File allready opened");
 8003b28:	682a      	ldr	r2, [r5, #0]
 8003b2a:	6873      	ldr	r3, [r6, #4]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d013      	beq.n	8003b58 <EepromFileOpen+0x48>
  osalDbgAssert(eepcfg->barrier_hi > eepcfg->barrier_low, "Low barrier exceeds High barrier");
 8003b30:	6862      	ldr	r2, [r4, #4]
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d913      	bls.n	8003b60 <EepromFileOpen+0x50>
  osalDbgAssert(eepcfg->pagesize < eepcfg->size, "Pagesize cannot be lager than EEPROM size");
 8003b38:	89a2      	ldrh	r2, [r4, #12]
 8003b3a:	68a3      	ldr	r3, [r4, #8]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d213      	bcs.n	8003b68 <EepromFileOpen+0x58>
  osalDbgAssert(eepcfg->barrier_hi <= eepcfg->size, "Barrier exceeds EEPROM size");
 8003b40:	6862      	ldr	r2, [r4, #4]
 8003b42:	68a3      	ldr	r3, [r4, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d813      	bhi.n	8003b70 <EepromFileOpen+0x60>

  efs->vmt      = eepdev->efsvmt;
 8003b48:	6873      	ldr	r3, [r6, #4]
 8003b4a:	602b      	str	r3, [r5, #0]
  efs->cfg      = eepcfg;
 8003b4c:	60ec      	str	r4, [r5, #12]
  efs->errors   = FILE_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	606b      	str	r3, [r5, #4]
  efs->position = 0;
 8003b52:	60ab      	str	r3, [r5, #8]
  return (EepromFileStream *)efs;
}
 8003b54:	4628      	mov	r0, r5
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert(efs->vmt != eepdev->efsvmt, "File allready opened");
 8003b58:	4807      	ldr	r0, [pc, #28]	; (8003b78 <EepromFileOpen+0x68>)
 8003b5a:	f003 fdd1 	bl	8007700 <chSysHalt>
 8003b5e:	e7e7      	b.n	8003b30 <EepromFileOpen+0x20>
  osalDbgAssert(eepcfg->barrier_hi > eepcfg->barrier_low, "Low barrier exceeds High barrier");
 8003b60:	4805      	ldr	r0, [pc, #20]	; (8003b78 <EepromFileOpen+0x68>)
 8003b62:	f003 fdcd 	bl	8007700 <chSysHalt>
 8003b66:	e7e7      	b.n	8003b38 <EepromFileOpen+0x28>
  osalDbgAssert(eepcfg->pagesize < eepcfg->size, "Pagesize cannot be lager than EEPROM size");
 8003b68:	4803      	ldr	r0, [pc, #12]	; (8003b78 <EepromFileOpen+0x68>)
 8003b6a:	f003 fdc9 	bl	8007700 <chSysHalt>
 8003b6e:	e7e7      	b.n	8003b40 <EepromFileOpen+0x30>
  osalDbgAssert(eepcfg->barrier_hi <= eepcfg->size, "Barrier exceeds EEPROM size");
 8003b70:	4801      	ldr	r0, [pc, #4]	; (8003b78 <EepromFileOpen+0x68>)
 8003b72:	f003 fdc5 	bl	8007700 <chSysHalt>
 8003b76:	e7e7      	b.n	8003b48 <EepromFileOpen+0x38>
 8003b78:	080192b4 	.word	0x080192b4
 8003b7c:	f3af 8000 	nop.w

08003b80 <EepromReadByte>:

uint8_t EepromReadByte(EepromFileStream *efs) {
 8003b80:	b500      	push	{lr}
 8003b82:	b083      	sub	sp, #12

  uint8_t buf;
  fileStreamRead(efs, &buf, sizeof(buf));
 8003b84:	6803      	ldr	r3, [r0, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f10d 0107 	add.w	r1, sp, #7
 8003b8e:	4798      	blx	r3
  return buf;
}
 8003b90:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003b94:	b003      	add	sp, #12
 8003b96:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b9a:	bf00      	nop
 8003b9c:	f3af 8000 	nop.w

08003ba0 <EepromReadHalfword>:

uint16_t EepromReadHalfword(EepromFileStream *efs) {
 8003ba0:	b500      	push	{lr}
 8003ba2:	b083      	sub	sp, #12

  uint16_t buf;
  fileStreamRead(efs, (uint8_t *)&buf, sizeof(buf));
 8003ba4:	6803      	ldr	r3, [r0, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	f10d 0106 	add.w	r1, sp, #6
 8003bae:	4798      	blx	r3
  return buf;
}
 8003bb0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003bb4:	b003      	add	sp, #12
 8003bb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bba:	bf00      	nop
 8003bbc:	f3af 8000 	nop.w

08003bc0 <EepromReadWord>:

uint32_t EepromReadWord(EepromFileStream *efs) {
 8003bc0:	b500      	push	{lr}
 8003bc2:	b083      	sub	sp, #12

  uint32_t buf;
  fileStreamRead(efs, (uint8_t *)&buf, sizeof(buf));
 8003bc4:	6803      	ldr	r3, [r0, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	eb0d 0102 	add.w	r1, sp, r2
 8003bce:	4798      	blx	r3
  return buf;
}
 8003bd0:	9801      	ldr	r0, [sp, #4]
 8003bd2:	b003      	add	sp, #12
 8003bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bd8:	f3af 8000 	nop.w
 8003bdc:	f3af 8000 	nop.w

08003be0 <EepromWriteByte>:

size_t EepromWriteByte(EepromFileStream *efs, uint8_t data) {
 8003be0:	b510      	push	{r4, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	ab02      	add	r3, sp, #8
 8003be6:	f803 1d01 	strb.w	r1, [r3, #-1]!

  return fileStreamWrite(efs, &data, sizeof(data));
 8003bea:	6802      	ldr	r2, [r0, #0]
 8003bec:	6854      	ldr	r4, [r2, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	47a0      	blx	r4
}
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd10      	pop	{r4, pc}
 8003bf8:	f3af 8000 	nop.w
 8003bfc:	f3af 8000 	nop.w

08003c00 <EepromWriteHalfword>:

size_t EepromWriteHalfword(EepromFileStream *efs, uint16_t data) {
 8003c00:	b510      	push	{r4, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	ab02      	add	r3, sp, #8
 8003c06:	f823 1d02 	strh.w	r1, [r3, #-2]!

  return fileStreamWrite(efs, (uint8_t *)&data, sizeof(data));
 8003c0a:	6802      	ldr	r2, [r0, #0]
 8003c0c:	6854      	ldr	r4, [r2, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	4619      	mov	r1, r3
 8003c12:	47a0      	blx	r4
}
 8003c14:	b002      	add	sp, #8
 8003c16:	bd10      	pop	{r4, pc}
 8003c18:	f3af 8000 	nop.w
 8003c1c:	f3af 8000 	nop.w

08003c20 <EepromWriteWord>:

size_t EepromWriteWord(EepromFileStream *efs, uint32_t data) {
 8003c20:	b510      	push	{r4, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	ab02      	add	r3, sp, #8
 8003c26:	f843 1d04 	str.w	r1, [r3, #-4]!

  return fileStreamWrite(efs, (uint8_t *)&data, sizeof(data));
 8003c2a:	6802      	ldr	r2, [r0, #0]
 8003c2c:	6854      	ldr	r4, [r2, #4]
 8003c2e:	2204      	movs	r2, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	47a0      	blx	r4
}
 8003c34:	b002      	add	sp, #8
 8003c36:	bd10      	pop	{r4, pc}
 8003c38:	f3af 8000 	nop.w
 8003c3c:	f3af 8000 	nop.w

08003c40 <eepfs_getsize>:

msg_t eepfs_getsize(void *ip) {
 8003c40:	b510      	push	{r4, lr}

  uint32_t h, l;

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL) &&
 8003c42:	4604      	mov	r4, r0
 8003c44:	b118      	cbz	r0, 8003c4e <eepfs_getsize+0xe>
 8003c46:	6803      	ldr	r3, [r0, #0]
 8003c48:	b10b      	cbz	r3, 8003c4e <eepfs_getsize+0xe>
 8003c4a:	68c3      	ldr	r3, [r0, #12]
 8003c4c:	b913      	cbnz	r3, 8003c54 <eepfs_getsize+0x14>
 8003c4e:	4804      	ldr	r0, [pc, #16]	; (8003c60 <eepfs_getsize+0x20>)
 8003c50:	f003 fd56 	bl	8007700 <chSysHalt>
             (((EepromFileStream *)ip)->cfg != NULL));

  h = ((EepromFileStream *)ip)->cfg->barrier_hi;
 8003c54:	68e3      	ldr	r3, [r4, #12]
 8003c56:	6858      	ldr	r0, [r3, #4]
  l = ((EepromFileStream *)ip)->cfg->barrier_low;
 8003c58:	681b      	ldr	r3, [r3, #0]
  return  h - l;
}
 8003c5a:	1ac0      	subs	r0, r0, r3
 8003c5c:	bd10      	pop	{r4, pc}
 8003c5e:	bf00      	nop
 8003c60:	080192c4 	.word	0x080192c4
 8003c64:	f3af 8000 	nop.w
 8003c68:	f3af 8000 	nop.w
 8003c6c:	f3af 8000 	nop.w

08003c70 <eepfs_getposition>:

msg_t eepfs_getposition(void *ip) {
 8003c70:	b510      	push	{r4, lr}

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003c72:	4604      	mov	r4, r0
 8003c74:	b118      	cbz	r0, 8003c7e <eepfs_getposition+0xe>
 8003c76:	6803      	ldr	r3, [r0, #0]
 8003c78:	b10b      	cbz	r3, 8003c7e <eepfs_getposition+0xe>

  return ((EepromFileStream *)ip)->position;
}
 8003c7a:	68a0      	ldr	r0, [r4, #8]
 8003c7c:	bd10      	pop	{r4, pc}
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003c7e:	4802      	ldr	r0, [pc, #8]	; (8003c88 <eepfs_getposition+0x18>)
 8003c80:	f003 fd3e 	bl	8007700 <chSysHalt>
 8003c84:	e7f9      	b.n	8003c7a <eepfs_getposition+0xa>
 8003c86:	bf00      	nop
 8003c88:	080192d4 	.word	0x080192d4
 8003c8c:	f3af 8000 	nop.w

08003c90 <eepfs_lseek>:

msg_t eepfs_lseek(void *ip, fileoffset_t offset) {
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	460d      	mov	r5, r1

  uint32_t size;

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003c94:	4604      	mov	r4, r0
 8003c96:	b140      	cbz	r0, 8003caa <eepfs_lseek+0x1a>
 8003c98:	6803      	ldr	r3, [r0, #0]
 8003c9a:	b133      	cbz	r3, 8003caa <eepfs_lseek+0x1a>

  size = eepfs_getsize(ip);
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f7ff ffcf 	bl	8003c40 <eepfs_getsize>
  if (offset > size)
 8003ca2:	42a8      	cmp	r0, r5
 8003ca4:	d205      	bcs.n	8003cb2 <eepfs_lseek+0x22>
    offset = size;
  ((EepromFileStream *)ip)->position = offset;
 8003ca6:	60a0      	str	r0, [r4, #8]
  return offset;
}
 8003ca8:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003caa:	4803      	ldr	r0, [pc, #12]	; (8003cb8 <eepfs_lseek+0x28>)
 8003cac:	f003 fd28 	bl	8007700 <chSysHalt>
 8003cb0:	e7f4      	b.n	8003c9c <eepfs_lseek+0xc>
  if (offset > size)
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	e7f7      	b.n	8003ca6 <eepfs_lseek+0x16>
 8003cb6:	bf00      	nop
 8003cb8:	080192e8 	.word	0x080192e8
 8003cbc:	f3af 8000 	nop.w

08003cc0 <eepfs_close>:

msg_t eepfs_close(void *ip) {
 8003cc0:	b510      	push	{r4, lr}

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	b138      	cbz	r0, 8003cd6 <eepfs_close+0x16>
 8003cc6:	6803      	ldr	r3, [r0, #0]
 8003cc8:	b12b      	cbz	r3, 8003cd6 <eepfs_close+0x16>

  ((EepromFileStream *)ip)->errors   = FILE_OK;
 8003cca:	2000      	movs	r0, #0
 8003ccc:	6060      	str	r0, [r4, #4]
  ((EepromFileStream *)ip)->position = 0;
 8003cce:	60a0      	str	r0, [r4, #8]
  ((EepromFileStream *)ip)->vmt      = NULL;
 8003cd0:	6020      	str	r0, [r4, #0]
  ((EepromFileStream *)ip)->cfg      = NULL;
 8003cd2:	60e0      	str	r0, [r4, #12]
  return FILE_OK;
}
 8003cd4:	bd10      	pop	{r4, pc}
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003cd6:	4802      	ldr	r0, [pc, #8]	; (8003ce0 <eepfs_close+0x20>)
 8003cd8:	f003 fd12 	bl	8007700 <chSysHalt>
 8003cdc:	e7f5      	b.n	8003cca <eepfs_close+0xa>
 8003cde:	bf00      	nop
 8003ce0:	080192f4 	.word	0x080192f4
 8003ce4:	f3af 8000 	nop.w
 8003ce8:	f3af 8000 	nop.w
 8003cec:	f3af 8000 	nop.w

08003cf0 <eepfs_geterror>:

msg_t eepfs_geterror(void *ip) {
 8003cf0:	b510      	push	{r4, lr}

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	b118      	cbz	r0, 8003cfe <eepfs_geterror+0xe>
 8003cf6:	6803      	ldr	r3, [r0, #0]
 8003cf8:	b10b      	cbz	r3, 8003cfe <eepfs_geterror+0xe>
  return ((EepromFileStream *)ip)->errors;
}
 8003cfa:	6860      	ldr	r0, [r4, #4]
 8003cfc:	bd10      	pop	{r4, pc}
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003cfe:	4802      	ldr	r0, [pc, #8]	; (8003d08 <eepfs_geterror+0x18>)
 8003d00:	f003 fcfe 	bl	8007700 <chSysHalt>
 8003d04:	e7f9      	b.n	8003cfa <eepfs_geterror+0xa>
 8003d06:	bf00      	nop
 8003d08:	08019300 	.word	0x08019300
 8003d0c:	f3af 8000 	nop.w

08003d10 <eepfs_put>:
msg_t eepfs_put(void *ip, uint8_t b) {

  (void)ip;
  (void)b;
  return 0;
}
 8003d10:	2000      	movs	r0, #0
 8003d12:	4770      	bx	lr
 8003d14:	f3af 8000 	nop.w
 8003d18:	f3af 8000 	nop.w
 8003d1c:	f3af 8000 	nop.w

08003d20 <eepfs_get>:

msg_t eepfs_get(void *ip) {

  (void)ip;
  return 0;
}
 8003d20:	2000      	movs	r0, #0
 8003d22:	4770      	bx	lr
	...

08003d30 <calc_timeout>:
 */

/**
 * @brief     Calculates requred timeout.
 */
static systime_t calc_timeout(I2CDriver *i2cp, size_t txbytes, size_t rxbytes) {
 8003d30:	b538      	push	{r3, r4, r5, lr}
  (void)i2cp;
  const uint32_t bitsinbyte = 10;
  uint32_t tmo;
  tmo = ((txbytes + rxbytes + 1) * bitsinbyte * 1000);
 8003d32:	4411      	add	r1, r2
 8003d34:	f242 7310 	movw	r3, #10000	; 0x2710
 8003d38:	fb01 3103 	mla	r1, r1, r3, r3
  tmo /= EEPROM_I2C_CLOCK;
 8003d3c:	09c9      	lsrs	r1, r1, #7
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <calc_timeout+0x34>)
 8003d40:	fba3 3101 	umull	r3, r1, r3, r1
 8003d44:	0909      	lsrs	r1, r1, #4
  tmo += 10; /* some additional milliseconds to be safer */
 8003d46:	310a      	adds	r1, #10
  return TIME_MS2I(tmo);
 8003d48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	4806      	ldr	r0, [pc, #24]	; (8003d68 <calc_timeout+0x38>)
 8003d50:	f240 34e7 	movw	r4, #999	; 0x3e7
 8003d54:	2500      	movs	r5, #0
 8003d56:	fbe0 4501 	umlal	r4, r5, r0, r1
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	f013 ff7f 	bl	8017c60 <__aeabi_uldivmod>
}
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
 8003d64:	014f8b59 	.word	0x014f8b59
 8003d68:	000186a0 	.word	0x000186a0
 8003d6c:	f3af 8000 	nop.w

08003d70 <__clamp_size>:
}

/**
 * @brief   Determines and returns size of data that can be processed
 */
static size_t __clamp_size(void *ip, size_t n) {
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	4605      	mov	r5, r0
 8003d74:	460c      	mov	r4, r1

  if (((size_t)eepfs_getposition(ip) + n) > (size_t)eepfs_getsize(ip))
 8003d76:	f7ff ff7b 	bl	8003c70 <eepfs_getposition>
 8003d7a:	1906      	adds	r6, r0, r4
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f7ff ff5f 	bl	8003c40 <eepfs_getsize>
 8003d82:	4286      	cmp	r6, r0
 8003d84:	d801      	bhi.n	8003d8a <__clamp_size+0x1a>
    return eepfs_getsize(ip) - eepfs_getposition(ip);
  else
    return n;
}
 8003d86:	4620      	mov	r0, r4
 8003d88:	bd70      	pop	{r4, r5, r6, pc}
    return eepfs_getsize(ip) - eepfs_getposition(ip);
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	f7ff ff58 	bl	8003c40 <eepfs_getsize>
 8003d90:	4604      	mov	r4, r0
 8003d92:	4628      	mov	r0, r5
 8003d94:	f7ff ff6c 	bl	8003c70 <eepfs_getposition>
 8003d98:	1a24      	subs	r4, r4, r0
 8003d9a:	e7f4      	b.n	8003d86 <__clamp_size+0x16>
 8003d9c:	f3af 8000 	nop.w

08003da0 <eeprom_read>:
                         uint32_t offset, uint8_t *data, size_t len) {
 8003da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	4604      	mov	r4, r0
 8003da8:	460d      	mov	r5, r1
 8003daa:	4617      	mov	r7, r2
 8003dac:	461e      	mov	r6, r3
  systime_t tmo = calc_timeout(eepcfg->i2cp, 2, len);
 8003dae:	461a      	mov	r2, r3
 8003db0:	2102      	movs	r1, #2
 8003db2:	6940      	ldr	r0, [r0, #20]
 8003db4:	f7ff ffbc 	bl	8003d30 <calc_timeout>
 8003db8:	4680      	mov	r8, r0
  osalDbgAssert(((len <= eepcfg->size) && ((offset + len) <= eepcfg->size)),
 8003dba:	68a3      	ldr	r3, [r4, #8]
 8003dbc:	42b3      	cmp	r3, r6
 8003dbe:	d302      	bcc.n	8003dc6 <eeprom_read+0x26>
 8003dc0:	1972      	adds	r2, r6, r5
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d202      	bcs.n	8003dcc <eeprom_read+0x2c>
 8003dc6:	4812      	ldr	r0, [pc, #72]	; (8003e10 <eeprom_read+0x70>)
 8003dc8:	f003 fc9a 	bl	8007700 <chSysHalt>
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	442b      	add	r3, r5
 8003dd0:	69e2      	ldr	r2, [r4, #28]
 8003dd2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003dd6:	7013      	strb	r3, [r2, #0]
 8003dd8:	6822      	ldr	r2, [r4, #0]
 8003dda:	69e3      	ldr	r3, [r4, #28]
 8003ddc:	4415      	add	r5, r2
 8003dde:	705d      	strb	r5, [r3, #1]
  i2cAcquireBus(eepcfg->i2cp);
 8003de0:	6960      	ldr	r0, [r4, #20]
 8003de2:	f7fe f9e5 	bl	80021b0 <i2cAcquireBus>
  status = i2cMasterTransmitTimeout(eepcfg->i2cp, eepcfg->addr,
 8003de6:	8b21      	ldrh	r1, [r4, #24]
 8003de8:	f8cd 8008 	str.w	r8, [sp, #8]
 8003dec:	2300      	movs	r3, #0
 8003dee:	9303      	str	r3, [sp, #12]
 8003df0:	9601      	str	r6, [sp, #4]
 8003df2:	9700      	str	r7, [sp, #0]
 8003df4:	2302      	movs	r3, #2
 8003df6:	69e2      	ldr	r2, [r4, #28]
 8003df8:	6960      	ldr	r0, [r4, #20]
 8003dfa:	f7fe f921 	bl	8002040 <i2cMasterTransmitTimeout>
 8003dfe:	4605      	mov	r5, r0
  i2cReleaseBus(eepcfg->i2cp);
 8003e00:	6960      	ldr	r0, [r4, #20]
 8003e02:	f7fe f9e5 	bl	80021d0 <i2cReleaseBus>
}
 8003e06:	4628      	mov	r0, r5
 8003e08:	b004      	add	sp, #16
 8003e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e0e:	bf00      	nop
 8003e10:	08019310 	.word	0x08019310
 8003e14:	f3af 8000 	nop.w
 8003e18:	f3af 8000 	nop.w
 8003e1c:	f3af 8000 	nop.w

08003e20 <read>:
/**
 * Read some bytes from current position in file. After successful
 * read operation the position pointer will be increased by the number
 * of read bytes.
 */
static size_t read(void *ip, uint8_t *bp, size_t n) {
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	460e      	mov	r6, r1
 8003e24:	4614      	mov	r4, r2
  msg_t status = MSG_OK;

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003e26:	4605      	mov	r5, r0
 8003e28:	b120      	cbz	r0, 8003e34 <read+0x14>
 8003e2a:	6803      	ldr	r3, [r0, #0]
 8003e2c:	b113      	cbz	r3, 8003e34 <read+0x14>

  if (n == 0)
 8003e2e:	b92c      	cbnz	r4, 8003e3c <read+0x1c>
    return 0;
  else {
    eepfs_lseek(ip, (eepfs_getposition(ip) + n));
    return n;
  }
}
 8003e30:	4620      	mov	r0, r4
 8003e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003e34:	480f      	ldr	r0, [pc, #60]	; (8003e74 <read+0x54>)
 8003e36:	f003 fc63 	bl	8007700 <chSysHalt>
 8003e3a:	e7f8      	b.n	8003e2e <read+0xe>
  n = __clamp_size(ip, n);
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f7ff ff96 	bl	8003d70 <__clamp_size>
  if (n == 0)
 8003e44:	4604      	mov	r4, r0
 8003e46:	2800      	cmp	r0, #0
 8003e48:	d0f2      	beq.n	8003e30 <read+0x10>
  status  = eeprom_read(((I2CEepromFileStream *)ip)->cfg,
 8003e4a:	68ef      	ldr	r7, [r5, #12]
                        eepfs_getposition(ip), bp, n);
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	f7ff ff0f 	bl	8003c70 <eepfs_getposition>
  status  = eeprom_read(((I2CEepromFileStream *)ip)->cfg,
 8003e52:	4623      	mov	r3, r4
 8003e54:	4632      	mov	r2, r6
 8003e56:	4601      	mov	r1, r0
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f7ff ffa1 	bl	8003da0 <eeprom_read>
  if (status != MSG_OK)
 8003e5e:	b108      	cbz	r0, 8003e64 <read+0x44>
    return 0;
 8003e60:	2400      	movs	r4, #0
 8003e62:	e7e5      	b.n	8003e30 <read+0x10>
    eepfs_lseek(ip, (eepfs_getposition(ip) + n));
 8003e64:	4628      	mov	r0, r5
 8003e66:	f7ff ff03 	bl	8003c70 <eepfs_getposition>
 8003e6a:	1901      	adds	r1, r0, r4
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	f7ff ff0f 	bl	8003c90 <eepfs_lseek>
    return n;
 8003e72:	e7dd      	b.n	8003e30 <read+0x10>
 8003e74:	0801931c 	.word	0x0801931c
 8003e78:	f3af 8000 	nop.w
 8003e7c:	f3af 8000 	nop.w

08003e80 <eeprom_write>:
                          const uint8_t *data, size_t len) {
 8003e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e84:	b085      	sub	sp, #20
 8003e86:	4604      	mov	r4, r0
 8003e88:	460d      	mov	r5, r1
 8003e8a:	4691      	mov	r9, r2
 8003e8c:	461e      	mov	r6, r3
  systime_t tmo = calc_timeout(eepcfg->i2cp, (len + 2), 0);
 8003e8e:	1c9f      	adds	r7, r3, #2
 8003e90:	2200      	movs	r2, #0
 8003e92:	4639      	mov	r1, r7
 8003e94:	6940      	ldr	r0, [r0, #20]
 8003e96:	f7ff ff4b 	bl	8003d30 <calc_timeout>
 8003e9a:	4680      	mov	r8, r0
  osalDbgAssert(((len <= eepcfg->size) && ((offset + len) <= eepcfg->size)),
 8003e9c:	68a3      	ldr	r3, [r4, #8]
 8003e9e:	42b3      	cmp	r3, r6
 8003ea0:	d302      	bcc.n	8003ea8 <eeprom_write+0x28>
 8003ea2:	1972      	adds	r2, r6, r5
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d202      	bcs.n	8003eae <eeprom_write+0x2e>
 8003ea8:	481d      	ldr	r0, [pc, #116]	; (8003f20 <eeprom_write+0xa0>)
 8003eaa:	f003 fc29 	bl	8007700 <chSysHalt>
  osalDbgAssert((((offset + eepcfg->barrier_low) / eepcfg->pagesize) ==
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	442b      	add	r3, r5
 8003eb2:	89a2      	ldrh	r2, [r4, #12]
 8003eb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003eb8:	4433      	add	r3, r6
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	d002      	beq.n	8003eca <eeprom_write+0x4a>
 8003ec4:	4816      	ldr	r0, [pc, #88]	; (8003f20 <eeprom_write+0xa0>)
 8003ec6:	f003 fc1b 	bl	8007700 <chSysHalt>
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	442b      	add	r3, r5
 8003ece:	69e2      	ldr	r2, [r4, #28]
 8003ed0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003ed4:	7013      	strb	r3, [r2, #0]
 8003ed6:	6822      	ldr	r2, [r4, #0]
 8003ed8:	69e3      	ldr	r3, [r4, #28]
 8003eda:	4415      	add	r5, r2
 8003edc:	705d      	strb	r5, [r3, #1]
  memcpy(&(eepcfg->write_buf[2]), data, len);
 8003ede:	69e0      	ldr	r0, [r4, #28]
 8003ee0:	4632      	mov	r2, r6
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	3002      	adds	r0, #2
 8003ee6:	f014 f83b 	bl	8017f60 <memcpy>
  i2cAcquireBus(eepcfg->i2cp);
 8003eea:	6960      	ldr	r0, [r4, #20]
 8003eec:	f7fe f960 	bl	80021b0 <i2cAcquireBus>
  status = i2cMasterTransmitTimeout(eepcfg->i2cp, eepcfg->addr,
 8003ef0:	8b21      	ldrh	r1, [r4, #24]
 8003ef2:	2500      	movs	r5, #0
 8003ef4:	f8cd 8008 	str.w	r8, [sp, #8]
 8003ef8:	9503      	str	r5, [sp, #12]
 8003efa:	9501      	str	r5, [sp, #4]
 8003efc:	9500      	str	r5, [sp, #0]
 8003efe:	463b      	mov	r3, r7
 8003f00:	69e2      	ldr	r2, [r4, #28]
 8003f02:	6960      	ldr	r0, [r4, #20]
 8003f04:	f7fe f89c 	bl	8002040 <i2cMasterTransmitTimeout>
 8003f08:	4606      	mov	r6, r0
  i2cReleaseBus(eepcfg->i2cp);
 8003f0a:	6960      	ldr	r0, [r4, #20]
 8003f0c:	f7fe f960 	bl	80021d0 <i2cReleaseBus>
  chThdSleep(eepcfg->write_time);
 8003f10:	6920      	ldr	r0, [r4, #16]
 8003f12:	4629      	mov	r1, r5
 8003f14:	f004 fdfc 	bl	8008b10 <chThdSleep>
}
 8003f18:	4630      	mov	r0, r6
 8003f1a:	b005      	add	sp, #20
 8003f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f20:	08019324 	.word	0x08019324
 8003f24:	f3af 8000 	nop.w
 8003f28:	f3af 8000 	nop.w
 8003f2c:	f3af 8000 	nop.w

08003f30 <__fitted_write>:
static msg_t __fitted_write(void *ip, const uint8_t *data, size_t len, uint32_t *written) {
 8003f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f34:	4604      	mov	r4, r0
 8003f36:	460f      	mov	r7, r1
 8003f38:	4698      	mov	r8, r3
  osalDbgAssert(len > 0, "len must be greater than 0");
 8003f3a:	4615      	mov	r5, r2
 8003f3c:	b172      	cbz	r2, 8003f5c <__fitted_write+0x2c>
  status = eeprom_write(((I2CEepromFileStream *)ip)->cfg,
 8003f3e:	68e6      	ldr	r6, [r4, #12]
                        eepfs_getposition(ip), data, len);
 8003f40:	4620      	mov	r0, r4
 8003f42:	f7ff fe95 	bl	8003c70 <eepfs_getposition>
  status = eeprom_write(((I2CEepromFileStream *)ip)->cfg,
 8003f46:	462b      	mov	r3, r5
 8003f48:	463a      	mov	r2, r7
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f7ff ff97 	bl	8003e80 <eeprom_write>
  if (status == MSG_OK) {
 8003f52:	4606      	mov	r6, r0
 8003f54:	b130      	cbz	r0, 8003f64 <__fitted_write+0x34>
}
 8003f56:	4630      	mov	r0, r6
 8003f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  osalDbgAssert(len > 0, "len must be greater than 0");
 8003f5c:	4808      	ldr	r0, [pc, #32]	; (8003f80 <__fitted_write+0x50>)
 8003f5e:	f003 fbcf 	bl	8007700 <chSysHalt>
 8003f62:	e7ec      	b.n	8003f3e <__fitted_write+0xe>
    *written += len;
 8003f64:	f8d8 3000 	ldr.w	r3, [r8]
 8003f68:	442b      	add	r3, r5
 8003f6a:	f8c8 3000 	str.w	r3, [r8]
    eepfs_lseek(ip, eepfs_getposition(ip) + len);
 8003f6e:	4620      	mov	r0, r4
 8003f70:	f7ff fe7e 	bl	8003c70 <eepfs_getposition>
 8003f74:	1941      	adds	r1, r0, r5
 8003f76:	4620      	mov	r0, r4
 8003f78:	f7ff fe8a 	bl	8003c90 <eepfs_lseek>
  return status;
 8003f7c:	e7eb      	b.n	8003f56 <__fitted_write+0x26>
 8003f7e:	bf00      	nop
 8003f80:	08019334 	.word	0x08019334
 8003f84:	f3af 8000 	nop.w
 8003f88:	f3af 8000 	nop.w
 8003f8c:	f3af 8000 	nop.w

08003f90 <write>:
static size_t write(void *ip, const uint8_t *bp, size_t n) {
 8003f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	460e      	mov	r6, r1
 8003f98:	4614      	mov	r4, r2
  uint32_t written = 0;  /* total bytes successfully written */
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9301      	str	r3, [sp, #4]
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003f9e:	4605      	mov	r5, r0
 8003fa0:	b130      	cbz	r0, 8003fb0 <write+0x20>
 8003fa2:	6803      	ldr	r3, [r0, #0]
 8003fa4:	b123      	cbz	r3, 8003fb0 <write+0x20>
  if (n == 0)
 8003fa6:	b93c      	cbnz	r4, 8003fb8 <write+0x28>
}
 8003fa8:	4620      	mov	r0, r4
 8003faa:	b002      	add	sp, #8
 8003fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003fb0:	482b      	ldr	r0, [pc, #172]	; (8004060 <write+0xd0>)
 8003fb2:	f003 fba5 	bl	8007700 <chSysHalt>
 8003fb6:	e7f6      	b.n	8003fa6 <write+0x16>
  n = __clamp_size(ip, n);
 8003fb8:	4621      	mov	r1, r4
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f7ff fed8 	bl	8003d70 <__clamp_size>
  if (n == 0)
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <write+0x18>
  pagesize  =  ((EepromFileStream *)ip)->cfg->pagesize;
 8003fc6:	68eb      	ldr	r3, [r5, #12]
 8003fc8:	f8b3 800c 	ldrh.w	r8, [r3, #12]
  firstpage = (((EepromFileStream *)ip)->cfg->barrier_low +
 8003fcc:	681f      	ldr	r7, [r3, #0]
               eepfs_getposition(ip)) / pagesize;
 8003fce:	4628      	mov	r0, r5
 8003fd0:	f7ff fe4e 	bl	8003c70 <eepfs_getposition>
  firstpage = (((EepromFileStream *)ip)->cfg->barrier_low +
 8003fd4:	4438      	add	r0, r7
               eepfs_getposition(ip)) / pagesize;
 8003fd6:	46c1      	mov	r9, r8
  firstpage = (((EepromFileStream *)ip)->cfg->barrier_low +
 8003fd8:	fbb0 faf8 	udiv	sl, r0, r8
  lastpage  = (((EepromFileStream *)ip)->cfg->barrier_low +
 8003fdc:	68eb      	ldr	r3, [r5, #12]
 8003fde:	681f      	ldr	r7, [r3, #0]
               eepfs_getposition(ip) + n - 1) / pagesize;
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f7ff fe45 	bl	8003c70 <eepfs_getposition>
  lastpage  = (((EepromFileStream *)ip)->cfg->barrier_low +
 8003fe6:	183b      	adds	r3, r7, r0
               eepfs_getposition(ip) + n - 1) / pagesize;
 8003fe8:	4423      	add	r3, r4
 8003fea:	3b01      	subs	r3, #1
  lastpage  = (((EepromFileStream *)ip)->cfg->barrier_low +
 8003fec:	fbb3 f3f8 	udiv	r3, r3, r8
  if (firstpage == lastpage) {
 8003ff0:	459a      	cmp	sl, r3
 8003ff2:	d01f      	beq.n	8004034 <write+0xa4>
    len =  ((firstpage + 1) * pagesize) - eepfs_getposition(ip);
 8003ff4:	fb0a 8808 	mla	r8, sl, r8, r8
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f7ff fe39 	bl	8003c70 <eepfs_getposition>
 8003ffe:	eba8 0800 	sub.w	r8, r8, r0
    len -= ((EepromFileStream *)ip)->cfg->barrier_low;
 8004002:	68eb      	ldr	r3, [r5, #12]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	eba8 0800 	sub.w	r8, r8, r0
    if (__fitted_write(ip, bp, len, &written) != MSG_OK)
 800400a:	ab01      	add	r3, sp, #4
 800400c:	4642      	mov	r2, r8
 800400e:	4631      	mov	r1, r6
 8004010:	4628      	mov	r0, r5
 8004012:	f7ff ff8d 	bl	8003f30 <__fitted_write>
 8004016:	b9a8      	cbnz	r0, 8004044 <write+0xb4>
    bp += len;
 8004018:	4446      	add	r6, r8
    while ((n - written) > pagesize) {
 800401a:	9b01      	ldr	r3, [sp, #4]
 800401c:	1ae2      	subs	r2, r4, r3
 800401e:	4591      	cmp	r9, r2
 8004020:	d214      	bcs.n	800404c <write+0xbc>
      if (__fitted_write(ip, bp, len, &written) != MSG_OK)
 8004022:	ab01      	add	r3, sp, #4
 8004024:	464a      	mov	r2, r9
 8004026:	4631      	mov	r1, r6
 8004028:	4628      	mov	r0, r5
 800402a:	f7ff ff81 	bl	8003f30 <__fitted_write>
 800402e:	b958      	cbnz	r0, 8004048 <write+0xb8>
      bp += len;
 8004030:	444e      	add	r6, r9
 8004032:	e7f2      	b.n	800401a <write+0x8a>
    __fitted_write(ip, bp, len, &written);
 8004034:	ab01      	add	r3, sp, #4
 8004036:	4622      	mov	r2, r4
 8004038:	4631      	mov	r1, r6
 800403a:	4628      	mov	r0, r5
 800403c:	f7ff ff78 	bl	8003f30 <__fitted_write>
    return written;
 8004040:	9c01      	ldr	r4, [sp, #4]
 8004042:	e7b1      	b.n	8003fa8 <write+0x18>
      return written;
 8004044:	9c01      	ldr	r4, [sp, #4]
 8004046:	e7af      	b.n	8003fa8 <write+0x18>
        return written;
 8004048:	9c01      	ldr	r4, [sp, #4]
 800404a:	e7ad      	b.n	8003fa8 <write+0x18>
    if (len == 0)
 800404c:	b90a      	cbnz	r2, 8004052 <write+0xc2>
      return written;
 800404e:	461c      	mov	r4, r3
 8004050:	e7aa      	b.n	8003fa8 <write+0x18>
      __fitted_write(ip, bp, len, &written);
 8004052:	ab01      	add	r3, sp, #4
 8004054:	4631      	mov	r1, r6
 8004056:	4628      	mov	r0, r5
 8004058:	f7ff ff6a 	bl	8003f30 <__fitted_write>
  return written;
 800405c:	9c01      	ldr	r4, [sp, #4]
 800405e:	e7a3      	b.n	8003fa8 <write+0x18>
 8004060:	08019344 	.word	0x08019344
	...

08004070 <nvicEnableVector>:

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004070:	0109      	lsls	r1, r1, #4
 8004072:	b2c9      	uxtb	r1, r1
 8004074:	4a07      	ldr	r2, [pc, #28]	; (8004094 <nvicEnableVector+0x24>)
 8004076:	1813      	adds	r3, r2, r0
 8004078:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800407c:	f000 011f 	and.w	r1, r0, #31
 8004080:	0940      	lsrs	r0, r0, #5
 8004082:	2301      	movs	r3, #1
 8004084:	408b      	lsls	r3, r1
 8004086:	f100 0160 	add.w	r1, r0, #96	; 0x60
 800408a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800408e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8004092:	4770      	bx	lr
 8004094:	e000e100 	.word	0xe000e100
 8004098:	f3af 8000 	nop.w
 800409c:	f3af 8000 	nop.w

080040a0 <nvicDisableVector>:
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80040a0:	f000 031f 	and.w	r3, r0, #31
 80040a4:	0942      	lsrs	r2, r0, #5
 80040a6:	2101      	movs	r1, #1
 80040a8:	4099      	lsls	r1, r3
 80040aa:	4b04      	ldr	r3, [pc, #16]	; (80040bc <nvicDisableVector+0x1c>)
 80040ac:	3220      	adds	r2, #32
 80040ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80040b2:	4403      	add	r3, r0
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
#endif
}
 80040ba:	4770      	bx	lr
 80040bc:	e000e100 	.word	0xe000e100

080040c0 <nvicSetSystemHandlerPriority>:
 * @brief   Changes the priority of a system handler.
 *
 * @param[in] handler   the system handler number
 * @param[in] prio      the system handler priority
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4604      	mov	r4, r0
 80040c4:	460d      	mov	r5, r1

  osalDbgCheck(handler < 12U);
 80040c6:	280b      	cmp	r0, #11
 80040c8:	d807      	bhi.n	80040da <nvicSetSystemHandlerPriority+0x1a>
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
#else
  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 80040ca:	012d      	lsls	r5, r5, #4
 80040cc:	b2ed      	uxtb	r5, r5
 80040ce:	f104 4060 	add.w	r0, r4, #3758096384	; 0xe0000000
 80040d2:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 80040d6:	7605      	strb	r5, [r0, #24]
#endif
}
 80040d8:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(handler < 12U);
 80040da:	4802      	ldr	r0, [pc, #8]	; (80040e4 <nvicSetSystemHandlerPriority+0x24>)
 80040dc:	f003 fb10 	bl	8007700 <chSysHalt>
 80040e0:	e7f3      	b.n	80040ca <nvicSetSystemHandlerPriority+0xa>
 80040e2:	bf00      	nop
 80040e4:	08019374 	.word	0x08019374
 80040e8:	f3af 8000 	nop.w
 80040ec:	f3af 8000 	nop.w

080040f0 <nvicClearPending>:
 *
 * @param[in] n         the interrupt number
 */
void nvicClearPending(uint32_t n) {

  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80040f0:	f000 021f 	and.w	r2, r0, #31
 80040f4:	0940      	lsrs	r0, r0, #5
 80040f6:	2301      	movs	r3, #1
 80040f8:	4093      	lsls	r3, r2
 80040fa:	3060      	adds	r0, #96	; 0x60
 80040fc:	4a01      	ldr	r2, [pc, #4]	; (8004104 <nvicClearPending+0x14>)
 80040fe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8004102:	4770      	bx	lr
 8004104:	e000e100 	.word	0xe000e100
	...

08004110 <Vector5C>:
/**
 * @brief   EXTI[1] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector5C) {
 8004110:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 8004112:	f004 ff5d 	bl	8008fd0 <_stats_increase_irq>
 8004116:	4816      	ldr	r0, [pc, #88]	; (8004170 <Vector5C+0x60>)
 8004118:	f003 fdb2 	bl	8007c80 <_trace_isr_enter>
 800411c:	f003 fce0 	bl	8007ae0 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8004120:	4a14      	ldr	r2, [pc, #80]	; (8004174 <Vector5C+0x64>)
 8004122:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8004124:	6811      	ldr	r1, [r2, #0]
 8004126:	f001 0102 	and.w	r1, r1, #2
 800412a:	400b      	ands	r3, r1
  EXTI->PR = pr;
 800412c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 1);
 800412e:	b1bb      	cbz	r3, 8004160 <Vector5C+0x50>
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <Vector5C+0x68>)
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	b113      	cbz	r3, 800413c <Vector5C+0x2c>
 8004136:	4a10      	ldr	r2, [pc, #64]	; (8004178 <Vector5C+0x68>)
 8004138:	69d0      	ldr	r0, [r2, #28]
 800413a:	4798      	blx	r3
 800413c:	2320      	movs	r3, #32
 800413e:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8004142:	f004 ff7d 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8004146:	f003 fc9b 	bl	8007a80 <_dbg_check_lock_from_isr>
  chThdDequeueAllI(tqp, msg);
 800414a:	2100      	movs	r1, #0
 800414c:	480b      	ldr	r0, [pc, #44]	; (800417c <Vector5C+0x6c>)
 800414e:	f004 fe87 	bl	8008e60 <chThdDequeueAllI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8004152:	f003 fcad 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8004156:	f004 ff7b 	bl	8009050 <_stats_stop_measure_crit_isr>
 800415a:	2300      	movs	r3, #0
 800415c:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
 8004160:	f003 fcde 	bl	8007b20 <_dbg_check_leave_isr>
 8004164:	4802      	ldr	r0, [pc, #8]	; (8004170 <Vector5C+0x60>)
 8004166:	f003 fdb3 	bl	8007cd0 <_trace_isr_leave>
 800416a:	f007 fd39 	bl	800bbe0 <_port_irq_epilogue>
}
 800416e:	bd08      	pop	{r3, pc}
 8004170:	08019394 	.word	0x08019394
 8004174:	40013c00 	.word	0x40013c00
 8004178:	200046e8 	.word	0x200046e8
 800417c:	200046f8 	.word	0x200046f8

08004180 <Vector60>:
/**
 * @brief   EXTI[2] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector60) {
 8004180:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 8004182:	f004 ff25 	bl	8008fd0 <_stats_increase_irq>
 8004186:	4816      	ldr	r0, [pc, #88]	; (80041e0 <Vector60+0x60>)
 8004188:	f003 fd7a 	bl	8007c80 <_trace_isr_enter>
 800418c:	f003 fca8 	bl	8007ae0 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8004190:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <Vector60+0x64>)
 8004192:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8004194:	6811      	ldr	r1, [r2, #0]
 8004196:	f001 0104 	and.w	r1, r1, #4
 800419a:	400b      	ands	r3, r1
  EXTI->PR = pr;
 800419c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 2);
 800419e:	b1bb      	cbz	r3, 80041d0 <Vector60+0x50>
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <Vector60+0x68>)
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	b113      	cbz	r3, 80041ac <Vector60+0x2c>
 80041a6:	4a10      	ldr	r2, [pc, #64]	; (80041e8 <Vector60+0x68>)
 80041a8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80041aa:	4798      	blx	r3
 80041ac:	2320      	movs	r3, #32
 80041ae:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80041b2:	f004 ff45 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80041b6:	f003 fc63 	bl	8007a80 <_dbg_check_lock_from_isr>
 80041ba:	2100      	movs	r1, #0
 80041bc:	480b      	ldr	r0, [pc, #44]	; (80041ec <Vector60+0x6c>)
 80041be:	f004 fe4f 	bl	8008e60 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 80041c2:	f003 fc75 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80041c6:	f004 ff43 	bl	8009050 <_stats_stop_measure_crit_isr>
 80041ca:	2300      	movs	r3, #0
 80041cc:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
 80041d0:	f003 fca6 	bl	8007b20 <_dbg_check_leave_isr>
 80041d4:	4802      	ldr	r0, [pc, #8]	; (80041e0 <Vector60+0x60>)
 80041d6:	f003 fd7b 	bl	8007cd0 <_trace_isr_leave>
 80041da:	f007 fd01 	bl	800bbe0 <_port_irq_epilogue>
}
 80041de:	bd08      	pop	{r3, pc}
 80041e0:	080193a0 	.word	0x080193a0
 80041e4:	40013c00 	.word	0x40013c00
 80041e8:	200046e8 	.word	0x200046e8
 80041ec:	20004708 	.word	0x20004708

080041f0 <Vector64>:
/**
 * @brief   EXTI[3] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector64) {
 80041f0:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 80041f2:	f004 feed 	bl	8008fd0 <_stats_increase_irq>
 80041f6:	4816      	ldr	r0, [pc, #88]	; (8004250 <Vector64+0x60>)
 80041f8:	f003 fd42 	bl	8007c80 <_trace_isr_enter>
 80041fc:	f003 fc70 	bl	8007ae0 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8004200:	4a14      	ldr	r2, [pc, #80]	; (8004254 <Vector64+0x64>)
 8004202:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8004204:	6811      	ldr	r1, [r2, #0]
 8004206:	f001 0108 	and.w	r1, r1, #8
 800420a:	400b      	ands	r3, r1
  EXTI->PR = pr;
 800420c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 3);
 800420e:	b1bb      	cbz	r3, 8004240 <Vector64+0x50>
 8004210:	4b11      	ldr	r3, [pc, #68]	; (8004258 <Vector64+0x68>)
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	b113      	cbz	r3, 800421c <Vector64+0x2c>
 8004216:	4a10      	ldr	r2, [pc, #64]	; (8004258 <Vector64+0x68>)
 8004218:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 800421a:	4798      	blx	r3
 800421c:	2320      	movs	r3, #32
 800421e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8004222:	f004 ff0d 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8004226:	f003 fc2b 	bl	8007a80 <_dbg_check_lock_from_isr>
 800422a:	2100      	movs	r1, #0
 800422c:	480b      	ldr	r0, [pc, #44]	; (800425c <Vector64+0x6c>)
 800422e:	f004 fe17 	bl	8008e60 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 8004232:	f003 fc3d 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8004236:	f004 ff0b 	bl	8009050 <_stats_stop_measure_crit_isr>
 800423a:	2300      	movs	r3, #0
 800423c:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
 8004240:	f003 fc6e 	bl	8007b20 <_dbg_check_leave_isr>
 8004244:	4802      	ldr	r0, [pc, #8]	; (8004250 <Vector64+0x60>)
 8004246:	f003 fd43 	bl	8007cd0 <_trace_isr_leave>
 800424a:	f007 fcc9 	bl	800bbe0 <_port_irq_epilogue>
}
 800424e:	bd08      	pop	{r3, pc}
 8004250:	080193ac 	.word	0x080193ac
 8004254:	40013c00 	.word	0x40013c00
 8004258:	200046e8 	.word	0x200046e8
 800425c:	20004718 	.word	0x20004718

08004260 <Vector68>:
/**
 * @brief   EXTI[4] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector68) {
 8004260:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 8004262:	f004 feb5 	bl	8008fd0 <_stats_increase_irq>
 8004266:	4816      	ldr	r0, [pc, #88]	; (80042c0 <Vector68+0x60>)
 8004268:	f003 fd0a 	bl	8007c80 <_trace_isr_enter>
 800426c:	f003 fc38 	bl	8007ae0 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8004270:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <Vector68+0x64>)
 8004272:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8004274:	6811      	ldr	r1, [r2, #0]
 8004276:	f001 0110 	and.w	r1, r1, #16
 800427a:	400b      	ands	r3, r1
  EXTI->PR = pr;
 800427c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 4);
 800427e:	b1bb      	cbz	r3, 80042b0 <Vector68+0x50>
 8004280:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <Vector68+0x68>)
 8004282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004284:	b113      	cbz	r3, 800428c <Vector68+0x2c>
 8004286:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <Vector68+0x68>)
 8004288:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800428a:	4798      	blx	r3
 800428c:	2320      	movs	r3, #32
 800428e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8004292:	f004 fed5 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8004296:	f003 fbf3 	bl	8007a80 <_dbg_check_lock_from_isr>
 800429a:	2100      	movs	r1, #0
 800429c:	480b      	ldr	r0, [pc, #44]	; (80042cc <Vector68+0x6c>)
 800429e:	f004 fddf 	bl	8008e60 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 80042a2:	f003 fc05 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80042a6:	f004 fed3 	bl	8009050 <_stats_stop_measure_crit_isr>
 80042aa:	2300      	movs	r3, #0
 80042ac:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
 80042b0:	f003 fc36 	bl	8007b20 <_dbg_check_leave_isr>
 80042b4:	4802      	ldr	r0, [pc, #8]	; (80042c0 <Vector68+0x60>)
 80042b6:	f003 fd0b 	bl	8007cd0 <_trace_isr_leave>
 80042ba:	f007 fc91 	bl	800bbe0 <_port_irq_epilogue>
}
 80042be:	bd08      	pop	{r3, pc}
 80042c0:	080193b8 	.word	0x080193b8
 80042c4:	40013c00 	.word	0x40013c00
 80042c8:	200046e8 	.word	0x200046e8
 80042cc:	20004728 	.word	0x20004728

080042d0 <Vector9C>:
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 80042d0:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 80042d2:	f004 fe7d 	bl	8008fd0 <_stats_increase_irq>
 80042d6:	484f      	ldr	r0, [pc, #316]	; (8004414 <Vector9C+0x144>)
 80042d8:	f003 fcd2 	bl	8007c80 <_trace_isr_enter>
 80042dc:	f003 fc00 	bl	8007ae0 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 80042e0:	4b4d      	ldr	r3, [pc, #308]	; (8004418 <Vector9C+0x148>)
 80042e2:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
 80042ea:	4014      	ands	r4, r2
                     (1U << 9));
  EXTI->PR = pr;
 80042ec:	615c      	str	r4, [r3, #20]

  exti_serve_irq(pr, 5);
 80042ee:	f014 0f20 	tst.w	r4, #32
 80042f2:	d017      	beq.n	8004324 <Vector9C+0x54>
 80042f4:	4b49      	ldr	r3, [pc, #292]	; (800441c <Vector9C+0x14c>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	b113      	cbz	r3, 8004300 <Vector9C+0x30>
 80042fa:	4a48      	ldr	r2, [pc, #288]	; (800441c <Vector9C+0x14c>)
 80042fc:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80042fe:	4798      	blx	r3
 8004300:	2320      	movs	r3, #32
 8004302:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8004306:	f004 fe9b 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800430a:	f003 fbb9 	bl	8007a80 <_dbg_check_lock_from_isr>
 800430e:	2100      	movs	r1, #0
 8004310:	4843      	ldr	r0, [pc, #268]	; (8004420 <Vector9C+0x150>)
 8004312:	f004 fda5 	bl	8008e60 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 8004316:	f003 fbcb 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800431a:	f004 fe99 	bl	8009050 <_stats_stop_measure_crit_isr>
 800431e:	2300      	movs	r3, #0
 8004320:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 6);
 8004324:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004328:	d017      	beq.n	800435a <Vector9C+0x8a>
 800432a:	4b3c      	ldr	r3, [pc, #240]	; (800441c <Vector9C+0x14c>)
 800432c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800432e:	b113      	cbz	r3, 8004336 <Vector9C+0x66>
 8004330:	4a3a      	ldr	r2, [pc, #232]	; (800441c <Vector9C+0x14c>)
 8004332:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8004334:	4798      	blx	r3
 8004336:	2320      	movs	r3, #32
 8004338:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800433c:	f004 fe80 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8004340:	f003 fb9e 	bl	8007a80 <_dbg_check_lock_from_isr>
 8004344:	2100      	movs	r1, #0
 8004346:	4837      	ldr	r0, [pc, #220]	; (8004424 <Vector9C+0x154>)
 8004348:	f004 fd8a 	bl	8008e60 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 800434c:	f003 fbb0 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8004350:	f004 fe7e 	bl	8009050 <_stats_stop_measure_crit_isr>
 8004354:	2300      	movs	r3, #0
 8004356:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 7);
 800435a:	f014 0f80 	tst.w	r4, #128	; 0x80
 800435e:	d017      	beq.n	8004390 <Vector9C+0xc0>
 8004360:	4b2e      	ldr	r3, [pc, #184]	; (800441c <Vector9C+0x14c>)
 8004362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004364:	b113      	cbz	r3, 800436c <Vector9C+0x9c>
 8004366:	4a2d      	ldr	r2, [pc, #180]	; (800441c <Vector9C+0x14c>)
 8004368:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 800436a:	4798      	blx	r3
 800436c:	2320      	movs	r3, #32
 800436e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8004372:	f004 fe65 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8004376:	f003 fb83 	bl	8007a80 <_dbg_check_lock_from_isr>
 800437a:	2100      	movs	r1, #0
 800437c:	482a      	ldr	r0, [pc, #168]	; (8004428 <Vector9C+0x158>)
 800437e:	f004 fd6f 	bl	8008e60 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 8004382:	f003 fb95 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8004386:	f004 fe63 	bl	8009050 <_stats_stop_measure_crit_isr>
 800438a:	2300      	movs	r3, #0
 800438c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 8);
 8004390:	f414 7f80 	tst.w	r4, #256	; 0x100
 8004394:	d019      	beq.n	80043ca <Vector9C+0xfa>
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <Vector9C+0x14c>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	b11b      	cbz	r3, 80043a6 <Vector9C+0xd6>
 800439e:	4a1f      	ldr	r2, [pc, #124]	; (800441c <Vector9C+0x14c>)
 80043a0:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80043a4:	4798      	blx	r3
 80043a6:	2320      	movs	r3, #32
 80043a8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80043ac:	f004 fe48 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80043b0:	f003 fb66 	bl	8007a80 <_dbg_check_lock_from_isr>
 80043b4:	2100      	movs	r1, #0
 80043b6:	481d      	ldr	r0, [pc, #116]	; (800442c <Vector9C+0x15c>)
 80043b8:	f004 fd52 	bl	8008e60 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 80043bc:	f003 fb78 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80043c0:	f004 fe46 	bl	8009050 <_stats_stop_measure_crit_isr>
 80043c4:	2300      	movs	r3, #0
 80043c6:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 9);
 80043ca:	f414 7f00 	tst.w	r4, #512	; 0x200
 80043ce:	d019      	beq.n	8004404 <Vector9C+0x134>
 80043d0:	4b12      	ldr	r3, [pc, #72]	; (800441c <Vector9C+0x14c>)
 80043d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d6:	b11b      	cbz	r3, 80043e0 <Vector9C+0x110>
 80043d8:	4a10      	ldr	r2, [pc, #64]	; (800441c <Vector9C+0x14c>)
 80043da:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
 80043de:	4798      	blx	r3
 80043e0:	2320      	movs	r3, #32
 80043e2:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80043e6:	f004 fe2b 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80043ea:	f003 fb49 	bl	8007a80 <_dbg_check_lock_from_isr>
 80043ee:	2100      	movs	r1, #0
 80043f0:	480f      	ldr	r0, [pc, #60]	; (8004430 <Vector9C+0x160>)
 80043f2:	f004 fd35 	bl	8008e60 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 80043f6:	f003 fb5b 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80043fa:	f004 fe29 	bl	8009050 <_stats_stop_measure_crit_isr>
 80043fe:	2300      	movs	r3, #0
 8004400:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
 8004404:	f003 fb8c 	bl	8007b20 <_dbg_check_leave_isr>
 8004408:	4802      	ldr	r0, [pc, #8]	; (8004414 <Vector9C+0x144>)
 800440a:	f003 fc61 	bl	8007cd0 <_trace_isr_leave>
 800440e:	f007 fbe7 	bl	800bbe0 <_port_irq_epilogue>
}
 8004412:	bd10      	pop	{r4, pc}
 8004414:	080193c4 	.word	0x080193c4
 8004418:	40013c00 	.word	0x40013c00
 800441c:	200046e8 	.word	0x200046e8
 8004420:	20004738 	.word	0x20004738
 8004424:	20004748 	.word	0x20004748
 8004428:	20004758 	.word	0x20004758
 800442c:	20004768 	.word	0x20004768
 8004430:	20004778 	.word	0x20004778
 8004434:	f3af 8000 	nop.w
 8004438:	f3af 8000 	nop.w
 800443c:	f3af 8000 	nop.w

08004440 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 8004440:	b508      	push	{r3, lr}

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8004442:	2100      	movs	r1, #0
 8004444:	2006      	movs	r0, #6
 8004446:	f7ff fe13 	bl	8004070 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 800444a:	2106      	movs	r1, #6
 800444c:	2007      	movs	r0, #7
 800444e:	f7ff fe0f 	bl	8004070 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8004452:	2106      	movs	r1, #6
 8004454:	2008      	movs	r0, #8
 8004456:	f7ff fe0b 	bl	8004070 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 800445a:	2106      	movs	r1, #6
 800445c:	2009      	movs	r0, #9
 800445e:	f7ff fe07 	bl	8004070 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 8004462:	2106      	movs	r1, #6
 8004464:	200a      	movs	r0, #10
 8004466:	f7ff fe03 	bl	8004070 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 800446a:	2106      	movs	r1, #6
 800446c:	2017      	movs	r0, #23
 800446e:	f7ff fdff 	bl	8004070 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8004472:	2101      	movs	r1, #1
 8004474:	2028      	movs	r0, #40	; 0x28
 8004476:	f7ff fdfb 	bl	8004070 <nvicEnableVector>
#endif
}
 800447a:	bd08      	pop	{r3, pc}
 800447c:	f3af 8000 	nop.w

08004480 <irqDeinit>:
/**
 * @brief   Disables IRQ sources.
 *
 * @notapi
 */
void irqDeinit(void) {
 8004480:	b508      	push	{r3, lr}

#if HAL_USE_PAL
  nvicDisableVector(EXTI0_IRQn);
 8004482:	2006      	movs	r0, #6
 8004484:	f7ff fe0c 	bl	80040a0 <nvicDisableVector>
  nvicDisableVector(EXTI1_IRQn);
 8004488:	2007      	movs	r0, #7
 800448a:	f7ff fe09 	bl	80040a0 <nvicDisableVector>
  nvicDisableVector(EXTI2_IRQn);
 800448e:	2008      	movs	r0, #8
 8004490:	f7ff fe06 	bl	80040a0 <nvicDisableVector>
  nvicDisableVector(EXTI3_IRQn);
 8004494:	2009      	movs	r0, #9
 8004496:	f7ff fe03 	bl	80040a0 <nvicDisableVector>
  nvicDisableVector(EXTI4_IRQn);
 800449a:	200a      	movs	r0, #10
 800449c:	f7ff fe00 	bl	80040a0 <nvicDisableVector>
  nvicDisableVector(EXTI9_5_IRQn);
 80044a0:	2017      	movs	r0, #23
 80044a2:	f7ff fdfd 	bl	80040a0 <nvicDisableVector>
  nvicDisableVector(EXTI15_10_IRQn);
 80044a6:	2028      	movs	r0, #40	; 0x28
 80044a8:	f7ff fdfa 	bl	80040a0 <nvicDisableVector>
#endif
}
 80044ac:	bd08      	pop	{r3, pc}
 80044ae:	bf00      	nop

080044b0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80044b0:	4a12      	ldr	r2, [pc, #72]	; (80044fc <hal_lld_backup_domain_init+0x4c>)
 80044b2:	6813      	ldr	r3, [r2, #0]
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80044ba:	4b11      	ldr	r3, [pc, #68]	; (8004500 <hal_lld_backup_domain_init+0x50>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c6:	d005      	beq.n	80044d4 <hal_lld_backup_domain_init+0x24>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80044c8:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <hal_lld_backup_domain_init+0x50>)
 80044ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044ce:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80044d0:	2200      	movs	r2, #0
 80044d2:	671a      	str	r2, [r3, #112]	; 0x70
#endif

#if HAL_USE_RTC
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <hal_lld_backup_domain_init+0x50>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80044dc:	d108      	bne.n	80044f0 <hal_lld_backup_domain_init+0x40>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 80044de:	4b08      	ldr	r3, [pc, #32]	; (8004500 <hal_lld_backup_domain_init+0x50>)
 80044e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e6:	671a      	str	r2, [r3, #112]	; 0x70

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 80044e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ee:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80044f0:	4a02      	ldr	r2, [pc, #8]	; (80044fc <hal_lld_backup_domain_init+0x4c>)
 80044f2:	6853      	ldr	r3, [r2, #4]
 80044f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044f8:	6053      	str	r3, [r2, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
 80044fa:	4770      	bx	lr
 80044fc:	40007000 	.word	0x40007000
 8004500:	40023800 	.word	0x40023800
 8004504:	f3af 8000 	nop.w
 8004508:	f3af 8000 	nop.w
 800450c:	f3af 8000 	nop.w

08004510 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8004510:	b508      	push	{r3, lr}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8004512:	4b19      	ldr	r3, [pc, #100]	; (8004578 <hal_lld_init+0x68>)
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 800451a:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
 800451e:	611a      	str	r2, [r3, #16]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004526:	611a      	str	r2, [r3, #16]
 8004528:	691a      	ldr	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	f04f 30ff 	mov.w	r0, #4294967295
 8004530:	6158      	str	r0, [r3, #20]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	2100      	movs	r1, #0
 8004536:	6159      	str	r1, [r3, #20]
 8004538:	695a      	ldr	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800453a:	6a1a      	ldr	r2, [r3, #32]
 800453c:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8004540:	621a      	str	r2, [r3, #32]
 8004542:	6a1a      	ldr	r2, [r3, #32]
 8004544:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004548:	621a      	str	r2, [r3, #32]
 800454a:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 800454c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800454e:	6258      	str	r0, [r3, #36]	; 0x24
 8004550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004552:	6259      	str	r1, [r3, #36]	; 0x24
 8004554:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8004556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004558:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
 800455e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004560:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004564:	661a      	str	r2, [r3, #96]	; 0x60
 8004566:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 8004568:	f7ff ffa2 	bl	80044b0 <hal_lld_backup_domain_init>

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800456c:	f000 fb18 	bl	8004ba0 <dmaInit>
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 8004570:	f7ff ff66 	bl	8004440 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8004574:	bd08      	pop	{r3, pc}
 8004576:	bf00      	nop
 8004578:	40023800 	.word	0x40023800
 800457c:	f3af 8000 	nop.w

08004580 <stm32_clock_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8004580:	4b3b      	ldr	r3, [pc, #236]	; (8004670 <stm32_clock_init+0xf0>)
 8004582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004586:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8004588:	4a3a      	ldr	r2, [pc, #232]	; (8004674 <stm32_clock_init+0xf4>)
 800458a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800458e:	6011      	str	r1, [r2, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004598:	4b35      	ldr	r3, [pc, #212]	; (8004670 <stm32_clock_init+0xf0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f013 0f02 	tst.w	r3, #2
 80045a0:	d0fa      	beq.n	8004598 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80045a2:	4a33      	ldr	r2, [pc, #204]	; (8004670 <stm32_clock_init+0xf0>)
 80045a4:	6893      	ldr	r3, [r2, #8]
 80045a6:	f023 0303 	bic.w	r3, r3, #3
 80045aa:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80045ac:	4b30      	ldr	r3, [pc, #192]	; (8004670 <stm32_clock_init+0xf0>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f013 0f0c 	tst.w	r3, #12
 80045b4:	d1fa      	bne.n	80045ac <stm32_clock_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80045b6:	4b2e      	ldr	r3, [pc, #184]	; (8004670 <stm32_clock_init+0xf0>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 80045be:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80045c0:	2200      	movs	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045ca:	601a      	str	r2, [r3, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80045cc:	4b28      	ldr	r3, [pc, #160]	; (8004670 <stm32_clock_init+0xf0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045d4:	d0fa      	beq.n	80045cc <stm32_clock_init+0x4c>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80045d6:	4a26      	ldr	r2, [pc, #152]	; (8004670 <stm32_clock_init+0xf0>)
 80045d8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80045e0:	4b23      	ldr	r3, [pc, #140]	; (8004670 <stm32_clock_init+0xf0>)
 80045e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e4:	f013 0f02 	tst.w	r3, #2
 80045e8:	d0fa      	beq.n	80045e0 <stm32_clock_init+0x60>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <stm32_clock_init+0xf0>)
 80045ec:	4a22      	ldr	r2, [pc, #136]	; (8004678 <stm32_clock_init+0xf8>)
 80045ee:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80045f6:	601a      	str	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80045f8:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <stm32_clock_init+0xf4>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004600:	d0fa      	beq.n	80045f8 <stm32_clock_init+0x78>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8004602:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <stm32_clock_init+0xf0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800460a:	d0fa      	beq.n	8004602 <stm32_clock_init+0x82>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800460c:	4b18      	ldr	r3, [pc, #96]	; (8004670 <stm32_clock_init+0xf0>)
 800460e:	4a1b      	ldr	r2, [pc, #108]	; (800467c <stm32_clock_init+0xfc>)
 8004610:	609a      	str	r2, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8004612:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <stm32_clock_init+0x100>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b1b      	ldr	r3, [pc, #108]	; (8004684 <stm32_clock_init+0x104>)
 8004618:	429a      	cmp	r2, r3
 800461a:	d01f      	beq.n	800465c <stm32_clock_init+0xdc>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800461c:	4b1a      	ldr	r3, [pc, #104]	; (8004688 <stm32_clock_init+0x108>)
 800461e:	f240 7205 	movw	r2, #1797	; 0x705
 8004622:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8004624:	4b18      	ldr	r3, [pc, #96]	; (8004688 <stm32_clock_init+0x108>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	2b05      	cmp	r3, #5
 800462e:	d1f9      	bne.n	8004624 <stm32_clock_init+0xa4>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8004630:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <stm32_clock_init+0xf0>)
 8004632:	6893      	ldr	r3, [r2, #8]
 8004634:	f043 0302 	orr.w	r3, r3, #2
 8004638:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <stm32_clock_init+0xf0>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b08      	cmp	r3, #8
 8004644:	d1f9      	bne.n	800463a <stm32_clock_init+0xba>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <stm32_clock_init+0xf0>)
 8004648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800464e:	645a      	str	r2, [r3, #68]	; 0x44
 8004650:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004656:	665a      	str	r2, [r3, #100]	; 0x64
 8004658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 800465a:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <stm32_clock_init+0x10c>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <stm32_clock_init+0x110>)
 8004662:	429a      	cmp	r2, r3
 8004664:	d1da      	bne.n	800461c <stm32_clock_init+0x9c>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8004666:	4b08      	ldr	r3, [pc, #32]	; (8004688 <stm32_clock_init+0x108>)
 8004668:	f240 1205 	movw	r2, #261	; 0x105
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e7d9      	b.n	8004624 <stm32_clock_init+0xa4>
 8004670:	40023800 	.word	0x40023800
 8004674:	40007000 	.word	0x40007000
 8004678:	0740540c 	.word	0x0740540c
 800467c:	38889400 	.word	0x38889400
 8004680:	e0042000 	.word	0xe0042000
 8004684:	20006411 	.word	0x20006411
 8004688:	40023c00 	.word	0x40023c00
 800468c:	e000ed00 	.word	0xe000ed00
 8004690:	410fc241 	.word	0x410fc241
	...

080046a0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 80046a0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80046a2:	f004 fc95 	bl	8008fd0 <_stats_increase_irq>
 80046a6:	480c      	ldr	r0, [pc, #48]	; (80046d8 <Vector6C+0x38>)
 80046a8:	f003 faea 	bl	8007c80 <_trace_isr_enter>
 80046ac:	f003 fa18 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <Vector6C+0x3c>)
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 80046b8:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <Vector6C+0x40>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b113      	cbz	r3, 80046c6 <Vector6C+0x26>
    dma.streams[0].func(dma.streams[0].param, flags);
 80046c0:	4a07      	ldr	r2, [pc, #28]	; (80046e0 <Vector6C+0x40>)
 80046c2:	6890      	ldr	r0, [r2, #8]
 80046c4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80046c6:	f003 fa2b 	bl	8007b20 <_dbg_check_leave_isr>
 80046ca:	4803      	ldr	r0, [pc, #12]	; (80046d8 <Vector6C+0x38>)
 80046cc:	f003 fb00 	bl	8007cd0 <_trace_isr_leave>
 80046d0:	f007 fa86 	bl	800bbe0 <_port_irq_epilogue>
}
 80046d4:	bd08      	pop	{r3, pc}
 80046d6:	bf00      	nop
 80046d8:	080193d0 	.word	0x080193d0
 80046dc:	40026000 	.word	0x40026000
 80046e0:	20002024 	.word	0x20002024
 80046e4:	f3af 8000 	nop.w
 80046e8:	f3af 8000 	nop.w
 80046ec:	f3af 8000 	nop.w

080046f0 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80046f0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80046f2:	f004 fc6d 	bl	8008fd0 <_stats_increase_irq>
 80046f6:	480d      	ldr	r0, [pc, #52]	; (800472c <Vector70+0x3c>)
 80046f8:	f003 fac2 	bl	8007c80 <_trace_isr_enter>
 80046fc:	f003 f9f0 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <Vector70+0x40>)
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	0989      	lsrs	r1, r1, #6
 8004706:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 800470a:	018a      	lsls	r2, r1, #6
 800470c:	609a      	str	r2, [r3, #8]
  if (dma.streams[1].func)
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <Vector70+0x44>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	b113      	cbz	r3, 800471a <Vector70+0x2a>
    dma.streams[1].func(dma.streams[1].param, flags);
 8004714:	4a07      	ldr	r2, [pc, #28]	; (8004734 <Vector70+0x44>)
 8004716:	6910      	ldr	r0, [r2, #16]
 8004718:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800471a:	f003 fa01 	bl	8007b20 <_dbg_check_leave_isr>
 800471e:	4803      	ldr	r0, [pc, #12]	; (800472c <Vector70+0x3c>)
 8004720:	f003 fad6 	bl	8007cd0 <_trace_isr_leave>
 8004724:	f007 fa5c 	bl	800bbe0 <_port_irq_epilogue>
}
 8004728:	bd08      	pop	{r3, pc}
 800472a:	bf00      	nop
 800472c:	080193dc 	.word	0x080193dc
 8004730:	40026000 	.word	0x40026000
 8004734:	20002024 	.word	0x20002024
 8004738:	f3af 8000 	nop.w
 800473c:	f3af 8000 	nop.w

08004740 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8004740:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004742:	f004 fc45 	bl	8008fd0 <_stats_increase_irq>
 8004746:	480d      	ldr	r0, [pc, #52]	; (800477c <Vector74+0x3c>)
 8004748:	f003 fa9a 	bl	8007c80 <_trace_isr_enter>
 800474c:	f003 f9c8 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <Vector74+0x40>)
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	0c09      	lsrs	r1, r1, #16
 8004756:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 800475a:	040a      	lsls	r2, r1, #16
 800475c:	609a      	str	r2, [r3, #8]
  if (dma.streams[2].func)
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <Vector74+0x44>)
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	b113      	cbz	r3, 800476a <Vector74+0x2a>
    dma.streams[2].func(dma.streams[2].param, flags);
 8004764:	4a07      	ldr	r2, [pc, #28]	; (8004784 <Vector74+0x44>)
 8004766:	6990      	ldr	r0, [r2, #24]
 8004768:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800476a:	f003 f9d9 	bl	8007b20 <_dbg_check_leave_isr>
 800476e:	4803      	ldr	r0, [pc, #12]	; (800477c <Vector74+0x3c>)
 8004770:	f003 faae 	bl	8007cd0 <_trace_isr_leave>
 8004774:	f007 fa34 	bl	800bbe0 <_port_irq_epilogue>
}
 8004778:	bd08      	pop	{r3, pc}
 800477a:	bf00      	nop
 800477c:	080193e8 	.word	0x080193e8
 8004780:	40026000 	.word	0x40026000
 8004784:	20002024 	.word	0x20002024
 8004788:	f3af 8000 	nop.w
 800478c:	f3af 8000 	nop.w

08004790 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8004790:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004792:	f004 fc1d 	bl	8008fd0 <_stats_increase_irq>
 8004796:	480d      	ldr	r0, [pc, #52]	; (80047cc <Vector78+0x3c>)
 8004798:	f003 fa72 	bl	8007c80 <_trace_isr_enter>
 800479c:	f003 f9a0 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <Vector78+0x40>)
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	0d89      	lsrs	r1, r1, #22
 80047a6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 80047aa:	058a      	lsls	r2, r1, #22
 80047ac:	609a      	str	r2, [r3, #8]
  if (dma.streams[3].func)
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <Vector78+0x44>)
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	b113      	cbz	r3, 80047ba <Vector78+0x2a>
    dma.streams[3].func(dma.streams[3].param, flags);
 80047b4:	4a07      	ldr	r2, [pc, #28]	; (80047d4 <Vector78+0x44>)
 80047b6:	6a10      	ldr	r0, [r2, #32]
 80047b8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80047ba:	f003 f9b1 	bl	8007b20 <_dbg_check_leave_isr>
 80047be:	4803      	ldr	r0, [pc, #12]	; (80047cc <Vector78+0x3c>)
 80047c0:	f003 fa86 	bl	8007cd0 <_trace_isr_leave>
 80047c4:	f007 fa0c 	bl	800bbe0 <_port_irq_epilogue>
}
 80047c8:	bd08      	pop	{r3, pc}
 80047ca:	bf00      	nop
 80047cc:	080193f4 	.word	0x080193f4
 80047d0:	40026000 	.word	0x40026000
 80047d4:	20002024 	.word	0x20002024
 80047d8:	f3af 8000 	nop.w
 80047dc:	f3af 8000 	nop.w

080047e0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80047e0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80047e2:	f004 fbf5 	bl	8008fd0 <_stats_increase_irq>
 80047e6:	480c      	ldr	r0, [pc, #48]	; (8004818 <Vector7C+0x38>)
 80047e8:	f003 fa4a 	bl	8007c80 <_trace_isr_enter>
 80047ec:	f003 f978 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <Vector7C+0x3c>)
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80047f8:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <Vector7C+0x40>)
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	b113      	cbz	r3, 8004806 <Vector7C+0x26>
    dma.streams[4].func(dma.streams[4].param, flags);
 8004800:	4a07      	ldr	r2, [pc, #28]	; (8004820 <Vector7C+0x40>)
 8004802:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004804:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004806:	f003 f98b 	bl	8007b20 <_dbg_check_leave_isr>
 800480a:	4803      	ldr	r0, [pc, #12]	; (8004818 <Vector7C+0x38>)
 800480c:	f003 fa60 	bl	8007cd0 <_trace_isr_leave>
 8004810:	f007 f9e6 	bl	800bbe0 <_port_irq_epilogue>
}
 8004814:	bd08      	pop	{r3, pc}
 8004816:	bf00      	nop
 8004818:	08019400 	.word	0x08019400
 800481c:	40026000 	.word	0x40026000
 8004820:	20002024 	.word	0x20002024
 8004824:	f3af 8000 	nop.w
 8004828:	f3af 8000 	nop.w
 800482c:	f3af 8000 	nop.w

08004830 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8004830:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004832:	f004 fbcd 	bl	8008fd0 <_stats_increase_irq>
 8004836:	480d      	ldr	r0, [pc, #52]	; (800486c <Vector80+0x3c>)
 8004838:	f003 fa22 	bl	8007c80 <_trace_isr_enter>
 800483c:	f003 f950 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <Vector80+0x40>)
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	0989      	lsrs	r1, r1, #6
 8004846:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 800484a:	018a      	lsls	r2, r1, #6
 800484c:	60da      	str	r2, [r3, #12]
  if (dma.streams[5].func)
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <Vector80+0x44>)
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	b113      	cbz	r3, 800485a <Vector80+0x2a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8004854:	4a07      	ldr	r2, [pc, #28]	; (8004874 <Vector80+0x44>)
 8004856:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8004858:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800485a:	f003 f961 	bl	8007b20 <_dbg_check_leave_isr>
 800485e:	4803      	ldr	r0, [pc, #12]	; (800486c <Vector80+0x3c>)
 8004860:	f003 fa36 	bl	8007cd0 <_trace_isr_leave>
 8004864:	f007 f9bc 	bl	800bbe0 <_port_irq_epilogue>
}
 8004868:	bd08      	pop	{r3, pc}
 800486a:	bf00      	nop
 800486c:	0801940c 	.word	0x0801940c
 8004870:	40026000 	.word	0x40026000
 8004874:	20002024 	.word	0x20002024
 8004878:	f3af 8000 	nop.w
 800487c:	f3af 8000 	nop.w

08004880 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8004880:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004882:	f004 fba5 	bl	8008fd0 <_stats_increase_irq>
 8004886:	480d      	ldr	r0, [pc, #52]	; (80048bc <Vector84+0x3c>)
 8004888:	f003 f9fa 	bl	8007c80 <_trace_isr_enter>
 800488c:	f003 f928 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <Vector84+0x40>)
 8004892:	6859      	ldr	r1, [r3, #4]
 8004894:	0c09      	lsrs	r1, r1, #16
 8004896:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 800489a:	040a      	lsls	r2, r1, #16
 800489c:	60da      	str	r2, [r3, #12]
  if (dma.streams[6].func)
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <Vector84+0x44>)
 80048a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a2:	b113      	cbz	r3, 80048aa <Vector84+0x2a>
    dma.streams[6].func(dma.streams[6].param, flags);
 80048a4:	4a07      	ldr	r2, [pc, #28]	; (80048c4 <Vector84+0x44>)
 80048a6:	6b90      	ldr	r0, [r2, #56]	; 0x38
 80048a8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80048aa:	f003 f939 	bl	8007b20 <_dbg_check_leave_isr>
 80048ae:	4803      	ldr	r0, [pc, #12]	; (80048bc <Vector84+0x3c>)
 80048b0:	f003 fa0e 	bl	8007cd0 <_trace_isr_leave>
 80048b4:	f007 f994 	bl	800bbe0 <_port_irq_epilogue>
}
 80048b8:	bd08      	pop	{r3, pc}
 80048ba:	bf00      	nop
 80048bc:	08019418 	.word	0x08019418
 80048c0:	40026000 	.word	0x40026000
 80048c4:	20002024 	.word	0x20002024
 80048c8:	f3af 8000 	nop.w
 80048cc:	f3af 8000 	nop.w

080048d0 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80048d0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80048d2:	f004 fb7d 	bl	8008fd0 <_stats_increase_irq>
 80048d6:	480d      	ldr	r0, [pc, #52]	; (800490c <VectorFC+0x3c>)
 80048d8:	f003 f9d2 	bl	8007c80 <_trace_isr_enter>
 80048dc:	f003 f900 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <VectorFC+0x40>)
 80048e2:	6859      	ldr	r1, [r3, #4]
 80048e4:	0d89      	lsrs	r1, r1, #22
 80048e6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 80048ea:	058a      	lsls	r2, r1, #22
 80048ec:	60da      	str	r2, [r3, #12]
  if (dma.streams[7].func)
 80048ee:	4b09      	ldr	r3, [pc, #36]	; (8004914 <VectorFC+0x44>)
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	b113      	cbz	r3, 80048fa <VectorFC+0x2a>
    dma.streams[7].func(dma.streams[7].param, flags);
 80048f4:	4a07      	ldr	r2, [pc, #28]	; (8004914 <VectorFC+0x44>)
 80048f6:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80048f8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80048fa:	f003 f911 	bl	8007b20 <_dbg_check_leave_isr>
 80048fe:	4803      	ldr	r0, [pc, #12]	; (800490c <VectorFC+0x3c>)
 8004900:	f003 f9e6 	bl	8007cd0 <_trace_isr_leave>
 8004904:	f007 f96c 	bl	800bbe0 <_port_irq_epilogue>
}
 8004908:	bd08      	pop	{r3, pc}
 800490a:	bf00      	nop
 800490c:	08019424 	.word	0x08019424
 8004910:	40026000 	.word	0x40026000
 8004914:	20002024 	.word	0x20002024
 8004918:	f3af 8000 	nop.w
 800491c:	f3af 8000 	nop.w

08004920 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8004920:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004922:	f004 fb55 	bl	8008fd0 <_stats_increase_irq>
 8004926:	480c      	ldr	r0, [pc, #48]	; (8004958 <Vector120+0x38>)
 8004928:	f003 f9aa 	bl	8007c80 <_trace_isr_enter>
 800492c:	f003 f8d8 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <Vector120+0x3c>)
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8004938:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <Vector120+0x40>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	b113      	cbz	r3, 8004946 <Vector120+0x26>
    dma.streams[8].func(dma.streams[8].param, flags);
 8004940:	4a07      	ldr	r2, [pc, #28]	; (8004960 <Vector120+0x40>)
 8004942:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8004944:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004946:	f003 f8eb 	bl	8007b20 <_dbg_check_leave_isr>
 800494a:	4803      	ldr	r0, [pc, #12]	; (8004958 <Vector120+0x38>)
 800494c:	f003 f9c0 	bl	8007cd0 <_trace_isr_leave>
 8004950:	f007 f946 	bl	800bbe0 <_port_irq_epilogue>
}
 8004954:	bd08      	pop	{r3, pc}
 8004956:	bf00      	nop
 8004958:	08019430 	.word	0x08019430
 800495c:	40026400 	.word	0x40026400
 8004960:	20002024 	.word	0x20002024
 8004964:	f3af 8000 	nop.w
 8004968:	f3af 8000 	nop.w
 800496c:	f3af 8000 	nop.w

08004970 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8004970:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004972:	f004 fb2d 	bl	8008fd0 <_stats_increase_irq>
 8004976:	480d      	ldr	r0, [pc, #52]	; (80049ac <Vector124+0x3c>)
 8004978:	f003 f982 	bl	8007c80 <_trace_isr_enter>
 800497c:	f003 f8b0 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <Vector124+0x40>)
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	0989      	lsrs	r1, r1, #6
 8004986:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 800498a:	018a      	lsls	r2, r1, #6
 800498c:	609a      	str	r2, [r3, #8]
  if (dma.streams[9].func)
 800498e:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <Vector124+0x44>)
 8004990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004992:	b113      	cbz	r3, 800499a <Vector124+0x2a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8004994:	4a07      	ldr	r2, [pc, #28]	; (80049b4 <Vector124+0x44>)
 8004996:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8004998:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800499a:	f003 f8c1 	bl	8007b20 <_dbg_check_leave_isr>
 800499e:	4803      	ldr	r0, [pc, #12]	; (80049ac <Vector124+0x3c>)
 80049a0:	f003 f996 	bl	8007cd0 <_trace_isr_leave>
 80049a4:	f007 f91c 	bl	800bbe0 <_port_irq_epilogue>
}
 80049a8:	bd08      	pop	{r3, pc}
 80049aa:	bf00      	nop
 80049ac:	0801943c 	.word	0x0801943c
 80049b0:	40026400 	.word	0x40026400
 80049b4:	20002024 	.word	0x20002024
 80049b8:	f3af 8000 	nop.w
 80049bc:	f3af 8000 	nop.w

080049c0 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80049c0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80049c2:	f004 fb05 	bl	8008fd0 <_stats_increase_irq>
 80049c6:	480d      	ldr	r0, [pc, #52]	; (80049fc <Vector128+0x3c>)
 80049c8:	f003 f95a 	bl	8007c80 <_trace_isr_enter>
 80049cc:	f003 f888 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <Vector128+0x40>)
 80049d2:	6819      	ldr	r1, [r3, #0]
 80049d4:	0c09      	lsrs	r1, r1, #16
 80049d6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 80049da:	040a      	lsls	r2, r1, #16
 80049dc:	609a      	str	r2, [r3, #8]
  if (dma.streams[10].func)
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <Vector128+0x44>)
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	b113      	cbz	r3, 80049ea <Vector128+0x2a>
    dma.streams[10].func(dma.streams[10].param, flags);
 80049e4:	4a07      	ldr	r2, [pc, #28]	; (8004a04 <Vector128+0x44>)
 80049e6:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80049e8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80049ea:	f003 f899 	bl	8007b20 <_dbg_check_leave_isr>
 80049ee:	4803      	ldr	r0, [pc, #12]	; (80049fc <Vector128+0x3c>)
 80049f0:	f003 f96e 	bl	8007cd0 <_trace_isr_leave>
 80049f4:	f007 f8f4 	bl	800bbe0 <_port_irq_epilogue>
}
 80049f8:	bd08      	pop	{r3, pc}
 80049fa:	bf00      	nop
 80049fc:	08019448 	.word	0x08019448
 8004a00:	40026400 	.word	0x40026400
 8004a04:	20002024 	.word	0x20002024
 8004a08:	f3af 8000 	nop.w
 8004a0c:	f3af 8000 	nop.w

08004a10 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8004a10:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004a12:	f004 fadd 	bl	8008fd0 <_stats_increase_irq>
 8004a16:	480d      	ldr	r0, [pc, #52]	; (8004a4c <Vector12C+0x3c>)
 8004a18:	f003 f932 	bl	8007c80 <_trace_isr_enter>
 8004a1c:	f003 f860 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <Vector12C+0x40>)
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	0d89      	lsrs	r1, r1, #22
 8004a26:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 8004a2a:	058a      	lsls	r2, r1, #22
 8004a2c:	609a      	str	r2, [r3, #8]
  if (dma.streams[11].func)
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <Vector12C+0x44>)
 8004a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a32:	b113      	cbz	r3, 8004a3a <Vector12C+0x2a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8004a34:	4a07      	ldr	r2, [pc, #28]	; (8004a54 <Vector12C+0x44>)
 8004a36:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004a38:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004a3a:	f003 f871 	bl	8007b20 <_dbg_check_leave_isr>
 8004a3e:	4803      	ldr	r0, [pc, #12]	; (8004a4c <Vector12C+0x3c>)
 8004a40:	f003 f946 	bl	8007cd0 <_trace_isr_leave>
 8004a44:	f007 f8cc 	bl	800bbe0 <_port_irq_epilogue>
}
 8004a48:	bd08      	pop	{r3, pc}
 8004a4a:	bf00      	nop
 8004a4c:	08019454 	.word	0x08019454
 8004a50:	40026400 	.word	0x40026400
 8004a54:	20002024 	.word	0x20002024
 8004a58:	f3af 8000 	nop.w
 8004a5c:	f3af 8000 	nop.w

08004a60 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8004a60:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004a62:	f004 fab5 	bl	8008fd0 <_stats_increase_irq>
 8004a66:	480c      	ldr	r0, [pc, #48]	; (8004a98 <Vector130+0x38>)
 8004a68:	f003 f90a 	bl	8007c80 <_trace_isr_enter>
 8004a6c:	f003 f838 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8004a70:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <Vector130+0x3c>)
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8004a78:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8004a7a:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <Vector130+0x40>)
 8004a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a7e:	b113      	cbz	r3, 8004a86 <Vector130+0x26>
    dma.streams[12].func(dma.streams[12].param, flags);
 8004a80:	4a07      	ldr	r2, [pc, #28]	; (8004aa0 <Vector130+0x40>)
 8004a82:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004a84:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004a86:	f003 f84b 	bl	8007b20 <_dbg_check_leave_isr>
 8004a8a:	4803      	ldr	r0, [pc, #12]	; (8004a98 <Vector130+0x38>)
 8004a8c:	f003 f920 	bl	8007cd0 <_trace_isr_leave>
 8004a90:	f007 f8a6 	bl	800bbe0 <_port_irq_epilogue>
}
 8004a94:	bd08      	pop	{r3, pc}
 8004a96:	bf00      	nop
 8004a98:	08019460 	.word	0x08019460
 8004a9c:	40026400 	.word	0x40026400
 8004aa0:	20002024 	.word	0x20002024
 8004aa4:	f3af 8000 	nop.w
 8004aa8:	f3af 8000 	nop.w
 8004aac:	f3af 8000 	nop.w

08004ab0 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8004ab0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004ab2:	f004 fa8d 	bl	8008fd0 <_stats_increase_irq>
 8004ab6:	480d      	ldr	r0, [pc, #52]	; (8004aec <Vector150+0x3c>)
 8004ab8:	f003 f8e2 	bl	8007c80 <_trace_isr_enter>
 8004abc:	f003 f810 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <Vector150+0x40>)
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	0989      	lsrs	r1, r1, #6
 8004ac6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 8004aca:	018a      	lsls	r2, r1, #6
 8004acc:	60da      	str	r2, [r3, #12]
  if (dma.streams[13].func)
 8004ace:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <Vector150+0x44>)
 8004ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad2:	b113      	cbz	r3, 8004ada <Vector150+0x2a>
    dma.streams[13].func(dma.streams[13].param, flags);
 8004ad4:	4a07      	ldr	r2, [pc, #28]	; (8004af4 <Vector150+0x44>)
 8004ad6:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8004ad8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004ada:	f003 f821 	bl	8007b20 <_dbg_check_leave_isr>
 8004ade:	4803      	ldr	r0, [pc, #12]	; (8004aec <Vector150+0x3c>)
 8004ae0:	f003 f8f6 	bl	8007cd0 <_trace_isr_leave>
 8004ae4:	f007 f87c 	bl	800bbe0 <_port_irq_epilogue>
}
 8004ae8:	bd08      	pop	{r3, pc}
 8004aea:	bf00      	nop
 8004aec:	0801946c 	.word	0x0801946c
 8004af0:	40026400 	.word	0x40026400
 8004af4:	20002024 	.word	0x20002024
 8004af8:	f3af 8000 	nop.w
 8004afc:	f3af 8000 	nop.w

08004b00 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8004b00:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004b02:	f004 fa65 	bl	8008fd0 <_stats_increase_irq>
 8004b06:	480d      	ldr	r0, [pc, #52]	; (8004b3c <Vector154+0x3c>)
 8004b08:	f003 f8ba 	bl	8007c80 <_trace_isr_enter>
 8004b0c:	f002 ffe8 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <Vector154+0x40>)
 8004b12:	6859      	ldr	r1, [r3, #4]
 8004b14:	0c09      	lsrs	r1, r1, #16
 8004b16:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 8004b1a:	040a      	lsls	r2, r1, #16
 8004b1c:	60da      	str	r2, [r3, #12]
  if (dma.streams[14].func)
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <Vector154+0x44>)
 8004b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b22:	b113      	cbz	r3, 8004b2a <Vector154+0x2a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8004b24:	4a07      	ldr	r2, [pc, #28]	; (8004b44 <Vector154+0x44>)
 8004b26:	6f90      	ldr	r0, [r2, #120]	; 0x78
 8004b28:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004b2a:	f002 fff9 	bl	8007b20 <_dbg_check_leave_isr>
 8004b2e:	4803      	ldr	r0, [pc, #12]	; (8004b3c <Vector154+0x3c>)
 8004b30:	f003 f8ce 	bl	8007cd0 <_trace_isr_leave>
 8004b34:	f007 f854 	bl	800bbe0 <_port_irq_epilogue>
}
 8004b38:	bd08      	pop	{r3, pc}
 8004b3a:	bf00      	nop
 8004b3c:	08019478 	.word	0x08019478
 8004b40:	40026400 	.word	0x40026400
 8004b44:	20002024 	.word	0x20002024
 8004b48:	f3af 8000 	nop.w
 8004b4c:	f3af 8000 	nop.w

08004b50 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8004b50:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004b52:	f004 fa3d 	bl	8008fd0 <_stats_increase_irq>
 8004b56:	480d      	ldr	r0, [pc, #52]	; (8004b8c <Vector158+0x3c>)
 8004b58:	f003 f892 	bl	8007c80 <_trace_isr_enter>
 8004b5c:	f002 ffc0 	bl	8007ae0 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <Vector158+0x40>)
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	0d89      	lsrs	r1, r1, #22
 8004b66:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8004b6a:	058a      	lsls	r2, r1, #22
 8004b6c:	60da      	str	r2, [r3, #12]
  if (dma.streams[15].func)
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <Vector158+0x44>)
 8004b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b72:	b11b      	cbz	r3, 8004b7c <Vector158+0x2c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8004b74:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <Vector158+0x44>)
 8004b76:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 8004b7a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004b7c:	f002 ffd0 	bl	8007b20 <_dbg_check_leave_isr>
 8004b80:	4802      	ldr	r0, [pc, #8]	; (8004b8c <Vector158+0x3c>)
 8004b82:	f003 f8a5 	bl	8007cd0 <_trace_isr_leave>
 8004b86:	f007 f82b 	bl	800bbe0 <_port_irq_epilogue>
}
 8004b8a:	bd08      	pop	{r3, pc}
 8004b8c:	08019484 	.word	0x08019484
 8004b90:	40026400 	.word	0x40026400
 8004b94:	20002024 	.word	0x20002024
 8004b98:	f3af 8000 	nop.w
 8004b9c:	f3af 8000 	nop.w

08004ba0 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma.allocated_mask = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <dmaInit+0x3c>)
 8004ba4:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8004ba6:	e00d      	b.n	8004bc4 <dmaInit+0x24>
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8004ba8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8004bac:	0091      	lsls	r1, r2, #2
 8004bae:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <dmaInit+0x40>)
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	6011      	str	r1, [r2, #0]
    dma.streams[i].func = NULL;
 8004bba:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <dmaInit+0x3c>)
 8004bbc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004bc0:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	2b0f      	cmp	r3, #15
 8004bc6:	d9ef      	bls.n	8004ba8 <dmaInit+0x8>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8004bc8:	4a06      	ldr	r2, [pc, #24]	; (8004be4 <dmaInit+0x44>)
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	6093      	str	r3, [r2, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8004bd0:	60d3      	str	r3, [r2, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8004bd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bd6:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8004bd8:	60d3      	str	r3, [r2, #12]
}
 8004bda:	4770      	bx	lr
 8004bdc:	20002024 	.word	0x20002024
 8004be0:	080193d0 	.word	0x080193d0
 8004be4:	40026000 	.word	0x40026000
 8004be8:	f3af 8000 	nop.w
 8004bec:	f3af 8000 	nop.w

08004bf0 <dmaStreamAllocI>:
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
                                          uint32_t priority,
                                          stm32_dmaisr_t func,
                                          void *param) {
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	460e      	mov	r6, r1
 8004bf6:	4615      	mov	r5, r2
 8004bf8:	461f      	mov	r7, r3
  uint32_t i, startid, endid;

  osalDbgCheckClassI();
 8004bfa:	f002 ffb1 	bl	8007b60 <chDbgCheckClassI>

  if (id < STM32_DMA_STREAMS) {
 8004bfe:	2c0f      	cmp	r4, #15
 8004c00:	d805      	bhi.n	8004c0e <dmaStreamAllocI+0x1e>
  else {
    osalDbgCheck(false);
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
 8004c02:	4623      	mov	r3, r4
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	d907      	bls.n	8004c18 <dmaStreamAllocI+0x28>

      return dmastp;
    }
  }

  return NULL;
 8004c08:	2400      	movs	r4, #0
}
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osalDbgCheck(false);
 8004c0e:	4830      	ldr	r0, [pc, #192]	; (8004cd0 <dmaStreamAllocI+0xe0>)
 8004c10:	f002 fd76 	bl	8007700 <chSysHalt>
    return NULL;
 8004c14:	2400      	movs	r4, #0
 8004c16:	e7f8      	b.n	8004c0a <dmaStreamAllocI+0x1a>
    uint32_t mask = (1U << i);
 8004c18:	2201      	movs	r2, #1
 8004c1a:	409a      	lsls	r2, r3
    if ((dma.allocated_mask & mask) == 0U) {
 8004c1c:	492d      	ldr	r1, [pc, #180]	; (8004cd4 <dmaStreamAllocI+0xe4>)
 8004c1e:	6809      	ldr	r1, [r1, #0]
 8004c20:	4211      	tst	r1, r2
 8004c22:	d001      	beq.n	8004c28 <dmaStreamAllocI+0x38>
  for (i = startid; i <= endid; i++) {
 8004c24:	3301      	adds	r3, #1
 8004c26:	e7ed      	b.n	8004c04 <dmaStreamAllocI+0x14>
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8004c28:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8004c2c:	00a0      	lsls	r0, r4, #2
 8004c2e:	4c2a      	ldr	r4, [pc, #168]	; (8004cd8 <dmaStreamAllocI+0xe8>)
 8004c30:	4404      	add	r4, r0
      dma.streams[i].func  = func;
 8004c32:	4828      	ldr	r0, [pc, #160]	; (8004cd4 <dmaStreamAllocI+0xe4>)
 8004c34:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
 8004c38:	f8cc 5004 	str.w	r5, [ip, #4]
      dma.streams[i].param = param;
 8004c3c:	f8cc 7008 	str.w	r7, [ip, #8]
      dma.allocated_mask  |= mask;
 8004c40:	4311      	orrs	r1, r2
 8004c42:	6001      	str	r1, [r0, #0]
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8004c44:	f012 0fff 	tst.w	r2, #255	; 0xff
 8004c48:	d009      	beq.n	8004c5e <dmaStreamAllocI+0x6e>
        rccEnableDMA1(true);
 8004c4a:	4924      	ldr	r1, [pc, #144]	; (8004cdc <dmaStreamAllocI+0xec>)
 8004c4c:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8004c4e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8004c52:	6308      	str	r0, [r1, #48]	; 0x30
 8004c54:	6d08      	ldr	r0, [r1, #80]	; 0x50
 8004c56:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8004c5a:	6508      	str	r0, [r1, #80]	; 0x50
 8004c5c:	6d09      	ldr	r1, [r1, #80]	; 0x50
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
 8004c5e:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 8004c62:	d009      	beq.n	8004c78 <dmaStreamAllocI+0x88>
        rccEnableDMA2(true);
 8004c64:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <dmaStreamAllocI+0xec>)
 8004c66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004c68:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8004c6c:	6311      	str	r1, [r2, #48]	; 0x30
 8004c6e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004c70:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8004c74:	6511      	str	r1, [r2, #80]	; 0x50
 8004c76:	6d12      	ldr	r2, [r2, #80]	; 0x50
      dmaStreamDisable(dmastp);
 8004c78:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8004c7c:	0091      	lsls	r1, r2, #2
 8004c7e:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <dmaStreamAllocI+0xf0>)
 8004c80:	440a      	add	r2, r1
 8004c82:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 8004c86:	680a      	ldr	r2, [r1, #0]
 8004c88:	f022 021f 	bic.w	r2, r2, #31
 8004c8c:	600a      	str	r2, [r1, #0]
 8004c8e:	680a      	ldr	r2, [r1, #0]
 8004c90:	f012 0f01 	tst.w	r2, #1
 8004c94:	d1fb      	bne.n	8004c8e <dmaStreamAllocI+0x9e>
 8004c96:	0058      	lsls	r0, r3, #1
 8004c98:	4418      	add	r0, r3
 8004c9a:	0087      	lsls	r7, r0, #2
 8004c9c:	4a10      	ldr	r2, [pc, #64]	; (8004ce0 <dmaStreamAllocI+0xf0>)
 8004c9e:	443a      	add	r2, r7
 8004ca0:	f892 70c9 	ldrb.w	r7, [r2, #201]	; 0xc9
 8004ca4:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
 8004ca8:	223d      	movs	r2, #61	; 0x3d
 8004caa:	40ba      	lsls	r2, r7
 8004cac:	6002      	str	r2, [r0, #0]
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8004cae:	2200      	movs	r2, #0
 8004cb0:	600a      	str	r2, [r1, #0]
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8004cb2:	2221      	movs	r2, #33	; 0x21
 8004cb4:	614a      	str	r2, [r1, #20]
      if (func != NULL) {
 8004cb6:	2d00      	cmp	r5, #0
 8004cb8:	d0a7      	beq.n	8004c0a <dmaStreamAllocI+0x1a>
        nvicEnableVector(dmastp->vector, priority);
 8004cba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004cbe:	009a      	lsls	r2, r3, #2
 8004cc0:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <dmaStreamAllocI+0xf0>)
 8004cc2:	4413      	add	r3, r2
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	f893 00cb 	ldrb.w	r0, [r3, #203]	; 0xcb
 8004cca:	f7ff f9d1 	bl	8004070 <nvicEnableVector>
 8004cce:	e79c      	b.n	8004c0a <dmaStreamAllocI+0x1a>
 8004cd0:	08019550 	.word	0x08019550
 8004cd4:	20002024 	.word	0x20002024
 8004cd8:	08019490 	.word	0x08019490
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	080193d0 	.word	0x080193d0
 8004ce4:	f3af 8000 	nop.w
 8004ce8:	f3af 8000 	nop.w
 8004cec:	f3af 8000 	nop.w

08004cf0 <dmaStreamAlloc>:
 * @api
 */
const stm32_dma_stream_t *dmaStreamAlloc(uint32_t id,
                                         uint32_t priority,
                                         stm32_dmaisr_t func,
                                         void *param) {
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	460d      	mov	r5, r1
 8004cf6:	4616      	mov	r6, r2
 8004cf8:	461f      	mov	r7, r3
 8004cfa:	2320      	movs	r3, #32
 8004cfc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8004d00:	f004 f98e 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8004d04:	f002 fe8c 	bl	8007a20 <_dbg_check_lock>
  const stm32_dma_stream_t *dmastp;

  osalSysLock();
  dmastp = dmaStreamAllocI(id, priority, func, param);
 8004d08:	463b      	mov	r3, r7
 8004d0a:	4632      	mov	r2, r6
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f7ff ff6e 	bl	8004bf0 <dmaStreamAllocI>
 8004d14:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8004d16:	f002 fe9b 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004d1a:	f004 f989 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <dmaStreamAlloc+0x54>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d004      	beq.n	8004d30 <dmaStreamAlloc+0x40>
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	6899      	ldr	r1, [r3, #8]
 8004d2a:	6893      	ldr	r3, [r2, #8]
 8004d2c:	4299      	cmp	r1, r3
 8004d2e:	d304      	bcc.n	8004d3a <dmaStreamAlloc+0x4a>
 8004d30:	2300      	movs	r3, #0
 8004d32:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();

  return dmastp;
}
 8004d36:	4620      	mov	r0, r4
 8004d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d3a:	4803      	ldr	r0, [pc, #12]	; (8004d48 <dmaStreamAlloc+0x58>)
 8004d3c:	f002 fce0 	bl	8007700 <chSysHalt>
 8004d40:	e7f6      	b.n	8004d30 <dmaStreamAlloc+0x40>
 8004d42:	bf00      	nop
 8004d44:	200050f8 	.word	0x200050f8
 8004d48:	08019560 	.word	0x08019560
 8004d4c:	f3af 8000 	nop.w

08004d50 <dmaStreamFreeI>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @iclass
 */
void dmaStreamFreeI(const stm32_dma_stream_t *dmastp) {
 8004d50:	b510      	push	{r4, lr}

  osalDbgCheck(dmastp != NULL);
 8004d52:	4604      	mov	r4, r0
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d02d      	beq.n	8004db4 <dmaStreamFreeI+0x64>

  /* Check if the streams is not taken.*/
  osalDbgAssert((dma.allocated_mask & (1U << dmastp->selfindex)) != 0U,
 8004d58:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <dmaStreamFreeI+0x74>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	7aa1      	ldrb	r1, [r4, #10]
 8004d5e:	2301      	movs	r3, #1
 8004d60:	408b      	lsls	r3, r1
 8004d62:	421a      	tst	r2, r3
 8004d64:	d02a      	beq.n	8004dbc <dmaStreamFreeI+0x6c>
                "not allocated");

  /* Disables the associated IRQ vector.*/
  nvicDisableVector(dmastp->vector);
 8004d66:	7ae0      	ldrb	r0, [r4, #11]
 8004d68:	f7ff f99a 	bl	80040a0 <nvicDisableVector>

  /* Marks the stream as not allocated.*/
  dma.allocated_mask &= ~(1U << dmastp->selfindex);
 8004d6c:	7aa2      	ldrb	r2, [r4, #10]
 8004d6e:	2301      	movs	r3, #1
 8004d70:	fa03 f202 	lsl.w	r2, r3, r2
 8004d74:	4913      	ldr	r1, [pc, #76]	; (8004dc4 <dmaStreamFreeI+0x74>)
 8004d76:	680b      	ldr	r3, [r1, #0]
 8004d78:	ea23 0302 	bic.w	r3, r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8004d7e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004d82:	d109      	bne.n	8004d98 <dmaStreamFreeI+0x48>
    rccDisableDMA1();
 8004d84:	4a10      	ldr	r2, [pc, #64]	; (8004dc8 <dmaStreamFreeI+0x78>)
 8004d86:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004d88:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8004d8c:	6311      	str	r1, [r2, #48]	; 0x30
 8004d8e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004d90:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8004d94:	6511      	str	r1, [r2, #80]	; 0x50
 8004d96:	6d12      	ldr	r2, [r2, #80]	; 0x50
  }
  if ((dma.allocated_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 8004d98:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8004d9c:	d109      	bne.n	8004db2 <dmaStreamFreeI+0x62>
    rccDisableDMA2();
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <dmaStreamFreeI+0x78>)
 8004da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
 8004da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004daa:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8004dae:	651a      	str	r2, [r3, #80]	; 0x50
 8004db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  /* Shutting down DMAMUX if present.*/
  if (dma.allocated_mask == 0U) {
    rccDisableDMAMUX();
  }
#endif
}
 8004db2:	bd10      	pop	{r4, pc}
  osalDbgCheck(dmastp != NULL);
 8004db4:	4805      	ldr	r0, [pc, #20]	; (8004dcc <dmaStreamFreeI+0x7c>)
 8004db6:	f002 fca3 	bl	8007700 <chSysHalt>
 8004dba:	e7cd      	b.n	8004d58 <dmaStreamFreeI+0x8>
  osalDbgAssert((dma.allocated_mask & (1U << dmastp->selfindex)) != 0U,
 8004dbc:	4803      	ldr	r0, [pc, #12]	; (8004dcc <dmaStreamFreeI+0x7c>)
 8004dbe:	f002 fc9f 	bl	8007700 <chSysHalt>
 8004dc2:	e7d0      	b.n	8004d66 <dmaStreamFreeI+0x16>
 8004dc4:	20002024 	.word	0x20002024
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	0801956c 	.word	0x0801956c

08004dd0 <dmaStreamFree>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @api
 */
void dmaStreamFree(const stm32_dma_stream_t *dmastp) {
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	2320      	movs	r3, #32
 8004dd6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8004dda:	f004 f921 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8004dde:	f002 fe1f 	bl	8007a20 <_dbg_check_lock>

  osalSysLock();
  dmaStreamFreeI(dmastp);
 8004de2:	4620      	mov	r0, r4
 8004de4:	f7ff ffb4 	bl	8004d50 <dmaStreamFreeI>
  _dbg_check_unlock();
 8004de8:	f002 fe32 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004dec:	f004 f920 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004df0:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <dmaStreamFree+0x44>)
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d004      	beq.n	8004e02 <dmaStreamFree+0x32>
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	6899      	ldr	r1, [r3, #8]
 8004dfc:	6893      	ldr	r3, [r2, #8]
 8004dfe:	4299      	cmp	r1, r3
 8004e00:	d303      	bcc.n	8004e0a <dmaStreamFree+0x3a>
 8004e02:	2300      	movs	r3, #0
 8004e04:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8004e08:	bd10      	pop	{r4, pc}
 8004e0a:	4803      	ldr	r0, [pc, #12]	; (8004e18 <dmaStreamFree+0x48>)
 8004e0c:	f002 fc78 	bl	8007700 <chSysHalt>
 8004e10:	e7f7      	b.n	8004e02 <dmaStreamFree+0x32>
 8004e12:	bf00      	nop
 8004e14:	200050f8 	.word	0x200050f8
 8004e18:	08019560 	.word	0x08019560
 8004e1c:	00000000 	.word	0x00000000

08004e20 <extiEnableGroup1>:
void extiEnableGroup1(uint32_t mask, extimode_t mode) {

  /* Masked out lines must not be touched by this driver.*/
  osalDbgAssert((mask & STM32_EXTI_IMR1_MASK) == 0U, "fixed lines");

  if ((mode & EXTI_MODE_EDGES_MASK) == 0U) {
 8004e20:	f011 0f03 	tst.w	r1, #3
 8004e24:	d019      	beq.n	8004e5a <extiEnableGroup1+0x3a>
    EXTI->FTSR1 &= ~mask;
    EXTI->PR1    =  mask;
  }
  else {
    /* Programming edge registers.*/
    if (mode & EXTI_MODE_RISING_EDGE) {
 8004e26:	f011 0f01 	tst.w	r1, #1
 8004e2a:	d026      	beq.n	8004e7a <extiEnableGroup1+0x5a>
      EXTI->RTSR1 |= mask;
 8004e2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e2e:	6893      	ldr	r3, [r2, #8]
 8004e30:	4303      	orrs	r3, r0
 8004e32:	6093      	str	r3, [r2, #8]
    }
    else {
      EXTI->RTSR1 &= ~mask;
    }
    if (mode & EXTI_MODE_FALLING_EDGE) {
 8004e34:	f011 0f02 	tst.w	r1, #2
 8004e38:	d025      	beq.n	8004e86 <extiEnableGroup1+0x66>
      EXTI->FTSR1 |= mask;
 8004e3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e3c:	68d3      	ldr	r3, [r2, #12]
 8004e3e:	4303      	orrs	r3, r0
 8004e40:	60d3      	str	r3, [r2, #12]
    else {
      EXTI->FTSR1 &= ~mask;
    }

    /* Programming interrupt and event registers.*/
    if ((mode & EXTI_MODE_ACTION_MASK) == EXTI_MODE_ACTION_INTERRUPT) {
 8004e42:	f011 0f04 	tst.w	r1, #4
 8004e46:	d024      	beq.n	8004e92 <extiEnableGroup1+0x72>
      EXTI->IMR1 |= mask;
      EXTI->EMR1 &= ~mask;
    }
    else {
      EXTI->EMR1 |= mask;
 8004e48:	4b16      	ldr	r3, [pc, #88]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	4302      	orrs	r2, r0
 8004e4e:	605a      	str	r2, [r3, #4]
      EXTI->IMR1 &= ~mask;
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	ea22 0000 	bic.w	r0, r2, r0
 8004e56:	6018      	str	r0, [r3, #0]
    }
  }
}
 8004e58:	4770      	bx	lr
    EXTI->IMR1  &= ~mask;
 8004e5a:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	43c2      	mvns	r2, r0
 8004e60:	4011      	ands	r1, r2
 8004e62:	6019      	str	r1, [r3, #0]
    EXTI->EMR1  &= ~mask;
 8004e64:	6859      	ldr	r1, [r3, #4]
 8004e66:	4011      	ands	r1, r2
 8004e68:	6059      	str	r1, [r3, #4]
    EXTI->RTSR1 &= ~mask;
 8004e6a:	6899      	ldr	r1, [r3, #8]
 8004e6c:	4011      	ands	r1, r2
 8004e6e:	6099      	str	r1, [r3, #8]
    EXTI->FTSR1 &= ~mask;
 8004e70:	68d9      	ldr	r1, [r3, #12]
 8004e72:	400a      	ands	r2, r1
 8004e74:	60da      	str	r2, [r3, #12]
    EXTI->PR1    =  mask;
 8004e76:	6158      	str	r0, [r3, #20]
 8004e78:	4770      	bx	lr
      EXTI->RTSR1 &= ~mask;
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e7c:	6893      	ldr	r3, [r2, #8]
 8004e7e:	ea23 0300 	bic.w	r3, r3, r0
 8004e82:	6093      	str	r3, [r2, #8]
 8004e84:	e7d6      	b.n	8004e34 <extiEnableGroup1+0x14>
      EXTI->FTSR1 &= ~mask;
 8004e86:	4a07      	ldr	r2, [pc, #28]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e88:	68d3      	ldr	r3, [r2, #12]
 8004e8a:	ea23 0300 	bic.w	r3, r3, r0
 8004e8e:	60d3      	str	r3, [r2, #12]
 8004e90:	e7d7      	b.n	8004e42 <extiEnableGroup1+0x22>
      EXTI->IMR1 |= mask;
 8004e92:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4302      	orrs	r2, r0
 8004e98:	601a      	str	r2, [r3, #0]
      EXTI->EMR1 &= ~mask;
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	ea22 0000 	bic.w	r0, r2, r0
 8004ea0:	6058      	str	r0, [r3, #4]
 8004ea2:	4770      	bx	lr
 8004ea4:	40013c00 	.word	0x40013c00
 8004ea8:	f3af 8000 	nop.w
 8004eac:	f3af 8000 	nop.w

08004eb0 <extiEnableLine>:
 * @param[in] line      line to be initialized
 * @param[in] mode      initialization mode
 *
 * @api
 */
void extiEnableLine(extiline_t line, extimode_t mode) {
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	460d      	mov	r5, r1
  uint32_t mask = (1U << (line & 0x1FU));
 8004eb4:	f000 031f 	and.w	r3, r0, #31
 8004eb8:	2401      	movs	r4, #1
 8004eba:	409c      	lsls	r4, r3

  osalDbgCheck(line < STM32_EXTI_NUM_LINES);
 8004ebc:	2816      	cmp	r0, #22
 8004ebe:	d807      	bhi.n	8004ed0 <extiEnableLine+0x20>
  osalDbgCheck((mode & ~EXTI_MODE_MASK) == 0U);
 8004ec0:	f035 0307 	bics.w	r3, r5, #7
 8004ec4:	d108      	bne.n	8004ed8 <extiEnableLine+0x28>

#if STM32_EXTI_NUM_LINES > 32
  if (line < 32) {
#endif
    extiEnableGroup1(mask, mode);
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff ffa9 	bl	8004e20 <extiEnableGroup1>
  }
  else {
    extiEnableGroup2(mask, mode);
  }
#endif
}
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(line < STM32_EXTI_NUM_LINES);
 8004ed0:	4803      	ldr	r0, [pc, #12]	; (8004ee0 <extiEnableLine+0x30>)
 8004ed2:	f002 fc15 	bl	8007700 <chSysHalt>
 8004ed6:	e7f3      	b.n	8004ec0 <extiEnableLine+0x10>
  osalDbgCheck((mode & ~EXTI_MODE_MASK) == 0U);
 8004ed8:	4801      	ldr	r0, [pc, #4]	; (8004ee0 <extiEnableLine+0x30>)
 8004eda:	f002 fc11 	bl	8007700 <chSysHalt>
 8004ede:	e7f2      	b.n	8004ec6 <extiEnableLine+0x16>
 8004ee0:	0801957c 	.word	0x0801957c
 8004ee4:	f3af 8000 	nop.w
 8004ee8:	f3af 8000 	nop.w
 8004eec:	f3af 8000 	nop.w

08004ef0 <extiClearLine>:
 *
 * @param[in] line      line to be initialized
 *
 * @api
 */
void extiClearLine(extiline_t line) {
 8004ef0:	b510      	push	{r4, lr}
  uint32_t mask = (1U << (line & 0x1FU));
 8004ef2:	f000 031f 	and.w	r3, r0, #31
 8004ef6:	2401      	movs	r4, #1
 8004ef8:	409c      	lsls	r4, r3

  osalDbgCheck(line < STM32_EXTI_NUM_LINES);
 8004efa:	2816      	cmp	r0, #22
 8004efc:	d802      	bhi.n	8004f04 <extiClearLine+0x14>

#if STM32_EXTI_NUM_LINES > 32
  if (line < 32) {
#endif
    extiClearGroup1(mask);
 8004efe:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <extiClearLine+0x1c>)
 8004f00:	615c      	str	r4, [r3, #20]
  }
  else {
    extiClearGroup2(mask);
  }
#endif
}
 8004f02:	bd10      	pop	{r4, pc}
  osalDbgCheck(line < STM32_EXTI_NUM_LINES);
 8004f04:	4802      	ldr	r0, [pc, #8]	; (8004f10 <extiClearLine+0x20>)
 8004f06:	f002 fbfb 	bl	8007700 <chSysHalt>
 8004f0a:	e7f8      	b.n	8004efe <extiClearLine+0xe>
 8004f0c:	40013c00 	.word	0x40013c00
 8004f10:	0801958c 	.word	0x0801958c
	...

08004f20 <_pal_lld_init>:
void _pal_lld_init(void) {

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
 8004f20:	2200      	movs	r2, #0
 8004f22:	e008      	b.n	8004f36 <_pal_lld_init+0x16>
    _pal_init_event(i);
 8004f24:	0110      	lsls	r0, r2, #4
 8004f26:	4905      	ldr	r1, [pc, #20]	; (8004f3c <_pal_lld_init+0x1c>)
 8004f28:	1843      	adds	r3, r0, r1
  tqp->next = (thread_t *)tqp;
 8004f2a:	5043      	str	r3, [r0, r1]
  tqp->prev = (thread_t *)tqp;
 8004f2c:	605b      	str	r3, [r3, #4]
 8004f2e:	2100      	movs	r1, #0
 8004f30:	6099      	str	r1, [r3, #8]
 8004f32:	60d9      	str	r1, [r3, #12]
  for (i = 0; i < 16; i++) {
 8004f34:	3201      	adds	r2, #1
 8004f36:	2a0f      	cmp	r2, #15
 8004f38:	d9f4      	bls.n	8004f24 <_pal_lld_init+0x4>
  }
#endif
}
 8004f3a:	4770      	bx	lr
 8004f3c:	200046e8 	.word	0x200046e8

08004f40 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8004f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8004f44:	f002 0903 	and.w	r9, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8004f48:	f3c2 0c80 	ubfx	ip, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8004f4c:	f3c2 07c1 	ubfx	r7, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8004f50:	f3c2 1641 	ubfx	r6, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8004f54:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8004f58:	464d      	mov	r5, r9
  uint32_t bit     = 0;
 8004f5a:	2400      	movs	r4, #0
 8004f5c:	e017      	b.n	8004f8e <_pal_lld_setgroupmode+0x4e>
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 8004f5e:	2c07      	cmp	r4, #7
 8004f60:	d854      	bhi.n	800500c <_pal_lld_setgroupmode+0xcc>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8004f62:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8004f66:	ea2a 0e0e 	bic.w	lr, sl, lr
 8004f6a:	ea4e 0808 	orr.w	r8, lr, r8
 8004f6e:	f8c0 8020 	str.w	r8, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8004f72:	f8d0 e000 	ldr.w	lr, [r0]
 8004f76:	ea03 030e 	and.w	r3, r3, lr
 8004f7a:	432b      	orrs	r3, r5
 8004f7c:	6003      	str	r3, [r0, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8004f7e:	0849      	lsrs	r1, r1, #1
 8004f80:	d054      	beq.n	800502c <_pal_lld_setgroupmode+0xec>
      return;
    otyper <<= 1;
 8004f82:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    ospeedr <<= 2;
 8004f86:	00bf      	lsls	r7, r7, #2
    pupdr <<= 2;
 8004f88:	00b6      	lsls	r6, r6, #2
    moder <<= 2;
 8004f8a:	00ad      	lsls	r5, r5, #2
    bit++;
 8004f8c:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 8004f8e:	f011 0f01 	tst.w	r1, #1
 8004f92:	d0f4      	beq.n	8004f7e <_pal_lld_setgroupmode+0x3e>
      altrmask = altr << ((bit & 7) * 4);
 8004f94:	f004 0e07 	and.w	lr, r4, #7
 8004f98:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004f9c:	fa02 f80e 	lsl.w	r8, r2, lr
      m1 = 1 << bit;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	fa03 fa04 	lsl.w	sl, r3, r4
      m2 = 3 << (bit * 2);
 8004fa6:	fa04 f303 	lsl.w	r3, r4, r3
 8004faa:	f04f 0b03 	mov.w	fp, #3
 8004fae:	fa0b fb03 	lsl.w	fp, fp, r3
      m4 = 15 << ((bit & 7) * 4);
 8004fb2:	230f      	movs	r3, #15
 8004fb4:	fa03 fe0e 	lsl.w	lr, r3, lr
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8004fb8:	6843      	ldr	r3, [r0, #4]
 8004fba:	ea23 030a 	bic.w	r3, r3, sl
 8004fbe:	ea43 030c 	orr.w	r3, r3, ip
 8004fc2:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8004fc4:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8004fc8:	ea6f 030b 	mvn.w	r3, fp
 8004fcc:	ea0a 0a03 	and.w	sl, sl, r3
 8004fd0:	ea4a 0a07 	orr.w	sl, sl, r7
 8004fd4:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8004fd8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8004fdc:	ea03 0a0a 	and.w	sl, r3, sl
 8004fe0:	ea4a 0a06 	orr.w	sl, sl, r6
 8004fe4:	f8c0 a00c 	str.w	sl, [r0, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8004fe8:	f1b9 0f02 	cmp.w	r9, #2
 8004fec:	d0b7      	beq.n	8004f5e <_pal_lld_setgroupmode+0x1e>
        port->MODER   = (port->MODER & ~m2) | moder;
 8004fee:	f8d0 a000 	ldr.w	sl, [r0]
 8004ff2:	ea03 030a 	and.w	r3, r3, sl
 8004ff6:	432b      	orrs	r3, r5
 8004ff8:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8004ffa:	2c07      	cmp	r4, #7
 8004ffc:	d80f      	bhi.n	800501e <_pal_lld_setgroupmode+0xde>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8004ffe:	6a03      	ldr	r3, [r0, #32]
 8005000:	ea23 0e0e 	bic.w	lr, r3, lr
 8005004:	ea4e 0308 	orr.w	r3, lr, r8
 8005008:	6203      	str	r3, [r0, #32]
 800500a:	e7b8      	b.n	8004f7e <_pal_lld_setgroupmode+0x3e>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800500c:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8005010:	ea2a 0e0e 	bic.w	lr, sl, lr
 8005014:	ea4e 0808 	orr.w	r8, lr, r8
 8005018:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 800501c:	e7a9      	b.n	8004f72 <_pal_lld_setgroupmode+0x32>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800501e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005020:	ea23 0e0e 	bic.w	lr, r3, lr
 8005024:	ea4e 0308 	orr.w	r3, lr, r8
 8005028:	6243      	str	r3, [r0, #36]	; 0x24
 800502a:	e7a8      	b.n	8004f7e <_pal_lld_setgroupmode+0x3e>
  }
}
 800502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005030 <_pal_lld_enablepadevent>:
 *
 * @notapi
 */
void _pal_lld_enablepadevent(ioportid_t port,
                             iopadid_t pad,
                             ioeventmode_t mode) {
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	4607      	mov	r7, r0
 8005034:	460c      	mov	r4, r1
 8005036:	4616      	mov	r6, r2

  uint32_t padmask, cridx, croff, crmask, portidx;

  /* Mask of the pad.*/
  padmask = 1U << (uint32_t)pad;
 8005038:	2501      	movs	r5, #1
 800503a:	408d      	lsls	r5, r1

  /* Multiple channel setting of the same channel not allowed, first disable
     it. This is done because on STM32 the same channel cannot be mapped on
     multiple ports.*/
  osalDbgAssert(((EXTI->RTSR1 & padmask) == 0U) &&
 800503c:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	422b      	tst	r3, r5
 8005042:	d103      	bne.n	800504c <_pal_lld_enablepadevent+0x1c>
 8005044:	4b1e      	ldr	r3, [pc, #120]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	422b      	tst	r3, r5
 800504a:	d002      	beq.n	8005052 <_pal_lld_enablepadevent+0x22>
 800504c:	481d      	ldr	r0, [pc, #116]	; (80050c4 <_pal_lld_enablepadevent+0x94>)
 800504e:	f002 fb57 	bl	8007700 <chSysHalt>
                ((EXTI->FTSR1 & padmask) == 0U), "channel already in use");

  /* Index and mask of the SYSCFG CR register to be used.*/
  cridx  = (uint32_t)pad >> 2U;
 8005052:	08a2      	lsrs	r2, r4, #2
  croff = ((uint32_t)pad & 3U) * 4U;
 8005054:	f004 0403 	and.w	r4, r4, #3
 8005058:	00a4      	lsls	r4, r4, #2
  crmask = ~(0xFU << croff);
 800505a:	230f      	movs	r3, #15
 800505c:	fa03 f104 	lsl.w	r1, r3, r4

  /* Port index is obtained assuming that GPIO ports are placed at regular
     0x400 intervals in memory space. So far this is true for all devices.*/
  portidx = (((uint32_t)port - (uint32_t)GPIOA) >> 10U) & 0xFU;
 8005060:	f3c7 2783 	ubfx	r7, r7, #10, #4

  /* Port selection in SYSCFG.*/
  SYSCFG->EXTICR[cridx] = (SYSCFG->EXTICR[cridx] & crmask) | (portidx << croff);
 8005064:	4818      	ldr	r0, [pc, #96]	; (80050c8 <_pal_lld_enablepadevent+0x98>)
 8005066:	3202      	adds	r2, #2
 8005068:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800506c:	ea23 0301 	bic.w	r3, r3, r1
 8005070:	fa07 f404 	lsl.w	r4, r7, r4
 8005074:	431c      	orrs	r4, r3
 8005076:	f840 4022 	str.w	r4, [r0, r2, lsl #2]

  /* Programming edge registers.*/
  if (mode & PAL_EVENT_MODE_RISING_EDGE)
 800507a:	f016 0f01 	tst.w	r6, #1
 800507e:	d014      	beq.n	80050aa <_pal_lld_enablepadevent+0x7a>
    EXTI->RTSR1 |= padmask;
 8005080:	4a0f      	ldr	r2, [pc, #60]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 8005082:	6893      	ldr	r3, [r2, #8]
 8005084:	432b      	orrs	r3, r5
 8005086:	6093      	str	r3, [r2, #8]
  else
    EXTI->RTSR1 &= ~padmask;
  if (mode & PAL_EVENT_MODE_FALLING_EDGE)
 8005088:	f016 0f02 	tst.w	r6, #2
 800508c:	d113      	bne.n	80050b6 <_pal_lld_enablepadevent+0x86>
    EXTI->FTSR1 |= padmask;
  else
    EXTI->FTSR1 &= ~padmask;
 800508e:	4a0c      	ldr	r2, [pc, #48]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 8005090:	68d3      	ldr	r3, [r2, #12]
 8005092:	ea23 0305 	bic.w	r3, r3, r5
 8005096:	60d3      	str	r3, [r2, #12]
  /* Programming interrupt and event registers.*/
#if defined(STM32_EXTI_ENHANCED)
  EXTI_D1->IMR1 |= padmask;
  EXTI_D1->EMR1 &= ~padmask;
#else
  EXTI->IMR1 |= padmask;
 8005098:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	432a      	orrs	r2, r5
 800509e:	601a      	str	r2, [r3, #0]
  EXTI->EMR1 &= ~padmask;
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	ea22 0505 	bic.w	r5, r2, r5
 80050a6:	605d      	str	r5, [r3, #4]
#endif
}
 80050a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    EXTI->RTSR1 &= ~padmask;
 80050aa:	4a05      	ldr	r2, [pc, #20]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 80050ac:	6893      	ldr	r3, [r2, #8]
 80050ae:	ea23 0305 	bic.w	r3, r3, r5
 80050b2:	6093      	str	r3, [r2, #8]
 80050b4:	e7e8      	b.n	8005088 <_pal_lld_enablepadevent+0x58>
    EXTI->FTSR1 |= padmask;
 80050b6:	4a02      	ldr	r2, [pc, #8]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 80050b8:	68d3      	ldr	r3, [r2, #12]
 80050ba:	432b      	orrs	r3, r5
 80050bc:	60d3      	str	r3, [r2, #12]
 80050be:	e7eb      	b.n	8005098 <_pal_lld_enablepadevent+0x68>
 80050c0:	40013c00 	.word	0x40013c00
 80050c4:	0801959c 	.word	0x0801959c
 80050c8:	40013800 	.word	0x40013800
 80050cc:	f3af 8000 	nop.w

080050d0 <_pal_lld_disablepadevent>:
 * @param[in] port      port identifier
 * @param[in] pad       pad number within the port
 *
 * @notapi
 */
void _pal_lld_disablepadevent(ioportid_t port, iopadid_t pad) {
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t padmask, rtsr1, ftsr1;

  rtsr1 = EXTI->RTSR1;
 80050d2:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <_pal_lld_disablepadevent+0x70>)
 80050d4:	689e      	ldr	r6, [r3, #8]
  ftsr1 = EXTI->FTSR1;
 80050d6:	68df      	ldr	r7, [r3, #12]

  /* Mask of the pad.*/
  padmask = 1U << (uint32_t)pad;
 80050d8:	2401      	movs	r4, #1
 80050da:	408c      	lsls	r4, r1

  /* If either RTRS1 or FTSR1 is enabled then the channel is in use.*/
  if (((rtsr1 | ftsr1) & padmask) != 0U) {
 80050dc:	ea46 0307 	orr.w	r3, r6, r7
 80050e0:	4223      	tst	r3, r4
 80050e2:	d027      	beq.n	8005134 <_pal_lld_disablepadevent+0x64>
 80050e4:	460d      	mov	r5, r1
    uint32_t cridx, croff, crport, portidx;

    /* Index and mask of the SYSCFG CR register to be used.*/
    cridx  = (uint32_t)pad >> 2U;
 80050e6:	0889      	lsrs	r1, r1, #2
    croff = ((uint32_t)pad & 3U) * 4U;
 80050e8:	f005 0303 	and.w	r3, r5, #3
 80050ec:	009a      	lsls	r2, r3, #2

    /* Port index is obtained assuming that GPIO ports are placed at regular
       0x400 intervals in memory space. So far this is true for all devices.*/
    portidx = (((uint32_t)port - (uint32_t)GPIOA) >> 10U) & 0xFU;
 80050ee:	f3c0 2083 	ubfx	r0, r0, #10, #4

    crport = (SYSCFG->EXTICR[cridx] >> croff) & 0xFU;
 80050f2:	1c8b      	adds	r3, r1, #2
 80050f4:	4913      	ldr	r1, [pc, #76]	; (8005144 <_pal_lld_disablepadevent+0x74>)
 80050f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80050fa:	40d3      	lsrs	r3, r2
 80050fc:	f003 030f 	and.w	r3, r3, #15

    osalDbgAssert(crport == portidx, "channel mapped on different port");
 8005100:	4298      	cmp	r0, r3
 8005102:	d118      	bne.n	8005136 <_pal_lld_disablepadevent+0x66>
    EXTI->RTSR1     = rtsr1 & ~padmask;
    EXTI->FTSR1     = ftsr1 & ~padmask;
    EXTI_D1->PR1    = padmask;
#else
    /* Disabling channel.*/
    EXTI->IMR1  &= ~padmask;
 8005104:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <_pal_lld_disablepadevent+0x70>)
 8005106:	6819      	ldr	r1, [r3, #0]
 8005108:	43e2      	mvns	r2, r4
 800510a:	4011      	ands	r1, r2
 800510c:	6019      	str	r1, [r3, #0]
    EXTI->EMR1  &= ~padmask;
 800510e:	6859      	ldr	r1, [r3, #4]
 8005110:	4011      	ands	r1, r2
 8005112:	6059      	str	r1, [r3, #4]
    EXTI->RTSR1  = rtsr1 & ~padmask;
 8005114:	4016      	ands	r6, r2
 8005116:	609e      	str	r6, [r3, #8]
    EXTI->FTSR1  = ftsr1 & ~padmask;
 8005118:	403a      	ands	r2, r7
 800511a:	60da      	str	r2, [r3, #12]
    EXTI->PR1    = padmask;
 800511c:	615c      	str	r4, [r3, #20]
#endif

#if PAL_USE_CALLBACKS || PAL_USE_WAIT
  /* Callback cleared and/or thread reset.*/
  _pal_clear_event(pad);
 800511e:	490a      	ldr	r1, [pc, #40]	; (8005148 <_pal_lld_disablepadevent+0x78>)
 8005120:	eb01 1505 	add.w	r5, r1, r5, lsl #4
 8005124:	f06f 0101 	mvn.w	r1, #1
 8005128:	4628      	mov	r0, r5
 800512a:	f003 fe99 	bl	8008e60 <chThdDequeueAllI>
 800512e:	2300      	movs	r3, #0
 8005130:	60ab      	str	r3, [r5, #8]
 8005132:	60eb      	str	r3, [r5, #12]
#endif
  }
}
 8005134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osalDbgAssert(crport == portidx, "channel mapped on different port");
 8005136:	4805      	ldr	r0, [pc, #20]	; (800514c <_pal_lld_disablepadevent+0x7c>)
 8005138:	f002 fae2 	bl	8007700 <chSysHalt>
 800513c:	e7e2      	b.n	8005104 <_pal_lld_disablepadevent+0x34>
 800513e:	bf00      	nop
 8005140:	40013c00 	.word	0x40013c00
 8005144:	40013800 	.word	0x40013800
 8005148:	200046e8 	.word	0x200046e8
 800514c:	080195b4 	.word	0x080195b4

08005150 <i2c_lld_abort_operation>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_abort_operation(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8005150:	6b43      	ldr	r3, [r0, #52]	; 0x34

  /* Stops the I2C peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8005152:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005156:	601a      	str	r2, [r3, #0]
  dp->CR1 = 0;
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
  dp->CR2 = 0;
 800515c:	605a      	str	r2, [r3, #4]
  dp->SR1 = 0;
 800515e:	615a      	str	r2, [r3, #20]

  /* Stops the associated DMA streams.*/
  dmaStreamDisable(i2cp->dmatx);
 8005160:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	6813      	ldr	r3, [r2, #0]
 8005166:	f023 031f 	bic.w	r3, r3, #31
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	f012 0f01 	tst.w	r2, #1
 8005176:	d1f9      	bne.n	800516c <i2c_lld_abort_operation+0x1c>
 8005178:	7a59      	ldrb	r1, [r3, #9]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	233d      	movs	r3, #61	; 0x3d
 800517e:	408b      	lsls	r3, r1
 8005180:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8005182:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	6813      	ldr	r3, [r2, #0]
 8005188:	f023 031f 	bic.w	r3, r3, #31
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	f012 0f01 	tst.w	r2, #1
 8005198:	d1f9      	bne.n	800518e <i2c_lld_abort_operation+0x3e>
 800519a:	7a59      	ldrb	r1, [r3, #9]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	233d      	movs	r3, #61	; 0x3d
 80051a0:	408b      	lsls	r3, r1
 80051a2:	6013      	str	r3, [r2, #0]
}
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	f3af 8000 	nop.w
 80051ac:	f3af 8000 	nop.w

080051b0 <i2c_lld_set_opmode>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80051b0:	6b41      	ldr	r1, [r0, #52]	; 0x34
  i2copmode_t opmode = i2cp->config->op_mode;
 80051b2:	6843      	ldr	r3, [r0, #4]
 80051b4:	781a      	ldrb	r2, [r3, #0]
  uint16_t regCR1;

  regCR1 = dp->CR1;
 80051b6:	680b      	ldr	r3, [r1, #0]
 80051b8:	b29b      	uxth	r3, r3
  switch (opmode) {
 80051ba:	2a02      	cmp	r2, #2
 80051bc:	d009      	beq.n	80051d2 <i2c_lld_set_opmode+0x22>
 80051be:	2a03      	cmp	r2, #3
 80051c0:	d00d      	beq.n	80051de <i2c_lld_set_opmode+0x2e>
 80051c2:	2a01      	cmp	r2, #1
 80051c4:	d001      	beq.n	80051ca <i2c_lld_set_opmode+0x1a>
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  }
  dp->CR1 = regCR1;
 80051c6:	600b      	str	r3, [r1, #0]
}
 80051c8:	4770      	bx	lr
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 80051ca:	f023 030a 	bic.w	r3, r3, #10
 80051ce:	b29b      	uxth	r3, r3
    break;
 80051d0:	e7f9      	b.n	80051c6 <i2c_lld_set_opmode+0x16>
 80051d2:	f023 0308 	bic.w	r3, r3, #8
 80051d6:	b29b      	uxth	r3, r3
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 80051d8:	f043 0302 	orr.w	r3, r3, #2
    break;
 80051dc:	e7f3      	b.n	80051c6 <i2c_lld_set_opmode+0x16>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 80051de:	f043 030a 	orr.w	r3, r3, #10
    break;
 80051e2:	e7f0      	b.n	80051c6 <i2c_lld_set_opmode+0x16>
 80051e4:	f3af 8000 	nop.w
 80051e8:	f3af 8000 	nop.w
 80051ec:	f3af 8000 	nop.w

080051f0 <i2c_lld_serve_event_interrupt>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
 80051f0:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 80051f2:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 80051f4:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 80051f6:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80051f8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80051fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005200:	4a40      	ldr	r2, [pc, #256]	; (8005304 <i2c_lld_serve_event_interrupt+0x114>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d02f      	beq.n	8005266 <i2c_lld_serve_event_interrupt+0x76>
 8005206:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 800520a:	d318      	bcc.n	800523e <i2c_lld_serve_event_interrupt+0x4e>
 800520c:	4a3e      	ldr	r2, [pc, #248]	; (8005308 <i2c_lld_serve_event_interrupt+0x118>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d041      	beq.n	8005296 <i2c_lld_serve_event_interrupt+0xa6>
 8005212:	3202      	adds	r2, #2
 8005214:	4293      	cmp	r3, r2
 8005216:	d049      	beq.n	80052ac <i2c_lld_serve_event_interrupt+0xbc>
 8005218:	4a3c      	ldr	r2, [pc, #240]	; (800530c <i2c_lld_serve_event_interrupt+0x11c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d103      	bne.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800521e:	8c03      	ldrh	r3, [r0, #32]
 8005220:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8005224:	6123      	str	r3, [r4, #16]
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8005226:	f015 0f0a 	tst.w	r5, #10
 800522a:	d000      	beq.n	800522e <i2c_lld_serve_event_interrupt+0x3e>
    (void)dp->SR2;
 800522c:	69a3      	ldr	r3, [r4, #24]

  /* Errata 2.4.6 for STM32F40x, Spurious Bus Error detection in Master mode.*/
  if (event & I2C_SR1_BERR) {
 800522e:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005232:	d003      	beq.n	800523c <i2c_lld_serve_event_interrupt+0x4c>
    dp->SR1 &= ~I2C_SR1_BERR;
 8005234:	6963      	ldr	r3, [r4, #20]
 8005236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800523a:	6163      	str	r3, [r4, #20]
  }
}
 800523c:	bd70      	pop	{r4, r5, r6, pc}
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800523e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005242:	d002      	beq.n	800524a <i2c_lld_serve_event_interrupt+0x5a>
 8005244:	3a01      	subs	r2, #1
 8005246:	4293      	cmp	r3, r2
 8005248:	d1ed      	bne.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
    if ((i2cp->addr >> 8) > 0) {
 800524a:	8c03      	ldrh	r3, [r0, #32]
 800524c:	0a1a      	lsrs	r2, r3, #8
 800524e:	d008      	beq.n	8005262 <i2c_lld_serve_event_interrupt+0x72>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8005250:	f002 0206 	and.w	r2, r2, #6
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	4313      	orrs	r3, r2
 800525a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800525e:	6123      	str	r3, [r4, #16]
 8005260:	e7e1      	b.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
      dp->DR = i2cp->addr;
 8005262:	6123      	str	r3, [r4, #16]
 8005264:	e7df      	b.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8005266:	6863      	ldr	r3, [r4, #4]
 8005268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800526c:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800526e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	6013      	str	r3, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800527a:	6863      	ldr	r3, [r4, #4]
 800527c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005280:	6063      	str	r3, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8005282:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d8cc      	bhi.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
      dp->CR1 &= ~I2C_CR1_ACK;
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005292:	6023      	str	r3, [r4, #0]
 8005294:	e7c7      	b.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8005296:	6863      	ldr	r3, [r4, #4]
 8005298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800529c:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800529e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	6813      	ldr	r3, [r2, #0]
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	6013      	str	r3, [r2, #0]
    break;
 80052aa:	e7bc      	b.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
    (void)dp->DR; /* clear BTF.*/
 80052ac:	6923      	ldr	r3, [r4, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80052ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	b143      	cbz	r3, 80052c8 <i2c_lld_serve_event_interrupt+0xd8>
      i2cp->addr |= 0x01;
 80052b6:	8c03      	ldrh	r3, [r0, #32]
 80052b8:	f043 0301 	orr.w	r3, r3, #1
 80052bc:	8403      	strh	r3, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80052c4:	6023      	str	r3, [r4, #0]
      return;
 80052c6:	e7b9      	b.n	800523c <i2c_lld_serve_event_interrupt+0x4c>
 80052c8:	4606      	mov	r6, r0
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80052ca:	6863      	ldr	r3, [r4, #4]
 80052cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052d0:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	2320      	movs	r3, #32
 80052dc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80052e0:	f003 feae 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80052e4:	f002 fbcc 	bl	8007a80 <_dbg_check_lock_from_isr>
  chThdResumeI(trp, msg);
 80052e8:	2100      	movs	r1, #0
 80052ea:	f106 001c 	add.w	r0, r6, #28
 80052ee:	f003 fd27 	bl	8008d40 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 80052f2:	f002 fbdd 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80052f6:	f003 feab 	bl	8009050 <_stats_stop_measure_crit_isr>
 80052fa:	2300      	movs	r3, #0
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	e791      	b.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
 8005302:	bf00      	nop
 8005304:	00030002 	.word	0x00030002
 8005308:	00070082 	.word	0x00070082
 800530c:	00030008 	.word	0x00030008

08005310 <i2c_lld_serve_error_interrupt>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in]  sr       content of the SR1 register to be decoded
 *
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {
 8005310:	b510      	push	{r4, lr}

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8005312:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	6813      	ldr	r3, [r2, #0]
 8005318:	f023 031f 	bic.w	r3, r3, #31
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	f012 0f01 	tst.w	r2, #1
 8005328:	d1f9      	bne.n	800531e <i2c_lld_serve_error_interrupt+0xe>
 800532a:	7a5c      	ldrb	r4, [r3, #9]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	233d      	movs	r3, #61	; 0x3d
 8005330:	40a3      	lsls	r3, r4
 8005332:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8005334:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	6813      	ldr	r3, [r2, #0]
 800533a:	f023 031f 	bic.w	r3, r3, #31
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	f012 0f01 	tst.w	r2, #1
 800534a:	d1f9      	bne.n	8005340 <i2c_lld_serve_error_interrupt+0x30>
 800534c:	7a5c      	ldrb	r4, [r3, #9]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	233d      	movs	r3, #61	; 0x3d
 8005352:	40a3      	lsls	r3, r4
 8005354:	6013      	str	r3, [r2, #0]

  i2cp->errors = I2C_NO_ERROR;
 8005356:	2300      	movs	r3, #0
 8005358:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 800535a:	f411 7f80 	tst.w	r1, #256	; 0x100
 800535e:	d006      	beq.n	800536e <i2c_lld_serve_error_interrupt+0x5e>
    i2cp->errors |= I2C_BUS_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	6083      	str	r3, [r0, #8]
    /* Errata 2.4.6 for STM32F40x, Spurious Bus Error detection in
       Master mode.*/
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 8005364:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005366:	6953      	ldr	r3, [r2, #20]
 8005368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800536c:	6153      	str	r3, [r2, #20]
  }

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800536e:	f411 7f00 	tst.w	r1, #512	; 0x200
 8005372:	d003      	beq.n	800537c <i2c_lld_serve_error_interrupt+0x6c>
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8005374:	6883      	ldr	r3, [r0, #8]
 8005376:	f043 0302 	orr.w	r3, r3, #2
 800537a:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800537c:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8005380:	d00d      	beq.n	800539e <i2c_lld_serve_error_interrupt+0x8e>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8005382:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005384:	6853      	ldr	r3, [r2, #4]
 8005386:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800538a:	6053      	str	r3, [r2, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800538c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800538e:	6813      	ldr	r3, [r2, #0]
 8005390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005394:	6013      	str	r3, [r2, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8005396:	6883      	ldr	r3, [r0, #8]
 8005398:	f043 0304 	orr.w	r3, r3, #4
 800539c:	6083      	str	r3, [r0, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800539e:	f411 6f00 	tst.w	r1, #2048	; 0x800
 80053a2:	d003      	beq.n	80053ac <i2c_lld_serve_error_interrupt+0x9c>
    i2cp->errors |= I2C_OVERRUN;
 80053a4:	6883      	ldr	r3, [r0, #8]
 80053a6:	f043 0308 	orr.w	r3, r3, #8
 80053aa:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 80053ac:	f411 4f80 	tst.w	r1, #16384	; 0x4000
 80053b0:	d003      	beq.n	80053ba <i2c_lld_serve_error_interrupt+0xaa>
    i2cp->errors |= I2C_TIMEOUT;
 80053b2:	6883      	ldr	r3, [r0, #8]
 80053b4:	f043 0320 	orr.w	r3, r3, #32
 80053b8:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 80053ba:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 80053be:	d003      	beq.n	80053c8 <i2c_lld_serve_error_interrupt+0xb8>
    i2cp->errors |= I2C_PEC_ERROR;
 80053c0:	6883      	ldr	r3, [r0, #8]
 80053c2:	f043 0310 	orr.w	r3, r3, #16
 80053c6:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80053c8:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80053cc:	d102      	bne.n	80053d4 <i2c_lld_serve_error_interrupt+0xc4>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 80053ce:	6883      	ldr	r3, [r0, #8]
 80053d0:	b92b      	cbnz	r3, 80053de <i2c_lld_serve_error_interrupt+0xce>
    _i2c_wakeup_error_isr(i2cp);
}
 80053d2:	bd10      	pop	{r4, pc}
    i2cp->errors |= I2C_SMB_ALERT;
 80053d4:	6883      	ldr	r3, [r0, #8]
 80053d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053da:	6083      	str	r3, [r0, #8]
 80053dc:	e7f7      	b.n	80053ce <i2c_lld_serve_error_interrupt+0xbe>
 80053de:	4604      	mov	r4, r0
 80053e0:	2320      	movs	r3, #32
 80053e2:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80053e6:	f003 fe2b 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80053ea:	f002 fb49 	bl	8007a80 <_dbg_check_lock_from_isr>
 80053ee:	f06f 0101 	mvn.w	r1, #1
 80053f2:	f104 001c 	add.w	r0, r4, #28
 80053f6:	f003 fca3 	bl	8008d40 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 80053fa:	f002 fb59 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80053fe:	f003 fe27 	bl	8009050 <_stats_stop_measure_crit_isr>
 8005402:	2300      	movs	r3, #0
 8005404:	f383 8811 	msr	BASEPRI, r3
}
 8005408:	e7e3      	b.n	80053d2 <i2c_lld_serve_error_interrupt+0xc2>
 800540a:	bf00      	nop
 800540c:	f3af 8000 	nop.w

08005410 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4604      	mov	r4, r0
  I2C_TypeDef *dp = i2cp->i2c;
 8005414:	6b45      	ldr	r5, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005416:	f011 0f0c 	tst.w	r1, #12
 800541a:	d115      	bne.n	8005448 <i2c_lld_serve_tx_end_irq+0x38>
  dmaStreamDisable(i2cp->dmatx);
 800541c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	6813      	ldr	r3, [r2, #0]
 8005422:	f023 031f 	bic.w	r3, r3, #31
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	6812      	ldr	r2, [r2, #0]
 800542e:	f012 0f01 	tst.w	r2, #1
 8005432:	d1f9      	bne.n	8005428 <i2c_lld_serve_tx_end_irq+0x18>
 8005434:	7a59      	ldrb	r1, [r3, #9]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	233d      	movs	r3, #61	; 0x3d
 800543a:	408b      	lsls	r3, r1
 800543c:	6013      	str	r3, [r2, #0]
  dp->CR2 |= I2C_CR2_ITEVTEN;
 800543e:	686b      	ldr	r3, [r5, #4]
 8005440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005444:	606b      	str	r3, [r5, #4]
}
 8005446:	bd38      	pop	{r3, r4, r5, pc}
  chSysHalt(reason);
 8005448:	4801      	ldr	r0, [pc, #4]	; (8005450 <i2c_lld_serve_tx_end_irq+0x40>)
 800544a:	f002 f959 	bl	8007700 <chSysHalt>
 800544e:	e7e5      	b.n	800541c <i2c_lld_serve_tx_end_irq+0xc>
 8005450:	0801a4ac 	.word	0x0801a4ac
 8005454:	f3af 8000 	nop.w
 8005458:	f3af 8000 	nop.w
 800545c:	f3af 8000 	nop.w

08005460 <i2c_lld_serve_rx_end_irq>:
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4604      	mov	r4, r0
  I2C_TypeDef *dp = i2cp->i2c;
 8005464:	6b45      	ldr	r5, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005466:	f011 0f0c 	tst.w	r1, #12
 800546a:	d130      	bne.n	80054ce <i2c_lld_serve_rx_end_irq+0x6e>
  dmaStreamDisable(i2cp->dmarx);
 800546c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	6813      	ldr	r3, [r2, #0]
 8005472:	f023 031f 	bic.w	r3, r3, #31
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	f012 0f01 	tst.w	r2, #1
 8005482:	d1f9      	bne.n	8005478 <i2c_lld_serve_rx_end_irq+0x18>
 8005484:	7a59      	ldrb	r1, [r3, #9]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	233d      	movs	r3, #61	; 0x3d
 800548a:	408b      	lsls	r3, r1
 800548c:	6013      	str	r3, [r2, #0]
  dp->CR2 &= ~I2C_CR2_LAST;
 800548e:	686b      	ldr	r3, [r5, #4]
 8005490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005494:	606b      	str	r3, [r5, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8005496:	682b      	ldr	r3, [r5, #0]
 8005498:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800549c:	602b      	str	r3, [r5, #0]
  dp->CR1 |= I2C_CR1_STOP;
 800549e:	682b      	ldr	r3, [r5, #0]
 80054a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054a4:	602b      	str	r3, [r5, #0]
 80054a6:	2320      	movs	r3, #32
 80054a8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80054ac:	f003 fdc8 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80054b0:	f002 fae6 	bl	8007a80 <_dbg_check_lock_from_isr>
  chThdResumeI(trp, msg);
 80054b4:	2100      	movs	r1, #0
 80054b6:	f104 001c 	add.w	r0, r4, #28
 80054ba:	f003 fc41 	bl	8008d40 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 80054be:	f002 faf7 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80054c2:	f003 fdc5 	bl	8009050 <_stats_stop_measure_crit_isr>
 80054c6:	2300      	movs	r3, #0
 80054c8:	f383 8811 	msr	BASEPRI, r3
}
 80054cc:	bd38      	pop	{r3, r4, r5, pc}
  chSysHalt(reason);
 80054ce:	4802      	ldr	r0, [pc, #8]	; (80054d8 <i2c_lld_serve_rx_end_irq+0x78>)
 80054d0:	f002 f916 	bl	8007700 <chSysHalt>
 80054d4:	e7ca      	b.n	800546c <i2c_lld_serve_rx_end_irq+0xc>
 80054d6:	bf00      	nop
 80054d8:	0801a4ac 	.word	0x0801a4ac
 80054dc:	f3af 8000 	nop.w

080054e0 <i2c_lld_set_clock>:
static void i2c_lld_set_clock(I2CDriver *i2cp) {
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 80054e2:	6b45      	ldr	r5, [r0, #52]	; 0x34
  int32_t clock_speed = i2cp->config->clock_speed;
 80054e4:	6843      	ldr	r3, [r0, #4]
 80054e6:	685c      	ldr	r4, [r3, #4]
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 80054e8:	7a1e      	ldrb	r6, [r3, #8]
  osalDbgCheck((i2cp != NULL) &&
 80054ea:	b120      	cbz	r0, 80054f6 <i2c_lld_set_clock+0x16>
 80054ec:	2c00      	cmp	r4, #0
 80054ee:	dd02      	ble.n	80054f6 <i2c_lld_set_clock+0x16>
 80054f0:	4b41      	ldr	r3, [pc, #260]	; (80055f8 <i2c_lld_set_clock+0x118>)
 80054f2:	429c      	cmp	r4, r3
 80054f4:	dd02      	ble.n	80054fc <i2c_lld_set_clock+0x1c>
 80054f6:	4841      	ldr	r0, [pc, #260]	; (80055fc <i2c_lld_set_clock+0x11c>)
 80054f8:	f002 f902 	bl	8007700 <chSysHalt>
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80054fc:	686b      	ldr	r3, [r5, #4]
 80054fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005502:	041b      	lsls	r3, r3, #16
 8005504:	0c1b      	lsrs	r3, r3, #16
 8005506:	606b      	str	r3, [r5, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8005508:	686b      	ldr	r3, [r5, #4]
 800550a:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
 800550e:	606b      	str	r3, [r5, #4]
  if (clock_speed <= 100000) {
 8005510:	4b3b      	ldr	r3, [pc, #236]	; (8005600 <i2c_lld_set_clock+0x120>)
 8005512:	429c      	cmp	r4, r3
 8005514:	dc23      	bgt.n	800555e <i2c_lld_set_clock+0x7e>
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");
 8005516:	2e01      	cmp	r6, #1
 8005518:	d115      	bne.n	8005546 <i2c_lld_set_clock+0x66>
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
 800551a:	0066      	lsls	r6, r4, #1
 800551c:	4a39      	ldr	r2, [pc, #228]	; (8005604 <i2c_lld_set_clock+0x124>)
 800551e:	fbb2 f3f6 	udiv	r3, r2, r6
 8005522:	fb06 2313 	mls	r3, r6, r3, r2
 8005526:	b993      	cbnz	r3, 800554e <i2c_lld_set_clock+0x6e>
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8005528:	4c36      	ldr	r4, [pc, #216]	; (8005604 <i2c_lld_set_clock+0x124>)
 800552a:	fbb4 f4f6 	udiv	r4, r4, r6
 800552e:	b2a4      	uxth	r4, r4
    osalDbgAssert(clock_div >= 0x04,
 8005530:	2c03      	cmp	r4, #3
 8005532:	d910      	bls.n	8005556 <i2c_lld_set_clock+0x76>
    regCCR |= (clock_div & I2C_CCR_CCR);
 8005534:	f3c4 060b 	ubfx	r6, r4, #0, #12
    dp->TRISE = I2C_CLK_FREQ + 1;
 8005538:	232b      	movs	r3, #43	; 0x2b
 800553a:	622b      	str	r3, [r5, #32]
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 800553c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8005540:	d253      	bcs.n	80055ea <i2c_lld_set_clock+0x10a>
  dp->CCR = regCCR;
 8005542:	61ee      	str	r6, [r5, #28]
}
 8005544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");
 8005546:	482d      	ldr	r0, [pc, #180]	; (80055fc <i2c_lld_set_clock+0x11c>)
 8005548:	f002 f8da 	bl	8007700 <chSysHalt>
 800554c:	e7e5      	b.n	800551a <i2c_lld_set_clock+0x3a>
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
 800554e:	482b      	ldr	r0, [pc, #172]	; (80055fc <i2c_lld_set_clock+0x11c>)
 8005550:	f002 f8d6 	bl	8007700 <chSysHalt>
 8005554:	e7e8      	b.n	8005528 <i2c_lld_set_clock+0x48>
    osalDbgAssert(clock_div >= 0x04,
 8005556:	4829      	ldr	r0, [pc, #164]	; (80055fc <i2c_lld_set_clock+0x11c>)
 8005558:	f002 f8d2 	bl	8007700 <chSysHalt>
 800555c:	e7ea      	b.n	8005534 <i2c_lld_set_clock+0x54>
  else if (clock_speed <= 400000) {
 800555e:	4b26      	ldr	r3, [pc, #152]	; (80055f8 <i2c_lld_set_clock+0x118>)
 8005560:	429c      	cmp	r4, r3
 8005562:	dc46      	bgt.n	80055f2 <i2c_lld_set_clock+0x112>
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
 8005564:	1eb3      	subs	r3, r6, #2
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	d80e      	bhi.n	800558a <i2c_lld_set_clock+0xaa>
    if (duty == FAST_DUTY_CYCLE_2) {
 800556c:	2e02      	cmp	r6, #2
 800556e:	d010      	beq.n	8005592 <i2c_lld_set_clock+0xb2>
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8005570:	2e03      	cmp	r6, #3
 8005572:	d025      	beq.n	80055c0 <i2c_lld_set_clock+0xe0>
  clock_div = I2C_CCR_CCR;
 8005574:	f640 74ff 	movw	r4, #4095	; 0xfff
  regCCR = 0;
 8005578:	2700      	movs	r7, #0
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 800557a:	f3c4 060b 	ubfx	r6, r4, #0, #12
 800557e:	433e      	orrs	r6, r7
 8005580:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8005584:	230d      	movs	r3, #13
 8005586:	622b      	str	r3, [r5, #32]
 8005588:	e7d8      	b.n	800553c <i2c_lld_set_clock+0x5c>
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
 800558a:	481c      	ldr	r0, [pc, #112]	; (80055fc <i2c_lld_set_clock+0x11c>)
 800558c:	f002 f8b8 	bl	8007700 <chSysHalt>
 8005590:	e7ec      	b.n	800556c <i2c_lld_set_clock+0x8c>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
 8005592:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005596:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <i2c_lld_set_clock+0x124>)
 8005598:	fbb2 f3f4 	udiv	r3, r2, r4
 800559c:	fb04 2313 	mls	r3, r4, r3, r2
 80055a0:	b953      	cbnz	r3, 80055b8 <i2c_lld_set_clock+0xd8>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 80055a2:	4b18      	ldr	r3, [pc, #96]	; (8005604 <i2c_lld_set_clock+0x124>)
 80055a4:	fbb3 f4f4 	udiv	r4, r3, r4
 80055a8:	b2a4      	uxth	r4, r4
  regCCR = 0;
 80055aa:	2700      	movs	r7, #0
    osalDbgAssert(clock_div >= 0x01,
 80055ac:	2c00      	cmp	r4, #0
 80055ae:	d1e4      	bne.n	800557a <i2c_lld_set_clock+0x9a>
 80055b0:	4812      	ldr	r0, [pc, #72]	; (80055fc <i2c_lld_set_clock+0x11c>)
 80055b2:	f002 f8a5 	bl	8007700 <chSysHalt>
 80055b6:	e7e0      	b.n	800557a <i2c_lld_set_clock+0x9a>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
 80055b8:	4810      	ldr	r0, [pc, #64]	; (80055fc <i2c_lld_set_clock+0x11c>)
 80055ba:	f002 f8a1 	bl	8007700 <chSysHalt>
 80055be:	e7f0      	b.n	80055a2 <i2c_lld_set_clock+0xc2>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
 80055c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80055c4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 80055c8:	4a0e      	ldr	r2, [pc, #56]	; (8005604 <i2c_lld_set_clock+0x124>)
 80055ca:	fbb2 f3f6 	udiv	r3, r2, r6
 80055ce:	fb06 2313 	mls	r3, r6, r3, r2
 80055d2:	b933      	cbnz	r3, 80055e2 <i2c_lld_set_clock+0x102>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 80055d4:	4c0b      	ldr	r4, [pc, #44]	; (8005604 <i2c_lld_set_clock+0x124>)
 80055d6:	fbb4 f4f6 	udiv	r4, r4, r6
 80055da:	b2a4      	uxth	r4, r4
      regCCR |= I2C_CCR_DUTY;
 80055dc:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 80055e0:	e7e4      	b.n	80055ac <i2c_lld_set_clock+0xcc>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
 80055e2:	4806      	ldr	r0, [pc, #24]	; (80055fc <i2c_lld_set_clock+0x11c>)
 80055e4:	f002 f88c 	bl	8007700 <chSysHalt>
 80055e8:	e7f4      	b.n	80055d4 <i2c_lld_set_clock+0xf4>
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 80055ea:	4804      	ldr	r0, [pc, #16]	; (80055fc <i2c_lld_set_clock+0x11c>)
 80055ec:	f002 f888 	bl	8007700 <chSysHalt>
 80055f0:	e7a7      	b.n	8005542 <i2c_lld_set_clock+0x62>
  regCCR = 0;
 80055f2:	2600      	movs	r6, #0
 80055f4:	e7a5      	b.n	8005542 <i2c_lld_set_clock+0x62>
 80055f6:	bf00      	nop
 80055f8:	00061a80 	.word	0x00061a80
 80055fc:	080195d0 	.word	0x080195d0
 8005600:	000186a0 	.word	0x000186a0
 8005604:	0280de80 	.word	0x0280de80
 8005608:	f3af 8000 	nop.w
 800560c:	f3af 8000 	nop.w

08005610 <VectorBC>:
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8005610:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8005612:	f003 fcdd 	bl	8008fd0 <_stats_increase_irq>
 8005616:	4c08      	ldr	r4, [pc, #32]	; (8005638 <VectorBC+0x28>)
 8005618:	4620      	mov	r0, r4
 800561a:	f002 fb31 	bl	8007c80 <_trace_isr_enter>
 800561e:	f002 fa5f 	bl	8007ae0 <_dbg_check_enter_isr>

  i2c_lld_serve_event_interrupt(&I2CD1);
 8005622:	4806      	ldr	r0, [pc, #24]	; (800563c <VectorBC+0x2c>)
 8005624:	f7ff fde4 	bl	80051f0 <i2c_lld_serve_event_interrupt>

  OSAL_IRQ_EPILOGUE();
 8005628:	f002 fa7a 	bl	8007b20 <_dbg_check_leave_isr>
 800562c:	4620      	mov	r0, r4
 800562e:	f002 fb4f 	bl	8007cd0 <_trace_isr_leave>
 8005632:	f006 fad5 	bl	800bbe0 <_port_irq_epilogue>
}
 8005636:	bd10      	pop	{r4, pc}
 8005638:	080195e4 	.word	0x080195e4
 800563c:	200047e8 	.word	0x200047e8

08005640 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8005640:	b570      	push	{r4, r5, r6, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 8005642:	4d0e      	ldr	r5, [pc, #56]	; (800567c <VectorC0+0x3c>)
 8005644:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005646:	695c      	ldr	r4, [r3, #20]
 8005648:	b2a4      	uxth	r4, r4

  OSAL_IRQ_PROLOGUE();
 800564a:	f003 fcc1 	bl	8008fd0 <_stats_increase_irq>
 800564e:	4e0c      	ldr	r6, [pc, #48]	; (8005680 <VectorC0+0x40>)
 8005650:	4630      	mov	r0, r6
 8005652:	f002 fb15 	bl	8007c80 <_trace_isr_enter>
 8005656:	f002 fa43 	bl	8007ae0 <_dbg_check_enter_isr>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800565a:	f404 435f 	and.w	r3, r4, #57088	; 0xdf00
 800565e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005660:	43db      	mvns	r3, r3
 8005662:	6153      	str	r3, [r2, #20]
  i2c_lld_serve_error_interrupt(&I2CD1, sr);
 8005664:	4621      	mov	r1, r4
 8005666:	4628      	mov	r0, r5
 8005668:	f7ff fe52 	bl	8005310 <i2c_lld_serve_error_interrupt>

  OSAL_IRQ_EPILOGUE();
 800566c:	f002 fa58 	bl	8007b20 <_dbg_check_leave_isr>
 8005670:	4630      	mov	r0, r6
 8005672:	f002 fb2d 	bl	8007cd0 <_trace_isr_leave>
 8005676:	f006 fab3 	bl	800bbe0 <_port_irq_epilogue>
}
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	200047e8 	.word	0x200047e8
 8005680:	080195f0 	.word	0x080195f0
 8005684:	f3af 8000 	nop.w
 8005688:	f3af 8000 	nop.w
 800568c:	f3af 8000 	nop.w

08005690 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 8005690:	b510      	push	{r4, lr}

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
 8005692:	4c05      	ldr	r4, [pc, #20]	; (80056a8 <i2c_lld_init+0x18>)
 8005694:	4620      	mov	r0, r4
 8005696:	f7fc fc33 	bl	8001f00 <i2cObjectInit>
  I2CD1.thread = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	61e3      	str	r3, [r4, #28]
  I2CD1.i2c    = I2C1;
 800569e:	4a03      	ldr	r2, [pc, #12]	; (80056ac <i2c_lld_init+0x1c>)
 80056a0:	6362      	str	r2, [r4, #52]	; 0x34
  I2CD1.dmarx  = NULL;
 80056a2:	62e3      	str	r3, [r4, #44]	; 0x2c
  I2CD1.dmatx  = NULL;
 80056a4:	6323      	str	r3, [r4, #48]	; 0x30
  I2CD3.thread = NULL;
  I2CD3.i2c    = I2C3;
  I2CD3.dmarx  = NULL;
  I2CD3.dmatx  = NULL;
#endif /* STM32_I2C_USE_I2C3 */
}
 80056a6:	bd10      	pop	{r4, pc}
 80056a8:	200047e8 	.word	0x200047e8
 80056ac:	40005400 	.word	0x40005400

080056b0 <i2c_lld_start>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4604      	mov	r4, r0
  I2C_TypeDef *dp = i2cp->i2c;
 80056b4:	6b45      	ldr	r5, [r0, #52]	; 0x34

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80056b6:	7803      	ldrb	r3, [r0, #0]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d01a      	beq.n	80056f2 <i2c_lld_start+0x42>
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80056bc:	f105 0310 	add.w	r3, r5, #16
 80056c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	6093      	str	r3, [r2, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80056c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	6093      	str	r3, [r2, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 80056cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d0:	602b      	str	r3, [r5, #0]
  dp->CR1 = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	602b      	str	r3, [r5, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80056d6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80056da:	606b      	str	r3, [r5, #4]

  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
 80056dc:	4620      	mov	r0, r4
 80056de:	f7ff feff 	bl	80054e0 <i2c_lld_set_clock>
  i2c_lld_set_opmode(i2cp);
 80056e2:	4620      	mov	r0, r4
 80056e4:	f7ff fd64 	bl	80051b0 <i2c_lld_set_opmode>

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	602b      	str	r3, [r5, #0]
}
 80056f0:	bd38      	pop	{r3, r4, r5, pc}
    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80056f2:	f240 4356 	movw	r3, #1110	; 0x456
 80056f6:	6283      	str	r3, [r0, #40]	; 0x28
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80056f8:	f240 4316 	movw	r3, #1046	; 0x416
 80056fc:	6243      	str	r3, [r0, #36]	; 0x24
    if (&I2CD1 == i2cp) {
 80056fe:	4b22      	ldr	r3, [pc, #136]	; (8005788 <i2c_lld_start+0xd8>)
 8005700:	4298      	cmp	r0, r3
 8005702:	d1db      	bne.n	80056bc <i2c_lld_start+0xc>
      rccResetI2C1();
 8005704:	4b21      	ldr	r3, [pc, #132]	; (800578c <i2c_lld_start+0xdc>)
 8005706:	6a1a      	ldr	r2, [r3, #32]
 8005708:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800570c:	621a      	str	r2, [r3, #32]
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005714:	621a      	str	r2, [r3, #32]
 8005716:	6a1b      	ldr	r3, [r3, #32]
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C1_RX_DMA_STREAM,
 8005718:	4603      	mov	r3, r0
 800571a:	4a1d      	ldr	r2, [pc, #116]	; (8005790 <i2c_lld_start+0xe0>)
 800571c:	2105      	movs	r1, #5
 800571e:	2000      	movs	r0, #0
 8005720:	f7ff fa66 	bl	8004bf0 <dmaStreamAllocI>
 8005724:	62e0      	str	r0, [r4, #44]	; 0x2c
      osalDbgAssert(i2cp->dmarx != NULL, "unable to allocate stream");
 8005726:	b330      	cbz	r0, 8005776 <i2c_lld_start+0xc6>
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C1_TX_DMA_STREAM,
 8005728:	4623      	mov	r3, r4
 800572a:	4a1a      	ldr	r2, [pc, #104]	; (8005794 <i2c_lld_start+0xe4>)
 800572c:	2105      	movs	r1, #5
 800572e:	2006      	movs	r0, #6
 8005730:	f7ff fa5e 	bl	8004bf0 <dmaStreamAllocI>
 8005734:	6320      	str	r0, [r4, #48]	; 0x30
      osalDbgAssert(i2cp->dmatx != NULL, "unable to allocate stream");
 8005736:	b310      	cbz	r0, 800577e <i2c_lld_start+0xce>
      rccEnableI2C1(true);
 8005738:	4b14      	ldr	r3, [pc, #80]	; (800578c <i2c_lld_start+0xdc>)
 800573a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800573c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
 8005742:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005744:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005748:	661a      	str	r2, [r3, #96]	; 0x60
 800574a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 800574c:	2105      	movs	r1, #5
 800574e:	201f      	movs	r0, #31
 8005750:	f7fe fc8e 	bl	8004070 <nvicEnableVector>
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 8005754:	2105      	movs	r1, #5
 8005756:	2020      	movs	r0, #32
 8005758:	f7fe fc8a 	bl	8004070 <nvicEnableVector>
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 800575c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800575e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005766:	6263      	str	r3, [r4, #36]	; 0x24
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8005768:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800576a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800576e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005772:	62a3      	str	r3, [r4, #40]	; 0x28
 8005774:	e7a2      	b.n	80056bc <i2c_lld_start+0xc>
      osalDbgAssert(i2cp->dmarx != NULL, "unable to allocate stream");
 8005776:	4808      	ldr	r0, [pc, #32]	; (8005798 <i2c_lld_start+0xe8>)
 8005778:	f001 ffc2 	bl	8007700 <chSysHalt>
 800577c:	e7d4      	b.n	8005728 <i2c_lld_start+0x78>
      osalDbgAssert(i2cp->dmatx != NULL, "unable to allocate stream");
 800577e:	4806      	ldr	r0, [pc, #24]	; (8005798 <i2c_lld_start+0xe8>)
 8005780:	f001 ffbe 	bl	8007700 <chSysHalt>
 8005784:	e7d8      	b.n	8005738 <i2c_lld_start+0x88>
 8005786:	bf00      	nop
 8005788:	200047e8 	.word	0x200047e8
 800578c:	40023800 	.word	0x40023800
 8005790:	08005461 	.word	0x08005461
 8005794:	08005411 	.word	0x08005411
 8005798:	080195fc 	.word	0x080195fc
 800579c:	f3af 8000 	nop.w

080057a0 <i2c_lld_stop>:
 * @notapi
 */
void i2c_lld_stop(I2CDriver *i2cp) {

  /* If not in stopped state then disables the I2C clock.*/
  if (i2cp->state != I2C_STOP) {
 80057a0:	7803      	ldrb	r3, [r0, #0]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d021      	beq.n	80057ea <i2c_lld_stop+0x4a>
void i2c_lld_stop(I2CDriver *i2cp) {
 80057a6:	b510      	push	{r4, lr}
 80057a8:	4604      	mov	r4, r0

    /* I2C disable.*/
    i2c_lld_abort_operation(i2cp);
 80057aa:	f7ff fcd1 	bl	8005150 <i2c_lld_abort_operation>
    dmaStreamFreeI(i2cp->dmatx);
 80057ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80057b0:	f7ff face 	bl	8004d50 <dmaStreamFreeI>
    dmaStreamFreeI(i2cp->dmarx);
 80057b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80057b6:	f7ff facb 	bl	8004d50 <dmaStreamFreeI>
    i2cp->dmatx = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	6323      	str	r3, [r4, #48]	; 0x30
    i2cp->dmarx = NULL;
 80057be:	62e3      	str	r3, [r4, #44]	; 0x2c

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
 80057c0:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <i2c_lld_stop+0x4c>)
 80057c2:	429c      	cmp	r4, r3
 80057c4:	d000      	beq.n	80057c8 <i2c_lld_stop+0x28>
      nvicDisableVector(I2C3_ER_IRQn);
      rccDisableI2C3();
    }
#endif
  }
}
 80057c6:	bd10      	pop	{r4, pc}
      nvicDisableVector(I2C1_EV_IRQn);
 80057c8:	201f      	movs	r0, #31
 80057ca:	f7fe fc69 	bl	80040a0 <nvicDisableVector>
      nvicDisableVector(I2C1_ER_IRQn);
 80057ce:	2020      	movs	r0, #32
 80057d0:	f7fe fc66 	bl	80040a0 <nvicDisableVector>
      rccDisableI2C1();
 80057d4:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <i2c_lld_stop+0x50>)
 80057d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
 80057de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057e0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80057e4:	661a      	str	r2, [r3, #96]	; 0x60
 80057e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80057e8:	e7ed      	b.n	80057c6 <i2c_lld_stop+0x26>
 80057ea:	4770      	bx	lr
 80057ec:	200047e8 	.word	0x200047e8
 80057f0:	40023800 	.word	0x40023800
 80057f4:	f3af 8000 	nop.w
 80057f8:	f3af 8000 	nop.w
 80057fc:	f3af 8000 	nop.w

08005800 <i2c_lld_master_receive_timeout>:
 *
 * @notapi
 */
msg_t i2c_lld_master_receive_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                     uint8_t *rxbuf, size_t rxbytes,
                                     sysinterval_t timeout) {
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	4605      	mov	r5, r0
 8005804:	4617      	mov	r7, r2
 8005806:	461e      	mov	r6, r3
  I2C_TypeDef *dp = i2cp->i2c;
 8005808:	6b44      	ldr	r4, [r0, #52]	; 0x34
#if defined(STM32F1XX_I2C)
  osalDbgCheck(rxbytes > 1);
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 800580a:	2300      	movs	r3, #0
 800580c:	6083      	str	r3, [r0, #8]

  /* Initializes driver fields, LSB = 1 -> receive.*/
  i2cp->addr = (addr << 1) | 0x01;
 800580e:	0049      	lsls	r1, r1, #1
 8005810:	f041 0101 	orr.w	r1, r1, #1
 8005814:	8401      	strh	r1, [r0, #32]
  _dbg_check_unlock();
 8005816:	f002 f91b 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800581a:	f003 fc09 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800581e:	4b40      	ldr	r3, [pc, #256]	; (8005920 <i2c_lld_master_receive_timeout+0x120>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d004      	beq.n	8005830 <i2c_lld_master_receive_timeout+0x30>
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	6899      	ldr	r1, [r3, #8]
 800582a:	6893      	ldr	r3, [r2, #8]
 800582c:	4299      	cmp	r1, r3
 800582e:	d310      	bcc.n	8005852 <i2c_lld_master_receive_timeout+0x52>
 8005830:	2300      	movs	r3, #0
 8005832:	f383 8811 	msr	BASEPRI, r3

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8005836:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800583c:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 800583e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8005844:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	605e      	str	r6, [r3, #4]
  return (systime_t)STM32_ST_TIM->CNT;
 800584a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800584e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8005850:	e01b      	b.n	800588a <i2c_lld_master_receive_timeout+0x8a>
 8005852:	4834      	ldr	r0, [pc, #208]	; (8005924 <i2c_lld_master_receive_timeout+0x124>)
 8005854:	f001 ff54 	bl	8007700 <chSysHalt>
 8005858:	e7ea      	b.n	8005830 <i2c_lld_master_receive_timeout+0x30>
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
      dmaStreamDisable(i2cp->dmarx);
 800585a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	6813      	ldr	r3, [r2, #0]
 8005860:	f023 031f 	bic.w	r3, r3, #31
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	f012 0f01 	tst.w	r2, #1
 8005870:	d1f9      	bne.n	8005866 <i2c_lld_master_receive_timeout+0x66>
 8005872:	7a59      	ldrb	r1, [r3, #9]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	233d      	movs	r3, #61	; 0x3d
 8005878:	408b      	lsls	r3, r1
 800587a:	6013      	str	r3, [r2, #0]
      return MSG_TIMEOUT;
 800587c:	f04f 31ff 	mov.w	r1, #4294967295
  if (msg != MSG_OK) {
    dmaStreamDisable(i2cp->dmarx);
  }

  return msg;
}
 8005880:	4608      	mov	r0, r1
 8005882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005884:	2300      	movs	r3, #0
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	2320      	movs	r3, #32
 800588c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8005890:	f003 fbc6 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8005894:	f002 f8c4 	bl	8007a20 <_dbg_check_lock>
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8005898:	69a3      	ldr	r3, [r4, #24]
 800589a:	f013 0f02 	tst.w	r3, #2
 800589e:	d103      	bne.n	80058a8 <i2c_lld_master_receive_timeout+0xa8>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80058a6:	d018      	beq.n	80058da <i2c_lld_master_receive_timeout+0xda>
 80058a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80058ae:	1b9b      	subs	r3, r3, r6
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 80058b0:	f241 3287 	movw	r2, #4999	; 0x1387
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d8d0      	bhi.n	800585a <i2c_lld_master_receive_timeout+0x5a>
  _dbg_check_unlock();
 80058b8:	f002 f8ca 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80058bc:	f003 fbb8 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80058c0:	4b17      	ldr	r3, [pc, #92]	; (8005920 <i2c_lld_master_receive_timeout+0x120>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d0dd      	beq.n	8005884 <i2c_lld_master_receive_timeout+0x84>
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	6899      	ldr	r1, [r3, #8]
 80058cc:	6893      	ldr	r3, [r2, #8]
 80058ce:	4299      	cmp	r1, r3
 80058d0:	d2d8      	bcs.n	8005884 <i2c_lld_master_receive_timeout+0x84>
 80058d2:	4814      	ldr	r0, [pc, #80]	; (8005924 <i2c_lld_master_receive_timeout+0x124>)
 80058d4:	f001 ff14 	bl	8007700 <chSysHalt>
 80058d8:	e7d4      	b.n	8005884 <i2c_lld_master_receive_timeout+0x84>
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80058da:	6863      	ldr	r3, [r4, #4]
 80058dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058e0:	6063      	str	r3, [r4, #4]
  dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80058e8:	6023      	str	r3, [r4, #0]
  return chThdSuspendTimeoutS(trp, timeout);
 80058ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058ee:	f105 001c 	add.w	r0, r5, #28
 80058f2:	f003 fa05 	bl	8008d00 <chThdSuspendTimeoutS>
  if (msg != MSG_OK) {
 80058f6:	4601      	mov	r1, r0
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d0c1      	beq.n	8005880 <i2c_lld_master_receive_timeout+0x80>
    dmaStreamDisable(i2cp->dmarx);
 80058fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	6813      	ldr	r3, [r2, #0]
 8005902:	f023 031f 	bic.w	r3, r3, #31
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	f012 0f01 	tst.w	r2, #1
 8005912:	d1f9      	bne.n	8005908 <i2c_lld_master_receive_timeout+0x108>
 8005914:	7a58      	ldrb	r0, [r3, #9]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	233d      	movs	r3, #61	; 0x3d
 800591a:	4083      	lsls	r3, r0
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	e7af      	b.n	8005880 <i2c_lld_master_receive_timeout+0x80>
 8005920:	200050f8 	.word	0x200050f8
 8005924:	0801960c 	.word	0x0801960c
 8005928:	f3af 8000 	nop.w
 800592c:	f3af 8000 	nop.w

08005930 <i2c_lld_master_transmit_timeout>:
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      sysinterval_t timeout) {
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	4604      	mov	r4, r0
 8005934:	4617      	mov	r7, r2
 8005936:	461e      	mov	r6, r3
  I2C_TypeDef *dp = i2cp->i2c;
 8005938:	6b45      	ldr	r5, [r0, #52]	; 0x34
#if defined(STM32F1XX_I2C)
  osalDbgCheck((rxbytes == 0) || ((rxbytes > 1) && (rxbuf != NULL)));
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 800593a:	2300      	movs	r3, #0
 800593c:	6083      	str	r3, [r0, #8]

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 800593e:	0049      	lsls	r1, r1, #1
 8005940:	8401      	strh	r1, [r0, #32]
  _dbg_check_unlock();
 8005942:	f002 f885 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8005946:	f003 fb73 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800594a:	4b57      	ldr	r3, [pc, #348]	; (8005aa8 <i2c_lld_master_transmit_timeout+0x178>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d004      	beq.n	800595c <i2c_lld_master_transmit_timeout+0x2c>
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	6899      	ldr	r1, [r3, #8]
 8005956:	6893      	ldr	r3, [r2, #8]
 8005958:	4299      	cmp	r1, r3
 800595a:	d31c      	bcc.n	8005996 <i2c_lld_master_transmit_timeout+0x66>
 800595c:	2300      	movs	r3, #0
 800595e:	f383 8811 	msr	BASEPRI, r3

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8005962:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005968:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 800596a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8005970:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	605e      	str	r6, [r3, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8005976:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800597c:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 800597e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	9a06      	ldr	r2, [sp, #24]
 8005984:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8005986:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	9a07      	ldr	r2, [sp, #28]
 800598c:	605a      	str	r2, [r3, #4]
 800598e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005992:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8005994:	e02c      	b.n	80059f0 <i2c_lld_master_transmit_timeout+0xc0>
 8005996:	4845      	ldr	r0, [pc, #276]	; (8005aac <i2c_lld_master_transmit_timeout+0x17c>)
 8005998:	f001 feb2 	bl	8007700 <chSysHalt>
 800599c:	e7de      	b.n	800595c <i2c_lld_master_transmit_timeout+0x2c>
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
      dmaStreamDisable(i2cp->dmatx);
 800599e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	6813      	ldr	r3, [r2, #0]
 80059a4:	f023 031f 	bic.w	r3, r3, #31
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	f012 0f01 	tst.w	r2, #1
 80059b4:	d1f9      	bne.n	80059aa <i2c_lld_master_transmit_timeout+0x7a>
 80059b6:	7a59      	ldrb	r1, [r3, #9]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	233d      	movs	r3, #61	; 0x3d
 80059bc:	408b      	lsls	r3, r1
 80059be:	6013      	str	r3, [r2, #0]
      dmaStreamDisable(i2cp->dmarx);
 80059c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	6813      	ldr	r3, [r2, #0]
 80059c6:	f023 031f 	bic.w	r3, r3, #31
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	f012 0f01 	tst.w	r2, #1
 80059d6:	d1f9      	bne.n	80059cc <i2c_lld_master_transmit_timeout+0x9c>
 80059d8:	7a59      	ldrb	r1, [r3, #9]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	233d      	movs	r3, #61	; 0x3d
 80059de:	408b      	lsls	r3, r1
 80059e0:	6013      	str	r3, [r2, #0]
      return MSG_TIMEOUT;
 80059e2:	f04f 31ff 	mov.w	r1, #4294967295
    dmaStreamDisable(i2cp->dmatx);
    dmaStreamDisable(i2cp->dmarx);
  }

  return msg;
}
 80059e6:	4608      	mov	r0, r1
 80059e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ea:	2300      	movs	r3, #0
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	2320      	movs	r3, #32
 80059f2:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80059f6:	f003 fb13 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80059fa:	f002 f811 	bl	8007a20 <_dbg_check_lock>
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 80059fe:	69ab      	ldr	r3, [r5, #24]
 8005a00:	f013 0f02 	tst.w	r3, #2
 8005a04:	d103      	bne.n	8005a0e <i2c_lld_master_transmit_timeout+0xde>
 8005a06:	682b      	ldr	r3, [r5, #0]
 8005a08:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005a0c:	d018      	beq.n	8005a40 <i2c_lld_master_transmit_timeout+0x110>
 8005a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	1b9b      	subs	r3, r3, r6
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 8005a16:	f241 3287 	movw	r2, #4999	; 0x1387
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d8bf      	bhi.n	800599e <i2c_lld_master_transmit_timeout+0x6e>
  _dbg_check_unlock();
 8005a1e:	f002 f817 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8005a22:	f003 fb05 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005a26:	4b20      	ldr	r3, [pc, #128]	; (8005aa8 <i2c_lld_master_transmit_timeout+0x178>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d0dd      	beq.n	80059ea <i2c_lld_master_transmit_timeout+0xba>
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	6899      	ldr	r1, [r3, #8]
 8005a32:	6893      	ldr	r3, [r2, #8]
 8005a34:	4299      	cmp	r1, r3
 8005a36:	d2d8      	bcs.n	80059ea <i2c_lld_master_transmit_timeout+0xba>
 8005a38:	481c      	ldr	r0, [pc, #112]	; (8005aac <i2c_lld_master_transmit_timeout+0x17c>)
 8005a3a:	f001 fe61 	bl	8007700 <chSysHalt>
 8005a3e:	e7d4      	b.n	80059ea <i2c_lld_master_transmit_timeout+0xba>
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8005a40:	686b      	ldr	r3, [r5, #4]
 8005a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a46:	606b      	str	r3, [r5, #4]
  dp->CR1 |= I2C_CR1_START;
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4e:	602b      	str	r3, [r5, #0]
 8005a50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a54:	f104 001c 	add.w	r0, r4, #28
 8005a58:	f003 f952 	bl	8008d00 <chThdSuspendTimeoutS>
  if (msg != MSG_OK) {
 8005a5c:	4601      	mov	r1, r0
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d0c1      	beq.n	80059e6 <i2c_lld_master_transmit_timeout+0xb6>
    dmaStreamDisable(i2cp->dmatx);
 8005a62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	6813      	ldr	r3, [r2, #0]
 8005a68:	f023 031f 	bic.w	r3, r3, #31
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	6812      	ldr	r2, [r2, #0]
 8005a74:	f012 0f01 	tst.w	r2, #1
 8005a78:	d1f9      	bne.n	8005a6e <i2c_lld_master_transmit_timeout+0x13e>
 8005a7a:	7a58      	ldrb	r0, [r3, #9]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	233d      	movs	r3, #61	; 0x3d
 8005a80:	4083      	lsls	r3, r0
 8005a82:	6013      	str	r3, [r2, #0]
    dmaStreamDisable(i2cp->dmarx);
 8005a84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	6813      	ldr	r3, [r2, #0]
 8005a8a:	f023 031f 	bic.w	r3, r3, #31
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	f012 0f01 	tst.w	r2, #1
 8005a9a:	d1f9      	bne.n	8005a90 <i2c_lld_master_transmit_timeout+0x160>
 8005a9c:	7a58      	ldrb	r0, [r3, #9]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	233d      	movs	r3, #61	; 0x3d
 8005aa2:	4083      	lsls	r3, r0
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	e79e      	b.n	80059e6 <i2c_lld_master_transmit_timeout+0xb6>
 8005aa8:	200050f8 	.word	0x200050f8
 8005aac:	0801960c 	.word	0x0801960c

08005ab0 <rtc_enter_init>:
 *
 * @notapi
 */
static void rtc_enter_init(void) {

  RTCD1.rtc->ISR |= RTC_ISR_INIT;
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <rtc_enter_init+0x18>)
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	68d3      	ldr	r3, [r2, #12]
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aba:	60d3      	str	r3, [r2, #12]
  while ((RTCD1.rtc->ISR & RTC_ISR_INITF) == 0)
 8005abc:	68d3      	ldr	r3, [r2, #12]
 8005abe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ac2:	d0fb      	beq.n	8005abc <rtc_enter_init+0xc>
    ;
}
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20004820 	.word	0x20004820
 8005acc:	f3af 8000 	nop.w

08005ad0 <rtc_decode_time>:
 * @param[in] tr        TR register value
 * @param[out] timespec pointer to a @p RTCDateTime structure
 *
 * @notapi
 */
static void rtc_decode_time(uint32_t tr, RTCDateTime *timespec) {
 8005ad0:	b410      	push	{r4}
  uint32_t n;

  n  = ((tr >> RTC_TR_HT_OFFSET) & 3)   * 36000000;
 8005ad2:	f3c0 5201 	ubfx	r2, r0, #20, #2
  n += ((tr >> RTC_TR_HU_OFFSET) & 15)  * 3600000;
 8005ad6:	f3c0 4403 	ubfx	r4, r0, #16, #4
 8005ada:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <rtc_decode_time+0x50>)
 8005adc:	fb03 f304 	mul.w	r3, r3, r4
 8005ae0:	4c10      	ldr	r4, [pc, #64]	; (8005b24 <rtc_decode_time+0x54>)
 8005ae2:	fb04 3302 	mla	r3, r4, r2, r3
  n += ((tr >> RTC_TR_MNT_OFFSET) & 7)  * 600000;
 8005ae6:	f3c0 3202 	ubfx	r2, r0, #12, #3
 8005aea:	4c0f      	ldr	r4, [pc, #60]	; (8005b28 <rtc_decode_time+0x58>)
 8005aec:	fb04 3202 	mla	r2, r4, r2, r3
  n += ((tr >> RTC_TR_MNU_OFFSET) & 15) * 60000;
 8005af0:	f3c0 2303 	ubfx	r3, r0, #8, #4
 8005af4:	f64e 2460 	movw	r4, #60000	; 0xea60
 8005af8:	fb04 2203 	mla	r2, r4, r3, r2
  n += ((tr >> RTC_TR_ST_OFFSET) & 7)   * 10000;
 8005afc:	f3c0 1302 	ubfx	r3, r0, #4, #3
 8005b00:	f242 7410 	movw	r4, #10000	; 0x2710
 8005b04:	fb04 2303 	mla	r3, r4, r3, r2
  n += ((tr >> RTC_TR_SU_OFFSET) & 15)  * 1000;
 8005b08:	f000 000f 	and.w	r0, r0, #15
 8005b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b10:	fb02 3000 	mla	r0, r2, r0, r3
  timespec->millisecond = n;
 8005b14:	684b      	ldr	r3, [r1, #4]
 8005b16:	f360 031a 	bfi	r3, r0, #0, #27
 8005b1a:	604b      	str	r3, [r1, #4]
}
 8005b1c:	bc10      	pop	{r4}
 8005b1e:	4770      	bx	lr
 8005b20:	0036ee80 	.word	0x0036ee80
 8005b24:	02255100 	.word	0x02255100
 8005b28:	000927c0 	.word	0x000927c0
 8005b2c:	f3af 8000 	nop.w

08005b30 <rtc_decode_date>:
 * @param[in] dr        DR register value
 * @param[out] timespec pointer to a @p RTCDateTime structure
 *
 * @notapi
 */
static void rtc_decode_date(uint32_t dr, RTCDateTime *timespec) {
 8005b30:	b430      	push	{r4, r5}

  timespec->year  = (((dr >> RTC_DR_YT_OFFSET) & 15) * 10) +
                     ((dr >> RTC_DR_YU_OFFSET) & 15);
 8005b32:	f3c0 4203 	ubfx	r2, r0, #16, #4
  timespec->year  = (((dr >> RTC_DR_YT_OFFSET) & 15) * 10) +
 8005b36:	f3c0 5303 	ubfx	r3, r0, #20, #4
 8005b3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b3e:	005c      	lsls	r4, r3, #1
 8005b40:	1913      	adds	r3, r2, r4
 8005b42:	700b      	strb	r3, [r1, #0]
  timespec->month = (((dr >> RTC_TR_MNT_OFFSET) & 1) * 10) +
                     ((dr >> RTC_TR_MNU_OFFSET) & 15);
 8005b44:	f3c0 2203 	ubfx	r2, r0, #8, #4
  timespec->month = (((dr >> RTC_TR_MNT_OFFSET) & 1) * 10) +
 8005b48:	f3c0 3300 	ubfx	r3, r0, #12, #1
 8005b4c:	009c      	lsls	r4, r3, #2
 8005b4e:	4423      	add	r3, r4
 8005b50:	005c      	lsls	r4, r3, #1
 8005b52:	4422      	add	r2, r4
 8005b54:	784b      	ldrb	r3, [r1, #1]
 8005b56:	f362 0303 	bfi	r3, r2, #0, #4
  timespec->day   = (((dr >> RTC_DR_DT_OFFSET) & 3) * 10) +
                     ((dr >> RTC_DR_DU_OFFSET) & 15);
 8005b5a:	f000 040f 	and.w	r4, r0, #15
  timespec->day   = (((dr >> RTC_DR_DT_OFFSET) & 3) * 10) +
 8005b5e:	f3c0 1201 	ubfx	r2, r0, #4, #2
 8005b62:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005b66:	0055      	lsls	r5, r2, #1
 8005b68:	1962      	adds	r2, r4, r5
 8005b6a:	788c      	ldrb	r4, [r1, #2]
 8005b6c:	f362 0404 	bfi	r4, r2, #0, #5
 8005b70:	708c      	strb	r4, [r1, #2]
  timespec->dayofweek = (dr >> RTC_DR_WDU_OFFSET) & 7;
 8005b72:	f3c0 3042 	ubfx	r0, r0, #13, #3
 8005b76:	f360 1347 	bfi	r3, r0, #5, #3
 8005b7a:	704b      	strb	r3, [r1, #1]
}
 8005b7c:	bc30      	pop	{r4, r5}
 8005b7e:	4770      	bx	lr

08005b80 <rtc_encode_time>:
 * @param[in] timespec  pointer to a @p RTCDateTime structure
 * @return              the TR register encoding.
 *
 * @notapi
 */
static uint32_t rtc_encode_time(const RTCDateTime *timespec) {
 8005b80:	b470      	push	{r4, r5, r6}
  uint32_t n, tr = 0;

  /* Subseconds cannot be set.*/
  n = timespec->millisecond / 1000;
 8005b82:	6842      	ldr	r2, [r0, #4]
 8005b84:	f3c2 021a 	ubfx	r2, r2, #0, #27
 8005b88:	4822      	ldr	r0, [pc, #136]	; (8005c14 <rtc_encode_time+0x94>)
 8005b8a:	fb80 3202 	smull	r3, r2, r0, r2
 8005b8e:	1192      	asrs	r2, r2, #6

  /* Seconds conversion.*/
  tr = tr | ((n % 10) << RTC_TR_SU_OFFSET);
 8005b90:	4921      	ldr	r1, [pc, #132]	; (8005c18 <rtc_encode_time+0x98>)
 8005b92:	fba1 0302 	umull	r0, r3, r1, r2
 8005b96:	08db      	lsrs	r3, r3, #3
 8005b98:	461e      	mov	r6, r3
 8005b9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b9e:	0058      	lsls	r0, r3, #1
 8005ba0:	1a13      	subs	r3, r2, r0
  n /= 10;
  tr = tr | ((n % 6) << RTC_TR_ST_OFFSET);
 8005ba2:	4c1e      	ldr	r4, [pc, #120]	; (8005c1c <rtc_encode_time+0x9c>)
 8005ba4:	fba4 5006 	umull	r5, r0, r4, r6
 8005ba8:	0880      	lsrs	r0, r0, #2
 8005baa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005bae:	0045      	lsls	r5, r0, #1
 8005bb0:	1b70      	subs	r0, r6, r5
 8005bb2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  n /= 6;
 8005bb6:	4d1a      	ldr	r5, [pc, #104]	; (8005c20 <rtc_encode_time+0xa0>)
 8005bb8:	fba5 0502 	umull	r0, r5, r5, r2
 8005bbc:	096d      	lsrs	r5, r5, #5

  /* Minutes conversion.*/
  tr = tr | ((n % 10) << RTC_TR_MNU_OFFSET);
 8005bbe:	fba1 6005 	umull	r6, r0, r1, r5
 8005bc2:	08c0      	lsrs	r0, r0, #3
 8005bc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bc8:	0046      	lsls	r6, r0, #1
 8005bca:	1ba8      	subs	r0, r5, r6
 8005bcc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  n /= 10;
 8005bd0:	4d14      	ldr	r5, [pc, #80]	; (8005c24 <rtc_encode_time+0xa4>)
 8005bd2:	fba5 0502 	umull	r0, r5, r5, r2
 8005bd6:	09ad      	lsrs	r5, r5, #6
  tr = tr | ((n % 6) << RTC_TR_MNT_OFFSET);
 8005bd8:	fba4 4005 	umull	r4, r0, r4, r5
 8005bdc:	0880      	lsrs	r0, r0, #2
 8005bde:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005be2:	0044      	lsls	r4, r0, #1
 8005be4:	1b28      	subs	r0, r5, r4
 8005be6:	ea43 3000 	orr.w	r0, r3, r0, lsl #12
  n /= 6;
 8005bea:	4c0f      	ldr	r4, [pc, #60]	; (8005c28 <rtc_encode_time+0xa8>)
 8005bec:	fba4 3402 	umull	r3, r4, r4, r2
 8005bf0:	0ae4      	lsrs	r4, r4, #11

  /* Hours conversion.*/
  tr = tr | ((n % 10) << RTC_TR_HU_OFFSET);
 8005bf2:	fba1 1304 	umull	r1, r3, r1, r4
 8005bf6:	08db      	lsrs	r3, r3, #3
 8005bf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005bfc:	0059      	lsls	r1, r3, #1
 8005bfe:	1a63      	subs	r3, r4, r1
 8005c00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  n /= 10;
 8005c04:	4809      	ldr	r0, [pc, #36]	; (8005c2c <rtc_encode_time+0xac>)
 8005c06:	fba0 2002 	umull	r2, r0, r0, r2
 8005c0a:	0bc0      	lsrs	r0, r0, #15
  tr = tr | (n << RTC_TR_HT_OFFSET);

  return tr;
}
 8005c0c:	ea43 5000 	orr.w	r0, r3, r0, lsl #20
 8005c10:	bc70      	pop	{r4, r5, r6}
 8005c12:	4770      	bx	lr
 8005c14:	10624dd3 	.word	0x10624dd3
 8005c18:	cccccccd 	.word	0xcccccccd
 8005c1c:	aaaaaaab 	.word	0xaaaaaaab
 8005c20:	88888889 	.word	0x88888889
 8005c24:	1b4e81b5 	.word	0x1b4e81b5
 8005c28:	91a2b3c5 	.word	0x91a2b3c5
 8005c2c:	e90452d5 	.word	0xe90452d5

08005c30 <rtc_encode_date>:
 * @param[in] timespec  pointer to a @p RTCDateTime structure
 * @return              the DR register encoding.
 *
 * @notapi
 */
static uint32_t rtc_encode_date(const RTCDateTime *timespec) {
 8005c30:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t n, dr = 0;

  /* Year conversion. Note, only years last two digits are considered.*/
  n = timespec->year;
 8005c32:	7804      	ldrb	r4, [r0, #0]
  dr = dr | ((n % 10) << RTC_DR_YU_OFFSET);
 8005c34:	4b1a      	ldr	r3, [pc, #104]	; (8005ca0 <rtc_encode_date+0x70>)
 8005c36:	fba3 1204 	umull	r1, r2, r3, r4
 8005c3a:	08d1      	lsrs	r1, r2, #3
 8005c3c:	460d      	mov	r5, r1
 8005c3e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005c42:	0051      	lsls	r1, r2, #1
 8005c44:	1a61      	subs	r1, r4, r1
  n /= 10;
  dr = dr | ((n % 10) << RTC_DR_YT_OFFSET);
 8005c46:	fba3 4205 	umull	r4, r2, r3, r5
 8005c4a:	08d2      	lsrs	r2, r2, #3
 8005c4c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c50:	0054      	lsls	r4, r2, #1
 8005c52:	1b2a      	subs	r2, r5, r4
 8005c54:	0512      	lsls	r2, r2, #20
 8005c56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

  /* Months conversion.*/
  n = timespec->month;
 8005c5a:	7844      	ldrb	r4, [r0, #1]
 8005c5c:	f004 060f 	and.w	r6, r4, #15
  dr = dr | ((n % 10) << RTC_DR_MU_OFFSET);
 8005c60:	fba3 5106 	umull	r5, r1, r3, r6
 8005c64:	08c9      	lsrs	r1, r1, #3
 8005c66:	460f      	mov	r7, r1
 8005c68:	008d      	lsls	r5, r1, #2
 8005c6a:	440d      	add	r5, r1
 8005c6c:	0069      	lsls	r1, r5, #1
 8005c6e:	1a71      	subs	r1, r6, r1
 8005c70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  n /= 10;
  dr = dr | ((n % 10) << RTC_DR_MT_OFFSET);
 8005c74:	ea42 3207 	orr.w	r2, r2, r7, lsl #12

  /* Days conversion.*/
  n = timespec->day;
 8005c78:	7881      	ldrb	r1, [r0, #2]
 8005c7a:	f001 011f 	and.w	r1, r1, #31
  dr = dr | ((n % 10) << RTC_DR_DU_OFFSET);
 8005c7e:	fba3 0301 	umull	r0, r3, r3, r1
 8005c82:	08db      	lsrs	r3, r3, #3
 8005c84:	461d      	mov	r5, r3
 8005c86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c8a:	0058      	lsls	r0, r3, #1
 8005c8c:	1a0b      	subs	r3, r1, r0
 8005c8e:	4313      	orrs	r3, r2
  n /= 10;
  dr = dr | ((n % 10) << RTC_DR_DT_OFFSET);
 8005c90:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Days of week conversion.*/
  dr = dr | (timespec->dayofweek << RTC_DR_WDU_OFFSET);
 8005c94:	0960      	lsrs	r0, r4, #5

  return dr;
}
 8005c96:	ea43 3040 	orr.w	r0, r3, r0, lsl #13
 8005c9a:	bcf0      	pop	{r4, r5, r6, r7}
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	cccccccd 	.word	0xcccccccd
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	f3af 8000 	nop.w
 8005cac:	f3af 8000 	nop.w

08005cb0 <_getsize>:
static size_t _getsize(void *instance) {

  (void)instance;

  return (size_t)STM32_RTC_STORAGE_SIZE;
}
 8005cb0:	2050      	movs	r0, #80	; 0x50
 8005cb2:	4770      	bx	lr
 8005cb4:	f3af 8000 	nop.w
 8005cb8:	f3af 8000 	nop.w
 8005cbc:	f3af 8000 	nop.w

08005cc0 <_write>:

  return PS_NO_ERROR;
}

static ps_error_t _write(void *instance, ps_offset_t offset,
                         size_t n, const uint8_t *wp) {
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	460f      	mov	r7, r1
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	461c      	mov	r4, r3
  volatile uint32_t *bkpr = &((RTCDriver *)instance)->rtc->BKP0R;
 8005cc8:	6845      	ldr	r5, [r0, #4]
 8005cca:	3550      	adds	r5, #80	; 0x50
  unsigned i;

  chDbgCheck((instance != NULL) && (wp != NULL));
 8005ccc:	b168      	cbz	r0, 8005cea <_write+0x2a>
 8005cce:	b163      	cbz	r3, 8005cea <_write+0x2a>
  chDbgCheck((n > 0U) && (n <= STM32_RTC_STORAGE_SIZE));
 8005cd0:	1e73      	subs	r3, r6, #1
 8005cd2:	2b4f      	cmp	r3, #79	; 0x4f
 8005cd4:	d80d      	bhi.n	8005cf2 <_write+0x32>
  chDbgCheck((offset < STM32_RTC_STORAGE_SIZE) &&
 8005cd6:	2f4f      	cmp	r7, #79	; 0x4f
 8005cd8:	d802      	bhi.n	8005ce0 <_write+0x20>
 8005cda:	19f3      	adds	r3, r6, r7
 8005cdc:	2b50      	cmp	r3, #80	; 0x50
 8005cde:	d902      	bls.n	8005ce6 <_write+0x26>
 8005ce0:	4812      	ldr	r0, [pc, #72]	; (8005d2c <_write+0x6c>)
 8005ce2:	f001 fd0d 	bl	8007700 <chSysHalt>
                         size_t n, const uint8_t *wp) {
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	e01c      	b.n	8005d24 <_write+0x64>
  chDbgCheck((instance != NULL) && (wp != NULL));
 8005cea:	4810      	ldr	r0, [pc, #64]	; (8005d2c <_write+0x6c>)
 8005cec:	f001 fd08 	bl	8007700 <chSysHalt>
 8005cf0:	e7ee      	b.n	8005cd0 <_write+0x10>
  chDbgCheck((n > 0U) && (n <= STM32_RTC_STORAGE_SIZE));
 8005cf2:	480e      	ldr	r0, [pc, #56]	; (8005d2c <_write+0x6c>)
 8005cf4:	f001 fd04 	bl	8007700 <chSysHalt>
 8005cf8:	e7ed      	b.n	8005cd6 <_write+0x16>
             (offset + n <= STM32_RTC_STORAGE_SIZE));

  for (i = 0; i < (unsigned)n; i++) {
    unsigned index = ((unsigned)offset + i) / sizeof (uint32_t);
 8005cfa:	19c3      	adds	r3, r0, r7
    unsigned shift = ((unsigned)offset + i) % sizeof (uint32_t);
 8005cfc:	f003 0103 	and.w	r1, r3, #3
    uint32_t regval = bkpr[index];
 8005d00:	f023 0303 	bic.w	r3, r3, #3
 8005d04:	58ea      	ldr	r2, [r5, r3]
    regval &= ~(0xFFU << (shift * 8U));
 8005d06:	00c9      	lsls	r1, r1, #3
 8005d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005d0c:	fa0c fc01 	lsl.w	ip, ip, r1
 8005d10:	ea22 020c 	bic.w	r2, r2, ip
    regval |= (uint32_t)*wp++ << (shift * 8U);
 8005d14:	f894 c000 	ldrb.w	ip, [r4]
 8005d18:	fa0c f101 	lsl.w	r1, ip, r1
 8005d1c:	430a      	orrs	r2, r1
    bkpr[index] = regval;
 8005d1e:	50ea      	str	r2, [r5, r3]
  for (i = 0; i < (unsigned)n; i++) {
 8005d20:	3001      	adds	r0, #1
    regval |= (uint32_t)*wp++ << (shift * 8U);
 8005d22:	3401      	adds	r4, #1
  for (i = 0; i < (unsigned)n; i++) {
 8005d24:	42b0      	cmp	r0, r6
 8005d26:	d3e8      	bcc.n	8005cfa <_write+0x3a>
  }

  return PS_NO_ERROR;
}
 8005d28:	2000      	movs	r0, #0
 8005d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d2c:	08019618 	.word	0x08019618

08005d30 <_read>:
                        size_t n, uint8_t *rp) {
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	460f      	mov	r7, r1
 8005d34:	4615      	mov	r5, r2
 8005d36:	461c      	mov	r4, r3
  volatile uint32_t *bkpr = &((RTCDriver *)instance)->rtc->BKP0R;
 8005d38:	6846      	ldr	r6, [r0, #4]
 8005d3a:	3650      	adds	r6, #80	; 0x50
  chDbgCheck((instance != NULL) && (rp != NULL));
 8005d3c:	b168      	cbz	r0, 8005d5a <_read+0x2a>
 8005d3e:	b163      	cbz	r3, 8005d5a <_read+0x2a>
  chDbgCheck((n > 0U) && (n <= STM32_RTC_STORAGE_SIZE));
 8005d40:	1e6b      	subs	r3, r5, #1
 8005d42:	2b4f      	cmp	r3, #79	; 0x4f
 8005d44:	d80d      	bhi.n	8005d62 <_read+0x32>
  chDbgCheck((offset < STM32_RTC_STORAGE_SIZE) &&
 8005d46:	2f4f      	cmp	r7, #79	; 0x4f
 8005d48:	d802      	bhi.n	8005d50 <_read+0x20>
 8005d4a:	19eb      	adds	r3, r5, r7
 8005d4c:	2b50      	cmp	r3, #80	; 0x50
 8005d4e:	d902      	bls.n	8005d56 <_read+0x26>
 8005d50:	480d      	ldr	r0, [pc, #52]	; (8005d88 <_read+0x58>)
 8005d52:	f001 fcd5 	bl	8007700 <chSysHalt>
                        size_t n, uint8_t *rp) {
 8005d56:	2200      	movs	r2, #0
 8005d58:	e012      	b.n	8005d80 <_read+0x50>
  chDbgCheck((instance != NULL) && (rp != NULL));
 8005d5a:	480b      	ldr	r0, [pc, #44]	; (8005d88 <_read+0x58>)
 8005d5c:	f001 fcd0 	bl	8007700 <chSysHalt>
 8005d60:	e7ee      	b.n	8005d40 <_read+0x10>
  chDbgCheck((n > 0U) && (n <= STM32_RTC_STORAGE_SIZE));
 8005d62:	4809      	ldr	r0, [pc, #36]	; (8005d88 <_read+0x58>)
 8005d64:	f001 fccc 	bl	8007700 <chSysHalt>
 8005d68:	e7ed      	b.n	8005d46 <_read+0x16>
    unsigned index = ((unsigned)offset + i) / sizeof (uint32_t);
 8005d6a:	19d3      	adds	r3, r2, r7
    unsigned shift = ((unsigned)offset + i) % sizeof (uint32_t);
 8005d6c:	f003 0103 	and.w	r1, r3, #3
    *rp++ = (uint8_t)(bkpr[index] >> (shift * 8U));
 8005d70:	f023 0303 	bic.w	r3, r3, #3
 8005d74:	58f3      	ldr	r3, [r6, r3]
 8005d76:	00c9      	lsls	r1, r1, #3
 8005d78:	40cb      	lsrs	r3, r1
 8005d7a:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < (unsigned)n; i++) {
 8005d7c:	3201      	adds	r2, #1
    *rp++ = (uint8_t)(bkpr[index] >> (shift * 8U));
 8005d7e:	3401      	adds	r4, #1
  for (i = 0; i < (unsigned)n; i++) {
 8005d80:	42aa      	cmp	r2, r5
 8005d82:	d3f2      	bcc.n	8005d6a <_read+0x3a>
}
 8005d84:	2000      	movs	r0, #0
 8005d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d88:	08019620 	.word	0x08019620
 8005d8c:	f3af 8000 	nop.w

08005d90 <Vector48>:
/**
 * @brief   RTC TAMP/STAMP interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_RTC_TAMP_STAMP_HANDLER) {
 8005d90:	b510      	push	{r4, lr}
  uint32_t isr, clear;

  OSAL_IRQ_PROLOGUE();
 8005d92:	f003 f91d 	bl	8008fd0 <_stats_increase_irq>
 8005d96:	481f      	ldr	r0, [pc, #124]	; (8005e14 <Vector48+0x84>)
 8005d98:	f001 ff72 	bl	8007c80 <_trace_isr_enter>
 8005d9c:	f001 fea0 	bl	8007ae0 <_dbg_check_enter_isr>
#if defined(RTC_ISR_TAMP3F)
           | RTC_ISR_TAMP3F
#endif
          );

  isr = RTCD1.rtc->ISR;
 8005da0:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <Vector48+0x88>)
 8005da2:	6853      	ldr	r3, [r2, #4]
 8005da4:	68dc      	ldr	r4, [r3, #12]
  RTCD1.rtc->ISR = isr & ~clear;
 8005da6:	f424 41f0 	bic.w	r1, r4, #30720	; 0x7800
 8005daa:	60d9      	str	r1, [r3, #12]

  extiClearGroup1(EXTI_MASK1(STM32_RTC_TAMP_STAMP_EXTI));
 8005dac:	491b      	ldr	r1, [pc, #108]	; (8005e1c <Vector48+0x8c>)
 8005dae:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005db2:	6148      	str	r0, [r1, #20]

  if (RTCD1.callback != NULL) {
 8005db4:	6892      	ldr	r2, [r2, #8]
 8005db6:	b322      	cbz	r2, 8005e02 <Vector48+0x72>
    uint32_t cr, tcr;

    cr = RTCD1.rtc->CR;
 8005db8:	689b      	ldr	r3, [r3, #8]
    if ((cr & RTC_CR_TSIE) != 0U) {
 8005dba:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005dbe:	d00c      	beq.n	8005dda <Vector48+0x4a>
      if ((isr & RTC_ISR_TSF) != 0U) {
 8005dc0:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8005dc4:	d002      	beq.n	8005dcc <Vector48+0x3c>
        RTCD1.callback(&RTCD1, RTC_EVENT_TS);
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	4813      	ldr	r0, [pc, #76]	; (8005e18 <Vector48+0x88>)
 8005dca:	4790      	blx	r2
      }
      if ((isr & RTC_ISR_TSOVF) != 0U) {
 8005dcc:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8005dd0:	d003      	beq.n	8005dda <Vector48+0x4a>
        RTCD1.callback(&RTCD1, RTC_EVENT_TS_OVF);
 8005dd2:	4811      	ldr	r0, [pc, #68]	; (8005e18 <Vector48+0x88>)
 8005dd4:	6883      	ldr	r3, [r0, #8]
 8005dd6:	2103      	movs	r1, #3
 8005dd8:	4798      	blx	r3
    }

    /* This part is different depending on if the RTC has a TAMPCR or TAFCR
       register.*/
#if defined(RTC_TAFCR_TAMP1E)
    tcr = RTCD1.rtc->TAFCR;
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <Vector48+0x88>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if ((tcr & RTC_TAFCR_TAMPIE) != 0U) {
 8005de0:	f013 0f04 	tst.w	r3, #4
 8005de4:	d00d      	beq.n	8005e02 <Vector48+0x72>
#if defined(RTC_ISR_TAMP1F)
      if ((isr & RTC_ISR_TAMP1F) != 0U) {
 8005de6:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8005dea:	d003      	beq.n	8005df4 <Vector48+0x64>
        RTCD1.callback(&RTCD1, RTC_EVENT_TAMP1);
 8005dec:	480a      	ldr	r0, [pc, #40]	; (8005e18 <Vector48+0x88>)
 8005dee:	6883      	ldr	r3, [r0, #8]
 8005df0:	2104      	movs	r1, #4
 8005df2:	4798      	blx	r3
      }
#endif
#if defined(RTC_ISR_TAMP2F)
      if ((isr & RTC_ISR_TAMP2F) != 0U) {
 8005df4:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8005df8:	d003      	beq.n	8005e02 <Vector48+0x72>
        RTCD1.callback(&RTCD1, RTC_EVENT_TAMP2);
 8005dfa:	4807      	ldr	r0, [pc, #28]	; (8005e18 <Vector48+0x88>)
 8005dfc:	6883      	ldr	r3, [r0, #8]
 8005dfe:	2105      	movs	r1, #5
 8005e00:	4798      	blx	r3
    }
#endif
#endif /* !defined(RTC_TAFCR_TAMP1E) */
  }

  OSAL_IRQ_EPILOGUE();
 8005e02:	f001 fe8d 	bl	8007b20 <_dbg_check_leave_isr>
 8005e06:	4803      	ldr	r0, [pc, #12]	; (8005e14 <Vector48+0x84>)
 8005e08:	f001 ff62 	bl	8007cd0 <_trace_isr_leave>
 8005e0c:	f005 fee8 	bl	800bbe0 <_port_irq_epilogue>
}
 8005e10:	bd10      	pop	{r4, pc}
 8005e12:	bf00      	nop
 8005e14:	08019628 	.word	0x08019628
 8005e18:	20004820 	.word	0x20004820
 8005e1c:	40013c00 	.word	0x40013c00

08005e20 <Vector4C>:
/**
 * @brief   RTC wakeup interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_RTC_WKUP_HANDLER) {
 8005e20:	b510      	push	{r4, lr}
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();
 8005e22:	f003 f8d5 	bl	8008fd0 <_stats_increase_irq>
 8005e26:	4811      	ldr	r0, [pc, #68]	; (8005e6c <Vector4C+0x4c>)
 8005e28:	f001 ff2a 	bl	8007c80 <_trace_isr_enter>
 8005e2c:	f001 fe58 	bl	8007ae0 <_dbg_check_enter_isr>

  isr = RTCD1.rtc->ISR;
 8005e30:	4a0f      	ldr	r2, [pc, #60]	; (8005e70 <Vector4C+0x50>)
 8005e32:	6853      	ldr	r3, [r2, #4]
 8005e34:	68d9      	ldr	r1, [r3, #12]
  RTCD1.rtc->ISR = isr & ~RTC_ISR_WUTF;
 8005e36:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8005e3a:	60d8      	str	r0, [r3, #12]

  extiClearGroup1(EXTI_MASK1(STM32_RTC_WKUP_EXTI));
 8005e3c:	480d      	ldr	r0, [pc, #52]	; (8005e74 <Vector4C+0x54>)
 8005e3e:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
 8005e42:	6144      	str	r4, [r0, #20]

  if (RTCD1.callback != NULL) {
 8005e44:	6892      	ldr	r2, [r2, #8]
 8005e46:	b14a      	cbz	r2, 8005e5c <Vector4C+0x3c>
    uint32_t cr = RTCD1.rtc->CR;
 8005e48:	689b      	ldr	r3, [r3, #8]

    if (((cr & RTC_CR_WUTIE) != 0U) && ((isr & RTC_ISR_WUTF) != 0U)) {
 8005e4a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005e4e:	d005      	beq.n	8005e5c <Vector4C+0x3c>
 8005e50:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8005e54:	d002      	beq.n	8005e5c <Vector4C+0x3c>
      RTCD1.callback(&RTCD1, RTC_EVENT_WAKEUP);
 8005e56:	2107      	movs	r1, #7
 8005e58:	4805      	ldr	r0, [pc, #20]	; (8005e70 <Vector4C+0x50>)
 8005e5a:	4790      	blx	r2
    }
  }

  OSAL_IRQ_EPILOGUE();
 8005e5c:	f001 fe60 	bl	8007b20 <_dbg_check_leave_isr>
 8005e60:	4802      	ldr	r0, [pc, #8]	; (8005e6c <Vector4C+0x4c>)
 8005e62:	f001 ff35 	bl	8007cd0 <_trace_isr_leave>
 8005e66:	f005 febb 	bl	800bbe0 <_port_irq_epilogue>
}
 8005e6a:	bd10      	pop	{r4, pc}
 8005e6c:	08019634 	.word	0x08019634
 8005e70:	20004820 	.word	0x20004820
 8005e74:	40013c00 	.word	0x40013c00
 8005e78:	f3af 8000 	nop.w
 8005e7c:	f3af 8000 	nop.w

08005e80 <VectorE4>:
/**
 * @brief   RTC alarm interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_RTC_ALARM_HANDLER) {
 8005e80:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr, clear;

  OSAL_IRQ_PROLOGUE();
 8005e82:	f003 f8a5 	bl	8008fd0 <_stats_increase_irq>
 8005e86:	4816      	ldr	r0, [pc, #88]	; (8005ee0 <VectorE4+0x60>)
 8005e88:	f001 fefa 	bl	8007c80 <_trace_isr_enter>
 8005e8c:	f001 fe28 	bl	8007ae0 <_dbg_check_enter_isr>
#if defined(RTC_ISR_ALRBF)
           | RTC_ISR_ALRBF
#endif
          );

  isr = RTCD1.rtc->ISR;
 8005e90:	4a14      	ldr	r2, [pc, #80]	; (8005ee4 <VectorE4+0x64>)
 8005e92:	6853      	ldr	r3, [r2, #4]
 8005e94:	68dc      	ldr	r4, [r3, #12]
  RTCD1.rtc->ISR = isr & ~clear;
 8005e96:	f424 7140 	bic.w	r1, r4, #768	; 0x300
 8005e9a:	60d9      	str	r1, [r3, #12]

  extiClearGroup1(EXTI_MASK1(STM32_RTC_ALARM_EXTI));
 8005e9c:	4912      	ldr	r1, [pc, #72]	; (8005ee8 <VectorE4+0x68>)
 8005e9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005ea2:	6148      	str	r0, [r1, #20]

  if (RTCD1.callback != NULL) {
 8005ea4:	6892      	ldr	r2, [r2, #8]
 8005ea6:	b19a      	cbz	r2, 8005ed0 <VectorE4+0x50>
    uint32_t cr = RTCD1.rtc->CR;
 8005ea8:	689d      	ldr	r5, [r3, #8]
#if defined(RTC_ISR_ALRAF)
    if (((cr & RTC_CR_ALRAIE) != 0U) && ((isr & RTC_ISR_ALRAF) != 0U)) {
 8005eaa:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8005eae:	d005      	beq.n	8005ebc <VectorE4+0x3c>
 8005eb0:	f414 7f80 	tst.w	r4, #256	; 0x100
 8005eb4:	d002      	beq.n	8005ebc <VectorE4+0x3c>
      RTCD1.callback(&RTCD1, RTC_EVENT_ALARM_A);
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	480a      	ldr	r0, [pc, #40]	; (8005ee4 <VectorE4+0x64>)
 8005eba:	4790      	blx	r2
    }
#endif
#if defined(RTC_ISR_ALRBF)
    if (((cr & RTC_CR_ALRBIE) != 0U) && ((isr & RTC_ISR_ALRBF) != 0U)) {
 8005ebc:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 8005ec0:	d006      	beq.n	8005ed0 <VectorE4+0x50>
 8005ec2:	f414 7f00 	tst.w	r4, #512	; 0x200
 8005ec6:	d003      	beq.n	8005ed0 <VectorE4+0x50>
      RTCD1.callback(&RTCD1, RTC_EVENT_ALARM_B);
 8005ec8:	4806      	ldr	r0, [pc, #24]	; (8005ee4 <VectorE4+0x64>)
 8005eca:	6883      	ldr	r3, [r0, #8]
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4798      	blx	r3
    }
#endif
  }

  OSAL_IRQ_EPILOGUE();
 8005ed0:	f001 fe26 	bl	8007b20 <_dbg_check_leave_isr>
 8005ed4:	4802      	ldr	r0, [pc, #8]	; (8005ee0 <VectorE4+0x60>)
 8005ed6:	f001 fefb 	bl	8007cd0 <_trace_isr_leave>
 8005eda:	f005 fe81 	bl	800bbe0 <_port_irq_epilogue>
}
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	08019640 	.word	0x08019640
 8005ee4:	20004820 	.word	0x20004820
 8005ee8:	40013c00 	.word	0x40013c00
 8005eec:	f3af 8000 	nop.w

08005ef0 <rtc_lld_init>:
/**
 * @brief   Enable access to registers.
 *
 * @notapi
 */
void rtc_lld_init(void) {
 8005ef0:	b510      	push	{r4, lr}

  /* RTC object initialization.*/
  rtcObjectInit(&RTCD1);
 8005ef2:	4c1c      	ldr	r4, [pc, #112]	; (8005f64 <rtc_lld_init+0x74>)
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f7fc fa6b 	bl	80023d0 <rtcObjectInit>

  /* RTC pointer initialization.*/
  RTCD1.rtc = RTC;
 8005efa:	4b1b      	ldr	r3, [pc, #108]	; (8005f68 <rtc_lld_init+0x78>)
 8005efc:	6063      	str	r3, [r4, #4]

  /* Disable write protection. */
  RTCD1.rtc->WPR = 0xCA;
 8005efe:	22ca      	movs	r2, #202	; 0xca
 8005f00:	625a      	str	r2, [r3, #36]	; 0x24
  RTCD1.rtc->WPR = 0x53;
 8005f02:	2253      	movs	r2, #83	; 0x53
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24

  /* If calendar has not been initialized yet then proceed with the
     initial setup.*/
  if (!(RTCD1.rtc->ISR & RTC_ISR_INITS)) {
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f013 0f10 	tst.w	r3, #16
 8005f0c:	d019      	beq.n	8005f42 <rtc_lld_init+0x52>
    RTCD1.rtc->PRER     = STM32_RTC_PRER_BITS;

    rtc_exit_init();
  }
  else {
    RTCD1.rtc->ISR &= ~RTC_ISR_RSF;
 8005f0e:	4a16      	ldr	r2, [pc, #88]	; (8005f68 <rtc_lld_init+0x78>)
 8005f10:	68d3      	ldr	r3, [r2, #12]
 8005f12:	f023 0320 	bic.w	r3, r3, #32
 8005f16:	60d3      	str	r3, [r2, #12]
  }

  /* Callback initially disabled.*/
  RTCD1.callback = NULL;
 8005f18:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <rtc_lld_init+0x74>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	609a      	str	r2, [r3, #8]

  /* Enabling RTC-related EXTI lines.*/
  extiEnableGroup1(EXTI_MASK1(STM32_RTC_ALARM_EXTI) |
 8005f1e:	2101      	movs	r1, #1
 8005f20:	f44f 00c4 	mov.w	r0, #6422528	; 0x620000
 8005f24:	f7fe ff7c 	bl	8004e20 <extiEnableGroup1>
                   EXTI_MASK1(STM32_RTC_TAMP_STAMP_EXTI) |
                   EXTI_MASK1(STM32_RTC_WKUP_EXTI),
                   EXTI_MODE_RISING_EDGE | EXTI_MODE_ACTION_INTERRUPT);

  /* IRQ vectors permanently assigned to this driver.*/
  STM32_RTC_IRQ_ENABLE();
 8005f28:	210f      	movs	r1, #15
 8005f2a:	2002      	movs	r0, #2
 8005f2c:	f7fe f8a0 	bl	8004070 <nvicEnableVector>
 8005f30:	210f      	movs	r1, #15
 8005f32:	2003      	movs	r0, #3
 8005f34:	f7fe f89c 	bl	8004070 <nvicEnableVector>
 8005f38:	210f      	movs	r1, #15
 8005f3a:	2029      	movs	r0, #41	; 0x29
 8005f3c:	f7fe f898 	bl	8004070 <nvicEnableVector>
}
 8005f40:	bd10      	pop	{r4, pc}
    rtc_enter_init();
 8005f42:	f7ff fdb5 	bl	8005ab0 <rtc_enter_init>
    RTCD1.rtc->CR       = STM32_RTC_CR_INIT;
 8005f46:	6863      	ldr	r3, [r4, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	609a      	str	r2, [r3, #8]
    RTCD1.rtc->TAFCR    = STM32_RTC_TAMPCR_INIT;
 8005f4c:	641a      	str	r2, [r3, #64]	; 0x40
    RTCD1.rtc->ISR      = RTC_ISR_INIT; /* Clearing all but RTC_ISR_INIT.   */
 8005f4e:	2280      	movs	r2, #128	; 0x80
 8005f50:	60da      	str	r2, [r3, #12]
    RTCD1.rtc->PRER     = STM32_RTC_PRER_BITS;
 8005f52:	4a06      	ldr	r2, [pc, #24]	; (8005f6c <rtc_lld_init+0x7c>)
 8005f54:	611a      	str	r2, [r3, #16]
    RTCD1.rtc->PRER     = STM32_RTC_PRER_BITS;
 8005f56:	611a      	str	r2, [r3, #16]
  RTCD1.rtc->ISR &= ~RTC_ISR_INIT;
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f5e:	60da      	str	r2, [r3, #12]
 8005f60:	e7da      	b.n	8005f18 <rtc_lld_init+0x28>
 8005f62:	bf00      	nop
 8005f64:	20004820 	.word	0x20004820
 8005f68:	40002800 	.word	0x40002800
 8005f6c:	001f03ff 	.word	0x001f03ff

08005f70 <rtc_lld_set_time>:
 * @param[in] rtcp      pointer to RTC driver structure
 * @param[in] timespec  pointer to a @p RTCDateTime structure
 *
 * @notapi
 */
void rtc_lld_set_time(RTCDriver *rtcp, const RTCDateTime *timespec) {
 8005f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f74:	4606      	mov	r6, r0
 8005f76:	460d      	mov	r5, r1
  uint32_t dr, tr;
  syssts_t sts;

  tr = rtc_encode_time(timespec);
 8005f78:	4608      	mov	r0, r1
 8005f7a:	f7ff fe01 	bl	8005b80 <rtc_encode_time>
 8005f7e:	4680      	mov	r8, r0
  dr = rtc_encode_date(timespec);
 8005f80:	4628      	mov	r0, r5
 8005f82:	f7ff fe55 	bl	8005c30 <rtc_encode_date>
 8005f86:	4607      	mov	r7, r0
  return chSysGetStatusAndLockX();
 8005f88:	f001 fcb2 	bl	80078f0 <chSysGetStatusAndLockX>
 8005f8c:	4604      	mov	r4, r0

  /* Entering a reentrant critical zone.*/
  sts = osalSysGetStatusAndLockX();

  /* Writing the registers.*/
  rtc_enter_init();
 8005f8e:	f7ff fd8f 	bl	8005ab0 <rtc_enter_init>
  rtcp->rtc->TR = tr;
 8005f92:	6873      	ldr	r3, [r6, #4]
 8005f94:	f8c3 8000 	str.w	r8, [r3]
  rtcp->rtc->DR = dr;
 8005f98:	6873      	ldr	r3, [r6, #4]
 8005f9a:	605f      	str	r7, [r3, #4]
  rtcp->rtc->CR = (rtcp->rtc->CR & ~(1U << RTC_CR_BKP_OFFSET)) |
 8005f9c:	6871      	ldr	r1, [r6, #4]
 8005f9e:	688b      	ldr	r3, [r1, #8]
 8005fa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
                  (timespec->dstflag << RTC_CR_BKP_OFFSET);
 8005fa4:	786a      	ldrb	r2, [r5, #1]
 8005fa6:	f3c2 1200 	ubfx	r2, r2, #4, #1
  rtcp->rtc->CR = (rtcp->rtc->CR & ~(1U << RTC_CR_BKP_OFFSET)) |
 8005faa:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8005fae:	608b      	str	r3, [r1, #8]
  RTCD1.rtc->ISR &= ~RTC_ISR_INIT;
 8005fb0:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <rtc_lld_set_time+0x58>)
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	68d3      	ldr	r3, [r2, #12]
 8005fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fba:	60d3      	str	r3, [r2, #12]
  chSysRestoreStatusX(sts);
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f001 fcb7 	bl	8007930 <chSysRestoreStatusX>
  rtc_exit_init();

  /* Leaving a reentrant critical zone.*/
  osalSysRestoreStatusX(sts);
}
 8005fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20004820 	.word	0x20004820
 8005fcc:	f3af 8000 	nop.w

08005fd0 <rtc_lld_get_time>:
 * @param[in] rtcp      pointer to RTC driver structure
 * @param[out] timespec pointer to a @p RTCDateTime structure
 *
 * @notapi
 */
void rtc_lld_get_time(RTCDriver *rtcp, RTCDateTime *timespec) {
 8005fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	460d      	mov	r5, r1
  return chSysGetStatusAndLockX();
 8005fd8:	f001 fc8a 	bl	80078f0 <chSysGetStatusAndLockX>
  /* Entering a reentrant critical zone.*/
  sts = osalSysGetStatusAndLockX();

  /* Synchronization with the RTC and reading the registers, note
     DR must be read last.*/
  while ((rtcp->rtc->ISR & RTC_ISR_RSF) == 0)
 8005fdc:	6863      	ldr	r3, [r4, #4]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	f012 0f20 	tst.w	r2, #32
 8005fe4:	d0fa      	beq.n	8005fdc <rtc_lld_get_time+0xc>
    ;
#if STM32_RTC_HAS_SUBSECONDS
  ssr = rtcp->rtc->SSR;
 8005fe6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
#endif /* STM32_RTC_HAS_SUBSECONDS */
  tr  = rtcp->rtc->TR;
 8005fe8:	f8d3 8000 	ldr.w	r8, [r3]
  dr  = rtcp->rtc->DR;
 8005fec:	685e      	ldr	r6, [r3, #4]
  cr  = rtcp->rtc->CR;
 8005fee:	689c      	ldr	r4, [r3, #8]
  rtcp->rtc->ISR &= ~RTC_ISR_RSF;
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	f022 0220 	bic.w	r2, r2, #32
 8005ff6:	60da      	str	r2, [r3, #12]
  chSysRestoreStatusX(sts);
 8005ff8:	f001 fc9a 	bl	8007930 <chSysRestoreStatusX>
  /* Leaving a reentrant critical zone.*/
  osalSysRestoreStatusX(sts);

  /* Decoding day time, this starts the atomic read sequence, see "Reading
     the calendar" in the RTC documentation.*/
  rtc_decode_time(tr, timespec);
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	4640      	mov	r0, r8
 8006000:	f7ff fd66 	bl	8005ad0 <rtc_decode_time>

  /* If the RTC is capable of sub-second counting then the value is
     normalized in milliseconds and added to the time.*/
#if STM32_RTC_HAS_SUBSECONDS
  subs = (((STM32_RTC_PRESS_VALUE - 1U) - ssr) * 1000U) / STM32_RTC_PRESS_VALUE;
 8006004:	4b0d      	ldr	r3, [pc, #52]	; (800603c <rtc_lld_get_time+0x6c>)
 8006006:	fb03 f307 	mul.w	r3, r3, r7
 800600a:	f503 2379 	add.w	r3, r3, #1019904	; 0xf9000
 800600e:	f603 4318 	addw	r3, r3, #3096	; 0xc18
#else
  subs = 0;
#endif /* STM32_RTC_HAS_SUBSECONDS */
  timespec->millisecond += subs;
 8006012:	686a      	ldr	r2, [r5, #4]
 8006014:	f3c2 011a 	ubfx	r1, r2, #0, #27
 8006018:	eb01 2393 	add.w	r3, r1, r3, lsr #10
 800601c:	f363 021a 	bfi	r2, r3, #0, #27
 8006020:	606a      	str	r2, [r5, #4]

  /* Decoding date, this concludes the atomic read sequence.*/
  rtc_decode_date(dr, timespec);
 8006022:	4629      	mov	r1, r5
 8006024:	4630      	mov	r0, r6
 8006026:	f7ff fd83 	bl	8005b30 <rtc_decode_date>

  /* Retrieving the DST bit.*/
  timespec->dstflag = (cr >> RTC_CR_BKP_OFFSET) & 1;
 800602a:	f3c4 4480 	ubfx	r4, r4, #18, #1
 800602e:	786b      	ldrb	r3, [r5, #1]
 8006030:	f364 1304 	bfi	r3, r4, #4, #1
 8006034:	706b      	strb	r3, [r5, #1]
}
 8006036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800603a:	bf00      	nop
 800603c:	fffffc18 	.word	0xfffffc18

08006040 <rtc_lld_set_alarm>:
 *
 * @notapi
 */
void rtc_lld_set_alarm(RTCDriver *rtcp,
                       rtcalarm_t alarm,
                       const RTCAlarm *alarmspec) {
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	4604      	mov	r4, r0
 8006044:	460e      	mov	r6, r1
 8006046:	4615      	mov	r5, r2
  return chSysGetStatusAndLockX();
 8006048:	f001 fc52 	bl	80078f0 <chSysGetStatusAndLockX>
  syssts_t sts;

  /* Entering a reentrant critical zone.*/
  sts = osalSysGetStatusAndLockX();

  if (alarm == 0) {
 800604c:	bb26      	cbnz	r6, 8006098 <rtc_lld_set_alarm+0x58>
    if (alarmspec != NULL) {
 800604e:	b1c5      	cbz	r5, 8006082 <rtc_lld_set_alarm+0x42>
      rtcp->rtc->CR &= ~RTC_CR_ALRAE;
 8006050:	6862      	ldr	r2, [r4, #4]
 8006052:	6893      	ldr	r3, [r2, #8]
 8006054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006058:	6093      	str	r3, [r2, #8]
      while (!(rtcp->rtc->ISR & RTC_ISR_ALRAWF))
 800605a:	6863      	ldr	r3, [r4, #4]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	f012 0f01 	tst.w	r2, #1
 8006062:	d0fa      	beq.n	800605a <rtc_lld_set_alarm+0x1a>
        ;
      rtcp->rtc->ALRMAR = alarmspec->alrmr;
 8006064:	682a      	ldr	r2, [r5, #0]
 8006066:	61da      	str	r2, [r3, #28]
      rtcp->rtc->CR |= RTC_CR_ALRAE;
 8006068:	6862      	ldr	r2, [r4, #4]
 800606a:	6893      	ldr	r3, [r2, #8]
 800606c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006070:	6093      	str	r3, [r2, #8]
      rtcp->rtc->CR |= RTC_CR_ALRAIE;
 8006072:	6862      	ldr	r2, [r4, #4]
 8006074:	6893      	ldr	r3, [r2, #8]
 8006076:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800607a:	6093      	str	r3, [r2, #8]
  chSysRestoreStatusX(sts);
 800607c:	f001 fc58 	bl	8007930 <chSysRestoreStatusX>
  }
#endif /* RTC_ALARMS > 1 */

  /* Leaving a reentrant critical zone.*/
  osalSysRestoreStatusX(sts);
}
 8006080:	bd70      	pop	{r4, r5, r6, pc}
      rtcp->rtc->CR &= ~RTC_CR_ALRAIE;
 8006082:	6862      	ldr	r2, [r4, #4]
 8006084:	6893      	ldr	r3, [r2, #8]
 8006086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800608a:	6093      	str	r3, [r2, #8]
      rtcp->rtc->CR &= ~RTC_CR_ALRAE;
 800608c:	6862      	ldr	r2, [r4, #4]
 800608e:	6893      	ldr	r3, [r2, #8]
 8006090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006094:	6093      	str	r3, [r2, #8]
 8006096:	e7f1      	b.n	800607c <rtc_lld_set_alarm+0x3c>
    if (alarmspec != NULL) {
 8006098:	b1b5      	cbz	r5, 80060c8 <rtc_lld_set_alarm+0x88>
      rtcp->rtc->CR &= ~RTC_CR_ALRBE;
 800609a:	6862      	ldr	r2, [r4, #4]
 800609c:	6893      	ldr	r3, [r2, #8]
 800609e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060a2:	6093      	str	r3, [r2, #8]
      while (!(rtcp->rtc->ISR & RTC_ISR_ALRBWF))
 80060a4:	6863      	ldr	r3, [r4, #4]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	f012 0f02 	tst.w	r2, #2
 80060ac:	d0fa      	beq.n	80060a4 <rtc_lld_set_alarm+0x64>
      rtcp->rtc->ALRMBR = alarmspec->alrmr;
 80060ae:	682a      	ldr	r2, [r5, #0]
 80060b0:	621a      	str	r2, [r3, #32]
      rtcp->rtc->CR |= RTC_CR_ALRBE;
 80060b2:	6862      	ldr	r2, [r4, #4]
 80060b4:	6893      	ldr	r3, [r2, #8]
 80060b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060ba:	6093      	str	r3, [r2, #8]
      rtcp->rtc->CR |= RTC_CR_ALRBIE;
 80060bc:	6862      	ldr	r2, [r4, #4]
 80060be:	6893      	ldr	r3, [r2, #8]
 80060c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80060c4:	6093      	str	r3, [r2, #8]
 80060c6:	e7d9      	b.n	800607c <rtc_lld_set_alarm+0x3c>
      rtcp->rtc->CR &= ~RTC_CR_ALRBIE;
 80060c8:	6862      	ldr	r2, [r4, #4]
 80060ca:	6893      	ldr	r3, [r2, #8]
 80060cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d0:	6093      	str	r3, [r2, #8]
      rtcp->rtc->CR &= ~RTC_CR_ALRBE;
 80060d2:	6862      	ldr	r2, [r4, #4]
 80060d4:	6893      	ldr	r3, [r2, #8]
 80060d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060da:	6093      	str	r3, [r2, #8]
 80060dc:	e7ce      	b.n	800607c <rtc_lld_set_alarm+0x3c>
 80060de:	bf00      	nop

080060e0 <rtc_lld_get_alarm>:
 */
void rtc_lld_get_alarm(RTCDriver *rtcp,
                       rtcalarm_t alarm,
                       RTCAlarm *alarmspec) {

  if (alarm == 0)
 80060e0:	b119      	cbz	r1, 80060ea <rtc_lld_get_alarm+0xa>
    alarmspec->alrmr = rtcp->rtc->ALRMAR;
#if RTC_ALARMS > 1
  else
    alarmspec->alrmr = rtcp->rtc->ALRMBR;
 80060e2:	6843      	ldr	r3, [r0, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	6013      	str	r3, [r2, #0]
#endif /* RTC_ALARMS > 1 */
}
 80060e8:	4770      	bx	lr
    alarmspec->alrmr = rtcp->rtc->ALRMAR;
 80060ea:	6843      	ldr	r3, [r0, #4]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	f3af 8000 	nop.w
 80060f8:	f3af 8000 	nop.w
 80060fc:	f3af 8000 	nop.w

08006100 <rtc_lld_set_callback>:
 *
 * @notapi
 */
void rtc_lld_set_callback(RTCDriver *rtcp, rtccb_t callback) {

  rtcp->callback = callback;
 8006100:	6081      	str	r1, [r0, #8]
}
 8006102:	4770      	bx	lr
 8006104:	f3af 8000 	nop.w
 8006108:	f3af 8000 	nop.w
 800610c:	f3af 8000 	nop.w

08006110 <rtcSTM32SetPeriodicWakeup>:
 * @param[in] rtcp       pointer to RTC driver structure
 * @param[in] wakeupspec pointer to a @p RTCWakeup structure
 *
 * @api
 */
void rtcSTM32SetPeriodicWakeup(RTCDriver *rtcp, const RTCWakeup *wakeupspec) {
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4604      	mov	r4, r0
 8006114:	460d      	mov	r5, r1
  return chSysGetStatusAndLockX();
 8006116:	f001 fbeb 	bl	80078f0 <chSysGetStatusAndLockX>
 800611a:	4606      	mov	r6, r0
  syssts_t sts;

  /* Entering a reentrant critical zone.*/
  sts = osalSysGetStatusAndLockX();

  if (wakeupspec != NULL) {
 800611c:	2d00      	cmp	r5, #0
 800611e:	d032      	beq.n	8006186 <rtcSTM32SetPeriodicWakeup+0x76>
    osalDbgCheck(wakeupspec->wutr != 0x30000);
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006126:	d02a      	beq.n	800617e <rtcSTM32SetPeriodicWakeup+0x6e>

    rtcp->rtc->CR &= ~RTC_CR_WUTE;
 8006128:	6862      	ldr	r2, [r4, #4]
 800612a:	6893      	ldr	r3, [r2, #8]
 800612c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006130:	6093      	str	r3, [r2, #8]
    rtcp->rtc->CR &= ~RTC_CR_WUTIE;
 8006132:	6862      	ldr	r2, [r4, #4]
 8006134:	6893      	ldr	r3, [r2, #8]
 8006136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800613a:	6093      	str	r3, [r2, #8]
    while (!(rtcp->rtc->ISR & RTC_ISR_WUTWF))
 800613c:	6863      	ldr	r3, [r4, #4]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	f012 0f04 	tst.w	r2, #4
 8006144:	d0fa      	beq.n	800613c <rtcSTM32SetPeriodicWakeup+0x2c>
      ;
    rtcp->rtc->WUTR = wakeupspec->wutr & 0xFFFF;
 8006146:	882a      	ldrh	r2, [r5, #0]
 8006148:	615a      	str	r2, [r3, #20]
    rtcp->rtc->CR &= ~RTC_CR_WUCKSEL;
 800614a:	6862      	ldr	r2, [r4, #4]
 800614c:	6893      	ldr	r3, [r2, #8]
 800614e:	f023 0307 	bic.w	r3, r3, #7
 8006152:	6093      	str	r3, [r2, #8]
    rtcp->rtc->CR |= (wakeupspec->wutr >> 16) & RTC_CR_WUCKSEL;
 8006154:	6861      	ldr	r1, [r4, #4]
 8006156:	688b      	ldr	r3, [r1, #8]
 8006158:	886a      	ldrh	r2, [r5, #2]
 800615a:	f002 0207 	and.w	r2, r2, #7
 800615e:	4313      	orrs	r3, r2
 8006160:	608b      	str	r3, [r1, #8]
    rtcp->rtc->CR |= RTC_CR_WUTIE;
 8006162:	6862      	ldr	r2, [r4, #4]
 8006164:	6893      	ldr	r3, [r2, #8]
 8006166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800616a:	6093      	str	r3, [r2, #8]
    rtcp->rtc->CR |= RTC_CR_WUTE;
 800616c:	6862      	ldr	r2, [r4, #4]
 800616e:	6893      	ldr	r3, [r2, #8]
 8006170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006174:	6093      	str	r3, [r2, #8]
  chSysRestoreStatusX(sts);
 8006176:	4630      	mov	r0, r6
 8006178:	f001 fbda 	bl	8007930 <chSysRestoreStatusX>
    rtcp->rtc->CR &= ~RTC_CR_WUTIE;
  }

  /* Leaving a reentrant critical zone.*/
  osalSysRestoreStatusX(sts);
}
 800617c:	bd70      	pop	{r4, r5, r6, pc}
    osalDbgCheck(wakeupspec->wutr != 0x30000);
 800617e:	4807      	ldr	r0, [pc, #28]	; (800619c <rtcSTM32SetPeriodicWakeup+0x8c>)
 8006180:	f001 fabe 	bl	8007700 <chSysHalt>
 8006184:	e7d0      	b.n	8006128 <rtcSTM32SetPeriodicWakeup+0x18>
    rtcp->rtc->CR &= ~RTC_CR_WUTE;
 8006186:	6862      	ldr	r2, [r4, #4]
 8006188:	6893      	ldr	r3, [r2, #8]
 800618a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800618e:	6093      	str	r3, [r2, #8]
    rtcp->rtc->CR &= ~RTC_CR_WUTIE;
 8006190:	6862      	ldr	r2, [r4, #4]
 8006192:	6893      	ldr	r3, [r2, #8]
 8006194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006198:	6093      	str	r3, [r2, #8]
 800619a:	e7ec      	b.n	8006176 <rtcSTM32SetPeriodicWakeup+0x66>
 800619c:	0801964c 	.word	0x0801964c

080061a0 <rtcSTM32GetPeriodicWakeup>:
 * @param[in] rtcp        pointer to RTC driver structure
 * @param[out] wakeupspec pointer to a @p RTCWakeup structure
 *
 * @api
 */
void rtcSTM32GetPeriodicWakeup(RTCDriver *rtcp, RTCWakeup *wakeupspec) {
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4605      	mov	r5, r0
 80061a4:	460c      	mov	r4, r1
  return chSysGetStatusAndLockX();
 80061a6:	f001 fba3 	bl	80078f0 <chSysGetStatusAndLockX>
  syssts_t sts;

  /* Entering a reentrant critical zone.*/
  sts = osalSysGetStatusAndLockX();

  wakeupspec->wutr  = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	6023      	str	r3, [r4, #0]
  wakeupspec->wutr |= rtcp->rtc->WUTR;
 80061ae:	686b      	ldr	r3, [r5, #4]
 80061b0:	695a      	ldr	r2, [r3, #20]
 80061b2:	6022      	str	r2, [r4, #0]
  wakeupspec->wutr |= (((uint32_t)rtcp->rtc->CR) & 0x7) << 16;
 80061b4:	686b      	ldr	r3, [r5, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	041b      	lsls	r3, r3, #16
 80061ba:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80061be:	4313      	orrs	r3, r2
 80061c0:	6023      	str	r3, [r4, #0]
  chSysRestoreStatusX(sts);
 80061c2:	f001 fbb5 	bl	8007930 <chSysRestoreStatusX>

  /* Leaving a reentrant critical zone.*/
  osalSysRestoreStatusX(sts);
}
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
	...

080061d0 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80061d0:	f011 0f0c 	tst.w	r1, #12
 80061d4:	d100      	bne.n	80061d8 <spi_lld_serve_tx_interrupt+0x8>
 80061d6:	4770      	bx	lr
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 80061d8:	b508      	push	{r3, lr}
  chSysHalt(reason);
 80061da:	4802      	ldr	r0, [pc, #8]	; (80061e4 <spi_lld_serve_tx_interrupt+0x14>)
 80061dc:	f001 fa90 	bl	8007700 <chSysHalt>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 80061e0:	bd08      	pop	{r3, pc}
 80061e2:	bf00      	nop
 80061e4:	0801a4ac 	.word	0x0801a4ac
 80061e8:	f3af 8000 	nop.w
 80061ec:	f3af 8000 	nop.w

080061f0 <spi_lld_serve_rx_interrupt>:
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4604      	mov	r4, r0
 80061f4:	460d      	mov	r5, r1
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80061f6:	f011 0f0c 	tst.w	r1, #12
 80061fa:	d11b      	bne.n	8006234 <spi_lld_serve_rx_interrupt+0x44>
  if (spip->config->circular) {
 80061fc:	6863      	ldr	r3, [r4, #4]
 80061fe:	781a      	ldrb	r2, [r3, #0]
 8006200:	b1e2      	cbz	r2, 800623c <spi_lld_serve_rx_interrupt+0x4c>
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 8006202:	f015 0f10 	tst.w	r5, #16
 8006206:	d003      	beq.n	8006210 <spi_lld_serve_rx_interrupt+0x20>
      _spi_isr_half_code(spip);
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	b10b      	cbz	r3, 8006210 <spi_lld_serve_rx_interrupt+0x20>
 800620c:	4620      	mov	r0, r4
 800620e:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8006210:	f015 0f20 	tst.w	r5, #32
 8006214:	d052      	beq.n	80062bc <spi_lld_serve_rx_interrupt+0xcc>
      _spi_isr_full_code(spip);
 8006216:	6863      	ldr	r3, [r4, #4]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	2a00      	cmp	r2, #0
 800621c:	d04e      	beq.n	80062bc <spi_lld_serve_rx_interrupt+0xcc>
 800621e:	2204      	movs	r2, #4
 8006220:	7022      	strb	r2, [r4, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	4620      	mov	r0, r4
 8006226:	4798      	blx	r3
 8006228:	7823      	ldrb	r3, [r4, #0]
 800622a:	2b04      	cmp	r3, #4
 800622c:	d146      	bne.n	80062bc <spi_lld_serve_rx_interrupt+0xcc>
 800622e:	2303      	movs	r3, #3
 8006230:	7023      	strb	r3, [r4, #0]
 8006232:	e043      	b.n	80062bc <spi_lld_serve_rx_interrupt+0xcc>
 8006234:	4825      	ldr	r0, [pc, #148]	; (80062cc <spi_lld_serve_rx_interrupt+0xdc>)
 8006236:	f001 fa63 	bl	8007700 <chSysHalt>
 800623a:	e7df      	b.n	80061fc <spi_lld_serve_rx_interrupt+0xc>
    dmaStreamDisable(spip->dmatx);
 800623c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	6813      	ldr	r3, [r2, #0]
 8006242:	f023 031f 	bic.w	r3, r3, #31
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	f012 0f01 	tst.w	r2, #1
 8006252:	d1f9      	bne.n	8006248 <spi_lld_serve_rx_interrupt+0x58>
 8006254:	7a59      	ldrb	r1, [r3, #9]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	233d      	movs	r3, #61	; 0x3d
 800625a:	408b      	lsls	r3, r1
 800625c:	6013      	str	r3, [r2, #0]
    dmaStreamDisable(spip->dmarx);
 800625e:	6a23      	ldr	r3, [r4, #32]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	6813      	ldr	r3, [r2, #0]
 8006264:	f023 031f 	bic.w	r3, r3, #31
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	6a23      	ldr	r3, [r4, #32]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	6812      	ldr	r2, [r2, #0]
 8006270:	f012 0f01 	tst.w	r2, #1
 8006274:	d1f9      	bne.n	800626a <spi_lld_serve_rx_interrupt+0x7a>
 8006276:	7a59      	ldrb	r1, [r3, #9]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	233d      	movs	r3, #61	; 0x3d
 800627c:	408b      	lsls	r3, r1
 800627e:	6013      	str	r3, [r2, #0]
    _spi_isr_code(spip);
 8006280:	6863      	ldr	r3, [r4, #4]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	b1f2      	cbz	r2, 80062c4 <spi_lld_serve_rx_interrupt+0xd4>
 8006286:	2204      	movs	r2, #4
 8006288:	7022      	strb	r2, [r4, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4620      	mov	r0, r4
 800628e:	4798      	blx	r3
 8006290:	7823      	ldrb	r3, [r4, #0]
 8006292:	2b04      	cmp	r3, #4
 8006294:	d013      	beq.n	80062be <spi_lld_serve_rx_interrupt+0xce>
 8006296:	2320      	movs	r3, #32
 8006298:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800629c:	f002 fed0 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80062a0:	f001 fbee 	bl	8007a80 <_dbg_check_lock_from_isr>
  chThdResumeI(trp, msg);
 80062a4:	2100      	movs	r1, #0
 80062a6:	f104 0008 	add.w	r0, r4, #8
 80062aa:	f002 fd49 	bl	8008d40 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 80062ae:	f001 fbff 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80062b2:	f002 fecd 	bl	8009050 <_stats_stop_measure_crit_isr>
 80062b6:	2300      	movs	r3, #0
 80062b8:	f383 8811 	msr	BASEPRI, r3
}
 80062bc:	bd38      	pop	{r3, r4, r5, pc}
    _spi_isr_code(spip);
 80062be:	2302      	movs	r3, #2
 80062c0:	7023      	strb	r3, [r4, #0]
 80062c2:	e7e8      	b.n	8006296 <spi_lld_serve_rx_interrupt+0xa6>
 80062c4:	2302      	movs	r3, #2
 80062c6:	7023      	strb	r3, [r4, #0]
 80062c8:	e7e5      	b.n	8006296 <spi_lld_serve_rx_interrupt+0xa6>
 80062ca:	bf00      	nop
 80062cc:	0801a4ac 	.word	0x0801a4ac

080062d0 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 80062d0:	b538      	push	{r3, r4, r5, lr}

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 80062d2:	4c0d      	ldr	r4, [pc, #52]	; (8006308 <spi_lld_init+0x38>)
 80062d4:	4620      	mov	r0, r4
 80062d6:	f7fd f863 	bl	80033a0 <spiObjectInit>
  SPID1.spi       = SPI1;
 80062da:	4b0c      	ldr	r3, [pc, #48]	; (800630c <spi_lld_init+0x3c>)
 80062dc:	61e3      	str	r3, [r4, #28]
  SPID1.dmarx     = NULL;
 80062de:	2500      	movs	r5, #0
 80062e0:	6225      	str	r5, [r4, #32]
  SPID1.dmatx     = NULL;
 80062e2:	6265      	str	r5, [r4, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80062e4:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <spi_lld_init+0x40>)
 80062e6:	62a3      	str	r3, [r4, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80062e8:	3330      	adds	r3, #48	; 0x30
 80062ea:	62e3      	str	r3, [r4, #44]	; 0x2c
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
 80062ec:	4c09      	ldr	r4, [pc, #36]	; (8006314 <spi_lld_init+0x44>)
 80062ee:	4620      	mov	r0, r4
 80062f0:	f7fd f856 	bl	80033a0 <spiObjectInit>
  SPID2.spi       = SPI2;
 80062f4:	4b08      	ldr	r3, [pc, #32]	; (8006318 <spi_lld_init+0x48>)
 80062f6:	61e3      	str	r3, [r4, #28]
  SPID2.dmarx     = NULL;
 80062f8:	6225      	str	r5, [r4, #32]
  SPID2.dmatx     = NULL;
 80062fa:	6265      	str	r5, [r4, #36]	; 0x24
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 80062fc:	4b07      	ldr	r3, [pc, #28]	; (800631c <spi_lld_init+0x4c>)
 80062fe:	62a3      	str	r3, [r4, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8006300:	3330      	adds	r3, #48	; 0x30
 8006302:	62e3      	str	r3, [r4, #44]	; 0x2c
                    STM32_DMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_M2P |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif
}
 8006304:	bd38      	pop	{r3, r4, r5, pc}
 8006306:	bf00      	nop
 8006308:	2000482c 	.word	0x2000482c
 800630c:	40013000 	.word	0x40013000
 8006310:	06030016 	.word	0x06030016
 8006314:	2000485c 	.word	0x2000485c
 8006318:	40003800 	.word	0x40003800
 800631c:	00010016 	.word	0x00010016

08006320 <spi_lld_start>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8006320:	b510      	push	{r4, lr}
 8006322:	4604      	mov	r4, r0

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8006324:	7803      	ldrb	r3, [r0, #0]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d031      	beq.n	800638e <spi_lld_start+0x6e>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800632a:	6863      	ldr	r3, [r4, #4]
 800632c:	8a1b      	ldrh	r3, [r3, #16]
 800632e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006332:	f040 8083 	bne.w	800643c <spi_lld_start+0x11c>
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8006336:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8006338:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800633c:	62a3      	str	r3, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800633e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8006340:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8006344:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  if (spip->config->circular) {
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f040 8083 	bne.w	8006456 <spi_lld_start+0x136>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
  }
  else {
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8006350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006352:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 8006356:	62a3      	str	r3, [r4, #40]	; 0x28
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8006358:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800635a:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 800635e:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8006360:	69e2      	ldr	r2, [r4, #28]
 8006362:	6813      	ldr	r3, [r2, #0]
 8006364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006368:	6013      	str	r3, [r2, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800636a:	6863      	ldr	r3, [r4, #4]
 800636c:	8a1b      	ldrh	r3, [r3, #16]
 800636e:	69e2      	ldr	r2, [r4, #28]
 8006370:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8006374:	6013      	str	r3, [r2, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	8a5b      	ldrh	r3, [r3, #18]
 800637a:	69e2      	ldr	r2, [r4, #28]
 800637c:	f043 0307 	orr.w	r3, r3, #7
 8006380:	6053      	str	r3, [r2, #4]
                    SPI_CR2_TXDMAEN;
  spip->spi->CR1 |= SPI_CR1_SPE;
 8006382:	69e2      	ldr	r2, [r4, #28]
 8006384:	6813      	ldr	r3, [r2, #0]
 8006386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800638a:	6013      	str	r3, [r2, #0]
}
 800638c:	bd10      	pop	{r4, pc}
    if (&SPID1 == spip) {
 800638e:	4b36      	ldr	r3, [pc, #216]	; (8006468 <spi_lld_start+0x148>)
 8006390:	4298      	cmp	r0, r3
 8006392:	d00d      	beq.n	80063b0 <spi_lld_start+0x90>
    if (&SPID2 == spip) {
 8006394:	4b35      	ldr	r3, [pc, #212]	; (800646c <spi_lld_start+0x14c>)
 8006396:	429c      	cmp	r4, r3
 8006398:	d02d      	beq.n	80063f6 <spi_lld_start+0xd6>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800639a:	69e3      	ldr	r3, [r4, #28]
 800639c:	330c      	adds	r3, #12
 800639e:	6a22      	ldr	r2, [r4, #32]
 80063a0:	6812      	ldr	r2, [r2, #0]
 80063a2:	6093      	str	r3, [r2, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80063a4:	69e3      	ldr	r3, [r4, #28]
 80063a6:	330c      	adds	r3, #12
 80063a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	6093      	str	r3, [r2, #8]
 80063ae:	e7bc      	b.n	800632a <spi_lld_start+0xa>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI1_RX_DMA_STREAM,
 80063b0:	4603      	mov	r3, r0
 80063b2:	4a2f      	ldr	r2, [pc, #188]	; (8006470 <spi_lld_start+0x150>)
 80063b4:	2102      	movs	r1, #2
 80063b6:	2008      	movs	r0, #8
 80063b8:	f7fe fc1a 	bl	8004bf0 <dmaStreamAllocI>
 80063bc:	6220      	str	r0, [r4, #32]
      osalDbgAssert(spip->dmarx != NULL, "unable to allocate stream");
 80063be:	b190      	cbz	r0, 80063e6 <spi_lld_start+0xc6>
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 80063c0:	4623      	mov	r3, r4
 80063c2:	4a2c      	ldr	r2, [pc, #176]	; (8006474 <spi_lld_start+0x154>)
 80063c4:	2102      	movs	r1, #2
 80063c6:	200b      	movs	r0, #11
 80063c8:	f7fe fc12 	bl	8004bf0 <dmaStreamAllocI>
 80063cc:	6260      	str	r0, [r4, #36]	; 0x24
      osalDbgAssert(spip->dmatx != NULL, "unable to allocate stream");
 80063ce:	b170      	cbz	r0, 80063ee <spi_lld_start+0xce>
      rccEnableSPI1(true);
 80063d0:	4b29      	ldr	r3, [pc, #164]	; (8006478 <spi_lld_start+0x158>)
 80063d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063d8:	645a      	str	r2, [r3, #68]	; 0x44
 80063da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80063dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063e0:	665a      	str	r2, [r3, #100]	; 0x64
 80063e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e4:	e7d6      	b.n	8006394 <spi_lld_start+0x74>
      osalDbgAssert(spip->dmarx != NULL, "unable to allocate stream");
 80063e6:	4825      	ldr	r0, [pc, #148]	; (800647c <spi_lld_start+0x15c>)
 80063e8:	f001 f98a 	bl	8007700 <chSysHalt>
 80063ec:	e7e8      	b.n	80063c0 <spi_lld_start+0xa0>
      osalDbgAssert(spip->dmatx != NULL, "unable to allocate stream");
 80063ee:	4823      	ldr	r0, [pc, #140]	; (800647c <spi_lld_start+0x15c>)
 80063f0:	f001 f986 	bl	8007700 <chSysHalt>
 80063f4:	e7ec      	b.n	80063d0 <spi_lld_start+0xb0>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI2_RX_DMA_STREAM,
 80063f6:	4623      	mov	r3, r4
 80063f8:	4a1d      	ldr	r2, [pc, #116]	; (8006470 <spi_lld_start+0x150>)
 80063fa:	210a      	movs	r1, #10
 80063fc:	2003      	movs	r0, #3
 80063fe:	f7fe fbf7 	bl	8004bf0 <dmaStreamAllocI>
 8006402:	6220      	str	r0, [r4, #32]
      osalDbgAssert(spip->dmarx != NULL, "unable to allocate stream");
 8006404:	b190      	cbz	r0, 800642c <spi_lld_start+0x10c>
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI2_TX_DMA_STREAM,
 8006406:	4623      	mov	r3, r4
 8006408:	4a1a      	ldr	r2, [pc, #104]	; (8006474 <spi_lld_start+0x154>)
 800640a:	210a      	movs	r1, #10
 800640c:	2004      	movs	r0, #4
 800640e:	f7fe fbef 	bl	8004bf0 <dmaStreamAllocI>
 8006412:	6260      	str	r0, [r4, #36]	; 0x24
      osalDbgAssert(spip->dmatx != NULL, "unable to allocate stream");
 8006414:	b170      	cbz	r0, 8006434 <spi_lld_start+0x114>
      rccEnableSPI2(true);
 8006416:	4b18      	ldr	r3, [pc, #96]	; (8006478 <spi_lld_start+0x158>)
 8006418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800641a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800641e:	641a      	str	r2, [r3, #64]	; 0x40
 8006420:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006426:	661a      	str	r2, [r3, #96]	; 0x60
 8006428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642a:	e7b6      	b.n	800639a <spi_lld_start+0x7a>
      osalDbgAssert(spip->dmarx != NULL, "unable to allocate stream");
 800642c:	4813      	ldr	r0, [pc, #76]	; (800647c <spi_lld_start+0x15c>)
 800642e:	f001 f967 	bl	8007700 <chSysHalt>
 8006432:	e7e8      	b.n	8006406 <spi_lld_start+0xe6>
      osalDbgAssert(spip->dmatx != NULL, "unable to allocate stream");
 8006434:	4811      	ldr	r0, [pc, #68]	; (800647c <spi_lld_start+0x15c>)
 8006436:	f001 f963 	bl	8007700 <chSysHalt>
 800643a:	e7ec      	b.n	8006416 <spi_lld_start+0xf6>
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800643c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800643e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8006442:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8006446:	62a3      	str	r3, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8006448:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800644a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800644e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8006452:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006454:	e777      	b.n	8006346 <spi_lld_start+0x26>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8006456:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006458:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 800645c:	62a3      	str	r3, [r4, #40]	; 0x28
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800645e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006460:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 8006464:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006466:	e77b      	b.n	8006360 <spi_lld_start+0x40>
 8006468:	2000482c 	.word	0x2000482c
 800646c:	2000485c 	.word	0x2000485c
 8006470:	080061f1 	.word	0x080061f1
 8006474:	080061d1 	.word	0x080061d1
 8006478:	40023800 	.word	0x40023800
 800647c:	08019668 	.word	0x08019668

08006480 <spi_lld_stop>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_stop(SPIDriver *spip) {
 8006480:	b538      	push	{r3, r4, r5, lr}

  /* If in ready state then disables the SPI clock.*/
  if (spip->state == SPI_READY) {
 8006482:	7803      	ldrb	r3, [r0, #0]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d000      	beq.n	800648a <spi_lld_stop+0xa>
#if STM32_SPI_USE_SPI6
    if (&SPID6 == spip)
      rccDisableSPI6();
#endif
  }
}
 8006488:	bd38      	pop	{r3, r4, r5, pc}
 800648a:	4604      	mov	r4, r0
    spip->spi->CR1 &= ~SPI_CR1_SPE;
 800648c:	69c2      	ldr	r2, [r0, #28]
 800648e:	6813      	ldr	r3, [r2, #0]
 8006490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006494:	6013      	str	r3, [r2, #0]
    spip->spi->CR1  = 0;
 8006496:	69c3      	ldr	r3, [r0, #28]
 8006498:	2500      	movs	r5, #0
 800649a:	601d      	str	r5, [r3, #0]
    spip->spi->CR2  = 0;
 800649c:	69c3      	ldr	r3, [r0, #28]
 800649e:	605d      	str	r5, [r3, #4]
    dmaStreamFreeI(spip->dmarx);
 80064a0:	6a00      	ldr	r0, [r0, #32]
 80064a2:	f7fe fc55 	bl	8004d50 <dmaStreamFreeI>
    dmaStreamFreeI(spip->dmatx);
 80064a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80064a8:	f7fe fc52 	bl	8004d50 <dmaStreamFreeI>
    spip->dmarx = NULL;
 80064ac:	6225      	str	r5, [r4, #32]
    spip->dmatx = NULL;
 80064ae:	6265      	str	r5, [r4, #36]	; 0x24
    if (&SPID1 == spip)
 80064b0:	4b0d      	ldr	r3, [pc, #52]	; (80064e8 <spi_lld_stop+0x68>)
 80064b2:	429c      	cmp	r4, r3
 80064b4:	d00d      	beq.n	80064d2 <spi_lld_stop+0x52>
    if (&SPID2 == spip)
 80064b6:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <spi_lld_stop+0x6c>)
 80064b8:	429c      	cmp	r4, r3
 80064ba:	d1e5      	bne.n	8006488 <spi_lld_stop+0x8>
      rccDisableSPI2();
 80064bc:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <spi_lld_stop+0x70>)
 80064be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40
 80064c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064cc:	661a      	str	r2, [r3, #96]	; 0x60
 80064ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80064d0:	e7da      	b.n	8006488 <spi_lld_stop+0x8>
      rccDisableSPI1();
 80064d2:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <spi_lld_stop+0x70>)
 80064d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064da:	645a      	str	r2, [r3, #68]	; 0x44
 80064dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80064de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064e2:	665a      	str	r2, [r3, #100]	; 0x64
 80064e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e6:	e7e6      	b.n	80064b6 <spi_lld_stop+0x36>
 80064e8:	2000482c 	.word	0x2000482c
 80064ec:	2000485c 	.word	0x2000485c
 80064f0:	40023800 	.word	0x40023800
 80064f4:	f3af 8000 	nop.w
 80064f8:	f3af 8000 	nop.w
 80064fc:	f3af 8000 	nop.w

08006500 <spi_lld_ignore>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] n         number of words to be ignored
 *
 * @notapi
 */
void spi_lld_ignore(SPIDriver *spip, size_t n) {
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4604      	mov	r4, r0
 8006504:	460d      	mov	r5, r1

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 8006506:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800650a:	d222      	bcs.n	8006552 <spi_lld_ignore+0x52>

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800650c:	6a23      	ldr	r3, [r4, #32]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a12      	ldr	r2, [pc, #72]	; (800655c <spi_lld_ignore+0x5c>)
 8006512:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8006514:	6a23      	ldr	r3, [r4, #32]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800651a:	6a23      	ldr	r3, [r4, #32]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006520:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8006522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a0e      	ldr	r2, [pc, #56]	; (8006560 <spi_lld_ignore+0x60>)
 8006528:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800652a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8006530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006536:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8006538:	6a23      	ldr	r3, [r4, #32]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	6813      	ldr	r3, [r2, #0]
 800653e:	f043 0301 	orr.w	r3, r3, #1
 8006542:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8006544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	6813      	ldr	r3, [r2, #0]
 800654a:	f043 0301 	orr.w	r3, r3, #1
 800654e:	6013      	str	r3, [r2, #0]
}
 8006550:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 8006552:	4804      	ldr	r0, [pc, #16]	; (8006564 <spi_lld_ignore+0x64>)
 8006554:	f001 f8d4 	bl	8007700 <chSysHalt>
 8006558:	e7d8      	b.n	800650c <spi_lld_ignore+0xc>
 800655a:	bf00      	nop
 800655c:	200020a8 	.word	0x200020a8
 8006560:	08019688 	.word	0x08019688
 8006564:	08019678 	.word	0x08019678
 8006568:	f3af 8000 	nop.w
 800656c:	f3af 8000 	nop.w

08006570 <spi_lld_exchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	4604      	mov	r4, r0
 8006574:	460d      	mov	r5, r1
 8006576:	4616      	mov	r6, r2
 8006578:	461f      	mov	r7, r3

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 800657a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800657e:	d224      	bcs.n	80065ca <spi_lld_exchange+0x5a>

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8006580:	6a23      	ldr	r3, [r4, #32]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8006586:	6a23      	ldr	r3, [r4, #32]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 800658c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800658e:	6a22      	ldr	r2, [r4, #32]
 8006590:	6812      	ldr	r2, [r2, #0]
 8006592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006596:	6013      	str	r3, [r2, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8006598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800659e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80065a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80065a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065a8:	6812      	ldr	r2, [r2, #0]
 80065aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065ae:	6013      	str	r3, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 80065b0:	6a23      	ldr	r3, [r4, #32]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	6813      	ldr	r3, [r2, #0]
 80065b6:	f043 0301 	orr.w	r3, r3, #1
 80065ba:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 80065bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	6813      	ldr	r3, [r2, #0]
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	6013      	str	r3, [r2, #0]
}
 80065c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 80065ca:	4802      	ldr	r0, [pc, #8]	; (80065d4 <spi_lld_exchange+0x64>)
 80065cc:	f001 f898 	bl	8007700 <chSysHalt>
 80065d0:	e7d6      	b.n	8006580 <spi_lld_exchange+0x10>
 80065d2:	bf00      	nop
 80065d4:	0801968c 	.word	0x0801968c
 80065d8:	f3af 8000 	nop.w
 80065dc:	f3af 8000 	nop.w

080065e0 <spi_lld_send>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	4604      	mov	r4, r0
 80065e4:	460d      	mov	r5, r1
 80065e6:	4616      	mov	r6, r2

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 80065e8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80065ec:	d223      	bcs.n	8006636 <spi_lld_send+0x56>

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80065ee:	6a23      	ldr	r3, [r4, #32]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a13      	ldr	r2, [pc, #76]	; (8006640 <spi_lld_send+0x60>)
 80065f4:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80065f6:	6a23      	ldr	r3, [r4, #32]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 80065fc:	6a23      	ldr	r3, [r4, #32]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006602:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8006604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800660a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8006610:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006612:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800661a:	6013      	str	r3, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 800661c:	6a23      	ldr	r3, [r4, #32]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	6813      	ldr	r3, [r2, #0]
 8006622:	f043 0301 	orr.w	r3, r3, #1
 8006626:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8006628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	6813      	ldr	r3, [r2, #0]
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	6013      	str	r3, [r2, #0]
}
 8006634:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 8006636:	4803      	ldr	r0, [pc, #12]	; (8006644 <spi_lld_send+0x64>)
 8006638:	f001 f862 	bl	8007700 <chSysHalt>
 800663c:	e7d7      	b.n	80065ee <spi_lld_send+0xe>
 800663e:	bf00      	nop
 8006640:	200020a8 	.word	0x200020a8
 8006644:	080196a0 	.word	0x080196a0
 8006648:	f3af 8000 	nop.w
 800664c:	f3af 8000 	nop.w

08006650 <spi_lld_receive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	4604      	mov	r4, r0
 8006654:	460d      	mov	r5, r1
 8006656:	4616      	mov	r6, r2

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 8006658:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800665c:	d223      	bcs.n	80066a6 <spi_lld_receive+0x56>

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800665e:	6a23      	ldr	r3, [r4, #32]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8006664:	6a23      	ldr	r3, [r4, #32]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800666a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800666c:	6a22      	ldr	r2, [r4, #32]
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006674:	6013      	str	r3, [r2, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8006676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a0d      	ldr	r2, [pc, #52]	; (80066b0 <spi_lld_receive+0x60>)
 800667c:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800667e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8006684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800668a:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 800668c:	6a23      	ldr	r3, [r4, #32]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	6813      	ldr	r3, [r2, #0]
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8006698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	6813      	ldr	r3, [r2, #0]
 800669e:	f043 0301 	orr.w	r3, r3, #1
 80066a2:	6013      	str	r3, [r2, #0]
}
 80066a4:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 80066a6:	4803      	ldr	r0, [pc, #12]	; (80066b4 <spi_lld_receive+0x64>)
 80066a8:	f001 f82a 	bl	8007700 <chSysHalt>
 80066ac:	e7d7      	b.n	800665e <spi_lld_receive+0xe>
 80066ae:	bf00      	nop
 80066b0:	08019688 	.word	0x08019688
 80066b4:	080196b0 	.word	0x080196b0
 80066b8:	f3af 8000 	nop.w
 80066bc:	f3af 8000 	nop.w

080066c0 <spi_lld_abort>:
 * @notapi
 */
void spi_lld_abort(SPIDriver *spip) {

  /* Stopping DMAs.*/
  dmaStreamDisable(spip->dmatx);
 80066c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	6813      	ldr	r3, [r2, #0]
 80066c6:	f023 031f 	bic.w	r3, r3, #31
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	6812      	ldr	r2, [r2, #0]
 80066d2:	f012 0f01 	tst.w	r2, #1
 80066d6:	d1f9      	bne.n	80066cc <spi_lld_abort+0xc>
 80066d8:	7a59      	ldrb	r1, [r3, #9]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	233d      	movs	r3, #61	; 0x3d
 80066de:	408b      	lsls	r3, r1
 80066e0:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(spip->dmarx);
 80066e2:	6a03      	ldr	r3, [r0, #32]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	6813      	ldr	r3, [r2, #0]
 80066e8:	f023 031f 	bic.w	r3, r3, #31
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	6a03      	ldr	r3, [r0, #32]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	f012 0f01 	tst.w	r2, #1
 80066f8:	d1f9      	bne.n	80066ee <spi_lld_abort+0x2e>
 80066fa:	7a59      	ldrb	r1, [r3, #9]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	233d      	movs	r3, #61	; 0x3d
 8006700:	408b      	lsls	r3, r1
 8006702:	6013      	str	r3, [r2, #0]
}
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	f3af 8000 	nop.w
 800670c:	f3af 8000 	nop.w

08006710 <spi_lld_polled_exchange>:
 * @param[in] frame     the data frame to send over the SPI bus
 * @return              The received data frame from the SPI bus.
 */
uint16_t spi_lld_polled_exchange(SPIDriver *spip, uint16_t frame) {

  spip->spi->DR = frame;
 8006710:	69c3      	ldr	r3, [r0, #28]
 8006712:	60d9      	str	r1, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8006714:	69c3      	ldr	r3, [r0, #28]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	f012 0f01 	tst.w	r2, #1
 800671c:	d0fa      	beq.n	8006714 <spi_lld_polled_exchange+0x4>
    ;
  return spip->spi->DR;
 800671e:	68d8      	ldr	r0, [r3, #12]
}
 8006720:	b280      	uxth	r0, r0
 8006722:	4770      	bx	lr
	...

08006730 <sdc_lld_collect_errors>:
 * @notapi
 */
static void sdc_lld_collect_errors(SDCDriver *sdcp, uint32_t sta) {
  uint32_t errors = SDC_NO_ERROR;

  if (sta & SDIO_STA_CCRCFAIL)
 8006730:	f011 0f01 	tst.w	r1, #1
 8006734:	d122      	bne.n	800677c <sdc_lld_collect_errors+0x4c>
  uint32_t errors = SDC_NO_ERROR;
 8006736:	2300      	movs	r3, #0
    errors |= SDC_CMD_CRC_ERROR;
  if (sta & SDIO_STA_DCRCFAIL)
 8006738:	f011 0f02 	tst.w	r1, #2
 800673c:	d001      	beq.n	8006742 <sdc_lld_collect_errors+0x12>
    errors |= SDC_DATA_CRC_ERROR;
 800673e:	f043 0302 	orr.w	r3, r3, #2
  if (sta & SDIO_STA_CTIMEOUT)
 8006742:	f011 0f04 	tst.w	r1, #4
 8006746:	d001      	beq.n	800674c <sdc_lld_collect_errors+0x1c>
    errors |= SDC_COMMAND_TIMEOUT;
 8006748:	f043 0308 	orr.w	r3, r3, #8
  if (sta & SDIO_STA_DTIMEOUT)
 800674c:	f011 0f08 	tst.w	r1, #8
 8006750:	d001      	beq.n	8006756 <sdc_lld_collect_errors+0x26>
    errors |= SDC_DATA_TIMEOUT;
 8006752:	f043 0304 	orr.w	r3, r3, #4
  if (sta & SDIO_STA_TXUNDERR)
 8006756:	f011 0f10 	tst.w	r1, #16
 800675a:	d001      	beq.n	8006760 <sdc_lld_collect_errors+0x30>
    errors |= SDC_TX_UNDERRUN;
 800675c:	f043 0310 	orr.w	r3, r3, #16
  if (sta & SDIO_STA_RXOVERR)
 8006760:	f011 0f20 	tst.w	r1, #32
 8006764:	d001      	beq.n	800676a <sdc_lld_collect_errors+0x3a>
    errors |= SDC_RX_OVERRUN;
 8006766:	f043 0320 	orr.w	r3, r3, #32
  if (sta & SDIO_STA_STBITERR)
 800676a:	f411 7f00 	tst.w	r1, #512	; 0x200
 800676e:	d001      	beq.n	8006774 <sdc_lld_collect_errors+0x44>
    errors |= SDC_STARTBIT_ERROR;
 8006770:	f043 0340 	orr.w	r3, r3, #64	; 0x40

  sdcp->errors |= errors;
 8006774:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006776:	4313      	orrs	r3, r2
 8006778:	6343      	str	r3, [r0, #52]	; 0x34
}
 800677a:	4770      	bx	lr
    errors |= SDC_CMD_CRC_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e7db      	b.n	8006738 <sdc_lld_collect_errors+0x8>

08006780 <sdc_lld_prepare_read_bytes>:
                                       uint8_t *buf, uint32_t bytes) {
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	4604      	mov	r4, r0
 8006784:	460e      	mov	r6, r1
 8006786:	4615      	mov	r5, r2
  osalDbgCheck(bytes < 0x1000000);
 8006788:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800678c:	d226      	bcs.n	80067dc <sdc_lld_prepare_read_bytes+0x5c>
  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 800678e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006790:	4a14      	ldr	r2, [pc, #80]	; (80067e4 <sdc_lld_prepare_read_bytes+0x64>)
 8006792:	625a      	str	r2, [r3, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 8006794:	4620      	mov	r0, r4
 8006796:	f7fc fa93 	bl	8002cc0 <_sdc_wait_for_transfer_state>
 800679a:	4602      	mov	r2, r0
 800679c:	b9e0      	cbnz	r0, 80067d8 <sdc_lld_prepare_read_bytes+0x58>
  dmaStreamSetMemory0(sdcp->dma, buf);
 800679e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma, bytes / sizeof (uint32_t));
 80067a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	08a9      	lsrs	r1, r5, #2
 80067aa:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 80067ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80067b2:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 80067b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80067b6:	6819      	ldr	r1, [r3, #0]
 80067b8:	680b      	ldr	r3, [r1, #0]
 80067ba:	f043 0301 	orr.w	r3, r3, #1
 80067be:	600b      	str	r3, [r1, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 80067c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80067c2:	4909      	ldr	r1, [pc, #36]	; (80067e8 <sdc_lld_prepare_read_bytes+0x68>)
 80067c4:	6399      	str	r1, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 80067c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80067c8:	f240 312a 	movw	r1, #810	; 0x32a
 80067cc:	63d9      	str	r1, [r3, #60]	; 0x3c
  sdcp->sdio->DLEN  = bytes;
 80067ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80067d0:	629d      	str	r5, [r3, #40]	; 0x28
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 80067d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80067d4:	210f      	movs	r1, #15
 80067d6:	62d9      	str	r1, [r3, #44]	; 0x2c
}
 80067d8:	4610      	mov	r0, r2
 80067da:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgCheck(bytes < 0x1000000);
 80067dc:	4803      	ldr	r0, [pc, #12]	; (80067ec <sdc_lld_prepare_read_bytes+0x6c>)
 80067de:	f000 ff8f 	bl	8007700 <chSysHalt>
 80067e2:	e7d4      	b.n	800678e <sdc_lld_prepare_read_bytes+0xe>
 80067e4:	016e3600 	.word	0x016e3600
 80067e8:	00c007ff 	.word	0x00c007ff
 80067ec:	080196c0 	.word	0x080196c0

080067f0 <Vector104>:
 * @details It just wakes transaction thread. All error  handling performs in
 *          that thread.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_SDIO_HANDLER) {
 80067f0:	b538      	push	{r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();
 80067f2:	f002 fbed 	bl	8008fd0 <_stats_increase_irq>
 80067f6:	4d11      	ldr	r5, [pc, #68]	; (800683c <Vector104+0x4c>)
 80067f8:	4628      	mov	r0, r5
 80067fa:	f001 fa41 	bl	8007c80 <_trace_isr_enter>
 80067fe:	f001 f96f 	bl	8007ae0 <_dbg_check_enter_isr>
 8006802:	2320      	movs	r3, #32
 8006804:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8006808:	f002 fc1a 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800680c:	f001 f938 	bl	8007a80 <_dbg_check_lock_from_isr>

  osalSysLockFromISR();

  /* Disables the source but the status flags are not reset because the
     read/write functions needs to check them.*/
  SDIO->MASK = 0;
 8006810:	2400      	movs	r4, #0
 8006812:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <Vector104+0x50>)
 8006814:	63dc      	str	r4, [r3, #60]	; 0x3c
 8006816:	4621      	mov	r1, r4
 8006818:	480a      	ldr	r0, [pc, #40]	; (8006844 <Vector104+0x54>)
 800681a:	f002 fa91 	bl	8008d40 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 800681e:	f001 f947 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8006822:	f002 fc15 	bl	8009050 <_stats_stop_measure_crit_isr>
 8006826:	f384 8811 	msr	BASEPRI, r4

  osalThreadResumeI(&SDCD1.thread, MSG_OK);

  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 800682a:	f001 f979 	bl	8007b20 <_dbg_check_leave_isr>
 800682e:	4628      	mov	r0, r5
 8006830:	f001 fa4e 	bl	8007cd0 <_trace_isr_leave>
 8006834:	f005 f9d4 	bl	800bbe0 <_port_irq_epilogue>
}
 8006838:	bd38      	pop	{r3, r4, r5, pc}
 800683a:	bf00      	nop
 800683c:	080196dc 	.word	0x080196dc
 8006840:	40012c00 	.word	0x40012c00
 8006844:	200048c8 	.word	0x200048c8
 8006848:	f3af 8000 	nop.w
 800684c:	f3af 8000 	nop.w

08006850 <sdc_lld_init>:
/**
 * @brief   Low level SDC driver initialization.
 *
 * @notapi
 */
void sdc_lld_init(void) {
 8006850:	b510      	push	{r4, lr}

  sdcObjectInit(&SDCD1);
 8006852:	4c07      	ldr	r4, [pc, #28]	; (8006870 <sdc_lld_init+0x20>)
 8006854:	4620      	mov	r0, r4
 8006856:	f7fc fac3 	bl	8002de0 <sdcObjectInit>
  SDCD1.thread = NULL;
 800685a:	2300      	movs	r3, #0
 800685c:	63e3      	str	r3, [r4, #60]	; 0x3c
  SDCD1.dma    = NULL;
 800685e:	6463      	str	r3, [r4, #68]	; 0x44
  SDCD1.sdio   = SDIO;
 8006860:	4b04      	ldr	r3, [pc, #16]	; (8006874 <sdc_lld_init+0x24>)
 8006862:	64a3      	str	r3, [r4, #72]	; 0x48
  nvicEnableVector(STM32_SDIO_NUMBER, STM32_SDC_SDIO_IRQ_PRIORITY);
 8006864:	2109      	movs	r1, #9
 8006866:	2031      	movs	r0, #49	; 0x31
 8006868:	f7fd fc02 	bl	8004070 <nvicEnableVector>
}
 800686c:	bd10      	pop	{r4, pc}
 800686e:	bf00      	nop
 8006870:	2000488c 	.word	0x2000488c
 8006874:	40012c00 	.word	0x40012c00
 8006878:	f3af 8000 	nop.w
 800687c:	f3af 8000 	nop.w

08006880 <sdc_lld_start>:
 *
 * @param[in] sdcp      pointer to the @p SDCDriver object
 *
 * @notapi
 */
void sdc_lld_start(SDCDriver *sdcp) {
 8006880:	b510      	push	{r4, lr}
 8006882:	4604      	mov	r4, r0

  /* Checking configuration, using a default if NULL has been passed.*/
  if (sdcp->config == NULL) {
 8006884:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006886:	b173      	cbz	r3, 80068a6 <sdc_lld_start+0x26>
                  STM32_DMA_CR_PSIZE_WORD |
                  STM32_DMA_CR_MSIZE_WORD |
                  STM32_DMA_CR_MINC;

#if (defined(STM32F4XX) || defined(STM32F2XX))
  sdcp->dmamode |= STM32_DMA_CR_PFCTRL |
 8006888:	4b18      	ldr	r3, [pc, #96]	; (80068ec <sdc_lld_start+0x6c>)
 800688a:	6423      	str	r3, [r4, #64]	; 0x40
                   STM32_DMA_CR_PBURST_INCR4 |
                   STM32_DMA_CR_MBURST_INCR4;
#endif

  if (sdcp->state == BLK_STOP) {
 800688c:	7923      	ldrb	r3, [r4, #4]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d00c      	beq.n	80068ac <sdc_lld_start+0x2c>
#endif
    rccEnableSDIO(true);
  }

  /* Configuration, card clock is initially stopped.*/
  sdcp->sdio->POWER  = 0;
 8006892:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006894:	2300      	movs	r3, #0
 8006896:	6013      	str	r3, [r2, #0]
  sdcp->sdio->CLKCR  = 0;
 8006898:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800689a:	6053      	str	r3, [r2, #4]
  sdcp->sdio->DCTRL  = 0;
 800689c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800689e:	62d3      	str	r3, [r2, #44]	; 0x2c
  sdcp->sdio->DTIMER = 0;
 80068a0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80068a2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80068a4:	bd10      	pop	{r4, pc}
    sdcp->config = &sdc_default_cfg;
 80068a6:	4b12      	ldr	r3, [pc, #72]	; (80068f0 <sdc_lld_start+0x70>)
 80068a8:	62c3      	str	r3, [r0, #44]	; 0x2c
 80068aa:	e7ed      	b.n	8006888 <sdc_lld_start+0x8>
    sdcp->dma = dmaStreamAllocI(STM32_SDC_SDIO_DMA_STREAM,
 80068ac:	2300      	movs	r3, #0
 80068ae:	461a      	mov	r2, r3
 80068b0:	2109      	movs	r1, #9
 80068b2:	200e      	movs	r0, #14
 80068b4:	f7fe f99c 	bl	8004bf0 <dmaStreamAllocI>
 80068b8:	6460      	str	r0, [r4, #68]	; 0x44
    osalDbgAssert(sdcp->dma != NULL, "unable to allocate stream");
 80068ba:	b198      	cbz	r0, 80068e4 <sdc_lld_start+0x64>
    dmaStreamSetPeripheral(sdcp->dma, &sdcp->sdio->FIFO);
 80068bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80068be:	3380      	adds	r3, #128	; 0x80
 80068c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80068c2:	6812      	ldr	r2, [r2, #0]
 80068c4:	6093      	str	r3, [r2, #8]
    dmaStreamSetFIFO(sdcp->dma, STM32_DMA_FCR_DMDIS | STM32_DMA_FCR_FTH_FULL);
 80068c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2207      	movs	r2, #7
 80068cc:	615a      	str	r2, [r3, #20]
    rccEnableSDIO(true);
 80068ce:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <sdc_lld_start+0x74>)
 80068d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068d6:	645a      	str	r2, [r3, #68]	; 0x44
 80068d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80068da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068de:	665a      	str	r2, [r3, #100]	; 0x64
 80068e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e2:	e7d6      	b.n	8006892 <sdc_lld_start+0x12>
    osalDbgAssert(sdcp->dma != NULL, "unable to allocate stream");
 80068e4:	4804      	ldr	r0, [pc, #16]	; (80068f8 <sdc_lld_start+0x78>)
 80068e6:	f000 ff0b 	bl	8007700 <chSysHalt>
 80068ea:	e7e7      	b.n	80068bc <sdc_lld_start+0x3c>
 80068ec:	08a25420 	.word	0x08a25420
 80068f0:	080196e8 	.word	0x080196e8
 80068f4:	40023800 	.word	0x40023800
 80068f8:	080196f0 	.word	0x080196f0
 80068fc:	f3af 8000 	nop.w

08006900 <sdc_lld_stop>:
 *
 * @param[in] sdcp      pointer to the @p SDCDriver object
 *
 * @notapi
 */
void sdc_lld_stop(SDCDriver *sdcp) {
 8006900:	b538      	push	{r3, r4, r5, lr}

  if (sdcp->state != BLK_STOP) {
 8006902:	7903      	ldrb	r3, [r0, #4]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d017      	beq.n	8006938 <sdc_lld_stop+0x38>
 8006908:	4604      	mov	r4, r0

    /* SDIO deactivation.*/
    sdcp->sdio->POWER  = 0;
 800690a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800690c:	2500      	movs	r5, #0
 800690e:	601d      	str	r5, [r3, #0]
    sdcp->sdio->CLKCR  = 0;
 8006910:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006912:	605d      	str	r5, [r3, #4]
    sdcp->sdio->DCTRL  = 0;
 8006914:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006916:	62dd      	str	r5, [r3, #44]	; 0x2c
    sdcp->sdio->DTIMER = 0;
 8006918:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800691a:	625d      	str	r5, [r3, #36]	; 0x24

    /* DMA stream released.*/
    dmaStreamFreeI(sdcp->dma);
 800691c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800691e:	f7fe fa17 	bl	8004d50 <dmaStreamFreeI>
    sdcp->dma = NULL;
 8006922:	6465      	str	r5, [r4, #68]	; 0x44

    /* Clock deactivation.*/
    rccDisableSDIO();
 8006924:	4b05      	ldr	r3, [pc, #20]	; (800693c <sdc_lld_stop+0x3c>)
 8006926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800692c:	645a      	str	r2, [r3, #68]	; 0x44
 800692e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006934:	665a      	str	r2, [r3, #100]	; 0x64
 8006936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  }
}
 8006938:	bd38      	pop	{r3, r4, r5, pc}
 800693a:	bf00      	nop
 800693c:	40023800 	.word	0x40023800

08006940 <sdc_lld_start_clk>:
 *
 * @param[in] sdcp      pointer to the @p SDCDriver object
 *
 * @notapi
 */
void sdc_lld_start_clk(SDCDriver *sdcp) {
 8006940:	b508      	push	{r3, lr}

  /* Initial clock setting: 400kHz, 1bit mode.*/
  sdcp->sdio->CLKCR  = STM32_SDIO_DIV_LS;
 8006942:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006944:	2278      	movs	r2, #120	; 0x78
 8006946:	605a      	str	r2, [r3, #4]
  sdcp->sdio->POWER |= SDIO_POWER_PWRCTRL_0 | SDIO_POWER_PWRCTRL_1;
 8006948:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800694a:	6813      	ldr	r3, [r2, #0]
 800694c:	f043 0303 	orr.w	r3, r3, #3
 8006950:	6013      	str	r3, [r2, #0]
  sdcp->sdio->CLKCR |= SDIO_CLKCR_CLKEN;
 8006952:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006954:	6853      	ldr	r3, [r2, #4]
 8006956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800695a:	6053      	str	r3, [r2, #4]
  chThdSleep(delay);
 800695c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006960:	2100      	movs	r1, #0
 8006962:	f002 f8d5 	bl	8008b10 <chThdSleep>

  /* Clock activation delay.*/
  osalThreadSleep(OSAL_MS2I(STM32_SDC_CLOCK_ACTIVATION_DELAY));
}
 8006966:	bd08      	pop	{r3, pc}
 8006968:	f3af 8000 	nop.w
 800696c:	f3af 8000 	nop.w

08006970 <sdc_lld_set_data_clk>:
  else
    sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & 0xFFFFFF00U) | STM32_SDIO_DIV_HS;
#else
  (void)clk;

  sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & 0xFFFFFF00U) | STM32_SDIO_DIV_HS;
 8006970:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006972:	6853      	ldr	r3, [r2, #4]
 8006974:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006978:	6053      	str	r3, [r2, #4]
#endif
}
 800697a:	4770      	bx	lr
 800697c:	f3af 8000 	nop.w

08006980 <sdc_lld_stop_clk>:
 *
 * @notapi
 */
void sdc_lld_stop_clk(SDCDriver *sdcp) {

  sdcp->sdio->CLKCR = 0;
 8006980:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006982:	2300      	movs	r3, #0
 8006984:	6053      	str	r3, [r2, #4]
  sdcp->sdio->POWER = 0;
 8006986:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006988:	6013      	str	r3, [r2, #0]
}
 800698a:	4770      	bx	lr
 800698c:	f3af 8000 	nop.w

08006990 <sdc_lld_set_bus_mode>:
 * @param[in] mode      bus mode
 *
 * @notapi
 */
void sdc_lld_set_bus_mode(SDCDriver *sdcp, sdcbusmode_t mode) {
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 8006990:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006992:	6853      	ldr	r3, [r2, #4]
 8006994:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800

  switch (mode) {
 8006998:	2901      	cmp	r1, #1
 800699a:	d005      	beq.n	80069a8 <sdc_lld_set_bus_mode+0x18>
 800699c:	b111      	cbz	r1, 80069a4 <sdc_lld_set_bus_mode+0x14>
 800699e:	2902      	cmp	r1, #2
 80069a0:	d006      	beq.n	80069b0 <sdc_lld_set_bus_mode+0x20>
 80069a2:	4770      	bx	lr
  case SDC_MODE_1BIT:
    sdcp->sdio->CLKCR = clk;
 80069a4:	6053      	str	r3, [r2, #4]
    break;
 80069a6:	4770      	bx	lr
  case SDC_MODE_4BIT:
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_0;
 80069a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069ac:	6053      	str	r3, [r2, #4]
    break;
 80069ae:	4770      	bx	lr
  case SDC_MODE_8BIT:
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_1;
 80069b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069b4:	6053      	str	r3, [r2, #4]
    break;
  }
}
 80069b6:	4770      	bx	lr
 80069b8:	f3af 8000 	nop.w
 80069bc:	f3af 8000 	nop.w

080069c0 <sdc_lld_send_cmd_none>:
 *
 * @notapi
 */
void sdc_lld_send_cmd_none(SDCDriver *sdcp, uint8_t cmd, uint32_t arg) {

  sdcp->sdio->ARG = arg;
 80069c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80069c2:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 80069c4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80069c6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80069ca:	60d9      	str	r1, [r3, #12]
  while ((sdcp->sdio->STA & SDIO_STA_CMDSENT) == 0)
 80069cc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80069ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80069d4:	d0fa      	beq.n	80069cc <sdc_lld_send_cmd_none+0xc>
    ;
  sdcp->sdio->ICR = SDIO_ICR_CMDSENTC;
 80069d6:	2280      	movs	r2, #128	; 0x80
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80069da:	4770      	bx	lr
 80069dc:	f3af 8000 	nop.w

080069e0 <sdc_lld_send_cmd_short>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_short(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                            uint32_t *resp) {
 80069e0:	b510      	push	{r4, lr}
  uint32_t sta;

  sdcp->sdio->ARG = arg;
 80069e2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80069e4:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80069e6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80069e8:	f441 6188 	orr.w	r1, r1, #1088	; 0x440
 80069ec:	60d1      	str	r1, [r2, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80069ee:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80069f0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80069f2:	f011 0445 	ands.w	r4, r1, #69	; 0x45
 80069f6:	d0fa      	beq.n	80069ee <sdc_lld_send_cmd_short+0xe>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80069f8:	6394      	str	r4, [r2, #56]	; 0x38
                           SDIO_STA_CCRCFAIL);
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0) {
 80069fa:	f011 0f04 	tst.w	r1, #4
 80069fe:	d104      	bne.n	8006a0a <sdc_lld_send_cmd_short+0x2a>
    sdc_lld_collect_errors(sdcp, sta);
    return HAL_FAILED;
  }
  *resp = sdcp->sdio->RESP1;
 8006a00:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006a02:	6952      	ldr	r2, [r2, #20]
 8006a04:	601a      	str	r2, [r3, #0]
  return HAL_SUCCESS;
 8006a06:	2000      	movs	r0, #0
}
 8006a08:	bd10      	pop	{r4, pc}
    sdc_lld_collect_errors(sdcp, sta);
 8006a0a:	f7ff fe91 	bl	8006730 <sdc_lld_collect_errors>
    return HAL_FAILED;
 8006a0e:	2001      	movs	r0, #1
 8006a10:	e7fa      	b.n	8006a08 <sdc_lld_send_cmd_short+0x28>
 8006a12:	bf00      	nop
 8006a14:	f3af 8000 	nop.w
 8006a18:	f3af 8000 	nop.w
 8006a1c:	f3af 8000 	nop.w

08006a20 <sdc_lld_send_cmd_short_crc>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_short_crc(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                                uint32_t *resp) {
 8006a20:	b510      	push	{r4, lr}
  uint32_t sta;

  sdcp->sdio->ARG = arg;
 8006a22:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006a24:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8006a26:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006a28:	f441 6188 	orr.w	r1, r1, #1088	; 0x440
 8006a2c:	60d1      	str	r1, [r2, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8006a2e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006a30:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006a32:	f011 0445 	ands.w	r4, r1, #69	; 0x45
 8006a36:	d0fa      	beq.n	8006a2e <sdc_lld_send_cmd_short_crc+0xe>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8006a38:	6394      	str	r4, [r2, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8006a3a:	f011 0f05 	tst.w	r1, #5
 8006a3e:	d104      	bne.n	8006a4a <sdc_lld_send_cmd_short_crc+0x2a>
    sdc_lld_collect_errors(sdcp, sta);
    return HAL_FAILED;
  }
  *resp = sdcp->sdio->RESP1;
 8006a40:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006a42:	6952      	ldr	r2, [r2, #20]
 8006a44:	601a      	str	r2, [r3, #0]
  return HAL_SUCCESS;
 8006a46:	2000      	movs	r0, #0
}
 8006a48:	bd10      	pop	{r4, pc}
    sdc_lld_collect_errors(sdcp, sta);
 8006a4a:	f7ff fe71 	bl	8006730 <sdc_lld_collect_errors>
    return HAL_FAILED;
 8006a4e:	2001      	movs	r0, #1
 8006a50:	e7fa      	b.n	8006a48 <sdc_lld_send_cmd_short_crc+0x28>
 8006a52:	bf00      	nop
 8006a54:	f3af 8000 	nop.w
 8006a58:	f3af 8000 	nop.w
 8006a5c:	f3af 8000 	nop.w

08006a60 <sdc_lld_wait_transaction_end>:
                                         uint32_t *resp) {
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	4604      	mov	r4, r0
 8006a64:	460d      	mov	r5, r1
 8006a66:	4616      	mov	r6, r2
 8006a68:	2320      	movs	r3, #32
 8006a6a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8006a6e:	f002 fad7 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8006a72:	f000 ffd5 	bl	8007a20 <_dbg_check_lock>
  if (sdcp->sdio->MASK != 0)
 8006a76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d12e      	bne.n	8006adc <sdc_lld_wait_transaction_end+0x7c>
  if ((sdcp->sdio->STA & SDIO_STA_DATAEND) == 0) {
 8006a7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006a86:	d032      	beq.n	8006aee <sdc_lld_wait_transaction_end+0x8e>
  while (sdcp->dma->stream->CR & STM32_DMA_CR_EN)
 8006a88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	6812      	ldr	r2, [r2, #0]
 8006a8e:	f012 0f01 	tst.w	r2, #1
 8006a92:	d1f9      	bne.n	8006a88 <sdc_lld_wait_transaction_end+0x28>
  dmaStreamClearInterrupt(sdcp->dma);
 8006a94:	7a59      	ldrb	r1, [r3, #9]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	233d      	movs	r3, #61	; 0x3d
 8006a9a:	408b      	lsls	r3, r1
 8006a9c:	6013      	str	r3, [r2, #0]
  sdcp->sdio->ICR = STM32_SDIO_ICR_ALL_FLAGS;
 8006a9e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006aa0:	4a21      	ldr	r2, [pc, #132]	; (8006b28 <sdc_lld_wait_transaction_end+0xc8>)
 8006aa2:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->DCTRL = 0;
 8006aa4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  _dbg_check_unlock();
 8006aaa:	f000 ffd1 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8006aae:	f002 fabf 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8006ab2:	4b1e      	ldr	r3, [pc, #120]	; (8006b2c <sdc_lld_wait_transaction_end+0xcc>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d004      	beq.n	8006ac4 <sdc_lld_wait_transaction_end+0x64>
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	6899      	ldr	r1, [r3, #8]
 8006abe:	6893      	ldr	r3, [r2, #8]
 8006ac0:	4299      	cmp	r1, r3
 8006ac2:	d32a      	bcc.n	8006b1a <sdc_lld_wait_transaction_end+0xba>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f383 8811 	msr	BASEPRI, r3
  if (n > 1)
 8006aca:	2d01      	cmp	r5, #1
 8006acc:	d929      	bls.n	8006b22 <sdc_lld_wait_transaction_end+0xc2>
    return sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8006ace:	4633      	mov	r3, r6
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	210c      	movs	r1, #12
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f7ff ffa3 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
}
 8006ada:	bd70      	pop	{r4, r5, r6, pc}
  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 8006adc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8006ae8:	f002 f90a 	bl	8008d00 <chThdSuspendTimeoutS>
 8006aec:	e7c7      	b.n	8006a7e <sdc_lld_wait_transaction_end+0x1e>
  _dbg_check_unlock();
 8006aee:	f000 ffaf 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8006af2:	f002 fa9d 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8006af6:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <sdc_lld_wait_transaction_end+0xcc>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d004      	beq.n	8006b08 <sdc_lld_wait_transaction_end+0xa8>
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	6899      	ldr	r1, [r3, #8]
 8006b02:	6893      	ldr	r3, [r2, #8]
 8006b04:	4299      	cmp	r1, r3
 8006b06:	d304      	bcc.n	8006b12 <sdc_lld_wait_transaction_end+0xb2>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f383 8811 	msr	BASEPRI, r3
    return HAL_FAILED;
 8006b0e:	2001      	movs	r0, #1
 8006b10:	e7e3      	b.n	8006ada <sdc_lld_wait_transaction_end+0x7a>
 8006b12:	4807      	ldr	r0, [pc, #28]	; (8006b30 <sdc_lld_wait_transaction_end+0xd0>)
 8006b14:	f000 fdf4 	bl	8007700 <chSysHalt>
 8006b18:	e7f6      	b.n	8006b08 <sdc_lld_wait_transaction_end+0xa8>
 8006b1a:	4805      	ldr	r0, [pc, #20]	; (8006b30 <sdc_lld_wait_transaction_end+0xd0>)
 8006b1c:	f000 fdf0 	bl	8007700 <chSysHalt>
 8006b20:	e7d0      	b.n	8006ac4 <sdc_lld_wait_transaction_end+0x64>
  return HAL_SUCCESS;
 8006b22:	2000      	movs	r0, #0
 8006b24:	e7d9      	b.n	8006ada <sdc_lld_wait_transaction_end+0x7a>
 8006b26:	bf00      	nop
 8006b28:	00c007ff 	.word	0x00c007ff
 8006b2c:	200050f8 	.word	0x200050f8
 8006b30:	08019700 	.word	0x08019700
 8006b34:	f3af 8000 	nop.w
 8006b38:	f3af 8000 	nop.w
 8006b3c:	f3af 8000 	nop.w

08006b40 <sdc_lld_error_cleanup>:
                                  uint32_t *resp) {
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	4604      	mov	r4, r0
 8006b44:	460d      	mov	r5, r1
 8006b46:	4616      	mov	r6, r2
  uint32_t sta = sdcp->sdio->STA;
 8006b48:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
  dmaStreamClearInterrupt(sdcp->dma);
 8006b4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b4e:	7a50      	ldrb	r0, [r2, #9]
 8006b50:	6852      	ldr	r2, [r2, #4]
 8006b52:	233d      	movs	r3, #61	; 0x3d
 8006b54:	4083      	lsls	r3, r0
 8006b56:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(sdcp->dma);
 8006b58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	6813      	ldr	r3, [r2, #0]
 8006b5e:	f023 031f 	bic.w	r3, r3, #31
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	6812      	ldr	r2, [r2, #0]
 8006b6a:	f012 0f01 	tst.w	r2, #1
 8006b6e:	d1f9      	bne.n	8006b64 <sdc_lld_error_cleanup+0x24>
 8006b70:	7a58      	ldrb	r0, [r3, #9]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	233d      	movs	r3, #61	; 0x3d
 8006b76:	4083      	lsls	r3, r0
 8006b78:	6013      	str	r3, [r2, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8006b7a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006b7c:	4a09      	ldr	r2, [pc, #36]	; (8006ba4 <sdc_lld_error_cleanup+0x64>)
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = 0;
 8006b80:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006b82:	2300      	movs	r3, #0
 8006b84:	63d3      	str	r3, [r2, #60]	; 0x3c
  sdcp->sdio->DCTRL = 0;
 8006b86:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006b88:	62d3      	str	r3, [r2, #44]	; 0x2c
  sdc_lld_collect_errors(sdcp, sta);
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f7ff fdd0 	bl	8006730 <sdc_lld_collect_errors>
  if (n > 1)
 8006b90:	2d01      	cmp	r5, #1
 8006b92:	d905      	bls.n	8006ba0 <sdc_lld_error_cleanup+0x60>
    sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8006b94:	4633      	mov	r3, r6
 8006b96:	2200      	movs	r2, #0
 8006b98:	210c      	movs	r1, #12
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f7ff ff40 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
}
 8006ba0:	bd70      	pop	{r4, r5, r6, pc}
 8006ba2:	bf00      	nop
 8006ba4:	00c007ff 	.word	0x00c007ff
 8006ba8:	f3af 8000 	nop.w
 8006bac:	f3af 8000 	nop.w

08006bb0 <sdc_lld_prepare_read>:
                                 uint32_t n, uint32_t *resp) {
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	461c      	mov	r4, r3
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8006bb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006bb6:	f013 0f10 	tst.w	r3, #16
 8006bba:	d100      	bne.n	8006bbe <sdc_lld_prepare_read+0xe>
    startblk *= MMCSD_BLOCK_SIZE;
 8006bbc:	0249      	lsls	r1, r1, #9
  if (n > 1) {
 8006bbe:	2a01      	cmp	r2, #1
 8006bc0:	d90d      	bls.n	8006bde <sdc_lld_prepare_read+0x2e>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_MULTIPLE_BLOCK,
 8006bc2:	4623      	mov	r3, r4
 8006bc4:	460a      	mov	r2, r1
 8006bc6:	2112      	movs	r1, #18
 8006bc8:	f7ff ff2a 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	b920      	cbnz	r0, 8006bda <sdc_lld_prepare_read+0x2a>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8006bd0:	6821      	ldr	r1, [r4, #0]
 8006bd2:	4a0a      	ldr	r2, [pc, #40]	; (8006bfc <sdc_lld_prepare_read+0x4c>)
 8006bd4:	400a      	ands	r2, r1
 8006bd6:	b102      	cbz	r2, 8006bda <sdc_lld_prepare_read+0x2a>
      return HAL_FAILED;
 8006bd8:	2301      	movs	r3, #1
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	bd10      	pop	{r4, pc}
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_SINGLE_BLOCK,
 8006bde:	4623      	mov	r3, r4
 8006be0:	460a      	mov	r2, r1
 8006be2:	2111      	movs	r1, #17
 8006be4:	f7ff ff1c 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d1f5      	bne.n	8006bda <sdc_lld_prepare_read+0x2a>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8006bee:	6821      	ldr	r1, [r4, #0]
 8006bf0:	4a02      	ldr	r2, [pc, #8]	; (8006bfc <sdc_lld_prepare_read+0x4c>)
 8006bf2:	400a      	ands	r2, r1
 8006bf4:	2a00      	cmp	r2, #0
 8006bf6:	d0f0      	beq.n	8006bda <sdc_lld_prepare_read+0x2a>
      return HAL_FAILED;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e7ee      	b.n	8006bda <sdc_lld_prepare_read+0x2a>
 8006bfc:	fdffe008 	.word	0xfdffe008

08006c00 <sdc_lld_prepare_write>:
                                  uint32_t n, uint32_t *resp) {
 8006c00:	b510      	push	{r4, lr}
 8006c02:	461c      	mov	r4, r3
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8006c04:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006c06:	f013 0f10 	tst.w	r3, #16
 8006c0a:	d100      	bne.n	8006c0e <sdc_lld_prepare_write+0xe>
    startblk *= MMCSD_BLOCK_SIZE;
 8006c0c:	0249      	lsls	r1, r1, #9
  if (n > 1) {
 8006c0e:	2a01      	cmp	r2, #1
 8006c10:	d90d      	bls.n	8006c2e <sdc_lld_prepare_write+0x2e>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK,
 8006c12:	4623      	mov	r3, r4
 8006c14:	460a      	mov	r2, r1
 8006c16:	2119      	movs	r1, #25
 8006c18:	f7ff ff02 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	b920      	cbnz	r0, 8006c2a <sdc_lld_prepare_write+0x2a>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8006c20:	6821      	ldr	r1, [r4, #0]
 8006c22:	4a0a      	ldr	r2, [pc, #40]	; (8006c4c <sdc_lld_prepare_write+0x4c>)
 8006c24:	400a      	ands	r2, r1
 8006c26:	b102      	cbz	r2, 8006c2a <sdc_lld_prepare_write+0x2a>
      return HAL_FAILED;
 8006c28:	2301      	movs	r3, #1
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	bd10      	pop	{r4, pc}
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_BLOCK,
 8006c2e:	4623      	mov	r3, r4
 8006c30:	460a      	mov	r2, r1
 8006c32:	2118      	movs	r1, #24
 8006c34:	f7ff fef4 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d1f5      	bne.n	8006c2a <sdc_lld_prepare_write+0x2a>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8006c3e:	6821      	ldr	r1, [r4, #0]
 8006c40:	4a02      	ldr	r2, [pc, #8]	; (8006c4c <sdc_lld_prepare_write+0x4c>)
 8006c42:	400a      	ands	r2, r1
 8006c44:	2a00      	cmp	r2, #0
 8006c46:	d0f0      	beq.n	8006c2a <sdc_lld_prepare_write+0x2a>
      return HAL_FAILED;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e7ee      	b.n	8006c2a <sdc_lld_prepare_write+0x2a>
 8006c4c:	fdffe008 	.word	0xfdffe008

08006c50 <sdc_lld_send_cmd_long_crc>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_long_crc(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                               uint32_t *resp) {
 8006c50:	b510      	push	{r4, lr}
  uint32_t sta;

  (void)sdcp;

  sdcp->sdio->ARG = arg;
 8006c52:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006c54:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 8006c56:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006c58:	f441 6198 	orr.w	r1, r1, #1216	; 0x4c0
 8006c5c:	60d1      	str	r1, [r2, #12]
                                    SDIO_CMD_CPSMEN;
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8006c5e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006c60:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006c62:	f011 0445 	ands.w	r4, r1, #69	; 0x45
 8006c66:	d0fa      	beq.n	8006c5e <sdc_lld_send_cmd_long_crc+0xe>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8006c68:	6394      	str	r4, [r2, #56]	; 0x38
                           SDIO_STA_CCRCFAIL);
  if ((sta & (STM32_SDIO_STA_ERROR_MASK)) != 0) {
 8006c6a:	f011 0f3f 	tst.w	r1, #63	; 0x3f
 8006c6e:	d10d      	bne.n	8006c8c <sdc_lld_send_cmd_long_crc+0x3c>
    sdc_lld_collect_errors(sdcp, sta);
    return HAL_FAILED;
  }
  /* Save bytes in reverse order because MSB in response comes first.*/
  *resp++ = sdcp->sdio->RESP4;
 8006c70:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006c72:	6a12      	ldr	r2, [r2, #32]
 8006c74:	601a      	str	r2, [r3, #0]
  *resp++ = sdcp->sdio->RESP3;
 8006c76:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006c78:	69d2      	ldr	r2, [r2, #28]
 8006c7a:	605a      	str	r2, [r3, #4]
  *resp++ = sdcp->sdio->RESP2;
 8006c7c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006c7e:	6992      	ldr	r2, [r2, #24]
 8006c80:	609a      	str	r2, [r3, #8]
  *resp   = sdcp->sdio->RESP1;
 8006c82:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006c84:	6952      	ldr	r2, [r2, #20]
 8006c86:	60da      	str	r2, [r3, #12]
  return HAL_SUCCESS;
 8006c88:	2000      	movs	r0, #0
}
 8006c8a:	bd10      	pop	{r4, pc}
    sdc_lld_collect_errors(sdcp, sta);
 8006c8c:	f7ff fd50 	bl	8006730 <sdc_lld_collect_errors>
    return HAL_FAILED;
 8006c90:	2001      	movs	r0, #1
 8006c92:	e7fa      	b.n	8006c8a <sdc_lld_send_cmd_long_crc+0x3a>
 8006c94:	f3af 8000 	nop.w
 8006c98:	f3af 8000 	nop.w
 8006c9c:	f3af 8000 	nop.w

08006ca0 <sdc_lld_read_special>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read_special(SDCDriver *sdcp, uint8_t *buf, size_t bytes,
                          uint8_t cmd, uint32_t arg) {
 8006ca0:	b530      	push	{r4, r5, lr}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	461d      	mov	r5, r3
  uint32_t resp[1];

  if(sdc_lld_prepare_read_bytes(sdcp, buf, bytes))
 8006ca8:	f7ff fd6a 	bl	8006780 <sdc_lld_prepare_read_bytes>
 8006cac:	b950      	cbnz	r0, 8006cc4 <sdc_lld_read_special+0x24>
    goto error;

  if (sdc_lld_send_cmd_short_crc(sdcp, cmd, arg, resp)
 8006cae:	ab01      	add	r3, sp, #4
 8006cb0:	9a06      	ldr	r2, [sp, #24]
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f7ff feb3 	bl	8006a20 <sdc_lld_send_cmd_short_crc>
 8006cba:	b918      	cbnz	r0, 8006cc4 <sdc_lld_read_special+0x24>
                                 || MMCSD_R1_ERROR(resp[0]))
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <sdc_lld_read_special+0x48>)
 8006cbe:	9a01      	ldr	r2, [sp, #4]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	b143      	cbz	r3, 8006cd6 <sdc_lld_read_special+0x36>
    goto error;

  return HAL_SUCCESS;

error:
  sdc_lld_error_cleanup(sdcp, 1, resp);
 8006cc4:	aa01      	add	r2, sp, #4
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f7ff ff39 	bl	8006b40 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8006cce:	2301      	movs	r3, #1
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	b003      	add	sp, #12
 8006cd4:	bd30      	pop	{r4, r5, pc}
  if (sdc_lld_wait_transaction_end(sdcp, 1, resp))
 8006cd6:	aa01      	add	r2, sp, #4
 8006cd8:	2101      	movs	r1, #1
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f7ff fec0 	bl	8006a60 <sdc_lld_wait_transaction_end>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d1ee      	bne.n	8006cc4 <sdc_lld_read_special+0x24>
 8006ce6:	e7f3      	b.n	8006cd0 <sdc_lld_read_special+0x30>
 8006ce8:	fdffe008 	.word	0xfdffe008
 8006cec:	f3af 8000 	nop.w

08006cf0 <sdc_lld_read_aligned>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
                          uint8_t *buf, uint32_t blocks) {
 8006cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	460e      	mov	r6, r1
 8006cf8:	4617      	mov	r7, r2
 8006cfa:	461d      	mov	r5, r3
  uint32_t resp[1];

  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8006cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d00:	d20a      	bcs.n	8006d18 <sdc_lld_read_aligned+0x28>

  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 8006d02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d04:	4a20      	ldr	r2, [pc, #128]	; (8006d88 <sdc_lld_read_aligned+0x98>)
 8006d06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Checks for errors and waits for the card to be ready for reading.*/
  if (_sdc_wait_for_transfer_state(sdcp))
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f7fb ffd9 	bl	8002cc0 <_sdc_wait_for_transfer_state>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	b130      	cbz	r0, 8006d20 <sdc_lld_read_aligned+0x30>
  return HAL_SUCCESS;

error:
  sdc_lld_error_cleanup(sdcp, blocks, resp);
  return HAL_FAILED;
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	b003      	add	sp, #12
 8006d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8006d18:	481c      	ldr	r0, [pc, #112]	; (8006d8c <sdc_lld_read_aligned+0x9c>)
 8006d1a:	f000 fcf1 	bl	8007700 <chSysHalt>
 8006d1e:	e7f0      	b.n	8006d02 <sdc_lld_read_aligned+0x12>
  dmaStreamSetMemory0(sdcp->dma, buf);
 8006d20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma,
 8006d26:	026a      	lsls	r2, r5, #9
 8006d28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	0891      	lsrs	r1, r2, #2
 8006d2e:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 8006d30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006d36:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 8006d38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d3a:	6819      	ldr	r1, [r3, #0]
 8006d3c:	680b      	ldr	r3, [r1, #0]
 8006d3e:	f043 0301 	orr.w	r3, r3, #1
 8006d42:	600b      	str	r3, [r1, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8006d44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d46:	4912      	ldr	r1, [pc, #72]	; (8006d90 <sdc_lld_read_aligned+0xa0>)
 8006d48:	6399      	str	r1, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8006d4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d4c:	f240 312a 	movw	r1, #810	; 0x32a
 8006d50:	63d9      	str	r1, [r3, #60]	; 0x3c
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8006d52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d54:	629a      	str	r2, [r3, #40]	; 0x28
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 8006d56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d58:	229b      	movs	r2, #155	; 0x9b
 8006d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (sdc_lld_prepare_read(sdcp, startblk, blocks, resp) == true)
 8006d5c:	ab01      	add	r3, sp, #4
 8006d5e:	462a      	mov	r2, r5
 8006d60:	4631      	mov	r1, r6
 8006d62:	4620      	mov	r0, r4
 8006d64:	f7ff ff24 	bl	8006bb0 <sdc_lld_prepare_read>
 8006d68:	b938      	cbnz	r0, 8006d7a <sdc_lld_read_aligned+0x8a>
  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 8006d6a:	aa01      	add	r2, sp, #4
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f7ff fe76 	bl	8006a60 <sdc_lld_wait_transaction_end>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d0cb      	beq.n	8006d12 <sdc_lld_read_aligned+0x22>
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8006d7a:	aa01      	add	r2, sp, #4
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7ff fede 	bl	8006b40 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e7c4      	b.n	8006d12 <sdc_lld_read_aligned+0x22>
 8006d88:	016e3600 	.word	0x016e3600
 8006d8c:	0801970c 	.word	0x0801970c
 8006d90:	00c007ff 	.word	0x00c007ff
 8006d94:	f3af 8000 	nop.w
 8006d98:	f3af 8000 	nop.w
 8006d9c:	f3af 8000 	nop.w

08006da0 <sdc_lld_write_aligned>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
                           const uint8_t *buf, uint32_t blocks) {
 8006da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da2:	b083      	sub	sp, #12
 8006da4:	4604      	mov	r4, r0
 8006da6:	460e      	mov	r6, r1
 8006da8:	4617      	mov	r7, r2
 8006daa:	461d      	mov	r5, r3
  uint32_t resp[1];

  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8006dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006db0:	d20a      	bcs.n	8006dc8 <sdc_lld_write_aligned+0x28>

  sdcp->sdio->DTIMER = STM32_SDC_WRITE_TIMEOUT;
 8006db2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006db4:	4a21      	ldr	r2, [pc, #132]	; (8006e3c <sdc_lld_write_aligned+0x9c>)
 8006db6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Checks for errors and waits for the card to be ready for writing.*/
  if (_sdc_wait_for_transfer_state(sdcp))
 8006db8:	4620      	mov	r0, r4
 8006dba:	f7fb ff81 	bl	8002cc0 <_sdc_wait_for_transfer_state>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	b130      	cbz	r0, 8006dd0 <sdc_lld_write_aligned+0x30>
  return HAL_SUCCESS;

error:
  sdc_lld_error_cleanup(sdcp, blocks, resp);
  return HAL_FAILED;
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	b003      	add	sp, #12
 8006dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8006dc8:	481d      	ldr	r0, [pc, #116]	; (8006e40 <sdc_lld_write_aligned+0xa0>)
 8006dca:	f000 fc99 	bl	8007700 <chSysHalt>
 8006dce:	e7f0      	b.n	8006db2 <sdc_lld_write_aligned+0x12>
  dmaStreamSetMemory0(sdcp->dma, buf);
 8006dd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma,
 8006dd6:	026a      	lsls	r2, r5, #9
 8006dd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	0891      	lsrs	r1, r2, #2
 8006dde:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 8006de0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006de2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006de4:	6809      	ldr	r1, [r1, #0]
 8006de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dea:	600b      	str	r3, [r1, #0]
  dmaStreamEnable(sdcp->dma);
 8006dec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006dee:	6819      	ldr	r1, [r3, #0]
 8006df0:	680b      	ldr	r3, [r1, #0]
 8006df2:	f043 0301 	orr.w	r3, r3, #1
 8006df6:	600b      	str	r3, [r1, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8006df8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006dfa:	4912      	ldr	r1, [pc, #72]	; (8006e44 <sdc_lld_write_aligned+0xa4>)
 8006dfc:	6399      	str	r1, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8006dfe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006e00:	f240 311a 	movw	r1, #794	; 0x31a
 8006e04:	63d9      	str	r1, [r3, #60]	; 0x3c
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8006e06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006e08:	629a      	str	r2, [r3, #40]	; 0x28
  if (sdc_lld_prepare_write(sdcp, startblk, blocks, resp) == true)
 8006e0a:	ab01      	add	r3, sp, #4
 8006e0c:	462a      	mov	r2, r5
 8006e0e:	4631      	mov	r1, r6
 8006e10:	4620      	mov	r0, r4
 8006e12:	f7ff fef5 	bl	8006c00 <sdc_lld_prepare_write>
 8006e16:	b950      	cbnz	r0, 8006e2e <sdc_lld_write_aligned+0x8e>
  sdcp->sdio->DCTRL = SDIO_DCTRL_DBLOCKSIZE_3 |
 8006e18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006e1a:	2299      	movs	r2, #153	; 0x99
 8006e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 8006e1e:	aa01      	add	r2, sp, #4
 8006e20:	4629      	mov	r1, r5
 8006e22:	4620      	mov	r0, r4
 8006e24:	f7ff fe1c 	bl	8006a60 <sdc_lld_wait_transaction_end>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	d0c9      	beq.n	8006dc2 <sdc_lld_write_aligned+0x22>
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8006e2e:	aa01      	add	r2, sp, #4
 8006e30:	4629      	mov	r1, r5
 8006e32:	4620      	mov	r0, r4
 8006e34:	f7ff fe84 	bl	8006b40 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e7c2      	b.n	8006dc2 <sdc_lld_write_aligned+0x22>
 8006e3c:	016e3600 	.word	0x016e3600
 8006e40:	08019724 	.word	0x08019724
 8006e44:	00c007ff 	.word	0x00c007ff
 8006e48:	f3af 8000 	nop.w
 8006e4c:	f3af 8000 	nop.w

08006e50 <sdc_lld_read>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read(SDCDriver *sdcp, uint32_t startblk,
                  uint8_t *buf, uint32_t blocks) {
 8006e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e54:	4680      	mov	r8, r0
 8006e56:	460d      	mov	r5, r1
 8006e58:	4614      	mov	r4, r2
 8006e5a:	461f      	mov	r7, r3

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
 8006e5c:	f012 0f03 	tst.w	r2, #3
 8006e60:	d019      	beq.n	8006e96 <sdc_lld_read+0x46>
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 8006e62:	2600      	movs	r6, #0
 8006e64:	42be      	cmp	r6, r7
 8006e66:	d212      	bcs.n	8006e8e <sdc_lld_read+0x3e>
      if (sdc_lld_read_aligned(sdcp, startblk, u.buf, 1))
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4a0d      	ldr	r2, [pc, #52]	; (8006ea0 <sdc_lld_read+0x50>)
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	4640      	mov	r0, r8
 8006e70:	f7ff ff3e 	bl	8006cf0 <sdc_lld_read_aligned>
 8006e74:	4603      	mov	r3, r0
 8006e76:	b958      	cbnz	r0, 8006e90 <sdc_lld_read+0x40>
        return HAL_FAILED;
      memcpy(buf, u.buf, MMCSD_BLOCK_SIZE);
 8006e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e7c:	4908      	ldr	r1, [pc, #32]	; (8006ea0 <sdc_lld_read+0x50>)
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f011 f86e 	bl	8017f60 <memcpy>
      buf += MMCSD_BLOCK_SIZE;
 8006e84:	f504 7400 	add.w	r4, r4, #512	; 0x200
      startblk++;
 8006e88:	3501      	adds	r5, #1
    for (i = 0; i < blocks; i++) {
 8006e8a:	3601      	adds	r6, #1
 8006e8c:	e7ea      	b.n	8006e64 <sdc_lld_read+0x14>
    }
    return HAL_SUCCESS;
 8006e8e:	2300      	movs	r3, #0
  }
#else /* !STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  osalDbgAssert((((unsigned)buf & 3) == 0), "unaligned buffer");
#endif /* !STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  return sdc_lld_read_aligned(sdcp, startblk, buf, blocks);
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return sdc_lld_read_aligned(sdcp, startblk, buf, blocks);
 8006e96:	f7ff ff2b 	bl	8006cf0 <sdc_lld_read_aligned>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	e7f8      	b.n	8006e90 <sdc_lld_read+0x40>
 8006e9e:	bf00      	nop
 8006ea0:	200020ac 	.word	0x200020ac
 8006ea4:	f3af 8000 	nop.w
 8006ea8:	f3af 8000 	nop.w
 8006eac:	f3af 8000 	nop.w

08006eb0 <sdc_lld_write>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_write(SDCDriver *sdcp, uint32_t startblk,
                   const uint8_t *buf, uint32_t blocks) {
 8006eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb4:	4681      	mov	r9, r0
 8006eb6:	460d      	mov	r5, r1
 8006eb8:	4614      	mov	r4, r2
 8006eba:	4698      	mov	r8, r3

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
 8006ebc:	f012 0f03 	tst.w	r2, #3
 8006ec0:	d01a      	beq.n	8006ef8 <sdc_lld_write+0x48>
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 8006ec2:	2600      	movs	r6, #0
 8006ec4:	4546      	cmp	r6, r8
 8006ec6:	d213      	bcs.n	8006ef0 <sdc_lld_write+0x40>
      memcpy(u.buf, buf, MMCSD_BLOCK_SIZE);
 8006ec8:	4f0d      	ldr	r7, [pc, #52]	; (8006f00 <sdc_lld_write+0x50>)
 8006eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f011 f845 	bl	8017f60 <memcpy>
      buf += MMCSD_BLOCK_SIZE;
 8006ed6:	f504 7400 	add.w	r4, r4, #512	; 0x200
      if (sdc_lld_write_aligned(sdcp, startblk, u.buf, 1))
 8006eda:	2301      	movs	r3, #1
 8006edc:	463a      	mov	r2, r7
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4648      	mov	r0, r9
 8006ee2:	f7ff ff5d 	bl	8006da0 <sdc_lld_write_aligned>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	b918      	cbnz	r0, 8006ef2 <sdc_lld_write+0x42>
        return HAL_FAILED;
      startblk++;
 8006eea:	3501      	adds	r5, #1
    for (i = 0; i < blocks; i++) {
 8006eec:	3601      	adds	r6, #1
 8006eee:	e7e9      	b.n	8006ec4 <sdc_lld_write+0x14>
    }
    return HAL_SUCCESS;
 8006ef0:	2300      	movs	r3, #0
  }
#else /* !STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  osalDbgAssert((((unsigned)buf & 3) == 0), "unaligned buffer");
#endif /* !STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  return sdc_lld_write_aligned(sdcp, startblk, buf, blocks);
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return sdc_lld_write_aligned(sdcp, startblk, buf, blocks);
 8006ef8:	f7ff ff52 	bl	8006da0 <sdc_lld_write_aligned>
 8006efc:	4603      	mov	r3, r0
 8006efe:	e7f8      	b.n	8006ef2 <sdc_lld_write+0x42>
 8006f00:	200020ac 	.word	0x200020ac
 8006f04:	f3af 8000 	nop.w
 8006f08:	f3af 8000 	nop.w
 8006f0c:	f3af 8000 	nop.w

08006f10 <sdc_lld_sync>:
bool sdc_lld_sync(SDCDriver *sdcp) {

  /* TODO: Implement.*/
  (void)sdcp;
  return HAL_SUCCESS;
}
 8006f10:	2000      	movs	r0, #0
 8006f12:	4770      	bx	lr
	...

08006f20 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8006f20:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8006f22:	f002 f855 	bl	8008fd0 <_stats_increase_irq>
 8006f26:	4813      	ldr	r0, [pc, #76]	; (8006f74 <VectorB0+0x54>)
 8006f28:	f000 feaa 	bl	8007c80 <_trace_isr_enter>
 8006f2c:	f000 fdd8 	bl	8007ae0 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8006f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f013 0f02 	tst.w	r3, #2
 8006f3a:	d107      	bne.n	8006f4c <VectorB0+0x2c>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8006f3c:	f000 fdf0 	bl	8007b20 <_dbg_check_leave_isr>
 8006f40:	480c      	ldr	r0, [pc, #48]	; (8006f74 <VectorB0+0x54>)
 8006f42:	f000 fec5 	bl	8007cd0 <_trace_isr_leave>
 8006f46:	f004 fe4b 	bl	800bbe0 <_port_irq_epilogue>
}
 8006f4a:	bd10      	pop	{r4, pc}
    STM32_ST_TIM->SR = 0U;
 8006f4c:	2400      	movs	r4, #0
 8006f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f52:	611c      	str	r4, [r3, #16]
 8006f54:	2320      	movs	r3, #32
 8006f56:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8006f5a:	f002 f871 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8006f5e:	f000 fd8f 	bl	8007a80 <_dbg_check_lock_from_isr>
  chSysTimerHandlerI();
 8006f62:	f000 fc2d 	bl	80077c0 <chSysTimerHandlerI>
  _dbg_check_unlock_from_isr();
 8006f66:	f000 fda3 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8006f6a:	f002 f871 	bl	8009050 <_stats_stop_measure_crit_isr>
 8006f6e:	f384 8811 	msr	BASEPRI, r4
 8006f72:	e7e3      	b.n	8006f3c <VectorB0+0x1c>
 8006f74:	0801973c 	.word	0x0801973c
 8006f78:	f3af 8000 	nop.w
 8006f7c:	f3af 8000 	nop.w

08006f80 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8006f80:	b508      	push	{r3, lr}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8006f82:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <st_lld_init+0x4c>)
 8006f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f86:	f042 0201 	orr.w	r2, r2, #1
 8006f8a:	641a      	str	r2, [r3, #64]	; 0x40
 8006f8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f8e:	f042 0201 	orr.w	r2, r2, #1
 8006f92:	661a      	str	r2, [r3, #96]	; 0x60
 8006f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8006f96:	4a0e      	ldr	r2, [pc, #56]	; (8006fd0 <st_lld_init+0x50>)
 8006f98:	6893      	ldr	r3, [r2, #8]
 8006f9a:	f043 0301 	orr.w	r3, r3, #1
 8006f9e:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8006fa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006fa4:	f240 3247 	movw	r2, #839	; 0x347
 8006fa8:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8006faa:	f04f 32ff 	mov.w	r2, #4294967295
 8006fae:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8006fb4:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8006fb6:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8006fb8:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8006fba:	2201      	movs	r2, #1
 8006fbc:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8006fbe:	601a      	str	r2, [r3, #0]

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8006fc0:	2108      	movs	r1, #8
 8006fc2:	201c      	movs	r0, #28
 8006fc4:	f7fd f854 	bl	8004070 <nvicEnableVector>
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8006fc8:	bd08      	pop	{r3, pc}
 8006fca:	bf00      	nop
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	e0042000 	.word	0xe0042000
	...

08006fe0 <gpt_lld_init>:
/**
 * @brief   Low level GPT driver initialization.
 *
 * @notapi
 */
void gpt_lld_init(void) {
 8006fe0:	b508      	push	{r3, lr}
  gptObjectInit(&GPTD4);
#endif

#if STM32_GPT_USE_TIM5
  /* Driver initialization.*/
  GPTD5.tim = STM32_TIM5;
 8006fe2:	4803      	ldr	r0, [pc, #12]	; (8006ff0 <gpt_lld_init+0x10>)
 8006fe4:	4b03      	ldr	r3, [pc, #12]	; (8006ff4 <gpt_lld_init+0x14>)
 8006fe6:	60c3      	str	r3, [r0, #12]
  gptObjectInit(&GPTD5);
 8006fe8:	f7fa fdda 	bl	8001ba0 <gptObjectInit>
#if STM32_GPT_USE_TIM22
  /* Driver initialization.*/
  GPTD22.tim = STM32_TIM22;
  gptObjectInit(&GPTD22);
#endif
}
 8006fec:	bd08      	pop	{r3, pc}
 8006fee:	bf00      	nop
 8006ff0:	200048d8 	.word	0x200048d8
 8006ff4:	40000c00 	.word	0x40000c00
 8006ff8:	f3af 8000 	nop.w
 8006ffc:	f3af 8000 	nop.w

08007000 <gpt_lld_start>:
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4604      	mov	r4, r0
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 8007004:	7803      	ldrb	r3, [r0, #0]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d020      	beq.n	800704c <gpt_lld_start+0x4c>
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 800700a:	68a2      	ldr	r2, [r4, #8]
 800700c:	6863      	ldr	r3, [r4, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	fbb2 f5f3 	udiv	r5, r2, r3
 8007014:	b2ad      	uxth	r5, r5
 8007016:	3d01      	subs	r5, #1
 8007018:	b2ad      	uxth	r5, r5
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
 800701a:	fb05 3303 	mla	r3, r5, r3, r3
 800701e:	429a      	cmp	r2, r3
 8007020:	d002      	beq.n	8007028 <gpt_lld_start+0x28>
 8007022:	4819      	ldr	r0, [pc, #100]	; (8007088 <gpt_lld_start+0x88>)
 8007024:	f000 fb6c 	bl	8007700 <chSysHalt>
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8007028:	68e2      	ldr	r2, [r4, #12]
 800702a:	2300      	movs	r3, #0
 800702c:	6013      	str	r3, [r2, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 800702e:	6861      	ldr	r1, [r4, #4]
 8007030:	68e2      	ldr	r2, [r4, #12]
 8007032:	6889      	ldr	r1, [r1, #8]
 8007034:	6051      	str	r1, [r2, #4]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 8007036:	68e2      	ldr	r2, [r4, #12]
 8007038:	6295      	str	r5, [r2, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 800703a:	68e2      	ldr	r2, [r4, #12]
 800703c:	6113      	str	r3, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 800703e:	6863      	ldr	r3, [r4, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	68e2      	ldr	r2, [r4, #12]
 8007044:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007048:	60d3      	str	r3, [r2, #12]
                    ~STM32_TIM_DIER_IRQ_MASK;
}
 800704a:	bd38      	pop	{r3, r4, r5, pc}
    if (&GPTD5 == gptp) {
 800704c:	4b0f      	ldr	r3, [pc, #60]	; (800708c <gpt_lld_start+0x8c>)
 800704e:	4298      	cmp	r0, r3
 8007050:	d1db      	bne.n	800700a <gpt_lld_start+0xa>
      rccEnableTIM5(true);
 8007052:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <gpt_lld_start+0x90>)
 8007054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007056:	f042 0208 	orr.w	r2, r2, #8
 800705a:	641a      	str	r2, [r3, #64]	; 0x40
 800705c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800705e:	f042 0208 	orr.w	r2, r2, #8
 8007062:	661a      	str	r2, [r3, #96]	; 0x60
 8007064:	6e1a      	ldr	r2, [r3, #96]	; 0x60
      rccResetTIM5();
 8007066:	6a1a      	ldr	r2, [r3, #32]
 8007068:	f042 0208 	orr.w	r2, r2, #8
 800706c:	621a      	str	r2, [r3, #32]
 800706e:	6a1a      	ldr	r2, [r3, #32]
 8007070:	f022 0208 	bic.w	r2, r2, #8
 8007074:	621a      	str	r2, [r3, #32]
 8007076:	6a1b      	ldr	r3, [r3, #32]
      nvicEnableVector(STM32_TIM5_NUMBER, STM32_GPT_TIM5_IRQ_PRIORITY);
 8007078:	2102      	movs	r1, #2
 800707a:	2032      	movs	r0, #50	; 0x32
 800707c:	f7fc fff8 	bl	8004070 <nvicEnableVector>
      gptp->clock = STM32_TIMCLK1;
 8007080:	4b04      	ldr	r3, [pc, #16]	; (8007094 <gpt_lld_start+0x94>)
 8007082:	60a3      	str	r3, [r4, #8]
 8007084:	e7c1      	b.n	800700a <gpt_lld_start+0xa>
 8007086:	bf00      	nop
 8007088:	08019748 	.word	0x08019748
 800708c:	200048d8 	.word	0x200048d8
 8007090:	40023800 	.word	0x40023800
 8007094:	0501bd00 	.word	0x0501bd00
 8007098:	f3af 8000 	nop.w
 800709c:	f3af 8000 	nop.w

080070a0 <gpt_lld_stop>:
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @notapi
 */
void gpt_lld_stop(GPTDriver *gptp) {
 80070a0:	b508      	push	{r3, lr}

  if (gptp->state == GPT_READY) {
 80070a2:	7803      	ldrb	r3, [r0, #0]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d000      	beq.n	80070aa <gpt_lld_stop+0xa>
#endif
      rccDisableTIM22();
    }
#endif
  }
}
 80070a8:	bd08      	pop	{r3, pc}
    gptp->tim->CR1  = 0;                        /* Timer disabled.          */
 80070aa:	68c2      	ldr	r2, [r0, #12]
 80070ac:	2300      	movs	r3, #0
 80070ae:	6013      	str	r3, [r2, #0]
    gptp->tim->DIER = 0;                        /* All IRQs disabled.       */
 80070b0:	68c2      	ldr	r2, [r0, #12]
 80070b2:	60d3      	str	r3, [r2, #12]
    gptp->tim->SR   = 0;                        /* Clear pending IRQs.      */
 80070b4:	68c2      	ldr	r2, [r0, #12]
 80070b6:	6113      	str	r3, [r2, #16]
    if (&GPTD5 == gptp) {
 80070b8:	4b08      	ldr	r3, [pc, #32]	; (80070dc <gpt_lld_stop+0x3c>)
 80070ba:	4298      	cmp	r0, r3
 80070bc:	d1f4      	bne.n	80070a8 <gpt_lld_stop+0x8>
      nvicDisableVector(STM32_TIM5_NUMBER);
 80070be:	2032      	movs	r0, #50	; 0x32
 80070c0:	f7fc ffee 	bl	80040a0 <nvicDisableVector>
      rccDisableTIM5();
 80070c4:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <gpt_lld_stop+0x40>)
 80070c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070c8:	f022 0208 	bic.w	r2, r2, #8
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40
 80070ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80070d0:	f022 0208 	bic.w	r2, r2, #8
 80070d4:	661a      	str	r2, [r3, #96]	; 0x60
 80070d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80070d8:	e7e6      	b.n	80070a8 <gpt_lld_stop+0x8>
 80070da:	bf00      	nop
 80070dc:	200048d8 	.word	0x200048d8
 80070e0:	40023800 	.word	0x40023800
 80070e4:	f3af 8000 	nop.w
 80070e8:	f3af 8000 	nop.w
 80070ec:	f3af 8000 	nop.w

080070f0 <gpt_lld_start_timer>:
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 80070f0:	68c3      	ldr	r3, [r0, #12]
 80070f2:	3901      	subs	r1, #1
 80070f4:	62d9      	str	r1, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
 80070f6:	68c3      	ldr	r3, [r0, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	615a      	str	r2, [r3, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
 80070fc:	68c2      	ldr	r2, [r0, #12]
 80070fe:	2300      	movs	r3, #0
 8007100:	6253      	str	r3, [r2, #36]	; 0x24

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is why the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8007102:	68c2      	ldr	r2, [r0, #12]
 8007104:	6113      	str	r3, [r2, #16]
  if (NULL != gptp->config->callback)
 8007106:	6843      	ldr	r3, [r0, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	b123      	cbz	r3, 8007116 <gpt_lld_start_timer+0x26>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
 800710c:	68c2      	ldr	r2, [r0, #12]
 800710e:	68d3      	ldr	r3, [r2, #12]
 8007110:	f043 0301 	orr.w	r3, r3, #1
 8007114:	60d3      	str	r3, [r2, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8007116:	68c3      	ldr	r3, [r0, #12]
 8007118:	2285      	movs	r2, #133	; 0x85
 800711a:	601a      	str	r2, [r3, #0]
}
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop

08007120 <gpt_lld_stop_timer>:
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 8007120:	68c2      	ldr	r2, [r0, #12]
 8007122:	2300      	movs	r3, #0
 8007124:	6013      	str	r3, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8007126:	68c2      	ldr	r2, [r0, #12]
 8007128:	6113      	str	r3, [r2, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 800712a:	68c2      	ldr	r2, [r0, #12]
 800712c:	68d3      	ldr	r3, [r2, #12]
 800712e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007132:	60d3      	str	r3, [r2, #12]
}
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	f3af 8000 	nop.w
 800713c:	f3af 8000 	nop.w

08007140 <gpt_lld_polled_delay>:
 *
 * @notapi
 */
void gpt_lld_polled_delay(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8007140:	68c3      	ldr	r3, [r0, #12]
 8007142:	3901      	subs	r1, #1
 8007144:	62d9      	str	r1, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
 8007146:	68c3      	ldr	r3, [r0, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	615a      	str	r2, [r3, #20]
  gptp->tim->SR  = 0;                           /* Clear pending IRQs.      */
 800714c:	68c3      	ldr	r3, [r0, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	611a      	str	r2, [r3, #16]
  gptp->tim->CR1 = STM32_TIM_CR1_OPM | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8007152:	68c3      	ldr	r3, [r0, #12]
 8007154:	220d      	movs	r2, #13
 8007156:	601a      	str	r2, [r3, #0]
  while (!(gptp->tim->SR & STM32_TIM_SR_UIF))
 8007158:	68c3      	ldr	r3, [r0, #12]
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	f012 0f01 	tst.w	r2, #1
 8007160:	d0fa      	beq.n	8007158 <gpt_lld_polled_delay+0x18>
    ;
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8007162:	2200      	movs	r2, #0
 8007164:	611a      	str	r2, [r3, #16]
}
 8007166:	4770      	bx	lr
 8007168:	f3af 8000 	nop.w
 800716c:	f3af 8000 	nop.w

08007170 <gpt_lld_serve_interrupt>:
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
  uint32_t sr;

  sr  = gptp->tim->SR;
 8007170:	68c2      	ldr	r2, [r0, #12]
 8007172:	6913      	ldr	r3, [r2, #16]
  sr &= gptp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8007174:	68d1      	ldr	r1, [r2, #12]
 8007176:	b2c9      	uxtb	r1, r1
 8007178:	400b      	ands	r3, r1
  gptp->tim->SR = ~sr;
 800717a:	43d9      	mvns	r1, r3
 800717c:	6111      	str	r1, [r2, #16]
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 800717e:	f013 0f01 	tst.w	r3, #1
 8007182:	d00f      	beq.n	80071a4 <gpt_lld_serve_interrupt+0x34>
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
 8007184:	b510      	push	{r4, lr}
 8007186:	4604      	mov	r4, r0
    _gpt_isr_invoke_cb(gptp);
 8007188:	7803      	ldrb	r3, [r0, #0]
 800718a:	2b04      	cmp	r3, #4
 800718c:	d005      	beq.n	800719a <gpt_lld_serve_interrupt+0x2a>
 800718e:	6863      	ldr	r3, [r4, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	b10b      	cbz	r3, 8007198 <gpt_lld_serve_interrupt+0x28>
 8007194:	4620      	mov	r0, r4
 8007196:	4798      	blx	r3
  }
}
 8007198:	bd10      	pop	{r4, pc}
    _gpt_isr_invoke_cb(gptp);
 800719a:	2302      	movs	r3, #2
 800719c:	7003      	strb	r3, [r0, #0]
 800719e:	f7ff ffbf 	bl	8007120 <gpt_lld_stop_timer>
 80071a2:	e7f4      	b.n	800718e <gpt_lld_serve_interrupt+0x1e>
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	f3af 8000 	nop.w
 80071ac:	f3af 8000 	nop.w

080071b0 <Vector108>:
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 80071b0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80071b2:	f001 ff0d 	bl	8008fd0 <_stats_increase_irq>
 80071b6:	4c08      	ldr	r4, [pc, #32]	; (80071d8 <Vector108+0x28>)
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 fd61 	bl	8007c80 <_trace_isr_enter>
 80071be:	f000 fc8f 	bl	8007ae0 <_dbg_check_enter_isr>
  gpt_lld_serve_interrupt(&GPTD5);
 80071c2:	4806      	ldr	r0, [pc, #24]	; (80071dc <Vector108+0x2c>)
 80071c4:	f7ff ffd4 	bl	8007170 <gpt_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 80071c8:	f000 fcaa 	bl	8007b20 <_dbg_check_leave_isr>
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 fd7f 	bl	8007cd0 <_trace_isr_leave>
 80071d2:	f004 fd05 	bl	800bbe0 <_port_irq_epilogue>
}
 80071d6:	bd10      	pop	{r4, pc}
 80071d8:	08019758 	.word	0x08019758
 80071dc:	200048d8 	.word	0x200048d8

080071e0 <usart_init>:
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 80071e0:	b410      	push	{r4}
  uint32_t fck;
  USART_TypeDef *u = sdp->usart;
 80071e2:	f8d0 3254 	ldr.w	r3, [r0, #596]	; 0x254

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80071e6:	4a1e      	ldr	r2, [pc, #120]	; (8007260 <usart_init+0x80>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d008      	beq.n	80071fe <usart_init+0x1e>
 80071ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d004      	beq.n	80071fe <usart_init+0x1e>
#else
  if (sdp->usart == USART1)
#endif
    fck = STM32_PCLK2 / config->speed;
  else
    fck = STM32_PCLK1 / config->speed;
 80071f4:	680c      	ldr	r4, [r1, #0]
 80071f6:	4a1b      	ldr	r2, [pc, #108]	; (8007264 <usart_init+0x84>)
 80071f8:	fbb2 f2f4 	udiv	r2, r2, r4
 80071fc:	e003      	b.n	8007206 <usart_init+0x26>
    fck = STM32_PCLK2 / config->speed;
 80071fe:	680c      	ldr	r4, [r1, #0]
 8007200:	4a19      	ldr	r2, [pc, #100]	; (8007268 <usart_init+0x88>)
 8007202:	fbb2 f2f4 	udiv	r2, r2, r4

  /* Correcting USARTDIV when oversampling by 8 instead of 16.
     Fraction is still 4 bits wide, but only lower 3 bits used.
     Mantissa is doubled, but Fraction is left the same.*/
#if defined(USART_CR1_OVER8)
  if (config->cr1 & USART_CR1_OVER8)
 8007206:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800720a:	2c00      	cmp	r4, #0
 800720c:	db1d      	blt.n	800724a <usart_init+0x6a>
    fck = ((fck & ~7) * 2) | (fck & 7);
#endif
  u->BRR = fck;
 800720e:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8007210:	88ca      	ldrh	r2, [r1, #6]
 8007212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007216:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8007218:	890a      	ldrh	r2, [r1, #8]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8007220:	888a      	ldrh	r2, [r1, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8007222:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
 8007226:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800722a:	60da      	str	r2, [r3, #12]
                         USART_CR1_RE;
  u->SR = 0;
 800722c:	2200      	movs	r2, #0
 800722e:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8007230:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8007232:	685b      	ldr	r3, [r3, #4]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8007234:	888b      	ldrh	r3, [r1, #4]
 8007236:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 800723a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800723e:	d00b      	beq.n	8007258 <usart_init+0x78>
    sdp->rxmask = 0x7F;
  }
  else {
    sdp->rxmask = 0xFF;
 8007240:	23ff      	movs	r3, #255	; 0xff
 8007242:	f880 3258 	strb.w	r3, [r0, #600]	; 0x258
  }
}
 8007246:	bc10      	pop	{r4}
 8007248:	4770      	bx	lr
    fck = ((fck & ~7) * 2) | (fck & 7);
 800724a:	f022 0407 	bic.w	r4, r2, #7
 800724e:	f002 0207 	and.w	r2, r2, #7
 8007252:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8007256:	e7da      	b.n	800720e <usart_init+0x2e>
    sdp->rxmask = 0x7F;
 8007258:	237f      	movs	r3, #127	; 0x7f
 800725a:	f880 3258 	strb.w	r3, [r0, #600]	; 0x258
 800725e:	e7f2      	b.n	8007246 <usart_init+0x66>
 8007260:	40011000 	.word	0x40011000
 8007264:	0280de80 	.word	0x0280de80
 8007268:	0501bd00 	.word	0x0501bd00
 800726c:	f3af 8000 	nop.w

08007270 <usart_deinit>:
 *
 * @param[in] u         pointer to an USART I/O block
 */
static void usart_deinit(USART_TypeDef *u) {

  u->CR1 = 0;
 8007270:	2300      	movs	r3, #0
 8007272:	60c3      	str	r3, [r0, #12]
  u->CR2 = 0;
 8007274:	6103      	str	r3, [r0, #16]
  u->CR3 = 0;
 8007276:	6143      	str	r3, [r0, #20]
}
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	f3af 8000 	nop.w

08007280 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8007280:	4a02      	ldr	r2, [pc, #8]	; (800728c <notify2+0xc>)
 8007282:	68d3      	ldr	r3, [r2, #12]
 8007284:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007288:	60d3      	str	r3, [r2, #12]
}
 800728a:	4770      	bx	lr
 800728c:	40004400 	.word	0x40004400

08007290 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8007290:	4a02      	ldr	r2, [pc, #8]	; (800729c <notify3+0xc>)
 8007292:	68d3      	ldr	r3, [r2, #12]
 8007294:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007298:	60d3      	str	r3, [r2, #12]
}
 800729a:	4770      	bx	lr
 800729c:	40004800 	.word	0x40004800

080072a0 <notify6>:

#if STM32_SERIAL_USE_USART6 || defined(__DOXYGEN__)
static void notify6(io_queue_t *qp) {

  (void)qp;
  USART6->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80072a0:	4a02      	ldr	r2, [pc, #8]	; (80072ac <notify6+0xc>)
 80072a2:	68d3      	ldr	r3, [r2, #12]
 80072a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072a8:	60d3      	str	r3, [r2, #12]
}
 80072aa:	4770      	bx	lr
 80072ac:	40011400 	.word	0x40011400

080072b0 <set_error>:
static void set_error(SerialDriver *sdp, uint16_t sr) {
 80072b0:	b508      	push	{r3, lr}
  if (sr & USART_SR_ORE)
 80072b2:	f011 0f08 	tst.w	r1, #8
 80072b6:	d114      	bne.n	80072e2 <set_error+0x32>
  eventflags_t sts = 0;
 80072b8:	2300      	movs	r3, #0
  if (sr & USART_SR_PE)
 80072ba:	f011 0f01 	tst.w	r1, #1
 80072be:	d001      	beq.n	80072c4 <set_error+0x14>
    sts |= SD_PARITY_ERROR;
 80072c0:	f043 0320 	orr.w	r3, r3, #32
  if (sr & USART_SR_FE)
 80072c4:	f011 0f02 	tst.w	r1, #2
 80072c8:	d001      	beq.n	80072ce <set_error+0x1e>
    sts |= SD_FRAMING_ERROR;
 80072ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  if (sr & USART_SR_NE)
 80072ce:	f011 0f04 	tst.w	r1, #4
 80072d2:	d001      	beq.n	80072d8 <set_error+0x28>
    sts |= SD_NOISE_ERROR;
 80072d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 80072d8:	4619      	mov	r1, r3
 80072da:	3004      	adds	r0, #4
 80072dc:	f002 fe30 	bl	8009f40 <chEvtBroadcastFlagsI>
}
 80072e0:	bd08      	pop	{r3, pc}
    sts |= SD_OVERRUN_ERROR;
 80072e2:	2380      	movs	r3, #128	; 0x80
 80072e4:	e7e9      	b.n	80072ba <set_error+0xa>
 80072e6:	bf00      	nop
 80072e8:	f3af 8000 	nop.w
 80072ec:	f3af 8000 	nop.w

080072f0 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	4606      	mov	r6, r0
  USART_TypeDef *u = sdp->usart;
 80072f4:	f8d0 5254 	ldr.w	r5, [r0, #596]	; 0x254
  uint16_t cr1 = u->CR1;
 80072f8:	68ef      	ldr	r7, [r5, #12]
  uint16_t sr = u->SR;
 80072fa:	682b      	ldr	r3, [r5, #0]
 80072fc:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80072fe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007302:	d107      	bne.n	8007314 <serve_interrupt+0x24>
 8007304:	2320      	movs	r3, #32
 8007306:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800730a:	f001 fe99 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800730e:	f000 fbb7 	bl	8007a80 <_dbg_check_lock_from_isr>
 8007312:	e01d      	b.n	8007350 <serve_interrupt+0x60>
 8007314:	2320      	movs	r3, #32
 8007316:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800731a:	f001 fe91 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800731e:	f000 fbaf 	bl	8007a80 <_dbg_check_lock_from_isr>
 8007322:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007326:	1d30      	adds	r0, r6, #4
 8007328:	f002 fe0a 	bl	8009f40 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 800732c:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8007330:	602b      	str	r3, [r5, #0]
  _dbg_check_unlock_from_isr();
 8007332:	f000 fbbd 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8007336:	f001 fe8b 	bl	8009050 <_stats_stop_measure_crit_isr>
 800733a:	2300      	movs	r3, #0
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	e7e0      	b.n	8007304 <serve_interrupt+0x14>
      set_error(sdp, sr);
 8007342:	4621      	mov	r1, r4
 8007344:	4630      	mov	r0, r6
 8007346:	f7ff ffb3 	bl	80072b0 <set_error>
 800734a:	e007      	b.n	800735c <serve_interrupt+0x6c>
    sr = u->SR;
 800734c:	682c      	ldr	r4, [r5, #0]
 800734e:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8007350:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8007354:	d00d      	beq.n	8007372 <serve_interrupt+0x82>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8007356:	f014 0f0f 	tst.w	r4, #15
 800735a:	d1f2      	bne.n	8007342 <serve_interrupt+0x52>
    b = (uint8_t)u->DR & sdp->rxmask;
 800735c:	6869      	ldr	r1, [r5, #4]
 800735e:	f896 3258 	ldrb.w	r3, [r6, #600]	; 0x258
 8007362:	4019      	ands	r1, r3
    if (sr & USART_SR_RXNE)
 8007364:	f014 0f20 	tst.w	r4, #32
 8007368:	d0f0      	beq.n	800734c <serve_interrupt+0x5c>
      sdIncomingDataI(sdp, b);
 800736a:	4630      	mov	r0, r6
 800736c:	f7fb ff78 	bl	8003260 <sdIncomingDataI>
 8007370:	e7ec      	b.n	800734c <serve_interrupt+0x5c>
  _dbg_check_unlock_from_isr();
 8007372:	f000 fb9d 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8007376:	f001 fe6b 	bl	8009050 <_stats_stop_measure_crit_isr>
 800737a:	2300      	movs	r3, #0
 800737c:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8007380:	f017 0f80 	tst.w	r7, #128	; 0x80
 8007384:	d002      	beq.n	800738c <serve_interrupt+0x9c>
 8007386:	f014 0f80 	tst.w	r4, #128	; 0x80
 800738a:	d106      	bne.n	800739a <serve_interrupt+0xaa>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800738c:	f017 0f40 	tst.w	r7, #64	; 0x40
 8007390:	d002      	beq.n	8007398 <serve_interrupt+0xa8>
 8007392:	f014 0f40 	tst.w	r4, #64	; 0x40
 8007396:	d11f      	bne.n	80073d8 <serve_interrupt+0xe8>
}
 8007398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800739a:	2320      	movs	r3, #32
 800739c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80073a0:	f001 fe4e 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80073a4:	f000 fb6c 	bl	8007a80 <_dbg_check_lock_from_isr>
    b = oqGetI(&sdp->oqueue);
 80073a8:	f106 0030 	add.w	r0, r6, #48	; 0x30
 80073ac:	f7f9 ffe8 	bl	8001380 <oqGetI>
    if (b < MSG_OK) {
 80073b0:	2800      	cmp	r0, #0
 80073b2:	db08      	blt.n	80073c6 <serve_interrupt+0xd6>
      u->DR = b;
 80073b4:	6068      	str	r0, [r5, #4]
  _dbg_check_unlock_from_isr();
 80073b6:	f000 fb7b 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80073ba:	f001 fe49 	bl	8009050 <_stats_stop_measure_crit_isr>
 80073be:	2300      	movs	r3, #0
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	e7e2      	b.n	800738c <serve_interrupt+0x9c>
 80073c6:	2108      	movs	r1, #8
 80073c8:	1d30      	adds	r0, r6, #4
 80073ca:	f002 fdb9 	bl	8009f40 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80073ce:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80073d2:	403b      	ands	r3, r7
 80073d4:	60eb      	str	r3, [r5, #12]
 80073d6:	e7ee      	b.n	80073b6 <serve_interrupt+0xc6>
 80073d8:	2320      	movs	r3, #32
 80073da:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80073de:	f001 fe2f 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80073e2:	f000 fb4d 	bl	8007a80 <_dbg_check_lock_from_isr>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80073e6:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80073e8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d009      	beq.n	8007402 <serve_interrupt+0x112>
 80073ee:	2300      	movs	r3, #0
 80073f0:	b963      	cbnz	r3, 800740c <serve_interrupt+0x11c>
  _dbg_check_unlock_from_isr();
 80073f2:	f000 fb5d 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80073f6:	f001 fe2b 	bl	8009050 <_stats_stop_measure_crit_isr>
 80073fa:	2300      	movs	r3, #0
 80073fc:	f383 8811 	msr	BASEPRI, r3
}
 8007400:	e7ca      	b.n	8007398 <serve_interrupt+0xa8>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8007402:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007404:	2b00      	cmp	r3, #0
 8007406:	d0f3      	beq.n	80073f0 <serve_interrupt+0x100>
 8007408:	2301      	movs	r3, #1
 800740a:	e7f1      	b.n	80073f0 <serve_interrupt+0x100>
 800740c:	2110      	movs	r1, #16
 800740e:	1d30      	adds	r0, r6, #4
 8007410:	f002 fd96 	bl	8009f40 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8007414:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 8007418:	043f      	lsls	r7, r7, #16
 800741a:	0c3f      	lsrs	r7, r7, #16
 800741c:	60ef      	str	r7, [r5, #12]
 800741e:	e7e8      	b.n	80073f2 <serve_interrupt+0x102>

08007420 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8007420:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8007422:	f001 fdd5 	bl	8008fd0 <_stats_increase_irq>
 8007426:	4c08      	ldr	r4, [pc, #32]	; (8007448 <VectorD8+0x28>)
 8007428:	4620      	mov	r0, r4
 800742a:	f000 fc29 	bl	8007c80 <_trace_isr_enter>
 800742e:	f000 fb57 	bl	8007ae0 <_dbg_check_enter_isr>

  serve_interrupt(&SD2);
 8007432:	4806      	ldr	r0, [pc, #24]	; (800744c <VectorD8+0x2c>)
 8007434:	f7ff ff5c 	bl	80072f0 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8007438:	f000 fb72 	bl	8007b20 <_dbg_check_leave_isr>
 800743c:	4620      	mov	r0, r4
 800743e:	f000 fc47 	bl	8007cd0 <_trace_isr_leave>
 8007442:	f004 fbcd 	bl	800bbe0 <_port_irq_epilogue>
}
 8007446:	bd10      	pop	{r4, pc}
 8007448:	08019764 	.word	0x08019764
 800744c:	200048e8 	.word	0x200048e8

08007450 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8007450:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8007452:	f001 fdbd 	bl	8008fd0 <_stats_increase_irq>
 8007456:	4c08      	ldr	r4, [pc, #32]	; (8007478 <VectorDC+0x28>)
 8007458:	4620      	mov	r0, r4
 800745a:	f000 fc11 	bl	8007c80 <_trace_isr_enter>
 800745e:	f000 fb3f 	bl	8007ae0 <_dbg_check_enter_isr>

  serve_interrupt(&SD3);
 8007462:	4806      	ldr	r0, [pc, #24]	; (800747c <VectorDC+0x2c>)
 8007464:	f7ff ff44 	bl	80072f0 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8007468:	f000 fb5a 	bl	8007b20 <_dbg_check_leave_isr>
 800746c:	4620      	mov	r0, r4
 800746e:	f000 fc2f 	bl	8007cd0 <_trace_isr_leave>
 8007472:	f004 fbb5 	bl	800bbe0 <_port_irq_epilogue>
}
 8007476:	bd10      	pop	{r4, pc}
 8007478:	08019770 	.word	0x08019770
 800747c:	20004b44 	.word	0x20004b44

08007480 <Vector15C>:
/**
 * @brief   USART6 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8007480:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8007482:	f001 fda5 	bl	8008fd0 <_stats_increase_irq>
 8007486:	4c08      	ldr	r4, [pc, #32]	; (80074a8 <Vector15C+0x28>)
 8007488:	4620      	mov	r0, r4
 800748a:	f000 fbf9 	bl	8007c80 <_trace_isr_enter>
 800748e:	f000 fb27 	bl	8007ae0 <_dbg_check_enter_isr>

  serve_interrupt(&SD6);
 8007492:	4806      	ldr	r0, [pc, #24]	; (80074ac <Vector15C+0x2c>)
 8007494:	f7ff ff2c 	bl	80072f0 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8007498:	f000 fb42 	bl	8007b20 <_dbg_check_leave_isr>
 800749c:	4620      	mov	r0, r4
 800749e:	f000 fc17 	bl	8007cd0 <_trace_isr_leave>
 80074a2:	f004 fb9d 	bl	800bbe0 <_port_irq_epilogue>
}
 80074a6:	bd10      	pop	{r4, pc}
 80074a8:	0801977c 	.word	0x0801977c
 80074ac:	20004da0 	.word	0x20004da0

080074b0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 80074b0:	b510      	push	{r4, lr}
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 80074b2:	4c0e      	ldr	r4, [pc, #56]	; (80074ec <sd_lld_init+0x3c>)
 80074b4:	4a0e      	ldr	r2, [pc, #56]	; (80074f0 <sd_lld_init+0x40>)
 80074b6:	2100      	movs	r1, #0
 80074b8:	4620      	mov	r0, r4
 80074ba:	f7fb fe31 	bl	8003120 <sdObjectInit>
  SD2.usart = USART2;
 80074be:	4b0d      	ldr	r3, [pc, #52]	; (80074f4 <sd_lld_init+0x44>)
 80074c0:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 80074c4:	4c0c      	ldr	r4, [pc, #48]	; (80074f8 <sd_lld_init+0x48>)
 80074c6:	4a0d      	ldr	r2, [pc, #52]	; (80074fc <sd_lld_init+0x4c>)
 80074c8:	2100      	movs	r1, #0
 80074ca:	4620      	mov	r0, r4
 80074cc:	f7fb fe28 	bl	8003120 <sdObjectInit>
  SD3.usart = USART3;
 80074d0:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <sd_lld_init+0x50>)
 80074d2:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
  sdObjectInit(&SD5, NULL, notify5);
  SD5.usart = UART5;
#endif

#if STM32_SERIAL_USE_USART6
  sdObjectInit(&SD6, NULL, notify6);
 80074d6:	4c0b      	ldr	r4, [pc, #44]	; (8007504 <sd_lld_init+0x54>)
 80074d8:	4a0b      	ldr	r2, [pc, #44]	; (8007508 <sd_lld_init+0x58>)
 80074da:	2100      	movs	r1, #0
 80074dc:	4620      	mov	r0, r4
 80074de:	f7fb fe1f 	bl	8003120 <sdObjectInit>
  SD6.usart = USART6;
 80074e2:	4b0a      	ldr	r3, [pc, #40]	; (800750c <sd_lld_init+0x5c>)
 80074e4:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254

#if STM32_SERIAL_USE_UART8
  sdObjectInit(&SD8, NULL, notify8);
  SD8.usart = UART8;
#endif
}
 80074e8:	bd10      	pop	{r4, pc}
 80074ea:	bf00      	nop
 80074ec:	200048e8 	.word	0x200048e8
 80074f0:	08007281 	.word	0x08007281
 80074f4:	40004400 	.word	0x40004400
 80074f8:	20004b44 	.word	0x20004b44
 80074fc:	08007291 	.word	0x08007291
 8007500:	40004800 	.word	0x40004800
 8007504:	20004da0 	.word	0x20004da0
 8007508:	080072a1 	.word	0x080072a1
 800750c:	40011400 	.word	0x40011400

08007510 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4604      	mov	r4, r0

  if (config == NULL)
 8007514:	460d      	mov	r5, r1
 8007516:	b139      	cbz	r1, 8007528 <sd_lld_start+0x18>
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8007518:	7a23      	ldrb	r3, [r4, #8]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d006      	beq.n	800752c <sd_lld_start+0x1c>
      rccEnableUART8(true);
      nvicEnableVector(STM32_UART8_NUMBER, STM32_SERIAL_UART8_PRIORITY);
    }
#endif
  }
  usart_init(sdp, config);
 800751e:	4629      	mov	r1, r5
 8007520:	4620      	mov	r0, r4
 8007522:	f7ff fe5d 	bl	80071e0 <usart_init>
}
 8007526:	bd38      	pop	{r3, r4, r5, pc}
    config = &default_config;
 8007528:	4d1b      	ldr	r5, [pc, #108]	; (8007598 <sd_lld_start+0x88>)
 800752a:	e7f5      	b.n	8007518 <sd_lld_start+0x8>
    if (&SD2 == sdp) {
 800752c:	4b1b      	ldr	r3, [pc, #108]	; (800759c <sd_lld_start+0x8c>)
 800752e:	429c      	cmp	r4, r3
 8007530:	d014      	beq.n	800755c <sd_lld_start+0x4c>
    if (&SD3 == sdp) {
 8007532:	4b1b      	ldr	r3, [pc, #108]	; (80075a0 <sd_lld_start+0x90>)
 8007534:	429c      	cmp	r4, r3
 8007536:	d020      	beq.n	800757a <sd_lld_start+0x6a>
    if (&SD6 == sdp) {
 8007538:	4b1a      	ldr	r3, [pc, #104]	; (80075a4 <sd_lld_start+0x94>)
 800753a:	429c      	cmp	r4, r3
 800753c:	d1ef      	bne.n	800751e <sd_lld_start+0xe>
      rccEnableUSART6(true);
 800753e:	4b1a      	ldr	r3, [pc, #104]	; (80075a8 <sd_lld_start+0x98>)
 8007540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007542:	f042 0220 	orr.w	r2, r2, #32
 8007546:	645a      	str	r2, [r3, #68]	; 0x44
 8007548:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800754a:	f042 0220 	orr.w	r2, r2, #32
 800754e:	665a      	str	r2, [r3, #100]	; 0x64
 8007550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART6_NUMBER, STM32_SERIAL_USART6_PRIORITY);
 8007552:	210c      	movs	r1, #12
 8007554:	2047      	movs	r0, #71	; 0x47
 8007556:	f7fc fd8b 	bl	8004070 <nvicEnableVector>
 800755a:	e7e0      	b.n	800751e <sd_lld_start+0xe>
      rccEnableUSART2(true);
 800755c:	4b12      	ldr	r3, [pc, #72]	; (80075a8 <sd_lld_start+0x98>)
 800755e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007560:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007564:	641a      	str	r2, [r3, #64]	; 0x40
 8007566:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007568:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800756c:	661a      	str	r2, [r3, #96]	; 0x60
 800756e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
 8007570:	2103      	movs	r1, #3
 8007572:	2026      	movs	r0, #38	; 0x26
 8007574:	f7fc fd7c 	bl	8004070 <nvicEnableVector>
 8007578:	e7db      	b.n	8007532 <sd_lld_start+0x22>
      rccEnableUSART3(true);
 800757a:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <sd_lld_start+0x98>)
 800757c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800757e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007582:	641a      	str	r2, [r3, #64]	; 0x40
 8007584:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007586:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800758a:	661a      	str	r2, [r3, #96]	; 0x60
 800758c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
 800758e:	2103      	movs	r1, #3
 8007590:	2027      	movs	r0, #39	; 0x27
 8007592:	f7fc fd6d 	bl	8004070 <nvicEnableVector>
 8007596:	e7cf      	b.n	8007538 <sd_lld_start+0x28>
 8007598:	08019788 	.word	0x08019788
 800759c:	200048e8 	.word	0x200048e8
 80075a0:	20004b44 	.word	0x20004b44
 80075a4:	20004da0 	.word	0x20004da0
 80075a8:	40023800 	.word	0x40023800
 80075ac:	f3af 8000 	nop.w

080075b0 <sd_lld_stop>:
 *
 * @notapi
 */
void sd_lld_stop(SerialDriver *sdp) {

  if (sdp->state == SD_READY) {
 80075b0:	7a03      	ldrb	r3, [r0, #8]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d000      	beq.n	80075b8 <sd_lld_stop+0x8>
 80075b6:	4770      	bx	lr
void sd_lld_stop(SerialDriver *sdp) {
 80075b8:	b510      	push	{r4, lr}
 80075ba:	4604      	mov	r4, r0
    usart_deinit(sdp->usart);
 80075bc:	f8d0 0254 	ldr.w	r0, [r0, #596]	; 0x254
 80075c0:	f7ff fe56 	bl	8007270 <usart_deinit>
      nvicDisableVector(STM32_USART1_NUMBER);
      return;
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 80075c4:	4b19      	ldr	r3, [pc, #100]	; (800762c <sd_lld_stop+0x7c>)
 80075c6:	429c      	cmp	r4, r3
 80075c8:	d006      	beq.n	80075d8 <sd_lld_stop+0x28>
      nvicDisableVector(STM32_USART2_NUMBER);
      return;
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
 80075ca:	4b19      	ldr	r3, [pc, #100]	; (8007630 <sd_lld_stop+0x80>)
 80075cc:	429c      	cmp	r4, r3
 80075ce:	d011      	beq.n	80075f4 <sd_lld_stop+0x44>
      nvicDisableVector(STM32_UART5_NUMBER);
      return;
    }
#endif
#if STM32_SERIAL_USE_USART6
    if (&SD6 == sdp) {
 80075d0:	4b18      	ldr	r3, [pc, #96]	; (8007634 <sd_lld_stop+0x84>)
 80075d2:	429c      	cmp	r4, r3
 80075d4:	d01c      	beq.n	8007610 <sd_lld_stop+0x60>
      nvicDisableVector(STM32_UART8_NUMBER);
      return;
    }
#endif
  }
}
 80075d6:	bd10      	pop	{r4, pc}
      rccDisableUSART2();
 80075d8:	4b17      	ldr	r3, [pc, #92]	; (8007638 <sd_lld_stop+0x88>)
 80075da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075dc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80075e0:	641a      	str	r2, [r3, #64]	; 0x40
 80075e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80075e4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80075e8:	661a      	str	r2, [r3, #96]	; 0x60
 80075ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicDisableVector(STM32_USART2_NUMBER);
 80075ec:	2026      	movs	r0, #38	; 0x26
 80075ee:	f7fc fd57 	bl	80040a0 <nvicDisableVector>
      return;
 80075f2:	e7f0      	b.n	80075d6 <sd_lld_stop+0x26>
      rccDisableUSART3();
 80075f4:	4b10      	ldr	r3, [pc, #64]	; (8007638 <sd_lld_stop+0x88>)
 80075f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075fc:	641a      	str	r2, [r3, #64]	; 0x40
 80075fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007600:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007604:	661a      	str	r2, [r3, #96]	; 0x60
 8007606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicDisableVector(STM32_USART3_NUMBER);
 8007608:	2027      	movs	r0, #39	; 0x27
 800760a:	f7fc fd49 	bl	80040a0 <nvicDisableVector>
      return;
 800760e:	e7e2      	b.n	80075d6 <sd_lld_stop+0x26>
      rccDisableUSART6();
 8007610:	4b09      	ldr	r3, [pc, #36]	; (8007638 <sd_lld_stop+0x88>)
 8007612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007614:	f022 0220 	bic.w	r2, r2, #32
 8007618:	645a      	str	r2, [r3, #68]	; 0x44
 800761a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800761c:	f022 0220 	bic.w	r2, r2, #32
 8007620:	665a      	str	r2, [r3, #100]	; 0x64
 8007622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      nvicDisableVector(STM32_USART6_NUMBER);
 8007624:	2047      	movs	r0, #71	; 0x47
 8007626:	f7fc fd3b 	bl	80040a0 <nvicDisableVector>
      return;
 800762a:	e7d4      	b.n	80075d6 <sd_lld_stop+0x26>
 800762c:	200048e8 	.word	0x200048e8
 8007630:	20004b44 	.word	0x20004b44
 8007634:	20004da0 	.word	0x20004da0
 8007638:	40023800 	.word	0x40023800
 800763c:	00000000 	.word	0x00000000

08007640 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8007640:	e7fe      	b.n	8007640 <_idle_thread>
 8007642:	bf00      	nop
 8007644:	f3af 8000 	nop.w
 8007648:	f3af 8000 	nop.w
 800764c:	f3af 8000 	nop.w

08007650 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8007650:	b538      	push	{r3, r4, r5, lr}

  _scheduler_init();
 8007652:	f000 fd65 	bl	8008120 <_scheduler_init>
  _vt_init();
 8007656:	f000 fc43 	bl	8007ee0 <_vt_init>
  _trace_init();
 800765a:	f000 fac9 	bl	8007bf0 <_trace_init>

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  ch.dbg.isr_cnt  = (cnt_t)0;
 800765e:	4c1f      	ldr	r4, [pc, #124]	; (80076dc <chSysInit+0x8c>)
 8007660:	2500      	movs	r5, #0
 8007662:	63e5      	str	r5, [r4, #60]	; 0x3c
  ch.dbg.lock_cnt = (cnt_t)0;
 8007664:	6425      	str	r5, [r4, #64]	; 0x40
#endif
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8007666:	f001 fc63 	bl	8008f30 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 800766a:	f003 fad1 	bl	800ac10 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 800766e:	f003 fb3f 	bl	800acf0 <_heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  _factory_init();
 8007672:	f004 f855 	bl	800b720 <_factory_init>
#endif
#if CH_DBG_STATISTICS == TRUE
  _stats_init();
 8007676:	f001 fc93 	bl	8008fa0 <_stats_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800767a:	2280      	movs	r2, #128	; 0x80
 800767c:	4918      	ldr	r1, [pc, #96]	; (80076e0 <chSysInit+0x90>)
 800767e:	f504 6005 	add.w	r0, r4, #2128	; 0x850
 8007682:	f000 ff4d 	bl	8008520 <_thread_init>
 8007686:	61a0      	str	r0, [r4, #24]
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  {
    /* Setting up the base address of the static main thread stack, the
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
 8007688:	4b16      	ldr	r3, [pc, #88]	; (80076e4 <chSysInit+0x94>)
 800768a:	61c3      	str	r3, [r0, #28]
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 800768c:	2301      	movs	r3, #1
 800768e:	f880 3020 	strb.w	r3, [r0, #32]
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007692:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <chSysInit+0x98>)
 8007694:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007696:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800769a:	0409      	lsls	r1, r1, #16
 800769c:	0c09      	lsrs	r1, r1, #16
  reg_value  =  (reg_value                                   |
 800769e:	4a13      	ldr	r2, [pc, #76]	; (80076ec <chSysInit+0x9c>)
 80076a0:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80076a2:	60da      	str	r2, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80076a4:	4912      	ldr	r1, [pc, #72]	; (80076f0 <chSysInit+0xa0>)
 80076a6:	68ca      	ldr	r2, [r1, #12]
 80076a8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80076ac:	60ca      	str	r2, [r1, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80076ae:	4911      	ldr	r1, [pc, #68]	; (80076f4 <chSysInit+0xa4>)
 80076b0:	680a      	ldr	r2, [r1, #0]
 80076b2:	f042 0201 	orr.w	r2, r2, #1
 80076b6:	600a      	str	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076b8:	2210      	movs	r2, #16
 80076ba:	77da      	strb	r2, [r3, #31]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
     initializations performed before.*/
  port_init();

#if CH_DBG_STATISTICS == TRUE
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->stats);
 80076c2:	3048      	adds	r0, #72	; 0x48
 80076c4:	f001 fc04 	bl	8008ed0 <chTMStartMeasurementX>
  _dbg_check_enable();
 80076c8:	f000 f99a 	bl	8007a00 <_dbg_check_enable>
 80076cc:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 80076d0:	b662      	cpsie	i
    };

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
 80076d2:	4809      	ldr	r0, [pc, #36]	; (80076f8 <chSysInit+0xa8>)
 80076d4:	f000 ffd4 	bl	8008680 <chThdCreate>
  }
#endif
}
 80076d8:	bd38      	pop	{r3, r4, r5, pc}
 80076da:	bf00      	nop
 80076dc:	200050f8 	.word	0x200050f8
 80076e0:	08019968 	.word	0x08019968
 80076e4:	20000400 	.word	0x20000400
 80076e8:	e000ed00 	.word	0xe000ed00
 80076ec:	05fa0300 	.word	0x05fa0300
 80076f0:	e000edf0 	.word	0xe000edf0
 80076f4:	e0001000 	.word	0xe0001000
 80076f8:	08019794 	.word	0x08019794
 80076fc:	f3af 8000 	nop.w

08007700 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8007700:	b508      	push	{r3, lr}
 8007702:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8007704:	b672      	cpsid	i

  port_disable();

  /* Logging the event.*/
  _trace_halt(reason);
 8007706:	f000 fb0b 	bl	8007d20 <_trace_halt>

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 800770a:	4b01      	ldr	r3, [pc, #4]	; (8007710 <chSysHalt+0x10>)
 800770c:	639c      	str	r4, [r3, #56]	; 0x38
 800770e:	e7fe      	b.n	800770e <chSysHalt+0xe>
 8007710:	200050f8 	.word	0x200050f8
 8007714:	f3af 8000 	nop.w
 8007718:	f3af 8000 	nop.w
 800771c:	f3af 8000 	nop.w

08007720 <chSysIntegrityCheckI>:
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 8007720:	b510      	push	{r4, lr}
 8007722:	4604      	mov	r4, r0
  cnt_t n;

  chDbgCheckClassI();
 8007724:	f000 fa1c 	bl	8007b60 <chDbgCheckClassI>

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8007728:	f014 0f01 	tst.w	r4, #1
 800772c:	d010      	beq.n	8007750 <chSysIntegrityCheckI+0x30>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.queue.next;
 800772e:	4b22      	ldr	r3, [pc, #136]	; (80077b8 <chSysIntegrityCheckI+0x98>)
 8007730:	681a      	ldr	r2, [r3, #0]
    n = (cnt_t)0;
 8007732:	2300      	movs	r3, #0
    while (tp != (thread_t *)&ch.rlist.queue) {
 8007734:	e001      	b.n	800773a <chSysIntegrityCheckI+0x1a>
      n++;
 8007736:	3301      	adds	r3, #1
      tp = tp->queue.next;
 8007738:	6812      	ldr	r2, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800773a:	491f      	ldr	r1, [pc, #124]	; (80077b8 <chSysIntegrityCheckI+0x98>)
 800773c:	428a      	cmp	r2, r1
 800773e:	d1fa      	bne.n	8007736 <chSysIntegrityCheckI+0x16>
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.queue.prev;
 8007740:	684a      	ldr	r2, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8007742:	e001      	b.n	8007748 <chSysIntegrityCheckI+0x28>
      n--;
 8007744:	3b01      	subs	r3, #1
      tp = tp->queue.prev;
 8007746:	6852      	ldr	r2, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8007748:	491b      	ldr	r1, [pc, #108]	; (80077b8 <chSysIntegrityCheckI+0x98>)
 800774a:	428a      	cmp	r2, r1
 800774c:	d1fa      	bne.n	8007744 <chSysIntegrityCheckI+0x24>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 800774e:	bb5b      	cbnz	r3, 80077a8 <chSysIntegrityCheckI+0x88>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 8007750:	f014 0f02 	tst.w	r4, #2
 8007754:	d012      	beq.n	800777c <chSysIntegrityCheckI+0x5c>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.next;
 8007756:	4b18      	ldr	r3, [pc, #96]	; (80077b8 <chSysIntegrityCheckI+0x98>)
 8007758:	6a1a      	ldr	r2, [r3, #32]
    n = (cnt_t)0;
 800775a:	2300      	movs	r3, #0
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800775c:	e001      	b.n	8007762 <chSysIntegrityCheckI+0x42>
      n++;
 800775e:	3301      	adds	r3, #1
      vtp = vtp->next;
 8007760:	6812      	ldr	r2, [r2, #0]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8007762:	4916      	ldr	r1, [pc, #88]	; (80077bc <chSysIntegrityCheckI+0x9c>)
 8007764:	428a      	cmp	r2, r1
 8007766:	d1fa      	bne.n	800775e <chSysIntegrityCheckI+0x3e>
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.prev;
 8007768:	f1a1 0220 	sub.w	r2, r1, #32
 800776c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800776e:	e001      	b.n	8007774 <chSysIntegrityCheckI+0x54>
      n--;
 8007770:	3b01      	subs	r3, #1
      vtp = vtp->prev;
 8007772:	6852      	ldr	r2, [r2, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8007774:	4911      	ldr	r1, [pc, #68]	; (80077bc <chSysIntegrityCheckI+0x9c>)
 8007776:	428a      	cmp	r2, r1
 8007778:	d1fa      	bne.n	8007770 <chSysIntegrityCheckI+0x50>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 800777a:	b9bb      	cbnz	r3, 80077ac <chSysIntegrityCheckI+0x8c>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 800777c:	f014 0f04 	tst.w	r4, #4
 8007780:	d016      	beq.n	80077b0 <chSysIntegrityCheckI+0x90>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.newer;
 8007782:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <chSysIntegrityCheckI+0x98>)
 8007784:	691a      	ldr	r2, [r3, #16]
    n = (cnt_t)0;
 8007786:	2300      	movs	r3, #0
    while (tp != (thread_t *)&ch.rlist) {
 8007788:	e001      	b.n	800778e <chSysIntegrityCheckI+0x6e>
      n++;
 800778a:	3301      	adds	r3, #1
      tp = tp->newer;
 800778c:	6912      	ldr	r2, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800778e:	490a      	ldr	r1, [pc, #40]	; (80077b8 <chSysIntegrityCheckI+0x98>)
 8007790:	428a      	cmp	r2, r1
 8007792:	d1fa      	bne.n	800778a <chSysIntegrityCheckI+0x6a>
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.older;
 8007794:	694a      	ldr	r2, [r1, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8007796:	e001      	b.n	800779c <chSysIntegrityCheckI+0x7c>
      n--;
 8007798:	3b01      	subs	r3, #1
      tp = tp->older;
 800779a:	6952      	ldr	r2, [r2, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800779c:	4906      	ldr	r1, [pc, #24]	; (80077b8 <chSysIntegrityCheckI+0x98>)
 800779e:	428a      	cmp	r2, r1
 80077a0:	d1fa      	bne.n	8007798 <chSysIntegrityCheckI+0x78>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80077a2:	b93b      	cbnz	r3, 80077b4 <chSysIntegrityCheckI+0x94>
  if ((testmask & CH_INTEGRITY_PORT) != 0U) {
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
 80077a4:	2000      	movs	r0, #0
 80077a6:	e004      	b.n	80077b2 <chSysIntegrityCheckI+0x92>
      return true;
 80077a8:	2001      	movs	r0, #1
 80077aa:	e002      	b.n	80077b2 <chSysIntegrityCheckI+0x92>
      return true;
 80077ac:	2001      	movs	r0, #1
 80077ae:	e000      	b.n	80077b2 <chSysIntegrityCheckI+0x92>
  return false;
 80077b0:	2000      	movs	r0, #0
}
 80077b2:	bd10      	pop	{r4, pc}
      return true;
 80077b4:	2001      	movs	r0, #1
 80077b6:	e7fc      	b.n	80077b2 <chSysIntegrityCheckI+0x92>
 80077b8:	200050f8 	.word	0x200050f8
 80077bc:	20005118 	.word	0x20005118

080077c0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 80077c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  chDbgCheckClassI();
 80077c4:	f000 f9cc 	bl	8007b60 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();
 80077c8:	f000 f9ca 	bl	8007b60 <chDbgCheckClassI>
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80077cc:	4b45      	ldr	r3, [pc, #276]	; (80078e4 <chSysTimerHandlerI+0x124>)
 80077ce:	6a1c      	ldr	r4, [r3, #32]
 80077d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80077d6:	4b43      	ldr	r3, [pc, #268]	; (80078e4 <chSysTimerHandlerI+0x124>)
 80077d8:	6b1e      	ldr	r6, [r3, #48]	; 0x30
  return (sysinterval_t)((systime_t)(end - start));
 80077da:	1b8e      	subs	r6, r1, r6
 80077dc:	46b0      	mov	r8, r6
 80077de:	f04f 0900 	mov.w	r9, #0

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 80077e2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80077e6:	4599      	cmp	r9, r3
 80077e8:	bf08      	it	eq
 80077ea:	4296      	cmpeq	r6, r2
 80077ec:	d240      	bcs.n	8007870 <chSysTimerHandlerI+0xb0>
    }
    while (vtp->delta <= nowdelta);
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80077ee:	4b3d      	ldr	r3, [pc, #244]	; (80078e4 <chSysTimerHandlerI+0x124>)
 80077f0:	f853 0f20 	ldr.w	r0, [r3, #32]!
 80077f4:	4298      	cmp	r0, r3
 80077f6:	d06d      	beq.n	80078d4 <chSysTimerHandlerI+0x114>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 80077f8:	4d3a      	ldr	r5, [pc, #232]	; (80078e4 <chSysTimerHandlerI+0x124>)
 80077fa:	6329      	str	r1, [r5, #48]	; 0x30
  ch.vtlist.next->delta -= nowdelta;
 80077fc:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8007800:	1b92      	subs	r2, r2, r6
 8007802:	eb63 0309 	sbc.w	r3, r3, r9
 8007806:	4616      	mov	r6, r2
 8007808:	461f      	mov	r7, r3
 800780a:	e9c0 6702 	strd	r6, r7, [r0, #8]

  /* Recalculating the next alarm time.*/
  delta = vtp->delta - chTimeDiffX(ch.vtlist.lasttime, now);
 800780e:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007812:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007814:	1acb      	subs	r3, r1, r3
 8007816:	ebb6 0803 	subs.w	r8, r6, r3
 800781a:	f167 0900 	sbc.w	r9, r7, #0
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800781e:	f1b9 0f00 	cmp.w	r9, #0
 8007822:	bf08      	it	eq
 8007824:	f1b8 0f02 	cmpeq.w	r8, #2
 8007828:	d33c      	bcc.n	80078a4 <chSysTimerHandlerI+0xe4>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
  }
#if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
  /* The delta could be too large for the physical timer to handle.*/
  else if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 800782a:	f1b9 0f01 	cmp.w	r9, #1
 800782e:	bf08      	it	eq
 8007830:	f1b8 0f00 	cmpeq.w	r8, #0
 8007834:	d33a      	bcc.n	80078ac <chSysTimerHandlerI+0xec>
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
 8007836:	f04f 38ff 	mov.w	r8, #4294967295
 800783a:	f04f 0900 	mov.w	r9, #0
 800783e:	e035      	b.n	80078ac <chSysTimerHandlerI+0xec>
  _dbg_check_unlock_from_isr();
 8007840:	f000 f936 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8007844:	f001 fc04 	bl	8009050 <_stats_stop_measure_crit_isr>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007848:	2300      	movs	r3, #0
 800784a:	f383 8811 	msr	BASEPRI, r3
      fn(vtp->par);
 800784e:	6960      	ldr	r0, [r4, #20]
 8007850:	47a8      	blx	r5
 8007852:	2320      	movs	r3, #32
 8007854:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8007858:	f001 fbf2 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800785c:	f000 f910 	bl	8007a80 <_dbg_check_lock_from_isr>
      vtp = ch.vtlist.next;
 8007860:	4b20      	ldr	r3, [pc, #128]	; (80078e4 <chSysTimerHandlerI+0x124>)
 8007862:	6a1c      	ldr	r4, [r3, #32]
    while (vtp->delta <= nowdelta);
 8007864:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007868:	4599      	cmp	r9, r3
 800786a:	bf08      	it	eq
 800786c:	4590      	cmpeq	r8, r2
 800786e:	d3af      	bcc.n	80077d0 <chSysTimerHandlerI+0x10>
      ch.vtlist.lasttime += vtp->delta;
 8007870:	68a2      	ldr	r2, [r4, #8]
 8007872:	491c      	ldr	r1, [pc, #112]	; (80078e4 <chSysTimerHandlerI+0x124>)
 8007874:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8007876:	4413      	add	r3, r2
 8007878:	630b      	str	r3, [r1, #48]	; 0x30
      nowdelta -= vtp->delta;
 800787a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800787e:	ebb8 0802 	subs.w	r8, r8, r2
 8007882:	eb69 0903 	sbc.w	r9, r9, r3
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8007886:	6822      	ldr	r2, [r4, #0]
 8007888:	f101 0320 	add.w	r3, r1, #32
 800788c:	6053      	str	r3, [r2, #4]
      ch.vtlist.next = vtp->next;
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	620a      	str	r2, [r1, #32]
      fn = vtp->func;
 8007892:	6925      	ldr	r5, [r4, #16]
      vtp->func = NULL;
 8007894:	2200      	movs	r2, #0
 8007896:	6122      	str	r2, [r4, #16]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8007898:	6a0a      	ldr	r2, [r1, #32]
 800789a:	429a      	cmp	r2, r3
 800789c:	d1d0      	bne.n	8007840 <chSysTimerHandlerI+0x80>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 800789e:	f7f8 fe57 	bl	8000550 <stStopAlarm>
 80078a2:	e7cd      	b.n	8007840 <chSysTimerHandlerI+0x80>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80078a4:	f04f 0802 	mov.w	r8, #2
 80078a8:	f04f 0900 	mov.w	r9, #0
  return systime + (systime_t)interval;
 80078ac:	eb01 0408 	add.w	r4, r1, r8
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 80078b0:	4620      	mov	r0, r4
 80078b2:	f7f8 fe55 	bl	8000560 <stSetAlarm>
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
 80078b6:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <chSysTimerHandlerI+0x124>)
 80078b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80078ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80078c0:	1a5b      	subs	r3, r3, r1
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 80078c2:	f1b9 0f01 	cmp.w	r9, #1
 80078c6:	bf08      	it	eq
 80078c8:	f1b8 0f00 	cmpeq.w	r8, #0
 80078cc:	d204      	bcs.n	80078d8 <chSysTimerHandlerI+0x118>
  return (sysinterval_t)((systime_t)(end - start));
 80078ce:	1a61      	subs	r1, r4, r1
 80078d0:	428b      	cmp	r3, r1
 80078d2:	d804      	bhi.n	80078de <chSysTimerHandlerI+0x11e>
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
 80078d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 80078d8:	4803      	ldr	r0, [pc, #12]	; (80078e8 <chSysTimerHandlerI+0x128>)
 80078da:	f7ff ff11 	bl	8007700 <chSysHalt>
 80078de:	4803      	ldr	r0, [pc, #12]	; (80078ec <chSysTimerHandlerI+0x12c>)
 80078e0:	f7ff ff0e 	bl	8007700 <chSysHalt>
 80078e4:	200050f8 	.word	0x200050f8
 80078e8:	080197ac 	.word	0x080197ac
 80078ec:	080197b8 	.word	0x080197b8

080078f0 <chSysGetStatusAndLockX>:
 * @return              The previous system status, the encoding of this
 *                      status word is architecture-dependent and opaque.
 *
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {
 80078f0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078f2:	f3ef 8411 	mrs	r4, BASEPRI

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 80078f6:	b95c      	cbnz	r4, 8007910 <chSysGetStatusAndLockX+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078f8:	f3ef 8305 	mrs	r3, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 80078fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 8007900:	b943      	cbnz	r3, 8007914 <chSysGetStatusAndLockX+0x24>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007902:	2320      	movs	r3, #32
 8007904:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8007908:	f001 fb8a 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800790c:	f000 f888 	bl	8007a20 <_dbg_check_lock>
    else {
      chSysLock();
    }
  }
  return sts;
}
 8007910:	4620      	mov	r0, r4
 8007912:	bd10      	pop	{r4, pc}
 8007914:	2320      	movs	r3, #32
 8007916:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800791a:	f001 fb91 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800791e:	f000 f8af 	bl	8007a80 <_dbg_check_lock_from_isr>
 8007922:	e7f5      	b.n	8007910 <chSysGetStatusAndLockX+0x20>
 8007924:	f3af 8000 	nop.w
 8007928:	f3af 8000 	nop.w
 800792c:	f3af 8000 	nop.w

08007930 <chSysRestoreStatusX>:
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
 8007930:	bb18      	cbnz	r0, 800797a <chSysRestoreStatusX+0x4a>
void chSysRestoreStatusX(syssts_t sts) {
 8007932:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007934:	f3ef 8305 	mrs	r3, IPSR
 8007938:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 800793c:	b993      	cbnz	r3, 8007964 <chSysRestoreStatusX+0x34>
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 800793e:	f000 fda7 	bl	8008490 <chSchRescheduleS>
  _dbg_check_unlock();
 8007942:	f000 f885 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8007946:	f001 fb73 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800794a:	4b0c      	ldr	r3, [pc, #48]	; (800797c <chSysRestoreStatusX+0x4c>)
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d004      	beq.n	800795c <chSysRestoreStatusX+0x2c>
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	6899      	ldr	r1, [r3, #8]
 8007956:	6893      	ldr	r3, [r2, #8]
 8007958:	4299      	cmp	r1, r3
 800795a:	d30b      	bcc.n	8007974 <chSysRestoreStatusX+0x44>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800795c:	2300      	movs	r3, #0
 800795e:	f383 8811 	msr	BASEPRI, r3
      chSysUnlock();
    }
  }
}
 8007962:	bd08      	pop	{r3, pc}
  _dbg_check_unlock_from_isr();
 8007964:	f000 f8a4 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8007968:	f001 fb72 	bl	8009050 <_stats_stop_measure_crit_isr>
 800796c:	2300      	movs	r3, #0
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	e7f6      	b.n	8007962 <chSysRestoreStatusX+0x32>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007974:	4802      	ldr	r0, [pc, #8]	; (8007980 <chSysRestoreStatusX+0x50>)
 8007976:	f7ff fec3 	bl	8007700 <chSysHalt>
 800797a:	4770      	bx	lr
 800797c:	200050f8 	.word	0x200050f8
 8007980:	080197c4 	.word	0x080197c4
 8007984:	f3af 8000 	nop.w
 8007988:	f3af 8000 	nop.w
 800798c:	f3af 8000 	nop.w

08007990 <chSysIsCounterWithinX>:
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)(((rtcnt_t)cnt - (rtcnt_t)start) <
 8007990:	1a40      	subs	r0, r0, r1
                ((rtcnt_t)end - (rtcnt_t)start));
 8007992:	1a52      	subs	r2, r2, r1
}
 8007994:	4290      	cmp	r0, r2
 8007996:	bf2c      	ite	cs
 8007998:	2000      	movcs	r0, #0
 800799a:	2001      	movcc	r0, #1
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop

080079a0 <chSysPolledDelayX>:
 *
 * @param[in] cycles    number of cycles
 *
 * @xclass
 */
void chSysPolledDelayX(rtcnt_t cycles) {
 80079a0:	b538      	push	{r3, r4, r5, lr}
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80079a2:	4b06      	ldr	r3, [pc, #24]	; (80079bc <chSysPolledDelayX+0x1c>)
 80079a4:	685c      	ldr	r4, [r3, #4]
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;
 80079a6:	1905      	adds	r5, r0, r4
 80079a8:	4b04      	ldr	r3, [pc, #16]	; (80079bc <chSysPolledDelayX+0x1c>)
 80079aa:	6858      	ldr	r0, [r3, #4]

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 80079ac:	462a      	mov	r2, r5
 80079ae:	4621      	mov	r1, r4
 80079b0:	f7ff ffee 	bl	8007990 <chSysIsCounterWithinX>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d1f7      	bne.n	80079a8 <chSysPolledDelayX+0x8>
  }
}
 80079b8:	bd38      	pop	{r3, r4, r5, pc}
 80079ba:	bf00      	nop
 80079bc:	e0001000 	.word	0xe0001000

080079c0 <_dbg_check_disable>:
/**
 * @brief   Guard code for @p chSysDisable().
 *
 * @notapi
 */
void _dbg_check_disable(void) {
 80079c0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80079c2:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <_dbg_check_disable+0x18>)
 80079c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c6:	b913      	cbnz	r3, 80079ce <_dbg_check_disable+0xe>
 80079c8:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <_dbg_check_disable+0x18>)
 80079ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079cc:	b113      	cbz	r3, 80079d4 <_dbg_check_disable+0x14>
    chSysHalt("SV#1");
 80079ce:	4803      	ldr	r0, [pc, #12]	; (80079dc <_dbg_check_disable+0x1c>)
 80079d0:	f7ff fe96 	bl	8007700 <chSysHalt>
  }
}
 80079d4:	bd08      	pop	{r3, pc}
 80079d6:	bf00      	nop
 80079d8:	200050f8 	.word	0x200050f8
 80079dc:	0801a4c0 	.word	0x0801a4c0

080079e0 <_dbg_check_suspend>:
/**
 * @brief   Guard code for @p chSysSuspend().
 *
 * @notapi
 */
void _dbg_check_suspend(void) {
 80079e0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80079e2:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <_dbg_check_suspend+0x18>)
 80079e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e6:	b913      	cbnz	r3, 80079ee <_dbg_check_suspend+0xe>
 80079e8:	4b03      	ldr	r3, [pc, #12]	; (80079f8 <_dbg_check_suspend+0x18>)
 80079ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ec:	b113      	cbz	r3, 80079f4 <_dbg_check_suspend+0x14>
    chSysHalt("SV#2");
 80079ee:	4803      	ldr	r0, [pc, #12]	; (80079fc <_dbg_check_suspend+0x1c>)
 80079f0:	f7ff fe86 	bl	8007700 <chSysHalt>
  }
}
 80079f4:	bd08      	pop	{r3, pc}
 80079f6:	bf00      	nop
 80079f8:	200050f8 	.word	0x200050f8
 80079fc:	0801a4c8 	.word	0x0801a4c8

08007a00 <_dbg_check_enable>:
/**
 * @brief   Guard code for @p chSysEnable().
 *
 * @notapi
 */
void _dbg_check_enable(void) {
 8007a00:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007a02:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <_dbg_check_enable+0x18>)
 8007a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a06:	b913      	cbnz	r3, 8007a0e <_dbg_check_enable+0xe>
 8007a08:	4b03      	ldr	r3, [pc, #12]	; (8007a18 <_dbg_check_enable+0x18>)
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	b113      	cbz	r3, 8007a14 <_dbg_check_enable+0x14>
    chSysHalt("SV#3");
 8007a0e:	4803      	ldr	r0, [pc, #12]	; (8007a1c <_dbg_check_enable+0x1c>)
 8007a10:	f7ff fe76 	bl	8007700 <chSysHalt>
  }
}
 8007a14:	bd08      	pop	{r3, pc}
 8007a16:	bf00      	nop
 8007a18:	200050f8 	.word	0x200050f8
 8007a1c:	0801a4d0 	.word	0x0801a4d0

08007a20 <_dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void _dbg_check_lock(void) {
 8007a20:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <_dbg_check_lock+0x1c>)
 8007a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a26:	b913      	cbnz	r3, 8007a2e <_dbg_check_lock+0xe>
 8007a28:	4b04      	ldr	r3, [pc, #16]	; (8007a3c <_dbg_check_lock+0x1c>)
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	b113      	cbz	r3, 8007a34 <_dbg_check_lock+0x14>
    chSysHalt("SV#4");
 8007a2e:	4804      	ldr	r0, [pc, #16]	; (8007a40 <_dbg_check_lock+0x20>)
 8007a30:	f7ff fe66 	bl	8007700 <chSysHalt>
  }
  _dbg_enter_lock();
 8007a34:	4b01      	ldr	r3, [pc, #4]	; (8007a3c <_dbg_check_lock+0x1c>)
 8007a36:	2201      	movs	r2, #1
 8007a38:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007a3a:	bd08      	pop	{r3, pc}
 8007a3c:	200050f8 	.word	0x200050f8
 8007a40:	0801a4d8 	.word	0x0801a4d8
 8007a44:	f3af 8000 	nop.w
 8007a48:	f3af 8000 	nop.w
 8007a4c:	f3af 8000 	nop.w

08007a50 <_dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void _dbg_check_unlock(void) {
 8007a50:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8007a52:	4b07      	ldr	r3, [pc, #28]	; (8007a70 <_dbg_check_unlock+0x20>)
 8007a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a56:	b91b      	cbnz	r3, 8007a60 <_dbg_check_unlock+0x10>
 8007a58:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <_dbg_check_unlock+0x20>)
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dc02      	bgt.n	8007a66 <_dbg_check_unlock+0x16>
    chSysHalt("SV#5");
 8007a60:	4804      	ldr	r0, [pc, #16]	; (8007a74 <_dbg_check_unlock+0x24>)
 8007a62:	f7ff fe4d 	bl	8007700 <chSysHalt>
  }
  _dbg_leave_lock();
 8007a66:	4b02      	ldr	r3, [pc, #8]	; (8007a70 <_dbg_check_unlock+0x20>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007a6c:	bd08      	pop	{r3, pc}
 8007a6e:	bf00      	nop
 8007a70:	200050f8 	.word	0x200050f8
 8007a74:	0801a4e0 	.word	0x0801a4e0
 8007a78:	f3af 8000 	nop.w
 8007a7c:	f3af 8000 	nop.w

08007a80 <_dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {
 8007a80:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007a82:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <_dbg_check_lock_from_isr+0x20>)
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dd02      	ble.n	8007a90 <_dbg_check_lock_from_isr+0x10>
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <_dbg_check_lock_from_isr+0x20>)
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	b113      	cbz	r3, 8007a96 <_dbg_check_lock_from_isr+0x16>
    chSysHalt("SV#6");
 8007a90:	4804      	ldr	r0, [pc, #16]	; (8007aa4 <_dbg_check_lock_from_isr+0x24>)
 8007a92:	f7ff fe35 	bl	8007700 <chSysHalt>
  }
  _dbg_enter_lock();
 8007a96:	4b02      	ldr	r3, [pc, #8]	; (8007aa0 <_dbg_check_lock_from_isr+0x20>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007a9c:	bd08      	pop	{r3, pc}
 8007a9e:	bf00      	nop
 8007aa0:	200050f8 	.word	0x200050f8
 8007aa4:	0801a4e8 	.word	0x0801a4e8
 8007aa8:	f3af 8000 	nop.w
 8007aac:	f3af 8000 	nop.w

08007ab0 <_dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {
 8007ab0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8007ab2:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <_dbg_check_unlock_from_isr+0x20>)
 8007ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	dd03      	ble.n	8007ac2 <_dbg_check_unlock_from_isr+0x12>
 8007aba:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <_dbg_check_unlock_from_isr+0x20>)
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	dc02      	bgt.n	8007ac8 <_dbg_check_unlock_from_isr+0x18>
    chSysHalt("SV#7");
 8007ac2:	4804      	ldr	r0, [pc, #16]	; (8007ad4 <_dbg_check_unlock_from_isr+0x24>)
 8007ac4:	f7ff fe1c 	bl	8007700 <chSysHalt>
  }
  _dbg_leave_lock();
 8007ac8:	4b01      	ldr	r3, [pc, #4]	; (8007ad0 <_dbg_check_unlock_from_isr+0x20>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007ace:	bd08      	pop	{r3, pc}
 8007ad0:	200050f8 	.word	0x200050f8
 8007ad4:	0801a4f0 	.word	0x0801a4f0
 8007ad8:	f3af 8000 	nop.w
 8007adc:	f3af 8000 	nop.w

08007ae0 <_dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void _dbg_check_enter_isr(void) {
 8007ae0:	b508      	push	{r3, lr}
 8007ae2:	2320      	movs	r3, #32
 8007ae4:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007ae8:	4b08      	ldr	r3, [pc, #32]	; (8007b0c <_dbg_check_enter_isr+0x2c>)
 8007aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	db02      	blt.n	8007af6 <_dbg_check_enter_isr+0x16>
 8007af0:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <_dbg_check_enter_isr+0x2c>)
 8007af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af4:	b113      	cbz	r3, 8007afc <_dbg_check_enter_isr+0x1c>
    chSysHalt("SV#8");
 8007af6:	4806      	ldr	r0, [pc, #24]	; (8007b10 <_dbg_check_enter_isr+0x30>)
 8007af8:	f7ff fe02 	bl	8007700 <chSysHalt>
  }
  ch.dbg.isr_cnt++;
 8007afc:	4a03      	ldr	r2, [pc, #12]	; (8007b0c <_dbg_check_enter_isr+0x2c>)
 8007afe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007b00:	3301      	adds	r3, #1
 8007b02:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007b04:	2300      	movs	r3, #0
 8007b06:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 8007b0a:	bd08      	pop	{r3, pc}
 8007b0c:	200050f8 	.word	0x200050f8
 8007b10:	0801a4f8 	.word	0x0801a4f8
 8007b14:	f3af 8000 	nop.w
 8007b18:	f3af 8000 	nop.w
 8007b1c:	f3af 8000 	nop.w

08007b20 <_dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void _dbg_check_leave_isr(void) {
 8007b20:	b508      	push	{r3, lr}
 8007b22:	2320      	movs	r3, #32
 8007b24:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007b28:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <_dbg_check_leave_isr+0x2c>)
 8007b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dd02      	ble.n	8007b36 <_dbg_check_leave_isr+0x16>
 8007b30:	4b06      	ldr	r3, [pc, #24]	; (8007b4c <_dbg_check_leave_isr+0x2c>)
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	b113      	cbz	r3, 8007b3c <_dbg_check_leave_isr+0x1c>
    chSysHalt("SV#9");
 8007b36:	4806      	ldr	r0, [pc, #24]	; (8007b50 <_dbg_check_leave_isr+0x30>)
 8007b38:	f7ff fde2 	bl	8007700 <chSysHalt>
  }
  ch.dbg.isr_cnt--;
 8007b3c:	4a03      	ldr	r2, [pc, #12]	; (8007b4c <_dbg_check_leave_isr+0x2c>)
 8007b3e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007b40:	3b01      	subs	r3, #1
 8007b42:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007b44:	2300      	movs	r3, #0
 8007b46:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 8007b4a:	bd08      	pop	{r3, pc}
 8007b4c:	200050f8 	.word	0x200050f8
 8007b50:	0801a500 	.word	0x0801a500
 8007b54:	f3af 8000 	nop.w
 8007b58:	f3af 8000 	nop.w
 8007b5c:	f3af 8000 	nop.w

08007b60 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
 8007b60:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8007b62:	4b06      	ldr	r3, [pc, #24]	; (8007b7c <chDbgCheckClassI+0x1c>)
 8007b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	db03      	blt.n	8007b72 <chDbgCheckClassI+0x12>
 8007b6a:	4b04      	ldr	r3, [pc, #16]	; (8007b7c <chDbgCheckClassI+0x1c>)
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	dc02      	bgt.n	8007b78 <chDbgCheckClassI+0x18>
    chSysHalt("SV#10");
 8007b72:	4803      	ldr	r0, [pc, #12]	; (8007b80 <chDbgCheckClassI+0x20>)
 8007b74:	f7ff fdc4 	bl	8007700 <chSysHalt>
  }
}
 8007b78:	bd08      	pop	{r3, pc}
 8007b7a:	bf00      	nop
 8007b7c:	200050f8 	.word	0x200050f8
 8007b80:	0801a508 	.word	0x0801a508
 8007b84:	f3af 8000 	nop.w
 8007b88:	f3af 8000 	nop.w
 8007b8c:	f3af 8000 	nop.w

08007b90 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8007b90:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8007b92:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <chDbgCheckClassS+0x18>)
 8007b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b96:	b91b      	cbnz	r3, 8007ba0 <chDbgCheckClassS+0x10>
 8007b98:	4b03      	ldr	r3, [pc, #12]	; (8007ba8 <chDbgCheckClassS+0x18>)
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	dc02      	bgt.n	8007ba6 <chDbgCheckClassS+0x16>
    chSysHalt("SV#11");
 8007ba0:	4802      	ldr	r0, [pc, #8]	; (8007bac <chDbgCheckClassS+0x1c>)
 8007ba2:	f7ff fdad 	bl	8007700 <chSysHalt>
  }
}
 8007ba6:	bd08      	pop	{r3, pc}
 8007ba8:	200050f8 	.word	0x200050f8
 8007bac:	0801a510 	.word	0x0801a510

08007bb0 <trace_next>:
 *
 * @notapi
 */
static NOINLINE void trace_next(void) {

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8007bb0:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <trace_next+0x34>)
 8007bb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007bb8:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007bba:	6051      	str	r1, [r2, #4]
 8007bbc:	4a0a      	ldr	r2, [pc, #40]	; (8007be8 <trace_next+0x38>)
 8007bbe:	6850      	ldr	r0, [r2, #4]
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8007bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bc2:	6811      	ldr	r1, [r2, #0]
 8007bc4:	f360 211f 	bfi	r1, r0, #8, #24
 8007bc8:	6011      	str	r1, [r2, #0]
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 8007bca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bcc:	3210      	adds	r2, #16
 8007bce:	649a      	str	r2, [r3, #72]	; 0x48
 8007bd0:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d304      	bcc.n	8007be2 <trace_next+0x32>
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 8007bd8:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8007bdc:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007be0:	649a      	str	r2, [r3, #72]	; 0x48
  }
}
 8007be2:	4770      	bx	lr
 8007be4:	200050f8 	.word	0x200050f8
 8007be8:	e0001000 	.word	0xe0001000
 8007bec:	f3af 8000 	nop.w

08007bf0 <_trace_init>:
 * @note    Internal use only.
 */
void _trace_init(void) {
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 8007bf0:	4b0d      	ldr	r3, [pc, #52]	; (8007c28 <_trace_init+0x38>)
 8007bf2:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8007bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
 8007bfa:	2280      	movs	r2, #128	; 0x80
 8007bfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8007c00:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007c04:	649a      	str	r2, [r3, #72]	; 0x48
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8007c06:	2300      	movs	r3, #0
 8007c08:	e00a      	b.n	8007c20 <_trace_init+0x30>
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <_trace_init+0x38>)
 8007c0e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007c12:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 8007c16:	f36f 0102 	bfc	r1, #0, #3
 8007c1a:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8007c1e:	4613      	mov	r3, r2
 8007c20:	2b7f      	cmp	r3, #127	; 0x7f
 8007c22:	d9f2      	bls.n	8007c0a <_trace_init+0x1a>
  }
}
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	200050f8 	.word	0x200050f8
 8007c2c:	f3af 8000 	nop.w

08007c30 <_trace_switch>:
 */
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 8007c30:	4b0f      	ldr	r3, [pc, #60]	; (8007c70 <_trace_switch+0x40>)
 8007c32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c36:	f013 0f01 	tst.w	r3, #1
 8007c3a:	d000      	beq.n	8007c3e <_trace_switch+0xe>
 8007c3c:	4770      	bx	lr
void _trace_switch(thread_t *ntp, thread_t *otp) {
 8007c3e:	b510      	push	{r4, lr}
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8007c40:	4b0b      	ldr	r3, [pc, #44]	; (8007c70 <_trace_switch+0x40>)
 8007c42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c44:	7810      	ldrb	r0, [r2, #0]
 8007c46:	2401      	movs	r4, #1
 8007c48:	f364 0002 	bfi	r0, r4, #0, #3
 8007c4c:	7010      	strb	r0, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
 8007c4e:	f891 4020 	ldrb.w	r4, [r1, #32]
 8007c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c54:	7810      	ldrb	r0, [r2, #0]
 8007c56:	f364 00c7 	bfi	r0, r4, #3, #5
 8007c5a:	7010      	strb	r0, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 8007c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c5e:	6998      	ldr	r0, [r3, #24]
 8007c60:	6090      	str	r0, [r2, #8]
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8007c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c64:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8007c66:	60da      	str	r2, [r3, #12]
    trace_next();
 8007c68:	f7ff ffa2 	bl	8007bb0 <trace_next>
  }
}
 8007c6c:	bd10      	pop	{r4, pc}
 8007c6e:	bf00      	nop
 8007c70:	200050f8 	.word	0x200050f8
 8007c74:	f3af 8000 	nop.w
 8007c78:	f3af 8000 	nop.w
 8007c7c:	f3af 8000 	nop.w

08007c80 <_trace_isr_enter>:
 *
 * @notapi
 */
void _trace_isr_enter(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8007c80:	4b0f      	ldr	r3, [pc, #60]	; (8007cc0 <_trace_isr_enter+0x40>)
 8007c82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c86:	f013 0f02 	tst.w	r3, #2
 8007c8a:	d000      	beq.n	8007c8e <_trace_isr_enter+0xe>
 8007c8c:	4770      	bx	lr
void _trace_isr_enter(const char *isr) {
 8007c8e:	b510      	push	{r4, lr}
 8007c90:	2320      	movs	r3, #32
 8007c92:	f383 8811 	msr	BASEPRI, r3
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8007c96:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <_trace_isr_enter+0x40>)
 8007c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c9a:	7811      	ldrb	r1, [r2, #0]
 8007c9c:	2402      	movs	r4, #2
 8007c9e:	f364 0102 	bfi	r1, r4, #0, #3
 8007ca2:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
 8007ca4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ca6:	7811      	ldrb	r1, [r2, #0]
 8007ca8:	f36f 01c7 	bfc	r1, #3, #5
 8007cac:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8007cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cb0:	6098      	str	r0, [r3, #8]
    trace_next();
 8007cb2:	f7ff ff7d 	bl	8007bb0 <trace_next>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	f383 8811 	msr	BASEPRI, r3
    port_unlock_from_isr();
  }
}
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	bf00      	nop
 8007cc0:	200050f8 	.word	0x200050f8
 8007cc4:	f3af 8000 	nop.w
 8007cc8:	f3af 8000 	nop.w
 8007ccc:	f3af 8000 	nop.w

08007cd0 <_trace_isr_leave>:
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8007cd0:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <_trace_isr_leave+0x40>)
 8007cd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007cd6:	f013 0f02 	tst.w	r3, #2
 8007cda:	d000      	beq.n	8007cde <_trace_isr_leave+0xe>
 8007cdc:	4770      	bx	lr
void _trace_isr_leave(const char *isr) {
 8007cde:	b510      	push	{r4, lr}
 8007ce0:	2320      	movs	r3, #32
 8007ce2:	f383 8811 	msr	BASEPRI, r3
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8007ce6:	4b0a      	ldr	r3, [pc, #40]	; (8007d10 <_trace_isr_leave+0x40>)
 8007ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cea:	7811      	ldrb	r1, [r2, #0]
 8007cec:	2403      	movs	r4, #3
 8007cee:	f364 0102 	bfi	r1, r4, #0, #3
 8007cf2:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
 8007cf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cf6:	7811      	ldrb	r1, [r2, #0]
 8007cf8:	f36f 01c7 	bfc	r1, #3, #5
 8007cfc:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8007cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d00:	6098      	str	r0, [r3, #8]
    trace_next();
 8007d02:	f7ff ff55 	bl	8007bb0 <trace_next>
 8007d06:	2300      	movs	r3, #0
 8007d08:	f383 8811 	msr	BASEPRI, r3
    port_unlock_from_isr();
  }
}
 8007d0c:	bd10      	pop	{r4, pc}
 8007d0e:	bf00      	nop
 8007d10:	200050f8 	.word	0x200050f8
 8007d14:	f3af 8000 	nop.w
 8007d18:	f3af 8000 	nop.w
 8007d1c:	f3af 8000 	nop.w

08007d20 <_trace_halt>:
 *
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
 8007d20:	4b0c      	ldr	r3, [pc, #48]	; (8007d54 <_trace_halt+0x34>)
 8007d22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007d26:	f013 0f04 	tst.w	r3, #4
 8007d2a:	d000      	beq.n	8007d2e <_trace_halt+0xe>
 8007d2c:	4770      	bx	lr
void _trace_halt(const char *reason) {
 8007d2e:	b510      	push	{r4, lr}
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 8007d30:	4b08      	ldr	r3, [pc, #32]	; (8007d54 <_trace_halt+0x34>)
 8007d32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d34:	7811      	ldrb	r1, [r2, #0]
 8007d36:	2404      	movs	r4, #4
 8007d38:	f364 0102 	bfi	r1, r4, #0, #3
 8007d3c:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->state         = 0;
 8007d3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d40:	7811      	ldrb	r1, [r2, #0]
 8007d42:	f36f 01c7 	bfc	r1, #3, #5
 8007d46:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
 8007d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d4a:	6098      	str	r0, [r3, #8]
    trace_next();
 8007d4c:	f7ff ff30 	bl	8007bb0 <trace_next>
  }
}
 8007d50:	bd10      	pop	{r4, pc}
 8007d52:	bf00      	nop
 8007d54:	200050f8 	.word	0x200050f8
 8007d58:	f3af 8000 	nop.w
 8007d5c:	f3af 8000 	nop.w

08007d60 <chDbgWriteTraceI>:
 * @param[in] up1       user parameter 1
 * @param[in] up2       user parameter 2
 *
 * @iclass
 */
void chDbgWriteTraceI(void *up1, void *up2) {
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4605      	mov	r5, r0
 8007d64:	460c      	mov	r4, r1

  chDbgCheckClassI();
 8007d66:	f7ff fefb 	bl	8007b60 <chDbgCheckClassI>

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_USER) == 0U) {
 8007d6a:	4b0d      	ldr	r3, [pc, #52]	; (8007da0 <chDbgWriteTraceI+0x40>)
 8007d6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007d70:	f013 0f08 	tst.w	r3, #8
 8007d74:	d000      	beq.n	8007d78 <chDbgWriteTraceI+0x18>
    ch.dbg.trace_buffer.ptr->state      = 0;
    ch.dbg.trace_buffer.ptr->u.user.up1 = up1;
    ch.dbg.trace_buffer.ptr->u.user.up2 = up2;
    trace_next();
  }
}
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
    ch.dbg.trace_buffer.ptr->type       = CH_TRACE_TYPE_USER;
 8007d78:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <chDbgWriteTraceI+0x40>)
 8007d7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d7c:	7811      	ldrb	r1, [r2, #0]
 8007d7e:	2005      	movs	r0, #5
 8007d80:	f360 0102 	bfi	r1, r0, #0, #3
 8007d84:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->state      = 0;
 8007d86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d88:	7811      	ldrb	r1, [r2, #0]
 8007d8a:	f36f 01c7 	bfc	r1, #3, #5
 8007d8e:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.user.up1 = up1;
 8007d90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d92:	6095      	str	r5, [r2, #8]
    ch.dbg.trace_buffer.ptr->u.user.up2 = up2;
 8007d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d96:	60dc      	str	r4, [r3, #12]
    trace_next();
 8007d98:	f7ff ff0a 	bl	8007bb0 <trace_next>
}
 8007d9c:	e7eb      	b.n	8007d76 <chDbgWriteTraceI+0x16>
 8007d9e:	bf00      	nop
 8007da0:	200050f8 	.word	0x200050f8
 8007da4:	f3af 8000 	nop.w
 8007da8:	f3af 8000 	nop.w
 8007dac:	f3af 8000 	nop.w

08007db0 <chDbgWriteTrace>:
 * @param[in] up1       user parameter 1
 * @param[in] up2       user parameter 2
 *
 * @api
 */
void chDbgWriteTrace(void *up1, void *up2) {
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4604      	mov	r4, r0
 8007db4:	460d      	mov	r5, r1
 8007db6:	2320      	movs	r3, #32
 8007db8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8007dbc:	f001 f930 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8007dc0:	f7ff fe2e 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chDbgWriteTraceI(up1, up2);
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f7ff ffca 	bl	8007d60 <chDbgWriteTraceI>
  _dbg_check_unlock();
 8007dcc:	f7ff fe40 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8007dd0:	f001 f92e 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007dd4:	4b08      	ldr	r3, [pc, #32]	; (8007df8 <chDbgWriteTrace+0x48>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d004      	beq.n	8007de6 <chDbgWriteTrace+0x36>
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	6899      	ldr	r1, [r3, #8]
 8007de0:	6893      	ldr	r3, [r2, #8]
 8007de2:	4299      	cmp	r1, r3
 8007de4:	d303      	bcc.n	8007dee <chDbgWriteTrace+0x3e>
 8007de6:	2300      	movs	r3, #0
 8007de8:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8007dec:	bd38      	pop	{r3, r4, r5, pc}
 8007dee:	4803      	ldr	r0, [pc, #12]	; (8007dfc <chDbgWriteTrace+0x4c>)
 8007df0:	f7ff fc86 	bl	8007700 <chSysHalt>
 8007df4:	e7f7      	b.n	8007de6 <chDbgWriteTrace+0x36>
 8007df6:	bf00      	nop
 8007df8:	200050f8 	.word	0x200050f8
 8007dfc:	080197d0 	.word	0x080197d0

08007e00 <chDbgSuspendTraceI>:
 *
 * @param[in] mask      mask of the trace events to be suspended
 *
 * @iclass
 */
void chDbgSuspendTraceI(uint16_t mask) {
 8007e00:	b510      	push	{r4, lr}
 8007e02:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8007e04:	f7ff feac 	bl	8007b60 <chDbgCheckClassI>

  ch.dbg.trace_buffer.suspended |= mask;
 8007e08:	4b03      	ldr	r3, [pc, #12]	; (8007e18 <chDbgSuspendTraceI+0x18>)
 8007e0a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8007e0e:	4314      	orrs	r4, r2
 8007e10:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
}
 8007e14:	bd10      	pop	{r4, pc}
 8007e16:	bf00      	nop
 8007e18:	200050f8 	.word	0x200050f8
 8007e1c:	f3af 8000 	nop.w

08007e20 <chDbgSuspendTrace>:
 *
 * @param[in] mask      mask of the trace events to be suspended
 *
 * @api
 */
void chDbgSuspendTrace(uint16_t mask) {
 8007e20:	b510      	push	{r4, lr}
 8007e22:	4604      	mov	r4, r0
 8007e24:	2320      	movs	r3, #32
 8007e26:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8007e2a:	f001 f8f9 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8007e2e:	f7ff fdf7 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chDbgSuspendTraceI(mask);
 8007e32:	4620      	mov	r0, r4
 8007e34:	f7ff ffe4 	bl	8007e00 <chDbgSuspendTraceI>
  _dbg_check_unlock();
 8007e38:	f7ff fe0a 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8007e3c:	f001 f8f8 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007e40:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <chDbgSuspendTrace+0x44>)
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d004      	beq.n	8007e52 <chDbgSuspendTrace+0x32>
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	6899      	ldr	r1, [r3, #8]
 8007e4c:	6893      	ldr	r3, [r2, #8]
 8007e4e:	4299      	cmp	r1, r3
 8007e50:	d303      	bcc.n	8007e5a <chDbgSuspendTrace+0x3a>
 8007e52:	2300      	movs	r3, #0
 8007e54:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8007e58:	bd10      	pop	{r4, pc}
 8007e5a:	4803      	ldr	r0, [pc, #12]	; (8007e68 <chDbgSuspendTrace+0x48>)
 8007e5c:	f7ff fc50 	bl	8007700 <chSysHalt>
 8007e60:	e7f7      	b.n	8007e52 <chDbgSuspendTrace+0x32>
 8007e62:	bf00      	nop
 8007e64:	200050f8 	.word	0x200050f8
 8007e68:	080197d0 	.word	0x080197d0
 8007e6c:	f3af 8000 	nop.w

08007e70 <chDbgResumeTraceI>:
 *
 * @param[in] mask      mask of the trace events to be resumed
 *
 * @iclass
 */
void chDbgResumeTraceI(uint16_t mask) {
 8007e70:	b510      	push	{r4, lr}
 8007e72:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8007e74:	f7ff fe74 	bl	8007b60 <chDbgCheckClassI>

  ch.dbg.trace_buffer.suspended &= ~mask;
 8007e78:	4b03      	ldr	r3, [pc, #12]	; (8007e88 <chDbgResumeTraceI+0x18>)
 8007e7a:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
 8007e7e:	ea20 0004 	bic.w	r0, r0, r4
 8007e82:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
}
 8007e86:	bd10      	pop	{r4, pc}
 8007e88:	200050f8 	.word	0x200050f8
 8007e8c:	f3af 8000 	nop.w

08007e90 <chDbgResumeTrace>:
 *
 * @param[in] mask      mask of the trace events to be resumed
 *
 * @api
 */
void chDbgResumeTrace(uint16_t mask) {
 8007e90:	b510      	push	{r4, lr}
 8007e92:	4604      	mov	r4, r0
 8007e94:	2320      	movs	r3, #32
 8007e96:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8007e9a:	f001 f8c1 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8007e9e:	f7ff fdbf 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chDbgResumeTraceI(mask);
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f7ff ffe4 	bl	8007e70 <chDbgResumeTraceI>
  _dbg_check_unlock();
 8007ea8:	f7ff fdd2 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8007eac:	f001 f8c0 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007eb0:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <chDbgResumeTrace+0x44>)
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d004      	beq.n	8007ec2 <chDbgResumeTrace+0x32>
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	6899      	ldr	r1, [r3, #8]
 8007ebc:	6893      	ldr	r3, [r2, #8]
 8007ebe:	4299      	cmp	r1, r3
 8007ec0:	d303      	bcc.n	8007eca <chDbgResumeTrace+0x3a>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8007ec8:	bd10      	pop	{r4, pc}
 8007eca:	4803      	ldr	r0, [pc, #12]	; (8007ed8 <chDbgResumeTrace+0x48>)
 8007ecc:	f7ff fc18 	bl	8007700 <chSysHalt>
 8007ed0:	e7f7      	b.n	8007ec2 <chDbgResumeTrace+0x32>
 8007ed2:	bf00      	nop
 8007ed4:	200050f8 	.word	0x200050f8
 8007ed8:	080197d0 	.word	0x080197d0
 8007edc:	00000000 	.word	0x00000000

08007ee0 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8007ee0:	4b06      	ldr	r3, [pc, #24]	; (8007efc <_vt_init+0x1c>)
 8007ee2:	f103 0220 	add.w	r2, r3, #32
 8007ee6:	621a      	str	r2, [r3, #32]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8007ee8:	625a      	str	r2, [r3, #36]	; 0x24
  ch.vtlist.delta = (sysinterval_t)-1;
 8007eea:	f04f 30ff 	mov.w	r0, #4294967295
 8007eee:	f04f 31ff 	mov.w	r1, #4294967295
 8007ef2:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8007efa:	4770      	bx	lr
 8007efc:	200050f8 	.word	0x200050f8

08007f00 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	4605      	mov	r5, r0
 8007f06:	4616      	mov	r6, r2
 8007f08:	461f      	mov	r7, r3
 8007f0a:	9c08      	ldr	r4, [sp, #32]
  virtual_timer_t *p;
  sysinterval_t delta;

  chDbgCheckClassI();
 8007f0c:	f7ff fe28 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8007f10:	b11d      	cbz	r5, 8007f1a <chVTDoSetI+0x1a>
 8007f12:	b114      	cbz	r4, 8007f1a <chVTDoSetI+0x1a>
 8007f14:	ea56 0307 	orrs.w	r3, r6, r7
 8007f18:	d102      	bne.n	8007f20 <chVTDoSetI+0x20>
 8007f1a:	4841      	ldr	r0, [pc, #260]	; (8008020 <chVTDoSetI+0x120>)
 8007f1c:	f7ff fbf0 	bl	8007700 <chSysHalt>

  vtp->par = par;
 8007f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f22:	616b      	str	r3, [r5, #20]
  vtp->func = vtfunc;
 8007f24:	612c      	str	r4, [r5, #16]
 8007f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8007f2c:	2f00      	cmp	r7, #0
 8007f2e:	bf08      	it	eq
 8007f30:	2e02      	cmpeq	r6, #2
 8007f32:	d318      	bcc.n	8007f66 <chVTDoSetI+0x66>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8007f34:	4b3b      	ldr	r3, [pc, #236]	; (8008024 <chVTDoSetI+0x124>)
 8007f36:	f853 4f20 	ldr.w	r4, [r3, #32]!
 8007f3a:	429c      	cmp	r4, r3
 8007f3c:	d016      	beq.n	8007f6c <chVTDoSetI+0x6c>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8007f3e:	4b39      	ldr	r3, [pc, #228]	; (8008024 <chVTDoSetI+0x124>)
 8007f40:	6b19      	ldr	r1, [r3, #48]	; 0x30
  return (sysinterval_t)((systime_t)(end - start));
 8007f42:	1a52      	subs	r2, r2, r1
 8007f44:	2300      	movs	r3, #0
 8007f46:	eb16 0802 	adds.w	r8, r6, r2
 8007f4a:	eb47 0903 	adc.w	r9, r7, r3

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8007f4e:	4599      	cmp	r9, r3
 8007f50:	bf08      	it	eq
 8007f52:	4590      	cmpeq	r8, r2
 8007f54:	d222      	bcs.n	8007f9c <chVTDoSetI+0x9c>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8007f56:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007f5a:	ebb8 0802 	subs.w	r8, r8, r2
 8007f5e:	eb69 0903 	sbc.w	r9, r9, r3
      p = p->next;
 8007f62:	6824      	ldr	r4, [r4, #0]
 8007f64:	e035      	b.n	8007fd2 <chVTDoSetI+0xd2>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8007f66:	2602      	movs	r6, #2
 8007f68:	2700      	movs	r7, #0
 8007f6a:	e7e3      	b.n	8007f34 <chVTDoSetI+0x34>
      ch.vtlist.lasttime = now;
 8007f6c:	4b2d      	ldr	r3, [pc, #180]	; (8008024 <chVTDoSetI+0x124>)
 8007f6e:	631a      	str	r2, [r3, #48]	; 0x30
      ch.vtlist.next = vtp;
 8007f70:	621d      	str	r5, [r3, #32]
      ch.vtlist.prev = vtp;
 8007f72:	625d      	str	r5, [r3, #36]	; 0x24
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8007f74:	3320      	adds	r3, #32
 8007f76:	602b      	str	r3, [r5, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8007f78:	606b      	str	r3, [r5, #4]
      vtp->delta = delay;
 8007f7a:	e9c5 6702 	strd	r6, r7, [r5, #8]
      if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 8007f7e:	2f01      	cmp	r7, #1
 8007f80:	bf08      	it	eq
 8007f82:	2e00      	cmpeq	r6, #0
 8007f84:	d307      	bcc.n	8007f96 <chVTDoSetI+0x96>
      port_timer_start_alarm(chTimeAddX(ch.vtlist.lasttime, delay));
 8007f86:	3b20      	subs	r3, #32
 8007f88:	6b18      	ldr	r0, [r3, #48]	; 0x30
        delay = (sysinterval_t)TIME_MAX_SYSTIME;
 8007f8a:	f04f 36ff 	mov.w	r6, #4294967295
  stStartAlarm(time);
 8007f8e:	4430      	add	r0, r6
 8007f90:	f7f8 fac6 	bl	8000520 <stStartAlarm>
 8007f94:	e041      	b.n	800801a <chVTDoSetI+0x11a>
      port_timer_start_alarm(chTimeAddX(ch.vtlist.lasttime, delay));
 8007f96:	4b23      	ldr	r3, [pc, #140]	; (8008024 <chVTDoSetI+0x124>)
 8007f98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f9a:	e7f8      	b.n	8007f8e <chVTDoSetI+0x8e>
    }
    else if (delta < p->delta) {
 8007f9c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007fa0:	4599      	cmp	r9, r3
 8007fa2:	bf08      	it	eq
 8007fa4:	4590      	cmpeq	r8, r2
 8007fa6:	d214      	bcs.n	8007fd2 <chVTDoSetI+0xd2>
      /* A small delay that will become the first element in the delta list
         and next deadline.*/
      deadline_delta = delta;
#if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
      /* The delta could be too large for the physical timer to handle.*/
      if (deadline_delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 8007fa8:	f1b9 0f01 	cmp.w	r9, #1
 8007fac:	bf08      	it	eq
 8007fae:	f1b8 0f00 	cmpeq.w	r8, #0
 8007fb2:	d305      	bcc.n	8007fc0 <chVTDoSetI+0xc0>
        deadline_delta = (sysinterval_t)TIME_MAX_SYSTIME;
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295
  stSetAlarm(time);
 8007fb8:	4408      	add	r0, r1
 8007fba:	f7f8 fad1 	bl	8000560 <stSetAlarm>
 8007fbe:	e008      	b.n	8007fd2 <chVTDoSetI+0xd2>
      deadline_delta = delta;
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	e7f9      	b.n	8007fb8 <chVTDoSetI+0xb8>
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
 8007fc4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007fc8:	ebb8 0802 	subs.w	r8, r8, r2
 8007fcc:	eb69 0903 	sbc.w	r9, r9, r3
    p = p->next;
 8007fd0:	6824      	ldr	r4, [r4, #0]
  while (p->delta < delta) {
 8007fd2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007fd6:	454b      	cmp	r3, r9
 8007fd8:	bf08      	it	eq
 8007fda:	4542      	cmpeq	r2, r8
 8007fdc:	d205      	bcs.n	8007fea <chVTDoSetI+0xea>
    chDbgAssert(p != vtp, "timer already armed");
 8007fde:	42ac      	cmp	r4, r5
 8007fe0:	d1f0      	bne.n	8007fc4 <chVTDoSetI+0xc4>
 8007fe2:	480f      	ldr	r0, [pc, #60]	; (8008020 <chVTDoSetI+0x120>)
 8007fe4:	f7ff fb8c 	bl	8007700 <chSysHalt>
 8007fe8:	e7ec      	b.n	8007fc4 <chVTDoSetI+0xc4>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 8007fea:	602c      	str	r4, [r5, #0]
  vtp->prev = vtp->next->prev;
 8007fec:	6863      	ldr	r3, [r4, #4]
 8007fee:	606b      	str	r3, [r5, #4]
  vtp->prev->next = vtp;
 8007ff0:	601d      	str	r5, [r3, #0]
  p->prev = vtp;
 8007ff2:	6065      	str	r5, [r4, #4]
  vtp->delta = delta;
 8007ff4:	e9c5 8902 	strd	r8, r9, [r5, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8007ff8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007ffc:	ebb2 0208 	subs.w	r2, r2, r8
 8008000:	eb63 0309 	sbc.w	r3, r3, r9
 8008004:	4616      	mov	r6, r2
 8008006:	461f      	mov	r7, r3
 8008008:	e9c4 6702 	strd	r6, r7, [r4, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <chVTDoSetI+0x124>)
 800800e:	f04f 30ff 	mov.w	r0, #4294967295
 8008012:	f04f 31ff 	mov.w	r1, #4294967295
 8008016:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
}
 800801a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800801e:	bf00      	nop
 8008020:	080197dc 	.word	0x080197dc
 8008024:	200050f8 	.word	0x200050f8
 8008028:	f3af 8000 	nop.w
 800802c:	f3af 8000 	nop.w

08008030 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8008030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008032:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8008034:	f7ff fd94 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
 8008038:	b1dc      	cbz	r4, 8008072 <chVTDoResetI+0x42>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	b1eb      	cbz	r3, 800807a <chVTDoResetI+0x4a>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800803e:	4b32      	ldr	r3, [pc, #200]	; (8008108 <chVTDoResetI+0xd8>)
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	42a3      	cmp	r3, r4
 8008044:	d01d      	beq.n	8008082 <chVTDoResetI+0x52>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8008046:	6863      	ldr	r3, [r4, #4]
 8008048:	6822      	ldr	r2, [r4, #0]
 800804a:	601a      	str	r2, [r3, #0]
    vtp->next->prev = vtp->prev;
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	6862      	ldr	r2, [r4, #4]
 8008050:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8008052:	2300      	movs	r3, #0
 8008054:	6123      	str	r3, [r4, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	4a2c      	ldr	r2, [pc, #176]	; (800810c <chVTDoResetI+0xdc>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d008      	beq.n	8008070 <chVTDoResetI+0x40>
      vtp->next->delta += vtp->delta;
 800805e:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
 8008062:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008066:	1906      	adds	r6, r0, r4
 8008068:	eb41 0705 	adc.w	r7, r1, r5
 800806c:	e9c3 6702 	strd	r6, r7, [r3, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8008070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(vtp != NULL);
 8008072:	4827      	ldr	r0, [pc, #156]	; (8008110 <chVTDoResetI+0xe0>)
 8008074:	f7ff fb44 	bl	8007700 <chSysHalt>
 8008078:	e7df      	b.n	800803a <chVTDoResetI+0xa>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 800807a:	4825      	ldr	r0, [pc, #148]	; (8008110 <chVTDoResetI+0xe0>)
 800807c:	f7ff fb40 	bl	8007700 <chSysHalt>
 8008080:	e7dd      	b.n	800803e <chVTDoResetI+0xe>
  ch.vtlist.next = vtp->next;
 8008082:	6821      	ldr	r1, [r4, #0]
 8008084:	4a20      	ldr	r2, [pc, #128]	; (8008108 <chVTDoResetI+0xd8>)
 8008086:	4613      	mov	r3, r2
 8008088:	f843 1f20 	str.w	r1, [r3, #32]!
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 800808c:	604b      	str	r3, [r1, #4]
  vtp->func = NULL;
 800808e:	2100      	movs	r1, #0
 8008090:	6121      	str	r1, [r4, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8008092:	6a12      	ldr	r2, [r2, #32]
 8008094:	429a      	cmp	r2, r3
 8008096:	d024      	beq.n	80080e2 <chVTDoResetI+0xb2>
  ch.vtlist.next->delta += vtp->delta;
 8008098:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
 800809c:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 80080a0:	1906      	adds	r6, r0, r4
 80080a2:	eb41 0705 	adc.w	r7, r1, r5
 80080a6:	e9c2 6702 	strd	r6, r7, [r2, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80080aa:	4917      	ldr	r1, [pc, #92]	; (8008108 <chVTDoResetI+0xd8>)
 80080ac:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80080ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080b4:	1b92      	subs	r2, r2, r6
 80080b6:	2300      	movs	r3, #0
  if (nowdelta >= ch.vtlist.next->delta) {
 80080b8:	6a09      	ldr	r1, [r1, #32]
 80080ba:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
 80080be:	42ab      	cmp	r3, r5
 80080c0:	bf08      	it	eq
 80080c2:	42a2      	cmpeq	r2, r4
 80080c4:	d2d4      	bcs.n	8008070 <chVTDoResetI+0x40>
  delta = ch.vtlist.next->delta - nowdelta;
 80080c6:	1aa0      	subs	r0, r4, r2
 80080c8:	eb65 0103 	sbc.w	r1, r5, r3
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80080cc:	2900      	cmp	r1, #0
 80080ce:	bf08      	it	eq
 80080d0:	2802      	cmpeq	r0, #2
 80080d2:	d309      	bcc.n	80080e8 <chVTDoResetI+0xb8>
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 80080d4:	2d01      	cmp	r5, #1
 80080d6:	bf08      	it	eq
 80080d8:	2c00      	cmpeq	r4, #0
 80080da:	d308      	bcc.n	80080ee <chVTDoResetI+0xbe>
      delta = (sysinterval_t)TIME_MAX_SYSTIME;
 80080dc:	f04f 34ff 	mov.w	r4, #4294967295
 80080e0:	e009      	b.n	80080f6 <chVTDoResetI+0xc6>
  stStopAlarm();
 80080e2:	f7f8 fa35 	bl	8000550 <stStopAlarm>
 80080e6:	e7c3      	b.n	8008070 <chVTDoResetI+0x40>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80080e8:	1c94      	adds	r4, r2, #2
 80080ea:	f143 0500 	adc.w	r5, r3, #0
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 80080ee:	2d01      	cmp	r5, #1
 80080f0:	bf08      	it	eq
 80080f2:	2c00      	cmpeq	r4, #0
 80080f4:	d203      	bcs.n	80080fe <chVTDoResetI+0xce>
  stSetAlarm(time);
 80080f6:	1930      	adds	r0, r6, r4
 80080f8:	f7f8 fa32 	bl	8000560 <stSetAlarm>
 80080fc:	e7b8      	b.n	8008070 <chVTDoResetI+0x40>
 80080fe:	4805      	ldr	r0, [pc, #20]	; (8008114 <chVTDoResetI+0xe4>)
 8008100:	f7ff fafe 	bl	8007700 <chSysHalt>
 8008104:	e7f7      	b.n	80080f6 <chVTDoResetI+0xc6>
 8008106:	bf00      	nop
 8008108:	200050f8 	.word	0x200050f8
 800810c:	20005118 	.word	0x20005118
 8008110:	080197e8 	.word	0x080197e8
 8008114:	080197f8 	.word	0x080197f8
	...

08008120 <_scheduler_init>:
  tqp->next = (thread_t *)tqp;
 8008120:	4b03      	ldr	r3, [pc, #12]	; (8008130 <_scheduler_init+0x10>)
 8008122:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8008124:	605b      	str	r3, [r3, #4]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 8008126:	2200      	movs	r2, #0
 8008128:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 800812a:	611b      	str	r3, [r3, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 800812c:	615b      	str	r3, [r3, #20]
#endif
}
 800812e:	4770      	bx	lr
 8008130:	200050f8 	.word	0x200050f8
 8008134:	f3af 8000 	nop.w
 8008138:	f3af 8000 	nop.w
 800813c:	f3af 8000 	nop.w

08008140 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8008140:	b510      	push	{r4, lr}
 8008142:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 8008144:	f7ff fd0c 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8008148:	b1bc      	cbz	r4, 800817a <chSchReadyI+0x3a>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 800814a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800814e:	b10b      	cbz	r3, 8008154 <chSchReadyI+0x14>
 8008150:	2b0f      	cmp	r3, #15
 8008152:	d102      	bne.n	800815a <chSchReadyI+0x1a>
 8008154:	480b      	ldr	r0, [pc, #44]	; (8008184 <chSchReadyI+0x44>)
 8008156:	f7ff fad3 	bl	8007700 <chSysHalt>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 800815a:	2300      	movs	r3, #0
 800815c:	f884 3020 	strb.w	r3, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8008160:	4b09      	ldr	r3, [pc, #36]	; (8008188 <chSchReadyI+0x48>)
  do {
    cp = cp->queue.next;
 8008162:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8008164:	6899      	ldr	r1, [r3, #8]
 8008166:	68a2      	ldr	r2, [r4, #8]
 8008168:	4291      	cmp	r1, r2
 800816a:	d2fa      	bcs.n	8008162 <chSchReadyI+0x22>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 800816c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8008172:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8008174:	605c      	str	r4, [r3, #4]

  return tp;
}
 8008176:	4620      	mov	r0, r4
 8008178:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 800817a:	4802      	ldr	r0, [pc, #8]	; (8008184 <chSchReadyI+0x44>)
 800817c:	f7ff fac0 	bl	8007700 <chSysHalt>
 8008180:	e7e3      	b.n	800814a <chSchReadyI+0xa>
 8008182:	bf00      	nop
 8008184:	08019804 	.word	0x08019804
 8008188:	200050f8 	.word	0x200050f8
 800818c:	f3af 8000 	nop.w

08008190 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4604      	mov	r4, r0
 8008194:	2320      	movs	r3, #32
 8008196:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800819a:	f000 ff51 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800819e:	f7ff fc6f 	bl	8007a80 <_dbg_check_lock_from_isr>
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 80081a2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80081a6:	2b07      	cmp	r3, #7
 80081a8:	d81d      	bhi.n	80081e6 <wakeup+0x56>
 80081aa:	e8df f003 	tbb	[pc, r3]
 80081ae:	1c04      	.short	0x1c04
 80081b0:	10160c1c 	.word	0x10160c1c
 80081b4:	161c      	.short	0x161c
  _dbg_check_unlock_from_isr();
 80081b6:	f7ff fc7b 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80081ba:	f000 ff49 	bl	8009050 <_stats_stop_measure_crit_isr>
 80081be:	2300      	movs	r3, #0
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	e01c      	b.n	8008200 <wakeup+0x70>
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 80081c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
    break;
 80081cc:	e00b      	b.n	80081e6 <wakeup+0x56>
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 80081ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 80081d0:	f7ff fcc6 	bl	8007b60 <chDbgCheckClassI>

  sp->cnt++;
 80081d4:	68ab      	ldr	r3, [r5, #8]
 80081d6:	3301      	adds	r3, #1
 80081d8:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80081da:	6863      	ldr	r3, [r4, #4]
 80081dc:	6822      	ldr	r2, [r4, #0]
 80081de:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	6862      	ldr	r2, [r4, #4]
 80081e4:	605a      	str	r2, [r3, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ea:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 80081ec:	4620      	mov	r0, r4
 80081ee:	f7ff ffa7 	bl	8008140 <chSchReadyI>
  _dbg_check_unlock_from_isr();
 80081f2:	f7ff fc5d 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80081f6:	f000 ff2b 	bl	8009050 <_stats_stop_measure_crit_isr>
 80081fa:	2300      	movs	r3, #0
 80081fc:	f383 8811 	msr	BASEPRI, r3
  chSysUnlockFromISR();
}
 8008200:	bd38      	pop	{r3, r4, r5, pc}
 8008202:	bf00      	nop
 8008204:	f3af 8000 	nop.w
 8008208:	f3af 8000 	nop.w
 800820c:	f3af 8000 	nop.w

08008210 <chSchReadyAheadI>:
thread_t *chSchReadyAheadI(thread_t *tp) {
 8008210:	b510      	push	{r4, lr}
 8008212:	4604      	mov	r4, r0
  chDbgCheckClassI();
 8008214:	f7ff fca4 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8008218:	b1bc      	cbz	r4, 800824a <chSchReadyAheadI+0x3a>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 800821a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800821e:	b10b      	cbz	r3, 8008224 <chSchReadyAheadI+0x14>
 8008220:	2b0f      	cmp	r3, #15
 8008222:	d102      	bne.n	800822a <chSchReadyAheadI+0x1a>
 8008224:	480b      	ldr	r0, [pc, #44]	; (8008254 <chSchReadyAheadI+0x44>)
 8008226:	f7ff fa6b 	bl	8007700 <chSysHalt>
  tp->state = CH_STATE_READY;
 800822a:	2300      	movs	r3, #0
 800822c:	f884 3020 	strb.w	r3, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <chSchReadyAheadI+0x48>)
    cp = cp->queue.next;
 8008232:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8008234:	6899      	ldr	r1, [r3, #8]
 8008236:	68a2      	ldr	r2, [r4, #8]
 8008238:	4291      	cmp	r1, r2
 800823a:	d8fa      	bhi.n	8008232 <chSchReadyAheadI+0x22>
  tp->queue.next             = cp;
 800823c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8008242:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8008244:	605c      	str	r4, [r3, #4]
}
 8008246:	4620      	mov	r0, r4
 8008248:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 800824a:	4802      	ldr	r0, [pc, #8]	; (8008254 <chSchReadyAheadI+0x44>)
 800824c:	f7ff fa58 	bl	8007700 <chSysHalt>
 8008250:	e7e3      	b.n	800821a <chSchReadyAheadI+0xa>
 8008252:	bf00      	nop
 8008254:	08019810 	.word	0x08019810
 8008258:	200050f8 	.word	0x200050f8
 800825c:	f3af 8000 	nop.w

08008260 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8008260:	b570      	push	{r4, r5, r6, lr}
 8008262:	4606      	mov	r6, r0
  thread_t *otp = currp;
 8008264:	4c12      	ldr	r4, [pc, #72]	; (80082b0 <chSchGoSleepS+0x50>)
 8008266:	69a5      	ldr	r5, [r4, #24]
  chDbgCheckClassS();
 8008268:	f7ff fc92 	bl	8007b90 <chDbgCheckClassS>
  otp->state = newstate;
 800826c:	f885 6020 	strb.w	r6, [r5, #32]
  thread_t *tp = tqp->next;
 8008270:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8008272:	6803      	ldr	r3, [r0, #0]
 8008274:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008276:	605c      	str	r4, [r3, #4]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8008278:	61a0      	str	r0, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 800827a:	2301      	movs	r3, #1
 800827c:	f880 3020 	strb.w	r3, [r0, #32]
  chSysSwitch(currp, otp);
 8008280:	4629      	mov	r1, r5
 8008282:	f7ff fcd5 	bl	8007c30 <_trace_switch>
 8008286:	4629      	mov	r1, r5
 8008288:	69a0      	ldr	r0, [r4, #24]
 800828a:	f000 feb1 	bl	8008ff0 <_stats_ctxswc>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800828e:	f3ef 8309 	mrs	r3, PSP
 8008292:	3b24      	subs	r3, #36	; 0x24
 8008294:	69ea      	ldr	r2, [r5, #28]
 8008296:	4293      	cmp	r3, r2
 8008298:	d305      	bcc.n	80082a6 <chSchGoSleepS+0x46>
 800829a:	4629      	mov	r1, r5
 800829c:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <chSchGoSleepS+0x50>)
 800829e:	6998      	ldr	r0, [r3, #24]
 80082a0:	f7f8 f81e 	bl	80002e0 <_port_switch>
}
 80082a4:	bd70      	pop	{r4, r5, r6, pc}
  chSysSwitch(currp, otp);
 80082a6:	4803      	ldr	r0, [pc, #12]	; (80082b4 <chSchGoSleepS+0x54>)
 80082a8:	f7ff fa2a 	bl	8007700 <chSysHalt>
 80082ac:	e7f5      	b.n	800829a <chSchGoSleepS+0x3a>
 80082ae:	bf00      	nop
 80082b0:	200050f8 	.word	0x200050f8
 80082b4:	0801a518 	.word	0x0801a518
 80082b8:	f3af 8000 	nop.w
 80082bc:	f3af 8000 	nop.w

080082c0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	4606      	mov	r6, r0
 80082c6:	4614      	mov	r4, r2
 80082c8:	461d      	mov	r5, r3

  chDbgCheckClassS();
 80082ca:	f7ff fc61 	bl	8007b90 <chDbgCheckClassS>

  if (TIME_INFINITE != timeout) {
 80082ce:	f1b5 3fff 	cmp.w	r5, #4294967295
 80082d2:	bf08      	it	eq
 80082d4:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 80082d8:	d018      	beq.n	800830c <chSchGoSleepTimeoutS+0x4c>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 80082da:	4b0e      	ldr	r3, [pc, #56]	; (8008314 <chSchGoSleepTimeoutS+0x54>)
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	4b0d      	ldr	r3, [pc, #52]	; (8008318 <chSchGoSleepTimeoutS+0x58>)
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	4622      	mov	r2, r4
 80082e6:	462b      	mov	r3, r5
 80082e8:	a802      	add	r0, sp, #8
 80082ea:	f7ff fe09 	bl	8007f00 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7ff ffb6 	bl	8008260 <chSchGoSleepS>
  chDbgCheckClassI();
 80082f4:	f7ff fc34 	bl	8007b60 <chDbgCheckClassI>
  return (bool)(vtp->func != NULL);
 80082f8:	9b06      	ldr	r3, [sp, #24]
    if (chVTIsArmedI(&vt)) {
 80082fa:	b113      	cbz	r3, 8008302 <chSchGoSleepTimeoutS+0x42>
      chVTDoResetI(&vt);
 80082fc:	a802      	add	r0, sp, #8
 80082fe:	f7ff fe97 	bl	8008030 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 8008302:	4b04      	ldr	r3, [pc, #16]	; (8008314 <chSchGoSleepTimeoutS+0x54>)
 8008304:	699b      	ldr	r3, [r3, #24]
}
 8008306:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008308:	b008      	add	sp, #32
 800830a:	bd70      	pop	{r4, r5, r6, pc}
    chSchGoSleepS(newstate);
 800830c:	4630      	mov	r0, r6
 800830e:	f7ff ffa7 	bl	8008260 <chSchGoSleepS>
 8008312:	e7f6      	b.n	8008302 <chSchGoSleepTimeoutS+0x42>
 8008314:	200050f8 	.word	0x200050f8
 8008318:	08008191 	.word	0x08008191
 800831c:	f3af 8000 	nop.w

08008320 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	4604      	mov	r4, r0
 8008324:	460f      	mov	r7, r1
  thread_t *otp = currp;
 8008326:	4d1c      	ldr	r5, [pc, #112]	; (8008398 <chSchWakeupS+0x78>)
 8008328:	69ae      	ldr	r6, [r5, #24]

  chDbgCheckClassS();
 800832a:	f7ff fc31 	bl	8007b90 <chDbgCheckClassS>

  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800832e:	682b      	ldr	r3, [r5, #0]
 8008330:	42ab      	cmp	r3, r5
 8008332:	d004      	beq.n	800833e <chSchWakeupS+0x1e>
 8008334:	69aa      	ldr	r2, [r5, #24]
 8008336:	6892      	ldr	r2, [r2, #8]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	429a      	cmp	r2, r3
 800833c:	d320      	bcc.n	8008380 <chSchWakeupS+0x60>
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 800833e:	6267      	str	r7, [r4, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8008340:	68a2      	ldr	r2, [r4, #8]
 8008342:	68b3      	ldr	r3, [r6, #8]
 8008344:	429a      	cmp	r2, r3
 8008346:	d91f      	bls.n	8008388 <chSchWakeupS+0x68>
    (void) chSchReadyI(ntp);
  }
  else {
    otp = chSchReadyAheadI(otp);
 8008348:	4630      	mov	r0, r6
 800834a:	f7ff ff61 	bl	8008210 <chSchReadyAheadI>
 800834e:	4605      	mov	r5, r0
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8008350:	4b11      	ldr	r3, [pc, #68]	; (8008398 <chSchWakeupS+0x78>)
 8008352:	619c      	str	r4, [r3, #24]
    ntp->state = CH_STATE_CURRENT;
 8008354:	2301      	movs	r3, #1
 8008356:	f884 3020 	strb.w	r3, [r4, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 800835a:	4601      	mov	r1, r0
 800835c:	4620      	mov	r0, r4
 800835e:	f7ff fc67 	bl	8007c30 <_trace_switch>
 8008362:	4629      	mov	r1, r5
 8008364:	4620      	mov	r0, r4
 8008366:	f000 fe43 	bl	8008ff0 <_stats_ctxswc>
 800836a:	f3ef 8309 	mrs	r3, PSP
 800836e:	3b24      	subs	r3, #36	; 0x24
 8008370:	69ea      	ldr	r2, [r5, #28]
 8008372:	4293      	cmp	r3, r2
 8008374:	d30c      	bcc.n	8008390 <chSchWakeupS+0x70>
 8008376:	4629      	mov	r1, r5
 8008378:	4620      	mov	r0, r4
 800837a:	f7f7 ffb1 	bl	80002e0 <_port_switch>
  }
}
 800837e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008380:	4806      	ldr	r0, [pc, #24]	; (800839c <chSchWakeupS+0x7c>)
 8008382:	f7ff f9bd 	bl	8007700 <chSysHalt>
 8008386:	e7da      	b.n	800833e <chSchWakeupS+0x1e>
    (void) chSchReadyI(ntp);
 8008388:	4620      	mov	r0, r4
 800838a:	f7ff fed9 	bl	8008140 <chSchReadyI>
 800838e:	e7f6      	b.n	800837e <chSchWakeupS+0x5e>
    chSysSwitch(ntp, otp);
 8008390:	4803      	ldr	r0, [pc, #12]	; (80083a0 <chSchWakeupS+0x80>)
 8008392:	f7ff f9b5 	bl	8007700 <chSysHalt>
 8008396:	e7ee      	b.n	8008376 <chSchWakeupS+0x56>
 8008398:	200050f8 	.word	0x200050f8
 800839c:	08019824 	.word	0x08019824
 80083a0:	0801a518 	.word	0x0801a518
 80083a4:	f3af 8000 	nop.w
 80083a8:	f3af 8000 	nop.w
 80083ac:	f3af 8000 	nop.w

080083b0 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80083b0:	4b04      	ldr	r3, [pc, #16]	; (80083c4 <chSchIsPreemptionRequired+0x14>)
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	6890      	ldr	r0, [r2, #8]
  tprio_t p2 = currp->prio;
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	689b      	ldr	r3, [r3, #8]
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 80083ba:	4298      	cmp	r0, r3
 80083bc:	bf94      	ite	ls
 80083be:	2000      	movls	r0, #0
 80083c0:	2001      	movhi	r0, #1
 80083c2:	4770      	bx	lr
 80083c4:	200050f8 	.word	0x200050f8
 80083c8:	f3af 8000 	nop.w
 80083cc:	f3af 8000 	nop.w

080083d0 <chSchDoRescheduleBehind>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 80083d0:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 80083d2:	4c12      	ldr	r4, [pc, #72]	; (800841c <chSchDoRescheduleBehind+0x4c>)
 80083d4:	69a0      	ldr	r0, [r4, #24]
  thread_t *tp = tqp->next;
 80083d6:	6823      	ldr	r3, [r4, #0]
  tqp->next             = tp->queue.next;
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80083dc:	6054      	str	r4, [r2, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 80083de:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 2020 	strb.w	r2, [r3, #32]
  /* It went behind peers so it gets a new time quantum.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);
 80083e6:	f7ff feab 	bl	8008140 <chSchReadyI>
 80083ea:	4605      	mov	r5, r0

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80083ec:	4601      	mov	r1, r0
 80083ee:	69a0      	ldr	r0, [r4, #24]
 80083f0:	f7ff fc1e 	bl	8007c30 <_trace_switch>
 80083f4:	4629      	mov	r1, r5
 80083f6:	69a0      	ldr	r0, [r4, #24]
 80083f8:	f000 fdfa 	bl	8008ff0 <_stats_ctxswc>
 80083fc:	f3ef 8309 	mrs	r3, PSP
 8008400:	3b24      	subs	r3, #36	; 0x24
 8008402:	69ea      	ldr	r2, [r5, #28]
 8008404:	4293      	cmp	r3, r2
 8008406:	d305      	bcc.n	8008414 <chSchDoRescheduleBehind+0x44>
 8008408:	4629      	mov	r1, r5
 800840a:	4b04      	ldr	r3, [pc, #16]	; (800841c <chSchDoRescheduleBehind+0x4c>)
 800840c:	6998      	ldr	r0, [r3, #24]
 800840e:	f7f7 ff67 	bl	80002e0 <_port_switch>
}
 8008412:	bd38      	pop	{r3, r4, r5, pc}
  chSysSwitch(currp, otp);
 8008414:	4802      	ldr	r0, [pc, #8]	; (8008420 <chSchDoRescheduleBehind+0x50>)
 8008416:	f7ff f973 	bl	8007700 <chSysHalt>
 800841a:	e7f5      	b.n	8008408 <chSchDoRescheduleBehind+0x38>
 800841c:	200050f8 	.word	0x200050f8
 8008420:	0801a518 	.word	0x0801a518
 8008424:	f3af 8000 	nop.w
 8008428:	f3af 8000 	nop.w
 800842c:	f3af 8000 	nop.w

08008430 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8008430:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8008432:	4c12      	ldr	r4, [pc, #72]	; (800847c <chSchDoRescheduleAhead+0x4c>)
 8008434:	69a0      	ldr	r0, [r4, #24]
  thread_t *tp = tqp->next;
 8008436:	6823      	ldr	r3, [r4, #0]
  tqp->next             = tp->queue.next;
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800843c:	6054      	str	r4, [r2, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 800843e:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2020 	strb.w	r2, [r3, #32]
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 8008446:	f7ff fee3 	bl	8008210 <chSchReadyAheadI>
 800844a:	4605      	mov	r5, r0

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800844c:	4601      	mov	r1, r0
 800844e:	69a0      	ldr	r0, [r4, #24]
 8008450:	f7ff fbee 	bl	8007c30 <_trace_switch>
 8008454:	4629      	mov	r1, r5
 8008456:	69a0      	ldr	r0, [r4, #24]
 8008458:	f000 fdca 	bl	8008ff0 <_stats_ctxswc>
 800845c:	f3ef 8309 	mrs	r3, PSP
 8008460:	3b24      	subs	r3, #36	; 0x24
 8008462:	69ea      	ldr	r2, [r5, #28]
 8008464:	4293      	cmp	r3, r2
 8008466:	d305      	bcc.n	8008474 <chSchDoRescheduleAhead+0x44>
 8008468:	4629      	mov	r1, r5
 800846a:	4b04      	ldr	r3, [pc, #16]	; (800847c <chSchDoRescheduleAhead+0x4c>)
 800846c:	6998      	ldr	r0, [r3, #24]
 800846e:	f7f7 ff37 	bl	80002e0 <_port_switch>
}
 8008472:	bd38      	pop	{r3, r4, r5, pc}
  chSysSwitch(currp, otp);
 8008474:	4802      	ldr	r0, [pc, #8]	; (8008480 <chSchDoRescheduleAhead+0x50>)
 8008476:	f7ff f943 	bl	8007700 <chSysHalt>
 800847a:	e7f5      	b.n	8008468 <chSchDoRescheduleAhead+0x38>
 800847c:	200050f8 	.word	0x200050f8
 8008480:	0801a518 	.word	0x0801a518
 8008484:	f3af 8000 	nop.w
 8008488:	f3af 8000 	nop.w
 800848c:	f3af 8000 	nop.w

08008490 <chSchRescheduleS>:
void chSchRescheduleS(void) {
 8008490:	b508      	push	{r3, lr}
  chDbgCheckClassS();
 8008492:	f7ff fb7d 	bl	8007b90 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8008496:	f7ff fb63 	bl	8007b60 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
 800849a:	4b05      	ldr	r3, [pc, #20]	; (80084b0 <chSchRescheduleS+0x20>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	6892      	ldr	r2, [r2, #8]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	689b      	ldr	r3, [r3, #8]
  if (chSchIsRescRequiredI()) {
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d800      	bhi.n	80084aa <chSchRescheduleS+0x1a>
}
 80084a8:	bd08      	pop	{r3, pc}
    chSchDoRescheduleAhead();
 80084aa:	f7ff ffc1 	bl	8008430 <chSchDoRescheduleAhead>
}
 80084ae:	e7fb      	b.n	80084a8 <chSchRescheduleS+0x18>
 80084b0:	200050f8 	.word	0x200050f8
 80084b4:	f3af 8000 	nop.w
 80084b8:	f3af 8000 	nop.w
 80084bc:	f3af 8000 	nop.w

080084c0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80084c0:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 80084c2:	4c12      	ldr	r4, [pc, #72]	; (800850c <chSchDoReschedule+0x4c>)
 80084c4:	69a0      	ldr	r0, [r4, #24]
  thread_t *tp = tqp->next;
 80084c6:	6823      	ldr	r3, [r4, #0]
  tqp->next             = tp->queue.next;
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80084cc:	6054      	str	r4, [r2, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 80084ce:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2020 	strb.w	r2, [r3, #32]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 80084d6:	f7ff fe9b 	bl	8008210 <chSchReadyAheadI>
 80084da:	4605      	mov	r5, r0
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80084dc:	4601      	mov	r1, r0
 80084de:	69a0      	ldr	r0, [r4, #24]
 80084e0:	f7ff fba6 	bl	8007c30 <_trace_switch>
 80084e4:	4629      	mov	r1, r5
 80084e6:	69a0      	ldr	r0, [r4, #24]
 80084e8:	f000 fd82 	bl	8008ff0 <_stats_ctxswc>
 80084ec:	f3ef 8309 	mrs	r3, PSP
 80084f0:	3b24      	subs	r3, #36	; 0x24
 80084f2:	69ea      	ldr	r2, [r5, #28]
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d305      	bcc.n	8008504 <chSchDoReschedule+0x44>
 80084f8:	4629      	mov	r1, r5
 80084fa:	4b04      	ldr	r3, [pc, #16]	; (800850c <chSchDoReschedule+0x4c>)
 80084fc:	6998      	ldr	r0, [r3, #24]
 80084fe:	f7f7 feef 	bl	80002e0 <_port_switch>
}
 8008502:	bd38      	pop	{r3, r4, r5, pc}
  chSysSwitch(currp, otp);
 8008504:	4802      	ldr	r0, [pc, #8]	; (8008510 <chSchDoReschedule+0x50>)
 8008506:	f7ff f8fb 	bl	8007700 <chSysHalt>
 800850a:	e7f5      	b.n	80084f8 <chSchDoReschedule+0x38>
 800850c:	200050f8 	.word	0x200050f8
 8008510:	0801a518 	.word	0x0801a518
	...

08008520 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 8008520:	b510      	push	{r4, lr}
 8008522:	4604      	mov	r4, r0

  tp->prio      = prio;
 8008524:	6082      	str	r2, [r0, #8]
  tp->state     = CH_STATE_WTSTART;
 8008526:	2302      	movs	r3, #2
 8008528:	f880 3020 	strb.w	r3, [r0, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 800852c:	2300      	movs	r3, #0
 800852e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8008532:	63c2      	str	r2, [r0, #60]	; 0x3c
  tp->mtxlist   = NULL;
 8008534:	6383      	str	r3, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8008536:	6343      	str	r3, [r0, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8008538:	2301      	movs	r3, #1
 800853a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  tp->name      = name;
 800853e:	6181      	str	r1, [r0, #24]
  REG_INSERT(tp);
 8008540:	4b08      	ldr	r3, [pc, #32]	; (8008564 <_thread_init+0x44>)
 8008542:	6103      	str	r3, [r0, #16]
 8008544:	695a      	ldr	r2, [r3, #20]
 8008546:	6142      	str	r2, [r0, #20]
 8008548:	6110      	str	r0, [r2, #16]
 800854a:	6158      	str	r0, [r3, #20]
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 800854c:	f100 0328 	add.w	r3, r0, #40	; 0x28
  tlp->next = (thread_t *)tlp;
 8008550:	6283      	str	r3, [r0, #40]	; 0x28
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 8008552:	f100 032c 	add.w	r3, r0, #44	; 0x2c
  tqp->next = (thread_t *)tqp;
 8008556:	62c3      	str	r3, [r0, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 8008558:	6303      	str	r3, [r0, #48]	; 0x30
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
 800855a:	3048      	adds	r0, #72	; 0x48
 800855c:	f000 fca8 	bl	8008eb0 <chTMObjectInit>
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
}
 8008560:	4620      	mov	r0, r4
 8008562:	bd10      	pop	{r4, pc}
 8008564:	200050f8 	.word	0x200050f8
 8008568:	f3af 8000 	nop.w
 800856c:	f3af 8000 	nop.w

08008570 <_thread_memfill>:
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8008570:	e001      	b.n	8008576 <_thread_memfill+0x6>
    *startp++ = v;
 8008572:	7002      	strb	r2, [r0, #0]
 8008574:	3001      	adds	r0, #1
  while (startp < endp) {
 8008576:	4288      	cmp	r0, r1
 8008578:	d3fb      	bcc.n	8008572 <_thread_memfill+0x2>
  }
}
 800857a:	4770      	bx	lr
 800857c:	f3af 8000 	nop.w

08008580 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8008580:	b510      	push	{r4, lr}
 8008582:	4604      	mov	r4, r0
  thread_t *tp;

  chDbgCheckClassI();
 8008584:	f7ff faec 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(tdp != NULL);
 8008588:	b374      	cbz	r4, 80085e8 <chThdCreateSuspendedI+0x68>
  chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 800858a:	6863      	ldr	r3, [r4, #4]
 800858c:	f013 0f07 	tst.w	r3, #7
 8008590:	d108      	bne.n	80085a4 <chThdCreateSuspendedI+0x24>
 8008592:	68a2      	ldr	r2, [r4, #8]
 8008594:	f012 0f07 	tst.w	r2, #7
 8008598:	d104      	bne.n	80085a4 <chThdCreateSuspendedI+0x24>
 800859a:	4293      	cmp	r3, r2
 800859c:	d202      	bcs.n	80085a4 <chThdCreateSuspendedI+0x24>
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2be7      	cmp	r3, #231	; 0xe7
 80085a2:	d802      	bhi.n	80085aa <chThdCreateSuspendedI+0x2a>
 80085a4:	4812      	ldr	r0, [pc, #72]	; (80085f0 <chThdCreateSuspendedI+0x70>)
 80085a6:	f7ff f8ab 	bl	8007700 <chSysHalt>
             MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
             (tdp->wend > tdp->wbase) &&
             (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
 80085aa:	68e3      	ldr	r3, [r4, #12]
 80085ac:	2bff      	cmp	r3, #255	; 0xff
 80085ae:	d801      	bhi.n	80085b4 <chThdCreateSuspendedI+0x34>
 80085b0:	6923      	ldr	r3, [r4, #16]
 80085b2:	b913      	cbnz	r3, 80085ba <chThdCreateSuspendedI+0x3a>
 80085b4:	480e      	ldr	r0, [pc, #56]	; (80085f0 <chThdCreateSuspendedI+0x70>)
 80085b6:	f7ff f8a3 	bl	8007700 <chSysHalt>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80085ba:	68a0      	ldr	r0, [r4, #8]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 80085bc:	6863      	ldr	r3, [r4, #4]
 80085be:	f840 3c44 	str.w	r3, [r0, #-68]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80085c2:	f1a0 0384 	sub.w	r3, r0, #132	; 0x84
 80085c6:	f840 3c54 	str.w	r3, [r0, #-84]
 80085ca:	6922      	ldr	r2, [r4, #16]
 80085cc:	f840 2c84 	str.w	r2, [r0, #-132]
 80085d0:	6962      	ldr	r2, [r4, #20]
 80085d2:	f840 2c80 	str.w	r2, [r0, #-128]
 80085d6:	4a07      	ldr	r2, [pc, #28]	; (80085f4 <chThdCreateSuspendedI+0x74>)
 80085d8:	f840 2c64 	str.w	r2, [r0, #-100]

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 80085dc:	68e2      	ldr	r2, [r4, #12]
 80085de:	6821      	ldr	r1, [r4, #0]
 80085e0:	3860      	subs	r0, #96	; 0x60
 80085e2:	f7ff ff9d 	bl	8008520 <_thread_init>
}
 80085e6:	bd10      	pop	{r4, pc}
  chDbgCheck(tdp != NULL);
 80085e8:	4801      	ldr	r0, [pc, #4]	; (80085f0 <chThdCreateSuspendedI+0x70>)
 80085ea:	f7ff f889 	bl	8007700 <chSysHalt>
 80085ee:	e7cc      	b.n	800858a <chThdCreateSuspendedI+0xa>
 80085f0:	08019834 	.word	0x08019834
 80085f4:	080002f1 	.word	0x080002f1
 80085f8:	f3af 8000 	nop.w
 80085fc:	f3af 8000 	nop.w

08008600 <chThdCreateSuspended>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp) {
 8008600:	b510      	push	{r4, lr}
 8008602:	4604      	mov	r4, r0
  thread_t *tp;

#if CH_CFG_USE_REGISTRY == TRUE
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 8008604:	6840      	ldr	r0, [r0, #4]
 8008606:	f000 fdbb 	bl	8009180 <chRegFindThreadByWorkingArea>
 800860a:	b110      	cbz	r0, 8008612 <chThdCreateSuspended+0x12>
 800860c:	4814      	ldr	r0, [pc, #80]	; (8008660 <chThdCreateSuspended+0x60>)
 800860e:	f7ff f877 	bl	8007700 <chSysHalt>
              "working area in use");
#endif

#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)tdp->wbase,
 8008612:	2255      	movs	r2, #85	; 0x55
 8008614:	68a1      	ldr	r1, [r4, #8]
 8008616:	6860      	ldr	r0, [r4, #4]
 8008618:	f7ff ffaa 	bl	8008570 <_thread_memfill>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800861c:	2320      	movs	r3, #32
 800861e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008622:	f000 fcfd 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008626:	f7ff f9fb 	bl	8007a20 <_dbg_check_lock>
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
 800862a:	4620      	mov	r0, r4
 800862c:	f7ff ffa8 	bl	8008580 <chThdCreateSuspendedI>
 8008630:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8008632:	f7ff fa0d 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008636:	f000 fcfb 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800863a:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <chThdCreateSuspended+0x64>)
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d004      	beq.n	800864c <chThdCreateSuspended+0x4c>
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	6899      	ldr	r1, [r3, #8]
 8008646:	6893      	ldr	r3, [r2, #8]
 8008648:	4299      	cmp	r1, r3
 800864a:	d304      	bcc.n	8008656 <chThdCreateSuspended+0x56>
 800864c:	2300      	movs	r3, #0
 800864e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8008652:	4620      	mov	r0, r4
 8008654:	bd10      	pop	{r4, pc}
 8008656:	4804      	ldr	r0, [pc, #16]	; (8008668 <chThdCreateSuspended+0x68>)
 8008658:	f7ff f852 	bl	8007700 <chSysHalt>
 800865c:	e7f6      	b.n	800864c <chThdCreateSuspended+0x4c>
 800865e:	bf00      	nop
 8008660:	0801984c 	.word	0x0801984c
 8008664:	200050f8 	.word	0x200050f8
 8008668:	08019864 	.word	0x08019864
 800866c:	f3af 8000 	nop.w

08008670 <chThdCreateI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 8008670:	b508      	push	{r3, lr}

  return chSchReadyI(chThdCreateSuspendedI(tdp));
 8008672:	f7ff ff85 	bl	8008580 <chThdCreateSuspendedI>
 8008676:	f7ff fd63 	bl	8008140 <chSchReadyI>
}
 800867a:	bd08      	pop	{r3, pc}
 800867c:	f3af 8000 	nop.w

08008680 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8008680:	b510      	push	{r4, lr}
 8008682:	4604      	mov	r4, r0
  thread_t *tp;

#if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
    ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 8008684:	6840      	ldr	r0, [r0, #4]
 8008686:	f000 fd7b 	bl	8009180 <chRegFindThreadByWorkingArea>
 800868a:	b110      	cbz	r0, 8008692 <chThdCreate+0x12>
 800868c:	4815      	ldr	r0, [pc, #84]	; (80086e4 <chThdCreate+0x64>)
 800868e:	f7ff f837 	bl	8007700 <chSysHalt>
              "working area in use");
#endif

#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)tdp->wbase,
 8008692:	2255      	movs	r2, #85	; 0x55
 8008694:	68a1      	ldr	r1, [r4, #8]
 8008696:	6860      	ldr	r0, [r4, #4]
 8008698:	f7ff ff6a 	bl	8008570 <_thread_memfill>
 800869c:	2320      	movs	r3, #32
 800869e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80086a2:	f000 fcbd 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80086a6:	f7ff f9bb 	bl	8007a20 <_dbg_check_lock>
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
 80086aa:	4620      	mov	r0, r4
 80086ac:	f7ff ff68 	bl	8008580 <chThdCreateSuspendedI>
 80086b0:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 80086b2:	2100      	movs	r1, #0
 80086b4:	f7ff fe34 	bl	8008320 <chSchWakeupS>
  _dbg_check_unlock();
 80086b8:	f7ff f9ca 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80086bc:	f000 fcb8 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80086c0:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <chThdCreate+0x68>)
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d004      	beq.n	80086d2 <chThdCreate+0x52>
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	6899      	ldr	r1, [r3, #8]
 80086cc:	6893      	ldr	r3, [r2, #8]
 80086ce:	4299      	cmp	r1, r3
 80086d0:	d304      	bcc.n	80086dc <chThdCreate+0x5c>
 80086d2:	2300      	movs	r3, #0
 80086d4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 80086d8:	4620      	mov	r0, r4
 80086da:	bd10      	pop	{r4, pc}
 80086dc:	4803      	ldr	r0, [pc, #12]	; (80086ec <chThdCreate+0x6c>)
 80086de:	f7ff f80f 	bl	8007700 <chSysHalt>
 80086e2:	e7f6      	b.n	80086d2 <chThdCreate+0x52>
 80086e4:	08019870 	.word	0x08019870
 80086e8:	200050f8 	.word	0x200050f8
 80086ec:	08019864 	.word	0x08019864

080086f0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	460c      	mov	r4, r1
 80086f4:	4616      	mov	r6, r2
 80086f6:	461f      	mov	r7, r3
  thread_t *tp;

  chDbgCheck((wsp != NULL) &&
 80086f8:	4605      	mov	r5, r0
 80086fa:	b150      	cbz	r0, 8008712 <chThdCreateStatic+0x22>
 80086fc:	f010 0f07 	tst.w	r0, #7
 8008700:	d107      	bne.n	8008712 <chThdCreateStatic+0x22>
 8008702:	29e7      	cmp	r1, #231	; 0xe7
 8008704:	d905      	bls.n	8008712 <chThdCreateStatic+0x22>
 8008706:	f011 0f07 	tst.w	r1, #7
 800870a:	d102      	bne.n	8008712 <chThdCreateStatic+0x22>
 800870c:	2aff      	cmp	r2, #255	; 0xff
 800870e:	d800      	bhi.n	8008712 <chThdCreateStatic+0x22>
 8008710:	b913      	cbnz	r3, 8008718 <chThdCreateStatic+0x28>
 8008712:	4821      	ldr	r0, [pc, #132]	; (8008798 <chThdCreateStatic+0xa8>)
 8008714:	f7fe fff4 	bl	8007700 <chSysHalt>
             MEM_IS_ALIGNED(size, PORT_STACK_ALIGN) &&
             (prio <= HIGHPRIO) && (pf != NULL));

#if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
    ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
  chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 8008718:	4628      	mov	r0, r5
 800871a:	f000 fd31 	bl	8009180 <chRegFindThreadByWorkingArea>
 800871e:	b110      	cbz	r0, 8008726 <chThdCreateStatic+0x36>
 8008720:	481d      	ldr	r0, [pc, #116]	; (8008798 <chThdCreateStatic+0xa8>)
 8008722:	f7fe ffed 	bl	8007700 <chSysHalt>
              "working area in use");
#endif

#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 8008726:	2255      	movs	r2, #85	; 0x55
 8008728:	1929      	adds	r1, r5, r4
 800872a:	4628      	mov	r0, r5
 800872c:	f7ff ff20 	bl	8008570 <_thread_memfill>
 8008730:	2320      	movs	r3, #32
 8008732:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008736:	f000 fc73 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800873a:	f7ff f971 	bl	8007a20 <_dbg_check_lock>
  chSysLock();

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 800873e:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
 8008742:	4428      	add	r0, r5
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 8008744:	61c5      	str	r5, [r0, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8008746:	f1a0 0324 	sub.w	r3, r0, #36	; 0x24
 800874a:	60c3      	str	r3, [r0, #12]
 800874c:	f840 7c24 	str.w	r7, [r0, #-36]
 8008750:	9a06      	ldr	r2, [sp, #24]
 8008752:	f840 2c20 	str.w	r2, [r0, #-32]
 8008756:	4a11      	ldr	r2, [pc, #68]	; (800879c <chThdCreateStatic+0xac>)
 8008758:	f840 2c04 	str.w	r2, [r0, #-4]

  tp = _thread_init(tp, "noname", prio);
 800875c:	4632      	mov	r2, r6
 800875e:	4910      	ldr	r1, [pc, #64]	; (80087a0 <chThdCreateStatic+0xb0>)
 8008760:	f7ff fede 	bl	8008520 <_thread_init>
 8008764:	4604      	mov	r4, r0

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8008766:	2100      	movs	r1, #0
 8008768:	f7ff fdda 	bl	8008320 <chSchWakeupS>
  _dbg_check_unlock();
 800876c:	f7ff f970 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008770:	f000 fc5e 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008774:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <chThdCreateStatic+0xb4>)
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	429a      	cmp	r2, r3
 800877a:	d004      	beq.n	8008786 <chThdCreateStatic+0x96>
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	6899      	ldr	r1, [r3, #8]
 8008780:	6893      	ldr	r3, [r2, #8]
 8008782:	4299      	cmp	r1, r3
 8008784:	d304      	bcc.n	8008790 <chThdCreateStatic+0xa0>
 8008786:	2300      	movs	r3, #0
 8008788:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 800878c:	4620      	mov	r0, r4
 800878e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008790:	4805      	ldr	r0, [pc, #20]	; (80087a8 <chThdCreateStatic+0xb8>)
 8008792:	f7fe ffb5 	bl	8007700 <chSysHalt>
 8008796:	e7f6      	b.n	8008786 <chThdCreateStatic+0x96>
 8008798:	0801987c 	.word	0x0801987c
 800879c:	080002f1 	.word	0x080002f1
 80087a0:	0801a528 	.word	0x0801a528
 80087a4:	200050f8 	.word	0x200050f8
 80087a8:	08019864 	.word	0x08019864
 80087ac:	f3af 8000 	nop.w

080087b0 <chThdStart>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdStart(thread_t *tp) {
 80087b0:	b510      	push	{r4, lr}
 80087b2:	4604      	mov	r4, r0
 80087b4:	2320      	movs	r3, #32
 80087b6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80087ba:	f000 fc31 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80087be:	f7ff f92f 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 80087c2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d002      	beq.n	80087d0 <chThdStart+0x20>
 80087ca:	480e      	ldr	r0, [pc, #56]	; (8008804 <chThdStart+0x54>)
 80087cc:	f7fe ff98 	bl	8007700 <chSysHalt>
  chSchWakeupS(tp, MSG_OK);
 80087d0:	2100      	movs	r1, #0
 80087d2:	4620      	mov	r0, r4
 80087d4:	f7ff fda4 	bl	8008320 <chSchWakeupS>
  _dbg_check_unlock();
 80087d8:	f7ff f93a 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80087dc:	f000 fc28 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80087e0:	4b09      	ldr	r3, [pc, #36]	; (8008808 <chThdStart+0x58>)
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d004      	beq.n	80087f2 <chThdStart+0x42>
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	6899      	ldr	r1, [r3, #8]
 80087ec:	6893      	ldr	r3, [r2, #8]
 80087ee:	4299      	cmp	r1, r3
 80087f0:	d304      	bcc.n	80087fc <chThdStart+0x4c>
 80087f2:	2300      	movs	r3, #0
 80087f4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 80087f8:	4620      	mov	r0, r4
 80087fa:	bd10      	pop	{r4, pc}
 80087fc:	4803      	ldr	r0, [pc, #12]	; (800880c <chThdStart+0x5c>)
 80087fe:	f7fe ff7f 	bl	8007700 <chSysHalt>
 8008802:	e7f6      	b.n	80087f2 <chThdStart+0x42>
 8008804:	08019890 	.word	0x08019890
 8008808:	200050f8 	.word	0x200050f8
 800880c:	08019864 	.word	0x08019864

08008810 <chThdAddRef>:
 * @return              The same thread pointer passed as parameter
 *                      representing the new reference.
 *
 * @api
 */
thread_t *chThdAddRef(thread_t *tp) {
 8008810:	b510      	push	{r4, lr}
 8008812:	4604      	mov	r4, r0
 8008814:	2320      	movs	r3, #32
 8008816:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800881a:	f000 fc01 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800881e:	f7ff f8ff 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(tp->refs < (trefs_t)255, "too many references");
 8008822:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8008826:	2bff      	cmp	r3, #255	; 0xff
 8008828:	d016      	beq.n	8008858 <chThdAddRef+0x48>
  tp->refs++;
 800882a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800882e:	3301      	adds	r3, #1
 8008830:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _dbg_check_unlock();
 8008834:	f7ff f90c 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008838:	f000 fbfa 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800883c:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <chThdAddRef+0x58>)
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	429a      	cmp	r2, r3
 8008842:	d004      	beq.n	800884e <chThdAddRef+0x3e>
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	6899      	ldr	r1, [r3, #8]
 8008848:	6893      	ldr	r3, [r2, #8]
 800884a:	4299      	cmp	r1, r3
 800884c:	d308      	bcc.n	8008860 <chThdAddRef+0x50>
 800884e:	2300      	movs	r3, #0
 8008850:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8008854:	4620      	mov	r0, r4
 8008856:	bd10      	pop	{r4, pc}
  chDbgAssert(tp->refs < (trefs_t)255, "too many references");
 8008858:	4804      	ldr	r0, [pc, #16]	; (800886c <chThdAddRef+0x5c>)
 800885a:	f7fe ff51 	bl	8007700 <chSysHalt>
 800885e:	e7e4      	b.n	800882a <chThdAddRef+0x1a>
 8008860:	4803      	ldr	r0, [pc, #12]	; (8008870 <chThdAddRef+0x60>)
 8008862:	f7fe ff4d 	bl	8007700 <chSysHalt>
 8008866:	e7f2      	b.n	800884e <chThdAddRef+0x3e>
 8008868:	200050f8 	.word	0x200050f8
 800886c:	0801989c 	.word	0x0801989c
 8008870:	08019864 	.word	0x08019864
 8008874:	f3af 8000 	nop.w
 8008878:	f3af 8000 	nop.w
 800887c:	f3af 8000 	nop.w

08008880 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8008880:	b510      	push	{r4, lr}
 8008882:	4604      	mov	r4, r0
 8008884:	2320      	movs	r3, #32
 8008886:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800888a:	f000 fbc9 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800888e:	f7ff f8c7 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8008892:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8008896:	b1d3      	cbz	r3, 80088ce <chThdRelease+0x4e>
  tp->refs--;
 8008898:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800889c:	3b01      	subs	r3, #1
 800889e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80088a2:	6a23      	ldr	r3, [r4, #32]
 80088a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80088a8:	2b0f      	cmp	r3, #15
 80088aa:	d014      	beq.n	80088d6 <chThdRelease+0x56>
  _dbg_check_unlock();
 80088ac:	f7ff f8d0 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80088b0:	f000 fbbe 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80088b4:	4b1f      	ldr	r3, [pc, #124]	; (8008934 <chThdRelease+0xb4>)
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d004      	beq.n	80088c6 <chThdRelease+0x46>
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	6899      	ldr	r1, [r3, #8]
 80088c0:	6893      	ldr	r3, [r2, #8]
 80088c2:	4299      	cmp	r1, r3
 80088c4:	d332      	bcc.n	800892c <chThdRelease+0xac>
 80088c6:	2300      	movs	r3, #0
 80088c8:	f383 8811 	msr	BASEPRI, r3
    }
#endif /* CH_CFG_USE_DYNAMIC == TRUE */
    return;
  }
  chSysUnlock();
}
 80088cc:	bd10      	pop	{r4, pc}
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 80088ce:	481a      	ldr	r0, [pc, #104]	; (8008938 <chThdRelease+0xb8>)
 80088d0:	f7fe ff16 	bl	8007700 <chSysHalt>
 80088d4:	e7e0      	b.n	8008898 <chThdRelease+0x18>
    REG_REMOVE(tp);
 80088d6:	6963      	ldr	r3, [r4, #20]
 80088d8:	6922      	ldr	r2, [r4, #16]
 80088da:	611a      	str	r2, [r3, #16]
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	6962      	ldr	r2, [r4, #20]
 80088e0:	615a      	str	r2, [r3, #20]
  _dbg_check_unlock();
 80088e2:	f7ff f8b5 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80088e6:	f000 fba3 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80088ea:	4b12      	ldr	r3, [pc, #72]	; (8008934 <chThdRelease+0xb4>)
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d004      	beq.n	80088fc <chThdRelease+0x7c>
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	6899      	ldr	r1, [r3, #8]
 80088f6:	6893      	ldr	r3, [r2, #8]
 80088f8:	4299      	cmp	r1, r3
 80088fa:	d30f      	bcc.n	800891c <chThdRelease+0x9c>
 80088fc:	2300      	movs	r3, #0
 80088fe:	f383 8811 	msr	BASEPRI, r3
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8008902:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8008906:	f003 0303 	and.w	r3, r3, #3
 800890a:	2b01      	cmp	r3, #1
 800890c:	d00a      	beq.n	8008924 <chThdRelease+0xa4>
 800890e:	2b02      	cmp	r3, #2
 8008910:	d1dc      	bne.n	80088cc <chThdRelease+0x4c>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8008912:	69e1      	ldr	r1, [r4, #28]
 8008914:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008916:	f002 fbb3 	bl	800b080 <chPoolFree>
      break;
 800891a:	e7d7      	b.n	80088cc <chThdRelease+0x4c>
 800891c:	4807      	ldr	r0, [pc, #28]	; (800893c <chThdRelease+0xbc>)
 800891e:	f7fe feef 	bl	8007700 <chSysHalt>
 8008922:	e7eb      	b.n	80088fc <chThdRelease+0x7c>
      chHeapFree(chThdGetWorkingAreaX(tp));
 8008924:	69e0      	ldr	r0, [r4, #28]
 8008926:	f002 faa3 	bl	800ae70 <chHeapFree>
      break;
 800892a:	e7cf      	b.n	80088cc <chThdRelease+0x4c>
 800892c:	4803      	ldr	r0, [pc, #12]	; (800893c <chThdRelease+0xbc>)
 800892e:	f7fe fee7 	bl	8007700 <chSysHalt>
 8008932:	e7c8      	b.n	80088c6 <chThdRelease+0x46>
 8008934:	200050f8 	.word	0x200050f8
 8008938:	080198a8 	.word	0x080198a8
 800893c:	08019864 	.word	0x08019864

08008940 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8008940:	b510      	push	{r4, lr}
  thread_t *tp = currp;
 8008942:	4b11      	ldr	r3, [pc, #68]	; (8008988 <chThdExitS+0x48>)
 8008944:	699c      	ldr	r4, [r3, #24]

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8008946:	6260      	str	r0, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8008948:	e003      	b.n	8008952 <chThdExitS+0x12>
  tlp->next = tp->queue.next;
 800894a:	6803      	ldr	r3, [r0, #0]
 800894c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800894e:	f7ff fbf7 	bl	8008140 <chSchReadyI>
  while (list_notempty(&tp->waiting)) {
 8008952:	f104 0328 	add.w	r3, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
 8008956:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008958:	4283      	cmp	r3, r0
 800895a:	d1f6      	bne.n	800894a <chThdExitS+0xa>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 800895c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8008960:	b953      	cbnz	r3, 8008978 <chThdExitS+0x38>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8008962:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  if ((tp->refs == (trefs_t)0) &&
 8008966:	f013 0f03 	tst.w	r3, #3
 800896a:	d105      	bne.n	8008978 <chThdExitS+0x38>
    REG_REMOVE(tp);
 800896c:	6963      	ldr	r3, [r4, #20]
 800896e:	6922      	ldr	r2, [r4, #16]
 8008970:	611a      	str	r2, [r3, #16]
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	6962      	ldr	r2, [r4, #20]
 8008976:	615a      	str	r2, [r3, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8008978:	200f      	movs	r0, #15
 800897a:	f7ff fc71 	bl	8008260 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
 800897e:	4803      	ldr	r0, [pc, #12]	; (800898c <chThdExitS+0x4c>)
 8008980:	f7fe febe 	bl	8007700 <chSysHalt>
}
 8008984:	bd10      	pop	{r4, pc}
 8008986:	bf00      	nop
 8008988:	200050f8 	.word	0x200050f8
 800898c:	080198b8 	.word	0x080198b8

08008990 <chThdExit>:
void chThdExit(msg_t msg) {
 8008990:	b510      	push	{r4, lr}
 8008992:	4604      	mov	r4, r0
 8008994:	2320      	movs	r3, #32
 8008996:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800899a:	f000 fb41 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800899e:	f7ff f83f 	bl	8007a20 <_dbg_check_lock>
  chThdExitS(msg);
 80089a2:	4620      	mov	r0, r4
 80089a4:	f7ff ffcc 	bl	8008940 <chThdExitS>
}
 80089a8:	bd10      	pop	{r4, pc}
 80089aa:	bf00      	nop
 80089ac:	f3af 8000 	nop.w

080089b0 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 80089b0:	b538      	push	{r3, r4, r5, lr}
  msg_t msg;

  chDbgCheck(tp != NULL);
 80089b2:	4604      	mov	r4, r0
 80089b4:	b378      	cbz	r0, 8008a16 <chThdWait+0x66>
 80089b6:	2320      	movs	r3, #32
 80089b8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80089bc:	f000 fb30 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80089c0:	f7ff f82e 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
 80089c4:	4b1c      	ldr	r3, [pc, #112]	; (8008a38 <chThdWait+0x88>)
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	d028      	beq.n	8008a1e <chThdWait+0x6e>
#if CH_CFG_USE_REGISTRY == TRUE
  chDbgAssert(tp->refs > (trefs_t)0, "no references");
 80089cc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80089d0:	b34b      	cbz	r3, 8008a26 <chThdWait+0x76>
#endif

  if (tp->state != CH_STATE_FINAL) {
 80089d2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80089d6:	2b0f      	cmp	r3, #15
 80089d8:	d007      	beq.n	80089ea <chThdWait+0x3a>
    list_insert(currp, &tp->waiting);
 80089da:	4b17      	ldr	r3, [pc, #92]	; (8008a38 <chThdWait+0x88>)
 80089dc:	699b      	ldr	r3, [r3, #24]
  tp->queue.next = tlp->next;
 80089de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80089e0:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 80089e2:	62a3      	str	r3, [r4, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTEXIT);
 80089e4:	2009      	movs	r0, #9
 80089e6:	f7ff fc3b 	bl	8008260 <chSchGoSleepS>
  }
  msg = tp->u.exitcode;
 80089ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
  _dbg_check_unlock();
 80089ec:	f7ff f830 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80089f0:	f000 fb1e 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80089f4:	4b10      	ldr	r3, [pc, #64]	; (8008a38 <chThdWait+0x88>)
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d004      	beq.n	8008a06 <chThdWait+0x56>
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	6899      	ldr	r1, [r3, #8]
 8008a00:	6893      	ldr	r3, [r2, #8]
 8008a02:	4299      	cmp	r1, r3
 8008a04:	d313      	bcc.n	8008a2e <chThdWait+0x7e>
 8008a06:	2300      	movs	r3, #0
 8008a08:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_REGISTRY == TRUE
  /* Releasing a reference to the thread.*/
  chThdRelease(tp);
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f7ff ff37 	bl	8008880 <chThdRelease>
#endif

  return msg;
}
 8008a12:	4628      	mov	r0, r5
 8008a14:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(tp != NULL);
 8008a16:	4809      	ldr	r0, [pc, #36]	; (8008a3c <chThdWait+0x8c>)
 8008a18:	f7fe fe72 	bl	8007700 <chSysHalt>
 8008a1c:	e7cb      	b.n	80089b6 <chThdWait+0x6>
  chDbgAssert(tp != currp, "waiting self");
 8008a1e:	4807      	ldr	r0, [pc, #28]	; (8008a3c <chThdWait+0x8c>)
 8008a20:	f7fe fe6e 	bl	8007700 <chSysHalt>
 8008a24:	e7d2      	b.n	80089cc <chThdWait+0x1c>
  chDbgAssert(tp->refs > (trefs_t)0, "no references");
 8008a26:	4805      	ldr	r0, [pc, #20]	; (8008a3c <chThdWait+0x8c>)
 8008a28:	f7fe fe6a 	bl	8007700 <chSysHalt>
 8008a2c:	e7d1      	b.n	80089d2 <chThdWait+0x22>
 8008a2e:	4804      	ldr	r0, [pc, #16]	; (8008a40 <chThdWait+0x90>)
 8008a30:	f7fe fe66 	bl	8007700 <chSysHalt>
 8008a34:	e7e7      	b.n	8008a06 <chThdWait+0x56>
 8008a36:	bf00      	nop
 8008a38:	200050f8 	.word	0x200050f8
 8008a3c:	080198c4 	.word	0x080198c4
 8008a40:	08019864 	.word	0x08019864
 8008a44:	f3af 8000 	nop.w
 8008a48:	f3af 8000 	nop.w
 8008a4c:	f3af 8000 	nop.w

08008a50 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	4604      	mov	r4, r0
  tprio_t oldprio;

  chDbgCheck(newprio <= HIGHPRIO);
 8008a54:	28ff      	cmp	r0, #255	; 0xff
 8008a56:	d825      	bhi.n	8008aa4 <chThdSetPriority+0x54>
 8008a58:	2320      	movs	r3, #32
 8008a5a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008a5e:	f000 fadf 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008a62:	f7fe ffdd 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->realprio;
 8008a66:	4b13      	ldr	r3, [pc, #76]	; (8008ab4 <chThdSetPriority+0x64>)
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8008a6c:	689a      	ldr	r2, [r3, #8]
 8008a6e:	42b2      	cmp	r2, r6
 8008a70:	d001      	beq.n	8008a76 <chThdSetPriority+0x26>
 8008a72:	42a2      	cmp	r2, r4
 8008a74:	d200      	bcs.n	8008a78 <chThdSetPriority+0x28>
    currp->prio = newprio;
 8008a76:	609c      	str	r4, [r3, #8]
  }
  currp->realprio = newprio;
 8008a78:	4d0e      	ldr	r5, [pc, #56]	; (8008ab4 <chThdSetPriority+0x64>)
 8008a7a:	69ab      	ldr	r3, [r5, #24]
 8008a7c:	63dc      	str	r4, [r3, #60]	; 0x3c
#else
  oldprio = currp->prio;
  currp->prio = newprio;
#endif
  chSchRescheduleS();
 8008a7e:	f7ff fd07 	bl	8008490 <chSchRescheduleS>
  _dbg_check_unlock();
 8008a82:	f7fe ffe5 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008a86:	f000 fad3 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008a8a:	682b      	ldr	r3, [r5, #0]
 8008a8c:	42ab      	cmp	r3, r5
 8008a8e:	d004      	beq.n	8008a9a <chThdSetPriority+0x4a>
 8008a90:	69aa      	ldr	r2, [r5, #24]
 8008a92:	6892      	ldr	r2, [r2, #8]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d308      	bcc.n	8008aac <chThdSetPriority+0x5c>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(newprio <= HIGHPRIO);
 8008aa4:	4804      	ldr	r0, [pc, #16]	; (8008ab8 <chThdSetPriority+0x68>)
 8008aa6:	f7fe fe2b 	bl	8007700 <chSysHalt>
 8008aaa:	e7d5      	b.n	8008a58 <chThdSetPriority+0x8>
 8008aac:	4803      	ldr	r0, [pc, #12]	; (8008abc <chThdSetPriority+0x6c>)
 8008aae:	f7fe fe27 	bl	8007700 <chSysHalt>
 8008ab2:	e7f2      	b.n	8008a9a <chThdSetPriority+0x4a>
 8008ab4:	200050f8 	.word	0x200050f8
 8008ab8:	080198d0 	.word	0x080198d0
 8008abc:	08019864 	.word	0x08019864

08008ac0 <chThdTerminate>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdTerminate(thread_t *tp) {
 8008ac0:	b510      	push	{r4, lr}
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	2320      	movs	r3, #32
 8008ac6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008aca:	f000 faa9 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008ace:	f7fe ffa7 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 8008ad2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8008ad6:	f043 0304 	orr.w	r3, r3, #4
 8008ada:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  _dbg_check_unlock();
 8008ade:	f7fe ffb7 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008ae2:	f000 faa5 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008ae6:	4b08      	ldr	r3, [pc, #32]	; (8008b08 <chThdTerminate+0x48>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d004      	beq.n	8008af8 <chThdTerminate+0x38>
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	6899      	ldr	r1, [r3, #8]
 8008af2:	6893      	ldr	r3, [r2, #8]
 8008af4:	4299      	cmp	r1, r3
 8008af6:	d303      	bcc.n	8008b00 <chThdTerminate+0x40>
 8008af8:	2300      	movs	r3, #0
 8008afa:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8008afe:	bd10      	pop	{r4, pc}
 8008b00:	4802      	ldr	r0, [pc, #8]	; (8008b0c <chThdTerminate+0x4c>)
 8008b02:	f7fe fdfd 	bl	8007700 <chSysHalt>
 8008b06:	e7f7      	b.n	8008af8 <chThdTerminate+0x38>
 8008b08:	200050f8 	.word	0x200050f8
 8008b0c:	08019864 	.word	0x08019864

08008b10 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4604      	mov	r4, r0
 8008b14:	460d      	mov	r5, r1
 8008b16:	2320      	movs	r3, #32
 8008b18:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008b1c:	f000 fa80 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008b20:	f7fe ff7e 	bl	8007a20 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);
 8008b24:	ea54 0305 	orrs.w	r3, r4, r5
 8008b28:	d015      	beq.n	8008b56 <chThdSleep+0x46>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8008b2a:	4622      	mov	r2, r4
 8008b2c:	462b      	mov	r3, r5
 8008b2e:	2008      	movs	r0, #8
 8008b30:	f7ff fbc6 	bl	80082c0 <chSchGoSleepTimeoutS>
  _dbg_check_unlock();
 8008b34:	f7fe ff8c 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008b38:	f000 fa7a 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <chThdSleep+0x58>)
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d004      	beq.n	8008b4e <chThdSleep+0x3e>
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	6899      	ldr	r1, [r3, #8]
 8008b48:	6893      	ldr	r3, [r2, #8]
 8008b4a:	4299      	cmp	r1, r3
 8008b4c:	d307      	bcc.n	8008b5e <chThdSleep+0x4e>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 8008b54:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8008b56:	4805      	ldr	r0, [pc, #20]	; (8008b6c <chThdSleep+0x5c>)
 8008b58:	f7fe fdd2 	bl	8007700 <chSysHalt>
 8008b5c:	e7e5      	b.n	8008b2a <chThdSleep+0x1a>
 8008b5e:	4804      	ldr	r0, [pc, #16]	; (8008b70 <chThdSleep+0x60>)
 8008b60:	f7fe fdce 	bl	8007700 <chSysHalt>
 8008b64:	e7f3      	b.n	8008b4e <chThdSleep+0x3e>
 8008b66:	bf00      	nop
 8008b68:	200050f8 	.word	0x200050f8
 8008b6c:	080198e4 	.word	0x080198e4
 8008b70:	08019864 	.word	0x08019864
 8008b74:	f3af 8000 	nop.w
 8008b78:	f3af 8000 	nop.w
 8008b7c:	f3af 8000 	nop.w

08008b80 <chThdSleepUntil>:
 *
 * @param[in] time      absolute system time
 *
 * @api
 */
void chThdSleepUntil(systime_t time) {
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4604      	mov	r4, r0
 8008b84:	2320      	movs	r3, #32
 8008b86:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008b8a:	f000 fa49 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008b8e:	f7fe ff47 	bl	8007a20 <_dbg_check_lock>
 8008b92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8008b98:	1ae4      	subs	r4, r4, r3
 8008b9a:	2500      	movs	r5, #0
  sysinterval_t interval;

  chSysLock();
  interval = chTimeDiffX(chVTGetSystemTimeX(), time);
  if (interval > (sysinterval_t)0) {
 8008b9c:	ea54 0305 	orrs.w	r3, r4, r5
 8008ba0:	d110      	bne.n	8008bc4 <chThdSleepUntil+0x44>
  _dbg_check_unlock();
 8008ba2:	f7fe ff55 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008ba6:	f000 fa43 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008baa:	4b0e      	ldr	r3, [pc, #56]	; (8008be4 <chThdSleepUntil+0x64>)
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d004      	beq.n	8008bbc <chThdSleepUntil+0x3c>
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	6899      	ldr	r1, [r3, #8]
 8008bb6:	6893      	ldr	r3, [r2, #8]
 8008bb8:	4299      	cmp	r1, r3
 8008bba:	d30e      	bcc.n	8008bda <chThdSleepUntil+0x5a>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	f383 8811 	msr	BASEPRI, r3
    chThdSleepS(interval);
  }
  chSysUnlock();
}
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	d005      	beq.n	8008bd2 <chThdSleepUntil+0x52>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	462b      	mov	r3, r5
 8008bca:	2008      	movs	r0, #8
 8008bcc:	f7ff fb78 	bl	80082c0 <chSchGoSleepTimeoutS>
 8008bd0:	e7e7      	b.n	8008ba2 <chThdSleepUntil+0x22>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8008bd2:	4805      	ldr	r0, [pc, #20]	; (8008be8 <chThdSleepUntil+0x68>)
 8008bd4:	f7fe fd94 	bl	8007700 <chSysHalt>
 8008bd8:	e7f5      	b.n	8008bc6 <chThdSleepUntil+0x46>
 8008bda:	4804      	ldr	r0, [pc, #16]	; (8008bec <chThdSleepUntil+0x6c>)
 8008bdc:	f7fe fd90 	bl	8007700 <chSysHalt>
 8008be0:	e7ec      	b.n	8008bbc <chThdSleepUntil+0x3c>
 8008be2:	bf00      	nop
 8008be4:	200050f8 	.word	0x200050f8
 8008be8:	080198e4 	.word	0x080198e4
 8008bec:	08019864 	.word	0x08019864

08008bf0 <chThdSleepUntilWindowed>:
 * @param[in] next      absolute system time of the next deadline
 * @return              the @p next parameter
 *
 * @api
 */
systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next) {
 8008bf0:	b570      	push	{r4, r5, r6, lr}
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	460e      	mov	r6, r1
 8008bf6:	2320      	movs	r3, #32
 8008bf8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008bfc:	f000 fa10 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008c00:	f7fe ff0e 	bl	8007a20 <_dbg_check_lock>
 8008c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8008c0a:	1b1a      	subs	r2, r3, r4
                (systime_t)((systime_t)end - (systime_t)start));
 8008c0c:	1b34      	subs	r4, r6, r4
  systime_t time;

  chSysLock();
  time = chVTGetSystemTimeX();
  if (chTimeIsInRangeX(time, prev, next)) {
 8008c0e:	4294      	cmp	r4, r2
 8008c10:	d811      	bhi.n	8008c36 <chThdSleepUntilWindowed+0x46>
  _dbg_check_unlock();
 8008c12:	f7fe ff1d 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008c16:	f000 fa0b 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008c1a:	4b10      	ldr	r3, [pc, #64]	; (8008c5c <chThdSleepUntilWindowed+0x6c>)
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d004      	beq.n	8008c2c <chThdSleepUntilWindowed+0x3c>
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	6899      	ldr	r1, [r3, #8]
 8008c26:	6893      	ldr	r3, [r2, #8]
 8008c28:	4299      	cmp	r1, r3
 8008c2a:	d313      	bcc.n	8008c54 <chThdSleepUntilWindowed+0x64>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f383 8811 	msr	BASEPRI, r3
    chThdSleepS(chTimeDiffX(time, next));
  }
  chSysUnlock();

  return next;
}
 8008c32:	4630      	mov	r0, r6
 8008c34:	bd70      	pop	{r4, r5, r6, pc}
  return (sysinterval_t)((systime_t)(end - start));
 8008c36:	1af4      	subs	r4, r6, r3
 8008c38:	2500      	movs	r5, #0
 8008c3a:	ea54 0305 	orrs.w	r3, r4, r5
 8008c3e:	d005      	beq.n	8008c4c <chThdSleepUntilWindowed+0x5c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8008c40:	4622      	mov	r2, r4
 8008c42:	462b      	mov	r3, r5
 8008c44:	2008      	movs	r0, #8
 8008c46:	f7ff fb3b 	bl	80082c0 <chSchGoSleepTimeoutS>
 8008c4a:	e7e2      	b.n	8008c12 <chThdSleepUntilWindowed+0x22>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8008c4c:	4804      	ldr	r0, [pc, #16]	; (8008c60 <chThdSleepUntilWindowed+0x70>)
 8008c4e:	f7fe fd57 	bl	8007700 <chSysHalt>
 8008c52:	e7f5      	b.n	8008c40 <chThdSleepUntilWindowed+0x50>
 8008c54:	4803      	ldr	r0, [pc, #12]	; (8008c64 <chThdSleepUntilWindowed+0x74>)
 8008c56:	f7fe fd53 	bl	8007700 <chSysHalt>
 8008c5a:	e7e7      	b.n	8008c2c <chThdSleepUntilWindowed+0x3c>
 8008c5c:	200050f8 	.word	0x200050f8
 8008c60:	080198e4 	.word	0x080198e4
 8008c64:	08019864 	.word	0x08019864
 8008c68:	f3af 8000 	nop.w
 8008c6c:	f3af 8000 	nop.w

08008c70 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8008c70:	b508      	push	{r3, lr}
 8008c72:	2320      	movs	r3, #32
 8008c74:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008c78:	f000 f9d2 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008c7c:	f7fe fed0 	bl	8007a20 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();
 8008c80:	f7fe ff86 	bl	8007b90 <chDbgCheckClassS>
  chDbgCheckClassS();
 8008c84:	f7fe ff84 	bl	8007b90 <chDbgCheckClassS>
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8008c88:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <chThdYield+0x58>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	6892      	ldr	r2, [r2, #8]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	689b      	ldr	r3, [r3, #8]

  if (chSchCanYieldS()) {
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d210      	bcs.n	8008cb8 <chThdYield+0x48>
  _dbg_check_unlock();
 8008c96:	f7fe fedb 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008c9a:	f000 f9c9 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <chThdYield+0x58>)
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d004      	beq.n	8008cb0 <chThdYield+0x40>
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	6899      	ldr	r1, [r3, #8]
 8008caa:	6893      	ldr	r3, [r2, #8]
 8008cac:	4299      	cmp	r1, r3
 8008cae:	d306      	bcc.n	8008cbe <chThdYield+0x4e>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chSchDoYieldS();
  chSysUnlock();
}
 8008cb6:	bd08      	pop	{r3, pc}
    chSchDoRescheduleBehind();
 8008cb8:	f7ff fb8a 	bl	80083d0 <chSchDoRescheduleBehind>
 8008cbc:	e7eb      	b.n	8008c96 <chThdYield+0x26>
 8008cbe:	4803      	ldr	r0, [pc, #12]	; (8008ccc <chThdYield+0x5c>)
 8008cc0:	f7fe fd1e 	bl	8007700 <chSysHalt>
 8008cc4:	e7f4      	b.n	8008cb0 <chThdYield+0x40>
 8008cc6:	bf00      	nop
 8008cc8:	200050f8 	.word	0x200050f8
 8008ccc:	08019864 	.word	0x08019864

08008cd0 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4604      	mov	r4, r0
  return ch.rlist.current;
 8008cd4:	4b07      	ldr	r3, [pc, #28]	; (8008cf4 <chThdSuspendS+0x24>)
 8008cd6:	699d      	ldr	r5, [r3, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 8008cd8:	6803      	ldr	r3, [r0, #0]
 8008cda:	b113      	cbz	r3, 8008ce2 <chThdSuspendS+0x12>
 8008cdc:	4806      	ldr	r0, [pc, #24]	; (8008cf8 <chThdSuspendS+0x28>)
 8008cde:	f7fe fd0f 	bl	8007700 <chSysHalt>

  *trp = tp;
 8008ce2:	6025      	str	r5, [r4, #0]
  tp->u.wttrp = trp;
 8008ce4:	626c      	str	r4, [r5, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8008ce6:	2003      	movs	r0, #3
 8008ce8:	f7ff faba 	bl	8008260 <chSchGoSleepS>
 8008cec:	4b01      	ldr	r3, [pc, #4]	; (8008cf4 <chThdSuspendS+0x24>)
 8008cee:	699b      	ldr	r3, [r3, #24]

  return chThdGetSelfX()->u.rdymsg;
}
 8008cf0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	200050f8 	.word	0x200050f8
 8008cf8:	080198f0 	.word	0x080198f0
 8008cfc:	f3af 8000 	nop.w

08008d00 <chThdSuspendTimeoutS>:
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	4604      	mov	r4, r0
 8008d04:	4616      	mov	r6, r2
 8008d06:	461f      	mov	r7, r3
 8008d08:	4b0a      	ldr	r3, [pc, #40]	; (8008d34 <chThdSuspendTimeoutS+0x34>)
 8008d0a:	699d      	ldr	r5, [r3, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 8008d0c:	6803      	ldr	r3, [r0, #0]
 8008d0e:	b113      	cbz	r3, 8008d16 <chThdSuspendTimeoutS+0x16>
 8008d10:	4809      	ldr	r0, [pc, #36]	; (8008d38 <chThdSuspendTimeoutS+0x38>)
 8008d12:	f7fe fcf5 	bl	8007700 <chSysHalt>

  if (TIME_IMMEDIATE == timeout) {
 8008d16:	ea56 0307 	orrs.w	r3, r6, r7
 8008d1a:	d007      	beq.n	8008d2c <chThdSuspendTimeoutS+0x2c>
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8008d1c:	6025      	str	r5, [r4, #0]
  tp->u.wttrp = trp;
 8008d1e:	626c      	str	r4, [r5, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8008d20:	4632      	mov	r2, r6
 8008d22:	463b      	mov	r3, r7
 8008d24:	2003      	movs	r0, #3
 8008d26:	f7ff facb 	bl	80082c0 <chSchGoSleepTimeoutS>
}
 8008d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return MSG_TIMEOUT;
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	e7fb      	b.n	8008d2a <chThdSuspendTimeoutS+0x2a>
 8008d32:	bf00      	nop
 8008d34:	200050f8 	.word	0x200050f8
 8008d38:	08019900 	.word	0x08019900
 8008d3c:	f3af 8000 	nop.w

08008d40 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8008d40:	b570      	push	{r4, r5, r6, lr}

  if (*trp != NULL) {
 8008d42:	6804      	ldr	r4, [r0, #0]
 8008d44:	b15c      	cbz	r4, 8008d5e <chThdResumeI+0x1e>
 8008d46:	460e      	mov	r6, r1
 8008d48:	4605      	mov	r5, r0
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8008d4a:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d106      	bne.n	8008d60 <chThdResumeI+0x20>

    *trp = NULL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	602b      	str	r3, [r5, #0]
    tp->u.rdymsg = msg;
 8008d56:	6266      	str	r6, [r4, #36]	; 0x24
    (void) chSchReadyI(tp);
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f7ff f9f1 	bl	8008140 <chSchReadyI>
  }
}
 8008d5e:	bd70      	pop	{r4, r5, r6, pc}
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8008d60:	4801      	ldr	r0, [pc, #4]	; (8008d68 <chThdResumeI+0x28>)
 8008d62:	f7fe fccd 	bl	8007700 <chSysHalt>
 8008d66:	e7f4      	b.n	8008d52 <chThdResumeI+0x12>
 8008d68:	08019918 	.word	0x08019918
 8008d6c:	f3af 8000 	nop.w

08008d70 <chThdResumeS>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeS(thread_reference_t *trp, msg_t msg) {
 8008d70:	b570      	push	{r4, r5, r6, lr}

  if (*trp != NULL) {
 8008d72:	6805      	ldr	r5, [r0, #0]
 8008d74:	b15d      	cbz	r5, 8008d8e <chThdResumeS+0x1e>
 8008d76:	460e      	mov	r6, r1
 8008d78:	4604      	mov	r4, r0
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8008d7a:	f895 3020 	ldrb.w	r3, [r5, #32]
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d106      	bne.n	8008d90 <chThdResumeS+0x20>

    *trp = NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	6023      	str	r3, [r4, #0]
    chSchWakeupS(tp, msg);
 8008d86:	4631      	mov	r1, r6
 8008d88:	4628      	mov	r0, r5
 8008d8a:	f7ff fac9 	bl	8008320 <chSchWakeupS>
  }
}
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8008d90:	4801      	ldr	r0, [pc, #4]	; (8008d98 <chThdResumeS+0x28>)
 8008d92:	f7fe fcb5 	bl	8007700 <chSysHalt>
 8008d96:	e7f4      	b.n	8008d82 <chThdResumeS+0x12>
 8008d98:	08019928 	.word	0x08019928
 8008d9c:	f3af 8000 	nop.w

08008da0 <chThdResume>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @api
 */
void chThdResume(thread_reference_t *trp, msg_t msg) {
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	4604      	mov	r4, r0
 8008da4:	460d      	mov	r5, r1
 8008da6:	2320      	movs	r3, #32
 8008da8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008dac:	f000 f938 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008db0:	f7fe fe36 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chThdResumeS(trp, msg);
 8008db4:	4629      	mov	r1, r5
 8008db6:	4620      	mov	r0, r4
 8008db8:	f7ff ffda 	bl	8008d70 <chThdResumeS>
  _dbg_check_unlock();
 8008dbc:	f7fe fe48 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008dc0:	f000 f936 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008dc4:	4b08      	ldr	r3, [pc, #32]	; (8008de8 <chThdResume+0x48>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d004      	beq.n	8008dd6 <chThdResume+0x36>
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	6899      	ldr	r1, [r3, #8]
 8008dd0:	6893      	ldr	r3, [r2, #8]
 8008dd2:	4299      	cmp	r1, r3
 8008dd4:	d303      	bcc.n	8008dde <chThdResume+0x3e>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8008ddc:	bd38      	pop	{r3, r4, r5, pc}
 8008dde:	4803      	ldr	r0, [pc, #12]	; (8008dec <chThdResume+0x4c>)
 8008de0:	f7fe fc8e 	bl	8007700 <chSysHalt>
 8008de4:	e7f7      	b.n	8008dd6 <chThdResume+0x36>
 8008de6:	bf00      	nop
 8008de8:	200050f8 	.word	0x200050f8
 8008dec:	08019864 	.word	0x08019864

08008df0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8008df0:	ea52 0103 	orrs.w	r1, r2, r3
 8008df4:	d00b      	beq.n	8008e0e <chThdEnqueueTimeoutS+0x1e>
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8008df6:	b510      	push	{r4, lr}
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8008df8:	4906      	ldr	r1, [pc, #24]	; (8008e14 <chThdEnqueueTimeoutS+0x24>)
 8008dfa:	6989      	ldr	r1, [r1, #24]
  tp->queue.next             = (thread_t *)tqp;
 8008dfc:	6008      	str	r0, [r1, #0]
  tp->queue.prev             = tqp->prev;
 8008dfe:	6844      	ldr	r4, [r0, #4]
 8008e00:	604c      	str	r4, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8008e02:	6021      	str	r1, [r4, #0]
  tqp->prev                  = tp;
 8008e04:	6041      	str	r1, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8008e06:	2004      	movs	r0, #4
 8008e08:	f7ff fa5a 	bl	80082c0 <chSchGoSleepTimeoutS>
}
 8008e0c:	bd10      	pop	{r4, pc}
    return MSG_TIMEOUT;
 8008e0e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e12:	4770      	bx	lr
 8008e14:	200050f8 	.word	0x200050f8
 8008e18:	f3af 8000 	nop.w
 8008e1c:	f3af 8000 	nop.w

08008e20 <chThdDequeueNextI>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008e20:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8008e22:	4298      	cmp	r0, r3
 8008e24:	d017      	beq.n	8008e56 <chThdDequeueNextI+0x36>
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8008e26:	b570      	push	{r4, r5, r6, lr}
 8008e28:	460e      	mov	r6, r1
 8008e2a:	4604      	mov	r4, r0
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  thread_t *tp;

  chDbgAssert(queue_notempty(tqp), "empty queue");
 8008e2c:	d00f      	beq.n	8008e4e <chThdDequeueNextI+0x2e>
  thread_t *tp = tqp->next;
 8008e2e:	6825      	ldr	r5, [r4, #0]
  tqp->next             = tp->queue.next;
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008e34:	605c      	str	r4, [r3, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8008e36:	f895 3020 	ldrb.w	r3, [r5, #32]
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d002      	beq.n	8008e44 <chThdDequeueNextI+0x24>
 8008e3e:	4806      	ldr	r0, [pc, #24]	; (8008e58 <chThdDequeueNextI+0x38>)
 8008e40:	f7fe fc5e 	bl	8007700 <chSysHalt>

  tp->u.rdymsg = msg;
 8008e44:	626e      	str	r6, [r5, #36]	; 0x24
  (void) chSchReadyI(tp);
 8008e46:	4628      	mov	r0, r5
 8008e48:	f7ff f97a 	bl	8008140 <chSchReadyI>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8008e4c:	bd70      	pop	{r4, r5, r6, pc}
  chDbgAssert(queue_notempty(tqp), "empty queue");
 8008e4e:	4802      	ldr	r0, [pc, #8]	; (8008e58 <chThdDequeueNextI+0x38>)
 8008e50:	f7fe fc56 	bl	8007700 <chSysHalt>
 8008e54:	e7eb      	b.n	8008e2e <chThdDequeueNextI+0xe>
 8008e56:	4770      	bx	lr
 8008e58:	08019938 	.word	0x08019938
 8008e5c:	f3af 8000 	nop.w

08008e60 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	4604      	mov	r4, r0
 8008e64:	460e      	mov	r6, r1

  while (queue_notempty(tqp)) {
 8008e66:	e007      	b.n	8008e78 <chThdDequeueAllI+0x18>
 8008e68:	480d      	ldr	r0, [pc, #52]	; (8008ea0 <chThdDequeueAllI+0x40>)
 8008e6a:	f7fe fc49 	bl	8007700 <chSysHalt>
 8008e6e:	e009      	b.n	8008e84 <chThdDequeueAllI+0x24>
  tp->u.rdymsg = msg;
 8008e70:	626e      	str	r6, [r5, #36]	; 0x24
  (void) chSchReadyI(tp);
 8008e72:	4628      	mov	r0, r5
 8008e74:	f7ff f964 	bl	8008140 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	429c      	cmp	r4, r3
 8008e7c:	d00e      	beq.n	8008e9c <chThdDequeueAllI+0x3c>
 8008e7e:	6823      	ldr	r3, [r4, #0]
  chDbgAssert(queue_notempty(tqp), "empty queue");
 8008e80:	429c      	cmp	r4, r3
 8008e82:	d0f1      	beq.n	8008e68 <chThdDequeueAllI+0x8>
  thread_t *tp = tqp->next;
 8008e84:	6825      	ldr	r5, [r4, #0]
  tqp->next             = tp->queue.next;
 8008e86:	682b      	ldr	r3, [r5, #0]
 8008e88:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008e8a:	605c      	str	r4, [r3, #4]
  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8008e8c:	f895 3020 	ldrb.w	r3, [r5, #32]
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d0ed      	beq.n	8008e70 <chThdDequeueAllI+0x10>
 8008e94:	4802      	ldr	r0, [pc, #8]	; (8008ea0 <chThdDequeueAllI+0x40>)
 8008e96:	f7fe fc33 	bl	8007700 <chSysHalt>
 8008e9a:	e7e9      	b.n	8008e70 <chThdDequeueAllI+0x10>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8008e9c:	bd70      	pop	{r4, r5, r6, pc}
 8008e9e:	bf00      	nop
 8008ea0:	08019938 	.word	0x08019938
	...

08008eb0 <chTMObjectInit>:
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8008eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb4:	6003      	str	r3, [r0, #0]
  tmp->worst      = (rtcnt_t)0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	6043      	str	r3, [r0, #4]
  tmp->last       = (rtcnt_t)0;
 8008eba:	6083      	str	r3, [r0, #8]
  tmp->n          = (ucnt_t)0;
 8008ebc:	60c3      	str	r3, [r0, #12]
  tmp->cumulative = (rttime_t)0;
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
 8008ec6:	4770      	bx	lr
 8008ec8:	f3af 8000 	nop.w
 8008ecc:	f3af 8000 	nop.w

08008ed0 <chTMStartMeasurementX>:
 8008ed0:	4b01      	ldr	r3, [pc, #4]	; (8008ed8 <chTMStartMeasurementX+0x8>)
 8008ed2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8008ed4:	6083      	str	r3, [r0, #8]
}
 8008ed6:	4770      	bx	lr
 8008ed8:	e0001000 	.word	0xe0001000
 8008edc:	f3af 8000 	nop.w

08008ee0 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8008ee0:	b430      	push	{r4, r5}
 8008ee2:	4b0e      	ldr	r3, [pc, #56]	; (8008f1c <chTMStopMeasurementX+0x3c>)
 8008ee4:	685b      	ldr	r3, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8008ee6:	4a0e      	ldr	r2, [pc, #56]	; (8008f20 <chTMStopMeasurementX+0x40>)
 8008ee8:	f8d2 18b0 	ldr.w	r1, [r2, #2224]	; 0x8b0
  tmp->n++;
 8008eec:	68c2      	ldr	r2, [r0, #12]
 8008eee:	3201      	adds	r2, #1
 8008ef0:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8008ef2:	6882      	ldr	r2, [r0, #8]
 8008ef4:	1a9b      	subs	r3, r3, r2
 8008ef6:	1a5b      	subs	r3, r3, r1
 8008ef8:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8008efa:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8008efe:	18e1      	adds	r1, r4, r3
 8008f00:	f145 0200 	adc.w	r2, r5, #0
 8008f04:	e9c0 1204 	strd	r1, r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8008f08:	6842      	ldr	r2, [r0, #4]
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d900      	bls.n	8008f10 <chTMStopMeasurementX+0x30>
    tmp->worst = tmp->last;
 8008f0e:	6043      	str	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8008f10:	6802      	ldr	r2, [r0, #0]
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d200      	bcs.n	8008f18 <chTMStopMeasurementX+0x38>
    tmp->best = tmp->last;
 8008f16:	6003      	str	r3, [r0, #0]
}
 8008f18:	bc30      	pop	{r4, r5}
 8008f1a:	4770      	bx	lr
 8008f1c:	e0001000 	.word	0xe0001000
 8008f20:	200050f8 	.word	0x200050f8
 8008f24:	f3af 8000 	nop.w
 8008f28:	f3af 8000 	nop.w
 8008f2c:	f3af 8000 	nop.w

08008f30 <_tm_init>:
void _tm_init(void) {
 8008f30:	b510      	push	{r4, lr}
 8008f32:	b086      	sub	sp, #24
  ch.tm.offset = (rtcnt_t)0;
 8008f34:	4c08      	ldr	r4, [pc, #32]	; (8008f58 <_tm_init+0x28>)
 8008f36:	2300      	movs	r3, #0
 8008f38:	f8c4 38b0 	str.w	r3, [r4, #2224]	; 0x8b0
  chTMObjectInit(&tm);
 8008f3c:	4668      	mov	r0, sp
 8008f3e:	f7ff ffb7 	bl	8008eb0 <chTMObjectInit>
  chTMStartMeasurementX(&tm);
 8008f42:	4668      	mov	r0, sp
 8008f44:	f7ff ffc4 	bl	8008ed0 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8008f48:	4668      	mov	r0, sp
 8008f4a:	f7ff ffc9 	bl	8008ee0 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8008f4e:	9b02      	ldr	r3, [sp, #8]
 8008f50:	f8c4 38b0 	str.w	r3, [r4, #2224]	; 0x8b0
}
 8008f54:	b006      	add	sp, #24
 8008f56:	bd10      	pop	{r4, pc}
 8008f58:	200050f8 	.word	0x200050f8
 8008f5c:	f3af 8000 	nop.w

08008f60 <chTMChainMeasurementToX>:
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8008f60:	b430      	push	{r4, r5}
 8008f62:	4b0d      	ldr	r3, [pc, #52]	; (8008f98 <chTMChainMeasurementToX+0x38>)
 8008f64:	685b      	ldr	r3, [r3, #4]

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8008f66:	608b      	str	r3, [r1, #8]
  tmp->n++;
 8008f68:	68c2      	ldr	r2, [r0, #12]
 8008f6a:	3201      	adds	r2, #1
 8008f6c:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8008f6e:	6882      	ldr	r2, [r0, #8]
 8008f70:	1a9b      	subs	r3, r3, r2
 8008f72:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8008f74:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8008f78:	18e1      	adds	r1, r4, r3
 8008f7a:	f145 0200 	adc.w	r2, r5, #0
 8008f7e:	e9c0 1204 	strd	r1, r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8008f82:	6842      	ldr	r2, [r0, #4]
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d900      	bls.n	8008f8a <chTMChainMeasurementToX+0x2a>
    tmp->worst = tmp->last;
 8008f88:	6043      	str	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8008f8a:	6802      	ldr	r2, [r0, #0]
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d200      	bcs.n	8008f92 <chTMChainMeasurementToX+0x32>
    tmp->best = tmp->last;
 8008f90:	6003      	str	r3, [r0, #0]

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 8008f92:	bc30      	pop	{r4, r5}
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	e0001000 	.word	0xe0001000
 8008f9c:	00000000 	.word	0x00000000

08008fa0 <_stats_init>:
/**
 * @brief   Initializes the statistics module.
 *
 * @init
 */
void _stats_init(void) {
 8008fa0:	b510      	push	{r4, lr}

  ch.kernel_stats.n_irq = (ucnt_t)0;
 8008fa2:	4c07      	ldr	r4, [pc, #28]	; (8008fc0 <_stats_init+0x20>)
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f8c4 38b8 	str.w	r3, [r4, #2232]	; 0x8b8
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 8008faa:	f8c4 38bc 	str.w	r3, [r4, #2236]	; 0x8bc
  chTMObjectInit(&ch.kernel_stats.m_crit_thd);
 8008fae:	f504 600c 	add.w	r0, r4, #2240	; 0x8c0
 8008fb2:	f7ff ff7d 	bl	8008eb0 <chTMObjectInit>
  chTMObjectInit(&ch.kernel_stats.m_crit_isr);
 8008fb6:	f604 00d8 	addw	r0, r4, #2264	; 0x8d8
 8008fba:	f7ff ff79 	bl	8008eb0 <chTMObjectInit>
}
 8008fbe:	bd10      	pop	{r4, pc}
 8008fc0:	200050f8 	.word	0x200050f8
 8008fc4:	f3af 8000 	nop.w
 8008fc8:	f3af 8000 	nop.w
 8008fcc:	f3af 8000 	nop.w

08008fd0 <_stats_increase_irq>:
 8008fd0:	2320      	movs	r3, #32
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  port_lock_from_isr();
  ch.kernel_stats.n_irq++;
 8008fd6:	4a05      	ldr	r2, [pc, #20]	; (8008fec <_stats_increase_irq+0x1c>)
 8008fd8:	f8d2 38b8 	ldr.w	r3, [r2, #2232]	; 0x8b8
 8008fdc:	3301      	adds	r3, #1
 8008fde:	f8c2 38b8 	str.w	r3, [r2, #2232]	; 0x8b8
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	200050f8 	.word	0x200050f8

08008ff0 <_stats_ctxswc>:
 * @brief   Updates context switch related statistics.
 *
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {
 8008ff0:	b508      	push	{r3, lr}

  ch.kernel_stats.n_ctxswc++;
 8008ff2:	4a07      	ldr	r2, [pc, #28]	; (8009010 <_stats_ctxswc+0x20>)
 8008ff4:	f8d2 38bc 	ldr.w	r3, [r2, #2236]	; 0x8bc
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	f8c2 38bc 	str.w	r3, [r2, #2236]	; 0x8bc
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8008ffe:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8009002:	f100 0148 	add.w	r1, r0, #72	; 0x48
 8009006:	4618      	mov	r0, r3
 8009008:	f7ff ffaa 	bl	8008f60 <chTMChainMeasurementToX>
}
 800900c:	bd08      	pop	{r3, pc}
 800900e:	bf00      	nop
 8009010:	200050f8 	.word	0x200050f8
 8009014:	f3af 8000 	nop.w
 8009018:	f3af 8000 	nop.w
 800901c:	f3af 8000 	nop.w

08009020 <_stats_start_measure_crit_thd>:

/**
 * @brief   Starts the measurement of a thread critical zone.
 */
void _stats_start_measure_crit_thd(void) {
 8009020:	b508      	push	{r3, lr}

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8009022:	4802      	ldr	r0, [pc, #8]	; (800902c <_stats_start_measure_crit_thd+0xc>)
 8009024:	f7ff ff54 	bl	8008ed0 <chTMStartMeasurementX>
}
 8009028:	bd08      	pop	{r3, pc}
 800902a:	bf00      	nop
 800902c:	200059b8 	.word	0x200059b8

08009030 <_stats_stop_measure_crit_thd>:

/**
 * @brief   Stops the measurement of a thread critical zone.
 */
void _stats_stop_measure_crit_thd(void) {
 8009030:	b508      	push	{r3, lr}

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 8009032:	4802      	ldr	r0, [pc, #8]	; (800903c <_stats_stop_measure_crit_thd+0xc>)
 8009034:	f7ff ff54 	bl	8008ee0 <chTMStopMeasurementX>
}
 8009038:	bd08      	pop	{r3, pc}
 800903a:	bf00      	nop
 800903c:	200059b8 	.word	0x200059b8

08009040 <_stats_start_measure_crit_isr>:

/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {
 8009040:	b508      	push	{r3, lr}

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 8009042:	4802      	ldr	r0, [pc, #8]	; (800904c <_stats_start_measure_crit_isr+0xc>)
 8009044:	f7ff ff44 	bl	8008ed0 <chTMStartMeasurementX>
}
 8009048:	bd08      	pop	{r3, pc}
 800904a:	bf00      	nop
 800904c:	200059d0 	.word	0x200059d0

08009050 <_stats_stop_measure_crit_isr>:

/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {
 8009050:	b508      	push	{r3, lr}

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 8009052:	4802      	ldr	r0, [pc, #8]	; (800905c <_stats_stop_measure_crit_isr+0xc>)
 8009054:	f7ff ff44 	bl	8008ee0 <chTMStopMeasurementX>
}
 8009058:	bd08      	pop	{r3, pc}
 800905a:	bf00      	nop
 800905c:	200059d0 	.word	0x200059d0

08009060 <chRegFirstThread>:
 *
 * @return              A reference to the most ancient thread.
 *
 * @api
 */
thread_t *chRegFirstThread(void) {
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	2320      	movs	r3, #32
 8009064:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009068:	f7ff ffda 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800906c:	f7fe fcd8 	bl	8007a20 <_dbg_check_lock>
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 8009070:	4d0d      	ldr	r5, [pc, #52]	; (80090a8 <chRegFirstThread+0x48>)
 8009072:	692c      	ldr	r4, [r5, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 8009074:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8009078:	3301      	adds	r3, #1
 800907a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _dbg_check_unlock();
 800907e:	f7fe fce7 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009082:	f7ff ffd5 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009086:	682b      	ldr	r3, [r5, #0]
 8009088:	42ab      	cmp	r3, r5
 800908a:	d004      	beq.n	8009096 <chRegFirstThread+0x36>
 800908c:	69aa      	ldr	r2, [r5, #24]
 800908e:	6892      	ldr	r2, [r2, #8]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	429a      	cmp	r2, r3
 8009094:	d304      	bcc.n	80090a0 <chRegFirstThread+0x40>
 8009096:	2300      	movs	r3, #0
 8009098:	f383 8811 	msr	BASEPRI, r3
#endif
  chSysUnlock();

  return tp;
}
 800909c:	4620      	mov	r0, r4
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	4802      	ldr	r0, [pc, #8]	; (80090ac <chRegFirstThread+0x4c>)
 80090a2:	f7fe fb2d 	bl	8007700 <chSysHalt>
 80090a6:	e7f6      	b.n	8009096 <chRegFirstThread+0x36>
 80090a8:	200050f8 	.word	0x200050f8
 80090ac:	0801994c 	.word	0x0801994c

080090b0 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4605      	mov	r5, r0
 80090b4:	2320      	movs	r3, #32
 80090b6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80090ba:	f7ff ffb1 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80090be:	f7fe fcaf 	bl	8007a20 <_dbg_check_lock>
  thread_t *ntp;

  chSysLock();
  ntp = tp->newer;
 80090c2:	692c      	ldr	r4, [r5, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 80090c4:	4b15      	ldr	r3, [pc, #84]	; (800911c <chRegNextThread+0x6c>)
 80090c6:	429c      	cmp	r4, r3
 80090c8:	d021      	beq.n	800910e <chRegNextThread+0x5e>
  /*lint -restore*/
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 80090ca:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80090ce:	2bff      	cmp	r3, #255	; 0xff
 80090d0:	d019      	beq.n	8009106 <chRegNextThread+0x56>
    ntp->refs++;
 80090d2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80090d6:	3301      	adds	r3, #1
 80090d8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _dbg_check_unlock();
 80090dc:	f7fe fcb8 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80090e0:	f7ff ffa6 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80090e4:	4b0d      	ldr	r3, [pc, #52]	; (800911c <chRegNextThread+0x6c>)
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d004      	beq.n	80090f6 <chRegNextThread+0x46>
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	6899      	ldr	r1, [r3, #8]
 80090f0:	6893      	ldr	r3, [r2, #8]
 80090f2:	4299      	cmp	r1, r3
 80090f4:	d30d      	bcc.n	8009112 <chRegNextThread+0x62>
 80090f6:	2300      	movs	r3, #0
 80090f8:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 80090fc:	4628      	mov	r0, r5
 80090fe:	f7ff fbbf 	bl	8008880 <chThdRelease>
#endif

  return ntp;
}
 8009102:	4620      	mov	r0, r4
 8009104:	bd38      	pop	{r3, r4, r5, pc}
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8009106:	4806      	ldr	r0, [pc, #24]	; (8009120 <chRegNextThread+0x70>)
 8009108:	f7fe fafa 	bl	8007700 <chSysHalt>
 800910c:	e7e1      	b.n	80090d2 <chRegNextThread+0x22>
    ntp = NULL;
 800910e:	2400      	movs	r4, #0
 8009110:	e7e4      	b.n	80090dc <chRegNextThread+0x2c>
 8009112:	4804      	ldr	r0, [pc, #16]	; (8009124 <chRegNextThread+0x74>)
 8009114:	f7fe faf4 	bl	8007700 <chSysHalt>
 8009118:	e7ed      	b.n	80090f6 <chRegNextThread+0x46>
 800911a:	bf00      	nop
 800911c:	200050f8 	.word	0x200050f8
 8009120:	08019958 	.word	0x08019958
 8009124:	0801994c 	.word	0x0801994c
 8009128:	f3af 8000 	nop.w
 800912c:	f3af 8000 	nop.w

08009130 <chRegFindThreadByName>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByName(const char *name) {
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	4605      	mov	r5, r0
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
 8009134:	f7ff ff94 	bl	8009060 <chRegFirstThread>
 8009138:	4604      	mov	r4, r0
  do {
    if (strcmp(chRegGetThreadNameX(ctp), name) == 0) {
 800913a:	4629      	mov	r1, r5
 800913c:	69a0      	ldr	r0, [r4, #24]
 800913e:	f00e ffb3 	bl	80180a8 <strcmp>
 8009142:	b128      	cbz	r0, 8009150 <chRegFindThreadByName+0x20>
      return ctp;
    }
    ctp = chRegNextThread(ctp);
 8009144:	4620      	mov	r0, r4
 8009146:	f7ff ffb3 	bl	80090b0 <chRegNextThread>
  } while (ctp != NULL);
 800914a:	4604      	mov	r4, r0
 800914c:	2800      	cmp	r0, #0
 800914e:	d1f4      	bne.n	800913a <chRegFindThreadByName+0xa>

  return NULL;
}
 8009150:	4620      	mov	r0, r4
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	f3af 8000 	nop.w
 8009158:	f3af 8000 	nop.w
 800915c:	f3af 8000 	nop.w

08009160 <chRegFindThreadByPointer>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByPointer(thread_t *tp) {
 8009160:	b510      	push	{r4, lr}
 8009162:	4604      	mov	r4, r0
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
 8009164:	f7ff ff7c 	bl	8009060 <chRegFirstThread>
 8009168:	4603      	mov	r3, r0
  do {
    if (ctp == tp) {
 800916a:	42a3      	cmp	r3, r4
 800916c:	d005      	beq.n	800917a <chRegFindThreadByPointer+0x1a>
      return ctp;
    }
    ctp = chRegNextThread(ctp);
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff ff9e 	bl	80090b0 <chRegNextThread>
  } while (ctp != NULL);
 8009174:	4603      	mov	r3, r0
 8009176:	2800      	cmp	r0, #0
 8009178:	d1f7      	bne.n	800916a <chRegFindThreadByPointer+0xa>

  return NULL;
}
 800917a:	4618      	mov	r0, r3
 800917c:	bd10      	pop	{r4, pc}
 800917e:	bf00      	nop

08009180 <chRegFindThreadByWorkingArea>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa) {
 8009180:	b510      	push	{r4, lr}
 8009182:	4604      	mov	r4, r0
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
 8009184:	f7ff ff6c 	bl	8009060 <chRegFirstThread>
 8009188:	4603      	mov	r3, r0
  return tp->wabase;
 800918a:	69da      	ldr	r2, [r3, #28]
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 800918c:	42a2      	cmp	r2, r4
 800918e:	d005      	beq.n	800919c <chRegFindThreadByWorkingArea+0x1c>
      return ctp;
    }
    ctp = chRegNextThread(ctp);
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff ff8d 	bl	80090b0 <chRegNextThread>
  } while (ctp != NULL);
 8009196:	4603      	mov	r3, r0
 8009198:	2800      	cmp	r0, #0
 800919a:	d1f6      	bne.n	800918a <chRegFindThreadByWorkingArea+0xa>

  return NULL;
}
 800919c:	4618      	mov	r0, r3
 800919e:	bd10      	pop	{r4, pc}

080091a0 <chSemObjectInit>:
 * @param[in] n         initial value of the semaphore counter. Must be
 *                      non-negative.
 *
 * @init
 */
void chSemObjectInit(semaphore_t *sp, cnt_t n) {
 80091a0:	b538      	push	{r3, r4, r5, lr}
 80091a2:	460d      	mov	r5, r1

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
 80091a4:	4604      	mov	r4, r0
 80091a6:	b108      	cbz	r0, 80091ac <chSemObjectInit+0xc>
 80091a8:	2900      	cmp	r1, #0
 80091aa:	da02      	bge.n	80091b2 <chSemObjectInit+0x12>
 80091ac:	4803      	ldr	r0, [pc, #12]	; (80091bc <chSemObjectInit+0x1c>)
 80091ae:	f7fe faa7 	bl	8007700 <chSysHalt>
  tqp->next = (thread_t *)tqp;
 80091b2:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
 80091b4:	6064      	str	r4, [r4, #4]

  queue_init(&sp->queue);
  sp->cnt = n;
 80091b6:	60a5      	str	r5, [r4, #8]
}
 80091b8:	bd38      	pop	{r3, r4, r5, pc}
 80091ba:	bf00      	nop
 80091bc:	08019980 	.word	0x08019980

080091c0 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	4604      	mov	r4, r0
 80091c4:	460e      	mov	r6, r1
  cnt_t cnt;

  chDbgCheckClassI();
 80091c6:	f7fe fccb 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
 80091ca:	b194      	cbz	r4, 80091f2 <chSemResetI+0x32>
 80091cc:	2e00      	cmp	r6, #0
 80091ce:	db10      	blt.n	80091f2 <chSemResetI+0x32>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 80091d0:	68a3      	ldr	r3, [r4, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	db02      	blt.n	80091dc <chSemResetI+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 80091d6:	6822      	ldr	r2, [r4, #0]
 80091d8:	4294      	cmp	r4, r2
 80091da:	d007      	beq.n	80091ec <chSemResetI+0x2c>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	da02      	bge.n	80091e6 <chSemResetI+0x26>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	429c      	cmp	r4, r3
 80091e4:	d102      	bne.n	80091ec <chSemResetI+0x2c>
 80091e6:	480b      	ldr	r0, [pc, #44]	; (8009214 <chSemResetI+0x54>)
 80091e8:	f7fe fa8a 	bl	8007700 <chSysHalt>
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  cnt = sp->cnt;
 80091ec:	68a5      	ldr	r5, [r4, #8]
  sp->cnt = n;
 80091ee:	60a6      	str	r6, [r4, #8]
  while (++cnt <= (cnt_t)0) {
 80091f0:	e00c      	b.n	800920c <chSemResetI+0x4c>
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
 80091f2:	4808      	ldr	r0, [pc, #32]	; (8009214 <chSemResetI+0x54>)
 80091f4:	f7fe fa84 	bl	8007700 <chSysHalt>
 80091f8:	e7ea      	b.n	80091d0 <chSemResetI+0x10>
  thread_t *tp = tqp->prev;
 80091fa:	6860      	ldr	r0, [r4, #4]
  tqp->prev             = tp->queue.prev;
 80091fc:	6843      	ldr	r3, [r0, #4]
 80091fe:	6063      	str	r3, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 8009200:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8009202:	f7fe ff9d 	bl	8008140 <chSchReadyI>
 8009206:	f06f 0301 	mvn.w	r3, #1
 800920a:	6243      	str	r3, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 800920c:	3501      	adds	r5, #1
 800920e:	2d00      	cmp	r5, #0
 8009210:	ddf3      	ble.n	80091fa <chSemResetI+0x3a>
  }
}
 8009212:	bd70      	pop	{r4, r5, r6, pc}
 8009214:	08019990 	.word	0x08019990
 8009218:	f3af 8000 	nop.w
 800921c:	f3af 8000 	nop.w

08009220 <chSemReset>:
void chSemReset(semaphore_t *sp, cnt_t n) {
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4604      	mov	r4, r0
 8009224:	460d      	mov	r5, r1
 8009226:	2320      	movs	r3, #32
 8009228:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800922c:	f7ff fef8 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009230:	f7fe fbf6 	bl	8007a20 <_dbg_check_lock>
  chSemResetI(sp, n);
 8009234:	4629      	mov	r1, r5
 8009236:	4620      	mov	r0, r4
 8009238:	f7ff ffc2 	bl	80091c0 <chSemResetI>
  chSchRescheduleS();
 800923c:	f7ff f928 	bl	8008490 <chSchRescheduleS>
  _dbg_check_unlock();
 8009240:	f7fe fc06 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009244:	f7ff fef4 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009248:	4b08      	ldr	r3, [pc, #32]	; (800926c <chSemReset+0x4c>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	429a      	cmp	r2, r3
 800924e:	d004      	beq.n	800925a <chSemReset+0x3a>
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	6899      	ldr	r1, [r3, #8]
 8009254:	6893      	ldr	r3, [r2, #8]
 8009256:	4299      	cmp	r1, r3
 8009258:	d303      	bcc.n	8009262 <chSemReset+0x42>
 800925a:	2300      	movs	r3, #0
 800925c:	f383 8811 	msr	BASEPRI, r3
}
 8009260:	bd38      	pop	{r3, r4, r5, pc}
 8009262:	4803      	ldr	r0, [pc, #12]	; (8009270 <chSemReset+0x50>)
 8009264:	f7fe fa4c 	bl	8007700 <chSysHalt>
 8009268:	e7f7      	b.n	800925a <chSemReset+0x3a>
 800926a:	bf00      	nop
 800926c:	200050f8 	.word	0x200050f8
 8009270:	0801999c 	.word	0x0801999c
 8009274:	f3af 8000 	nop.w
 8009278:	f3af 8000 	nop.w
 800927c:	f3af 8000 	nop.w

08009280 <chSemWaitS>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @sclass
 */
msg_t chSemWaitS(semaphore_t *sp) {
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4604      	mov	r4, r0

  chDbgCheckClassS();
 8009284:	f7fe fc84 	bl	8007b90 <chDbgCheckClassS>
  chDbgCheck(sp != NULL);
 8009288:	b1a4      	cbz	r4, 80092b4 <chSemWaitS+0x34>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 800928a:	68a3      	ldr	r3, [r4, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	db02      	blt.n	8009296 <chSemWaitS+0x16>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8009290:	6822      	ldr	r2, [r4, #0]
 8009292:	4294      	cmp	r4, r2
 8009294:	d007      	beq.n	80092a6 <chSemWaitS+0x26>
 8009296:	2b00      	cmp	r3, #0
 8009298:	da02      	bge.n	80092a0 <chSemWaitS+0x20>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	429c      	cmp	r4, r3
 800929e:	d102      	bne.n	80092a6 <chSemWaitS+0x26>
 80092a0:	480d      	ldr	r0, [pc, #52]	; (80092d8 <chSemWaitS+0x58>)
 80092a2:	f7fe fa2d 	bl	8007700 <chSysHalt>
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 80092a6:	68a3      	ldr	r3, [r4, #8]
 80092a8:	3b01      	subs	r3, #1
 80092aa:	60a3      	str	r3, [r4, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	db05      	blt.n	80092bc <chSemWaitS+0x3c>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->u.rdymsg;
  }

  return MSG_OK;
 80092b0:	2000      	movs	r0, #0
}
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(sp != NULL);
 80092b4:	4808      	ldr	r0, [pc, #32]	; (80092d8 <chSemWaitS+0x58>)
 80092b6:	f7fe fa23 	bl	8007700 <chSysHalt>
 80092ba:	e7e6      	b.n	800928a <chSemWaitS+0xa>
    currp->u.wtsemp = sp;
 80092bc:	4d07      	ldr	r5, [pc, #28]	; (80092dc <chSemWaitS+0x5c>)
 80092be:	69ab      	ldr	r3, [r5, #24]
 80092c0:	625c      	str	r4, [r3, #36]	; 0x24
  tp->queue.next             = (thread_t *)tqp;
 80092c2:	601c      	str	r4, [r3, #0]
  tp->queue.prev             = tqp->prev;
 80092c4:	6862      	ldr	r2, [r4, #4]
 80092c6:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80092c8:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 80092ca:	6063      	str	r3, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 80092cc:	2005      	movs	r0, #5
 80092ce:	f7fe ffc7 	bl	8008260 <chSchGoSleepS>
    return currp->u.rdymsg;
 80092d2:	69ab      	ldr	r3, [r5, #24]
 80092d4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80092d6:	e7ec      	b.n	80092b2 <chSemWaitS+0x32>
 80092d8:	080199a8 	.word	0x080199a8
 80092dc:	200050f8 	.word	0x200050f8

080092e0 <chSemWait>:
msg_t chSemWait(semaphore_t *sp) {
 80092e0:	b510      	push	{r4, lr}
 80092e2:	4604      	mov	r4, r0
 80092e4:	2320      	movs	r3, #32
 80092e6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80092ea:	f7ff fe99 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80092ee:	f7fe fb97 	bl	8007a20 <_dbg_check_lock>
  msg = chSemWaitS(sp);
 80092f2:	4620      	mov	r0, r4
 80092f4:	f7ff ffc4 	bl	8009280 <chSemWaitS>
 80092f8:	4604      	mov	r4, r0
  _dbg_check_unlock();
 80092fa:	f7fe fba9 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80092fe:	f7ff fe97 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009302:	4b09      	ldr	r3, [pc, #36]	; (8009328 <chSemWait+0x48>)
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	429a      	cmp	r2, r3
 8009308:	d004      	beq.n	8009314 <chSemWait+0x34>
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	6899      	ldr	r1, [r3, #8]
 800930e:	6893      	ldr	r3, [r2, #8]
 8009310:	4299      	cmp	r1, r3
 8009312:	d304      	bcc.n	800931e <chSemWait+0x3e>
 8009314:	2300      	movs	r3, #0
 8009316:	f383 8811 	msr	BASEPRI, r3
}
 800931a:	4620      	mov	r0, r4
 800931c:	bd10      	pop	{r4, pc}
 800931e:	4803      	ldr	r0, [pc, #12]	; (800932c <chSemWait+0x4c>)
 8009320:	f7fe f9ee 	bl	8007700 <chSysHalt>
 8009324:	e7f6      	b.n	8009314 <chSemWait+0x34>
 8009326:	bf00      	nop
 8009328:	200050f8 	.word	0x200050f8
 800932c:	0801999c 	.word	0x0801999c

08009330 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout) {
 8009330:	b5d0      	push	{r4, r6, r7, lr}
 8009332:	4604      	mov	r4, r0
 8009334:	4616      	mov	r6, r2
 8009336:	461f      	mov	r7, r3

  chDbgCheckClassS();
 8009338:	f7fe fc2a 	bl	8007b90 <chDbgCheckClassS>
  chDbgCheck(sp != NULL);
 800933c:	b1a4      	cbz	r4, 8009368 <chSemWaitTimeoutS+0x38>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 800933e:	68a3      	ldr	r3, [r4, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	db02      	blt.n	800934a <chSemWaitTimeoutS+0x1a>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8009344:	6822      	ldr	r2, [r4, #0]
 8009346:	4294      	cmp	r4, r2
 8009348:	d007      	beq.n	800935a <chSemWaitTimeoutS+0x2a>
 800934a:	2b00      	cmp	r3, #0
 800934c:	da02      	bge.n	8009354 <chSemWaitTimeoutS+0x24>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	429c      	cmp	r4, r3
 8009352:	d102      	bne.n	800935a <chSemWaitTimeoutS+0x2a>
 8009354:	4811      	ldr	r0, [pc, #68]	; (800939c <chSemWaitTimeoutS+0x6c>)
 8009356:	f7fe f9d3 	bl	8007700 <chSysHalt>
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 800935a:	68a2      	ldr	r2, [r4, #8]
 800935c:	1e53      	subs	r3, r2, #1
 800935e:	60a3      	str	r3, [r4, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	db05      	blt.n	8009370 <chSemWaitTimeoutS+0x40>
    sem_insert(currp, &sp->queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
  }

  return MSG_OK;
 8009364:	2000      	movs	r0, #0
}
 8009366:	bdd0      	pop	{r4, r6, r7, pc}
  chDbgCheck(sp != NULL);
 8009368:	480c      	ldr	r0, [pc, #48]	; (800939c <chSemWaitTimeoutS+0x6c>)
 800936a:	f7fe f9c9 	bl	8007700 <chSysHalt>
 800936e:	e7e6      	b.n	800933e <chSemWaitTimeoutS+0xe>
    if (TIME_IMMEDIATE == timeout) {
 8009370:	ea56 0307 	orrs.w	r3, r6, r7
 8009374:	d00d      	beq.n	8009392 <chSemWaitTimeoutS+0x62>
    currp->u.wtsemp = sp;
 8009376:	4b0a      	ldr	r3, [pc, #40]	; (80093a0 <chSemWaitTimeoutS+0x70>)
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	625c      	str	r4, [r3, #36]	; 0x24
  tp->queue.next             = (thread_t *)tqp;
 800937c:	601c      	str	r4, [r3, #0]
  tp->queue.prev             = tqp->prev;
 800937e:	6862      	ldr	r2, [r4, #4]
 8009380:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8009382:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8009384:	6063      	str	r3, [r4, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8009386:	4632      	mov	r2, r6
 8009388:	463b      	mov	r3, r7
 800938a:	2005      	movs	r0, #5
 800938c:	f7fe ff98 	bl	80082c0 <chSchGoSleepTimeoutS>
 8009390:	e7e9      	b.n	8009366 <chSemWaitTimeoutS+0x36>
      sp->cnt++;
 8009392:	60a2      	str	r2, [r4, #8]
      return MSG_TIMEOUT;
 8009394:	f04f 30ff 	mov.w	r0, #4294967295
 8009398:	e7e5      	b.n	8009366 <chSemWaitTimeoutS+0x36>
 800939a:	bf00      	nop
 800939c:	080199b4 	.word	0x080199b4
 80093a0:	200050f8 	.word	0x200050f8
 80093a4:	f3af 8000 	nop.w
 80093a8:	f3af 8000 	nop.w
 80093ac:	f3af 8000 	nop.w

080093b0 <chSemWaitTimeout>:
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 80093b0:	b5d0      	push	{r4, r6, r7, lr}
 80093b2:	4604      	mov	r4, r0
 80093b4:	4616      	mov	r6, r2
 80093b6:	461f      	mov	r7, r3
 80093b8:	2320      	movs	r3, #32
 80093ba:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80093be:	f7ff fe2f 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80093c2:	f7fe fb2d 	bl	8007a20 <_dbg_check_lock>
  msg = chSemWaitTimeoutS(sp, timeout);
 80093c6:	4632      	mov	r2, r6
 80093c8:	463b      	mov	r3, r7
 80093ca:	4620      	mov	r0, r4
 80093cc:	f7ff ffb0 	bl	8009330 <chSemWaitTimeoutS>
 80093d0:	4604      	mov	r4, r0
  _dbg_check_unlock();
 80093d2:	f7fe fb3d 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80093d6:	f7ff fe2b 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80093da:	4b09      	ldr	r3, [pc, #36]	; (8009400 <chSemWaitTimeout+0x50>)
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d004      	beq.n	80093ec <chSemWaitTimeout+0x3c>
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	6899      	ldr	r1, [r3, #8]
 80093e6:	6893      	ldr	r3, [r2, #8]
 80093e8:	4299      	cmp	r1, r3
 80093ea:	d304      	bcc.n	80093f6 <chSemWaitTimeout+0x46>
 80093ec:	2300      	movs	r3, #0
 80093ee:	f383 8811 	msr	BASEPRI, r3
}
 80093f2:	4620      	mov	r0, r4
 80093f4:	bdd0      	pop	{r4, r6, r7, pc}
 80093f6:	4803      	ldr	r0, [pc, #12]	; (8009404 <chSemWaitTimeout+0x54>)
 80093f8:	f7fe f982 	bl	8007700 <chSysHalt>
 80093fc:	e7f6      	b.n	80093ec <chSemWaitTimeout+0x3c>
 80093fe:	bf00      	nop
 8009400:	200050f8 	.word	0x200050f8
 8009404:	0801999c 	.word	0x0801999c
 8009408:	f3af 8000 	nop.w
 800940c:	f3af 8000 	nop.w

08009410 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8009410:	b510      	push	{r4, lr}

  chDbgCheck(sp != NULL);
 8009412:	4604      	mov	r4, r0
 8009414:	b350      	cbz	r0, 800946c <chSemSignal+0x5c>
 8009416:	2320      	movs	r3, #32
 8009418:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800941c:	f7ff fe00 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009420:	f7fe fafe 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 8009424:	68a3      	ldr	r3, [r4, #8]
 8009426:	2b00      	cmp	r3, #0
 8009428:	db02      	blt.n	8009430 <chSemSignal+0x20>
  return (bool)(tqp->next == (const thread_t *)tqp);
 800942a:	6822      	ldr	r2, [r4, #0]
 800942c:	4294      	cmp	r4, r2
 800942e:	d007      	beq.n	8009440 <chSemSignal+0x30>
 8009430:	2b00      	cmp	r3, #0
 8009432:	da02      	bge.n	800943a <chSemSignal+0x2a>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	429c      	cmp	r4, r3
 8009438:	d102      	bne.n	8009440 <chSemSignal+0x30>
 800943a:	4814      	ldr	r0, [pc, #80]	; (800948c <chSemSignal+0x7c>)
 800943c:	f7fe f960 	bl	8007700 <chSysHalt>
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");
  if (++sp->cnt <= (cnt_t)0) {
 8009440:	68a3      	ldr	r3, [r4, #8]
 8009442:	3301      	adds	r3, #1
 8009444:	60a3      	str	r3, [r4, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	dd14      	ble.n	8009474 <chSemSignal+0x64>
  _dbg_check_unlock();
 800944a:	f7fe fb01 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800944e:	f7ff fdef 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009452:	4b0f      	ldr	r3, [pc, #60]	; (8009490 <chSemSignal+0x80>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	d004      	beq.n	8009464 <chSemSignal+0x54>
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	6899      	ldr	r1, [r3, #8]
 800945e:	6893      	ldr	r3, [r2, #8]
 8009460:	4299      	cmp	r1, r3
 8009462:	d30f      	bcc.n	8009484 <chSemSignal+0x74>
 8009464:	2300      	movs	r3, #0
 8009466:	f383 8811 	msr	BASEPRI, r3
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
  }
  chSysUnlock();
}
 800946a:	bd10      	pop	{r4, pc}
  chDbgCheck(sp != NULL);
 800946c:	4807      	ldr	r0, [pc, #28]	; (800948c <chSemSignal+0x7c>)
 800946e:	f7fe f947 	bl	8007700 <chSysHalt>
 8009472:	e7d0      	b.n	8009416 <chSemSignal+0x6>
  thread_t *tp = tqp->next;
 8009474:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8009476:	6803      	ldr	r3, [r0, #0]
 8009478:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800947a:	605c      	str	r4, [r3, #4]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 800947c:	2100      	movs	r1, #0
 800947e:	f7fe ff4f 	bl	8008320 <chSchWakeupS>
 8009482:	e7e2      	b.n	800944a <chSemSignal+0x3a>
 8009484:	4803      	ldr	r0, [pc, #12]	; (8009494 <chSemSignal+0x84>)
 8009486:	f7fe f93b 	bl	8007700 <chSysHalt>
 800948a:	e7eb      	b.n	8009464 <chSemSignal+0x54>
 800948c:	080199c8 	.word	0x080199c8
 8009490:	200050f8 	.word	0x200050f8
 8009494:	0801999c 	.word	0x0801999c
 8009498:	f3af 8000 	nop.w
 800949c:	f3af 8000 	nop.w

080094a0 <chSemSignalI>:
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 80094a0:	b510      	push	{r4, lr}
 80094a2:	4604      	mov	r4, r0

  chDbgCheckClassI();
 80094a4:	f7fe fb5c 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(sp != NULL);
 80094a8:	b19c      	cbz	r4, 80094d2 <chSemSignalI+0x32>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 80094aa:	68a3      	ldr	r3, [r4, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	db02      	blt.n	80094b6 <chSemSignalI+0x16>
  return (bool)(tqp->next == (const thread_t *)tqp);
 80094b0:	6822      	ldr	r2, [r4, #0]
 80094b2:	4294      	cmp	r4, r2
 80094b4:	d007      	beq.n	80094c6 <chSemSignalI+0x26>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	da02      	bge.n	80094c0 <chSemSignalI+0x20>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80094ba:	6823      	ldr	r3, [r4, #0]
 80094bc:	429c      	cmp	r4, r3
 80094be:	d102      	bne.n	80094c6 <chSemSignalI+0x26>
 80094c0:	480a      	ldr	r0, [pc, #40]	; (80094ec <chSemSignalI+0x4c>)
 80094c2:	f7fe f91d 	bl	8007700 <chSysHalt>
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 80094c6:	68a3      	ldr	r3, [r4, #8]
 80094c8:	3301      	adds	r3, #1
 80094ca:	60a3      	str	r3, [r4, #8]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	dd04      	ble.n	80094da <chSemSignalI+0x3a>
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 80094d0:	bd10      	pop	{r4, pc}
  chDbgCheck(sp != NULL);
 80094d2:	4806      	ldr	r0, [pc, #24]	; (80094ec <chSemSignalI+0x4c>)
 80094d4:	f7fe f914 	bl	8007700 <chSysHalt>
 80094d8:	e7e7      	b.n	80094aa <chSemSignalI+0xa>
  thread_t *tp = tqp->next;
 80094da:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 80094dc:	6803      	ldr	r3, [r0, #0]
 80094de:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80094e0:	605c      	str	r4, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80094e6:	f7fe fe2b 	bl	8008140 <chSchReadyI>
}
 80094ea:	e7f1      	b.n	80094d0 <chSemSignalI+0x30>
 80094ec:	080199d4 	.word	0x080199d4

080094f0 <chSemAddCounterI>:
 * @param[in] n         value to be added to the semaphore counter. The value
 *                      must be positive.
 *
 * @iclass
 */
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4604      	mov	r4, r0
 80094f4:	460d      	mov	r5, r1

  chDbgCheckClassI();
 80094f6:	f7fe fb33 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
 80094fa:	b184      	cbz	r4, 800951e <chSemAddCounterI+0x2e>
 80094fc:	2d00      	cmp	r5, #0
 80094fe:	dd0e      	ble.n	800951e <chSemAddCounterI+0x2e>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 8009500:	68a3      	ldr	r3, [r4, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	db02      	blt.n	800950c <chSemAddCounterI+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8009506:	6822      	ldr	r2, [r4, #0]
 8009508:	4294      	cmp	r4, r2
 800950a:	d00d      	beq.n	8009528 <chSemAddCounterI+0x38>
 800950c:	2b00      	cmp	r3, #0
 800950e:	da02      	bge.n	8009516 <chSemAddCounterI+0x26>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	429c      	cmp	r4, r3
 8009514:	d108      	bne.n	8009528 <chSemAddCounterI+0x38>
 8009516:	480d      	ldr	r0, [pc, #52]	; (800954c <chSemAddCounterI+0x5c>)
 8009518:	f7fe f8f2 	bl	8007700 <chSysHalt>
 800951c:	e004      	b.n	8009528 <chSemAddCounterI+0x38>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
 800951e:	480b      	ldr	r0, [pc, #44]	; (800954c <chSemAddCounterI+0x5c>)
 8009520:	f7fe f8ee 	bl	8007700 <chSysHalt>
 8009524:	e7ec      	b.n	8009500 <chSemAddCounterI+0x10>

  while (n > (cnt_t)0) {
    if (++sp->cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
    }
    n--;
 8009526:	3d01      	subs	r5, #1
  while (n > (cnt_t)0) {
 8009528:	2d00      	cmp	r5, #0
 800952a:	dd0d      	ble.n	8009548 <chSemAddCounterI+0x58>
    if (++sp->cnt <= (cnt_t)0) {
 800952c:	68a3      	ldr	r3, [r4, #8]
 800952e:	3301      	adds	r3, #1
 8009530:	60a3      	str	r3, [r4, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	dcf7      	bgt.n	8009526 <chSemAddCounterI+0x36>
  thread_t *tp = tqp->next;
 8009536:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8009538:	6803      	ldr	r3, [r0, #0]
 800953a:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800953c:	605c      	str	r4, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800953e:	f7fe fdff 	bl	8008140 <chSchReadyI>
 8009542:	2300      	movs	r3, #0
 8009544:	6243      	str	r3, [r0, #36]	; 0x24
 8009546:	e7ee      	b.n	8009526 <chSemAddCounterI+0x36>
  }
}
 8009548:	bd38      	pop	{r3, r4, r5, pc}
 800954a:	bf00      	nop
 800954c:	080199e4 	.word	0x080199e4

08009550 <chSemSignalWait>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	460c      	mov	r4, r1
  msg_t msg;

  chDbgCheck((sps != NULL) && (spw != NULL));
 8009554:	4605      	mov	r5, r0
 8009556:	2800      	cmp	r0, #0
 8009558:	d043      	beq.n	80095e2 <chSemSignalWait+0x92>
 800955a:	2900      	cmp	r1, #0
 800955c:	d041      	beq.n	80095e2 <chSemSignalWait+0x92>
 800955e:	2320      	movs	r3, #32
 8009560:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009564:	f7ff fd5c 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009568:	f7fe fa5a 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(((sps->cnt >= (cnt_t)0) && queue_isempty(&sps->queue)) ||
 800956c:	68ab      	ldr	r3, [r5, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	db02      	blt.n	8009578 <chSemSignalWait+0x28>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8009572:	682a      	ldr	r2, [r5, #0]
 8009574:	4295      	cmp	r5, r2
 8009576:	d007      	beq.n	8009588 <chSemSignalWait+0x38>
 8009578:	2b00      	cmp	r3, #0
 800957a:	da02      	bge.n	8009582 <chSemSignalWait+0x32>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	429d      	cmp	r5, r3
 8009580:	d102      	bne.n	8009588 <chSemSignalWait+0x38>
 8009582:	4827      	ldr	r0, [pc, #156]	; (8009620 <chSemSignalWait+0xd0>)
 8009584:	f7fe f8bc 	bl	8007700 <chSysHalt>
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
 8009588:	68a3      	ldr	r3, [r4, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	db02      	blt.n	8009594 <chSemSignalWait+0x44>
  return (bool)(tqp->next == (const thread_t *)tqp);
 800958e:	6822      	ldr	r2, [r4, #0]
 8009590:	4294      	cmp	r4, r2
 8009592:	d007      	beq.n	80095a4 <chSemSignalWait+0x54>
 8009594:	2b00      	cmp	r3, #0
 8009596:	da02      	bge.n	800959e <chSemSignalWait+0x4e>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	429c      	cmp	r4, r3
 800959c:	d102      	bne.n	80095a4 <chSemSignalWait+0x54>
 800959e:	4820      	ldr	r0, [pc, #128]	; (8009620 <chSemSignalWait+0xd0>)
 80095a0:	f7fe f8ae 	bl	8007700 <chSysHalt>
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 80095a4:	68ab      	ldr	r3, [r5, #8]
 80095a6:	3301      	adds	r3, #1
 80095a8:	60ab      	str	r3, [r5, #8]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	dd1d      	ble.n	80095ea <chSemSignalWait+0x9a>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 80095ae:	68a3      	ldr	r3, [r4, #8]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	60a3      	str	r3, [r4, #8]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	db21      	blt.n	80095fc <chSemSignalWait+0xac>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 80095b8:	f7fe ff6a 	bl	8008490 <chSchRescheduleS>
    msg = MSG_OK;
 80095bc:	2400      	movs	r4, #0
  _dbg_check_unlock();
 80095be:	f7fe fa47 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80095c2:	f7ff fd35 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80095c6:	4b17      	ldr	r3, [pc, #92]	; (8009624 <chSemSignalWait+0xd4>)
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d004      	beq.n	80095d8 <chSemSignalWait+0x88>
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	6899      	ldr	r1, [r3, #8]
 80095d2:	6893      	ldr	r3, [r2, #8]
 80095d4:	4299      	cmp	r1, r3
 80095d6:	d31e      	bcc.n	8009616 <chSemSignalWait+0xc6>
 80095d8:	2300      	movs	r3, #0
 80095da:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 80095de:	4620      	mov	r0, r4
 80095e0:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck((sps != NULL) && (spw != NULL));
 80095e2:	480f      	ldr	r0, [pc, #60]	; (8009620 <chSemSignalWait+0xd0>)
 80095e4:	f7fe f88c 	bl	8007700 <chSysHalt>
 80095e8:	e7b9      	b.n	800955e <chSemSignalWait+0xe>
  thread_t *tp = tqp->next;
 80095ea:	6828      	ldr	r0, [r5, #0]
  tqp->next             = tp->queue.next;
 80095ec:	6803      	ldr	r3, [r0, #0]
 80095ee:	602b      	str	r3, [r5, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80095f0:	605d      	str	r5, [r3, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 80095f2:	f7fe fda5 	bl	8008140 <chSchReadyI>
 80095f6:	2300      	movs	r3, #0
 80095f8:	6243      	str	r3, [r0, #36]	; 0x24
 80095fa:	e7d8      	b.n	80095ae <chSemSignalWait+0x5e>
    thread_t *ctp = currp;
 80095fc:	4b09      	ldr	r3, [pc, #36]	; (8009624 <chSemSignalWait+0xd4>)
 80095fe:	699d      	ldr	r5, [r3, #24]
  tp->queue.next             = (thread_t *)tqp;
 8009600:	602c      	str	r4, [r5, #0]
  tp->queue.prev             = tqp->prev;
 8009602:	6863      	ldr	r3, [r4, #4]
 8009604:	606b      	str	r3, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8009606:	601d      	str	r5, [r3, #0]
  tqp->prev                  = tp;
 8009608:	6065      	str	r5, [r4, #4]
    ctp->u.wtsemp = spw;
 800960a:	626c      	str	r4, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTSEM);
 800960c:	2005      	movs	r0, #5
 800960e:	f7fe fe27 	bl	8008260 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 8009612:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8009614:	e7d3      	b.n	80095be <chSemSignalWait+0x6e>
 8009616:	4804      	ldr	r0, [pc, #16]	; (8009628 <chSemSignalWait+0xd8>)
 8009618:	f7fe f872 	bl	8007700 <chSysHalt>
 800961c:	e7dc      	b.n	80095d8 <chSemSignalWait+0x88>
 800961e:	bf00      	nop
 8009620:	080199f8 	.word	0x080199f8
 8009624:	200050f8 	.word	0x200050f8
 8009628:	0801999c 	.word	0x0801999c
 800962c:	00000000 	.word	0x00000000

08009630 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8009630:	b510      	push	{r4, lr}

  chDbgCheck(mp != NULL);
 8009632:	4604      	mov	r4, r0
 8009634:	b120      	cbz	r0, 8009640 <chMtxObjectInit+0x10>
  tqp->next = (thread_t *)tqp;
 8009636:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
 8009638:	6064      	str	r4, [r4, #4]

  queue_init(&mp->queue);
  mp->owner = NULL;
 800963a:	2300      	movs	r3, #0
 800963c:	60a3      	str	r3, [r4, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 800963e:	bd10      	pop	{r4, pc}
  chDbgCheck(mp != NULL);
 8009640:	4801      	ldr	r0, [pc, #4]	; (8009648 <chMtxObjectInit+0x18>)
 8009642:	f7fe f85d 	bl	8007700 <chSysHalt>
 8009646:	e7f6      	b.n	8009636 <chMtxObjectInit+0x6>
 8009648:	08019a08 	.word	0x08019a08
 800964c:	f3af 8000 	nop.w

08009650 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	4605      	mov	r5, r0
  thread_t *ctp = currp;
 8009654:	4b3a      	ldr	r3, [pc, #232]	; (8009740 <chMtxLockS+0xf0>)
 8009656:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
 8009658:	f7fe fa9a 	bl	8007b90 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 800965c:	2d00      	cmp	r5, #0
 800965e:	d02e      	beq.n	80096be <chMtxLockS+0x6e>

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8009660:	68a8      	ldr	r0, [r5, #8]
 8009662:	2800      	cmp	r0, #0
 8009664:	d067      	beq.n	8009736 <chMtxLockS+0xe6>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8009666:	6882      	ldr	r2, [r0, #8]
 8009668:	68a3      	ldr	r3, [r4, #8]
 800966a:	429a      	cmp	r2, r3
 800966c:	d208      	bcs.n	8009680 <chMtxLockS+0x30>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;
 800966e:	6083      	str	r3, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8009670:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009674:	2b06      	cmp	r3, #6
 8009676:	d026      	beq.n	80096c6 <chMtxLockS+0x76>
 8009678:	2b07      	cmp	r3, #7
 800967a:	d03b      	beq.n	80096f4 <chMtxLockS+0xa4>
 800967c:	2b00      	cmp	r3, #0
 800967e:	d04e      	beq.n	800971e <chMtxLockS+0xce>
        }
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
 8009680:	4628      	mov	r0, r5
  thread_t *cp = (thread_t *)tqp;
 8009682:	462b      	mov	r3, r5
    cp = cp->queue.next;
 8009684:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8009686:	4298      	cmp	r0, r3
 8009688:	d003      	beq.n	8009692 <chMtxLockS+0x42>
 800968a:	6899      	ldr	r1, [r3, #8]
 800968c:	68a2      	ldr	r2, [r4, #8]
 800968e:	4291      	cmp	r1, r2
 8009690:	d2f8      	bcs.n	8009684 <chMtxLockS+0x34>
  tp->queue.next             = cp;
 8009692:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8009698:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 800969a:	605c      	str	r4, [r3, #4]
      ctp->u.wtmtxp = mp;
 800969c:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 800969e:	2006      	movs	r0, #6
 80096a0:	f7fe fdde 	bl	8008260 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == ctp, "not owner");
 80096a4:	68ab      	ldr	r3, [r5, #8]
 80096a6:	42a3      	cmp	r3, r4
 80096a8:	d002      	beq.n	80096b0 <chMtxLockS+0x60>
 80096aa:	4826      	ldr	r0, [pc, #152]	; (8009744 <chMtxLockS+0xf4>)
 80096ac:	f7fe f828 	bl	8007700 <chSysHalt>
      chDbgAssert(ctp->mtxlist == mp, "not owned");
 80096b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096b2:	42ab      	cmp	r3, r5
 80096b4:	d002      	beq.n	80096bc <chMtxLockS+0x6c>
 80096b6:	4823      	ldr	r0, [pc, #140]	; (8009744 <chMtxLockS+0xf4>)
 80096b8:	f7fe f822 	bl	8007700 <chSysHalt>
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
  }
}
 80096bc:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mp != NULL);
 80096be:	4821      	ldr	r0, [pc, #132]	; (8009744 <chMtxLockS+0xf4>)
 80096c0:	f7fe f81e 	bl	8007700 <chSysHalt>
 80096c4:	e7cc      	b.n	8009660 <chMtxLockS+0x10>
  tp->queue.prev->queue.next = tp->queue.next;
 80096c6:	6843      	ldr	r3, [r0, #4]
 80096c8:	6802      	ldr	r2, [r0, #0]
 80096ca:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80096cc:	6803      	ldr	r3, [r0, #0]
 80096ce:	6842      	ldr	r2, [r0, #4]
 80096d0:	605a      	str	r2, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80096d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 80096d4:	4633      	mov	r3, r6
    cp = cp->queue.next;
 80096d6:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80096d8:	429e      	cmp	r6, r3
 80096da:	d003      	beq.n	80096e4 <chMtxLockS+0x94>
 80096dc:	6899      	ldr	r1, [r3, #8]
 80096de:	6882      	ldr	r2, [r0, #8]
 80096e0:	4291      	cmp	r1, r2
 80096e2:	d2f8      	bcs.n	80096d6 <chMtxLockS+0x86>
  tp->queue.next             = cp;
 80096e4:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 80096ea:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80096ec:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 80096ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80096f0:	6898      	ldr	r0, [r3, #8]
          continue;
 80096f2:	e7b8      	b.n	8009666 <chMtxLockS+0x16>
  tp->queue.prev->queue.next = tp->queue.next;
 80096f4:	6843      	ldr	r3, [r0, #4]
 80096f6:	6802      	ldr	r2, [r0, #0]
 80096f8:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80096fa:	6803      	ldr	r3, [r0, #0]
 80096fc:	6842      	ldr	r2, [r0, #4]
 80096fe:	605a      	str	r2, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8009700:	6a46      	ldr	r6, [r0, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8009702:	4633      	mov	r3, r6
    cp = cp->queue.next;
 8009704:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8009706:	429e      	cmp	r6, r3
 8009708:	d003      	beq.n	8009712 <chMtxLockS+0xc2>
 800970a:	6899      	ldr	r1, [r3, #8]
 800970c:	6882      	ldr	r2, [r0, #8]
 800970e:	4291      	cmp	r1, r2
 8009710:	d2f8      	bcs.n	8009704 <chMtxLockS+0xb4>
  tp->queue.next             = cp;
 8009712:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8009718:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800971a:	6058      	str	r0, [r3, #4]
 800971c:	e7b0      	b.n	8009680 <chMtxLockS+0x30>
          tp->state = CH_STATE_CURRENT;
 800971e:	2301      	movs	r3, #1
 8009720:	f880 3020 	strb.w	r3, [r0, #32]
  tp->queue.prev->queue.next = tp->queue.next;
 8009724:	6843      	ldr	r3, [r0, #4]
 8009726:	6802      	ldr	r2, [r0, #0]
 8009728:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800972a:	6803      	ldr	r3, [r0, #0]
 800972c:	6842      	ldr	r2, [r0, #4]
 800972e:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8009730:	f7fe fd06 	bl	8008140 <chSchReadyI>
          break;
 8009734:	e7a4      	b.n	8009680 <chMtxLockS+0x30>
    mp->owner = ctp;
 8009736:	60ac      	str	r4, [r5, #8]
    mp->next = ctp->mtxlist;
 8009738:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800973a:	60eb      	str	r3, [r5, #12]
    ctp->mtxlist = mp;
 800973c:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800973e:	e7bd      	b.n	80096bc <chMtxLockS+0x6c>
 8009740:	200050f8 	.word	0x200050f8
 8009744:	08019a18 	.word	0x08019a18
 8009748:	f3af 8000 	nop.w
 800974c:	f3af 8000 	nop.w

08009750 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 8009750:	b510      	push	{r4, lr}
 8009752:	4604      	mov	r4, r0
 8009754:	2320      	movs	r3, #32
 8009756:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800975a:	f7ff fc61 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800975e:	f7fe f95f 	bl	8007a20 <_dbg_check_lock>
  chMtxLockS(mp);
 8009762:	4620      	mov	r0, r4
 8009764:	f7ff ff74 	bl	8009650 <chMtxLockS>
  _dbg_check_unlock();
 8009768:	f7fe f972 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800976c:	f7ff fc60 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009770:	4b08      	ldr	r3, [pc, #32]	; (8009794 <chMtxLock+0x44>)
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	429a      	cmp	r2, r3
 8009776:	d004      	beq.n	8009782 <chMtxLock+0x32>
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	6899      	ldr	r1, [r3, #8]
 800977c:	6893      	ldr	r3, [r2, #8]
 800977e:	4299      	cmp	r1, r3
 8009780:	d303      	bcc.n	800978a <chMtxLock+0x3a>
 8009782:	2300      	movs	r3, #0
 8009784:	f383 8811 	msr	BASEPRI, r3
}
 8009788:	bd10      	pop	{r4, pc}
 800978a:	4803      	ldr	r0, [pc, #12]	; (8009798 <chMtxLock+0x48>)
 800978c:	f7fd ffb8 	bl	8007700 <chSysHalt>
 8009790:	e7f7      	b.n	8009782 <chMtxLock+0x32>
 8009792:	bf00      	nop
 8009794:	200050f8 	.word	0x200050f8
 8009798:	08019a24 	.word	0x08019a24
 800979c:	f3af 8000 	nop.w

080097a0 <chMtxTryLockS>:
 * @retval true         if the mutex has been successfully acquired
 * @retval false        if the lock attempt failed.
 *
 * @sclass
 */
bool chMtxTryLockS(mutex_t *mp) {
 80097a0:	b510      	push	{r4, lr}
 80097a2:	4604      	mov	r4, r0

  chDbgCheckClassS();
 80097a4:	f7fe f9f4 	bl	8007b90 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 80097a8:	b11c      	cbz	r4, 80097b2 <chMtxTryLockS+0x12>

  if (mp->owner != NULL) {
 80097aa:	68a3      	ldr	r3, [r4, #8]
 80097ac:	b12b      	cbz	r3, 80097ba <chMtxTryLockS+0x1a>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 80097ae:	2000      	movs	r0, #0
#endif
  mp->owner = currp;
  mp->next = currp->mtxlist;
  currp->mtxlist = mp;
  return true;
}
 80097b0:	bd10      	pop	{r4, pc}
  chDbgCheck(mp != NULL);
 80097b2:	4807      	ldr	r0, [pc, #28]	; (80097d0 <chMtxTryLockS+0x30>)
 80097b4:	f7fd ffa4 	bl	8007700 <chSysHalt>
 80097b8:	e7f7      	b.n	80097aa <chMtxTryLockS+0xa>
  mp->owner = currp;
 80097ba:	4b06      	ldr	r3, [pc, #24]	; (80097d4 <chMtxTryLockS+0x34>)
 80097bc:	699a      	ldr	r2, [r3, #24]
 80097be:	60a2      	str	r2, [r4, #8]
  mp->next = currp->mtxlist;
 80097c0:	699a      	ldr	r2, [r3, #24]
 80097c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80097c4:	60e2      	str	r2, [r4, #12]
  currp->mtxlist = mp;
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	639c      	str	r4, [r3, #56]	; 0x38
  return true;
 80097ca:	2001      	movs	r0, #1
 80097cc:	e7f0      	b.n	80097b0 <chMtxTryLockS+0x10>
 80097ce:	bf00      	nop
 80097d0:	08019a30 	.word	0x08019a30
 80097d4:	200050f8 	.word	0x200050f8
 80097d8:	f3af 8000 	nop.w
 80097dc:	f3af 8000 	nop.w

080097e0 <chMtxTryLock>:
bool chMtxTryLock(mutex_t *mp) {
 80097e0:	b510      	push	{r4, lr}
 80097e2:	4604      	mov	r4, r0
 80097e4:	2320      	movs	r3, #32
 80097e6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80097ea:	f7ff fc19 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80097ee:	f7fe f917 	bl	8007a20 <_dbg_check_lock>
  b = chMtxTryLockS(mp);
 80097f2:	4620      	mov	r0, r4
 80097f4:	f7ff ffd4 	bl	80097a0 <chMtxTryLockS>
 80097f8:	4604      	mov	r4, r0
  _dbg_check_unlock();
 80097fa:	f7fe f929 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80097fe:	f7ff fc17 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009802:	4b09      	ldr	r3, [pc, #36]	; (8009828 <chMtxTryLock+0x48>)
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	429a      	cmp	r2, r3
 8009808:	d004      	beq.n	8009814 <chMtxTryLock+0x34>
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	6899      	ldr	r1, [r3, #8]
 800980e:	6893      	ldr	r3, [r2, #8]
 8009810:	4299      	cmp	r1, r3
 8009812:	d304      	bcc.n	800981e <chMtxTryLock+0x3e>
 8009814:	2300      	movs	r3, #0
 8009816:	f383 8811 	msr	BASEPRI, r3
}
 800981a:	4620      	mov	r0, r4
 800981c:	bd10      	pop	{r4, pc}
 800981e:	4803      	ldr	r0, [pc, #12]	; (800982c <chMtxTryLock+0x4c>)
 8009820:	f7fd ff6e 	bl	8007700 <chSysHalt>
 8009824:	e7f6      	b.n	8009814 <chMtxTryLock+0x34>
 8009826:	bf00      	nop
 8009828:	200050f8 	.word	0x200050f8
 800982c:	08019a24 	.word	0x08019a24

08009830 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 8009832:	4b2e      	ldr	r3, [pc, #184]	; (80098ec <chMtxUnlock+0xbc>)
 8009834:	699e      	ldr	r6, [r3, #24]
  mutex_t *lmp;

  chDbgCheck(mp != NULL);
 8009836:	4605      	mov	r5, r0
 8009838:	b1f8      	cbz	r0, 800987a <chMtxUnlock+0x4a>
 800983a:	2320      	movs	r3, #32
 800983c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009840:	f7ff fbee 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009844:	f7fe f8ec 	bl	8007a20 <_dbg_check_lock>

  chSysLock();

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8009848:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800984a:	b1d3      	cbz	r3, 8009882 <chMtxUnlock+0x52>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 800984c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	42b3      	cmp	r3, r6
 8009852:	d002      	beq.n	800985a <chMtxUnlock+0x2a>
 8009854:	4826      	ldr	r0, [pc, #152]	; (80098f0 <chMtxUnlock+0xc0>)
 8009856:	f7fd ff53 	bl	8007700 <chSysHalt>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 800985a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800985c:	42ab      	cmp	r3, r5
 800985e:	d002      	beq.n	8009866 <chMtxUnlock+0x36>
 8009860:	4823      	ldr	r0, [pc, #140]	; (80098f0 <chMtxUnlock+0xc0>)
 8009862:	f7fd ff4d 	bl	8007700 <chSysHalt>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8009866:	68eb      	ldr	r3, [r5, #12]
 8009868:	63b3      	str	r3, [r6, #56]	; 0x38
 *
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 800986a:	f7fe f991 	bl	8007b90 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800986e:	682b      	ldr	r3, [r5, #0]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8009870:	429d      	cmp	r5, r3
 8009872:	d034      	beq.n	80098de <chMtxUnlock+0xae>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8009874:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
      lmp = ctp->mtxlist;
 8009876:	6bb4      	ldr	r4, [r6, #56]	; 0x38
      while (lmp != NULL) {
 8009878:	e008      	b.n	800988c <chMtxUnlock+0x5c>
  chDbgCheck(mp != NULL);
 800987a:	481d      	ldr	r0, [pc, #116]	; (80098f0 <chMtxUnlock+0xc0>)
 800987c:	f7fd ff40 	bl	8007700 <chSysHalt>
 8009880:	e7db      	b.n	800983a <chMtxUnlock+0xa>
  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8009882:	481b      	ldr	r0, [pc, #108]	; (80098f0 <chMtxUnlock+0xc0>)
 8009884:	f7fd ff3c 	bl	8007700 <chSysHalt>
 8009888:	e7e0      	b.n	800984c <chMtxUnlock+0x1c>
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 800988a:	68e4      	ldr	r4, [r4, #12]
      while (lmp != NULL) {
 800988c:	b14c      	cbz	r4, 80098a2 <chMtxUnlock+0x72>
 800988e:	f7fe f97f 	bl	8007b90 <chDbgCheckClassS>
 8009892:	6823      	ldr	r3, [r4, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 8009894:	429c      	cmp	r4, r3
 8009896:	d0f8      	beq.n	800988a <chMtxUnlock+0x5a>
            (lmp->queue.next->prio > newprio)) {
 8009898:	689b      	ldr	r3, [r3, #8]
        if (chMtxQueueNotEmptyS(lmp) &&
 800989a:	42bb      	cmp	r3, r7
 800989c:	d9f5      	bls.n	800988a <chMtxUnlock+0x5a>
          newprio = lmp->queue.next->prio;
 800989e:	461f      	mov	r7, r3
 80098a0:	e7f3      	b.n	800988a <chMtxUnlock+0x5a>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 80098a2:	60b7      	str	r7, [r6, #8]
  thread_t *tp = tqp->next;
 80098a4:	6828      	ldr	r0, [r5, #0]
  tqp->next             = tp->queue.next;
 80098a6:	6803      	ldr	r3, [r0, #0]
 80098a8:	602b      	str	r3, [r5, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80098aa:	605d      	str	r5, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
 80098ac:	60a8      	str	r0, [r5, #8]
      mp->next = tp->mtxlist;
 80098ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80098b0:	60eb      	str	r3, [r5, #12]
      tp->mtxlist = mp;
 80098b2:	6385      	str	r5, [r0, #56]	; 0x38

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80098b4:	f7fe fc44 	bl	8008140 <chSchReadyI>
      chSchRescheduleS();
 80098b8:	f7fe fdea 	bl	8008490 <chSchRescheduleS>
  _dbg_check_unlock();
 80098bc:	f7fe f8c8 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80098c0:	f7ff fbb6 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80098c4:	4b09      	ldr	r3, [pc, #36]	; (80098ec <chMtxUnlock+0xbc>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d004      	beq.n	80098d6 <chMtxUnlock+0xa6>
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	6899      	ldr	r1, [r3, #8]
 80098d0:	6893      	ldr	r3, [r2, #8]
 80098d2:	4299      	cmp	r1, r3
 80098d4:	d306      	bcc.n	80098e4 <chMtxUnlock+0xb4>
 80098d6:	2300      	movs	r3, #0
 80098d8:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 80098dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      mp->owner = NULL;
 80098de:	2300      	movs	r3, #0
 80098e0:	60ab      	str	r3, [r5, #8]
 80098e2:	e7eb      	b.n	80098bc <chMtxUnlock+0x8c>
 80098e4:	4803      	ldr	r0, [pc, #12]	; (80098f4 <chMtxUnlock+0xc4>)
 80098e6:	f7fd ff0b 	bl	8007700 <chSysHalt>
 80098ea:	e7f4      	b.n	80098d6 <chMtxUnlock+0xa6>
 80098ec:	200050f8 	.word	0x200050f8
 80098f0:	08019a40 	.word	0x08019a40
 80098f4:	08019a24 	.word	0x08019a24
 80098f8:	f3af 8000 	nop.w
 80098fc:	f3af 8000 	nop.w

08009900 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8009900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009902:	4605      	mov	r5, r0
  thread_t *ctp = currp;
 8009904:	4b20      	ldr	r3, [pc, #128]	; (8009988 <chMtxUnlockS+0x88>)
 8009906:	699e      	ldr	r6, [r3, #24]
  mutex_t *lmp;

  chDbgCheckClassS();
 8009908:	f7fe f942 	bl	8007b90 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 800990c:	b1c5      	cbz	r5, 8009940 <chMtxUnlockS+0x40>

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 800990e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8009910:	b1d3      	cbz	r3, 8009948 <chMtxUnlockS+0x48>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 8009912:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	42b3      	cmp	r3, r6
 8009918:	d002      	beq.n	8009920 <chMtxUnlockS+0x20>
 800991a:	481c      	ldr	r0, [pc, #112]	; (800998c <chMtxUnlockS+0x8c>)
 800991c:	f7fd fef0 	bl	8007700 <chSysHalt>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 8009920:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8009922:	42ab      	cmp	r3, r5
 8009924:	d002      	beq.n	800992c <chMtxUnlockS+0x2c>
 8009926:	4819      	ldr	r0, [pc, #100]	; (800998c <chMtxUnlockS+0x8c>)
 8009928:	f7fd feea 	bl	8007700 <chSysHalt>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 800992c:	68eb      	ldr	r3, [r5, #12]
 800992e:	63b3      	str	r3, [r6, #56]	; 0x38
 8009930:	f7fe f92e 	bl	8007b90 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8009934:	682b      	ldr	r3, [r5, #0]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8009936:	429d      	cmp	r5, r3
 8009938:	d022      	beq.n	8009980 <chMtxUnlockS+0x80>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 800993a:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
      lmp = ctp->mtxlist;
 800993c:	6bb4      	ldr	r4, [r6, #56]	; 0x38
      while (lmp != NULL) {
 800993e:	e008      	b.n	8009952 <chMtxUnlockS+0x52>
  chDbgCheck(mp != NULL);
 8009940:	4812      	ldr	r0, [pc, #72]	; (800998c <chMtxUnlockS+0x8c>)
 8009942:	f7fd fedd 	bl	8007700 <chSysHalt>
 8009946:	e7e2      	b.n	800990e <chMtxUnlockS+0xe>
  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8009948:	4810      	ldr	r0, [pc, #64]	; (800998c <chMtxUnlockS+0x8c>)
 800994a:	f7fd fed9 	bl	8007700 <chSysHalt>
 800994e:	e7e0      	b.n	8009912 <chMtxUnlockS+0x12>
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8009950:	68e4      	ldr	r4, [r4, #12]
      while (lmp != NULL) {
 8009952:	b14c      	cbz	r4, 8009968 <chMtxUnlockS+0x68>
 8009954:	f7fe f91c 	bl	8007b90 <chDbgCheckClassS>
 8009958:	6823      	ldr	r3, [r4, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 800995a:	429c      	cmp	r4, r3
 800995c:	d0f8      	beq.n	8009950 <chMtxUnlockS+0x50>
            (lmp->queue.next->prio > newprio)) {
 800995e:	689b      	ldr	r3, [r3, #8]
        if (chMtxQueueNotEmptyS(lmp) &&
 8009960:	42bb      	cmp	r3, r7
 8009962:	d9f5      	bls.n	8009950 <chMtxUnlockS+0x50>
          newprio = lmp->queue.next->prio;
 8009964:	461f      	mov	r7, r3
 8009966:	e7f3      	b.n	8009950 <chMtxUnlockS+0x50>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 8009968:	60b7      	str	r7, [r6, #8]
  thread_t *tp = tqp->next;
 800996a:	6828      	ldr	r0, [r5, #0]
  tqp->next             = tp->queue.next;
 800996c:	6803      	ldr	r3, [r0, #0]
 800996e:	602b      	str	r3, [r5, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009970:	605d      	str	r5, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
 8009972:	60a8      	str	r0, [r5, #8]
      mp->next = tp->mtxlist;
 8009974:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009976:	60eb      	str	r3, [r5, #12]
      tp->mtxlist = mp;
 8009978:	6385      	str	r5, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 800997a:	f7fe fbe1 	bl	8008140 <chSchReadyI>
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 800997e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      mp->owner = NULL;
 8009980:	2300      	movs	r3, #0
 8009982:	60ab      	str	r3, [r5, #8]
}
 8009984:	e7fb      	b.n	800997e <chMtxUnlockS+0x7e>
 8009986:	bf00      	nop
 8009988:	200050f8 	.word	0x200050f8
 800998c:	08019a4c 	.word	0x08019a4c

08009990 <chMtxUnlockAllS>:
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @sclass
 */
void chMtxUnlockAllS(void) {
 8009990:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8009992:	4b10      	ldr	r3, [pc, #64]	; (80099d4 <chMtxUnlockAllS+0x44>)
 8009994:	699d      	ldr	r5, [r3, #24]

  if (ctp->mtxlist != NULL) {
 8009996:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009998:	b923      	cbnz	r3, 80099a4 <chMtxUnlockAllS+0x14>
 800999a:	e019      	b.n	80099d0 <chMtxUnlockAllS+0x40>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 800999c:	2300      	movs	r3, #0
 800999e:	60a3      	str	r3, [r4, #8]
      }
    } while (ctp->mtxlist != NULL);
 80099a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80099a2:	b18b      	cbz	r3, 80099c8 <chMtxUnlockAllS+0x38>
      mutex_t *mp = ctp->mtxlist;
 80099a4:	6bac      	ldr	r4, [r5, #56]	; 0x38
      ctp->mtxlist = mp->next;
 80099a6:	68e3      	ldr	r3, [r4, #12]
 80099a8:	63ab      	str	r3, [r5, #56]	; 0x38
 80099aa:	f7fe f8f1 	bl	8007b90 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80099ae:	6820      	ldr	r0, [r4, #0]
      if (chMtxQueueNotEmptyS(mp)) {
 80099b0:	4284      	cmp	r4, r0
 80099b2:	d0f3      	beq.n	800999c <chMtxUnlockAllS+0xc>
  tqp->next             = tp->queue.next;
 80099b4:	6803      	ldr	r3, [r0, #0]
 80099b6:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80099b8:	605c      	str	r4, [r3, #4]
        mp->owner   = tp;
 80099ba:	60a0      	str	r0, [r4, #8]
        mp->next    = tp->mtxlist;
 80099bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80099be:	60e3      	str	r3, [r4, #12]
        tp->mtxlist = mp;
 80099c0:	6384      	str	r4, [r0, #56]	; 0x38
        (void) chSchReadyI(tp);
 80099c2:	f7fe fbbd 	bl	8008140 <chSchReadyI>
 80099c6:	e7eb      	b.n	80099a0 <chMtxUnlockAllS+0x10>
    ctp->prio = ctp->realprio;
 80099c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80099ca:	60ab      	str	r3, [r5, #8]
    chSchRescheduleS();
 80099cc:	f7fe fd60 	bl	8008490 <chSchRescheduleS>
  }
}
 80099d0:	bd38      	pop	{r3, r4, r5, pc}
 80099d2:	bf00      	nop
 80099d4:	200050f8 	.word	0x200050f8
 80099d8:	f3af 8000 	nop.w
 80099dc:	f3af 8000 	nop.w

080099e0 <chMtxUnlockAll>:
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 80099e0:	b508      	push	{r3, lr}
 80099e2:	2320      	movs	r3, #32
 80099e4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80099e8:	f7ff fb1a 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80099ec:	f7fe f818 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chMtxUnlockAllS();
 80099f0:	f7ff ffce 	bl	8009990 <chMtxUnlockAllS>
  _dbg_check_unlock();
 80099f4:	f7fe f82c 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80099f8:	f7ff fb1a 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80099fc:	4b08      	ldr	r3, [pc, #32]	; (8009a20 <chMtxUnlockAll+0x40>)
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d004      	beq.n	8009a0e <chMtxUnlockAll+0x2e>
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	6899      	ldr	r1, [r3, #8]
 8009a08:	6893      	ldr	r3, [r2, #8]
 8009a0a:	4299      	cmp	r1, r3
 8009a0c:	d303      	bcc.n	8009a16 <chMtxUnlockAll+0x36>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8009a14:	bd08      	pop	{r3, pc}
 8009a16:	4803      	ldr	r0, [pc, #12]	; (8009a24 <chMtxUnlockAll+0x44>)
 8009a18:	f7fd fe72 	bl	8007700 <chSysHalt>
 8009a1c:	e7f7      	b.n	8009a0e <chMtxUnlockAll+0x2e>
 8009a1e:	bf00      	nop
 8009a20:	200050f8 	.word	0x200050f8
 8009a24:	08019a24 	.word	0x08019a24
	...

08009a30 <chCondObjectInit>:
 *
 * @param[out] cp       pointer to a @p condition_variable_t structure
 *
 * @init
 */
void chCondObjectInit(condition_variable_t *cp) {
 8009a30:	b510      	push	{r4, lr}

  chDbgCheck(cp != NULL);
 8009a32:	4604      	mov	r4, r0
 8009a34:	b110      	cbz	r0, 8009a3c <chCondObjectInit+0xc>
  tqp->next = (thread_t *)tqp;
 8009a36:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
 8009a38:	6064      	str	r4, [r4, #4]

  queue_init(&cp->queue);
}
 8009a3a:	bd10      	pop	{r4, pc}
  chDbgCheck(cp != NULL);
 8009a3c:	4801      	ldr	r0, [pc, #4]	; (8009a44 <chCondObjectInit+0x14>)
 8009a3e:	f7fd fe5f 	bl	8007700 <chSysHalt>
 8009a42:	e7f8      	b.n	8009a36 <chCondObjectInit+0x6>
 8009a44:	08019a5c 	.word	0x08019a5c
 8009a48:	f3af 8000 	nop.w
 8009a4c:	f3af 8000 	nop.w

08009a50 <chCondSignal>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8009a50:	b510      	push	{r4, lr}

  chDbgCheck(cp != NULL);
 8009a52:	4604      	mov	r4, r0
 8009a54:	b300      	cbz	r0, 8009a98 <chCondSignal+0x48>
 8009a56:	2320      	movs	r3, #32
 8009a58:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009a5c:	f7ff fae0 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009a60:	f7fd ffde 	bl	8007a20 <_dbg_check_lock>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8009a64:	6820      	ldr	r0, [r4, #0]

  chSysLock();
  if (queue_notempty(&cp->queue)) {
 8009a66:	4284      	cmp	r4, r0
 8009a68:	d005      	beq.n	8009a76 <chCondSignal+0x26>
  tqp->next             = tp->queue.next;
 8009a6a:	6803      	ldr	r3, [r0, #0]
 8009a6c:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009a6e:	605c      	str	r4, [r3, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8009a70:	2100      	movs	r1, #0
 8009a72:	f7fe fc55 	bl	8008320 <chSchWakeupS>
  _dbg_check_unlock();
 8009a76:	f7fd ffeb 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009a7a:	f7ff fad9 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009a7e:	4b0a      	ldr	r3, [pc, #40]	; (8009aa8 <chCondSignal+0x58>)
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d004      	beq.n	8009a90 <chCondSignal+0x40>
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	6899      	ldr	r1, [r3, #8]
 8009a8a:	6893      	ldr	r3, [r2, #8]
 8009a8c:	4299      	cmp	r1, r3
 8009a8e:	d307      	bcc.n	8009aa0 <chCondSignal+0x50>
 8009a90:	2300      	movs	r3, #0
 8009a92:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();
}
 8009a96:	bd10      	pop	{r4, pc}
  chDbgCheck(cp != NULL);
 8009a98:	4804      	ldr	r0, [pc, #16]	; (8009aac <chCondSignal+0x5c>)
 8009a9a:	f7fd fe31 	bl	8007700 <chSysHalt>
 8009a9e:	e7da      	b.n	8009a56 <chCondSignal+0x6>
 8009aa0:	4803      	ldr	r0, [pc, #12]	; (8009ab0 <chCondSignal+0x60>)
 8009aa2:	f7fd fe2d 	bl	8007700 <chSysHalt>
 8009aa6:	e7f3      	b.n	8009a90 <chCondSignal+0x40>
 8009aa8:	200050f8 	.word	0x200050f8
 8009aac:	08019a70 	.word	0x08019a70
 8009ab0:	08019a80 	.word	0x08019a80
 8009ab4:	f3af 8000 	nop.w
 8009ab8:	f3af 8000 	nop.w
 8009abc:	f3af 8000 	nop.w

08009ac0 <chCondSignalI>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8009ac4:	f7fe f84c 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(cp != NULL);
 8009ac8:	b154      	cbz	r4, 8009ae0 <chCondSignalI+0x20>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8009aca:	6820      	ldr	r0, [r4, #0]

  if (queue_notempty(&cp->queue)) {
 8009acc:	4284      	cmp	r4, r0
 8009ace:	d006      	beq.n	8009ade <chCondSignalI+0x1e>
  tqp->next             = tp->queue.next;
 8009ad0:	6803      	ldr	r3, [r0, #0]
 8009ad2:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009ad4:	605c      	str	r4, [r3, #4]
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8009ada:	f7fe fb31 	bl	8008140 <chSchReadyI>
  }
}
 8009ade:	bd10      	pop	{r4, pc}
  chDbgCheck(cp != NULL);
 8009ae0:	4801      	ldr	r0, [pc, #4]	; (8009ae8 <chCondSignalI+0x28>)
 8009ae2:	f7fd fe0d 	bl	8007700 <chSysHalt>
 8009ae6:	e7f0      	b.n	8009aca <chCondSignalI+0xa>
 8009ae8:	08019a8c 	.word	0x08019a8c
 8009aec:	f3af 8000 	nop.w

08009af0 <chCondBroadcastI>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondBroadcastI(condition_variable_t *cp) {
 8009af0:	b510      	push	{r4, lr}
 8009af2:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8009af4:	f7fe f834 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(cp != NULL);
 8009af8:	b95c      	cbnz	r4, 8009b12 <chCondBroadcastI+0x22>
 8009afa:	4808      	ldr	r0, [pc, #32]	; (8009b1c <chCondBroadcastI+0x2c>)
 8009afc:	f7fd fe00 	bl	8007700 <chSysHalt>
 8009b00:	e007      	b.n	8009b12 <chCondBroadcastI+0x22>
  tqp->next             = tp->queue.next;
 8009b02:	6803      	ldr	r3, [r0, #0]
 8009b04:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009b06:	605c      	str	r4, [r3, #4]

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8009b08:	f7fe fb1a 	bl	8008140 <chSchReadyI>
 8009b0c:	f06f 0301 	mvn.w	r3, #1
 8009b10:	6243      	str	r3, [r0, #36]	; 0x24
  return (bool)(tqp->next != (const thread_t *)tqp);
 8009b12:	6820      	ldr	r0, [r4, #0]
  while (queue_notempty(&cp->queue)) {
 8009b14:	4284      	cmp	r4, r0
 8009b16:	d1f4      	bne.n	8009b02 <chCondBroadcastI+0x12>
  }
}
 8009b18:	bd10      	pop	{r4, pc}
 8009b1a:	bf00      	nop
 8009b1c:	08019a9c 	.word	0x08019a9c

08009b20 <chCondBroadcast>:
void chCondBroadcast(condition_variable_t *cp) {
 8009b20:	b510      	push	{r4, lr}
 8009b22:	4604      	mov	r4, r0
 8009b24:	2320      	movs	r3, #32
 8009b26:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009b2a:	f7ff fa79 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009b2e:	f7fd ff77 	bl	8007a20 <_dbg_check_lock>
  chCondBroadcastI(cp);
 8009b32:	4620      	mov	r0, r4
 8009b34:	f7ff ffdc 	bl	8009af0 <chCondBroadcastI>
  chSchRescheduleS();
 8009b38:	f7fe fcaa 	bl	8008490 <chSchRescheduleS>
  _dbg_check_unlock();
 8009b3c:	f7fd ff88 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009b40:	f7ff fa76 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009b44:	4b08      	ldr	r3, [pc, #32]	; (8009b68 <chCondBroadcast+0x48>)
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d004      	beq.n	8009b56 <chCondBroadcast+0x36>
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	6899      	ldr	r1, [r3, #8]
 8009b50:	6893      	ldr	r3, [r2, #8]
 8009b52:	4299      	cmp	r1, r3
 8009b54:	d303      	bcc.n	8009b5e <chCondBroadcast+0x3e>
 8009b56:	2300      	movs	r3, #0
 8009b58:	f383 8811 	msr	BASEPRI, r3
}
 8009b5c:	bd10      	pop	{r4, pc}
 8009b5e:	4803      	ldr	r0, [pc, #12]	; (8009b6c <chCondBroadcast+0x4c>)
 8009b60:	f7fd fdce 	bl	8007700 <chSysHalt>
 8009b64:	e7f7      	b.n	8009b56 <chCondBroadcast+0x36>
 8009b66:	bf00      	nop
 8009b68:	200050f8 	.word	0x200050f8
 8009b6c:	08019a80 	.word	0x08019a80

08009b70 <chCondWaitS>:
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8009b74:	4b14      	ldr	r3, [pc, #80]	; (8009bc8 <chCondWaitS+0x58>)
 8009b76:	699d      	ldr	r5, [r3, #24]
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8009b78:	6bae      	ldr	r6, [r5, #56]	; 0x38
  mutex_t *mp = chMtxGetNextMutexX();
  msg_t msg;

  chDbgCheckClassS();
 8009b7a:	f7fe f809 	bl	8007b90 <chDbgCheckClassS>
  chDbgCheck(cp != NULL);
 8009b7e:	b1d4      	cbz	r4, 8009bb6 <chCondWaitS+0x46>
  chDbgAssert(mp != NULL, "not owning a mutex");
 8009b80:	b1ee      	cbz	r6, 8009bbe <chCondWaitS+0x4e>

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 8009b82:	4630      	mov	r0, r6
 8009b84:	f7ff febc 	bl	8009900 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->u.wtobjp = cp;
 8009b88:	626c      	str	r4, [r5, #36]	; 0x24
  queue_prio_insert(ctp, &cp->queue);
 8009b8a:	4621      	mov	r1, r4
    cp = cp->queue.next;
 8009b8c:	6824      	ldr	r4, [r4, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8009b8e:	42a1      	cmp	r1, r4
 8009b90:	d003      	beq.n	8009b9a <chCondWaitS+0x2a>
 8009b92:	68a2      	ldr	r2, [r4, #8]
 8009b94:	68ab      	ldr	r3, [r5, #8]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d2f8      	bcs.n	8009b8c <chCondWaitS+0x1c>
  tp->queue.next             = cp;
 8009b9a:	602c      	str	r4, [r5, #0]
  tp->queue.prev             = cp->queue.prev;
 8009b9c:	6863      	ldr	r3, [r4, #4]
 8009b9e:	606b      	str	r3, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8009ba0:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 8009ba2:	6065      	str	r5, [r4, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 8009ba4:	2007      	movs	r0, #7
 8009ba6:	f7fe fb5b 	bl	8008260 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 8009baa:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  chMtxLockS(mp);
 8009bac:	4630      	mov	r0, r6
 8009bae:	f7ff fd4f 	bl	8009650 <chMtxLockS>

  return msg;
}
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(cp != NULL);
 8009bb6:	4805      	ldr	r0, [pc, #20]	; (8009bcc <chCondWaitS+0x5c>)
 8009bb8:	f7fd fda2 	bl	8007700 <chSysHalt>
 8009bbc:	e7e0      	b.n	8009b80 <chCondWaitS+0x10>
  chDbgAssert(mp != NULL, "not owning a mutex");
 8009bbe:	4803      	ldr	r0, [pc, #12]	; (8009bcc <chCondWaitS+0x5c>)
 8009bc0:	f7fd fd9e 	bl	8007700 <chSysHalt>
 8009bc4:	e7dd      	b.n	8009b82 <chCondWaitS+0x12>
 8009bc6:	bf00      	nop
 8009bc8:	200050f8 	.word	0x200050f8
 8009bcc:	08019ab0 	.word	0x08019ab0

08009bd0 <chCondWait>:
msg_t chCondWait(condition_variable_t *cp) {
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009bda:	f7ff fa21 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009bde:	f7fd ff1f 	bl	8007a20 <_dbg_check_lock>
  msg = chCondWaitS(cp);
 8009be2:	4620      	mov	r0, r4
 8009be4:	f7ff ffc4 	bl	8009b70 <chCondWaitS>
 8009be8:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8009bea:	f7fd ff31 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009bee:	f7ff fa1f 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009bf2:	4b09      	ldr	r3, [pc, #36]	; (8009c18 <chCondWait+0x48>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d004      	beq.n	8009c04 <chCondWait+0x34>
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	6899      	ldr	r1, [r3, #8]
 8009bfe:	6893      	ldr	r3, [r2, #8]
 8009c00:	4299      	cmp	r1, r3
 8009c02:	d304      	bcc.n	8009c0e <chCondWait+0x3e>
 8009c04:	2300      	movs	r3, #0
 8009c06:	f383 8811 	msr	BASEPRI, r3
}
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	bd10      	pop	{r4, pc}
 8009c0e:	4803      	ldr	r0, [pc, #12]	; (8009c1c <chCondWait+0x4c>)
 8009c10:	f7fd fd76 	bl	8007700 <chSysHalt>
 8009c14:	e7f6      	b.n	8009c04 <chCondWait+0x34>
 8009c16:	bf00      	nop
 8009c18:	200050f8 	.word	0x200050f8
 8009c1c:	08019a80 	.word	0x08019a80

08009c20 <chCondWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chCondWaitTimeoutS(condition_variable_t *cp, sysinterval_t timeout) {
 8009c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c22:	4604      	mov	r4, r0
 8009c24:	4616      	mov	r6, r2
 8009c26:	461f      	mov	r7, r3
  return ch.rlist.current;
 8009c28:	4b18      	ldr	r3, [pc, #96]	; (8009c8c <chCondWaitTimeoutS+0x6c>)
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  mutex_t *mp = chMtxGetNextMutexX();
  msg_t msg;

  chDbgCheckClassS();
 8009c2e:	f7fd ffaf 	bl	8007b90 <chDbgCheckClassS>
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
 8009c32:	b114      	cbz	r4, 8009c3a <chCondWaitTimeoutS+0x1a>
 8009c34:	ea56 0307 	orrs.w	r3, r6, r7
 8009c38:	d102      	bne.n	8009c40 <chCondWaitTimeoutS+0x20>
 8009c3a:	4815      	ldr	r0, [pc, #84]	; (8009c90 <chCondWaitTimeoutS+0x70>)
 8009c3c:	f7fd fd60 	bl	8007700 <chSysHalt>
  chDbgAssert(mp != NULL, "not owning a mutex");
 8009c40:	b305      	cbz	r5, 8009c84 <chCondWaitTimeoutS+0x64>

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 8009c42:	4628      	mov	r0, r5
 8009c44:	f7ff fe5c 	bl	8009900 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8009c48:	4b10      	ldr	r3, [pc, #64]	; (8009c8c <chCondWaitTimeoutS+0x6c>)
 8009c4a:	6999      	ldr	r1, [r3, #24]
 8009c4c:	624c      	str	r4, [r1, #36]	; 0x24
  queue_prio_insert(currp, &cp->queue);
 8009c4e:	46a4      	mov	ip, r4
    cp = cp->queue.next;
 8009c50:	6824      	ldr	r4, [r4, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8009c52:	45a4      	cmp	ip, r4
 8009c54:	d003      	beq.n	8009c5e <chCondWaitTimeoutS+0x3e>
 8009c56:	68a2      	ldr	r2, [r4, #8]
 8009c58:	688b      	ldr	r3, [r1, #8]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d2f8      	bcs.n	8009c50 <chCondWaitTimeoutS+0x30>
  tp->queue.next             = cp;
 8009c5e:	600c      	str	r4, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8009c60:	6863      	ldr	r3, [r4, #4]
 8009c62:	604b      	str	r3, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8009c64:	6019      	str	r1, [r3, #0]
  cp->queue.prev             = tp;
 8009c66:	6061      	str	r1, [r4, #4]
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
 8009c68:	4632      	mov	r2, r6
 8009c6a:	463b      	mov	r3, r7
 8009c6c:	2007      	movs	r0, #7
 8009c6e:	f7fe fb27 	bl	80082c0 <chSchGoSleepTimeoutS>
 8009c72:	4604      	mov	r4, r0
  if (msg != MSG_TIMEOUT) {
 8009c74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c78:	d002      	beq.n	8009c80 <chCondWaitTimeoutS+0x60>
    chMtxLockS(mp);
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	f7ff fce8 	bl	8009650 <chMtxLockS>
  }

  return msg;
}
 8009c80:	4620      	mov	r0, r4
 8009c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgAssert(mp != NULL, "not owning a mutex");
 8009c84:	4802      	ldr	r0, [pc, #8]	; (8009c90 <chCondWaitTimeoutS+0x70>)
 8009c86:	f7fd fd3b 	bl	8007700 <chSysHalt>
 8009c8a:	e7da      	b.n	8009c42 <chCondWaitTimeoutS+0x22>
 8009c8c:	200050f8 	.word	0x200050f8
 8009c90:	08019abc 	.word	0x08019abc
 8009c94:	f3af 8000 	nop.w
 8009c98:	f3af 8000 	nop.w
 8009c9c:	f3af 8000 	nop.w

08009ca0 <chCondWaitTimeout>:
msg_t chCondWaitTimeout(condition_variable_t *cp, sysinterval_t timeout) {
 8009ca0:	b5d0      	push	{r4, r6, r7, lr}
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	4616      	mov	r6, r2
 8009ca6:	461f      	mov	r7, r3
 8009ca8:	2320      	movs	r3, #32
 8009caa:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009cae:	f7ff f9b7 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009cb2:	f7fd feb5 	bl	8007a20 <_dbg_check_lock>
  msg = chCondWaitTimeoutS(cp, timeout);
 8009cb6:	4632      	mov	r2, r6
 8009cb8:	463b      	mov	r3, r7
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff ffb0 	bl	8009c20 <chCondWaitTimeoutS>
 8009cc0:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8009cc2:	f7fd fec5 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009cc6:	f7ff f9b3 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009cca:	4b09      	ldr	r3, [pc, #36]	; (8009cf0 <chCondWaitTimeout+0x50>)
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d004      	beq.n	8009cdc <chCondWaitTimeout+0x3c>
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	6899      	ldr	r1, [r3, #8]
 8009cd6:	6893      	ldr	r3, [r2, #8]
 8009cd8:	4299      	cmp	r1, r3
 8009cda:	d304      	bcc.n	8009ce6 <chCondWaitTimeout+0x46>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f383 8811 	msr	BASEPRI, r3
}
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	bdd0      	pop	{r4, r6, r7, pc}
 8009ce6:	4803      	ldr	r0, [pc, #12]	; (8009cf4 <chCondWaitTimeout+0x54>)
 8009ce8:	f7fd fd0a 	bl	8007700 <chSysHalt>
 8009cec:	e7f6      	b.n	8009cdc <chCondWaitTimeout+0x3c>
 8009cee:	bf00      	nop
 8009cf0:	200050f8 	.word	0x200050f8
 8009cf4:	08019a80 	.word	0x08019a80
	...

08009d00 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	460c      	mov	r4, r1
 8009d04:	4617      	mov	r7, r2
 8009d06:	461e      	mov	r6, r3

  chDbgCheck((esp != NULL) && (elp != NULL));
 8009d08:	4605      	mov	r5, r0
 8009d0a:	b308      	cbz	r0, 8009d50 <chEvtRegisterMaskWithFlags+0x50>
 8009d0c:	b301      	cbz	r1, 8009d50 <chEvtRegisterMaskWithFlags+0x50>
 8009d0e:	2320      	movs	r3, #32
 8009d10:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009d14:	f7ff f984 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009d18:	f7fd fe82 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  elp->next     = esp->next;
 8009d1c:	682b      	ldr	r3, [r5, #0]
 8009d1e:	6023      	str	r3, [r4, #0]
  esp->next     = elp;
 8009d20:	602c      	str	r4, [r5, #0]
  elp->listener = currp;
 8009d22:	4d0f      	ldr	r5, [pc, #60]	; (8009d60 <chEvtRegisterMaskWithFlags+0x60>)
 8009d24:	69ab      	ldr	r3, [r5, #24]
 8009d26:	6063      	str	r3, [r4, #4]
  elp->events   = events;
 8009d28:	60a7      	str	r7, [r4, #8]
  elp->flags    = (eventflags_t)0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60e3      	str	r3, [r4, #12]
  elp->wflags   = wflags;
 8009d2e:	6126      	str	r6, [r4, #16]
  _dbg_check_unlock();
 8009d30:	f7fd fe8e 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009d34:	f7ff f97c 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009d38:	682b      	ldr	r3, [r5, #0]
 8009d3a:	42ab      	cmp	r3, r5
 8009d3c:	d004      	beq.n	8009d48 <chEvtRegisterMaskWithFlags+0x48>
 8009d3e:	69aa      	ldr	r2, [r5, #24]
 8009d40:	6892      	ldr	r2, [r2, #8]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d307      	bcc.n	8009d58 <chEvtRegisterMaskWithFlags+0x58>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8009d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck((esp != NULL) && (elp != NULL));
 8009d50:	4804      	ldr	r0, [pc, #16]	; (8009d64 <chEvtRegisterMaskWithFlags+0x64>)
 8009d52:	f7fd fcd5 	bl	8007700 <chSysHalt>
 8009d56:	e7da      	b.n	8009d0e <chEvtRegisterMaskWithFlags+0xe>
 8009d58:	4803      	ldr	r0, [pc, #12]	; (8009d68 <chEvtRegisterMaskWithFlags+0x68>)
 8009d5a:	f7fd fcd1 	bl	8007700 <chSysHalt>
 8009d5e:	e7f3      	b.n	8009d48 <chEvtRegisterMaskWithFlags+0x48>
 8009d60:	200050f8 	.word	0x200050f8
 8009d64:	08019ad0 	.word	0x08019ad0
 8009d68:	08019aec 	.word	0x08019aec
 8009d6c:	f3af 8000 	nop.w

08009d70 <chEvtUnregister>:
 * @param[in] esp       pointer to the  @p event_source_t structure
 * @param[in] elp       pointer to the @p event_listener_t structure
 *
 * @api
 */
void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	460d      	mov	r5, r1
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));
 8009d74:	4604      	mov	r4, r0
 8009d76:	b178      	cbz	r0, 8009d98 <chEvtUnregister+0x28>
 8009d78:	b171      	cbz	r1, 8009d98 <chEvtUnregister+0x28>
 8009d7a:	2320      	movs	r3, #32
 8009d7c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009d80:	f7ff f94e 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009d84:	f7fd fe4c 	bl	8007a20 <_dbg_check_lock>

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8009d88:	4622      	mov	r2, r4
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
 8009d8a:	6813      	ldr	r3, [r2, #0]
 8009d8c:	42a3      	cmp	r3, r4
 8009d8e:	d009      	beq.n	8009da4 <chEvtUnregister+0x34>
  /*lint -restore*/
    if (p->next == elp) {
 8009d90:	42ab      	cmp	r3, r5
 8009d92:	d005      	beq.n	8009da0 <chEvtUnregister+0x30>
      p->next = elp->next;
      break;
    }
    p = p->next;
 8009d94:	461a      	mov	r2, r3
 8009d96:	e7f8      	b.n	8009d8a <chEvtUnregister+0x1a>
  chDbgCheck((esp != NULL) && (elp != NULL));
 8009d98:	480d      	ldr	r0, [pc, #52]	; (8009dd0 <chEvtUnregister+0x60>)
 8009d9a:	f7fd fcb1 	bl	8007700 <chSysHalt>
 8009d9e:	e7ec      	b.n	8009d7a <chEvtUnregister+0xa>
      p->next = elp->next;
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	6013      	str	r3, [r2, #0]
  _dbg_check_unlock();
 8009da4:	f7fd fe54 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009da8:	f7ff f942 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009dac:	4b09      	ldr	r3, [pc, #36]	; (8009dd4 <chEvtUnregister+0x64>)
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d004      	beq.n	8009dbe <chEvtUnregister+0x4e>
 8009db4:	699b      	ldr	r3, [r3, #24]
 8009db6:	6899      	ldr	r1, [r3, #8]
 8009db8:	6893      	ldr	r3, [r2, #8]
 8009dba:	4299      	cmp	r1, r3
 8009dbc:	d303      	bcc.n	8009dc6 <chEvtUnregister+0x56>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();
}
 8009dc4:	bd38      	pop	{r3, r4, r5, pc}
 8009dc6:	4804      	ldr	r0, [pc, #16]	; (8009dd8 <chEvtUnregister+0x68>)
 8009dc8:	f7fd fc9a 	bl	8007700 <chSysHalt>
 8009dcc:	e7f7      	b.n	8009dbe <chEvtUnregister+0x4e>
 8009dce:	bf00      	nop
 8009dd0:	08019af8 	.word	0x08019af8
 8009dd4:	200050f8 	.word	0x200050f8
 8009dd8:	08019aec 	.word	0x08019aec
 8009ddc:	f3af 8000 	nop.w

08009de0 <chEvtGetAndClearEventsI>:
 * @iclass
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
 8009de0:	4b03      	ldr	r3, [pc, #12]	; (8009df0 <chEvtGetAndClearEventsI+0x10>)
 8009de2:	699a      	ldr	r2, [r3, #24]
 8009de4:	6b53      	ldr	r3, [r2, #52]	; 0x34
  currp->epending &= ~events;
 8009de6:	ea23 0100 	bic.w	r1, r3, r0
 8009dea:	6351      	str	r1, [r2, #52]	; 0x34

  return m;
}
 8009dec:	4018      	ands	r0, r3
 8009dee:	4770      	bx	lr
 8009df0:	200050f8 	.word	0x200050f8
 8009df4:	f3af 8000 	nop.w
 8009df8:	f3af 8000 	nop.w
 8009dfc:	f3af 8000 	nop.w

08009e00 <chEvtGetAndClearEvents>:
 * @param[in] events    the events to be cleared
 * @return              The mask of pending events that were cleared.
 *
 * @api
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
 8009e00:	b510      	push	{r4, lr}
 8009e02:	4604      	mov	r4, r0
 8009e04:	2320      	movs	r3, #32
 8009e06:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009e0a:	f7ff f909 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009e0e:	f7fd fe07 	bl	8007a20 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = chEvtGetAndClearEventsI(events);
 8009e12:	4620      	mov	r0, r4
 8009e14:	f7ff ffe4 	bl	8009de0 <chEvtGetAndClearEventsI>
 8009e18:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8009e1a:	f7fd fe19 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009e1e:	f7ff f907 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009e22:	4b09      	ldr	r3, [pc, #36]	; (8009e48 <chEvtGetAndClearEvents+0x48>)
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d004      	beq.n	8009e34 <chEvtGetAndClearEvents+0x34>
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	6899      	ldr	r1, [r3, #8]
 8009e2e:	6893      	ldr	r3, [r2, #8]
 8009e30:	4299      	cmp	r1, r3
 8009e32:	d304      	bcc.n	8009e3e <chEvtGetAndClearEvents+0x3e>
 8009e34:	2300      	movs	r3, #0
 8009e36:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	bd10      	pop	{r4, pc}
 8009e3e:	4803      	ldr	r0, [pc, #12]	; (8009e4c <chEvtGetAndClearEvents+0x4c>)
 8009e40:	f7fd fc5e 	bl	8007700 <chSysHalt>
 8009e44:	e7f6      	b.n	8009e34 <chEvtGetAndClearEvents+0x34>
 8009e46:	bf00      	nop
 8009e48:	200050f8 	.word	0x200050f8
 8009e4c:	08019aec 	.word	0x08019aec

08009e50 <chEvtAddEvents>:
 * @param[in] events    the events to be added
 * @return              The mask of currently pending events.
 *
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4604      	mov	r4, r0
 8009e54:	2320      	movs	r3, #32
 8009e56:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009e5a:	f7ff f8e1 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009e5e:	f7fd fddf 	bl	8007a20 <_dbg_check_lock>
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8009e62:	4d0d      	ldr	r5, [pc, #52]	; (8009e98 <chEvtAddEvents+0x48>)
 8009e64:	69ab      	ldr	r3, [r5, #24]
 8009e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e68:	4314      	orrs	r4, r2
 8009e6a:	635c      	str	r4, [r3, #52]	; 0x34
  _dbg_check_unlock();
 8009e6c:	f7fd fdf0 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009e70:	f7ff f8de 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009e74:	682b      	ldr	r3, [r5, #0]
 8009e76:	42ab      	cmp	r3, r5
 8009e78:	d004      	beq.n	8009e84 <chEvtAddEvents+0x34>
 8009e7a:	69aa      	ldr	r2, [r5, #24]
 8009e7c:	6892      	ldr	r2, [r2, #8]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d304      	bcc.n	8009e8e <chEvtAddEvents+0x3e>
 8009e84:	2300      	movs	r3, #0
 8009e86:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  newevt = chEvtAddEventsI(events);
  chSysUnlock();

  return newevt;
}
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	bd38      	pop	{r3, r4, r5, pc}
 8009e8e:	4803      	ldr	r0, [pc, #12]	; (8009e9c <chEvtAddEvents+0x4c>)
 8009e90:	f7fd fc36 	bl	8007700 <chSysHalt>
 8009e94:	e7f6      	b.n	8009e84 <chEvtAddEvents+0x34>
 8009e96:	bf00      	nop
 8009e98:	200050f8 	.word	0x200050f8
 8009e9c:	08019aec 	.word	0x08019aec

08009ea0 <chEvtGetAndClearFlags>:
 * @return              The flags added to the listener by the associated
 *                      event source.
 *
 * @api
 */
eventflags_t chEvtGetAndClearFlags(event_listener_t *elp) {
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	2320      	movs	r3, #32
 8009ea6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009eaa:	f7ff f8b9 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009eae:	f7fd fdb7 	bl	8007a20 <_dbg_check_lock>
  eventflags_t flags;

  chSysLock();
  flags = elp->flags;
 8009eb2:	68e5      	ldr	r5, [r4, #12]
  elp->flags = (eventflags_t)0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	60e3      	str	r3, [r4, #12]
  _dbg_check_unlock();
 8009eb8:	f7fd fdca 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009ebc:	f7ff f8b8 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009ec0:	4b09      	ldr	r3, [pc, #36]	; (8009ee8 <chEvtGetAndClearFlags+0x48>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d004      	beq.n	8009ed2 <chEvtGetAndClearFlags+0x32>
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	6899      	ldr	r1, [r3, #8]
 8009ecc:	6893      	ldr	r3, [r2, #8]
 8009ece:	4299      	cmp	r1, r3
 8009ed0:	d305      	bcc.n	8009ede <chEvtGetAndClearFlags+0x3e>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return flags & elp->wflags;
 8009ed8:	6920      	ldr	r0, [r4, #16]
}
 8009eda:	4028      	ands	r0, r5
 8009edc:	bd38      	pop	{r3, r4, r5, pc}
 8009ede:	4803      	ldr	r0, [pc, #12]	; (8009eec <chEvtGetAndClearFlags+0x4c>)
 8009ee0:	f7fd fc0e 	bl	8007700 <chSysHalt>
 8009ee4:	e7f5      	b.n	8009ed2 <chEvtGetAndClearFlags+0x32>
 8009ee6:	bf00      	nop
 8009ee8:	200050f8 	.word	0x200050f8
 8009eec:	08019aec 	.word	0x08019aec

08009ef0 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	460d      	mov	r5, r1

  chDbgCheckClassI();
 8009ef6:	f7fd fe33 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8009efa:	b14c      	cbz	r4, 8009f10 <chEvtSignalI+0x20>

  tp->epending |= events;
 8009efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009efe:	4329      	orrs	r1, r5
 8009f00:	6361      	str	r1, [r4, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8009f02:	f894 3020 	ldrb.w	r3, [r4, #32]
 8009f06:	2b0a      	cmp	r3, #10
 8009f08:	d006      	beq.n	8009f18 <chEvtSignalI+0x28>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8009f0a:	2b0b      	cmp	r3, #11
 8009f0c:	d00d      	beq.n	8009f2a <chEvtSignalI+0x3a>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(tp != NULL);
 8009f10:	4808      	ldr	r0, [pc, #32]	; (8009f34 <chEvtSignalI+0x44>)
 8009f12:	f7fd fbf5 	bl	8007700 <chSysHalt>
 8009f16:	e7f1      	b.n	8009efc <chEvtSignalI+0xc>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8009f18:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8009f1a:	4211      	tst	r1, r2
 8009f1c:	d0f5      	beq.n	8009f0a <chEvtSignalI+0x1a>
    tp->u.rdymsg = MSG_OK;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(tp);
 8009f22:	4620      	mov	r0, r4
 8009f24:	f7fe f90c 	bl	8008140 <chSchReadyI>
}
 8009f28:	e7f1      	b.n	8009f0e <chEvtSignalI+0x1e>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8009f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8009f2c:	438b      	bics	r3, r1
 8009f2e:	d1ee      	bne.n	8009f0e <chEvtSignalI+0x1e>
 8009f30:	e7f5      	b.n	8009f1e <chEvtSignalI+0x2e>
 8009f32:	bf00      	nop
 8009f34:	08019b08 	.word	0x08019b08
 8009f38:	f3af 8000 	nop.w
 8009f3c:	f3af 8000 	nop.w

08009f40 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	4606      	mov	r6, r0
 8009f44:	460d      	mov	r5, r1
  chDbgCheckClassI();
 8009f46:	f7fd fe0b 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 8009f4a:	b10e      	cbz	r6, 8009f50 <chEvtBroadcastFlagsI+0x10>
  elp = esp->next;
 8009f4c:	6834      	ldr	r4, [r6, #0]
  while (elp != (event_listener_t *)esp) {
 8009f4e:	e008      	b.n	8009f62 <chEvtBroadcastFlagsI+0x22>
  chDbgCheck(esp != NULL);
 8009f50:	480a      	ldr	r0, [pc, #40]	; (8009f7c <chEvtBroadcastFlagsI+0x3c>)
 8009f52:	f7fd fbd5 	bl	8007700 <chSysHalt>
 8009f56:	e7f9      	b.n	8009f4c <chEvtBroadcastFlagsI+0xc>
      chEvtSignalI(elp->listener, elp->events);
 8009f58:	68a1      	ldr	r1, [r4, #8]
 8009f5a:	6860      	ldr	r0, [r4, #4]
 8009f5c:	f7ff ffc8 	bl	8009ef0 <chEvtSignalI>
    elp = elp->next;
 8009f60:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8009f62:	42b4      	cmp	r4, r6
 8009f64:	d008      	beq.n	8009f78 <chEvtBroadcastFlagsI+0x38>
    elp->flags |= flags;
 8009f66:	68e3      	ldr	r3, [r4, #12]
 8009f68:	432b      	orrs	r3, r5
 8009f6a:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8009f6c:	2d00      	cmp	r5, #0
 8009f6e:	d0f3      	beq.n	8009f58 <chEvtBroadcastFlagsI+0x18>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8009f70:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8009f72:	422b      	tst	r3, r5
 8009f74:	d0f4      	beq.n	8009f60 <chEvtBroadcastFlagsI+0x20>
 8009f76:	e7ef      	b.n	8009f58 <chEvtBroadcastFlagsI+0x18>
}
 8009f78:	bd70      	pop	{r4, r5, r6, pc}
 8009f7a:	bf00      	nop
 8009f7c:	08019b18 	.word	0x08019b18

08009f80 <chEvtSignal>:
void chEvtSignal(thread_t *tp, eventmask_t events) {
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	460d      	mov	r5, r1
  chDbgCheck(tp != NULL);
 8009f84:	4604      	mov	r4, r0
 8009f86:	b1e8      	cbz	r0, 8009fc4 <chEvtSignal+0x44>
 8009f88:	2320      	movs	r3, #32
 8009f8a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009f8e:	f7ff f847 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009f92:	f7fd fd45 	bl	8007a20 <_dbg_check_lock>
  chEvtSignalI(tp, events);
 8009f96:	4629      	mov	r1, r5
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f7ff ffa9 	bl	8009ef0 <chEvtSignalI>
  chSchRescheduleS();
 8009f9e:	f7fe fa77 	bl	8008490 <chSchRescheduleS>
  _dbg_check_unlock();
 8009fa2:	f7fd fd55 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009fa6:	f7ff f843 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009faa:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <chEvtSignal+0x54>)
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d004      	beq.n	8009fbc <chEvtSignal+0x3c>
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	6899      	ldr	r1, [r3, #8]
 8009fb6:	6893      	ldr	r3, [r2, #8]
 8009fb8:	4299      	cmp	r1, r3
 8009fba:	d307      	bcc.n	8009fcc <chEvtSignal+0x4c>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f383 8811 	msr	BASEPRI, r3
}
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(tp != NULL);
 8009fc4:	4804      	ldr	r0, [pc, #16]	; (8009fd8 <chEvtSignal+0x58>)
 8009fc6:	f7fd fb9b 	bl	8007700 <chSysHalt>
 8009fca:	e7dd      	b.n	8009f88 <chEvtSignal+0x8>
 8009fcc:	4803      	ldr	r0, [pc, #12]	; (8009fdc <chEvtSignal+0x5c>)
 8009fce:	f7fd fb97 	bl	8007700 <chSysHalt>
 8009fd2:	e7f3      	b.n	8009fbc <chEvtSignal+0x3c>
 8009fd4:	200050f8 	.word	0x200050f8
 8009fd8:	08019b30 	.word	0x08019b30
 8009fdc:	08019aec 	.word	0x08019aec

08009fe0 <chEvtBroadcastFlags>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	460d      	mov	r5, r1
 8009fe6:	2320      	movs	r3, #32
 8009fe8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009fec:	f7ff f818 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009ff0:	f7fd fd16 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f7ff ffa2 	bl	8009f40 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8009ffc:	f7fe fa48 	bl	8008490 <chSchRescheduleS>
  _dbg_check_unlock();
 800a000:	f7fd fd26 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a004:	f7ff f814 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a008:	4b08      	ldr	r3, [pc, #32]	; (800a02c <chEvtBroadcastFlags+0x4c>)
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d004      	beq.n	800a01a <chEvtBroadcastFlags+0x3a>
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	6899      	ldr	r1, [r3, #8]
 800a014:	6893      	ldr	r3, [r2, #8]
 800a016:	4299      	cmp	r1, r3
 800a018:	d303      	bcc.n	800a022 <chEvtBroadcastFlags+0x42>
 800a01a:	2300      	movs	r3, #0
 800a01c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 800a020:	bd38      	pop	{r3, r4, r5, pc}
 800a022:	4803      	ldr	r0, [pc, #12]	; (800a030 <chEvtBroadcastFlags+0x50>)
 800a024:	f7fd fb6c 	bl	8007700 <chSysHalt>
 800a028:	e7f7      	b.n	800a01a <chEvtBroadcastFlags+0x3a>
 800a02a:	bf00      	nop
 800a02c:	200050f8 	.word	0x200050f8
 800a030:	08019aec 	.word	0x08019aec
 800a034:	f3af 8000 	nop.w
 800a038:	f3af 8000 	nop.w
 800a03c:	f3af 8000 	nop.w

0800a040 <chEvtGetAndClearFlagsI>:
 * @iclass
 */
eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp) {
  eventflags_t flags;

  flags = elp->flags;
 800a040:	68c3      	ldr	r3, [r0, #12]
  elp->flags = (eventflags_t)0;
 800a042:	2200      	movs	r2, #0
 800a044:	60c2      	str	r2, [r0, #12]

  return flags & elp->wflags;
 800a046:	6900      	ldr	r0, [r0, #16]
}
 800a048:	4018      	ands	r0, r3
 800a04a:	4770      	bx	lr
 800a04c:	f3af 8000 	nop.w

0800a050 <chEvtDispatch>:
 * @param[in] handlers  an array of @p evhandler_t. The array must have size
 *                      equal to the number of bits in eventmask_t.
 *
 * @api
 */
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 800a050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a054:	460d      	mov	r5, r1
  eventid_t eid;

  chDbgCheck(handlers != NULL);
 800a056:	4607      	mov	r7, r0
 800a058:	b108      	cbz	r0, 800a05e <chEvtDispatch+0xe>
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 800a05a:	2400      	movs	r4, #0
 800a05c:	e00c      	b.n	800a078 <chEvtDispatch+0x28>
  chDbgCheck(handlers != NULL);
 800a05e:	4810      	ldr	r0, [pc, #64]	; (800a0a0 <chEvtDispatch+0x50>)
 800a060:	f7fd fb4e 	bl	8007700 <chSysHalt>
 800a064:	e7f9      	b.n	800a05a <chEvtDispatch+0xa>

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 800a066:	2301      	movs	r3, #1
 800a068:	40b3      	lsls	r3, r6
 800a06a:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 800a06e:	f857 3008 	ldr.w	r3, [r7, r8]
 800a072:	4620      	mov	r0, r4
 800a074:	4798      	blx	r3
    }
    eid++;
 800a076:	3401      	adds	r4, #1
  while (events != (eventmask_t)0) {
 800a078:	b17d      	cbz	r5, 800a09a <chEvtDispatch+0x4a>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800a07a:	4626      	mov	r6, r4
 800a07c:	fa25 f304 	lsr.w	r3, r5, r4
 800a080:	f013 0f01 	tst.w	r3, #1
 800a084:	d0f7      	beq.n	800a076 <chEvtDispatch+0x26>
      chDbgAssert(handlers[eid] != NULL, "null handler");
 800a086:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800a08a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e9      	bne.n	800a066 <chEvtDispatch+0x16>
 800a092:	4803      	ldr	r0, [pc, #12]	; (800a0a0 <chEvtDispatch+0x50>)
 800a094:	f7fd fb34 	bl	8007700 <chSysHalt>
 800a098:	e7e5      	b.n	800a066 <chEvtDispatch+0x16>
  }
}
 800a09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a09e:	bf00      	nop
 800a0a0:	08019b3c 	.word	0x08019b3c
 800a0a4:	f3af 8000 	nop.w
 800a0a8:	f3af 8000 	nop.w
 800a0ac:	f3af 8000 	nop.w

0800a0b0 <chEvtWaitOne>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 800a0b4:	4b17      	ldr	r3, [pc, #92]	; (800a114 <chEvtWaitOne+0x64>)
 800a0b6:	699d      	ldr	r5, [r3, #24]
 800a0b8:	2320      	movs	r3, #32
 800a0ba:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a0be:	f7fe ffaf 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a0c2:	f7fd fcad 	bl	8007a20 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800a0c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800a0c8:	4023      	ands	r3, r4
 800a0ca:	d017      	beq.n	800a0fc <chEvtWaitOne+0x4c>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 800a0cc:	425c      	negs	r4, r3
 800a0ce:	401c      	ands	r4, r3
  ctp->epending &= ~m;
 800a0d0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a0d2:	ea23 0304 	bic.w	r3, r3, r4
 800a0d6:	636b      	str	r3, [r5, #52]	; 0x34
  _dbg_check_unlock();
 800a0d8:	f7fd fcba 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a0dc:	f7fe ffa8 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a0e0:	4b0c      	ldr	r3, [pc, #48]	; (800a114 <chEvtWaitOne+0x64>)
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d004      	beq.n	800a0f2 <chEvtWaitOne+0x42>
 800a0e8:	699b      	ldr	r3, [r3, #24]
 800a0ea:	6899      	ldr	r1, [r3, #8]
 800a0ec:	6893      	ldr	r3, [r2, #8]
 800a0ee:	4299      	cmp	r1, r3
 800a0f0:	d30b      	bcc.n	800a10a <chEvtWaitOne+0x5a>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
    ctp->u.ewmask = events;
 800a0fc:	626c      	str	r4, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800a0fe:	200a      	movs	r0, #10
 800a100:	f7fe f8ae 	bl	8008260 <chSchGoSleepS>
    m = ctp->epending & events;
 800a104:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a106:	4023      	ands	r3, r4
 800a108:	e7e0      	b.n	800a0cc <chEvtWaitOne+0x1c>
 800a10a:	4803      	ldr	r0, [pc, #12]	; (800a118 <chEvtWaitOne+0x68>)
 800a10c:	f7fd faf8 	bl	8007700 <chSysHalt>
 800a110:	e7ef      	b.n	800a0f2 <chEvtWaitOne+0x42>
 800a112:	bf00      	nop
 800a114:	200050f8 	.word	0x200050f8
 800a118:	08019aec 	.word	0x08019aec
 800a11c:	f3af 8000 	nop.w

0800a120 <chEvtWaitAny>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 800a120:	b570      	push	{r4, r5, r6, lr}
 800a122:	4606      	mov	r6, r0
  thread_t *ctp = currp;
 800a124:	4b16      	ldr	r3, [pc, #88]	; (800a180 <chEvtWaitAny+0x60>)
 800a126:	699d      	ldr	r5, [r3, #24]
 800a128:	2320      	movs	r3, #32
 800a12a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a12e:	f7fe ff77 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a132:	f7fd fc75 	bl	8007a20 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800a136:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800a138:	4034      	ands	r4, r6
 800a13a:	d015      	beq.n	800a168 <chEvtWaitAny+0x48>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 800a13c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a13e:	ea23 0304 	bic.w	r3, r3, r4
 800a142:	636b      	str	r3, [r5, #52]	; 0x34
  _dbg_check_unlock();
 800a144:	f7fd fc84 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a148:	f7fe ff72 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a14c:	4b0c      	ldr	r3, [pc, #48]	; (800a180 <chEvtWaitAny+0x60>)
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	429a      	cmp	r2, r3
 800a152:	d004      	beq.n	800a15e <chEvtWaitAny+0x3e>
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	6899      	ldr	r1, [r3, #8]
 800a158:	6893      	ldr	r3, [r2, #8]
 800a15a:	4299      	cmp	r1, r3
 800a15c:	d30b      	bcc.n	800a176 <chEvtWaitAny+0x56>
 800a15e:	2300      	movs	r3, #0
 800a160:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800a164:	4620      	mov	r0, r4
 800a166:	bd70      	pop	{r4, r5, r6, pc}
    ctp->u.ewmask = events;
 800a168:	626e      	str	r6, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800a16a:	200a      	movs	r0, #10
 800a16c:	f7fe f878 	bl	8008260 <chSchGoSleepS>
    m = ctp->epending & events;
 800a170:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800a172:	4034      	ands	r4, r6
 800a174:	e7e2      	b.n	800a13c <chEvtWaitAny+0x1c>
 800a176:	4803      	ldr	r0, [pc, #12]	; (800a184 <chEvtWaitAny+0x64>)
 800a178:	f7fd fac2 	bl	8007700 <chSysHalt>
 800a17c:	e7ef      	b.n	800a15e <chEvtWaitAny+0x3e>
 800a17e:	bf00      	nop
 800a180:	200050f8 	.word	0x200050f8
 800a184:	08019aec 	.word	0x08019aec
 800a188:	f3af 8000 	nop.w
 800a18c:	f3af 8000 	nop.w

0800a190 <chEvtWaitAll>:
 *                      for, @p ALL_EVENTS requires all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 800a194:	4b15      	ldr	r3, [pc, #84]	; (800a1ec <chEvtWaitAll+0x5c>)
 800a196:	699d      	ldr	r5, [r3, #24]
 800a198:	2320      	movs	r3, #32
 800a19a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a19e:	f7fe ff3f 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a1a2:	f7fd fc3d 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  if ((ctp->epending & events) != events) {
 800a1a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a1a8:	ea34 0303 	bics.w	r3, r4, r3
 800a1ac:	d003      	beq.n	800a1b6 <chEvtWaitAll+0x26>
    ctp->u.ewmask = events;
 800a1ae:	626c      	str	r4, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800a1b0:	200b      	movs	r0, #11
 800a1b2:	f7fe f855 	bl	8008260 <chSchGoSleepS>
  }
  ctp->epending &= ~events;
 800a1b6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a1b8:	ea23 0304 	bic.w	r3, r3, r4
 800a1bc:	636b      	str	r3, [r5, #52]	; 0x34
  _dbg_check_unlock();
 800a1be:	f7fd fc47 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a1c2:	f7fe ff35 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a1c6:	4b09      	ldr	r3, [pc, #36]	; (800a1ec <chEvtWaitAll+0x5c>)
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d004      	beq.n	800a1d8 <chEvtWaitAll+0x48>
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	6899      	ldr	r1, [r3, #8]
 800a1d2:	6893      	ldr	r3, [r2, #8]
 800a1d4:	4299      	cmp	r1, r3
 800a1d6:	d304      	bcc.n	800a1e2 <chEvtWaitAll+0x52>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 800a1de:	4620      	mov	r0, r4
 800a1e0:	bd38      	pop	{r3, r4, r5, pc}
 800a1e2:	4803      	ldr	r0, [pc, #12]	; (800a1f0 <chEvtWaitAll+0x60>)
 800a1e4:	f7fd fa8c 	bl	8007700 <chSysHalt>
 800a1e8:	e7f6      	b.n	800a1d8 <chEvtWaitAll+0x48>
 800a1ea:	bf00      	nop
 800a1ec:	200050f8 	.word	0x200050f8
 800a1f0:	08019aec 	.word	0x08019aec
 800a1f4:	f3af 8000 	nop.w
 800a1f8:	f3af 8000 	nop.w
 800a1fc:	f3af 8000 	nop.w

0800a200 <chEvtWaitOneTimeout>:
 * @return              The mask of the lowest event id served and cleared.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 800a200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a204:	4605      	mov	r5, r0
 800a206:	4616      	mov	r6, r2
 800a208:	461f      	mov	r7, r3
  thread_t *ctp = currp;
 800a20a:	4b33      	ldr	r3, [pc, #204]	; (800a2d8 <chEvtWaitOneTimeout+0xd8>)
 800a20c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800a210:	2320      	movs	r3, #32
 800a212:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a216:	f7fe ff03 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a21a:	f7fd fc01 	bl	8007a20 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800a21e:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800a222:	402c      	ands	r4, r5
 800a224:	d10e      	bne.n	800a244 <chEvtWaitOneTimeout+0x44>
    if (TIME_IMMEDIATE == timeout) {
 800a226:	ea56 0307 	orrs.w	r3, r6, r7
 800a22a:	d026      	beq.n	800a27a <chEvtWaitOneTimeout+0x7a>
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 800a22c:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 800a230:	4632      	mov	r2, r6
 800a232:	463b      	mov	r3, r7
 800a234:	200a      	movs	r0, #10
 800a236:	f7fe f843 	bl	80082c0 <chSchGoSleepTimeoutS>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	db32      	blt.n	800a2a4 <chEvtWaitOneTimeout+0xa4>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
 800a23e:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 800a242:	402c      	ands	r4, r5
  }
  m ^= m & (m - (eventmask_t)1);
 800a244:	4263      	negs	r3, r4
 800a246:	401c      	ands	r4, r3
  ctp->epending &= ~m;
 800a248:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800a24c:	ea23 0304 	bic.w	r3, r3, r4
 800a250:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  _dbg_check_unlock();
 800a254:	f7fd fbfc 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a258:	f7fe feea 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a25c:	4b1e      	ldr	r3, [pc, #120]	; (800a2d8 <chEvtWaitOneTimeout+0xd8>)
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	429a      	cmp	r2, r3
 800a262:	d004      	beq.n	800a26e <chEvtWaitOneTimeout+0x6e>
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	6899      	ldr	r1, [r3, #8]
 800a268:	6893      	ldr	r3, [r2, #8]
 800a26a:	4299      	cmp	r1, r3
 800a26c:	d32f      	bcc.n	800a2ce <chEvtWaitOneTimeout+0xce>
 800a26e:	2300      	movs	r3, #0
 800a270:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800a274:	4620      	mov	r0, r4
 800a276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  _dbg_check_unlock();
 800a27a:	f7fd fbe9 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a27e:	f7fe fed7 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a282:	4b15      	ldr	r3, [pc, #84]	; (800a2d8 <chEvtWaitOneTimeout+0xd8>)
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	429a      	cmp	r2, r3
 800a288:	d004      	beq.n	800a294 <chEvtWaitOneTimeout+0x94>
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	6899      	ldr	r1, [r3, #8]
 800a28e:	6893      	ldr	r3, [r2, #8]
 800a290:	4299      	cmp	r1, r3
 800a292:	d303      	bcc.n	800a29c <chEvtWaitOneTimeout+0x9c>
 800a294:	2300      	movs	r3, #0
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	e7eb      	b.n	800a274 <chEvtWaitOneTimeout+0x74>
 800a29c:	480f      	ldr	r0, [pc, #60]	; (800a2dc <chEvtWaitOneTimeout+0xdc>)
 800a29e:	f7fd fa2f 	bl	8007700 <chSysHalt>
 800a2a2:	e7f7      	b.n	800a294 <chEvtWaitOneTimeout+0x94>
  _dbg_check_unlock();
 800a2a4:	f7fd fbd4 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a2a8:	f7fe fec2 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a2ac:	4b0a      	ldr	r3, [pc, #40]	; (800a2d8 <chEvtWaitOneTimeout+0xd8>)
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d004      	beq.n	800a2be <chEvtWaitOneTimeout+0xbe>
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	6899      	ldr	r1, [r3, #8]
 800a2b8:	6893      	ldr	r3, [r2, #8]
 800a2ba:	4299      	cmp	r1, r3
 800a2bc:	d303      	bcc.n	800a2c6 <chEvtWaitOneTimeout+0xc6>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	e7d6      	b.n	800a274 <chEvtWaitOneTimeout+0x74>
 800a2c6:	4805      	ldr	r0, [pc, #20]	; (800a2dc <chEvtWaitOneTimeout+0xdc>)
 800a2c8:	f7fd fa1a 	bl	8007700 <chSysHalt>
 800a2cc:	e7f7      	b.n	800a2be <chEvtWaitOneTimeout+0xbe>
 800a2ce:	4803      	ldr	r0, [pc, #12]	; (800a2dc <chEvtWaitOneTimeout+0xdc>)
 800a2d0:	f7fd fa16 	bl	8007700 <chSysHalt>
 800a2d4:	e7cb      	b.n	800a26e <chEvtWaitOneTimeout+0x6e>
 800a2d6:	bf00      	nop
 800a2d8:	200050f8 	.word	0x200050f8
 800a2dc:	08019aec 	.word	0x08019aec

0800a2e0 <chEvtWaitAnyTimeout>:
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
 800a2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	4616      	mov	r6, r2
 800a2e8:	461f      	mov	r7, r3
  thread_t *ctp = currp;
 800a2ea:	4b33      	ldr	r3, [pc, #204]	; (800a3b8 <chEvtWaitAnyTimeout+0xd8>)
 800a2ec:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800a2f0:	2320      	movs	r3, #32
 800a2f2:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a2f6:	f7fe fe93 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a2fa:	f7fd fb91 	bl	8007a20 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800a2fe:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800a302:	ea10 0504 	ands.w	r5, r0, r4
 800a306:	d10f      	bne.n	800a328 <chEvtWaitAnyTimeout+0x48>
    if (TIME_IMMEDIATE == timeout) {
 800a308:	ea56 0307 	orrs.w	r3, r6, r7
 800a30c:	d025      	beq.n	800a35a <chEvtWaitAnyTimeout+0x7a>
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 800a30e:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 800a312:	4632      	mov	r2, r6
 800a314:	463b      	mov	r3, r7
 800a316:	200a      	movs	r0, #10
 800a318:	f7fd ffd2 	bl	80082c0 <chSchGoSleepTimeoutS>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	db31      	blt.n	800a384 <chEvtWaitAnyTimeout+0xa4>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
 800a320:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 800a324:	ea00 0504 	and.w	r5, r0, r4
  }
  ctp->epending &= ~m;
 800a328:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800a32c:	ea23 0305 	bic.w	r3, r3, r5
 800a330:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  _dbg_check_unlock();
 800a334:	f7fd fb8c 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a338:	f7fe fe7a 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a33c:	4b1e      	ldr	r3, [pc, #120]	; (800a3b8 <chEvtWaitAnyTimeout+0xd8>)
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	429a      	cmp	r2, r3
 800a342:	d004      	beq.n	800a34e <chEvtWaitAnyTimeout+0x6e>
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	6899      	ldr	r1, [r3, #8]
 800a348:	6893      	ldr	r3, [r2, #8]
 800a34a:	4299      	cmp	r1, r3
 800a34c:	d32f      	bcc.n	800a3ae <chEvtWaitAnyTimeout+0xce>
 800a34e:	2300      	movs	r3, #0
 800a350:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800a354:	4628      	mov	r0, r5
 800a356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  _dbg_check_unlock();
 800a35a:	f7fd fb79 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a35e:	f7fe fe67 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a362:	4b15      	ldr	r3, [pc, #84]	; (800a3b8 <chEvtWaitAnyTimeout+0xd8>)
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	429a      	cmp	r2, r3
 800a368:	d004      	beq.n	800a374 <chEvtWaitAnyTimeout+0x94>
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	6899      	ldr	r1, [r3, #8]
 800a36e:	6893      	ldr	r3, [r2, #8]
 800a370:	4299      	cmp	r1, r3
 800a372:	d303      	bcc.n	800a37c <chEvtWaitAnyTimeout+0x9c>
 800a374:	2300      	movs	r3, #0
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	e7eb      	b.n	800a354 <chEvtWaitAnyTimeout+0x74>
 800a37c:	480f      	ldr	r0, [pc, #60]	; (800a3bc <chEvtWaitAnyTimeout+0xdc>)
 800a37e:	f7fd f9bf 	bl	8007700 <chSysHalt>
 800a382:	e7f7      	b.n	800a374 <chEvtWaitAnyTimeout+0x94>
  _dbg_check_unlock();
 800a384:	f7fd fb64 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a388:	f7fe fe52 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a38c:	4b0a      	ldr	r3, [pc, #40]	; (800a3b8 <chEvtWaitAnyTimeout+0xd8>)
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	429a      	cmp	r2, r3
 800a392:	d004      	beq.n	800a39e <chEvtWaitAnyTimeout+0xbe>
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	6899      	ldr	r1, [r3, #8]
 800a398:	6893      	ldr	r3, [r2, #8]
 800a39a:	4299      	cmp	r1, r3
 800a39c:	d303      	bcc.n	800a3a6 <chEvtWaitAnyTimeout+0xc6>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	e7d6      	b.n	800a354 <chEvtWaitAnyTimeout+0x74>
 800a3a6:	4805      	ldr	r0, [pc, #20]	; (800a3bc <chEvtWaitAnyTimeout+0xdc>)
 800a3a8:	f7fd f9aa 	bl	8007700 <chSysHalt>
 800a3ac:	e7f7      	b.n	800a39e <chEvtWaitAnyTimeout+0xbe>
 800a3ae:	4803      	ldr	r0, [pc, #12]	; (800a3bc <chEvtWaitAnyTimeout+0xdc>)
 800a3b0:	f7fd f9a6 	bl	8007700 <chSysHalt>
 800a3b4:	e7cb      	b.n	800a34e <chEvtWaitAnyTimeout+0x6e>
 800a3b6:	bf00      	nop
 800a3b8:	200050f8 	.word	0x200050f8
 800a3bc:	08019aec 	.word	0x08019aec

0800a3c0 <chEvtWaitAllTimeout>:
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
 800a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	4616      	mov	r6, r2
 800a3c6:	461f      	mov	r7, r3
  thread_t *ctp = currp;
 800a3c8:	4b2d      	ldr	r3, [pc, #180]	; (800a480 <chEvtWaitAllTimeout+0xc0>)
 800a3ca:	699d      	ldr	r5, [r3, #24]
 800a3cc:	2320      	movs	r3, #32
 800a3ce:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a3d2:	f7fe fe25 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a3d6:	f7fd fb23 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  if ((ctp->epending & events) != events) {
 800a3da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a3dc:	ea34 0303 	bics.w	r3, r4, r3
 800a3e0:	d00a      	beq.n	800a3f8 <chEvtWaitAllTimeout+0x38>
    if (TIME_IMMEDIATE == timeout) {
 800a3e2:	ea56 0307 	orrs.w	r3, r6, r7
 800a3e6:	d01d      	beq.n	800a424 <chEvtWaitAllTimeout+0x64>
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 800a3e8:	626c      	str	r4, [r5, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 800a3ea:	4632      	mov	r2, r6
 800a3ec:	463b      	mov	r3, r7
 800a3ee:	200b      	movs	r0, #11
 800a3f0:	f7fd ff66 	bl	80082c0 <chSchGoSleepTimeoutS>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	db2a      	blt.n	800a44e <chEvtWaitAllTimeout+0x8e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 800a3f8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a3fa:	ea23 0304 	bic.w	r3, r3, r4
 800a3fe:	636b      	str	r3, [r5, #52]	; 0x34
  _dbg_check_unlock();
 800a400:	f7fd fb26 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a404:	f7fe fe14 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a408:	4b1d      	ldr	r3, [pc, #116]	; (800a480 <chEvtWaitAllTimeout+0xc0>)
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d004      	beq.n	800a41a <chEvtWaitAllTimeout+0x5a>
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	6899      	ldr	r1, [r3, #8]
 800a414:	6893      	ldr	r3, [r2, #8]
 800a416:	4299      	cmp	r1, r3
 800a418:	d32e      	bcc.n	800a478 <chEvtWaitAllTimeout+0xb8>
 800a41a:	2300      	movs	r3, #0
 800a41c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
 800a420:	4620      	mov	r0, r4
}
 800a422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  _dbg_check_unlock();
 800a424:	f7fd fb14 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a428:	f7fe fe02 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a42c:	4b14      	ldr	r3, [pc, #80]	; (800a480 <chEvtWaitAllTimeout+0xc0>)
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	429a      	cmp	r2, r3
 800a432:	d004      	beq.n	800a43e <chEvtWaitAllTimeout+0x7e>
 800a434:	699b      	ldr	r3, [r3, #24]
 800a436:	6899      	ldr	r1, [r3, #8]
 800a438:	6893      	ldr	r3, [r2, #8]
 800a43a:	4299      	cmp	r1, r3
 800a43c:	d303      	bcc.n	800a446 <chEvtWaitAllTimeout+0x86>
 800a43e:	2000      	movs	r0, #0
 800a440:	f380 8811 	msr	BASEPRI, r0
 800a444:	e7ed      	b.n	800a422 <chEvtWaitAllTimeout+0x62>
 800a446:	480f      	ldr	r0, [pc, #60]	; (800a484 <chEvtWaitAllTimeout+0xc4>)
 800a448:	f7fd f95a 	bl	8007700 <chSysHalt>
 800a44c:	e7f7      	b.n	800a43e <chEvtWaitAllTimeout+0x7e>
  _dbg_check_unlock();
 800a44e:	f7fd faff 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a452:	f7fe fded 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a456:	4b0a      	ldr	r3, [pc, #40]	; (800a480 <chEvtWaitAllTimeout+0xc0>)
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d004      	beq.n	800a468 <chEvtWaitAllTimeout+0xa8>
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	6899      	ldr	r1, [r3, #8]
 800a462:	6893      	ldr	r3, [r2, #8]
 800a464:	4299      	cmp	r1, r3
 800a466:	d303      	bcc.n	800a470 <chEvtWaitAllTimeout+0xb0>
 800a468:	2000      	movs	r0, #0
 800a46a:	f380 8811 	msr	BASEPRI, r0
 800a46e:	e7d8      	b.n	800a422 <chEvtWaitAllTimeout+0x62>
 800a470:	4804      	ldr	r0, [pc, #16]	; (800a484 <chEvtWaitAllTimeout+0xc4>)
 800a472:	f7fd f945 	bl	8007700 <chSysHalt>
 800a476:	e7f7      	b.n	800a468 <chEvtWaitAllTimeout+0xa8>
 800a478:	4802      	ldr	r0, [pc, #8]	; (800a484 <chEvtWaitAllTimeout+0xc4>)
 800a47a:	f7fd f941 	bl	8007700 <chSysHalt>
 800a47e:	e7cc      	b.n	800a41a <chEvtWaitAllTimeout+0x5a>
 800a480:	200050f8 	.word	0x200050f8
 800a484:	08019aec 	.word	0x08019aec
	...

0800a490 <chMsgSend>:
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 800a490:	b570      	push	{r4, r5, r6, lr}
 800a492:	460e      	mov	r6, r1
  thread_t *ctp = currp;
 800a494:	4b1c      	ldr	r3, [pc, #112]	; (800a508 <chMsgSend+0x78>)
 800a496:	699c      	ldr	r4, [r3, #24]

  chDbgCheck(tp != NULL);
 800a498:	4605      	mov	r5, r0
 800a49a:	b340      	cbz	r0, 800a4ee <chMsgSend+0x5e>
 800a49c:	2320      	movs	r3, #32
 800a49e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a4a2:	f7fe fdbd 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a4a6:	f7fd fabb 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  ctp->u.sentmsg = msg;
 800a4aa:	6266      	str	r6, [r4, #36]	; 0x24
  msg_insert(ctp, &tp->msgqueue);
 800a4ac:	f105 032c 	add.w	r3, r5, #44	; 0x2c
  tp->queue.next             = (thread_t *)tqp;
 800a4b0:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = tqp->prev;
 800a4b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a4b4:	6063      	str	r3, [r4, #4]
  tp->queue.prev->queue.next = tp;
 800a4b6:	601c      	str	r4, [r3, #0]
  tqp->prev                  = tp;
 800a4b8:	632c      	str	r4, [r5, #48]	; 0x30
  if (tp->state == CH_STATE_WTMSG) {
 800a4ba:	f895 3020 	ldrb.w	r3, [r5, #32]
 800a4be:	2b0e      	cmp	r3, #14
 800a4c0:	d019      	beq.n	800a4f6 <chMsgSend+0x66>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 800a4c2:	200c      	movs	r0, #12
 800a4c4:	f7fd fecc 	bl	8008260 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 800a4c8:	6a64      	ldr	r4, [r4, #36]	; 0x24
  _dbg_check_unlock();
 800a4ca:	f7fd fac1 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a4ce:	f7fe fdaf 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a4d2:	4b0d      	ldr	r3, [pc, #52]	; (800a508 <chMsgSend+0x78>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d004      	beq.n	800a4e4 <chMsgSend+0x54>
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	6899      	ldr	r1, [r3, #8]
 800a4de:	6893      	ldr	r3, [r2, #8]
 800a4e0:	4299      	cmp	r1, r3
 800a4e2:	d30c      	bcc.n	800a4fe <chMsgSend+0x6e>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(tp != NULL);
 800a4ee:	4807      	ldr	r0, [pc, #28]	; (800a50c <chMsgSend+0x7c>)
 800a4f0:	f7fd f906 	bl	8007700 <chSysHalt>
 800a4f4:	e7d2      	b.n	800a49c <chMsgSend+0xc>
    (void) chSchReadyI(tp);
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f7fd fe22 	bl	8008140 <chSchReadyI>
 800a4fc:	e7e1      	b.n	800a4c2 <chMsgSend+0x32>
 800a4fe:	4804      	ldr	r0, [pc, #16]	; (800a510 <chMsgSend+0x80>)
 800a500:	f7fd f8fe 	bl	8007700 <chSysHalt>
 800a504:	e7ee      	b.n	800a4e4 <chMsgSend+0x54>
 800a506:	bf00      	nop
 800a508:	200050f8 	.word	0x200050f8
 800a50c:	08019b4c 	.word	0x08019b4c
 800a510:	08019b58 	.word	0x08019b58
 800a514:	f3af 8000 	nop.w
 800a518:	f3af 8000 	nop.w
 800a51c:	f3af 8000 	nop.w

0800a520 <chMsgWait>:
 *
 * @return              A pointer to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	2320      	movs	r3, #32
 800a524:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a528:	f7fe fd7a 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a52c:	f7fd fa78 	bl	8007a20 <_dbg_check_lock>
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 800a530:	4b16      	ldr	r3, [pc, #88]	; (800a58c <chMsgWait+0x6c>)
 800a532:	699c      	ldr	r4, [r3, #24]
 *
 * @iclass
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();
 800a534:	f7fd fb14 	bl	8007b60 <chDbgCheckClassI>

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 800a538:	4623      	mov	r3, r4
 800a53a:	f853 2f2c 	ldr.w	r2, [r3, #44]!
 800a53e:	429a      	cmp	r2, r3
 800a540:	d01b      	beq.n	800a57a <chMsgWait+0x5a>
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
 800a542:	4d12      	ldr	r5, [pc, #72]	; (800a58c <chMsgWait+0x6c>)
 800a544:	69ab      	ldr	r3, [r5, #24]
 800a546:	f103 012c 	add.w	r1, r3, #44	; 0x2c
  thread_t *tp = tqp->next;
 800a54a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  tqp->next             = tp->queue.next;
 800a54c:	6822      	ldr	r2, [r4, #0]
 800a54e:	62da      	str	r2, [r3, #44]	; 0x2c
  tqp->next->queue.prev = (thread_t *)tqp;
 800a550:	6051      	str	r1, [r2, #4]
  tp->state = CH_STATE_SNDMSG;
 800a552:	230d      	movs	r3, #13
 800a554:	f884 3020 	strb.w	r3, [r4, #32]
  _dbg_check_unlock();
 800a558:	f7fd fa7a 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a55c:	f7fe fd68 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a560:	682b      	ldr	r3, [r5, #0]
 800a562:	42ab      	cmp	r3, r5
 800a564:	d004      	beq.n	800a570 <chMsgWait+0x50>
 800a566:	69aa      	ldr	r2, [r5, #24]
 800a568:	6892      	ldr	r2, [r2, #8]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d308      	bcc.n	800a582 <chMsgWait+0x62>
 800a570:	2300      	movs	r3, #0
 800a572:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 800a576:	4620      	mov	r0, r4
 800a578:	bd38      	pop	{r3, r4, r5, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 800a57a:	200e      	movs	r0, #14
 800a57c:	f7fd fe70 	bl	8008260 <chSchGoSleepS>
 800a580:	e7df      	b.n	800a542 <chMsgWait+0x22>
 800a582:	4803      	ldr	r0, [pc, #12]	; (800a590 <chMsgWait+0x70>)
 800a584:	f7fd f8bc 	bl	8007700 <chSysHalt>
 800a588:	e7f2      	b.n	800a570 <chMsgWait+0x50>
 800a58a:	bf00      	nop
 800a58c:	200050f8 	.word	0x200050f8
 800a590:	08019b58 	.word	0x08019b58
 800a594:	f3af 8000 	nop.w
 800a598:	f3af 8000 	nop.w
 800a59c:	f3af 8000 	nop.w

0800a5a0 <chMsgRelease>:
 * @param[in] tp        pointer to the thread
 * @param[in] msg       message to be returned to the sender
 *
 * @api
 */
void chMsgRelease(thread_t *tp, msg_t msg) {
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	460d      	mov	r5, r1
 800a5a6:	2320      	movs	r3, #32
 800a5a8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a5ac:	f7fe fd38 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a5b0:	f7fd fa36 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");
 800a5b4:	f894 3020 	ldrb.w	r3, [r4, #32]
 800a5b8:	2b0d      	cmp	r3, #13
 800a5ba:	d002      	beq.n	800a5c2 <chMsgRelease+0x22>
 800a5bc:	480e      	ldr	r0, [pc, #56]	; (800a5f8 <chMsgRelease+0x58>)
 800a5be:	f7fd f89f 	bl	8007700 <chSysHalt>
 *
 * @sclass
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();
 800a5c2:	f7fd fae5 	bl	8007b90 <chDbgCheckClassS>

  chSchWakeupS(tp, msg);
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f7fd fea9 	bl	8008320 <chSchWakeupS>
  _dbg_check_unlock();
 800a5ce:	f7fd fa3f 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a5d2:	f7fe fd2d 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a5d6:	4b09      	ldr	r3, [pc, #36]	; (800a5fc <chMsgRelease+0x5c>)
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d004      	beq.n	800a5e8 <chMsgRelease+0x48>
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	6899      	ldr	r1, [r3, #8]
 800a5e2:	6893      	ldr	r3, [r2, #8]
 800a5e4:	4299      	cmp	r1, r3
 800a5e6:	d303      	bcc.n	800a5f0 <chMsgRelease+0x50>
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f383 8811 	msr	BASEPRI, r3
  chMsgReleaseS(tp, msg);
  chSysUnlock();
}
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	4803      	ldr	r0, [pc, #12]	; (800a600 <chMsgRelease+0x60>)
 800a5f2:	f7fd f885 	bl	8007700 <chSysHalt>
 800a5f6:	e7f7      	b.n	800a5e8 <chMsgRelease+0x48>
 800a5f8:	08019b64 	.word	0x08019b64
 800a5fc:	200050f8 	.word	0x200050f8
 800a600:	08019b58 	.word	0x08019b58
	...

0800a610 <chThdCreateFromHeap>:
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	460c      	mov	r4, r1
 800a616:	4616      	mov	r6, r2
 800a618:	461d      	mov	r5, r3
  thread_t *tp;
  void *wsp;

  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800a61a:	2208      	movs	r2, #8
 800a61c:	f000 fb98 	bl	800ad50 <chHeapAllocAligned>
  if (wsp == NULL) {
 800a620:	2800      	cmp	r0, #0
 800a622:	d033      	beq.n	800a68c <chThdCreateFromHeap+0x7c>
    return NULL;
  }

  thread_descriptor_t td = {
 800a624:	9600      	str	r6, [sp, #0]
 800a626:	9001      	str	r0, [sp, #4]
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 800a628:	1901      	adds	r1, r0, r4
  thread_descriptor_t td = {
 800a62a:	9102      	str	r1, [sp, #8]
 800a62c:	9503      	str	r5, [sp, #12]
 800a62e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a630:	9204      	str	r2, [sp, #16]
 800a632:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a634:	9205      	str	r2, [sp, #20]
    pf,
    arg
  };

#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 800a636:	2255      	movs	r2, #85	; 0x55
 800a638:	f7fd ff9a 	bl	8008570 <_thread_memfill>
 800a63c:	2320      	movs	r3, #32
 800a63e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a642:	f7fe fced 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a646:	f7fd f9eb 	bl	8007a20 <_dbg_check_lock>
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800a64a:	4668      	mov	r0, sp
 800a64c:	f7fd ff98 	bl	8008580 <chThdCreateSuspendedI>
 800a650:	4604      	mov	r4, r0
  tp->flags = CH_FLAG_MODE_HEAP;
 800a652:	2301      	movs	r3, #1
 800a654:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 800a658:	2100      	movs	r1, #0
 800a65a:	f7fd fe61 	bl	8008320 <chSchWakeupS>
  _dbg_check_unlock();
 800a65e:	f7fd f9f7 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a662:	f7fe fce5 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a666:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <chThdCreateFromHeap+0x80>)
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d004      	beq.n	800a678 <chThdCreateFromHeap+0x68>
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	6899      	ldr	r1, [r3, #8]
 800a672:	6893      	ldr	r3, [r2, #8]
 800a674:	4299      	cmp	r1, r3
 800a676:	d305      	bcc.n	800a684 <chThdCreateFromHeap+0x74>
 800a678:	2300      	movs	r3, #0
 800a67a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 800a67e:	4620      	mov	r0, r4
 800a680:	b006      	add	sp, #24
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	4803      	ldr	r0, [pc, #12]	; (800a694 <chThdCreateFromHeap+0x84>)
 800a686:	f7fd f83b 	bl	8007700 <chSysHalt>
 800a68a:	e7f5      	b.n	800a678 <chThdCreateFromHeap+0x68>
    return NULL;
 800a68c:	2400      	movs	r4, #0
 800a68e:	e7f6      	b.n	800a67e <chThdCreateFromHeap+0x6e>
 800a690:	200050f8 	.word	0x200050f8
 800a694:	08019b74 	.word	0x08019b74
 800a698:	f3af 8000 	nop.w
 800a69c:	f3af 8000 	nop.w

0800a6a0 <chThdCreateFromMemoryPool>:
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
                                    tprio_t prio, tfunc_t pf, void *arg) {
 800a6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	4616      	mov	r6, r2
 800a6a8:	461d      	mov	r5, r3
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d035      	beq.n	800a71c <chThdCreateFromMemoryPool+0x7c>

  wsp = chPoolAlloc(mp);
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f000 fca5 	bl	800b000 <chPoolAlloc>
  if (wsp == NULL) {
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d038      	beq.n	800a72c <chThdCreateFromMemoryPool+0x8c>
    return NULL;
  }

  thread_descriptor_t td = {
 800a6ba:	9700      	str	r7, [sp, #0]
 800a6bc:	9001      	str	r0, [sp, #4]
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 800a6be:	6861      	ldr	r1, [r4, #4]
 800a6c0:	4401      	add	r1, r0
  thread_descriptor_t td = {
 800a6c2:	9102      	str	r1, [sp, #8]
 800a6c4:	9603      	str	r6, [sp, #12]
 800a6c6:	9504      	str	r5, [sp, #16]
 800a6c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6ca:	9205      	str	r2, [sp, #20]
    pf,
    arg
  };

#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 800a6cc:	2255      	movs	r2, #85	; 0x55
 800a6ce:	f7fd ff4f 	bl	8008570 <_thread_memfill>
 800a6d2:	2320      	movs	r3, #32
 800a6d4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a6d8:	f7fe fca2 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a6dc:	f7fd f9a0 	bl	8007a20 <_dbg_check_lock>
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800a6e0:	4668      	mov	r0, sp
 800a6e2:	f7fd ff4d 	bl	8008580 <chThdCreateSuspendedI>
 800a6e6:	4605      	mov	r5, r0
  tp->flags = CH_FLAG_MODE_MPOOL;
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 800a6ee:	6404      	str	r4, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	f7fd fe15 	bl	8008320 <chSchWakeupS>
  _dbg_check_unlock();
 800a6f6:	f7fd f9ab 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a6fa:	f7fe fc99 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a6fe:	4b0c      	ldr	r3, [pc, #48]	; (800a730 <chThdCreateFromMemoryPool+0x90>)
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d004      	beq.n	800a710 <chThdCreateFromMemoryPool+0x70>
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	6899      	ldr	r1, [r3, #8]
 800a70a:	6893      	ldr	r3, [r2, #8]
 800a70c:	4299      	cmp	r1, r3
 800a70e:	d309      	bcc.n	800a724 <chThdCreateFromMemoryPool+0x84>
 800a710:	2300      	movs	r3, #0
 800a712:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 800a716:	4628      	mov	r0, r5
 800a718:	b007      	add	sp, #28
 800a71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  chDbgCheck(mp != NULL);
 800a71c:	4805      	ldr	r0, [pc, #20]	; (800a734 <chThdCreateFromMemoryPool+0x94>)
 800a71e:	f7fc ffef 	bl	8007700 <chSysHalt>
 800a722:	e7c5      	b.n	800a6b0 <chThdCreateFromMemoryPool+0x10>
 800a724:	4804      	ldr	r0, [pc, #16]	; (800a738 <chThdCreateFromMemoryPool+0x98>)
 800a726:	f7fc ffeb 	bl	8007700 <chSysHalt>
 800a72a:	e7f1      	b.n	800a710 <chThdCreateFromMemoryPool+0x70>
    return NULL;
 800a72c:	2500      	movs	r5, #0
 800a72e:	e7f2      	b.n	800a716 <chThdCreateFromMemoryPool+0x76>
 800a730:	200050f8 	.word	0x200050f8
 800a734:	08019b80 	.word	0x08019b80
 800a738:	08019b74 	.word	0x08019b74
 800a73c:	00000000 	.word	0x00000000

0800a740 <chMBObjectInit>:
 * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
 * @param[in] n         number of elements in the buffer array
 *
 * @init
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {
 800a740:	b570      	push	{r4, r5, r6, lr}
 800a742:	460d      	mov	r5, r1
 800a744:	4616      	mov	r6, r2

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));
 800a746:	4604      	mov	r4, r0
 800a748:	b108      	cbz	r0, 800a74e <chMBObjectInit+0xe>
 800a74a:	b101      	cbz	r1, 800a74e <chMBObjectInit+0xe>
 800a74c:	b912      	cbnz	r2, 800a754 <chMBObjectInit+0x14>
 800a74e:	480a      	ldr	r0, [pc, #40]	; (800a778 <chMBObjectInit+0x38>)
 800a750:	f7fc ffd6 	bl	8007700 <chSysHalt>

  mbp->buffer = buf;
 800a754:	6025      	str	r5, [r4, #0]
  mbp->rdptr  = buf;
 800a756:	60e5      	str	r5, [r4, #12]
  mbp->wrptr  = buf;
 800a758:	60a5      	str	r5, [r4, #8]
  mbp->top    = &buf[n];
 800a75a:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 800a75e:	6065      	str	r5, [r4, #4]
  mbp->cnt    = (size_t)0;
 800a760:	2300      	movs	r3, #0
 800a762:	6123      	str	r3, [r4, #16]
  mbp->reset  = false;
 800a764:	7523      	strb	r3, [r4, #20]
  chThdQueueObjectInit(&mbp->qw);
 800a766:	f104 0318 	add.w	r3, r4, #24
  tqp->next = (thread_t *)tqp;
 800a76a:	61a3      	str	r3, [r4, #24]
  tqp->prev = (thread_t *)tqp;
 800a76c:	61e3      	str	r3, [r4, #28]
  chThdQueueObjectInit(&mbp->qr);
 800a76e:	f104 0320 	add.w	r3, r4, #32
  tqp->next = (thread_t *)tqp;
 800a772:	6223      	str	r3, [r4, #32]
  tqp->prev = (thread_t *)tqp;
 800a774:	6263      	str	r3, [r4, #36]	; 0x24
}
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	08019b9c 	.word	0x08019b9c
 800a77c:	f3af 8000 	nop.w

0800a780 <chMBResetI>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBResetI(mailbox_t *mbp) {
 800a780:	b510      	push	{r4, lr}
 800a782:	4604      	mov	r4, r0

  chDbgCheckClassI();
 800a784:	f7fd f9ec 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(mbp != NULL);
 800a788:	b19c      	cbz	r4, 800a7b2 <chMBResetI+0x32>

  mbp->wrptr = mbp->buffer;
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	60a3      	str	r3, [r4, #8]
  mbp->rdptr = mbp->buffer;
 800a78e:	60e3      	str	r3, [r4, #12]
  mbp->cnt   = (size_t)0;
 800a790:	2300      	movs	r3, #0
 800a792:	6123      	str	r3, [r4, #16]
  mbp->reset = true;
 800a794:	2301      	movs	r3, #1
 800a796:	7523      	strb	r3, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 800a798:	f06f 0101 	mvn.w	r1, #1
 800a79c:	f104 0018 	add.w	r0, r4, #24
 800a7a0:	f7fe fb5e 	bl	8008e60 <chThdDequeueAllI>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 800a7a4:	f06f 0101 	mvn.w	r1, #1
 800a7a8:	f104 0020 	add.w	r0, r4, #32
 800a7ac:	f7fe fb58 	bl	8008e60 <chThdDequeueAllI>
}
 800a7b0:	bd10      	pop	{r4, pc}
  chDbgCheck(mbp != NULL);
 800a7b2:	4802      	ldr	r0, [pc, #8]	; (800a7bc <chMBResetI+0x3c>)
 800a7b4:	f7fc ffa4 	bl	8007700 <chSysHalt>
 800a7b8:	e7e7      	b.n	800a78a <chMBResetI+0xa>
 800a7ba:	bf00      	nop
 800a7bc:	08019bac 	.word	0x08019bac

0800a7c0 <chMBReset>:
void chMBReset(mailbox_t *mbp) {
 800a7c0:	b510      	push	{r4, lr}
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	2320      	movs	r3, #32
 800a7c6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a7ca:	f7fe fc29 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a7ce:	f7fd f927 	bl	8007a20 <_dbg_check_lock>
  chMBResetI(mbp);
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f7ff ffd4 	bl	800a780 <chMBResetI>
  chSchRescheduleS();
 800a7d8:	f7fd fe5a 	bl	8008490 <chSchRescheduleS>
  _dbg_check_unlock();
 800a7dc:	f7fd f938 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a7e0:	f7fe fc26 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a7e4:	4b08      	ldr	r3, [pc, #32]	; (800a808 <chMBReset+0x48>)
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d004      	beq.n	800a7f6 <chMBReset+0x36>
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	6899      	ldr	r1, [r3, #8]
 800a7f0:	6893      	ldr	r3, [r2, #8]
 800a7f2:	4299      	cmp	r1, r3
 800a7f4:	d303      	bcc.n	800a7fe <chMBReset+0x3e>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f383 8811 	msr	BASEPRI, r3
}
 800a7fc:	bd10      	pop	{r4, pc}
 800a7fe:	4803      	ldr	r0, [pc, #12]	; (800a80c <chMBReset+0x4c>)
 800a800:	f7fc ff7e 	bl	8007700 <chSysHalt>
 800a804:	e7f7      	b.n	800a7f6 <chMBReset+0x36>
 800a806:	bf00      	nop
 800a808:	200050f8 	.word	0x200050f8
 800a80c:	08019bb8 	.word	0x08019bb8

0800a810 <chMBPostTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800a810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a814:	4605      	mov	r5, r0
 800a816:	4688      	mov	r8, r1
 800a818:	4616      	mov	r6, r2
 800a81a:	461f      	mov	r7, r3
  msg_t rdymsg;

  chDbgCheckClassS();
 800a81c:	f7fd f9b8 	bl	8007b90 <chDbgCheckClassS>
  chDbgCheck(mbp != NULL);
 800a820:	b1b5      	cbz	r5, 800a850 <chMBPostTimeoutS+0x40>

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 800a822:	7d2b      	ldrb	r3, [r5, #20]
 800a824:	bb7b      	cbnz	r3, 800a886 <chMBPostTimeoutS+0x76>
 *
 * @iclass
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();
 800a826:	f7fd f99b 	bl	8007b60 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800a82a:	686c      	ldr	r4, [r5, #4]
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	1ae4      	subs	r4, r4, r3
 800a830:	10a4      	asrs	r4, r4, #2
  chDbgCheckClassI();
 800a832:	f7fd f995 	bl	8007b60 <chDbgCheckClassI>
  return mbp->cnt;
 800a836:	692b      	ldr	r3, [r5, #16]
      return MSG_RESET;
    }

    /* Is there a free message slot in queue? if so then post.*/
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a838:	429c      	cmp	r4, r3
 800a83a:	d10d      	bne.n	800a858 <chMBPostTimeoutS+0x48>

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800a83c:	4632      	mov	r2, r6
 800a83e:	463b      	mov	r3, r7
 800a840:	f105 0018 	add.w	r0, r5, #24
 800a844:	f7fe fad4 	bl	8008df0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800a848:	4603      	mov	r3, r0
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d0e9      	beq.n	800a822 <chMBPostTimeoutS+0x12>
 800a84e:	e01c      	b.n	800a88a <chMBPostTimeoutS+0x7a>
  chDbgCheck(mbp != NULL);
 800a850:	480f      	ldr	r0, [pc, #60]	; (800a890 <chMBPostTimeoutS+0x80>)
 800a852:	f7fc ff55 	bl	8007700 <chSysHalt>
 800a856:	e7e4      	b.n	800a822 <chMBPostTimeoutS+0x12>
      *mbp->wrptr++ = msg;
 800a858:	68ab      	ldr	r3, [r5, #8]
 800a85a:	1d1a      	adds	r2, r3, #4
 800a85c:	60aa      	str	r2, [r5, #8]
 800a85e:	f8c3 8000 	str.w	r8, [r3]
      if (mbp->wrptr >= mbp->top) {
 800a862:	68aa      	ldr	r2, [r5, #8]
 800a864:	686b      	ldr	r3, [r5, #4]
 800a866:	429a      	cmp	r2, r3
 800a868:	d301      	bcc.n	800a86e <chMBPostTimeoutS+0x5e>
        mbp->wrptr = mbp->buffer;
 800a86a:	682b      	ldr	r3, [r5, #0]
 800a86c:	60ab      	str	r3, [r5, #8]
      mbp->cnt++;
 800a86e:	692b      	ldr	r3, [r5, #16]
 800a870:	3301      	adds	r3, #1
 800a872:	612b      	str	r3, [r5, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 800a874:	2100      	movs	r1, #0
 800a876:	f105 0020 	add.w	r0, r5, #32
 800a87a:	f7fe fad1 	bl	8008e20 <chThdDequeueNextI>
      chSchRescheduleS();
 800a87e:	f7fd fe07 	bl	8008490 <chSchRescheduleS>
      return MSG_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	e001      	b.n	800a88a <chMBPostTimeoutS+0x7a>
      return MSG_RESET;
 800a886:	f06f 0301 	mvn.w	r3, #1

  return rdymsg;
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a890:	08019bc4 	.word	0x08019bc4
 800a894:	f3af 8000 	nop.w
 800a898:	f3af 8000 	nop.w
 800a89c:	f3af 8000 	nop.w

0800a8a0 <chMBPostTimeout>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	4616      	mov	r6, r2
 800a8a8:	461f      	mov	r7, r3
 800a8aa:	2320      	movs	r3, #32
 800a8ac:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a8b0:	f7fe fbb6 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a8b4:	f7fd f8b4 	bl	8007a20 <_dbg_check_lock>
  rdymsg = chMBPostTimeoutS(mbp, msg, timeout);
 800a8b8:	4632      	mov	r2, r6
 800a8ba:	463b      	mov	r3, r7
 800a8bc:	4629      	mov	r1, r5
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f7ff ffa6 	bl	800a810 <chMBPostTimeoutS>
 800a8c4:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800a8c6:	f7fd f8c3 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a8ca:	f7fe fbb1 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a8ce:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <chMBPostTimeout+0x54>)
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d004      	beq.n	800a8e0 <chMBPostTimeout+0x40>
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	6899      	ldr	r1, [r3, #8]
 800a8da:	6893      	ldr	r3, [r2, #8]
 800a8dc:	4299      	cmp	r1, r3
 800a8de:	d304      	bcc.n	800a8ea <chMBPostTimeout+0x4a>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f383 8811 	msr	BASEPRI, r3
}
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ea:	4803      	ldr	r0, [pc, #12]	; (800a8f8 <chMBPostTimeout+0x58>)
 800a8ec:	f7fc ff08 	bl	8007700 <chSysHalt>
 800a8f0:	e7f6      	b.n	800a8e0 <chMBPostTimeout+0x40>
 800a8f2:	bf00      	nop
 800a8f4:	200050f8 	.word	0x200050f8
 800a8f8:	08019bb8 	.word	0x08019bb8
 800a8fc:	f3af 8000 	nop.w

0800a900 <chMBPostI>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	4604      	mov	r4, r0
 800a904:	460e      	mov	r6, r1

  chDbgCheckClassI();
 800a906:	f7fd f92b 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(mbp != NULL);
 800a90a:	b304      	cbz	r4, 800a94e <chMBPostI+0x4e>

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 800a90c:	7d23      	ldrb	r3, [r4, #20]
 800a90e:	bb13      	cbnz	r3, 800a956 <chMBPostI+0x56>
  chDbgCheckClassI();
 800a910:	f7fd f926 	bl	8007b60 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800a914:	6865      	ldr	r5, [r4, #4]
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	1aed      	subs	r5, r5, r3
 800a91a:	10ad      	asrs	r5, r5, #2
  chDbgCheckClassI();
 800a91c:	f7fd f920 	bl	8007b60 <chDbgCheckClassI>
  return mbp->cnt;
 800a920:	6923      	ldr	r3, [r4, #16]
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a922:	429d      	cmp	r5, r3
 800a924:	d01a      	beq.n	800a95c <chMBPostI+0x5c>
    *mbp->wrptr++ = msg;
 800a926:	68a3      	ldr	r3, [r4, #8]
 800a928:	1d1a      	adds	r2, r3, #4
 800a92a:	60a2      	str	r2, [r4, #8]
 800a92c:	601e      	str	r6, [r3, #0]
    if (mbp->wrptr >= mbp->top) {
 800a92e:	68a2      	ldr	r2, [r4, #8]
 800a930:	6863      	ldr	r3, [r4, #4]
 800a932:	429a      	cmp	r2, r3
 800a934:	d301      	bcc.n	800a93a <chMBPostI+0x3a>
      mbp->wrptr = mbp->buffer;
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	60a3      	str	r3, [r4, #8]
    }
    mbp->cnt++;
 800a93a:	6923      	ldr	r3, [r4, #16]
 800a93c:	3301      	adds	r3, #1
 800a93e:	6123      	str	r3, [r4, #16]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800a940:	2100      	movs	r1, #0
 800a942:	f104 0020 	add.w	r0, r4, #32
 800a946:	f7fe fa6b 	bl	8008e20 <chThdDequeueNextI>

    return MSG_OK;
 800a94a:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 800a94c:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);
 800a94e:	4805      	ldr	r0, [pc, #20]	; (800a964 <chMBPostI+0x64>)
 800a950:	f7fc fed6 	bl	8007700 <chSysHalt>
 800a954:	e7da      	b.n	800a90c <chMBPostI+0xc>
    return MSG_RESET;
 800a956:	f06f 0001 	mvn.w	r0, #1
 800a95a:	e7f7      	b.n	800a94c <chMBPostI+0x4c>
  return MSG_TIMEOUT;
 800a95c:	f04f 30ff 	mov.w	r0, #4294967295
 800a960:	e7f4      	b.n	800a94c <chMBPostI+0x4c>
 800a962:	bf00      	nop
 800a964:	08019bd8 	.word	0x08019bd8
 800a968:	f3af 8000 	nop.w
 800a96c:	f3af 8000 	nop.w

0800a970 <chMBPostAheadTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBPostAheadTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800a970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a974:	4605      	mov	r5, r0
 800a976:	4688      	mov	r8, r1
 800a978:	4616      	mov	r6, r2
 800a97a:	461f      	mov	r7, r3
  msg_t rdymsg;

  chDbgCheckClassS();
 800a97c:	f7fd f908 	bl	8007b90 <chDbgCheckClassS>
  chDbgCheck(mbp != NULL);
 800a980:	b1b5      	cbz	r5, 800a9b0 <chMBPostAheadTimeoutS+0x40>

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 800a982:	7d2b      	ldrb	r3, [r5, #20]
 800a984:	bb83      	cbnz	r3, 800a9e8 <chMBPostAheadTimeoutS+0x78>
  chDbgCheckClassI();
 800a986:	f7fd f8eb 	bl	8007b60 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800a98a:	686c      	ldr	r4, [r5, #4]
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	1ae4      	subs	r4, r4, r3
 800a990:	10a4      	asrs	r4, r4, #2
  chDbgCheckClassI();
 800a992:	f7fd f8e5 	bl	8007b60 <chDbgCheckClassI>
  return mbp->cnt;
 800a996:	692b      	ldr	r3, [r5, #16]
      return MSG_RESET;
    }

    /* Is there a free message slot in queue? if so then post.*/
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a998:	429c      	cmp	r4, r3
 800a99a:	d10d      	bne.n	800a9b8 <chMBPostAheadTimeoutS+0x48>

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800a99c:	4632      	mov	r2, r6
 800a99e:	463b      	mov	r3, r7
 800a9a0:	f105 0018 	add.w	r0, r5, #24
 800a9a4:	f7fe fa24 	bl	8008df0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	d0e9      	beq.n	800a982 <chMBPostAheadTimeoutS+0x12>
 800a9ae:	e01d      	b.n	800a9ec <chMBPostAheadTimeoutS+0x7c>
  chDbgCheck(mbp != NULL);
 800a9b0:	4810      	ldr	r0, [pc, #64]	; (800a9f4 <chMBPostAheadTimeoutS+0x84>)
 800a9b2:	f7fc fea5 	bl	8007700 <chSysHalt>
 800a9b6:	e7e4      	b.n	800a982 <chMBPostAheadTimeoutS+0x12>
      if (--mbp->rdptr < mbp->buffer) {
 800a9b8:	68eb      	ldr	r3, [r5, #12]
 800a9ba:	3b04      	subs	r3, #4
 800a9bc:	60eb      	str	r3, [r5, #12]
 800a9be:	682a      	ldr	r2, [r5, #0]
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d202      	bcs.n	800a9ca <chMBPostAheadTimeoutS+0x5a>
        mbp->rdptr = mbp->top - 1;
 800a9c4:	686b      	ldr	r3, [r5, #4]
 800a9c6:	3b04      	subs	r3, #4
 800a9c8:	60eb      	str	r3, [r5, #12]
      *mbp->rdptr = msg;
 800a9ca:	68eb      	ldr	r3, [r5, #12]
 800a9cc:	f8c3 8000 	str.w	r8, [r3]
      mbp->cnt++;
 800a9d0:	692b      	ldr	r3, [r5, #16]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	612b      	str	r3, [r5, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	f105 0020 	add.w	r0, r5, #32
 800a9dc:	f7fe fa20 	bl	8008e20 <chThdDequeueNextI>
      chSchRescheduleS();
 800a9e0:	f7fd fd56 	bl	8008490 <chSchRescheduleS>
      return MSG_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e001      	b.n	800a9ec <chMBPostAheadTimeoutS+0x7c>
      return MSG_RESET;
 800a9e8:	f06f 0301 	mvn.w	r3, #1

  return rdymsg;
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f2:	bf00      	nop
 800a9f4:	08019be4 	.word	0x08019be4
 800a9f8:	f3af 8000 	nop.w
 800a9fc:	f3af 8000 	nop.w

0800aa00 <chMBPostAheadTimeout>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa02:	4604      	mov	r4, r0
 800aa04:	460d      	mov	r5, r1
 800aa06:	4616      	mov	r6, r2
 800aa08:	461f      	mov	r7, r3
 800aa0a:	2320      	movs	r3, #32
 800aa0c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800aa10:	f7fe fb06 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800aa14:	f7fd f804 	bl	8007a20 <_dbg_check_lock>
  rdymsg = chMBPostAheadTimeoutS(mbp, msg, timeout);
 800aa18:	4632      	mov	r2, r6
 800aa1a:	463b      	mov	r3, r7
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f7ff ffa6 	bl	800a970 <chMBPostAheadTimeoutS>
 800aa24:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800aa26:	f7fd f813 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800aa2a:	f7fe fb01 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800aa2e:	4b09      	ldr	r3, [pc, #36]	; (800aa54 <chMBPostAheadTimeout+0x54>)
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d004      	beq.n	800aa40 <chMBPostAheadTimeout+0x40>
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	6899      	ldr	r1, [r3, #8]
 800aa3a:	6893      	ldr	r3, [r2, #8]
 800aa3c:	4299      	cmp	r1, r3
 800aa3e:	d304      	bcc.n	800aa4a <chMBPostAheadTimeout+0x4a>
 800aa40:	2300      	movs	r3, #0
 800aa42:	f383 8811 	msr	BASEPRI, r3
}
 800aa46:	4620      	mov	r0, r4
 800aa48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa4a:	4803      	ldr	r0, [pc, #12]	; (800aa58 <chMBPostAheadTimeout+0x58>)
 800aa4c:	f7fc fe58 	bl	8007700 <chSysHalt>
 800aa50:	e7f6      	b.n	800aa40 <chMBPostAheadTimeout+0x40>
 800aa52:	bf00      	nop
 800aa54:	200050f8 	.word	0x200050f8
 800aa58:	08019bb8 	.word	0x08019bb8
 800aa5c:	f3af 8000 	nop.w

0800aa60 <chMBPostAheadI>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	4604      	mov	r4, r0
 800aa64:	460e      	mov	r6, r1

  chDbgCheckClassI();
 800aa66:	f7fd f87b 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(mbp != NULL);
 800aa6a:	b30c      	cbz	r4, 800aab0 <chMBPostAheadI+0x50>

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 800aa6c:	7d23      	ldrb	r3, [r4, #20]
 800aa6e:	bb1b      	cbnz	r3, 800aab8 <chMBPostAheadI+0x58>
  chDbgCheckClassI();
 800aa70:	f7fd f876 	bl	8007b60 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800aa74:	6865      	ldr	r5, [r4, #4]
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	1aed      	subs	r5, r5, r3
 800aa7a:	10ad      	asrs	r5, r5, #2
  chDbgCheckClassI();
 800aa7c:	f7fd f870 	bl	8007b60 <chDbgCheckClassI>
  return mbp->cnt;
 800aa80:	6923      	ldr	r3, [r4, #16]
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800aa82:	429d      	cmp	r5, r3
 800aa84:	d01b      	beq.n	800aabe <chMBPostAheadI+0x5e>
    if (--mbp->rdptr < mbp->buffer) {
 800aa86:	68e3      	ldr	r3, [r4, #12]
 800aa88:	3b04      	subs	r3, #4
 800aa8a:	60e3      	str	r3, [r4, #12]
 800aa8c:	6822      	ldr	r2, [r4, #0]
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d202      	bcs.n	800aa98 <chMBPostAheadI+0x38>
      mbp->rdptr = mbp->top - 1;
 800aa92:	6863      	ldr	r3, [r4, #4]
 800aa94:	3b04      	subs	r3, #4
 800aa96:	60e3      	str	r3, [r4, #12]
    }
    *mbp->rdptr = msg;
 800aa98:	68e3      	ldr	r3, [r4, #12]
 800aa9a:	601e      	str	r6, [r3, #0]
    mbp->cnt++;
 800aa9c:	6923      	ldr	r3, [r4, #16]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	6123      	str	r3, [r4, #16]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	f104 0020 	add.w	r0, r4, #32
 800aaa8:	f7fe f9ba 	bl	8008e20 <chThdDequeueNextI>

    return MSG_OK;
 800aaac:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 800aaae:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);
 800aab0:	4804      	ldr	r0, [pc, #16]	; (800aac4 <chMBPostAheadI+0x64>)
 800aab2:	f7fc fe25 	bl	8007700 <chSysHalt>
 800aab6:	e7d9      	b.n	800aa6c <chMBPostAheadI+0xc>
    return MSG_RESET;
 800aab8:	f06f 0001 	mvn.w	r0, #1
 800aabc:	e7f7      	b.n	800aaae <chMBPostAheadI+0x4e>
  return MSG_TIMEOUT;
 800aabe:	f04f 30ff 	mov.w	r0, #4294967295
 800aac2:	e7f4      	b.n	800aaae <chMBPostAheadI+0x4e>
 800aac4:	08019bfc 	.word	0x08019bfc
 800aac8:	f3af 8000 	nop.w
 800aacc:	f3af 8000 	nop.w

0800aad0 <chMBFetchTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	4604      	mov	r4, r0
 800aad4:	460d      	mov	r5, r1
 800aad6:	4616      	mov	r6, r2
 800aad8:	461f      	mov	r7, r3
  msg_t rdymsg;

  chDbgCheckClassS();
 800aada:	f7fd f859 	bl	8007b90 <chDbgCheckClassS>
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 800aade:	b184      	cbz	r4, 800ab02 <chMBFetchTimeoutS+0x32>
 800aae0:	b17d      	cbz	r5, 800ab02 <chMBFetchTimeoutS+0x32>

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 800aae2:	7d23      	ldrb	r3, [r4, #20]
 800aae4:	bb43      	cbnz	r3, 800ab38 <chMBFetchTimeoutS+0x68>
  chDbgCheckClassI();
 800aae6:	f7fd f83b 	bl	8007b60 <chDbgCheckClassI>
  return mbp->cnt;
 800aaea:	6923      	ldr	r3, [r4, #16]
      return MSG_RESET;
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800aaec:	b96b      	cbnz	r3, 800ab0a <chMBFetchTimeoutS+0x3a>

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800aaee:	4632      	mov	r2, r6
 800aaf0:	463b      	mov	r3, r7
 800aaf2:	f104 0020 	add.w	r0, r4, #32
 800aaf6:	f7fe f97b 	bl	8008df0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800aafa:	4603      	mov	r3, r0
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d0f0      	beq.n	800aae2 <chMBFetchTimeoutS+0x12>
 800ab00:	e01c      	b.n	800ab3c <chMBFetchTimeoutS+0x6c>
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 800ab02:	480f      	ldr	r0, [pc, #60]	; (800ab40 <chMBFetchTimeoutS+0x70>)
 800ab04:	f7fc fdfc 	bl	8007700 <chSysHalt>
 800ab08:	e7eb      	b.n	800aae2 <chMBFetchTimeoutS+0x12>
      *msgp = *mbp->rdptr++;
 800ab0a:	68e3      	ldr	r3, [r4, #12]
 800ab0c:	1d1a      	adds	r2, r3, #4
 800ab0e:	60e2      	str	r2, [r4, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	602b      	str	r3, [r5, #0]
      if (mbp->rdptr >= mbp->top) {
 800ab14:	68e2      	ldr	r2, [r4, #12]
 800ab16:	6863      	ldr	r3, [r4, #4]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d301      	bcc.n	800ab20 <chMBFetchTimeoutS+0x50>
        mbp->rdptr = mbp->buffer;
 800ab1c:	6823      	ldr	r3, [r4, #0]
 800ab1e:	60e3      	str	r3, [r4, #12]
      mbp->cnt--;
 800ab20:	6923      	ldr	r3, [r4, #16]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 800ab26:	2100      	movs	r1, #0
 800ab28:	f104 0018 	add.w	r0, r4, #24
 800ab2c:	f7fe f978 	bl	8008e20 <chThdDequeueNextI>
      chSchRescheduleS();
 800ab30:	f7fd fcae 	bl	8008490 <chSchRescheduleS>
      return MSG_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	e001      	b.n	800ab3c <chMBFetchTimeoutS+0x6c>
      return MSG_RESET;
 800ab38:	f06f 0301 	mvn.w	r3, #1

  return rdymsg;
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab40:	08019c0c 	.word	0x08019c0c
 800ab44:	f3af 8000 	nop.w
 800ab48:	f3af 8000 	nop.w
 800ab4c:	f3af 8000 	nop.w

0800ab50 <chMBFetchTimeout>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 800ab50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab52:	4604      	mov	r4, r0
 800ab54:	460d      	mov	r5, r1
 800ab56:	4616      	mov	r6, r2
 800ab58:	461f      	mov	r7, r3
 800ab5a:	2320      	movs	r3, #32
 800ab5c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800ab60:	f7fe fa5e 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800ab64:	f7fc ff5c 	bl	8007a20 <_dbg_check_lock>
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 800ab68:	4632      	mov	r2, r6
 800ab6a:	463b      	mov	r3, r7
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f7ff ffae 	bl	800aad0 <chMBFetchTimeoutS>
 800ab74:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800ab76:	f7fc ff6b 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800ab7a:	f7fe fa59 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800ab7e:	4b09      	ldr	r3, [pc, #36]	; (800aba4 <chMBFetchTimeout+0x54>)
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d004      	beq.n	800ab90 <chMBFetchTimeout+0x40>
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	6899      	ldr	r1, [r3, #8]
 800ab8a:	6893      	ldr	r3, [r2, #8]
 800ab8c:	4299      	cmp	r1, r3
 800ab8e:	d304      	bcc.n	800ab9a <chMBFetchTimeout+0x4a>
 800ab90:	2300      	movs	r3, #0
 800ab92:	f383 8811 	msr	BASEPRI, r3
}
 800ab96:	4620      	mov	r0, r4
 800ab98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab9a:	4803      	ldr	r0, [pc, #12]	; (800aba8 <chMBFetchTimeout+0x58>)
 800ab9c:	f7fc fdb0 	bl	8007700 <chSysHalt>
 800aba0:	e7f6      	b.n	800ab90 <chMBFetchTimeout+0x40>
 800aba2:	bf00      	nop
 800aba4:	200050f8 	.word	0x200050f8
 800aba8:	08019bb8 	.word	0x08019bb8
 800abac:	f3af 8000 	nop.w

0800abb0 <chMBFetchI>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 800abb0:	b538      	push	{r3, r4, r5, lr}
 800abb2:	4604      	mov	r4, r0
 800abb4:	460d      	mov	r5, r1

  chDbgCheckClassI();
 800abb6:	f7fc ffd3 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 800abba:	b1dc      	cbz	r4, 800abf4 <chMBFetchI+0x44>
 800abbc:	b1d5      	cbz	r5, 800abf4 <chMBFetchI+0x44>

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 800abbe:	7d23      	ldrb	r3, [r4, #20]
 800abc0:	b9e3      	cbnz	r3, 800abfc <chMBFetchI+0x4c>
  chDbgCheckClassI();
 800abc2:	f7fc ffcd 	bl	8007b60 <chDbgCheckClassI>
  return mbp->cnt;
 800abc6:	6923      	ldr	r3, [r4, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800abc8:	b1db      	cbz	r3, 800ac02 <chMBFetchI+0x52>
    *msgp = *mbp->rdptr++;
 800abca:	68e3      	ldr	r3, [r4, #12]
 800abcc:	1d1a      	adds	r2, r3, #4
 800abce:	60e2      	str	r2, [r4, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	602b      	str	r3, [r5, #0]
    if (mbp->rdptr >= mbp->top) {
 800abd4:	68e2      	ldr	r2, [r4, #12]
 800abd6:	6863      	ldr	r3, [r4, #4]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d301      	bcc.n	800abe0 <chMBFetchI+0x30>
      mbp->rdptr = mbp->buffer;
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	60e3      	str	r3, [r4, #12]
    }
    mbp->cnt--;
 800abe0:	6923      	ldr	r3, [r4, #16]
 800abe2:	3b01      	subs	r3, #1
 800abe4:	6123      	str	r3, [r4, #16]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 800abe6:	2100      	movs	r1, #0
 800abe8:	f104 0018 	add.w	r0, r4, #24
 800abec:	f7fe f918 	bl	8008e20 <chThdDequeueNextI>

    return MSG_OK;
 800abf0:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 800abf4:	4804      	ldr	r0, [pc, #16]	; (800ac08 <chMBFetchI+0x58>)
 800abf6:	f7fc fd83 	bl	8007700 <chSysHalt>
 800abfa:	e7e0      	b.n	800abbe <chMBFetchI+0xe>
    return MSG_RESET;
 800abfc:	f06f 0001 	mvn.w	r0, #1
 800ac00:	e7f7      	b.n	800abf2 <chMBFetchI+0x42>
  return MSG_TIMEOUT;
 800ac02:	f04f 30ff 	mov.w	r0, #4294967295
 800ac06:	e7f4      	b.n	800abf2 <chMBFetchI+0x42>
 800ac08:	08019c20 	.word	0x08019c20
 800ac0c:	00000000 	.word	0x00000000

0800ac10 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 800ac10:	4b02      	ldr	r3, [pc, #8]	; (800ac1c <_core_init+0xc>)
 800ac12:	4a03      	ldr	r2, [pc, #12]	; (800ac20 <_core_init+0x10>)
 800ac14:	601a      	str	r2, [r3, #0]
  ch_memcore.endmem  = __heap_end__;
 800ac16:	4a03      	ldr	r2, [pc, #12]	; (800ac24 <_core_init+0x14>)
 800ac18:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.nextmem = &static_heap[0];
  ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 800ac1a:	4770      	bx	lr
 800ac1c:	200059e8 	.word	0x200059e8
 800ac20:	20010310 	.word	0x20010310
 800ac24:	20020000 	.word	0x20020000
 800ac28:	f3af 8000 	nop.w
 800ac2c:	f3af 8000 	nop.w

0800ac30 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 800ac30:	b570      	push	{r4, r5, r6, lr}
 800ac32:	4604      	mov	r4, r0
 800ac34:	460e      	mov	r6, r1
 800ac36:	4615      	mov	r5, r2
  uint8_t *p, *next;

  chDbgCheckClassI();
 800ac38:	f7fc ff92 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800ac3c:	b116      	cbz	r6, 800ac44 <chCoreAllocAlignedWithOffsetI+0x14>
 800ac3e:	1e73      	subs	r3, r6, #1
 800ac40:	4233      	tst	r3, r6
 800ac42:	d002      	beq.n	800ac4a <chCoreAllocAlignedWithOffsetI+0x1a>
 800ac44:	480c      	ldr	r0, [pc, #48]	; (800ac78 <chCoreAllocAlignedWithOffsetI+0x48>)
 800ac46:	f7fc fd5b 	bl	8007700 <chSysHalt>

  size = MEM_ALIGN_NEXT(size, align);
 800ac4a:	1933      	adds	r3, r6, r4
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	4272      	negs	r2, r6
 800ac50:	4013      	ands	r3, r2
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800ac52:	490a      	ldr	r1, [pc, #40]	; (800ac7c <chCoreAllocAlignedWithOffsetI+0x4c>)
 800ac54:	680c      	ldr	r4, [r1, #0]
 800ac56:	1960      	adds	r0, r4, r5
 800ac58:	4430      	add	r0, r6
 800ac5a:	3801      	subs	r0, #1
 800ac5c:	4010      	ands	r0, r2
  next = p + size;
 800ac5e:	4403      	add	r3, r0

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800ac60:	684a      	ldr	r2, [r1, #4]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d303      	bcc.n	800ac6e <chCoreAllocAlignedWithOffsetI+0x3e>
 800ac66:	429c      	cmp	r4, r3
 800ac68:	d803      	bhi.n	800ac72 <chCoreAllocAlignedWithOffsetI+0x42>
    return NULL;
  }

  ch_memcore.nextmem = next;
 800ac6a:	600b      	str	r3, [r1, #0]

  return p;
}
 800ac6c:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800ac6e:	2000      	movs	r0, #0
 800ac70:	e7fc      	b.n	800ac6c <chCoreAllocAlignedWithOffsetI+0x3c>
 800ac72:	2000      	movs	r0, #0
 800ac74:	e7fa      	b.n	800ac6c <chCoreAllocAlignedWithOffsetI+0x3c>
 800ac76:	bf00      	nop
 800ac78:	08019c2c 	.word	0x08019c2c
 800ac7c:	200059e8 	.word	0x200059e8

0800ac80 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 800ac80:	b570      	push	{r4, r5, r6, lr}
 800ac82:	4604      	mov	r4, r0
 800ac84:	460d      	mov	r5, r1
 800ac86:	4616      	mov	r6, r2
 800ac88:	2320      	movs	r3, #32
 800ac8a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800ac8e:	f7fe f9c7 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800ac92:	f7fc fec5 	bl	8007a20 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 800ac96:	4632      	mov	r2, r6
 800ac98:	4629      	mov	r1, r5
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f7ff ffc8 	bl	800ac30 <chCoreAllocAlignedWithOffsetI>
 800aca0:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800aca2:	f7fc fed5 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800aca6:	f7fe f9c3 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800acaa:	4b09      	ldr	r3, [pc, #36]	; (800acd0 <chCoreAllocAlignedWithOffset+0x50>)
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d004      	beq.n	800acbc <chCoreAllocAlignedWithOffset+0x3c>
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	6899      	ldr	r1, [r3, #8]
 800acb6:	6893      	ldr	r3, [r2, #8]
 800acb8:	4299      	cmp	r1, r3
 800acba:	d304      	bcc.n	800acc6 <chCoreAllocAlignedWithOffset+0x46>
 800acbc:	2300      	movs	r3, #0
 800acbe:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 800acc2:	4620      	mov	r0, r4
 800acc4:	bd70      	pop	{r4, r5, r6, pc}
 800acc6:	4803      	ldr	r0, [pc, #12]	; (800acd4 <chCoreAllocAlignedWithOffset+0x54>)
 800acc8:	f7fc fd1a 	bl	8007700 <chSysHalt>
 800accc:	e7f6      	b.n	800acbc <chCoreAllocAlignedWithOffset+0x3c>
 800acce:	bf00      	nop
 800acd0:	200050f8 	.word	0x200050f8
 800acd4:	08019c4c 	.word	0x08019c4c
 800acd8:	f3af 8000 	nop.w
 800acdc:	f3af 8000 	nop.w

0800ace0 <chCoreGetStatusX>:
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.endmem - ch_memcore.nextmem);
 800ace0:	4b02      	ldr	r3, [pc, #8]	; (800acec <chCoreGetStatusX+0xc>)
 800ace2:	6858      	ldr	r0, [r3, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
  /*lint -restore*/
}
 800ace6:	1ac0      	subs	r0, r0, r3
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	200059e8 	.word	0x200059e8

0800acf0 <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
 800acf0:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
 800acf2:	4805      	ldr	r0, [pc, #20]	; (800ad08 <_heap_init+0x18>)
 800acf4:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <_heap_init+0x1c>)
 800acf6:	6003      	str	r3, [r0, #0]
  H_NEXT(&default_heap.header) = NULL;
 800acf8:	2300      	movs	r3, #0
 800acfa:	6043      	str	r3, [r0, #4]
  H_PAGES(&default_heap.header) = 0;
 800acfc:	6083      	str	r3, [r0, #8]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 800acfe:	300c      	adds	r0, #12
 800ad00:	f7fe fc96 	bl	8009630 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 800ad04:	bd08      	pop	{r3, pc}
 800ad06:	bf00      	nop
 800ad08:	200022ac 	.word	0x200022ac
 800ad0c:	0800ac81 	.word	0x0800ac81

0800ad10 <chHeapObjectInit>:
 * @param[in] buf       heap buffer base
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
 800ad10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad12:	460f      	mov	r7, r1
 800ad14:	4614      	mov	r4, r2
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 800ad16:	1dcd      	adds	r5, r1, #7
 800ad18:	f025 0507 	bic.w	r5, r5, #7

  chDbgCheck((heapp != NULL) && (size > 0U));
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	b100      	cbz	r0, 800ad22 <chHeapObjectInit+0x12>
 800ad20:	b912      	cbnz	r2, 800ad28 <chHeapObjectInit+0x18>
 800ad22:	4809      	ldr	r0, [pc, #36]	; (800ad48 <chHeapObjectInit+0x38>)
 800ad24:	f7fc fcec 	bl	8007700 <chSysHalt>

  /* Adjusting the size in case the initial block was not correctly
     aligned.*/
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800ad28:	1bef      	subs	r7, r5, r7
 800ad2a:	1be4      	subs	r4, r4, r7
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	6033      	str	r3, [r6, #0]
  H_NEXT(&heapp->header) = hp;
 800ad30:	6075      	str	r5, [r6, #4]
  H_PAGES(&heapp->header) = 0;
 800ad32:	60b3      	str	r3, [r6, #8]
  H_NEXT(hp) = NULL;
 800ad34:	602b      	str	r3, [r5, #0]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800ad36:	3c08      	subs	r4, #8
 800ad38:	08e4      	lsrs	r4, r4, #3
 800ad3a:	606c      	str	r4, [r5, #4]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&heapp->mtx);
 800ad3c:	f106 000c 	add.w	r0, r6, #12
 800ad40:	f7fe fc76 	bl	8009630 <chMtxObjectInit>
#else
  chSemObjectInit(&heapp->sem, (cnt_t)1);
#endif
}
 800ad44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad46:	bf00      	nop
 800ad48:	08019c58 	.word	0x08019c58
 800ad4c:	f3af 8000 	nop.w

0800ad50 <chHeapAllocAligned>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 800ad50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad54:	4606      	mov	r6, r0
 800ad56:	4614      	mov	r4, r2
  heap_header_t *qp, *hp, *ahp;
  size_t pages;

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));
 800ad58:	4688      	mov	r8, r1
 800ad5a:	b119      	cbz	r1, 800ad64 <chHeapAllocAligned+0x14>
 800ad5c:	b112      	cbz	r2, 800ad64 <chHeapAllocAligned+0x14>
 800ad5e:	1e53      	subs	r3, r2, #1
 800ad60:	4213      	tst	r3, r2
 800ad62:	d002      	beq.n	800ad6a <chHeapAllocAligned+0x1a>
 800ad64:	483e      	ldr	r0, [pc, #248]	; (800ae60 <chHeapAllocAligned+0x110>)
 800ad66:	f7fc fccb 	bl	8007700 <chSysHalt>

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
 800ad6a:	b16e      	cbz	r6, 800ad88 <chHeapAllocAligned+0x38>
    heapp = &default_heap;
  }

  /* Minimum alignment is constrained by the heap header structure size.*/
  if (align < CH_HEAP_ALIGNMENT) {
 800ad6c:	2c07      	cmp	r4, #7
 800ad6e:	d800      	bhi.n	800ad72 <chHeapAllocAligned+0x22>
    align = CH_HEAP_ALIGNMENT;
 800ad70:	2408      	movs	r4, #8
  }

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800ad72:	f108 0507 	add.w	r5, r8, #7
 800ad76:	08ed      	lsrs	r5, r5, #3

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 800ad78:	f106 070c 	add.w	r7, r6, #12
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	f7fe fce7 	bl	8009750 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 800ad82:	f106 0c04 	add.w	ip, r6, #4
  while (H_NEXT(qp) != NULL) {
 800ad86:	e037      	b.n	800adf8 <chHeapAllocAligned+0xa8>
    heapp = &default_heap;
 800ad88:	4e36      	ldr	r6, [pc, #216]	; (800ae64 <chHeapAllocAligned+0x114>)
 800ad8a:	e7ef      	b.n	800ad6c <chHeapAllocAligned+0x1c>

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
      /* The block is large enough to contain a correctly aligned area
         of sufficient size.*/

      if (ahp > hp) {
 800ad8c:	4299      	cmp	r1, r3
 800ad8e:	d211      	bcs.n	800adb4 <chHeapAllocAligned+0x64>
        /* The block is not properly aligned, must split it.*/
        size_t bpages;

        bpages = NPAGES(H_LIMIT(hp), H_BLOCK(ahp));
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800ad90:	eba3 030e 	sub.w	r3, r3, lr
 800ad94:	10db      	asrs	r3, r3, #3
 800ad96:	604b      	str	r3, [r1, #4]
        if (bpages > pages) {
 800ad98:	42aa      	cmp	r2, r5
 800ad9a:	d91f      	bls.n	800addc <chHeapAllocAligned+0x8c>
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          /* Creating the excess block.*/
          fp = H_BLOCK(ahp) + pages;
 800ad9c:	1c68      	adds	r0, r5, #1
 800ad9e:	eb09 02c0 	add.w	r2, r9, r0, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 800ada2:	ebaa 0305 	sub.w	r3, sl, r5
 800ada6:	3b01      	subs	r3, #1
 800ada8:	6053      	str	r3, [r2, #4]

          /* Linking the excess block.*/
          H_NEXT(fp) = H_NEXT(hp);
 800adaa:	680b      	ldr	r3, [r1, #0]
 800adac:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
          H_NEXT(hp) = fp;
 800adb0:	600a      	str	r2, [r1, #0]
 800adb2:	e013      	b.n	800addc <chHeapAllocAligned+0x8c>
        hp = ahp;
      }
      else {
        /* The block is already properly aligned.*/

        if (H_PAGES(hp) == pages) {
 800adb4:	42a8      	cmp	r0, r5
 800adb6:	d019      	beq.n	800adec <chHeapAllocAligned+0x9c>
        }
        else {
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
 800adb8:	3501      	adds	r5, #1
 800adba:	eb01 02c5 	add.w	r2, r1, r5, lsl #3
          H_NEXT(fp) = H_NEXT(hp);
 800adbe:	680b      	ldr	r3, [r1, #0]
 800adc0:	f841 3035 	str.w	r3, [r1, r5, lsl #3]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 800adc4:	684b      	ldr	r3, [r1, #4]
 800adc6:	3301      	adds	r3, #1
 800adc8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800adcc:	f102 0008 	add.w	r0, r2, #8
 800add0:	1a1b      	subs	r3, r3, r0
 800add2:	10db      	asrs	r3, r3, #3
 800add4:	6053      	str	r3, [r2, #4]
          H_NEXT(qp) = fp;
 800add6:	f8cc 2000 	str.w	r2, [ip]
    hp = H_NEXT(qp);
 800adda:	4689      	mov	r9, r1
        }
      }

      /* Setting in the block owner heap and size.*/
      H_SIZE(hp) = size;
 800addc:	f8c9 8004 	str.w	r8, [r9, #4]
      H_HEAP(hp) = heapp;
 800ade0:	f849 6b08 	str.w	r6, [r9], #8

      /* Releasing heap mutex/semaphore.*/
      H_UNLOCK(heapp);
 800ade4:	4638      	mov	r0, r7
 800ade6:	f7fe fd23 	bl	8009830 <chMtxUnlock>

      /*lint -save -e9087 [11.3] Safe cast.*/
      return (void *)H_BLOCK(hp);
 800adea:	e030      	b.n	800ae4e <chHeapAllocAligned+0xfe>
          H_NEXT(qp) = H_NEXT(hp);
 800adec:	680b      	ldr	r3, [r1, #0]
 800adee:	f8cc 3000 	str.w	r3, [ip]
    hp = H_NEXT(qp);
 800adf2:	4689      	mov	r9, r1
 800adf4:	e7f2      	b.n	800addc <chHeapAllocAligned+0x8c>
 800adf6:	468c      	mov	ip, r1
  while (H_NEXT(qp) != NULL) {
 800adf8:	f8dc 1000 	ldr.w	r1, [ip]
 800adfc:	b1c1      	cbz	r1, 800ae30 <chHeapAllocAligned+0xe0>
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800adfe:	f101 0e08 	add.w	lr, r1, #8
 800ae02:	eb0e 0304 	add.w	r3, lr, r4
 800ae06:	3b01      	subs	r3, #1
 800ae08:	4262      	negs	r2, r4
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	3b08      	subs	r3, #8
 800ae0e:	4699      	mov	r9, r3
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800ae10:	6848      	ldr	r0, [r1, #4]
 800ae12:	1c42      	adds	r2, r0, #1
 800ae14:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d9ec      	bls.n	800adf6 <chHeapAllocAligned+0xa6>
 800ae1c:	f103 0a08 	add.w	sl, r3, #8
 800ae20:	eba2 020a 	sub.w	r2, r2, sl
 800ae24:	10d2      	asrs	r2, r2, #3
 800ae26:	4692      	mov	sl, r2
 800ae28:	42aa      	cmp	r2, r5
 800ae2a:	d2af      	bcs.n	800ad8c <chHeapAllocAligned+0x3c>
 800ae2c:	468c      	mov	ip, r1
 800ae2e:	e7e3      	b.n	800adf8 <chHeapAllocAligned+0xa8>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 800ae30:	4638      	mov	r0, r7
 800ae32:	f7fe fcfd 	bl	8009830 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 800ae36:	6833      	ldr	r3, [r6, #0]
 800ae38:	b163      	cbz	r3, 800ae54 <chHeapAllocAligned+0x104>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 800ae3a:	2208      	movs	r2, #8
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	00e8      	lsls	r0, r5, #3
 800ae40:	4798      	blx	r3
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 800ae42:	4681      	mov	r9, r0
 800ae44:	b148      	cbz	r0, 800ae5a <chHeapAllocAligned+0x10a>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
 800ae46:	f840 6c08 	str.w	r6, [r0, #-8]
      H_SIZE(hp) = size;
 800ae4a:	f840 8c04 	str.w	r8, [r0, #-4]
      /*lint -restore*/
    }
  }

  return NULL;
}
 800ae4e:	4648      	mov	r0, r9
 800ae50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return NULL;
 800ae54:	f04f 0900 	mov.w	r9, #0
 800ae58:	e7f9      	b.n	800ae4e <chHeapAllocAligned+0xfe>
 800ae5a:	f04f 0900 	mov.w	r9, #0
 800ae5e:	e7f6      	b.n	800ae4e <chHeapAllocAligned+0xfe>
 800ae60:	08019c6c 	.word	0x08019c6c
 800ae64:	200022ac 	.word	0x200022ac
 800ae68:	f3af 8000 	nop.w
 800ae6c:	f3af 8000 	nop.w

0800ae70 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 800ae70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 800ae74:	4607      	mov	r7, r0
 800ae76:	b110      	cbz	r0, 800ae7e <chHeapFree+0xe>
 800ae78:	f010 0f07 	tst.w	r0, #7
 800ae7c:	d002      	beq.n	800ae84 <chHeapFree+0x14>
 800ae7e:	4829      	ldr	r0, [pc, #164]	; (800af24 <chHeapFree+0xb4>)
 800ae80:	f7fc fc3e 	bl	8007700 <chSysHalt>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
 800ae84:	f1a7 0508 	sub.w	r5, r7, #8
  /*lint -restore*/
  heapp = H_HEAP(hp);
 800ae88:	f857 2c08 	ldr.w	r2, [r7, #-8]
  qp = &heapp->header;
 800ae8c:	1d16      	adds	r6, r2, #4

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800ae8e:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800ae92:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800ae94:	08db      	lsrs	r3, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800ae96:	f847 3c04 	str.w	r3, [r7, #-4]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 800ae9a:	f102 080c 	add.w	r8, r2, #12
 800ae9e:	4640      	mov	r0, r8
 800aea0:	f7fe fc56 	bl	8009750 <chMtxLock>
  qp = &heapp->header;
 800aea4:	4634      	mov	r4, r6
 800aea6:	e008      	b.n	800aeba <chHeapFree+0x4a>

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 800aea8:	42b4      	cmp	r4, r6
 800aeaa:	d001      	beq.n	800aeb0 <chHeapFree+0x40>
 800aeac:	42ac      	cmp	r4, r5
 800aeae:	d203      	bcs.n	800aeb8 <chHeapFree+0x48>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800aeb0:	6823      	ldr	r3, [r4, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 800aeb2:	b173      	cbz	r3, 800aed2 <chHeapFree+0x62>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800aeb4:	42ab      	cmp	r3, r5
 800aeb6:	d80c      	bhi.n	800aed2 <chHeapFree+0x62>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 800aeb8:	6824      	ldr	r4, [r4, #0]
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 800aeba:	42ac      	cmp	r4, r5
 800aebc:	d8f4      	bhi.n	800aea8 <chHeapFree+0x38>
 800aebe:	6863      	ldr	r3, [r4, #4]
 800aec0:	3301      	adds	r3, #1
 800aec2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800aec6:	42ab      	cmp	r3, r5
 800aec8:	d9ee      	bls.n	800aea8 <chHeapFree+0x38>
 800aeca:	4816      	ldr	r0, [pc, #88]	; (800af24 <chHeapFree+0xb4>)
 800aecc:	f7fc fc18 	bl	8007700 <chSysHalt>
 800aed0:	e7ea      	b.n	800aea8 <chHeapFree+0x38>
      H_NEXT(hp) = H_NEXT(qp);
 800aed2:	f847 3c08 	str.w	r3, [r7, #-8]
      H_NEXT(qp) = hp;
 800aed6:	6025      	str	r5, [r4, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800aed8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800aedc:	1c53      	adds	r3, r2, #1
 800aede:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800aee2:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800aee6:	428b      	cmp	r3, r1
 800aee8:	d00a      	beq.n	800af00 <chHeapFree+0x90>
      if ((H_LIMIT(qp) == hp)) {
 800aeea:	6862      	ldr	r2, [r4, #4]
 800aeec:	1c53      	adds	r3, r2, #1
 800aeee:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800aef2:	42ab      	cmp	r3, r5
 800aef4:	d00d      	beq.n	800af12 <chHeapFree+0xa2>
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 800aef6:	4640      	mov	r0, r8
 800aef8:	f7fe fc9a 	bl	8009830 <chMtxUnlock>

  return;
}
 800aefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 800af00:	684b      	ldr	r3, [r1, #4]
 800af02:	441a      	add	r2, r3
 800af04:	3201      	adds	r2, #1
 800af06:	f847 2c04 	str.w	r2, [r7, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800af0a:	680b      	ldr	r3, [r1, #0]
 800af0c:	f847 3c08 	str.w	r3, [r7, #-8]
 800af10:	e7eb      	b.n	800aeea <chHeapFree+0x7a>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 800af12:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800af16:	441a      	add	r2, r3
 800af18:	3201      	adds	r2, #1
 800af1a:	6062      	str	r2, [r4, #4]
        H_NEXT(qp) = H_NEXT(hp);
 800af1c:	f857 3c08 	ldr.w	r3, [r7, #-8]
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	e7e8      	b.n	800aef6 <chHeapFree+0x86>
 800af24:	08019c80 	.word	0x08019c80
 800af28:	f3af 8000 	nop.w
 800af2c:	f3af 8000 	nop.w

0800af30 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 800af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af32:	460f      	mov	r7, r1
 800af34:	4616      	mov	r6, r2
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
 800af36:	4604      	mov	r4, r0
 800af38:	b188      	cbz	r0, 800af5e <chHeapStatus+0x2e>
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 800af3a:	f104 050c 	add.w	r5, r4, #12
 800af3e:	4628      	mov	r0, r5
 800af40:	f7fe fc06 	bl	8009750 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
 800af44:	1d20      	adds	r0, r4, #4
  lpages = 0U;
 800af46:	2100      	movs	r1, #0
  tpages = 0U;
 800af48:	460a      	mov	r2, r1
  n = 0U;
 800af4a:	460c      	mov	r4, r1
  while (H_NEXT(qp) != NULL) {
 800af4c:	6800      	ldr	r0, [r0, #0]
 800af4e:	b140      	cbz	r0, 800af62 <chHeapStatus+0x32>
    size_t pages = H_PAGES(H_NEXT(qp));
 800af50:	6843      	ldr	r3, [r0, #4]

    /* Updating counters.*/
    n++;
 800af52:	3401      	adds	r4, #1
    tpages += pages;
 800af54:	441a      	add	r2, r3
    if (pages > lpages) {
 800af56:	4299      	cmp	r1, r3
 800af58:	d2f8      	bcs.n	800af4c <chHeapStatus+0x1c>
      lpages = pages;
 800af5a:	4619      	mov	r1, r3
 800af5c:	e7f6      	b.n	800af4c <chHeapStatus+0x1c>
    heapp = &default_heap;
 800af5e:	4c06      	ldr	r4, [pc, #24]	; (800af78 <chHeapStatus+0x48>)
 800af60:	e7eb      	b.n	800af3a <chHeapStatus+0xa>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 800af62:	b10f      	cbz	r7, 800af68 <chHeapStatus+0x38>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800af64:	00d2      	lsls	r2, r2, #3
 800af66:	603a      	str	r2, [r7, #0]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 800af68:	b10e      	cbz	r6, 800af6e <chHeapStatus+0x3e>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 800af6a:	00c9      	lsls	r1, r1, #3
 800af6c:	6031      	str	r1, [r6, #0]
  }
  H_UNLOCK(heapp);
 800af6e:	4628      	mov	r0, r5
 800af70:	f7fe fc5e 	bl	8009830 <chMtxUnlock>

  return n;
}
 800af74:	4620      	mov	r0, r4
 800af76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af78:	200022ac 	.word	0x200022ac
 800af7c:	00000000 	.word	0x00000000

0800af80 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 800af80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af82:	460d      	mov	r5, r1
 800af84:	4616      	mov	r6, r2
 800af86:	461f      	mov	r7, r3

  chDbgCheck((mp != NULL) &&
 800af88:	4604      	mov	r4, r0
 800af8a:	b138      	cbz	r0, 800af9c <chPoolObjectInitAligned+0x1c>
 800af8c:	2903      	cmp	r1, #3
 800af8e:	d905      	bls.n	800af9c <chPoolObjectInitAligned+0x1c>
 800af90:	2a03      	cmp	r2, #3
 800af92:	d903      	bls.n	800af9c <chPoolObjectInitAligned+0x1c>
 800af94:	b112      	cbz	r2, 800af9c <chPoolObjectInitAligned+0x1c>
 800af96:	1e53      	subs	r3, r2, #1
 800af98:	4213      	tst	r3, r2
 800af9a:	d002      	beq.n	800afa2 <chPoolObjectInitAligned+0x22>
 800af9c:	4804      	ldr	r0, [pc, #16]	; (800afb0 <chPoolObjectInitAligned+0x30>)
 800af9e:	f7fc fbaf 	bl	8007700 <chSysHalt>
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	6023      	str	r3, [r4, #0]
  mp->object_size = size;
 800afa6:	6065      	str	r5, [r4, #4]
  mp->align = align;
 800afa8:	60a6      	str	r6, [r4, #8]
  mp->provider = provider;
 800afaa:	60e7      	str	r7, [r4, #12]
}
 800afac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afae:	bf00      	nop
 800afb0:	08019c8c 	.word	0x08019c8c
 800afb4:	f3af 8000 	nop.w
 800afb8:	f3af 8000 	nop.w
 800afbc:	f3af 8000 	nop.w

0800afc0 <chPoolAllocI>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @iclass
 */
void *chPoolAllocI(memory_pool_t *mp) {
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4604      	mov	r4, r0
  void *objp;

  chDbgCheckClassI();
 800afc4:	f7fc fdcc 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck(mp != NULL);
 800afc8:	b12c      	cbz	r4, 800afd6 <chPoolAllocI+0x16>

  objp = mp->next;
 800afca:	6825      	ldr	r5, [r4, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 800afcc:	b13d      	cbz	r5, 800afde <chPoolAllocI+0x1e>
    mp->next = mp->next->next;
 800afce:	682b      	ldr	r3, [r5, #0]
 800afd0:	6023      	str	r3, [r4, #0]
                "returned object not aligned");
  }
  /*lint -restore*/

  return objp;
}
 800afd2:	4628      	mov	r0, r5
 800afd4:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(mp != NULL);
 800afd6:	4809      	ldr	r0, [pc, #36]	; (800affc <chPoolAllocI+0x3c>)
 800afd8:	f7fc fb92 	bl	8007700 <chSysHalt>
 800afdc:	e7f5      	b.n	800afca <chPoolAllocI+0xa>
  else if (mp->provider != NULL) {
 800afde:	68e3      	ldr	r3, [r4, #12]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d0f6      	beq.n	800afd2 <chPoolAllocI+0x12>
    objp = mp->provider(mp->object_size, mp->align);
 800afe4:	68a1      	ldr	r1, [r4, #8]
 800afe6:	6860      	ldr	r0, [r4, #4]
 800afe8:	4798      	blx	r3
 800afea:	4605      	mov	r5, r0
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 800afec:	68a3      	ldr	r3, [r4, #8]
 800afee:	3b01      	subs	r3, #1
 800aff0:	4218      	tst	r0, r3
 800aff2:	d0ee      	beq.n	800afd2 <chPoolAllocI+0x12>
 800aff4:	4801      	ldr	r0, [pc, #4]	; (800affc <chPoolAllocI+0x3c>)
 800aff6:	f7fc fb83 	bl	8007700 <chSysHalt>
  return objp;
 800affa:	e7ea      	b.n	800afd2 <chPoolAllocI+0x12>
 800affc:	08019ca4 	.word	0x08019ca4

0800b000 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 800b000:	b510      	push	{r4, lr}
 800b002:	4604      	mov	r4, r0
 800b004:	2320      	movs	r3, #32
 800b006:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800b00a:	f7fe f809 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800b00e:	f7fc fd07 	bl	8007a20 <_dbg_check_lock>
  void *objp;

  chSysLock();
  objp = chPoolAllocI(mp);
 800b012:	4620      	mov	r0, r4
 800b014:	f7ff ffd4 	bl	800afc0 <chPoolAllocI>
 800b018:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800b01a:	f7fc fd19 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800b01e:	f7fe f807 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800b022:	4b09      	ldr	r3, [pc, #36]	; (800b048 <chPoolAlloc+0x48>)
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	429a      	cmp	r2, r3
 800b028:	d004      	beq.n	800b034 <chPoolAlloc+0x34>
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	6899      	ldr	r1, [r3, #8]
 800b02e:	6893      	ldr	r3, [r2, #8]
 800b030:	4299      	cmp	r1, r3
 800b032:	d304      	bcc.n	800b03e <chPoolAlloc+0x3e>
 800b034:	2300      	movs	r3, #0
 800b036:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return objp;
}
 800b03a:	4620      	mov	r0, r4
 800b03c:	bd10      	pop	{r4, pc}
 800b03e:	4803      	ldr	r0, [pc, #12]	; (800b04c <chPoolAlloc+0x4c>)
 800b040:	f7fc fb5e 	bl	8007700 <chSysHalt>
 800b044:	e7f6      	b.n	800b034 <chPoolAlloc+0x34>
 800b046:	bf00      	nop
 800b048:	200050f8 	.word	0x200050f8
 800b04c:	08019cb4 	.word	0x08019cb4

0800b050 <chPoolFreeI>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4604      	mov	r4, r0
 800b054:	460d      	mov	r5, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
 800b056:	f7fc fd83 	bl	8007b60 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) &&
 800b05a:	b124      	cbz	r4, 800b066 <chPoolFreeI+0x16>
 800b05c:	b11d      	cbz	r5, 800b066 <chPoolFreeI+0x16>
 800b05e:	68a3      	ldr	r3, [r4, #8]
 800b060:	3b01      	subs	r3, #1
 800b062:	421d      	tst	r5, r3
 800b064:	d002      	beq.n	800b06c <chPoolFreeI+0x1c>
 800b066:	4803      	ldr	r0, [pc, #12]	; (800b074 <chPoolFreeI+0x24>)
 800b068:	f7fc fb4a 	bl	8007700 <chSysHalt>
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 800b06c:	6823      	ldr	r3, [r4, #0]
 800b06e:	602b      	str	r3, [r5, #0]
  mp->next = php;
 800b070:	6025      	str	r5, [r4, #0]
}
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	08019cc0 	.word	0x08019cc0
 800b078:	f3af 8000 	nop.w
 800b07c:	f3af 8000 	nop.w

0800b080 <chPoolFree>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chPoolFree(memory_pool_t *mp, void *objp) {
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	4604      	mov	r4, r0
 800b084:	460d      	mov	r5, r1
 800b086:	2320      	movs	r3, #32
 800b088:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800b08c:	f7fd ffc8 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800b090:	f7fc fcc6 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chPoolFreeI(mp, objp);
 800b094:	4629      	mov	r1, r5
 800b096:	4620      	mov	r0, r4
 800b098:	f7ff ffda 	bl	800b050 <chPoolFreeI>
  _dbg_check_unlock();
 800b09c:	f7fc fcd8 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800b0a0:	f7fd ffc6 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800b0a4:	4b08      	ldr	r3, [pc, #32]	; (800b0c8 <chPoolFree+0x48>)
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d004      	beq.n	800b0b6 <chPoolFree+0x36>
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	6899      	ldr	r1, [r3, #8]
 800b0b0:	6893      	ldr	r3, [r2, #8]
 800b0b2:	4299      	cmp	r1, r3
 800b0b4:	d303      	bcc.n	800b0be <chPoolFree+0x3e>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 800b0bc:	bd38      	pop	{r3, r4, r5, pc}
 800b0be:	4803      	ldr	r0, [pc, #12]	; (800b0cc <chPoolFree+0x4c>)
 800b0c0:	f7fc fb1e 	bl	8007700 <chSysHalt>
 800b0c4:	e7f7      	b.n	800b0b6 <chPoolFree+0x36>
 800b0c6:	bf00      	nop
 800b0c8:	200050f8 	.word	0x200050f8
 800b0cc:	08019cb4 	.word	0x08019cb4

0800b0d0 <chPoolLoadArray>:
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {
 800b0d0:	b570      	push	{r4, r5, r6, lr}
 800b0d2:	460d      	mov	r5, r1
 800b0d4:	4614      	mov	r4, r2
  chDbgCheck((mp != NULL) && (n != 0U));
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	b100      	cbz	r0, 800b0dc <chPoolLoadArray+0xc>
 800b0da:	b952      	cbnz	r2, 800b0f2 <chPoolLoadArray+0x22>
 800b0dc:	4806      	ldr	r0, [pc, #24]	; (800b0f8 <chPoolLoadArray+0x28>)
 800b0de:	f7fc fb0f 	bl	8007700 <chSysHalt>
 800b0e2:	e006      	b.n	800b0f2 <chPoolLoadArray+0x22>
 *
 * @api
 */
static inline void chPoolAdd(memory_pool_t *mp, void *objp) {

  chPoolFree(mp, objp);
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	f7ff ffca 	bl	800b080 <chPoolFree>
    p = (void *)(((uint8_t *)p) + mp->object_size);
 800b0ec:	6873      	ldr	r3, [r6, #4]
 800b0ee:	441d      	add	r5, r3
    n--;
 800b0f0:	3c01      	subs	r4, #1
  while (n != 0U) {
 800b0f2:	2c00      	cmp	r4, #0
 800b0f4:	d1f6      	bne.n	800b0e4 <chPoolLoadArray+0x14>
}
 800b0f6:	bd70      	pop	{r4, r5, r6, pc}
 800b0f8:	08019ccc 	.word	0x08019ccc
 800b0fc:	f3af 8000 	nop.w

0800b100 <chGuardedPoolObjectInitAligned>:
 *
 * @init
 */
void chGuardedPoolObjectInitAligned(guarded_memory_pool_t *gmp,
                                    size_t size,
                                    unsigned align) {
 800b100:	b510      	push	{r4, lr}
 800b102:	4604      	mov	r4, r0

  chPoolObjectInitAligned(&gmp->pool, size, align, NULL);
 800b104:	2300      	movs	r3, #0
 800b106:	300c      	adds	r0, #12
 800b108:	f7ff ff3a 	bl	800af80 <chPoolObjectInitAligned>
  chSemObjectInit(&gmp->sem, (cnt_t)0);
 800b10c:	2100      	movs	r1, #0
 800b10e:	4620      	mov	r0, r4
 800b110:	f7fe f846 	bl	80091a0 <chSemObjectInit>
}
 800b114:	bd10      	pop	{r4, pc}
 800b116:	bf00      	nop
 800b118:	f3af 8000 	nop.w
 800b11c:	f3af 8000 	nop.w

0800b120 <chGuardedPoolAllocTimeoutS>:
 * @retval NULL         if the operation timed out.
 *
 * @sclass
 */
void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
                                 sysinterval_t timeout) {
 800b120:	b510      	push	{r4, lr}
 800b122:	4604      	mov	r4, r0
  msg_t msg;

  msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 800b124:	f7fe f904 	bl	8009330 <chSemWaitTimeoutS>
  if (msg != MSG_OK) {
 800b128:	b920      	cbnz	r0, 800b134 <chGuardedPoolAllocTimeoutS+0x14>
    return NULL;
  }

  return chPoolAllocI(&gmp->pool);
 800b12a:	f104 000c 	add.w	r0, r4, #12
 800b12e:	f7ff ff47 	bl	800afc0 <chPoolAllocI>
}
 800b132:	bd10      	pop	{r4, pc}
    return NULL;
 800b134:	2000      	movs	r0, #0
 800b136:	e7fc      	b.n	800b132 <chGuardedPoolAllocTimeoutS+0x12>
 800b138:	f3af 8000 	nop.w
 800b13c:	f3af 8000 	nop.w

0800b140 <chGuardedPoolAllocTimeout>:
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
                                sysinterval_t timeout) {
 800b140:	b5d0      	push	{r4, r6, r7, lr}
 800b142:	4604      	mov	r4, r0
 800b144:	4616      	mov	r6, r2
 800b146:	461f      	mov	r7, r3
 800b148:	2320      	movs	r3, #32
 800b14a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800b14e:	f7fd ff67 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800b152:	f7fc fc65 	bl	8007a20 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
 800b156:	4632      	mov	r2, r6
 800b158:	463b      	mov	r3, r7
 800b15a:	4620      	mov	r0, r4
 800b15c:	f7ff ffe0 	bl	800b120 <chGuardedPoolAllocTimeoutS>
 800b160:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800b162:	f7fc fc75 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800b166:	f7fd ff63 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800b16a:	4b09      	ldr	r3, [pc, #36]	; (800b190 <chGuardedPoolAllocTimeout+0x50>)
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d004      	beq.n	800b17c <chGuardedPoolAllocTimeout+0x3c>
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	6899      	ldr	r1, [r3, #8]
 800b176:	6893      	ldr	r3, [r2, #8]
 800b178:	4299      	cmp	r1, r3
 800b17a:	d304      	bcc.n	800b186 <chGuardedPoolAllocTimeout+0x46>
 800b17c:	2300      	movs	r3, #0
 800b17e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 800b182:	4620      	mov	r0, r4
 800b184:	bdd0      	pop	{r4, r6, r7, pc}
 800b186:	4803      	ldr	r0, [pc, #12]	; (800b194 <chGuardedPoolAllocTimeout+0x54>)
 800b188:	f7fc faba 	bl	8007700 <chSysHalt>
 800b18c:	e7f6      	b.n	800b17c <chGuardedPoolAllocTimeout+0x3c>
 800b18e:	bf00      	nop
 800b190:	200050f8 	.word	0x200050f8
 800b194:	08019cb4 	.word	0x08019cb4
 800b198:	f3af 8000 	nop.w
 800b19c:	f3af 8000 	nop.w

0800b1a0 <chGuardedPoolFree>:
 * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	460d      	mov	r5, r1
 800b1a6:	2320      	movs	r3, #32
 800b1a8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800b1ac:	f7fd ff38 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800b1b0:	f7fc fc36 	bl	8007a20 <_dbg_check_lock>
 *
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	f104 000c 	add.w	r0, r4, #12
 800b1ba:	f7ff ff49 	bl	800b050 <chPoolFreeI>
  chSemSignalI(&gmp->sem);
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f7fe f96e 	bl	80094a0 <chSemSignalI>

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 800b1c4:	f7fd f964 	bl	8008490 <chSchRescheduleS>
  _dbg_check_unlock();
 800b1c8:	f7fc fc42 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800b1cc:	f7fd ff30 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800b1d0:	4b08      	ldr	r3, [pc, #32]	; (800b1f4 <chGuardedPoolFree+0x54>)
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d004      	beq.n	800b1e2 <chGuardedPoolFree+0x42>
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	6899      	ldr	r1, [r3, #8]
 800b1dc:	6893      	ldr	r3, [r2, #8]
 800b1de:	4299      	cmp	r1, r3
 800b1e0:	d303      	bcc.n	800b1ea <chGuardedPoolFree+0x4a>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 800b1e8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ea:	4803      	ldr	r0, [pc, #12]	; (800b1f8 <chGuardedPoolFree+0x58>)
 800b1ec:	f7fc fa88 	bl	8007700 <chSysHalt>
 800b1f0:	e7f7      	b.n	800b1e2 <chGuardedPoolFree+0x42>
 800b1f2:	bf00      	nop
 800b1f4:	200050f8 	.word	0x200050f8
 800b1f8:	08019cb4 	.word	0x08019cb4
 800b1fc:	f3af 8000 	nop.w

0800b200 <chGuardedPoolLoadArray>:
void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	460d      	mov	r5, r1
 800b204:	4614      	mov	r4, r2
  chDbgCheck((gmp != NULL) && (n != 0U));
 800b206:	4606      	mov	r6, r0
 800b208:	b100      	cbz	r0, 800b20c <chGuardedPoolLoadArray+0xc>
 800b20a:	b952      	cbnz	r2, 800b222 <chGuardedPoolLoadArray+0x22>
 800b20c:	4806      	ldr	r0, [pc, #24]	; (800b228 <chGuardedPoolLoadArray+0x28>)
 800b20e:	f7fc fa77 	bl	8007700 <chSysHalt>
 800b212:	e006      	b.n	800b222 <chGuardedPoolLoadArray+0x22>
 *
 * @api
 */
static inline void chGuardedPoolAdd(guarded_memory_pool_t *gmp, void *objp) {

  chGuardedPoolFree(gmp, objp);
 800b214:	4629      	mov	r1, r5
 800b216:	4630      	mov	r0, r6
 800b218:	f7ff ffc2 	bl	800b1a0 <chGuardedPoolFree>
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800b21c:	6933      	ldr	r3, [r6, #16]
 800b21e:	441d      	add	r5, r3
    n--;
 800b220:	3c01      	subs	r4, #1
  while (n != 0U) {
 800b222:	2c00      	cmp	r4, #0
 800b224:	d1f6      	bne.n	800b214 <chGuardedPoolLoadArray+0x14>
}
 800b226:	bd70      	pop	{r4, r5, r6, pc}
 800b228:	08019cdc 	.word	0x08019cdc
 800b22c:	00000000 	.word	0x00000000

0800b230 <pipe_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t pipe_write(pipe_t *pp, const uint8_t *bp, size_t n) {
 800b230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b234:	4605      	mov	r5, r0
 800b236:	4688      	mov	r8, r1
 800b238:	4691      	mov	r9, r2
  size_t s1, s2;

  PC_LOCK(pp);
 800b23a:	f100 0720 	add.w	r7, r0, #32
 800b23e:	4638      	mov	r0, r7
 800b240:	f7fe fa86 	bl	8009750 <chMtxLock>
 */
static inline size_t chPipeGetSize(const pipe_t *pp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(pp->top - pp->buffer);
 800b244:	686e      	ldr	r6, [r5, #4]
 800b246:	682c      	ldr	r4, [r5, #0]
 800b248:	1b34      	subs	r4, r6, r4
 *
 * @api
 */
static inline size_t chPipeGetUsedCount(const pipe_t *pp) {

  return pp->cnt;
 800b24a:	692b      	ldr	r3, [r5, #16]
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 800b24c:	1ae4      	subs	r4, r4, r3

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > chPipeGetFreeCount(pp)) {
 800b24e:	45a1      	cmp	r9, r4
 800b250:	d800      	bhi.n	800b254 <pipe_write+0x24>
 800b252:	464c      	mov	r4, r9
    n = chPipeGetFreeCount(pp);
  }
  pp->cnt += n;
 800b254:	4423      	add	r3, r4
 800b256:	612b      	str	r3, [r5, #16]

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(pp->top - pp->wrptr);
 800b258:	68a8      	ldr	r0, [r5, #8]
 800b25a:	1a36      	subs	r6, r6, r0
  /*lint -restore*/

  if (n < s1) {
 800b25c:	42b4      	cmp	r4, r6
 800b25e:	d30d      	bcc.n	800b27c <pipe_write+0x4c>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
    pp->wrptr += n;
  }
  else if (n > s1) {
 800b260:	42b4      	cmp	r4, r6
 800b262:	d813      	bhi.n	800b28c <pipe_write+0x5c>
    s2 = n - s1;
    memcpy((void *)pp->buffer, (const void *)bp, s2);
    pp->wrptr = pp->buffer + s2;
  }
  else { /* n == s1 */
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800b264:	4622      	mov	r2, r4
 800b266:	4641      	mov	r1, r8
 800b268:	f00c fe7a 	bl	8017f60 <memcpy>
    pp->wrptr = pp->buffer;
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	60ab      	str	r3, [r5, #8]
  }

  PC_UNLOCK(pp);
 800b270:	4638      	mov	r0, r7
 800b272:	f7fe fadd 	bl	8009830 <chMtxUnlock>

  return n;
}
 800b276:	4620      	mov	r0, r4
 800b278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800b27c:	4622      	mov	r2, r4
 800b27e:	4641      	mov	r1, r8
 800b280:	f00c fe6e 	bl	8017f60 <memcpy>
    pp->wrptr += n;
 800b284:	68ab      	ldr	r3, [r5, #8]
 800b286:	4423      	add	r3, r4
 800b288:	60ab      	str	r3, [r5, #8]
 800b28a:	e7f1      	b.n	800b270 <pipe_write+0x40>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 800b28c:	4632      	mov	r2, r6
 800b28e:	4641      	mov	r1, r8
 800b290:	f00c fe66 	bl	8017f60 <memcpy>
    s2 = n - s1;
 800b294:	eba4 0906 	sub.w	r9, r4, r6
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 800b298:	464a      	mov	r2, r9
 800b29a:	eb08 0106 	add.w	r1, r8, r6
 800b29e:	6828      	ldr	r0, [r5, #0]
 800b2a0:	f00c fe5e 	bl	8017f60 <memcpy>
    pp->wrptr = pp->buffer + s2;
 800b2a4:	682a      	ldr	r2, [r5, #0]
 800b2a6:	444a      	add	r2, r9
 800b2a8:	60aa      	str	r2, [r5, #8]
 800b2aa:	e7e1      	b.n	800b270 <pipe_write+0x40>
 800b2ac:	f3af 8000 	nop.w

0800b2b0 <pipe_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t pipe_read(pipe_t *pp, uint8_t *bp, size_t n) {
 800b2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b4:	4605      	mov	r5, r0
 800b2b6:	4688      	mov	r8, r1
 800b2b8:	4614      	mov	r4, r2
  size_t s1, s2;

  PC_LOCK(pp);
 800b2ba:	f100 0720 	add.w	r7, r0, #32
 800b2be:	4638      	mov	r0, r7
 800b2c0:	f7fe fa46 	bl	8009750 <chMtxLock>
  return pp->cnt;
 800b2c4:	692b      	ldr	r3, [r5, #16]

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > chPipeGetUsedCount(pp)) {
 800b2c6:	429c      	cmp	r4, r3
 800b2c8:	d900      	bls.n	800b2cc <pipe_read+0x1c>
    n = chPipeGetUsedCount(pp);
 800b2ca:	461c      	mov	r4, r3
  }
  pp->cnt -= n;
 800b2cc:	1b1b      	subs	r3, r3, r4
 800b2ce:	612b      	str	r3, [r5, #16]

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(pp->top - pp->rdptr);
 800b2d0:	686e      	ldr	r6, [r5, #4]
 800b2d2:	68e9      	ldr	r1, [r5, #12]
 800b2d4:	1a76      	subs	r6, r6, r1
  /*lint -restore*/

  if (n < s1) {
 800b2d6:	42b4      	cmp	r4, r6
 800b2d8:	d30d      	bcc.n	800b2f6 <pipe_read+0x46>
    memcpy((void *)bp, (void *)pp->rdptr, n);
    pp->rdptr += n;
  }
  else if (n > s1) {
 800b2da:	42b4      	cmp	r4, r6
 800b2dc:	d813      	bhi.n	800b306 <pipe_read+0x56>
    s2 = n - s1;
    memcpy((void *)bp, (void *)pp->buffer, s2);
    pp->rdptr = pp->buffer + s2;
  }
  else { /* n == s1 */
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800b2de:	4622      	mov	r2, r4
 800b2e0:	4640      	mov	r0, r8
 800b2e2:	f00c fe3d 	bl	8017f60 <memcpy>
    pp->rdptr = pp->buffer;
 800b2e6:	682b      	ldr	r3, [r5, #0]
 800b2e8:	60eb      	str	r3, [r5, #12]
  }

  PC_UNLOCK(pp);
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	f7fe faa0 	bl	8009830 <chMtxUnlock>

  return n;
}
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800b2f6:	4622      	mov	r2, r4
 800b2f8:	4640      	mov	r0, r8
 800b2fa:	f00c fe31 	bl	8017f60 <memcpy>
    pp->rdptr += n;
 800b2fe:	68eb      	ldr	r3, [r5, #12]
 800b300:	4423      	add	r3, r4
 800b302:	60eb      	str	r3, [r5, #12]
 800b304:	e7f1      	b.n	800b2ea <pipe_read+0x3a>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800b306:	4632      	mov	r2, r6
 800b308:	4640      	mov	r0, r8
 800b30a:	f00c fe29 	bl	8017f60 <memcpy>
    s2 = n - s1;
 800b30e:	eba4 0906 	sub.w	r9, r4, r6
    memcpy((void *)bp, (void *)pp->buffer, s2);
 800b312:	464a      	mov	r2, r9
 800b314:	6829      	ldr	r1, [r5, #0]
 800b316:	eb08 0006 	add.w	r0, r8, r6
 800b31a:	f00c fe21 	bl	8017f60 <memcpy>
    pp->rdptr = pp->buffer + s2;
 800b31e:	682a      	ldr	r2, [r5, #0]
 800b320:	444a      	add	r2, r9
 800b322:	60ea      	str	r2, [r5, #12]
 800b324:	e7e1      	b.n	800b2ea <pipe_read+0x3a>
 800b326:	bf00      	nop
 800b328:	f3af 8000 	nop.w
 800b32c:	f3af 8000 	nop.w

0800b330 <chPipeObjectInit>:
 * @param[in] buf       pointer to the pipe buffer as an array of @p uint8_t
 * @param[in] n         number of elements in the buffer array
 *
 * @init
 */
void chPipeObjectInit(pipe_t *pp, uint8_t *buf, size_t n) {
 800b330:	b570      	push	{r4, r5, r6, lr}
 800b332:	460d      	mov	r5, r1
 800b334:	4616      	mov	r6, r2

  chDbgCheck((pp != NULL) && (buf != NULL) && (n > (size_t)0));
 800b336:	4604      	mov	r4, r0
 800b338:	b108      	cbz	r0, 800b33e <chPipeObjectInit+0xe>
 800b33a:	b101      	cbz	r1, 800b33e <chPipeObjectInit+0xe>
 800b33c:	b912      	cbnz	r2, 800b344 <chPipeObjectInit+0x14>
 800b33e:	480d      	ldr	r0, [pc, #52]	; (800b374 <chPipeObjectInit+0x44>)
 800b340:	f7fc f9de 	bl	8007700 <chSysHalt>

  pp->buffer = buf;
 800b344:	6025      	str	r5, [r4, #0]
  pp->rdptr  = buf;
 800b346:	60e5      	str	r5, [r4, #12]
  pp->wrptr  = buf;
 800b348:	60a5      	str	r5, [r4, #8]
  pp->top    = &buf[n];
 800b34a:	4435      	add	r5, r6
 800b34c:	6065      	str	r5, [r4, #4]
  pp->cnt    = (size_t)0;
 800b34e:	2300      	movs	r3, #0
 800b350:	6123      	str	r3, [r4, #16]
  pp->reset  = false;
 800b352:	7523      	strb	r3, [r4, #20]
  pp->wtr    = NULL;
 800b354:	61a3      	str	r3, [r4, #24]
  pp->rtr    = NULL;
 800b356:	61e3      	str	r3, [r4, #28]
  PC_INIT(pp);
 800b358:	f104 0020 	add.w	r0, r4, #32
 800b35c:	f7fe f968 	bl	8009630 <chMtxObjectInit>
  PW_INIT(pp);
 800b360:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800b364:	f7fe f964 	bl	8009630 <chMtxObjectInit>
  PR_INIT(pp);
 800b368:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b36c:	f7fe f960 	bl	8009630 <chMtxObjectInit>
}
 800b370:	bd70      	pop	{r4, r5, r6, pc}
 800b372:	bf00      	nop
 800b374:	08019cf4 	.word	0x08019cf4
 800b378:	f3af 8000 	nop.w
 800b37c:	f3af 8000 	nop.w

0800b380 <chPipeReset>:
 *
 * @param[in] pp        the pointer to an initialized @p pipe_t object
 *
 * @api
 */
void chPipeReset(pipe_t *pp) {
 800b380:	b538      	push	{r3, r4, r5, lr}

  chDbgCheck(pp != NULL);
 800b382:	4604      	mov	r4, r0
 800b384:	b3a0      	cbz	r0, 800b3f0 <chPipeReset+0x70>

  PC_LOCK(pp);
 800b386:	f104 0520 	add.w	r5, r4, #32
 800b38a:	4628      	mov	r0, r5
 800b38c:	f7fe f9e0 	bl	8009750 <chMtxLock>

  pp->wrptr = pp->buffer;
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	60a3      	str	r3, [r4, #8]
  pp->rdptr = pp->buffer;
 800b394:	60e3      	str	r3, [r4, #12]
  pp->cnt   = (size_t)0;
 800b396:	2300      	movs	r3, #0
 800b398:	6123      	str	r3, [r4, #16]
  pp->reset = true;
 800b39a:	2301      	movs	r3, #1
 800b39c:	7523      	strb	r3, [r4, #20]
 800b39e:	2320      	movs	r3, #32
 800b3a0:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800b3a4:	f7fd fe3c 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800b3a8:	f7fc fb3a 	bl	8007a20 <_dbg_check_lock>

  chSysLock();
  chThdResumeI(&pp->wtr, MSG_RESET);
 800b3ac:	f06f 0101 	mvn.w	r1, #1
 800b3b0:	f104 0018 	add.w	r0, r4, #24
 800b3b4:	f7fd fcc4 	bl	8008d40 <chThdResumeI>
  chThdResumeI(&pp->rtr, MSG_RESET);
 800b3b8:	f06f 0101 	mvn.w	r1, #1
 800b3bc:	f104 001c 	add.w	r0, r4, #28
 800b3c0:	f7fd fcbe 	bl	8008d40 <chThdResumeI>
  chSchRescheduleS();
 800b3c4:	f7fd f864 	bl	8008490 <chSchRescheduleS>
  _dbg_check_unlock();
 800b3c8:	f7fc fb42 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800b3cc:	f7fd fe30 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800b3d0:	4b0b      	ldr	r3, [pc, #44]	; (800b400 <chPipeReset+0x80>)
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d004      	beq.n	800b3e2 <chPipeReset+0x62>
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	6899      	ldr	r1, [r3, #8]
 800b3dc:	6893      	ldr	r3, [r2, #8]
 800b3de:	4299      	cmp	r1, r3
 800b3e0:	d30a      	bcc.n	800b3f8 <chPipeReset+0x78>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  PC_UNLOCK(pp);
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	f7fe fa21 	bl	8009830 <chMtxUnlock>
}
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(pp != NULL);
 800b3f0:	4804      	ldr	r0, [pc, #16]	; (800b404 <chPipeReset+0x84>)
 800b3f2:	f7fc f985 	bl	8007700 <chSysHalt>
 800b3f6:	e7c6      	b.n	800b386 <chPipeReset+0x6>
 800b3f8:	4803      	ldr	r0, [pc, #12]	; (800b408 <chPipeReset+0x88>)
 800b3fa:	f7fc f981 	bl	8007700 <chSysHalt>
 800b3fe:	e7f0      	b.n	800b3e2 <chPipeReset+0x62>
 800b400:	200050f8 	.word	0x200050f8
 800b404:	08019d08 	.word	0x08019d08
 800b408:	08019d14 	.word	0x08019d14
 800b40c:	f3af 8000 	nop.w

0800b410 <chPipeWriteTimeout>:
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
                          size_t n, sysinterval_t timeout) {
 800b410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b414:	4605      	mov	r5, r0
 800b416:	460e      	mov	r6, r1
  size_t max = n;

  chDbgCheck(n > 0U);
 800b418:	4617      	mov	r7, r2
 800b41a:	b122      	cbz	r2, 800b426 <chPipeWriteTimeout+0x16>

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 800b41c:	7d2b      	ldrb	r3, [r5, #20]
 800b41e:	b133      	cbz	r3, 800b42e <chPipeWriteTimeout+0x1e>
    return (size_t)0;
 800b420:	2000      	movs	r0, #0
  }

  PW_UNLOCK(pp);

  return max - n;
}
 800b422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck(n > 0U);
 800b426:	4822      	ldr	r0, [pc, #136]	; (800b4b0 <chPipeWriteTimeout+0xa0>)
 800b428:	f7fc f96a 	bl	8007700 <chSysHalt>
 800b42c:	e7f6      	b.n	800b41c <chPipeWriteTimeout+0xc>
  PW_LOCK(pp);
 800b42e:	f105 0830 	add.w	r8, r5, #48	; 0x30
 800b432:	4640      	mov	r0, r8
 800b434:	f7fe f98c 	bl	8009750 <chMtxLock>
  while (n > 0U) {
 800b438:	463c      	mov	r4, r7
 800b43a:	e00a      	b.n	800b452 <chPipeWriteTimeout+0x42>
 800b43c:	481d      	ldr	r0, [pc, #116]	; (800b4b4 <chPipeWriteTimeout+0xa4>)
 800b43e:	f7fc f95f 	bl	8007700 <chSysHalt>
 800b442:	e029      	b.n	800b498 <chPipeWriteTimeout+0x88>
      n  -= done;
 800b444:	1a24      	subs	r4, r4, r0
      bp += done;
 800b446:	4406      	add	r6, r0
      chThdResume(&pp->rtr, MSG_OK);
 800b448:	2100      	movs	r1, #0
 800b44a:	f105 001c 	add.w	r0, r5, #28
 800b44e:	f7fd fca7 	bl	8008da0 <chThdResume>
  while (n > 0U) {
 800b452:	b33c      	cbz	r4, 800b4a4 <chPipeWriteTimeout+0x94>
    done = pipe_write(pp, bp, n);
 800b454:	4622      	mov	r2, r4
 800b456:	4631      	mov	r1, r6
 800b458:	4628      	mov	r0, r5
 800b45a:	f7ff fee9 	bl	800b230 <pipe_write>
    if (done == (size_t)0) {
 800b45e:	2800      	cmp	r0, #0
 800b460:	d1f0      	bne.n	800b444 <chPipeWriteTimeout+0x34>
 800b462:	2320      	movs	r3, #32
 800b464:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800b468:	f7fd fdda 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800b46c:	f7fc fad8 	bl	8007a20 <_dbg_check_lock>
      msg = chThdSuspendTimeoutS(&pp->wtr, timeout);
 800b470:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b474:	f105 0018 	add.w	r0, r5, #24
 800b478:	f7fd fc42 	bl	8008d00 <chThdSuspendTimeoutS>
 800b47c:	4681      	mov	r9, r0
  _dbg_check_unlock();
 800b47e:	f7fc fae7 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800b482:	f7fd fdd5 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800b486:	4b0c      	ldr	r3, [pc, #48]	; (800b4b8 <chPipeWriteTimeout+0xa8>)
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d004      	beq.n	800b498 <chPipeWriteTimeout+0x88>
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	6899      	ldr	r1, [r3, #8]
 800b492:	6893      	ldr	r3, [r2, #8]
 800b494:	4299      	cmp	r1, r3
 800b496:	d3d1      	bcc.n	800b43c <chPipeWriteTimeout+0x2c>
 800b498:	2300      	movs	r3, #0
 800b49a:	f383 8811 	msr	BASEPRI, r3
      if (msg != MSG_OK) {
 800b49e:	f1b9 0f00 	cmp.w	r9, #0
 800b4a2:	d0d6      	beq.n	800b452 <chPipeWriteTimeout+0x42>
  PW_UNLOCK(pp);
 800b4a4:	4640      	mov	r0, r8
 800b4a6:	f7fe f9c3 	bl	8009830 <chMtxUnlock>
  return max - n;
 800b4aa:	1b38      	subs	r0, r7, r4
 800b4ac:	e7b9      	b.n	800b422 <chPipeWriteTimeout+0x12>
 800b4ae:	bf00      	nop
 800b4b0:	08019d20 	.word	0x08019d20
 800b4b4:	08019d14 	.word	0x08019d14
 800b4b8:	200050f8 	.word	0x200050f8
 800b4bc:	f3af 8000 	nop.w

0800b4c0 <chPipeReadTimeout>:
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
                         size_t n, sysinterval_t timeout) {
 800b4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	460e      	mov	r6, r1
  size_t max = n;

  chDbgCheck(n > 0U);
 800b4c8:	4617      	mov	r7, r2
 800b4ca:	b122      	cbz	r2, 800b4d6 <chPipeReadTimeout+0x16>

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 800b4cc:	7d2b      	ldrb	r3, [r5, #20]
 800b4ce:	b133      	cbz	r3, 800b4de <chPipeReadTimeout+0x1e>
    return (size_t)0;
 800b4d0:	2000      	movs	r0, #0
  }

  PR_UNLOCK(pp);

  return max - n;
}
 800b4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck(n > 0U);
 800b4d6:	4822      	ldr	r0, [pc, #136]	; (800b560 <chPipeReadTimeout+0xa0>)
 800b4d8:	f7fc f912 	bl	8007700 <chSysHalt>
 800b4dc:	e7f6      	b.n	800b4cc <chPipeReadTimeout+0xc>
  PR_LOCK(pp);
 800b4de:	f105 0840 	add.w	r8, r5, #64	; 0x40
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	f7fe f934 	bl	8009750 <chMtxLock>
  while (n > 0U) {
 800b4e8:	463c      	mov	r4, r7
 800b4ea:	e00a      	b.n	800b502 <chPipeReadTimeout+0x42>
 800b4ec:	481d      	ldr	r0, [pc, #116]	; (800b564 <chPipeReadTimeout+0xa4>)
 800b4ee:	f7fc f907 	bl	8007700 <chSysHalt>
 800b4f2:	e029      	b.n	800b548 <chPipeReadTimeout+0x88>
      n  -= done;
 800b4f4:	1a24      	subs	r4, r4, r0
      bp += done;
 800b4f6:	4406      	add	r6, r0
      chThdResume(&pp->wtr, MSG_OK);
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	f105 0018 	add.w	r0, r5, #24
 800b4fe:	f7fd fc4f 	bl	8008da0 <chThdResume>
  while (n > 0U) {
 800b502:	b33c      	cbz	r4, 800b554 <chPipeReadTimeout+0x94>
    done = pipe_read(pp, bp, n);
 800b504:	4622      	mov	r2, r4
 800b506:	4631      	mov	r1, r6
 800b508:	4628      	mov	r0, r5
 800b50a:	f7ff fed1 	bl	800b2b0 <pipe_read>
    if (done == (size_t)0) {
 800b50e:	2800      	cmp	r0, #0
 800b510:	d1f0      	bne.n	800b4f4 <chPipeReadTimeout+0x34>
 800b512:	2320      	movs	r3, #32
 800b514:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800b518:	f7fd fd82 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800b51c:	f7fc fa80 	bl	8007a20 <_dbg_check_lock>
      msg = chThdSuspendTimeoutS(&pp->rtr, timeout);
 800b520:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b524:	f105 001c 	add.w	r0, r5, #28
 800b528:	f7fd fbea 	bl	8008d00 <chThdSuspendTimeoutS>
 800b52c:	4681      	mov	r9, r0
  _dbg_check_unlock();
 800b52e:	f7fc fa8f 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800b532:	f7fd fd7d 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800b536:	4b0c      	ldr	r3, [pc, #48]	; (800b568 <chPipeReadTimeout+0xa8>)
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d004      	beq.n	800b548 <chPipeReadTimeout+0x88>
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	6899      	ldr	r1, [r3, #8]
 800b542:	6893      	ldr	r3, [r2, #8]
 800b544:	4299      	cmp	r1, r3
 800b546:	d3d1      	bcc.n	800b4ec <chPipeReadTimeout+0x2c>
 800b548:	2300      	movs	r3, #0
 800b54a:	f383 8811 	msr	BASEPRI, r3
      if (msg != MSG_OK) {
 800b54e:	f1b9 0f00 	cmp.w	r9, #0
 800b552:	d0d6      	beq.n	800b502 <chPipeReadTimeout+0x42>
  PR_UNLOCK(pp);
 800b554:	4640      	mov	r0, r8
 800b556:	f7fe f96b 	bl	8009830 <chMtxUnlock>
  return max - n;
 800b55a:	1b38      	subs	r0, r7, r4
 800b55c:	e7b9      	b.n	800b4d2 <chPipeReadTimeout+0x12>
 800b55e:	bf00      	nop
 800b560:	08019d34 	.word	0x08019d34
 800b564:	08019d14 	.word	0x08019d14
 800b568:	200050f8 	.word	0x200050f8
 800b56c:	00000000 	.word	0x00000000

0800b570 <dyn_list_unlink>:
  return NULL;
}

static dyn_element_t *dyn_list_unlink(dyn_element_t *element,
                                      dyn_list_t *dlp) {
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800b570:	460a      	mov	r2, r1

  /* Scanning the list.*/
  while (prev->next != (dyn_element_t *)dlp) {
 800b572:	6813      	ldr	r3, [r2, #0]
 800b574:	428b      	cmp	r3, r1
 800b576:	d006      	beq.n	800b586 <dyn_list_unlink+0x16>
    if (prev->next == element) {
 800b578:	4283      	cmp	r3, r0
 800b57a:	d001      	beq.n	800b580 <dyn_list_unlink+0x10>
      prev->next = element->next;
      return element;
    }

    /* Next element in the list.*/
    prev = prev->next;
 800b57c:	461a      	mov	r2, r3
 800b57e:	e7f8      	b.n	800b572 <dyn_list_unlink+0x2>
      prev->next = element->next;
 800b580:	6803      	ldr	r3, [r0, #0]
 800b582:	6013      	str	r3, [r2, #0]
      return element;
 800b584:	4770      	bx	lr
  }

  return NULL;
 800b586:	2000      	movs	r0, #0
}
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	f3af 8000 	nop.w

0800b590 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 800b590:	b508      	push	{r3, lr}

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 800b592:	2200      	movs	r2, #0
 800b594:	f7ff fb4c 	bl	800ac30 <chCoreAllocAlignedWithOffsetI>
}
 800b598:	bd08      	pop	{r3, pc}
 800b59a:	bf00      	nop
 800b59c:	f3af 8000 	nop.w

0800b5a0 <dyn_list_find>:
static dyn_element_t *dyn_list_find(const char *name, dyn_list_t *dlp) {
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	460d      	mov	r5, r1
  dyn_element_t *p = dlp->next;
 800b5a6:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 800b5a8:	42ac      	cmp	r4, r5
 800b5aa:	d007      	beq.n	800b5bc <dyn_list_find+0x1c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b5ac:	2208      	movs	r2, #8
 800b5ae:	4631      	mov	r1, r6
 800b5b0:	18a0      	adds	r0, r4, r2
 800b5b2:	f00d f8c1 	bl	8018738 <strncmp>
 800b5b6:	b110      	cbz	r0, 800b5be <dyn_list_find+0x1e>
    p = p->next;
 800b5b8:	6824      	ldr	r4, [r4, #0]
 800b5ba:	e7f5      	b.n	800b5a8 <dyn_list_find+0x8>
  return NULL;
 800b5bc:	2400      	movs	r4, #0
}
 800b5be:	4620      	mov	r0, r4
 800b5c0:	bd70      	pop	{r4, r5, r6, pc}
 800b5c2:	bf00      	nop
 800b5c4:	f3af 8000 	nop.w
 800b5c8:	f3af 8000 	nop.w
 800b5cc:	f3af 8000 	nop.w

0800b5d0 <dyn_create_object_pool>:
#endif /* CH_FACTORY_REQUIRES_HEAP */

#if CH_FACTORY_REQUIRES_POOLS || defined(__DOXYGEN__)
static dyn_element_t *dyn_create_object_pool(const char *name,
                                             dyn_list_t *dlp,
                                             memory_pool_t *mp) {
 800b5d0:	b570      	push	{r4, r5, r6, lr}
 800b5d2:	460d      	mov	r5, r1
 800b5d4:	4614      	mov	r4, r2
  dyn_element_t *dep;

  chDbgCheck(name != NULL);
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	b1a8      	cbz	r0, 800b606 <dyn_create_object_pool+0x36>

  /* Checking if an object object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
 800b5da:	4629      	mov	r1, r5
 800b5dc:	4630      	mov	r0, r6
 800b5de:	f7ff ffdf 	bl	800b5a0 <dyn_list_find>
  if (dep != NULL) {
 800b5e2:	b9a0      	cbnz	r0, 800b60e <dyn_create_object_pool+0x3e>
    return NULL;
  }

  /* Allocating space for the new object.*/
  dep = (dyn_element_t *)chPoolAlloc(mp);
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f7ff fd0b 	bl	800b000 <chPoolAlloc>
  if (dep == NULL) {
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	b148      	cbz	r0, 800b602 <dyn_create_object_pool+0x32>
  }

  /* Initializing object list element.*/
  /*lint -save -e668 [] Lint is confused by the above chDbgCheck() and
    incorrectly assumes that strncpy() could receive a NULL pointer.*/
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 800b5ee:	2208      	movs	r2, #8
 800b5f0:	4631      	mov	r1, r6
 800b5f2:	4410      	add	r0, r2
 800b5f4:	f00d f8ec 	bl	80187d0 <strncpy>
  /*lint -restore*/
  dep->refs = (ucnt_t)1;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	6063      	str	r3, [r4, #4]
  dep->next = dlp->next;
 800b5fc:	682b      	ldr	r3, [r5, #0]
 800b5fe:	6023      	str	r3, [r4, #0]

  /* Updating factory list.*/
  dlp->next = (dyn_element_t *)dep;
 800b600:	602c      	str	r4, [r5, #0]

  return dep;
}
 800b602:	4620      	mov	r0, r4
 800b604:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(name != NULL);
 800b606:	4803      	ldr	r0, [pc, #12]	; (800b614 <dyn_create_object_pool+0x44>)
 800b608:	f7fc f87a 	bl	8007700 <chSysHalt>
 800b60c:	e7e5      	b.n	800b5da <dyn_create_object_pool+0xa>
    return NULL;
 800b60e:	2400      	movs	r4, #0
 800b610:	e7f7      	b.n	800b602 <dyn_create_object_pool+0x32>
 800b612:	bf00      	nop
 800b614:	08019d48 	.word	0x08019d48
 800b618:	f3af 8000 	nop.w
 800b61c:	f3af 8000 	nop.w

0800b620 <dyn_find_object>:
    chPoolFree(mp, (void *)dep);
  }
}
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	460d      	mov	r5, r1
  dyn_element_t *dep;

  chDbgCheck(name != NULL);
 800b624:	4604      	mov	r4, r0
 800b626:	b150      	cbz	r0, 800b63e <dyn_find_object+0x1e>

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
 800b628:	4629      	mov	r1, r5
 800b62a:	4620      	mov	r0, r4
 800b62c:	f7ff ffb8 	bl	800b5a0 <dyn_list_find>
  if (dep != NULL) {
 800b630:	4603      	mov	r3, r0
 800b632:	b110      	cbz	r0, 800b63a <dyn_find_object+0x1a>
    /* Increasing references counter.*/
    dep->refs++;
 800b634:	6842      	ldr	r2, [r0, #4]
 800b636:	3201      	adds	r2, #1
 800b638:	6042      	str	r2, [r0, #4]
  }

  return dep;
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(name != NULL);
 800b63e:	4802      	ldr	r0, [pc, #8]	; (800b648 <dyn_find_object+0x28>)
 800b640:	f7fc f85e 	bl	8007700 <chSysHalt>
 800b644:	e7f0      	b.n	800b628 <dyn_find_object+0x8>
 800b646:	bf00      	nop
 800b648:	08019d60 	.word	0x08019d60
 800b64c:	f3af 8000 	nop.w

0800b650 <dyn_release_object_pool>:
                                    memory_pool_t *mp) {
 800b650:	b570      	push	{r4, r5, r6, lr}
 800b652:	460e      	mov	r6, r1
 800b654:	4615      	mov	r5, r2
  chDbgCheck(dep != NULL);
 800b656:	4604      	mov	r4, r0
 800b658:	b130      	cbz	r0, 800b668 <dyn_release_object_pool+0x18>
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");
 800b65a:	6863      	ldr	r3, [r4, #4]
 800b65c:	b143      	cbz	r3, 800b670 <dyn_release_object_pool+0x20>
  dep->refs--;
 800b65e:	6863      	ldr	r3, [r4, #4]
 800b660:	3b01      	subs	r3, #1
 800b662:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800b664:	b143      	cbz	r3, 800b678 <dyn_release_object_pool+0x28>
}
 800b666:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(dep != NULL);
 800b668:	4808      	ldr	r0, [pc, #32]	; (800b68c <dyn_release_object_pool+0x3c>)
 800b66a:	f7fc f849 	bl	8007700 <chSysHalt>
 800b66e:	e7f4      	b.n	800b65a <dyn_release_object_pool+0xa>
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");
 800b670:	4806      	ldr	r0, [pc, #24]	; (800b68c <dyn_release_object_pool+0x3c>)
 800b672:	f7fc f845 	bl	8007700 <chSysHalt>
 800b676:	e7f2      	b.n	800b65e <dyn_release_object_pool+0xe>
    dep = dyn_list_unlink(dep, dlp);
 800b678:	4631      	mov	r1, r6
 800b67a:	4620      	mov	r0, r4
 800b67c:	f7ff ff78 	bl	800b570 <dyn_list_unlink>
    chPoolFree(mp, (void *)dep);
 800b680:	4601      	mov	r1, r0
 800b682:	4628      	mov	r0, r5
 800b684:	f7ff fcfc 	bl	800b080 <chPoolFree>
}
 800b688:	e7ed      	b.n	800b666 <dyn_release_object_pool+0x16>
 800b68a:	bf00      	nop
 800b68c:	08019d70 	.word	0x08019d70

0800b690 <dyn_create_object_heap>:
                                             size_t size) {
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	460d      	mov	r5, r1
 800b694:	4614      	mov	r4, r2
  chDbgCheck(name != NULL);
 800b696:	4606      	mov	r6, r0
 800b698:	b1b0      	cbz	r0, 800b6c8 <dyn_create_object_heap+0x38>
  dep = dyn_list_find(name, dlp);
 800b69a:	4629      	mov	r1, r5
 800b69c:	4630      	mov	r0, r6
 800b69e:	f7ff ff7f 	bl	800b5a0 <dyn_list_find>
  if (dep != NULL) {
 800b6a2:	b9a8      	cbnz	r0, 800b6d0 <dyn_create_object_heap+0x40>
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 800b6a4:	2208      	movs	r2, #8
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	f7ff fb52 	bl	800ad50 <chHeapAllocAligned>
  if (dep == NULL) {
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	b148      	cbz	r0, 800b6c4 <dyn_create_object_heap+0x34>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 800b6b0:	2208      	movs	r2, #8
 800b6b2:	4631      	mov	r1, r6
 800b6b4:	4410      	add	r0, r2
 800b6b6:	f00d f88b 	bl	80187d0 <strncpy>
  dep->refs = (ucnt_t)1;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	6063      	str	r3, [r4, #4]
  dep->next = dlp->next;
 800b6be:	682b      	ldr	r3, [r5, #0]
 800b6c0:	6023      	str	r3, [r4, #0]
  dlp->next = dep;
 800b6c2:	602c      	str	r4, [r5, #0]
}
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(name != NULL);
 800b6c8:	4802      	ldr	r0, [pc, #8]	; (800b6d4 <dyn_create_object_heap+0x44>)
 800b6ca:	f7fc f819 	bl	8007700 <chSysHalt>
 800b6ce:	e7e4      	b.n	800b69a <dyn_create_object_heap+0xa>
    return NULL;
 800b6d0:	2400      	movs	r4, #0
 800b6d2:	e7f7      	b.n	800b6c4 <dyn_create_object_heap+0x34>
 800b6d4:	08019d88 	.word	0x08019d88
 800b6d8:	f3af 8000 	nop.w
 800b6dc:	f3af 8000 	nop.w

0800b6e0 <dyn_release_object_heap>:
                                    dyn_list_t *dlp) {
 800b6e0:	b538      	push	{r3, r4, r5, lr}
 800b6e2:	460d      	mov	r5, r1
  chDbgCheck(dep != NULL);
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	b130      	cbz	r0, 800b6f6 <dyn_release_object_heap+0x16>
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");
 800b6e8:	6863      	ldr	r3, [r4, #4]
 800b6ea:	b143      	cbz	r3, 800b6fe <dyn_release_object_heap+0x1e>
  dep->refs--;
 800b6ec:	6863      	ldr	r3, [r4, #4]
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800b6f2:	b143      	cbz	r3, 800b706 <dyn_release_object_heap+0x26>
}
 800b6f4:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(dep != NULL);
 800b6f6:	4807      	ldr	r0, [pc, #28]	; (800b714 <dyn_release_object_heap+0x34>)
 800b6f8:	f7fc f802 	bl	8007700 <chSysHalt>
 800b6fc:	e7f4      	b.n	800b6e8 <dyn_release_object_heap+0x8>
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");
 800b6fe:	4805      	ldr	r0, [pc, #20]	; (800b714 <dyn_release_object_heap+0x34>)
 800b700:	f7fb fffe 	bl	8007700 <chSysHalt>
 800b704:	e7f2      	b.n	800b6ec <dyn_release_object_heap+0xc>
    dep = dyn_list_unlink(dep, dlp);
 800b706:	4629      	mov	r1, r5
 800b708:	4620      	mov	r0, r4
 800b70a:	f7ff ff31 	bl	800b570 <dyn_list_unlink>
    chHeapFree((void *)dep);
 800b70e:	f7ff fbaf 	bl	800ae70 <chHeapFree>
}
 800b712:	e7ef      	b.n	800b6f4 <dyn_release_object_heap+0x14>
 800b714:	08019da0 	.word	0x08019da0
 800b718:	f3af 8000 	nop.w
 800b71c:	f3af 8000 	nop.w

0800b720 <_factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void _factory_init(void) {
 800b720:	b538      	push	{r3, r4, r5, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 800b722:	4c12      	ldr	r4, [pc, #72]	; (800b76c <_factory_init+0x4c>)
 800b724:	4620      	mov	r0, r4
 800b726:	f7fd ff83 	bl	8009630 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 800b72a:	f104 0310 	add.w	r3, r4, #16
 800b72e:	6123      	str	r3, [r4, #16]
  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 800b730:	4d0f      	ldr	r5, [pc, #60]	; (800b770 <_factory_init+0x50>)
 800b732:	462b      	mov	r3, r5
 800b734:	2204      	movs	r2, #4
 800b736:	2114      	movs	r1, #20
 800b738:	1860      	adds	r0, r4, r1
 800b73a:	f7ff fc21 	bl	800af80 <chPoolObjectInitAligned>
 800b73e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800b742:	6263      	str	r3, [r4, #36]	; 0x24
 800b744:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800b748:	62a3      	str	r3, [r4, #40]	; 0x28
 800b74a:	462b      	mov	r3, r5
 800b74c:	2204      	movs	r2, #4
 800b74e:	211c      	movs	r1, #28
 800b750:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800b754:	f7ff fc14 	bl	800af80 <chPoolObjectInitAligned>
 800b758:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800b75c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b75e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b762:	6423      	str	r3, [r4, #64]	; 0x40
 800b764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b768:	6463      	str	r3, [r4, #68]	; 0x44
  dyn_list_init(&ch_factory.fifo_list);
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
#endif
}
 800b76a:	bd38      	pop	{r3, r4, r5, pc}
 800b76c:	200059f0 	.word	0x200059f0
 800b770:	0800b591 	.word	0x0800b591
 800b774:	f3af 8000 	nop.w
 800b778:	f3af 8000 	nop.w
 800b77c:	f3af 8000 	nop.w

0800b780 <chFactoryRegisterObject>:
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
                                             void *objp) {
 800b780:	b570      	push	{r4, r5, r6, lr}
 800b782:	4605      	mov	r5, r0
 800b784:	460e      	mov	r6, r1
  registered_object_t *rop;

  F_LOCK();
 800b786:	4c09      	ldr	r4, [pc, #36]	; (800b7ac <chFactoryRegisterObject+0x2c>)
 800b788:	4620      	mov	r0, r4
 800b78a:	f7fd ffe1 	bl	8009750 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 800b78e:	f104 0214 	add.w	r2, r4, #20
 800b792:	f104 0110 	add.w	r1, r4, #16
 800b796:	4628      	mov	r0, r5
 800b798:	f7ff ff1a 	bl	800b5d0 <dyn_create_object_pool>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 800b79c:	4604      	mov	r4, r0
 800b79e:	b100      	cbz	r0, 800b7a2 <chFactoryRegisterObject+0x22>
    /* Initializing registered object data.*/
    rop->objp = objp;
 800b7a0:	6106      	str	r6, [r0, #16]
  }

  F_UNLOCK();
 800b7a2:	4802      	ldr	r0, [pc, #8]	; (800b7ac <chFactoryRegisterObject+0x2c>)
 800b7a4:	f7fe f844 	bl	8009830 <chMtxUnlock>

  return rop;
}
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	bd70      	pop	{r4, r5, r6, pc}
 800b7ac:	200059f0 	.word	0x200059f0

0800b7b0 <chFactoryFindObject>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
 800b7b0:	b538      	push	{r3, r4, r5, lr}
 800b7b2:	4605      	mov	r5, r0
  registered_object_t *rop;

  F_LOCK();
 800b7b4:	4c07      	ldr	r4, [pc, #28]	; (800b7d4 <chFactoryFindObject+0x24>)
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7fd ffca 	bl	8009750 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 800b7bc:	f104 0110 	add.w	r1, r4, #16
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	f7ff ff2d 	bl	800b620 <dyn_find_object>
 800b7c6:	4605      	mov	r5, r0

  F_UNLOCK();
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f7fe f831 	bl	8009830 <chMtxUnlock>

  return rop;
}
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	bd38      	pop	{r3, r4, r5, pc}
 800b7d2:	bf00      	nop
 800b7d4:	200059f0 	.word	0x200059f0
 800b7d8:	f3af 8000 	nop.w
 800b7dc:	f3af 8000 	nop.w

0800b7e0 <chFactoryFindObjectByPointer>:
 * @retval NULL         if a registered object with the specified pointer
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObjectByPointer(void *objp) {
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	4605      	mov	r5, r0
  registered_object_t *rop = (registered_object_t *)ch_factory.obj_list.next;
 800b7e4:	480c      	ldr	r0, [pc, #48]	; (800b818 <chFactoryFindObjectByPointer+0x38>)
 800b7e6:	6904      	ldr	r4, [r0, #16]

  F_LOCK();
 800b7e8:	f7fd ffb2 	bl	8009750 <chMtxLock>

  while ((void *)rop != (void *)&ch_factory.obj_list) {
 800b7ec:	4b0b      	ldr	r3, [pc, #44]	; (800b81c <chFactoryFindObjectByPointer+0x3c>)
 800b7ee:	429c      	cmp	r4, r3
 800b7f0:	d00b      	beq.n	800b80a <chFactoryFindObjectByPointer+0x2a>
    if (rop->objp == objp) {
 800b7f2:	6923      	ldr	r3, [r4, #16]
 800b7f4:	42ab      	cmp	r3, r5
 800b7f6:	d001      	beq.n	800b7fc <chFactoryFindObjectByPointer+0x1c>

      F_UNLOCK();

      return rop;
    }
    rop = (registered_object_t *)rop->element.next;
 800b7f8:	6824      	ldr	r4, [r4, #0]
 800b7fa:	e7f7      	b.n	800b7ec <chFactoryFindObjectByPointer+0xc>
      rop->element.refs++;
 800b7fc:	6863      	ldr	r3, [r4, #4]
 800b7fe:	3301      	adds	r3, #1
 800b800:	6063      	str	r3, [r4, #4]
      F_UNLOCK();
 800b802:	4805      	ldr	r0, [pc, #20]	; (800b818 <chFactoryFindObjectByPointer+0x38>)
 800b804:	f7fe f814 	bl	8009830 <chMtxUnlock>
      return rop;
 800b808:	e004      	b.n	800b814 <chFactoryFindObjectByPointer+0x34>
  }

  F_UNLOCK();
 800b80a:	f1a3 0010 	sub.w	r0, r3, #16
 800b80e:	f7fe f80f 	bl	8009830 <chMtxUnlock>

  return NULL;
 800b812:	2400      	movs	r4, #0
}
 800b814:	4620      	mov	r0, r4
 800b816:	bd38      	pop	{r3, r4, r5, pc}
 800b818:	200059f0 	.word	0x200059f0
 800b81c:	20005a00 	.word	0x20005a00

0800b820 <chFactoryReleaseObject>:
 *
 * @param[in] rop       registered object reference
 *
 * @api
 */
void chFactoryReleaseObject(registered_object_t *rop){
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	4605      	mov	r5, r0

  F_LOCK();
 800b824:	4c07      	ldr	r4, [pc, #28]	; (800b844 <chFactoryReleaseObject+0x24>)
 800b826:	4620      	mov	r0, r4
 800b828:	f7fd ff92 	bl	8009750 <chMtxLock>

  dyn_release_object_pool(&rop->element,
 800b82c:	f104 0214 	add.w	r2, r4, #20
 800b830:	f104 0110 	add.w	r1, r4, #16
 800b834:	4628      	mov	r0, r5
 800b836:	f7ff ff0b 	bl	800b650 <dyn_release_object_pool>
                          &ch_factory.obj_list,
                          &ch_factory.obj_pool);

  F_UNLOCK();
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7fd fff8 	bl	8009830 <chMtxUnlock>
}
 800b840:	bd38      	pop	{r3, r4, r5, pc}
 800b842:	bf00      	nop
 800b844:	200059f0 	.word	0x200059f0
 800b848:	f3af 8000 	nop.w
 800b84c:	f3af 8000 	nop.w

0800b850 <chFactoryCreateBuffer>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 800b850:	b570      	push	{r4, r5, r6, lr}
 800b852:	4606      	mov	r6, r0
 800b854:	460d      	mov	r5, r1
  dyn_buffer_t *dbp;

  F_LOCK();
 800b856:	4c0b      	ldr	r4, [pc, #44]	; (800b884 <chFactoryCreateBuffer+0x34>)
 800b858:	4620      	mov	r0, r4
 800b85a:	f7fd ff79 	bl	8009750 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800b85e:	462a      	mov	r2, r5
 800b860:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800b864:	4630      	mov	r0, r6
 800b866:	f7ff ff13 	bl	800b690 <dyn_create_object_heap>
                                               &ch_factory.buf_list,
                                               size);
  if (dbp != NULL) {
 800b86a:	4604      	mov	r4, r0
 800b86c:	b120      	cbz	r0, 800b878 <chFactoryCreateBuffer+0x28>
    /* Initializing buffer object data.*/
    memset((void *)dbp->buffer, 0, size);
 800b86e:	462a      	mov	r2, r5
 800b870:	2100      	movs	r1, #0
 800b872:	3010      	adds	r0, #16
 800b874:	f00c fe24 	bl	80184c0 <memset>
  }

  F_UNLOCK();
 800b878:	4802      	ldr	r0, [pc, #8]	; (800b884 <chFactoryCreateBuffer+0x34>)
 800b87a:	f7fd ffd9 	bl	8009830 <chMtxUnlock>

  return dbp;
}
 800b87e:	4620      	mov	r0, r4
 800b880:	bd70      	pop	{r4, r5, r6, pc}
 800b882:	bf00      	nop
 800b884:	200059f0 	.word	0x200059f0
 800b888:	f3af 8000 	nop.w
 800b88c:	f3af 8000 	nop.w

0800b890 <chFactoryFindBuffer>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4605      	mov	r5, r0
  dyn_buffer_t *dbp;

  F_LOCK();
 800b894:	4c07      	ldr	r4, [pc, #28]	; (800b8b4 <chFactoryFindBuffer+0x24>)
 800b896:	4620      	mov	r0, r4
 800b898:	f7fd ff5a 	bl	8009750 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 800b89c:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	f7ff febd 	bl	800b620 <dyn_find_object>
 800b8a6:	4605      	mov	r5, r0

  F_UNLOCK();
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f7fd ffc1 	bl	8009830 <chMtxUnlock>

  return dbp;
}
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	bd38      	pop	{r3, r4, r5, pc}
 800b8b2:	bf00      	nop
 800b8b4:	200059f0 	.word	0x200059f0
 800b8b8:	f3af 8000 	nop.w
 800b8bc:	f3af 8000 	nop.w

0800b8c0 <chFactoryReleaseBuffer>:
 *
 * @param[in] dbp       dynamic buffer object reference
 *
 * @api
 */
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	4605      	mov	r5, r0

  F_LOCK();
 800b8c4:	4c06      	ldr	r4, [pc, #24]	; (800b8e0 <chFactoryReleaseBuffer+0x20>)
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f7fd ff42 	bl	8009750 <chMtxLock>

  dyn_release_object_heap(&dbp->element, &ch_factory.buf_list);
 800b8cc:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f7ff ff05 	bl	800b6e0 <dyn_release_object_heap>

  F_UNLOCK();
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f7fd ffaa 	bl	8009830 <chMtxUnlock>
}
 800b8dc:	bd38      	pop	{r3, r4, r5, pc}
 800b8de:	bf00      	nop
 800b8e0:	200059f0 	.word	0x200059f0
 800b8e4:	f3af 8000 	nop.w
 800b8e8:	f3af 8000 	nop.w
 800b8ec:	f3af 8000 	nop.w

0800b8f0 <chFactoryCreateSemaphore>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 800b8f0:	b570      	push	{r4, r5, r6, lr}
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	460e      	mov	r6, r1
  dyn_semaphore_t *dsp;

  F_LOCK();
 800b8f6:	4c0b      	ldr	r4, [pc, #44]	; (800b924 <chFactoryCreateSemaphore+0x34>)
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f7fd ff29 	bl	8009750 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 800b8fe:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 800b902:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800b906:	4628      	mov	r0, r5
 800b908:	f7ff fe62 	bl	800b5d0 <dyn_create_object_pool>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 800b90c:	4604      	mov	r4, r0
 800b90e:	b118      	cbz	r0, 800b918 <chFactoryCreateSemaphore+0x28>
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 800b910:	4631      	mov	r1, r6
 800b912:	3010      	adds	r0, #16
 800b914:	f7fd fc44 	bl	80091a0 <chSemObjectInit>
  }

  F_UNLOCK();
 800b918:	4802      	ldr	r0, [pc, #8]	; (800b924 <chFactoryCreateSemaphore+0x34>)
 800b91a:	f7fd ff89 	bl	8009830 <chMtxUnlock>

  return dsp;
}
 800b91e:	4620      	mov	r0, r4
 800b920:	bd70      	pop	{r4, r5, r6, pc}
 800b922:	bf00      	nop
 800b924:	200059f0 	.word	0x200059f0
 800b928:	f3af 8000 	nop.w
 800b92c:	f3af 8000 	nop.w

0800b930 <chFactoryFindSemaphore>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	4605      	mov	r5, r0
  dyn_semaphore_t *dsp;

  F_LOCK();
 800b934:	4c07      	ldr	r4, [pc, #28]	; (800b954 <chFactoryFindSemaphore+0x24>)
 800b936:	4620      	mov	r0, r4
 800b938:	f7fd ff0a 	bl	8009750 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 800b93c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800b940:	4628      	mov	r0, r5
 800b942:	f7ff fe6d 	bl	800b620 <dyn_find_object>
 800b946:	4605      	mov	r5, r0

  F_UNLOCK();
 800b948:	4620      	mov	r0, r4
 800b94a:	f7fd ff71 	bl	8009830 <chMtxUnlock>

  return dsp;
}
 800b94e:	4628      	mov	r0, r5
 800b950:	bd38      	pop	{r3, r4, r5, pc}
 800b952:	bf00      	nop
 800b954:	200059f0 	.word	0x200059f0
 800b958:	f3af 8000 	nop.w
 800b95c:	f3af 8000 	nop.w

0800b960 <chFactoryReleaseSemaphore>:
 *
 * @param[in] dsp       dynamic semaphore object reference
 *
 * @api
 */
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	4605      	mov	r5, r0

  F_LOCK();
 800b964:	4c07      	ldr	r4, [pc, #28]	; (800b984 <chFactoryReleaseSemaphore+0x24>)
 800b966:	4620      	mov	r0, r4
 800b968:	f7fd fef2 	bl	8009750 <chMtxLock>

  dyn_release_object_pool(&dsp->element,
 800b96c:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 800b970:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800b974:	4628      	mov	r0, r5
 800b976:	f7ff fe6b 	bl	800b650 <dyn_release_object_pool>
                          &ch_factory.sem_list,
                          &ch_factory.sem_pool);

  F_UNLOCK();
 800b97a:	4620      	mov	r0, r4
 800b97c:	f7fd ff58 	bl	8009830 <chMtxUnlock>
}
 800b980:	bd38      	pop	{r3, r4, r5, pc}
 800b982:	bf00      	nop
 800b984:	200059f0 	.word	0x200059f0
 800b988:	f3af 8000 	nop.w
 800b98c:	f3af 8000 	nop.w

0800b990 <chFactoryCreateMailbox>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	4606      	mov	r6, r0
 800b994:	460d      	mov	r5, r1
  dyn_mailbox_t *dmp;

  F_LOCK();
 800b996:	4c0c      	ldr	r4, [pc, #48]	; (800b9c8 <chFactoryCreateMailbox+0x38>)
 800b998:	4620      	mov	r0, r4
 800b99a:	f7fd fed9 	bl	8009750 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 800b99e:	f105 020e 	add.w	r2, r5, #14
 800b9a2:	0092      	lsls	r2, r2, #2
 800b9a4:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f7ff fe71 	bl	800b690 <dyn_create_object_heap>
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
                                                (n * sizeof (msg_t)));
  if (dmp != NULL) {
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	b128      	cbz	r0, 800b9be <chFactoryCreateMailbox+0x2e>
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, dmp->msgbuf, n);
 800b9b2:	462a      	mov	r2, r5
 800b9b4:	f100 0138 	add.w	r1, r0, #56	; 0x38
 800b9b8:	3010      	adds	r0, #16
 800b9ba:	f7fe fec1 	bl	800a740 <chMBObjectInit>
  }

  F_UNLOCK();
 800b9be:	4802      	ldr	r0, [pc, #8]	; (800b9c8 <chFactoryCreateMailbox+0x38>)
 800b9c0:	f7fd ff36 	bl	8009830 <chMtxUnlock>

  return dmp;
}
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	bd70      	pop	{r4, r5, r6, pc}
 800b9c8:	200059f0 	.word	0x200059f0
 800b9cc:	f3af 8000 	nop.w

0800b9d0 <chFactoryFindMailbox>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	4605      	mov	r5, r0
  dyn_mailbox_t *dmp;

  F_LOCK();
 800b9d4:	4c07      	ldr	r4, [pc, #28]	; (800b9f4 <chFactoryFindMailbox+0x24>)
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f7fd feba 	bl	8009750 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 800b9dc:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	f7ff fe1d 	bl	800b620 <dyn_find_object>
 800b9e6:	4605      	mov	r5, r0

  F_UNLOCK();
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	f7fd ff21 	bl	8009830 <chMtxUnlock>

  return dmp;
}
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	bd38      	pop	{r3, r4, r5, pc}
 800b9f2:	bf00      	nop
 800b9f4:	200059f0 	.word	0x200059f0
 800b9f8:	f3af 8000 	nop.w
 800b9fc:	f3af 8000 	nop.w

0800ba00 <chFactoryReleaseMailbox>:
 *
 * @param[in] dmp       dynamic mailbox object reference
 *
 * @api
 */
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4605      	mov	r5, r0

  F_LOCK();
 800ba04:	4c06      	ldr	r4, [pc, #24]	; (800ba20 <chFactoryReleaseMailbox+0x20>)
 800ba06:	4620      	mov	r0, r4
 800ba08:	f7fd fea2 	bl	8009750 <chMtxLock>

  dyn_release_object_heap(&dmp->element, &ch_factory.mbx_list);
 800ba0c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800ba10:	4628      	mov	r0, r5
 800ba12:	f7ff fe65 	bl	800b6e0 <dyn_release_object_heap>

  F_UNLOCK();
 800ba16:	4620      	mov	r0, r4
 800ba18:	f7fd ff0a 	bl	8009830 <chMtxUnlock>
}
 800ba1c:	bd38      	pop	{r3, r4, r5, pc}
 800ba1e:	bf00      	nop
 800ba20:	200059f0 	.word	0x200059f0
 800ba24:	f3af 8000 	nop.w
 800ba28:	f3af 8000 	nop.w
 800ba2c:	f3af 8000 	nop.w

0800ba30 <chFactoryCreateObjectsFIFO>:
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
 800ba30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba34:	4607      	mov	r7, r0
 800ba36:	460d      	mov	r5, r1
 800ba38:	4614      	mov	r4, r2
 800ba3a:	4698      	mov	r8, r3
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 800ba3c:	4e1c      	ldr	r6, [pc, #112]	; (800bab0 <chFactoryCreateObjectsFIFO+0x80>)
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f7fd fe86 	bl	8009750 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
                                                      &ch_factory.fifo_list,
                                                      sizeof (dyn_objects_fifo_t) +
 800ba44:	f104 0215 	add.w	r2, r4, #21
                                                      (objn * sizeof (msg_t)) +
                                                      (objn * objsize));
 800ba48:	fb05 f304 	mul.w	r3, r5, r4
  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 800ba4c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ba50:	f106 0140 	add.w	r1, r6, #64	; 0x40
 800ba54:	4638      	mov	r0, r7
 800ba56:	f7ff fe1b 	bl	800b690 <dyn_create_object_heap>
  if (dofp != NULL) {
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	b310      	cbz	r0, 800baa4 <chFactoryCreateObjectsFIFO+0x74>
    /* Initializing mailbox object data.*/
    chFifoObjectInitAligned(&dofp->fifo, objsize, objn, objalign,
 800ba5e:	f100 0910 	add.w	r9, r0, #16
                            (void *)&dofp->msgbuf[objn], dofp->msgbuf);
 800ba62:	f104 0714 	add.w	r7, r4, #20
 800ba66:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800ba6a:	3704      	adds	r7, #4
 800ba6c:	f100 0a54 	add.w	sl, r0, #84	; 0x54
 */
static inline void chFifoObjectInitAligned(objects_fifo_t *ofp, size_t objsize,
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));
 800ba70:	4545      	cmp	r5, r8
 800ba72:	d304      	bcc.n	800ba7e <chFactoryCreateObjectsFIFO+0x4e>
 800ba74:	fbb5 f3f8 	udiv	r3, r5, r8
 800ba78:	fb08 5313 	mls	r3, r8, r3, r5
 800ba7c:	b113      	cbz	r3, 800ba84 <chFactoryCreateObjectsFIFO+0x54>
 800ba7e:	480d      	ldr	r0, [pc, #52]	; (800bab4 <chFactoryCreateObjectsFIFO+0x84>)
 800ba80:	f7fb fe3e 	bl	8007700 <chSysHalt>

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 800ba84:	4642      	mov	r2, r8
 800ba86:	4629      	mov	r1, r5
 800ba88:	4648      	mov	r0, r9
 800ba8a:	f7ff fb39 	bl	800b100 <chGuardedPoolObjectInitAligned>
  chGuardedPoolLoadArray(&ofp->free, objbuf, objn);
 800ba8e:	4622      	mov	r2, r4
 800ba90:	4639      	mov	r1, r7
 800ba92:	4648      	mov	r0, r9
 800ba94:	f7ff fbb4 	bl	800b200 <chGuardedPoolLoadArray>
  chMBObjectInit(&ofp->mbx, msgbuf, objn);
 800ba98:	4622      	mov	r2, r4
 800ba9a:	4651      	mov	r1, sl
 800ba9c:	f109 001c 	add.w	r0, r9, #28
 800baa0:	f7fe fe4e 	bl	800a740 <chMBObjectInit>
  }

  F_UNLOCK();
 800baa4:	4802      	ldr	r0, [pc, #8]	; (800bab0 <chFactoryCreateObjectsFIFO+0x80>)
 800baa6:	f7fd fec3 	bl	8009830 <chMtxUnlock>

  return dofp;
}
 800baaa:	4630      	mov	r0, r6
 800baac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab0:	200059f0 	.word	0x200059f0
 800bab4:	08019db8 	.word	0x08019db8
 800bab8:	f3af 8000 	nop.w
 800babc:	f3af 8000 	nop.w

0800bac0 <chFactoryFindObjectsFIFO>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4605      	mov	r5, r0
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 800bac4:	4c07      	ldr	r4, [pc, #28]	; (800bae4 <chFactoryFindObjectsFIFO+0x24>)
 800bac6:	4620      	mov	r0, r4
 800bac8:	f7fd fe42 	bl	8009750 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 800bacc:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800bad0:	4628      	mov	r0, r5
 800bad2:	f7ff fda5 	bl	800b620 <dyn_find_object>
 800bad6:	4605      	mov	r5, r0

  F_UNLOCK();
 800bad8:	4620      	mov	r0, r4
 800bada:	f7fd fea9 	bl	8009830 <chMtxUnlock>

  return dofp;
}
 800bade:	4628      	mov	r0, r5
 800bae0:	bd38      	pop	{r3, r4, r5, pc}
 800bae2:	bf00      	nop
 800bae4:	200059f0 	.word	0x200059f0
 800bae8:	f3af 8000 	nop.w
 800baec:	f3af 8000 	nop.w

0800baf0 <chFactoryReleaseObjectsFIFO>:
 *
 * @param[in] dofp      dynamic "objects FIFO" object reference
 *
 * @api
 */
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4605      	mov	r5, r0

  F_LOCK();
 800baf4:	4c06      	ldr	r4, [pc, #24]	; (800bb10 <chFactoryReleaseObjectsFIFO+0x20>)
 800baf6:	4620      	mov	r0, r4
 800baf8:	f7fd fe2a 	bl	8009750 <chMtxLock>

  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);
 800bafc:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800bb00:	4628      	mov	r0, r5
 800bb02:	f7ff fded 	bl	800b6e0 <dyn_release_object_heap>

  F_UNLOCK();
 800bb06:	4620      	mov	r0, r4
 800bb08:	f7fd fe92 	bl	8009830 <chMtxUnlock>
}
 800bb0c:	bd38      	pop	{r3, r4, r5, pc}
 800bb0e:	bf00      	nop
 800bb10:	200059f0 	.word	0x200059f0
 800bb14:	f3af 8000 	nop.w
 800bb18:	f3af 8000 	nop.w
 800bb1c:	f3af 8000 	nop.w

0800bb20 <chFactoryCreatePipe>:
 *                      allocated or a dynamic pipe object with
 *                      the same name exists.
 *
 * @api
 */
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 800bb20:	b570      	push	{r4, r5, r6, lr}
 800bb22:	4606      	mov	r6, r0
 800bb24:	460d      	mov	r5, r1
  dyn_pipe_t *dpp;

  F_LOCK();
 800bb26:	4c0c      	ldr	r4, [pc, #48]	; (800bb58 <chFactoryCreatePipe+0x38>)
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f7fd fe11 	bl	8009750 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 800bb2e:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800bb32:	f104 0144 	add.w	r1, r4, #68	; 0x44
 800bb36:	4630      	mov	r0, r6
 800bb38:	f7ff fdaa 	bl	800b690 <dyn_create_object_heap>
                                             &ch_factory.pipe_list,
                                             sizeof (dyn_pipe_t) + size);
  if (dpp != NULL) {
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	b128      	cbz	r0, 800bb4c <chFactoryCreatePipe+0x2c>
    /* Initializing mailbox object data.*/
    chPipeObjectInit(&dpp->pipe, dpp->buffer, size);
 800bb40:	462a      	mov	r2, r5
 800bb42:	f100 0160 	add.w	r1, r0, #96	; 0x60
 800bb46:	3010      	adds	r0, #16
 800bb48:	f7ff fbf2 	bl	800b330 <chPipeObjectInit>
  }

  F_UNLOCK();
 800bb4c:	4802      	ldr	r0, [pc, #8]	; (800bb58 <chFactoryCreatePipe+0x38>)
 800bb4e:	f7fd fe6f 	bl	8009830 <chMtxUnlock>

  return dpp;
}
 800bb52:	4620      	mov	r0, r4
 800bb54:	bd70      	pop	{r4, r5, r6, pc}
 800bb56:	bf00      	nop
 800bb58:	200059f0 	.word	0x200059f0
 800bb5c:	f3af 8000 	nop.w

0800bb60 <chFactoryFindPipe>:
 * @retval NULL         if a dynamic pipe object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4605      	mov	r5, r0
  dyn_pipe_t *dpp;

  F_LOCK();
 800bb64:	4c07      	ldr	r4, [pc, #28]	; (800bb84 <chFactoryFindPipe+0x24>)
 800bb66:	4620      	mov	r0, r4
 800bb68:	f7fd fdf2 	bl	8009750 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_find_object(name, &ch_factory.pipe_list);
 800bb6c:	f104 0144 	add.w	r1, r4, #68	; 0x44
 800bb70:	4628      	mov	r0, r5
 800bb72:	f7ff fd55 	bl	800b620 <dyn_find_object>
 800bb76:	4605      	mov	r5, r0

  F_UNLOCK();
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f7fd fe59 	bl	8009830 <chMtxUnlock>

  return dpp;
}
 800bb7e:	4628      	mov	r0, r5
 800bb80:	bd38      	pop	{r3, r4, r5, pc}
 800bb82:	bf00      	nop
 800bb84:	200059f0 	.word	0x200059f0
 800bb88:	f3af 8000 	nop.w
 800bb8c:	f3af 8000 	nop.w

0800bb90 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4605      	mov	r5, r0

  F_LOCK();
 800bb94:	4c06      	ldr	r4, [pc, #24]	; (800bbb0 <chFactoryReleasePipe+0x20>)
 800bb96:	4620      	mov	r0, r4
 800bb98:	f7fd fdda 	bl	8009750 <chMtxLock>

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);
 800bb9c:	f104 0144 	add.w	r1, r4, #68	; 0x44
 800bba0:	4628      	mov	r0, r5
 800bba2:	f7ff fd9d 	bl	800b6e0 <dyn_release_object_heap>

  F_UNLOCK();
 800bba6:	4620      	mov	r0, r4
 800bba8:	f7fd fe42 	bl	8009830 <chMtxUnlock>
}
 800bbac:	bd38      	pop	{r3, r4, r5, pc}
 800bbae:	bf00      	nop
 800bbb0:	200059f0 	.word	0x200059f0
	...

0800bbc0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800bbc0:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800bbc4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800bbc6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	f3af 8000 	nop.w
 800bbd8:	f3af 8000 	nop.w
 800bbdc:	f3af 8000 	nop.w

0800bbe0 <_port_irq_epilogue>:
 800bbe0:	2320      	movs	r3, #32
 800bbe2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800bbe6:	4b0f      	ldr	r3, [pc, #60]	; (800bc24 <_port_irq_epilogue+0x44>)
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800bbee:	d103      	bne.n	800bbf8 <_port_irq_epilogue+0x18>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	4770      	bx	lr
void _port_irq_epilogue(void) {
 800bbf8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800bbfa:	f3ef 8409 	mrs	r4, PSP
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 800bbfe:	f1a4 0320 	sub.w	r3, r4, #32

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800bc02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bc06:	f844 2c04 	str.w	r2, [r4, #-4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800bc0a:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800bc0e:	f7fc fbcf 	bl	80083b0 <chSchIsPreemptionRequired>
 800bc12:	b118      	cbz	r0, 800bc1c <_port_irq_epilogue+0x3c>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800bc14:	4b04      	ldr	r3, [pc, #16]	; (800bc28 <_port_irq_epilogue+0x48>)
 800bc16:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 800bc1a:	bd10      	pop	{r4, pc}
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800bc1c:	4b03      	ldr	r3, [pc, #12]	; (800bc2c <_port_irq_epilogue+0x4c>)
 800bc1e:	f844 3c08 	str.w	r3, [r4, #-8]
 800bc22:	e7fa      	b.n	800bc1a <_port_irq_epilogue+0x3a>
 800bc24:	e000ed00 	.word	0xe000ed00
 800bc28:	08000309 	.word	0x08000309
 800bc2c:	0800031c 	.word	0x0800031c

0800bc30 <long_to_string_with_divisor>:
BaseSequentialStream* myChp = &SD6;

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 800bc30:	b4f0      	push	{r4, r5, r6, r7}
  int i;
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
 800bc32:	461e      	mov	r6, r3
 800bc34:	b903      	cbnz	r3, 800bc38 <long_to_string_with_divisor+0x8>
    ll = num;
 800bc36:	460e      	mov	r6, r1
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800bc38:	f100 050b 	add.w	r5, r0, #11
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	e006      	b.n	800bc4e <long_to_string_with_divisor+0x1e>
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800bc40:	f803 4d01 	strb.w	r4, [r3, #-1]!
    l /= radix;
 800bc44:	fbb7 f1f2 	udiv	r1, r7, r2
  } while ((ll /= radix) != 0);
 800bc48:	fbb6 f6f2 	udiv	r6, r6, r2
 800bc4c:	b15e      	cbz	r6, 800bc66 <long_to_string_with_divisor+0x36>
    i = (int)(l % radix);
 800bc4e:	460f      	mov	r7, r1
 800bc50:	fbb1 f4f2 	udiv	r4, r1, r2
 800bc54:	fb02 1114 	mls	r1, r2, r4, r1
    i += '0';
 800bc58:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9')
 800bc5c:	2c39      	cmp	r4, #57	; 0x39
 800bc5e:	ddef      	ble.n	800bc40 <long_to_string_with_divisor+0x10>
      i += 'A' - '0' - 10;
 800bc60:	f101 0437 	add.w	r4, r1, #55	; 0x37
 800bc64:	e7ec      	b.n	800bc40 <long_to_string_with_divisor+0x10>

  i = (int)(p + MAX_FILLER - q);
 800bc66:	1aea      	subs	r2, r5, r3
  do
    *p++ = *q++;
 800bc68:	1c41      	adds	r1, r0, #1
 800bc6a:	781c      	ldrb	r4, [r3, #0]
 800bc6c:	7004      	strb	r4, [r0, #0]
 800bc6e:	4608      	mov	r0, r1
 800bc70:	3301      	adds	r3, #1
  while (--i);
 800bc72:	3a01      	subs	r2, #1
 800bc74:	d1f8      	bne.n	800bc68 <long_to_string_with_divisor+0x38>

  return p;
}
 800bc76:	bcf0      	pop	{r4, r5, r6, r7}
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	f3af 8000 	nop.w

0800bc80 <ch_ltoa>:

static char *ch_ltoa(char *p, long num, unsigned radix) {
 800bc80:	b508      	push	{r3, lr}

  return long_to_string_with_divisor(p, num, radix, 0);
 800bc82:	2300      	movs	r3, #0
 800bc84:	f7ff ffd4 	bl	800bc30 <long_to_string_with_divisor>
}
 800bc88:	bd08      	pop	{r3, pc}
 800bc8a:	bf00      	nop
 800bc8c:	f3af 8000 	nop.w

0800bc90 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 800bc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc94:	b087      	sub	sp, #28
 800bc96:	4607      	mov	r7, r0
 800bc98:	460d      	mov	r5, r1
 800bc9a:	9201      	str	r2, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800bc9c:	2600      	movs	r6, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 800bc9e:	f105 0a01 	add.w	sl, r5, #1
 800bca2:	7829      	ldrb	r1, [r5, #0]
    if (c == 0)
 800bca4:	2900      	cmp	r1, #0
 800bca6:	f000 8123 	beq.w	800bef0 <chvprintf+0x260>
      return n;
    if (c != '%') {
 800bcaa:	2925      	cmp	r1, #37	; 0x25
 800bcac:	d006      	beq.n	800bcbc <chvprintf+0x2c>
      streamPut(chp, (uint8_t)c);
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	4638      	mov	r0, r7
 800bcb4:	4798      	blx	r3
      n++;
 800bcb6:	3601      	adds	r6, #1
    c = *fmt++;
 800bcb8:	4655      	mov	r5, sl
      continue;
 800bcba:	e7f0      	b.n	800bc9e <chvprintf+0xe>
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 800bcbc:	786b      	ldrb	r3, [r5, #1]
 800bcbe:	2b2d      	cmp	r3, #45	; 0x2d
 800bcc0:	d009      	beq.n	800bcd6 <chvprintf+0x46>
    left_align = FALSE;
 800bcc2:	f04f 0900 	mov.w	r9, #0
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 800bcc6:	f89a 3000 	ldrb.w	r3, [sl]
 800bcca:	2b30      	cmp	r3, #48	; 0x30
 800bccc:	d008      	beq.n	800bce0 <chvprintf+0x50>
    filler = ' ';
 800bcce:	f04f 0820 	mov.w	r8, #32
      fmt++;
      filler = '0';
    }
    width = 0;
 800bcd2:	2400      	movs	r4, #0
 800bcd4:	e00e      	b.n	800bcf4 <chvprintf+0x64>
      fmt++;
 800bcd6:	f105 0a02 	add.w	sl, r5, #2
      left_align = TRUE;
 800bcda:	f04f 0901 	mov.w	r9, #1
 800bcde:	e7f2      	b.n	800bcc6 <chvprintf+0x36>
      fmt++;
 800bce0:	f10a 0a01 	add.w	sl, sl, #1
      filler = '0';
 800bce4:	f04f 0830 	mov.w	r8, #48	; 0x30
 800bce8:	e7f3      	b.n	800bcd2 <chvprintf+0x42>
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 800bcea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800bcee:	0062      	lsls	r2, r4, #1
 800bcf0:	18d4      	adds	r4, r2, r3
      c = *fmt++;
 800bcf2:	46aa      	mov	sl, r5
 800bcf4:	f10a 0501 	add.w	r5, sl, #1
 800bcf8:	f89a 2000 	ldrb.w	r2, [sl]
      if (c >= '0' && c <= '9')
 800bcfc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	2b09      	cmp	r3, #9
 800bd04:	d9f1      	bls.n	800bcea <chvprintf+0x5a>
      else if (c == '*')
 800bd06:	2a2a      	cmp	r2, #42	; 0x2a
 800bd08:	d104      	bne.n	800bd14 <chvprintf+0x84>
        c = va_arg(ap, int);
 800bd0a:	9b01      	ldr	r3, [sp, #4]
 800bd0c:	1d1a      	adds	r2, r3, #4
 800bd0e:	9201      	str	r2, [sp, #4]
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	e7ea      	b.n	800bcea <chvprintf+0x5a>
    }
    precision = 0;
    if (c == '.') {
 800bd14:	2a2e      	cmp	r2, #46	; 0x2e
 800bd16:	d02d      	beq.n	800bd74 <chvprintf+0xe4>
    precision = 0;
 800bd18:	2300      	movs	r3, #0
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800bd1a:	2a6c      	cmp	r2, #108	; 0x6c
 800bd1c:	d041      	beq.n	800bda2 <chvprintf+0x112>
 800bd1e:	2a4c      	cmp	r2, #76	; 0x4c
 800bd20:	d03f      	beq.n	800bda2 <chvprintf+0x112>
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
 800bd22:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800bd26:	b2c9      	uxtb	r1, r1
 800bd28:	2919      	cmp	r1, #25
 800bd2a:	bf8c      	ite	hi
 800bd2c:	2100      	movhi	r1, #0
 800bd2e:	2101      	movls	r1, #1

    /* Command decoding.*/
    switch (c) {
 800bd30:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 800bd34:	2834      	cmp	r0, #52	; 0x34
 800bd36:	f200 80aa 	bhi.w	800be8e <chvprintf+0x1fe>
 800bd3a:	e8df f000 	tbb	[pc, r0]
 800bd3e:	a863      	.short	0xa863
 800bd40:	63a8a8a8 	.word	0x63a8a8a8
 800bd44:	a8a8a8a8 	.word	0xa8a8a8a8
 800bd48:	a8a87da8 	.word	0xa8a87da8
 800bd4c:	7fa8a8a8 	.word	0x7fa8a8a8
 800bd50:	a83aa8a8 	.word	0xa83aa8a8
 800bd54:	a8a8a8a8 	.word	0xa8a8a8a8
 800bd58:	a8a8a8a8 	.word	0xa8a8a8a8
 800bd5c:	a8633ca8 	.word	0xa8633ca8
 800bd60:	63a8a8a8 	.word	0x63a8a8a8
 800bd64:	a8a8a8a8 	.word	0xa8a8a8a8
 800bd68:	a8a87da8 	.word	0xa8a87da8
 800bd6c:	7fa849a8 	.word	0x7fa849a8
 800bd70:	a8a8      	.short	0xa8a8
 800bd72:	3a          	.byte	0x3a
 800bd73:	00          	.byte	0x00
    precision = 0;
 800bd74:	2300      	movs	r3, #0
 800bd76:	e004      	b.n	800bd82 <chvprintf+0xf2>
        precision *= 10;
 800bd78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bd7c:	005a      	lsls	r2, r3, #1
        precision += c;
 800bd7e:	188b      	adds	r3, r1, r2
        c = *fmt++;
 800bd80:	4605      	mov	r5, r0
 800bd82:	1c68      	adds	r0, r5, #1
 800bd84:	782a      	ldrb	r2, [r5, #0]
        if (c >= '0' && c <= '9')
 800bd86:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bd8a:	b2c9      	uxtb	r1, r1
 800bd8c:	2909      	cmp	r1, #9
 800bd8e:	d9f3      	bls.n	800bd78 <chvprintf+0xe8>
        else if (c == '*')
 800bd90:	2a2a      	cmp	r2, #42	; 0x2a
 800bd92:	d104      	bne.n	800bd9e <chvprintf+0x10e>
          c = va_arg(ap, int);
 800bd94:	9a01      	ldr	r2, [sp, #4]
 800bd96:	1d11      	adds	r1, r2, #4
 800bd98:	9101      	str	r1, [sp, #4]
 800bd9a:	7811      	ldrb	r1, [r2, #0]
 800bd9c:	e7ec      	b.n	800bd78 <chvprintf+0xe8>
        c = *fmt++;
 800bd9e:	4605      	mov	r5, r0
 800bda0:	e7bb      	b.n	800bd1a <chvprintf+0x8a>
      if (*fmt)
 800bda2:	7829      	ldrb	r1, [r5, #0]
 800bda4:	b119      	cbz	r1, 800bdae <chvprintf+0x11e>
        c = *fmt++;
 800bda6:	3501      	adds	r5, #1
 800bda8:	460a      	mov	r2, r1
      is_long = TRUE;
 800bdaa:	2101      	movs	r1, #1
 800bdac:	e7c0      	b.n	800bd30 <chvprintf+0xa0>
 800bdae:	2101      	movs	r1, #1
 800bdb0:	e7be      	b.n	800bd30 <chvprintf+0xa0>
      p = ftoa(p, f, precision);
      break;
#endif
    case 'X':
    case 'x':
      c = 16;
 800bdb2:	2210      	movs	r2, #16
 800bdb4:	e043      	b.n	800be3e <chvprintf+0x1ae>
      *p++ = va_arg(ap, int);
 800bdb6:	9b01      	ldr	r3, [sp, #4]
 800bdb8:	1d1a      	adds	r2, r3, #4
 800bdba:	9201      	str	r2, [sp, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f10d 0a18 	add.w	sl, sp, #24
 800bdc2:	f80a 3d0c 	strb.w	r3, [sl, #-12]!
      filler = ' ';
 800bdc6:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
 800bdca:	f10d 000d 	add.w	r0, sp, #13
      break;
 800bdce:	e040      	b.n	800be52 <chvprintf+0x1c2>
      if ((s = va_arg(ap, char *)) == 0)
 800bdd0:	9a01      	ldr	r2, [sp, #4]
 800bdd2:	1d11      	adds	r1, r2, #4
 800bdd4:	9101      	str	r1, [sp, #4]
 800bdd6:	f8d2 a000 	ldr.w	sl, [r2]
 800bdda:	f1ba 0f00 	cmp.w	sl, #0
 800bdde:	d002      	beq.n	800bde6 <chvprintf+0x156>
      if (precision == 0)
 800bde0:	b16b      	cbz	r3, 800bdfe <chvprintf+0x16e>
        precision = 32767;
 800bde2:	4650      	mov	r0, sl
 800bde4:	e003      	b.n	800bdee <chvprintf+0x15e>
        s = "(null)";
 800bde6:	f8df a110 	ldr.w	sl, [pc, #272]	; 800bef8 <chvprintf+0x268>
 800bdea:	e7f9      	b.n	800bde0 <chvprintf+0x150>
      for (p = s; *p && (--precision >= 0); p++)
 800bdec:	3001      	adds	r0, #1
 800bdee:	7802      	ldrb	r2, [r0, #0]
 800bdf0:	2a00      	cmp	r2, #0
 800bdf2:	d053      	beq.n	800be9c <chvprintf+0x20c>
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	d5f9      	bpl.n	800bdec <chvprintf+0x15c>
      filler = ' ';
 800bdf8:	f04f 0820 	mov.w	r8, #32
 800bdfc:	e029      	b.n	800be52 <chvprintf+0x1c2>
        precision = 32767;
 800bdfe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800be02:	e7ee      	b.n	800bde2 <chvprintf+0x152>
      if (is_long)
 800be04:	b161      	cbz	r1, 800be20 <chvprintf+0x190>
        l = va_arg(ap, long);
 800be06:	9b01      	ldr	r3, [sp, #4]
 800be08:	1d1a      	adds	r2, r3, #4
 800be0a:	9201      	str	r2, [sp, #4]
 800be0c:	6819      	ldr	r1, [r3, #0]
      if (l < 0) {
 800be0e:	2900      	cmp	r1, #0
 800be10:	db0b      	blt.n	800be2a <chvprintf+0x19a>
    p = tmpbuf;
 800be12:	a803      	add	r0, sp, #12
      p = ch_ltoa(p, l, 10);
 800be14:	220a      	movs	r2, #10
 800be16:	f7ff ff33 	bl	800bc80 <ch_ltoa>
    s = tmpbuf;
 800be1a:	f10d 0a0c 	add.w	sl, sp, #12
      break;
 800be1e:	e018      	b.n	800be52 <chvprintf+0x1c2>
        l = va_arg(ap, int);
 800be20:	9b01      	ldr	r3, [sp, #4]
 800be22:	1d1a      	adds	r2, r3, #4
 800be24:	9201      	str	r2, [sp, #4]
 800be26:	6819      	ldr	r1, [r3, #0]
 800be28:	e7f1      	b.n	800be0e <chvprintf+0x17e>
        *p++ = '-';
 800be2a:	232d      	movs	r3, #45	; 0x2d
 800be2c:	f88d 300c 	strb.w	r3, [sp, #12]
        l = -l;
 800be30:	4249      	negs	r1, r1
        *p++ = '-';
 800be32:	f10d 000d 	add.w	r0, sp, #13
 800be36:	e7ed      	b.n	800be14 <chvprintf+0x184>
    case 'u':
      c = 10;
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
 800be38:	2208      	movs	r2, #8
 800be3a:	e000      	b.n	800be3e <chvprintf+0x1ae>
      c = 10;
 800be3c:	220a      	movs	r2, #10
unsigned_common:
      if (is_long)
 800be3e:	b309      	cbz	r1, 800be84 <chvprintf+0x1f4>
        l = va_arg(ap, unsigned long);
 800be40:	9b01      	ldr	r3, [sp, #4]
 800be42:	1d19      	adds	r1, r3, #4
 800be44:	9101      	str	r1, [sp, #4]
 800be46:	6819      	ldr	r1, [r3, #0]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
 800be48:	a803      	add	r0, sp, #12
 800be4a:	f7ff ff19 	bl	800bc80 <ch_ltoa>
    s = tmpbuf;
 800be4e:	f10d 0a0c 	add.w	sl, sp, #12
      break;
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
 800be52:	eba0 0b0a 	sub.w	fp, r0, sl
    if ((width -= i) < 0)
 800be56:	ebb4 040b 	subs.w	r4, r4, fp
 800be5a:	d422      	bmi.n	800bea2 <chvprintf+0x212>
      width = 0;
    if (left_align == FALSE)
 800be5c:	f1b9 0f00 	cmp.w	r9, #0
 800be60:	d100      	bne.n	800be64 <chvprintf+0x1d4>
      width = -width;
 800be62:	4264      	negs	r4, r4
    if (width < 0) {
 800be64:	2c00      	cmp	r4, #0
 800be66:	db1e      	blt.n	800bea6 <chvprintf+0x216>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800be68:	f1bb 0b01 	subs.w	fp, fp, #1
 800be6c:	d435      	bmi.n	800beda <chvprintf+0x24a>
      streamPut(chp, (uint8_t)*s++);
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	f10a 0901 	add.w	r9, sl, #1
 800be76:	f89a 1000 	ldrb.w	r1, [sl]
 800be7a:	4638      	mov	r0, r7
 800be7c:	4798      	blx	r3
      n++;
 800be7e:	3601      	adds	r6, #1
      streamPut(chp, (uint8_t)*s++);
 800be80:	46ca      	mov	sl, r9
 800be82:	e7f1      	b.n	800be68 <chvprintf+0x1d8>
        l = va_arg(ap, unsigned int);
 800be84:	9b01      	ldr	r3, [sp, #4]
 800be86:	1d19      	adds	r1, r3, #4
 800be88:	9101      	str	r1, [sp, #4]
 800be8a:	6819      	ldr	r1, [r3, #0]
 800be8c:	e7dc      	b.n	800be48 <chvprintf+0x1b8>
      *p++ = c;
 800be8e:	f10d 0a18 	add.w	sl, sp, #24
 800be92:	f80a 2d0c 	strb.w	r2, [sl, #-12]!
 800be96:	f10d 000d 	add.w	r0, sp, #13
      break;
 800be9a:	e7da      	b.n	800be52 <chvprintf+0x1c2>
      filler = ' ';
 800be9c:	f04f 0820 	mov.w	r8, #32
 800bea0:	e7d7      	b.n	800be52 <chvprintf+0x1c2>
      width = 0;
 800bea2:	2400      	movs	r4, #0
 800bea4:	e7da      	b.n	800be5c <chvprintf+0x1cc>
      if (*s == '-' && filler == '0') {
 800bea6:	f89a 1000 	ldrb.w	r1, [sl]
 800beaa:	292d      	cmp	r1, #45	; 0x2d
 800beac:	d008      	beq.n	800bec0 <chvprintf+0x230>
        streamPut(chp, (uint8_t)filler);
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	4641      	mov	r1, r8
 800beb4:	4638      	mov	r0, r7
 800beb6:	4798      	blx	r3
        n++;
 800beb8:	3601      	adds	r6, #1
      } while (++width != 0);
 800beba:	3401      	adds	r4, #1
 800bebc:	d1f7      	bne.n	800beae <chvprintf+0x21e>
 800bebe:	e7d3      	b.n	800be68 <chvprintf+0x1d8>
      if (*s == '-' && filler == '0') {
 800bec0:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 800bec4:	d1f3      	bne.n	800beae <chvprintf+0x21e>
        streamPut(chp, (uint8_t)*s++);
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	f10a 0a01 	add.w	sl, sl, #1
 800bece:	4638      	mov	r0, r7
 800bed0:	4798      	blx	r3
        n++;
 800bed2:	3601      	adds	r6, #1
        i--;
 800bed4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bed8:	e7e9      	b.n	800beae <chvprintf+0x21e>
    }

    while (width) {
 800beda:	2c00      	cmp	r4, #0
 800bedc:	f43f aedf 	beq.w	800bc9e <chvprintf+0xe>
      streamPut(chp, (uint8_t)filler);
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	4641      	mov	r1, r8
 800bee6:	4638      	mov	r0, r7
 800bee8:	4798      	blx	r3
      n++;
 800beea:	3601      	adds	r6, #1
      width--;
 800beec:	3c01      	subs	r4, #1
 800beee:	e7f4      	b.n	800beda <chvprintf+0x24a>
    }
  }
}
 800bef0:	4630      	mov	r0, r6
 800bef2:	b007      	add	sp, #28
 800bef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef8:	0801a530 	.word	0x0801a530
 800befc:	f3af 8000 	nop.w

0800bf00 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 800bf00:	b40e      	push	{r1, r2, r3}
 800bf02:	b500      	push	{lr}
 800bf04:	b082      	sub	sp, #8
 800bf06:	aa03      	add	r2, sp, #12
 800bf08:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800bf0c:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 800bf0e:	f7ff febf 	bl	800bc90 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 800bf12:	b002      	add	sp, #8
 800bf14:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf18:	b003      	add	sp, #12
 800bf1a:	4770      	bx	lr
 800bf1c:	f3af 8000 	nop.w

0800bf20 <myPrintf>:

/*
 * Customized printf without BaseSequentionalStream object
 */
int myPrintf(const char *fmt, ...) {
 800bf20:	b40f      	push	{r0, r1, r2, r3}
 800bf22:	b500      	push	{lr}
 800bf24:	b083      	sub	sp, #12
 800bf26:	aa04      	add	r2, sp, #16
 800bf28:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800bf2c:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(myChp, fmt, ap);
 800bf2e:	4b04      	ldr	r3, [pc, #16]	; (800bf40 <myPrintf+0x20>)
 800bf30:	6818      	ldr	r0, [r3, #0]
 800bf32:	f7ff fead 	bl	800bc90 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 800bf36:	b003      	add	sp, #12
 800bf38:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf3c:	b004      	add	sp, #16
 800bf3e:	4770      	bx	lr
 800bf40:	20001a20 	.word	0x20001a20
 800bf44:	f3af 8000 	nop.w
 800bf48:	f3af 8000 	nop.w
 800bf4c:	f3af 8000 	nop.w

0800bf50 <chvsnprintf>:
 *                      terminating NUL byte) that would have been
 *                      stored in @p str if there was room.
 *
 * @api
 */
int chvsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
 800bf50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf52:	b087      	sub	sp, #28
 800bf54:	4605      	mov	r5, r0
 800bf56:	4616      	mov	r6, r2
 800bf58:	461f      	mov	r7, r3
  MemoryStream ms;
  BaseSequentialStream *chp;
  size_t size_wo_nul;
  int retval;

  if (size > 0)
 800bf5a:	460c      	mov	r4, r1
 800bf5c:	b189      	cbz	r1, 800bf82 <chvsnprintf+0x32>
    size_wo_nul = size - 1;
 800bf5e:	1e4a      	subs	r2, r1, #1
  else
    size_wo_nul = 0;

  /* Memory stream object to be used as a string writer, reserving one
     byte for the final zero.*/
  msObjectInit(&ms, (uint8_t *)str, size_wo_nul, 0);
 800bf60:	2300      	movs	r3, #0
 800bf62:	4629      	mov	r1, r5
 800bf64:	a801      	add	r0, sp, #4
 800bf66:	f000 f873 	bl	800c050 <msObjectInit>

  /* Performing the print operation using the common code.*/
  chp = (BaseSequentialStream *)(void *)&ms;
  retval = chvprintf(chp, fmt, ap);
 800bf6a:	463a      	mov	r2, r7
 800bf6c:	4631      	mov	r1, r6
 800bf6e:	a801      	add	r0, sp, #4
 800bf70:	f7ff fe8e 	bl	800bc90 <chvprintf>

  /* Terminate with a zero, unless size==0.*/
  if (ms.eos < size) {
 800bf74:	9b04      	ldr	r3, [sp, #16]
 800bf76:	42a3      	cmp	r3, r4
 800bf78:	d201      	bcs.n	800bf7e <chvsnprintf+0x2e>
    str[ms.eos] = 0;
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	54ea      	strb	r2, [r5, r3]
  }

  /* Return number of bytes that would have been written.*/
  return retval;
}
 800bf7e:	b007      	add	sp, #28
 800bf80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_wo_nul = 0;
 800bf82:	460a      	mov	r2, r1
 800bf84:	e7ec      	b.n	800bf60 <chvsnprintf+0x10>
 800bf86:	bf00      	nop
 800bf88:	f3af 8000 	nop.w
 800bf8c:	f3af 8000 	nop.w

0800bf90 <chsnprintf>:
int chsnprintf(char *str, size_t size, const char *fmt, ...) {
 800bf90:	b40c      	push	{r2, r3}
 800bf92:	b500      	push	{lr}
 800bf94:	b083      	sub	sp, #12
 800bf96:	ab04      	add	r3, sp, #16
 800bf98:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 800bf9c:	9301      	str	r3, [sp, #4]
  retval = chvsnprintf(str, size, fmt, ap);
 800bf9e:	f7ff ffd7 	bl	800bf50 <chvsnprintf>
}
 800bfa2:	b003      	add	sp, #12
 800bfa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfa8:	b002      	add	sp, #8
 800bfaa:	4770      	bx	lr
 800bfac:	0000      	movs	r0, r0
	...

0800bfb0 <_put>:
}

static msg_t _put(void *ip, uint8_t b) {
  MemoryStream *msp = ip;

  if (msp->size - msp->eos <= 0)
 800bfb0:	6882      	ldr	r2, [r0, #8]
 800bfb2:	68c3      	ldr	r3, [r0, #12]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d006      	beq.n	800bfc6 <_put+0x16>
    return MSG_RESET;
  *(msp->buffer + msp->eos) = b;
 800bfb8:	6842      	ldr	r2, [r0, #4]
 800bfba:	54d1      	strb	r1, [r2, r3]
  msp->eos += 1;
 800bfbc:	68c3      	ldr	r3, [r0, #12]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	60c3      	str	r3, [r0, #12]
  return MSG_OK;
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	4770      	bx	lr
    return MSG_RESET;
 800bfc6:	f06f 0001 	mvn.w	r0, #1
}
 800bfca:	4770      	bx	lr
 800bfcc:	f3af 8000 	nop.w

0800bfd0 <_get>:

static msg_t _get(void *ip) {
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
 800bfd0:	68c2      	ldr	r2, [r0, #12]
 800bfd2:	6903      	ldr	r3, [r0, #16]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d005      	beq.n	800bfe4 <_get+0x14>
    return MSG_RESET;
  b = *(msp->buffer + msp->offset);
 800bfd8:	6842      	ldr	r2, [r0, #4]
 800bfda:	5cd2      	ldrb	r2, [r2, r3]
  msp->offset += 1;
 800bfdc:	3301      	adds	r3, #1
 800bfde:	6103      	str	r3, [r0, #16]
  return b;
 800bfe0:	4610      	mov	r0, r2
 800bfe2:	4770      	bx	lr
    return MSG_RESET;
 800bfe4:	f06f 0001 	mvn.w	r0, #1
}
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	f3af 8000 	nop.w

0800bff0 <_reads>:
static size_t _reads(void *ip, uint8_t *bp, size_t n) {
 800bff0:	b538      	push	{r3, r4, r5, lr}
 800bff2:	4605      	mov	r5, r0
 800bff4:	4608      	mov	r0, r1
  if (msp->eos - msp->offset < n)
 800bff6:	68ec      	ldr	r4, [r5, #12]
 800bff8:	692b      	ldr	r3, [r5, #16]
 800bffa:	1ae4      	subs	r4, r4, r3
 800bffc:	4294      	cmp	r4, r2
 800bffe:	d209      	bcs.n	800c014 <_reads+0x24>
  memcpy(bp, msp->buffer + msp->offset, n);
 800c000:	6869      	ldr	r1, [r5, #4]
 800c002:	4622      	mov	r2, r4
 800c004:	4419      	add	r1, r3
 800c006:	f00b ffab 	bl	8017f60 <memcpy>
  msp->offset += n;
 800c00a:	692b      	ldr	r3, [r5, #16]
 800c00c:	4423      	add	r3, r4
 800c00e:	612b      	str	r3, [r5, #16]
}
 800c010:	4620      	mov	r0, r4
 800c012:	bd38      	pop	{r3, r4, r5, pc}
  if (msp->eos - msp->offset < n)
 800c014:	4614      	mov	r4, r2
 800c016:	e7f3      	b.n	800c000 <_reads+0x10>
 800c018:	f3af 8000 	nop.w
 800c01c:	f3af 8000 	nop.w

0800c020 <_writes>:
static size_t _writes(void *ip, const uint8_t *bp, size_t n) {
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	4605      	mov	r5, r0
  if (msp->size - msp->eos < n)
 800c024:	6884      	ldr	r4, [r0, #8]
 800c026:	68c3      	ldr	r3, [r0, #12]
 800c028:	1ae4      	subs	r4, r4, r3
 800c02a:	4294      	cmp	r4, r2
 800c02c:	d209      	bcs.n	800c042 <_writes+0x22>
  memcpy(msp->buffer + msp->eos, bp, n);
 800c02e:	6868      	ldr	r0, [r5, #4]
 800c030:	4622      	mov	r2, r4
 800c032:	4418      	add	r0, r3
 800c034:	f00b ff94 	bl	8017f60 <memcpy>
  msp->eos += n;
 800c038:	68eb      	ldr	r3, [r5, #12]
 800c03a:	4423      	add	r3, r4
 800c03c:	60eb      	str	r3, [r5, #12]
}
 800c03e:	4620      	mov	r0, r4
 800c040:	bd38      	pop	{r3, r4, r5, pc}
  if (msp->size - msp->eos < n)
 800c042:	4614      	mov	r4, r2
 800c044:	e7f3      	b.n	800c02e <_writes+0xe>
 800c046:	bf00      	nop
 800c048:	f3af 8000 	nop.w
 800c04c:	f3af 8000 	nop.w

0800c050 <msObjectInit>:
 * @param[in] eos       initial End Of Stream offset. Normally you need to
 *                      put this to zero for RAM buffers or equal to @p size
 *                      for ROM streams.
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {
 800c050:	b410      	push	{r4}

  msp->vmt    = &vmt;
 800c052:	4c04      	ldr	r4, [pc, #16]	; (800c064 <msObjectInit+0x14>)
 800c054:	6004      	str	r4, [r0, #0]
  msp->buffer = buffer;
 800c056:	6041      	str	r1, [r0, #4]
  msp->size   = size;
 800c058:	6082      	str	r2, [r0, #8]
  msp->eos    = eos;
 800c05a:	60c3      	str	r3, [r0, #12]
  msp->offset = 0;
 800c05c:	2300      	movs	r3, #0
 800c05e:	6103      	str	r3, [r0, #16]
}
 800c060:	bc10      	pop	{r4}
 800c062:	4770      	bx	lr
 800c064:	08019dd0 	.word	0x08019dd0
	...

0800c070 <writes>:

  (void)ip;
  (void)bp;

  return n;
}
 800c070:	4610      	mov	r0, r2
 800c072:	4770      	bx	lr
 800c074:	f3af 8000 	nop.w
 800c078:	f3af 8000 	nop.w
 800c07c:	f3af 8000 	nop.w

0800c080 <reads>:
  (void)ip;
  (void)bp;
  (void)n;

  return 0;
}
 800c080:	2000      	movs	r0, #0
 800c082:	4770      	bx	lr
 800c084:	f3af 8000 	nop.w
 800c088:	f3af 8000 	nop.w
 800c08c:	f3af 8000 	nop.w

0800c090 <put>:

  (void)ip;
  (void)b;

  return MSG_OK;
}
 800c090:	2000      	movs	r0, #0
 800c092:	4770      	bx	lr
 800c094:	f3af 8000 	nop.w
 800c098:	f3af 8000 	nop.w
 800c09c:	f3af 8000 	nop.w

0800c0a0 <get>:
static msg_t get(void *ip) {

  (void)ip;

  return 4;
}
 800c0a0:	2004      	movs	r0, #4
 800c0a2:	4770      	bx	lr
 800c0a4:	f3af 8000 	nop.w
 800c0a8:	f3af 8000 	nop.w
 800c0ac:	f3af 8000 	nop.w

0800c0b0 <nullObjectInit>:
 *
 * @param[out] nsp      pointer to the @p NullStream object to be initialized
 */
void nullObjectInit(NullStream *nsp) {

  nsp->vmt = &vmt;
 800c0b0:	4b01      	ldr	r3, [pc, #4]	; (800c0b8 <nullObjectInit+0x8>)
 800c0b2:	6003      	str	r3, [r0, #0]
}
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop
 800c0b8:	08019de4 	.word	0x08019de4
 800c0bc:	00000000 	.word	0x00000000

0800c0c0 <list_commands>:
  }

  return *p != '\0' ? p : NULL;
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	460c      	mov	r4, r1

  while (scp->sc_name != NULL) {
 800c0c6:	e004      	b.n	800c0d2 <list_commands+0x12>
    chprintf(chp, "%s ", scp->sc_name);
 800c0c8:	4904      	ldr	r1, [pc, #16]	; (800c0dc <list_commands+0x1c>)
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	f7ff ff18 	bl	800bf00 <chprintf>
    scp++;
 800c0d0:	3408      	adds	r4, #8
  while (scp->sc_name != NULL) {
 800c0d2:	6822      	ldr	r2, [r4, #0]
 800c0d4:	2a00      	cmp	r2, #0
 800c0d6:	d1f7      	bne.n	800c0c8 <list_commands+0x8>
  }
}
 800c0d8:	bd38      	pop	{r3, r4, r5, pc}
 800c0da:	bf00      	nop
 800c0dc:	0801a538 	.word	0x0801a538

0800c0e0 <cmdexec>:

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	460e      	mov	r6, r1
 800c0e6:	4615      	mov	r5, r2
 800c0e8:	461f      	mov	r7, r3

  while (scp->sc_name != NULL) {
 800c0ea:	6820      	ldr	r0, [r4, #0]
 800c0ec:	b160      	cbz	r0, 800c108 <cmdexec+0x28>
    if (strcmp(scp->sc_name, name) == 0) {
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	f00b ffda 	bl	80180a8 <strcmp>
 800c0f4:	b108      	cbz	r0, 800c0fa <cmdexec+0x1a>
      scp->sc_function(chp, argc, argv);
      return false;
    }
    scp++;
 800c0f6:	3408      	adds	r4, #8
 800c0f8:	e7f7      	b.n	800c0ea <cmdexec+0xa>
      scp->sc_function(chp, argc, argv);
 800c0fa:	6863      	ldr	r3, [r4, #4]
 800c0fc:	9a06      	ldr	r2, [sp, #24]
 800c0fe:	4639      	mov	r1, r7
 800c100:	4630      	mov	r0, r6
 800c102:	4798      	blx	r3
      return false;
 800c104:	2000      	movs	r0, #0
 800c106:	e000      	b.n	800c10a <cmdexec+0x2a>
  }
  return true;
 800c108:	2001      	movs	r0, #1
}
 800c10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c10c:	f3af 8000 	nop.w

0800c110 <parse_arguments>:
static char *parse_arguments(char *str, char **saveptr) {
 800c110:	b538      	push	{r3, r4, r5, lr}
  if (str != NULL)
 800c112:	b100      	cbz	r0, 800c116 <parse_arguments+0x6>
    *saveptr = str;
 800c114:	6008      	str	r0, [r1, #0]
  p = *saveptr;
 800c116:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 800c118:	b1ac      	cbz	r4, 800c146 <parse_arguments+0x36>
 800c11a:	460d      	mov	r5, r1
  p += strspn(p, " \t");
 800c11c:	490f      	ldr	r1, [pc, #60]	; (800c15c <parse_arguments+0x4c>)
 800c11e:	4620      	mov	r0, r4
 800c120:	f00c fbaa 	bl	8018878 <strspn>
 800c124:	4404      	add	r4, r0
  if (*p == '"') {
 800c126:	7823      	ldrb	r3, [r4, #0]
 800c128:	2b22      	cmp	r3, #34	; 0x22
 800c12a:	d00e      	beq.n	800c14a <parse_arguments+0x3a>
    *saveptr = strpbrk(p, " \t");
 800c12c:	490b      	ldr	r1, [pc, #44]	; (800c15c <parse_arguments+0x4c>)
 800c12e:	4620      	mov	r0, r4
 800c130:	f00c fb80 	bl	8018834 <strpbrk>
 800c134:	6028      	str	r0, [r5, #0]
  if (*saveptr != NULL) {
 800c136:	682b      	ldr	r3, [r5, #0]
 800c138:	b11b      	cbz	r3, 800c142 <parse_arguments+0x32>
    *(*saveptr)++ = '\0';
 800c13a:	1c5a      	adds	r2, r3, #1
 800c13c:	602a      	str	r2, [r5, #0]
 800c13e:	2200      	movs	r2, #0
 800c140:	701a      	strb	r2, [r3, #0]
  return *p != '\0' ? p : NULL;
 800c142:	7823      	ldrb	r3, [r4, #0]
 800c144:	b143      	cbz	r3, 800c158 <parse_arguments+0x48>
}
 800c146:	4620      	mov	r0, r4
 800c148:	bd38      	pop	{r3, r4, r5, pc}
    p++;
 800c14a:	3401      	adds	r4, #1
    *saveptr = strpbrk(p, "\"");
 800c14c:	2122      	movs	r1, #34	; 0x22
 800c14e:	4620      	mov	r0, r4
 800c150:	f00c fa20 	bl	8018594 <strchr>
 800c154:	6028      	str	r0, [r5, #0]
 800c156:	e7ee      	b.n	800c136 <parse_arguments+0x26>
  return *p != '\0' ? p : NULL;
 800c158:	2400      	movs	r4, #0
 800c15a:	e7f4      	b.n	800c146 <parse_arguments+0x36>
 800c15c:	0801a53c 	.word	0x0801a53c

0800c160 <shellInit>:
  esp->next = (event_listener_t *)esp;
 800c160:	4b01      	ldr	r3, [pc, #4]	; (800c168 <shellInit+0x8>)
 800c162:	601b      	str	r3, [r3, #0]
void shellInit(void) {

#if !defined(_CHIBIOS_NIL_)
  chEvtObjectInit(&shell_terminated);
#endif
}
 800c164:	4770      	bx	lr
 800c166:	bf00      	nop
 800c168:	20005a38 	.word	0x20005a38
 800c16c:	f3af 8000 	nop.w

0800c170 <shellExit>:
 *
 * @param[in] msg       shell exit code
 *
 * @api
 */
void shellExit(msg_t msg) {
 800c170:	b510      	push	{r4, lr}
 800c172:	4604      	mov	r4, r0
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800c174:	2320      	movs	r3, #32
 800c176:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800c17a:	f7fc ff51 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800c17e:	f7fb fc4f 	bl	8007a20 <_dbg_check_lock>
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 800c182:	2100      	movs	r1, #0
 800c184:	4803      	ldr	r0, [pc, #12]	; (800c194 <shellExit+0x24>)
 800c186:	f7fd fedb 	bl	8009f40 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 800c18a:	4620      	mov	r0, r4
 800c18c:	f7fc fbd8 	bl	8008940 <chThdExitS>
}
 800c190:	bd10      	pop	{r4, pc}
 800c192:	bf00      	nop
 800c194:	20005a38 	.word	0x20005a38
 800c198:	f3af 8000 	nop.w
 800c19c:	f3af 8000 	nop.w

0800c1a0 <shellGetLine>:
 * @retval true         the channel was reset or CTRL-D pressed.
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(ShellConfig *scfg, char *line, unsigned size, ShellHistory *shp) {
 800c1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	460e      	mov	r6, r1
 800c1a6:	4617      	mov	r7, r2
  char *p = line;
  BaseSequentialStream *chp = scfg->sc_channel;
 800c1a8:	6804      	ldr	r4, [r0, #0]
  char *p = line;
 800c1aa:	460d      	mov	r5, r1
 800c1ac:	e027      	b.n	800c1fe <shellGetLine+0x5e>
      continue;
    }
#endif
#if (SHELL_CMD_EXIT_ENABLED == TRUE) && !defined(_CHIBIOS_NIL_)
    if (c == 4) {
      chprintf(chp, "^D");
 800c1ae:	4922      	ldr	r1, [pc, #136]	; (800c238 <shellGetLine+0x98>)
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f7ff fea5 	bl	800bf00 <chprintf>
      return true;
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	e03b      	b.n	800c232 <shellGetLine+0x92>
    }
#endif
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 800c1ba:	42b5      	cmp	r5, r6
 800c1bc:	d01f      	beq.n	800c1fe <shellGetLine+0x5e>
        streamPut(chp, 0x08);
 800c1be:	6823      	ldr	r3, [r4, #0]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	2108      	movs	r1, #8
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	4798      	blx	r3
        streamPut(chp, 0x20);
 800c1c8:	6823      	ldr	r3, [r4, #0]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	2120      	movs	r1, #32
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	4798      	blx	r3
        streamPut(chp, 0x08);
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	2108      	movs	r1, #8
 800c1d8:	4620      	mov	r0, r4
 800c1da:	4798      	blx	r3
        p--;
 800c1dc:	3d01      	subs	r5, #1
      }
      continue;
 800c1de:	e00e      	b.n	800c1fe <shellGetLine+0x5e>
    }
    if (c == '\r') {
      chprintf(chp, SHELL_NEWLINE_STR);
 800c1e0:	4916      	ldr	r1, [pc, #88]	; (800c23c <shellGetLine+0x9c>)
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f7ff fe8c 	bl	800bf00 <chprintf>
#if SHELL_USE_HISTORY == TRUE
      save_history(shp, line, p - line);
#endif
      *p = 0;
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	7028      	strb	r0, [r5, #0]
      return false;
 800c1ec:	e021      	b.n	800c232 <shellGetLine+0x92>
    }
#endif
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
      streamPut(chp, c);
 800c1ee:	6823      	ldr	r3, [r4, #0]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	4798      	blx	r3
      *p++ = (char)c;
 800c1f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c1fa:	702b      	strb	r3, [r5, #0]
 800c1fc:	3501      	adds	r5, #1
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	2201      	movs	r2, #1
 800c204:	f10d 0107 	add.w	r1, sp, #7
 800c208:	4620      	mov	r0, r4
 800c20a:	4798      	blx	r3
 800c20c:	b180      	cbz	r0, 800c230 <shellGetLine+0x90>
    if (c == 4) {
 800c20e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c212:	2904      	cmp	r1, #4
 800c214:	d0cb      	beq.n	800c1ae <shellGetLine+0xe>
    if ((c == 8) || (c == 127)) {
 800c216:	2908      	cmp	r1, #8
 800c218:	d0cf      	beq.n	800c1ba <shellGetLine+0x1a>
 800c21a:	297f      	cmp	r1, #127	; 0x7f
 800c21c:	d0cd      	beq.n	800c1ba <shellGetLine+0x1a>
    if (c == '\r') {
 800c21e:	290d      	cmp	r1, #13
 800c220:	d0de      	beq.n	800c1e0 <shellGetLine+0x40>
    if (c < 0x20)
 800c222:	291f      	cmp	r1, #31
 800c224:	d9eb      	bls.n	800c1fe <shellGetLine+0x5e>
    if (p < line + size - 1) {
 800c226:	1e7b      	subs	r3, r7, #1
 800c228:	4433      	add	r3, r6
 800c22a:	42ab      	cmp	r3, r5
 800c22c:	d8df      	bhi.n	800c1ee <shellGetLine+0x4e>
 800c22e:	e7e6      	b.n	800c1fe <shellGetLine+0x5e>
      return true;
 800c230:	2001      	movs	r0, #1
    }
  }
}
 800c232:	b003      	add	sp, #12
 800c234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c236:	bf00      	nop
 800c238:	0801a540 	.word	0x0801a540
 800c23c:	0801ab9c 	.word	0x0801ab9c

0800c240 <shellThread>:
THD_FUNCTION(shellThread, p) {
 800c240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c244:	b098      	sub	sp, #96	; 0x60
 800c246:	4606      	mov	r6, r0
  BaseSequentialStream *chp = scfg->sc_channel;
 800c248:	6805      	ldr	r5, [r0, #0]
  const ShellCommand *scp = scfg->sc_commands;
 800c24a:	6847      	ldr	r7, [r0, #4]
  chprintf(chp, SHELL_NEWLINE_STR);
 800c24c:	4947      	ldr	r1, [pc, #284]	; (800c36c <shellThread+0x12c>)
 800c24e:	4628      	mov	r0, r5
 800c250:	f7ff fe56 	bl	800bf00 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 800c254:	4946      	ldr	r1, [pc, #280]	; (800c370 <shellThread+0x130>)
 800c256:	4628      	mov	r0, r5
 800c258:	f7ff fe52 	bl	800bf00 <chprintf>
  while (!chThdShouldTerminateX()) {
 800c25c:	e017      	b.n	800c28e <shellThread+0x4e>
      chprintf(chp, SHELL_NEWLINE_STR);
 800c25e:	4943      	ldr	r1, [pc, #268]	; (800c36c <shellThread+0x12c>)
 800c260:	4628      	mov	r0, r5
 800c262:	f7ff fe4d 	bl	800bf00 <chprintf>
      chprintf(chp, "logout");
 800c266:	4943      	ldr	r1, [pc, #268]	; (800c374 <shellThread+0x134>)
 800c268:	4628      	mov	r0, r5
 800c26a:	f7ff fe49 	bl	800bf00 <chprintf>
  shellExit(MSG_OK);
 800c26e:	2000      	movs	r0, #0
 800c270:	f7ff ff7e 	bl	800c170 <shellExit>
}
 800c274:	b018      	add	sp, #96	; 0x60
 800c276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 800c27a:	493f      	ldr	r1, [pc, #252]	; (800c378 <shellThread+0x138>)
 800c27c:	4628      	mov	r0, r5
 800c27e:	f7ff fe3f 	bl	800bf00 <chprintf>
    args[n] = NULL;
 800c282:	ab18      	add	r3, sp, #96	; 0x60
 800c284:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c288:	2300      	movs	r3, #0
 800c28a:	f844 3c58 	str.w	r3, [r4, #-88]
 800c28e:	4b3b      	ldr	r3, [pc, #236]	; (800c37c <shellThread+0x13c>)
 800c290:	699b      	ldr	r3, [r3, #24]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 800c292:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  while (!chThdShouldTerminateX()) {
 800c296:	f013 0f04 	tst.w	r3, #4
 800c29a:	d1e8      	bne.n	800c26e <shellThread+0x2e>
    chprintf(chp, SHELL_PROMPT_STR);
 800c29c:	4938      	ldr	r1, [pc, #224]	; (800c380 <shellThread+0x140>)
 800c29e:	4628      	mov	r0, r5
 800c2a0:	f7ff fe2e 	bl	800bf00 <chprintf>
    if (shellGetLine(scfg, line, sizeof(line), shp)) {
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	2240      	movs	r2, #64	; 0x40
 800c2a8:	a907      	add	r1, sp, #28
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	f7ff ff78 	bl	800c1a0 <shellGetLine>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d1d4      	bne.n	800c25e <shellThread+0x1e>
    lp = parse_arguments(line, &tokp);
 800c2b4:	a917      	add	r1, sp, #92	; 0x5c
 800c2b6:	a807      	add	r0, sp, #28
 800c2b8:	f7ff ff2a 	bl	800c110 <parse_arguments>
 800c2bc:	4680      	mov	r8, r0
    n = 0;
 800c2be:	2400      	movs	r4, #0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800c2c0:	a917      	add	r1, sp, #92	; 0x5c
 800c2c2:	2000      	movs	r0, #0
 800c2c4:	f7ff ff24 	bl	800c110 <parse_arguments>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	b140      	cbz	r0, 800c2de <shellThread+0x9e>
      if (n >= SHELL_MAX_ARGUMENTS) {
 800c2cc:	2c03      	cmp	r4, #3
 800c2ce:	dcd4      	bgt.n	800c27a <shellThread+0x3a>
      args[n++] = lp;
 800c2d0:	aa18      	add	r2, sp, #96	; 0x60
 800c2d2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c2d6:	f842 3c58 	str.w	r3, [r2, #-88]
 800c2da:	3401      	adds	r4, #1
 800c2dc:	e7f0      	b.n	800c2c0 <shellThread+0x80>
    args[n] = NULL;
 800c2de:	2200      	movs	r2, #0
 800c2e0:	ab18      	add	r3, sp, #96	; 0x60
 800c2e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c2e6:	f843 2c58 	str.w	r2, [r3, #-88]
    if (cmd != NULL) {
 800c2ea:	f1b8 0f00 	cmp.w	r8, #0
 800c2ee:	d0ce      	beq.n	800c28e <shellThread+0x4e>
      if (strcmp(cmd, "help") == 0) {
 800c2f0:	4924      	ldr	r1, [pc, #144]	; (800c384 <shellThread+0x144>)
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	f00b fed8 	bl	80180a8 <strcmp>
 800c2f8:	b9c8      	cbnz	r0, 800c32e <shellThread+0xee>
        if (n > 0) {
 800c2fa:	2c00      	cmp	r4, #0
 800c2fc:	dc11      	bgt.n	800c322 <shellThread+0xe2>
        chprintf(chp, "Commands: help ");
 800c2fe:	4922      	ldr	r1, [pc, #136]	; (800c388 <shellThread+0x148>)
 800c300:	4628      	mov	r0, r5
 800c302:	f7ff fdfd 	bl	800bf00 <chprintf>
        list_commands(chp, shell_local_commands);
 800c306:	4921      	ldr	r1, [pc, #132]	; (800c38c <shellThread+0x14c>)
 800c308:	4628      	mov	r0, r5
 800c30a:	f7ff fed9 	bl	800c0c0 <list_commands>
        if (scp != NULL)
 800c30e:	b11f      	cbz	r7, 800c318 <shellThread+0xd8>
          list_commands(chp, scp);
 800c310:	4639      	mov	r1, r7
 800c312:	4628      	mov	r0, r5
 800c314:	f7ff fed4 	bl	800c0c0 <list_commands>
        chprintf(chp, SHELL_NEWLINE_STR);
 800c318:	4914      	ldr	r1, [pc, #80]	; (800c36c <shellThread+0x12c>)
 800c31a:	4628      	mov	r0, r5
 800c31c:	f7ff fdf0 	bl	800bf00 <chprintf>
 800c320:	e7b5      	b.n	800c28e <shellThread+0x4e>
          shellUsage(chp, "help");
 800c322:	4a18      	ldr	r2, [pc, #96]	; (800c384 <shellThread+0x144>)
 800c324:	491a      	ldr	r1, [pc, #104]	; (800c390 <shellThread+0x150>)
 800c326:	4628      	mov	r0, r5
 800c328:	f7ff fdea 	bl	800bf00 <chprintf>
          continue;
 800c32c:	e7af      	b.n	800c28e <shellThread+0x4e>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 800c32e:	ab02      	add	r3, sp, #8
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	4623      	mov	r3, r4
 800c334:	4642      	mov	r2, r8
 800c336:	4629      	mov	r1, r5
 800c338:	4814      	ldr	r0, [pc, #80]	; (800c38c <shellThread+0x14c>)
 800c33a:	f7ff fed1 	bl	800c0e0 <cmdexec>
 800c33e:	2800      	cmp	r0, #0
 800c340:	d0a5      	beq.n	800c28e <shellThread+0x4e>
 800c342:	b14f      	cbz	r7, 800c358 <shellThread+0x118>
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
 800c344:	ab02      	add	r3, sp, #8
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	4623      	mov	r3, r4
 800c34a:	4642      	mov	r2, r8
 800c34c:	4629      	mov	r1, r5
 800c34e:	4638      	mov	r0, r7
 800c350:	f7ff fec6 	bl	800c0e0 <cmdexec>
 800c354:	2800      	cmp	r0, #0
 800c356:	d09a      	beq.n	800c28e <shellThread+0x4e>
        chprintf(chp, "%s", cmd);
 800c358:	4642      	mov	r2, r8
 800c35a:	490e      	ldr	r1, [pc, #56]	; (800c394 <shellThread+0x154>)
 800c35c:	4628      	mov	r0, r5
 800c35e:	f7ff fdcf 	bl	800bf00 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 800c362:	490d      	ldr	r1, [pc, #52]	; (800c398 <shellThread+0x158>)
 800c364:	4628      	mov	r0, r5
 800c366:	f7ff fdcb 	bl	800bf00 <chprintf>
 800c36a:	e790      	b.n	800c28e <shellThread+0x4e>
 800c36c:	0801ab9c 	.word	0x0801ab9c
 800c370:	0801a544 	.word	0x0801a544
 800c374:	0801a560 	.word	0x0801a560
 800c378:	0801a568 	.word	0x0801a568
 800c37c:	200050f8 	.word	0x200050f8
 800c380:	0801a558 	.word	0x0801a558
 800c384:	0801a580 	.word	0x0801a580
 800c388:	0801a594 	.word	0x0801a594
 800c38c:	08019e44 	.word	0x08019e44
 800c390:	0801a588 	.word	0x0801a588
 800c394:	0801a5a4 	.word	0x0801a5a4
 800c398:	0801a5a8 	.word	0x0801a5a8
 800c39c:	00000000 	.word	0x00000000

0800c3a0 <cmd_echo>:
#endif
}
#endif

#if (SHELL_CMD_ECHO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_echo(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c3a0:	b508      	push	{r3, lr}

  (void)argv;
  if (argc != 1) {
 800c3a2:	2901      	cmp	r1, #1
 800c3a4:	d004      	beq.n	800c3b0 <cmd_echo+0x10>
    shellUsage(chp, "echo \"message\"");
 800c3a6:	4a05      	ldr	r2, [pc, #20]	; (800c3bc <cmd_echo+0x1c>)
 800c3a8:	4905      	ldr	r1, [pc, #20]	; (800c3c0 <cmd_echo+0x20>)
 800c3aa:	f7ff fda9 	bl	800bf00 <chprintf>
    return;
  }
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
}
 800c3ae:	bd08      	pop	{r3, pc}
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 800c3b0:	6812      	ldr	r2, [r2, #0]
 800c3b2:	4904      	ldr	r1, [pc, #16]	; (800c3c4 <cmd_echo+0x24>)
 800c3b4:	f7ff fda4 	bl	800bf00 <chprintf>
 800c3b8:	e7f9      	b.n	800c3ae <cmd_echo+0xe>
 800c3ba:	bf00      	nop
 800c3bc:	0801a5b0 	.word	0x0801a5b0
 800c3c0:	0801a588 	.word	0x0801a588
 800c3c4:	0801aa98 	.word	0x0801aa98
 800c3c8:	f3af 8000 	nop.w
 800c3cc:	f3af 8000 	nop.w

0800c3d0 <cmd_info>:
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	4604      	mov	r4, r0
  if (argc > 0) {
 800c3d6:	2900      	cmp	r1, #0
 800c3d8:	dd05      	ble.n	800c3e6 <cmd_info+0x16>
    shellUsage(chp, "info");
 800c3da:	4a18      	ldr	r2, [pc, #96]	; (800c43c <cmd_info+0x6c>)
 800c3dc:	4918      	ldr	r1, [pc, #96]	; (800c440 <cmd_info+0x70>)
 800c3de:	f7ff fd8f 	bl	800bf00 <chprintf>
}
 800c3e2:	b002      	add	sp, #8
 800c3e4:	bd10      	pop	{r4, pc}
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 800c3e6:	4a17      	ldr	r2, [pc, #92]	; (800c444 <cmd_info+0x74>)
 800c3e8:	4917      	ldr	r1, [pc, #92]	; (800c448 <cmd_info+0x78>)
 800c3ea:	f7ff fd89 	bl	800bf00 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 800c3ee:	4a17      	ldr	r2, [pc, #92]	; (800c44c <cmd_info+0x7c>)
 800c3f0:	4917      	ldr	r1, [pc, #92]	; (800c450 <cmd_info+0x80>)
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f7ff fd84 	bl	800bf00 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 800c3f8:	4a16      	ldr	r2, [pc, #88]	; (800c454 <cmd_info+0x84>)
 800c3fa:	4917      	ldr	r1, [pc, #92]	; (800c458 <cmd_info+0x88>)
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f7ff fd7f 	bl	800bf00 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 800c402:	4a16      	ldr	r2, [pc, #88]	; (800c45c <cmd_info+0x8c>)
 800c404:	4916      	ldr	r1, [pc, #88]	; (800c460 <cmd_info+0x90>)
 800c406:	4620      	mov	r0, r4
 800c408:	f7ff fd7a 	bl	800bf00 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 800c40c:	4a15      	ldr	r2, [pc, #84]	; (800c464 <cmd_info+0x94>)
 800c40e:	4916      	ldr	r1, [pc, #88]	; (800c468 <cmd_info+0x98>)
 800c410:	4620      	mov	r0, r4
 800c412:	f7ff fd75 	bl	800bf00 <chprintf>
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 800c416:	4a15      	ldr	r2, [pc, #84]	; (800c46c <cmd_info+0x9c>)
 800c418:	4915      	ldr	r1, [pc, #84]	; (800c470 <cmd_info+0xa0>)
 800c41a:	4620      	mov	r0, r4
 800c41c:	f7ff fd70 	bl	800bf00 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 800c420:	4a14      	ldr	r2, [pc, #80]	; (800c474 <cmd_info+0xa4>)
 800c422:	4915      	ldr	r1, [pc, #84]	; (800c478 <cmd_info+0xa8>)
 800c424:	4620      	mov	r0, r4
 800c426:	f7ff fd6b 	bl	800bf00 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 800c42a:	4b14      	ldr	r3, [pc, #80]	; (800c47c <cmd_info+0xac>)
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	4b14      	ldr	r3, [pc, #80]	; (800c480 <cmd_info+0xb0>)
 800c430:	4a14      	ldr	r2, [pc, #80]	; (800c484 <cmd_info+0xb4>)
 800c432:	4915      	ldr	r1, [pc, #84]	; (800c488 <cmd_info+0xb8>)
 800c434:	4620      	mov	r0, r4
 800c436:	f7ff fd63 	bl	800bf00 <chprintf>
 800c43a:	e7d2      	b.n	800c3e2 <cmd_info+0x12>
 800c43c:	0801a5c0 	.word	0x0801a5c0
 800c440:	0801a588 	.word	0x0801a588
 800c444:	0801a5c8 	.word	0x0801a5c8
 800c448:	0801a5d0 	.word	0x0801a5d0
 800c44c:	0801a5e4 	.word	0x0801a5e4
 800c450:	0801a62c 	.word	0x0801a62c
 800c454:	0801a640 	.word	0x0801a640
 800c458:	0801a64c 	.word	0x0801a64c
 800c45c:	0801a660 	.word	0x0801a660
 800c460:	0801a66c 	.word	0x0801a66c
 800c464:	0801a680 	.word	0x0801a680
 800c468:	0801a698 	.word	0x0801a698
 800c46c:	0801a6ac 	.word	0x0801a6ac
 800c470:	0801a6d8 	.word	0x0801a6d8
 800c474:	0801a6ec 	.word	0x0801a6ec
 800c478:	0801a700 	.word	0x0801a700
 800c47c:	0801a73c 	.word	0x0801a73c
 800c480:	0801a714 	.word	0x0801a714
 800c484:	0801a718 	.word	0x0801a718
 800c488:	0801a724 	.word	0x0801a724
 800c48c:	f3af 8000 	nop.w

0800c490 <cmd_threads>:
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
}
#endif

#if (SHELL_CMD_THREADS_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c494:	b086      	sub	sp, #24
 800c496:	4680      	mov	r8, r0
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 800c498:	2900      	cmp	r1, #0
 800c49a:	dd06      	ble.n	800c4aa <cmd_threads+0x1a>
    shellUsage(chp, "threads");
 800c49c:	4a16      	ldr	r2, [pc, #88]	; (800c4f8 <cmd_threads+0x68>)
 800c49e:	4917      	ldr	r1, [pc, #92]	; (800c4fc <cmd_threads+0x6c>)
 800c4a0:	f7ff fd2e 	bl	800bf00 <chprintf>
             stklimit, (uint32_t)tp->ctx.sp, (uint32_t)tp,
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
             tp->name == NULL ? "" : tp->name);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}
 800c4a4:	b006      	add	sp, #24
 800c4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 800c4aa:	4915      	ldr	r1, [pc, #84]	; (800c500 <cmd_threads+0x70>)
 800c4ac:	f7ff fd28 	bl	800bf00 <chprintf>
  tp = chRegFirstThread();
 800c4b0:	f7fc fdd6 	bl	8009060 <chRegFirstThread>
 800c4b4:	4604      	mov	r4, r0
 800c4b6:	e00e      	b.n	800c4d6 <cmd_threads+0x46>
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800c4b8:	9004      	str	r0, [sp, #16]
 800c4ba:	9603      	str	r6, [sp, #12]
 800c4bc:	9702      	str	r7, [sp, #8]
 800c4be:	9101      	str	r1, [sp, #4]
 800c4c0:	9500      	str	r5, [sp, #0]
 800c4c2:	4910      	ldr	r1, [pc, #64]	; (800c504 <cmd_threads+0x74>)
 800c4c4:	4640      	mov	r0, r8
 800c4c6:	f7ff fd1b 	bl	800bf00 <chprintf>
    tp = chRegNextThread(tp);
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f7fc fdf0 	bl	80090b0 <chRegNextThread>
  } while (tp != NULL);
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d0e6      	beq.n	800c4a4 <cmd_threads+0x14>
    uint32_t stklimit = (uint32_t)tp->wabase;
 800c4d6:	69e2      	ldr	r2, [r4, #28]
             stklimit, (uint32_t)tp->ctx.sp, (uint32_t)tp,
 800c4d8:	68e3      	ldr	r3, [r4, #12]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800c4da:	4625      	mov	r5, r4
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 800c4dc:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800c4e0:	3901      	subs	r1, #1
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 800c4e2:	68a7      	ldr	r7, [r4, #8]
 800c4e4:	f894 c020 	ldrb.w	ip, [r4, #32]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800c4e8:	4807      	ldr	r0, [pc, #28]	; (800c508 <cmd_threads+0x78>)
 800c4ea:	f850 602c 	ldr.w	r6, [r0, ip, lsl #2]
             tp->name == NULL ? "" : tp->name);
 800c4ee:	69a0      	ldr	r0, [r4, #24]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	d1e1      	bne.n	800c4b8 <cmd_threads+0x28>
 800c4f4:	4805      	ldr	r0, [pc, #20]	; (800c50c <cmd_threads+0x7c>)
 800c4f6:	e7df      	b.n	800c4b8 <cmd_threads+0x28>
 800c4f8:	0801a748 	.word	0x0801a748
 800c4fc:	0801a588 	.word	0x0801a588
 800c500:	0801a750 	.word	0x0801a750
 800c504:	0801a790 	.word	0x0801a790
 800c508:	08019df8 	.word	0x08019df8
 800c50c:	0801a5ac 	.word	0x0801a5ac

0800c510 <cmd_mem>:
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c510:	b530      	push	{r4, r5, lr}
 800c512:	b083      	sub	sp, #12
 800c514:	4604      	mov	r4, r0
  if (argc > 0) {
 800c516:	2900      	cmp	r1, #0
 800c518:	dd05      	ble.n	800c526 <cmd_mem+0x16>
    shellUsage(chp, "mem");
 800c51a:	4a11      	ldr	r2, [pc, #68]	; (800c560 <cmd_mem+0x50>)
 800c51c:	4911      	ldr	r1, [pc, #68]	; (800c564 <cmd_mem+0x54>)
 800c51e:	f7ff fcef 	bl	800bf00 <chprintf>
}
 800c522:	b003      	add	sp, #12
 800c524:	bd30      	pop	{r4, r5, pc}
  n = chHeapStatus(NULL, &total, &largest);
 800c526:	466a      	mov	r2, sp
 800c528:	a901      	add	r1, sp, #4
 800c52a:	2000      	movs	r0, #0
 800c52c:	f7fe fd00 	bl	800af30 <chHeapStatus>
 800c530:	4605      	mov	r5, r0
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 800c532:	f7fe fbd5 	bl	800ace0 <chCoreGetStatusX>
 800c536:	4602      	mov	r2, r0
 800c538:	490b      	ldr	r1, [pc, #44]	; (800c568 <cmd_mem+0x58>)
 800c53a:	4620      	mov	r0, r4
 800c53c:	f7ff fce0 	bl	800bf00 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 800c540:	462a      	mov	r2, r5
 800c542:	490a      	ldr	r1, [pc, #40]	; (800c56c <cmd_mem+0x5c>)
 800c544:	4620      	mov	r0, r4
 800c546:	f7ff fcdb 	bl	800bf00 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 800c54a:	9a01      	ldr	r2, [sp, #4]
 800c54c:	4908      	ldr	r1, [pc, #32]	; (800c570 <cmd_mem+0x60>)
 800c54e:	4620      	mov	r0, r4
 800c550:	f7ff fcd6 	bl	800bf00 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 800c554:	9a00      	ldr	r2, [sp, #0]
 800c556:	4907      	ldr	r1, [pc, #28]	; (800c574 <cmd_mem+0x64>)
 800c558:	4620      	mov	r0, r4
 800c55a:	f7ff fcd1 	bl	800bf00 <chprintf>
 800c55e:	e7e0      	b.n	800c522 <cmd_mem+0x12>
 800c560:	0801a7b8 	.word	0x0801a7b8
 800c564:	0801a588 	.word	0x0801a588
 800c568:	0801a7bc 	.word	0x0801a7bc
 800c56c:	0801a7dc 	.word	0x0801a7dc
 800c570:	0801a7f4 	.word	0x0801a7f4
 800c574:	0801a814 	.word	0x0801a814
 800c578:	f3af 8000 	nop.w
 800c57c:	f3af 8000 	nop.w

0800c580 <cmd_systime>:
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c580:	b538      	push	{r3, r4, r5, lr}
 800c582:	4604      	mov	r4, r0
  if (argc > 0) {
 800c584:	2900      	cmp	r1, #0
 800c586:	dd04      	ble.n	800c592 <cmd_systime+0x12>
    shellUsage(chp, "systime");
 800c588:	4a14      	ldr	r2, [pc, #80]	; (800c5dc <cmd_systime+0x5c>)
 800c58a:	4915      	ldr	r1, [pc, #84]	; (800c5e0 <cmd_systime+0x60>)
 800c58c:	f7ff fcb8 	bl	800bf00 <chprintf>
}
 800c590:	bd38      	pop	{r3, r4, r5, pc}
 800c592:	2320      	movs	r3, #32
 800c594:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800c598:	f7fc fd42 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800c59c:	f7fb fa40 	bl	8007a20 <_dbg_check_lock>
 800c5a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c5a4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  _dbg_check_unlock();
 800c5a6:	f7fb fa53 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800c5aa:	f7fc fd41 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800c5ae:	4b0d      	ldr	r3, [pc, #52]	; (800c5e4 <cmd_systime+0x64>)
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d004      	beq.n	800c5c0 <cmd_systime+0x40>
 800c5b6:	699b      	ldr	r3, [r3, #24]
 800c5b8:	6899      	ldr	r1, [r3, #8]
 800c5ba:	6893      	ldr	r3, [r2, #8]
 800c5bc:	4299      	cmp	r1, r3
 800c5be:	d308      	bcc.n	800c5d2 <cmd_systime+0x52>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	f383 8811 	msr	BASEPRI, r3
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 800c5c6:	462a      	mov	r2, r5
 800c5c8:	4907      	ldr	r1, [pc, #28]	; (800c5e8 <cmd_systime+0x68>)
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f7ff fc98 	bl	800bf00 <chprintf>
 800c5d0:	e7de      	b.n	800c590 <cmd_systime+0x10>
 800c5d2:	4806      	ldr	r0, [pc, #24]	; (800c5ec <cmd_systime+0x6c>)
 800c5d4:	f7fb f894 	bl	8007700 <chSysHalt>
 800c5d8:	e7f2      	b.n	800c5c0 <cmd_systime+0x40>
 800c5da:	bf00      	nop
 800c5dc:	0801a834 	.word	0x0801a834
 800c5e0:	0801a588 	.word	0x0801a588
 800c5e4:	200050f8 	.word	0x200050f8
 800c5e8:	0801a83c 	.word	0x0801a83c
 800c5ec:	08019e38 	.word	0x08019e38

0800c5f0 <cmd_exit>:
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c5f0:	b508      	push	{r3, lr}
  if (argc > 0) {
 800c5f2:	2900      	cmp	r1, #0
 800c5f4:	dd04      	ble.n	800c600 <cmd_exit+0x10>
    shellUsage(chp, "exit");
 800c5f6:	4a04      	ldr	r2, [pc, #16]	; (800c608 <cmd_exit+0x18>)
 800c5f8:	4904      	ldr	r1, [pc, #16]	; (800c60c <cmd_exit+0x1c>)
 800c5fa:	f7ff fc81 	bl	800bf00 <chprintf>
}
 800c5fe:	bd08      	pop	{r3, pc}
  shellExit(MSG_OK);
 800c600:	2000      	movs	r0, #0
 800c602:	f7ff fdb5 	bl	800c170 <shellExit>
 800c606:	e7fa      	b.n	800c5fe <cmd_exit+0xe>
 800c608:	0801a844 	.word	0x0801a844
 800c60c:	0801a588 	.word	0x0801a588

0800c610 <disk_initialize>:
/* Inidialize a Drive                                                    */

DSTATUS disk_initialize (
    BYTE pdrv         /* Physical drive number (0..) */
)
{
 800c610:	b510      	push	{r4, lr}
  DSTATUS stat;

  switch (pdrv) {
 800c612:	b968      	cbnz	r0, 800c630 <disk_initialize+0x20>
    return stat;
#else
  case SDC:
    stat = 0;
    /* It is initialized externally, just reads the status.*/
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800c614:	4b08      	ldr	r3, [pc, #32]	; (800c638 <disk_initialize+0x28>)
 800c616:	791b      	ldrb	r3, [r3, #4]
 800c618:	2b05      	cmp	r3, #5
 800c61a:	d007      	beq.n	800c62c <disk_initialize+0x1c>
      stat |= STA_NOINIT;
 800c61c:	2401      	movs	r4, #1
    if (sdcIsWriteProtected(&FATFS_HAL_DEVICE))
 800c61e:	4806      	ldr	r0, [pc, #24]	; (800c638 <disk_initialize+0x28>)
 800c620:	f7f3 ff4e 	bl	80004c0 <sdc_lld_is_write_protected>
 800c624:	b128      	cbz	r0, 800c632 <disk_initialize+0x22>
      stat |=  STA_PROTECT;
 800c626:	f044 0404 	orr.w	r4, r4, #4
 800c62a:	e002      	b.n	800c632 <disk_initialize+0x22>
    stat = 0;
 800c62c:	2400      	movs	r4, #0
 800c62e:	e7f6      	b.n	800c61e <disk_initialize+0xe>
    return stat;
#endif
  }
  return STA_NOINIT;
 800c630:	2401      	movs	r4, #1
}
 800c632:	4620      	mov	r0, r4
 800c634:	bd10      	pop	{r4, pc}
 800c636:	bf00      	nop
 800c638:	2000488c 	.word	0x2000488c
 800c63c:	f3af 8000 	nop.w

0800c640 <disk_status>:
/* Return Disk Status                                                    */

DSTATUS disk_status (
    BYTE pdrv         /* Physical drive number (0..) */
)
{
 800c640:	b510      	push	{r4, lr}
  DSTATUS stat;

  switch (pdrv) {
 800c642:	b968      	cbnz	r0, 800c660 <disk_status+0x20>
    return stat;
#else
  case SDC:
    stat = 0;
    /* It is initialized externally, just reads the status.*/
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800c644:	4b08      	ldr	r3, [pc, #32]	; (800c668 <disk_status+0x28>)
 800c646:	791b      	ldrb	r3, [r3, #4]
 800c648:	2b05      	cmp	r3, #5
 800c64a:	d007      	beq.n	800c65c <disk_status+0x1c>
      stat |= STA_NOINIT;
 800c64c:	2401      	movs	r4, #1
    if (sdcIsWriteProtected(&FATFS_HAL_DEVICE))
 800c64e:	4806      	ldr	r0, [pc, #24]	; (800c668 <disk_status+0x28>)
 800c650:	f7f3 ff36 	bl	80004c0 <sdc_lld_is_write_protected>
 800c654:	b128      	cbz	r0, 800c662 <disk_status+0x22>
      stat |= STA_PROTECT;
 800c656:	f044 0404 	orr.w	r4, r4, #4
 800c65a:	e002      	b.n	800c662 <disk_status+0x22>
    stat = 0;
 800c65c:	2400      	movs	r4, #0
 800c65e:	e7f6      	b.n	800c64e <disk_status+0xe>
    return stat;
#endif
  }
  return STA_NOINIT;
 800c660:	2401      	movs	r4, #1
}
 800c662:	4620      	mov	r0, r4
 800c664:	bd10      	pop	{r4, pc}
 800c666:	bf00      	nop
 800c668:	2000488c 	.word	0x2000488c
 800c66c:	f3af 8000 	nop.w

0800c670 <disk_read>:
    BYTE *buff,       /* Data buffer to store read data */
    DWORD sector,     /* Sector address (LBA) */
    UINT count        /* Number of sectors to read (1..255) */
)
{
  switch (pdrv) {
 800c670:	b988      	cbnz	r0, 800c696 <disk_read+0x26>
    if (mmcStopSequentialRead(&FATFS_HAL_DEVICE))
        return RES_ERROR;
    return RES_OK;
#else
  case SDC:
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800c672:	480a      	ldr	r0, [pc, #40]	; (800c69c <disk_read+0x2c>)
 800c674:	7900      	ldrb	r0, [r0, #4]
 800c676:	2805      	cmp	r0, #5
 800c678:	d001      	beq.n	800c67e <disk_read+0xe>
      return RES_NOTRDY;
 800c67a:	2003      	movs	r0, #3
      return RES_ERROR;
    return RES_OK;
#endif
  }
  return RES_PARERR;
}
 800c67c:	4770      	bx	lr
{
 800c67e:	b508      	push	{r3, lr}
 800c680:	4610      	mov	r0, r2
 800c682:	460a      	mov	r2, r1
    if (sdcRead(&FATFS_HAL_DEVICE, sector, buff, count))
 800c684:	4601      	mov	r1, r0
 800c686:	4805      	ldr	r0, [pc, #20]	; (800c69c <disk_read+0x2c>)
 800c688:	f7f6 faa2 	bl	8002bd0 <sdcRead>
 800c68c:	b908      	cbnz	r0, 800c692 <disk_read+0x22>
    return RES_OK;
 800c68e:	2000      	movs	r0, #0
}
 800c690:	bd08      	pop	{r3, pc}
      return RES_ERROR;
 800c692:	2001      	movs	r0, #1
 800c694:	e7fc      	b.n	800c690 <disk_read+0x20>
  return RES_PARERR;
 800c696:	2004      	movs	r0, #4
 800c698:	4770      	bx	lr
 800c69a:	bf00      	nop
 800c69c:	2000488c 	.word	0x2000488c

0800c6a0 <disk_write>:
    const BYTE *buff, /* Data to be written */
    DWORD sector,     /* Sector address (LBA) */
    UINT count        /* Number of sectors to write (1..255) */
)
{
  switch (pdrv) {
 800c6a0:	b988      	cbnz	r0, 800c6c6 <disk_write+0x26>
    if (mmcStopSequentialWrite(&FATFS_HAL_DEVICE))
        return RES_ERROR;
    return RES_OK;
#else
  case SDC:
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800c6a2:	480a      	ldr	r0, [pc, #40]	; (800c6cc <disk_write+0x2c>)
 800c6a4:	7900      	ldrb	r0, [r0, #4]
 800c6a6:	2805      	cmp	r0, #5
 800c6a8:	d001      	beq.n	800c6ae <disk_write+0xe>
      return RES_NOTRDY;
 800c6aa:	2003      	movs	r0, #3
      return RES_ERROR;
    return RES_OK;
#endif
  }
  return RES_PARERR;
}
 800c6ac:	4770      	bx	lr
{
 800c6ae:	b508      	push	{r3, lr}
 800c6b0:	4610      	mov	r0, r2
 800c6b2:	460a      	mov	r2, r1
    if (sdcWrite(&FATFS_HAL_DEVICE, sector, buff, count))
 800c6b4:	4601      	mov	r1, r0
 800c6b6:	4805      	ldr	r0, [pc, #20]	; (800c6cc <disk_write+0x2c>)
 800c6b8:	f7f6 faba 	bl	8002c30 <sdcWrite>
 800c6bc:	b908      	cbnz	r0, 800c6c2 <disk_write+0x22>
    return RES_OK;
 800c6be:	2000      	movs	r0, #0
}
 800c6c0:	bd08      	pop	{r3, pc}
      return RES_ERROR;
 800c6c2:	2001      	movs	r0, #1
 800c6c4:	e7fc      	b.n	800c6c0 <disk_write+0x20>
  return RES_PARERR;
 800c6c6:	2004      	movs	r0, #4
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	2000488c 	.word	0x2000488c

0800c6d0 <disk_ioctl>:
    void *buff        /* Buffer to send/receive control data */
)
{
  (void)buff;

  switch (pdrv) {
 800c6d0:	b990      	cbnz	r0, 800c6f8 <disk_ioctl+0x28>
    default:
        return RES_PARERR;
    }
#else
  case SDC:
    switch (cmd) {
 800c6d2:	2901      	cmp	r1, #1
 800c6d4:	d006      	beq.n	800c6e4 <disk_ioctl+0x14>
 800c6d6:	b119      	cbz	r1, 800c6e0 <disk_ioctl+0x10>
 800c6d8:	2903      	cmp	r1, #3
 800c6da:	d008      	beq.n	800c6ee <disk_ioctl+0x1e>
    case CTRL_TRIM:
        sdcErase(&FATFS_HAL_DEVICE, *((DWORD *)buff), *((DWORD *)buff + 1));
        return RES_OK;
#endif
    default:
        return RES_PARERR;
 800c6dc:	2004      	movs	r0, #4
    }
#endif
  }
  return RES_PARERR;
}
 800c6de:	4770      	bx	lr
        return RES_OK;
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	4770      	bx	lr
        *((DWORD *)buff) = mmcsdGetCardCapacity(&FATFS_HAL_DEVICE);
 800c6e4:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <disk_ioctl+0x2c>)
 800c6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e8:	6013      	str	r3, [r2, #0]
        return RES_OK;
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	4770      	bx	lr
        *((DWORD *)buff) = 256; /* 512b blocks in one erase block */
 800c6ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6f2:	6013      	str	r3, [r2, #0]
        return RES_OK;
 800c6f4:	2000      	movs	r0, #0
 800c6f6:	4770      	bx	lr
  return RES_PARERR;
 800c6f8:	2004      	movs	r0, #4
 800c6fa:	4770      	bx	lr
 800c6fc:	2000488c 	.word	0x2000488c

0800c700 <get_fattime>:

DWORD get_fattime(void) {
 800c700:	b500      	push	{lr}
 800c702:	b083      	sub	sp, #12
#if HAL_USE_RTC
    RTCDateTime timespec;

    rtcGetTime(&RTCD1, &timespec);
 800c704:	4669      	mov	r1, sp
 800c706:	4804      	ldr	r0, [pc, #16]	; (800c718 <get_fattime+0x18>)
 800c708:	f7f5 fe7a 	bl	8002400 <rtcGetTime>
    return rtcConvertDateTimeToFAT(&timespec);
 800c70c:	4668      	mov	r0, sp
 800c70e:	f7f5 ff4f 	bl	80025b0 <rtcConvertDateTimeToFAT>
#else
    return ((uint32_t)0 | (1 << 16)) | (1 << 21); /* wrong but valid time */
#endif
}
 800c712:	b003      	add	sp, #12
 800c714:	f85d fb04 	ldr.w	pc, [sp], #4
 800c718:	20004820 	.word	0x20004820
 800c71c:	00000000 	.word	0x00000000

0800c720 <ff_memalloc>:

#if FF_USE_LFN == 3	/* LFN with a working buffer on the heap */
/*------------------------------------------------------------------------*/
/* Allocate a memory block                                                */
/*------------------------------------------------------------------------*/
void *ff_memalloc(UINT size) {
 800c720:	b508      	push	{r3, lr}
 800c722:	2208      	movs	r2, #8
 800c724:	4601      	mov	r1, r0
 800c726:	2000      	movs	r0, #0
 800c728:	f7fe fb12 	bl	800ad50 <chHeapAllocAligned>

  return chHeapAlloc(NULL, size);
}
 800c72c:	bd08      	pop	{r3, pc}
 800c72e:	bf00      	nop

0800c730 <ff_memfree>:

/*------------------------------------------------------------------------*/
/* Free a memory block                                                    */
/*------------------------------------------------------------------------*/
void ff_memfree(void *mblock) {
 800c730:	b508      	push	{r3, lr}

  chHeapFree(mblock);
 800c732:	f7fe fb9d 	bl	800ae70 <chHeapFree>
}
 800c736:	bd08      	pop	{r3, pc}
	...

0800c740 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 800c740:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 800c742:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800c744:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800c748:	4770      	bx	lr
 800c74a:	bf00      	nop
 800c74c:	f3af 8000 	nop.w

0800c750 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800c750:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 800c752:	7883      	ldrb	r3, [r0, #2]
 800c754:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 800c758:	7843      	ldrb	r3, [r0, #1]
 800c75a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800c75e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800c760:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	f3af 8000 	nop.w
 800c76c:	f3af 8000 	nop.w

0800c770 <ld_qword>:

#if FF_FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800c770:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
	QWORD rv;

	rv = ptr[7];
 800c774:	79c2      	ldrb	r2, [r0, #7]
	rv = rv << 8 | ptr[6];
 800c776:	2500      	movs	r5, #0
 800c778:	0214      	lsls	r4, r2, #8
 800c77a:	7982      	ldrb	r2, [r0, #6]
 800c77c:	2300      	movs	r3, #0
 800c77e:	ea44 0b02 	orr.w	fp, r4, r2
 800c782:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[5];
 800c786:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800c78a:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 800c78e:	ea4f 220b 	mov.w	r2, fp, lsl #8
 800c792:	7944      	ldrb	r4, [r0, #5]
 800c794:	2500      	movs	r5, #0
 800c796:	ea44 0b02 	orr.w	fp, r4, r2
 800c79a:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[4];
 800c79e:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800c7a2:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 800c7a6:	ea4f 220b 	mov.w	r2, fp, lsl #8
 800c7aa:	7904      	ldrb	r4, [r0, #4]
 800c7ac:	2500      	movs	r5, #0
 800c7ae:	ea44 0b02 	orr.w	fp, r4, r2
 800c7b2:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[3];
 800c7b6:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800c7ba:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 800c7be:	ea4f 220b 	mov.w	r2, fp, lsl #8
 800c7c2:	78c4      	ldrb	r4, [r0, #3]
 800c7c4:	2500      	movs	r5, #0
 800c7c6:	ea44 0b02 	orr.w	fp, r4, r2
 800c7ca:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[2];
 800c7ce:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800c7d2:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 800c7d6:	ea4f 220b 	mov.w	r2, fp, lsl #8
 800c7da:	7884      	ldrb	r4, [r0, #2]
 800c7dc:	2500      	movs	r5, #0
 800c7de:	ea44 0602 	orr.w	r6, r4, r2
 800c7e2:	ea45 0703 	orr.w	r7, r5, r3
	rv = rv << 8 | ptr[1];
 800c7e6:	ea4f 2c07 	mov.w	ip, r7, lsl #8
 800c7ea:	ea4c 6c16 	orr.w	ip, ip, r6, lsr #24
 800c7ee:	ea4f 2b06 	mov.w	fp, r6, lsl #8
 800c7f2:	7844      	ldrb	r4, [r0, #1]
 800c7f4:	2500      	movs	r5, #0
 800c7f6:	ea4b 0204 	orr.w	r2, fp, r4
 800c7fa:	ea4c 0305 	orr.w	r3, ip, r5
	rv = rv << 8 | ptr[0];
 800c7fe:	021d      	lsls	r5, r3, #8
 800c800:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800c804:	0214      	lsls	r4, r2, #8
 800c806:	7802      	ldrb	r2, [r0, #0]
 800c808:	2300      	movs	r3, #0
	return rv;
}
 800c80a:	ea42 0004 	orr.w	r0, r2, r4
 800c80e:	ea43 0105 	orr.w	r1, r3, r5
 800c812:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 800c816:	4770      	bx	lr
 800c818:	f3af 8000 	nop.w
 800c81c:	f3af 8000 	nop.w

0800c820 <st_word>:

#if !FF_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800c820:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 800c822:	0a09      	lsrs	r1, r1, #8
 800c824:	7041      	strb	r1, [r0, #1]
}
 800c826:	4770      	bx	lr
 800c828:	f3af 8000 	nop.w
 800c82c:	f3af 8000 	nop.w

0800c830 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800c830:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c832:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800c836:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800c838:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800c83c:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800c83e:	0e09      	lsrs	r1, r1, #24
 800c840:	70c1      	strb	r1, [r0, #3]
}
 800c842:	4770      	bx	lr
 800c844:	f3af 8000 	nop.w
 800c848:	f3af 8000 	nop.w
 800c84c:	f3af 8000 	nop.w

0800c850 <st_qword>:

#if FF_FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800c850:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c852:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c856:	7041      	strb	r1, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800c858:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800c85c:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c85e:	0e12      	lsrs	r2, r2, #24
 800c860:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800c862:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800c864:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c868:	7142      	strb	r2, [r0, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 800c86a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c86e:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
 800c870:	0e1b      	lsrs	r3, r3, #24
 800c872:	71c3      	strb	r3, [r0, #7]
}
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	f3af 8000 	nop.w
 800c87c:	f3af 8000 	nop.w

0800c880 <mem_cpy>:
void mem_cpy (void* dst, const void* src, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
 800c880:	4613      	mov	r3, r2
 800c882:	b12a      	cbz	r2, 800c890 <mem_cpy+0x10>
		do {
			*d++ = *s++;
 800c884:	780a      	ldrb	r2, [r1, #0]
 800c886:	7002      	strb	r2, [r0, #0]
 800c888:	3001      	adds	r0, #1
 800c88a:	3101      	adds	r1, #1
		} while (--cnt);
 800c88c:	3b01      	subs	r3, #1
 800c88e:	d1f9      	bne.n	800c884 <mem_cpy+0x4>
	}
}
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	f3af 8000 	nop.w
 800c898:	f3af 8000 	nop.w
 800c89c:	f3af 8000 	nop.w

0800c8a0 <mem_set>:
void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800c8a0:	7001      	strb	r1, [r0, #0]
 800c8a2:	3001      	adds	r0, #1
	} while (--cnt);
 800c8a4:	3a01      	subs	r2, #1
 800c8a6:	d1fb      	bne.n	800c8a0 <mem_set>
}
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	f3af 8000 	nop.w

0800c8b0 <mem_cmp>:


/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 800c8b0:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800c8b2:	1c45      	adds	r5, r0, #1
 800c8b4:	7803      	ldrb	r3, [r0, #0]
 800c8b6:	7808      	ldrb	r0, [r1, #0]
 800c8b8:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 800c8ba:	3a01      	subs	r2, #1
 800c8bc:	d004      	beq.n	800c8c8 <mem_cmp+0x18>
 800c8be:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d0f4      	beq.n	800c8b2 <mem_cmp+0x2>

	return r;
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	bc30      	pop	{r4, r5}
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop

0800c8d0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
 800c8d0:	e000      	b.n	800c8d4 <chk_chr+0x4>
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	7803      	ldrb	r3, [r0, #0]
 800c8d6:	b10b      	cbz	r3, 800c8dc <chk_chr+0xc>
 800c8d8:	428b      	cmp	r3, r1
 800c8da:	d1fa      	bne.n	800c8d2 <chk_chr+0x2>
	return *str;
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	4770      	bx	lr

0800c8e0 <dbc_1st>:
	}
#else					/* SBCS fixed code page */
	if (c) return 0;	/* Always false */
#endif
	return 0;
}
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	4770      	bx	lr
 800c8e4:	f3af 8000 	nop.w
 800c8e8:	f3af 8000 	nop.w
 800c8ec:	f3af 8000 	nop.w

0800c8f0 <dbc_2nd>:
	}
#else					/* SBCS fixed code page */
	if (c) return 0;	/* Always false */
#endif
	return 0;
}
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	4770      	bx	lr
 800c8f4:	f3af 8000 	nop.w
 800c8f8:	f3af 8000 	nop.w
 800c8fc:	f3af 8000 	nop.w

0800c900 <clst2sect>:
DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
 800c900:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c902:	69c3      	ldr	r3, [r0, #28]
 800c904:	3b02      	subs	r3, #2
 800c906:	428b      	cmp	r3, r1
 800c908:	d904      	bls.n	800c914 <clst2sect+0x14>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 800c90a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c90c:	8940      	ldrh	r0, [r0, #10]
 800c90e:	fb01 3000 	mla	r0, r1, r0, r3
 800c912:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c914:	2000      	movs	r0, #0
}
 800c916:	4770      	bx	lr
 800c918:	f3af 8000 	nop.w
 800c91c:	f3af 8000 	nop.w

0800c920 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c920:	b510      	push	{r4, lr}
 800c922:	4619      	mov	r1, r3
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c924:	6803      	ldr	r3, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c926:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800c928:	3404      	adds	r4, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c92a:	0a50      	lsrs	r0, r2, #9
 800c92c:	895a      	ldrh	r2, [r3, #10]
 800c92e:	2300      	movs	r3, #0
 800c930:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
 800c934:	0a49      	lsrs	r1, r1, #9
 800c936:	f00b f993 	bl	8017c60 <__aeabi_uldivmod>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c93a:	6823      	ldr	r3, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c93c:	b133      	cbz	r3, 800c94c <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 800c93e:	4298      	cmp	r0, r3
 800c940:	d302      	bcc.n	800c948 <clmt_clust+0x28>
		cl -= ncl; tbl++;		/* Next fragment */
 800c942:	1ac0      	subs	r0, r0, r3
 800c944:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c946:	e7f8      	b.n	800c93a <clmt_clust+0x1a>
	}
	return cl + *tbl;	/* Return the cluster number */
 800c948:	6863      	ldr	r3, [r4, #4]
 800c94a:	4403      	add	r3, r0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	bd10      	pop	{r4, pc}

0800c950 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c950:	b570      	push	{r4, r5, r6, lr}
 800c952:	4606      	mov	r6, r0
 800c954:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c956:	f101 001a 	add.w	r0, r1, #26
 800c95a:	f7ff fef1 	bl	800c740 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 800c95e:	7833      	ldrb	r3, [r6, #0]
 800c960:	2b03      	cmp	r3, #3
 800c962:	d000      	beq.n	800c966 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800c964:	bd70      	pop	{r4, r5, r6, pc}
 800c966:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c968:	f105 0014 	add.w	r0, r5, #20
 800c96c:	f7ff fee8 	bl	800c740 <ld_word>
 800c970:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800c974:	e7f6      	b.n	800c964 <ld_clust+0x14>
 800c976:	bf00      	nop
 800c978:	f3af 8000 	nop.w
 800c97c:	f3af 8000 	nop.w

0800c980 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c980:	b570      	push	{r4, r5, r6, lr}
 800c982:	4606      	mov	r6, r0
 800c984:	460c      	mov	r4, r1
 800c986:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c988:	b291      	uxth	r1, r2
 800c98a:	f104 001a 	add.w	r0, r4, #26
 800c98e:	f7ff ff47 	bl	800c820 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c992:	7833      	ldrb	r3, [r6, #0]
 800c994:	2b03      	cmp	r3, #3
 800c996:	d000      	beq.n	800c99a <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 800c998:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c99a:	0c29      	lsrs	r1, r5, #16
 800c99c:	f104 0014 	add.w	r0, r4, #20
 800c9a0:	f7ff ff3e 	bl	800c820 <st_word>
}
 800c9a4:	e7f8      	b.n	800c998 <st_clust+0x18>
 800c9a6:	bf00      	nop
 800c9a8:	f3af 8000 	nop.w
 800c9ac:	f3af 8000 	nop.w

0800c9b0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b4:	4607      	mov	r7, r0
 800c9b6:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c9b8:	f101 001a 	add.w	r0, r1, #26
 800c9bc:	f7ff fec0 	bl	800c740 <ld_word>
 800c9c0:	bb60      	cbnz	r0, 800ca1c <pick_lfn+0x6c>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c9c2:	7835      	ldrb	r5, [r6, #0]
 800c9c4:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 800c9c8:	3d01      	subs	r5, #1
 800c9ca:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800c9ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c9d2:	f04f 0801 	mov.w	r8, #1
 800c9d6:	2400      	movs	r4, #0
 800c9d8:	e004      	b.n	800c9e4 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c9da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c9de:	4298      	cmp	r0, r3
 800c9e0:	d121      	bne.n	800ca26 <pick_lfn+0x76>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c9e2:	3401      	adds	r4, #1
 800c9e4:	2c0c      	cmp	r4, #12
 800c9e6:	d80e      	bhi.n	800ca06 <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c9e8:	4b12      	ldr	r3, [pc, #72]	; (800ca34 <pick_lfn+0x84>)
 800c9ea:	5d18      	ldrb	r0, [r3, r4]
 800c9ec:	4430      	add	r0, r6
 800c9ee:	f7ff fea7 	bl	800c740 <ld_word>
		if (wc) {
 800c9f2:	f1b8 0f00 	cmp.w	r8, #0
 800c9f6:	d0f0      	beq.n	800c9da <pick_lfn+0x2a>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
 800c9f8:	2dfe      	cmp	r5, #254	; 0xfe
 800c9fa:	d812      	bhi.n	800ca22 <pick_lfn+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c9fc:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 800ca00:	4680      	mov	r8, r0
 800ca02:	3501      	adds	r5, #1
 800ca04:	e7ed      	b.n	800c9e2 <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ca06:	7833      	ldrb	r3, [r6, #0]
 800ca08:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ca0c:	d00d      	beq.n	800ca2a <pick_lfn+0x7a>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
 800ca0e:	2dfe      	cmp	r5, #254	; 0xfe
 800ca10:	d80d      	bhi.n	800ca2e <pick_lfn+0x7e>
		lfnbuf[i] = 0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 800ca18:	2001      	movs	r0, #1
 800ca1a:	e000      	b.n	800ca1e <pick_lfn+0x6e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ca1c:	2000      	movs	r0, #0
}
 800ca1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
 800ca22:	2000      	movs	r0, #0
 800ca24:	e7fb      	b.n	800ca1e <pick_lfn+0x6e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ca26:	2000      	movs	r0, #0
 800ca28:	e7f9      	b.n	800ca1e <pick_lfn+0x6e>
	return 1;		/* The part of LFN is valid */
 800ca2a:	2001      	movs	r0, #1
 800ca2c:	e7f7      	b.n	800ca1e <pick_lfn+0x6e>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
 800ca2e:	2000      	movs	r0, #0
 800ca30:	e7f5      	b.n	800ca1e <pick_lfn+0x6e>
 800ca32:	bf00      	nop
 800ca34:	08019e7c 	.word	0x08019e7c
 800ca38:	f3af 8000 	nop.w
 800ca3c:	f3af 8000 	nop.w

0800ca40 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ca40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca44:	4680      	mov	r8, r0
 800ca46:	460f      	mov	r7, r1
 800ca48:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ca4a:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ca4c:	230f      	movs	r3, #15
 800ca4e:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 800ca50:	2400      	movs	r4, #0
 800ca52:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 800ca54:	4621      	mov	r1, r4
 800ca56:	f107 001a 	add.w	r0, r7, #26
 800ca5a:	f7ff fee1 	bl	800c820 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ca5e:	f109 36ff 	add.w	r6, r9, #4294967295
 800ca62:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800ca66:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 800ca6a:	4625      	mov	r5, r4
 800ca6c:	e002      	b.n	800ca74 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 800ca6e:	3401      	adds	r4, #1
 800ca70:	2c0c      	cmp	r4, #12
 800ca72:	d811      	bhi.n	800ca98 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ca74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca78:	429d      	cmp	r5, r3
 800ca7a:	d002      	beq.n	800ca82 <put_lfn+0x42>
 800ca7c:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 800ca80:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ca82:	4b0c      	ldr	r3, [pc, #48]	; (800cab4 <put_lfn+0x74>)
 800ca84:	5d18      	ldrb	r0, [r3, r4]
 800ca86:	4629      	mov	r1, r5
 800ca88:	4438      	add	r0, r7
 800ca8a:	f7ff fec9 	bl	800c820 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ca8e:	2d00      	cmp	r5, #0
 800ca90:	d1ed      	bne.n	800ca6e <put_lfn+0x2e>
 800ca92:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800ca96:	e7ea      	b.n	800ca6e <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ca98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca9c:	429d      	cmp	r5, r3
 800ca9e:	d002      	beq.n	800caa6 <put_lfn+0x66>
 800caa0:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 800caa4:	b90b      	cbnz	r3, 800caaa <put_lfn+0x6a>
 800caa6:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800caaa:	f887 9000 	strb.w	r9, [r7]
}
 800caae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cab2:	bf00      	nop
 800cab4:	08019e7c 	.word	0x08019e7c
 800cab8:	f3af 8000 	nop.w
 800cabc:	f3af 8000 	nop.w

0800cac0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cac2:	b083      	sub	sp, #12
 800cac4:	4607      	mov	r7, r0
 800cac6:	4615      	mov	r5, r2
 800cac8:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800caca:	220b      	movs	r2, #11
 800cacc:	f7ff fed8 	bl	800c880 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cad0:	2c05      	cmp	r4, #5
 800cad2:	d811      	bhi.n	800caf8 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 800cad4:	2607      	movs	r6, #7
 800cad6:	e01d      	b.n	800cb14 <gen_numname+0x54>
 800cad8:	3201      	adds	r2, #1
 800cada:	2a0f      	cmp	r2, #15
 800cadc:	d80c      	bhi.n	800caf8 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 800cade:	f003 0101 	and.w	r1, r3, #1
 800cae2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
 800cae6:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800cae8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800caec:	d0f4      	beq.n	800cad8 <gen_numname+0x18>
 800caee:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 800caf2:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 800caf6:	e7ef      	b.n	800cad8 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 800caf8:	882b      	ldrh	r3, [r5, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d0ea      	beq.n	800cad4 <gen_numname+0x14>
			wc = *lfn++;
 800cafe:	3502      	adds	r5, #2
			for (i = 0; i < 16; i++) {
 800cb00:	2200      	movs	r2, #0
 800cb02:	e7ea      	b.n	800cada <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 800cb04:	1e75      	subs	r5, r6, #1
 800cb06:	aa02      	add	r2, sp, #8
 800cb08:	4432      	add	r2, r6
 800cb0a:	f802 3c08 	strb.w	r3, [r2, #-8]
		seq /= 16;
	} while (seq);
 800cb0e:	0924      	lsrs	r4, r4, #4
 800cb10:	d009      	beq.n	800cb26 <gen_numname+0x66>
		ns[i--] = c;
 800cb12:	462e      	mov	r6, r5
		c = (BYTE)((seq % 16) + '0');
 800cb14:	f004 020f 	and.w	r2, r4, #15
 800cb18:	f102 0330 	add.w	r3, r2, #48	; 0x30
		if (c > '9') c += 7;
 800cb1c:	2b39      	cmp	r3, #57	; 0x39
 800cb1e:	d9f1      	bls.n	800cb04 <gen_numname+0x44>
 800cb20:	f102 0337 	add.w	r3, r2, #55	; 0x37
 800cb24:	e7ee      	b.n	800cb04 <gen_numname+0x44>
	ns[i] = '~';
 800cb26:	227e      	movs	r2, #126	; 0x7e
 800cb28:	ab02      	add	r3, sp, #8
 800cb2a:	442b      	add	r3, r5
 800cb2c:	f803 2c08 	strb.w	r2, [r3, #-8]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cb30:	e000      	b.n	800cb34 <gen_numname+0x74>
 800cb32:	3401      	adds	r4, #1
 800cb34:	42ac      	cmp	r4, r5
 800cb36:	d211      	bcs.n	800cb5c <gen_numname+0x9c>
 800cb38:	5d38      	ldrb	r0, [r7, r4]
 800cb3a:	2820      	cmp	r0, #32
 800cb3c:	d00e      	beq.n	800cb5c <gen_numname+0x9c>
		if (dbc_1st(dst[j])) {
 800cb3e:	f7ff fecf 	bl	800c8e0 <dbc_1st>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d0f5      	beq.n	800cb32 <gen_numname+0x72>
			if (j == i - 1) break;
 800cb46:	1eb3      	subs	r3, r6, #2
 800cb48:	42a3      	cmp	r3, r4
 800cb4a:	d007      	beq.n	800cb5c <gen_numname+0x9c>
			j++;
 800cb4c:	3401      	adds	r4, #1
 800cb4e:	e7f0      	b.n	800cb32 <gen_numname+0x72>
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cb50:	2220      	movs	r2, #32
 800cb52:	1c63      	adds	r3, r4, #1
 800cb54:	553a      	strb	r2, [r7, r4]
	} while (j < 8);
 800cb56:	2b07      	cmp	r3, #7
 800cb58:	d808      	bhi.n	800cb6c <gen_numname+0xac>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cb5a:	461c      	mov	r4, r3
 800cb5c:	2d07      	cmp	r5, #7
 800cb5e:	d8f7      	bhi.n	800cb50 <gen_numname+0x90>
 800cb60:	ab02      	add	r3, sp, #8
 800cb62:	442b      	add	r3, r5
 800cb64:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800cb68:	3501      	adds	r5, #1
 800cb6a:	e7f2      	b.n	800cb52 <gen_numname+0x92>
}
 800cb6c:	b003      	add	sp, #12
 800cb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb70 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cb70:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 800cb72:	220b      	movs	r2, #11
	BYTE sum = 0;
 800cb74:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cb76:	01c3      	lsls	r3, r0, #7
 800cb78:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800cb7c:	7808      	ldrb	r0, [r1, #0]
 800cb7e:	fa50 f383 	uxtab	r3, r0, r3
 800cb82:	b2d8      	uxtb	r0, r3
 800cb84:	3101      	adds	r1, #1
	} while (--n);
 800cb86:	3a01      	subs	r2, #1
 800cb88:	d1f5      	bne.n	800cb76 <sum_sfn+0x6>
	return sum;
}
 800cb8a:	4770      	bx	lr
 800cb8c:	f3af 8000 	nop.w

0800cb90 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800cb90:	b430      	push	{r4, r5}
 800cb92:	4605      	mov	r5, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800cb94:	7841      	ldrb	r1, [r0, #1]
 800cb96:	3101      	adds	r1, #1
 800cb98:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	e001      	b.n	800cba4 <xdir_sum+0x14>
		if (i == XDIR_SetSum) {	/* Skip sum field */
			i++;
 800cba0:	3301      	adds	r3, #1
	for (i = sum = 0; i < szblk; i++) {
 800cba2:	3301      	adds	r3, #1
 800cba4:	428b      	cmp	r3, r1
 800cba6:	d209      	bcs.n	800cbbc <xdir_sum+0x2c>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d0f9      	beq.n	800cba0 <xdir_sum+0x10>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800cbac:	0842      	lsrs	r2, r0, #1
 800cbae:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
 800cbb2:	5cec      	ldrb	r4, [r5, r3]
 800cbb4:	fa14 f282 	uxtah	r2, r4, r2
 800cbb8:	b290      	uxth	r0, r2
 800cbba:	e7f2      	b.n	800cba2 <xdir_sum+0x12>
		}
	}
	return sum;
}
 800cbbc:	bc30      	pop	{r4, r5}
 800cbbe:	4770      	bx	lr

0800cbc0 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cbc0:	6801      	ldr	r1, [r0, #0]
 800cbc2:	b109      	cbz	r1, 800cbc8 <get_ldnumber+0x8>
		for (tt = *path; (UINT)*tt >= (FF_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find a colon in the path */
 800cbc4:	460a      	mov	r2, r1
 800cbc6:	e003      	b.n	800cbd0 <get_ldnumber+0x10>
	int vol = -1;
 800cbc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbcc:	e008      	b.n	800cbe0 <get_ldnumber+0x20>
		for (tt = *path; (UINT)*tt >= (FF_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find a colon in the path */
 800cbce:	3201      	adds	r2, #1
 800cbd0:	7813      	ldrb	r3, [r2, #0]
 800cbd2:	2b1f      	cmp	r3, #31
 800cbd4:	d901      	bls.n	800cbda <get_ldnumber+0x1a>
 800cbd6:	2b3a      	cmp	r3, #58	; 0x3a
 800cbd8:	d1f9      	bne.n	800cbce <get_ldnumber+0xe>
		if (*tt == ':') {	/* If a colon is exist in the path name */
 800cbda:	2b3a      	cmp	r3, #58	; 0x3a
 800cbdc:	d002      	beq.n	800cbe4 <get_ldnumber+0x24>
#endif
		} else {	/* No volume id and use default drive */
#if FF_FS_RPATH != 0 && FF_VOLUMES >= 2
			vol = CurrVol;	/* Current drive */
#else
			vol = 0;		/* Drive 0 */
 800cbde:	2300      	movs	r3, #0
#endif
		}
	}
	return vol;
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	4770      	bx	lr
{
 800cbe4:	b410      	push	{r4}
			i = *tp++;
 800cbe6:	1c4c      	adds	r4, r1, #1
 800cbe8:	780b      	ldrb	r3, [r1, #0]
			if (IsDigit(i) && tp == tt) {	/* Is there a numeric drive id + colon? */
 800cbea:	3b30      	subs	r3, #48	; 0x30
 800cbec:	2b09      	cmp	r3, #9
 800cbee:	d807      	bhi.n	800cc00 <get_ldnumber+0x40>
 800cbf0:	42a2      	cmp	r2, r4
 800cbf2:	d108      	bne.n	800cc06 <get_ldnumber+0x46>
				if ((i -= '0') < FF_VOLUMES) {	/* If drive id is found, get the value and strip it */
 800cbf4:	b953      	cbnz	r3, 800cc0c <get_ldnumber+0x4c>
					*path = ++tt;
 800cbf6:	3201      	adds	r2, #1
 800cbf8:	6002      	str	r2, [r0, #0]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	bc10      	pop	{r4}
 800cbfe:	4770      	bx	lr
	int vol = -1;
 800cc00:	f04f 33ff 	mov.w	r3, #4294967295
 800cc04:	e7f9      	b.n	800cbfa <get_ldnumber+0x3a>
 800cc06:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0a:	e7f6      	b.n	800cbfa <get_ldnumber+0x3a>
 800cc0c:	f04f 33ff 	mov.w	r3, #4294967295
	return vol;
 800cc10:	e7f3      	b.n	800cbfa <get_ldnumber+0x3a>
 800cc12:	bf00      	nop
 800cc14:	f3af 8000 	nop.w
 800cc18:	f3af 8000 	nop.w
 800cc1c:	f3af 8000 	nop.w

0800cc20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,	/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs		/* Pointer to pointer to the owner filesystem object to return */
)
{
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cc24:	b1a8      	cbz	r0, 800cc52 <validate+0x32>
 800cc26:	4604      	mov	r4, r0
 800cc28:	6803      	ldr	r3, [r0, #0]
 800cc2a:	b1ab      	cbz	r3, 800cc58 <validate+0x38>
 800cc2c:	781a      	ldrb	r2, [r3, #0]
 800cc2e:	b1aa      	cbz	r2, 800cc5c <validate+0x3c>
 800cc30:	8881      	ldrh	r1, [r0, #4]
 800cc32:	88da      	ldrh	r2, [r3, #6]
 800cc34:	4291      	cmp	r1, r2
 800cc36:	d003      	beq.n	800cc40 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800cc38:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	602b      	str	r3, [r5, #0]
	return res;
}
 800cc3e:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cc40:	7858      	ldrb	r0, [r3, #1]
 800cc42:	f7ff fcfd 	bl	800c640 <disk_status>
 800cc46:	f010 0f01 	tst.w	r0, #1
 800cc4a:	d10a      	bne.n	800cc62 <validate+0x42>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cc4c:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
 800cc4e:	2000      	movs	r0, #0
 800cc50:	e7f4      	b.n	800cc3c <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800cc52:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cc54:	2300      	movs	r3, #0
 800cc56:	e7f1      	b.n	800cc3c <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800cc58:	2009      	movs	r0, #9
 800cc5a:	e7ef      	b.n	800cc3c <validate+0x1c>
 800cc5c:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cc5e:	2300      	movs	r3, #0
 800cc60:	e7ec      	b.n	800cc3c <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800cc62:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cc64:	2300      	movs	r3, #0
 800cc66:	e7e9      	b.n	800cc3c <validate+0x1c>
 800cc68:	f3af 8000 	nop.w
 800cc6c:	f3af 8000 	nop.w

0800cc70 <sync_window>:
{
 800cc70:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty */
 800cc72:	78c3      	ldrb	r3, [r0, #3]
 800cc74:	b90b      	cbnz	r3, 800cc7a <sync_window+0xa>
	FRESULT res = FR_OK;
 800cc76:	2000      	movs	r0, #0
}
 800cc78:	bd38      	pop	{r3, r4, r5, pc}
 800cc7a:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 800cc7c:	f100 0538 	add.w	r5, r0, #56	; 0x38
 800cc80:	2301      	movs	r3, #1
 800cc82:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cc84:	4629      	mov	r1, r5
 800cc86:	7840      	ldrb	r0, [r0, #1]
 800cc88:	f7ff fd0a 	bl	800c6a0 <disk_write>
 800cc8c:	b9a0      	cbnz	r0, 800ccb8 <sync_window+0x48>
			fs->wflag = 0;	/* Clear window dirty flag */
 800cc8e:	2300      	movs	r3, #0
 800cc90:	70e3      	strb	r3, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800cc92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cc96:	1acb      	subs	r3, r1, r3
 800cc98:	6a22      	ldr	r2, [r4, #32]
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d20e      	bcs.n	800ccbc <sync_window+0x4c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800cc9e:	78a3      	ldrb	r3, [r4, #2]
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	d001      	beq.n	800cca8 <sync_window+0x38>
	FRESULT res = FR_OK;
 800cca4:	2000      	movs	r0, #0
 800cca6:	e7e7      	b.n	800cc78 <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800cca8:	2301      	movs	r3, #1
 800ccaa:	440a      	add	r2, r1
 800ccac:	4629      	mov	r1, r5
 800ccae:	7860      	ldrb	r0, [r4, #1]
 800ccb0:	f7ff fcf6 	bl	800c6a0 <disk_write>
	FRESULT res = FR_OK;
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	e7df      	b.n	800cc78 <sync_window+0x8>
			res = FR_DISK_ERR;
 800ccb8:	2001      	movs	r0, #1
 800ccba:	e7dd      	b.n	800cc78 <sync_window+0x8>
	FRESULT res = FR_OK;
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	e7db      	b.n	800cc78 <sync_window+0x8>

0800ccc0 <move_window>:
{
 800ccc0:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ccc2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ccc4:	428b      	cmp	r3, r1
 800ccc6:	d012      	beq.n	800ccee <move_window+0x2e>
 800ccc8:	4604      	mov	r4, r0
 800ccca:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800cccc:	f7ff ffd0 	bl	800cc70 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ccd0:	4606      	mov	r6, r0
 800ccd2:	b968      	cbnz	r0, 800ccf0 <move_window+0x30>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	462a      	mov	r2, r5
 800ccd8:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800ccdc:	7860      	ldrb	r0, [r4, #1]
 800ccde:	f7ff fcc7 	bl	800c670 <disk_read>
 800cce2:	b110      	cbz	r0, 800ccea <move_window+0x2a>
				res = FR_DISK_ERR;
 800cce4:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 800cce6:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800ccea:	6365      	str	r5, [r4, #52]	; 0x34
 800ccec:	e000      	b.n	800ccf0 <move_window+0x30>
	FRESULT res = FR_OK;
 800ccee:	2600      	movs	r6, #0
}
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	bd70      	pop	{r4, r5, r6, pc}
 800ccf4:	f3af 8000 	nop.w
 800ccf8:	f3af 8000 	nop.w
 800ccfc:	f3af 8000 	nop.w

0800cd00 <check_fs>:
{
 800cd00:	b510      	push	{r4, lr}
 800cd02:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cd04:	2300      	movs	r3, #0
 800cd06:	70c3      	strb	r3, [r0, #3]
 800cd08:	f04f 33ff 	mov.w	r3, #4294967295
 800cd0c:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cd0e:	f7ff ffd7 	bl	800ccc0 <move_window>
 800cd12:	bb40      	cbnz	r0, 800cd66 <check_fs+0x66>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cd14:	f204 2036 	addw	r0, r4, #566	; 0x236
 800cd18:	f7ff fd12 	bl	800c740 <ld_word>
 800cd1c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cd20:	4298      	cmp	r0, r3
 800cd22:	d122      	bne.n	800cd6a <check_fs+0x6a>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 800cd24:	220b      	movs	r2, #11
 800cd26:	4915      	ldr	r1, [pc, #84]	; (800cd7c <check_fs+0x7c>)
 800cd28:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800cd2c:	f7ff fdc0 	bl	800c8b0 <mem_cmp>
 800cd30:	b1e8      	cbz	r0, 800cd6e <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {	/* Valid JumpBoot code? */
 800cd32:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800cd36:	2be9      	cmp	r3, #233	; 0xe9
 800cd38:	d005      	beq.n	800cd46 <check_fs+0x46>
 800cd3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cd3c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800cd40:	4a0f      	ldr	r2, [pc, #60]	; (800cd80 <check_fs+0x80>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d115      	bne.n	800cd72 <check_fs+0x72>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 800cd46:	2203      	movs	r2, #3
 800cd48:	490e      	ldr	r1, [pc, #56]	; (800cd84 <check_fs+0x84>)
 800cd4a:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 800cd4e:	f7ff fdaf 	bl	800c8b0 <mem_cmp>
 800cd52:	b180      	cbz	r0, 800cd76 <check_fs+0x76>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 800cd54:	2205      	movs	r2, #5
 800cd56:	490c      	ldr	r1, [pc, #48]	; (800cd88 <check_fs+0x88>)
 800cd58:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 800cd5c:	f7ff fda8 	bl	800c8b0 <mem_cmp>
 800cd60:	b120      	cbz	r0, 800cd6c <check_fs+0x6c>
	return 2;	/* Valid BS but not FAT */
 800cd62:	2002      	movs	r0, #2
 800cd64:	e002      	b.n	800cd6c <check_fs+0x6c>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cd66:	2004      	movs	r0, #4
 800cd68:	e000      	b.n	800cd6c <check_fs+0x6c>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cd6a:	2003      	movs	r0, #3
}
 800cd6c:	bd10      	pop	{r4, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 800cd6e:	2001      	movs	r0, #1
 800cd70:	e7fc      	b.n	800cd6c <check_fs+0x6c>
	return 2;	/* Valid BS but not FAT */
 800cd72:	2002      	movs	r0, #2
 800cd74:	e7fa      	b.n	800cd6c <check_fs+0x6c>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 800cd76:	2000      	movs	r0, #0
 800cd78:	e7f8      	b.n	800cd6c <check_fs+0x6c>
 800cd7a:	bf00      	nop
 800cd7c:	0801a8e0 	.word	0x0801a8e0
 800cd80:	009000eb 	.word	0x009000eb
 800cd84:	0801a8ec 	.word	0x0801a8ec
 800cd88:	0801a8f0 	.word	0x0801a8f0
 800cd8c:	f3af 8000 	nop.w

0800cd90 <find_volume>:
{
 800cd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd94:	b084      	sub	sp, #16
 800cd96:	460f      	mov	r7, r1
 800cd98:	4616      	mov	r6, r2
	*rfs = 0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800cd9e:	f7ff ff0f 	bl	800cbc0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800cda2:	1e05      	subs	r5, r0, #0
 800cda4:	f2c0 81e5 	blt.w	800d172 <find_volume+0x3e2>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800cda8:	4bcd      	ldr	r3, [pc, #820]	; (800d0e0 <find_volume+0x350>)
 800cdaa:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800cdae:	2c00      	cmp	r4, #0
 800cdb0:	f000 81e3 	beq.w	800d17a <find_volume+0x3ea>
	*rfs = fs;							/* Return pointer to the filesystem object */
 800cdb4:	603c      	str	r4, [r7, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cdb6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800cdba:	7823      	ldrb	r3, [r4, #0]
 800cdbc:	b173      	cbz	r3, 800cddc <find_volume+0x4c>
		stat = disk_status(fs->pdrv);
 800cdbe:	7860      	ldrb	r0, [r4, #1]
 800cdc0:	f7ff fc3e 	bl	800c640 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cdc4:	f010 0f01 	tst.w	r0, #1
 800cdc8:	d108      	bne.n	800cddc <find_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cdca:	2e00      	cmp	r6, #0
 800cdcc:	f000 81d7 	beq.w	800d17e <find_volume+0x3ee>
 800cdd0:	f010 0f04 	tst.w	r0, #4
 800cdd4:	f040 81d5 	bne.w	800d182 <find_volume+0x3f2>
			return FR_OK;				/* The filesystem object is valid */
 800cdd8:	2000      	movs	r0, #0
 800cdda:	e1cb      	b.n	800d174 <find_volume+0x3e4>
	fs->fs_type = 0;					/* Clear the filesystem object */
 800cddc:	2300      	movs	r3, #0
 800cdde:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cde0:	b2e8      	uxtb	r0, r5
 800cde2:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 800cde4:	f7ff fc14 	bl	800c610 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cde8:	f010 0f01 	tst.w	r0, #1
 800cdec:	f040 81cb 	bne.w	800d186 <find_volume+0x3f6>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cdf0:	b11e      	cbz	r6, 800cdfa <find_volume+0x6a>
 800cdf2:	f010 0f04 	tst.w	r0, #4
 800cdf6:	f040 81c8 	bne.w	800d18a <find_volume+0x3fa>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f7ff ff7f 	bl	800cd00 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ce02:	2802      	cmp	r0, #2
 800ce04:	f000 808c 	beq.w	800cf20 <find_volume+0x190>
	bsect = 0;
 800ce08:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ce0a:	2804      	cmp	r0, #4
 800ce0c:	f000 81bf 	beq.w	800d18e <find_volume+0x3fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ce10:	2801      	cmp	r0, #1
 800ce12:	f200 81be 	bhi.w	800d192 <find_volume+0x402>
	if (fmt == 1) {
 800ce16:	f000 810b 	beq.w	800d030 <find_volume+0x2a0>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ce1a:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800ce1e:	f7ff fc8f 	bl	800c740 <ld_word>
 800ce22:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800ce26:	f040 81ca 	bne.w	800d1be <find_volume+0x42e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ce2a:	f104 004e 	add.w	r0, r4, #78	; 0x4e
 800ce2e:	f7ff fc87 	bl	800c740 <ld_word>
 800ce32:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ce34:	b920      	cbnz	r0, 800ce40 <find_volume+0xb0>
 800ce36:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce3a:	f7ff fc89 	bl	800c750 <ld_dword>
 800ce3e:	4607      	mov	r7, r0
		fs->fsize = fasize;
 800ce40:	6227      	str	r7, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ce42:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800ce46:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ce48:	1e53      	subs	r3, r2, #1
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	f200 81b8 	bhi.w	800d1c2 <find_volume+0x432>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ce52:	fb07 f502 	mul.w	r5, r7, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ce56:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 800ce5a:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ce5e:	f1b8 0f00 	cmp.w	r8, #0
 800ce62:	f000 81b0 	beq.w	800d1c6 <find_volume+0x436>
 800ce66:	f108 33ff 	add.w	r3, r8, #4294967295
 800ce6a:	ea18 0f03 	tst.w	r8, r3
 800ce6e:	f040 81ac 	bne.w	800d1ca <find_volume+0x43a>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ce72:	f104 0049 	add.w	r0, r4, #73	; 0x49
 800ce76:	f7ff fc63 	bl	800c740 <ld_word>
 800ce7a:	4682      	mov	sl, r0
 800ce7c:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ce7e:	f010 0f0f 	tst.w	r0, #15
 800ce82:	f040 81a4 	bne.w	800d1ce <find_volume+0x43e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ce86:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 800ce8a:	f7ff fc59 	bl	800c740 <ld_word>
 800ce8e:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ce90:	b920      	cbnz	r0, 800ce9c <find_volume+0x10c>
 800ce92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce96:	f7ff fc5b 	bl	800c750 <ld_dword>
 800ce9a:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ce9c:	f104 0046 	add.w	r0, r4, #70	; 0x46
 800cea0:	f7ff fc4e 	bl	800c740 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cea4:	4601      	mov	r1, r0
 800cea6:	2800      	cmp	r0, #0
 800cea8:	f000 8193 	beq.w	800d1d2 <find_volume+0x442>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ceac:	1942      	adds	r2, r0, r5
 800ceae:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ceb2:	4591      	cmp	r9, r2
 800ceb4:	f0c0 818f 	bcc.w	800d1d6 <find_volume+0x446>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ceb8:	eba9 0302 	sub.w	r3, r9, r2
 800cebc:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	f000 818a 	beq.w	800d1da <find_volume+0x44a>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800cec6:	4887      	ldr	r0, [pc, #540]	; (800d0e4 <find_volume+0x354>)
 800cec8:	4283      	cmp	r3, r0
 800ceca:	f240 80d0 	bls.w	800d06e <find_volume+0x2de>
		fmt = 0;
 800cece:	f04f 0900 	mov.w	r9, #0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ced2:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800ced6:	4283      	cmp	r3, r0
 800ced8:	d801      	bhi.n	800cede <find_volume+0x14e>
 800ceda:	f04f 0902 	mov.w	r9, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cede:	f640 70f5 	movw	r0, #4085	; 0xff5
 800cee2:	4283      	cmp	r3, r0
 800cee4:	f240 80c6 	bls.w	800d074 <find_volume+0x2e4>
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800cee8:	f1b9 0f00 	cmp.w	r9, #0
 800ceec:	f040 80c4 	bne.w	800d078 <find_volume+0x2e8>
 800cef0:	200d      	movs	r0, #13
 800cef2:	e13f      	b.n	800d174 <find_volume+0x3e4>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cef4:	2000      	movs	r0, #0
 800cef6:	ab04      	add	r3, sp, #16
 800cef8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800cefc:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf00:	3501      	adds	r5, #1
 800cf02:	2d03      	cmp	r5, #3
 800cf04:	d80e      	bhi.n	800cf24 <find_volume+0x194>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cf06:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800cf0a:	012b      	lsls	r3, r5, #4
 800cf0c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cf10:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cf12:	7903      	ldrb	r3, [r0, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d0ed      	beq.n	800cef4 <find_volume+0x164>
 800cf18:	3008      	adds	r0, #8
 800cf1a:	f7ff fc19 	bl	800c750 <ld_dword>
 800cf1e:	e7ea      	b.n	800cef6 <find_volume+0x166>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf20:	2500      	movs	r5, #0
 800cf22:	e7ee      	b.n	800cf02 <find_volume+0x172>
 800cf24:	2500      	movs	r5, #0
 800cf26:	e00a      	b.n	800cf3e <find_volume+0x1ae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf28:	4631      	mov	r1, r6
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f7ff fee8 	bl	800cd00 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cf30:	2801      	cmp	r0, #1
 800cf32:	f67f af6a 	bls.w	800ce0a <find_volume+0x7a>
 800cf36:	3501      	adds	r5, #1
 800cf38:	2d03      	cmp	r5, #3
 800cf3a:	f63f af66 	bhi.w	800ce0a <find_volume+0x7a>
			bsect = br[i];
 800cf3e:	ab04      	add	r3, sp, #16
 800cf40:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800cf44:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf48:	2e00      	cmp	r6, #0
 800cf4a:	d1ed      	bne.n	800cf28 <find_volume+0x198>
 800cf4c:	2003      	movs	r0, #3
 800cf4e:	e7f2      	b.n	800cf36 <find_volume+0x1a6>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800cf50:	3301      	adds	r3, #1
 800cf52:	2b3f      	cmp	r3, #63	; 0x3f
 800cf54:	d804      	bhi.n	800cf60 <find_volume+0x1d0>
 800cf56:	18e2      	adds	r2, r4, r3
 800cf58:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800cf5c:	2a00      	cmp	r2, #0
 800cf5e:	d0f7      	beq.n	800cf50 <find_volume+0x1c0>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800cf60:	2b3f      	cmp	r3, #63	; 0x3f
 800cf62:	f240 8118 	bls.w	800d196 <find_volume+0x406>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800cf66:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 800cf6a:	f7ff fbe9 	bl	800c740 <ld_word>
 800cf6e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800cf72:	f040 8112 	bne.w	800d19a <find_volume+0x40a>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800cf76:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 800cf7a:	2b09      	cmp	r3, #9
 800cf7c:	f040 810f 	bne.w	800d19e <find_volume+0x40e>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800cf80:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800cf84:	f7ff fbf4 	bl	800c770 <ld_qword>
 800cf88:	eb10 0806 	adds.w	r8, r0, r6
 800cf8c:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800cf90:	f1b9 0f01 	cmp.w	r9, #1
 800cf94:	bf08      	it	eq
 800cf96:	f1b8 0f00 	cmpeq.w	r8, #0
 800cf9a:	f080 8102 	bcs.w	800d1a2 <find_volume+0x412>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800cf9e:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800cfa2:	f7ff fbd5 	bl	800c750 <ld_dword>
 800cfa6:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800cfa8:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 800cfac:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	f040 80f9 	bne.w	800d1a6 <find_volume+0x416>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800cfb4:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800cfb8:	2501      	movs	r5, #1
 800cfba:	409d      	lsls	r5, r3
 800cfbc:	b2ad      	uxth	r5, r5
 800cfbe:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800cfc0:	2d00      	cmp	r5, #0
 800cfc2:	f000 80f2 	beq.w	800d1aa <find_volume+0x41a>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800cfc6:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800cfca:	f7ff fbc1 	bl	800c750 <ld_dword>
 800cfce:	4682      	mov	sl, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800cfd0:	4b45      	ldr	r3, [pc, #276]	; (800d0e8 <find_volume+0x358>)
 800cfd2:	4298      	cmp	r0, r3
 800cfd4:	f200 80eb 	bhi.w	800d1ae <find_volume+0x41e>
		fs->n_fatent = nclst + 2;
 800cfd8:	1c83      	adds	r3, r0, #2
 800cfda:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
 800cfdc:	6266      	str	r6, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800cfde:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800cfe2:	f7ff fbb5 	bl	800c750 <ld_dword>
 800cfe6:	1987      	adds	r7, r0, r6
 800cfe8:	6327      	str	r7, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800cfea:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800cfee:	f7ff fbaf 	bl	800c750 <ld_dword>
 800cff2:	4430      	add	r0, r6
 800cff4:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800cff6:	fb0a f205 	mul.w	r2, sl, r5
 800cffa:	2100      	movs	r1, #0
 800cffc:	19d2      	adds	r2, r2, r7
 800cffe:	f141 0300 	adc.w	r3, r1, #0
 800d002:	4599      	cmp	r9, r3
 800d004:	bf08      	it	eq
 800d006:	4590      	cmpeq	r8, r2
 800d008:	f0c0 80d3 	bcc.w	800d1b2 <find_volume+0x422>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800d00c:	f104 0098 	add.w	r0, r4, #152	; 0x98
 800d010:	f7ff fb9e 	bl	800c750 <ld_dword>
 800d014:	4601      	mov	r1, r0
 800d016:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d018:	4620      	mov	r0, r4
 800d01a:	f7ff fc71 	bl	800c900 <clst2sect>
 800d01e:	4601      	mov	r1, r0
 800d020:	4620      	mov	r0, r4
 800d022:	f7ff fe4d 	bl	800ccc0 <move_window>
 800d026:	2800      	cmp	r0, #0
 800d028:	f040 80c5 	bne.w	800d1b6 <find_volume+0x426>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d02c:	2500      	movs	r5, #0
 800d02e:	e002      	b.n	800d036 <find_volume+0x2a6>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800d030:	230b      	movs	r3, #11
 800d032:	e78e      	b.n	800cf52 <find_volume+0x1c2>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d034:	3520      	adds	r5, #32
 800d036:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d03a:	d20d      	bcs.n	800d058 <find_volume+0x2c8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d03c:	1963      	adds	r3, r4, r5
 800d03e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d042:	2b81      	cmp	r3, #129	; 0x81
 800d044:	d1f6      	bne.n	800d034 <find_volume+0x2a4>
 800d046:	f104 0338 	add.w	r3, r4, #56	; 0x38
 800d04a:	f105 0014 	add.w	r0, r5, #20
 800d04e:	4418      	add	r0, r3
 800d050:	f7ff fb7e 	bl	800c750 <ld_dword>
 800d054:	2802      	cmp	r0, #2
 800d056:	d1ed      	bne.n	800d034 <find_volume+0x2a4>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d058:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d05c:	f000 80ad 	beq.w	800d1ba <find_volume+0x42a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d060:	f04f 33ff 	mov.w	r3, #4294967295
 800d064:	61a3      	str	r3, [r4, #24]
 800d066:	6163      	str	r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
 800d068:	f04f 0904 	mov.w	r9, #4
 800d06c:	e02e      	b.n	800d0cc <find_volume+0x33c>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800d06e:	f04f 0903 	mov.w	r9, #3
 800d072:	e72e      	b.n	800ced2 <find_volume+0x142>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d074:	f04f 0901 	mov.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d078:	f103 0802 	add.w	r8, r3, #2
 800d07c:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d080:	6266      	str	r6, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d082:	198b      	adds	r3, r1, r6
 800d084:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d086:	4432      	add	r2, r6
 800d088:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d08a:	f1b9 0f03 	cmp.w	r9, #3
 800d08e:	d02d      	beq.n	800d0ec <find_volume+0x35c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d090:	f1ba 0f00 	cmp.w	sl, #0
 800d094:	f000 80a7 	beq.w	800d1e6 <find_volume+0x456>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d098:	442b      	add	r3, r5
 800d09a:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d09c:	f1b9 0f02 	cmp.w	r9, #2
 800d0a0:	d035      	beq.n	800d10e <find_volume+0x37e>
 800d0a2:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800d0a6:	f008 0301 	and.w	r3, r8, #1
 800d0aa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d0ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d0b2:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
 800d0b6:	f0c0 8098 	bcc.w	800d1ea <find_volume+0x45a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d0be:	61a3      	str	r3, [r4, #24]
 800d0c0:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
 800d0c2:	2380      	movs	r3, #128	; 0x80
 800d0c4:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800d0c6:	f1b9 0f03 	cmp.w	r9, #3
 800d0ca:	d023      	beq.n	800d114 <find_volume+0x384>
	fs->fs_type = fmt;		/* FAT sub-type */
 800d0cc:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
 800d0d0:	4a03      	ldr	r2, [pc, #12]	; (800d0e0 <find_volume+0x350>)
 800d0d2:	8893      	ldrh	r3, [r2, #4]
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	8093      	strh	r3, [r2, #4]
 800d0da:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 800d0dc:	2000      	movs	r0, #0
 800d0de:	e049      	b.n	800d174 <find_volume+0x3e4>
 800d0e0:	200022c8 	.word	0x200022c8
 800d0e4:	0ffffff5 	.word	0x0ffffff5
 800d0e8:	7ffffffd 	.word	0x7ffffffd
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d0ec:	f104 0062 	add.w	r0, r4, #98	; 0x62
 800d0f0:	f7ff fb26 	bl	800c740 <ld_word>
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d172      	bne.n	800d1de <find_volume+0x44e>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d0f8:	f1ba 0f00 	cmp.w	sl, #0
 800d0fc:	d171      	bne.n	800d1e2 <find_volume+0x452>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d0fe:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800d102:	f7ff fb25 	bl	800c750 <ld_dword>
 800d106:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d108:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800d10c:	e7cf      	b.n	800d0ae <find_volume+0x31e>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d10e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800d112:	e7cc      	b.n	800d0ae <find_volume+0x31e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d114:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d118:	f7ff fb12 	bl	800c740 <ld_word>
 800d11c:	2801      	cmp	r0, #1
 800d11e:	d1d5      	bne.n	800d0cc <find_volume+0x33c>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d120:	1c71      	adds	r1, r6, #1
 800d122:	4620      	mov	r0, r4
 800d124:	f7ff fdcc 	bl	800ccc0 <move_window>
 800d128:	2800      	cmp	r0, #0
 800d12a:	d1cf      	bne.n	800d0cc <find_volume+0x33c>
			fs->fsi_flag = 0;
 800d12c:	2300      	movs	r3, #0
 800d12e:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800d130:	f204 2036 	addw	r0, r4, #566	; 0x236
 800d134:	f7ff fb04 	bl	800c740 <ld_word>
 800d138:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d13c:	4298      	cmp	r0, r3
 800d13e:	d1c5      	bne.n	800d0cc <find_volume+0x33c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d140:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800d144:	f7ff fb04 	bl	800c750 <ld_dword>
 800d148:	4b29      	ldr	r3, [pc, #164]	; (800d1f0 <find_volume+0x460>)
 800d14a:	4298      	cmp	r0, r3
 800d14c:	d1be      	bne.n	800d0cc <find_volume+0x33c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d14e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800d152:	f7ff fafd 	bl	800c750 <ld_dword>
 800d156:	4b27      	ldr	r3, [pc, #156]	; (800d1f4 <find_volume+0x464>)
 800d158:	4298      	cmp	r0, r3
 800d15a:	d1b7      	bne.n	800d0cc <find_volume+0x33c>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d15c:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800d160:	f7ff faf6 	bl	800c750 <ld_dword>
 800d164:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d166:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800d16a:	f7ff faf1 	bl	800c750 <ld_dword>
 800d16e:	6160      	str	r0, [r4, #20]
 800d170:	e7ac      	b.n	800d0cc <find_volume+0x33c>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d172:	200b      	movs	r0, #11
}
 800d174:	b004      	add	sp, #16
 800d176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800d17a:	200c      	movs	r0, #12
 800d17c:	e7fa      	b.n	800d174 <find_volume+0x3e4>
			return FR_OK;				/* The filesystem object is valid */
 800d17e:	2000      	movs	r0, #0
 800d180:	e7f8      	b.n	800d174 <find_volume+0x3e4>
				return FR_WRITE_PROTECTED;
 800d182:	200a      	movs	r0, #10
 800d184:	e7f6      	b.n	800d174 <find_volume+0x3e4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d186:	2003      	movs	r0, #3
 800d188:	e7f4      	b.n	800d174 <find_volume+0x3e4>
		return FR_WRITE_PROTECTED;
 800d18a:	200a      	movs	r0, #10
 800d18c:	e7f2      	b.n	800d174 <find_volume+0x3e4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d18e:	2001      	movs	r0, #1
 800d190:	e7f0      	b.n	800d174 <find_volume+0x3e4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d192:	200d      	movs	r0, #13
 800d194:	e7ee      	b.n	800d174 <find_volume+0x3e4>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800d196:	200d      	movs	r0, #13
 800d198:	e7ec      	b.n	800d174 <find_volume+0x3e4>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800d19a:	200d      	movs	r0, #13
 800d19c:	e7ea      	b.n	800d174 <find_volume+0x3e4>
			return FR_NO_FILESYSTEM;
 800d19e:	200d      	movs	r0, #13
 800d1a0:	e7e8      	b.n	800d174 <find_volume+0x3e4>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d1a2:	200d      	movs	r0, #13
 800d1a4:	e7e6      	b.n	800d174 <find_volume+0x3e4>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d1a6:	200d      	movs	r0, #13
 800d1a8:	e7e4      	b.n	800d174 <find_volume+0x3e4>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d1aa:	200d      	movs	r0, #13
 800d1ac:	e7e2      	b.n	800d174 <find_volume+0x3e4>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d1ae:	200d      	movs	r0, #13
 800d1b0:	e7e0      	b.n	800d174 <find_volume+0x3e4>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d1b2:	200d      	movs	r0, #13
 800d1b4:	e7de      	b.n	800d174 <find_volume+0x3e4>
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d1b6:	2001      	movs	r0, #1
 800d1b8:	e7dc      	b.n	800d174 <find_volume+0x3e4>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d1ba:	200d      	movs	r0, #13
 800d1bc:	e7da      	b.n	800d174 <find_volume+0x3e4>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d1be:	200d      	movs	r0, #13
 800d1c0:	e7d8      	b.n	800d174 <find_volume+0x3e4>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d1c2:	200d      	movs	r0, #13
 800d1c4:	e7d6      	b.n	800d174 <find_volume+0x3e4>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d1c6:	200d      	movs	r0, #13
 800d1c8:	e7d4      	b.n	800d174 <find_volume+0x3e4>
 800d1ca:	200d      	movs	r0, #13
 800d1cc:	e7d2      	b.n	800d174 <find_volume+0x3e4>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d1ce:	200d      	movs	r0, #13
 800d1d0:	e7d0      	b.n	800d174 <find_volume+0x3e4>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d1d2:	200d      	movs	r0, #13
 800d1d4:	e7ce      	b.n	800d174 <find_volume+0x3e4>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d1d6:	200d      	movs	r0, #13
 800d1d8:	e7cc      	b.n	800d174 <find_volume+0x3e4>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d1da:	200d      	movs	r0, #13
 800d1dc:	e7ca      	b.n	800d174 <find_volume+0x3e4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d1de:	200d      	movs	r0, #13
 800d1e0:	e7c8      	b.n	800d174 <find_volume+0x3e4>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d1e2:	200d      	movs	r0, #13
 800d1e4:	e7c6      	b.n	800d174 <find_volume+0x3e4>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d1e6:	200d      	movs	r0, #13
 800d1e8:	e7c4      	b.n	800d174 <find_volume+0x3e4>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d1ea:	200d      	movs	r0, #13
 800d1ec:	e7c2      	b.n	800d174 <find_volume+0x3e4>
 800d1ee:	bf00      	nop
 800d1f0:	41615252 	.word	0x41615252
 800d1f4:	61417272 	.word	0x61417272
 800d1f8:	f3af 8000 	nop.w
 800d1fc:	f3af 8000 	nop.w

0800d200 <find_bitmap>:
{
 800d200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d204:	4605      	mov	r5, r0
 800d206:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800d208:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 800d20a:	69c3      	ldr	r3, [r0, #28]
 800d20c:	3b02      	subs	r3, #2
 800d20e:	42bb      	cmp	r3, r7
 800d210:	d800      	bhi.n	800d214 <find_bitmap+0x14>
 800d212:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
 800d214:	46b8      	mov	r8, r7
 800d216:	463c      	mov	r4, r7
 800d218:	2600      	movs	r6, #0
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d21a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800d21c:	eb01 3114 	add.w	r1, r1, r4, lsr #12
 800d220:	4628      	mov	r0, r5
 800d222:	f7ff fd4d 	bl	800ccc0 <move_window>
 800d226:	bb40      	cbnz	r0, 800d27a <find_bitmap+0x7a>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800d228:	f3c4 00c8 	ubfx	r0, r4, #3, #9
 800d22c:	f004 0207 	and.w	r2, r4, #7
 800d230:	2301      	movs	r3, #1
 800d232:	4093      	lsls	r3, r2
 800d234:	b2db      	uxtb	r3, r3
 800d236:	e009      	b.n	800d24c <find_bitmap+0x4c>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800d238:	46a0      	mov	r8, r4
 800d23a:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
 800d23c:	42a7      	cmp	r7, r4
 800d23e:	d01f      	beq.n	800d280 <find_bitmap+0x80>
			} while (bm);
 800d240:	b923      	cbnz	r3, 800d24c <find_bitmap+0x4c>
		} while (++i < SS(fs));
 800d242:	3001      	adds	r0, #1
 800d244:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800d248:	d2e7      	bcs.n	800d21a <find_bitmap+0x1a>
			bm = 1;
 800d24a:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800d24c:	182a      	adds	r2, r5, r0
 800d24e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800d252:	401a      	ands	r2, r3
 800d254:	005b      	lsls	r3, r3, #1
 800d256:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800d258:	3401      	adds	r4, #1
 800d25a:	69e9      	ldr	r1, [r5, #28]
 800d25c:	3902      	subs	r1, #2
 800d25e:	42a1      	cmp	r1, r4
 800d260:	d803      	bhi.n	800d26a <find_bitmap+0x6a>
					val = 0; bm = 0; i = SS(fs);
 800d262:	2400      	movs	r4, #0
 800d264:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d268:	4623      	mov	r3, r4
				if (!bv) {	/* Is it a free cluster? */
 800d26a:	2a00      	cmp	r2, #0
 800d26c:	d1e4      	bne.n	800d238 <find_bitmap+0x38>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800d26e:	3601      	adds	r6, #1
 800d270:	454e      	cmp	r6, r9
 800d272:	d1e3      	bne.n	800d23c <find_bitmap+0x3c>
 800d274:	f108 0002 	add.w	r0, r8, #2
 800d278:	e003      	b.n	800d282 <find_bitmap+0x82>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d27a:	f04f 30ff 	mov.w	r0, #4294967295
 800d27e:	e000      	b.n	800d282 <find_bitmap+0x82>
				if (val == clst) return 0;	/* All cluster scanned? */
 800d280:	2000      	movs	r0, #0
}
 800d282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d286:	bf00      	nop
 800d288:	f3af 8000 	nop.w
 800d28c:	f3af 8000 	nop.w

0800d290 <change_bitmap>:
{
 800d290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d294:	4606      	mov	r6, r0
 800d296:	4617      	mov	r7, r2
 800d298:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800d29a:	1e8c      	subs	r4, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800d29c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800d29e:	eb01 3114 	add.w	r1, r1, r4, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800d2a2:	f3c4 05c8 	ubfx	r5, r4, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800d2a6:	f004 0407 	and.w	r4, r4, #7
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	fa03 f404 	lsl.w	r4, r3, r4
 800d2b0:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d2b2:	f101 0901 	add.w	r9, r1, #1
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	f7ff fd02 	bl	800ccc0 <move_window>
 800d2bc:	4601      	mov	r1, r0
 800d2be:	b110      	cbz	r0, 800d2c6 <change_bitmap+0x36>
 800d2c0:	2101      	movs	r1, #1
 800d2c2:	e01e      	b.n	800d302 <change_bitmap+0x72>
			bm = 1;
 800d2c4:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800d2c6:	1973      	adds	r3, r6, r5
 800d2c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d2cc:	4223      	tst	r3, r4
 800d2ce:	bf14      	ite	ne
 800d2d0:	2201      	movne	r2, #1
 800d2d2:	2200      	moveq	r2, #0
 800d2d4:	4542      	cmp	r2, r8
 800d2d6:	d013      	beq.n	800d300 <change_bitmap+0x70>
				fs->win[i] ^= bm;	/* Flip the bit */
 800d2d8:	1972      	adds	r2, r6, r5
 800d2da:	4063      	eors	r3, r4
 800d2dc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				fs->wflag = 1;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800d2e4:	3f01      	subs	r7, #1
 800d2e6:	d00c      	beq.n	800d302 <change_bitmap+0x72>
			} while (bm <<= 1);		/* Next bit */
 800d2e8:	409c      	lsls	r4, r3
 800d2ea:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800d2ee:	d1ea      	bne.n	800d2c6 <change_bitmap+0x36>
		} while (++i < SS(fs));		/* Next byte */
 800d2f0:	441d      	add	r5, r3
			bm = 1;
 800d2f2:	461c      	mov	r4, r3
		} while (++i < SS(fs));		/* Next byte */
 800d2f4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d2f8:	d3e4      	bcc.n	800d2c4 <change_bitmap+0x34>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d2fa:	4649      	mov	r1, r9
		i = 0;
 800d2fc:	2500      	movs	r5, #0
 800d2fe:	e7d8      	b.n	800d2b2 <change_bitmap+0x22>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800d300:	2102      	movs	r1, #2
}
 800d302:	4608      	mov	r0, r1
 800d304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d308:	f3af 8000 	nop.w
 800d30c:	f3af 8000 	nop.w

0800d310 <put_fat>:
{
 800d310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d314:	2901      	cmp	r1, #1
 800d316:	f240 8082 	bls.w	800d41e <put_fat+0x10e>
 800d31a:	4605      	mov	r5, r0
 800d31c:	460c      	mov	r4, r1
 800d31e:	4617      	mov	r7, r2
 800d320:	69c3      	ldr	r3, [r0, #28]
 800d322:	428b      	cmp	r3, r1
 800d324:	d97d      	bls.n	800d422 <put_fat+0x112>
		switch (fs->fs_type) {
 800d326:	7803      	ldrb	r3, [r0, #0]
 800d328:	3b01      	subs	r3, #1
 800d32a:	2b03      	cmp	r3, #3
 800d32c:	d87d      	bhi.n	800d42a <put_fat+0x11a>
 800d32e:	e8df f003 	tbb	[pc, r3]
 800d332:	4002      	.short	0x4002
 800d334:	5353      	.short	0x5353
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800d336:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d33a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d33c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800d340:	f7ff fcbe 	bl	800ccc0 <move_window>
			if (res != FR_OK) break;
 800d344:	4606      	mov	r6, r0
 800d346:	2800      	cmp	r0, #0
 800d348:	d16c      	bne.n	800d424 <put_fat+0x114>
			p = fs->win + bc++ % SS(fs);
 800d34a:	f105 0a38 	add.w	sl, r5, #56	; 0x38
 800d34e:	f108 0901 	add.w	r9, r8, #1
 800d352:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 800d356:	f014 0401 	ands.w	r4, r4, #1
 800d35a:	d01f      	beq.n	800d39c <put_fat+0x8c>
 800d35c:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 800d360:	f003 030f 	and.w	r3, r3, #15
 800d364:	013a      	lsls	r2, r7, #4
 800d366:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800d36a:	4313      	orrs	r3, r2
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 800d372:	2301      	movs	r3, #1
 800d374:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d376:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800d378:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800d37c:	4628      	mov	r0, r5
 800d37e:	f7ff fc9f 	bl	800ccc0 <move_window>
			if (res != FR_OK) break;
 800d382:	4606      	mov	r6, r0
 800d384:	2800      	cmp	r0, #0
 800d386:	d14d      	bne.n	800d424 <put_fat+0x114>
			p = fs->win + bc % SS(fs);
 800d388:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 800d38c:	b144      	cbz	r4, 800d3a0 <put_fat+0x90>
 800d38e:	f3c7 1707 	ubfx	r7, r7, #4, #8
 800d392:	f80a 7009 	strb.w	r7, [sl, r9]
			fs->wflag = 1;
 800d396:	2301      	movs	r3, #1
 800d398:	70eb      	strb	r3, [r5, #3]
			break;
 800d39a:	e043      	b.n	800d424 <put_fat+0x114>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 800d39c:	b2fb      	uxtb	r3, r7
 800d39e:	e7e6      	b.n	800d36e <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 800d3a0:	f91a 3009 	ldrsb.w	r3, [sl, r9]
 800d3a4:	f023 030f 	bic.w	r3, r3, #15
 800d3a8:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800d3ac:	431f      	orrs	r7, r3
 800d3ae:	b2ff      	uxtb	r7, r7
 800d3b0:	e7ef      	b.n	800d392 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d3b2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d3b4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d3b8:	f7ff fc82 	bl	800ccc0 <move_window>
			if (res != FR_OK) break;
 800d3bc:	4606      	mov	r6, r0
 800d3be:	bb88      	cbnz	r0, 800d424 <put_fat+0x114>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800d3c0:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800d3c4:	0064      	lsls	r4, r4, #1
 800d3c6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800d3ca:	b2b9      	uxth	r1, r7
 800d3cc:	4420      	add	r0, r4
 800d3ce:	f7ff fa27 	bl	800c820 <st_word>
			fs->wflag = 1;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	70eb      	strb	r3, [r5, #3]
			break;
 800d3d6:	e025      	b.n	800d424 <put_fat+0x114>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d3d8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d3da:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d3de:	f7ff fc6f 	bl	800ccc0 <move_window>
			if (res != FR_OK) break;
 800d3e2:	4606      	mov	r6, r0
 800d3e4:	b9f0      	cbnz	r0, 800d424 <put_fat+0x114>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d3e6:	782b      	ldrb	r3, [r5, #0]
 800d3e8:	2b04      	cmp	r3, #4
 800d3ea:	d00c      	beq.n	800d406 <put_fat+0xf6>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d3ec:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800d3f0:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800d3f4:	00a3      	lsls	r3, r4, #2
 800d3f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d3fa:	4418      	add	r0, r3
 800d3fc:	f7ff f9a8 	bl	800c750 <ld_dword>
 800d400:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 800d404:	4307      	orrs	r7, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d406:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800d40a:	00a4      	lsls	r4, r4, #2
 800d40c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800d410:	4639      	mov	r1, r7
 800d412:	4420      	add	r0, r4
 800d414:	f7ff fa0c 	bl	800c830 <st_dword>
			fs->wflag = 1;
 800d418:	2301      	movs	r3, #1
 800d41a:	70eb      	strb	r3, [r5, #3]
			break;
 800d41c:	e002      	b.n	800d424 <put_fat+0x114>
	FRESULT res = FR_INT_ERR;
 800d41e:	2602      	movs	r6, #2
 800d420:	e000      	b.n	800d424 <put_fat+0x114>
 800d422:	2602      	movs	r6, #2
}
 800d424:	4630      	mov	r0, r6
 800d426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
 800d42a:	2602      	movs	r6, #2
 800d42c:	e7fa      	b.n	800d424 <put_fat+0x114>
 800d42e:	bf00      	nop

0800d430 <fill_last_frag>:
{
 800d430:	b570      	push	{r4, r5, r6, lr}
 800d432:	4604      	mov	r4, r0
 800d434:	460d      	mov	r5, r1
 800d436:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d438:	e007      	b.n	800d44a <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d43a:	4632      	mov	r2, r6
 800d43c:	f7ff ff68 	bl	800d310 <put_fat>
		if (res != FR_OK) return res;
 800d440:	4603      	mov	r3, r0
 800d442:	b958      	cbnz	r0, 800d45c <fill_last_frag+0x2c>
		obj->n_frag--;
 800d444:	69e3      	ldr	r3, [r4, #28]
 800d446:	3b01      	subs	r3, #1
 800d448:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d44a:	69e3      	ldr	r3, [r4, #28]
 800d44c:	b133      	cbz	r3, 800d45c <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d44e:	6820      	ldr	r0, [r4, #0]
 800d450:	1aea      	subs	r2, r5, r3
 800d452:	1c51      	adds	r1, r2, #1
 800d454:	2b01      	cmp	r3, #1
 800d456:	d9f0      	bls.n	800d43a <fill_last_frag+0xa>
 800d458:	3202      	adds	r2, #2
 800d45a:	e7ef      	b.n	800d43c <fill_last_frag+0xc>
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	bd70      	pop	{r4, r5, r6, pc}

0800d460 <fill_first_frag>:
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800d460:	79c3      	ldrb	r3, [r0, #7]
 800d462:	2b03      	cmp	r3, #3
 800d464:	d002      	beq.n	800d46c <fill_first_frag+0xc>
	return FR_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	4770      	bx	lr
{
 800d46c:	b570      	push	{r4, r5, r6, lr}
 800d46e:	4606      	mov	r6, r0
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d470:	6881      	ldr	r1, [r0, #8]
 800d472:	6984      	ldr	r4, [r0, #24]
 800d474:	b14c      	cbz	r4, 800d48a <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
 800d476:	1c4d      	adds	r5, r1, #1
 800d478:	462a      	mov	r2, r5
 800d47a:	6830      	ldr	r0, [r6, #0]
 800d47c:	f7ff ff48 	bl	800d310 <put_fat>
			if (res != FR_OK) return res;
 800d480:	4603      	mov	r3, r0
 800d482:	b920      	cbnz	r0, 800d48e <fill_first_frag+0x2e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d484:	3c01      	subs	r4, #1
 800d486:	4629      	mov	r1, r5
 800d488:	e7f4      	b.n	800d474 <fill_first_frag+0x14>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800d48a:	2300      	movs	r3, #0
 800d48c:	71f3      	strb	r3, [r6, #7]
}
 800d48e:	4618      	mov	r0, r3
 800d490:	bd70      	pop	{r4, r5, r6, pc}
 800d492:	bf00      	nop
 800d494:	f3af 8000 	nop.w
 800d498:	f3af 8000 	nop.w
 800d49c:	f3af 8000 	nop.w

0800d4a0 <get_fat>:
{
 800d4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800d4a2:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d4a4:	2901      	cmp	r1, #1
 800d4a6:	f240 808e 	bls.w	800d5c6 <get_fat+0x126>
 800d4aa:	69eb      	ldr	r3, [r5, #28]
 800d4ac:	428b      	cmp	r3, r1
 800d4ae:	f240 808c 	bls.w	800d5ca <get_fat+0x12a>
 800d4b2:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 800d4b4:	782b      	ldrb	r3, [r5, #0]
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	2b03      	cmp	r3, #3
 800d4ba:	f200 8088 	bhi.w	800d5ce <get_fat+0x12e>
 800d4be:	e8df f003 	tbb	[pc, r3]
 800d4c2:	2902      	.short	0x2902
 800d4c4:	4d3a      	.short	0x4d3a
			bc = (UINT)clst; bc += bc / 2;
 800d4c6:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4ca:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800d4cc:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f7ff fbf5 	bl	800ccc0 <move_window>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d17b      	bne.n	800d5d2 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800d4da:	1c77      	adds	r7, r6, #1
 800d4dc:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800d4e0:	442e      	add	r6, r5
 800d4e2:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4e6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800d4e8:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800d4ec:	4628      	mov	r0, r5
 800d4ee:	f7ff fbe7 	bl	800ccc0 <move_window>
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	d170      	bne.n	800d5d8 <get_fat+0x138>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800d4f6:	f3c7 0308 	ubfx	r3, r7, #0, #9
 800d4fa:	442b      	add	r3, r5
 800d4fc:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800d500:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800d504:	f014 0f01 	tst.w	r4, #1
 800d508:	d001      	beq.n	800d50e <get_fat+0x6e>
 800d50a:	0900      	lsrs	r0, r0, #4
 800d50c:	e05c      	b.n	800d5c8 <get_fat+0x128>
 800d50e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800d512:	e059      	b.n	800d5c8 <get_fat+0x128>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d514:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800d516:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d51a:	4628      	mov	r0, r5
 800d51c:	f7ff fbd0 	bl	800ccc0 <move_window>
 800d520:	2800      	cmp	r0, #0
 800d522:	d15c      	bne.n	800d5de <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800d524:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800d528:	0064      	lsls	r4, r4, #1
 800d52a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800d52e:	4420      	add	r0, r4
 800d530:	f7ff f906 	bl	800c740 <ld_word>
			break;
 800d534:	e048      	b.n	800d5c8 <get_fat+0x128>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d536:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800d538:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d53c:	4628      	mov	r0, r5
 800d53e:	f7ff fbbf 	bl	800ccc0 <move_window>
 800d542:	2800      	cmp	r0, #0
 800d544:	d14e      	bne.n	800d5e4 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800d546:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800d54a:	00a4      	lsls	r4, r4, #2
 800d54c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800d550:	4420      	add	r0, r4
 800d552:	f7ff f8fd 	bl	800c750 <ld_dword>
 800d556:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800d55a:	e035      	b.n	800d5c8 <get_fat+0x128>
			if (obj->objsize != 0) {
 800d55c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800d560:	ea52 0103 	orrs.w	r1, r2, r3
 800d564:	d041      	beq.n	800d5ea <get_fat+0x14a>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800d566:	6881      	ldr	r1, [r0, #8]
 800d568:	1a61      	subs	r1, r4, r1
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800d56a:	f112 36ff 	adds.w	r6, r2, #4294967295
 800d56e:	f143 37ff 	adc.w	r7, r3, #4294967295
 800d572:	0a72      	lsrs	r2, r6, #9
 800d574:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
 800d578:	896b      	ldrh	r3, [r5, #10]
 800d57a:	fbb2 f2f3 	udiv	r2, r2, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800d57e:	79c3      	ldrb	r3, [r0, #7]
 800d580:	2b02      	cmp	r3, #2
 800d582:	d016      	beq.n	800d5b2 <get_fat+0x112>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800d584:	2b03      	cmp	r3, #3
 800d586:	d019      	beq.n	800d5bc <get_fat+0x11c>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d033      	beq.n	800d5f4 <get_fat+0x154>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800d58c:	69c3      	ldr	r3, [r0, #28]
 800d58e:	bb9b      	cbnz	r3, 800d5f8 <get_fat+0x158>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d590:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800d592:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d596:	4628      	mov	r0, r5
 800d598:	f7ff fb92 	bl	800ccc0 <move_window>
 800d59c:	bb78      	cbnz	r0, 800d5fe <get_fat+0x15e>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800d59e:	3538      	adds	r5, #56	; 0x38
 800d5a0:	00a0      	lsls	r0, r4, #2
 800d5a2:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
 800d5a6:	4428      	add	r0, r5
 800d5a8:	f7ff f8d2 	bl	800c750 <ld_dword>
 800d5ac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d5b0:	e00a      	b.n	800d5c8 <get_fat+0x128>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800d5b2:	4291      	cmp	r1, r2
 800d5b4:	d8e6      	bhi.n	800d584 <get_fat+0xe4>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800d5b6:	d01a      	beq.n	800d5ee <get_fat+0x14e>
 800d5b8:	1c60      	adds	r0, r4, #1
 800d5ba:	e005      	b.n	800d5c8 <get_fat+0x128>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800d5bc:	6982      	ldr	r2, [r0, #24]
 800d5be:	428a      	cmp	r2, r1
 800d5c0:	d9e2      	bls.n	800d588 <get_fat+0xe8>
					val = clst + 1; 	/* Generate the value */
 800d5c2:	1c60      	adds	r0, r4, #1
					break;
 800d5c4:	e000      	b.n	800d5c8 <get_fat+0x128>
		val = 1;	/* Internal error */
 800d5c6:	2001      	movs	r0, #1
}
 800d5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800d5ca:	2001      	movs	r0, #1
 800d5cc:	e7fc      	b.n	800d5c8 <get_fat+0x128>
			val = 1;	/* Internal error */
 800d5ce:	2001      	movs	r0, #1
 800d5d0:	e7fa      	b.n	800d5c8 <get_fat+0x128>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d6:	e7f7      	b.n	800d5c8 <get_fat+0x128>
 800d5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5dc:	e7f4      	b.n	800d5c8 <get_fat+0x128>
 800d5de:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e2:	e7f1      	b.n	800d5c8 <get_fat+0x128>
 800d5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e8:	e7ee      	b.n	800d5c8 <get_fat+0x128>
			val = 1;	/* Internal error */
 800d5ea:	2001      	movs	r0, #1
 800d5ec:	e7ec      	b.n	800d5c8 <get_fat+0x128>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800d5ee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d5f2:	e7e9      	b.n	800d5c8 <get_fat+0x128>
			val = 1;	/* Internal error */
 800d5f4:	2001      	movs	r0, #1
 800d5f6:	e7e7      	b.n	800d5c8 <get_fat+0x128>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800d5f8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d5fc:	e7e4      	b.n	800d5c8 <get_fat+0x128>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d5fe:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 800d602:	e7e1      	b.n	800d5c8 <get_fat+0x128>
 800d604:	f3af 8000 	nop.w
 800d608:	f3af 8000 	nop.w
 800d60c:	f3af 8000 	nop.w

0800d610 <dir_sdi>:
{
 800d610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d614:	4606      	mov	r6, r0
 800d616:	460d      	mov	r5, r1
	FATFS *fs = dp->obj.fs;
 800d618:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d61a:	783b      	ldrb	r3, [r7, #0]
 800d61c:	2b04      	cmp	r3, #4
 800d61e:	d023      	beq.n	800d668 <dir_sdi+0x58>
 800d620:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d624:	42ab      	cmp	r3, r5
 800d626:	d93e      	bls.n	800d6a6 <dir_sdi+0x96>
 800d628:	f015 0f1f 	tst.w	r5, #31
 800d62c:	d13e      	bne.n	800d6ac <dir_sdi+0x9c>
	dp->dptr = ofs;				/* Set current offset */
 800d62e:	6335      	str	r5, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d630:	68b4      	ldr	r4, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d632:	b92c      	cbnz	r4, 800d640 <dir_sdi+0x30>
 800d634:	783b      	ldrb	r3, [r7, #0]
 800d636:	2b02      	cmp	r3, #2
 800d638:	d902      	bls.n	800d640 <dir_sdi+0x30>
		clst = fs->dirbase;
 800d63a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800d63c:	2300      	movs	r3, #0
 800d63e:	71f3      	strb	r3, [r6, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800d640:	b9ac      	cbnz	r4, 800d66e <dir_sdi+0x5e>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800d642:	893b      	ldrh	r3, [r7, #8]
 800d644:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800d648:	d932      	bls.n	800d6b0 <dir_sdi+0xa0>
		dp->sect = fs->dirbase;
 800d64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64c:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 800d64e:	6374      	str	r4, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 800d650:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800d652:	b3ab      	cbz	r3, 800d6c0 <dir_sdi+0xb0>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d654:	eb03 2355 	add.w	r3, r3, r5, lsr #9
 800d658:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d65a:	3738      	adds	r7, #56	; 0x38
 800d65c:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800d660:	443d      	add	r5, r7
 800d662:	63f5      	str	r5, [r6, #60]	; 0x3c
	return FR_OK;
 800d664:	2000      	movs	r0, #0
 800d666:	e01f      	b.n	800d6a8 <dir_sdi+0x98>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d668:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d66c:	e7da      	b.n	800d624 <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d66e:	f8b7 800a 	ldrh.w	r8, [r7, #10]
 800d672:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800d676:	4545      	cmp	r5, r8
 800d678:	d30f      	bcc.n	800d69a <dir_sdi+0x8a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d67a:	4621      	mov	r1, r4
 800d67c:	4630      	mov	r0, r6
 800d67e:	f7ff ff0f 	bl	800d4a0 <get_fat>
 800d682:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d684:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d688:	d014      	beq.n	800d6b4 <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d68a:	2801      	cmp	r0, #1
 800d68c:	d914      	bls.n	800d6b8 <dir_sdi+0xa8>
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	4283      	cmp	r3, r0
 800d692:	d913      	bls.n	800d6bc <dir_sdi+0xac>
			ofs -= csz;
 800d694:	eba5 0508 	sub.w	r5, r5, r8
 800d698:	e7ed      	b.n	800d676 <dir_sdi+0x66>
		dp->sect = clst2sect(fs, clst);
 800d69a:	4621      	mov	r1, r4
 800d69c:	4638      	mov	r0, r7
 800d69e:	f7ff f92f 	bl	800c900 <clst2sect>
 800d6a2:	63b0      	str	r0, [r6, #56]	; 0x38
 800d6a4:	e7d3      	b.n	800d64e <dir_sdi+0x3e>
		return FR_INT_ERR;
 800d6a6:	2002      	movs	r0, #2
}
 800d6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 800d6ac:	2002      	movs	r0, #2
 800d6ae:	e7fb      	b.n	800d6a8 <dir_sdi+0x98>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800d6b0:	2002      	movs	r0, #2
 800d6b2:	e7f9      	b.n	800d6a8 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d6b4:	2001      	movs	r0, #1
 800d6b6:	e7f7      	b.n	800d6a8 <dir_sdi+0x98>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d6b8:	2002      	movs	r0, #2
 800d6ba:	e7f5      	b.n	800d6a8 <dir_sdi+0x98>
 800d6bc:	2002      	movs	r0, #2
 800d6be:	e7f3      	b.n	800d6a8 <dir_sdi+0x98>
	if (dp->sect == 0) return FR_INT_ERR;
 800d6c0:	2002      	movs	r0, #2
 800d6c2:	e7f1      	b.n	800d6a8 <dir_sdi+0x98>
 800d6c4:	f3af 8000 	nop.w
 800d6c8:	f3af 8000 	nop.w
 800d6cc:	f3af 8000 	nop.w

0800d6d0 <create_chain>:
{
 800d6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6d4:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800d6d6:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800d6d8:	4689      	mov	r9, r1
 800d6da:	b931      	cbnz	r1, 800d6ea <create_chain+0x1a>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800d6dc:	697e      	ldr	r6, [r7, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d6de:	b1a6      	cbz	r6, 800d70a <create_chain+0x3a>
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	42b3      	cmp	r3, r6
 800d6e4:	d812      	bhi.n	800d70c <create_chain+0x3c>
 800d6e6:	2601      	movs	r6, #1
 800d6e8:	e010      	b.n	800d70c <create_chain+0x3c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d6ea:	f7ff fed9 	bl	800d4a0 <get_fat>
 800d6ee:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Test for insanity */
 800d6f0:	2801      	cmp	r0, #1
 800d6f2:	f240 80c6 	bls.w	800d882 <create_chain+0x1b2>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800d6f6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d6fa:	f000 80c3 	beq.w	800d884 <create_chain+0x1b4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	4283      	cmp	r3, r0
 800d702:	f200 80bf 	bhi.w	800d884 <create_chain+0x1b4>
		scl = clst;							/* Cluster to start to find */
 800d706:	464e      	mov	r6, r9
 800d708:	e000      	b.n	800d70c <create_chain+0x3c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d70a:	2601      	movs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800d70c:	69bd      	ldr	r5, [r7, #24]
 800d70e:	2d00      	cmp	r5, #0
 800d710:	f000 80b8 	beq.w	800d884 <create_chain+0x1b4>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d714:	783b      	ldrb	r3, [r7, #0]
 800d716:	2b04      	cmp	r3, #4
 800d718:	d003      	beq.n	800d722 <create_chain+0x52>
		if (scl == clst) {						/* Stretching an existing chain? */
 800d71a:	454e      	cmp	r6, r9
 800d71c:	d055      	beq.n	800d7ca <create_chain+0xfa>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800d71e:	4634      	mov	r4, r6
 800d720:	e095      	b.n	800d84e <create_chain+0x17e>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800d722:	2201      	movs	r2, #1
 800d724:	4631      	mov	r1, r6
 800d726:	4638      	mov	r0, r7
 800d728:	f7ff fd6a 	bl	800d200 <find_bitmap>
 800d72c:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800d72e:	1e43      	subs	r3, r0, #1
 800d730:	f113 0f03 	cmn.w	r3, #3
 800d734:	f200 80a6 	bhi.w	800d884 <create_chain+0x1b4>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800d738:	2301      	movs	r3, #1
 800d73a:	461a      	mov	r2, r3
 800d73c:	4601      	mov	r1, r0
 800d73e:	4638      	mov	r0, r7
 800d740:	f7ff fda6 	bl	800d290 <change_bitmap>
 800d744:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
 800d746:	2802      	cmp	r0, #2
 800d748:	f000 809f 	beq.w	800d88a <create_chain+0x1ba>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800d74c:	2801      	cmp	r0, #1
 800d74e:	f000 809e 	beq.w	800d88e <create_chain+0x1be>
		if (clst == 0) {							/* Is it a new chain? */
 800d752:	f1b9 0f00 	cmp.w	r9, #0
 800d756:	d11e      	bne.n	800d796 <create_chain+0xc6>
			obj->stat = 2;							/* Set status 'contiguous' */
 800d758:	2202      	movs	r2, #2
 800d75a:	f888 2007 	strb.w	r2, [r8, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800d75e:	f898 2007 	ldrb.w	r2, [r8, #7]
 800d762:	2a02      	cmp	r2, #2
 800d764:	f000 8082 	beq.w	800d86c <create_chain+0x19c>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800d768:	f109 0201 	add.w	r2, r9, #1
 800d76c:	42aa      	cmp	r2, r5
 800d76e:	d022      	beq.n	800d7b6 <create_chain+0xe6>
				if (obj->n_frag == 0) obj->n_frag = 1;
 800d770:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800d774:	b913      	cbnz	r3, 800d77c <create_chain+0xac>
 800d776:	2301      	movs	r3, #1
 800d778:	f8c8 301c 	str.w	r3, [r8, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800d77c:	462a      	mov	r2, r5
 800d77e:	4649      	mov	r1, r9
 800d780:	4640      	mov	r0, r8
 800d782:	f7ff fe55 	bl	800d430 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
 800d786:	4603      	mov	r3, r0
 800d788:	2800      	cmp	r0, #0
 800d78a:	d171      	bne.n	800d870 <create_chain+0x1a0>
 800d78c:	2201      	movs	r2, #1
 800d78e:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800d792:	462c      	mov	r4, r5
 800d794:	e03e      	b.n	800d814 <create_chain+0x144>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800d796:	f898 2007 	ldrb.w	r2, [r8, #7]
 800d79a:	2a02      	cmp	r2, #2
 800d79c:	d1df      	bne.n	800d75e <create_chain+0x8e>
 800d79e:	1c72      	adds	r2, r6, #1
 800d7a0:	42aa      	cmp	r2, r5
 800d7a2:	d0dc      	beq.n	800d75e <create_chain+0x8e>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800d7a4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800d7a8:	1ab2      	subs	r2, r6, r2
 800d7aa:	f8c8 2018 	str.w	r2, [r8, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800d7ae:	2203      	movs	r2, #3
 800d7b0:	f888 2007 	strb.w	r2, [r8, #7]
 800d7b4:	e7d3      	b.n	800d75e <create_chain+0x8e>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800d7b6:	f8d8 201c 	ldr.w	r2, [r8, #28]
 800d7ba:	b122      	cbz	r2, 800d7c6 <create_chain+0xf6>
 800d7bc:	3201      	adds	r2, #1
 800d7be:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800d7c2:	462c      	mov	r4, r5
 800d7c4:	e026      	b.n	800d814 <create_chain+0x144>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800d7c6:	2202      	movs	r2, #2
 800d7c8:	e7f9      	b.n	800d7be <create_chain+0xee>
			ncl = scl + 1;						/* Test if next cluster is free */
 800d7ca:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	42a3      	cmp	r3, r4
 800d7d0:	d800      	bhi.n	800d7d4 <create_chain+0x104>
 800d7d2:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800d7d4:	4621      	mov	r1, r4
 800d7d6:	4640      	mov	r0, r8
 800d7d8:	f7ff fe62 	bl	800d4a0 <get_fat>
 800d7dc:	4605      	mov	r5, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800d7de:	2801      	cmp	r0, #1
 800d7e0:	d050      	beq.n	800d884 <create_chain+0x1b4>
 800d7e2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d7e6:	d04d      	beq.n	800d884 <create_chain+0x1b4>
			if (cs != 0) {						/* Not free? */
 800d7e8:	b138      	cbz	r0, 800d7fa <create_chain+0x12a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800d7ea:	697b      	ldr	r3, [r7, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d996      	bls.n	800d71e <create_chain+0x4e>
 800d7f0:	69fa      	ldr	r2, [r7, #28]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d993      	bls.n	800d71e <create_chain+0x4e>
 800d7f6:	461e      	mov	r6, r3
 800d7f8:	e791      	b.n	800d71e <create_chain+0x4e>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800d7fa:	2c00      	cmp	r4, #0
 800d7fc:	d08f      	beq.n	800d71e <create_chain+0x4e>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800d7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d802:	4621      	mov	r1, r4
 800d804:	4638      	mov	r0, r7
 800d806:	f7ff fd83 	bl	800d310 <put_fat>
		if (res == FR_OK && clst != 0) {
 800d80a:	4603      	mov	r3, r0
 800d80c:	b910      	cbnz	r0, 800d814 <create_chain+0x144>
 800d80e:	f1b9 0f00 	cmp.w	r9, #0
 800d812:	d124      	bne.n	800d85e <create_chain+0x18e>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d814:	bb73      	cbnz	r3, 800d874 <create_chain+0x1a4>
		fs->last_clst = ncl;
 800d816:	617c      	str	r4, [r7, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d818:	69ba      	ldr	r2, [r7, #24]
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	3b02      	subs	r3, #2
 800d81e:	429a      	cmp	r2, r3
 800d820:	d801      	bhi.n	800d826 <create_chain+0x156>
 800d822:	3a01      	subs	r2, #1
 800d824:	61ba      	str	r2, [r7, #24]
		fs->fsi_flag |= 1;
 800d826:	793b      	ldrb	r3, [r7, #4]
 800d828:	f043 0301 	orr.w	r3, r3, #1
 800d82c:	713b      	strb	r3, [r7, #4]
 800d82e:	4625      	mov	r5, r4
 800d830:	e028      	b.n	800d884 <create_chain+0x1b4>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d832:	4621      	mov	r1, r4
 800d834:	4640      	mov	r0, r8
 800d836:	f7ff fe33 	bl	800d4a0 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
 800d83a:	4605      	mov	r5, r0
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d0de      	beq.n	800d7fe <create_chain+0x12e>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800d840:	2801      	cmp	r0, #1
 800d842:	d01f      	beq.n	800d884 <create_chain+0x1b4>
 800d844:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d848:	d01c      	beq.n	800d884 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800d84a:	42b4      	cmp	r4, r6
 800d84c:	d024      	beq.n	800d898 <create_chain+0x1c8>
				ncl++;							/* Next cluster */
 800d84e:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	42a3      	cmp	r3, r4
 800d854:	d8ed      	bhi.n	800d832 <create_chain+0x162>
					if (ncl > scl) return 0;	/* No free cluster found? */
 800d856:	2e01      	cmp	r6, #1
 800d858:	d91c      	bls.n	800d894 <create_chain+0x1c4>
					ncl = 2;
 800d85a:	2402      	movs	r4, #2
 800d85c:	e7e9      	b.n	800d832 <create_chain+0x162>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800d85e:	4622      	mov	r2, r4
 800d860:	4649      	mov	r1, r9
 800d862:	4638      	mov	r0, r7
 800d864:	f7ff fd54 	bl	800d310 <put_fat>
 800d868:	4603      	mov	r3, r0
 800d86a:	e7d3      	b.n	800d814 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800d86c:	462c      	mov	r4, r5
 800d86e:	e7d1      	b.n	800d814 <create_chain+0x144>
 800d870:	462c      	mov	r4, r5
 800d872:	e7cf      	b.n	800d814 <create_chain+0x144>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d874:	2b01      	cmp	r3, #1
 800d876:	d001      	beq.n	800d87c <create_chain+0x1ac>
 800d878:	2501      	movs	r5, #1
 800d87a:	e003      	b.n	800d884 <create_chain+0x1b4>
 800d87c:	f04f 35ff 	mov.w	r5, #4294967295
 800d880:	e000      	b.n	800d884 <create_chain+0x1b4>
		if (cs < 2) return 1;				/* Test for insanity */
 800d882:	2501      	movs	r5, #1
}
 800d884:	4628      	mov	r0, r5
 800d886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (res == FR_INT_ERR) return 1;
 800d88a:	2501      	movs	r5, #1
 800d88c:	e7fa      	b.n	800d884 <create_chain+0x1b4>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800d88e:	f04f 35ff 	mov.w	r5, #4294967295
 800d892:	e7f7      	b.n	800d884 <create_chain+0x1b4>
					if (ncl > scl) return 0;	/* No free cluster found? */
 800d894:	2500      	movs	r5, #0
 800d896:	e7f5      	b.n	800d884 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800d898:	2500      	movs	r5, #0
 800d89a:	e7f3      	b.n	800d884 <create_chain+0x1b4>
 800d89c:	f3af 8000 	nop.w

0800d8a0 <remove_chain>:
{
 800d8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 800d8a4:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d8a6:	2901      	cmp	r1, #1
 800d8a8:	f240 8087 	bls.w	800d9ba <remove_chain+0x11a>
 800d8ac:	4607      	mov	r7, r0
 800d8ae:	460e      	mov	r6, r1
 800d8b0:	4691      	mov	r9, r2
 800d8b2:	69e3      	ldr	r3, [r4, #28]
 800d8b4:	428b      	cmp	r3, r1
 800d8b6:	f240 8082 	bls.w	800d9be <remove_chain+0x11e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d8ba:	b172      	cbz	r2, 800d8da <remove_chain+0x3a>
 800d8bc:	7823      	ldrb	r3, [r4, #0]
 800d8be:	2b04      	cmp	r3, #4
 800d8c0:	d102      	bne.n	800d8c8 <remove_chain+0x28>
 800d8c2:	79c3      	ldrb	r3, [r0, #7]
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d008      	beq.n	800d8da <remove_chain+0x3a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8cc:	4649      	mov	r1, r9
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f7ff fd1e 	bl	800d310 <put_fat>
		if (res != FR_OK) return res;
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d172      	bne.n	800d9c0 <remove_chain+0x120>
{
 800d8da:	46b0      	mov	r8, r6
 800d8dc:	e012      	b.n	800d904 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d8de:	2200      	movs	r2, #0
 800d8e0:	4631      	mov	r1, r6
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	f7ff fd14 	bl	800d310 <put_fat>
			if (res != FR_OK) return res;
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	b1c8      	cbz	r0, 800d920 <remove_chain+0x80>
 800d8ec:	e068      	b.n	800d9c0 <remove_chain+0x120>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800d8ee:	1c73      	adds	r3, r6, #1
 800d8f0:	42ab      	cmp	r3, r5
 800d8f2:	d003      	beq.n	800d8fc <remove_chain+0x5c>
			if (fs->fs_type == FS_EXFAT) {
 800d8f4:	7823      	ldrb	r3, [r4, #0]
 800d8f6:	2b04      	cmp	r3, #4
 800d8f8:	d01e      	beq.n	800d938 <remove_chain+0x98>
			scl = ecl = nxt;
 800d8fa:	46a8      	mov	r8, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d8fc:	69e3      	ldr	r3, [r4, #28]
		clst = nxt;					/* Next cluster */
 800d8fe:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d900:	42ab      	cmp	r3, r5
 800d902:	d925      	bls.n	800d950 <remove_chain+0xb0>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d904:	4631      	mov	r1, r6
 800d906:	4638      	mov	r0, r7
 800d908:	f7ff fdca 	bl	800d4a0 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800d90c:	4605      	mov	r5, r0
 800d90e:	b1f8      	cbz	r0, 800d950 <remove_chain+0xb0>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d910:	2801      	cmp	r0, #1
 800d912:	d058      	beq.n	800d9c6 <remove_chain+0x126>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d914:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d918:	d057      	beq.n	800d9ca <remove_chain+0x12a>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d91a:	7823      	ldrb	r3, [r4, #0]
 800d91c:	2b04      	cmp	r3, #4
 800d91e:	d1de      	bne.n	800d8de <remove_chain+0x3e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d920:	69a2      	ldr	r2, [r4, #24]
 800d922:	69e3      	ldr	r3, [r4, #28]
 800d924:	3b02      	subs	r3, #2
 800d926:	429a      	cmp	r2, r3
 800d928:	d2e1      	bcs.n	800d8ee <remove_chain+0x4e>
			fs->free_clst++;
 800d92a:	3201      	adds	r2, #1
 800d92c:	61a2      	str	r2, [r4, #24]
			fs->fsi_flag |= 1;
 800d92e:	7923      	ldrb	r3, [r4, #4]
 800d930:	f043 0301 	orr.w	r3, r3, #1
 800d934:	7123      	strb	r3, [r4, #4]
 800d936:	e7da      	b.n	800d8ee <remove_chain+0x4e>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800d938:	eba6 0208 	sub.w	r2, r6, r8
 800d93c:	2300      	movs	r3, #0
 800d93e:	3201      	adds	r2, #1
 800d940:	4641      	mov	r1, r8
 800d942:	4620      	mov	r0, r4
 800d944:	f7ff fca4 	bl	800d290 <change_bitmap>
				if (res != FR_OK) return res;
 800d948:	4603      	mov	r3, r0
 800d94a:	bbc8      	cbnz	r0, 800d9c0 <remove_chain+0x120>
			scl = ecl = nxt;
 800d94c:	46a8      	mov	r8, r5
 800d94e:	e7d5      	b.n	800d8fc <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
 800d950:	7823      	ldrb	r3, [r4, #0]
 800d952:	2b04      	cmp	r3, #4
 800d954:	d001      	beq.n	800d95a <remove_chain+0xba>
	return FR_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	e032      	b.n	800d9c0 <remove_chain+0x120>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 800d95a:	f1b9 0f00 	cmp.w	r9, #0
 800d95e:	d012      	beq.n	800d986 <remove_chain+0xe6>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 800d960:	79fb      	ldrb	r3, [r7, #7]
 800d962:	b9db      	cbnz	r3, 800d99c <remove_chain+0xfc>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800d964:	68bc      	ldr	r4, [r7, #8]
				while (clst != pclst) {
 800d966:	454c      	cmp	r4, r9
 800d968:	d010      	beq.n	800d98c <remove_chain+0xec>
					nxt = get_fat(obj, clst);
 800d96a:	4621      	mov	r1, r4
 800d96c:	4638      	mov	r0, r7
 800d96e:	f7ff fd97 	bl	800d4a0 <get_fat>
					if (nxt < 2) return FR_INT_ERR;
 800d972:	2801      	cmp	r0, #1
 800d974:	d92b      	bls.n	800d9ce <remove_chain+0x12e>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800d976:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d97a:	d02a      	beq.n	800d9d2 <remove_chain+0x132>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800d97c:	1c63      	adds	r3, r4, #1
 800d97e:	4283      	cmp	r3, r0
 800d980:	d104      	bne.n	800d98c <remove_chain+0xec>
					clst++;
 800d982:	461c      	mov	r4, r3
 800d984:	e7ef      	b.n	800d966 <remove_chain+0xc6>
			obj->stat = 0;		/* Change the chain status 'initial' */
 800d986:	2300      	movs	r3, #0
 800d988:	71fb      	strb	r3, [r7, #7]
 800d98a:	e019      	b.n	800d9c0 <remove_chain+0x120>
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 800d98c:	454c      	cmp	r4, r9
 800d98e:	d001      	beq.n	800d994 <remove_chain+0xf4>
	return FR_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	e015      	b.n	800d9c0 <remove_chain+0x120>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 800d994:	2302      	movs	r3, #2
 800d996:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
 800d998:	2300      	movs	r3, #0
 800d99a:	e011      	b.n	800d9c0 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 800d99c:	2b03      	cmp	r3, #3
 800d99e:	d001      	beq.n	800d9a4 <remove_chain+0x104>
	return FR_OK;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	e00d      	b.n	800d9c0 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	454b      	cmp	r3, r9
 800d9a8:	d815      	bhi.n	800d9d6 <remove_chain+0x136>
 800d9aa:	69ba      	ldr	r2, [r7, #24]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	454b      	cmp	r3, r9
 800d9b0:	d313      	bcc.n	800d9da <remove_chain+0x13a>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 800d9b2:	2302      	movs	r3, #2
 800d9b4:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	e002      	b.n	800d9c0 <remove_chain+0x120>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d9ba:	2302      	movs	r3, #2
 800d9bc:	e000      	b.n	800d9c0 <remove_chain+0x120>
 800d9be:	2302      	movs	r3, #2
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d9c6:	2302      	movs	r3, #2
 800d9c8:	e7fa      	b.n	800d9c0 <remove_chain+0x120>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e7f8      	b.n	800d9c0 <remove_chain+0x120>
					if (nxt < 2) return FR_INT_ERR;
 800d9ce:	2302      	movs	r3, #2
 800d9d0:	e7f6      	b.n	800d9c0 <remove_chain+0x120>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e7f4      	b.n	800d9c0 <remove_chain+0x120>
	return FR_OK;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e7f2      	b.n	800d9c0 <remove_chain+0x120>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	e7f0      	b.n	800d9c0 <remove_chain+0x120>
 800d9de:	bf00      	nop

0800d9e0 <dir_clear>:
{
 800d9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9e4:	4606      	mov	r6, r0
 800d9e6:	460c      	mov	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d9e8:	f7ff f942 	bl	800cc70 <sync_window>
 800d9ec:	b110      	cbz	r0, 800d9f4 <dir_clear+0x14>
 800d9ee:	2001      	movs	r0, #1
}
 800d9f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800d9f4:	4621      	mov	r1, r4
 800d9f6:	4630      	mov	r0, r6
 800d9f8:	f7fe ff82 	bl	800c900 <clst2sect>
 800d9fc:	4680      	mov	r8, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 800d9fe:	6370      	str	r0, [r6, #52]	; 0x34
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
 800da00:	f106 0938 	add.w	r9, r6, #56	; 0x38
 800da04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da08:	2100      	movs	r1, #0
 800da0a:	4648      	mov	r0, r9
 800da0c:	f7fe ff48 	bl	800c8a0 <mem_set>
	for (szb = ((DWORD)fs->csize * SS(fs) >= 0x8000) ? 0x8000 : fs->csize * SS(fs); szb > SS(fs) && !(ibuf = ff_memalloc(szb)); szb /= 2) ;
 800da10:	8974      	ldrh	r4, [r6, #10]
 800da12:	0264      	lsls	r4, r4, #9
 800da14:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800da18:	d303      	bcc.n	800da22 <dir_clear+0x42>
 800da1a:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800da1e:	e000      	b.n	800da22 <dir_clear+0x42>
 800da20:	0864      	lsrs	r4, r4, #1
 800da22:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800da26:	d905      	bls.n	800da34 <dir_clear+0x54>
 800da28:	4620      	mov	r0, r4
 800da2a:	f7fe fe79 	bl	800c720 <ff_memalloc>
 800da2e:	4607      	mov	r7, r0
 800da30:	2800      	cmp	r0, #0
 800da32:	d0f5      	beq.n	800da20 <dir_clear+0x40>
	if (szb > SS(fs)) {		/* Buffer allocated? */
 800da34:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800da38:	d801      	bhi.n	800da3e <dir_clear+0x5e>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800da3a:	2500      	movs	r5, #0
 800da3c:	e01d      	b.n	800da7a <dir_clear+0x9a>
		mem_set(ibuf, 0, szb);
 800da3e:	4622      	mov	r2, r4
 800da40:	2100      	movs	r1, #0
 800da42:	4638      	mov	r0, r7
 800da44:	f7fe ff2c 	bl	800c8a0 <mem_set>
		szb /= SS(fs);		/* Bytes -> Sectors */
 800da48:	0a64      	lsrs	r4, r4, #9
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800da4a:	2500      	movs	r5, #0
 800da4c:	e000      	b.n	800da50 <dir_clear+0x70>
 800da4e:	4425      	add	r5, r4
 800da50:	8973      	ldrh	r3, [r6, #10]
 800da52:	42ab      	cmp	r3, r5
 800da54:	d908      	bls.n	800da68 <dir_clear+0x88>
 800da56:	4623      	mov	r3, r4
 800da58:	eb05 0208 	add.w	r2, r5, r8
 800da5c:	4639      	mov	r1, r7
 800da5e:	7870      	ldrb	r0, [r6, #1]
 800da60:	f7fe fe1e 	bl	800c6a0 <disk_write>
 800da64:	2800      	cmp	r0, #0
 800da66:	d0f2      	beq.n	800da4e <dir_clear+0x6e>
		ff_memfree(ibuf);
 800da68:	4638      	mov	r0, r7
 800da6a:	f7fe fe61 	bl	800c730 <ff_memfree>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800da6e:	8970      	ldrh	r0, [r6, #10]
 800da70:	1b40      	subs	r0, r0, r5
 800da72:	bf18      	it	ne
 800da74:	2001      	movne	r0, #1
 800da76:	e7bb      	b.n	800d9f0 <dir_clear+0x10>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800da78:	3501      	adds	r5, #1
 800da7a:	8973      	ldrh	r3, [r6, #10]
 800da7c:	42ab      	cmp	r3, r5
 800da7e:	d9f6      	bls.n	800da6e <dir_clear+0x8e>
 800da80:	2301      	movs	r3, #1
 800da82:	eb05 0208 	add.w	r2, r5, r8
 800da86:	4649      	mov	r1, r9
 800da88:	7870      	ldrb	r0, [r6, #1]
 800da8a:	f7fe fe09 	bl	800c6a0 <disk_write>
 800da8e:	2800      	cmp	r0, #0
 800da90:	d0f2      	beq.n	800da78 <dir_clear+0x98>
 800da92:	e7ec      	b.n	800da6e <dir_clear+0x8e>
 800da94:	f3af 8000 	nop.w
 800da98:	f3af 8000 	nop.w
 800da9c:	f3af 8000 	nop.w

0800daa0 <dir_next>:
{
 800daa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 800daa4:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800daa6:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800daa8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d056      	beq.n	800db5c <dir_next+0xbc>
 800daae:	3520      	adds	r5, #32
 800dab0:	7832      	ldrb	r2, [r6, #0]
 800dab2:	2a04      	cmp	r2, #4
 800dab4:	d018      	beq.n	800dae8 <dir_next+0x48>
 800dab6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800daba:	42aa      	cmp	r2, r5
 800dabc:	d950      	bls.n	800db60 <dir_next+0xc0>
 800dabe:	4688      	mov	r8, r1
 800dac0:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dac2:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800dac6:	b93f      	cbnz	r7, 800dad8 <dir_next+0x38>
		dp->sect++;				/* Next sector */
 800dac8:	3301      	adds	r3, #1
 800daca:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800dacc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800dace:	b991      	cbnz	r1, 800daf6 <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dad0:	8933      	ldrh	r3, [r6, #8]
 800dad2:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800dad6:	d90a      	bls.n	800daee <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
 800dad8:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dada:	f106 0338 	add.w	r3, r6, #56	; 0x38
 800dade:	443b      	add	r3, r7
 800dae0:	63e3      	str	r3, [r4, #60]	; 0x3c
	return FR_OK;
 800dae2:	2000      	movs	r0, #0
}
 800dae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daec:	e7e5      	b.n	800daba <dir_next+0x1a>
				dp->sect = 0; return FR_NO_FILE;
 800daee:	2300      	movs	r3, #0
 800daf0:	6383      	str	r3, [r0, #56]	; 0x38
 800daf2:	2004      	movs	r0, #4
 800daf4:	e7f6      	b.n	800dae4 <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800daf6:	8973      	ldrh	r3, [r6, #10]
 800daf8:	3b01      	subs	r3, #1
 800dafa:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800dafe:	d1eb      	bne.n	800dad8 <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800db00:	f7ff fcce 	bl	800d4a0 <get_fat>
 800db04:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800db06:	2801      	cmp	r0, #1
 800db08:	d92c      	bls.n	800db64 <dir_next+0xc4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db0a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800db0e:	d02b      	beq.n	800db68 <dir_next+0xc8>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800db10:	69f3      	ldr	r3, [r6, #28]
 800db12:	4283      	cmp	r3, r0
 800db14:	d816      	bhi.n	800db44 <dir_next+0xa4>
					if (!stretch) {								/* If no stretch, report EOT */
 800db16:	f1b8 0f00 	cmp.w	r8, #0
 800db1a:	d01b      	beq.n	800db54 <dir_next+0xb4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800db1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db1e:	4620      	mov	r0, r4
 800db20:	f7ff fdd6 	bl	800d6d0 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800db24:	4681      	mov	r9, r0
 800db26:	b308      	cbz	r0, 800db6c <dir_next+0xcc>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800db28:	2801      	cmp	r0, #1
 800db2a:	d021      	beq.n	800db70 <dir_next+0xd0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800db30:	d020      	beq.n	800db74 <dir_next+0xd4>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800db32:	4601      	mov	r1, r0
 800db34:	4630      	mov	r0, r6
 800db36:	f7ff ff53 	bl	800d9e0 <dir_clear>
 800db3a:	b9e8      	cbnz	r0, 800db78 <dir_next+0xd8>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800db3c:	79e3      	ldrb	r3, [r4, #7]
 800db3e:	f043 0304 	orr.w	r3, r3, #4
 800db42:	71e3      	strb	r3, [r4, #7]
				dp->clust = clst;		/* Initialize data for new cluster */
 800db44:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
 800db48:	4649      	mov	r1, r9
 800db4a:	4630      	mov	r0, r6
 800db4c:	f7fe fed8 	bl	800c900 <clst2sect>
 800db50:	63a0      	str	r0, [r4, #56]	; 0x38
 800db52:	e7c1      	b.n	800dad8 <dir_next+0x38>
						dp->sect = 0; return FR_NO_FILE;
 800db54:	2300      	movs	r3, #0
 800db56:	63a3      	str	r3, [r4, #56]	; 0x38
 800db58:	2004      	movs	r0, #4
 800db5a:	e7c3      	b.n	800dae4 <dir_next+0x44>
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800db5c:	2004      	movs	r0, #4
 800db5e:	e7c1      	b.n	800dae4 <dir_next+0x44>
 800db60:	2004      	movs	r0, #4
 800db62:	e7bf      	b.n	800dae4 <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800db64:	2002      	movs	r0, #2
 800db66:	e7bd      	b.n	800dae4 <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db68:	2001      	movs	r0, #1
 800db6a:	e7bb      	b.n	800dae4 <dir_next+0x44>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800db6c:	2007      	movs	r0, #7
 800db6e:	e7b9      	b.n	800dae4 <dir_next+0x44>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800db70:	2002      	movs	r0, #2
 800db72:	e7b7      	b.n	800dae4 <dir_next+0x44>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db74:	2001      	movs	r0, #1
 800db76:	e7b5      	b.n	800dae4 <dir_next+0x44>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800db78:	2001      	movs	r0, #1
 800db7a:	e7b3      	b.n	800dae4 <dir_next+0x44>
 800db7c:	f3af 8000 	nop.w

0800db80 <load_xdir>:
{
 800db80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db84:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800db86:	6800      	ldr	r0, [r0, #0]
 800db88:	6906      	ldr	r6, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
 800db8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800db8c:	f7ff f898 	bl	800ccc0 <move_window>
	if (res != FR_OK) return res;
 800db90:	4605      	mov	r5, r0
 800db92:	b920      	cbnz	r0, 800db9e <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;	/* Invalid order */
 800db94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800db96:	780b      	ldrb	r3, [r1, #0]
 800db98:	2b85      	cmp	r3, #133	; 0x85
 800db9a:	d003      	beq.n	800dba4 <load_xdir+0x24>
 800db9c:	2502      	movs	r5, #2
}
 800db9e:	4628      	mov	r0, r5
 800dba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800dba4:	2220      	movs	r2, #32
 800dba6:	4630      	mov	r0, r6
 800dba8:	f7fe fe6a 	bl	800c880 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800dbac:	7877      	ldrb	r7, [r6, #1]
 800dbae:	3701      	adds	r7, #1
 800dbb0:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800dbb2:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
 800dbb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbba:	d855      	bhi.n	800dc68 <load_xdir+0xe8>
	res = dir_next(dp, 0);
 800dbbc:	2100      	movs	r1, #0
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f7ff ff6e 	bl	800daa0 <dir_next>
 800dbc4:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800dbc6:	2804      	cmp	r0, #4
 800dbc8:	d050      	beq.n	800dc6c <load_xdir+0xec>
	if (res != FR_OK) return res;
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d1e7      	bne.n	800db9e <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
 800dbce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dbd0:	6820      	ldr	r0, [r4, #0]
 800dbd2:	f7ff f875 	bl	800ccc0 <move_window>
	if (res != FR_OK) return res;
 800dbd6:	4605      	mov	r5, r0
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	d1e0      	bne.n	800db9e <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;	/* Invalid order */
 800dbdc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dbde:	780b      	ldrb	r3, [r1, #0]
 800dbe0:	2bc0      	cmp	r3, #192	; 0xc0
 800dbe2:	d001      	beq.n	800dbe8 <load_xdir+0x68>
 800dbe4:	2502      	movs	r5, #2
 800dbe6:	e7da      	b.n	800db9e <load_xdir+0x1e>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800dbe8:	2220      	movs	r2, #32
 800dbea:	18b0      	adds	r0, r6, r2
 800dbec:	f7fe fe48 	bl	800c880 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800dbf0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800dbf4:	332c      	adds	r3, #44	; 0x2c
 800dbf6:	4a21      	ldr	r2, [pc, #132]	; (800dc7c <load_xdir+0xfc>)
 800dbf8:	fba2 2303 	umull	r2, r3, r2, r3
 800dbfc:	08db      	lsrs	r3, r3, #3
 800dbfe:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
 800dc02:	d335      	bcc.n	800dc70 <load_xdir+0xf0>
	i = 2 * SZDIRE;	/* C1 offset to load */
 800dc04:	f04f 0840 	mov.w	r8, #64	; 0x40
 800dc08:	e003      	b.n	800dc12 <load_xdir+0x92>
	} while ((i += SZDIRE) < sz_ent);
 800dc0a:	f108 0820 	add.w	r8, r8, #32
 800dc0e:	4547      	cmp	r7, r8
 800dc10:	d91c      	bls.n	800dc4c <load_xdir+0xcc>
		res = dir_next(dp, 0);
 800dc12:	2100      	movs	r1, #0
 800dc14:	4620      	mov	r0, r4
 800dc16:	f7ff ff43 	bl	800daa0 <dir_next>
 800dc1a:	4605      	mov	r5, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800dc1c:	2804      	cmp	r0, #4
 800dc1e:	d029      	beq.n	800dc74 <load_xdir+0xf4>
		if (res != FR_OK) return res;
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d1bc      	bne.n	800db9e <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
 800dc24:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dc26:	6820      	ldr	r0, [r4, #0]
 800dc28:	f7ff f84a 	bl	800ccc0 <move_window>
		if (res != FR_OK) return res;
 800dc2c:	4605      	mov	r5, r0
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d1b5      	bne.n	800db9e <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
 800dc32:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dc34:	780b      	ldrb	r3, [r1, #0]
 800dc36:	2bc1      	cmp	r3, #193	; 0xc1
 800dc38:	d11e      	bne.n	800dc78 <load_xdir+0xf8>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800dc3a:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 800dc3e:	d2e4      	bcs.n	800dc0a <load_xdir+0x8a>
 800dc40:	2220      	movs	r2, #32
 800dc42:	eb06 0008 	add.w	r0, r6, r8
 800dc46:	f7fe fe1b 	bl	800c880 <mem_cpy>
 800dc4a:	e7de      	b.n	800dc0a <load_xdir+0x8a>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 800dc4c:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 800dc50:	d8a5      	bhi.n	800db9e <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800dc52:	4630      	mov	r0, r6
 800dc54:	f7fe ff9c 	bl	800cb90 <xdir_sum>
 800dc58:	4604      	mov	r4, r0
 800dc5a:	1cb0      	adds	r0, r6, #2
 800dc5c:	f7fe fd70 	bl	800c740 <ld_word>
 800dc60:	4284      	cmp	r4, r0
 800dc62:	d09c      	beq.n	800db9e <load_xdir+0x1e>
 800dc64:	2502      	movs	r5, #2
 800dc66:	e79a      	b.n	800db9e <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800dc68:	2502      	movs	r5, #2
 800dc6a:	e798      	b.n	800db9e <load_xdir+0x1e>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800dc6c:	2502      	movs	r5, #2
 800dc6e:	e796      	b.n	800db9e <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800dc70:	2502      	movs	r5, #2
 800dc72:	e794      	b.n	800db9e <load_xdir+0x1e>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800dc74:	2502      	movs	r5, #2
 800dc76:	e792      	b.n	800db9e <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
 800dc78:	2502      	movs	r5, #2
 800dc7a:	e790      	b.n	800db9e <load_xdir+0x1e>
 800dc7c:	88888889 	.word	0x88888889

0800dc80 <load_obj_xdir>:
{
 800dc80:	b510      	push	{r4, lr}
 800dc82:	4604      	mov	r4, r0
	dp->obj.fs = obj->fs;
 800dc84:	680b      	ldr	r3, [r1, #0]
 800dc86:	6003      	str	r3, [r0, #0]
	dp->obj.sclust = obj->c_scl;
 800dc88:	6a0b      	ldr	r3, [r1, #32]
 800dc8a:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800dc8c:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 800dc90:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800dc92:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800dc94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc98:	2200      	movs	r2, #0
 800dc9a:	6103      	str	r3, [r0, #16]
 800dc9c:	6142      	str	r2, [r0, #20]
	dp->obj.n_frag = 0;
 800dc9e:	61c2      	str	r2, [r0, #28]
	dp->blk_ofs = obj->c_ofs;
 800dca0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800dca2:	64c1      	str	r1, [r0, #76]	; 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800dca4:	f7ff fcb4 	bl	800d610 <dir_sdi>
	if (res == FR_OK) {
 800dca8:	4603      	mov	r3, r0
 800dcaa:	b108      	cbz	r0, 800dcb0 <load_obj_xdir+0x30>
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	bd10      	pop	{r4, pc}
		res = load_xdir(dp);		/* Load the object's entry block */
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f7ff ff65 	bl	800db80 <load_xdir>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	e7f8      	b.n	800dcac <load_obj_xdir+0x2c>
 800dcba:	bf00      	nop
 800dcbc:	f3af 8000 	nop.w

0800dcc0 <dir_read>:
{
 800dcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 800dcc8:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 800dcca:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800dcce:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
 800dcd0:	2504      	movs	r5, #4
	while (dp->sect) {
 800dcd2:	e008      	b.n	800dce6 <dir_read+0x26>
				if (c == 0x85) {		/* Start of the file entry block? */
 800dcd4:	2b85      	cmp	r3, #133	; 0x85
 800dcd6:	d028      	beq.n	800dd2a <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
 800dcd8:	2100      	movs	r1, #0
 800dcda:	4620      	mov	r0, r4
 800dcdc:	f7ff fee0 	bl	800daa0 <dir_next>
		if (res != FR_OK) break;
 800dce0:	4605      	mov	r5, r0
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d15b      	bne.n	800dd9e <dir_read+0xde>
	while (dp->sect) {
 800dce6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dce8:	2900      	cmp	r1, #0
 800dcea:	d058      	beq.n	800dd9e <dir_read+0xde>
		res = move_window(fs, dp->sect);
 800dcec:	4630      	mov	r0, r6
 800dcee:	f7fe ffe7 	bl	800ccc0 <move_window>
		if (res != FR_OK) break;
 800dcf2:	4605      	mov	r5, r0
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d152      	bne.n	800dd9e <dir_read+0xde>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800dcf8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dcfa:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d04d      	beq.n	800dd9c <dir_read+0xdc>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800dd00:	7832      	ldrb	r2, [r6, #0]
 800dd02:	2a04      	cmp	r2, #4
 800dd04:	d0e6      	beq.n	800dcd4 <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800dd06:	7aca      	ldrb	r2, [r1, #11]
 800dd08:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800dd0c:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800dd0e:	2be5      	cmp	r3, #229	; 0xe5
 800dd10:	d03e      	beq.n	800dd90 <dir_read+0xd0>
 800dd12:	2b2e      	cmp	r3, #46	; 0x2e
 800dd14:	d03e      	beq.n	800dd94 <dir_read+0xd4>
 800dd16:	f022 0020 	bic.w	r0, r2, #32
 800dd1a:	2808      	cmp	r0, #8
 800dd1c:	bf14      	ite	ne
 800dd1e:	2000      	movne	r0, #0
 800dd20:	2001      	moveq	r0, #1
 800dd22:	4540      	cmp	r0, r8
 800dd24:	d00e      	beq.n	800dd44 <dir_read+0x84>
				ord = 0xFF;
 800dd26:	27ff      	movs	r7, #255	; 0xff
 800dd28:	e7d6      	b.n	800dcd8 <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800dd2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dd2c:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f7ff ff26 	bl	800db80 <load_xdir>
					if (res == FR_OK) {
 800dd34:	4605      	mov	r5, r0
 800dd36:	bb90      	cbnz	r0, 800dd9e <dir_read+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800dd38:	6933      	ldr	r3, [r6, #16]
 800dd3a:	791b      	ldrb	r3, [r3, #4]
 800dd3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd40:	71a3      	strb	r3, [r4, #6]
 800dd42:	e02c      	b.n	800dd9e <dir_read+0xde>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800dd44:	2a0f      	cmp	r2, #15
 800dd46:	d119      	bne.n	800dd7c <dir_read+0xbc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800dd48:	f013 0f40 	tst.w	r3, #64	; 0x40
 800dd4c:	d006      	beq.n	800dd5c <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
 800dd4e:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800dd52:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800dd56:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800dd58:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
 800dd5a:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dd5c:	42bb      	cmp	r3, r7
 800dd5e:	d001      	beq.n	800dd64 <dir_read+0xa4>
 800dd60:	27ff      	movs	r7, #255	; 0xff
 800dd62:	e7b9      	b.n	800dcd8 <dir_read+0x18>
 800dd64:	7b4b      	ldrb	r3, [r1, #13]
 800dd66:	454b      	cmp	r3, r9
 800dd68:	d001      	beq.n	800dd6e <dir_read+0xae>
 800dd6a:	27ff      	movs	r7, #255	; 0xff
 800dd6c:	e7b4      	b.n	800dcd8 <dir_read+0x18>
 800dd6e:	68f0      	ldr	r0, [r6, #12]
 800dd70:	f7fe fe1e 	bl	800c9b0 <pick_lfn>
 800dd74:	b180      	cbz	r0, 800dd98 <dir_read+0xd8>
 800dd76:	3f01      	subs	r7, #1
 800dd78:	b2ff      	uxtb	r7, r7
 800dd7a:	e7ad      	b.n	800dcd8 <dir_read+0x18>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800dd7c:	b927      	cbnz	r7, 800dd88 <dir_read+0xc8>
 800dd7e:	4608      	mov	r0, r1
 800dd80:	f7fe fef6 	bl	800cb70 <sum_sfn>
 800dd84:	4548      	cmp	r0, r9
 800dd86:	d00a      	beq.n	800dd9e <dir_read+0xde>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800dd88:	f04f 33ff 	mov.w	r3, #4294967295
 800dd8c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800dd8e:	e006      	b.n	800dd9e <dir_read+0xde>
				ord = 0xFF;
 800dd90:	27ff      	movs	r7, #255	; 0xff
 800dd92:	e7a1      	b.n	800dcd8 <dir_read+0x18>
 800dd94:	27ff      	movs	r7, #255	; 0xff
 800dd96:	e79f      	b.n	800dcd8 <dir_read+0x18>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dd98:	27ff      	movs	r7, #255	; 0xff
 800dd9a:	e79d      	b.n	800dcd8 <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800dd9c:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800dd9e:	b10d      	cbz	r5, 800dda4 <dir_read+0xe4>
 800dda0:	2300      	movs	r3, #0
 800dda2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800dda4:	4628      	mov	r0, r5
 800dda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddaa:	bf00      	nop
 800ddac:	f3af 8000 	nop.w

0800ddb0 <dir_alloc>:
{
 800ddb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 800ddb6:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800ddb8:	2100      	movs	r1, #0
 800ddba:	f7ff fc29 	bl	800d610 <dir_sdi>
	if (res == FR_OK) {
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	bb30      	cbnz	r0, 800de10 <dir_alloc+0x60>
		n = 0;
 800ddc2:	2500      	movs	r5, #0
 800ddc4:	e00e      	b.n	800dde4 <dir_alloc+0x34>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800ddc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ddc8:	f993 3000 	ldrsb.w	r3, [r3]
 800ddcc:	43db      	mvns	r3, r3
 800ddce:	0fdb      	lsrs	r3, r3, #31
 800ddd0:	b1e3      	cbz	r3, 800de0c <dir_alloc+0x5c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ddd2:	3501      	adds	r5, #1
 800ddd4:	42bd      	cmp	r5, r7
 800ddd6:	d01b      	beq.n	800de10 <dir_alloc+0x60>
			res = dir_next(dp, 1);
 800ddd8:	2101      	movs	r1, #1
 800ddda:	4620      	mov	r0, r4
 800dddc:	f7ff fe60 	bl	800daa0 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dde0:	4602      	mov	r2, r0
 800dde2:	b9a8      	cbnz	r0, 800de10 <dir_alloc+0x60>
			res = move_window(fs, dp->sect);
 800dde4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dde6:	4630      	mov	r0, r6
 800dde8:	f7fe ff6a 	bl	800ccc0 <move_window>
			if (res != FR_OK) break;
 800ddec:	4602      	mov	r2, r0
 800ddee:	b978      	cbnz	r0, 800de10 <dir_alloc+0x60>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800ddf0:	7833      	ldrb	r3, [r6, #0]
 800ddf2:	2b04      	cmp	r3, #4
 800ddf4:	d0e7      	beq.n	800ddc6 <dir_alloc+0x16>
 800ddf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	2be5      	cmp	r3, #229	; 0xe5
 800ddfc:	d002      	beq.n	800de04 <dir_alloc+0x54>
 800ddfe:	b91b      	cbnz	r3, 800de08 <dir_alloc+0x58>
 800de00:	2301      	movs	r3, #1
 800de02:	e7e5      	b.n	800ddd0 <dir_alloc+0x20>
 800de04:	2301      	movs	r3, #1
 800de06:	e7e3      	b.n	800ddd0 <dir_alloc+0x20>
 800de08:	2300      	movs	r3, #0
 800de0a:	e7e1      	b.n	800ddd0 <dir_alloc+0x20>
				n = 0;					/* Not a blank entry. Restart to search */
 800de0c:	2500      	movs	r5, #0
 800de0e:	e7e3      	b.n	800ddd8 <dir_alloc+0x28>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800de10:	2a04      	cmp	r2, #4
 800de12:	d001      	beq.n	800de18 <dir_alloc+0x68>
}
 800de14:	4610      	mov	r0, r2
 800de16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800de18:	2207      	movs	r2, #7
 800de1a:	e7fb      	b.n	800de14 <dir_alloc+0x64>
 800de1c:	f3af 8000 	nop.w

0800de20 <store_xdir>:
{
 800de20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de22:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800de24:	6803      	ldr	r3, [r0, #0]
 800de26:	691e      	ldr	r6, [r3, #16]
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800de28:	4630      	mov	r0, r6
 800de2a:	f7fe feb1 	bl	800cb90 <xdir_sum>
 800de2e:	4601      	mov	r1, r0
 800de30:	1cb0      	adds	r0, r6, #2
 800de32:	f7fe fcf5 	bl	800c820 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800de36:	7877      	ldrb	r7, [r6, #1]
 800de38:	3701      	adds	r7, #1
	res = dir_sdi(dp, dp->blk_ofs);
 800de3a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800de3c:	4620      	mov	r0, r4
 800de3e:	f7ff fbe7 	bl	800d610 <dir_sdi>
 800de42:	4605      	mov	r5, r0
	while (res == FR_OK) {
 800de44:	b9b5      	cbnz	r5, 800de74 <store_xdir+0x54>
		res = move_window(dp->obj.fs, dp->sect);
 800de46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800de48:	6820      	ldr	r0, [r4, #0]
 800de4a:	f7fe ff39 	bl	800ccc0 <move_window>
		if (res != FR_OK) break;
 800de4e:	4605      	mov	r5, r0
 800de50:	b980      	cbnz	r0, 800de74 <store_xdir+0x54>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800de52:	2220      	movs	r2, #32
 800de54:	4631      	mov	r1, r6
 800de56:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800de58:	f7fe fd12 	bl	800c880 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800de5c:	6823      	ldr	r3, [r4, #0]
 800de5e:	2201      	movs	r2, #1
 800de60:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800de62:	3f01      	subs	r7, #1
 800de64:	d006      	beq.n	800de74 <store_xdir+0x54>
		dirb += SZDIRE;
 800de66:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
 800de68:	2100      	movs	r1, #0
 800de6a:	4620      	mov	r0, r4
 800de6c:	f7ff fe18 	bl	800daa0 <dir_next>
 800de70:	4605      	mov	r5, r0
 800de72:	e7e7      	b.n	800de44 <store_xdir+0x24>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800de74:	2d02      	cmp	r5, #2
 800de76:	bf28      	it	cs
 800de78:	2502      	movcs	r5, #2
}
 800de7a:	b2e8      	uxtb	r0, r5
 800de7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de7e:	bf00      	nop

0800de80 <dir_remove>:
{
 800de80:	b570      	push	{r4, r5, r6, lr}
 800de82:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800de84:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 800de86:	6b06      	ldr	r6, [r0, #48]	; 0x30
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800de88:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800de8a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800de8e:	d014      	beq.n	800deba <dir_remove+0x3a>
 800de90:	f7ff fbbe 	bl	800d610 <dir_sdi>
	if (res == FR_OK) {
 800de94:	4603      	mov	r3, r0
 800de96:	b180      	cbz	r0, 800deba <dir_remove+0x3a>
 800de98:	e01e      	b.n	800ded8 <dir_remove+0x58>
				dp->dir[XDIR_Type] &= 0x7F;
 800de9a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800de9c:	780a      	ldrb	r2, [r1, #0]
 800de9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dea2:	700a      	strb	r2, [r1, #0]
			fs->wflag = 1;
 800dea4:	2201      	movs	r2, #1
 800dea6:	70ea      	strb	r2, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800dea8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800deaa:	42b2      	cmp	r2, r6
 800deac:	d212      	bcs.n	800ded4 <dir_remove+0x54>
			res = dir_next(dp, 0);	/* Next entry */
 800deae:	2100      	movs	r1, #0
 800deb0:	4620      	mov	r0, r4
 800deb2:	f7ff fdf5 	bl	800daa0 <dir_next>
		} while (res == FR_OK);
 800deb6:	4603      	mov	r3, r0
 800deb8:	b960      	cbnz	r0, 800ded4 <dir_remove+0x54>
			res = move_window(fs, dp->sect);
 800deba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800debc:	4628      	mov	r0, r5
 800debe:	f7fe feff 	bl	800ccc0 <move_window>
			if (res != FR_OK) break;
 800dec2:	4603      	mov	r3, r0
 800dec4:	b930      	cbnz	r0, 800ded4 <dir_remove+0x54>
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800dec6:	782a      	ldrb	r2, [r5, #0]
 800dec8:	2a04      	cmp	r2, #4
 800deca:	d0e6      	beq.n	800de9a <dir_remove+0x1a>
				dp->dir[DIR_Name] = DDEM;
 800decc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dece:	21e5      	movs	r1, #229	; 0xe5
 800ded0:	7011      	strb	r1, [r2, #0]
 800ded2:	e7e7      	b.n	800dea4 <dir_remove+0x24>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800ded4:	2b04      	cmp	r3, #4
 800ded6:	d001      	beq.n	800dedc <dir_remove+0x5c>
}
 800ded8:	4618      	mov	r0, r3
 800deda:	bd70      	pop	{r4, r5, r6, pc}
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800dedc:	2302      	movs	r3, #2
 800dede:	e7fb      	b.n	800ded8 <dir_remove+0x58>

0800dee0 <create_name>:
{
 800dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	b083      	sub	sp, #12
 800dee6:	4680      	mov	r8, r0
 800dee8:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800deea:	f8d1 9000 	ldr.w	r9, [r1]
 800deee:	6803      	ldr	r3, [r0, #0]
 800def0:	68dd      	ldr	r5, [r3, #12]
 800def2:	2400      	movs	r4, #0
 800def4:	4627      	mov	r7, r4
 800def6:	e014      	b.n	800df22 <create_name+0x42>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800def8:	f10b 0b01 	add.w	fp, fp, #1
 800defc:	f819 300b 	ldrb.w	r3, [r9, fp]
 800df00:	2b2f      	cmp	r3, #47	; 0x2f
 800df02:	d0f9      	beq.n	800def8 <create_name+0x18>
 800df04:	2b5c      	cmp	r3, #92	; 0x5c
 800df06:	d0f7      	beq.n	800def8 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 800df08:	eb09 030b 	add.w	r3, r9, fp
 800df0c:	f8ca 3000 	str.w	r3, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800df10:	2e1f      	cmp	r6, #31
 800df12:	d837      	bhi.n	800df84 <create_name+0xa4>
 800df14:	2704      	movs	r7, #4
 800df16:	e038      	b.n	800df8a <create_name+0xaa>
		w = p[si++];					/* Get a character */
 800df18:	465f      	mov	r7, fp
 800df1a:	e020      	b.n	800df5e <create_name+0x7e>
		lfn[di++] = w;					/* Store the Unicode character */
 800df1c:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
 800df20:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 800df22:	f107 0b01 	add.w	fp, r7, #1
 800df26:	f819 0007 	ldrb.w	r0, [r9, r7]
 800df2a:	b286      	uxth	r6, r0
		if (w < ' ') break;				/* Break if end of the path name */
 800df2c:	2e1f      	cmp	r6, #31
 800df2e:	d9eb      	bls.n	800df08 <create_name+0x28>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800df30:	2e2f      	cmp	r6, #47	; 0x2f
 800df32:	d0e3      	beq.n	800defc <create_name+0x1c>
 800df34:	2e5c      	cmp	r6, #92	; 0x5c
 800df36:	d0e1      	beq.n	800defc <create_name+0x1c>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800df38:	2cfe      	cmp	r4, #254	; 0xfe
 800df3a:	f200 8107 	bhi.w	800e14c <create_name+0x26c>
		if (dbc_1st((BYTE)w)) {			/* Check if it is a DBC 1st byte */
 800df3e:	f7fe fccf 	bl	800c8e0 <dbc_1st>
 800df42:	2800      	cmp	r0, #0
 800df44:	d0e8      	beq.n	800df18 <create_name+0x38>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800df46:	3702      	adds	r7, #2
 800df48:	f819 000b 	ldrb.w	r0, [r9, fp]
			w = (w << 8) + b;			/* Create a DBC */
 800df4c:	0236      	lsls	r6, r6, #8
 800df4e:	b2b6      	uxth	r6, r6
 800df50:	4406      	add	r6, r0
 800df52:	b2b6      	uxth	r6, r6
			if (!dbc_2nd(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800df54:	f7fe fccc 	bl	800c8f0 <dbc_2nd>
 800df58:	2800      	cmp	r0, #0
 800df5a:	f000 80f9 	beq.w	800e150 <create_name+0x270>
		w = ff_oem2uni(w, CODEPAGE);	/* Convert ANSI/OEM to Unicode */
 800df5e:	f240 3152 	movw	r1, #850	; 0x352
 800df62:	4630      	mov	r0, r6
 800df64:	f002 f82c 	bl	800ffc0 <ff_oem2uni>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800df68:	4606      	mov	r6, r0
 800df6a:	2800      	cmp	r0, #0
 800df6c:	f000 80f2 	beq.w	800e154 <create_name+0x274>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800df70:	287f      	cmp	r0, #127	; 0x7f
 800df72:	d8d3      	bhi.n	800df1c <create_name+0x3c>
 800df74:	4601      	mov	r1, r0
 800df76:	4879      	ldr	r0, [pc, #484]	; (800e15c <create_name+0x27c>)
 800df78:	f7fe fcaa 	bl	800c8d0 <chk_chr>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	d0cd      	beq.n	800df1c <create_name+0x3c>
 800df80:	2006      	movs	r0, #6
 800df82:	e085      	b.n	800e090 <create_name+0x1b0>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800df84:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800df86:	e000      	b.n	800df8a <create_name+0xaa>
		di--;
 800df88:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800df8a:	b144      	cbz	r4, 800df9e <create_name+0xbe>
		w = lfn[di - 1];
 800df8c:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800df90:	3b01      	subs	r3, #1
 800df92:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 800df96:	2b20      	cmp	r3, #32
 800df98:	d0f6      	beq.n	800df88 <create_name+0xa8>
 800df9a:	2b2e      	cmp	r3, #46	; 0x2e
 800df9c:	d0f4      	beq.n	800df88 <create_name+0xa8>
	lfn[di] = 0;						/* LFN is created */
 800df9e:	2300      	movs	r3, #0
 800dfa0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dfa4:	2c00      	cmp	r4, #0
 800dfa6:	f000 80d7 	beq.w	800e158 <create_name+0x278>
	mem_set(dp->fn, ' ', 11);
 800dfaa:	220b      	movs	r2, #11
 800dfac:	2120      	movs	r1, #32
 800dfae:	f108 0040 	add.w	r0, r8, #64	; 0x40
 800dfb2:	f7fe fc75 	bl	800c8a0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e000      	b.n	800dfbc <create_name+0xdc>
 800dfba:	3301      	adds	r3, #1
 800dfbc:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800dfc0:	2a20      	cmp	r2, #32
 800dfc2:	d0fa      	beq.n	800dfba <create_name+0xda>
 800dfc4:	2a2e      	cmp	r2, #46	; 0x2e
 800dfc6:	d0f8      	beq.n	800dfba <create_name+0xda>
	if (si > 0) cf |= NS_LOSS | NS_LFN;
 800dfc8:	b11b      	cbz	r3, 800dfd2 <create_name+0xf2>
 800dfca:	f047 0703 	orr.w	r7, r7, #3
 800dfce:	e000      	b.n	800dfd2 <create_name+0xf2>
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dfd0:	3c01      	subs	r4, #1
 800dfd2:	b164      	cbz	r4, 800dfee <create_name+0x10e>
 800dfd4:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 800dfd8:	3a01      	subs	r2, #1
 800dfda:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800dfde:	2a2e      	cmp	r2, #46	; 0x2e
 800dfe0:	d1f6      	bne.n	800dfd0 <create_name+0xf0>
 800dfe2:	f04f 0b08 	mov.w	fp, #8
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	9201      	str	r2, [sp, #4]
 800dfea:	4692      	mov	sl, r2
 800dfec:	e00a      	b.n	800e004 <create_name+0x124>
 800dfee:	9401      	str	r4, [sp, #4]
 800dff0:	f04f 0b08 	mov.w	fp, #8
 800dff4:	f04f 0a00 	mov.w	sl, #0
 800dff8:	e004      	b.n	800e004 <create_name+0x124>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800dffa:	454c      	cmp	r4, r9
 800dffc:	d00b      	beq.n	800e016 <create_name+0x136>
			cf |= NS_LOSS | NS_LFN;
 800dffe:	f047 0703 	orr.w	r7, r7, #3
		w = lfn[si++];					/* Get an LFN character */
 800e002:	464b      	mov	r3, r9
 800e004:	f103 0901 	add.w	r9, r3, #1
 800e008:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800e00c:	b316      	cbz	r6, 800e054 <create_name+0x174>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e00e:	2e20      	cmp	r6, #32
 800e010:	d0f5      	beq.n	800dffe <create_name+0x11e>
 800e012:	2e2e      	cmp	r6, #46	; 0x2e
 800e014:	d0f1      	beq.n	800dffa <create_name+0x11a>
		if (i >= ni || si == di) {		/* Entered extension or end of SFN */
 800e016:	9b01      	ldr	r3, [sp, #4]
 800e018:	455b      	cmp	r3, fp
 800e01a:	d212      	bcs.n	800e042 <create_name+0x162>
 800e01c:	454c      	cmp	r4, r9
 800e01e:	d010      	beq.n	800e042 <create_name+0x162>
		if (w >= 0x80) {				/* Is this a non-ASCII character? */
 800e020:	2e7f      	cmp	r6, #127	; 0x7f
 800e022:	d845      	bhi.n	800e0b0 <create_name+0x1d0>
		if (w >= 0x100) {				/* Is this a DBC? */
 800e024:	2eff      	cmp	r6, #255	; 0xff
 800e026:	d95a      	bls.n	800e0de <create_name+0x1fe>
			if (i >= ni - 1) {			/* Field overflow? */
 800e028:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e02c:	9a01      	ldr	r2, [sp, #4]
 800e02e:	4293      	cmp	r3, r2
 800e030:	d94f      	bls.n	800e0d2 <create_name+0x1f2>
			dp->fn[i++] = (BYTE)(w >> 8);	/* Put 1st byte */
 800e032:	9901      	ldr	r1, [sp, #4]
 800e034:	1c4b      	adds	r3, r1, #1
 800e036:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800e03a:	4441      	add	r1, r8
 800e03c:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
 800e040:	e052      	b.n	800e0e8 <create_name+0x208>
			if (ni == 11) {				/* Extension fileld overflow? */
 800e042:	f1bb 0f0b 	cmp.w	fp, #11
 800e046:	d026      	beq.n	800e096 <create_name+0x1b6>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e048:	454c      	cmp	r4, r9
 800e04a:	d001      	beq.n	800e050 <create_name+0x170>
 800e04c:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;			/* No extension */
 800e050:	454c      	cmp	r4, r9
 800e052:	d223      	bcs.n	800e09c <create_name+0x1bc>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e054:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
 800e058:	2be5      	cmp	r3, #229	; 0xe5
 800e05a:	d068      	beq.n	800e12e <create_name+0x24e>
	if (ni == 8) b <<= 2;
 800e05c:	f1bb 0f08 	cmp.w	fp, #8
 800e060:	d069      	beq.n	800e136 <create_name+0x256>
 800e062:	f00a 030c 	and.w	r3, sl, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e066:	2b0c      	cmp	r3, #12
 800e068:	d003      	beq.n	800e072 <create_name+0x192>
 800e06a:	f00a 0203 	and.w	r2, sl, #3
 800e06e:	2a03      	cmp	r2, #3
 800e070:	d101      	bne.n	800e076 <create_name+0x196>
 800e072:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e076:	f017 0f02 	tst.w	r7, #2
 800e07a:	d106      	bne.n	800e08a <create_name+0x1aa>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e07c:	f00a 0a03 	and.w	sl, sl, #3
 800e080:	f1ba 0f01 	cmp.w	sl, #1
 800e084:	d05c      	beq.n	800e140 <create_name+0x260>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e086:	2b04      	cmp	r3, #4
 800e088:	d05d      	beq.n	800e146 <create_name+0x266>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e08a:	f888 704b 	strb.w	r7, [r8, #75]	; 0x4b
	return FR_OK;
 800e08e:	2000      	movs	r0, #0
}
 800e090:	b003      	add	sp, #12
 800e092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN;
 800e096:	f047 0703 	orr.w	r7, r7, #3
				break;
 800e09a:	e7db      	b.n	800e054 <create_name+0x174>
			b <<= 2; continue;
 800e09c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800e0a0:	fa5f fa8a 	uxtb.w	sl, sl
			si = di; i = 8; ni = 11;	/* Enter extension fileld */
 800e0a4:	4623      	mov	r3, r4
 800e0a6:	f04f 0b0b 	mov.w	fp, #11
 800e0aa:	2208      	movs	r2, #8
 800e0ac:	9201      	str	r2, [sp, #4]
			b <<= 2; continue;
 800e0ae:	e7a9      	b.n	800e004 <create_name+0x124>
			cf |= NS_LFN;				/* Force to create LFN entry */
 800e0b0:	f047 0702 	orr.w	r7, r7, #2
			w = ff_uni2oem(w, CODEPAGE);	/* Unicode -> OEM code */
 800e0b4:	f240 3152 	movw	r1, #850	; 0x352
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	f001 ff61 	bl	800ff80 <ff_uni2oem>
 800e0be:	4606      	mov	r6, r0
			if (w & 0x80) w = ExCvt[w & 0x7F];	/* Convert extended character to upper (SBCS) */
 800e0c0:	f010 0f80 	tst.w	r0, #128	; 0x80
 800e0c4:	d0ae      	beq.n	800e024 <create_name+0x144>
 800e0c6:	f000 067f 	and.w	r6, r0, #127	; 0x7f
 800e0ca:	4b25      	ldr	r3, [pc, #148]	; (800e160 <create_name+0x280>)
 800e0cc:	4433      	add	r3, r6
 800e0ce:	7c1e      	ldrb	r6, [r3, #16]
 800e0d0:	e7a8      	b.n	800e024 <create_name+0x144>
				cf |= NS_LOSS | NS_LFN;
 800e0d2:	f047 0703 	orr.w	r7, r7, #3
		w = lfn[si++];					/* Get an LFN character */
 800e0d6:	464b      	mov	r3, r9
				i = ni; continue;		/* Next field */
 800e0d8:	f8cd b004 	str.w	fp, [sp, #4]
 800e0dc:	e792      	b.n	800e004 <create_name+0x124>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e0de:	b956      	cbnz	r6, 800e0f6 <create_name+0x216>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e0e0:	f047 0703 	orr.w	r7, r7, #3
 800e0e4:	9b01      	ldr	r3, [sp, #4]
 800e0e6:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800e0e8:	1c5a      	adds	r2, r3, #1
 800e0ea:	9201      	str	r2, [sp, #4]
 800e0ec:	4443      	add	r3, r8
 800e0ee:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800e0f2:	464b      	mov	r3, r9
 800e0f4:	e786      	b.n	800e004 <create_name+0x124>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e0f6:	4631      	mov	r1, r6
 800e0f8:	481a      	ldr	r0, [pc, #104]	; (800e164 <create_name+0x284>)
 800e0fa:	f7fe fbe9 	bl	800c8d0 <chk_chr>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d1ee      	bne.n	800e0e0 <create_name+0x200>
				if (IsUpper(w)) {		/* ASCII large capital */
 800e102:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 800e106:	b29b      	uxth	r3, r3
 800e108:	2b19      	cmp	r3, #25
 800e10a:	d803      	bhi.n	800e114 <create_name+0x234>
					b |= 2;
 800e10c:	f04a 0a02 	orr.w	sl, sl, #2
 800e110:	9b01      	ldr	r3, [sp, #4]
 800e112:	e7e9      	b.n	800e0e8 <create_name+0x208>
					if (IsLower(w)) {	/* ASCII small capital */
 800e114:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 800e118:	b29b      	uxth	r3, r3
 800e11a:	2b19      	cmp	r3, #25
 800e11c:	d805      	bhi.n	800e12a <create_name+0x24a>
						b |= 1; w -= 0x20;
 800e11e:	f04a 0a01 	orr.w	sl, sl, #1
 800e122:	3e20      	subs	r6, #32
 800e124:	b2b6      	uxth	r6, r6
 800e126:	9b01      	ldr	r3, [sp, #4]
 800e128:	e7de      	b.n	800e0e8 <create_name+0x208>
 800e12a:	9b01      	ldr	r3, [sp, #4]
 800e12c:	e7dc      	b.n	800e0e8 <create_name+0x208>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e12e:	2305      	movs	r3, #5
 800e130:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
 800e134:	e792      	b.n	800e05c <create_name+0x17c>
	if (ni == 8) b <<= 2;
 800e136:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800e13a:	fa5f fa8a 	uxtb.w	sl, sl
 800e13e:	e790      	b.n	800e062 <create_name+0x182>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e140:	f047 0710 	orr.w	r7, r7, #16
 800e144:	e79f      	b.n	800e086 <create_name+0x1a6>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e146:	f047 0708 	orr.w	r7, r7, #8
 800e14a:	e79e      	b.n	800e08a <create_name+0x1aa>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e14c:	2006      	movs	r0, #6
 800e14e:	e79f      	b.n	800e090 <create_name+0x1b0>
			if (!dbc_2nd(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800e150:	2006      	movs	r0, #6
 800e152:	e79d      	b.n	800e090 <create_name+0x1b0>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e154:	2006      	movs	r0, #6
 800e156:	e79b      	b.n	800e090 <create_name+0x1b0>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e158:	2006      	movs	r0, #6
 800e15a:	e799      	b.n	800e090 <create_name+0x1b0>
 800e15c:	0801a8f8 	.word	0x0801a8f8
 800e160:	08019e7c 	.word	0x08019e7c
 800e164:	0801a904 	.word	0x0801a904
 800e168:	f3af 8000 	nop.w
 800e16c:	f3af 8000 	nop.w

0800e170 <get_xdir_info>:
{
 800e170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e174:	4607      	mov	r7, r0
 800e176:	4688      	mov	r8, r1
	for (si = SZDIRE * 2, nc = di = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800e178:	2600      	movs	r6, #0
 800e17a:	2540      	movs	r5, #64	; 0x40
 800e17c:	4634      	mov	r4, r6
 800e17e:	e008      	b.n	800e192 <get_xdir_info+0x22>
		if (w == 0 || di >= FF_MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800e180:	b1f8      	cbz	r0, 800e1c2 <get_xdir_info+0x52>
 800e182:	2cfe      	cmp	r4, #254	; 0xfe
 800e184:	d843      	bhi.n	800e20e <get_xdir_info+0x9e>
		fno->fname[di++] = (TCHAR)w;			/* Store the character */
 800e186:	eb08 0304 	add.w	r3, r8, r4
 800e18a:	7698      	strb	r0, [r3, #26]
	for (si = SZDIRE * 2, nc = di = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800e18c:	3502      	adds	r5, #2
 800e18e:	3601      	adds	r6, #1
		fno->fname[di++] = (TCHAR)w;			/* Store the character */
 800e190:	3401      	adds	r4, #1
	for (si = SZDIRE * 2, nc = di = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800e192:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e196:	42b3      	cmp	r3, r6
 800e198:	d914      	bls.n	800e1c4 <get_xdir_info+0x54>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800e19a:	f015 0f1f 	tst.w	r5, #31
 800e19e:	d100      	bne.n	800e1a2 <get_xdir_info+0x32>
 800e1a0:	3502      	adds	r5, #2
		w = ld_word(dirb + si);					/* Get a character */
 800e1a2:	1978      	adds	r0, r7, r5
 800e1a4:	f7fe facc 	bl	800c740 <ld_word>
		w = ff_uni2oem(w, CODEPAGE);			/* Convert it to OEM code */
 800e1a8:	f240 3152 	movw	r1, #850	; 0x352
 800e1ac:	f001 fee8 	bl	800ff80 <ff_uni2oem>
		if (w >= 0x100) {						/* Is it a double byte char? */
 800e1b0:	28ff      	cmp	r0, #255	; 0xff
 800e1b2:	d9e5      	bls.n	800e180 <get_xdir_info+0x10>
			fno->fname[di++] = (char)(w >> 8);	/* Store 1st byte of the DBC */
 800e1b4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e1b8:	eb08 0204 	add.w	r2, r8, r4
 800e1bc:	7693      	strb	r3, [r2, #26]
 800e1be:	3401      	adds	r4, #1
 800e1c0:	e7de      	b.n	800e180 <get_xdir_info+0x10>
		if (w == 0 || di >= FF_MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800e1c2:	2400      	movs	r4, #0
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800e1c4:	b924      	cbnz	r4, 800e1d0 <get_xdir_info+0x60>
 800e1c6:	eb08 0304 	add.w	r3, r8, r4
 800e1ca:	223f      	movs	r2, #63	; 0x3f
 800e1cc:	769a      	strb	r2, [r3, #26]
 800e1ce:	3401      	adds	r4, #1
	fno->fname[di] = 0;						/* Terminate file name */
 800e1d0:	4444      	add	r4, r8
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	76a3      	strb	r3, [r4, #26]
	fno->altname[0] = 0;					/* No SFN */
 800e1d6:	f888 300d 	strb.w	r3, [r8, #13]
	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
 800e1da:	793b      	ldrb	r3, [r7, #4]
 800e1dc:	f888 300c 	strb.w	r3, [r8, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800e1e0:	f013 0f10 	tst.w	r3, #16
 800e1e4:	d115      	bne.n	800e212 <get_xdir_info+0xa2>
 800e1e6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800e1ea:	f7fe fac1 	bl	800c770 <ld_qword>
 800e1ee:	e9c8 0100 	strd	r0, r1, [r8]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800e1f2:	f107 000c 	add.w	r0, r7, #12
 800e1f6:	f7fe faa3 	bl	800c740 <ld_word>
 800e1fa:	f8a8 000a 	strh.w	r0, [r8, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800e1fe:	f107 000e 	add.w	r0, r7, #14
 800e202:	f7fe fa9d 	bl	800c740 <ld_word>
 800e206:	f8a8 0008 	strh.w	r0, [r8, #8]
}
 800e20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (w == 0 || di >= FF_MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800e20e:	2400      	movs	r4, #0
 800e210:	e7d8      	b.n	800e1c4 <get_xdir_info+0x54>
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800e212:	2000      	movs	r0, #0
 800e214:	2100      	movs	r1, #0
 800e216:	e7ea      	b.n	800e1ee <get_xdir_info+0x7e>
 800e218:	f3af 8000 	nop.w
 800e21c:	f3af 8000 	nop.w

0800e220 <get_fileinfo>:
{
 800e220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800e224:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;			/* Invaidate file info */
 800e228:	2300      	movs	r3, #0
 800e22a:	768b      	strb	r3, [r1, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800e22c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d07f      	beq.n	800e332 <get_fileinfo+0x112>
 800e232:	460c      	mov	r4, r1
 800e234:	4605      	mov	r5, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e236:	f898 3000 	ldrb.w	r3, [r8]
 800e23a:	2b04      	cmp	r3, #4
 800e23c:	d006      	beq.n	800e24c <get_fileinfo+0x2c>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e23e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e244:	d025      	beq.n	800e292 <get_fileinfo+0x72>
			i = j = 0;
 800e246:	2300      	movs	r3, #0
 800e248:	461e      	mov	r6, r3
 800e24a:	e00a      	b.n	800e262 <get_fileinfo+0x42>
		get_xdir_info(fs->dirbuf, fno);
 800e24c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e250:	f7ff ff8e 	bl	800e170 <get_xdir_info>
		return;
 800e254:	e06d      	b.n	800e332 <get_fileinfo+0x112>
				if (i >= FF_MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e256:	2efe      	cmp	r6, #254	; 0xfe
 800e258:	d81f      	bhi.n	800e29a <get_fileinfo+0x7a>
				fno->fname[i++] = (TCHAR)w;
 800e25a:	19a2      	adds	r2, r4, r6
 800e25c:	7693      	strb	r3, [r2, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e25e:	463b      	mov	r3, r7
				fno->fname[i++] = (TCHAR)w;
 800e260:	3601      	adds	r6, #1
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e262:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800e266:	1c5f      	adds	r7, r3, #1
 800e268:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800e26c:	b170      	cbz	r0, 800e28c <get_fileinfo+0x6c>
				w = ff_uni2oem(w, CODEPAGE);	/* Unicode -> OEM */
 800e26e:	f240 3152 	movw	r1, #850	; 0x352
 800e272:	f001 fe85 	bl	800ff80 <ff_uni2oem>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e276:	4603      	mov	r3, r0
 800e278:	b138      	cbz	r0, 800e28a <get_fileinfo+0x6a>
				if (w >= 0x100) {				/* Put 1st byte if it is a DBC */
 800e27a:	28ff      	cmp	r0, #255	; 0xff
 800e27c:	d9eb      	bls.n	800e256 <get_fileinfo+0x36>
					fno->fname[i++] = (char)(w >> 8);
 800e27e:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800e282:	19a1      	adds	r1, r4, r6
 800e284:	768a      	strb	r2, [r1, #26]
 800e286:	3601      	adds	r6, #1
 800e288:	e7e5      	b.n	800e256 <get_fileinfo+0x36>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e28a:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e28c:	4426      	add	r6, r4
 800e28e:	2300      	movs	r3, #0
 800e290:	76b3      	strb	r3, [r6, #26]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e292:	7ea6      	ldrb	r6, [r4, #26]
	i = j = 0;
 800e294:	2200      	movs	r2, #0
 800e296:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 800e298:	e012      	b.n	800e2c0 <get_fileinfo+0xa0>
				if (i >= FF_MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e29a:	2600      	movs	r6, #0
 800e29c:	e7f6      	b.n	800e28c <get_fileinfo+0x6c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e29e:	23e5      	movs	r3, #229	; 0xe5
 800e2a0:	e017      	b.n	800e2d2 <get_fileinfo+0xb2>
			if (!lfv) fno->fname[j] = '.';
 800e2a2:	b916      	cbnz	r6, 800e2aa <get_fileinfo+0x8a>
 800e2a4:	18a0      	adds	r0, r4, r2
 800e2a6:	272e      	movs	r7, #46	; 0x2e
 800e2a8:	7687      	strb	r7, [r0, #26]
			fno->altname[j++] = '.';
 800e2aa:	18a0      	adds	r0, r4, r2
 800e2ac:	272e      	movs	r7, #46	; 0x2e
 800e2ae:	7347      	strb	r7, [r0, #13]
 800e2b0:	3201      	adds	r2, #1
 800e2b2:	e010      	b.n	800e2d6 <get_fileinfo+0xb6>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e2b4:	2010      	movs	r0, #16
 800e2b6:	e01c      	b.n	800e2f2 <get_fileinfo+0xd2>
			fno->fname[j] = c;
 800e2b8:	18a0      	adds	r0, r4, r2
 800e2ba:	7683      	strb	r3, [r0, #26]
		j++;
 800e2bc:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e2be:	460b      	mov	r3, r1
	while (i < 11) {		/* Copy name body and extension */
 800e2c0:	2b0a      	cmp	r3, #10
 800e2c2:	d81b      	bhi.n	800e2fc <get_fileinfo+0xdc>
		c = (TCHAR)dp->dir[i++];
 800e2c4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800e2c6:	1c59      	adds	r1, r3, #1
 800e2c8:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e2ca:	2b20      	cmp	r3, #32
 800e2cc:	d0f7      	beq.n	800e2be <get_fileinfo+0x9e>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e2ce:	2b05      	cmp	r3, #5
 800e2d0:	d0e5      	beq.n	800e29e <get_fileinfo+0x7e>
		if (i == 9) {						/* Insert a . if extension is exist */
 800e2d2:	2909      	cmp	r1, #9
 800e2d4:	d0e5      	beq.n	800e2a2 <get_fileinfo+0x82>
		fno->altname[j] = c;
 800e2d6:	18a0      	adds	r0, r4, r2
 800e2d8:	7343      	strb	r3, [r0, #13]
		if (!lfv) {
 800e2da:	2e00      	cmp	r6, #0
 800e2dc:	d1ee      	bne.n	800e2bc <get_fileinfo+0x9c>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e2de:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 800e2e2:	b2c0      	uxtb	r0, r0
 800e2e4:	2819      	cmp	r0, #25
 800e2e6:	d8e7      	bhi.n	800e2b8 <get_fileinfo+0x98>
 800e2e8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800e2ea:	7b07      	ldrb	r7, [r0, #12]
 800e2ec:	2908      	cmp	r1, #8
 800e2ee:	d8e1      	bhi.n	800e2b4 <get_fileinfo+0x94>
 800e2f0:	2008      	movs	r0, #8
 800e2f2:	4207      	tst	r7, r0
 800e2f4:	d0e0      	beq.n	800e2b8 <get_fileinfo+0x98>
				c += 0x20;			/* To lower */
 800e2f6:	3320      	adds	r3, #32
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	e7dd      	b.n	800e2b8 <get_fileinfo+0x98>
	if (!lfv) {
 800e2fc:	b936      	cbnz	r6, 800e30c <get_fileinfo+0xec>
		fno->fname[j] = 0;
 800e2fe:	18a3      	adds	r3, r4, r2
 800e300:	2100      	movs	r1, #0
 800e302:	7699      	strb	r1, [r3, #26]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e304:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800e306:	7b1b      	ldrb	r3, [r3, #12]
 800e308:	b903      	cbnz	r3, 800e30c <get_fileinfo+0xec>
 800e30a:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e30c:	4422      	add	r2, r4
 800e30e:	2600      	movs	r6, #0
 800e310:	7356      	strb	r6, [r2, #13]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e312:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800e314:	7adb      	ldrb	r3, [r3, #11]
 800e316:	7323      	strb	r3, [r4, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e318:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800e31a:	301c      	adds	r0, #28
 800e31c:	f7fe fa18 	bl	800c750 <ld_dword>
 800e320:	6020      	str	r0, [r4, #0]
 800e322:	6066      	str	r6, [r4, #4]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e324:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800e326:	3016      	adds	r0, #22
 800e328:	f7fe fa12 	bl	800c750 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e32c:	8160      	strh	r0, [r4, #10]
 800e32e:	0c00      	lsrs	r0, r0, #16
 800e330:	8120      	strh	r0, [r4, #8]
}
 800e332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e336:	bf00      	nop
 800e338:	f3af 8000 	nop.w
 800e33c:	f3af 8000 	nop.w

0800e340 <xname_sum>:
{
 800e340:	b538      	push	{r3, r4, r5, lr}
	WORD sum = 0;
 800e342:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
 800e344:	e011      	b.n	800e36a <xname_sum+0x2a>
		chr = ff_wtoupper(chr);		/* File name needs to be upper-case converted */
 800e346:	f001 fe53 	bl	800fff0 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800e34a:	0863      	lsrs	r3, r4, #1
 800e34c:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
 800e350:	b2c3      	uxtb	r3, r0
 800e352:	fa13 f484 	uxtah	r4, r3, r4
 800e356:	b2a3      	uxth	r3, r4
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800e358:	085c      	lsrs	r4, r3, #1
 800e35a:	eb04 34c3 	add.w	r4, r4, r3, lsl #15
 800e35e:	f3c0 200f 	ubfx	r0, r0, #8, #16
 800e362:	fa10 f484 	uxtah	r4, r0, r4
 800e366:	b2a4      	uxth	r4, r4
	while ((chr = *name++) != 0) {
 800e368:	4628      	mov	r0, r5
 800e36a:	1c85      	adds	r5, r0, #2
 800e36c:	8800      	ldrh	r0, [r0, #0]
 800e36e:	2800      	cmp	r0, #0
 800e370:	d1e9      	bne.n	800e346 <xname_sum+0x6>
}
 800e372:	4620      	mov	r0, r4
 800e374:	bd38      	pop	{r3, r4, r5, pc}
 800e376:	bf00      	nop
 800e378:	f3af 8000 	nop.w
 800e37c:	f3af 8000 	nop.w

0800e380 <create_xdir>:
{
 800e380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e384:	4607      	mov	r7, r0
 800e386:	4688      	mov	r8, r1
	mem_set(dirb, 0, 2 * SZDIRE);
 800e388:	2240      	movs	r2, #64	; 0x40
 800e38a:	2100      	movs	r1, #0
 800e38c:	f7fe fa88 	bl	800c8a0 <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = 0x85;
 800e390:	2385      	movs	r3, #133	; 0x85
 800e392:	703b      	strb	r3, [r7, #0]
	dirb[1 * SZDIRE + XDIR_Type] = 0xC0;
 800e394:	23c0      	movs	r3, #192	; 0xc0
 800e396:	f887 3020 	strb.w	r3, [r7, #32]
	nlen = nc1 = 0; chr = 1; i = SZDIRE * 2;
 800e39a:	2501      	movs	r5, #1
 800e39c:	2600      	movs	r6, #0
 800e39e:	46b1      	mov	r9, r6
 800e3a0:	2440      	movs	r4, #64	; 0x40
 800e3a2:	e017      	b.n	800e3d4 <create_xdir+0x54>
			st_word(dirb + i, chr); 		/* Store it */
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	1938      	adds	r0, r7, r4
 800e3a8:	f7fe fa3a 	bl	800c820 <st_word>
			i += 2;
 800e3ac:	3402      	adds	r4, #2
		} while (i % SZDIRE != 0);
 800e3ae:	f014 0f1f 	tst.w	r4, #31
 800e3b2:	d008      	beq.n	800e3c6 <create_xdir+0x46>
			if (chr && (chr = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800e3b4:	2d00      	cmp	r5, #0
 800e3b6:	d0f5      	beq.n	800e3a4 <create_xdir+0x24>
 800e3b8:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 800e3bc:	2d00      	cmp	r5, #0
 800e3be:	d0f1      	beq.n	800e3a4 <create_xdir+0x24>
 800e3c0:	3601      	adds	r6, #1
 800e3c2:	b2f6      	uxtb	r6, r6
 800e3c4:	e7ee      	b.n	800e3a4 <create_xdir+0x24>
		nc1++;
 800e3c6:	f109 0301 	add.w	r3, r9, #1
 800e3ca:	b2db      	uxtb	r3, r3
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 800e3cc:	f838 2016 	ldrh.w	r2, [r8, r6, lsl #1]
 800e3d0:	b13a      	cbz	r2, 800e3e2 <create_xdir+0x62>
		nc1++;
 800e3d2:	4699      	mov	r9, r3
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800e3d4:	1c63      	adds	r3, r4, #1
 800e3d6:	22c1      	movs	r2, #193	; 0xc1
 800e3d8:	553a      	strb	r2, [r7, r4]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	54fa      	strb	r2, [r7, r3]
 800e3de:	3402      	adds	r4, #2
 800e3e0:	e7e8      	b.n	800e3b4 <create_xdir+0x34>
	dirb[XDIR_NumName] = nlen;		/* Set name length */
 800e3e2:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count */
 800e3e6:	f109 0902 	add.w	r9, r9, #2
 800e3ea:	f887 9001 	strb.w	r9, [r7, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800e3ee:	4640      	mov	r0, r8
 800e3f0:	f7ff ffa6 	bl	800e340 <xname_sum>
 800e3f4:	4601      	mov	r1, r0
 800e3f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e3fa:	f7fe fa11 	bl	800c820 <st_word>
}
 800e3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e402:	bf00      	nop
 800e404:	f3af 8000 	nop.w
 800e408:	f3af 8000 	nop.w
 800e40c:	f3af 8000 	nop.w

0800e410 <cmp_lfn>:
{
 800e410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e414:	4681      	mov	r9, r0
 800e416:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e418:	f101 001a 	add.w	r0, r1, #26
 800e41c:	f7fe f990 	bl	800c740 <ld_word>
 800e420:	bbb8      	cbnz	r0, 800e492 <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e422:	783d      	ldrb	r5, [r7, #0]
 800e424:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800e428:	3d01      	subs	r5, #1
 800e42a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800e42e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e432:	f04f 0801 	mov.w	r8, #1
 800e436:	2400      	movs	r4, #0
 800e438:	e004      	b.n	800e444 <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e43a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e43e:	4298      	cmp	r0, r3
 800e440:	d12e      	bne.n	800e4a0 <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e442:	3401      	adds	r4, #1
 800e444:	2c0c      	cmp	r4, #12
 800e446:	d818      	bhi.n	800e47a <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e448:	4b19      	ldr	r3, [pc, #100]	; (800e4b0 <cmp_lfn+0xa0>)
 800e44a:	5d18      	ldrb	r0, [r3, r4]
 800e44c:	4438      	add	r0, r7
 800e44e:	f7fe f977 	bl	800c740 <ld_word>
 800e452:	4606      	mov	r6, r0
		if (wc) {
 800e454:	f1b8 0f00 	cmp.w	r8, #0
 800e458:	d0ef      	beq.n	800e43a <cmp_lfn+0x2a>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e45a:	2dfe      	cmp	r5, #254	; 0xfe
 800e45c:	d81c      	bhi.n	800e498 <cmp_lfn+0x88>
 800e45e:	f001 fdc7 	bl	800fff0 <ff_wtoupper>
 800e462:	4680      	mov	r8, r0
 800e464:	f105 0a01 	add.w	sl, r5, #1
 800e468:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
 800e46c:	f001 fdc0 	bl	800fff0 <ff_wtoupper>
 800e470:	4580      	cmp	r8, r0
 800e472:	d113      	bne.n	800e49c <cmp_lfn+0x8c>
			wc = uc;
 800e474:	46b0      	mov	r8, r6
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e476:	4655      	mov	r5, sl
 800e478:	e7e3      	b.n	800e442 <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e47a:	783b      	ldrb	r3, [r7, #0]
 800e47c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e480:	d010      	beq.n	800e4a4 <cmp_lfn+0x94>
 800e482:	f1b8 0f00 	cmp.w	r8, #0
 800e486:	d00f      	beq.n	800e4a8 <cmp_lfn+0x98>
 800e488:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
 800e48c:	b973      	cbnz	r3, 800e4ac <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
 800e48e:	2001      	movs	r0, #1
 800e490:	e000      	b.n	800e494 <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e492:	2000      	movs	r0, #0
}
 800e494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
 800e498:	2000      	movs	r0, #0
 800e49a:	e7fb      	b.n	800e494 <cmp_lfn+0x84>
 800e49c:	2000      	movs	r0, #0
 800e49e:	e7f9      	b.n	800e494 <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	e7f7      	b.n	800e494 <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
 800e4a4:	2001      	movs	r0, #1
 800e4a6:	e7f5      	b.n	800e494 <cmp_lfn+0x84>
 800e4a8:	2001      	movs	r0, #1
 800e4aa:	e7f3      	b.n	800e494 <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	e7f1      	b.n	800e494 <cmp_lfn+0x84>
 800e4b0:	08019e7c 	.word	0x08019e7c
 800e4b4:	f3af 8000 	nop.w
 800e4b8:	f3af 8000 	nop.w
 800e4bc:	f3af 8000 	nop.w

0800e4c0 <dir_find>:
{
 800e4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c4:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800e4c6:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	f7ff f8a1 	bl	800d610 <dir_sdi>
	if (res != FR_OK) return res;
 800e4ce:	4680      	mov	r8, r0
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	f040 80a0 	bne.w	800e616 <dir_find+0x156>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e4d6:	783b      	ldrb	r3, [r7, #0]
 800e4d8:	2b04      	cmp	r3, #4
 800e4da:	d006      	beq.n	800e4ea <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e4e0:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e4e2:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800e4e6:	464e      	mov	r6, r9
 800e4e8:	e042      	b.n	800e570 <dir_find+0xb0>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f7ff ff28 	bl	800e340 <xname_sum>
 800e4f0:	4683      	mov	fp, r0
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e4f2:	e01e      	b.n	800e532 <dir_find+0x72>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e4f4:	6938      	ldr	r0, [r7, #16]
 800e4f6:	4430      	add	r0, r6
 800e4f8:	f7fe f922 	bl	800c740 <ld_word>
 800e4fc:	f001 fd78 	bl	800fff0 <ff_wtoupper>
 800e500:	4682      	mov	sl, r0
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
 800e508:	f001 fd72 	bl	800fff0 <ff_wtoupper>
 800e50c:	4582      	cmp	sl, r0
 800e50e:	d10a      	bne.n	800e526 <dir_find+0x66>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e510:	3d01      	subs	r5, #1
 800e512:	b2ed      	uxtb	r5, r5
 800e514:	3602      	adds	r6, #2
 800e516:	f109 0901 	add.w	r9, r9, #1
 800e51a:	b125      	cbz	r5, 800e526 <dir_find+0x66>
				if ((di % SZDIRE) == 0) di += 2;
 800e51c:	f016 0f1f 	tst.w	r6, #31
 800e520:	d1e8      	bne.n	800e4f4 <dir_find+0x34>
 800e522:	3602      	adds	r6, #2
 800e524:	e7e6      	b.n	800e4f4 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e526:	b925      	cbnz	r5, 800e532 <dir_find+0x72>
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d071      	beq.n	800e616 <dir_find+0x156>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e532:	2100      	movs	r1, #0
 800e534:	4620      	mov	r0, r4
 800e536:	f7ff fbc3 	bl	800dcc0 <dir_read>
 800e53a:	4680      	mov	r8, r0
 800e53c:	2800      	cmp	r0, #0
 800e53e:	d16a      	bne.n	800e616 <dir_find+0x156>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800e540:	693d      	ldr	r5, [r7, #16]
 800e542:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800e546:	f7fe f8fb 	bl	800c740 <ld_word>
 800e54a:	4558      	cmp	r0, fp
 800e54c:	d1f1      	bne.n	800e532 <dir_find+0x72>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e54e:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 800e552:	f04f 0900 	mov.w	r9, #0
 800e556:	2640      	movs	r6, #64	; 0x40
 800e558:	e7df      	b.n	800e51a <dir_find+0x5a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e55a:	f04f 33ff 	mov.w	r3, #4294967295
 800e55e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e560:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800e562:	2100      	movs	r1, #0
 800e564:	4620      	mov	r0, r4
 800e566:	f7ff fa9b 	bl	800daa0 <dir_next>
	} while (res == FR_OK);
 800e56a:	4680      	mov	r8, r0
 800e56c:	2800      	cmp	r0, #0
 800e56e:	d152      	bne.n	800e616 <dir_find+0x156>
		res = move_window(fs, dp->sect);
 800e570:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e572:	4638      	mov	r0, r7
 800e574:	f7fe fba4 	bl	800ccc0 <move_window>
		if (res != FR_OK) break;
 800e578:	4680      	mov	r8, r0
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d14b      	bne.n	800e616 <dir_find+0x156>
		c = dp->dir[DIR_Name];
 800e57e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800e580:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e582:	2b00      	cmp	r3, #0
 800e584:	d045      	beq.n	800e612 <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e586:	7ae9      	ldrb	r1, [r5, #11]
 800e588:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800e58c:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e58e:	2be5      	cmp	r3, #229	; 0xe5
 800e590:	d0e3      	beq.n	800e55a <dir_find+0x9a>
 800e592:	f011 0f08 	tst.w	r1, #8
 800e596:	d001      	beq.n	800e59c <dir_find+0xdc>
 800e598:	2a0f      	cmp	r2, #15
 800e59a:	d1de      	bne.n	800e55a <dir_find+0x9a>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e59c:	2a0f      	cmp	r2, #15
 800e59e:	d016      	beq.n	800e5ce <dir_find+0x10e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e5a0:	b926      	cbnz	r6, 800e5ac <dir_find+0xec>
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	f7fe fae4 	bl	800cb70 <sum_sfn>
 800e5a8:	4548      	cmp	r0, r9
 800e5aa:	d034      	beq.n	800e616 <dir_find+0x156>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e5ac:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800e5b0:	f013 0f01 	tst.w	r3, #1
 800e5b4:	d106      	bne.n	800e5c4 <dir_find+0x104>
 800e5b6:	220b      	movs	r2, #11
 800e5b8:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800e5bc:	4628      	mov	r0, r5
 800e5be:	f7fe f977 	bl	800c8b0 <mem_cmp>
 800e5c2:	b340      	cbz	r0, 800e616 <dir_find+0x156>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e5c8:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e5ca:	26ff      	movs	r6, #255	; 0xff
 800e5cc:	e7c9      	b.n	800e562 <dir_find+0xa2>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e5ce:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 800e5d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 800e5d6:	d1c4      	bne.n	800e562 <dir_find+0xa2>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e5d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e5dc:	d006      	beq.n	800e5ec <dir_find+0x12c>
						sum = dp->dir[LDIR_Chksum];
 800e5de:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e5e2:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e5e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e5e8:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e5ea:	461e      	mov	r6, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e5ec:	42b3      	cmp	r3, r6
 800e5ee:	d001      	beq.n	800e5f4 <dir_find+0x134>
 800e5f0:	26ff      	movs	r6, #255	; 0xff
 800e5f2:	e7b6      	b.n	800e562 <dir_find+0xa2>
 800e5f4:	7b6b      	ldrb	r3, [r5, #13]
 800e5f6:	454b      	cmp	r3, r9
 800e5f8:	d001      	beq.n	800e5fe <dir_find+0x13e>
 800e5fa:	26ff      	movs	r6, #255	; 0xff
 800e5fc:	e7b1      	b.n	800e562 <dir_find+0xa2>
 800e5fe:	4629      	mov	r1, r5
 800e600:	68f8      	ldr	r0, [r7, #12]
 800e602:	f7ff ff05 	bl	800e410 <cmp_lfn>
 800e606:	b110      	cbz	r0, 800e60e <dir_find+0x14e>
 800e608:	3e01      	subs	r6, #1
 800e60a:	b2f6      	uxtb	r6, r6
 800e60c:	e7a9      	b.n	800e562 <dir_find+0xa2>
 800e60e:	26ff      	movs	r6, #255	; 0xff
 800e610:	e7a7      	b.n	800e562 <dir_find+0xa2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e612:	f04f 0804 	mov.w	r8, #4
}
 800e616:	4640      	mov	r0, r8
 800e618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e61c:	f3af 8000 	nop.w

0800e620 <follow_path>:
{
 800e620:	b530      	push	{r4, r5, lr}
 800e622:	b083      	sub	sp, #12
 800e624:	4604      	mov	r4, r0
 800e626:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
 800e628:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e62a:	e001      	b.n	800e630 <follow_path+0x10>
 800e62c:	3301      	adds	r3, #1
 800e62e:	9301      	str	r3, [sp, #4]
 800e630:	9b01      	ldr	r3, [sp, #4]
 800e632:	781a      	ldrb	r2, [r3, #0]
 800e634:	2a2f      	cmp	r2, #47	; 0x2f
 800e636:	d0f9      	beq.n	800e62c <follow_path+0xc>
 800e638:	2a5c      	cmp	r2, #92	; 0x5c
 800e63a:	d0f7      	beq.n	800e62c <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from root directory */
 800e63c:	2200      	movs	r2, #0
 800e63e:	60a2      	str	r2, [r4, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 800e640:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	2b1f      	cmp	r3, #31
 800e646:	d82c      	bhi.n	800e6a2 <follow_path+0x82>
		dp->fn[NSFLAG] = NS_NONAME;
 800e648:	2380      	movs	r3, #128	; 0x80
 800e64a:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800e64e:	4611      	mov	r1, r2
 800e650:	4620      	mov	r0, r4
 800e652:	f7fe ffdd 	bl	800d610 <dir_sdi>
 800e656:	4603      	mov	r3, r0
}
 800e658:	4618      	mov	r0, r3
 800e65a:	b003      	add	sp, #12
 800e65c:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e65e:	2804      	cmp	r0, #4
 800e660:	d1fa      	bne.n	800e658 <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e662:	f012 0f04 	tst.w	r2, #4
 800e666:	d1f7      	bne.n	800e658 <follow_path+0x38>
 800e668:	2305      	movs	r3, #5
 800e66a:	e7f5      	b.n	800e658 <follow_path+0x38>
				dp->obj.c_scl = dp->obj.sclust;
 800e66c:	68a3      	ldr	r3, [r4, #8]
 800e66e:	6223      	str	r3, [r4, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800e670:	6923      	ldr	r3, [r4, #16]
 800e672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e676:	79e2      	ldrb	r2, [r4, #7]
 800e678:	4313      	orrs	r3, r2
 800e67a:	6263      	str	r3, [r4, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 800e67c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e67e:	62a3      	str	r3, [r4, #40]	; 0x28
				dp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800e680:	6928      	ldr	r0, [r5, #16]
 800e682:	3034      	adds	r0, #52	; 0x34
 800e684:	f7fe f864 	bl	800c750 <ld_dword>
 800e688:	60a0      	str	r0, [r4, #8]
				dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e68a:	692b      	ldr	r3, [r5, #16]
 800e68c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e690:	f003 0302 	and.w	r3, r3, #2
 800e694:	71e3      	strb	r3, [r4, #7]
				dp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e696:	6928      	ldr	r0, [r5, #16]
 800e698:	3038      	adds	r0, #56	; 0x38
 800e69a:	f7fe f869 	bl	800c770 <ld_qword>
 800e69e:	e9c4 0104 	strd	r0, r1, [r4, #16]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e6a2:	a901      	add	r1, sp, #4
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	f7ff fc1b 	bl	800dee0 <create_name>
			if (res != FR_OK) break;
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d1d3      	bne.n	800e658 <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f7ff ff05 	bl	800e4c0 <dir_find>
			ns = dp->fn[NSFLAG];
 800e6b6:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	d1ce      	bne.n	800e65e <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e6c0:	f012 0f04 	tst.w	r2, #4
 800e6c4:	d1c8      	bne.n	800e658 <follow_path+0x38>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e6c6:	79a3      	ldrb	r3, [r4, #6]
 800e6c8:	f013 0f10 	tst.w	r3, #16
 800e6cc:	d00d      	beq.n	800e6ea <follow_path+0xca>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800e6ce:	782b      	ldrb	r3, [r5, #0]
 800e6d0:	2b04      	cmp	r3, #4
 800e6d2:	d0cb      	beq.n	800e66c <follow_path+0x4c>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e6d4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800e6d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6de:	4419      	add	r1, r3
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	f7fe f935 	bl	800c950 <ld_clust>
 800e6e6:	60a0      	str	r0, [r4, #8]
 800e6e8:	e7db      	b.n	800e6a2 <follow_path+0x82>
				res = FR_NO_PATH; break;
 800e6ea:	2305      	movs	r3, #5
 800e6ec:	e7b4      	b.n	800e658 <follow_path+0x38>
 800e6ee:	bf00      	nop

0800e6f0 <dir_register>:
{
 800e6f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6f4:	b099      	sub	sp, #100	; 0x64
	FATFS *fs = dp->obj.fs;
 800e6f6:	6805      	ldr	r5, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e6f8:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 800e6fc:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800e700:	f040 80eb 	bne.w	800e8da <dir_register+0x1ea>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e704:	2400      	movs	r4, #0
 800e706:	e000      	b.n	800e70a <dir_register+0x1a>
 800e708:	3401      	adds	r4, #1
 800e70a:	68eb      	ldr	r3, [r5, #12]
 800e70c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d1f9      	bne.n	800e708 <dir_register+0x18>
 800e714:	4606      	mov	r6, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e716:	782b      	ldrb	r3, [r5, #0]
 800e718:	2b04      	cmp	r3, #4
 800e71a:	d022      	beq.n	800e762 <dir_register+0x72>
	mem_cpy(sn, dp->fn, 12);
 800e71c:	f100 0740 	add.w	r7, r0, #64	; 0x40
 800e720:	220c      	movs	r2, #12
 800e722:	4639      	mov	r1, r7
 800e724:	a815      	add	r0, sp, #84	; 0x54
 800e726:	f7fe f8ab 	bl	800c880 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e72a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800e72e:	f013 0f01 	tst.w	r3, #1
 800e732:	d07a      	beq.n	800e82a <dir_register+0x13a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e734:	2340      	movs	r3, #64	; 0x40
 800e736:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800e73a:	f04f 0801 	mov.w	r8, #1
 800e73e:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 800e742:	d868      	bhi.n	800e816 <dir_register+0x126>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e744:	4643      	mov	r3, r8
 800e746:	68ea      	ldr	r2, [r5, #12]
 800e748:	a915      	add	r1, sp, #84	; 0x54
 800e74a:	4638      	mov	r0, r7
 800e74c:	f7fe f9b8 	bl	800cac0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e750:	4630      	mov	r0, r6
 800e752:	f7ff feb5 	bl	800e4c0 <dir_find>
			if (res != FR_OK) break;
 800e756:	4681      	mov	r9, r0
 800e758:	2800      	cmp	r0, #0
 800e75a:	d15c      	bne.n	800e816 <dir_register+0x126>
		for (n = 1; n < 100; n++) {
 800e75c:	f108 0801 	add.w	r8, r8, #1
 800e760:	e7ed      	b.n	800e73e <dir_register+0x4e>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800e762:	340e      	adds	r4, #14
 800e764:	4b62      	ldr	r3, [pc, #392]	; (800e8f0 <dir_register+0x200>)
 800e766:	fba3 3404 	umull	r3, r4, r3, r4
 800e76a:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800e76c:	1ca1      	adds	r1, r4, #2
 800e76e:	f7ff fb1f 	bl	800ddb0 <dir_alloc>
		if (res != FR_OK) return res;
 800e772:	4681      	mov	r9, r0
 800e774:	2800      	cmp	r0, #0
 800e776:	f040 80b2 	bne.w	800e8de <dir_register+0x1ee>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800e77a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800e77c:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 800e780:	3401      	adds	r4, #1
 800e782:	eba3 1444 	sub.w	r4, r3, r4, lsl #5
 800e786:	64f4      	str	r4, [r6, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched? */
 800e788:	79f3      	ldrb	r3, [r6, #7]
 800e78a:	f013 0f04 	tst.w	r3, #4
 800e78e:	d013      	beq.n	800e7b8 <dir_register+0xc8>
			dp->obj.stat &= ~4;
 800e790:	f023 0304 	bic.w	r3, r3, #4
 800e794:	71f3      	strb	r3, [r6, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 800e796:	4630      	mov	r0, r6
 800e798:	f7fe fe62 	bl	800d460 <fill_first_frag>
			if (res != FR_OK) return res;
 800e79c:	b108      	cbz	r0, 800e7a2 <dir_register+0xb2>
 800e79e:	4681      	mov	r9, r0
 800e7a0:	e09d      	b.n	800e8de <dir_register+0x1ee>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 800e7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a6:	6b71      	ldr	r1, [r6, #52]	; 0x34
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	f7fe fe41 	bl	800d430 <fill_last_frag>
			if (res != FR_OK) return res;
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	f040 8099 	bne.w	800e8e6 <dir_register+0x1f6>
			if (dp->obj.sclust != 0) {		/* Is it a sub directory? */
 800e7b4:	68b3      	ldr	r3, [r6, #8]
 800e7b6:	b923      	cbnz	r3, 800e7c2 <dir_register+0xd2>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800e7b8:	68e9      	ldr	r1, [r5, #12]
 800e7ba:	6928      	ldr	r0, [r5, #16]
 800e7bc:	f7ff fde0 	bl	800e380 <create_xdir>
		return FR_OK;
 800e7c0:	e08d      	b.n	800e8de <dir_register+0x1ee>
				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 800e7c2:	4631      	mov	r1, r6
 800e7c4:	4668      	mov	r0, sp
 800e7c6:	f7ff fa5b 	bl	800dc80 <load_obj_xdir>
				if (res != FR_OK) return res;
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	b108      	cbz	r0, 800e7d2 <dir_register+0xe2>
 800e7ce:	4699      	mov	r9, r3
 800e7d0:	e085      	b.n	800e8de <dir_register+0x1ee>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
 800e7d2:	8969      	ldrh	r1, [r5, #10]
 800e7d4:	0249      	lsls	r1, r1, #9
 800e7d6:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800e7da:	1857      	adds	r7, r2, r1
 800e7dc:	f143 0800 	adc.w	r8, r3, #0
 800e7e0:	e9c6 7804 	strd	r7, r8, [r6, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);	/* Update the allocation status */
 800e7e4:	6928      	ldr	r0, [r5, #16]
 800e7e6:	463a      	mov	r2, r7
 800e7e8:	4643      	mov	r3, r8
 800e7ea:	3038      	adds	r0, #56	; 0x38
 800e7ec:	f7fe f830 	bl	800c850 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800e7f0:	6928      	ldr	r0, [r5, #16]
 800e7f2:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800e7f6:	3028      	adds	r0, #40	; 0x28
 800e7f8:	f7fe f82a 	bl	800c850 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800e7fc:	79f3      	ldrb	r3, [r6, #7]
 800e7fe:	692a      	ldr	r2, [r5, #16]
 800e800:	f043 0301 	orr.w	r3, r3, #1
 800e804:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
 800e808:	4668      	mov	r0, sp
 800e80a:	f7ff fb09 	bl	800de20 <store_xdir>
				if (res != FR_OK) return res;
 800e80e:	4603      	mov	r3, r0
 800e810:	2800      	cmp	r0, #0
 800e812:	d0d1      	beq.n	800e7b8 <dir_register+0xc8>
 800e814:	e7db      	b.n	800e7ce <dir_register+0xde>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e816:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 800e81a:	d066      	beq.n	800e8ea <dir_register+0x1fa>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e81c:	f1b9 0f04 	cmp.w	r9, #4
 800e820:	d15d      	bne.n	800e8de <dir_register+0x1ee>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e822:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800e826:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e82a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800e82e:	f013 0f02 	tst.w	r3, #2
 800e832:	d02a      	beq.n	800e88a <dir_register+0x19a>
 800e834:	340c      	adds	r4, #12
 800e836:	4b2f      	ldr	r3, [pc, #188]	; (800e8f4 <dir_register+0x204>)
 800e838:	fba3 3404 	umull	r3, r4, r3, r4
 800e83c:	08a4      	lsrs	r4, r4, #2
 800e83e:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e840:	4621      	mov	r1, r4
 800e842:	4630      	mov	r0, r6
 800e844:	f7ff fab4 	bl	800ddb0 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e848:	4681      	mov	r9, r0
 800e84a:	b908      	cbnz	r0, 800e850 <dir_register+0x160>
 800e84c:	3c01      	subs	r4, #1
 800e84e:	d11e      	bne.n	800e88e <dir_register+0x19e>
	if (res == FR_OK) {
 800e850:	f1b9 0f00 	cmp.w	r9, #0
 800e854:	d143      	bne.n	800e8de <dir_register+0x1ee>
		res = move_window(fs, dp->sect);
 800e856:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800e858:	4628      	mov	r0, r5
 800e85a:	f7fe fa31 	bl	800ccc0 <move_window>
		if (res == FR_OK) {
 800e85e:	4681      	mov	r9, r0
 800e860:	2800      	cmp	r0, #0
 800e862:	d13c      	bne.n	800e8de <dir_register+0x1ee>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e864:	2220      	movs	r2, #32
 800e866:	2100      	movs	r1, #0
 800e868:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800e86a:	f7fe f819 	bl	800c8a0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e86e:	220b      	movs	r2, #11
 800e870:	4639      	mov	r1, r7
 800e872:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800e874:	f7fe f804 	bl	800c880 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e878:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
 800e87c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800e87e:	f003 0318 	and.w	r3, r3, #24
 800e882:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 800e884:	2301      	movs	r3, #1
 800e886:	70eb      	strb	r3, [r5, #3]
 800e888:	e029      	b.n	800e8de <dir_register+0x1ee>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e88a:	2401      	movs	r4, #1
 800e88c:	e7d8      	b.n	800e840 <dir_register+0x150>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e88e:	6b31      	ldr	r1, [r6, #48]	; 0x30
 800e890:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 800e894:	4630      	mov	r0, r6
 800e896:	f7fe febb 	bl	800d610 <dir_sdi>
		if (res == FR_OK) {
 800e89a:	4681      	mov	r9, r0
 800e89c:	2800      	cmp	r0, #0
 800e89e:	d1d7      	bne.n	800e850 <dir_register+0x160>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e8a0:	4638      	mov	r0, r7
 800e8a2:	f7fe f965 	bl	800cb70 <sum_sfn>
 800e8a6:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 800e8a8:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	f7fe fa08 	bl	800ccc0 <move_window>
				if (res != FR_OK) break;
 800e8b0:	4681      	mov	r9, r0
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	d1cc      	bne.n	800e850 <dir_register+0x160>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e8b6:	4643      	mov	r3, r8
 800e8b8:	b2e2      	uxtb	r2, r4
 800e8ba:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 800e8bc:	68e8      	ldr	r0, [r5, #12]
 800e8be:	f7fe f8bf 	bl	800ca40 <put_lfn>
				fs->wflag = 1;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	f7ff f8e9 	bl	800daa0 <dir_next>
			} while (res == FR_OK && --nent);
 800e8ce:	4681      	mov	r9, r0
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	d1bd      	bne.n	800e850 <dir_register+0x160>
 800e8d4:	3c01      	subs	r4, #1
 800e8d6:	d1e7      	bne.n	800e8a8 <dir_register+0x1b8>
 800e8d8:	e7ba      	b.n	800e850 <dir_register+0x160>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e8da:	f04f 0906 	mov.w	r9, #6
}
 800e8de:	4648      	mov	r0, r9
 800e8e0:	b019      	add	sp, #100	; 0x64
 800e8e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (res != FR_OK) return res;
 800e8e6:	4681      	mov	r9, r0
 800e8e8:	e7f9      	b.n	800e8de <dir_register+0x1ee>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e8ea:	f04f 0907 	mov.w	r9, #7
 800e8ee:	e7f6      	b.n	800e8de <dir_register+0x1ee>
 800e8f0:	88888889 	.word	0x88888889
 800e8f4:	4ec4ec4f 	.word	0x4ec4ec4f
 800e8f8:	f3af 8000 	nop.w
 800e8fc:	f3af 8000 	nop.w

0800e900 <sync_fs>:
{
 800e900:	b570      	push	{r4, r5, r6, lr}
 800e902:	4604      	mov	r4, r0
	res = sync_window(fs);
 800e904:	f7fe f9b4 	bl	800cc70 <sync_window>
	if (res == FR_OK) {
 800e908:	4605      	mov	r5, r0
 800e90a:	b948      	cbnz	r0, 800e920 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800e90c:	7823      	ldrb	r3, [r4, #0]
 800e90e:	2b03      	cmp	r3, #3
 800e910:	d008      	beq.n	800e924 <sync_fs+0x24>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e912:	2200      	movs	r2, #0
 800e914:	4611      	mov	r1, r2
 800e916:	7860      	ldrb	r0, [r4, #1]
 800e918:	f7fd feda 	bl	800c6d0 <disk_ioctl>
 800e91c:	b100      	cbz	r0, 800e920 <sync_fs+0x20>
 800e91e:	2501      	movs	r5, #1
}
 800e920:	4628      	mov	r0, r5
 800e922:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800e924:	7923      	ldrb	r3, [r4, #4]
 800e926:	2b01      	cmp	r3, #1
 800e928:	d1f3      	bne.n	800e912 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800e92a:	f104 0638 	add.w	r6, r4, #56	; 0x38
 800e92e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e932:	2100      	movs	r1, #0
 800e934:	4630      	mov	r0, r6
 800e936:	f7fd ffb3 	bl	800c8a0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e93a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e93e:	f204 2036 	addw	r0, r4, #566	; 0x236
 800e942:	f7fd ff6d 	bl	800c820 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e946:	490f      	ldr	r1, [pc, #60]	; (800e984 <sync_fs+0x84>)
 800e948:	4630      	mov	r0, r6
 800e94a:	f7fd ff71 	bl	800c830 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e94e:	490e      	ldr	r1, [pc, #56]	; (800e988 <sync_fs+0x88>)
 800e950:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800e954:	f7fd ff6c 	bl	800c830 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e958:	69a1      	ldr	r1, [r4, #24]
 800e95a:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800e95e:	f7fd ff67 	bl	800c830 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e962:	6961      	ldr	r1, [r4, #20]
 800e964:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800e968:	f7fd ff62 	bl	800c830 <st_dword>
			fs->winsect = fs->volbase + 1;
 800e96c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e96e:	3201      	adds	r2, #1
 800e970:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800e972:	2301      	movs	r3, #1
 800e974:	4631      	mov	r1, r6
 800e976:	7860      	ldrb	r0, [r4, #1]
 800e978:	f7fd fe92 	bl	800c6a0 <disk_write>
			fs->fsi_flag = 0;
 800e97c:	2300      	movs	r3, #0
 800e97e:	7123      	strb	r3, [r4, #4]
 800e980:	e7c7      	b.n	800e912 <sync_fs+0x12>
 800e982:	bf00      	nop
 800e984:	41615252 	.word	0x41615252
 800e988:	61417272 	.word	0x61417272
 800e98c:	f3af 8000 	nop.w

0800e990 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e990:	b510      	push	{r4, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	9001      	str	r0, [sp, #4]
 800e996:	9100      	str	r1, [sp, #0]
 800e998:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e99a:	a804      	add	r0, sp, #16
 800e99c:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e9a0:	f7fe f90e 	bl	800cbc0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	db17      	blt.n	800e9d8 <f_mount+0x48>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e9a8:	4b0c      	ldr	r3, [pc, #48]	; (800e9dc <f_mount+0x4c>)
 800e9aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
 800e9ae:	b10b      	cbz	r3, 800e9b4 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e9b4:	9b01      	ldr	r3, [sp, #4]
 800e9b6:	b10b      	cbz	r3, 800e9bc <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e9bc:	4b07      	ldr	r3, [pc, #28]	; (800e9dc <f_mount+0x4c>)
 800e9be:	9a01      	ldr	r2, [sp, #4]
 800e9c0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 800e9c4:	b914      	cbnz	r4, 800e9cc <f_mount+0x3c>
 800e9c6:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800e9c8:	b004      	add	sp, #16
 800e9ca:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	a901      	add	r1, sp, #4
 800e9d0:	4668      	mov	r0, sp
 800e9d2:	f7fe f9dd 	bl	800cd90 <find_volume>
	LEAVE_FF(fs, res);
 800e9d6:	e7f7      	b.n	800e9c8 <f_mount+0x38>
	if (vol < 0) return FR_INVALID_DRIVE;
 800e9d8:	200b      	movs	r0, #11
 800e9da:	e7f5      	b.n	800e9c8 <f_mount+0x38>
 800e9dc:	200022c8 	.word	0x200022c8

0800e9e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e4:	b099      	sub	sp, #100	; 0x64
 800e9e6:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	f000 8183 	beq.w	800ecf4 <f_open+0x314>
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	4616      	mov	r6, r2

	/* Get logical drive */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e9f2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800e9f6:	463a      	mov	r2, r7
 800e9f8:	a903      	add	r1, sp, #12
 800e9fa:	a801      	add	r0, sp, #4
 800e9fc:	f7fe f9c8 	bl	800cd90 <find_volume>
	if (res == FR_OK) {
 800ea00:	4605      	mov	r5, r0
 800ea02:	b130      	cbz	r0, 800ea12 <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ea04:	b10d      	cbz	r5, 800ea0a <f_open+0x2a>
 800ea06:	2300      	movs	r3, #0
 800ea08:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	b019      	add	sp, #100	; 0x64
 800ea0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 800ea12:	9b03      	ldr	r3, [sp, #12]
 800ea14:	9304      	str	r3, [sp, #16]
		INIT_NAMBUF(fs);
 800ea16:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800ea1a:	f7fd fe81 	bl	800c720 <ff_memalloc>
 800ea1e:	4682      	mov	sl, r0
 800ea20:	2800      	cmp	r0, #0
 800ea22:	f000 8169 	beq.w	800ecf8 <f_open+0x318>
 800ea26:	9b03      	ldr	r3, [sp, #12]
 800ea28:	60d8      	str	r0, [r3, #12]
 800ea2a:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800ea2e:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800ea30:	9901      	ldr	r1, [sp, #4]
 800ea32:	a804      	add	r0, sp, #16
 800ea34:	f7ff fdf4 	bl	800e620 <follow_path>
		if (res == FR_OK) {
 800ea38:	4605      	mov	r5, r0
 800ea3a:	b918      	cbnz	r0, 800ea44 <f_open+0x64>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ea3c:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	db47      	blt.n	800ead4 <f_open+0xf4>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ea44:	f016 0f1c 	tst.w	r6, #28
 800ea48:	f000 809c 	beq.w	800eb84 <f_open+0x1a4>
			if (res != FR_OK) {					/* No file, create new */
 800ea4c:	2d00      	cmp	r5, #0
 800ea4e:	d048      	beq.n	800eae2 <f_open+0x102>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ea50:	2d04      	cmp	r5, #4
 800ea52:	d041      	beq.n	800ead8 <f_open+0xf8>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ea54:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800ea58:	2d00      	cmp	r5, #0
 800ea5a:	f040 80a2 	bne.w	800eba2 <f_open+0x1c2>
 800ea5e:	f017 0f08 	tst.w	r7, #8
 800ea62:	f000 809e 	beq.w	800eba2 <f_open+0x1c2>
				if (fs->fs_type == FS_EXFAT) {
 800ea66:	9803      	ldr	r0, [sp, #12]
 800ea68:	7803      	ldrb	r3, [r0, #0]
 800ea6a:	2b04      	cmp	r3, #4
 800ea6c:	d043      	beq.n	800eaf6 <f_open+0x116>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800ea6e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800ea70:	4631      	mov	r1, r6
 800ea72:	f7fd ff6d 	bl	800c950 <ld_clust>
 800ea76:	4680      	mov	r8, r0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 800ea78:	f7fd fe42 	bl	800c700 <get_fattime>
 800ea7c:	4601      	mov	r1, r0
 800ea7e:	f106 000e 	add.w	r0, r6, #14
 800ea82:	f7fd fed5 	bl	800c830 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ea86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea88:	2220      	movs	r2, #32
 800ea8a:	72da      	strb	r2, [r3, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ea90:	9803      	ldr	r0, [sp, #12]
 800ea92:	f7fd ff75 	bl	800c980 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ea96:	2100      	movs	r1, #0
 800ea98:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ea9a:	301c      	adds	r0, #28
 800ea9c:	f7fd fec8 	bl	800c830 <st_dword>
					fs->wflag = 1;
 800eaa0:	9b03      	ldr	r3, [sp, #12]
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800eaa6:	f1b8 0f00 	cmp.w	r8, #0
 800eaaa:	d07a      	beq.n	800eba2 <f_open+0x1c2>
						dw = fs->winsect;
 800eaac:	9b03      	ldr	r3, [sp, #12]
 800eaae:	6b5e      	ldr	r6, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 800eab0:	2200      	movs	r2, #0
 800eab2:	4641      	mov	r1, r8
 800eab4:	a804      	add	r0, sp, #16
 800eab6:	f7fe fef3 	bl	800d8a0 <remove_chain>
						if (res == FR_OK) {
 800eaba:	4605      	mov	r5, r0
 800eabc:	2800      	cmp	r0, #0
 800eabe:	d170      	bne.n	800eba2 <f_open+0x1c2>
							res = move_window(fs, dw);
 800eac0:	4631      	mov	r1, r6
 800eac2:	9803      	ldr	r0, [sp, #12]
 800eac4:	f7fe f8fc 	bl	800ccc0 <move_window>
 800eac8:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800eaca:	f108 33ff 	add.w	r3, r8, #4294967295
 800eace:	9a03      	ldr	r2, [sp, #12]
 800ead0:	6153      	str	r3, [r2, #20]
 800ead2:	e066      	b.n	800eba2 <f_open+0x1c2>
				res = FR_INVALID_NAME;
 800ead4:	2506      	movs	r5, #6
 800ead6:	e7b5      	b.n	800ea44 <f_open+0x64>
					res = dir_register(&dj);
 800ead8:	a804      	add	r0, sp, #16
 800eada:	f7ff fe09 	bl	800e6f0 <dir_register>
 800eade:	4605      	mov	r5, r0
 800eae0:	e7b8      	b.n	800ea54 <f_open+0x74>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eae2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800eae6:	f013 0f11 	tst.w	r3, #17
 800eaea:	d159      	bne.n	800eba0 <f_open+0x1c0>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eaec:	f016 0f04 	tst.w	r6, #4
 800eaf0:	d0b2      	beq.n	800ea58 <f_open+0x78>
 800eaf2:	2508      	movs	r5, #8
 800eaf4:	e055      	b.n	800eba2 <f_open+0x1c2>
					fp->obj.fs = fs;
 800eaf6:	6020      	str	r0, [r4, #0]
					fp->obj.sclust = cl = ld_dword(fs->dirbuf + XDIR_FstClus);
 800eaf8:	9d03      	ldr	r5, [sp, #12]
 800eafa:	6928      	ldr	r0, [r5, #16]
 800eafc:	3034      	adds	r0, #52	; 0x34
 800eafe:	f7fd fe27 	bl	800c750 <ld_dword>
 800eb02:	4680      	mov	r8, r0
 800eb04:	60a0      	str	r0, [r4, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800eb06:	6928      	ldr	r0, [r5, #16]
 800eb08:	3038      	adds	r0, #56	; 0x38
 800eb0a:	f7fd fe31 	bl	800c770 <ld_qword>
 800eb0e:	e9c4 0104 	strd	r0, r1, [r4, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800eb12:	692b      	ldr	r3, [r5, #16]
 800eb14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800eb18:	f003 0302 	and.w	r3, r3, #2
 800eb1c:	71e3      	strb	r3, [r4, #7]
					fp->obj.n_frag = 0;
 800eb1e:	2600      	movs	r6, #0
 800eb20:	61e6      	str	r6, [r4, #28]
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
 800eb22:	6928      	ldr	r0, [r5, #16]
 800eb24:	221e      	movs	r2, #30
 800eb26:	4631      	mov	r1, r6
 800eb28:	3002      	adds	r0, #2
 800eb2a:	f7fd feb9 	bl	800c8a0 <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 800eb2e:	9b03      	ldr	r3, [sp, #12]
 800eb30:	6918      	ldr	r0, [r3, #16]
 800eb32:	221a      	movs	r2, #26
 800eb34:	4631      	mov	r1, r6
 800eb36:	3026      	adds	r0, #38	; 0x26
 800eb38:	f7fd feb2 	bl	800c8a0 <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 800eb3c:	9b03      	ldr	r3, [sp, #12]
 800eb3e:	691a      	ldr	r2, [r3, #16]
 800eb40:	2120      	movs	r1, #32
 800eb42:	7111      	strb	r1, [r2, #4]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 800eb44:	691d      	ldr	r5, [r3, #16]
 800eb46:	f7fd fddb 	bl	800c700 <get_fattime>
 800eb4a:	4601      	mov	r1, r0
 800eb4c:	f105 0008 	add.w	r0, r5, #8
 800eb50:	f7fd fe6e 	bl	800c830 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800eb54:	9b03      	ldr	r3, [sp, #12]
 800eb56:	691b      	ldr	r3, [r3, #16]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
 800eb5e:	a804      	add	r0, sp, #16
 800eb60:	f7ff f95e 	bl	800de20 <store_xdir>
					if (res == FR_OK && cl != 0) {		/* Remove the cluster chain if exist */
 800eb64:	4605      	mov	r5, r0
 800eb66:	b9e0      	cbnz	r0, 800eba2 <f_open+0x1c2>
 800eb68:	f1b8 0f00 	cmp.w	r8, #0
 800eb6c:	d019      	beq.n	800eba2 <f_open+0x1c2>
						res = remove_chain(&fp->obj, cl, 0);
 800eb6e:	4632      	mov	r2, r6
 800eb70:	4641      	mov	r1, r8
 800eb72:	4620      	mov	r0, r4
 800eb74:	f7fe fe94 	bl	800d8a0 <remove_chain>
 800eb78:	4605      	mov	r5, r0
						fs->last_clst = cl - 1;			/* Reuse the cluster hole */
 800eb7a:	f108 33ff 	add.w	r3, r8, #4294967295
 800eb7e:	9a03      	ldr	r2, [sp, #12]
 800eb80:	6153      	str	r3, [r2, #20]
 800eb82:	e00e      	b.n	800eba2 <f_open+0x1c2>
			if (res == FR_OK) {					/* Is the object exsiting? */
 800eb84:	b96d      	cbnz	r5, 800eba2 <f_open+0x1c2>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800eb86:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800eb8a:	f013 0f10 	tst.w	r3, #16
 800eb8e:	d150      	bne.n	800ec32 <f_open+0x252>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800eb90:	f016 0f02 	tst.w	r6, #2
 800eb94:	d005      	beq.n	800eba2 <f_open+0x1c2>
 800eb96:	f013 0f01 	tst.w	r3, #1
 800eb9a:	d002      	beq.n	800eba2 <f_open+0x1c2>
						res = FR_DENIED;
 800eb9c:	2507      	movs	r5, #7
 800eb9e:	e00b      	b.n	800ebb8 <f_open+0x1d8>
					res = FR_DENIED;
 800eba0:	2507      	movs	r5, #7
		if (res == FR_OK) {
 800eba2:	b94d      	cbnz	r5, 800ebb8 <f_open+0x1d8>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800eba4:	f017 0f08 	tst.w	r7, #8
 800eba8:	d001      	beq.n	800ebae <f_open+0x1ce>
 800ebaa:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ebae:	9b03      	ldr	r3, [sp, #12]
 800ebb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebb2:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800ebb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ebb6:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (res == FR_OK) {
 800ebb8:	2d00      	cmp	r5, #0
 800ebba:	f040 8088 	bne.w	800ecce <f_open+0x2ee>
			if (fs->fs_type == FS_EXFAT) {
 800ebbe:	9e03      	ldr	r6, [sp, #12]
 800ebc0:	7833      	ldrb	r3, [r6, #0]
 800ebc2:	2b04      	cmp	r3, #4
 800ebc4:	d037      	beq.n	800ec36 <f_open+0x256>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ebc6:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800ebca:	4641      	mov	r1, r8
 800ebcc:	4630      	mov	r0, r6
 800ebce:	f7fd febf 	bl	800c950 <ld_clust>
 800ebd2:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ebd4:	f108 001c 	add.w	r0, r8, #28
 800ebd8:	f7fd fdba 	bl	800c750 <ld_dword>
 800ebdc:	6120      	str	r0, [r4, #16]
 800ebde:	2300      	movs	r3, #0
 800ebe0:	6163      	str	r3, [r4, #20]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	6521      	str	r1, [r4, #80]	; 0x50
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ebe6:	9b03      	ldr	r3, [sp, #12]
 800ebe8:	6023      	str	r3, [r4, #0]
			fp->obj.id = fs->id;
 800ebea:	88db      	ldrh	r3, [r3, #6]
 800ebec:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800ebee:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800ebf2:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800ebf6:	6461      	str	r1, [r4, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
 800ec00:	f104 0354 	add.w	r3, r4, #84	; 0x54
 800ec04:	9300      	str	r3, [sp, #0]
 800ec06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7fd fe48 	bl	800c8a0 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ec10:	f017 0f20 	tst.w	r7, #32
 800ec14:	d05b      	beq.n	800ecce <f_open+0x2ee>
 800ec16:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
 800ec1a:	ea56 0307 	orrs.w	r3, r6, r7
 800ec1e:	d056      	beq.n	800ecce <f_open+0x2ee>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ec20:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ec24:	9b03      	ldr	r3, [sp, #12]
 800ec26:	f8b3 b00a 	ldrh.w	fp, [r3, #10]
 800ec2a:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ec2e:	68a1      	ldr	r1, [r4, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ec30:	e027      	b.n	800ec82 <f_open+0x2a2>
					res = FR_NO_FILE;
 800ec32:	2504      	movs	r5, #4
 800ec34:	e7c0      	b.n	800ebb8 <f_open+0x1d8>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800ec36:	9b06      	ldr	r3, [sp, #24]
 800ec38:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800ec3a:	9b08      	ldr	r3, [sp, #32]
 800ec3c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ec40:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ec44:	4313      	orrs	r3, r2
 800ec46:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800ec48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec4a:	62a3      	str	r3, [r4, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800ec4c:	6930      	ldr	r0, [r6, #16]
 800ec4e:	3034      	adds	r0, #52	; 0x34
 800ec50:	f7fd fd7e 	bl	800c750 <ld_dword>
 800ec54:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ec56:	6930      	ldr	r0, [r6, #16]
 800ec58:	3038      	adds	r0, #56	; 0x38
 800ec5a:	f7fd fd89 	bl	800c770 <ld_qword>
 800ec5e:	e9c4 0104 	strd	r0, r1, [r4, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ec62:	6933      	ldr	r3, [r6, #16]
 800ec64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ec68:	f003 0302 	and.w	r3, r3, #2
 800ec6c:	71e3      	strb	r3, [r4, #7]
				fp->obj.n_frag = 0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	61e3      	str	r3, [r4, #28]
 800ec72:	e7b6      	b.n	800ebe2 <f_open+0x202>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ec74:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ec78:	d013      	beq.n	800eca2 <f_open+0x2c2>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ec7a:	ebb6 0608 	subs.w	r6, r6, r8
 800ec7e:	eb67 0709 	sbc.w	r7, r7, r9
 800ec82:	b985      	cbnz	r5, 800eca6 <f_open+0x2c6>
 800ec84:	46d8      	mov	r8, fp
 800ec86:	f04f 0900 	mov.w	r9, #0
 800ec8a:	45b9      	cmp	r9, r7
 800ec8c:	bf08      	it	eq
 800ec8e:	45b3      	cmpeq	fp, r6
 800ec90:	d209      	bcs.n	800eca6 <f_open+0x2c6>
					clst = get_fat(&fp->obj, clst);
 800ec92:	4620      	mov	r0, r4
 800ec94:	f7fe fc04 	bl	800d4a0 <get_fat>
 800ec98:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800ec9a:	2801      	cmp	r0, #1
 800ec9c:	d8ea      	bhi.n	800ec74 <f_open+0x294>
 800ec9e:	2502      	movs	r5, #2
 800eca0:	e7e8      	b.n	800ec74 <f_open+0x294>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800eca2:	2501      	movs	r5, #1
 800eca4:	e7e9      	b.n	800ec7a <f_open+0x29a>
				fp->clust = clst;
 800eca6:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800eca8:	b98d      	cbnz	r5, 800ecce <f_open+0x2ee>
 800ecaa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ecae:	2300      	movs	r3, #0
 800ecb0:	ea02 0806 	and.w	r8, r2, r6
 800ecb4:	ea03 0907 	and.w	r9, r3, r7
 800ecb8:	ea58 0309 	orrs.w	r3, r8, r9
 800ecbc:	d007      	beq.n	800ecce <f_open+0x2ee>
					if ((sc = clst2sect(fs, clst)) == 0) {
 800ecbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ecc2:	4640      	mov	r0, r8
 800ecc4:	f7fd fe1c 	bl	800c900 <clst2sect>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	b920      	cbnz	r0, 800ecd6 <f_open+0x2f6>
						res = FR_INT_ERR;
 800eccc:	2502      	movs	r5, #2
		FREE_NAMBUF();
 800ecce:	4650      	mov	r0, sl
 800ecd0:	f7fd fd2e 	bl	800c730 <ff_memfree>
 800ecd4:	e696      	b.n	800ea04 <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ecd6:	0a73      	lsrs	r3, r6, #9
 800ecd8:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
 800ecdc:	441a      	add	r2, r3
 800ecde:	6462      	str	r2, [r4, #68]	; 0x44
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ece0:	2301      	movs	r3, #1
 800ece2:	9900      	ldr	r1, [sp, #0]
 800ece4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ece8:	f7fd fcc2 	bl	800c670 <disk_read>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d0ee      	beq.n	800ecce <f_open+0x2ee>
 800ecf0:	2501      	movs	r5, #1
 800ecf2:	e7ec      	b.n	800ecce <f_open+0x2ee>
	if (!fp) return FR_INVALID_OBJECT;
 800ecf4:	2509      	movs	r5, #9
 800ecf6:	e688      	b.n	800ea0a <f_open+0x2a>
		INIT_NAMBUF(fs);
 800ecf8:	2511      	movs	r5, #17
 800ecfa:	e686      	b.n	800ea0a <f_open+0x2a>
 800ecfc:	f3af 8000 	nop.w

0800ed00 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ed00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed04:	b085      	sub	sp, #20
 800ed06:	4604      	mov	r4, r0
 800ed08:	460f      	mov	r7, r1
 800ed0a:	4615      	mov	r5, r2
 800ed0c:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800ed0e:	2300      	movs	r3, #0
 800ed10:	6033      	str	r3, [r6, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ed12:	9000      	str	r0, [sp, #0]
 800ed14:	a903      	add	r1, sp, #12
 800ed16:	f7fd ff83 	bl	800cc20 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ed1a:	4680      	mov	r8, r0
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	f040 80be 	bne.w	800ee9e <f_read+0x19e>
 800ed22:	f894 8031 	ldrb.w	r8, [r4, #49]	; 0x31
 800ed26:	f1b8 0f00 	cmp.w	r8, #0
 800ed2a:	f040 80b8 	bne.w	800ee9e <f_read+0x19e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ed2e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ed32:	f013 0f01 	tst.w	r3, #1
 800ed36:	f000 80cf 	beq.w	800eed8 <f_read+0x1d8>
	remain = fp->obj.objsize - fp->fptr;
 800ed3a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800ed3e:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800ed42:	1a12      	subs	r2, r2, r0
 800ed44:	eb63 0301 	sbc.w	r3, r3, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ed48:	2100      	movs	r1, #0
 800ed4a:	428b      	cmp	r3, r1
 800ed4c:	bf08      	it	eq
 800ed4e:	42aa      	cmpeq	r2, r5
 800ed50:	d260      	bcs.n	800ee14 <f_read+0x114>
 800ed52:	4615      	mov	r5, r2
 800ed54:	e05e      	b.n	800ee14 <f_read+0x114>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
 800ed56:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ed58:	b119      	cbz	r1, 800ed62 <f_read+0x62>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f7fd fde0 	bl	800c920 <clmt_clust>
 800ed60:	e074      	b.n	800ee4c <f_read+0x14c>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ed62:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ed64:	9800      	ldr	r0, [sp, #0]
 800ed66:	f7fe fb9b 	bl	800d4a0 <get_fat>
 800ed6a:	e06f      	b.n	800ee4c <f_read+0x14c>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ed6c:	f04f 0802 	mov.w	r8, #2
 800ed70:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800ed74:	e093      	b.n	800ee9e <f_read+0x19e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ed76:	f04f 0801 	mov.w	r8, #1
 800ed7a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800ed7e:	e08e      	b.n	800ee9e <f_read+0x19e>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800ed80:	f04f 0802 	mov.w	r8, #2
 800ed84:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800ed88:	e089      	b.n	800ee9e <f_read+0x19e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ed8a:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	db02      	blt.n	800ed98 <f_read+0x98>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ed92:	ea4f 294b 	mov.w	r9, fp, lsl #9
				continue;
 800ed96:	e02f      	b.n	800edf8 <f_read+0xf8>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ed98:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ed9a:	eba0 000a 	sub.w	r0, r0, sl
 800ed9e:	4558      	cmp	r0, fp
 800eda0:	d2f7      	bcs.n	800ed92 <f_read+0x92>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eda2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eda6:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800edaa:	eb07 2040 	add.w	r0, r7, r0, lsl #9
 800edae:	f7fd fd67 	bl	800c880 <mem_cpy>
 800edb2:	e7ee      	b.n	800ed92 <f_read+0x92>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800edb4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800edb6:	4552      	cmp	r2, sl
 800edb8:	d00d      	beq.n	800edd6 <f_read+0xd6>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800edba:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	db71      	blt.n	800eea6 <f_read+0x1a6>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800edc2:	2301      	movs	r3, #1
 800edc4:	4652      	mov	r2, sl
 800edc6:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800edca:	9803      	ldr	r0, [sp, #12]
 800edcc:	7840      	ldrb	r0, [r0, #1]
 800edce:	f7fd fc4f 	bl	800c670 <disk_read>
 800edd2:	2800      	cmp	r0, #0
 800edd4:	d17b      	bne.n	800eece <f_read+0x1ce>
			}
#endif
			fp->sect = sect;
 800edd6:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800edda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ede0:	f5c3 7900 	rsb	r9, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ede4:	454d      	cmp	r5, r9
 800ede6:	d200      	bcs.n	800edea <f_read+0xea>
 800ede8:	46a9      	mov	r9, r5
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800edea:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800edee:	464a      	mov	r2, r9
 800edf0:	4419      	add	r1, r3
 800edf2:	4638      	mov	r0, r7
 800edf4:	f7fd fd44 	bl	800c880 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 800edf8:	eba5 0509 	sub.w	r5, r5, r9
 800edfc:	6833      	ldr	r3, [r6, #0]
 800edfe:	444b      	add	r3, r9
 800ee00:	6033      	str	r3, [r6, #0]
 800ee02:	444f      	add	r7, r9
 800ee04:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800ee08:	eb12 0009 	adds.w	r0, r2, r9
 800ee0c:	f143 0100 	adc.w	r1, r3, #0
 800ee10:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
	for ( ;  btr;								/* Repeat until all data read */
 800ee14:	2d00      	cmp	r5, #0
 800ee16:	d042      	beq.n	800ee9e <f_read+0x19e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ee18:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800ee1c:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ee20:	2100      	movs	r1, #0
 800ee22:	ea00 0902 	and.w	r9, r0, r2
 800ee26:	ea01 0a03 	and.w	sl, r1, r3
 800ee2a:	ea59 010a 	orrs.w	r1, r9, sl
 800ee2e:	d1d4      	bne.n	800edda <f_read+0xda>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ee30:	ea4f 2952 	mov.w	r9, r2, lsr #9
 800ee34:	ea49 59c3 	orr.w	r9, r9, r3, lsl #23
 800ee38:	9903      	ldr	r1, [sp, #12]
 800ee3a:	8949      	ldrh	r1, [r1, #10]
 800ee3c:	3901      	subs	r1, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800ee3e:	ea19 0901 	ands.w	r9, r9, r1
 800ee42:	d109      	bne.n	800ee58 <f_read+0x158>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ee44:	ea52 0103 	orrs.w	r1, r2, r3
 800ee48:	d185      	bne.n	800ed56 <f_read+0x56>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ee4a:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ee4c:	2801      	cmp	r0, #1
 800ee4e:	d98d      	bls.n	800ed6c <f_read+0x6c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee50:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ee54:	d08f      	beq.n	800ed76 <f_read+0x76>
				fp->clust = clst;				/* Update current cluster */
 800ee56:	6420      	str	r0, [r4, #64]	; 0x40
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800ee58:	9b03      	ldr	r3, [sp, #12]
 800ee5a:	9301      	str	r3, [sp, #4]
 800ee5c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fd fd4e 	bl	800c900 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800ee64:	4682      	mov	sl, r0
 800ee66:	2800      	cmp	r0, #0
 800ee68:	d08a      	beq.n	800ed80 <f_read+0x80>
			sect += csect;
 800ee6a:	44ca      	add	sl, r9
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800ee6c:	ea5f 2b55 	movs.w	fp, r5, lsr #9
 800ee70:	d0a0      	beq.n	800edb4 <f_read+0xb4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ee72:	eb09 030b 	add.w	r3, r9, fp
 800ee76:	9a01      	ldr	r2, [sp, #4]
 800ee78:	8952      	ldrh	r2, [r2, #10]
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d901      	bls.n	800ee82 <f_read+0x182>
					cc = fs->csize - csect;
 800ee7e:	eba2 0b09 	sub.w	fp, r2, r9
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee82:	465b      	mov	r3, fp
 800ee84:	4652      	mov	r2, sl
 800ee86:	4639      	mov	r1, r7
 800ee88:	9801      	ldr	r0, [sp, #4]
 800ee8a:	7840      	ldrb	r0, [r0, #1]
 800ee8c:	f7fd fbf0 	bl	800c670 <disk_read>
 800ee90:	2800      	cmp	r0, #0
 800ee92:	f43f af7a 	beq.w	800ed8a <f_read+0x8a>
 800ee96:	f04f 0801 	mov.w	r8, #1
 800ee9a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800ee9e:	4640      	mov	r0, r8
 800eea0:	b005      	add	sp, #20
 800eea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eea6:	2301      	movs	r3, #1
 800eea8:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800eeac:	9801      	ldr	r0, [sp, #4]
 800eeae:	7840      	ldrb	r0, [r0, #1]
 800eeb0:	f7fd fbf6 	bl	800c6a0 <disk_write>
 800eeb4:	b930      	cbnz	r0, 800eec4 <f_read+0x1c4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eeb6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800eeba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eebe:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800eec2:	e77e      	b.n	800edc2 <f_read+0xc2>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eec4:	f04f 0801 	mov.w	r8, #1
 800eec8:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800eecc:	e7e7      	b.n	800ee9e <f_read+0x19e>
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eece:	f04f 0801 	mov.w	r8, #1
 800eed2:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800eed6:	e7e2      	b.n	800ee9e <f_read+0x19e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eed8:	f04f 0807 	mov.w	r8, #7
 800eedc:	e7df      	b.n	800ee9e <f_read+0x19e>
 800eede:	bf00      	nop

0800eee0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee4:	b085      	sub	sp, #20
 800eee6:	4604      	mov	r4, r0
 800eee8:	460e      	mov	r6, r1
 800eeea:	4615      	mov	r5, r2
 800eeec:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800eeee:	2300      	movs	r3, #0
 800eef0:	603b      	str	r3, [r7, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800eef2:	9000      	str	r0, [sp, #0]
 800eef4:	a903      	add	r1, sp, #12
 800eef6:	f7fd fe93 	bl	800cc20 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eefa:	4680      	mov	r8, r0
 800eefc:	2800      	cmp	r0, #0
 800eefe:	d14c      	bne.n	800ef9a <f_write+0xba>
 800ef00:	f894 8031 	ldrb.w	r8, [r4, #49]	; 0x31
 800ef04:	f1b8 0f00 	cmp.w	r8, #0
 800ef08:	d147      	bne.n	800ef9a <f_write+0xba>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ef0a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ef0e:	f013 0f02 	tst.w	r3, #2
 800ef12:	f000 80ff 	beq.w	800f114 <f_write+0x234>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ef16:	9b03      	ldr	r3, [sp, #12]
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	2b04      	cmp	r3, #4
 800ef1c:	f000 80bf 	beq.w	800f09e <f_write+0x1be>
 800ef20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef22:	42eb      	cmn	r3, r5
 800ef24:	f0c0 80bb 	bcc.w	800f09e <f_write+0x1be>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ef28:	43dd      	mvns	r5, r3
 800ef2a:	e0b8      	b.n	800f09e <f_write+0x1be>
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
					}
				} else {					/* On the middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
 800ef2c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ef2e:	2900      	cmp	r1, #0
 800ef30:	d037      	beq.n	800efa2 <f_write+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ef32:	4620      	mov	r0, r4
 800ef34:	f7fd fcf4 	bl	800c920 <clmt_clust>
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	f000 80e4 	beq.w	800f106 <f_write+0x226>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ef3e:	2801      	cmp	r0, #1
 800ef40:	d034      	beq.n	800efac <f_write+0xcc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef42:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ef46:	d036      	beq.n	800efb6 <f_write+0xd6>
				fp->clust = clst;			/* Update current cluster */
 800ef48:	6420      	str	r0, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ef4a:	68a3      	ldr	r3, [r4, #8]
 800ef4c:	b903      	cbnz	r3, 800ef50 <f_write+0x70>
 800ef4e:	60a0      	str	r0, [r4, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ef50:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	db33      	blt.n	800efc0 <f_write+0xe0>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800ef58:	9b03      	ldr	r3, [sp, #12]
 800ef5a:	9301      	str	r3, [sp, #4]
 800ef5c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fd fcce 	bl	800c900 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800ef64:	4681      	mov	r9, r0
 800ef66:	2800      	cmp	r0, #0
 800ef68:	d03f      	beq.n	800efea <f_write+0x10a>
			sect += csect;
 800ef6a:	44d9      	add	r9, fp
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800ef6c:	ea5f 2a55 	movs.w	sl, r5, lsr #9
 800ef70:	d057      	beq.n	800f022 <f_write+0x142>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ef72:	eb0b 030a 	add.w	r3, fp, sl
 800ef76:	9a01      	ldr	r2, [sp, #4]
 800ef78:	8952      	ldrh	r2, [r2, #10]
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d901      	bls.n	800ef82 <f_write+0xa2>
					cc = fs->csize - csect;
 800ef7e:	eba2 0a0b 	sub.w	sl, r2, fp
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef82:	4653      	mov	r3, sl
 800ef84:	464a      	mov	r2, r9
 800ef86:	4631      	mov	r1, r6
 800ef88:	9801      	ldr	r0, [sp, #4]
 800ef8a:	7840      	ldrb	r0, [r0, #1]
 800ef8c:	f7fd fb88 	bl	800c6a0 <disk_write>
 800ef90:	b380      	cbz	r0, 800eff4 <f_write+0x114>
 800ef92:	f04f 0801 	mov.w	r8, #1
 800ef96:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800ef9a:	4640      	mov	r0, r8
 800ef9c:	b005      	add	sp, #20
 800ef9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800efa2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800efa4:	9800      	ldr	r0, [sp, #0]
 800efa6:	f7fe fb93 	bl	800d6d0 <create_chain>
 800efaa:	e7c5      	b.n	800ef38 <f_write+0x58>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800efac:	f04f 0802 	mov.w	r8, #2
 800efb0:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800efb4:	e7f1      	b.n	800ef9a <f_write+0xba>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800efb6:	f04f 0801 	mov.w	r8, #1
 800efba:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800efbe:	e7ec      	b.n	800ef9a <f_write+0xba>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800efc0:	2301      	movs	r3, #1
 800efc2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800efc4:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800efc8:	9803      	ldr	r0, [sp, #12]
 800efca:	7840      	ldrb	r0, [r0, #1]
 800efcc:	f7fd fb68 	bl	800c6a0 <disk_write>
 800efd0:	b930      	cbnz	r0, 800efe0 <f_write+0x100>
				fp->flag &= (BYTE)~FA_DIRTY;
 800efd2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800efd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efda:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800efde:	e7bb      	b.n	800ef58 <f_write+0x78>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800efe0:	f04f 0801 	mov.w	r8, #1
 800efe4:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800efe8:	e7d7      	b.n	800ef9a <f_write+0xba>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800efea:	f04f 0802 	mov.w	r8, #2
 800efee:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800eff2:	e7d2      	b.n	800ef9a <f_write+0xba>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800eff4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800eff6:	eba1 0109 	sub.w	r1, r1, r9
 800effa:	4551      	cmp	r1, sl
 800effc:	d302      	bcc.n	800f004 <f_write+0x124>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800effe:	ea4f 294a 	mov.w	r9, sl, lsl #9
				continue;
 800f002:	e030      	b.n	800f066 <f_write+0x186>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f004:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f008:	eb06 2141 	add.w	r1, r6, r1, lsl #9
 800f00c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800f010:	f7fd fc36 	bl	800c880 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f014:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f01c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f020:	e7ed      	b.n	800effe <f_write+0x11e>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f022:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f024:	454b      	cmp	r3, r9
 800f026:	d007      	beq.n	800f038 <f_write+0x158>
				fp->fptr < fp->obj.objsize &&
 800f028:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800f02c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f030:	4299      	cmp	r1, r3
 800f032:	bf08      	it	eq
 800f034:	4290      	cmpeq	r0, r2
 800f036:	d357      	bcc.n	800f0e8 <f_write+0x208>
			fp->sect = sect;
 800f038:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f03c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f042:	f5c3 7900 	rsb	r9, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f046:	454d      	cmp	r5, r9
 800f048:	d200      	bcs.n	800f04c <f_write+0x16c>
 800f04a:	46a9      	mov	r9, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f04c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800f050:	464a      	mov	r2, r9
 800f052:	4631      	mov	r1, r6
 800f054:	4418      	add	r0, r3
 800f056:	f7fd fc13 	bl	800c880 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f05a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f05e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f062:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 800f066:	eba5 0509 	sub.w	r5, r5, r9
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	444b      	add	r3, r9
 800f06e:	603b      	str	r3, [r7, #0]
 800f070:	444e      	add	r6, r9
 800f072:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800f076:	eb12 0a09 	adds.w	sl, r2, r9
 800f07a:	f143 0b00 	adc.w	fp, r3, #0
 800f07e:	e9c4 ab0e 	strd	sl, fp, [r4, #56]	; 0x38
 800f082:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800f086:	46d6      	mov	lr, sl
 800f088:	46dc      	mov	ip, fp
 800f08a:	458b      	cmp	fp, r1
 800f08c:	bf08      	it	eq
 800f08e:	4582      	cmpeq	sl, r0
 800f090:	d201      	bcs.n	800f096 <f_write+0x1b6>
 800f092:	4686      	mov	lr, r0
 800f094:	468c      	mov	ip, r1
 800f096:	f8c4 e010 	str.w	lr, [r4, #16]
 800f09a:	f8c4 c014 	str.w	ip, [r4, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800f09e:	b395      	cbz	r5, 800f106 <f_write+0x226>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f0a0:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800f0a4:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	ea00 0902 	and.w	r9, r0, r2
 800f0ae:	ea01 0a03 	and.w	sl, r1, r3
 800f0b2:	ea59 010a 	orrs.w	r1, r9, sl
 800f0b6:	d1c1      	bne.n	800f03c <f_write+0x15c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f0b8:	ea4f 2b52 	mov.w	fp, r2, lsr #9
 800f0bc:	ea4b 5bc3 	orr.w	fp, fp, r3, lsl #23
 800f0c0:	9903      	ldr	r1, [sp, #12]
 800f0c2:	8949      	ldrh	r1, [r1, #10]
 800f0c4:	3901      	subs	r1, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800f0c6:	ea1b 0b01 	ands.w	fp, fp, r1
 800f0ca:	f47f af41 	bne.w	800ef50 <f_write+0x70>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f0ce:	ea52 0103 	orrs.w	r1, r2, r3
 800f0d2:	f47f af2b 	bne.w	800ef2c <f_write+0x4c>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f0d6:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	f47f af2d 	bne.w	800ef38 <f_write+0x58>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f0de:	2100      	movs	r1, #0
 800f0e0:	9800      	ldr	r0, [sp, #0]
 800f0e2:	f7fe faf5 	bl	800d6d0 <create_chain>
 800f0e6:	e727      	b.n	800ef38 <f_write+0x58>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	464a      	mov	r2, r9
 800f0ec:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800f0f0:	9801      	ldr	r0, [sp, #4]
 800f0f2:	7840      	ldrb	r0, [r0, #1]
 800f0f4:	f7fd fabc 	bl	800c670 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	d09d      	beq.n	800f038 <f_write+0x158>
					ABORT(fs, FR_DISK_ERR);
 800f0fc:	f04f 0801 	mov.w	r8, #1
 800f100:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800f104:	e749      	b.n	800ef9a <f_write+0xba>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f106:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f10e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	LEAVE_FF(fs, FR_OK);
 800f112:	e742      	b.n	800ef9a <f_write+0xba>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f114:	f04f 0807 	mov.w	r8, #7
 800f118:	e73f      	b.n	800ef9a <f_write+0xba>
 800f11a:	bf00      	nop
 800f11c:	f3af 8000 	nop.w

0800f120 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f122:	b097      	sub	sp, #92	; 0x5c
 800f124:	4604      	mov	r4, r0
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f126:	a915      	add	r1, sp, #84	; 0x54
 800f128:	f7fd fd7a 	bl	800cc20 <validate>
	if (res == FR_OK) {
 800f12c:	4605      	mov	r5, r0
 800f12e:	b9a0      	cbnz	r0, 800f15a <f_sync+0x3a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f130:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f134:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f138:	d00f      	beq.n	800f15a <f_sync+0x3a>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f13a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f13e:	d10f      	bne.n	800f160 <f_sync+0x40>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f140:	f7fd fade 	bl	800c700 <get_fattime>
 800f144:	4606      	mov	r6, r0
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f146:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f148:	7803      	ldrb	r3, [r0, #0]
 800f14a:	2b04      	cmp	r3, #4
 800f14c:	d01a      	beq.n	800f184 <f_sync+0x64>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f14e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f150:	f7fd fdb6 	bl	800ccc0 <move_window>
				if (res == FR_OK) {
 800f154:	4605      	mov	r5, r0
 800f156:	2800      	cmp	r0, #0
 800f158:	d078      	beq.n	800f24c <f_sync+0x12c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800f15a:	4628      	mov	r0, r5
 800f15c:	b017      	add	sp, #92	; 0x5c
 800f15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f160:	2301      	movs	r3, #1
 800f162:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f164:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800f168:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f16a:	7840      	ldrb	r0, [r0, #1]
 800f16c:	f7fd fa98 	bl	800c6a0 <disk_write>
 800f170:	2800      	cmp	r0, #0
 800f172:	f040 8092 	bne.w	800f29a <f_sync+0x17a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f176:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f17a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f17e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f182:	e7dd      	b.n	800f140 <f_sync+0x20>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800f184:	4620      	mov	r0, r4
 800f186:	f7fe f96b 	bl	800d460 <fill_first_frag>
				if (res == FR_OK) {
 800f18a:	4605      	mov	r5, r0
 800f18c:	b1b0      	cbz	r0, 800f1bc <f_sync+0x9c>
				if (res == FR_OK) {
 800f18e:	2d00      	cmp	r5, #0
 800f190:	d1e3      	bne.n	800f15a <f_sync+0x3a>
					INIT_NAMBUF(fs);
 800f192:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800f196:	f7fd fac3 	bl	800c720 <ff_memalloc>
 800f19a:	4607      	mov	r7, r0
 800f19c:	b1b0      	cbz	r0, 800f1cc <f_sync+0xac>
 800f19e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1a0:	60d8      	str	r0, [r3, #12]
 800f1a2:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800f1a6:	611a      	str	r2, [r3, #16]
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 800f1a8:	4621      	mov	r1, r4
 800f1aa:	4668      	mov	r0, sp
 800f1ac:	f7fe fd68 	bl	800dc80 <load_obj_xdir>
					if (res == FR_OK) {
 800f1b0:	4605      	mov	r5, r0
 800f1b2:	b168      	cbz	r0, 800f1d0 <f_sync+0xb0>
					FREE_NAMBUF();
 800f1b4:	4638      	mov	r0, r7
 800f1b6:	f7fd fabb 	bl	800c730 <ff_memfree>
 800f1ba:	e7ce      	b.n	800f15a <f_sync+0x3a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f7fe f934 	bl	800d430 <fill_last_frag>
 800f1c8:	4605      	mov	r5, r0
 800f1ca:	e7e0      	b.n	800f18e <f_sync+0x6e>
					INIT_NAMBUF(fs);
 800f1cc:	2511      	movs	r5, #17
 800f1ce:	e7c4      	b.n	800f15a <f_sync+0x3a>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 800f1d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1d2:	6919      	ldr	r1, [r3, #16]
 800f1d4:	790a      	ldrb	r2, [r1, #4]
 800f1d6:	f042 0220 	orr.w	r2, r2, #32
 800f1da:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 800f1dc:	79e2      	ldrb	r2, [r4, #7]
 800f1de:	6919      	ldr	r1, [r3, #16]
 800f1e0:	f042 0201 	orr.w	r2, r2, #1
 800f1e4:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800f1e8:	6918      	ldr	r0, [r3, #16]
 800f1ea:	68a1      	ldr	r1, [r4, #8]
 800f1ec:	3034      	adds	r0, #52	; 0x34
 800f1ee:	f7fd fb1f 	bl	800c830 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800f1f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1f4:	6918      	ldr	r0, [r3, #16]
 800f1f6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800f1fa:	3038      	adds	r0, #56	; 0x38
 800f1fc:	f7fd fb28 	bl	800c850 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800f200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f202:	6918      	ldr	r0, [r3, #16]
 800f204:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800f208:	3028      	adds	r0, #40	; 0x28
 800f20a:	f7fd fb21 	bl	800c850 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800f20e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f210:	6918      	ldr	r0, [r3, #16]
 800f212:	4631      	mov	r1, r6
 800f214:	300c      	adds	r0, #12
 800f216:	f7fd fb0b 	bl	800c830 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800f21a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f21c:	691a      	ldr	r2, [r3, #16]
 800f21e:	2100      	movs	r1, #0
 800f220:	7551      	strb	r1, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800f222:	6918      	ldr	r0, [r3, #16]
 800f224:	3010      	adds	r0, #16
 800f226:	f7fd fb03 	bl	800c830 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800f22a:	4668      	mov	r0, sp
 800f22c:	f7fe fdf8 	bl	800de20 <store_xdir>
						if (res == FR_OK) {
 800f230:	4605      	mov	r5, r0
 800f232:	2800      	cmp	r0, #0
 800f234:	d1be      	bne.n	800f1b4 <f_sync+0x94>
							res = sync_fs(fs);
 800f236:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f238:	f7ff fb62 	bl	800e900 <sync_fs>
 800f23c:	4605      	mov	r5, r0
							fp->flag &= (BYTE)~FA_MODIFIED;
 800f23e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f246:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f24a:	e7b3      	b.n	800f1b4 <f_sync+0x94>
					dir = fp->dir_ptr;
 800f24c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800f24e:	7aeb      	ldrb	r3, [r5, #11]
 800f250:	f043 0320 	orr.w	r3, r3, #32
 800f254:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800f256:	68a2      	ldr	r2, [r4, #8]
 800f258:	4629      	mov	r1, r5
 800f25a:	6820      	ldr	r0, [r4, #0]
 800f25c:	f7fd fb90 	bl	800c980 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f260:	6921      	ldr	r1, [r4, #16]
 800f262:	f105 001c 	add.w	r0, r5, #28
 800f266:	f7fd fae3 	bl	800c830 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f26a:	4631      	mov	r1, r6
 800f26c:	f105 0016 	add.w	r0, r5, #22
 800f270:	f7fd fade 	bl	800c830 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f274:	2100      	movs	r1, #0
 800f276:	f105 0012 	add.w	r0, r5, #18
 800f27a:	f7fd fad1 	bl	800c820 <st_word>
					fs->wflag = 1;
 800f27e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f280:	2201      	movs	r2, #1
 800f282:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f284:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f286:	f7ff fb3b 	bl	800e900 <sync_fs>
 800f28a:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f28c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f294:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f298:	e75f      	b.n	800f15a <f_sync+0x3a>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f29a:	2501      	movs	r5, #1
 800f29c:	e75d      	b.n	800f15a <f_sync+0x3a>
 800f29e:	bf00      	nop

0800f2a0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f2a0:	b510      	push	{r4, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f2a6:	f7ff ff3b 	bl	800f120 <f_sync>
	if (res == FR_OK)
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	b110      	cbz	r0, 800f2b4 <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	b002      	add	sp, #8
 800f2b2:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f2b4:	a901      	add	r1, sp, #4
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f7fd fcb2 	bl	800cc20 <validate>
		if (res == FR_OK) {
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	d1f5      	bne.n	800f2ae <f_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	6022      	str	r2, [r4, #0]
 800f2c6:	e7f2      	b.n	800f2ae <f_close+0xe>
 800f2c8:	f3af 8000 	nop.w
 800f2cc:	f3af 8000 	nop.w

0800f2d0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d4:	b087      	sub	sp, #28
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	4616      	mov	r6, r2
 800f2da:	461f      	mov	r7, r3
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f2dc:	9001      	str	r0, [sp, #4]
 800f2de:	a905      	add	r1, sp, #20
 800f2e0:	f7fd fc9e 	bl	800cc20 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f2e4:	4605      	mov	r5, r0
 800f2e6:	b908      	cbnz	r0, 800f2ec <f_lseek+0x1c>
 800f2e8:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800f2ec:	b91d      	cbnz	r5, 800f2f6 <f_lseek+0x26>
 800f2ee:	9b05      	ldr	r3, [sp, #20]
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	2b04      	cmp	r3, #4
 800f2f4:	d01e      	beq.n	800f334 <f_lseek+0x64>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f2f6:	b9cd      	cbnz	r5, 800f32c <f_lseek+0x5c>

#if FF_USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f2f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	f000 80b1 	beq.w	800f462 <f_lseek+0x192>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f300:	f1b7 3fff 	cmp.w	r7, #4294967295
 800f304:	bf08      	it	eq
 800f306:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 800f30a:	d01b      	beq.n	800f344 <f_lseek+0x74>
				*tbl = 0;		/* Terminate table */
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f30c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800f310:	4690      	mov	r8, r2
 800f312:	4699      	mov	r9, r3
 800f314:	42bb      	cmp	r3, r7
 800f316:	bf08      	it	eq
 800f318:	42b2      	cmpeq	r2, r6
 800f31a:	d301      	bcc.n	800f320 <f_lseek+0x50>
 800f31c:	46b0      	mov	r8, r6
 800f31e:	46b9      	mov	r9, r7
			fp->fptr = ofs;				/* Set file pointer */
 800f320:	4642      	mov	r2, r8
 800f322:	464b      	mov	r3, r9
 800f324:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			if (ofs > 0) {
 800f328:	4313      	orrs	r3, r2
 800f32a:	d14a      	bne.n	800f3c2 <f_lseek+0xf2>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800f32c:	4628      	mov	r0, r5
 800f32e:	b007      	add	sp, #28
 800f330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f334:	f04f 32ff 	mov.w	r2, #4294967295
 800f338:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f33a:	4620      	mov	r0, r4
 800f33c:	f7fe f878 	bl	800d430 <fill_last_frag>
 800f340:	4605      	mov	r5, r0
 800f342:	e7d8      	b.n	800f2f6 <f_lseek+0x26>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f344:	f103 0b04 	add.w	fp, r3, #4
 800f348:	f8d3 a000 	ldr.w	sl, [r3]
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f34c:	f8d4 9008 	ldr.w	r9, [r4, #8]
			if (cl != 0) {
 800f350:	f1b9 0f00 	cmp.w	r9, #0
 800f354:	d029      	beq.n	800f3aa <f_lseek+0xda>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f356:	f04f 0802 	mov.w	r8, #2
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f35a:	f108 0802 	add.w	r8, r8, #2
 800f35e:	464e      	mov	r6, r9
 800f360:	2700      	movs	r7, #0
						pcl = cl; ncl++;
 800f362:	3701      	adds	r7, #1
						cl = get_fat(&fp->obj, cl);
 800f364:	4631      	mov	r1, r6
 800f366:	9801      	ldr	r0, [sp, #4]
 800f368:	f7fe f89a 	bl	800d4a0 <get_fat>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f36c:	2801      	cmp	r0, #1
 800f36e:	d914      	bls.n	800f39a <f_lseek+0xca>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f370:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f374:	d015      	beq.n	800f3a2 <f_lseek+0xd2>
					} while (cl == pcl + 1);
 800f376:	1c73      	adds	r3, r6, #1
						cl = get_fat(&fp->obj, cl);
 800f378:	4606      	mov	r6, r0
					} while (cl == pcl + 1);
 800f37a:	4283      	cmp	r3, r0
 800f37c:	d0f1      	beq.n	800f362 <f_lseek+0x92>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f37e:	45c2      	cmp	sl, r8
 800f380:	d305      	bcc.n	800f38e <f_lseek+0xbe>
						*tbl++ = ncl; *tbl++ = tcl;
 800f382:	465b      	mov	r3, fp
 800f384:	f843 7b08 	str.w	r7, [r3], #8
 800f388:	f8cb 9004 	str.w	r9, [fp, #4]
 800f38c:	469b      	mov	fp, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f38e:	9b05      	ldr	r3, [sp, #20]
 800f390:	69db      	ldr	r3, [r3, #28]
 800f392:	4283      	cmp	r3, r0
 800f394:	d90b      	bls.n	800f3ae <f_lseek+0xde>
						cl = get_fat(&fp->obj, cl);
 800f396:	4681      	mov	r9, r0
 800f398:	e7df      	b.n	800f35a <f_lseek+0x8a>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f39a:	2502      	movs	r5, #2
 800f39c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f3a0:	e7c4      	b.n	800f32c <f_lseek+0x5c>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f3a2:	2501      	movs	r5, #1
 800f3a4:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f3a8:	e7c0      	b.n	800f32c <f_lseek+0x5c>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f3aa:	f04f 0802 	mov.w	r8, #2
			*fp->cltbl = ulen;	/* Number of items used */
 800f3ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f3b0:	f8c3 8000 	str.w	r8, [r3]
			if (ulen <= tlen) {
 800f3b4:	45d0      	cmp	r8, sl
 800f3b6:	f200 817a 	bhi.w	800f6ae <f_lseek+0x3de>
				*tbl = 0;		/* Terminate table */
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	f8cb 3000 	str.w	r3, [fp]
 800f3c0:	e7b4      	b.n	800f32c <f_lseek+0x5c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f3c2:	f118 36ff 	adds.w	r6, r8, #4294967295
 800f3c6:	f149 37ff 	adc.w	r7, r9, #4294967295
 800f3ca:	4632      	mov	r2, r6
 800f3cc:	463b      	mov	r3, r7
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	f7fd faa6 	bl	800c920 <clmt_clust>
 800f3d4:	4601      	mov	r1, r0
 800f3d6:	6420      	str	r0, [r4, #64]	; 0x40
				dsc = clst2sect(fs, fp->clust);
 800f3d8:	f8dd a014 	ldr.w	sl, [sp, #20]
 800f3dc:	4650      	mov	r0, sl
 800f3de:	f7fd fa8f 	bl	800c900 <clst2sect>
				if (dsc == 0) ABORT(fs, FR_INT_ERR);
 800f3e2:	b328      	cbz	r0, 800f430 <f_lseek+0x160>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f3e4:	0a73      	lsrs	r3, r6, #9
 800f3e6:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
 800f3ea:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800f3ee:	3a01      	subs	r2, #1
 800f3f0:	4013      	ands	r3, r2
 800f3f2:	181e      	adds	r6, r3, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f3f4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	ea08 0802 	and.w	r8, r8, r2
 800f3fe:	ea09 0903 	and.w	r9, r9, r3
 800f402:	ea58 0309 	orrs.w	r3, r8, r9
 800f406:	d091      	beq.n	800f32c <f_lseek+0x5c>
 800f408:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f40a:	42b2      	cmp	r2, r6
 800f40c:	d08e      	beq.n	800f32c <f_lseek+0x5c>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f40e:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800f412:	2b00      	cmp	r3, #0
 800f414:	db10      	blt.n	800f438 <f_lseek+0x168>
					if (disk_read(fs->pdrv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f416:	2301      	movs	r3, #1
 800f418:	4632      	mov	r2, r6
 800f41a:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800f41e:	9805      	ldr	r0, [sp, #20]
 800f420:	7840      	ldrb	r0, [r0, #1]
 800f422:	f7fd f925 	bl	800c670 <disk_read>
 800f426:	b1d0      	cbz	r0, 800f45e <f_lseek+0x18e>
 800f428:	2501      	movs	r5, #1
 800f42a:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f42e:	e77d      	b.n	800f32c <f_lseek+0x5c>
				if (dsc == 0) ABORT(fs, FR_INT_ERR);
 800f430:	2502      	movs	r5, #2
 800f432:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f436:	e779      	b.n	800f32c <f_lseek+0x5c>
						if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f438:	2301      	movs	r3, #1
 800f43a:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800f43e:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800f442:	f7fd f92d 	bl	800c6a0 <disk_write>
 800f446:	b930      	cbnz	r0, 800f456 <f_lseek+0x186>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f448:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f44c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f450:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f454:	e7df      	b.n	800f416 <f_lseek+0x146>
						if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f456:	2501      	movs	r5, #1
 800f458:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f45c:	e766      	b.n	800f32c <f_lseek+0x5c>
					fp->sect = dsc;
 800f45e:	6466      	str	r6, [r4, #68]	; 0x44
 800f460:	e764      	b.n	800f32c <f_lseek+0x5c>
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
 800f462:	9b05      	ldr	r3, [sp, #20]
 800f464:	781a      	ldrb	r2, [r3, #0]
 800f466:	2a04      	cmp	r2, #4
 800f468:	d006      	beq.n	800f478 <f_lseek+0x1a8>
 800f46a:	2f01      	cmp	r7, #1
 800f46c:	bf08      	it	eq
 800f46e:	2e00      	cmpeq	r6, #0
 800f470:	d302      	bcc.n	800f478 <f_lseek+0x1a8>
 800f472:	f04f 36ff 	mov.w	r6, #4294967295
 800f476:	2700      	movs	r7, #0
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f478:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800f47c:	42b9      	cmp	r1, r7
 800f47e:	bf08      	it	eq
 800f480:	42b0      	cmpeq	r0, r6
 800f482:	d206      	bcs.n	800f492 <f_lseek+0x1c2>
 800f484:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800f488:	f012 0f02 	tst.w	r2, #2
 800f48c:	d101      	bne.n	800f492 <f_lseek+0x1c2>
			ofs = fp->obj.objsize;
 800f48e:	4606      	mov	r6, r0
 800f490:	460f      	mov	r7, r1
		ifptr = fp->fptr;
 800f492:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	; 0x38
		fp->fptr = nsect = 0;
 800f496:	2000      	movs	r0, #0
 800f498:	2100      	movs	r1, #0
 800f49a:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		if (ofs > 0) {
 800f49e:	ea56 0207 	orrs.w	r2, r6, r7
 800f4a2:	f000 80b9 	beq.w	800f618 <f_lseek+0x348>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f4a6:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
 800f4aa:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
			if (ifptr > 0 &&
 800f4ae:	ea58 0309 	orrs.w	r3, r8, r9
 800f4b2:	d02a      	beq.n	800f50a <f_lseek+0x23a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f4b4:	f04f 0b00 	mov.w	fp, #0
 800f4b8:	4652      	mov	r2, sl
 800f4ba:	465b      	mov	r3, fp
 800f4bc:	f116 30ff 	adds.w	r0, r6, #4294967295
 800f4c0:	f147 31ff 	adc.w	r1, r7, #4294967295
 800f4c4:	f008 fbcc 	bl	8017c60 <__aeabi_uldivmod>
 800f4c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4cc:	f118 32ff 	adds.w	r2, r8, #4294967295
 800f4d0:	f149 33ff 	adc.w	r3, r9, #4294967295
 800f4d4:	4690      	mov	r8, r2
 800f4d6:	4699      	mov	r9, r3
 800f4d8:	4652      	mov	r2, sl
 800f4da:	465b      	mov	r3, fp
 800f4dc:	4640      	mov	r0, r8
 800f4de:	4649      	mov	r1, r9
 800f4e0:	f008 fbbe 	bl	8017c60 <__aeabi_uldivmod>
			if (ifptr > 0 &&
 800f4e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4e8:	428b      	cmp	r3, r1
 800f4ea:	bf08      	it	eq
 800f4ec:	4282      	cmpeq	r2, r0
 800f4ee:	d30c      	bcc.n	800f50a <f_lseek+0x23a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f4f0:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f4f4:	ea28 0803 	bic.w	r8, r8, r3
 800f4f8:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
				ofs -= fp->fptr;
 800f4fc:	ebb6 0608 	subs.w	r6, r6, r8
 800f500:	eb67 0709 	sbc.w	r7, r7, r9
				clst = fp->clust;
 800f504:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
 800f508:	e006      	b.n	800f518 <f_lseek+0x248>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f50a:	f8d4 8008 	ldr.w	r8, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f50e:	f1b8 0f00 	cmp.w	r8, #0
 800f512:	d005      	beq.n	800f520 <f_lseek+0x250>
				fp->clust = clst;
 800f514:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
			if (clst != 0) {
 800f518:	f1b8 0f00 	cmp.w	r8, #0
 800f51c:	d127      	bne.n	800f56e <f_lseek+0x29e>
 800f51e:	e07d      	b.n	800f61c <f_lseek+0x34c>
					clst = create_chain(&fp->obj, 0);
 800f520:	2100      	movs	r1, #0
 800f522:	4620      	mov	r0, r4
 800f524:	f7fe f8d4 	bl	800d6d0 <create_chain>
 800f528:	4680      	mov	r8, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f52a:	2801      	cmp	r0, #1
 800f52c:	d004      	beq.n	800f538 <f_lseek+0x268>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f52e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f532:	d005      	beq.n	800f540 <f_lseek+0x270>
					fp->obj.sclust = clst;
 800f534:	60a0      	str	r0, [r4, #8]
 800f536:	e7ed      	b.n	800f514 <f_lseek+0x244>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f538:	2502      	movs	r5, #2
 800f53a:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f53e:	e6f5      	b.n	800f32c <f_lseek+0x5c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f540:	2501      	movs	r5, #1
 800f542:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f546:	e6f1      	b.n	800f32c <f_lseek+0x5c>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f548:	4641      	mov	r1, r8
 800f54a:	9801      	ldr	r0, [sp, #4]
 800f54c:	f7fe f8c0 	bl	800d6d0 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f550:	4680      	mov	r8, r0
 800f552:	2800      	cmp	r0, #0
 800f554:	d03e      	beq.n	800f5d4 <f_lseek+0x304>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f556:	f1b8 3fff 	cmp.w	r8, #4294967295
 800f55a:	d033      	beq.n	800f5c4 <f_lseek+0x2f4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f55c:	f1b8 0f01 	cmp.w	r8, #1
 800f560:	d934      	bls.n	800f5cc <f_lseek+0x2fc>
 800f562:	9b05      	ldr	r3, [sp, #20]
 800f564:	69db      	ldr	r3, [r3, #28]
 800f566:	4543      	cmp	r3, r8
 800f568:	d930      	bls.n	800f5cc <f_lseek+0x2fc>
					fp->clust = clst;
 800f56a:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800f56e:	46d3      	mov	fp, sl
 800f570:	f04f 0c00 	mov.w	ip, #0
 800f574:	45bc      	cmp	ip, r7
 800f576:	bf08      	it	eq
 800f578:	45b2      	cmpeq	sl, r6
 800f57a:	d22d      	bcs.n	800f5d8 <f_lseek+0x308>
					ofs -= bcs; fp->fptr += bcs;
 800f57c:	ebb6 060b 	subs.w	r6, r6, fp
 800f580:	eb67 070c 	sbc.w	r7, r7, ip
 800f584:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800f588:	eb1b 0200 	adds.w	r2, fp, r0
 800f58c:	eb4c 0301 	adc.w	r3, ip, r1
 800f590:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f594:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800f598:	f011 0f02 	tst.w	r1, #2
 800f59c:	d00c      	beq.n	800f5b8 <f_lseek+0x2e8>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800f59e:	e9d4 bc04 	ldrd	fp, ip, [r4, #16]
 800f5a2:	459c      	cmp	ip, r3
 800f5a4:	bf08      	it	eq
 800f5a6:	4593      	cmpeq	fp, r2
 800f5a8:	d2ce      	bcs.n	800f548 <f_lseek+0x278>
							fp->obj.objsize = fp->fptr;
 800f5aa:	e9c4 2304 	strd	r2, r3, [r4, #16]
							fp->flag |= FA_MODIFIED;
 800f5ae:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800f5b2:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800f5b6:	e7c7      	b.n	800f548 <f_lseek+0x278>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f5b8:	4641      	mov	r1, r8
 800f5ba:	9801      	ldr	r0, [sp, #4]
 800f5bc:	f7fd ff70 	bl	800d4a0 <get_fat>
 800f5c0:	4680      	mov	r8, r0
 800f5c2:	e7c8      	b.n	800f556 <f_lseek+0x286>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f5c4:	2501      	movs	r5, #1
 800f5c6:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f5ca:	e6af      	b.n	800f32c <f_lseek+0x5c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f5cc:	2502      	movs	r5, #2
 800f5ce:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f5d2:	e6ab      	b.n	800f32c <f_lseek+0x5c>
							ofs = 0; break;
 800f5d4:	2600      	movs	r6, #0
 800f5d6:	2700      	movs	r7, #0
				fp->fptr += ofs;
 800f5d8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800f5dc:	1990      	adds	r0, r2, r6
 800f5de:	eb43 0107 	adc.w	r1, r3, r7
 800f5e2:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
				if (ofs % SS(fs)) {
 800f5e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	ea02 0006 	and.w	r0, r2, r6
 800f5f0:	ea03 0107 	and.w	r1, r3, r7
 800f5f4:	ea50 0301 	orrs.w	r3, r0, r1
 800f5f8:	d03f      	beq.n	800f67a <f_lseek+0x3aa>
					nsect = clst2sect(fs, clst);	/* Current sector */
 800f5fa:	4641      	mov	r1, r8
 800f5fc:	9805      	ldr	r0, [sp, #20]
 800f5fe:	f7fd f97f 	bl	800c900 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 800f602:	b128      	cbz	r0, 800f610 <f_lseek+0x340>
					nsect += (DWORD)(ofs / SS(fs));
 800f604:	ea4f 2856 	mov.w	r8, r6, lsr #9
 800f608:	ea48 58c7 	orr.w	r8, r8, r7, lsl #23
 800f60c:	4480      	add	r8, r0
 800f60e:	e005      	b.n	800f61c <f_lseek+0x34c>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 800f610:	2502      	movs	r5, #2
 800f612:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f616:	e689      	b.n	800f32c <f_lseek+0x5c>
		fp->fptr = nsect = 0;
 800f618:	f04f 0800 	mov.w	r8, #0
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 800f61c:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
 800f620:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800f624:	42bb      	cmp	r3, r7
 800f626:	bf08      	it	eq
 800f628:	42b2      	cmpeq	r2, r6
 800f62a:	d207      	bcs.n	800f63c <f_lseek+0x36c>
			fp->obj.objsize = fp->fptr;
 800f62c:	e9c4 6704 	strd	r6, r7, [r4, #16]
			fp->flag |= FA_MODIFIED;
 800f630:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f638:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f63c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f640:	2300      	movs	r3, #0
 800f642:	ea06 0002 	and.w	r0, r6, r2
 800f646:	ea07 0103 	and.w	r1, r7, r3
 800f64a:	ea50 0301 	orrs.w	r3, r0, r1
 800f64e:	f43f ae6d 	beq.w	800f32c <f_lseek+0x5c>
 800f652:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f654:	4542      	cmp	r2, r8
 800f656:	f43f ae69 	beq.w	800f32c <f_lseek+0x5c>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f65a:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800f65e:	2b00      	cmp	r3, #0
 800f660:	db0e      	blt.n	800f680 <f_lseek+0x3b0>
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f662:	2301      	movs	r3, #1
 800f664:	4642      	mov	r2, r8
 800f666:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800f66a:	9805      	ldr	r0, [sp, #20]
 800f66c:	7840      	ldrb	r0, [r0, #1]
 800f66e:	f7fc ffff 	bl	800c670 <disk_read>
 800f672:	b9c0      	cbnz	r0, 800f6a6 <f_lseek+0x3d6>
			fp->sect = nsect;
 800f674:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
 800f678:	e658      	b.n	800f32c <f_lseek+0x5c>
		fp->fptr = nsect = 0;
 800f67a:	f04f 0800 	mov.w	r8, #0
 800f67e:	e7cd      	b.n	800f61c <f_lseek+0x34c>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f680:	2301      	movs	r3, #1
 800f682:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800f686:	9805      	ldr	r0, [sp, #20]
 800f688:	7840      	ldrb	r0, [r0, #1]
 800f68a:	f7fd f809 	bl	800c6a0 <disk_write>
 800f68e:	b930      	cbnz	r0, 800f69e <f_lseek+0x3ce>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f690:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f698:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f69c:	e7e1      	b.n	800f662 <f_lseek+0x392>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f69e:	2501      	movs	r5, #1
 800f6a0:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f6a4:	e642      	b.n	800f32c <f_lseek+0x5c>
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f6a6:	2501      	movs	r5, #1
 800f6a8:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f6ac:	e63e      	b.n	800f32c <f_lseek+0x5c>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f6ae:	2511      	movs	r5, #17
 800f6b0:	e63c      	b.n	800f32c <f_lseek+0x5c>
 800f6b2:	bf00      	nop
 800f6b4:	f3af 8000 	nop.w
 800f6b8:	f3af 8000 	nop.w
 800f6bc:	f3af 8000 	nop.w

0800f6c0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f6c0:	b570      	push	{r4, r5, r6, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	9101      	str	r1, [sp, #4]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	d05f      	beq.n	800f78a <f_opendir+0xca>
 800f6ca:	4604      	mov	r4, r0

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	a903      	add	r1, sp, #12
 800f6d0:	a801      	add	r0, sp, #4
 800f6d2:	f7fd fb5d 	bl	800cd90 <find_volume>
	if (res == FR_OK) {
 800f6d6:	4605      	mov	r5, r0
 800f6d8:	b128      	cbz	r0, 800f6e6 <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 800f6da:	b10d      	cbz	r5, 800f6e0 <f_opendir+0x20>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	b004      	add	sp, #16
 800f6e4:	bd70      	pop	{r4, r5, r6, pc}
		dp->obj.fs = fs;
 800f6e6:	9b03      	ldr	r3, [sp, #12]
 800f6e8:	6023      	str	r3, [r4, #0]
		INIT_NAMBUF(fs);
 800f6ea:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800f6ee:	f7fd f817 	bl	800c720 <ff_memalloc>
 800f6f2:	4606      	mov	r6, r0
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	d04a      	beq.n	800f78e <f_opendir+0xce>
 800f6f8:	9b03      	ldr	r3, [sp, #12]
 800f6fa:	60d8      	str	r0, [r3, #12]
 800f6fc:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800f700:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f702:	9901      	ldr	r1, [sp, #4]
 800f704:	4620      	mov	r0, r4
 800f706:	f7fe ff8b 	bl	800e620 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800f70a:	4605      	mov	r5, r0
 800f70c:	b9c0      	cbnz	r0, 800f740 <f_opendir+0x80>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f70e:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
 800f712:	2b00      	cmp	r3, #0
 800f714:	db0c      	blt.n	800f730 <f_opendir+0x70>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 800f716:	79a3      	ldrb	r3, [r4, #6]
 800f718:	f013 0f10 	tst.w	r3, #16
 800f71c:	d033      	beq.n	800f786 <f_opendir+0xc6>
					if (fs->fs_type == FS_EXFAT) {
 800f71e:	9d03      	ldr	r5, [sp, #12]
 800f720:	782b      	ldrb	r3, [r5, #0]
 800f722:	2b04      	cmp	r3, #4
 800f724:	d013      	beq.n	800f74e <f_opendir+0x8e>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f726:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f728:	4628      	mov	r0, r5
 800f72a:	f7fd f911 	bl	800c950 <ld_clust>
 800f72e:	60a0      	str	r0, [r4, #8]
				dp->obj.id = fs->id;
 800f730:	9b03      	ldr	r3, [sp, #12]
 800f732:	88db      	ldrh	r3, [r3, #6]
 800f734:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f736:	2100      	movs	r1, #0
 800f738:	4620      	mov	r0, r4
 800f73a:	f7fd ff69 	bl	800d610 <dir_sdi>
 800f73e:	4605      	mov	r5, r0
		FREE_NAMBUF();
 800f740:	4630      	mov	r0, r6
 800f742:	f7fc fff5 	bl	800c730 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f746:	2d04      	cmp	r5, #4
 800f748:	d1c7      	bne.n	800f6da <f_opendir+0x1a>
 800f74a:	2505      	movs	r5, #5
 800f74c:	e7c6      	b.n	800f6dc <f_opendir+0x1c>
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
 800f74e:	68a3      	ldr	r3, [r4, #8]
 800f750:	6223      	str	r3, [r4, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800f752:	6923      	ldr	r3, [r4, #16]
 800f754:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f758:	79e2      	ldrb	r2, [r4, #7]
 800f75a:	4313      	orrs	r3, r2
 800f75c:	6263      	str	r3, [r4, #36]	; 0x24
						dp->obj.c_ofs = dp->blk_ofs;
 800f75e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f760:	62a3      	str	r3, [r4, #40]	; 0x28
						dp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800f762:	6928      	ldr	r0, [r5, #16]
 800f764:	3034      	adds	r0, #52	; 0x34
 800f766:	f7fc fff3 	bl	800c750 <ld_dword>
 800f76a:	60a0      	str	r0, [r4, #8]
						dp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f76c:	6928      	ldr	r0, [r5, #16]
 800f76e:	3038      	adds	r0, #56	; 0x38
 800f770:	f7fc fffe 	bl	800c770 <ld_qword>
 800f774:	e9c4 0104 	strd	r0, r1, [r4, #16]
						dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f778:	692b      	ldr	r3, [r5, #16]
 800f77a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f77e:	f003 0302 	and.w	r3, r3, #2
 800f782:	71e3      	strb	r3, [r4, #7]
 800f784:	e7d4      	b.n	800f730 <f_opendir+0x70>
					res = FR_NO_PATH;
 800f786:	2505      	movs	r5, #5
 800f788:	e7da      	b.n	800f740 <f_opendir+0x80>
	if (!dp) return FR_INVALID_OBJECT;
 800f78a:	2509      	movs	r5, #9
 800f78c:	e7a8      	b.n	800f6e0 <f_opendir+0x20>
		INIT_NAMBUF(fs);
 800f78e:	2511      	movs	r5, #17
 800f790:	e7a6      	b.n	800f6e0 <f_opendir+0x20>
 800f792:	bf00      	nop
 800f794:	f3af 8000 	nop.w
 800f798:	f3af 8000 	nop.w
 800f79c:	f3af 8000 	nop.w

0800f7a0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f7a0:	b510      	push	{r4, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 800f7a6:	a901      	add	r1, sp, #4
 800f7a8:	f7fd fa3a 	bl	800cc20 <validate>
	if (res == FR_OK) {
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	b908      	cbnz	r0, 800f7b4 <f_closedir+0x14>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	6022      	str	r2, [r4, #0]
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	b002      	add	sp, #8
 800f7b8:	bd10      	pop	{r4, pc}
 800f7ba:	bf00      	nop
 800f7bc:	f3af 8000 	nop.w

0800f7c0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7c2:	b083      	sub	sp, #12
 800f7c4:	4605      	mov	r5, r0
 800f7c6:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f7c8:	a901      	add	r1, sp, #4
 800f7ca:	f7fd fa29 	bl	800cc20 <validate>
	if (res == FR_OK) {
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	bb40      	cbnz	r0, 800f824 <f_readdir+0x64>
		if (!fno) {
 800f7d2:	b1ee      	cbz	r6, 800f810 <f_readdir+0x50>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
 800f7d4:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800f7d8:	f7fc ffa2 	bl	800c720 <ff_memalloc>
 800f7dc:	4607      	mov	r7, r0
 800f7de:	b320      	cbz	r0, 800f82a <f_readdir+0x6a>
 800f7e0:	9b01      	ldr	r3, [sp, #4]
 800f7e2:	60d8      	str	r0, [r3, #12]
 800f7e4:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800f7e8:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800f7ea:	2100      	movs	r1, #0
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	f7fe fa67 	bl	800dcc0 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f7f2:	2804      	cmp	r0, #4
 800f7f4:	d000      	beq.n	800f7f8 <f_readdir+0x38>
			if (res == FR_OK) {				/* A valid entry is found */
 800f7f6:	b988      	cbnz	r0, 800f81c <f_readdir+0x5c>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f7f8:	4631      	mov	r1, r6
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	f7fe fd10 	bl	800e220 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f800:	2100      	movs	r1, #0
 800f802:	4628      	mov	r0, r5
 800f804:	f7fe f94c 	bl	800daa0 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f808:	2804      	cmp	r0, #4
 800f80a:	d008      	beq.n	800f81e <f_readdir+0x5e>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f80c:	4604      	mov	r4, r0
 800f80e:	e006      	b.n	800f81e <f_readdir+0x5e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f810:	2100      	movs	r1, #0
 800f812:	4628      	mov	r0, r5
 800f814:	f7fd fefc 	bl	800d610 <dir_sdi>
 800f818:	4604      	mov	r4, r0
 800f81a:	e003      	b.n	800f824 <f_readdir+0x64>
			res = dir_read(dp, 0);			/* Read an item */
 800f81c:	4604      	mov	r4, r0
			}
			FREE_NAMBUF();
 800f81e:	4638      	mov	r0, r7
 800f820:	f7fc ff86 	bl	800c730 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
}
 800f824:	4620      	mov	r0, r4
 800f826:	b003      	add	sp, #12
 800f828:	bdf0      	pop	{r4, r5, r6, r7, pc}
			INIT_NAMBUF(fs);
 800f82a:	2411      	movs	r4, #17
 800f82c:	e7fa      	b.n	800f824 <f_readdir+0x64>
 800f82e:	bf00      	nop

0800f830 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f830:	b570      	push	{r4, r5, r6, lr}
 800f832:	b096      	sub	sp, #88	; 0x58
 800f834:	9001      	str	r0, [sp, #4]
 800f836:	460e      	mov	r6, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800f838:	2200      	movs	r2, #0
 800f83a:	a902      	add	r1, sp, #8
 800f83c:	a801      	add	r0, sp, #4
 800f83e:	f7fd faa7 	bl	800cd90 <find_volume>
	if (res == FR_OK) {
 800f842:	4604      	mov	r4, r0
 800f844:	b110      	cbz	r0, 800f84c <f_stat+0x1c>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 800f846:	4620      	mov	r0, r4
 800f848:	b016      	add	sp, #88	; 0x58
 800f84a:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(dj.obj.fs);
 800f84c:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800f850:	f7fc ff66 	bl	800c720 <ff_memalloc>
 800f854:	4605      	mov	r5, r0
 800f856:	b1c8      	cbz	r0, 800f88c <f_stat+0x5c>
 800f858:	9b02      	ldr	r3, [sp, #8]
 800f85a:	60d8      	str	r0, [r3, #12]
 800f85c:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800f860:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f862:	9901      	ldr	r1, [sp, #4]
 800f864:	a802      	add	r0, sp, #8
 800f866:	f7fe fedb 	bl	800e620 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 800f86a:	4604      	mov	r4, r0
 800f86c:	b950      	cbnz	r0, 800f884 <f_stat+0x54>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800f86e:	f99d 3053 	ldrsb.w	r3, [sp, #83]	; 0x53
 800f872:	2b00      	cmp	r3, #0
 800f874:	db05      	blt.n	800f882 <f_stat+0x52>
				if (fno) get_fileinfo(&dj, fno);
 800f876:	b12e      	cbz	r6, 800f884 <f_stat+0x54>
 800f878:	4631      	mov	r1, r6
 800f87a:	a802      	add	r0, sp, #8
 800f87c:	f7fe fcd0 	bl	800e220 <get_fileinfo>
 800f880:	e000      	b.n	800f884 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800f882:	2406      	movs	r4, #6
		FREE_NAMBUF();
 800f884:	4628      	mov	r0, r5
 800f886:	f7fc ff53 	bl	800c730 <ff_memfree>
 800f88a:	e7dc      	b.n	800f846 <f_stat+0x16>
		INIT_NAMBUF(dj.obj.fs);
 800f88c:	2411      	movs	r4, #17
 800f88e:	e7da      	b.n	800f846 <f_stat+0x16>

0800f890 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
)
{
 800f890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f894:	b090      	sub	sp, #64	; 0x40
 800f896:	9001      	str	r0, [sp, #4]
 800f898:	460f      	mov	r7, r1
 800f89a:	4614      	mov	r4, r2
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800f89c:	2200      	movs	r2, #0
 800f89e:	a90f      	add	r1, sp, #60	; 0x3c
 800f8a0:	a801      	add	r0, sp, #4
 800f8a2:	f7fd fa75 	bl	800cd90 <find_volume>
	if (res == FR_OK) {
 800f8a6:	4606      	mov	r6, r0
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	f040 8081 	bne.w	800f9b0 <f_getfree+0x120>
		*fatfs = fs;				/* Return ptr to the fs object */
 800f8ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8b0:	6023      	str	r3, [r4, #0]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800f8b2:	699a      	ldr	r2, [r3, #24]
 800f8b4:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800f8b8:	f1a8 0402 	sub.w	r4, r8, #2
 800f8bc:	42a2      	cmp	r2, r4
 800f8be:	d909      	bls.n	800f8d4 <f_getfree+0x44>
			*nclst = fs->free_clst;
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 800f8c0:	781a      	ldrb	r2, [r3, #0]
 800f8c2:	2a01      	cmp	r2, #1
 800f8c4:	d008      	beq.n	800f8d8 <f_getfree+0x48>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) nfree++;
				} while (++clst < fs->n_fatent);
			} else {
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
 800f8c6:	2a04      	cmp	r2, #4
 800f8c8:	d01c      	beq.n	800f904 <f_getfree+0x74>
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
 800f8ca:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
					i = 0;					/* Offset in the sector */
 800f8ce:	2400      	movs	r4, #0
			nfree = 0;
 800f8d0:	4625      	mov	r5, r4
 800f8d2:	e056      	b.n	800f982 <f_getfree+0xf2>
			*nclst = fs->free_clst;
 800f8d4:	603a      	str	r2, [r7, #0]
 800f8d6:	e06b      	b.n	800f9b0 <f_getfree+0x120>
				clst = 2; obj.fs = fs;
 800f8d8:	9302      	str	r3, [sp, #8]
 800f8da:	2402      	movs	r4, #2
			nfree = 0;
 800f8dc:	2500      	movs	r5, #0
 800f8de:	e004      	b.n	800f8ea <f_getfree+0x5a>
				} while (++clst < fs->n_fatent);
 800f8e0:	3401      	adds	r4, #1
 800f8e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8e4:	69db      	ldr	r3, [r3, #28]
 800f8e6:	42a3      	cmp	r3, r4
 800f8e8:	d95b      	bls.n	800f9a2 <f_getfree+0x112>
					stat = get_fat(&obj, clst);
 800f8ea:	4621      	mov	r1, r4
 800f8ec:	a802      	add	r0, sp, #8
 800f8ee:	f7fd fdd7 	bl	800d4a0 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800f8f2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f8f6:	d053      	beq.n	800f9a0 <f_getfree+0x110>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800f8f8:	2801      	cmp	r0, #1
 800f8fa:	d05d      	beq.n	800f9b8 <f_getfree+0x128>
					if (stat == 0) nfree++;
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	d1ef      	bne.n	800f8e0 <f_getfree+0x50>
 800f900:	3501      	adds	r5, #1
 800f902:	e7ed      	b.n	800f8e0 <f_getfree+0x50>
					sect = fs->database;		/* Assuming bitmap starts at cluster 2 */
 800f904:	6b19      	ldr	r1, [r3, #48]	; 0x30
					i = 0;						/* Offset in the sector */
 800f906:	f04f 0800 	mov.w	r8, #0
			nfree = 0;
 800f90a:	4645      	mov	r5, r8
 800f90c:	e018      	b.n	800f940 <f_getfree+0xb0>
							res = move_window(fs, sect++);
 800f90e:	f101 0901 	add.w	r9, r1, #1
 800f912:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f914:	f7fd f9d4 	bl	800ccc0 <move_window>
							if (res != FR_OK) break;
 800f918:	4606      	mov	r6, r0
 800f91a:	2800      	cmp	r0, #0
 800f91c:	d141      	bne.n	800f9a2 <f_getfree+0x112>
							res = move_window(fs, sect++);
 800f91e:	4649      	mov	r1, r9
 800f920:	e011      	b.n	800f946 <f_getfree+0xb6>
							bm >>= 1;
 800f922:	0852      	lsrs	r2, r2, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800f924:	3b01      	subs	r3, #1
 800f926:	3c01      	subs	r4, #1
 800f928:	b12b      	cbz	r3, 800f936 <f_getfree+0xa6>
 800f92a:	b124      	cbz	r4, 800f936 <f_getfree+0xa6>
							if (!(bm & 1)) nfree++;
 800f92c:	f012 0f01 	tst.w	r2, #1
 800f930:	d1f7      	bne.n	800f922 <f_getfree+0x92>
 800f932:	3501      	adds	r5, #1
 800f934:	e7f5      	b.n	800f922 <f_getfree+0x92>
						i = (i + 1) % SS(fs);
 800f936:	f108 0801 	add.w	r8, r8, #1
 800f93a:	f3c8 0808 	ubfx	r8, r8, #0, #9
					} while (clst);
 800f93e:	b384      	cbz	r4, 800f9a2 <f_getfree+0x112>
						if (i == 0) {
 800f940:	f1b8 0f00 	cmp.w	r8, #0
 800f944:	d0e3      	beq.n	800f90e <f_getfree+0x7e>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800f946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f948:	4443      	add	r3, r8
 800f94a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800f94e:	2308      	movs	r3, #8
 800f950:	e7ea      	b.n	800f928 <f_getfree+0x98>
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
							res = move_window(fs, sect++);
 800f952:	f109 0a01 	add.w	sl, r9, #1
 800f956:	4649      	mov	r1, r9
 800f958:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f95a:	f7fd f9b1 	bl	800ccc0 <move_window>
							if (res != FR_OK) break;
 800f95e:	4606      	mov	r6, r0
 800f960:	b9f8      	cbnz	r0, 800f9a2 <f_getfree+0x112>
							res = move_window(fs, sect++);
 800f962:	46d1      	mov	r9, sl
 800f964:	e00f      	b.n	800f986 <f_getfree+0xf6>
						}
						if (fs->fs_type == FS_FAT16) {
							if (ld_word(fs->win + i) == 0) nfree++;
 800f966:	3038      	adds	r0, #56	; 0x38
 800f968:	4420      	add	r0, r4
 800f96a:	f7fc fee9 	bl	800c740 <ld_word>
 800f96e:	b900      	cbnz	r0, 800f972 <f_getfree+0xe2>
 800f970:	3501      	adds	r5, #1
							i += 2;
 800f972:	3402      	adds	r4, #2
 800f974:	e000      	b.n	800f978 <f_getfree+0xe8>
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
							i += 4;
 800f976:	3404      	adds	r4, #4
						}
						i %= SS(fs);
 800f978:	f3c4 0408 	ubfx	r4, r4, #0, #9
					} while (--clst);
 800f97c:	f1b8 0801 	subs.w	r8, r8, #1
 800f980:	d00f      	beq.n	800f9a2 <f_getfree+0x112>
						if (i == 0) {
 800f982:	2c00      	cmp	r4, #0
 800f984:	d0e5      	beq.n	800f952 <f_getfree+0xc2>
						if (fs->fs_type == FS_FAT16) {
 800f986:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f988:	7803      	ldrb	r3, [r0, #0]
 800f98a:	2b02      	cmp	r3, #2
 800f98c:	d0eb      	beq.n	800f966 <f_getfree+0xd6>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 800f98e:	3038      	adds	r0, #56	; 0x38
 800f990:	4420      	add	r0, r4
 800f992:	f7fc fedd 	bl	800c750 <ld_dword>
 800f996:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 800f99a:	d1ec      	bne.n	800f976 <f_getfree+0xe6>
 800f99c:	3501      	adds	r5, #1
 800f99e:	e7ea      	b.n	800f976 <f_getfree+0xe6>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800f9a0:	2601      	movs	r6, #1
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800f9a2:	603d      	str	r5, [r7, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800f9a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9a6:	619d      	str	r5, [r3, #24]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 800f9a8:	791a      	ldrb	r2, [r3, #4]
 800f9aa:	f042 0201 	orr.w	r2, r2, #1
 800f9ae:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
}
 800f9b0:	4630      	mov	r0, r6
 800f9b2:	b010      	add	sp, #64	; 0x40
 800f9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (stat == 1) { res = FR_INT_ERR; break; }
 800f9b8:	2602      	movs	r6, #2
 800f9ba:	e7f2      	b.n	800f9a2 <f_getfree+0x112>
 800f9bc:	f3af 8000 	nop.w

0800f9c0 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 800f9c0:	b530      	push	{r4, r5, lr}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f9c6:	a901      	add	r1, sp, #4
 800f9c8:	f7fd f92a 	bl	800cc20 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	d15a      	bne.n	800fa88 <f_truncate+0xc8>
 800f9d2:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
 800f9d6:	2c00      	cmp	r4, #0
 800f9d8:	d156      	bne.n	800fa88 <f_truncate+0xc8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f9da:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f9de:	f013 0f02 	tst.w	r3, #2
 800f9e2:	d050      	beq.n	800fa86 <f_truncate+0xc6>

	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 800f9e4:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	; 0x38
 800f9e8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f9ec:	4299      	cmp	r1, r3
 800f9ee:	bf08      	it	eq
 800f9f0:	4290      	cmpeq	r0, r2
 800f9f2:	d249      	bcs.n	800fa88 <f_truncate+0xc8>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 800f9f4:	ea50 0301 	orrs.w	r3, r0, r1
 800f9f8:	d119      	bne.n	800fa2e <f_truncate+0x6e>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	68a9      	ldr	r1, [r5, #8]
 800f9fe:	4628      	mov	r0, r5
 800fa00:	f7fd ff4e 	bl	800d8a0 <remove_chain>
 800fa04:	4604      	mov	r4, r0
			fp->obj.sclust = 0;
 800fa06:	2300      	movs	r3, #0
 800fa08:	60ab      	str	r3, [r5, #8]
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
 800fa0a:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
 800fa0e:	e9c5 2304 	strd	r2, r3, [r5, #16]
		fp->flag |= FA_MODIFIED;
 800fa12:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800fa16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa1a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
#if !FF_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 800fa1e:	b914      	cbnz	r4, 800fa26 <f_truncate+0x66>
 800fa20:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fa24:	d11d      	bne.n	800fa62 <f_truncate+0xa2>
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
 800fa26:	b37c      	cbz	r4, 800fa88 <f_truncate+0xc8>
 800fa28:	f885 4031 	strb.w	r4, [r5, #49]	; 0x31
 800fa2c:	e02c      	b.n	800fa88 <f_truncate+0xc8>
			ncl = get_fat(&fp->obj, fp->clust);
 800fa2e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800fa30:	4628      	mov	r0, r5
 800fa32:	f7fd fd35 	bl	800d4a0 <get_fat>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fa36:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fa3a:	d00e      	beq.n	800fa5a <f_truncate+0x9a>
			if (ncl == 1) res = FR_INT_ERR;
 800fa3c:	2801      	cmp	r0, #1
 800fa3e:	d00e      	beq.n	800fa5e <f_truncate+0x9e>
			if (res == FR_OK && ncl < fs->n_fatent) {
 800fa40:	2c00      	cmp	r4, #0
 800fa42:	d1e2      	bne.n	800fa0a <f_truncate+0x4a>
 800fa44:	9b01      	ldr	r3, [sp, #4]
 800fa46:	69db      	ldr	r3, [r3, #28]
 800fa48:	4283      	cmp	r3, r0
 800fa4a:	d9de      	bls.n	800fa0a <f_truncate+0x4a>
				res = remove_chain(&fp->obj, ncl, fp->clust);
 800fa4c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800fa4e:	4601      	mov	r1, r0
 800fa50:	4628      	mov	r0, r5
 800fa52:	f7fd ff25 	bl	800d8a0 <remove_chain>
 800fa56:	4604      	mov	r4, r0
 800fa58:	e7d7      	b.n	800fa0a <f_truncate+0x4a>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fa5a:	2401      	movs	r4, #1
 800fa5c:	e7ee      	b.n	800fa3c <f_truncate+0x7c>
			if (ncl == 1) res = FR_INT_ERR;
 800fa5e:	2402      	movs	r4, #2
 800fa60:	e7d3      	b.n	800fa0a <f_truncate+0x4a>
			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
 800fa62:	2301      	movs	r3, #1
 800fa64:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800fa66:	f105 0154 	add.w	r1, r5, #84	; 0x54
 800fa6a:	9801      	ldr	r0, [sp, #4]
 800fa6c:	7840      	ldrb	r0, [r0, #1]
 800fa6e:	f7fc fe17 	bl	800c6a0 <disk_write>
 800fa72:	b930      	cbnz	r0, 800fa82 <f_truncate+0xc2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fa74:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800fa78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa7c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800fa80:	e7d1      	b.n	800fa26 <f_truncate+0x66>
				res = FR_DISK_ERR;
 800fa82:	2401      	movs	r4, #1
 800fa84:	e7d0      	b.n	800fa28 <f_truncate+0x68>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fa86:	2407      	movs	r4, #7
	}

	LEAVE_FF(fs, res);
}
 800fa88:	4620      	mov	r0, r4
 800fa8a:	b003      	add	sp, #12
 800fa8c:	bd30      	pop	{r4, r5, pc}
 800fa8e:	bf00      	nop

0800fa90 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800fa90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa94:	b0b9      	sub	sp, #228	; 0xe4
 800fa96:	9001      	str	r0, [sp, #4]
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800fa98:	2202      	movs	r2, #2
 800fa9a:	a90f      	add	r1, sp, #60	; 0x3c
 800fa9c:	a801      	add	r0, sp, #4
 800fa9e:	f7fd f977 	bl	800cd90 <find_volume>
	if (res == FR_OK) {
 800faa2:	4604      	mov	r4, r0
 800faa4:	b118      	cbz	r0, 800faae <f_unlink+0x1e>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 800faa6:	4620      	mov	r0, r4
 800faa8:	b039      	add	sp, #228	; 0xe4
 800faaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800faae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fab0:	9324      	str	r3, [sp, #144]	; 0x90
		INIT_NAMBUF(fs);
 800fab2:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800fab6:	f7fc fe33 	bl	800c720 <ff_memalloc>
 800faba:	4605      	mov	r5, r0
 800fabc:	2800      	cmp	r0, #0
 800fabe:	d079      	beq.n	800fbb4 <f_unlink+0x124>
 800fac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fac2:	60d8      	str	r0, [r3, #12]
 800fac4:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800fac8:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 800faca:	9901      	ldr	r1, [sp, #4]
 800facc:	a824      	add	r0, sp, #144	; 0x90
 800face:	f7fe fda7 	bl	800e620 <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
 800fad2:	4604      	mov	r4, r0
 800fad4:	2800      	cmp	r0, #0
 800fad6:	d157      	bne.n	800fb88 <f_unlink+0xf8>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800fad8:	f99d 30db 	ldrsb.w	r3, [sp, #219]	; 0xdb
 800fadc:	2b00      	cmp	r3, #0
 800fade:	db46      	blt.n	800fb6e <f_unlink+0xde>
				if (dj.obj.attr & AM_RDO) {
 800fae0:	f89d 7096 	ldrb.w	r7, [sp, #150]	; 0x96
 800fae4:	f017 0f01 	tst.w	r7, #1
 800fae8:	d152      	bne.n	800fb90 <f_unlink+0x100>
				obj.fs = fs;
 800faea:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800faec:	9602      	str	r6, [sp, #8]
				if (fs->fs_type == FS_EXFAT) {
 800faee:	7833      	ldrb	r3, [r6, #0]
 800faf0:	2b04      	cmp	r3, #4
 800faf2:	d01d      	beq.n	800fb30 <f_unlink+0xa0>
					dclst = ld_clust(fs, dj.dir);
 800faf4:	9933      	ldr	r1, [sp, #204]	; 0xcc
 800faf6:	4630      	mov	r0, r6
 800faf8:	f7fc ff2a 	bl	800c950 <ld_clust>
 800fafc:	4680      	mov	r8, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800fafe:	f017 0f10 	tst.w	r7, #16
 800fb02:	d037      	beq.n	800fb74 <f_unlink+0xe4>
						sdj.obj.fs = fs;				/* Open the sub-directory */
 800fb04:	9610      	str	r6, [sp, #64]	; 0x40
						sdj.obj.sclust = dclst;
 800fb06:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
						if (fs->fs_type == FS_EXFAT) {
 800fb0a:	7833      	ldrb	r3, [r6, #0]
 800fb0c:	2b04      	cmp	r3, #4
 800fb0e:	d025      	beq.n	800fb5c <f_unlink+0xcc>
						res = dir_sdi(&sdj, 0);
 800fb10:	2100      	movs	r1, #0
 800fb12:	a810      	add	r0, sp, #64	; 0x40
 800fb14:	f7fd fd7c 	bl	800d610 <dir_sdi>
						if (res == FR_OK) {
 800fb18:	4604      	mov	r4, r0
 800fb1a:	bb58      	cbnz	r0, 800fb74 <f_unlink+0xe4>
							res = dir_read(&sdj, 0);			/* Read an item */
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	a810      	add	r0, sp, #64	; 0x40
 800fb20:	f7fe f8ce 	bl	800dcc0 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800fb24:	4604      	mov	r4, r0
 800fb26:	2800      	cmp	r0, #0
 800fb28:	d036      	beq.n	800fb98 <f_unlink+0x108>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800fb2a:	2804      	cmp	r0, #4
 800fb2c:	d122      	bne.n	800fb74 <f_unlink+0xe4>
 800fb2e:	e022      	b.n	800fb76 <f_unlink+0xe6>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 800fb30:	f8d6 9010 	ldr.w	r9, [r6, #16]
 800fb34:	f109 0034 	add.w	r0, r9, #52	; 0x34
 800fb38:	f7fc fe0a 	bl	800c750 <ld_dword>
 800fb3c:	4680      	mov	r8, r0
 800fb3e:	9004      	str	r0, [sp, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800fb40:	f109 0038 	add.w	r0, r9, #56	; 0x38
 800fb44:	f7fc fe14 	bl	800c770 <ld_qword>
 800fb48:	e9cd 0106 	strd	r0, r1, [sp, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800fb4c:	6933      	ldr	r3, [r6, #16]
 800fb4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800fb52:	f003 0302 	and.w	r3, r3, #2
 800fb56:	f88d 300f 	strb.w	r3, [sp, #15]
 800fb5a:	e7d0      	b.n	800fafe <f_unlink+0x6e>
							sdj.obj.objsize = obj.objsize;
 800fb5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb60:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
							sdj.obj.stat = obj.stat;
 800fb64:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800fb68:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 800fb6c:	e7d0      	b.n	800fb10 <f_unlink+0x80>
	DWORD dclst = 0;
 800fb6e:	f04f 0800 	mov.w	r8, #0
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800fb72:	2406      	movs	r4, #6
			if (res == FR_OK) {
 800fb74:	b944      	cbnz	r4, 800fb88 <f_unlink+0xf8>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800fb76:	a824      	add	r0, sp, #144	; 0x90
 800fb78:	f7fe f982 	bl	800de80 <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800fb7c:	4604      	mov	r4, r0
 800fb7e:	b910      	cbnz	r0, 800fb86 <f_unlink+0xf6>
 800fb80:	f1b8 0f00 	cmp.w	r8, #0
 800fb84:	d10a      	bne.n	800fb9c <f_unlink+0x10c>
				if (res == FR_OK) res = sync_fs(fs);
 800fb86:	b184      	cbz	r4, 800fbaa <f_unlink+0x11a>
		FREE_NAMBUF();
 800fb88:	4628      	mov	r0, r5
 800fb8a:	f7fc fdd1 	bl	800c730 <ff_memfree>
 800fb8e:	e78a      	b.n	800faa6 <f_unlink+0x16>
	DWORD dclst = 0;
 800fb90:	f04f 0800 	mov.w	r8, #0
					res = FR_DENIED;		/* Cannot remove R/O object */
 800fb94:	2407      	movs	r4, #7
 800fb96:	e7ed      	b.n	800fb74 <f_unlink+0xe4>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800fb98:	2407      	movs	r4, #7
 800fb9a:	e7eb      	b.n	800fb74 <f_unlink+0xe4>
					res = remove_chain(&obj, dclst, 0);
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	4641      	mov	r1, r8
 800fba0:	a802      	add	r0, sp, #8
 800fba2:	f7fd fe7d 	bl	800d8a0 <remove_chain>
 800fba6:	4604      	mov	r4, r0
 800fba8:	e7ed      	b.n	800fb86 <f_unlink+0xf6>
				if (res == FR_OK) res = sync_fs(fs);
 800fbaa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800fbac:	f7fe fea8 	bl	800e900 <sync_fs>
 800fbb0:	4604      	mov	r4, r0
 800fbb2:	e7e9      	b.n	800fb88 <f_unlink+0xf8>
		INIT_NAMBUF(fs);
 800fbb4:	2411      	movs	r4, #17
 800fbb6:	e776      	b.n	800faa6 <f_unlink+0x16>
 800fbb8:	f3af 8000 	nop.w
 800fbbc:	f3af 8000 	nop.w

0800fbc0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc4:	b099      	sub	sp, #100	; 0x64
 800fbc6:	9001      	str	r0, [sp, #4]
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800fbc8:	2202      	movs	r2, #2
 800fbca:	a903      	add	r1, sp, #12
 800fbcc:	a801      	add	r0, sp, #4
 800fbce:	f7fd f8df 	bl	800cd90 <find_volume>
	if (res == FR_OK) {
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	b118      	cbz	r0, 800fbde <f_mkdir+0x1e>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	b019      	add	sp, #100	; 0x64
 800fbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 800fbde:	9b03      	ldr	r3, [sp, #12]
 800fbe0:	9304      	str	r3, [sp, #16]
		INIT_NAMBUF(fs);
 800fbe2:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800fbe6:	f7fc fd9b 	bl	800c720 <ff_memalloc>
 800fbea:	4605      	mov	r5, r0
 800fbec:	2800      	cmp	r0, #0
 800fbee:	f000 80be 	beq.w	800fd6e <f_mkdir+0x1ae>
 800fbf2:	9b03      	ldr	r3, [sp, #12]
 800fbf4:	60d8      	str	r0, [r3, #12]
 800fbf6:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800fbfa:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 800fbfc:	9901      	ldr	r1, [sp, #4]
 800fbfe:	a804      	add	r0, sp, #16
 800fc00:	f7fe fd0e 	bl	800e620 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800fc04:	2800      	cmp	r0, #0
 800fc06:	f000 80ad 	beq.w	800fd64 <f_mkdir+0x1a4>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800fc0a:	2804      	cmp	r0, #4
 800fc0c:	d001      	beq.n	800fc12 <f_mkdir+0x52>
		res = follow_path(&dj, path);			/* Follow the file path */
 800fc0e:	4604      	mov	r4, r0
 800fc10:	e0a9      	b.n	800fd66 <f_mkdir+0x1a6>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800fc12:	2100      	movs	r1, #0
 800fc14:	a804      	add	r0, sp, #16
 800fc16:	f7fd fd5b 	bl	800d6d0 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800fc1a:	9a03      	ldr	r2, [sp, #12]
 800fc1c:	8953      	ldrh	r3, [r2, #10]
 800fc1e:	025b      	lsls	r3, r3, #9
 800fc20:	9308      	str	r3, [sp, #32]
 800fc22:	2300      	movs	r3, #0
 800fc24:	9309      	str	r3, [sp, #36]	; 0x24
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800fc26:	4606      	mov	r6, r0
 800fc28:	b900      	cbnz	r0, 800fc2c <f_mkdir+0x6c>
 800fc2a:	2407      	movs	r4, #7
			if (dcl == 1) res = FR_INT_ERR;
 800fc2c:	2e01      	cmp	r6, #1
 800fc2e:	d029      	beq.n	800fc84 <f_mkdir+0xc4>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fc30:	f1b6 3fff 	cmp.w	r6, #4294967295
 800fc34:	d02d      	beq.n	800fc92 <f_mkdir+0xd2>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800fc36:	b33c      	cbz	r4, 800fc88 <f_mkdir+0xc8>
			tm = GET_FATTIME();
 800fc38:	f7fc fd62 	bl	800c700 <get_fattime>
 800fc3c:	4607      	mov	r7, r0
			if (res == FR_OK) {					/* Initialize the new directory table */
 800fc3e:	b354      	cbz	r4, 800fc96 <f_mkdir+0xd6>
			if (res == FR_OK) {
 800fc40:	2c00      	cmp	r4, #0
 800fc42:	d05f      	beq.n	800fd04 <f_mkdir+0x144>
			if (res == FR_OK) {
 800fc44:	2c00      	cmp	r4, #0
 800fc46:	f040 8087 	bne.w	800fd58 <f_mkdir+0x198>
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 800fc4a:	9b03      	ldr	r3, [sp, #12]
 800fc4c:	781a      	ldrb	r2, [r3, #0]
 800fc4e:	2a04      	cmp	r2, #4
 800fc50:	d05d      	beq.n	800fd0e <f_mkdir+0x14e>
					dir = dj.dir;
 800fc52:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800fc56:	4639      	mov	r1, r7
 800fc58:	f108 0016 	add.w	r0, r8, #22
 800fc5c:	f7fc fde8 	bl	800c830 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800fc60:	4632      	mov	r2, r6
 800fc62:	4641      	mov	r1, r8
 800fc64:	9803      	ldr	r0, [sp, #12]
 800fc66:	f7fc fe8b 	bl	800c980 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800fc6a:	2310      	movs	r3, #16
 800fc6c:	f888 300b 	strb.w	r3, [r8, #11]
					fs->wflag = 1;
 800fc70:	9b03      	ldr	r3, [sp, #12]
 800fc72:	2201      	movs	r2, #1
 800fc74:	70da      	strb	r2, [r3, #3]
				if (res == FR_OK) {
 800fc76:	2c00      	cmp	r4, #0
 800fc78:	d175      	bne.n	800fd66 <f_mkdir+0x1a6>
					res = sync_fs(fs);
 800fc7a:	9803      	ldr	r0, [sp, #12]
 800fc7c:	f7fe fe40 	bl	800e900 <sync_fs>
 800fc80:	4604      	mov	r4, r0
 800fc82:	e070      	b.n	800fd66 <f_mkdir+0x1a6>
			if (dcl == 1) res = FR_INT_ERR;
 800fc84:	2402      	movs	r4, #2
 800fc86:	e7d3      	b.n	800fc30 <f_mkdir+0x70>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800fc88:	4610      	mov	r0, r2
 800fc8a:	f7fc fff1 	bl	800cc70 <sync_window>
 800fc8e:	4604      	mov	r4, r0
 800fc90:	e7d2      	b.n	800fc38 <f_mkdir+0x78>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fc92:	2401      	movs	r4, #1
 800fc94:	e7d0      	b.n	800fc38 <f_mkdir+0x78>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
 800fc96:	4631      	mov	r1, r6
 800fc98:	9803      	ldr	r0, [sp, #12]
 800fc9a:	f7fd fea1 	bl	800d9e0 <dir_clear>
				if (res == FR_OK && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT)) {	/* Create dot entries (FAT only) */
 800fc9e:	4604      	mov	r4, r0
 800fca0:	2800      	cmp	r0, #0
 800fca2:	d1cd      	bne.n	800fc40 <f_mkdir+0x80>
 800fca4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fca8:	f898 3000 	ldrb.w	r3, [r8]
 800fcac:	2b04      	cmp	r3, #4
 800fcae:	d0c7      	beq.n	800fc40 <f_mkdir+0x80>
					dir = fs->win;
 800fcb0:	f108 0938 	add.w	r9, r8, #56	; 0x38
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800fcb4:	220b      	movs	r2, #11
 800fcb6:	2120      	movs	r1, #32
 800fcb8:	4648      	mov	r0, r9
 800fcba:	f7fc fdf1 	bl	800c8a0 <mem_set>
					dir[DIR_Name] = '.';
 800fcbe:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
 800fcc2:	f888 b038 	strb.w	fp, [r8, #56]	; 0x38
					dir[DIR_Attr] = AM_DIR;
 800fcc6:	2310      	movs	r3, #16
 800fcc8:	f888 3043 	strb.w	r3, [r8, #67]	; 0x43
					st_dword(dir + DIR_ModTime, tm);
 800fccc:	4639      	mov	r1, r7
 800fcce:	f108 004e 	add.w	r0, r8, #78	; 0x4e
 800fcd2:	f7fc fdad 	bl	800c830 <st_dword>
					st_clust(fs, dir, dcl);
 800fcd6:	4632      	mov	r2, r6
 800fcd8:	4649      	mov	r1, r9
 800fcda:	9803      	ldr	r0, [sp, #12]
 800fcdc:	f7fc fe50 	bl	800c980 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); /* Create ".." entry */
 800fce0:	f108 0a58 	add.w	sl, r8, #88	; 0x58
 800fce4:	2220      	movs	r2, #32
 800fce6:	4649      	mov	r1, r9
 800fce8:	4650      	mov	r0, sl
 800fcea:	f7fc fdc9 	bl	800c880 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800fcee:	f888 b059 	strb.w	fp, [r8, #89]	; 0x59
					st_clust(fs, dir + SZDIRE, pcl);
 800fcf2:	9a06      	ldr	r2, [sp, #24]
 800fcf4:	4651      	mov	r1, sl
 800fcf6:	9803      	ldr	r0, [sp, #12]
 800fcf8:	f7fc fe42 	bl	800c980 <st_clust>
					fs->wflag = 1;
 800fcfc:	9b03      	ldr	r3, [sp, #12]
 800fcfe:	2201      	movs	r2, #1
 800fd00:	70da      	strb	r2, [r3, #3]
 800fd02:	e79d      	b.n	800fc40 <f_mkdir+0x80>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800fd04:	a804      	add	r0, sp, #16
 800fd06:	f7fe fcf3 	bl	800e6f0 <dir_register>
 800fd0a:	4604      	mov	r4, r0
 800fd0c:	e79a      	b.n	800fc44 <f_mkdir+0x84>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 800fd0e:	6918      	ldr	r0, [r3, #16]
 800fd10:	4639      	mov	r1, r7
 800fd12:	300c      	adds	r0, #12
 800fd14:	f7fc fd8c 	bl	800c830 <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 800fd18:	9b03      	ldr	r3, [sp, #12]
 800fd1a:	6918      	ldr	r0, [r3, #16]
 800fd1c:	4631      	mov	r1, r6
 800fd1e:	3034      	adds	r0, #52	; 0x34
 800fd20:	f7fc fd86 	bl	800c830 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 800fd24:	9b03      	ldr	r3, [sp, #12]
 800fd26:	6918      	ldr	r0, [r3, #16]
 800fd28:	9908      	ldr	r1, [sp, #32]
 800fd2a:	3038      	adds	r0, #56	; 0x38
 800fd2c:	f7fc fd80 	bl	800c830 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 800fd30:	9b03      	ldr	r3, [sp, #12]
 800fd32:	6918      	ldr	r0, [r3, #16]
 800fd34:	9908      	ldr	r1, [sp, #32]
 800fd36:	3028      	adds	r0, #40	; 0x28
 800fd38:	f7fc fd7a 	bl	800c830 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
 800fd3c:	9b03      	ldr	r3, [sp, #12]
 800fd3e:	691a      	ldr	r2, [r3, #16]
 800fd40:	2103      	movs	r1, #3
 800fd42:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 800fd46:	691b      	ldr	r3, [r3, #16]
 800fd48:	2210      	movs	r2, #16
 800fd4a:	711a      	strb	r2, [r3, #4]
					res = store_xdir(&dj);
 800fd4c:	eb0d 0002 	add.w	r0, sp, r2
 800fd50:	f7fe f866 	bl	800de20 <store_xdir>
 800fd54:	4604      	mov	r4, r0
 800fd56:	e78e      	b.n	800fc76 <f_mkdir+0xb6>
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800fd58:	2200      	movs	r2, #0
 800fd5a:	4631      	mov	r1, r6
 800fd5c:	a804      	add	r0, sp, #16
 800fd5e:	f7fd fd9f 	bl	800d8a0 <remove_chain>
 800fd62:	e000      	b.n	800fd66 <f_mkdir+0x1a6>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800fd64:	2408      	movs	r4, #8
		FREE_NAMBUF();
 800fd66:	4628      	mov	r0, r5
 800fd68:	f7fc fce2 	bl	800c730 <ff_memfree>
 800fd6c:	e733      	b.n	800fbd6 <f_mkdir+0x16>
		INIT_NAMBUF(fs);
 800fd6e:	2411      	movs	r4, #17
 800fd70:	e731      	b.n	800fbd6 <f_mkdir+0x16>
 800fd72:	bf00      	nop
 800fd74:	f3af 8000 	nop.w
 800fd78:	f3af 8000 	nop.w
 800fd7c:	f3af 8000 	nop.w

0800fd80 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800fd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd84:	b0bc      	sub	sp, #240	; 0xf0
 800fd86:	9001      	str	r0, [sp, #4]
 800fd88:	a83c      	add	r0, sp, #240	; 0xf0
 800fd8a:	f840 1df0 	str.w	r1, [r0, #-240]!
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
 800fd8e:	f7fc ff17 	bl	800cbc0 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800fd92:	2202      	movs	r2, #2
 800fd94:	a913      	add	r1, sp, #76	; 0x4c
 800fd96:	a801      	add	r0, sp, #4
 800fd98:	f7fc fffa 	bl	800cd90 <find_volume>
	if (res == FR_OK) {
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	b118      	cbz	r0, 800fda8 <f_rename+0x28>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 800fda0:	4620      	mov	r0, r4
 800fda2:	b03c      	add	sp, #240	; 0xf0
 800fda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		djo.obj.fs = fs;
 800fda8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fdaa:	9328      	str	r3, [sp, #160]	; 0xa0
		INIT_NAMBUF(fs);
 800fdac:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800fdb0:	f7fc fcb6 	bl	800c720 <ff_memalloc>
 800fdb4:	4605      	mov	r5, r0
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	f000 80de 	beq.w	800ff78 <f_rename+0x1f8>
 800fdbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fdbe:	60d8      	str	r0, [r3, #12]
 800fdc0:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800fdc4:	611a      	str	r2, [r3, #16]
		res = follow_path(&djo, path_old);		/* Check old object */
 800fdc6:	9901      	ldr	r1, [sp, #4]
 800fdc8:	a828      	add	r0, sp, #160	; 0xa0
 800fdca:	f7fe fc29 	bl	800e620 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800fdce:	4604      	mov	r4, r0
 800fdd0:	b928      	cbnz	r0, 800fdde <f_rename+0x5e>
 800fdd2:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 800fdd6:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800fdda:	f040 80c8 	bne.w	800ff6e <f_rename+0x1ee>
		if (res == FR_OK) {						/* Object to be renamed is found */
 800fdde:	2c00      	cmp	r4, #0
 800fde0:	f040 80c6 	bne.w	800ff70 <f_rename+0x1f0>
			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
 800fde4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fde6:	781a      	ldrb	r2, [r3, #0]
 800fde8:	2a04      	cmp	r2, #4
 800fdea:	d017      	beq.n	800fe1c <f_rename+0x9c>
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
 800fdec:	2220      	movs	r2, #32
 800fdee:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800fdf0:	a803      	add	r0, sp, #12
 800fdf2:	f7fc fd45 	bl	800c880 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800fdf6:	2250      	movs	r2, #80	; 0x50
 800fdf8:	a928      	add	r1, sp, #160	; 0xa0
 800fdfa:	eb0d 0002 	add.w	r0, sp, r2
 800fdfe:	f7fc fd3f 	bl	800c880 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800fe02:	9900      	ldr	r1, [sp, #0]
 800fe04:	a814      	add	r0, sp, #80	; 0x50
 800fe06:	f7fe fc0b 	bl	800e620 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	d15b      	bne.n	800fec8 <f_rename+0x148>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800fe10:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fe12:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d051      	beq.n	800febc <f_rename+0x13c>
 800fe18:	2408      	movs	r4, #8
 800fe1a:	e057      	b.n	800fecc <f_rename+0x14c>
				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
 800fe1c:	2240      	movs	r2, #64	; 0x40
 800fe1e:	6919      	ldr	r1, [r3, #16]
 800fe20:	a803      	add	r0, sp, #12
 800fe22:	f7fc fd2d 	bl	800c880 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof djo);
 800fe26:	2250      	movs	r2, #80	; 0x50
 800fe28:	a928      	add	r1, sp, #160	; 0xa0
 800fe2a:	eb0d 0002 	add.w	r0, sp, r2
 800fe2e:	f7fc fd27 	bl	800c880 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800fe32:	9900      	ldr	r1, [sp, #0]
 800fe34:	a814      	add	r0, sp, #80	; 0x50
 800fe36:	f7fe fbf3 	bl	800e620 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	b958      	cbnz	r0, 800fe56 <f_rename+0xd6>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800fe3e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fe40:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d001      	beq.n	800fe4a <f_rename+0xca>
 800fe46:	2408      	movs	r4, #8
 800fe48:	e040      	b.n	800fecc <f_rename+0x14c>
 800fe4a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fe4c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d003      	beq.n	800fe5a <f_rename+0xda>
 800fe52:	2408      	movs	r4, #8
 800fe54:	e03a      	b.n	800fecc <f_rename+0x14c>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800fe56:	2804      	cmp	r0, #4
 800fe58:	d138      	bne.n	800fecc <f_rename+0x14c>
					res = dir_register(&djn);			/* Register the new entry */
 800fe5a:	a814      	add	r0, sp, #80	; 0x50
 800fe5c:	f7fe fc48 	bl	800e6f0 <dir_register>
					if (res == FR_OK) {
 800fe60:	4604      	mov	r4, r0
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d132      	bne.n	800fecc <f_rename+0x14c>
						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
 800fe66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe68:	691c      	ldr	r4, [r3, #16]
 800fe6a:	f894 8001 	ldrb.w	r8, [r4, #1]
 800fe6e:	f894 7023 	ldrb.w	r7, [r4, #35]	; 0x23
						nh = ld_word(fs->dirbuf + XDIR_NameHash);
 800fe72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fe76:	f7fc fc63 	bl	800c740 <ld_word>
 800fe7a:	4606      	mov	r6, r0
						mem_cpy(fs->dirbuf, buf, SZDIRE * 2);	/* Restore 85+C0 entry */
 800fe7c:	2240      	movs	r2, #64	; 0x40
 800fe7e:	a903      	add	r1, sp, #12
 800fe80:	4620      	mov	r0, r4
 800fe82:	f7fc fcfd 	bl	800c880 <mem_cpy>
						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
 800fe86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe88:	691b      	ldr	r3, [r3, #16]
 800fe8a:	f883 8001 	strb.w	r8, [r3, #1]
 800fe8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe90:	691a      	ldr	r2, [r3, #16]
 800fe92:	f882 7023 	strb.w	r7, [r2, #35]	; 0x23
						st_word(fs->dirbuf + XDIR_NameHash, nh);
 800fe96:	6918      	ldr	r0, [r3, #16]
 800fe98:	4631      	mov	r1, r6
 800fe9a:	3024      	adds	r0, #36	; 0x24
 800fe9c:	f7fc fcc0 	bl	800c820 <st_word>
						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 800fea0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fea2:	691a      	ldr	r2, [r3, #16]
 800fea4:	7913      	ldrb	r3, [r2, #4]
 800fea6:	f013 0f10 	tst.w	r3, #16
 800feaa:	d102      	bne.n	800feb2 <f_rename+0x132>
 800feac:	f043 0320 	orr.w	r3, r3, #32
 800feb0:	7113      	strb	r3, [r2, #4]
						res = store_xdir(&djn);
 800feb2:	a814      	add	r0, sp, #80	; 0x50
 800feb4:	f7fd ffb4 	bl	800de20 <store_xdir>
 800feb8:	4604      	mov	r4, r0
 800feba:	e007      	b.n	800fecc <f_rename+0x14c>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800febc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800febe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d010      	beq.n	800fee6 <f_rename+0x166>
 800fec4:	2408      	movs	r4, #8
 800fec6:	e001      	b.n	800fecc <f_rename+0x14c>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800fec8:	2804      	cmp	r0, #4
 800feca:	d00c      	beq.n	800fee6 <f_rename+0x166>
			if (res == FR_OK) {
 800fecc:	2c00      	cmp	r4, #0
 800fece:	d14f      	bne.n	800ff70 <f_rename+0x1f0>
				res = dir_remove(&djo);		/* Remove old entry */
 800fed0:	a828      	add	r0, sp, #160	; 0xa0
 800fed2:	f7fd ffd5 	bl	800de80 <dir_remove>
				if (res == FR_OK) {
 800fed6:	4604      	mov	r4, r0
 800fed8:	2800      	cmp	r0, #0
 800feda:	d149      	bne.n	800ff70 <f_rename+0x1f0>
					res = sync_fs(fs);
 800fedc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800fede:	f7fe fd0f 	bl	800e900 <sync_fs>
 800fee2:	4604      	mov	r4, r0
 800fee4:	e044      	b.n	800ff70 <f_rename+0x1f0>
					res = dir_register(&djn);			/* Register the new entry */
 800fee6:	a814      	add	r0, sp, #80	; 0x50
 800fee8:	f7fe fc02 	bl	800e6f0 <dir_register>
					if (res == FR_OK) {
 800feec:	4604      	mov	r4, r0
 800feee:	2800      	cmp	r0, #0
 800fef0:	d1ec      	bne.n	800fecc <f_rename+0x14c>
						dir = djn.dir;					/* Copy directory entry of the object except name */
 800fef2:	9e23      	ldr	r6, [sp, #140]	; 0x8c
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
 800fef4:	2213      	movs	r2, #19
 800fef6:	f10d 0119 	add.w	r1, sp, #25
 800fefa:	f106 000d 	add.w	r0, r6, #13
 800fefe:	f7fc fcbf 	bl	800c880 <mem_cpy>
						dir[DIR_Attr] = buf[DIR_Attr];
 800ff02:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800ff06:	72f3      	strb	r3, [r6, #11]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 800ff08:	f013 0f10 	tst.w	r3, #16
 800ff0c:	d102      	bne.n	800ff14 <f_rename+0x194>
 800ff0e:	f043 0320 	orr.w	r3, r3, #32
 800ff12:	72f3      	strb	r3, [r6, #11]
						fs->wflag = 1;
 800ff14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff16:	2201      	movs	r2, #1
 800ff18:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800ff1a:	7af3      	ldrb	r3, [r6, #11]
 800ff1c:	f013 0f10 	tst.w	r3, #16
 800ff20:	d0d4      	beq.n	800fecc <f_rename+0x14c>
 800ff22:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800ff24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d0d0      	beq.n	800fecc <f_rename+0x14c>
							dw = clst2sect(fs, ld_clust(fs, dir));
 800ff2a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ff2c:	4631      	mov	r1, r6
 800ff2e:	4620      	mov	r0, r4
 800ff30:	f7fc fd0e 	bl	800c950 <ld_clust>
 800ff34:	4601      	mov	r1, r0
 800ff36:	4620      	mov	r0, r4
 800ff38:	f7fc fce2 	bl	800c900 <clst2sect>
							if (dw == 0) {
 800ff3c:	4601      	mov	r1, r0
 800ff3e:	b908      	cbnz	r0, 800ff44 <f_rename+0x1c4>
								res = FR_INT_ERR;
 800ff40:	2402      	movs	r4, #2
 800ff42:	e015      	b.n	800ff70 <f_rename+0x1f0>
								res = move_window(fs, dw);
 800ff44:	4620      	mov	r0, r4
 800ff46:	f7fc febb 	bl	800ccc0 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800ff4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff4c:	f103 0158 	add.w	r1, r3, #88	; 0x58
								if (res == FR_OK && dir[1] == '.') {
 800ff50:	4604      	mov	r4, r0
 800ff52:	2800      	cmp	r0, #0
 800ff54:	d1ba      	bne.n	800fecc <f_rename+0x14c>
 800ff56:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 800ff5a:	2a2e      	cmp	r2, #46	; 0x2e
 800ff5c:	d1b6      	bne.n	800fecc <f_rename+0x14c>
									st_clust(fs, dir, djn.obj.sclust);
 800ff5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fc fd0d 	bl	800c980 <st_clust>
									fs->wflag = 1;
 800ff66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff68:	2201      	movs	r2, #1
 800ff6a:	70da      	strb	r2, [r3, #3]
 800ff6c:	e7ae      	b.n	800fecc <f_rename+0x14c>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800ff6e:	2406      	movs	r4, #6
		FREE_NAMBUF();
 800ff70:	4628      	mov	r0, r5
 800ff72:	f7fc fbdd 	bl	800c730 <ff_memfree>
 800ff76:	e713      	b.n	800fda0 <f_rename+0x20>
		INIT_NAMBUF(fs);
 800ff78:	2411      	movs	r4, #17
 800ff7a:	e711      	b.n	800fda0 <f_rename+0x20>
 800ff7c:	0000      	movs	r0, r0
	...

0800ff80 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII char */
 800ff80:	287f      	cmp	r0, #127	; 0x7f
 800ff82:	d911      	bls.n	800ffa8 <ff_uni2oem+0x28>
		c = uni;

	} else {			/* Non-ASCII char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 800ff84:	f240 3352 	movw	r3, #850	; 0x352
 800ff88:	4299      	cmp	r1, r3
 800ff8a:	d00e      	beq.n	800ffaa <ff_uni2oem+0x2a>
	WCHAR c = 0;
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 800ff90:	3301      	adds	r3, #1
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	2b7f      	cmp	r3, #127	; 0x7f
 800ff96:	d804      	bhi.n	800ffa2 <ff_uni2oem+0x22>
 800ff98:	4a05      	ldr	r2, [pc, #20]	; (800ffb0 <ff_uni2oem+0x30>)
 800ff9a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ff9e:	4282      	cmp	r2, r0
 800ffa0:	d1f6      	bne.n	800ff90 <ff_uni2oem+0x10>
			c = (c + 0x80) & 0xFF;
 800ffa2:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800ffa6:	b2c0      	uxtb	r0, r0
		}
	}
	return c;
}
 800ffa8:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	e7f2      	b.n	800ff94 <ff_uni2oem+0x14>
 800ffae:	bf00      	nop
 800ffb0:	08019f0c 	.word	0x08019f0c
 800ffb4:	f3af 8000 	nop.w
 800ffb8:	f3af 8000 	nop.w
 800ffbc:	f3af 8000 	nop.w

0800ffc0 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII char */
 800ffc0:	287f      	cmp	r0, #127	; 0x7f
 800ffc2:	d90f      	bls.n	800ffe4 <ff_oem2uni+0x24>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 800ffc4:	f240 3352 	movw	r3, #850	; 0x352
 800ffc8:	4299      	cmp	r1, r3
 800ffca:	d001      	beq.n	800ffd0 <ff_oem2uni+0x10>
	WCHAR c = 0;
 800ffcc:	2000      	movs	r0, #0
 800ffce:	4770      	bx	lr
			if (oem < 0x100) c = p[oem - 0x80];
 800ffd0:	28ff      	cmp	r0, #255	; 0xff
 800ffd2:	d806      	bhi.n	800ffe2 <ff_oem2uni+0x22>
 800ffd4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ffd8:	3880      	subs	r0, #128	; 0x80
 800ffda:	4b03      	ldr	r3, [pc, #12]	; (800ffe8 <ff_oem2uni+0x28>)
 800ffdc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800ffe0:	4770      	bx	lr
	WCHAR c = 0;
 800ffe2:	2000      	movs	r0, #0
		}
	}
	return c;
}
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop
 800ffe8:	08019f0c 	.word	0x08019f0c
 800ffec:	f3af 8000 	nop.w

0800fff0 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = uni < 0x1000 ? cvt1 : cvt2;
 800fff0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800fff4:	d207      	bcs.n	8010006 <ff_wtoupper+0x16>
 800fff6:	4b23      	ldr	r3, [pc, #140]	; (8010084 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 800fff8:	881a      	ldrh	r2, [r3, #0]
		if (!bc || uni < bc) break;
 800fffa:	2a00      	cmp	r2, #0
 800fffc:	d040      	beq.n	8010080 <ff_wtoupper+0x90>
 800fffe:	4290      	cmp	r0, r2
 8010000:	d33e      	bcc.n	8010080 <ff_wtoupper+0x90>
{
 8010002:	b4f0      	push	{r4, r5, r6, r7}
 8010004:	e006      	b.n	8010014 <ff_wtoupper+0x24>
	p = uni < 0x1000 ? cvt1 : cvt2;
 8010006:	4b20      	ldr	r3, [pc, #128]	; (8010088 <ff_wtoupper+0x98>)
 8010008:	e7f6      	b.n	800fff8 <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801000a:	462b      	mov	r3, r5
		bc = *p++;								/* Get block base */
 801000c:	881a      	ldrh	r2, [r3, #0]
		if (!bc || uni < bc) break;
 801000e:	b1ca      	cbz	r2, 8010044 <ff_wtoupper+0x54>
 8010010:	4290      	cmp	r0, r2
 8010012:	d317      	bcc.n	8010044 <ff_wtoupper+0x54>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010014:	1d1d      	adds	r5, r3, #4
 8010016:	885b      	ldrh	r3, [r3, #2]
 8010018:	0a19      	lsrs	r1, r3, #8
 801001a:	b2db      	uxtb	r3, r3
		if (uni < bc + nc) {	/* In the block? */
 801001c:	189c      	adds	r4, r3, r2
 801001e:	42a0      	cmp	r0, r4
 8010020:	db04      	blt.n	801002c <ff_wtoupper+0x3c>
			case 7: uni -= 80; break;				/* Shift -80 */
			case 8:	uni -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8010022:	2900      	cmp	r1, #0
 8010024:	d1f1      	bne.n	801000a <ff_wtoupper+0x1a>
 8010026:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801002a:	e7ef      	b.n	801000c <ff_wtoupper+0x1c>
			switch (cmd) {
 801002c:	2908      	cmp	r1, #8
 801002e:	d809      	bhi.n	8010044 <ff_wtoupper+0x54>
 8010030:	e8df f001 	tbb	[pc, r1]
 8010034:	13100a05 	.word	0x13100a05
 8010038:	1f1c1916 	.word	0x1f1c1916
 801003c:	22          	.byte	0x22
 801003d:	00          	.byte	0x00
			case 0:	uni = p[uni - bc]; break;		/* Table conversion */
 801003e:	1a86      	subs	r6, r0, r2
 8010040:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
	}

	return uni;
}
 8010044:	bcf0      	pop	{r4, r5, r6, r7}
 8010046:	4770      	bx	lr
			case 1:	uni -= (uni - bc) & 1; break;	/* Case pairs */
 8010048:	1a82      	subs	r2, r0, r2
 801004a:	f002 0301 	and.w	r3, r2, #1
 801004e:	1ac0      	subs	r0, r0, r3
 8010050:	b280      	uxth	r0, r0
 8010052:	e7f7      	b.n	8010044 <ff_wtoupper+0x54>
			case 2: uni -= 16; break;				/* Shift -16 */
 8010054:	3810      	subs	r0, #16
 8010056:	b280      	uxth	r0, r0
 8010058:	e7f4      	b.n	8010044 <ff_wtoupper+0x54>
			case 3:	uni -= 32; break;				/* Shift -32 */
 801005a:	3820      	subs	r0, #32
 801005c:	b280      	uxth	r0, r0
 801005e:	e7f1      	b.n	8010044 <ff_wtoupper+0x54>
			case 4:	uni -= 48; break;				/* Shift -48 */
 8010060:	3830      	subs	r0, #48	; 0x30
 8010062:	b280      	uxth	r0, r0
 8010064:	e7ee      	b.n	8010044 <ff_wtoupper+0x54>
			case 5:	uni -= 26; break;				/* Shift -26 */
 8010066:	381a      	subs	r0, #26
 8010068:	b280      	uxth	r0, r0
 801006a:	e7eb      	b.n	8010044 <ff_wtoupper+0x54>
			case 6:	uni += 8; break;				/* Shift +8 */
 801006c:	3008      	adds	r0, #8
 801006e:	b280      	uxth	r0, r0
 8010070:	e7e8      	b.n	8010044 <ff_wtoupper+0x54>
			case 7: uni -= 80; break;				/* Shift -80 */
 8010072:	3850      	subs	r0, #80	; 0x50
 8010074:	b280      	uxth	r0, r0
 8010076:	e7e5      	b.n	8010044 <ff_wtoupper+0x54>
			case 8:	uni -= 0x1C60; break;			/* Shift -0x1C60 */
 8010078:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 801007c:	b280      	uxth	r0, r0
 801007e:	e7e1      	b.n	8010044 <ff_wtoupper+0x54>
}
 8010080:	4770      	bx	lr
 8010082:	bf00      	nop
 8010084:	0801a0c8 	.word	0x0801a0c8
 8010088:	0801a00c 	.word	0x0801a00c
 801008c:	00000000 	.word	0x00000000

08010090 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 8010090:	b510      	push	{r4, lr}
  /*Reset necessary Pins */
  palSetPadMode(SPI_WIFI_CS_PORT,SPI_WIFI_CS_PIN,PAL_MODE_RESET);
 8010092:	4c1c      	ldr	r4, [pc, #112]	; (8010104 <init_chip_pins+0x74>)
 8010094:	2200      	movs	r2, #0
 8010096:	f44f 7180 	mov.w	r1, #256	; 0x100
 801009a:	4620      	mov	r0, r4
 801009c:	f7f4 ff50 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN,PAL_MODE_RESET);
 80100a0:	2200      	movs	r2, #0
 80100a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80100a6:	4620      	mov	r0, r4
 80100a8:	f7f4 ff4a 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_WAKE_PORT,CONF_WINC_WAKE_PIN,PAL_MODE_RESET);
 80100ac:	2200      	movs	r2, #0
 80100ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80100b2:	4620      	mov	r0, r4
 80100b4:	f7f4 ff44 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN,PAL_MODE_RESET);
 80100b8:	2200      	movs	r2, #0
 80100ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80100be:	4620      	mov	r0, r4
 80100c0:	f7f4 ff3e 	bl	8004f40 <_pal_lld_setgroupmode>

  /*Configure GPIO pin : SPI_CS_Pin */
  palSetPadMode(SPI_WIFI_CS_PORT,SPI_WIFI_CS_PIN,PAL_MODE_OUTPUT_PUSHPULL);
 80100c4:	2201      	movs	r2, #1
 80100c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80100ca:	4620      	mov	r0, r4
 80100cc:	f7f4 ff38 	bl	8004f40 <_pal_lld_setgroupmode>

  /*Configure GPIO pins : winc_EN_Pin winc_WAKE_Pin winc_RST_Pin */
  palSetPadMode(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN,PAL_MODE_OUTPUT_PUSHPULL);
 80100d0:	2201      	movs	r2, #1
 80100d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80100d6:	4620      	mov	r0, r4
 80100d8:	f7f4 ff32 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_WAKE_PORT,CONF_WINC_WAKE_PIN,PAL_MODE_OUTPUT_PUSHPULL);
 80100dc:	2201      	movs	r2, #1
 80100de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80100e2:	4620      	mov	r0, r4
 80100e4:	f7f4 ff2c 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN,PAL_MODE_OUTPUT_PUSHPULL);
 80100e8:	2201      	movs	r2, #1
 80100ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80100ee:	4620      	mov	r0, r4
 80100f0:	f7f4 ff26 	bl	8004f40 <_pal_lld_setgroupmode>

/*Configure GPIO pin : winc_IRQ_Pin */
  palSetPadMode(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,PAL_MODE_INPUT_PULLUP);
 80100f4:	2220      	movs	r2, #32
 80100f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80100fa:	4620      	mov	r0, r4
 80100fc:	f7f4 ff20 	bl	8004f40 <_pal_lld_setgroupmode>
}
 8010100:	bd10      	pop	{r4, pc}
 8010102:	bf00      	nop
 8010104:	40021000 	.word	0x40021000
 8010108:	f3af 8000 	nop.w
 801010c:	f3af 8000 	nop.w

08010110 <nm_bsp_deinit>:
 *	@fn		nm_bsp_deinit
 *	@brief	De-iInitialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
 8010110:	b510      	push	{r4, lr}
  palSetPadMode(SPI_WIFI_CS_PORT,SPI_WIFI_CS_PIN,PAL_MODE_RESET);
 8010112:	4c0d      	ldr	r4, [pc, #52]	; (8010148 <nm_bsp_deinit+0x38>)
 8010114:	2200      	movs	r2, #0
 8010116:	f44f 7180 	mov.w	r1, #256	; 0x100
 801011a:	4620      	mov	r0, r4
 801011c:	f7f4 ff10 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN,PAL_MODE_RESET);
 8010120:	2200      	movs	r2, #0
 8010122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010126:	4620      	mov	r0, r4
 8010128:	f7f4 ff0a 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_WAKE_PORT,CONF_WINC_WAKE_PIN,PAL_MODE_RESET);
 801012c:	2200      	movs	r2, #0
 801012e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010132:	4620      	mov	r0, r4
 8010134:	f7f4 ff04 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN,PAL_MODE_RESET);
 8010138:	2200      	movs	r2, #0
 801013a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801013e:	4620      	mov	r0, r4
 8010140:	f7f4 fefe 	bl	8004f40 <_pal_lld_setgroupmode>
  return M2M_SUCCESS;
}
 8010144:	2000      	movs	r0, #0
 8010146:	bd10      	pop	{r4, pc}
 8010148:	40021000 	.word	0x40021000
 801014c:	f3af 8000 	nop.w

08010150 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 8010150:	b538      	push	{r3, r4, r5, lr}
  chThdSleepMilliseconds(u32TimeMsec);
 8010152:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010156:	2300      	movs	r3, #0
 8010158:	4906      	ldr	r1, [pc, #24]	; (8010174 <nm_bsp_sleep+0x24>)
 801015a:	f240 34e7 	movw	r4, #999	; 0x3e7
 801015e:	2500      	movs	r5, #0
 8010160:	fbe1 4500 	umlal	r4, r5, r1, r0
 8010164:	4620      	mov	r0, r4
 8010166:	4629      	mov	r1, r5
 8010168:	f007 fd7a 	bl	8017c60 <__aeabi_uldivmod>
 801016c:	f7f8 fcd0 	bl	8008b10 <chThdSleep>
}
 8010170:	bd38      	pop	{r3, r4, r5, pc}
 8010172:	bf00      	nop
 8010174:	000186a0 	.word	0x000186a0
 8010178:	f3af 8000 	nop.w
 801017c:	f3af 8000 	nop.w

08010180 <nm_bsp_reset>:
{
 8010180:	b570      	push	{r4, r5, r6, lr}
  palClearPad(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN);
 8010182:	4c09      	ldr	r4, [pc, #36]	; (80101a8 <nm_bsp_reset+0x28>)
 8010184:	f44f 7600 	mov.w	r6, #512	; 0x200
 8010188:	8366      	strh	r6, [r4, #26]
  palClearPad(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN);
 801018a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 801018e:	8365      	strh	r5, [r4, #26]
  nm_bsp_sleep(10);
 8010190:	200a      	movs	r0, #10
 8010192:	f7ff ffdd 	bl	8010150 <nm_bsp_sleep>
  palSetPad(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN);
 8010196:	8326      	strh	r6, [r4, #24]
  nm_bsp_sleep(10);
 8010198:	200a      	movs	r0, #10
 801019a:	f7ff ffd9 	bl	8010150 <nm_bsp_sleep>
  palSetPad(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN);
 801019e:	8325      	strh	r5, [r4, #24]
  nm_bsp_sleep(10);
 80101a0:	200a      	movs	r0, #10
 80101a2:	f7ff ffd5 	bl	8010150 <nm_bsp_sleep>
}
 80101a6:	bd70      	pop	{r4, r5, r6, pc}
 80101a8:	40021000 	.word	0x40021000
 80101ac:	f3af 8000 	nop.w

080101b0 <nm_bsp_init>:
{
 80101b0:	b508      	push	{r3, lr}
	init_chip_pins();
 80101b2:	f7ff ff6d 	bl	8010090 <init_chip_pins>
	nm_bsp_reset();
 80101b6:	f7ff ffe3 	bl	8010180 <nm_bsp_reset>
}
 80101ba:	2000      	movs	r0, #0
 80101bc:	bd08      	pop	{r3, pc}
 80101be:	bf00      	nop

080101c0 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 80101c0:	b510      	push	{r4, lr}
 80101c2:	2320      	movs	r3, #32
 80101c4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80101c8:	f7f8 ff2a 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80101cc:	f7f7 fc28 	bl	8007a20 <_dbg_check_lock>
  /* Initializing ISR function - called from nm_bsp_register_isr() */
  palEnablePadEvent(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,PAL_EVENT_MODE_FALLING_EDGE);
 80101d0:	2202      	movs	r2, #2
 80101d2:	210c      	movs	r1, #12
 80101d4:	481c      	ldr	r0, [pc, #112]	; (8010248 <nm_bsp_register_isr+0x88>)
 80101d6:	f7f4 ff2b 	bl	8005030 <_pal_lld_enablepadevent>
  _dbg_check_unlock();
 80101da:	f7f7 fc39 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80101de:	f7f8 ff27 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80101e2:	4b1a      	ldr	r3, [pc, #104]	; (801024c <nm_bsp_register_isr+0x8c>)
 80101e4:	681a      	ldr	r2, [r3, #0]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d004      	beq.n	80101f4 <nm_bsp_register_isr+0x34>
 80101ea:	699b      	ldr	r3, [r3, #24]
 80101ec:	6899      	ldr	r1, [r3, #8]
 80101ee:	6893      	ldr	r3, [r2, #8]
 80101f0:	4299      	cmp	r1, r3
 80101f2:	d320      	bcc.n	8010236 <nm_bsp_register_isr+0x76>
 80101f4:	2400      	movs	r4, #0
 80101f6:	f384 8811 	msr	BASEPRI, r4
 80101fa:	2320      	movs	r3, #32
 80101fc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8010200:	f7f8 ff0e 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8010204:	f7f7 fc0c 	bl	8007a20 <_dbg_check_lock>
  palSetPadCallback(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,isr,NULL);
 8010208:	4623      	mov	r3, r4
 801020a:	4a11      	ldr	r2, [pc, #68]	; (8010250 <nm_bsp_register_isr+0x90>)
 801020c:	210c      	movs	r1, #12
 801020e:	480e      	ldr	r0, [pc, #56]	; (8010248 <nm_bsp_register_isr+0x88>)
 8010210:	f7f2 f83e 	bl	8002290 <palSetPadCallbackI>
  _dbg_check_unlock();
 8010214:	f7f7 fc1c 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8010218:	f7f8 ff0a 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 801021c:	4b0b      	ldr	r3, [pc, #44]	; (801024c <nm_bsp_register_isr+0x8c>)
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	429a      	cmp	r2, r3
 8010222:	d004      	beq.n	801022e <nm_bsp_register_isr+0x6e>
 8010224:	699b      	ldr	r3, [r3, #24]
 8010226:	6899      	ldr	r1, [r3, #8]
 8010228:	6893      	ldr	r3, [r2, #8]
 801022a:	4299      	cmp	r1, r3
 801022c:	d307      	bcc.n	801023e <nm_bsp_register_isr+0x7e>
 801022e:	2300      	movs	r3, #0
 8010230:	f383 8811 	msr	BASEPRI, r3
}
 8010234:	bd10      	pop	{r4, pc}
 8010236:	4807      	ldr	r0, [pc, #28]	; (8010254 <nm_bsp_register_isr+0x94>)
 8010238:	f7f7 fa62 	bl	8007700 <chSysHalt>
 801023c:	e7da      	b.n	80101f4 <nm_bsp_register_isr+0x34>
 801023e:	4805      	ldr	r0, [pc, #20]	; (8010254 <nm_bsp_register_isr+0x94>)
 8010240:	f7f7 fa5e 	bl	8007700 <chSysHalt>
 8010244:	e7f3      	b.n	801022e <nm_bsp_register_isr+0x6e>
 8010246:	bf00      	nop
 8010248:	40021000 	.word	0x40021000
 801024c:	200050f8 	.word	0x200050f8
 8010250:	08010531 	.word	0x08010531
 8010254:	0801a2bc 	.word	0x0801a2bc
 8010258:	f3af 8000 	nop.w
 801025c:	f3af 8000 	nop.w

08010260 <nm_bsp_interrupt_ctrl>:
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
	if (1 == u8Enable)
 8010260:	2801      	cmp	r0, #1
 8010262:	d004      	beq.n	801026e <nm_bsp_interrupt_ctrl+0xe>
	  palEnablePadEvent(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,PAL_EVENT_MODE_FALLING_EDGE);
      palSetPadCallback(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,isr,NULL);
	}
	else
	{
	  palClearPad(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN);
 8010264:	4b23      	ldr	r3, [pc, #140]	; (80102f4 <nm_bsp_interrupt_ctrl+0x94>)
 8010266:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801026a:	835a      	strh	r2, [r3, #26]
 801026c:	4770      	bx	lr
{
 801026e:	b510      	push	{r4, lr}
 8010270:	2320      	movs	r3, #32
 8010272:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8010276:	f7f8 fed3 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 801027a:	f7f7 fbd1 	bl	8007a20 <_dbg_check_lock>
	  palEnablePadEvent(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,PAL_EVENT_MODE_FALLING_EDGE);
 801027e:	2202      	movs	r2, #2
 8010280:	210c      	movs	r1, #12
 8010282:	481c      	ldr	r0, [pc, #112]	; (80102f4 <nm_bsp_interrupt_ctrl+0x94>)
 8010284:	f7f4 fed4 	bl	8005030 <_pal_lld_enablepadevent>
  _dbg_check_unlock();
 8010288:	f7f7 fbe2 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 801028c:	f7f8 fed0 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8010290:	4b19      	ldr	r3, [pc, #100]	; (80102f8 <nm_bsp_interrupt_ctrl+0x98>)
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	429a      	cmp	r2, r3
 8010296:	d004      	beq.n	80102a2 <nm_bsp_interrupt_ctrl+0x42>
 8010298:	699b      	ldr	r3, [r3, #24]
 801029a:	6899      	ldr	r1, [r3, #8]
 801029c:	6893      	ldr	r3, [r2, #8]
 801029e:	4299      	cmp	r1, r3
 80102a0:	d320      	bcc.n	80102e4 <nm_bsp_interrupt_ctrl+0x84>
 80102a2:	2400      	movs	r4, #0
 80102a4:	f384 8811 	msr	BASEPRI, r4
 80102a8:	2320      	movs	r3, #32
 80102aa:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80102ae:	f7f8 feb7 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80102b2:	f7f7 fbb5 	bl	8007a20 <_dbg_check_lock>
      palSetPadCallback(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,isr,NULL);
 80102b6:	4623      	mov	r3, r4
 80102b8:	4a10      	ldr	r2, [pc, #64]	; (80102fc <nm_bsp_interrupt_ctrl+0x9c>)
 80102ba:	210c      	movs	r1, #12
 80102bc:	480d      	ldr	r0, [pc, #52]	; (80102f4 <nm_bsp_interrupt_ctrl+0x94>)
 80102be:	f7f1 ffe7 	bl	8002290 <palSetPadCallbackI>
  _dbg_check_unlock();
 80102c2:	f7f7 fbc5 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80102c6:	f7f8 feb3 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80102ca:	4b0b      	ldr	r3, [pc, #44]	; (80102f8 <nm_bsp_interrupt_ctrl+0x98>)
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d004      	beq.n	80102dc <nm_bsp_interrupt_ctrl+0x7c>
 80102d2:	699b      	ldr	r3, [r3, #24]
 80102d4:	6899      	ldr	r1, [r3, #8]
 80102d6:	6893      	ldr	r3, [r2, #8]
 80102d8:	4299      	cmp	r1, r3
 80102da:	d307      	bcc.n	80102ec <nm_bsp_interrupt_ctrl+0x8c>
 80102dc:	2300      	movs	r3, #0
 80102de:	f383 8811 	msr	BASEPRI, r3
	}
}
 80102e2:	bd10      	pop	{r4, pc}
 80102e4:	4806      	ldr	r0, [pc, #24]	; (8010300 <nm_bsp_interrupt_ctrl+0xa0>)
 80102e6:	f7f7 fa0b 	bl	8007700 <chSysHalt>
 80102ea:	e7da      	b.n	80102a2 <nm_bsp_interrupt_ctrl+0x42>
 80102ec:	4804      	ldr	r0, [pc, #16]	; (8010300 <nm_bsp_interrupt_ctrl+0xa0>)
 80102ee:	f7f7 fa07 	bl	8007700 <chSysHalt>
 80102f2:	e7f3      	b.n	80102dc <nm_bsp_interrupt_ctrl+0x7c>
 80102f4:	40021000 	.word	0x40021000
 80102f8:	200050f8 	.word	0x200050f8
 80102fc:	08010531 	.word	0x08010531
 8010300:	0801a2bc 	.word	0x0801a2bc
	...

08010310 <spi_rw>:
};

static uint8 spiDummyBuf[300] = {0};

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 8010310:	b570      	push	{r4, r5, r6, lr}
 8010312:	4604      	mov	r4, r0
 8010314:	460d      	mov	r5, r1
 8010316:	4616      	mov	r6, r2
  spiSelect(&SPID2);
 8010318:	4811      	ldr	r0, [pc, #68]	; (8010360 <spi_rw+0x50>)
 801031a:	f7f3 f8c9 	bl	80034b0 <spiSelect>
	/* Transmit/Recieve */
  if (pu8Mosi == NULL)
 801031e:	b15c      	cbz	r4, 8010338 <spi_rw+0x28>
  {
    spiExchange(&SPID2,u16Sz,spiDummyBuf,pu8Miso);
  }
  else if(pu8Miso == NULL)
 8010320:	b18d      	cbz	r5, 8010346 <spi_rw+0x36>
    spiExchange(&SPID2,u16Sz,pu8Mosi,spiDummyBuf);
    memset(spiDummyBuf,0, u16Sz);
  }
  else
  {
    spiExchange(&SPID2,u16Sz,pu8Mosi,pu8Miso);
 8010322:	462b      	mov	r3, r5
 8010324:	4622      	mov	r2, r4
 8010326:	4631      	mov	r1, r6
 8010328:	480d      	ldr	r0, [pc, #52]	; (8010360 <spi_rw+0x50>)
 801032a:	f7f3 fac9 	bl	80038c0 <spiExchange>
  }

  spiUnselect(&SPID2);
 801032e:	480c      	ldr	r0, [pc, #48]	; (8010360 <spi_rw+0x50>)
 8010330:	f7f3 f8f6 	bl	8003520 <spiUnselect>
  return M2M_SUCCESS;
}
 8010334:	2000      	movs	r0, #0
 8010336:	bd70      	pop	{r4, r5, r6, pc}
    spiExchange(&SPID2,u16Sz,spiDummyBuf,pu8Miso);
 8010338:	462b      	mov	r3, r5
 801033a:	4a0a      	ldr	r2, [pc, #40]	; (8010364 <spi_rw+0x54>)
 801033c:	4631      	mov	r1, r6
 801033e:	4808      	ldr	r0, [pc, #32]	; (8010360 <spi_rw+0x50>)
 8010340:	f7f3 fabe 	bl	80038c0 <spiExchange>
 8010344:	e7f3      	b.n	801032e <spi_rw+0x1e>
    spiExchange(&SPID2,u16Sz,pu8Mosi,spiDummyBuf);
 8010346:	4d07      	ldr	r5, [pc, #28]	; (8010364 <spi_rw+0x54>)
 8010348:	462b      	mov	r3, r5
 801034a:	4622      	mov	r2, r4
 801034c:	4631      	mov	r1, r6
 801034e:	4804      	ldr	r0, [pc, #16]	; (8010360 <spi_rw+0x50>)
 8010350:	f7f3 fab6 	bl	80038c0 <spiExchange>
    memset(spiDummyBuf,0, u16Sz);
 8010354:	4632      	mov	r2, r6
 8010356:	2100      	movs	r1, #0
 8010358:	4628      	mov	r0, r5
 801035a:	f008 f8b1 	bl	80184c0 <memset>
 801035e:	e7e6      	b.n	801032e <spi_rw+0x1e>
 8010360:	2000485c 	.word	0x2000485c
 8010364:	200022d0 	.word	0x200022d0
 8010368:	f3af 8000 	nop.w
 801036c:	f3af 8000 	nop.w

08010370 <nm_bus_wifi_spi_init>:

void nm_bus_wifi_spi_init(SPIDriver *SPID)
{
 8010370:	b538      	push	{r3, r4, r5, lr}
 8010372:	4605      	mov	r5, r0
  palSetPadMode(SPI_WIFI_MISO_PORT, SPI_WIFI_MISO_PIN,PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 8010374:	4c0c      	ldr	r4, [pc, #48]	; (80103a8 <nm_bus_wifi_spi_init+0x38>)
 8010376:	f240 229a 	movw	r2, #666	; 0x29a
 801037a:	2104      	movs	r1, #4
 801037c:	4620      	mov	r0, r4
 801037e:	f7f4 fddf 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_WIFI_MOSI_PORT, SPI_WIFI_MOSI_PIN,PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 8010382:	f240 229a 	movw	r2, #666	; 0x29a
 8010386:	2108      	movs	r1, #8
 8010388:	4620      	mov	r0, r4
 801038a:	f7f4 fdd9 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_WIFI_SCK_PORT, SPI_WIFI_SCK_PIN,PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 801038e:	f240 229a 	movw	r2, #666	; 0x29a
 8010392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010396:	4805      	ldr	r0, [pc, #20]	; (80103ac <nm_bus_wifi_spi_init+0x3c>)
 8010398:	f7f4 fdd2 	bl	8004f40 <_pal_lld_setgroupmode>

  spiStart(SPID,&spicfg);
 801039c:	4904      	ldr	r1, [pc, #16]	; (80103b0 <nm_bus_wifi_spi_init+0x40>)
 801039e:	4628      	mov	r0, r5
 80103a0:	f7f3 f80e 	bl	80033c0 <spiStart>
}
 80103a4:	bd38      	pop	{r3, r4, r5, pc}
 80103a6:	bf00      	nop
 80103a8:	40020800 	.word	0x40020800
 80103ac:	40020400 	.word	0x40020400
 80103b0:	0801a2c8 	.word	0x0801a2c8
 80103b4:	f3af 8000 	nop.w
 80103b8:	f3af 8000 	nop.w
 80103bc:	f3af 8000 	nop.w

080103c0 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 80103c0:	b508      	push	{r3, lr}
	/* SPI2 parameter configuration*/
	nm_bus_wifi_spi_init(&SPID2);
 80103c2:	4802      	ldr	r0, [pc, #8]	; (80103cc <nm_bus_init+0xc>)
 80103c4:	f7ff ffd4 	bl	8010370 <nm_bus_wifi_spi_init>
	return M2M_SUCCESS;
}
 80103c8:	2000      	movs	r0, #0
 80103ca:	bd08      	pop	{r3, pc}
 80103cc:	2000485c 	.word	0x2000485c

080103d0 <nm_bus_ioctl>:
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
	sint8 s8Ret = 0;
	switch(u8Cmd)
 80103d0:	2803      	cmp	r0, #3
 80103d2:	d107      	bne.n	80103e4 <nm_bus_ioctl+0x14>
{
 80103d4:	b508      	push	{r3, lr}
 80103d6:	460b      	mov	r3, r1
	{
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
 80103d8:	890a      	ldrh	r2, [r1, #8]
 80103da:	6849      	ldr	r1, [r1, #4]
 80103dc:	6818      	ldr	r0, [r3, #0]
 80103de:	f7ff ff97 	bl	8010310 <spi_rw>
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
 80103e2:	bd08      	pop	{r3, pc}
			s8Ret = -1;
 80103e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop
 80103ec:	f3af 8000 	nop.w

080103f0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 80103f0:	b508      	push	{r3, lr}
	spiStop(&SPID2);
 80103f2:	4802      	ldr	r0, [pc, #8]	; (80103fc <nm_bus_deinit+0xc>)
 80103f4:	f7f3 f824 	bl	8003440 <spiStop>
	return M2M_SUCCESS;
}
 80103f8:	2000      	movs	r0, #0
 80103fa:	bd08      	pop	{r3, pc}
 80103fc:	2000485c 	.word	0x2000485c

08010400 <nm_bus_reinit>:
*/
sint8 nm_bus_reinit(void* config)
{
  (void)config;
	return M2M_SUCCESS;
}
 8010400:	2000      	movs	r0, #0
 8010402:	4770      	bx	lr
	...

08010410 <m2m_memcpy>:
 */
#include "winc1500/common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
 8010410:	4613      	mov	r3, r2
 8010412:	b12a      	cbz	r2, 8010420 <m2m_memcpy+0x10>
	do
	{
		*pDst = *pSrc;
 8010414:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010418:	f800 2b01 	strb.w	r2, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
 801041c:	3b01      	subs	r3, #1
 801041e:	d1f9      	bne.n	8010414 <m2m_memcpy+0x4>
}
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop
 8010424:	f3af 8000 	nop.w
 8010428:	f3af 8000 	nop.w
 801042c:	f3af 8000 	nop.w

08010430 <m2m_checksum>:
uint8 m2m_checksum(uint8* buf, int sz)
{
	uint8 cs = 0;
 8010430:	2300      	movs	r3, #0
	while(--sz)
 8010432:	e002      	b.n	801043a <m2m_checksum+0xa>
	{
		cs ^= *buf;
 8010434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010438:	4053      	eors	r3, r2
	while(--sz)
 801043a:	3901      	subs	r1, #1
 801043c:	d1fa      	bne.n	8010434 <m2m_checksum+0x4>
		buf++;
	}

	return cs;
}
 801043e:	4618      	mov	r0, r3
 8010440:	4770      	bx	lr
 8010442:	bf00      	nop
 8010444:	f3af 8000 	nop.w
 8010448:	f3af 8000 	nop.w
 801044c:	f3af 8000 	nop.w

08010450 <m2m_memset>:

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
 8010450:	4613      	mov	r3, r2
 8010452:	b11a      	cbz	r2, 801045c <m2m_memset+0xc>
	do
	{
		*pBuf = val;
 8010454:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
 8010458:	3b01      	subs	r3, #1
 801045a:	d1fb      	bne.n	8010454 <m2m_memset+0x4>
}
 801045c:	4770      	bx	lr
 801045e:	bf00      	nop

08010460 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
 8010460:	2300      	movs	r3, #0
	while(*pcStr)
 8010462:	e002      	b.n	801046a <m2m_strlen+0xa>
	{
		u16StrLen ++;
 8010464:	3301      	adds	r3, #1
 8010466:	b29b      	uxth	r3, r3
		pcStr++;
 8010468:	3001      	adds	r0, #1
	while(*pcStr)
 801046a:	7802      	ldrb	r2, [r0, #0]
 801046c:	2a00      	cmp	r2, #0
 801046e:	d1f9      	bne.n	8010464 <m2m_strlen+0x4>
	}
	return u16StrLen;
}
 8010470:	4618      	mov	r0, r3
 8010472:	4770      	bx	lr
 8010474:	f3af 8000 	nop.w
 8010478:	f3af 8000 	nop.w
 801047c:	f3af 8000 	nop.w

08010480 <m2m_strncmp>:

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
 8010480:	b1a2      	cbz	r2, 80104ac <m2m_strncmp+0x2c>
{
 8010482:	b410      	push	{r4}
	if (*pcS1 != *pcS2)
 8010484:	7803      	ldrb	r3, [r0, #0]
 8010486:	780c      	ldrb	r4, [r1, #0]
 8010488:	42a3      	cmp	r3, r4
 801048a:	d10a      	bne.n	80104a2 <m2m_strncmp+0x22>
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
	else if (*pcS1 == '\0')
 801048c:	b133      	cbz	r3, 801049c <m2m_strncmp+0x1c>
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
 801048e:	3001      	adds	r0, #1
 8010490:	3101      	adds	r1, #1
 8010492:	3a01      	subs	r2, #1
 8010494:	b292      	uxth	r2, r2
 8010496:	2a00      	cmp	r2, #0
 8010498:	d1f4      	bne.n	8010484 <m2m_strncmp+0x4>
	    return 0;
    return 0;
 801049a:	2300      	movs	r3, #0
}
 801049c:	4618      	mov	r0, r3
 801049e:	bc10      	pop	{r4}
 80104a0:	4770      	bx	lr
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
 80104a2:	d301      	bcc.n	80104a8 <m2m_strncmp+0x28>
 80104a4:	2301      	movs	r3, #1
 80104a6:	e7f9      	b.n	801049c <m2m_strncmp+0x1c>
 80104a8:	23ff      	movs	r3, #255	; 0xff
 80104aa:	e7f7      	b.n	801049c <m2m_strncmp+0x1c>
    return 0;
 80104ac:	2300      	movs	r3, #0
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop
 80104b4:	f3af 8000 	nop.w
 80104b8:	f3af 8000 	nop.w
 80104bc:	f3af 8000 	nop.w

080104c0 <m2m_strstr>:
/* Finds the occurance of pcStr in pcIn.
If pcStr is part of pcIn it returns a valid pointer to the start of pcStr within pcIn.
Otherwise a NULL Pointer is returned.
*/
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
 80104c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c4:	4604      	mov	r4, r0
    uint8 u8c;
    uint16 u16StrLen;

    u8c = *pcStr++;
 80104c6:	780e      	ldrb	r6, [r1, #0]
    if (!u8c)
 80104c8:	b916      	cbnz	r6, 80104d0 <m2m_strstr+0x10>
                return (uint8 *) 0;
        } while (u8Sc != u8c);
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);

    return (uint8 *) (pcIn - 1);
}
 80104ca:	4620      	mov	r0, r4
 80104cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104d0:	1c4f      	adds	r7, r1, #1
    u16StrLen = m2m_strlen(pcStr);
 80104d2:	4638      	mov	r0, r7
 80104d4:	f7ff ffc4 	bl	8010460 <m2m_strlen>
 80104d8:	4680      	mov	r8, r0
 80104da:	e000      	b.n	80104de <m2m_strstr+0x1e>
{
 80104dc:	462c      	mov	r4, r5
            u8Sc = *pcIn++;
 80104de:	1c65      	adds	r5, r4, #1
 80104e0:	7823      	ldrb	r3, [r4, #0]
            if (!u8Sc)
 80104e2:	b14b      	cbz	r3, 80104f8 <m2m_strstr+0x38>
        } while (u8Sc != u8c);
 80104e4:	429e      	cmp	r6, r3
 80104e6:	d1f9      	bne.n	80104dc <m2m_strstr+0x1c>
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);
 80104e8:	4642      	mov	r2, r8
 80104ea:	4639      	mov	r1, r7
 80104ec:	4628      	mov	r0, r5
 80104ee:	f7ff ffc7 	bl	8010480 <m2m_strncmp>
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d1f2      	bne.n	80104dc <m2m_strstr+0x1c>
 80104f6:	e7e8      	b.n	80104ca <m2m_strstr+0xa>
                return (uint8 *) 0;
 80104f8:	2400      	movs	r4, #0
 80104fa:	e7e6      	b.n	80104ca <m2m_strstr+0xa>
 80104fc:	f3af 8000 	nop.w

08010500 <m2m_memcmp>:

sint8 m2m_memcmp(uint8 *pu8Buff1,uint8 *pu8Buff2 ,uint32 u32Size)
{
	uint32	i;
	sint8		s8Result = 0;
	for(i	 = 0 ; i < u32Size ; i++)
 8010500:	2300      	movs	r3, #0
 8010502:	4293      	cmp	r3, r2
 8010504:	d20c      	bcs.n	8010520 <m2m_memcmp+0x20>
{
 8010506:	b430      	push	{r4, r5}
	{
		if(pu8Buff1[i] != pu8Buff2[i])
 8010508:	5cc5      	ldrb	r5, [r0, r3]
 801050a:	5ccc      	ldrb	r4, [r1, r3]
 801050c:	42a5      	cmp	r5, r4
 801050e:	d105      	bne.n	801051c <m2m_memcmp+0x1c>
	for(i	 = 0 ; i < u32Size ; i++)
 8010510:	3301      	adds	r3, #1
 8010512:	4293      	cmp	r3, r2
 8010514:	d3f8      	bcc.n	8010508 <m2m_memcmp+0x8>
	sint8		s8Result = 0;
 8010516:	2000      	movs	r0, #0
			s8Result = 1;
			break;
		}
	}
	return s8Result;
}
 8010518:	bc30      	pop	{r4, r5}
 801051a:	4770      	bx	lr
			s8Result = 1;
 801051c:	2001      	movs	r0, #1
 801051e:	e7fb      	b.n	8010518 <m2m_memcmp+0x18>
	sint8		s8Result = 0;
 8010520:	2000      	movs	r0, #0
}
 8010522:	4770      	bx	lr
	...

08010530 <isr>:

volatile tstrHifContext gstrHifCxt;

void isr(void)
{
	gstrHifCxt.u8Interrupt++;
 8010530:	4a02      	ldr	r2, [pc, #8]	; (801053c <isr+0xc>)
 8010532:	78d3      	ldrb	r3, [r2, #3]
 8010534:	3301      	adds	r3, #1
 8010536:	b2db      	uxtb	r3, r3
 8010538:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 801053a:	4770      	bx	lr
 801053c:	20005a3c 	.word	0x20005a3c

08010540 <m2m_hif_cb>:
{
  (void)u8OpCode;
  (void)u16DataSize;
  (void)u32Addr;

}
 8010540:	4770      	bx	lr
 8010542:	bf00      	nop
 8010544:	f3af 8000 	nop.w
 8010548:	f3af 8000 	nop.w
 801054c:	f3af 8000 	nop.w

08010550 <hif_set_rx_done>:
{
 8010550:	b500      	push	{lr}
 8010552:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
 8010554:	4b0d      	ldr	r3, [pc, #52]	; (801058c <hif_set_rx_done+0x3c>)
 8010556:	2200      	movs	r2, #0
 8010558:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
 801055a:	2001      	movs	r0, #1
 801055c:	f7ff fe80 	bl	8010260 <nm_bsp_interrupt_ctrl>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 8010560:	a901      	add	r1, sp, #4
 8010562:	f241 0070 	movw	r0, #4208	; 0x1070
 8010566:	f002 f823 	bl	80125b0 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS)goto ERR1;
 801056a:	4603      	mov	r3, r0
 801056c:	b118      	cbz	r0, 8010576 <hif_set_rx_done+0x26>
}
 801056e:	4618      	mov	r0, r3
 8010570:	b003      	add	sp, #12
 8010572:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= NBIT1;
 8010576:	9901      	ldr	r1, [sp, #4]
 8010578:	f041 0102 	orr.w	r1, r1, #2
 801057c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 801057e:	f241 0070 	movw	r0, #4208	; 0x1070
 8010582:	f002 f81d 	bl	80125c0 <nm_write_reg>
 8010586:	4603      	mov	r3, r0
ERR1:
 8010588:	e7f1      	b.n	801056e <hif_set_rx_done+0x1e>
 801058a:	bf00      	nop
 801058c:	20005a3c 	.word	0x20005a3c

08010590 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
 8010590:	b530      	push	{r4, r5, lr}
 8010592:	b085      	sub	sp, #20
    uint16 temp;
	sint8 ret = M2M_SUCCESS;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 8010594:	a903      	add	r1, sp, #12
 8010596:	f241 0070 	movw	r0, #4208	; 0x1070
 801059a:	f002 f809 	bl	80125b0 <nm_read_reg_with_ret>
	if(M2M_SUCCESS == ret)
 801059e:	4604      	mov	r4, r0
 80105a0:	bb30      	cbnz	r0, 80105f0 <hif_isr+0x60>
	{
		if(reg & 0x1)	/* New interrupt has been received */
 80105a2:	9b03      	ldr	r3, [sp, #12]
 80105a4:	f013 0f01 	tst.w	r3, #1
 80105a8:	f000 80cf 	beq.w	801074a <hif_isr+0x1ba>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
 80105ac:	f7ff fe58 	bl	8010260 <nm_bsp_interrupt_ctrl>
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
 80105b0:	9903      	ldr	r1, [sp, #12]
 80105b2:	f021 0101 	bic.w	r1, r1, #1
 80105b6:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 80105b8:	f241 0070 	movw	r0, #4208	; 0x1070
 80105bc:	f002 f800 	bl	80125c0 <nm_write_reg>
			if(ret != M2M_SUCCESS)goto ERR1;
 80105c0:	4604      	mov	r4, r0
 80105c2:	b9a8      	cbnz	r0, 80105f0 <hif_isr+0x60>
			gstrHifCxt.u8HifRXDone = 1;
 80105c4:	4b64      	ldr	r3, [pc, #400]	; (8010758 <hif_isr+0x1c8>)
 80105c6:	2201      	movs	r2, #1
 80105c8:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
 80105ca:	9d03      	ldr	r5, [sp, #12]
 80105cc:	f3c5 058b 	ubfx	r5, r5, #2, #12
			if (size > 0) {
 80105d0:	2d00      	cmp	r5, #0
 80105d2:	f000 80bd 	beq.w	8010750 <hif_isr+0x1c0>
				uint32 address = 0;
 80105d6:	a904      	add	r1, sp, #16
 80105d8:	2300      	movs	r3, #0
 80105da:	f841 3d0c 	str.w	r3, [r1, #-12]!
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 80105de:	f241 0084 	movw	r0, #4228	; 0x1084
 80105e2:	f001 ffe5 	bl	80125b0 <nm_read_reg_with_ret>
				if(M2M_SUCCESS != ret)
 80105e6:	4604      	mov	r4, r0
 80105e8:	b128      	cbz	r0, 80105f6 <hif_isr+0x66>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					nm_bsp_interrupt_ctrl(1);
 80105ea:	2001      	movs	r0, #1
 80105ec:	f7ff fe38 	bl	8010260 <nm_bsp_interrupt_ctrl>
		goto ERR1;
	}

ERR1:
	return ret;
}
 80105f0:	4620      	mov	r0, r4
 80105f2:	b005      	add	sp, #20
 80105f4:	bd30      	pop	{r4, r5, pc}
				gstrHifCxt.u32RxAddr = address;
 80105f6:	9801      	ldr	r0, [sp, #4]
 80105f8:	4b57      	ldr	r3, [pc, #348]	; (8010758 <hif_isr+0x1c8>)
 80105fa:	6058      	str	r0, [r3, #4]
				gstrHifCxt.u32RxSize = size;
 80105fc:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 80105fe:	2204      	movs	r2, #4
 8010600:	a902      	add	r1, sp, #8
 8010602:	f001 ffe5 	bl	80125d0 <nm_read_block>
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 8010606:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801060a:	b29b      	uxth	r3, r3
 801060c:	f8ad 300a 	strh.w	r3, [sp, #10]
				if(M2M_SUCCESS != ret)
 8010610:	4604      	mov	r4, r0
 8010612:	bb50      	cbnz	r0, 801066a <hif_isr+0xda>
				if(strHif.u16Length != size)
 8010614:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010618:	b29b      	uxth	r3, r3
 801061a:	42ab      	cmp	r3, r5
 801061c:	d004      	beq.n	8010628 <hif_isr+0x98>
					if((size - strHif.u16Length) > 4)
 801061e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010622:	1aed      	subs	r5, r5, r3
 8010624:	2d04      	cmp	r5, #4
 8010626:	dc24      	bgt.n	8010672 <hif_isr+0xe2>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 8010628:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b01      	cmp	r3, #1
 8010630:	d025      	beq.n	801067e <hif_isr+0xee>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 8010632:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010636:	b2db      	uxtb	r3, r3
 8010638:	2b02      	cmp	r3, #2
 801063a:	d036      	beq.n	80106aa <hif_isr+0x11a>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 801063c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010640:	b2db      	uxtb	r3, r3
 8010642:	2b04      	cmp	r3, #4
 8010644:	d041      	beq.n	80106ca <hif_isr+0x13a>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 8010646:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801064a:	b2db      	uxtb	r3, r3
 801064c:	2b06      	cmp	r3, #6
 801064e:	d04c      	beq.n	80106ea <hif_isr+0x15a>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 8010650:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010654:	b2db      	uxtb	r3, r3
 8010656:	2b07      	cmp	r3, #7
 8010658:	d057      	beq.n	801070a <hif_isr+0x17a>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 801065a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801065e:	b2db      	uxtb	r3, r3
 8010660:	2b05      	cmp	r3, #5
 8010662:	d062      	beq.n	801072a <hif_isr+0x19a>
					ret = M2M_ERR_BUS_FAIL;
 8010664:	f06f 0405 	mvn.w	r4, #5
 8010668:	e7c2      	b.n	80105f0 <hif_isr+0x60>
					nm_bsp_interrupt_ctrl(1);
 801066a:	2001      	movs	r0, #1
 801066c:	f7ff fdf8 	bl	8010260 <nm_bsp_interrupt_ctrl>
					goto ERR1;
 8010670:	e7be      	b.n	80105f0 <hif_isr+0x60>
						nm_bsp_interrupt_ctrl(1);
 8010672:	2001      	movs	r0, #1
 8010674:	f7ff fdf4 	bl	8010260 <nm_bsp_interrupt_ctrl>
						ret = M2M_ERR_BUS_FAIL;
 8010678:	f06f 0405 	mvn.w	r4, #5
						goto ERR1;
 801067c:	e7b8      	b.n	80105f0 <hif_isr+0x60>
					if(gstrHifCxt.pfWifiCb)
 801067e:	4b36      	ldr	r3, [pc, #216]	; (8010758 <hif_isr+0x1c8>)
 8010680:	68db      	ldr	r3, [r3, #12]
 8010682:	b153      	cbz	r3, 801069a <hif_isr+0x10a>
                        temp = (uint16)strHif.u16Length;
 8010684:	f8bd 100a 	ldrh.w	r1, [sp, #10]
						gstrHifCxt.pfWifiCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8010688:	4b33      	ldr	r3, [pc, #204]	; (8010758 <hif_isr+0x1c8>)
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8010690:	3908      	subs	r1, #8
 8010692:	9a01      	ldr	r2, [sp, #4]
 8010694:	3208      	adds	r2, #8
 8010696:	b289      	uxth	r1, r1
 8010698:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
 801069a:	4b2f      	ldr	r3, [pc, #188]	; (8010758 <hif_isr+0x1c8>)
 801069c:	789b      	ldrb	r3, [r3, #2]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d0a6      	beq.n	80105f0 <hif_isr+0x60>
					ret = hif_set_rx_done();
 80106a2:	f7ff ff55 	bl	8010550 <hif_set_rx_done>
 80106a6:	4604      	mov	r4, r0
 80106a8:	e7a2      	b.n	80105f0 <hif_isr+0x60>
					if(gstrHifCxt.pfIpCb)
 80106aa:	4b2b      	ldr	r3, [pc, #172]	; (8010758 <hif_isr+0x1c8>)
 80106ac:	691b      	ldr	r3, [r3, #16]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d0f3      	beq.n	801069a <hif_isr+0x10a>
                        temp = (uint16)strHif.u16Length;
 80106b2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
						gstrHifCxt.pfIpCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 80106b6:	4b28      	ldr	r3, [pc, #160]	; (8010758 <hif_isr+0x1c8>)
 80106b8:	691b      	ldr	r3, [r3, #16]
 80106ba:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80106be:	3908      	subs	r1, #8
 80106c0:	9a01      	ldr	r2, [sp, #4]
 80106c2:	3208      	adds	r2, #8
 80106c4:	b289      	uxth	r1, r1
 80106c6:	4798      	blx	r3
 80106c8:	e7e7      	b.n	801069a <hif_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
 80106ca:	4b23      	ldr	r3, [pc, #140]	; (8010758 <hif_isr+0x1c8>)
 80106cc:	695b      	ldr	r3, [r3, #20]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d0e3      	beq.n	801069a <hif_isr+0x10a>
                            temp = (uint16)strHif.u16Length;
 80106d2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
						gstrHifCxt.pfOtaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 80106d6:	4b20      	ldr	r3, [pc, #128]	; (8010758 <hif_isr+0x1c8>)
 80106d8:	695b      	ldr	r3, [r3, #20]
 80106da:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80106de:	3908      	subs	r1, #8
 80106e0:	9a01      	ldr	r2, [sp, #4]
 80106e2:	3208      	adds	r2, #8
 80106e4:	b289      	uxth	r1, r1
 80106e6:	4798      	blx	r3
 80106e8:	e7d7      	b.n	801069a <hif_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
 80106ea:	4b1b      	ldr	r3, [pc, #108]	; (8010758 <hif_isr+0x1c8>)
 80106ec:	6a1b      	ldr	r3, [r3, #32]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d0d3      	beq.n	801069a <hif_isr+0x10a>
                        temp = (uint16)strHif.u16Length;
 80106f2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 80106f6:	4b18      	ldr	r3, [pc, #96]	; (8010758 <hif_isr+0x1c8>)
 80106f8:	6a1b      	ldr	r3, [r3, #32]
 80106fa:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80106fe:	3908      	subs	r1, #8
 8010700:	9a01      	ldr	r2, [sp, #4]
 8010702:	3208      	adds	r2, #8
 8010704:	b289      	uxth	r1, r1
 8010706:	4798      	blx	r3
 8010708:	e7c7      	b.n	801069a <hif_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
 801070a:	4b13      	ldr	r3, [pc, #76]	; (8010758 <hif_isr+0x1c8>)
 801070c:	699b      	ldr	r3, [r3, #24]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d0c3      	beq.n	801069a <hif_isr+0x10a>
                        temp = (uint16)strHif.u16Length;
 8010712:	f8bd 100a 	ldrh.w	r1, [sp, #10]
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8010716:	4b10      	ldr	r3, [pc, #64]	; (8010758 <hif_isr+0x1c8>)
 8010718:	699b      	ldr	r3, [r3, #24]
 801071a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 801071e:	3908      	subs	r1, #8
 8010720:	9a01      	ldr	r2, [sp, #4]
 8010722:	3208      	adds	r2, #8
 8010724:	b289      	uxth	r1, r1
 8010726:	4798      	blx	r3
 8010728:	e7b7      	b.n	801069a <hif_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
 801072a:	4b0b      	ldr	r3, [pc, #44]	; (8010758 <hif_isr+0x1c8>)
 801072c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801072e:	2b00      	cmp	r3, #0
 8010730:	d0b3      	beq.n	801069a <hif_isr+0x10a>
					    temp = (uint16)strHif.u16Length;
 8010732:	f8bd 100a 	ldrh.w	r1, [sp, #10]
						gstrHifCxt.pfSslCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8010736:	4b08      	ldr	r3, [pc, #32]	; (8010758 <hif_isr+0x1c8>)
 8010738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801073a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 801073e:	3908      	subs	r1, #8
 8010740:	9a01      	ldr	r2, [sp, #4]
 8010742:	3208      	adds	r2, #8
 8010744:	b289      	uxth	r1, r1
 8010746:	4798      	blx	r3
 8010748:	e7a7      	b.n	801069a <hif_isr+0x10a>
			ret = M2M_ERR_FAIL;
 801074a:	f06f 040b 	mvn.w	r4, #11
 801074e:	e74f      	b.n	80105f0 <hif_isr+0x60>
				ret = M2M_ERR_RCV;
 8010750:	f06f 0401 	mvn.w	r4, #1
 8010754:	e74c      	b.n	80105f0 <hif_isr+0x60>
 8010756:	bf00      	nop
 8010758:	20005a3c 	.word	0x20005a3c
 801075c:	f3af 8000 	nop.w

08010760 <hif_chip_wake>:
{
 8010760:	b508      	push	{r3, lr}
	if(gstrHifCxt.u8HifRXDone)
 8010762:	4b0d      	ldr	r3, [pc, #52]	; (8010798 <hif_chip_wake+0x38>)
 8010764:	789b      	ldrb	r3, [r3, #2]
 8010766:	b9a3      	cbnz	r3, 8010792 <hif_chip_wake+0x32>
	if(gstrHifCxt.u8ChipSleep == 0)
 8010768:	4b0b      	ldr	r3, [pc, #44]	; (8010798 <hif_chip_wake+0x38>)
 801076a:	785b      	ldrb	r3, [r3, #1]
 801076c:	b94b      	cbnz	r3, 8010782 <hif_chip_wake+0x22>
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 801076e:	4b0a      	ldr	r3, [pc, #40]	; (8010798 <hif_chip_wake+0x38>)
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	b90b      	cbnz	r3, 8010778 <hif_chip_wake+0x18>
	sint8 ret = M2M_SUCCESS;
 8010774:	2200      	movs	r2, #0
 8010776:	e005      	b.n	8010784 <hif_chip_wake+0x24>
			ret = chip_wake();
 8010778:	f001 fcf2 	bl	8012160 <chip_wake>
			if(ret != M2M_SUCCESS)goto ERR1;
 801077c:	4602      	mov	r2, r0
 801077e:	b108      	cbz	r0, 8010784 <hif_chip_wake+0x24>
 8010780:	e005      	b.n	801078e <hif_chip_wake+0x2e>
	sint8 ret = M2M_SUCCESS;
 8010782:	2200      	movs	r2, #0
	gstrHifCxt.u8ChipSleep++;
 8010784:	4904      	ldr	r1, [pc, #16]	; (8010798 <hif_chip_wake+0x38>)
 8010786:	784b      	ldrb	r3, [r1, #1]
 8010788:	3301      	adds	r3, #1
 801078a:	b2db      	uxtb	r3, r3
 801078c:	704b      	strb	r3, [r1, #1]
}
 801078e:	4610      	mov	r0, r2
 8010790:	bd08      	pop	{r3, pc}
		return ret;
 8010792:	2200      	movs	r2, #0
 8010794:	e7fb      	b.n	801078e <hif_chip_wake+0x2e>
 8010796:	bf00      	nop
 8010798:	20005a3c 	.word	0x20005a3c
 801079c:	f3af 8000 	nop.w

080107a0 <hif_set_sleep_mode>:
	gstrHifCxt.u8ChipMode = u8Pstype;
 80107a0:	4b01      	ldr	r3, [pc, #4]	; (80107a8 <hif_set_sleep_mode+0x8>)
 80107a2:	7018      	strb	r0, [r3, #0]
}
 80107a4:	4770      	bx	lr
 80107a6:	bf00      	nop
 80107a8:	20005a3c 	.word	0x20005a3c
 80107ac:	f3af 8000 	nop.w

080107b0 <hif_get_sleep_mode>:
	return gstrHifCxt.u8ChipMode;
 80107b0:	4b01      	ldr	r3, [pc, #4]	; (80107b8 <hif_get_sleep_mode+0x8>)
 80107b2:	7818      	ldrb	r0, [r3, #0]
}
 80107b4:	4770      	bx	lr
 80107b6:	bf00      	nop
 80107b8:	20005a3c 	.word	0x20005a3c
 80107bc:	f3af 8000 	nop.w

080107c0 <hif_chip_sleep_sc>:
	if(gstrHifCxt.u8ChipSleep >= 1)
 80107c0:	4b04      	ldr	r3, [pc, #16]	; (80107d4 <hif_chip_sleep_sc+0x14>)
 80107c2:	785b      	ldrb	r3, [r3, #1]
 80107c4:	b123      	cbz	r3, 80107d0 <hif_chip_sleep_sc+0x10>
		gstrHifCxt.u8ChipSleep--;
 80107c6:	4a03      	ldr	r2, [pc, #12]	; (80107d4 <hif_chip_sleep_sc+0x14>)
 80107c8:	7853      	ldrb	r3, [r2, #1]
 80107ca:	3b01      	subs	r3, #1
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	7053      	strb	r3, [r2, #1]
}
 80107d0:	2000      	movs	r0, #0
 80107d2:	4770      	bx	lr
 80107d4:	20005a3c 	.word	0x20005a3c
 80107d8:	f3af 8000 	nop.w
 80107dc:	f3af 8000 	nop.w

080107e0 <hif_chip_sleep>:
{
 80107e0:	b508      	push	{r3, lr}
	if(gstrHifCxt.u8ChipSleep >= 1)
 80107e2:	4b0a      	ldr	r3, [pc, #40]	; (801080c <hif_chip_sleep+0x2c>)
 80107e4:	785b      	ldrb	r3, [r3, #1]
 80107e6:	b123      	cbz	r3, 80107f2 <hif_chip_sleep+0x12>
		gstrHifCxt.u8ChipSleep--;
 80107e8:	4a08      	ldr	r2, [pc, #32]	; (801080c <hif_chip_sleep+0x2c>)
 80107ea:	7853      	ldrb	r3, [r2, #1]
 80107ec:	3b01      	subs	r3, #1
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	7053      	strb	r3, [r2, #1]
	if(gstrHifCxt.u8ChipSleep == 0)
 80107f2:	4b06      	ldr	r3, [pc, #24]	; (801080c <hif_chip_sleep+0x2c>)
 80107f4:	785b      	ldrb	r3, [r3, #1]
 80107f6:	b93b      	cbnz	r3, 8010808 <hif_chip_sleep+0x28>
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 80107f8:	4b04      	ldr	r3, [pc, #16]	; (801080c <hif_chip_sleep+0x2c>)
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	b90b      	cbnz	r3, 8010802 <hif_chip_sleep+0x22>
	sint8 ret = M2M_SUCCESS;
 80107fe:	2000      	movs	r0, #0
 8010800:	e003      	b.n	801080a <hif_chip_sleep+0x2a>
			ret = chip_sleep();
 8010802:	f001 fc75 	bl	80120f0 <chip_sleep>
ERR1:
 8010806:	e000      	b.n	801080a <hif_chip_sleep+0x2a>
	sint8 ret = M2M_SUCCESS;
 8010808:	2000      	movs	r0, #0
}
 801080a:	bd08      	pop	{r3, pc}
 801080c:	20005a3c 	.word	0x20005a3c

08010810 <hif_deinit>:
{
 8010810:	b510      	push	{r4, lr}
	ret = hif_chip_wake();
 8010812:	f7ff ffa5 	bl	8010760 <hif_chip_wake>
 8010816:	4604      	mov	r4, r0
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 8010818:	2228      	movs	r2, #40	; 0x28
 801081a:	2100      	movs	r1, #0
 801081c:	4802      	ldr	r0, [pc, #8]	; (8010828 <hif_deinit+0x18>)
 801081e:	f7ff fe17 	bl	8010450 <m2m_memset>
}
 8010822:	4620      	mov	r0, r4
 8010824:	bd10      	pop	{r4, pc}
 8010826:	bf00      	nop
 8010828:	20005a3c 	.word	0x20005a3c
 801082c:	f3af 8000 	nop.w

08010830 <hif_send>:
{
 8010830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010834:	b087      	sub	sp, #28
 8010836:	4604      	mov	r4, r0
 8010838:	460d      	mov	r5, r1
 801083a:	4692      	mov	sl, r2
 801083c:	4699      	mov	r9, r3
 801083e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8010840:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
 8010844:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 8010848:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801084c:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
 8010850:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 8010854:	2308      	movs	r3, #8
 8010856:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
 801085a:	b186      	cbz	r6, 801087e <hif_send+0x4e>
		strHif.u16Length += u16DataOffset + u16DataSize;
 801085c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8010860:	eb07 0308 	add.w	r3, r7, r8
 8010864:	fa12 f383 	uxtah	r3, r2, r3
 8010868:	b29b      	uxth	r3, r3
 801086a:	f8ad 3016 	strh.w	r3, [sp, #22]
	ret = hif_chip_wake();
 801086e:	f7ff ff77 	bl	8010760 <hif_chip_wake>
	if(ret == M2M_SUCCESS)
 8010872:	4683      	mov	fp, r0
 8010874:	b150      	cbz	r0, 801088c <hif_send+0x5c>
}
 8010876:	4658      	mov	r0, fp
 8010878:	b007      	add	sp, #28
 801087a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		strHif.u16Length += u16CtrlBufSize;
 801087e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8010882:	444b      	add	r3, r9
 8010884:	b29b      	uxth	r3, r3
 8010886:	f8ad 3016 	strh.w	r3, [sp, #22]
 801088a:	e7f0      	b.n	801086e <hif_send+0x3e>
		volatile uint32 reg, dma_addr = 0;
 801088c:	2300      	movs	r3, #0
 801088e:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
 8010890:	f8ad 3006 	strh.w	r3, [sp, #6]
		reg = 0UL;
 8010894:	9302      	str	r3, [sp, #8]
        temp = (uint16)strHif.u16Length;
 8010896:	f8bd 1016 	ldrh.w	r1, [sp, #22]
		reg |= (uint32)u8Gid;
 801089a:	9b02      	ldr	r3, [sp, #8]
 801089c:	431c      	orrs	r4, r3
 801089e:	9402      	str	r4, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
 80108a0:	9a02      	ldr	r2, [sp, #8]
 80108a2:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 80108a6:	9502      	str	r5, [sp, #8]
		reg |= ((uint32)temp<<16);
 80108a8:	9b02      	ldr	r3, [sp, #8]
 80108aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80108ae:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 80108b0:	9902      	ldr	r1, [sp, #8]
 80108b2:	f241 008c 	movw	r0, #4236	; 0x108c
 80108b6:	f001 fe83 	bl	80125c0 <nm_write_reg>
		if(M2M_SUCCESS != ret) goto ERR1;
 80108ba:	4683      	mov	fp, r0
 80108bc:	2800      	cmp	r0, #0
 80108be:	d13b      	bne.n	8010938 <hif_send+0x108>
		reg = 0UL;
 80108c0:	2300      	movs	r3, #0
 80108c2:	9302      	str	r3, [sp, #8]
		reg |= NBIT1;
 80108c4:	9b02      	ldr	r3, [sp, #8]
 80108c6:	f043 0302 	orr.w	r3, r3, #2
 80108ca:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 80108cc:	9902      	ldr	r1, [sp, #8]
 80108ce:	f241 0078 	movw	r0, #4216	; 0x1078
 80108d2:	f001 fe75 	bl	80125c0 <nm_write_reg>
		if(M2M_SUCCESS != ret) goto ERR1;
 80108d6:	4683      	mov	fp, r0
 80108d8:	bb70      	cbnz	r0, 8010938 <hif_send+0x108>
		dma_addr = 0;
 80108da:	2300      	movs	r3, #0
 80108dc:	9303      	str	r3, [sp, #12]
		for(cnt = 0; cnt < 1000; cnt ++)
 80108de:	f8ad 3006 	strh.w	r3, [sp, #6]
 80108e2:	e009      	b.n	80108f8 <hif_send+0xc8>
			if (!(reg & NBIT1))
 80108e4:	9b02      	ldr	r3, [sp, #8]
 80108e6:	f013 0f02 	tst.w	r3, #2
 80108ea:	d01d      	beq.n	8010928 <hif_send+0xf8>
		for(cnt = 0; cnt < 1000; cnt ++)
 80108ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80108f0:	3301      	adds	r3, #1
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80108f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010902:	d21c      	bcs.n	801093e <hif_send+0x10e>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 8010904:	a902      	add	r1, sp, #8
 8010906:	f241 0078 	movw	r0, #4216	; 0x1078
 801090a:	f001 fe51 	bl	80125b0 <nm_read_reg_with_ret>
			if(ret != M2M_SUCCESS) break;
 801090e:	b9b0      	cbnz	r0, 801093e <hif_send+0x10e>
			if(cnt >= 500) {
 8010910:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010914:	b29b      	uxth	r3, r3
 8010916:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801091a:	d3e3      	bcc.n	80108e4 <hif_send+0xb4>
				if(cnt < 501) {
 801091c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
				nm_bsp_sleep(1);
 8010920:	2001      	movs	r0, #1
 8010922:	f7ff fc15 	bl	8010150 <nm_bsp_sleep>
 8010926:	e7dd      	b.n	80108e4 <hif_send+0xb4>
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 8010928:	a903      	add	r1, sp, #12
 801092a:	482b      	ldr	r0, [pc, #172]	; (80109d8 <hif_send+0x1a8>)
 801092c:	f001 fe40 	bl	80125b0 <nm_read_reg_with_ret>
				if(ret != M2M_SUCCESS) {
 8010930:	4683      	mov	fp, r0
 8010932:	b120      	cbz	r0, 801093e <hif_send+0x10e>
					dma_addr = 0;
 8010934:	2300      	movs	r3, #0
 8010936:	9303      	str	r3, [sp, #12]
	hif_chip_sleep_sc();
 8010938:	f7ff ff42 	bl	80107c0 <hif_chip_sleep_sc>
 801093c:	e79b      	b.n	8010876 <hif_send+0x46>
		if (dma_addr != 0)
 801093e:	9b03      	ldr	r3, [sp, #12]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d043      	beq.n	80109cc <hif_send+0x19c>
			u32CurrAddr = dma_addr;
 8010944:	9b03      	ldr	r3, [sp, #12]
 8010946:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 8010948:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801094c:	b29b      	uxth	r3, r3
 801094e:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 8010952:	9804      	ldr	r0, [sp, #16]
 8010954:	2208      	movs	r2, #8
 8010956:	a905      	add	r1, sp, #20
 8010958:	f001 fe6a 	bl	8012630 <nm_write_block>
			if(M2M_SUCCESS != ret) goto ERR1;
 801095c:	4683      	mov	fp, r0
 801095e:	2800      	cmp	r0, #0
 8010960:	d1ea      	bne.n	8010938 <hif_send+0x108>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 8010962:	9b04      	ldr	r3, [sp, #16]
 8010964:	3308      	adds	r3, #8
 8010966:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
 8010968:	f1ba 0f00 	cmp.w	sl, #0
 801096c:	d00a      	beq.n	8010984 <hif_send+0x154>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 801096e:	9804      	ldr	r0, [sp, #16]
 8010970:	464a      	mov	r2, r9
 8010972:	4651      	mov	r1, sl
 8010974:	f001 fe5c 	bl	8012630 <nm_write_block>
				if(M2M_SUCCESS != ret) goto ERR1;
 8010978:	4683      	mov	fp, r0
 801097a:	2800      	cmp	r0, #0
 801097c:	d1dc      	bne.n	8010938 <hif_send+0x108>
				u32CurrAddr += u16CtrlBufSize;
 801097e:	9b04      	ldr	r3, [sp, #16]
 8010980:	444b      	add	r3, r9
 8010982:	9304      	str	r3, [sp, #16]
			if(pu8DataBuf != NULL)
 8010984:	b17e      	cbz	r6, 80109a6 <hif_send+0x176>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 8010986:	eba7 0709 	sub.w	r7, r7, r9
 801098a:	9b04      	ldr	r3, [sp, #16]
 801098c:	441f      	add	r7, r3
 801098e:	9704      	str	r7, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 8010990:	9804      	ldr	r0, [sp, #16]
 8010992:	4642      	mov	r2, r8
 8010994:	4631      	mov	r1, r6
 8010996:	f001 fe4b 	bl	8012630 <nm_write_block>
				if(M2M_SUCCESS != ret) goto ERR1;
 801099a:	4683      	mov	fp, r0
 801099c:	2800      	cmp	r0, #0
 801099e:	d1cb      	bne.n	8010938 <hif_send+0x108>
				u32CurrAddr += u16DataSize;
 80109a0:	9b04      	ldr	r3, [sp, #16]
 80109a2:	4443      	add	r3, r8
 80109a4:	9304      	str	r3, [sp, #16]
			reg = dma_addr << 2;
 80109a6:	9b03      	ldr	r3, [sp, #12]
 80109a8:	009b      	lsls	r3, r3, #2
 80109aa:	9302      	str	r3, [sp, #8]
			reg |= NBIT1;
 80109ac:	9b02      	ldr	r3, [sp, #8]
 80109ae:	f043 0302 	orr.w	r3, r3, #2
 80109b2:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 80109b4:	9902      	ldr	r1, [sp, #8]
 80109b6:	f241 006c 	movw	r0, #4204	; 0x106c
 80109ba:	f001 fe01 	bl	80125c0 <nm_write_reg>
			if(M2M_SUCCESS != ret) goto ERR1;
 80109be:	4683      	mov	fp, r0
 80109c0:	2800      	cmp	r0, #0
 80109c2:	d1b9      	bne.n	8010938 <hif_send+0x108>
 	ret = hif_chip_sleep();
 80109c4:	f7ff ff0c 	bl	80107e0 <hif_chip_sleep>
 80109c8:	4683      	mov	fp, r0
	return ret;
 80109ca:	e754      	b.n	8010876 <hif_send+0x46>
			ret = hif_chip_sleep();
 80109cc:	f7ff ff08 	bl	80107e0 <hif_chip_sleep>
			ret = M2M_ERR_MEM_ALLOC;
 80109d0:	f06f 0b02 	mvn.w	fp, #2
			goto ERR2;
 80109d4:	e74f      	b.n	8010876 <hif_send+0x46>
 80109d6:	bf00      	nop
 80109d8:	00150400 	.word	0x00150400
 80109dc:	f3af 8000 	nop.w

080109e0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
 80109e0:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
 80109e2:	2300      	movs	r3, #0
	while (gstrHifCxt.u8Interrupt) {
 80109e4:	e009      	b.n	80109fa <hif_handle_isr+0x1a>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
 80109e6:	4a08      	ldr	r2, [pc, #32]	; (8010a08 <hif_handle_isr+0x28>)
 80109e8:	78d3      	ldrb	r3, [r2, #3]
 80109ea:	3b01      	subs	r3, #1
 80109ec:	b2db      	uxtb	r3, r3
 80109ee:	70d3      	strb	r3, [r2, #3]
		while(1)
		{
			ret = hif_isr();
 80109f0:	f7ff fdce 	bl	8010590 <hif_isr>
			if(ret == M2M_SUCCESS) {
 80109f4:	4603      	mov	r3, r0
 80109f6:	2800      	cmp	r0, #0
 80109f8:	d1fa      	bne.n	80109f0 <hif_handle_isr+0x10>
	while (gstrHifCxt.u8Interrupt) {
 80109fa:	4a03      	ldr	r2, [pc, #12]	; (8010a08 <hif_handle_isr+0x28>)
 80109fc:	78d2      	ldrb	r2, [r2, #3]
 80109fe:	2a00      	cmp	r2, #0
 8010a00:	d1f1      	bne.n	80109e6 <hif_handle_isr+0x6>
			}
		}
	}

	return ret;
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	bd08      	pop	{r3, pc}
 8010a06:	bf00      	nop
 8010a08:	20005a3c 	.word	0x20005a3c
 8010a0c:	f3af 8000 	nop.w

08010a10 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 8010a10:	b570      	push	{r4, r5, r6, lr}
 8010a12:	461c      	mov	r4, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 8010a14:	b110      	cbz	r0, 8010a1c <hif_receive+0xc>
 8010a16:	4603      	mov	r3, r0
 8010a18:	b101      	cbz	r1, 8010a1c <hif_receive+0xc>
 8010a1a:	b92a      	cbnz	r2, 8010a28 <hif_receive+0x18>
	{
		if(isDone)
 8010a1c:	b32c      	cbz	r4, 8010a6a <hif_receive+0x5a>
		{
			/* set RX done */
			ret = hif_set_rx_done();
 8010a1e:	f7ff fd97 	bl	8010550 <hif_set_rx_done>
 8010a22:	4603      	mov	r3, r0
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	bd70      	pop	{r4, r5, r6, pc}
	if(u16Sz > gstrHifCxt.u32RxSize)
 8010a28:	4816      	ldr	r0, [pc, #88]	; (8010a84 <hif_receive+0x74>)
 8010a2a:	6880      	ldr	r0, [r0, #8]
 8010a2c:	4282      	cmp	r2, r0
 8010a2e:	d81f      	bhi.n	8010a70 <hif_receive+0x60>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 8010a30:	4814      	ldr	r0, [pc, #80]	; (8010a84 <hif_receive+0x74>)
 8010a32:	6840      	ldr	r0, [r0, #4]
 8010a34:	4298      	cmp	r0, r3
 8010a36:	d81e      	bhi.n	8010a76 <hif_receive+0x66>
 8010a38:	18d5      	adds	r5, r2, r3
 8010a3a:	4e12      	ldr	r6, [pc, #72]	; (8010a84 <hif_receive+0x74>)
 8010a3c:	6870      	ldr	r0, [r6, #4]
 8010a3e:	68b6      	ldr	r6, [r6, #8]
 8010a40:	4430      	add	r0, r6
 8010a42:	4285      	cmp	r5, r0
 8010a44:	d81a      	bhi.n	8010a7c <hif_receive+0x6c>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 8010a46:	4618      	mov	r0, r3
 8010a48:	f001 fdc2 	bl	80125d0 <nm_read_block>
	if(ret != M2M_SUCCESS)goto ERR1;
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	d1e8      	bne.n	8010a24 <hif_receive+0x14>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 8010a52:	490c      	ldr	r1, [pc, #48]	; (8010a84 <hif_receive+0x74>)
 8010a54:	684a      	ldr	r2, [r1, #4]
 8010a56:	6889      	ldr	r1, [r1, #8]
 8010a58:	440a      	add	r2, r1
 8010a5a:	4295      	cmp	r5, r2
 8010a5c:	d001      	beq.n	8010a62 <hif_receive+0x52>
 8010a5e:	2c00      	cmp	r4, #0
 8010a60:	d0e0      	beq.n	8010a24 <hif_receive+0x14>
		ret = hif_set_rx_done();
 8010a62:	f7ff fd75 	bl	8010550 <hif_set_rx_done>
 8010a66:	4603      	mov	r3, r0
 8010a68:	e7dc      	b.n	8010a24 <hif_receive+0x14>
			ret = M2M_ERR_FAIL;
 8010a6a:	f06f 030b 	mvn.w	r3, #11
 8010a6e:	e7d9      	b.n	8010a24 <hif_receive+0x14>
		ret = M2M_ERR_FAIL;
 8010a70:	f06f 030b 	mvn.w	r3, #11
 8010a74:	e7d6      	b.n	8010a24 <hif_receive+0x14>
		ret = M2M_ERR_FAIL;
 8010a76:	f06f 030b 	mvn.w	r3, #11
 8010a7a:	e7d3      	b.n	8010a24 <hif_receive+0x14>
 8010a7c:	f06f 030b 	mvn.w	r3, #11
 8010a80:	e7d0      	b.n	8010a24 <hif_receive+0x14>
 8010a82:	bf00      	nop
 8010a84:	20005a3c 	.word	0x20005a3c
 8010a88:	f3af 8000 	nop.w
 8010a8c:	f3af 8000 	nop.w

08010a90 <hif_register_cb>:
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
 8010a90:	3801      	subs	r0, #1
 8010a92:	2806      	cmp	r0, #6
 8010a94:	d821      	bhi.n	8010ada <hif_register_cb+0x4a>
 8010a96:	e8df f000 	tbb	[pc, r0]
 8010a9a:	0408      	.short	0x0408
 8010a9c:	141c0c10 	.word	0x141c0c10
 8010aa0:	18          	.byte	0x18
 8010aa1:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
 8010aa2:	4b0f      	ldr	r3, [pc, #60]	; (8010ae0 <hif_register_cb+0x50>)
 8010aa4:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
 8010aa6:	2000      	movs	r0, #0
			break;
 8010aa8:	4770      	bx	lr
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
 8010aaa:	4b0d      	ldr	r3, [pc, #52]	; (8010ae0 <hif_register_cb+0x50>)
 8010aac:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
 8010aae:	2000      	movs	r0, #0
			break;
 8010ab0:	4770      	bx	lr
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
 8010ab2:	4b0b      	ldr	r3, [pc, #44]	; (8010ae0 <hif_register_cb+0x50>)
 8010ab4:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
 8010ab6:	2000      	movs	r0, #0
			break;
 8010ab8:	4770      	bx	lr
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 8010aba:	4b09      	ldr	r3, [pc, #36]	; (8010ae0 <hif_register_cb+0x50>)
 8010abc:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
 8010abe:	2000      	movs	r0, #0
			break;
 8010ac0:	4770      	bx	lr
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
 8010ac2:	4b07      	ldr	r3, [pc, #28]	; (8010ae0 <hif_register_cb+0x50>)
 8010ac4:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
 8010ac6:	2000      	movs	r0, #0
			break;
 8010ac8:	4770      	bx	lr
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
 8010aca:	4b05      	ldr	r3, [pc, #20]	; (8010ae0 <hif_register_cb+0x50>)
 8010acc:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
 8010ace:	2000      	movs	r0, #0
			break;
 8010ad0:	4770      	bx	lr
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
 8010ad2:	4b03      	ldr	r3, [pc, #12]	; (8010ae0 <hif_register_cb+0x50>)
 8010ad4:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
 8010ad6:	2000      	movs	r0, #0
			break;
 8010ad8:	4770      	bx	lr
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
 8010ada:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
 8010ade:	4770      	bx	lr
 8010ae0:	20005a3c 	.word	0x20005a3c
 8010ae4:	f3af 8000 	nop.w
 8010ae8:	f3af 8000 	nop.w
 8010aec:	f3af 8000 	nop.w

08010af0 <hif_init>:
{
 8010af0:	b508      	push	{r3, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 8010af2:	2228      	movs	r2, #40	; 0x28
 8010af4:	2100      	movs	r1, #0
 8010af6:	4806      	ldr	r0, [pc, #24]	; (8010b10 <hif_init+0x20>)
 8010af8:	f7ff fcaa 	bl	8010450 <m2m_memset>
	nm_bsp_register_isr(isr);
 8010afc:	4805      	ldr	r0, [pc, #20]	; (8010b14 <hif_init+0x24>)
 8010afe:	f7ff fb5f 	bl	80101c0 <nm_bsp_register_isr>
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
 8010b02:	4905      	ldr	r1, [pc, #20]	; (8010b18 <hif_init+0x28>)
 8010b04:	2003      	movs	r0, #3
 8010b06:	f7ff ffc3 	bl	8010a90 <hif_register_cb>
}
 8010b0a:	2000      	movs	r0, #0
 8010b0c:	bd08      	pop	{r3, pc}
 8010b0e:	bf00      	nop
 8010b10:	20005a3c 	.word	0x20005a3c
 8010b14:	08010531 	.word	0x08010531
 8010b18:	08010541 	.word	0x08010541
 8010b1c:	00000000 	.word	0x00000000

08010b20 <m2m_ota_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_ota_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8010b20:	b510      	push	{r4, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	4614      	mov	r4, r2
	sint8 ret = M2M_SUCCESS;
	if(u8OpCode == M2M_OTA_RESP_NOTIF_UPDATE_INFO)
 8010b26:	286a      	cmp	r0, #106	; 0x6a
 8010b28:	d003      	beq.n	8010b32 <m2m_ota_cb+0x12>
		{
			if(gpfOtaNotifCb)
				gpfOtaNotifCb(&strOtaUpdateInfo);
		}
	}
	else if (u8OpCode == M2M_OTA_RESP_UPDATE_STATUS)
 8010b2a:	286b      	cmp	r0, #107	; 0x6b
 8010b2c:	d015      	beq.n	8010b5a <m2m_ota_cb+0x3a>
	else
	{
		M2M_ERR("Invaild OTA resp %d ?\n",u8OpCode);
	}

}
 8010b2e:	b004      	add	sp, #16
 8010b30:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)&strOtaUpdateInfo,0,sizeof(tstrOtaUpdateInfo));
 8010b32:	2210      	movs	r2, #16
 8010b34:	2100      	movs	r1, #0
 8010b36:	4668      	mov	r0, sp
 8010b38:	f7ff fc8a 	bl	8010450 <m2m_memset>
		ret = hif_receive(u32Addr,(uint8*)&strOtaUpdateInfo,sizeof(tstrOtaUpdateInfo),0);
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	2210      	movs	r2, #16
 8010b40:	4669      	mov	r1, sp
 8010b42:	4620      	mov	r0, r4
 8010b44:	f7ff ff64 	bl	8010a10 <hif_receive>
		if(ret == M2M_SUCCESS)
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d1f0      	bne.n	8010b2e <m2m_ota_cb+0xe>
			if(gpfOtaNotifCb)
 8010b4c:	4b0e      	ldr	r3, [pc, #56]	; (8010b88 <m2m_ota_cb+0x68>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d0ec      	beq.n	8010b2e <m2m_ota_cb+0xe>
				gpfOtaNotifCb(&strOtaUpdateInfo);
 8010b54:	4668      	mov	r0, sp
 8010b56:	4798      	blx	r3
 8010b58:	e7e9      	b.n	8010b2e <m2m_ota_cb+0xe>
		m2m_memset((uint8*)&strOtaUpdateStatusResp,0,sizeof(tstrOtaUpdateStatusResp));
 8010b5a:	2204      	movs	r2, #4
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	4668      	mov	r0, sp
 8010b60:	f7ff fc76 	bl	8010450 <m2m_memset>
		ret = hif_receive(u32Addr, (uint8*) &strOtaUpdateStatusResp,sizeof(tstrOtaUpdateStatusResp), 0);
 8010b64:	2300      	movs	r3, #0
 8010b66:	2204      	movs	r2, #4
 8010b68:	4669      	mov	r1, sp
 8010b6a:	4620      	mov	r0, r4
 8010b6c:	f7ff ff50 	bl	8010a10 <hif_receive>
		if(ret == M2M_SUCCESS)
 8010b70:	2800      	cmp	r0, #0
 8010b72:	d1dc      	bne.n	8010b2e <m2m_ota_cb+0xe>
			if(gpfOtaUpdateCb)
 8010b74:	4b04      	ldr	r3, [pc, #16]	; (8010b88 <m2m_ota_cb+0x68>)
 8010b76:	685b      	ldr	r3, [r3, #4]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d0d8      	beq.n	8010b2e <m2m_ota_cb+0xe>
				gpfOtaUpdateCb(strOtaUpdateStatusResp.u8OtaUpdateStatusType,strOtaUpdateStatusResp.u8OtaUpdateStatus);
 8010b7c:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8010b80:	f89d 0000 	ldrb.w	r0, [sp]
 8010b84:	4798      	blx	r3
}
 8010b86:	e7d2      	b.n	8010b2e <m2m_ota_cb+0xe>
 8010b88:	200023fc 	.word	0x200023fc
 8010b8c:	f3af 8000 	nop.w

08010b90 <m2m_ota_init>:

@return
	The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8  m2m_ota_init(tpfOtaUpdateCb pfOtaUpdateCb, tpfOtaNotifCb pfOtaNotifCb)
{
 8010b90:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;

	if(pfOtaUpdateCb){
 8010b92:	b108      	cbz	r0, 8010b98 <m2m_ota_init+0x8>
		gpfOtaUpdateCb = pfOtaUpdateCb;
 8010b94:	4a05      	ldr	r2, [pc, #20]	; (8010bac <m2m_ota_init+0x1c>)
 8010b96:	6050      	str	r0, [r2, #4]
	}else{
		M2M_ERR("Invaild Ota update cb\n");
	}
	if(pfOtaNotifCb){
 8010b98:	b109      	cbz	r1, 8010b9e <m2m_ota_init+0xe>
		gpfOtaNotifCb = pfOtaNotifCb;
 8010b9a:	4b04      	ldr	r3, [pc, #16]	; (8010bac <m2m_ota_init+0x1c>)
 8010b9c:	6019      	str	r1, [r3, #0]
	}else{
		M2M_ERR("Invaild Ota notify cb\n");
	}

	hif_register_cb(M2M_REQ_GROUP_OTA,m2m_ota_cb);
 8010b9e:	4904      	ldr	r1, [pc, #16]	; (8010bb0 <m2m_ota_init+0x20>)
 8010ba0:	2004      	movs	r0, #4
 8010ba2:	f7ff ff75 	bl	8010a90 <hif_register_cb>

	return ret;
}
 8010ba6:	2000      	movs	r0, #0
 8010ba8:	bd08      	pop	{r3, pc}
 8010baa:	bf00      	nop
 8010bac:	200023fc 	.word	0x200023fc
 8010bb0:	08010b21 	.word	0x08010b21
 8010bb4:	f3af 8000 	nop.w
 8010bb8:	f3af 8000 	nop.w
 8010bbc:	f3af 8000 	nop.w

08010bc0 <m2m_ota_notif_set_url>:

@return
	The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8  m2m_ota_notif_set_url(uint8 * u8Url)
{
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	4604      	mov	r4, r0
	sint8 ret = M2M_SUCCESS;
	uint16 u16UrlSize = m2m_strlen(u8Url) + 1;
 8010bc6:	f7ff fc4b 	bl	8010460 <m2m_strlen>
 8010bca:	1c43      	adds	r3, r0, #1
	/*Todo: we may change it to data pkt but we need to give it higer priority
			but the priorty is not implemnted yet in data pkt
	*/
	ret = hif_send(M2M_REQ_GROUP_OTA,M2M_OTA_REQ_NOTIF_SET_URL,u8Url,u16UrlSize,NULL,0,0);
 8010bcc:	2200      	movs	r2, #0
 8010bce:	9202      	str	r2, [sp, #8]
 8010bd0:	9201      	str	r2, [sp, #4]
 8010bd2:	9200      	str	r2, [sp, #0]
 8010bd4:	b29b      	uxth	r3, r3
 8010bd6:	4622      	mov	r2, r4
 8010bd8:	2164      	movs	r1, #100	; 0x64
 8010bda:	2004      	movs	r0, #4
 8010bdc:	f7ff fe28 	bl	8010830 <hif_send>
	return ret;

}
 8010be0:	b004      	add	sp, #16
 8010be2:	bd10      	pop	{r4, pc}
 8010be4:	f3af 8000 	nop.w
 8010be8:	f3af 8000 	nop.w
 8010bec:	f3af 8000 	nop.w

08010bf0 <m2m_ota_notif_check_for_update>:

@return
	The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8  m2m_ota_notif_check_for_update(void)
{
 8010bf0:	b500      	push	{lr}
 8010bf2:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_OTA,M2M_OTA_REQ_NOTIF_CHECK_FOR_UPDATE,NULL,0,NULL,0,0);
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	9202      	str	r2, [sp, #8]
 8010bf8:	9201      	str	r2, [sp, #4]
 8010bfa:	9200      	str	r2, [sp, #0]
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	2165      	movs	r1, #101	; 0x65
 8010c00:	2004      	movs	r0, #4
 8010c02:	f7ff fe15 	bl	8010830 <hif_send>
	return ret;
}
 8010c06:	b005      	add	sp, #20
 8010c08:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c0c:	f3af 8000 	nop.w

08010c10 <m2m_ota_notif_sched>:

@return
	The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ota_notif_sched(uint32 u32Period)
{
 8010c10:	b500      	push	{lr}
 8010c12:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_OTA,M2M_OTA_REQ_NOTIF_CHECK_FOR_UPDATE,NULL,0,NULL,0,0);
 8010c14:	2200      	movs	r2, #0
 8010c16:	9202      	str	r2, [sp, #8]
 8010c18:	9201      	str	r2, [sp, #4]
 8010c1a:	9200      	str	r2, [sp, #0]
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	2165      	movs	r1, #101	; 0x65
 8010c20:	2004      	movs	r0, #4
 8010c22:	f7ff fe05 	bl	8010830 <hif_send>
	return ret;
}
 8010c26:	b005      	add	sp, #20
 8010c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c2c:	f3af 8000 	nop.w

08010c30 <m2m_ota_start_update>:
@return
	The function SHALL return 0 for success and a negative value otherwise.

*/
NMI_API sint8 m2m_ota_start_update(uint8 * u8DownloadUrl)
{
 8010c30:	b510      	push	{r4, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	4604      	mov	r4, r0
	sint8 ret = M2M_SUCCESS;
	uint16 u16DurlSize = m2m_strlen(u8DownloadUrl) + 1;
 8010c36:	f7ff fc13 	bl	8010460 <m2m_strlen>
 8010c3a:	1c43      	adds	r3, r0, #1
	/*Todo: we may change it to data pkt but we need to give it higer priority
			but the priorty is not implemnted yet in data pkt
	*/
	ret = hif_send(M2M_REQ_GROUP_OTA,M2M_OTA_REQ_START_FW_UPDATE,u8DownloadUrl,u16DurlSize,NULL,0,0);
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	9202      	str	r2, [sp, #8]
 8010c40:	9201      	str	r2, [sp, #4]
 8010c42:	9200      	str	r2, [sp, #0]
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	4622      	mov	r2, r4
 8010c48:	2167      	movs	r1, #103	; 0x67
 8010c4a:	2004      	movs	r0, #4
 8010c4c:	f7ff fdf0 	bl	8010830 <hif_send>
	return ret;
}
 8010c50:	b004      	add	sp, #16
 8010c52:	bd10      	pop	{r4, pc}
 8010c54:	f3af 8000 	nop.w
 8010c58:	f3af 8000 	nop.w
 8010c5c:	f3af 8000 	nop.w

08010c60 <m2m_ota_start_update_crt>:
@return
	The function SHALL return 0 for success and a negative value otherwise.

*/
NMI_API sint8 m2m_ota_start_update_crt(uint8 * u8DownloadUrl)
{
 8010c60:	b510      	push	{r4, lr}
 8010c62:	b084      	sub	sp, #16
 8010c64:	4604      	mov	r4, r0
	sint8 ret = M2M_SUCCESS;
	uint16 u16DurlSize = m2m_strlen(u8DownloadUrl) + 1;
 8010c66:	f7ff fbfb 	bl	8010460 <m2m_strlen>
 8010c6a:	1c43      	adds	r3, r0, #1
	ret = hif_send(M2M_REQ_GROUP_OTA,M2M_OTA_REQ_START_CRT_UPDATE,u8DownloadUrl,u16DurlSize,NULL,0,0);
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	9202      	str	r2, [sp, #8]
 8010c70:	9201      	str	r2, [sp, #4]
 8010c72:	9200      	str	r2, [sp, #0]
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	4622      	mov	r2, r4
 8010c78:	216d      	movs	r1, #109	; 0x6d
 8010c7a:	2004      	movs	r0, #4
 8010c7c:	f7ff fdd8 	bl	8010830 <hif_send>
	return ret;
}
 8010c80:	b004      	add	sp, #16
 8010c82:	bd10      	pop	{r4, pc}
 8010c84:	f3af 8000 	nop.w
 8010c88:	f3af 8000 	nop.w
 8010c8c:	f3af 8000 	nop.w

08010c90 <m2m_ota_rollback>:

@return
	The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ota_rollback(void)
{
 8010c90:	b500      	push	{lr}
 8010c92:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_OTA,M2M_OTA_REQ_ROLLBACK_FW,NULL,0,NULL,0,0);
 8010c94:	2200      	movs	r2, #0
 8010c96:	9202      	str	r2, [sp, #8]
 8010c98:	9201      	str	r2, [sp, #4]
 8010c9a:	9200      	str	r2, [sp, #0]
 8010c9c:	4613      	mov	r3, r2
 8010c9e:	2169      	movs	r1, #105	; 0x69
 8010ca0:	2004      	movs	r0, #4
 8010ca2:	f7ff fdc5 	bl	8010830 <hif_send>
	return ret;
}
 8010ca6:	b005      	add	sp, #20
 8010ca8:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cac:	f3af 8000 	nop.w

08010cb0 <m2m_ota_rollback_crt>:

@return
	The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ota_rollback_crt(void)
{
 8010cb0:	b500      	push	{lr}
 8010cb2:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_OTA,M2M_OTA_REQ_ROLLBACK_CRT,NULL,0,NULL,0,0);
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	9202      	str	r2, [sp, #8]
 8010cb8:	9201      	str	r2, [sp, #4]
 8010cba:	9200      	str	r2, [sp, #0]
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	216f      	movs	r1, #111	; 0x6f
 8010cc0:	2004      	movs	r0, #4
 8010cc2:	f7ff fdb5 	bl	8010830 <hif_send>
	return ret;
}
 8010cc6:	b005      	add	sp, #20
 8010cc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ccc:	f3af 8000 	nop.w

08010cd0 <m2m_ota_abort>:

@return
	The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ota_abort(void)
{
 8010cd0:	b500      	push	{lr}
 8010cd2:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_OTA,M2M_OTA_REQ_ABORT,NULL,0,NULL,0,0);
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	9202      	str	r2, [sp, #8]
 8010cd8:	9201      	str	r2, [sp, #4]
 8010cda:	9200      	str	r2, [sp, #0]
 8010cdc:	4613      	mov	r3, r2
 8010cde:	2170      	movs	r1, #112	; 0x70
 8010ce0:	2004      	movs	r0, #4
 8010ce2:	f7ff fda5 	bl	8010830 <hif_send>
	return ret;
}
 8010ce6:	b005      	add	sp, #20
 8010ce8:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cec:	f3af 8000 	nop.w

08010cf0 <m2m_ota_switch_firmware>:

@return
	The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ota_switch_firmware(void)
{
 8010cf0:	b500      	push	{lr}
 8010cf2:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_OTA,M2M_OTA_REQ_SWITCH_FIRMWARE,NULL,0,NULL,0,0);
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	9202      	str	r2, [sp, #8]
 8010cf8:	9201      	str	r2, [sp, #4]
 8010cfa:	9200      	str	r2, [sp, #0]
 8010cfc:	4613      	mov	r3, r2
 8010cfe:	2168      	movs	r1, #104	; 0x68
 8010d00:	2004      	movs	r0, #4
 8010d02:	f7ff fd95 	bl	8010830 <hif_send>
	return ret;
}
 8010d06:	b005      	add	sp, #20
 8010d08:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d0c:	f3af 8000 	nop.w

08010d10 <m2m_ota_switch_crt>:

@return
	The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ota_switch_crt(void)
{
 8010d10:	b500      	push	{lr}
 8010d12:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_OTA,M2M_OTA_REQ_SWITCH_CRT_IMG,NULL,0,NULL,0,0);
 8010d14:	2200      	movs	r2, #0
 8010d16:	9202      	str	r2, [sp, #8]
 8010d18:	9201      	str	r2, [sp, #4]
 8010d1a:	9200      	str	r2, [sp, #0]
 8010d1c:	4613      	mov	r3, r2
 8010d1e:	216e      	movs	r1, #110	; 0x6e
 8010d20:	2004      	movs	r0, #4
 8010d22:	f7ff fd85 	bl	8010830 <hif_send>
	return ret;
}
 8010d26:	b005      	add	sp, #20
 8010d28:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d2c:	f3af 8000 	nop.w

08010d30 <m2m_ota_get_firmware_version>:

@return
	The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ota_get_firmware_version(tstrM2mRev * pstrRev)
{
 8010d30:	b538      	push	{r3, r4, r5, lr}
 8010d32:	4605      	mov	r5, r0
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
 8010d34:	f7ff fd14 	bl	8010760 <hif_chip_wake>
	if(ret == M2M_SUCCESS)
 8010d38:	4604      	mov	r4, r0
 8010d3a:	b108      	cbz	r0, 8010d40 <m2m_ota_get_firmware_version+0x10>
	{
    	ret = nm_get_ota_firmware_info(pstrRev);
		hif_chip_sleep();
	}
	return ret;
}
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	bd38      	pop	{r3, r4, r5, pc}
    	ret = nm_get_ota_firmware_info(pstrRev);
 8010d40:	4628      	mov	r0, r5
 8010d42:	f001 fd75 	bl	8012830 <nm_get_ota_firmware_info>
 8010d46:	4604      	mov	r4, r0
		hif_chip_sleep();
 8010d48:	f7ff fd4a 	bl	80107e0 <hif_chip_sleep>
 8010d4c:	e7f6      	b.n	8010d3c <m2m_ota_get_firmware_version+0xc>
 8010d4e:	bf00      	nop

08010d50 <m2m_ssl_cb>:
				HIF data length.
	@param [in]	u32Addr
				HIF address.
*/
static void m2m_ssl_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8010d50:	b510      	push	{r4, lr}
 8010d52:	b09c      	sub	sp, #112	; 0x70
 8010d54:	4614      	mov	r4, r2
	sint8 s8tmp = M2M_SUCCESS;
	switch(u8OpCode)
 8010d56:	2801      	cmp	r0, #1
 8010d58:	d003      	beq.n	8010d62 <m2m_ssl_cb+0x12>
 8010d5a:	2806      	cmp	r0, #6
 8010d5c:	d014      	beq.n	8010d88 <m2m_ssl_cb+0x38>
	}
	if(s8tmp != M2M_SUCCESS)
	{
		M2M_ERR("Error receiving SSL from the HIF\n");
	}
}
 8010d5e:	b01c      	add	sp, #112	; 0x70
 8010d60:	bd10      	pop	{r4, pc}
			s8tmp = hif_receive(u32Addr, (uint8*)&strEccREQ, sizeof(tstrEccReqInfo), 0);
 8010d62:	2300      	movs	r3, #0
 8010d64:	2270      	movs	r2, #112	; 0x70
 8010d66:	4669      	mov	r1, sp
 8010d68:	4620      	mov	r0, r4
 8010d6a:	f7ff fe51 	bl	8010a10 <hif_receive>
			if(s8tmp == M2M_SUCCESS)
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	d1f5      	bne.n	8010d5e <m2m_ssl_cb+0xe>
				if (gpfAppSSLCb)
 8010d72:	4b0d      	ldr	r3, [pc, #52]	; (8010da8 <m2m_ssl_cb+0x58>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d0f1      	beq.n	8010d5e <m2m_ssl_cb+0xe>
					gu32HIFAddr = u32Addr + sizeof(tstrEccReqInfo);
 8010d7a:	3470      	adds	r4, #112	; 0x70
 8010d7c:	4a0a      	ldr	r2, [pc, #40]	; (8010da8 <m2m_ssl_cb+0x58>)
 8010d7e:	6054      	str	r4, [r2, #4]
					gpfAppSSLCb(M2M_SSL_REQ_ECC, &strEccREQ);
 8010d80:	4669      	mov	r1, sp
 8010d82:	2001      	movs	r0, #1
 8010d84:	4798      	blx	r3
		break;
 8010d86:	e7ea      	b.n	8010d5e <m2m_ssl_cb+0xe>
			s8tmp = hif_receive(u32Addr, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), 0);
 8010d88:	2300      	movs	r3, #0
 8010d8a:	2204      	movs	r2, #4
 8010d8c:	4669      	mov	r1, sp
 8010d8e:	4620      	mov	r0, r4
 8010d90:	f7ff fe3e 	bl	8010a10 <hif_receive>
			if(s8tmp == M2M_SUCCESS)
 8010d94:	2800      	cmp	r0, #0
 8010d96:	d1e2      	bne.n	8010d5e <m2m_ssl_cb+0xe>
				if (gpfAppSSLCb)
 8010d98:	4b03      	ldr	r3, [pc, #12]	; (8010da8 <m2m_ssl_cb+0x58>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d0de      	beq.n	8010d5e <m2m_ssl_cb+0xe>
					gpfAppSSLCb(M2M_SSL_RESP_SET_CS_LIST, &strCsList);
 8010da0:	4669      	mov	r1, sp
 8010da2:	2006      	movs	r0, #6
 8010da4:	4798      	blx	r3
}
 8010da6:	e7da      	b.n	8010d5e <m2m_ssl_cb+0xe>
 8010da8:	20002404 	.word	0x20002404
 8010dac:	f3af 8000 	nop.w

08010db0 <m2m_ssl_handshake_rsp>:
	@param [in]	u16RspDataSz
				Response data size.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_handshake_rsp(tstrEccReqInfo* strECCResp, uint8* pu8RspDataBuff, uint16 u16RspDataSz)
{
 8010db0:	b500      	push	{lr}
 8010db2:	b085      	sub	sp, #20
	sint8 s8Ret = M2M_SUCCESS;

	s8Ret = hif_send(M2M_REQ_GROUP_SSL, ((uint8)M2M_SSL_RESP_ECC | (uint8)M2M_REQ_DATA_PKT), (uint8*)strECCResp, sizeof(tstrEccReqInfo), pu8RspDataBuff, u16RspDataSz, sizeof(tstrEccReqInfo));
 8010db4:	2370      	movs	r3, #112	; 0x70
 8010db6:	9302      	str	r3, [sp, #8]
 8010db8:	9201      	str	r2, [sp, #4]
 8010dba:	9100      	str	r1, [sp, #0]
 8010dbc:	4602      	mov	r2, r0
 8010dbe:	2182      	movs	r1, #130	; 0x82
 8010dc0:	2005      	movs	r0, #5
 8010dc2:	f7ff fd35 	bl	8010830 <hif_send>

	return s8Ret;
}
 8010dc6:	b005      	add	sp, #20
 8010dc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dcc:	f3af 8000 	nop.w

08010dd0 <m2m_ssl_send_certs_to_winc>:
	@param [in]	u32BufferSz
				Size of the certificates.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_send_certs_to_winc(uint8* pu8Buffer, uint32 u32BufferSz)
{
 8010dd0:	b500      	push	{lr}
 8010dd2:	b085      	sub	sp, #20
	sint8 s8Ret = M2M_SUCCESS;

	s8Ret = hif_send(M2M_REQ_GROUP_SSL, ((uint8)M2M_SSL_IND_CERTS_ECC | (uint8)M2M_REQ_DATA_PKT), NULL, 0, pu8Buffer, u32BufferSz, 0);
 8010dd4:	b289      	uxth	r1, r1
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	9202      	str	r2, [sp, #8]
 8010dda:	9101      	str	r1, [sp, #4]
 8010ddc:	9000      	str	r0, [sp, #0]
 8010dde:	4613      	mov	r3, r2
 8010de0:	2184      	movs	r1, #132	; 0x84
 8010de2:	2005      	movs	r0, #5
 8010de4:	f7ff fd24 	bl	8010830 <hif_send>

	return s8Ret;
}
 8010de8:	b005      	add	sp, #20
 8010dea:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dee:	bf00      	nop

08010df0 <m2m_ssl_retrieve_cert>:
	@param [in]	pu8Key
				Pointer to the certificate Key.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_retrieve_cert(uint16* pu16CurveType, uint8* pu8Hash, uint8* pu8Sig, tstrECPoint* pu8Key)
{
 8010df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010df2:	b083      	sub	sp, #12
 8010df4:	4684      	mov	ip, r0
	uint8	bSetRxDone	= 1;
	uint16	u16HashSz, u16SigSz, u16KeySz;
	sint8	s8Ret = M2M_SUCCESS;

	if(gu32HIFAddr == 0) return M2M_ERR_FAIL;
 8010df6:	4c43      	ldr	r4, [pc, #268]	; (8010f04 <m2m_ssl_retrieve_cert+0x114>)
 8010df8:	6860      	ldr	r0, [r4, #4]
 8010dfa:	2800      	cmp	r0, #0
 8010dfc:	d07f      	beq.n	8010efe <m2m_ssl_retrieve_cert+0x10e>
 8010dfe:	461d      	mov	r5, r3
 8010e00:	4617      	mov	r7, r2
 8010e02:	460e      	mov	r6, r1
 8010e04:	4664      	mov	r4, ip

	if(hif_receive(gu32HIFAddr, (uint8*)pu16CurveType, 2, 0) != M2M_SUCCESS) goto __ERR;
 8010e06:	2300      	movs	r3, #0
 8010e08:	2202      	movs	r2, #2
 8010e0a:	4661      	mov	r1, ip
 8010e0c:	f7ff fe00 	bl	8010a10 <hif_receive>
 8010e10:	2800      	cmp	r0, #0
 8010e12:	d16b      	bne.n	8010eec <m2m_ssl_retrieve_cert+0xfc>
	gu32HIFAddr += 2;
 8010e14:	4b3b      	ldr	r3, [pc, #236]	; (8010f04 <m2m_ssl_retrieve_cert+0x114>)
 8010e16:	6858      	ldr	r0, [r3, #4]
 8010e18:	3002      	adds	r0, #2
 8010e1a:	6058      	str	r0, [r3, #4]

	if(hif_receive(gu32HIFAddr, (uint8*)&u16KeySz, 2, 0) != M2M_SUCCESS) goto __ERR;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	2202      	movs	r2, #2
 8010e20:	eb0d 0102 	add.w	r1, sp, r2
 8010e24:	f7ff fdf4 	bl	8010a10 <hif_receive>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	d15f      	bne.n	8010eec <m2m_ssl_retrieve_cert+0xfc>
	gu32HIFAddr += 2;
 8010e2c:	4b35      	ldr	r3, [pc, #212]	; (8010f04 <m2m_ssl_retrieve_cert+0x114>)
 8010e2e:	6858      	ldr	r0, [r3, #4]
 8010e30:	3002      	adds	r0, #2
 8010e32:	6058      	str	r0, [r3, #4]

	if(hif_receive(gu32HIFAddr, (uint8*)&u16HashSz, 2, 0) != M2M_SUCCESS) goto __ERR;
 8010e34:	2300      	movs	r3, #0
 8010e36:	2202      	movs	r2, #2
 8010e38:	f10d 0106 	add.w	r1, sp, #6
 8010e3c:	f7ff fde8 	bl	8010a10 <hif_receive>
 8010e40:	2800      	cmp	r0, #0
 8010e42:	d153      	bne.n	8010eec <m2m_ssl_retrieve_cert+0xfc>
	gu32HIFAddr += 2;
 8010e44:	4b2f      	ldr	r3, [pc, #188]	; (8010f04 <m2m_ssl_retrieve_cert+0x114>)
 8010e46:	6858      	ldr	r0, [r3, #4]
 8010e48:	3002      	adds	r0, #2
 8010e4a:	6058      	str	r0, [r3, #4]

	if(hif_receive(gu32HIFAddr, (uint8*)&u16SigSz, 2, 0) != M2M_SUCCESS) goto __ERR;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	2202      	movs	r2, #2
 8010e50:	a901      	add	r1, sp, #4
 8010e52:	f7ff fddd 	bl	8010a10 <hif_receive>
 8010e56:	2800      	cmp	r0, #0
 8010e58:	d148      	bne.n	8010eec <m2m_ssl_retrieve_cert+0xfc>
	gu32HIFAddr += 2;
 8010e5a:	4b2a      	ldr	r3, [pc, #168]	; (8010f04 <m2m_ssl_retrieve_cert+0x114>)
 8010e5c:	6858      	ldr	r0, [r3, #4]
 8010e5e:	3002      	adds	r0, #2
 8010e60:	6058      	str	r0, [r3, #4]

	(*pu16CurveType)= _htons((*pu16CurveType));
 8010e62:	8822      	ldrh	r2, [r4, #0]
 8010e64:	0a13      	lsrs	r3, r2, #8
 8010e66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010e6a:	8023      	strh	r3, [r4, #0]
	pu8Key->u16Size	= _htons(u16KeySz);
 8010e6c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010e70:	0a14      	lsrs	r4, r2, #8
 8010e72:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8010e76:	b2a4      	uxth	r4, r4
 8010e78:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
	u16HashSz		= _htons(u16HashSz);
 8010e7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010e80:	0a13      	lsrs	r3, r2, #8
 8010e82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010e86:	f8ad 3006 	strh.w	r3, [sp, #6]
	u16SigSz		= _htons(u16SigSz);
 8010e8a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010e8e:	0a13      	lsrs	r3, r2, #8
 8010e90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010e94:	f8ad 3004 	strh.w	r3, [sp, #4]

	if(hif_receive(gu32HIFAddr, pu8Key->X, pu8Key->u16Size * 2, 0) != M2M_SUCCESS) goto __ERR;
 8010e98:	0064      	lsls	r4, r4, #1
 8010e9a:	b2a2      	uxth	r2, r4
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	f7ff fdb6 	bl	8010a10 <hif_receive>
 8010ea4:	bb10      	cbnz	r0, 8010eec <m2m_ssl_retrieve_cert+0xfc>
	gu32HIFAddr += (pu8Key->u16Size * 2);
 8010ea6:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 8010eaa:	4b16      	ldr	r3, [pc, #88]	; (8010f04 <m2m_ssl_retrieve_cert+0x114>)
 8010eac:	6858      	ldr	r0, [r3, #4]
 8010eae:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010eb2:	6058      	str	r0, [r3, #4]

	if(hif_receive(gu32HIFAddr, pu8Hash, u16HashSz, 0) != M2M_SUCCESS) goto __ERR;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010eba:	4631      	mov	r1, r6
 8010ebc:	f7ff fda8 	bl	8010a10 <hif_receive>
 8010ec0:	b9a0      	cbnz	r0, 8010eec <m2m_ssl_retrieve_cert+0xfc>
	gu32HIFAddr += u16HashSz;
 8010ec2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8010ec6:	4b0f      	ldr	r3, [pc, #60]	; (8010f04 <m2m_ssl_retrieve_cert+0x114>)
 8010ec8:	685a      	ldr	r2, [r3, #4]
 8010eca:	4410      	add	r0, r2
 8010ecc:	6058      	str	r0, [r3, #4]

	if(hif_receive(gu32HIFAddr, pu8Sig, u16SigSz, 0) != M2M_SUCCESS) goto __ERR;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010ed4:	4639      	mov	r1, r7
 8010ed6:	f7ff fd9b 	bl	8010a10 <hif_receive>
 8010eda:	b938      	cbnz	r0, 8010eec <m2m_ssl_retrieve_cert+0xfc>
	gu32HIFAddr += u16SigSz;
 8010edc:	4a09      	ldr	r2, [pc, #36]	; (8010f04 <m2m_ssl_retrieve_cert+0x114>)
 8010ede:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010ee2:	6851      	ldr	r1, [r2, #4]
 8010ee4:	440b      	add	r3, r1
 8010ee6:	6053      	str	r3, [r2, #4]
	{
		s8Ret = M2M_ERR_FAIL;
		hif_receive(0, NULL, 0, 1);
	}
	return s8Ret;
}
 8010ee8:	b003      	add	sp, #12
 8010eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hif_receive(0, NULL, 0, 1);
 8010eec:	2301      	movs	r3, #1
 8010eee:	2200      	movs	r2, #0
 8010ef0:	4611      	mov	r1, r2
 8010ef2:	4610      	mov	r0, r2
 8010ef4:	f7ff fd8c 	bl	8010a10 <hif_receive>
		s8Ret = M2M_ERR_FAIL;
 8010ef8:	f06f 000b 	mvn.w	r0, #11
 8010efc:	e7f4      	b.n	8010ee8 <m2m_ssl_retrieve_cert+0xf8>
	if(gu32HIFAddr == 0) return M2M_ERR_FAIL;
 8010efe:	f06f 000b 	mvn.w	r0, #11
 8010f02:	e7f1      	b.n	8010ee8 <m2m_ssl_retrieve_cert+0xf8>
 8010f04:	20002404 	.word	0x20002404
 8010f08:	f3af 8000 	nop.w
 8010f0c:	f3af 8000 	nop.w

08010f10 <m2m_ssl_retrieve_hash>:
	@param [in]	u16HashSz
				Hash size.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_retrieve_hash(uint8* pu8Hash, uint16 u16HashSz)
{
 8010f10:	b510      	push	{r4, lr}
	uint8	bSetRxDone	= 1;
	sint8	s8Ret = M2M_SUCCESS;

	if(gu32HIFAddr == 0) return M2M_ERR_FAIL;
 8010f12:	4b0c      	ldr	r3, [pc, #48]	; (8010f44 <m2m_ssl_retrieve_hash+0x34>)
 8010f14:	685c      	ldr	r4, [r3, #4]
 8010f16:	b18c      	cbz	r4, 8010f3c <m2m_ssl_retrieve_hash+0x2c>
 8010f18:	460a      	mov	r2, r1
 8010f1a:	4601      	mov	r1, r0

	if(hif_receive(gu32HIFAddr, pu8Hash, u16HashSz, 0) != M2M_SUCCESS) goto __ERR;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	4620      	mov	r0, r4
 8010f20:	f7ff fd76 	bl	8010a10 <hif_receive>
 8010f24:	b908      	cbnz	r0, 8010f2a <m2m_ssl_retrieve_hash+0x1a>
	sint8	s8Ret = M2M_SUCCESS;
 8010f26:	2000      	movs	r0, #0
	{
		s8Ret = M2M_ERR_FAIL;
		hif_receive(0, NULL, 0, 1);
	}
	return s8Ret;
}
 8010f28:	bd10      	pop	{r4, pc}
		hif_receive(0, NULL, 0, 1);
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	4611      	mov	r1, r2
 8010f30:	4610      	mov	r0, r2
 8010f32:	f7ff fd6d 	bl	8010a10 <hif_receive>
		s8Ret = M2M_ERR_FAIL;
 8010f36:	f06f 000b 	mvn.w	r0, #11
 8010f3a:	e7f5      	b.n	8010f28 <m2m_ssl_retrieve_hash+0x18>
	if(gu32HIFAddr == 0) return M2M_ERR_FAIL;
 8010f3c:	f06f 000b 	mvn.w	r0, #11
 8010f40:	e7f2      	b.n	8010f28 <m2m_ssl_retrieve_hash+0x18>
 8010f42:	bf00      	nop
 8010f44:	20002404 	.word	0x20002404
 8010f48:	f3af 8000 	nop.w
 8010f4c:	f3af 8000 	nop.w

08010f50 <m2m_ssl_stop_processing_certs>:
/*!
	@fn	\	m2m_ssl_stop_processing_certs(void)
	@brief	Stops receiving from the HIF
*/
NMI_API void m2m_ssl_stop_processing_certs(void)
{
 8010f50:	b508      	push	{r3, lr}
	hif_receive(0, NULL, 0, 1);
 8010f52:	2301      	movs	r3, #1
 8010f54:	2200      	movs	r2, #0
 8010f56:	4611      	mov	r1, r2
 8010f58:	4610      	mov	r0, r2
 8010f5a:	f7ff fd59 	bl	8010a10 <hif_receive>
}
 8010f5e:	bd08      	pop	{r3, pc}

08010f60 <m2m_ssl_ecc_process_done>:
	@fn	\	m2m_ssl_ecc_process_done(void)
	@brief	Stops receiving from the HIF
*/
NMI_API void m2m_ssl_ecc_process_done(void)
{
	gu32HIFAddr = 0;
 8010f60:	4b01      	ldr	r3, [pc, #4]	; (8010f68 <m2m_ssl_ecc_process_done+0x8>)
 8010f62:	2200      	movs	r2, #0
 8010f64:	605a      	str	r2, [r3, #4]
}
 8010f66:	4770      	bx	lr
 8010f68:	20002404 	.word	0x20002404
 8010f6c:	f3af 8000 	nop.w

08010f70 <m2m_ssl_set_active_ciphersuites>:
@return
	- [SOCK_ERR_NO_ERROR](@ref SOCK_ERR_NO_ERROR)
	- [SOCK_ERR_INVALID_ARG](@ref SOCK_ERR_INVALID_ARG)
*/
sint8 m2m_ssl_set_active_ciphersuites(uint32 u32SslCsBMP)
{
 8010f70:	b500      	push	{lr}
 8010f72:	b087      	sub	sp, #28
	sint8 s8Ret = M2M_SUCCESS;
	tstrSslSetActiveCsList	strCsList;

	strCsList.u32CsBMP = u32SslCsBMP;
 8010f74:	aa06      	add	r2, sp, #24
 8010f76:	f842 0d04 	str.w	r0, [r2, #-4]!
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_REQ_SET_CS_LIST, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), NULL, 0, 0);
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	9302      	str	r3, [sp, #8]
 8010f7e:	9301      	str	r3, [sp, #4]
 8010f80:	9300      	str	r3, [sp, #0]
 8010f82:	2304      	movs	r3, #4
 8010f84:	2105      	movs	r1, #5
 8010f86:	4608      	mov	r0, r1
 8010f88:	f7ff fc52 	bl	8010830 <hif_send>

	return s8Ret;
}
 8010f8c:	b007      	add	sp, #28
 8010f8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f92:	bf00      	nop
 8010f94:	f3af 8000 	nop.w
 8010f98:	f3af 8000 	nop.w
 8010f9c:	f3af 8000 	nop.w

08010fa0 <m2m_ssl_init>:
	@param [in]	pfAppSslCb
	Application SSL callback function.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_init(tpfAppSSLCb pfAppSSLCb)
{
 8010fa0:	b508      	push	{r3, lr}
	sint8 s8Ret = M2M_SUCCESS;

	gpfAppSSLCb = pfAppSSLCb;
 8010fa2:	4b04      	ldr	r3, [pc, #16]	; (8010fb4 <m2m_ssl_init+0x14>)
 8010fa4:	6018      	str	r0, [r3, #0]
	gu32HIFAddr = 0;
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	605a      	str	r2, [r3, #4]

	s8Ret = hif_register_cb(M2M_REQ_GROUP_SSL,m2m_ssl_cb);
 8010faa:	4903      	ldr	r1, [pc, #12]	; (8010fb8 <m2m_ssl_init+0x18>)
 8010fac:	2005      	movs	r0, #5
 8010fae:	f7ff fd6f 	bl	8010a90 <hif_register_cb>
	if (s8Ret != M2M_SUCCESS)
	{
		M2M_ERR("hif_register_cb() failed with ret=%d", s8Ret);
	}
	return s8Ret;
}
 8010fb2:	bd08      	pop	{r3, pc}
 8010fb4:	20002404 	.word	0x20002404
 8010fb8:	08010d51 	.word	0x08010d51
 8010fbc:	00000000 	.word	0x00000000

08010fc0 <m2m_validate_scan_options>:
}
static sint8 m2m_validate_scan_options(tstrM2MScanOption* ptstrM2MScanOption)
{
	sint8 s8Ret = M2M_SUCCESS;
	/* Check for incoming pointer */
	if(ptstrM2MScanOption == NULL)
 8010fc0:	b198      	cbz	r0, 8010fea <m2m_validate_scan_options+0x2a>
		M2M_ERR("INVALID POINTER\n");
		s8Ret = M2M_ERR_FAIL;
		goto ERR;
	}
	/* Check for valid No of slots */
	if(ptstrM2MScanOption->u8NumOfSlot == 0)
 8010fc2:	7803      	ldrb	r3, [r0, #0]
 8010fc4:	b1a3      	cbz	r3, 8010ff0 <m2m_validate_scan_options+0x30>
		M2M_ERR("INVALID No of scan slots! %d\n",ptstrM2MScanOption->u8NumOfSlot);
		s8Ret = M2M_ERR_FAIL;
		goto ERR;
	}
	/* Check for valid time of slots */
	if(ptstrM2MScanOption->u8SlotTime < 10 || ptstrM2MScanOption->u8SlotTime > 250)
 8010fc6:	7843      	ldrb	r3, [r0, #1]
 8010fc8:	3b0a      	subs	r3, #10
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	2bf0      	cmp	r3, #240	; 0xf0
 8010fce:	d812      	bhi.n	8010ff6 <m2m_validate_scan_options+0x36>
		M2M_ERR("INVALID scan slot time! %d\n",ptstrM2MScanOption->u8SlotTime);
		s8Ret = M2M_ERR_FAIL;
		goto ERR;
	}
	/* Check for valid No of probe requests per slot */
	if((ptstrM2MScanOption->u8ProbesPerSlot == 0)||(ptstrM2MScanOption->u8ProbesPerSlot > M2M_SCAN_DEFAULT_NUM_PROBE))
 8010fd0:	7883      	ldrb	r3, [r0, #2]
 8010fd2:	3b01      	subs	r3, #1
 8010fd4:	b2db      	uxtb	r3, r3
 8010fd6:	2b01      	cmp	r3, #1
 8010fd8:	d810      	bhi.n	8010ffc <m2m_validate_scan_options+0x3c>
		M2M_ERR("INVALID No of probe requests per scan slot %d\n",ptstrM2MScanOption->u8ProbesPerSlot);
		s8Ret = M2M_ERR_FAIL;
		goto ERR;
	}
	/* Check for valid RSSI threshold */
	if((ptstrM2MScanOption->s8RssiThresh  < -99) || (ptstrM2MScanOption->s8RssiThresh >= 0))
 8010fda:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8010fde:	3363      	adds	r3, #99	; 0x63
 8010fe0:	b2db      	uxtb	r3, r3
 8010fe2:	2b62      	cmp	r3, #98	; 0x62
 8010fe4:	d80d      	bhi.n	8011002 <m2m_validate_scan_options+0x42>
	sint8 s8Ret = M2M_SUCCESS;
 8010fe6:	2000      	movs	r0, #0
 8010fe8:	4770      	bx	lr
		s8Ret = M2M_ERR_FAIL;
 8010fea:	f06f 000b 	mvn.w	r0, #11
 8010fee:	4770      	bx	lr
		s8Ret = M2M_ERR_FAIL;
 8010ff0:	f06f 000b 	mvn.w	r0, #11
 8010ff4:	4770      	bx	lr
		s8Ret = M2M_ERR_FAIL;
 8010ff6:	f06f 000b 	mvn.w	r0, #11
 8010ffa:	4770      	bx	lr
		s8Ret = M2M_ERR_FAIL;
 8010ffc:	f06f 000b 	mvn.w	r0, #11
 8011000:	4770      	bx	lr
	{
		M2M_ERR("INVALID RSSI threshold %d \n",ptstrM2MScanOption->s8RssiThresh);
		s8Ret = M2M_ERR_FAIL;
 8011002:	f06f 000b 	mvn.w	r0, #11
	}

ERR:
	return s8Ret;
}
 8011006:	4770      	bx	lr
 8011008:	f3af 8000 	nop.w
 801100c:	f3af 8000 	nop.w

08011010 <m2m_wifi_cb>:
{
 8011010:	b510      	push	{r4, lr}
 8011012:	b09c      	sub	sp, #112	; 0x70
 8011014:	4614      	mov	r4, r2
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 8011016:	282c      	cmp	r0, #44	; 0x2c
 8011018:	d036      	beq.n	8011088 <m2m_wifi_cb+0x78>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 801101a:	281b      	cmp	r0, #27
 801101c:	d044      	beq.n	80110a8 <m2m_wifi_cb+0x98>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 801101e:	2806      	cmp	r0, #6
 8011020:	d052      	beq.n	80110c8 <m2m_wifi_cb+0xb8>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 8011022:	280e      	cmp	r0, #14
 8011024:	d03e      	beq.n	80110a4 <m2m_wifi_cb+0x94>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 8011026:	2832      	cmp	r0, #50	; 0x32
 8011028:	d05e      	beq.n	80110e8 <m2m_wifi_cb+0xd8>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
 801102a:	282f      	cmp	r0, #47	; 0x2f
 801102c:	d06c      	beq.n	8011108 <m2m_wifi_cb+0xf8>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 801102e:	2834      	cmp	r0, #52	; 0x34
 8011030:	d07f      	beq.n	8011132 <m2m_wifi_cb+0x122>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 8011032:	2811      	cmp	r0, #17
 8011034:	f000 808e 	beq.w	8011154 <m2m_wifi_cb+0x144>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 8011038:	2813      	cmp	r0, #19
 801103a:	f000 80a1 	beq.w	8011180 <m2m_wifi_cb+0x170>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 801103e:	2804      	cmp	r0, #4
 8011040:	f000 80ae 	beq.w	80111a0 <m2m_wifi_cb+0x190>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 8011044:	2865      	cmp	r0, #101	; 0x65
 8011046:	f000 80bd 	beq.w	80111c4 <m2m_wifi_cb+0x1b4>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 801104a:	2809      	cmp	r0, #9
 801104c:	f000 80cc 	beq.w	80111e8 <m2m_wifi_cb+0x1d8>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 8011050:	282a      	cmp	r0, #42	; 0x2a
 8011052:	f000 80db 	beq.w	801120c <m2m_wifi_cb+0x1fc>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 8011056:	2820      	cmp	r0, #32
 8011058:	d124      	bne.n	80110a4 <m2m_wifi_cb+0x94>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
 801105a:	2300      	movs	r3, #0
 801105c:	2208      	movs	r2, #8
 801105e:	a901      	add	r1, sp, #4
 8011060:	4620      	mov	r0, r4
 8011062:	f7ff fcd5 	bl	8010a10 <hif_receive>
 8011066:	b9e8      	cbnz	r0, 80110a4 <m2m_wifi_cb+0x94>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 8011068:	2301      	movs	r3, #1
 801106a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801106e:	9901      	ldr	r1, [sp, #4]
 8011070:	f104 0008 	add.w	r0, r4, #8
 8011074:	f7ff fccc 	bl	8010a10 <hif_receive>
 8011078:	b9a0      	cbnz	r0, 80110a4 <m2m_wifi_cb+0x94>
				if(gpfAppWifiCb)
 801107a:	4b6e      	ldr	r3, [pc, #440]	; (8011234 <m2m_wifi_cb+0x224>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	b18b      	cbz	r3, 80110a4 <m2m_wifi_cb+0x94>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
 8011080:	a901      	add	r1, sp, #4
 8011082:	2020      	movs	r0, #32
 8011084:	4798      	blx	r3
}
 8011086:	e00d      	b.n	80110a4 <m2m_wifi_cb+0x94>
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 8011088:	2300      	movs	r3, #0
 801108a:	2204      	movs	r2, #4
 801108c:	eb0d 0102 	add.w	r1, sp, r2
 8011090:	4620      	mov	r0, r4
 8011092:	f7ff fcbd 	bl	8010a10 <hif_receive>
 8011096:	b928      	cbnz	r0, 80110a4 <m2m_wifi_cb+0x94>
			if (gpfAppWifiCb)
 8011098:	4b66      	ldr	r3, [pc, #408]	; (8011234 <m2m_wifi_cb+0x224>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	b113      	cbz	r3, 80110a4 <m2m_wifi_cb+0x94>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 801109e:	a901      	add	r1, sp, #4
 80110a0:	202c      	movs	r0, #44	; 0x2c
 80110a2:	4798      	blx	r3
}
 80110a4:	b01c      	add	sp, #112	; 0x70
 80110a6:	bd10      	pop	{r4, pc}
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 80110a8:	2300      	movs	r3, #0
 80110aa:	2208      	movs	r2, #8
 80110ac:	a901      	add	r1, sp, #4
 80110ae:	4620      	mov	r0, r4
 80110b0:	f7ff fcae 	bl	8010a10 <hif_receive>
 80110b4:	2800      	cmp	r0, #0
 80110b6:	d1f5      	bne.n	80110a4 <m2m_wifi_cb+0x94>
			if (gpfAppWifiCb)
 80110b8:	4b5e      	ldr	r3, [pc, #376]	; (8011234 <m2m_wifi_cb+0x224>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d0f1      	beq.n	80110a4 <m2m_wifi_cb+0x94>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 80110c0:	a901      	add	r1, sp, #4
 80110c2:	201b      	movs	r0, #27
 80110c4:	4798      	blx	r3
 80110c6:	e7ed      	b.n	80110a4 <m2m_wifi_cb+0x94>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 80110c8:	2301      	movs	r3, #1
 80110ca:	2230      	movs	r2, #48	; 0x30
 80110cc:	a901      	add	r1, sp, #4
 80110ce:	4620      	mov	r0, r4
 80110d0:	f7ff fc9e 	bl	8010a10 <hif_receive>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	d1e5      	bne.n	80110a4 <m2m_wifi_cb+0x94>
			if(gpfAppWifiCb)
 80110d8:	4b56      	ldr	r3, [pc, #344]	; (8011234 <m2m_wifi_cb+0x224>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d0e1      	beq.n	80110a4 <m2m_wifi_cb+0x94>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 80110e0:	a901      	add	r1, sp, #4
 80110e2:	2006      	movs	r0, #6
 80110e4:	4798      	blx	r3
 80110e6:	e7dd      	b.n	80110a4 <m2m_wifi_cb+0x94>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 80110e8:	2300      	movs	r3, #0
 80110ea:	2214      	movs	r2, #20
 80110ec:	a901      	add	r1, sp, #4
 80110ee:	4620      	mov	r0, r4
 80110f0:	f7ff fc8e 	bl	8010a10 <hif_receive>
 80110f4:	2800      	cmp	r0, #0
 80110f6:	d1d5      	bne.n	80110a4 <m2m_wifi_cb+0x94>
			if (gpfAppWifiCb)
 80110f8:	4b4e      	ldr	r3, [pc, #312]	; (8011234 <m2m_wifi_cb+0x224>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d0d1      	beq.n	80110a4 <m2m_wifi_cb+0x94>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 8011100:	a901      	add	r1, sp, #4
 8011102:	2032      	movs	r0, #50	; 0x32
 8011104:	4798      	blx	r3
 8011106:	e7cd      	b.n	80110a4 <m2m_wifi_cb+0x94>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
 8011108:	2264      	movs	r2, #100	; 0x64
 801110a:	2100      	movs	r1, #0
 801110c:	a801      	add	r0, sp, #4
 801110e:	f7ff f99f 	bl	8010450 <m2m_memset>
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 8011112:	2300      	movs	r3, #0
 8011114:	2264      	movs	r2, #100	; 0x64
 8011116:	a901      	add	r1, sp, #4
 8011118:	4620      	mov	r0, r4
 801111a:	f7ff fc79 	bl	8010a10 <hif_receive>
 801111e:	2800      	cmp	r0, #0
 8011120:	d1c0      	bne.n	80110a4 <m2m_wifi_cb+0x94>
			if (gpfAppWifiCb)
 8011122:	4b44      	ldr	r3, [pc, #272]	; (8011234 <m2m_wifi_cb+0x224>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d0bc      	beq.n	80110a4 <m2m_wifi_cb+0x94>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 801112a:	a901      	add	r1, sp, #4
 801112c:	202f      	movs	r0, #47	; 0x2f
 801112e:	4798      	blx	r3
 8011130:	e7b8      	b.n	80110a4 <m2m_wifi_cb+0x94>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 8011132:	2300      	movs	r3, #0
 8011134:	2204      	movs	r2, #4
 8011136:	eb0d 0102 	add.w	r1, sp, r2
 801113a:	4620      	mov	r0, r4
 801113c:	f7ff fc68 	bl	8010a10 <hif_receive>
 8011140:	2800      	cmp	r0, #0
 8011142:	d1af      	bne.n	80110a4 <m2m_wifi_cb+0x94>
			if (gpfAppWifiCb)
 8011144:	4b3b      	ldr	r3, [pc, #236]	; (8011234 <m2m_wifi_cb+0x224>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d0ab      	beq.n	80110a4 <m2m_wifi_cb+0x94>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 801114c:	2100      	movs	r1, #0
 801114e:	2034      	movs	r0, #52	; 0x34
 8011150:	4798      	blx	r3
 8011152:	e7a7      	b.n	80110a4 <m2m_wifi_cb+0x94>
		gu8scanInProgress = 0;
 8011154:	2300      	movs	r3, #0
 8011156:	4a37      	ldr	r2, [pc, #220]	; (8011234 <m2m_wifi_cb+0x224>)
 8011158:	7113      	strb	r3, [r2, #4]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 801115a:	2204      	movs	r2, #4
 801115c:	eb0d 0102 	add.w	r1, sp, r2
 8011160:	4620      	mov	r0, r4
 8011162:	f7ff fc55 	bl	8010a10 <hif_receive>
 8011166:	2800      	cmp	r0, #0
 8011168:	d19c      	bne.n	80110a4 <m2m_wifi_cb+0x94>
			gu8ChNum = strState.u8NumofCh;
 801116a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801116e:	4b31      	ldr	r3, [pc, #196]	; (8011234 <m2m_wifi_cb+0x224>)
 8011170:	715a      	strb	r2, [r3, #5]
			if (gpfAppWifiCb)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d095      	beq.n	80110a4 <m2m_wifi_cb+0x94>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 8011178:	a901      	add	r1, sp, #4
 801117a:	2011      	movs	r0, #17
 801117c:	4798      	blx	r3
 801117e:	e791      	b.n	80110a4 <m2m_wifi_cb+0x94>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 8011180:	2300      	movs	r3, #0
 8011182:	222c      	movs	r2, #44	; 0x2c
 8011184:	a901      	add	r1, sp, #4
 8011186:	4620      	mov	r0, r4
 8011188:	f7ff fc42 	bl	8010a10 <hif_receive>
 801118c:	2800      	cmp	r0, #0
 801118e:	d189      	bne.n	80110a4 <m2m_wifi_cb+0x94>
			if (gpfAppWifiCb)
 8011190:	4b28      	ldr	r3, [pc, #160]	; (8011234 <m2m_wifi_cb+0x224>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d085      	beq.n	80110a4 <m2m_wifi_cb+0x94>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 8011198:	a901      	add	r1, sp, #4
 801119a:	2013      	movs	r0, #19
 801119c:	4798      	blx	r3
 801119e:	e781      	b.n	80110a4 <m2m_wifi_cb+0x94>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 80111a0:	2300      	movs	r3, #0
 80111a2:	2204      	movs	r2, #4
 80111a4:	a91a      	add	r1, sp, #104	; 0x68
 80111a6:	4620      	mov	r0, r4
 80111a8:	f7ff fc32 	bl	8010a10 <hif_receive>
 80111ac:	2800      	cmp	r0, #0
 80111ae:	f47f af79 	bne.w	80110a4 <m2m_wifi_cb+0x94>
			if (gpfAppWifiCb)
 80111b2:	4b20      	ldr	r3, [pc, #128]	; (8011234 <m2m_wifi_cb+0x224>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	f43f af74 	beq.w	80110a4 <m2m_wifi_cb+0x94>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 80111bc:	a91a      	add	r1, sp, #104	; 0x68
 80111be:	2004      	movs	r0, #4
 80111c0:	4798      	blx	r3
 80111c2:	e76f      	b.n	80110a4 <m2m_wifi_cb+0x94>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 80111c4:	2300      	movs	r3, #0
 80111c6:	2204      	movs	r2, #4
 80111c8:	a91a      	add	r1, sp, #104	; 0x68
 80111ca:	4620      	mov	r0, r4
 80111cc:	f7ff fc20 	bl	8010a10 <hif_receive>
 80111d0:	2800      	cmp	r0, #0
 80111d2:	f47f af67 	bne.w	80110a4 <m2m_wifi_cb+0x94>
			if (gpfAppWifiCb)
 80111d6:	4b17      	ldr	r3, [pc, #92]	; (8011234 <m2m_wifi_cb+0x224>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	f43f af62 	beq.w	80110a4 <m2m_wifi_cb+0x94>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 80111e0:	a91a      	add	r1, sp, #104	; 0x68
 80111e2:	2065      	movs	r0, #101	; 0x65
 80111e4:	4798      	blx	r3
 80111e6:	e75d      	b.n	80110a4 <m2m_wifi_cb+0x94>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 80111e8:	2301      	movs	r3, #1
 80111ea:	2264      	movs	r2, #100	; 0x64
 80111ec:	a901      	add	r1, sp, #4
 80111ee:	4620      	mov	r0, r4
 80111f0:	f7ff fc0e 	bl	8010a10 <hif_receive>
 80111f4:	2800      	cmp	r0, #0
 80111f6:	f47f af55 	bne.w	80110a4 <m2m_wifi_cb+0x94>
			if(gpfAppWifiCb)
 80111fa:	4b0e      	ldr	r3, [pc, #56]	; (8011234 <m2m_wifi_cb+0x224>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	f43f af50 	beq.w	80110a4 <m2m_wifi_cb+0x94>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 8011204:	a901      	add	r1, sp, #4
 8011206:	2009      	movs	r0, #9
 8011208:	4798      	blx	r3
 801120a:	e74b      	b.n	80110a4 <m2m_wifi_cb+0x94>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 801120c:	2301      	movs	r3, #1
 801120e:	2204      	movs	r2, #4
 8011210:	eb0d 0102 	add.w	r1, sp, r2
 8011214:	4620      	mov	r0, r4
 8011216:	f7ff fbfb 	bl	8010a10 <hif_receive>
 801121a:	2800      	cmp	r0, #0
 801121c:	f47f af42 	bne.w	80110a4 <m2m_wifi_cb+0x94>
			if(gpfAppWifiCb)
 8011220:	4b04      	ldr	r3, [pc, #16]	; (8011234 <m2m_wifi_cb+0x224>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	f43f af3d 	beq.w	80110a4 <m2m_wifi_cb+0x94>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 801122a:	a901      	add	r1, sp, #4
 801122c:	202a      	movs	r0, #42	; 0x2a
 801122e:	4798      	blx	r3
 8011230:	e738      	b.n	80110a4 <m2m_wifi_cb+0x94>
 8011232:	bf00      	nop
 8011234:	2000240c 	.word	0x2000240c
 8011238:	f3af 8000 	nop.w
 801123c:	f3af 8000 	nop.w

08011240 <m2m_validate_ap_parameters>:
	if(pstrM2MAPConfig == NULL)
 8011240:	2800      	cmp	r0, #0
 8011242:	d040      	beq.n	80112c6 <m2m_validate_ap_parameters+0x86>
{
 8011244:	b510      	push	{r4, lr}
 8011246:	4604      	mov	r4, r0
	if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) >= M2M_MAX_SSID_LEN))
 8011248:	f7ff f90a 	bl	8010460 <m2m_strlen>
 801124c:	2800      	cmp	r0, #0
 801124e:	d03d      	beq.n	80112cc <m2m_validate_ap_parameters+0x8c>
 8011250:	4620      	mov	r0, r4
 8011252:	f7ff f905 	bl	8010460 <m2m_strlen>
 8011256:	2820      	cmp	r0, #32
 8011258:	d83b      	bhi.n	80112d2 <m2m_validate_ap_parameters+0x92>
	if(pstrM2MAPConfig->u8ListenChannel > M2M_WIFI_CH_14 || pstrM2MAPConfig->u8ListenChannel < M2M_WIFI_CH_1)
 801125a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 801125e:	3b01      	subs	r3, #1
 8011260:	b2db      	uxtb	r3, r3
 8011262:	2b0d      	cmp	r3, #13
 8011264:	d838      	bhi.n	80112d8 <m2m_validate_ap_parameters+0x98>
	if(!(pstrM2MAPConfig->au8DHCPServerIP[0] || pstrM2MAPConfig->au8DHCPServerIP[1]))
 8011266:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 801126a:	b92b      	cbnz	r3, 8011278 <m2m_validate_ap_parameters+0x38>
 801126c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8011270:	b913      	cbnz	r3, 8011278 <m2m_validate_ap_parameters+0x38>
		if(!(pstrM2MAPConfig->au8DHCPServerIP[2]))
 8011272:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011276:	b393      	cbz	r3, 80112de <m2m_validate_ap_parameters+0x9e>
	if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_OPEN)
 8011278:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 801127c:	2b01      	cmp	r3, #1
 801127e:	d031      	beq.n	80112e4 <m2m_validate_ap_parameters+0xa4>
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WEP)
 8011280:	2b03      	cmp	r3, #3
 8011282:	d008      	beq.n	8011296 <m2m_validate_ap_parameters+0x56>
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WPA_PSK)
 8011284:	2b02      	cmp	r3, #2
 8011286:	d13b      	bne.n	8011300 <m2m_validate_ap_parameters+0xc0>
		if(	((pstrM2MAPConfig->u8KeySz + 1) < M2M_MIN_PSK_LEN) || ((pstrM2MAPConfig->u8KeySz + 1) > M2M_MAX_PSK_LEN))
 8011288:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801128c:	3b08      	subs	r3, #8
 801128e:	2b38      	cmp	r3, #56	; 0x38
 8011290:	d839      	bhi.n	8011306 <m2m_validate_ap_parameters+0xc6>
	sint8 s8Ret = M2M_SUCCESS;
 8011292:	2000      	movs	r0, #0
}
 8011294:	bd10      	pop	{r4, pc}
		if((pstrM2MAPConfig->u8KeyIndx <= 0) || (pstrM2MAPConfig->u8KeyIndx > WEP_KEY_MAX_INDEX))
 8011296:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801129a:	3b01      	subs	r3, #1
 801129c:	b2db      	uxtb	r3, r3
 801129e:	2b03      	cmp	r3, #3
 80112a0:	d822      	bhi.n	80112e8 <m2m_validate_ap_parameters+0xa8>
		if(	(pstrM2MAPConfig->u8KeySz != WEP_40_KEY_STRING_SIZE) &&
 80112a2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80112a6:	2b0a      	cmp	r3, #10
 80112a8:	d001      	beq.n	80112ae <m2m_validate_ap_parameters+0x6e>
 80112aa:	2b1a      	cmp	r3, #26
 80112ac:	d11f      	bne.n	80112ee <m2m_validate_ap_parameters+0xae>
		if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) > WEP_104_KEY_STRING_SIZE))
 80112ae:	3424      	adds	r4, #36	; 0x24
 80112b0:	4620      	mov	r0, r4
 80112b2:	f7ff f8d5 	bl	8010460 <m2m_strlen>
 80112b6:	b1e8      	cbz	r0, 80112f4 <m2m_validate_ap_parameters+0xb4>
 80112b8:	4620      	mov	r0, r4
 80112ba:	f7ff f8d1 	bl	8010460 <m2m_strlen>
 80112be:	281a      	cmp	r0, #26
 80112c0:	d81b      	bhi.n	80112fa <m2m_validate_ap_parameters+0xba>
	sint8 s8Ret = M2M_SUCCESS;
 80112c2:	2000      	movs	r0, #0
 80112c4:	e7e6      	b.n	8011294 <m2m_validate_ap_parameters+0x54>
		s8Ret = M2M_ERR_FAIL;
 80112c6:	f06f 000b 	mvn.w	r0, #11
}
 80112ca:	4770      	bx	lr
		s8Ret = M2M_ERR_FAIL;
 80112cc:	f06f 000b 	mvn.w	r0, #11
 80112d0:	e7e0      	b.n	8011294 <m2m_validate_ap_parameters+0x54>
 80112d2:	f06f 000b 	mvn.w	r0, #11
 80112d6:	e7dd      	b.n	8011294 <m2m_validate_ap_parameters+0x54>
		s8Ret = M2M_ERR_FAIL;
 80112d8:	f06f 000b 	mvn.w	r0, #11
 80112dc:	e7da      	b.n	8011294 <m2m_validate_ap_parameters+0x54>
			s8Ret = M2M_ERR_FAIL;
 80112de:	f06f 000b 	mvn.w	r0, #11
 80112e2:	e7d7      	b.n	8011294 <m2m_validate_ap_parameters+0x54>
	sint8 s8Ret = M2M_SUCCESS;
 80112e4:	2000      	movs	r0, #0
 80112e6:	e7d5      	b.n	8011294 <m2m_validate_ap_parameters+0x54>
			s8Ret = M2M_ERR_FAIL;
 80112e8:	f06f 000b 	mvn.w	r0, #11
 80112ec:	e7d2      	b.n	8011294 <m2m_validate_ap_parameters+0x54>
			s8Ret = M2M_ERR_FAIL;
 80112ee:	f06f 000b 	mvn.w	r0, #11
 80112f2:	e7cf      	b.n	8011294 <m2m_validate_ap_parameters+0x54>
			s8Ret = M2M_ERR_FAIL;
 80112f4:	f06f 000b 	mvn.w	r0, #11
 80112f8:	e7cc      	b.n	8011294 <m2m_validate_ap_parameters+0x54>
 80112fa:	f06f 000b 	mvn.w	r0, #11
 80112fe:	e7c9      	b.n	8011294 <m2m_validate_ap_parameters+0x54>
		s8Ret = M2M_ERR_FAIL;
 8011300:	f06f 000b 	mvn.w	r0, #11
 8011304:	e7c6      	b.n	8011294 <m2m_validate_ap_parameters+0x54>
			s8Ret = M2M_ERR_FAIL;
 8011306:	f06f 000b 	mvn.w	r0, #11
 801130a:	e7c3      	b.n	8011294 <m2m_validate_ap_parameters+0x54>
 801130c:	f3af 8000 	nop.w

08011310 <m2m_wifi_download_mode>:
{
 8011310:	b510      	push	{r4, lr}
	ret = nm_drv_init_download_mode();
 8011312:	f001 fafd 	bl	8012910 <nm_drv_init_download_mode>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 8011316:	4604      	mov	r4, r0
 8011318:	b108      	cbz	r0, 801131e <m2m_wifi_download_mode+0xe>
}
 801131a:	4620      	mov	r0, r4
 801131c:	bd10      	pop	{r4, pc}
	enable_interrupts();
 801131e:	f000 fda7 	bl	8011e70 <enable_interrupts>
 8011322:	e7fa      	b.n	801131a <m2m_wifi_download_mode+0xa>
 8011324:	f3af 8000 	nop.w
 8011328:	f3af 8000 	nop.w
 801132c:	f3af 8000 	nop.w

08011330 <m2m_wifi_send_crl>:

sint8 m2m_wifi_send_crl(tstrTlsCrlInfo* pCRL)
{
 8011330:	b500      	push	{lr}
 8011332:	b085      	sub	sp, #20
	sint8 s8Ret = M2M_ERR_FAIL;
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, ((uint8)M2M_SSL_IND_CRL | (uint8)M2M_REQ_DATA_PKT), NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
 8011334:	2200      	movs	r2, #0
 8011336:	9202      	str	r2, [sp, #8]
 8011338:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 801133c:	9301      	str	r3, [sp, #4]
 801133e:	9000      	str	r0, [sp, #0]
 8011340:	4613      	mov	r3, r2
 8011342:	2183      	movs	r1, #131	; 0x83
 8011344:	2005      	movs	r0, #5
 8011346:	f7ff fa73 	bl	8010830 <hif_send>
	return s8Ret;
}
 801134a:	b005      	add	sp, #20
 801134c:	f85d fb04 	ldr.w	pc, [sp], #4

08011350 <m2m_wifi_init>:

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
 8011350:	b510      	push	{r4, lr}
 8011352:	b08e      	sub	sp, #56	; 0x38
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 8011354:	2301      	movs	r3, #1
 8011356:	f88d 300f 	strb.w	r3, [sp, #15]

	if(param == NULL) {
 801135a:	2800      	cmp	r0, #0
 801135c:	d045      	beq.n	80113ea <m2m_wifi_init+0x9a>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}

	gpfAppWifiCb = param->pfAppWifiCb;
 801135e:	6802      	ldr	r2, [r0, #0]
 8011360:	4b23      	ldr	r3, [pc, #140]	; (80113f0 <m2m_wifi_init+0xa0>)
 8011362:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
 8011364:	2200      	movs	r2, #0
 8011366:	711a      	strb	r2, [r3, #4]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
 8011368:	f10d 000f 	add.w	r0, sp, #15
 801136c:	f001 faf0 	bl	8012950 <nm_drv_init>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 8011370:	4604      	mov	r4, r0
 8011372:	b110      	cbz	r0, 801137a <m2m_wifi_init+0x2a>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
 8011374:	4620      	mov	r0, r4
 8011376:	b00e      	add	sp, #56	; 0x38
 8011378:	bd10      	pop	{r4, pc}
	ret = hif_init();
 801137a:	f7ff fbb9 	bl	8010af0 <hif_init>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
 801137e:	4604      	mov	r4, r0
 8011380:	b118      	cbz	r0, 801138a <m2m_wifi_init+0x3a>
	nm_drv_deinit(NULL);
 8011382:	2000      	movs	r0, #0
 8011384:	f001 fb1c 	bl	80129c0 <nm_drv_deinit>
 8011388:	e7f4      	b.n	8011374 <m2m_wifi_init+0x24>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
 801138a:	491a      	ldr	r1, [pc, #104]	; (80113f4 <m2m_wifi_init+0xa4>)
 801138c:	2001      	movs	r0, #1
 801138e:	f7ff fb7f 	bl	8010a90 <hif_register_cb>
	ret = nm_get_firmware_full_info(&strtmp);
 8011392:	a804      	add	r0, sp, #16
 8011394:	f001 f9dc 	bl	8012750 <nm_get_firmware_full_info>
 8011398:	4604      	mov	r4, r0
	myPrintf("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
 801139a:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801139e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80113a2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80113a6:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 80113aa:	9000      	str	r0, [sp, #0]
 80113ac:	4812      	ldr	r0, [pc, #72]	; (80113f8 <m2m_wifi_init+0xa8>)
 80113ae:	f7fa fdb7 	bl	800bf20 <myPrintf>
	myPrintf("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
 80113b2:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 80113b6:	f10d 011a 	add.w	r1, sp, #26
 80113ba:	4810      	ldr	r0, [pc, #64]	; (80113fc <m2m_wifi_init+0xac>)
 80113bc:	f7fa fdb0 	bl	800bf20 <myPrintf>
	myPrintf("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
 80113c0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80113c4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80113c8:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80113cc:	480c      	ldr	r0, [pc, #48]	; (8011400 <m2m_wifi_init+0xb0>)
 80113ce:	f7fa fda7 	bl	800bf20 <myPrintf>
	myPrintf("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 80113d2:	2304      	movs	r3, #4
 80113d4:	2205      	movs	r2, #5
 80113d6:	2113      	movs	r1, #19
 80113d8:	480a      	ldr	r0, [pc, #40]	; (8011404 <m2m_wifi_init+0xb4>)
 80113da:	f7fa fda1 	bl	800bf20 <myPrintf>
	myPrintf("Driver built at %s\t%s\n",__DATE__,__TIME__);
 80113de:	4a0a      	ldr	r2, [pc, #40]	; (8011408 <m2m_wifi_init+0xb8>)
 80113e0:	490a      	ldr	r1, [pc, #40]	; (801140c <m2m_wifi_init+0xbc>)
 80113e2:	480b      	ldr	r0, [pc, #44]	; (8011410 <m2m_wifi_init+0xc0>)
 80113e4:	f7fa fd9c 	bl	800bf20 <myPrintf>
	goto _EXIT0;
 80113e8:	e7c4      	b.n	8011374 <m2m_wifi_init+0x24>
		ret = M2M_ERR_FAIL;
 80113ea:	f06f 040b 	mvn.w	r4, #11
 80113ee:	e7c1      	b.n	8011374 <m2m_wifi_init+0x24>
 80113f0:	2000240c 	.word	0x2000240c
 80113f4:	08011011 	.word	0x08011011
 80113f8:	0801a90c 	.word	0x0801a90c
 80113fc:	0801a934 	.word	0x0801a934
 8011400:	0801a950 	.word	0x0801a950
 8011404:	0801a974 	.word	0x0801a974
 8011408:	0801a98c 	.word	0x0801a98c
 801140c:	0801a718 	.word	0x0801a718
 8011410:	0801a998 	.word	0x0801a998
 8011414:	f3af 8000 	nop.w
 8011418:	f3af 8000 	nop.w
 801141c:	f3af 8000 	nop.w

08011420 <m2m_wifi_deinit>:

sint8  m2m_wifi_deinit(void * arg)
{
 8011420:	b508      	push	{r3, lr}
  (void)arg;

	hif_deinit(NULL);
 8011422:	2000      	movs	r0, #0
 8011424:	f7ff f9f4 	bl	8010810 <hif_deinit>

	nm_drv_deinit(NULL);
 8011428:	2000      	movs	r0, #0
 801142a:	f001 fac9 	bl	80129c0 <nm_drv_deinit>

	return M2M_SUCCESS;
}
 801142e:	2000      	movs	r0, #0
 8011430:	bd08      	pop	{r3, pc}
 8011432:	bf00      	nop
 8011434:	f3af 8000 	nop.w
 8011438:	f3af 8000 	nop.w
 801143c:	f3af 8000 	nop.w

08011440 <m2m_wifi_handle_events>:


sint8 m2m_wifi_handle_events(void * arg)
{
 8011440:	b508      	push	{r3, lr}
  (void)arg;
	return hif_handle_isr();
 8011442:	f7ff facd 	bl	80109e0 <hif_handle_isr>
}
 8011446:	bd08      	pop	{r3, pc}
 8011448:	f3af 8000 	nop.w
 801144c:	f3af 8000 	nop.w

08011450 <m2m_wifi_default_connect>:

sint8 m2m_wifi_default_connect(void)
{
 8011450:	b500      	push	{lr}
 8011452:	b085      	sub	sp, #20
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
 8011454:	2200      	movs	r2, #0
 8011456:	9202      	str	r2, [sp, #8]
 8011458:	9201      	str	r2, [sp, #4]
 801145a:	9200      	str	r2, [sp, #0]
 801145c:	4613      	mov	r3, r2
 801145e:	2129      	movs	r1, #41	; 0x29
 8011460:	2001      	movs	r0, #1
 8011462:	f7ff f9e5 	bl	8010830 <hif_send>
}
 8011466:	b005      	add	sp, #20
 8011468:	f85d fb04 	ldr.w	pc, [sp], #4
 801146c:	f3af 8000 	nop.w

08011470 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
 8011470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011474:	b0a0      	sub	sp, #128	; 0x80
 8011476:	4680      	mov	r8, r0
 8011478:	460d      	mov	r5, r1
 801147a:	4614      	mov	r4, r2
 801147c:	461e      	mov	r6, r3
 801147e:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
 8011482:	2a01      	cmp	r2, #1
 8011484:	d004      	beq.n	8011490 <m2m_wifi_connect_sc+0x20>
	{
		if(pvAuthInfo == NULL)
 8011486:	2b00      	cmp	r3, #0
 8011488:	f000 8086 	beq.w	8011598 <m2m_wifi_connect_sc+0x128>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
 801148c:	2a02      	cmp	r2, #2
 801148e:	d036      	beq.n	80114fe <m2m_wifi_connect_sc+0x8e>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
 8011490:	1e6b      	subs	r3, r5, #1
 8011492:	b2db      	uxtb	r3, r3
 8011494:	2b1f      	cmp	r3, #31
 8011496:	f200 808b 	bhi.w	80115b0 <m2m_wifi_connect_sc+0x140>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
 801149a:	1e7b      	subs	r3, r7, #1
 801149c:	b29b      	uxth	r3, r3
 801149e:	2b0d      	cmp	r3, #13
 80114a0:	d902      	bls.n	80114a8 <m2m_wifi_connect_sc+0x38>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
 80114a2:	2fff      	cmp	r7, #255	; 0xff
 80114a4:	f040 8087 	bne.w	80115b6 <m2m_wifi_connect_sc+0x146>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
 80114a8:	462a      	mov	r2, r5
 80114aa:	4641      	mov	r1, r8
 80114ac:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
 80114b0:	f7fe ffae 	bl	8010410 <m2m_memcpy>
	strConnect.au8SSID[u8SsidLen]	= 0;
 80114b4:	ab20      	add	r3, sp, #128	; 0x80
 80114b6:	441d      	add	r5, r3
 80114b8:	2300      	movs	r3, #0
 80114ba:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
 80114be:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
 80114c2:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80114c6:	3300      	adds	r3, #0
 80114c8:	bf18      	it	ne
 80114ca:	2301      	movne	r3, #1
 80114cc:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
 80114d0:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
 80114d4:	2c03      	cmp	r4, #3
 80114d6:	d02f      	beq.n	8011538 <m2m_wifi_connect_sc+0xc8>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
 80114d8:	2c02      	cmp	r4, #2
 80114da:	d04a      	beq.n	8011572 <m2m_wifi_connect_sc+0x102>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
 80114dc:	2c04      	cmp	r4, #4
 80114de:	d055      	beq.n	801158c <m2m_wifi_connect_sc+0x11c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
 80114e0:	2c01      	cmp	r4, #1
 80114e2:	d174      	bne.n	80115ce <m2m_wifi_connect_sc+0x15e>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
 80114e4:	2300      	movs	r3, #0
 80114e6:	9302      	str	r3, [sp, #8]
 80114e8:	9301      	str	r3, [sp, #4]
 80114ea:	9300      	str	r3, [sp, #0]
 80114ec:	236c      	movs	r3, #108	; 0x6c
 80114ee:	aa05      	add	r2, sp, #20
 80114f0:	2128      	movs	r1, #40	; 0x28
 80114f2:	2001      	movs	r0, #1
 80114f4:	f7ff f99c 	bl	8010830 <hif_send>

ERR1:
	return ret;
}
 80114f8:	b020      	add	sp, #128	; 0x80
 80114fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
 80114fe:	4618      	mov	r0, r3
 8011500:	f7fe ffae 	bl	8010460 <m2m_strlen>
 8011504:	2840      	cmp	r0, #64	; 0x40
 8011506:	d1c3      	bne.n	8011490 <m2m_wifi_connect_sc+0x20>
			uint8 i = 0;
 8011508:	2300      	movs	r3, #0
 801150a:	e001      	b.n	8011510 <m2m_wifi_connect_sc+0xa0>
				i++;
 801150c:	3301      	adds	r3, #1
 801150e:	b2db      	uxtb	r3, r3
			while(i < (M2M_MAX_PSK_LEN-1))
 8011510:	2b3f      	cmp	r3, #63	; 0x3f
 8011512:	d8bd      	bhi.n	8011490 <m2m_wifi_connect_sc+0x20>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
 8011514:	5cf2      	ldrb	r2, [r6, r3]
 8011516:	2a2f      	cmp	r2, #47	; 0x2f
 8011518:	d941      	bls.n	801159e <m2m_wifi_connect_sc+0x12e>
 801151a:	f1a2 013a 	sub.w	r1, r2, #58	; 0x3a
 801151e:	b2c9      	uxtb	r1, r1
 8011520:	2906      	cmp	r1, #6
 8011522:	d93f      	bls.n	80115a4 <m2m_wifi_connect_sc+0x134>
 8011524:	f1a2 0147 	sub.w	r1, r2, #71	; 0x47
 8011528:	b2c9      	uxtb	r1, r1
 801152a:	2919      	cmp	r1, #25
 801152c:	d93d      	bls.n	80115aa <m2m_wifi_connect_sc+0x13a>
 801152e:	2a66      	cmp	r2, #102	; 0x66
 8011530:	d9ec      	bls.n	801150c <m2m_wifi_connect_sc+0x9c>
					ret = M2M_ERR_FAIL;
 8011532:	f06f 000b 	mvn.w	r0, #11
 8011536:	e7df      	b.n	80114f8 <m2m_wifi_connect_sc+0x88>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
 8011538:	7833      	ldrb	r3, [r6, #0]
 801153a:	3b01      	subs	r3, #1
 801153c:	b2db      	uxtb	r3, r3
 801153e:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
 8011542:	2b03      	cmp	r3, #3
 8011544:	d83a      	bhi.n	80115bc <m2m_wifi_connect_sc+0x14c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
 8011546:	7873      	ldrb	r3, [r6, #1]
 8011548:	3b01      	subs	r3, #1
 801154a:	b2db      	uxtb	r3, r3
 801154c:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
 8011550:	2b0a      	cmp	r3, #10
 8011552:	d001      	beq.n	8011558 <m2m_wifi_connect_sc+0xe8>
 8011554:	2b1a      	cmp	r3, #26
 8011556:	d134      	bne.n	80115c2 <m2m_wifi_connect_sc+0x152>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
 8011558:	7872      	ldrb	r2, [r6, #1]
 801155a:	1cb1      	adds	r1, r6, #2
 801155c:	f10d 0016 	add.w	r0, sp, #22
 8011560:	f7fe ff56 	bl	8010410 <m2m_memcpy>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
 8011564:	7873      	ldrb	r3, [r6, #1]
 8011566:	aa20      	add	r2, sp, #128	; 0x80
 8011568:	4413      	add	r3, r2
 801156a:	2200      	movs	r2, #0
 801156c:	f803 2c6a 	strb.w	r2, [r3, #-106]
 8011570:	e7b8      	b.n	80114e4 <m2m_wifi_connect_sc+0x74>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
 8011572:	4630      	mov	r0, r6
 8011574:	f7fe ff74 	bl	8010460 <m2m_strlen>
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
 8011578:	1e43      	subs	r3, r0, #1
 801157a:	b29b      	uxth	r3, r3
 801157c:	2b3f      	cmp	r3, #63	; 0x3f
 801157e:	d823      	bhi.n	80115c8 <m2m_wifi_connect_sc+0x158>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
 8011580:	1c42      	adds	r2, r0, #1
 8011582:	4631      	mov	r1, r6
 8011584:	a805      	add	r0, sp, #20
 8011586:	f7fe ff43 	bl	8010410 <m2m_memcpy>
 801158a:	e7ab      	b.n	80114e4 <m2m_wifi_connect_sc+0x74>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
 801158c:	223e      	movs	r2, #62	; 0x3e
 801158e:	4631      	mov	r1, r6
 8011590:	a805      	add	r0, sp, #20
 8011592:	f7fe ff3d 	bl	8010410 <m2m_memcpy>
 8011596:	e7a5      	b.n	80114e4 <m2m_wifi_connect_sc+0x74>
			ret = M2M_ERR_FAIL;
 8011598:	f06f 000b 	mvn.w	r0, #11
 801159c:	e7ac      	b.n	80114f8 <m2m_wifi_connect_sc+0x88>
					ret = M2M_ERR_FAIL;
 801159e:	f06f 000b 	mvn.w	r0, #11
 80115a2:	e7a9      	b.n	80114f8 <m2m_wifi_connect_sc+0x88>
 80115a4:	f06f 000b 	mvn.w	r0, #11
 80115a8:	e7a6      	b.n	80114f8 <m2m_wifi_connect_sc+0x88>
 80115aa:	f06f 000b 	mvn.w	r0, #11
 80115ae:	e7a3      	b.n	80114f8 <m2m_wifi_connect_sc+0x88>
		ret = M2M_ERR_FAIL;
 80115b0:	f06f 000b 	mvn.w	r0, #11
 80115b4:	e7a0      	b.n	80114f8 <m2m_wifi_connect_sc+0x88>
			ret = M2M_ERR_FAIL;
 80115b6:	f06f 000b 	mvn.w	r0, #11
 80115ba:	e79d      	b.n	80114f8 <m2m_wifi_connect_sc+0x88>
			ret = M2M_ERR_FAIL;
 80115bc:	f06f 000b 	mvn.w	r0, #11
 80115c0:	e79a      	b.n	80114f8 <m2m_wifi_connect_sc+0x88>
			ret = M2M_ERR_FAIL;
 80115c2:	f06f 000b 	mvn.w	r0, #11
 80115c6:	e797      	b.n	80114f8 <m2m_wifi_connect_sc+0x88>
			ret = M2M_ERR_FAIL;
 80115c8:	f06f 000b 	mvn.w	r0, #11
 80115cc:	e794      	b.n	80114f8 <m2m_wifi_connect_sc+0x88>
		ret = M2M_ERR_FAIL;
 80115ce:	f06f 000b 	mvn.w	r0, #11
 80115d2:	e791      	b.n	80114f8 <m2m_wifi_connect_sc+0x88>
 80115d4:	f3af 8000 	nop.w
 80115d8:	f3af 8000 	nop.w
 80115dc:	f3af 8000 	nop.w

080115e0 <m2m_wifi_connect>:
{
 80115e0:	b510      	push	{r4, lr}
 80115e2:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
 80115e4:	2400      	movs	r4, #0
 80115e6:	9401      	str	r4, [sp, #4]
 80115e8:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80115ec:	9400      	str	r4, [sp, #0]
 80115ee:	f7ff ff3f 	bl	8011470 <m2m_wifi_connect_sc>
}
 80115f2:	b002      	add	sp, #8
 80115f4:	bd10      	pop	{r4, pc}
 80115f6:	bf00      	nop
 80115f8:	f3af 8000 	nop.w
 80115fc:	f3af 8000 	nop.w

08011600 <m2m_wifi_disconnect>:

sint8 m2m_wifi_disconnect(void)
{
 8011600:	b500      	push	{lr}
 8011602:	b085      	sub	sp, #20
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
 8011604:	2200      	movs	r2, #0
 8011606:	9202      	str	r2, [sp, #8]
 8011608:	9201      	str	r2, [sp, #4]
 801160a:	9200      	str	r2, [sp, #0]
 801160c:	4613      	mov	r3, r2
 801160e:	212b      	movs	r1, #43	; 0x2b
 8011610:	2001      	movs	r0, #1
 8011612:	f7ff f90d 	bl	8010830 <hif_send>
}
 8011616:	b005      	add	sp, #20
 8011618:	f85d fb04 	ldr.w	pc, [sp], #4
 801161c:	f3af 8000 	nop.w

08011620 <m2m_wifi_set_mac_address>:
sint8 m2m_wifi_set_mac_address(uint8 au8MacAddress[6])
{
 8011620:	b500      	push	{lr}
 8011622:	b087      	sub	sp, #28
	tstrM2mSetMacAddress strTmp;
	m2m_memcpy((uint8*) strTmp.au8Mac, (uint8*) au8MacAddress, 6);
 8011624:	2206      	movs	r2, #6
 8011626:	4601      	mov	r1, r0
 8011628:	a804      	add	r0, sp, #16
 801162a:	f7fe fef1 	bl	8010410 <m2m_memcpy>
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_MAC_ADDRESS,
 801162e:	2300      	movs	r3, #0
 8011630:	9302      	str	r3, [sp, #8]
 8011632:	9301      	str	r3, [sp, #4]
 8011634:	9300      	str	r3, [sp, #0]
 8011636:	2308      	movs	r3, #8
 8011638:	aa04      	add	r2, sp, #16
 801163a:	2102      	movs	r1, #2
 801163c:	2001      	movs	r0, #1
 801163e:	f7ff f8f7 	bl	8010830 <hif_send>
		(uint8*) &strTmp, sizeof(tstrM2mSetMacAddress), NULL, 0,0);
}
 8011642:	b007      	add	sp, #28
 8011644:	f85d fb04 	ldr.w	pc, [sp], #4
 8011648:	f3af 8000 	nop.w
 801164c:	f3af 8000 	nop.w

08011650 <m2m_wifi_set_static_ip>:

sint8 m2m_wifi_set_static_ip(tstrM2MIPConfig * pstrStaticIPConf)
{
 8011650:	b500      	push	{lr}
 8011652:	b085      	sub	sp, #20
	pstrStaticIPConf->u32Gateway = NM_BSP_B_L_32(pstrStaticIPConf->u32Gateway);
	pstrStaticIPConf->u32StaticIP = NM_BSP_B_L_32(
		pstrStaticIPConf->u32StaticIP);
	pstrStaticIPConf->u32SubnetMask = NM_BSP_B_L_32(
		pstrStaticIPConf->u32SubnetMask);
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
 8011654:	2300      	movs	r3, #0
 8011656:	9302      	str	r3, [sp, #8]
 8011658:	9301      	str	r3, [sp, #4]
 801165a:	9300      	str	r3, [sp, #0]
 801165c:	2314      	movs	r3, #20
 801165e:	4602      	mov	r2, r0
 8011660:	210a      	movs	r1, #10
 8011662:	2002      	movs	r0, #2
 8011664:	f7ff f8e4 	bl	8010830 <hif_send>
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}
 8011668:	b005      	add	sp, #20
 801166a:	f85d fb04 	ldr.w	pc, [sp], #4
 801166e:	bf00      	nop

08011670 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
 8011670:	2000      	movs	r0, #0
 8011672:	4770      	bx	lr
 8011674:	f3af 8000 	nop.w
 8011678:	f3af 8000 	nop.w
 801167c:	f3af 8000 	nop.w

08011680 <m2m_wifi_request_dhcp_server>:
sint8 m2m_wifi_request_dhcp_server(uint8* addr)
{
  (void)addr;
    /*legacy API should be removed */
	return 0;
}
 8011680:	2000      	movs	r0, #0
 8011682:	4770      	bx	lr
 8011684:	f3af 8000 	nop.w
 8011688:	f3af 8000 	nop.w
 801168c:	f3af 8000 	nop.w

08011690 <m2m_wifi_enable_dhcp>:
@sa			tstrM2mLsnInt , m2m_wifi_set_sleep_mode
@pre		m2m_wifi_set_sleep_mode shall be called first
@warning	The Function called once after initialization.
*/
sint8 m2m_wifi_enable_dhcp(uint8  u8DhcpEn )
{
 8011690:	b500      	push	{lr}
 8011692:	b085      	sub	sp, #20

	uint8	u8Req;
	u8Req = u8DhcpEn ? M2M_IP_REQ_ENABLE_DHCP : M2M_IP_REQ_DISABLE_DHCP;
 8011694:	b958      	cbnz	r0, 80116ae <m2m_wifi_enable_dhcp+0x1e>
 8011696:	210c      	movs	r1, #12
	return hif_send(M2M_REQ_GROUP_IP, u8Req, NULL, 0, NULL, 0, 0);
 8011698:	2200      	movs	r2, #0
 801169a:	9202      	str	r2, [sp, #8]
 801169c:	9201      	str	r2, [sp, #4]
 801169e:	9200      	str	r2, [sp, #0]
 80116a0:	4613      	mov	r3, r2
 80116a2:	2002      	movs	r0, #2
 80116a4:	f7ff f8c4 	bl	8010830 <hif_send>


}
 80116a8:	b005      	add	sp, #20
 80116aa:	f85d fb04 	ldr.w	pc, [sp], #4
	u8Req = u8DhcpEn ? M2M_IP_REQ_ENABLE_DHCP : M2M_IP_REQ_DISABLE_DHCP;
 80116ae:	210b      	movs	r1, #11
 80116b0:	e7f2      	b.n	8011698 <m2m_wifi_enable_dhcp+0x8>
 80116b2:	bf00      	nop
 80116b4:	f3af 8000 	nop.w
 80116b8:	f3af 8000 	nop.w
 80116bc:	f3af 8000 	nop.w

080116c0 <m2m_wifi_set_lsn_int>:

sint8 m2m_wifi_set_lsn_int(tstrM2mLsnInt* pstrM2mLsnInt)
{
 80116c0:	b500      	push	{lr}
 80116c2:	b085      	sub	sp, #20
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_LSN_INT, (uint8*)pstrM2mLsnInt, sizeof(tstrM2mLsnInt), NULL, 0, 0);
 80116c4:	2300      	movs	r3, #0
 80116c6:	9302      	str	r3, [sp, #8]
 80116c8:	9301      	str	r3, [sp, #4]
 80116ca:	9300      	str	r3, [sp, #0]
 80116cc:	2304      	movs	r3, #4
 80116ce:	4602      	mov	r2, r0
 80116d0:	2139      	movs	r1, #57	; 0x39
 80116d2:	2001      	movs	r0, #1
 80116d4:	f7ff f8ac 	bl	8010830 <hif_send>
}
 80116d8:	b005      	add	sp, #20
 80116da:	f85d fb04 	ldr.w	pc, [sp], #4
 80116de:	bf00      	nop

080116e0 <m2m_wifi_set_cust_InfoElement>:

sint8 m2m_wifi_set_cust_InfoElement(uint8* pau8M2mCustInfoElement)
{

	sint8  ret = M2M_ERR_FAIL;
	if(pau8M2mCustInfoElement != NULL)
 80116e0:	b190      	cbz	r0, 8011708 <m2m_wifi_set_cust_InfoElement+0x28>
 80116e2:	4602      	mov	r2, r0
	{
		if((pau8M2mCustInfoElement[0] + 1) < M2M_CUST_IE_LEN_MAX)
 80116e4:	7803      	ldrb	r3, [r0, #0]
 80116e6:	1c59      	adds	r1, r3, #1
 80116e8:	29fb      	cmp	r1, #251	; 0xfb
 80116ea:	dc10      	bgt.n	801170e <m2m_wifi_set_cust_InfoElement+0x2e>
{
 80116ec:	b500      	push	{lr}
 80116ee:	b085      	sub	sp, #20
		{
			ret = hif_send(M2M_REQ_GROUP_WIFI, ((uint8)M2M_WIFI_REQ_CUST_INFO_ELEMENT | (uint8)M2M_REQ_DATA_PKT), (uint8*)pau8M2mCustInfoElement, pau8M2mCustInfoElement[0]+1, NULL, 0, 0);
 80116f0:	2100      	movs	r1, #0
 80116f2:	9102      	str	r1, [sp, #8]
 80116f4:	9101      	str	r1, [sp, #4]
 80116f6:	9100      	str	r1, [sp, #0]
 80116f8:	3301      	adds	r3, #1
 80116fa:	218f      	movs	r1, #143	; 0x8f
 80116fc:	2001      	movs	r0, #1
 80116fe:	f7ff f897 	bl	8010830 <hif_send>
		}
	}
	return ret;
}
 8011702:	b005      	add	sp, #20
 8011704:	f85d fb04 	ldr.w	pc, [sp], #4
	sint8  ret = M2M_ERR_FAIL;
 8011708:	f06f 000b 	mvn.w	r0, #11
 801170c:	4770      	bx	lr
 801170e:	f06f 000b 	mvn.w	r0, #11
}
 8011712:	4770      	bx	lr
 8011714:	f3af 8000 	nop.w
 8011718:	f3af 8000 	nop.w
 801171c:	f3af 8000 	nop.w

08011720 <m2m_wifi_set_scan_options>:

sint8 m2m_wifi_set_scan_options(tstrM2MScanOption* ptstrM2MScanOption)
{
 8011720:	b510      	push	{r4, lr}
 8011722:	b084      	sub	sp, #16
 8011724:	4604      	mov	r4, r0
	sint8	s8Ret = M2M_ERR_FAIL;
	if(m2m_validate_scan_options (ptstrM2MScanOption) == M2M_SUCCESS)
 8011726:	f7ff fc4b 	bl	8010fc0 <m2m_validate_scan_options>
 801172a:	b958      	cbnz	r0, 8011744 <m2m_wifi_set_scan_options+0x24>
	{
		s8Ret =  hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_SCAN_OPTION, (uint8*)ptstrM2MScanOption, sizeof(tstrM2MScanOption),NULL, 0,0);
 801172c:	2300      	movs	r3, #0
 801172e:	9302      	str	r3, [sp, #8]
 8011730:	9301      	str	r3, [sp, #4]
 8011732:	9300      	str	r3, [sp, #0]
 8011734:	2304      	movs	r3, #4
 8011736:	4622      	mov	r2, r4
 8011738:	2114      	movs	r1, #20
 801173a:	2001      	movs	r0, #1
 801173c:	f7ff f878 	bl	8010830 <hif_send>
	}
	return s8Ret;
}
 8011740:	b004      	add	sp, #16
 8011742:	bd10      	pop	{r4, pc}
	sint8	s8Ret = M2M_ERR_FAIL;
 8011744:	f06f 000b 	mvn.w	r0, #11
 8011748:	e7fa      	b.n	8011740 <m2m_wifi_set_scan_options+0x20>
 801174a:	bf00      	nop
 801174c:	f3af 8000 	nop.w

08011750 <m2m_wifi_set_scan_region>:
sint8 m2m_wifi_set_scan_region(uint16  ScanRegion)
{
 8011750:	b500      	push	{lr}
 8011752:	b087      	sub	sp, #28
	sint8	s8Ret = M2M_ERR_FAIL;
	tstrM2MScanRegion strScanRegion;
	strScanRegion.u16ScanRegion = ScanRegion;
 8011754:	aa06      	add	r2, sp, #24
 8011756:	f822 0d04 	strh.w	r0, [r2, #-4]!
	s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_SCAN_REGION, (uint8*)&strScanRegion, sizeof(tstrM2MScanRegion),NULL, 0,0);
 801175a:	2300      	movs	r3, #0
 801175c:	9302      	str	r3, [sp, #8]
 801175e:	9301      	str	r3, [sp, #4]
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	2304      	movs	r3, #4
 8011764:	2115      	movs	r1, #21
 8011766:	2001      	movs	r0, #1
 8011768:	f7ff f862 	bl	8010830 <hif_send>
	return s8Ret;
}
 801176c:	b007      	add	sp, #28
 801176e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011772:	bf00      	nop
 8011774:	f3af 8000 	nop.w
 8011778:	f3af 8000 	nop.w
 801177c:	f3af 8000 	nop.w

08011780 <m2m_wifi_request_scan>:
sint8 m2m_wifi_request_scan(uint8 ch)
{
	sint8	s8Ret = M2M_SUCCESS;

	if(!gu8scanInProgress)
 8011780:	4b13      	ldr	r3, [pc, #76]	; (80117d0 <m2m_wifi_request_scan+0x50>)
 8011782:	791b      	ldrb	r3, [r3, #4]
 8011784:	b9e3      	cbnz	r3, 80117c0 <m2m_wifi_request_scan+0x40>
	{
		if(((ch >= M2M_WIFI_CH_1) && (ch <= M2M_WIFI_CH_14)) || (ch == M2M_WIFI_CH_ALL))
 8011786:	1e43      	subs	r3, r0, #1
 8011788:	b2db      	uxtb	r3, r3
 801178a:	2b0d      	cmp	r3, #13
 801178c:	d901      	bls.n	8011792 <m2m_wifi_request_scan+0x12>
 801178e:	28ff      	cmp	r0, #255	; 0xff
 8011790:	d119      	bne.n	80117c6 <m2m_wifi_request_scan+0x46>
{
 8011792:	b500      	push	{lr}
 8011794:	b087      	sub	sp, #28
		{
			tstrM2MScan strtmp;
			strtmp.u8ChNum = ch;
 8011796:	aa06      	add	r2, sp, #24
 8011798:	f802 0d04 	strb.w	r0, [r2, #-4]!
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN, (uint8*)&strtmp, sizeof(tstrM2MScan),NULL, 0,0);
 801179c:	2300      	movs	r3, #0
 801179e:	9302      	str	r3, [sp, #8]
 80117a0:	9301      	str	r3, [sp, #4]
 80117a2:	9300      	str	r3, [sp, #0]
 80117a4:	2304      	movs	r3, #4
 80117a6:	2110      	movs	r1, #16
 80117a8:	2001      	movs	r0, #1
 80117aa:	f7ff f841 	bl	8010830 <hif_send>
			if(s8Ret == M2M_SUCCESS)
 80117ae:	4603      	mov	r3, r0
 80117b0:	b910      	cbnz	r0, 80117b8 <m2m_wifi_request_scan+0x38>
			{
				gu8scanInProgress = 1;
 80117b2:	4a07      	ldr	r2, [pc, #28]	; (80117d0 <m2m_wifi_request_scan+0x50>)
 80117b4:	2101      	movs	r1, #1
 80117b6:	7111      	strb	r1, [r2, #4]
	else
	{
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
	}
	return s8Ret;
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	b007      	add	sp, #28
 80117bc:	f85d fb04 	ldr.w	pc, [sp], #4
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
 80117c0:	f06f 030d 	mvn.w	r3, #13
 80117c4:	e001      	b.n	80117ca <m2m_wifi_request_scan+0x4a>
			s8Ret = M2M_ERR_INVALID_ARG;
 80117c6:	f06f 030e 	mvn.w	r3, #14
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	4770      	bx	lr
 80117ce:	bf00      	nop
 80117d0:	2000240c 	.word	0x2000240c
 80117d4:	f3af 8000 	nop.w
 80117d8:	f3af 8000 	nop.w
 80117dc:	f3af 8000 	nop.w

080117e0 <m2m_wifi_request_scan_passive>:

sint8 m2m_wifi_request_scan_passive(uint8 ch, uint16 scan_time)
{
	sint8	s8Ret = M2M_SUCCESS;

	if(!gu8scanInProgress)
 80117e0:	4b14      	ldr	r3, [pc, #80]	; (8011834 <m2m_wifi_request_scan_passive+0x54>)
 80117e2:	791b      	ldrb	r3, [r3, #4]
 80117e4:	b9f3      	cbnz	r3, 8011824 <m2m_wifi_request_scan_passive+0x44>
	{
		if(((ch >= M2M_WIFI_CH_1) && (ch <= M2M_WIFI_CH_14)) || (ch == M2M_WIFI_CH_ALL))
 80117e6:	1e43      	subs	r3, r0, #1
 80117e8:	b2db      	uxtb	r3, r3
 80117ea:	2b0d      	cmp	r3, #13
 80117ec:	d901      	bls.n	80117f2 <m2m_wifi_request_scan_passive+0x12>
 80117ee:	28ff      	cmp	r0, #255	; 0xff
 80117f0:	d11b      	bne.n	801182a <m2m_wifi_request_scan_passive+0x4a>
{
 80117f2:	b500      	push	{lr}
 80117f4:	b087      	sub	sp, #28
		{
			tstrM2MScan strtmp;
			strtmp.u8ChNum = ch;
 80117f6:	f88d 0014 	strb.w	r0, [sp, #20]

			strtmp.u16PassiveScanTime = scan_time;
 80117fa:	f8ad 1016 	strh.w	r1, [sp, #22]

			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_PASSIVE_SCAN, (uint8*)&strtmp, sizeof(tstrM2MScan),NULL, 0,0);
 80117fe:	2300      	movs	r3, #0
 8011800:	9302      	str	r3, [sp, #8]
 8011802:	9301      	str	r3, [sp, #4]
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	2304      	movs	r3, #4
 8011808:	aa05      	add	r2, sp, #20
 801180a:	2123      	movs	r1, #35	; 0x23
 801180c:	2001      	movs	r0, #1
 801180e:	f7ff f80f 	bl	8010830 <hif_send>
			if(s8Ret == M2M_SUCCESS)
 8011812:	4603      	mov	r3, r0
 8011814:	b910      	cbnz	r0, 801181c <m2m_wifi_request_scan_passive+0x3c>
			{
				gu8scanInProgress = 1;
 8011816:	4a07      	ldr	r2, [pc, #28]	; (8011834 <m2m_wifi_request_scan_passive+0x54>)
 8011818:	2101      	movs	r1, #1
 801181a:	7111      	strb	r1, [r2, #4]
	else
	{
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
	}
	return s8Ret;
}
 801181c:	4618      	mov	r0, r3
 801181e:	b007      	add	sp, #28
 8011820:	f85d fb04 	ldr.w	pc, [sp], #4
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
 8011824:	f06f 030d 	mvn.w	r3, #13
 8011828:	e001      	b.n	801182e <m2m_wifi_request_scan_passive+0x4e>
			s8Ret = M2M_ERR_INVALID_ARG;
 801182a:	f06f 030e 	mvn.w	r3, #14
}
 801182e:	4618      	mov	r0, r3
 8011830:	4770      	bx	lr
 8011832:	bf00      	nop
 8011834:	2000240c 	.word	0x2000240c
 8011838:	f3af 8000 	nop.w
 801183c:	f3af 8000 	nop.w

08011840 <m2m_wifi_request_scan_ssid_list>:

sint8 m2m_wifi_request_scan_ssid_list(uint8 ch,uint8 * u8Ssidlist)
{
	sint8	s8Ret = M2M_ERR_INVALID_ARG;

	if(!gu8scanInProgress)
 8011840:	4b1e      	ldr	r3, [pc, #120]	; (80118bc <m2m_wifi_request_scan_ssid_list+0x7c>)
 8011842:	791b      	ldrb	r3, [r3, #4]
 8011844:	bb8b      	cbnz	r3, 80118aa <m2m_wifi_request_scan_ssid_list+0x6a>
	{
		if((((ch >= M2M_WIFI_CH_1) && (ch <= M2M_WIFI_CH_14)) || (ch == M2M_WIFI_CH_ALL))&&(u8Ssidlist != NULL))
 8011846:	1e43      	subs	r3, r0, #1
 8011848:	b2db      	uxtb	r3, r3
 801184a:	2b0d      	cmp	r3, #13
 801184c:	d901      	bls.n	8011852 <m2m_wifi_request_scan_ssid_list+0x12>
 801184e:	28ff      	cmp	r0, #255	; 0xff
 8011850:	d12e      	bne.n	80118b0 <m2m_wifi_request_scan_ssid_list+0x70>
 8011852:	b381      	cbz	r1, 80118b6 <m2m_wifi_request_scan_ssid_list+0x76>
		{
			tstrM2MScan strtmp;
			uint16 u16Lsize = 0;
			uint8 u8Apnum = u8Ssidlist[u16Lsize];
 8011854:	780a      	ldrb	r2, [r1, #0]
			if(u8Apnum <= MAX_HIDDEN_SITES)
 8011856:	2a04      	cmp	r2, #4
 8011858:	d80d      	bhi.n	8011876 <m2m_wifi_request_scan_ssid_list+0x36>
{
 801185a:	b510      	push	{r4, lr}
 801185c:	b086      	sub	sp, #24
			{
				u16Lsize++;
 801185e:	2401      	movs	r4, #1
				while(u8Apnum)
 8011860:	b16a      	cbz	r2, 801187e <m2m_wifi_request_scan_ssid_list+0x3e>
				{
					if(u8Ssidlist[u16Lsize] >= M2M_MAX_SSID_LEN){
 8011862:	5d0b      	ldrb	r3, [r1, r4]
 8011864:	2b20      	cmp	r3, #32
 8011866:	d81b      	bhi.n	80118a0 <m2m_wifi_request_scan_ssid_list+0x60>
						goto EXIT;
					}else {
						u16Lsize += u8Ssidlist[u16Lsize] + 1;
 8011868:	4423      	add	r3, r4
 801186a:	b29b      	uxth	r3, r3
 801186c:	3301      	adds	r3, #1
 801186e:	b29c      	uxth	r4, r3
						u8Apnum--;
 8011870:	3a01      	subs	r2, #1
 8011872:	b2d2      	uxtb	r2, r2
 8011874:	e7f4      	b.n	8011860 <m2m_wifi_request_scan_ssid_list+0x20>
	sint8	s8Ret = M2M_ERR_INVALID_ARG;
 8011876:	f06f 030e 	mvn.w	r3, #14
	{
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
	}
EXIT:
	return s8Ret;
}
 801187a:	4618      	mov	r0, r3
 801187c:	4770      	bx	lr
				strtmp.u8ChNum = ch;
 801187e:	aa06      	add	r2, sp, #24
 8011880:	f802 0d04 	strb.w	r0, [r2, #-4]!
				s8Ret = hif_send(M2M_REQ_GROUP_WIFI, ((uint8)M2M_WIFI_REQ_SCAN_SSID_LIST | (uint8)M2M_REQ_DATA_PKT), (uint8*)&strtmp, sizeof(tstrM2MScan),u8Ssidlist, u16Lsize,sizeof(tstrM2MScan));
 8011884:	2304      	movs	r3, #4
 8011886:	9302      	str	r3, [sp, #8]
 8011888:	9401      	str	r4, [sp, #4]
 801188a:	9100      	str	r1, [sp, #0]
 801188c:	21a1      	movs	r1, #161	; 0xa1
 801188e:	2001      	movs	r0, #1
 8011890:	f7fe ffce 	bl	8010830 <hif_send>
				if(s8Ret == M2M_SUCCESS)
 8011894:	4603      	mov	r3, r0
 8011896:	b928      	cbnz	r0, 80118a4 <m2m_wifi_request_scan_ssid_list+0x64>
					gu8scanInProgress = 1;
 8011898:	4a08      	ldr	r2, [pc, #32]	; (80118bc <m2m_wifi_request_scan_ssid_list+0x7c>)
 801189a:	2101      	movs	r1, #1
 801189c:	7111      	strb	r1, [r2, #4]
 801189e:	e001      	b.n	80118a4 <m2m_wifi_request_scan_ssid_list+0x64>
	sint8	s8Ret = M2M_ERR_INVALID_ARG;
 80118a0:	f06f 030e 	mvn.w	r3, #14
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	b006      	add	sp, #24
 80118a8:	bd10      	pop	{r4, pc}
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
 80118aa:	f06f 030d 	mvn.w	r3, #13
 80118ae:	e7e4      	b.n	801187a <m2m_wifi_request_scan_ssid_list+0x3a>
	sint8	s8Ret = M2M_ERR_INVALID_ARG;
 80118b0:	f06f 030e 	mvn.w	r3, #14
 80118b4:	e7e1      	b.n	801187a <m2m_wifi_request_scan_ssid_list+0x3a>
 80118b6:	f06f 030e 	mvn.w	r3, #14
 80118ba:	e7de      	b.n	801187a <m2m_wifi_request_scan_ssid_list+0x3a>
 80118bc:	2000240c 	.word	0x2000240c

080118c0 <m2m_wifi_wps>:
sint8 m2m_wifi_wps(uint8 u8TriggerType,const char  *pcPinNumber)
{
 80118c0:	b500      	push	{lr}
 80118c2:	b089      	sub	sp, #36	; 0x24
	tstrM2MWPSConnect strtmp;

	/* Stop Scan if it is ongoing.
	*/
	gu8scanInProgress = 0;
 80118c4:	4b0c      	ldr	r3, [pc, #48]	; (80118f8 <m2m_wifi_wps+0x38>)
 80118c6:	2200      	movs	r2, #0
 80118c8:	711a      	strb	r2, [r3, #4]
	strtmp.u8TriggerType = u8TriggerType;
 80118ca:	f88d 0014 	strb.w	r0, [sp, #20]
	/*If WPS is using PIN METHOD*/
	if (u8TriggerType == WPS_PIN_TRIGGER)
 80118ce:	b160      	cbz	r0, 80118ea <m2m_wifi_wps+0x2a>
		m2m_memcpy ((uint8*)strtmp.acPinNumber,(uint8*) pcPinNumber,8);
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_WPS, (uint8*)&strtmp,sizeof(tstrM2MWPSConnect), NULL, 0,0);
 80118d0:	2300      	movs	r3, #0
 80118d2:	9302      	str	r3, [sp, #8]
 80118d4:	9301      	str	r3, [sp, #4]
 80118d6:	9300      	str	r3, [sp, #0]
 80118d8:	230c      	movs	r3, #12
 80118da:	aa05      	add	r2, sp, #20
 80118dc:	212f      	movs	r1, #47	; 0x2f
 80118de:	2001      	movs	r0, #1
 80118e0:	f7fe ffa6 	bl	8010830 <hif_send>
}
 80118e4:	b009      	add	sp, #36	; 0x24
 80118e6:	f85d fb04 	ldr.w	pc, [sp], #4
		m2m_memcpy ((uint8*)strtmp.acPinNumber,(uint8*) pcPinNumber,8);
 80118ea:	2208      	movs	r2, #8
 80118ec:	f10d 0015 	add.w	r0, sp, #21
 80118f0:	f7fe fd8e 	bl	8010410 <m2m_memcpy>
 80118f4:	e7ec      	b.n	80118d0 <m2m_wifi_wps+0x10>
 80118f6:	bf00      	nop
 80118f8:	2000240c 	.word	0x2000240c
 80118fc:	f3af 8000 	nop.w

08011900 <m2m_wifi_wps_disable>:
sint8 m2m_wifi_wps_disable(void)
{
 8011900:	b500      	push	{lr}
 8011902:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISABLE_WPS, NULL,0, NULL, 0, 0);
 8011904:	2200      	movs	r2, #0
 8011906:	9202      	str	r2, [sp, #8]
 8011908:	9201      	str	r2, [sp, #4]
 801190a:	9200      	str	r2, [sp, #0]
 801190c:	4613      	mov	r3, r2
 801190e:	2131      	movs	r1, #49	; 0x31
 8011910:	2001      	movs	r0, #1
 8011912:	f7fe ff8d 	bl	8010830 <hif_send>
	return ret;
}
 8011916:	b005      	add	sp, #20
 8011918:	f85d fb04 	ldr.w	pc, [sp], #4
 801191c:	f3af 8000 	nop.w

08011920 <m2m_wifi_req_client_ctrl>:
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CLIENT_CTRL, (uint8*)&strCmd, sizeof(tstrM2Mservercmd), NULL, 0, 0);
#else
	M2M_ERR("_PS_SERVER_ is not defined\n");
#endif
	return ret;
}
 8011920:	2000      	movs	r0, #0
 8011922:	4770      	bx	lr
 8011924:	f3af 8000 	nop.w
 8011928:	f3af 8000 	nop.w
 801192c:	f3af 8000 	nop.w

08011930 <m2m_wifi_req_server_init>:
	ret = hif_send(M2M_REQ_GROUP_WIFI,M2M_WIFI_REQ_SERVER_INIT, (uint8*)&strServer, sizeof(tstrM2mServerInit), NULL, 0, 0);
#else
	M2M_ERR("_PS_SERVER_ is not defined\n");
#endif
	return ret;
}
 8011930:	2000      	movs	r0, #0
 8011932:	4770      	bx	lr
 8011934:	f3af 8000 	nop.w
 8011938:	f3af 8000 	nop.w
 801193c:	f3af 8000 	nop.w

08011940 <m2m_wifi_p2p>:
sint8 m2m_wifi_p2p(uint8 u8Channel)
{
	sint8 ret = M2M_SUCCESS;
	if((u8Channel == M2M_WIFI_CH_1) || (u8Channel == M2M_WIFI_CH_6) || (u8Channel == M2M_WIFI_CH_11))
 8011940:	2801      	cmp	r0, #1
 8011942:	d003      	beq.n	801194c <m2m_wifi_p2p+0xc>
 8011944:	2806      	cmp	r0, #6
 8011946:	d001      	beq.n	801194c <m2m_wifi_p2p+0xc>
 8011948:	280b      	cmp	r0, #11
 801194a:	d110      	bne.n	801196e <m2m_wifi_p2p+0x2e>
{
 801194c:	b500      	push	{lr}
 801194e:	b087      	sub	sp, #28
	{
		tstrM2MP2PConnect strtmp;
		strtmp.u8ListenChannel = u8Channel;
 8011950:	aa06      	add	r2, sp, #24
 8011952:	f802 0d04 	strb.w	r0, [r2, #-4]!
		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_ENABLE_P2P, (uint8*)&strtmp, sizeof(tstrM2MP2PConnect), NULL, 0,0);
 8011956:	2300      	movs	r3, #0
 8011958:	9302      	str	r3, [sp, #8]
 801195a:	9301      	str	r3, [sp, #4]
 801195c:	9300      	str	r3, [sp, #0]
 801195e:	2304      	movs	r3, #4
 8011960:	215b      	movs	r1, #91	; 0x5b
 8011962:	2001      	movs	r0, #1
 8011964:	f7fe ff64 	bl	8010830 <hif_send>
	{
		M2M_ERR("Listen channel should only be M2M_WIFI_CH_1/6/11 \n");
		ret = M2M_ERR_FAIL;
	}
	return ret;
}
 8011968:	b007      	add	sp, #28
 801196a:	f85d fb04 	ldr.w	pc, [sp], #4
		ret = M2M_ERR_FAIL;
 801196e:	f06f 000b 	mvn.w	r0, #11
}
 8011972:	4770      	bx	lr
 8011974:	f3af 8000 	nop.w
 8011978:	f3af 8000 	nop.w
 801197c:	f3af 8000 	nop.w

08011980 <m2m_wifi_p2p_disconnect>:
sint8 m2m_wifi_p2p_disconnect(void)
{
 8011980:	b500      	push	{lr}
 8011982:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISABLE_P2P, NULL, 0, NULL, 0, 0);
 8011984:	2200      	movs	r2, #0
 8011986:	9202      	str	r2, [sp, #8]
 8011988:	9201      	str	r2, [sp, #4]
 801198a:	9200      	str	r2, [sp, #0]
 801198c:	4613      	mov	r3, r2
 801198e:	215c      	movs	r1, #92	; 0x5c
 8011990:	2001      	movs	r0, #1
 8011992:	f7fe ff4d 	bl	8010830 <hif_send>
	return ret;
}
 8011996:	b005      	add	sp, #20
 8011998:	f85d fb04 	ldr.w	pc, [sp], #4
 801199c:	f3af 8000 	nop.w

080119a0 <m2m_wifi_enable_ap>:
sint8 m2m_wifi_enable_ap(CONST tstrM2MAPConfig* pstrM2MAPConfig)
{
 80119a0:	b510      	push	{r4, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	4604      	mov	r4, r0
	sint8 ret = M2M_ERR_FAIL;
	if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrM2MAPConfig))
 80119a6:	f7ff fc4b 	bl	8011240 <m2m_validate_ap_parameters>
 80119aa:	b958      	cbnz	r0, 80119c4 <m2m_wifi_enable_ap+0x24>
	{
		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_ENABLE_AP, (uint8 *)pstrM2MAPConfig, sizeof(tstrM2MAPConfig), NULL, 0, 0);
 80119ac:	2300      	movs	r3, #0
 80119ae:	9302      	str	r3, [sp, #8]
 80119b0:	9301      	str	r3, [sp, #4]
 80119b2:	9300      	str	r3, [sp, #0]
 80119b4:	2388      	movs	r3, #136	; 0x88
 80119b6:	4622      	mov	r2, r4
 80119b8:	2146      	movs	r1, #70	; 0x46
 80119ba:	2001      	movs	r0, #1
 80119bc:	f7fe ff38 	bl	8010830 <hif_send>
	}
	return ret;
}
 80119c0:	b004      	add	sp, #16
 80119c2:	bd10      	pop	{r4, pc}
	sint8 ret = M2M_ERR_FAIL;
 80119c4:	f06f 000b 	mvn.w	r0, #11
 80119c8:	e7fa      	b.n	80119c0 <m2m_wifi_enable_ap+0x20>
 80119ca:	bf00      	nop
 80119cc:	f3af 8000 	nop.w

080119d0 <m2m_wifi_set_gains>:

sint8 m2m_wifi_set_gains(tstrM2mWifiGainsParams* pstrM2mGain)
{
	sint8 ret = M2M_ERR_FAIL;
	if(pstrM2mGain != NULL)
 80119d0:	b170      	cbz	r0, 80119f0 <m2m_wifi_set_gains+0x20>
{
 80119d2:	b500      	push	{lr}
 80119d4:	b085      	sub	sp, #20
 80119d6:	4602      	mov	r2, r0
	{
		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_GAINS, (uint8 *)pstrM2mGain, sizeof(tstrM2mWifiGainsParams), NULL, 0, 0);
 80119d8:	2300      	movs	r3, #0
 80119da:	9302      	str	r3, [sp, #8]
 80119dc:	9301      	str	r3, [sp, #4]
 80119de:	9300      	str	r3, [sp, #0]
 80119e0:	2304      	movs	r3, #4
 80119e2:	2122      	movs	r1, #34	; 0x22
 80119e4:	2001      	movs	r0, #1
 80119e6:	f7fe ff23 	bl	8010830 <hif_send>
	}
	return ret;
}
 80119ea:	b005      	add	sp, #20
 80119ec:	f85d fb04 	ldr.w	pc, [sp], #4
	sint8 ret = M2M_ERR_FAIL;
 80119f0:	f06f 000b 	mvn.w	r0, #11
}
 80119f4:	4770      	bx	lr
 80119f6:	bf00      	nop
 80119f8:	f3af 8000 	nop.w
 80119fc:	f3af 8000 	nop.w

08011a00 <m2m_wifi_disable_ap>:
sint8 m2m_wifi_disable_ap(void)
{
 8011a00:	b500      	push	{lr}
 8011a02:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISABLE_AP, NULL, 0, NULL, 0, 0);
 8011a04:	2200      	movs	r2, #0
 8011a06:	9202      	str	r2, [sp, #8]
 8011a08:	9201      	str	r2, [sp, #4]
 8011a0a:	9200      	str	r2, [sp, #0]
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	2147      	movs	r1, #71	; 0x47
 8011a10:	2001      	movs	r0, #1
 8011a12:	f7fe ff0d 	bl	8010830 <hif_send>
	return ret;
}
 8011a16:	b005      	add	sp, #20
 8011a18:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a1c:	f3af 8000 	nop.w

08011a20 <m2m_wifi_req_curr_rssi>:
			 the response received in wifi_cb M2M_WIFI_RESP_CURRENT_RSSI
@sa          M2M_WIFI_RESP_CURRENT_RSSI
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
*/
sint8 m2m_wifi_req_curr_rssi(void)
{
 8011a20:	b500      	push	{lr}
 8011a22:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CURRENT_RSSI, NULL, 0, NULL,0, 0);
 8011a24:	2200      	movs	r2, #0
 8011a26:	9202      	str	r2, [sp, #8]
 8011a28:	9201      	str	r2, [sp, #4]
 8011a2a:	9200      	str	r2, [sp, #0]
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	2103      	movs	r1, #3
 8011a30:	2001      	movs	r0, #1
 8011a32:	f7fe fefd 	bl	8010830 <hif_send>
	return ret;
}
 8011a36:	b005      	add	sp, #20
 8011a38:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a3c:	f3af 8000 	nop.w

08011a40 <m2m_wifi_send_ethernet_pkt>:
sint8 m2m_wifi_send_ethernet_pkt(uint8* pu8Packet,uint16 u16PacketSize)
{
	sint8	s8Ret = -1;
	if((pu8Packet != NULL)&&(u16PacketSize>0))
 8011a40:	b1a0      	cbz	r0, 8011a6c <m2m_wifi_send_ethernet_pkt+0x2c>
 8011a42:	b1b1      	cbz	r1, 8011a72 <m2m_wifi_send_ethernet_pkt+0x32>
{
 8011a44:	b500      	push	{lr}
 8011a46:	b087      	sub	sp, #28
	{
		tstrM2MWifiTxPacketInfo		strTxPkt;

		strTxPkt.u16PacketSize		= u16PacketSize;
 8011a48:	f8ad 1014 	strh.w	r1, [sp, #20]
		strTxPkt.u16HeaderLength	= M2M_ETHERNET_HDR_LEN;
 8011a4c:	220e      	movs	r2, #14
 8011a4e:	f8ad 2016 	strh.w	r2, [sp, #22]
		s8Ret = hif_send(M2M_REQ_GROUP_WIFI, ((uint8)M2M_WIFI_REQ_SEND_ETHERNET_PACKET | (uint8)M2M_REQ_DATA_PKT),
 8011a52:	221a      	movs	r2, #26
 8011a54:	9202      	str	r2, [sp, #8]
 8011a56:	9101      	str	r1, [sp, #4]
 8011a58:	9000      	str	r0, [sp, #0]
 8011a5a:	2304      	movs	r3, #4
 8011a5c:	aa05      	add	r2, sp, #20
 8011a5e:	219c      	movs	r1, #156	; 0x9c
 8011a60:	2001      	movs	r0, #1
 8011a62:	f7fe fee5 	bl	8010830 <hif_send>
		(uint8*)&strTxPkt, sizeof(tstrM2MWifiTxPacketInfo), pu8Packet, u16PacketSize,  M2M_ETHERNET_HDR_OFFSET - M2M_HIF_HDR_OFFSET);
	}
	return s8Ret;
}
 8011a66:	b007      	add	sp, #28
 8011a68:	f85d fb04 	ldr.w	pc, [sp], #4
	sint8	s8Ret = -1;
 8011a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a70:	4770      	bx	lr
 8011a72:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011a76:	4770      	bx	lr
 8011a78:	f3af 8000 	nop.w
 8011a7c:	f3af 8000 	nop.w

08011a80 <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8* pu8IsValid)
{
 8011a80:	b538      	push	{r3, r4, r5, lr}
 8011a82:	4604      	mov	r4, r0
 8011a84:	460d      	mov	r5, r1
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
 8011a86:	f7fe fe6b 	bl	8010760 <hif_chip_wake>
	if(ret == M2M_SUCCESS)
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	b108      	cbz	r0, 8011a92 <m2m_wifi_get_otp_mac_address+0x12>
		{
			ret = hif_chip_sleep();
		}
	}
	return ret;
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	bd38      	pop	{r3, r4, r5, pc}
		ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
 8011a92:	4629      	mov	r1, r5
 8011a94:	4620      	mov	r0, r4
 8011a96:	f000 fce3 	bl	8012460 <nmi_get_otp_mac_address>
		if(ret == M2M_SUCCESS)
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	d1f6      	bne.n	8011a8e <m2m_wifi_get_otp_mac_address+0xe>
			ret = hif_chip_sleep();
 8011aa0:	f7fe fe9e 	bl	80107e0 <hif_chip_sleep>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	e7f2      	b.n	8011a8e <m2m_wifi_get_otp_mac_address+0xe>
 8011aa8:	f3af 8000 	nop.w
 8011aac:	f3af 8000 	nop.w

08011ab0 <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
 8011ab0:	b510      	push	{r4, lr}
 8011ab2:	4604      	mov	r4, r0
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
 8011ab4:	f7fe fe54 	bl	8010760 <hif_chip_wake>
	if(ret == M2M_SUCCESS)
 8011ab8:	4603      	mov	r3, r0
 8011aba:	b108      	cbz	r0, 8011ac0 <m2m_wifi_get_mac_address+0x10>
			ret = hif_chip_sleep();
		}
	}

	return ret;
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	bd10      	pop	{r4, pc}
		ret = nmi_get_mac_address(pu8MacAddr);
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	f000 fd0d 	bl	80124e0 <nmi_get_mac_address>
		if(ret == M2M_SUCCESS)
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2800      	cmp	r0, #0
 8011aca:	d1f7      	bne.n	8011abc <m2m_wifi_get_mac_address+0xc>
			ret = hif_chip_sleep();
 8011acc:	f7fe fe88 	bl	80107e0 <hif_chip_sleep>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	e7f3      	b.n	8011abc <m2m_wifi_get_mac_address+0xc>
 8011ad4:	f3af 8000 	nop.w
 8011ad8:	f3af 8000 	nop.w
 8011adc:	f3af 8000 	nop.w

08011ae0 <m2m_wifi_req_scan_result>:
			 which mean if large delay occur between the scan request and the scan result request,
			 the result will not be up-to-date
*/

sint8 m2m_wifi_req_scan_result(uint8 index)
{
 8011ae0:	b500      	push	{lr}
 8011ae2:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;
	tstrM2mReqScanResult strReqScanRlt;
	strReqScanRlt.u8Index = index;
 8011ae4:	aa06      	add	r2, sp, #24
 8011ae6:	f802 0d04 	strb.w	r0, [r2, #-4]!
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8*) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
 8011aea:	2300      	movs	r3, #0
 8011aec:	9302      	str	r3, [sp, #8]
 8011aee:	9301      	str	r3, [sp, #4]
 8011af0:	9300      	str	r3, [sp, #0]
 8011af2:	2304      	movs	r3, #4
 8011af4:	2112      	movs	r1, #18
 8011af6:	2001      	movs	r0, #1
 8011af8:	f7fe fe9a 	bl	8010830 <hif_send>
	return ret;
}
 8011afc:	b007      	add	sp, #28
 8011afe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b02:	bf00      	nop
 8011b04:	f3af 8000 	nop.w
 8011b08:	f3af 8000 	nop.w
 8011b0c:	f3af 8000 	nop.w

08011b10 <m2m_wifi_get_num_ap_found>:
			 calling that function in any other place will return undefined/undated numbers.
			 Function used only in STA mode only.
*/
uint8 m2m_wifi_get_num_ap_found(void)
{
	return gu8ChNum;
 8011b10:	4b01      	ldr	r3, [pc, #4]	; (8011b18 <m2m_wifi_get_num_ap_found+0x8>)
 8011b12:	7958      	ldrb	r0, [r3, #5]
}
 8011b14:	4770      	bx	lr
 8011b16:	bf00      	nop
 8011b18:	2000240c 	.word	0x2000240c
 8011b1c:	f3af 8000 	nop.w

08011b20 <m2m_wifi_get_sleep_mode>:
@brief	    Get the current Power save mode.
@return	    The current operating power saving mode.
@sa		    tenuPowerSaveModes , m2m_wifi_set_sleep_mode
*/
uint8 m2m_wifi_get_sleep_mode(void)
{
 8011b20:	b508      	push	{r3, lr}
	return hif_get_sleep_mode();
 8011b22:	f7fe fe45 	bl	80107b0 <hif_get_sleep_mode>
}
 8011b26:	bd08      	pop	{r3, pc}
 8011b28:	f3af 8000 	nop.w
 8011b2c:	f3af 8000 	nop.w

08011b30 <m2m_wifi_set_sleep_mode>:
@return     The function SHALL return 0 for success and a negative value otherwise.
@sa			tenuPowerSaveModes
@warning    The function called once after initialization.
*/
sint8 m2m_wifi_set_sleep_mode(uint8 PsTyp, uint8 BcastEn)
{
 8011b30:	b530      	push	{r4, r5, lr}
 8011b32:	b087      	sub	sp, #28
 8011b34:	4604      	mov	r4, r0
	sint8 ret = M2M_SUCCESS;
	tstrM2mPsType strPs;
	strPs.u8PsType = PsTyp;
 8011b36:	f88d 0014 	strb.w	r0, [sp, #20]
	strPs.u8BcastEn = BcastEn;
 8011b3a:	f88d 1015 	strb.w	r1, [sp, #21]
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SLEEP, (uint8*) &strPs,sizeof(tstrM2mPsType), NULL, 0, 0);
 8011b3e:	2300      	movs	r3, #0
 8011b40:	9302      	str	r3, [sp, #8]
 8011b42:	9301      	str	r3, [sp, #4]
 8011b44:	9300      	str	r3, [sp, #0]
 8011b46:	2304      	movs	r3, #4
 8011b48:	aa05      	add	r2, sp, #20
 8011b4a:	212d      	movs	r1, #45	; 0x2d
 8011b4c:	2001      	movs	r0, #1
 8011b4e:	f7fe fe6f 	bl	8010830 <hif_send>
 8011b52:	4605      	mov	r5, r0
	M2M_INFO("POWER SAVE %d\n",PsTyp);
	hif_set_sleep_mode(PsTyp);
 8011b54:	4620      	mov	r0, r4
 8011b56:	f7fe fe23 	bl	80107a0 <hif_set_sleep_mode>
	return ret;
}
 8011b5a:	4628      	mov	r0, r5
 8011b5c:	b007      	add	sp, #28
 8011b5e:	bd30      	pop	{r4, r5, pc}

08011b60 <m2m_wifi_request_sleep>:
@return     The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
@sa         tenuPowerSaveModes , m2m_wifi_set_sleep_mode
@warning	the Function should be called in M2M_PS_MANUAL power save only
*/
sint8 m2m_wifi_request_sleep(uint32 u32SlpReqTime)
{
 8011b60:	b510      	push	{r4, lr}
 8011b62:	b086      	sub	sp, #24
 8011b64:	4604      	mov	r4, r0
	sint8 ret = M2M_SUCCESS;
	uint8 psType;
	psType = hif_get_sleep_mode();
 8011b66:	f7fe fe23 	bl	80107b0 <hif_get_sleep_mode>
	if(psType == M2M_PS_MANUAL)
 8011b6a:	2804      	cmp	r0, #4
 8011b6c:	d002      	beq.n	8011b74 <m2m_wifi_request_sleep+0x14>
	sint8 ret = M2M_SUCCESS;
 8011b6e:	2000      	movs	r0, #0
		tstrM2mSlpReqTime strPs;
		strPs.u32SleepTime = u32SlpReqTime;
		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DOZE, (uint8*) &strPs,sizeof(tstrM2mSlpReqTime), NULL, 0, 0);
	}
	return ret;
}
 8011b70:	b006      	add	sp, #24
 8011b72:	bd10      	pop	{r4, pc}
		strPs.u32SleepTime = u32SlpReqTime;
 8011b74:	aa06      	add	r2, sp, #24
 8011b76:	f842 4d04 	str.w	r4, [r2, #-4]!
		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DOZE, (uint8*) &strPs,sizeof(tstrM2mSlpReqTime), NULL, 0, 0);
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	9302      	str	r3, [sp, #8]
 8011b7e:	9301      	str	r3, [sp, #4]
 8011b80:	9300      	str	r3, [sp, #0]
 8011b82:	2304      	movs	r3, #4
 8011b84:	213a      	movs	r1, #58	; 0x3a
 8011b86:	2001      	movs	r0, #1
 8011b88:	f7fe fe52 	bl	8010830 <hif_send>
 8011b8c:	e7f0      	b.n	8011b70 <m2m_wifi_request_sleep+0x10>
 8011b8e:	bf00      	nop

08011b90 <m2m_wifi_set_device_name>:
			Length of the device name.
@return		The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
@warning	The Function called once after initialization.
*/
sint8 m2m_wifi_set_device_name(uint8 *pu8DeviceName, uint8 u8DeviceNameLength)
{
 8011b90:	b500      	push	{lr}
 8011b92:	b091      	sub	sp, #68	; 0x44
	tstrM2MDeviceNameConfig strDeviceName;
	if(u8DeviceNameLength >= M2M_DEVICE_NAME_MAX)
 8011b94:	292f      	cmp	r1, #47	; 0x2f
 8011b96:	d900      	bls.n	8011b9a <m2m_wifi_set_device_name+0xa>
	{
		u8DeviceNameLength = M2M_DEVICE_NAME_MAX;
 8011b98:	2130      	movs	r1, #48	; 0x30
	}
	//pu8DeviceName[u8DeviceNameLength] = '\0';
	u8DeviceNameLength ++;
 8011b9a:	1c4a      	adds	r2, r1, #1
	m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
 8011b9c:	b2d2      	uxtb	r2, r2
 8011b9e:	4601      	mov	r1, r0
 8011ba0:	a804      	add	r0, sp, #16
 8011ba2:	f7fe fc35 	bl	8010410 <m2m_memcpy>
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	9302      	str	r3, [sp, #8]
 8011baa:	9301      	str	r3, [sp, #4]
 8011bac:	9300      	str	r3, [sp, #0]
 8011bae:	2330      	movs	r3, #48	; 0x30
 8011bb0:	aa04      	add	r2, sp, #16
 8011bb2:	2107      	movs	r1, #7
 8011bb4:	2001      	movs	r0, #1
 8011bb6:	f7fe fe3b 	bl	8010830 <hif_send>
		(uint8*)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0,0);
}
 8011bba:	b011      	add	sp, #68	; 0x44
 8011bbc:	f85d fb04 	ldr.w	pc, [sp], #4

08011bc0 <m2m_wifi_get_firmware_version>:
sint8 m2m_wifi_get_firmware_version(tstrM2mRev *pstrRev)
{
 8011bc0:	b538      	push	{r3, r4, r5, lr}
 8011bc2:	4605      	mov	r5, r0
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
 8011bc4:	f7fe fdcc 	bl	8010760 <hif_chip_wake>
	if(ret == M2M_SUCCESS)
 8011bc8:	4604      	mov	r4, r0
 8011bca:	b108      	cbz	r0, 8011bd0 <m2m_wifi_get_firmware_version+0x10>
	{
    	ret = nm_get_firmware_full_info(pstrRev);
		hif_chip_sleep();
	}
	return ret;
}
 8011bcc:	4620      	mov	r0, r4
 8011bce:	bd38      	pop	{r3, r4, r5, pc}
    	ret = nm_get_firmware_full_info(pstrRev);
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	f000 fdbd 	bl	8012750 <nm_get_firmware_full_info>
 8011bd6:	4604      	mov	r4, r0
		hif_chip_sleep();
 8011bd8:	f7fe fe02 	bl	80107e0 <hif_chip_sleep>
 8011bdc:	e7f6      	b.n	8011bcc <m2m_wifi_get_firmware_version+0xc>
 8011bde:	bf00      	nop

08011be0 <m2m_wifi_start_provision_mode>:

sint8 m2m_wifi_start_provision_mode(tstrM2MAPConfig *pstrAPConfig, char *pcHttpServerDomainName, uint8 bEnableHttpRedirect)
{
	sint8	s8Ret = M2M_ERR_FAIL;

	if((pstrAPConfig != NULL))
 8011be0:	b360      	cbz	r0, 8011c3c <m2m_wifi_start_provision_mode+0x5c>
{
 8011be2:	b570      	push	{r4, r5, r6, lr}
 8011be4:	b0b8      	sub	sp, #224	; 0xe0
 8011be6:	4604      	mov	r4, r0
 8011be8:	4616      	mov	r6, r2
 8011bea:	460d      	mov	r5, r1
	{
		tstrM2MProvisionModeConfig	strProvConfig;
		if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrAPConfig))
 8011bec:	f7ff fb28 	bl	8011240 <m2m_validate_ap_parameters>
 8011bf0:	b118      	cbz	r0, 8011bfa <m2m_wifi_start_provision_mode+0x1a>
	sint8	s8Ret = M2M_ERR_FAIL;
 8011bf2:	f06f 000b 	mvn.w	r0, #11
			/*goto ERR1;*/
		}
	}
ERR1:
	return s8Ret;
}
 8011bf6:	b038      	add	sp, #224	; 0xe0
 8011bf8:	bd70      	pop	{r4, r5, r6, pc}
			m2m_memcpy((uint8*)&strProvConfig.strApConfig, (uint8*)pstrAPConfig, sizeof(tstrM2MAPConfig));
 8011bfa:	2288      	movs	r2, #136	; 0x88
 8011bfc:	4621      	mov	r1, r4
 8011bfe:	a805      	add	r0, sp, #20
 8011c00:	f7fe fc06 	bl	8010410 <m2m_memcpy>
			if((m2m_strlen((uint8 *)pcHttpServerDomainName) <= 0) || (NULL == pcHttpServerDomainName))
 8011c04:	4628      	mov	r0, r5
 8011c06:	f7fe fc2b 	bl	8010460 <m2m_strlen>
 8011c0a:	b1a0      	cbz	r0, 8011c36 <m2m_wifi_start_provision_mode+0x56>
 8011c0c:	b19d      	cbz	r5, 8011c36 <m2m_wifi_start_provision_mode+0x56>
			m2m_memcpy((uint8*)strProvConfig.acHttpServerDomainName, (uint8*)pcHttpServerDomainName, 64);
 8011c0e:	2240      	movs	r2, #64	; 0x40
 8011c10:	4629      	mov	r1, r5
 8011c12:	a827      	add	r0, sp, #156	; 0x9c
 8011c14:	f7fe fbfc 	bl	8010410 <m2m_memcpy>
			strProvConfig.u8EnableRedirect = bEnableHttpRedirect;
 8011c18:	f88d 60dc 	strb.w	r6, [sp, #220]	; 0xdc
			gu8scanInProgress = 0;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	4a09      	ldr	r2, [pc, #36]	; (8011c44 <m2m_wifi_start_provision_mode+0x64>)
 8011c20:	7113      	strb	r3, [r2, #4]
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, ((uint8)M2M_WIFI_REQ_START_PROVISION_MODE | (uint8)M2M_REQ_DATA_PKT),
 8011c22:	9302      	str	r3, [sp, #8]
 8011c24:	9301      	str	r3, [sp, #4]
 8011c26:	9300      	str	r3, [sp, #0]
 8011c28:	23cc      	movs	r3, #204	; 0xcc
 8011c2a:	aa05      	add	r2, sp, #20
 8011c2c:	2188      	movs	r1, #136	; 0x88
 8011c2e:	2001      	movs	r0, #1
 8011c30:	f7fe fdfe 	bl	8010830 <hif_send>
 8011c34:	e7df      	b.n	8011bf6 <m2m_wifi_start_provision_mode+0x16>
	sint8	s8Ret = M2M_ERR_FAIL;
 8011c36:	f06f 000b 	mvn.w	r0, #11
 8011c3a:	e7dc      	b.n	8011bf6 <m2m_wifi_start_provision_mode+0x16>
 8011c3c:	f06f 000b 	mvn.w	r0, #11
}
 8011c40:	4770      	bx	lr
 8011c42:	bf00      	nop
 8011c44:	2000240c 	.word	0x2000240c
 8011c48:	f3af 8000 	nop.w
 8011c4c:	f3af 8000 	nop.w

08011c50 <m2m_wifi_stop_provision_mode>:

sint8 m2m_wifi_stop_provision_mode(void)
{
 8011c50:	b500      	push	{lr}
 8011c52:	b085      	sub	sp, #20
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_STOP_PROVISION_MODE, NULL, 0, NULL, 0, 0);
 8011c54:	2200      	movs	r2, #0
 8011c56:	9202      	str	r2, [sp, #8]
 8011c58:	9201      	str	r2, [sp, #4]
 8011c5a:	9200      	str	r2, [sp, #0]
 8011c5c:	4613      	mov	r3, r2
 8011c5e:	210a      	movs	r1, #10
 8011c60:	2001      	movs	r0, #1
 8011c62:	f7fe fde5 	bl	8010830 <hif_send>
}
 8011c66:	b005      	add	sp, #20
 8011c68:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c6c:	f3af 8000 	nop.w

08011c70 <m2m_wifi_get_connection_info>:

sint8 m2m_wifi_get_connection_info(void)
{
 8011c70:	b500      	push	{lr}
 8011c72:	b085      	sub	sp, #20
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_GET_CONN_INFO, NULL, 0, NULL, 0, 0);
 8011c74:	2200      	movs	r2, #0
 8011c76:	9202      	str	r2, [sp, #8]
 8011c78:	9201      	str	r2, [sp, #4]
 8011c7a:	9200      	str	r2, [sp, #0]
 8011c7c:	4613      	mov	r3, r2
 8011c7e:	2105      	movs	r1, #5
 8011c80:	2001      	movs	r0, #1
 8011c82:	f7fe fdd5 	bl	8010830 <hif_send>
}
 8011c86:	b005      	add	sp, #20
 8011c88:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c8c:	f3af 8000 	nop.w

08011c90 <m2m_wifi_set_sytem_time>:

sint8 m2m_wifi_set_sytem_time(uint32 u32UTCSeconds)
{
 8011c90:	b500      	push	{lr}
 8011c92:	b087      	sub	sp, #28
 8011c94:	aa06      	add	r2, sp, #24
 8011c96:	f842 0d04 	str.w	r0, [r2, #-4]!
	/*
		The firmware accepts timestamps relative to 1900 like NTP Timestamp.
	*/
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_SYS_TIME, (uint8*)&u32UTCSeconds, sizeof(tstrSystemTime), NULL, 0, 0);
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	9302      	str	r3, [sp, #8]
 8011c9e:	9301      	str	r3, [sp, #4]
 8011ca0:	9300      	str	r3, [sp, #0]
 8011ca2:	2308      	movs	r3, #8
 8011ca4:	210b      	movs	r1, #11
 8011ca6:	2001      	movs	r0, #1
 8011ca8:	f7fe fdc2 	bl	8010830 <hif_send>
}
 8011cac:	b007      	add	sp, #28
 8011cae:	f85d fb04 	ldr.w	pc, [sp], #4
 8011cb2:	bf00      	nop
 8011cb4:	f3af 8000 	nop.w
 8011cb8:	f3af 8000 	nop.w
 8011cbc:	f3af 8000 	nop.w

08011cc0 <m2m_wifi_get_sytem_time>:
 * @note         get the system time from the sntp client
 *		         using the API \ref m2m_wifi_get_sytem_time.
 * @return        The function returns @ref M2M_SUCCESS for successful operations and a negative value otherwise.
 */
sint8 m2m_wifi_get_sytem_time(void)
{
 8011cc0:	b500      	push	{lr}
 8011cc2:	b085      	sub	sp, #20
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_GET_SYS_TIME, NULL,0, NULL, 0, 0);
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	9202      	str	r2, [sp, #8]
 8011cc8:	9201      	str	r2, [sp, #4]
 8011cca:	9200      	str	r2, [sp, #0]
 8011ccc:	4613      	mov	r3, r2
 8011cce:	211a      	movs	r1, #26
 8011cd0:	2001      	movs	r0, #1
 8011cd2:	f7fe fdad 	bl	8010830 <hif_send>
}
 8011cd6:	b005      	add	sp, #20
 8011cd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8011cdc:	f3af 8000 	nop.w

08011ce0 <m2m_wifi_enable_sntp>:

sint8 m2m_wifi_enable_sntp(uint8 bEnable)
{
 8011ce0:	b500      	push	{lr}
 8011ce2:	b085      	sub	sp, #20
	uint8	u8Req;

	u8Req = bEnable ? M2M_WIFI_REQ_ENABLE_SNTP_CLIENT : M2M_WIFI_REQ_DISABLE_SNTP_CLIENT;
 8011ce4:	b958      	cbnz	r0, 8011cfe <m2m_wifi_enable_sntp+0x1e>
 8011ce6:	210d      	movs	r1, #13
	return hif_send(M2M_REQ_GROUP_WIFI, u8Req, NULL, 0, NULL, 0, 0);
 8011ce8:	2200      	movs	r2, #0
 8011cea:	9202      	str	r2, [sp, #8]
 8011cec:	9201      	str	r2, [sp, #4]
 8011cee:	9200      	str	r2, [sp, #0]
 8011cf0:	4613      	mov	r3, r2
 8011cf2:	2001      	movs	r0, #1
 8011cf4:	f7fe fd9c 	bl	8010830 <hif_send>
}
 8011cf8:	b005      	add	sp, #20
 8011cfa:	f85d fb04 	ldr.w	pc, [sp], #4
	u8Req = bEnable ? M2M_WIFI_REQ_ENABLE_SNTP_CLIENT : M2M_WIFI_REQ_DISABLE_SNTP_CLIENT;
 8011cfe:	210c      	movs	r1, #12
 8011d00:	e7f2      	b.n	8011ce8 <m2m_wifi_enable_sntp+0x8>
 8011d02:	bf00      	nop
 8011d04:	f3af 8000 	nop.w
 8011d08:	f3af 8000 	nop.w
 8011d0c:	f3af 8000 	nop.w

08011d10 <m2m_wifi_set_power_profile>:
@sa			tenuM2mPwrMode
@pre		m2m_wifi_init
@warning	must be called after the initializations and before any connection request and can't be changed in run time,
*/
sint8 m2m_wifi_set_power_profile(uint8 u8PwrMode)
{
 8011d10:	b500      	push	{lr}
 8011d12:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;
	tstrM2mPwrMode strM2mPwrMode;
	strM2mPwrMode.u8PwrMode = u8PwrMode;
 8011d14:	aa06      	add	r2, sp, #24
 8011d16:	f802 0d04 	strb.w	r0, [r2, #-4]!
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_POWER_PROFILE, (uint8*)&strM2mPwrMode,sizeof(tstrM2mPwrMode), NULL, 0, 0);
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	9302      	str	r3, [sp, #8]
 8011d1e:	9301      	str	r3, [sp, #4]
 8011d20:	9300      	str	r3, [sp, #0]
 8011d22:	2304      	movs	r3, #4
 8011d24:	2116      	movs	r1, #22
 8011d26:	2001      	movs	r0, #1
 8011d28:	f7fe fd82 	bl	8010830 <hif_send>
	return ret;
}
 8011d2c:	b007      	add	sp, #28
 8011d2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d32:	bf00      	nop
 8011d34:	f3af 8000 	nop.w
 8011d38:	f3af 8000 	nop.w
 8011d3c:	f3af 8000 	nop.w

08011d40 <m2m_wifi_set_tx_power>:
@sa			tenuM2mTxPwrLevel
@pre		m2m_wifi_init
@warning
*/
sint8 m2m_wifi_set_tx_power(uint8 u8TxPwrLevel)
{
 8011d40:	b500      	push	{lr}
 8011d42:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;
	tstrM2mTxPwrLevel strM2mTxPwrLevel;
	strM2mTxPwrLevel.u8TxPwrLevel = u8TxPwrLevel;
 8011d44:	aa06      	add	r2, sp, #24
 8011d46:	f802 0d04 	strb.w	r0, [r2, #-4]!
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_TX_POWER, (uint8*)&strM2mTxPwrLevel,sizeof(tstrM2mTxPwrLevel), NULL, 0, 0);
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	9302      	str	r3, [sp, #8]
 8011d4e:	9301      	str	r3, [sp, #4]
 8011d50:	9300      	str	r3, [sp, #0]
 8011d52:	2304      	movs	r3, #4
 8011d54:	2117      	movs	r1, #23
 8011d56:	2001      	movs	r0, #1
 8011d58:	f7fe fd6a 	bl	8010830 <hif_send>
	return ret;
}
 8011d5c:	b007      	add	sp, #28
 8011d5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d62:	bf00      	nop
 8011d64:	f3af 8000 	nop.w
 8011d68:	f3af 8000 	nop.w
 8011d6c:	f3af 8000 	nop.w

08011d70 <m2m_wifi_enable_firmware_logs>:
@sa			__DISABLE_FIRMWARE_LOGS__ (build option to disable logs from initializations)
@pre		m2m_wifi_init
@warning
*/
sint8 m2m_wifi_enable_firmware_logs(uint8 u8Enable)
{
 8011d70:	b500      	push	{lr}
 8011d72:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;
	tstrM2mEnableLogs strM2mEnableLogs;
	strM2mEnableLogs.u8Enable = u8Enable;
 8011d74:	aa06      	add	r2, sp, #24
 8011d76:	f802 0d04 	strb.w	r0, [r2, #-4]!
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_ENABLE_LOGS, (uint8*)&strM2mEnableLogs,sizeof(tstrM2mEnableLogs), NULL, 0, 0);
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	9302      	str	r3, [sp, #8]
 8011d7e:	9301      	str	r3, [sp, #4]
 8011d80:	9300      	str	r3, [sp, #0]
 8011d82:	2304      	movs	r3, #4
 8011d84:	2119      	movs	r1, #25
 8011d86:	2001      	movs	r0, #1
 8011d88:	f7fe fd52 	bl	8010830 <hif_send>
	return ret;
}
 8011d8c:	b007      	add	sp, #28
 8011d8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d92:	bf00      	nop
 8011d94:	f3af 8000 	nop.w
 8011d98:	f3af 8000 	nop.w
 8011d9c:	f3af 8000 	nop.w

08011da0 <m2m_wifi_set_battery_voltage>:
@sa			__DISABLE_FIRMWARE_LOGS__ (build option to disable logs from initializations)
@pre		m2m_wifi_init
@warning
*/
sint8 m2m_wifi_set_battery_voltage(uint16 u16BattVoltx100)
{
 8011da0:	b500      	push	{lr}
 8011da2:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;
	tstrM2mBatteryVoltage strM2mBattVol = {0};
 8011da4:	2300      	movs	r3, #0
 8011da6:	f8ad 3016 	strh.w	r3, [sp, #22]
	strM2mBattVol.u16BattVolt = u16BattVoltx100;
 8011daa:	aa06      	add	r2, sp, #24
 8011dac:	f822 0d04 	strh.w	r0, [r2, #-4]!
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_BATTERY_VOLTAGE, (uint8*)&strM2mBattVol,sizeof(tstrM2mBatteryVoltage), NULL, 0, 0);
 8011db0:	9302      	str	r3, [sp, #8]
 8011db2:	9301      	str	r3, [sp, #4]
 8011db4:	9300      	str	r3, [sp, #0]
 8011db6:	2304      	movs	r3, #4
 8011db8:	2118      	movs	r1, #24
 8011dba:	2001      	movs	r0, #1
 8011dbc:	f7fe fd38 	bl	8010830 <hif_send>
	return ret;
}
 8011dc0:	b007      	add	sp, #28
 8011dc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011dc6:	bf00      	nop
 8011dc8:	f3af 8000 	nop.w
 8011dcc:	f3af 8000 	nop.w

08011dd0 <m2m_wifi_prng_get_random_bytes>:
@param [in]    pu8PrngBuff
		        Pointer to user allocated buffer.
@return           The function SHALL return M2M_SUCCESE for success and a negative value otherwise.
*/
sint8 m2m_wifi_prng_get_random_bytes(uint8 * pu8PrngBuff,uint16 u16PrngSize)
{
 8011dd0:	b500      	push	{lr}
 8011dd2:	b087      	sub	sp, #28
	sint8 ret = M2M_ERR_FAIL;
	tstrPrng   strRng = {0};
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	9305      	str	r3, [sp, #20]
	if((u16PrngSize < (M2M_BUFFER_MAX_SIZE - sizeof(tstrPrng)))&&(pu8PrngBuff != NULL))
 8011dd8:	f240 6333 	movw	r3, #1587	; 0x633
 8011ddc:	4299      	cmp	r1, r3
 8011dde:	d811      	bhi.n	8011e04 <m2m_wifi_prng_get_random_bytes+0x34>
 8011de0:	b198      	cbz	r0, 8011e0a <m2m_wifi_prng_get_random_bytes+0x3a>
	{
		strRng.u16PrngSize = u16PrngSize;
 8011de2:	f8ad 1014 	strh.w	r1, [sp, #20]
		strRng.pu8RngBuff  = pu8PrngBuff;
 8011de6:	aa06      	add	r2, sp, #24
 8011de8:	f842 0d08 	str.w	r0, [r2, #-8]!
		ret = hif_send(M2M_REQ_GROUP_WIFI, ((uint8)M2M_WIFI_REQ_GET_PRNG | (uint8)M2M_REQ_DATA_PKT),(uint8 *)&strRng, sizeof(tstrPrng),NULL,0, 0);
 8011dec:	2300      	movs	r3, #0
 8011dee:	9302      	str	r3, [sp, #8]
 8011df0:	9301      	str	r3, [sp, #4]
 8011df2:	9300      	str	r3, [sp, #0]
 8011df4:	2308      	movs	r3, #8
 8011df6:	219f      	movs	r1, #159	; 0x9f
 8011df8:	2001      	movs	r0, #1
 8011dfa:	f7fe fd19 	bl	8010830 <hif_send>
	else
	{
		M2M_ERR("PRNG Buffer exceeded maximum size %d or NULL Buffer\n",u16PrngSize);
	}
	return ret;
}
 8011dfe:	b007      	add	sp, #28
 8011e00:	f85d fb04 	ldr.w	pc, [sp], #4
	sint8 ret = M2M_ERR_FAIL;
 8011e04:	f06f 000b 	mvn.w	r0, #11
 8011e08:	e7f9      	b.n	8011dfe <m2m_wifi_prng_get_random_bytes+0x2e>
 8011e0a:	f06f 000b 	mvn.w	r0, #11
 8011e0e:	e7f6      	b.n	8011dfe <m2m_wifi_prng_get_random_bytes+0x2e>

08011e10 <chip_apply_conf>:

#define TIMEOUT						(20000) // ITCO: replace (0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 8011e10:	b510      	push	{r4, lr}
 8011e12:	b082      	sub	sp, #8
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
 8011e14:	f440 7480 	orr.w	r4, r0, #256	; 0x100
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
 8011e18:	4621      	mov	r1, r4
 8011e1a:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 8011e1e:	f000 fbcf 	bl	80125c0 <nm_write_reg>
		if(val32 != 0) {
			uint32 reg = 0;
 8011e22:	a902      	add	r1, sp, #8
 8011e24:	2300      	movs	r3, #0
 8011e26:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 8011e2a:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 8011e2e:	f000 fbbf 	bl	80125b0 <nm_read_reg_with_ret>
			if(ret == M2M_SUCCESS) {
 8011e32:	2800      	cmp	r0, #0
 8011e34:	d1f0      	bne.n	8011e18 <chip_apply_conf+0x8>
				if(reg == val32)
 8011e36:	9b01      	ldr	r3, [sp, #4]
 8011e38:	42a3      	cmp	r3, r4
 8011e3a:	d1ed      	bne.n	8011e18 <chip_apply_conf+0x8>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
 8011e3c:	b002      	add	sp, #8
 8011e3e:	bd10      	pop	{r4, pc}

08011e40 <chip_idle>:
void chip_idle(void)
{
 8011e40:	b500      	push	{lr}
 8011e42:	b083      	sub	sp, #12
	uint32 reg = 0;
 8011e44:	a902      	add	r1, sp, #8
 8011e46:	2300      	movs	r3, #0
 8011e48:	f841 3d04 	str.w	r3, [r1, #-4]!
	nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 8011e4c:	2001      	movs	r0, #1
 8011e4e:	f000 fbaf 	bl	80125b0 <nm_read_reg_with_ret>
	if(reg & NBIT1)
 8011e52:	9901      	ldr	r1, [sp, #4]
 8011e54:	f011 0f02 	tst.w	r1, #2
 8011e58:	d102      	bne.n	8011e60 <chip_idle+0x20>
	{
		reg &=~ NBIT1;
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}
 8011e5a:	b003      	add	sp, #12
 8011e5c:	f85d fb04 	ldr.w	pc, [sp], #4
		reg &=~ NBIT1;
 8011e60:	f021 0102 	bic.w	r1, r1, #2
 8011e64:	9101      	str	r1, [sp, #4]
		nm_write_reg(WAKE_CLK_REG, reg);
 8011e66:	2001      	movs	r0, #1
 8011e68:	f000 fbaa 	bl	80125c0 <nm_write_reg>
}
 8011e6c:	e7f5      	b.n	8011e5a <chip_idle+0x1a>
 8011e6e:	bf00      	nop

08011e70 <enable_interrupts>:

sint8 enable_interrupts(void)
{
 8011e70:	b500      	push	{lr}
 8011e72:	b083      	sub	sp, #12
	uint32 reg = 0;
 8011e74:	a902      	add	r1, sp, #8
 8011e76:	2300      	movs	r3, #0
 8011e78:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 8011e7c:	f241 4008 	movw	r0, #5128	; 0x1408
 8011e80:	f000 fb96 	bl	80125b0 <nm_read_reg_with_ret>
	if (M2M_SUCCESS != ret) goto ERR1;
 8011e84:	4603      	mov	r3, r0
 8011e86:	b118      	cbz	r0, 8011e90 <enable_interrupts+0x20>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:
	return ret;
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	b003      	add	sp, #12
 8011e8c:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= ((uint32) 1 << 8);
 8011e90:	9901      	ldr	r1, [sp, #4]
 8011e92:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8011e96:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 8011e98:	f241 4008 	movw	r0, #5128	; 0x1408
 8011e9c:	f000 fb90 	bl	80125c0 <nm_write_reg>
	if (M2M_SUCCESS != ret) goto ERR1;
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	2800      	cmp	r0, #0
 8011ea4:	d1f0      	bne.n	8011e88 <enable_interrupts+0x18>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 8011ea6:	a901      	add	r1, sp, #4
 8011ea8:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8011eac:	f000 fb80 	bl	80125b0 <nm_read_reg_with_ret>
	if (M2M_SUCCESS != ret) goto ERR1;
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	2800      	cmp	r0, #0
 8011eb4:	d1e8      	bne.n	8011e88 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
 8011eb6:	9901      	ldr	r1, [sp, #4]
 8011eb8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8011ebc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 8011ebe:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8011ec2:	f000 fb7d 	bl	80125c0 <nm_write_reg>
 8011ec6:	4603      	mov	r3, r0
ERR1:
 8011ec8:	e7de      	b.n	8011e88 <enable_interrupts+0x18>
 8011eca:	bf00      	nop
 8011ecc:	f3af 8000 	nop.w

08011ed0 <cpu_start>:

sint8 cpu_start(void) {
 8011ed0:	b570      	push	{r4, r5, r6, lr}
 8011ed2:	b082      	sub	sp, #8
	uint32 reg = 0;
 8011ed4:	2600      	movs	r6, #0
 8011ed6:	ad02      	add	r5, sp, #8
 8011ed8:	f845 6d04 	str.w	r6, [r5, #-4]!
	sint8 ret;

	/**
	reset regs
	*/
	ret = nm_write_reg(BOOTROM_REG,0);
 8011edc:	4631      	mov	r1, r6
 8011ede:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 8011ee2:	f000 fb6d 	bl	80125c0 <nm_write_reg>
 8011ee6:	4604      	mov	r4, r0
	ret += nm_write_reg(NMI_STATE_REG,0);
 8011ee8:	4631      	mov	r1, r6
 8011eea:	f241 008c 	movw	r0, #4236	; 0x108c
 8011eee:	f000 fb67 	bl	80125c0 <nm_write_reg>
 8011ef2:	fa54 f480 	uxtab	r4, r4, r0
 8011ef6:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(NMI_REV_REG,0);
 8011ef8:	4631      	mov	r1, r6
 8011efa:	4821      	ldr	r0, [pc, #132]	; (8011f80 <cpu_start+0xb0>)
 8011efc:	f000 fb60 	bl	80125c0 <nm_write_reg>
 8011f00:	fa54 f480 	uxtab	r4, r4, r0
 8011f04:	b2e4      	uxtb	r4, r4
	/**
	Go...
	**/
	ret += nm_read_reg_with_ret(0x1118, &reg);
 8011f06:	4629      	mov	r1, r5
 8011f08:	f241 1018 	movw	r0, #4376	; 0x1118
 8011f0c:	f000 fb50 	bl	80125b0 <nm_read_reg_with_ret>
 8011f10:	fa54 f480 	uxtab	r4, r4, r0
 8011f14:	b2e4      	uxtb	r4, r4
	reg |= (1 << 0);
 8011f16:	9901      	ldr	r1, [sp, #4]
 8011f18:	f041 0101 	orr.w	r1, r1, #1
 8011f1c:	9101      	str	r1, [sp, #4]
	ret += nm_write_reg(0x1118, reg);
 8011f1e:	f241 1018 	movw	r0, #4376	; 0x1118
 8011f22:	f000 fb4d 	bl	80125c0 <nm_write_reg>
 8011f26:	fa54 f480 	uxtab	r4, r4, r0
 8011f2a:	b2e4      	uxtb	r4, r4
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 8011f2c:	4629      	mov	r1, r5
 8011f2e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8011f32:	f000 fb3d 	bl	80125b0 <nm_read_reg_with_ret>
 8011f36:	fa54 f480 	uxtab	r4, r4, r0
 8011f3a:	b2e4      	uxtb	r4, r4
 8011f3c:	b265      	sxtb	r5, r4
	if ((reg & (1ul << 10)) == (1ul << 10)) {
 8011f3e:	9901      	ldr	r1, [sp, #4]
 8011f40:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8011f44:	d110      	bne.n	8011f68 <cpu_start+0x98>
		reg &= ~(1ul << 10);
		ret += nm_write_reg(NMI_GLB_RESET_0, reg);
	}
	reg |= (1ul << 10);
 8011f46:	9901      	ldr	r1, [sp, #4]
 8011f48:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8011f4c:	9101      	str	r1, [sp, #4]
	ret += nm_write_reg(NMI_GLB_RESET_0, reg);
 8011f4e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8011f52:	f000 fb35 	bl	80125c0 <nm_write_reg>
 8011f56:	fa55 f580 	uxtab	r5, r5, r0
 8011f5a:	b26d      	sxtb	r5, r5
	nm_bsp_sleep(1);
 8011f5c:	2001      	movs	r0, #1
 8011f5e:	f7fe f8f7 	bl	8010150 <nm_bsp_sleep>
	return ret;
}
 8011f62:	4628      	mov	r0, r5
 8011f64:	b002      	add	sp, #8
 8011f66:	bd70      	pop	{r4, r5, r6, pc}
		reg &= ~(1ul << 10);
 8011f68:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8011f6c:	9101      	str	r1, [sp, #4]
		ret += nm_write_reg(NMI_GLB_RESET_0, reg);
 8011f6e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8011f72:	f000 fb25 	bl	80125c0 <nm_write_reg>
 8011f76:	fa54 f080 	uxtab	r0, r4, r0
 8011f7a:	b245      	sxtb	r5, r0
 8011f7c:	e7e3      	b.n	8011f46 <cpu_start+0x76>
 8011f7e:	bf00      	nop
 8011f80:	000207ac 	.word	0x000207ac
 8011f84:	f3af 8000 	nop.w
 8011f88:	f3af 8000 	nop.w
 8011f8c:	f3af 8000 	nop.w

08011f90 <nmi_get_chipid>:

uint32 nmi_get_chipid(void)
{
 8011f90:	b510      	push	{r4, lr}
 8011f92:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
 8011f94:	4b26      	ldr	r3, [pc, #152]	; (8012030 <nmi_get_chipid+0xa0>)
 8011f96:	681c      	ldr	r4, [r3, #0]
 8011f98:	b124      	cbz	r4, 8011fa4 <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
 8011f9a:	4b25      	ldr	r3, [pc, #148]	; (8012030 <nmi_get_chipid+0xa0>)
 8011f9c:	681c      	ldr	r4, [r3, #0]
}
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	b002      	add	sp, #8
 8011fa2:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011faa:	f000 fb01 	bl	80125b0 <nm_read_reg_with_ret>
 8011fae:	b118      	cbz	r0, 8011fb8 <nmi_get_chipid+0x28>
			chipid = 0;
 8011fb0:	4b1f      	ldr	r3, [pc, #124]	; (8012030 <nmi_get_chipid+0xa0>)
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	601a      	str	r2, [r3, #0]
			return 0;
 8011fb6:	e7f2      	b.n	8011f9e <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 8011fb8:	a901      	add	r1, sp, #4
 8011fba:	f241 30f4 	movw	r0, #5108	; 0x13f4
 8011fbe:	f000 faf7 	bl	80125b0 <nm_read_reg_with_ret>
 8011fc2:	b118      	cbz	r0, 8011fcc <nmi_get_chipid+0x3c>
			chipid = 0;
 8011fc4:	4b1a      	ldr	r3, [pc, #104]	; (8012030 <nmi_get_chipid+0xa0>)
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	601a      	str	r2, [r3, #0]
			return 0;
 8011fca:	e7e8      	b.n	8011f9e <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
 8011fcc:	4b18      	ldr	r3, [pc, #96]	; (8012030 <nmi_get_chipid+0xa0>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	4a18      	ldr	r2, [pc, #96]	; (8012034 <nmi_get_chipid+0xa4>)
 8011fd2:	4293      	cmp	r3, r2
 8011fd4:	d00d      	beq.n	8011ff2 <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
 8011fd6:	4a18      	ldr	r2, [pc, #96]	; (8012038 <nmi_get_chipid+0xa8>)
 8011fd8:	4293      	cmp	r3, r2
 8011fda:	d011      	beq.n	8012000 <nmi_get_chipid+0x70>
		}else if(chipid == 0x1000F0) {
 8011fdc:	4a17      	ldr	r2, [pc, #92]	; (801203c <nmi_get_chipid+0xac>)
 8011fde:	4293      	cmp	r3, r2
 8011fe0:	d01b      	beq.n	801201a <nmi_get_chipid+0x8a>
		chipid &= ~(0x0f0000);
 8011fe2:	4a13      	ldr	r2, [pc, #76]	; (8012030 <nmi_get_chipid+0xa0>)
 8011fe4:	6813      	ldr	r3, [r2, #0]
 8011fe6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
 8011fea:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8011fee:	6013      	str	r3, [r2, #0]
 8011ff0:	e7d3      	b.n	8011f9a <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
 8011ff2:	9b01      	ldr	r3, [sp, #4]
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d0f4      	beq.n	8011fe2 <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
 8011ff8:	4b0d      	ldr	r3, [pc, #52]	; (8012030 <nmi_get_chipid+0xa0>)
 8011ffa:	3201      	adds	r2, #1
 8011ffc:	601a      	str	r2, [r3, #0]
 8011ffe:	e7f0      	b.n	8011fe2 <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
 8012000:	9b01      	ldr	r3, [sp, #4]
 8012002:	2b03      	cmp	r3, #3
 8012004:	d0ed      	beq.n	8011fe2 <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
 8012006:	2b04      	cmp	r3, #4
 8012008:	d003      	beq.n	8012012 <nmi_get_chipid+0x82>
				chipid = 0x1002b2;
 801200a:	4b09      	ldr	r3, [pc, #36]	; (8012030 <nmi_get_chipid+0xa0>)
 801200c:	4a0c      	ldr	r2, [pc, #48]	; (8012040 <nmi_get_chipid+0xb0>)
 801200e:	601a      	str	r2, [r3, #0]
 8012010:	e7e7      	b.n	8011fe2 <nmi_get_chipid+0x52>
				chipid = 0x1002b1;
 8012012:	4b07      	ldr	r3, [pc, #28]	; (8012030 <nmi_get_chipid+0xa0>)
 8012014:	3201      	adds	r2, #1
 8012016:	601a      	str	r2, [r3, #0]
 8012018:	e7e3      	b.n	8011fe2 <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 801201a:	4905      	ldr	r1, [pc, #20]	; (8012030 <nmi_get_chipid+0xa0>)
 801201c:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
 8012020:	f000 fac6 	bl	80125b0 <nm_read_reg_with_ret>
 8012024:	2800      	cmp	r0, #0
 8012026:	d0dc      	beq.n	8011fe2 <nmi_get_chipid+0x52>
			chipid = 0;
 8012028:	4b01      	ldr	r3, [pc, #4]	; (8012030 <nmi_get_chipid+0xa0>)
 801202a:	2200      	movs	r2, #0
 801202c:	601a      	str	r2, [r3, #0]
			return 0;
 801202e:	e7b6      	b.n	8011f9e <nmi_get_chipid+0xe>
 8012030:	20002414 	.word	0x20002414
 8012034:	001002a0 	.word	0x001002a0
 8012038:	001002b0 	.word	0x001002b0
 801203c:	001000f0 	.word	0x001000f0
 8012040:	001002b2 	.word	0x001002b2
 8012044:	f3af 8000 	nop.w
 8012048:	f3af 8000 	nop.w
 801204c:	f3af 8000 	nop.w

08012050 <nmi_get_rfrevid>:

uint32 nmi_get_rfrevid(void)
{
 8012050:	b500      	push	{lr}
 8012052:	b083      	sub	sp, #12
    uint32 rfrevid;
    if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 8012054:	a901      	add	r1, sp, #4
 8012056:	f241 30f4 	movw	r0, #5108	; 0x13f4
 801205a:	f000 faa9 	bl	80125b0 <nm_read_reg_with_ret>
 801205e:	b918      	cbnz	r0, 8012068 <nmi_get_rfrevid+0x18>
        rfrevid = 0;
        return 0;
    }
    return rfrevid;
 8012060:	9801      	ldr	r0, [sp, #4]
}
 8012062:	b003      	add	sp, #12
 8012064:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
 8012068:	2000      	movs	r0, #0
 801206a:	e7fa      	b.n	8012062 <nmi_get_rfrevid+0x12>
 801206c:	f3af 8000 	nop.w

08012070 <restore_pmu_settings_after_global_reset>:

void restore_pmu_settings_after_global_reset(void)
{
 8012070:	b508      	push	{r3, lr}
	/*
	* Must restore PMU register value after
	* global reset if PMU toggle is done at
	* least once since the last hard reset.
	*/
	if(REV(nmi_get_chipid()) >= REV_2B0) {
 8012072:	f7ff ff8d 	bl	8011f90 <nmi_get_chipid>
 8012076:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801207a:	f5b0 7f2c 	cmp.w	r0, #688	; 0x2b0
 801207e:	d200      	bcs.n	8012082 <restore_pmu_settings_after_global_reset+0x12>
		nm_write_reg(0x1e48, 0xb78469ce);
	}
}
 8012080:	bd08      	pop	{r3, pc}
		nm_write_reg(0x1e48, 0xb78469ce);
 8012082:	4903      	ldr	r1, [pc, #12]	; (8012090 <restore_pmu_settings_after_global_reset+0x20>)
 8012084:	f641 6048 	movw	r0, #7752	; 0x1e48
 8012088:	f000 fa9a 	bl	80125c0 <nm_write_reg>
}
 801208c:	e7f8      	b.n	8012080 <restore_pmu_settings_after_global_reset+0x10>
 801208e:	bf00      	nop
 8012090:	b78469ce 	.word	0xb78469ce
 8012094:	f3af 8000 	nop.w
 8012098:	f3af 8000 	nop.w
 801209c:	f3af 8000 	nop.w

080120a0 <nmi_update_pll>:

void nmi_update_pll(void)
{
 80120a0:	b510      	push	{r4, lr}
	uint32 pll;

	pll = nm_read_reg(0x1428);
 80120a2:	f241 4028 	movw	r0, #5160	; 0x1428
 80120a6:	f000 fa7b 	bl	80125a0 <nm_read_reg>
	pll &= ~0x1ul;
 80120aa:	f020 0401 	bic.w	r4, r0, #1
	nm_write_reg(0x1428, pll);
 80120ae:	4621      	mov	r1, r4
 80120b0:	f241 4028 	movw	r0, #5160	; 0x1428
 80120b4:	f000 fa84 	bl	80125c0 <nm_write_reg>
	pll |= 0x1ul;
	nm_write_reg(0x1428, pll);
 80120b8:	f044 0101 	orr.w	r1, r4, #1
 80120bc:	f241 4028 	movw	r0, #5160	; 0x1428
 80120c0:	f000 fa7e 	bl	80125c0 <nm_write_reg>

}
 80120c4:	bd10      	pop	{r4, pc}
 80120c6:	bf00      	nop
 80120c8:	f3af 8000 	nop.w
 80120cc:	f3af 8000 	nop.w

080120d0 <nmi_set_sys_clk_src_to_xo>:
void nmi_set_sys_clk_src_to_xo(void)
{
 80120d0:	b508      	push	{r3, lr}
	uint32 val32;

	/* Switch system clock source to XO. This will take effect after nmi_update_pll(). */
	val32 = nm_read_reg(0x141c);
 80120d2:	f241 401c 	movw	r0, #5148	; 0x141c
 80120d6:	f000 fa63 	bl	80125a0 <nm_read_reg>
	val32 |= (1 << 2);
	nm_write_reg(0x141c, val32);
 80120da:	f040 0104 	orr.w	r1, r0, #4
 80120de:	f241 401c 	movw	r0, #5148	; 0x141c
 80120e2:	f000 fa6d 	bl	80125c0 <nm_write_reg>

	/* Do PLL update */
	nmi_update_pll();
 80120e6:	f7ff ffdb 	bl	80120a0 <nmi_update_pll>
}
 80120ea:	bd08      	pop	{r3, pc}
 80120ec:	f3af 8000 	nop.w

080120f0 <chip_sleep>:
sint8 chip_sleep(void)
{
 80120f0:	b500      	push	{lr}
 80120f2:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 80120f4:	a901      	add	r1, sp, #4
 80120f6:	2010      	movs	r0, #16
 80120f8:	f000 fa5a 	bl	80125b0 <nm_read_reg_with_ret>
		if(ret != M2M_SUCCESS) goto ERR1;
 80120fc:	4603      	mov	r3, r0
 80120fe:	b9f8      	cbnz	r0, 8012140 <chip_sleep+0x50>
		if((reg & NBIT0) == 0) break;
 8012100:	9b01      	ldr	r3, [sp, #4]
 8012102:	f013 0f01 	tst.w	r3, #1
 8012106:	d1f5      	bne.n	80120f4 <chip_sleep+0x4>
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 8012108:	a901      	add	r1, sp, #4
 801210a:	2001      	movs	r0, #1
 801210c:	f000 fa50 	bl	80125b0 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS)goto ERR1;
 8012110:	4603      	mov	r3, r0
 8012112:	b9a8      	cbnz	r0, 8012140 <chip_sleep+0x50>
	if(reg & NBIT1)
 8012114:	9901      	ldr	r1, [sp, #4]
 8012116:	f011 0f02 	tst.w	r1, #2
 801211a:	d007      	beq.n	801212c <chip_sleep+0x3c>
	{
		reg &=~NBIT1;
 801211c:	f021 0102 	bic.w	r1, r1, #2
 8012120:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 8012122:	2001      	movs	r0, #1
 8012124:	f000 fa4c 	bl	80125c0 <nm_write_reg>
		if(ret != M2M_SUCCESS)goto ERR1;
 8012128:	4603      	mov	r3, r0
 801212a:	b948      	cbnz	r0, 8012140 <chip_sleep+0x50>
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 801212c:	a901      	add	r1, sp, #4
 801212e:	200b      	movs	r0, #11
 8012130:	f000 fa3e 	bl	80125b0 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS)goto ERR1;
 8012134:	4603      	mov	r3, r0
 8012136:	b918      	cbnz	r0, 8012140 <chip_sleep+0x50>
	if(reg & NBIT0)
 8012138:	9901      	ldr	r1, [sp, #4]
 801213a:	f011 0f01 	tst.w	r1, #1
 801213e:	d103      	bne.n	8012148 <chip_sleep+0x58>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
 8012140:	4618      	mov	r0, r3
 8012142:	b003      	add	sp, #12
 8012144:	f85d fb04 	ldr.w	pc, [sp], #4
		reg &= ~NBIT0;
 8012148:	f021 0101 	bic.w	r1, r1, #1
 801214c:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 801214e:	200b      	movs	r0, #11
 8012150:	f000 fa36 	bl	80125c0 <nm_write_reg>
 8012154:	4603      	mov	r3, r0
ERR1:
 8012156:	e7f3      	b.n	8012140 <chip_sleep+0x50>
 8012158:	f3af 8000 	nop.w
 801215c:	f3af 8000 	nop.w

08012160 <chip_wake>:
sint8 chip_wake(void)
{
 8012160:	b530      	push	{r4, r5, lr}
 8012162:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 8012164:	2300      	movs	r3, #0
 8012166:	9301      	str	r3, [sp, #4]
 8012168:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 801216a:	a901      	add	r1, sp, #4
 801216c:	200b      	movs	r0, #11
 801216e:	f000 fa1f 	bl	80125b0 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8012172:	4604      	mov	r4, r0
 8012174:	bb38      	cbnz	r0, 80121c6 <chip_wake+0x66>

	if(!(reg & NBIT0))
 8012176:	9901      	ldr	r1, [sp, #4]
 8012178:	f011 0f01 	tst.w	r1, #1
 801217c:	d106      	bne.n	801218c <chip_wake+0x2c>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 801217e:	f041 0101 	orr.w	r1, r1, #1
 8012182:	200b      	movs	r0, #11
 8012184:	f000 fa1c 	bl	80125c0 <nm_write_reg>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8012188:	4604      	mov	r4, r0
 801218a:	b9e0      	cbnz	r0, 80121c6 <chip_wake+0x66>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 801218c:	a901      	add	r1, sp, #4
 801218e:	2001      	movs	r0, #1
 8012190:	f000 fa0e 	bl	80125b0 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8012194:	4604      	mov	r4, r0
 8012196:	b9b0      	cbnz	r0, 80121c6 <chip_wake+0x66>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 8012198:	9901      	ldr	r1, [sp, #4]
 801219a:	f011 0f02 	tst.w	r1, #2
 801219e:	d015      	beq.n	80121cc <chip_wake+0x6c>
{
 80121a0:	2500      	movs	r5, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 80121a2:	4669      	mov	r1, sp
 80121a4:	200f      	movs	r0, #15
 80121a6:	f000 fa03 	bl	80125b0 <nm_read_reg_with_ret>
		if(ret != M2M_SUCCESS) {
 80121aa:	4604      	mov	r4, r0
 80121ac:	b958      	cbnz	r0, 80121c6 <chip_wake+0x66>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
 80121ae:	9b00      	ldr	r3, [sp, #0]
 80121b0:	f013 0f04 	tst.w	r3, #4
 80121b4:	d113      	bne.n	80121de <chip_wake+0x7e>
			break;
		}
		nm_bsp_sleep(2);
 80121b6:	2002      	movs	r0, #2
 80121b8:	f7fd ffca 	bl	8010150 <nm_bsp_sleep>
		trials++;
 80121bc:	3501      	adds	r5, #1
		if(trials > WAKUP_TRAILS_TIMEOUT)
 80121be:	2d04      	cmp	r5, #4
 80121c0:	d9ef      	bls.n	80121a2 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
			ret = M2M_ERR_TIME_OUT;
 80121c2:	f06f 0403 	mvn.w	r4, #3
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();

_WAKE_EXIT:
	return ret;
}
 80121c6:	4620      	mov	r0, r4
 80121c8:	b003      	add	sp, #12
 80121ca:	bd30      	pop	{r4, r5, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 80121cc:	f041 0102 	orr.w	r1, r1, #2
 80121d0:	2001      	movs	r0, #1
 80121d2:	f000 f9f5 	bl	80125c0 <nm_write_reg>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 80121d6:	4604      	mov	r4, r0
 80121d8:	2800      	cmp	r0, #0
 80121da:	d0e1      	beq.n	80121a0 <chip_wake+0x40>
_WAKE_EXIT:
 80121dc:	e7f3      	b.n	80121c6 <chip_wake+0x66>
	nm_bus_reset();
 80121de:	f000 f9cf 	bl	8012580 <nm_bus_reset>
 80121e2:	e7f0      	b.n	80121c6 <chip_wake+0x66>
 80121e4:	f3af 8000 	nop.w
 80121e8:	f3af 8000 	nop.w
 80121ec:	f3af 8000 	nop.w

080121f0 <cpu_halt>:
sint8 cpu_halt(void)
{
 80121f0:	b530      	push	{r4, r5, lr}
 80121f2:	b083      	sub	sp, #12
	sint8 ret;
	uint32 reg = 0;
 80121f4:	ad02      	add	r5, sp, #8
 80121f6:	2300      	movs	r3, #0
 80121f8:	f845 3d04 	str.w	r3, [r5, #-4]!
	ret = nm_read_reg_with_ret(0x1118, &reg);
 80121fc:	4629      	mov	r1, r5
 80121fe:	f241 1018 	movw	r0, #4376	; 0x1118
 8012202:	f000 f9d5 	bl	80125b0 <nm_read_reg_with_ret>
 8012206:	4604      	mov	r4, r0
	reg |= (1 << 0);
 8012208:	9901      	ldr	r1, [sp, #4]
 801220a:	f041 0101 	orr.w	r1, r1, #1
 801220e:	9101      	str	r1, [sp, #4]
	ret += nm_write_reg(0x1118, reg);
 8012210:	f241 1018 	movw	r0, #4376	; 0x1118
 8012214:	f000 f9d4 	bl	80125c0 <nm_write_reg>
 8012218:	fa54 f480 	uxtab	r4, r4, r0
 801221c:	b2e4      	uxtb	r4, r4
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 801221e:	4629      	mov	r1, r5
 8012220:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8012224:	f000 f9c4 	bl	80125b0 <nm_read_reg_with_ret>
 8012228:	fa54 f480 	uxtab	r4, r4, r0
 801222c:	b2e4      	uxtb	r4, r4
 801222e:	b260      	sxtb	r0, r4
	if ((reg & (1ul << 10)) == (1ul << 10)) {
 8012230:	9901      	ldr	r1, [sp, #4]
 8012232:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8012236:	d101      	bne.n	801223c <cpu_halt+0x4c>
		reg &= ~(1ul << 10);
		ret += nm_write_reg(NMI_GLB_RESET_0, reg);
		ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
	}
	return ret;
}
 8012238:	b003      	add	sp, #12
 801223a:	bd30      	pop	{r4, r5, pc}
		reg &= ~(1ul << 10);
 801223c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8012240:	ad02      	add	r5, sp, #8
 8012242:	f845 1d04 	str.w	r1, [r5, #-4]!
		ret += nm_write_reg(NMI_GLB_RESET_0, reg);
 8012246:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801224a:	f000 f9b9 	bl	80125c0 <nm_write_reg>
 801224e:	fa54 f480 	uxtab	r4, r4, r0
 8012252:	b2e4      	uxtb	r4, r4
		ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 8012254:	4629      	mov	r1, r5
 8012256:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801225a:	f000 f9a9 	bl	80125b0 <nm_read_reg_with_ret>
 801225e:	fa54 f080 	uxtab	r0, r4, r0
 8012262:	b240      	sxtb	r0, r0
 8012264:	e7e8      	b.n	8012238 <cpu_halt+0x48>
 8012266:	bf00      	nop
 8012268:	f3af 8000 	nop.w
 801226c:	f3af 8000 	nop.w

08012270 <chip_reset>:
	if(ret != M2M_SUCCESS) goto ERR1;
ERR1:
	return ret;
}
sint8 chip_reset(void)
{
 8012270:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_write_reg(NMI_GLB_RESET_0, 0);
 8012272:	2100      	movs	r1, #0
 8012274:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8012278:	f000 f9a2 	bl	80125c0 <nm_write_reg>
 801227c:	4604      	mov	r4, r0
	nm_bsp_sleep(50);
 801227e:	2032      	movs	r0, #50	; 0x32
 8012280:	f7fd ff66 	bl	8010150 <nm_bsp_sleep>
	return ret;
}
 8012284:	4620      	mov	r0, r4
 8012286:	bd10      	pop	{r4, pc}
 8012288:	f3af 8000 	nop.w
 801228c:	f3af 8000 	nop.w

08012290 <chip_reset_and_cpu_halt>:
{
 8012290:	b508      	push	{r3, lr}
	ret = chip_wake();
 8012292:	f7ff ff65 	bl	8012160 <chip_wake>
	if(ret != M2M_SUCCESS) goto ERR1;
 8012296:	4603      	mov	r3, r0
 8012298:	b108      	cbz	r0, 801229e <chip_reset_and_cpu_halt+0xe>
}
 801229a:	4618      	mov	r0, r3
 801229c:	bd08      	pop	{r3, pc}
	ret = chip_reset();
 801229e:	f7ff ffe7 	bl	8012270 <chip_reset>
	if(ret != M2M_SUCCESS) goto ERR1;
 80122a2:	4603      	mov	r3, r0
 80122a4:	2800      	cmp	r0, #0
 80122a6:	d1f8      	bne.n	801229a <chip_reset_and_cpu_halt+0xa>
	ret = cpu_halt();
 80122a8:	f7ff ffa2 	bl	80121f0 <cpu_halt>
 80122ac:	4603      	mov	r3, r0
ERR1:
 80122ae:	e7f4      	b.n	801229a <chip_reset_and_cpu_halt+0xa>

080122b0 <wait_for_bootrom>:

sint8 wait_for_bootrom(uint8 arg)
{
 80122b0:	b538      	push	{r3, r4, r5, lr}
 80122b2:	4605      	mov	r5, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 80122b4:	f241 0014 	movw	r0, #4116	; 0x1014
 80122b8:	f000 f972 	bl	80125a0 <nm_read_reg>
		if (reg & 0x80000000) {
 80122bc:	2800      	cmp	r0, #0
 80122be:	db03      	blt.n	80122c8 <wait_for_bootrom+0x18>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
 80122c0:	2001      	movs	r0, #1
 80122c2:	f7fd ff45 	bl	8010150 <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 80122c6:	e7f5      	b.n	80122b4 <wait_for_bootrom+0x4>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 80122c8:	482c      	ldr	r0, [pc, #176]	; (801237c <wait_for_bootrom+0xcc>)
 80122ca:	f000 f969 	bl	80125a0 <nm_read_reg>
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 80122ce:	f010 0001 	ands.w	r0, r0, #1
 80122d2:	d01d      	beq.n	8012310 <wait_for_bootrom+0x60>
				goto ERR2;
			}
		}
	}

	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
 80122d4:	2d02      	cmp	r5, #2
 80122d6:	d02e      	beq.n	8012336 <wait_for_bootrom+0x86>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
 80122d8:	2d03      	cmp	r5, #3
 80122da:	d038      	beq.n	801234e <wait_for_bootrom+0x9e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
 80122dc:	2d04      	cmp	r5, #4
 80122de:	d041      	beq.n	8012364 <wait_for_bootrom+0xb4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 80122e0:	4927      	ldr	r1, [pc, #156]	; (8012380 <wait_for_bootrom+0xd0>)
 80122e2:	f241 008c 	movw	r0, #4236	; 0x108c
 80122e6:	f000 f96b 	bl	80125c0 <nm_write_reg>
	uint32 u32GpReg1 = 0;
 80122ea:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 80122ec:	f7ff fe50 	bl	8011f90 <nmi_get_chipid>
 80122f0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80122f4:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
 80122f8:	d33b      	bcc.n	8012372 <wait_for_bootrom+0xc2>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 80122fa:	f044 0002 	orr.w	r0, r4, #2
 80122fe:	f7ff fd87 	bl	8011e10 <chip_apply_conf>
	} else {
		chip_apply_conf(u32GpReg1);
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 8012302:	4920      	ldr	r1, [pc, #128]	; (8012384 <wait_for_bootrom+0xd4>)
 8012304:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 8012308:	f000 f95a 	bl	80125c0 <nm_write_reg>
	sint8 ret = M2M_SUCCESS;
 801230c:	2000      	movs	r0, #0
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
 801230e:	bd38      	pop	{r3, r4, r5, pc}
	uint32 reg = 0, cnt = 0;
 8012310:	4604      	mov	r4, r0
		while(reg != M2M_FINISH_BOOT_ROM)
 8012312:	4b1d      	ldr	r3, [pc, #116]	; (8012388 <wait_for_bootrom+0xd8>)
 8012314:	4298      	cmp	r0, r3
 8012316:	d0dd      	beq.n	80122d4 <wait_for_bootrom+0x24>
			nm_bsp_sleep(1);
 8012318:	2001      	movs	r0, #1
 801231a:	f7fd ff19 	bl	8010150 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
 801231e:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 8012322:	f000 f93d 	bl	80125a0 <nm_read_reg>
			if(++cnt > (uint32)TIMEOUT)
 8012326:	3401      	adds	r4, #1
 8012328:	f644 6320 	movw	r3, #20000	; 0x4e20
 801232c:	429c      	cmp	r4, r3
 801232e:	d9f0      	bls.n	8012312 <wait_for_bootrom+0x62>
				ret = M2M_ERR_INIT;
 8012330:	f06f 0004 	mvn.w	r0, #4
 8012334:	e7eb      	b.n	801230e <wait_for_bootrom+0x5e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 8012336:	4915      	ldr	r1, [pc, #84]	; (801238c <wait_for_bootrom+0xdc>)
 8012338:	4815      	ldr	r0, [pc, #84]	; (8012390 <wait_for_bootrom+0xe0>)
 801233a:	f000 f941 	bl	80125c0 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
 801233e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8012342:	f241 008c 	movw	r0, #4236	; 0x108c
 8012346:	f000 f93b 	bl	80125c0 <nm_write_reg>
	uint32 u32GpReg1 = 0;
 801234a:	2400      	movs	r4, #0
 801234c:	e7ce      	b.n	80122ec <wait_for_bootrom+0x3c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 801234e:	490f      	ldr	r1, [pc, #60]	; (801238c <wait_for_bootrom+0xdc>)
 8012350:	480f      	ldr	r0, [pc, #60]	; (8012390 <wait_for_bootrom+0xe0>)
 8012352:	f000 f935 	bl	80125c0 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
 8012356:	2100      	movs	r1, #0
 8012358:	f241 008c 	movw	r0, #4236	; 0x108c
 801235c:	f000 f930 	bl	80125c0 <nm_write_reg>
	uint32 u32GpReg1 = 0;
 8012360:	2400      	movs	r4, #0
 8012362:	e7c3      	b.n	80122ec <wait_for_bootrom+0x3c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 8012364:	4906      	ldr	r1, [pc, #24]	; (8012380 <wait_for_bootrom+0xd0>)
 8012366:	f241 008c 	movw	r0, #4236	; 0x108c
 801236a:	f000 f929 	bl	80125c0 <nm_write_reg>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 801236e:	2480      	movs	r4, #128	; 0x80
 8012370:	e7bc      	b.n	80122ec <wait_for_bootrom+0x3c>
		chip_apply_conf(u32GpReg1);
 8012372:	4620      	mov	r0, r4
 8012374:	f7ff fd4c 	bl	8011e10 <chip_apply_conf>
 8012378:	e7c3      	b.n	8012302 <wait_for_bootrom+0x52>
 801237a:	bf00      	nop
 801237c:	000207bc 	.word	0x000207bc
 8012380:	13541354 	.word	0x13541354
 8012384:	ef522f61 	.word	0xef522f61
 8012388:	10add09e 	.word	0x10add09e
 801238c:	3c1cd57d 	.word	0x3c1cd57d
 8012390:	000207ac 	.word	0x000207ac
 8012394:	f3af 8000 	nop.w
 8012398:	f3af 8000 	nop.w
 801239c:	f3af 8000 	nop.w

080123a0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 80123a0:	b510      	push	{r4, lr}
 80123a2:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
 80123a4:	f241 038c 	movw	r3, #4236	; 0x108c
 80123a8:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 80123aa:	4b18      	ldr	r3, [pc, #96]	; (801240c <wait_for_firmware_start+0x6c>)
 80123ac:	9300      	str	r3, [sp, #0]

	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 80123ae:	3802      	subs	r0, #2
 80123b0:	b2c0      	uxtb	r0, r0
 80123b2:	2801      	cmp	r0, #1
 80123b4:	d912      	bls.n	80123dc <wait_for_firmware_start+0x3c>
{
 80123b6:	2400      	movs	r4, #0
 80123b8:	4620      	mov	r0, r4
	} else {
		/*bypass this step*/
	}


	while (checkValue != reg)
 80123ba:	9b00      	ldr	r3, [sp, #0]
 80123bc:	4283      	cmp	r3, r0
 80123be:	d017      	beq.n	80123f0 <wait_for_firmware_start+0x50>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
 80123c0:	2002      	movs	r0, #2
 80123c2:	f7fd fec5 	bl	8010150 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
 80123c6:	9801      	ldr	r0, [sp, #4]
 80123c8:	f000 f8ea 	bl	80125a0 <nm_read_reg>
		if(++cnt >= u32Timeout)
 80123cc:	3401      	adds	r4, #1
 80123ce:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80123d2:	429c      	cmp	r4, r3
 80123d4:	d9f1      	bls.n	80123ba <wait_for_firmware_start+0x1a>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
 80123d6:	f06f 0004 	mvn.w	r0, #4
 80123da:	e00e      	b.n	80123fa <wait_for_firmware_start+0x5a>
		regAddress = NMI_REV_REG;
 80123dc:	4b0c      	ldr	r3, [pc, #48]	; (8012410 <wait_for_firmware_start+0x70>)
 80123de:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
 80123e0:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
 80123e4:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
 80123e8:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
 80123ec:	9300      	str	r3, [sp, #0]
 80123ee:	e7e2      	b.n	80123b6 <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 80123f0:	9a00      	ldr	r2, [sp, #0]
 80123f2:	4b06      	ldr	r3, [pc, #24]	; (801240c <wait_for_firmware_start+0x6c>)
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d002      	beq.n	80123fe <wait_for_firmware_start+0x5e>
	sint8 ret = M2M_SUCCESS;
 80123f8:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
 80123fa:	b002      	add	sp, #8
 80123fc:	bd10      	pop	{r4, pc}
		nm_write_reg(NMI_STATE_REG, 0);
 80123fe:	2100      	movs	r1, #0
 8012400:	f241 008c 	movw	r0, #4236	; 0x108c
 8012404:	f000 f8dc 	bl	80125c0 <nm_write_reg>
	sint8 ret = M2M_SUCCESS;
 8012408:	2000      	movs	r0, #0
 801240a:	e7f6      	b.n	80123fa <wait_for_firmware_start+0x5a>
 801240c:	02532636 	.word	0x02532636
 8012410:	000207ac 	.word	0x000207ac
 8012414:	f3af 8000 	nop.w
 8012418:	f3af 8000 	nop.w
 801241c:	f3af 8000 	nop.w

08012420 <chip_deinit>:

sint8 chip_deinit(void)
{
 8012420:	b500      	push	{lr}
 8012422:	b083      	sub	sp, #12
	uint32 reg = 0;
 8012424:	a902      	add	r1, sp, #8
 8012426:	2300      	movs	r3, #0
 8012428:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 801242c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8012430:	f000 f8be 	bl	80125b0 <nm_read_reg_with_ret>
	if (ret != M2M_SUCCESS) {
 8012434:	4603      	mov	r3, r0
 8012436:	b118      	cbz	r0, 8012440 <chip_deinit+0x20>
		goto ERR1;
	}

ERR1:
	return ret;
}
 8012438:	4618      	mov	r0, r3
 801243a:	b003      	add	sp, #12
 801243c:	f85d fb04 	ldr.w	pc, [sp], #4
	reg &= ~(1 << 10);
 8012440:	9901      	ldr	r1, [sp, #4]
 8012442:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8012446:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 8012448:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801244c:	f000 f8b8 	bl	80125c0 <nm_write_reg>
 8012450:	4603      	mov	r3, r0
ERR1:
 8012452:	e7f1      	b.n	8012438 <chip_deinit+0x18>
 8012454:	f3af 8000 	nop.w
 8012458:	f3af 8000 	nop.w
 801245c:	f3af 8000 	nop.w

08012460 <nmi_get_otp_mac_address>:
	return s8Ret;
}
#endif /* CONF_PERIPH */

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 * pu8IsValid)
{
 8012460:	b570      	push	{r4, r5, r6, lr}
 8012462:	b086      	sub	sp, #24
 8012464:	4606      	mov	r6, r0
 8012466:	460c      	mov	r4, r1
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
 8012468:	2300      	movs	r3, #0
 801246a:	9301      	str	r3, [sp, #4]
 801246c:	9302      	str	r3, [sp, #8]

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
 801246e:	a905      	add	r1, sp, #20
 8012470:	4819      	ldr	r0, [pc, #100]	; (80124d8 <nmi_get_otp_mac_address+0x78>)
 8012472:	f000 f89d 	bl	80125b0 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 8012476:	4605      	mov	r5, r0
 8012478:	b128      	cbz	r0, 8012486 <nmi_get_otp_mac_address+0x26>
	m2m_memcpy(pu8MacAddr,mac,6);
	if(pu8IsValid) *pu8IsValid = 1;
	return ret;

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
 801247a:	b10c      	cbz	r4, 8012480 <nmi_get_otp_mac_address+0x20>
 801247c:	2300      	movs	r3, #0
 801247e:	7023      	strb	r3, [r4, #0]
	return ret;
}
 8012480:	4628      	mov	r0, r5
 8012482:	b006      	add	sp, #24
 8012484:	bd70      	pop	{r4, r5, r6, pc}
	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 8012486:	2208      	movs	r2, #8
 8012488:	a901      	add	r1, sp, #4
 801248a:	9805      	ldr	r0, [sp, #20]
 801248c:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8012490:	f000 f89e 	bl	80125d0 <nm_read_block>
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 8012494:	4605      	mov	r5, r0
 8012496:	2800      	cmp	r0, #0
 8012498:	d1ef      	bne.n	801247a <nmi_get_otp_mac_address+0x1a>
	u32RegValue = strgp.u32Mac_efuse_mib;
 801249a:	9801      	ldr	r0, [sp, #4]
 801249c:	9005      	str	r0, [sp, #20]
	if(!EFUSED_MAC(u32RegValue)) {
 801249e:	0c03      	lsrs	r3, r0, #16
 80124a0:	041b      	lsls	r3, r3, #16
 80124a2:	b92b      	cbnz	r3, 80124b0 <nmi_get_otp_mac_address+0x50>
		m2m_memset(pu8MacAddr, 0, 6);
 80124a4:	2206      	movs	r2, #6
 80124a6:	2100      	movs	r1, #0
 80124a8:	4630      	mov	r0, r6
 80124aa:	f7fd ffd1 	bl	8010450 <m2m_memset>
		goto _EXIT_ERR;
 80124ae:	e7e4      	b.n	801247a <nmi_get_otp_mac_address+0x1a>
	u32RegValue >>=16;
 80124b0:	0c00      	lsrs	r0, r0, #16
 80124b2:	9005      	str	r0, [sp, #20]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
 80124b4:	2206      	movs	r2, #6
 80124b6:	a903      	add	r1, sp, #12
 80124b8:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 80124bc:	f000 f888 	bl	80125d0 <nm_read_block>
 80124c0:	4605      	mov	r5, r0
	m2m_memcpy(pu8MacAddr,mac,6);
 80124c2:	2206      	movs	r2, #6
 80124c4:	a903      	add	r1, sp, #12
 80124c6:	4630      	mov	r0, r6
 80124c8:	f7fd ffa2 	bl	8010410 <m2m_memcpy>
	if(pu8IsValid) *pu8IsValid = 1;
 80124cc:	2c00      	cmp	r4, #0
 80124ce:	d0d7      	beq.n	8012480 <nmi_get_otp_mac_address+0x20>
 80124d0:	2301      	movs	r3, #1
 80124d2:	7023      	strb	r3, [r4, #0]
 80124d4:	e7d4      	b.n	8012480 <nmi_get_otp_mac_address+0x20>
 80124d6:	bf00      	nop
 80124d8:	000c0008 	.word	0x000c0008
 80124dc:	f3af 8000 	nop.w

080124e0 <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
 80124e0:	b530      	push	{r4, r5, lr}
 80124e2:	b087      	sub	sp, #28
 80124e4:	4605      	mov	r5, r0
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
 80124e6:	2300      	movs	r3, #0
 80124e8:	9301      	str	r3, [sp, #4]
 80124ea:	9302      	str	r3, [sp, #8]

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
 80124ec:	a905      	add	r1, sp, #20
 80124ee:	4811      	ldr	r0, [pc, #68]	; (8012534 <nmi_get_mac_address+0x54>)
 80124f0:	f000 f85e 	bl	80125b0 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 80124f4:	4604      	mov	r4, r0
 80124f6:	b110      	cbz	r0, 80124fe <nmi_get_mac_address+0x1e>

	return ret;

_EXIT_ERR:
	return ret;
}
 80124f8:	4620      	mov	r0, r4
 80124fa:	b007      	add	sp, #28
 80124fc:	bd30      	pop	{r4, r5, pc}
	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 80124fe:	2208      	movs	r2, #8
 8012500:	a901      	add	r1, sp, #4
 8012502:	9805      	ldr	r0, [sp, #20]
 8012504:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8012508:	f000 f862 	bl	80125d0 <nm_read_block>
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801250c:	4604      	mov	r4, r0
 801250e:	2800      	cmp	r0, #0
 8012510:	d1f2      	bne.n	80124f8 <nmi_get_mac_address+0x18>
	u32RegValue &=0x0000ffff;
 8012512:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8012516:	9005      	str	r0, [sp, #20]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
 8012518:	2206      	movs	r2, #6
 801251a:	a903      	add	r1, sp, #12
 801251c:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8012520:	f000 f856 	bl	80125d0 <nm_read_block>
 8012524:	4604      	mov	r4, r0
	m2m_memcpy(pu8MacAddr, mac, 6);
 8012526:	2206      	movs	r2, #6
 8012528:	a903      	add	r1, sp, #12
 801252a:	4628      	mov	r0, r5
 801252c:	f7fd ff70 	bl	8010410 <m2m_memcpy>
	return ret;
 8012530:	e7e2      	b.n	80124f8 <nmi_get_mac_address+0x18>
 8012532:	bf00      	nop
 8012534:	000c0008 	.word	0x000c0008
	...

08012540 <p_nm_read_block>:
#error "Plesae define bus usage"
#endif
}

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 8012540:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 8012542:	f000 fe15 	bl	8013170 <nm_spi_read_block>
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 8012546:	bd08      	pop	{r3, pc}
 8012548:	f3af 8000 	nop.w
 801254c:	f3af 8000 	nop.w

08012550 <p_nm_write_block>:

	return s8Ret;
}

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 8012550:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 8012552:	f000 fe1d 	bl	8013190 <nm_spi_write_block>
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 8012556:	bd08      	pop	{r3, pc}
 8012558:	f3af 8000 	nop.w
 801255c:	f3af 8000 	nop.w

08012560 <nm_bus_iface_init>:
{
 8012560:	b508      	push	{r3, lr}
	ret = nm_bus_init(pvInitVal);
 8012562:	f7fd ff2d 	bl	80103c0 <nm_bus_init>
}
 8012566:	bd08      	pop	{r3, pc}
 8012568:	f3af 8000 	nop.w
 801256c:	f3af 8000 	nop.w

08012570 <nm_bus_iface_deinit>:
{
 8012570:	b508      	push	{r3, lr}
	ret = nm_bus_deinit();
 8012572:	f7fd ff3d 	bl	80103f0 <nm_bus_deinit>
}
 8012576:	bd08      	pop	{r3, pc}
 8012578:	f3af 8000 	nop.w
 801257c:	f3af 8000 	nop.w

08012580 <nm_bus_reset>:
{
 8012580:	b508      	push	{r3, lr}
    ret = nm_spi_reset();
 8012582:	f000 fd6d 	bl	8013060 <nm_spi_reset>
}
 8012586:	bd08      	pop	{r3, pc}
 8012588:	f3af 8000 	nop.w
 801258c:	f3af 8000 	nop.w

08012590 <nm_bus_iface_reconfigure>:
}
 8012590:	2000      	movs	r0, #0
 8012592:	4770      	bx	lr
 8012594:	f3af 8000 	nop.w
 8012598:	f3af 8000 	nop.w
 801259c:	f3af 8000 	nop.w

080125a0 <nm_read_reg>:
{
 80125a0:	b508      	push	{r3, lr}
	return nm_spi_read_reg(u32Addr);
 80125a2:	f000 fdb5 	bl	8013110 <nm_spi_read_reg>
}
 80125a6:	bd08      	pop	{r3, pc}
 80125a8:	f3af 8000 	nop.w
 80125ac:	f3af 8000 	nop.w

080125b0 <nm_read_reg_with_ret>:
{
 80125b0:	b508      	push	{r3, lr}
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 80125b2:	f000 fdbd 	bl	8013130 <nm_spi_read_reg_with_ret>
}
 80125b6:	bd08      	pop	{r3, pc}
 80125b8:	f3af 8000 	nop.w
 80125bc:	f3af 8000 	nop.w

080125c0 <nm_write_reg>:
{
 80125c0:	b508      	push	{r3, lr}
	return nm_spi_write_reg(u32Addr,u32Val);
 80125c2:	f000 fdc5 	bl	8013150 <nm_spi_write_reg>
}
 80125c6:	bd08      	pop	{r3, pc}
 80125c8:	f3af 8000 	nop.w
 80125cc:	f3af 8000 	nop.w

080125d0 <nm_read_block>:
{
 80125d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125d4:	4607      	mov	r7, r0
 80125d6:	4688      	mov	r8, r1
 80125d8:	4616      	mov	r6, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 80125da:	4b11      	ldr	r3, [pc, #68]	; (8012620 <nm_read_block+0x50>)
 80125dc:	881d      	ldrh	r5, [r3, #0]
 80125de:	3d08      	subs	r5, #8
 80125e0:	b2ad      	uxth	r5, r5
	sint8 s8Ret = M2M_SUCCESS;
 80125e2:	2400      	movs	r4, #0
	uint32 off = 0;
 80125e4:	46a1      	mov	r9, r4
		if(u32Sz <= u16MaxTrxSz)
 80125e6:	42b5      	cmp	r5, r6
 80125e8:	d20d      	bcs.n	8012606 <nm_read_block+0x36>
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 80125ea:	462a      	mov	r2, r5
 80125ec:	eb08 0109 	add.w	r1, r8, r9
 80125f0:	4638      	mov	r0, r7
 80125f2:	f7ff ffa5 	bl	8012540 <p_nm_read_block>
 80125f6:	fa54 f480 	uxtab	r4, r4, r0
 80125fa:	b264      	sxtb	r4, r4
			if(M2M_SUCCESS != s8Ret) break;
 80125fc:	b964      	cbnz	r4, 8012618 <nm_read_block+0x48>
			u32Sz -= u16MaxTrxSz;
 80125fe:	1b76      	subs	r6, r6, r5
			off += u16MaxTrxSz;
 8012600:	44a9      	add	r9, r5
			u32Addr += u16MaxTrxSz;
 8012602:	442f      	add	r7, r5
		if(u32Sz <= u16MaxTrxSz)
 8012604:	e7ef      	b.n	80125e6 <nm_read_block+0x16>
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 8012606:	b2b2      	uxth	r2, r6
 8012608:	eb08 0109 	add.w	r1, r8, r9
 801260c:	4638      	mov	r0, r7
 801260e:	f7ff ff97 	bl	8012540 <p_nm_read_block>
 8012612:	fa54 f480 	uxtab	r4, r4, r0
 8012616:	b264      	sxtb	r4, r4
}
 8012618:	4620      	mov	r0, r4
 801261a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801261e:	bf00      	nop
 8012620:	20001a24 	.word	0x20001a24
 8012624:	f3af 8000 	nop.w
 8012628:	f3af 8000 	nop.w
 801262c:	f3af 8000 	nop.w

08012630 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 8012630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012634:	4607      	mov	r7, r0
 8012636:	4688      	mov	r8, r1
 8012638:	4616      	mov	r6, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 801263a:	4b11      	ldr	r3, [pc, #68]	; (8012680 <nm_write_block+0x50>)
 801263c:	881d      	ldrh	r5, [r3, #0]
 801263e:	3d08      	subs	r5, #8
 8012640:	b2ad      	uxth	r5, r5
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;
 8012642:	2400      	movs	r4, #0
	uint32 off = 0;
 8012644:	46a1      	mov	r9, r4

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 8012646:	42b5      	cmp	r5, r6
 8012648:	d20d      	bcs.n	8012666 <nm_write_block+0x36>
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 801264a:	462a      	mov	r2, r5
 801264c:	eb08 0109 	add.w	r1, r8, r9
 8012650:	4638      	mov	r0, r7
 8012652:	f7ff ff7d 	bl	8012550 <p_nm_write_block>
 8012656:	fa54 f480 	uxtab	r4, r4, r0
 801265a:	b264      	sxtb	r4, r4
			if(M2M_SUCCESS != s8Ret) break;
 801265c:	b964      	cbnz	r4, 8012678 <nm_write_block+0x48>
			u32Sz -= u16MaxTrxSz;
 801265e:	1b76      	subs	r6, r6, r5
			off += u16MaxTrxSz;
 8012660:	44a9      	add	r9, r5
			u32Addr += u16MaxTrxSz;
 8012662:	442f      	add	r7, r5
		if(u32Sz <= u16MaxTrxSz)
 8012664:	e7ef      	b.n	8012646 <nm_write_block+0x16>
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 8012666:	b2b2      	uxth	r2, r6
 8012668:	eb08 0109 	add.w	r1, r8, r9
 801266c:	4638      	mov	r0, r7
 801266e:	f7ff ff6f 	bl	8012550 <p_nm_write_block>
 8012672:	fa54 f480 	uxtab	r4, r4, r0
 8012676:	b264      	sxtb	r4, r4
		}
	}

	return s8Ret;
}
 8012678:	4620      	mov	r0, r4
 801267a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801267e:	bf00      	nop
 8012680:	20001a24 	.word	0x20001a24
	...

08012690 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
 8012690:	b530      	push	{r4, r5, lr}
 8012692:	b083      	sub	sp, #12
 8012694:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
 8012696:	a902      	add	r1, sp, #8
 8012698:	2300      	movs	r3, #0
 801269a:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
 801269e:	4829      	ldr	r0, [pc, #164]	; (8012744 <nm_get_firmware_info+0xb4>)
 80126a0:	f7ff ff86 	bl	80125b0 <nm_read_reg_with_ret>
 80126a4:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
 80126a6:	9a01      	ldr	r2, [sp, #4]
 80126a8:	4b27      	ldr	r3, [pc, #156]	; (8012748 <nm_get_firmware_info+0xb8>)
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d03f      	beq.n	801272e <nm_get_firmware_info+0x9e>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
 80126ae:	9b01      	ldr	r3, [sp, #4]
 80126b0:	0c1a      	lsrs	r2, r3, #16
 80126b2:	b291      	uxth	r1, r2
 80126b4:	0a08      	lsrs	r0, r1, #8
 80126b6:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
 80126b8:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80126bc:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
 80126be:	f002 020f 	and.w	r2, r2, #15
 80126c2:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
 80126c4:	b29a      	uxth	r2, r3
 80126c6:	0a11      	lsrs	r1, r2, #8
 80126c8:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
 80126ca:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80126ce:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
 80126d0:	f003 030f 	and.w	r3, r3, #15
 80126d4:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
 80126d6:	f7ff fc5b 	bl	8011f90 <nmi_get_chipid>
 80126da:	6020      	str	r0, [r4, #0]
	M2mRev->u16FirmwareSvnNum = 0;
 80126dc:	2300      	movs	r3, #0
 80126de:	8423      	strh	r3, [r4, #32]

	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
 80126e0:	7922      	ldrb	r2, [r4, #4]
 80126e2:	7963      	ldrb	r3, [r4, #5]
 80126e4:	011b      	lsls	r3, r3, #4
 80126e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80126ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80126ee:	b21b      	sxth	r3, r3
 80126f0:	79a2      	ldrb	r2, [r4, #6]
 80126f2:	f002 020f 	and.w	r2, r2, #15
 80126f6:	4313      	orrs	r3, r2
 80126f8:	b29b      	uxth	r3, r3
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
 80126fa:	79e1      	ldrb	r1, [r4, #7]
 80126fc:	7a22      	ldrb	r2, [r4, #8]
 80126fe:	0112      	lsls	r2, r2, #4
 8012700:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8012704:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8012708:	b212      	sxth	r2, r2
 801270a:	7a61      	ldrb	r1, [r4, #9]
 801270c:	f001 010f 	and.w	r1, r1, #15
 8012710:	430a      	orrs	r2, r1
 8012712:	b292      	uxth	r2, r2
	if(curr_drv_ver <  min_req_drv_ver) {
 8012714:	f241 3154 	movw	r1, #4948	; 0x1354
 8012718:	428a      	cmp	r2, r1
 801271a:	d901      	bls.n	8012720 <nm_get_firmware_info+0x90>
		/*The current driver version should be larger or equal
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
 801271c:	f06f 050c 	mvn.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
 8012720:	f241 3253 	movw	r2, #4947	; 0x1353
 8012724:	4293      	cmp	r3, r2
 8012726:	d909      	bls.n	801273c <nm_get_firmware_info+0xac>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
	}
	return ret;
}
 8012728:	4628      	mov	r0, r5
 801272a:	b003      	add	sp, #12
 801272c:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
 801272e:	a901      	add	r1, sp, #4
 8012730:	f241 0048 	movw	r0, #4168	; 0x1048
 8012734:	f7ff ff3c 	bl	80125b0 <nm_read_reg_with_ret>
 8012738:	4605      	mov	r5, r0
 801273a:	e7b8      	b.n	80126ae <nm_get_firmware_info+0x1e>
		ret = M2M_ERR_FW_VER_MISMATCH;
 801273c:	f06f 050c 	mvn.w	r5, #12
 8012740:	e7f2      	b.n	8012728 <nm_get_firmware_info+0x98>
 8012742:	bf00      	nop
 8012744:	000207ac 	.word	0x000207ac
 8012748:	d75dc1c3 	.word	0xd75dc1c3
 801274c:	f3af 8000 	nop.w

08012750 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
 8012750:	b510      	push	{r4, lr}
 8012752:	b084      	sub	sp, #16
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
 8012754:	2300      	movs	r3, #0
 8012756:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
 8012758:	9301      	str	r3, [sp, #4]
 801275a:	9302      	str	r3, [sp, #8]
	if (pstrRev != NULL)
 801275c:	2800      	cmp	r0, #0
 801275e:	d04b      	beq.n	80127f8 <nm_get_firmware_full_info+0xa8>
 8012760:	4604      	mov	r4, r0
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
 8012762:	2228      	movs	r2, #40	; 0x28
 8012764:	4619      	mov	r1, r3
 8012766:	f7fd fe73 	bl	8010450 <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 801276a:	a903      	add	r1, sp, #12
 801276c:	482c      	ldr	r0, [pc, #176]	; (8012820 <nm_get_firmware_full_info+0xd0>)
 801276e:	f7ff ff1f 	bl	80125b0 <nm_read_reg_with_ret>
		if(ret == M2M_SUCCESS)
 8012772:	4603      	mov	r3, r0
 8012774:	2800      	cmp	r0, #0
 8012776:	d140      	bne.n	80127fa <nm_get_firmware_full_info+0xaa>
		{
			if(reg != 0)
 8012778:	9803      	ldr	r0, [sp, #12]
 801277a:	2800      	cmp	r0, #0
 801277c:	d040      	beq.n	8012800 <nm_get_firmware_full_info+0xb0>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 801277e:	2208      	movs	r2, #8
 8012780:	a901      	add	r1, sp, #4
 8012782:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8012786:	f7ff ff23 	bl	80125d0 <nm_read_block>
				if(ret == M2M_SUCCESS)
 801278a:	4603      	mov	r3, r0
 801278c:	2800      	cmp	r0, #0
 801278e:	d134      	bne.n	80127fa <nm_get_firmware_full_info+0xaa>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
 8012790:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8012794:	9003      	str	r0, [sp, #12]
					if(reg != 0)
 8012796:	2800      	cmp	r0, #0
 8012798:	d035      	beq.n	8012806 <nm_get_firmware_full_info+0xb6>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 801279a:	2228      	movs	r2, #40	; 0x28
 801279c:	4621      	mov	r1, r4
 801279e:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 80127a2:	f7ff ff15 	bl	80125d0 <nm_read_block>
						if(ret == M2M_SUCCESS)
 80127a6:	4603      	mov	r3, r0
 80127a8:	bb38      	cbnz	r0, 80127fa <nm_get_firmware_full_info+0xaa>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 80127aa:	7921      	ldrb	r1, [r4, #4]
 80127ac:	7962      	ldrb	r2, [r4, #5]
 80127ae:	0112      	lsls	r2, r2, #4
 80127b0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80127b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80127b8:	b212      	sxth	r2, r2
 80127ba:	79a1      	ldrb	r1, [r4, #6]
 80127bc:	f001 010f 	and.w	r1, r1, #15
 80127c0:	430a      	orrs	r2, r1
 80127c2:	b292      	uxth	r2, r2
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 80127c4:	79e0      	ldrb	r0, [r4, #7]
 80127c6:	7a21      	ldrb	r1, [r4, #8]
 80127c8:	0109      	lsls	r1, r1, #4
 80127ca:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80127ce:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80127d2:	b209      	sxth	r1, r1
 80127d4:	7a60      	ldrb	r0, [r4, #9]
 80127d6:	f000 000f 	and.w	r0, r0, #15
 80127da:	4301      	orrs	r1, r0
 80127dc:	b289      	uxth	r1, r1
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 80127de:	b1aa      	cbz	r2, 801280c <nm_get_firmware_full_info+0xbc>
 80127e0:	b1b9      	cbz	r1, 8012812 <nm_get_firmware_full_info+0xc2>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
 80127e2:	f241 3054 	movw	r0, #4948	; 0x1354
 80127e6:	4281      	cmp	r1, r0
 80127e8:	d816      	bhi.n	8012818 <nm_get_firmware_full_info+0xc8>
								/*The current driver version should be larger or equal
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
 80127ea:	f241 3153 	movw	r1, #4947	; 0x1353
 80127ee:	428a      	cmp	r2, r1
 80127f0:	d803      	bhi.n	80127fa <nm_get_firmware_full_info+0xaa>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
 80127f2:	f06f 030c 	mvn.w	r3, #12
 80127f6:	e000      	b.n	80127fa <nm_get_firmware_full_info+0xaa>
	sint8	ret = M2M_SUCCESS;
 80127f8:	2300      	movs	r3, #0
			}
		}
	}
EXIT:
	return ret;
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	b004      	add	sp, #16
 80127fe:	bd10      	pop	{r4, pc}
				ret = M2M_ERR_FAIL;
 8012800:	f06f 030b 	mvn.w	r3, #11
 8012804:	e7f9      	b.n	80127fa <nm_get_firmware_full_info+0xaa>
						ret = M2M_ERR_FAIL;
 8012806:	f06f 030b 	mvn.w	r3, #11
 801280a:	e7f6      	b.n	80127fa <nm_get_firmware_full_info+0xaa>
								ret = M2M_ERR_FAIL;
 801280c:	f06f 030b 	mvn.w	r3, #11
 8012810:	e7f3      	b.n	80127fa <nm_get_firmware_full_info+0xaa>
 8012812:	f06f 030b 	mvn.w	r3, #11
 8012816:	e7f0      	b.n	80127fa <nm_get_firmware_full_info+0xaa>
								ret = M2M_ERR_FW_VER_MISMATCH;
 8012818:	f06f 030c 	mvn.w	r3, #12
 801281c:	e7ed      	b.n	80127fa <nm_get_firmware_full_info+0xaa>
 801281e:	bf00      	nop
 8012820:	000c0008 	.word	0x000c0008
 8012824:	f3af 8000 	nop.w
 8012828:	f3af 8000 	nop.w
 801282c:	f3af 8000 	nop.w

08012830 <nm_get_ota_firmware_info>:
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters

*	@version	1.0
*/
sint8 nm_get_ota_firmware_info(tstrM2mRev* pstrRev)
{
 8012830:	b510      	push	{r4, lr}
 8012832:	b084      	sub	sp, #16
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
 8012834:	2300      	movs	r3, #0
 8012836:	9303      	str	r3, [sp, #12]
	sint8	ret;
	tstrGpRegs strgp = {0};
 8012838:	9301      	str	r3, [sp, #4]
 801283a:	9302      	str	r3, [sp, #8]

	if (pstrRev != NULL)
 801283c:	2800      	cmp	r0, #0
 801283e:	d04c      	beq.n	80128da <nm_get_ota_firmware_info+0xaa>
 8012840:	4604      	mov	r4, r0
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
 8012842:	2228      	movs	r2, #40	; 0x28
 8012844:	4619      	mov	r1, r3
 8012846:	f7fd fe03 	bl	8010450 <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 801284a:	a903      	add	r1, sp, #12
 801284c:	482c      	ldr	r0, [pc, #176]	; (8012900 <nm_get_ota_firmware_info+0xd0>)
 801284e:	f7ff feaf 	bl	80125b0 <nm_read_reg_with_ret>
		if(ret == M2M_SUCCESS)
 8012852:	4603      	mov	r3, r0
 8012854:	2800      	cmp	r0, #0
 8012856:	d13d      	bne.n	80128d4 <nm_get_ota_firmware_info+0xa4>
		{
			if(reg != 0)
 8012858:	9803      	ldr	r0, [sp, #12]
 801285a:	2800      	cmp	r0, #0
 801285c:	d040      	beq.n	80128e0 <nm_get_ota_firmware_info+0xb0>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 801285e:	2208      	movs	r2, #8
 8012860:	a901      	add	r1, sp, #4
 8012862:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8012866:	f7ff feb3 	bl	80125d0 <nm_read_block>
				if(ret == M2M_SUCCESS)
 801286a:	4603      	mov	r3, r0
 801286c:	bb90      	cbnz	r0, 80128d4 <nm_get_ota_firmware_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg >>= 16;
 801286e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8012872:	9003      	str	r0, [sp, #12]
					if(reg != 0)
 8012874:	2800      	cmp	r0, #0
 8012876:	d036      	beq.n	80128e6 <nm_get_ota_firmware_info+0xb6>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 8012878:	2228      	movs	r2, #40	; 0x28
 801287a:	4621      	mov	r1, r4
 801287c:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8012880:	f7ff fea6 	bl	80125d0 <nm_read_block>
						if(ret == M2M_SUCCESS)
 8012884:	4603      	mov	r3, r0
 8012886:	bb28      	cbnz	r0, 80128d4 <nm_get_ota_firmware_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 8012888:	7921      	ldrb	r1, [r4, #4]
 801288a:	7962      	ldrb	r2, [r4, #5]
 801288c:	0112      	lsls	r2, r2, #4
 801288e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8012892:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8012896:	b212      	sxth	r2, r2
 8012898:	79a1      	ldrb	r1, [r4, #6]
 801289a:	f001 010f 	and.w	r1, r1, #15
 801289e:	430a      	orrs	r2, r1
 80128a0:	b292      	uxth	r2, r2
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 80128a2:	79e0      	ldrb	r0, [r4, #7]
 80128a4:	7a21      	ldrb	r1, [r4, #8]
 80128a6:	0109      	lsls	r1, r1, #4
 80128a8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80128ac:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80128b0:	b209      	sxth	r1, r1
 80128b2:	7a60      	ldrb	r0, [r4, #9]
 80128b4:	f000 000f 	and.w	r0, r0, #15
 80128b8:	4301      	orrs	r1, r0
 80128ba:	b289      	uxth	r1, r1
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 80128bc:	b1b2      	cbz	r2, 80128ec <nm_get_ota_firmware_info+0xbc>
 80128be:	b1c1      	cbz	r1, 80128f2 <nm_get_ota_firmware_info+0xc2>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
 80128c0:	f241 3054 	movw	r0, #4948	; 0x1354
 80128c4:	4281      	cmp	r1, r0
 80128c6:	d901      	bls.n	80128cc <nm_get_ota_firmware_info+0x9c>
								/*The current driver version should be larger or equal
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
 80128c8:	f06f 030c 	mvn.w	r3, #12
							}
							if(curr_drv_ver >  curr_firm_ver) {
 80128cc:	f241 3153 	movw	r1, #4947	; 0x1353
 80128d0:	428a      	cmp	r2, r1
 80128d2:	d911      	bls.n	80128f8 <nm_get_ota_firmware_info+0xc8>
	} else {
		ret = M2M_ERR_INVALID_ARG;
	}
EXIT:
	return ret;
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	b004      	add	sp, #16
 80128d8:	bd10      	pop	{r4, pc}
		ret = M2M_ERR_INVALID_ARG;
 80128da:	f06f 030e 	mvn.w	r3, #14
 80128de:	e7f9      	b.n	80128d4 <nm_get_ota_firmware_info+0xa4>
				ret = M2M_ERR_FAIL;
 80128e0:	f06f 030b 	mvn.w	r3, #11
 80128e4:	e7f6      	b.n	80128d4 <nm_get_ota_firmware_info+0xa4>
						ret = M2M_ERR_INVALID;
 80128e6:	f06f 030f 	mvn.w	r3, #15
 80128ea:	e7f3      	b.n	80128d4 <nm_get_ota_firmware_info+0xa4>
								ret = M2M_ERR_FAIL;
 80128ec:	f06f 030b 	mvn.w	r3, #11
 80128f0:	e7f0      	b.n	80128d4 <nm_get_ota_firmware_info+0xa4>
 80128f2:	f06f 030b 	mvn.w	r3, #11
 80128f6:	e7ed      	b.n	80128d4 <nm_get_ota_firmware_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
 80128f8:	f06f 030c 	mvn.w	r3, #12
 80128fc:	e7ea      	b.n	80128d4 <nm_get_ota_firmware_info+0xa4>
 80128fe:	bf00      	nop
 8012900:	000c0008 	.word	0x000c0008
 8012904:	f3af 8000 	nop.w
 8012908:	f3af 8000 	nop.w
 801290c:	f3af 8000 	nop.w

08012910 <nm_drv_init_download_mode>:
*	@author	Viswanathan Murugesan
*	@date	10 Oct 2014
*	@version	1.0
*/
sint8 nm_drv_init_download_mode()
{
 8012910:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	ret = nm_bus_iface_init(NULL);
 8012912:	2000      	movs	r0, #0
 8012914:	f7ff fe24 	bl	8012560 <nm_bus_iface_init>
	if (M2M_SUCCESS != ret) {
 8012918:	4604      	mov	r4, r0
 801291a:	b108      	cbz	r0, 8012920 <nm_drv_init_download_mode+0x10>
	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300,0);

ERR1:
	return ret;
}
 801291c:	4620      	mov	r0, r4
 801291e:	bd10      	pop	{r4, pc}
	if(!ISNMC3000(GET_CHIPID()))
 8012920:	f7ff fb36 	bl	8011f90 <nmi_get_chipid>
 8012924:	0d00      	lsrs	r0, r0, #20
 8012926:	0500      	lsls	r0, r0, #20
 8012928:	f5b0 1f40 	cmp.w	r0, #3145728	; 0x300000
 801292c:	d106      	bne.n	801293c <nm_drv_init_download_mode+0x2c>
	nm_spi_init();
 801292e:	f000 fba7 	bl	8013080 <nm_spi_init>
	nm_write_reg(0x20300,0);
 8012932:	2100      	movs	r1, #0
 8012934:	4803      	ldr	r0, [pc, #12]	; (8012944 <nm_drv_init_download_mode+0x34>)
 8012936:	f7ff fe43 	bl	80125c0 <nm_write_reg>
 801293a:	e7ef      	b.n	801291c <nm_drv_init_download_mode+0xc>
		chip_reset_and_cpu_halt();
 801293c:	f7ff fca8 	bl	8012290 <chip_reset_and_cpu_halt>
 8012940:	e7f5      	b.n	801292e <nm_drv_init_download_mode+0x1e>
 8012942:	bf00      	nop
 8012944:	00020300 	.word	0x00020300
 8012948:	f3af 8000 	nop.w
 801294c:	f3af 8000 	nop.w

08012950 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
 8012950:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;

	if(NULL != arg) {
 8012952:	b158      	cbz	r0, 801296c <nm_drv_init+0x1c>
		u8Mode = *((uint8 *)arg);
 8012954:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
 8012956:	1e63      	subs	r3, r4, #1
 8012958:	b2db      	uxtb	r3, r3
 801295a:	2b03      	cmp	r3, #3
 801295c:	d808      	bhi.n	8012970 <nm_drv_init+0x20>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}

	ret = nm_bus_iface_init(NULL);
 801295e:	2000      	movs	r0, #0
 8012960:	f7ff fdfe 	bl	8012560 <nm_bus_iface_init>
	if (M2M_SUCCESS != ret) {
 8012964:	4605      	mov	r5, r0
 8012966:	b128      	cbz	r0, 8012974 <nm_drv_init+0x24>
	return ret;
ERR2:
	nm_bus_iface_deinit();
ERR1:
	return ret;
}
 8012968:	4628      	mov	r0, r5
 801296a:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
 801296c:	2401      	movs	r4, #1
 801296e:	e7f6      	b.n	801295e <nm_drv_init+0xe>
			u8Mode = M2M_WIFI_MODE_NORMAL;
 8012970:	2401      	movs	r4, #1
 8012972:	e7f4      	b.n	801295e <nm_drv_init+0xe>
	myPrintf("Chip ID %lx\n", nmi_get_chipid());
 8012974:	f7ff fb0c 	bl	8011f90 <nmi_get_chipid>
 8012978:	4601      	mov	r1, r0
 801297a:	480d      	ldr	r0, [pc, #52]	; (80129b0 <nm_drv_init+0x60>)
 801297c:	f7f9 fad0 	bl	800bf20 <myPrintf>
	nm_spi_init();
 8012980:	f000 fb7e 	bl	8013080 <nm_spi_init>
	ret = wait_for_bootrom(u8Mode);
 8012984:	4620      	mov	r0, r4
 8012986:	f7ff fc93 	bl	80122b0 <wait_for_bootrom>
	if (M2M_SUCCESS != ret) {
 801298a:	4605      	mov	r5, r0
 801298c:	b968      	cbnz	r0, 80129aa <nm_drv_init+0x5a>
	ret = wait_for_firmware_start(u8Mode);
 801298e:	4620      	mov	r0, r4
 8012990:	f7ff fd06 	bl	80123a0 <wait_for_firmware_start>
	if (M2M_SUCCESS != ret) {
 8012994:	4605      	mov	r5, r0
 8012996:	b940      	cbnz	r0, 80129aa <nm_drv_init+0x5a>
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
 8012998:	3c02      	subs	r4, #2
 801299a:	b2e4      	uxtb	r4, r4
 801299c:	2c01      	cmp	r4, #1
 801299e:	d9e3      	bls.n	8012968 <nm_drv_init+0x18>
	ret = enable_interrupts();
 80129a0:	f7ff fa66 	bl	8011e70 <enable_interrupts>
	if (M2M_SUCCESS != ret) {
 80129a4:	4605      	mov	r5, r0
 80129a6:	2800      	cmp	r0, #0
 80129a8:	d0de      	beq.n	8012968 <nm_drv_init+0x18>
	nm_bus_iface_deinit();
 80129aa:	f7ff fde1 	bl	8012570 <nm_bus_iface_deinit>
 80129ae:	e7db      	b.n	8012968 <nm_drv_init+0x18>
 80129b0:	0801a9b0 	.word	0x0801a9b0
 80129b4:	f3af 8000 	nop.w
 80129b8:	f3af 8000 	nop.w
 80129bc:	f3af 8000 	nop.w

080129c0 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
 80129c0:	b510      	push	{r4, lr}
  (void)arg;
	sint8 ret;

	ret = chip_deinit();
 80129c2:	f7ff fd2d 	bl	8012420 <chip_deinit>
	if (M2M_SUCCESS != ret) {
 80129c6:	4604      	mov	r4, r0
 80129c8:	b108      	cbz	r0, 80129ce <nm_drv_deinit+0xe>
	nm_spi_deinit();
#endif

ERR1:
	return ret;
}
 80129ca:	4620      	mov	r0, r4
 80129cc:	bd10      	pop	{r4, pc}
	ret = spi_flash_enable(0);
 80129ce:	f001 fd2f 	bl	8014430 <spi_flash_enable>
	if (M2M_SUCCESS != ret) {
 80129d2:	4604      	mov	r4, r0
 80129d4:	2800      	cmp	r0, #0
 80129d6:	d1f8      	bne.n	80129ca <nm_drv_deinit+0xa>
	ret = nm_bus_iface_deinit();
 80129d8:	f7ff fdca 	bl	8012570 <nm_bus_iface_deinit>
	if (M2M_SUCCESS != ret) {
 80129dc:	4604      	mov	r4, r0
 80129de:	2800      	cmp	r0, #0
 80129e0:	d1f3      	bne.n	80129ca <nm_drv_deinit+0xa>
	nm_spi_deinit();
 80129e2:	f000 fb8d 	bl	8013100 <nm_spi_deinit>
 80129e6:	e7f0      	b.n	80129ca <nm_drv_deinit+0xa>
	...

080129f0 <crc7_byte>:
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
 80129f0:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
}
 80129f4:	4b01      	ldr	r3, [pc, #4]	; (80129fc <crc7_byte+0xc>)
 80129f6:	5c58      	ldrb	r0, [r3, r1]
 80129f8:	4770      	bx	lr
 80129fa:	bf00      	nop
 80129fc:	0801a2dc 	.word	0x0801a2dc

08012a00 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 8012a00:	b538      	push	{r3, r4, r5, lr}
	while (len--)
 8012a02:	e005      	b.n	8012a10 <crc7+0x10>
		crc = crc7_byte(crc, *buffer++);
 8012a04:	1c4d      	adds	r5, r1, #1
 8012a06:	7809      	ldrb	r1, [r1, #0]
 8012a08:	f7ff fff2 	bl	80129f0 <crc7_byte>
	while (len--)
 8012a0c:	4622      	mov	r2, r4
		crc = crc7_byte(crc, *buffer++);
 8012a0e:	4629      	mov	r1, r5
	while (len--)
 8012a10:	1e54      	subs	r4, r2, #1
 8012a12:	2a00      	cmp	r2, #0
 8012a14:	d1f6      	bne.n	8012a04 <crc7+0x4>
	return crc;
}
 8012a16:	bd38      	pop	{r3, r4, r5, pc}
 8012a18:	f3af 8000 	nop.w
 8012a1c:	f3af 8000 	nop.w

08012a20 <nmi_spi_write>:
{
 8012a20:	b500      	push	{lr}
 8012a22:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
 8012a24:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
 8012a26:	2300      	movs	r3, #0
 8012a28:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
 8012a2a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8012a2e:	a901      	add	r1, sp, #4
 8012a30:	2003      	movs	r0, #3
 8012a32:	f7fd fccd 	bl	80103d0 <nm_bus_ioctl>
}
 8012a36:	b005      	add	sp, #20
 8012a38:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a3c:	f3af 8000 	nop.w

08012a40 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 8012a40:	b530      	push	{r4, r5, lr}
 8012a42:	b085      	sub	sp, #20
 8012a44:	f89d 4020 	ldrb.w	r4, [sp, #32]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
 8012a48:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
 8012a4c:	38c1      	subs	r0, #193	; 0xc1
 8012a4e:	280e      	cmp	r0, #14
 8012a50:	f200 80ba 	bhi.w	8012bc8 <spi_cmd+0x188>
 8012a54:	e8df f000 	tbb	[pc, r0]
 8012a58:	2d805858 	.word	0x2d805858
 8012a5c:	6a6a463d 	.word	0x6a6a463d
 8012a60:	b8b8089a 	.word	0xb8b8089a
 8012a64:	b8b8      	.short	0xb8b8
 8012a66:	4f          	.byte	0x4f
 8012a67:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 8012a68:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8012a6c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
 8012a70:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012a74:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
 8012a78:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
 8012a7c:	2405      	movs	r4, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
 8012a7e:	4b53      	ldr	r3, [pc, #332]	; (8012bcc <spi_cmd+0x18c>)
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	f040 809b 	bne.w	8012bbe <spi_cmd+0x17e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 8012a88:	1e65      	subs	r5, r4, #1
 8012a8a:	462a      	mov	r2, r5
 8012a8c:	a901      	add	r1, sp, #4
 8012a8e:	207f      	movs	r0, #127	; 0x7f
 8012a90:	f7ff ffb6 	bl	8012a00 <crc7>
 8012a94:	0040      	lsls	r0, r0, #1
 8012a96:	ab04      	add	r3, sp, #16
 8012a98:	441d      	add	r5, r3
 8012a9a:	f805 0c0c 	strb.w	r0, [r5, #-12]
		else
			len-=1;

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 8012a9e:	4621      	mov	r1, r4
 8012aa0:	a801      	add	r0, sp, #4
 8012aa2:	f7ff ffbd 	bl	8012a20 <nmi_spi_write>
 8012aa6:	2800      	cmp	r0, #0
 8012aa8:	f000 808c 	beq.w	8012bc4 <spi_cmd+0x184>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
 8012aac:	2000      	movs	r0, #0
		}
	}

	return result;
}
 8012aae:	b005      	add	sp, #20
 8012ab0:	bd30      	pop	{r4, r5, pc}
		bc[1] = (uint8)(adr >> 8);
 8012ab2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012ab6:	f88d 3005 	strb.w	r3, [sp, #5]
		if(clockless)  bc[1] |= (1 << 7);
 8012aba:	b11c      	cbz	r4, 8012ac4 <spi_cmd+0x84>
 8012abc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012ac0:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
 8012ac4:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
 8012ace:	2405      	movs	r4, #5
 8012ad0:	e7d5      	b.n	8012a7e <spi_cmd+0x3e>
		bc[1] = 0x00;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
 8012ad8:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
 8012adc:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
 8012ae0:	2405      	movs	r4, #5
 8012ae2:	e7cc      	b.n	8012a7e <spi_cmd+0x3e>
		bc[1] = 0x00;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
 8012aea:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
 8012aee:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
 8012af2:	2405      	movs	r4, #5
 8012af4:	e7c3      	b.n	8012a7e <spi_cmd+0x3e>
		bc[1] = 0xff;
 8012af6:	23ff      	movs	r3, #255	; 0xff
 8012af8:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
 8012afc:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
 8012b00:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
 8012b04:	2405      	movs	r4, #5
 8012b06:	e7ba      	b.n	8012a7e <spi_cmd+0x3e>
		bc[1] = (uint8)(adr >> 16);
 8012b08:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8012b0c:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
 8012b10:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8012b14:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
 8012b18:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
 8012b1c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012b20:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
 8012b24:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
 8012b28:	2407      	movs	r4, #7
 8012b2a:	e7a8      	b.n	8012a7e <spi_cmd+0x3e>
		bc[1] = (uint8)(adr >> 16);
 8012b2c:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8012b30:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
 8012b34:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8012b38:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
 8012b3c:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
 8012b40:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012b44:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
 8012b48:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012b4c:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
 8012b50:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
 8012b54:	2408      	movs	r4, #8
 8012b56:	e792      	b.n	8012a7e <spi_cmd+0x3e>
		bc[1] = (uint8)(adr >> 8);
 8012b58:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012b5c:	f88d 3005 	strb.w	r3, [sp, #5]
		if(clockless)  bc[1] |= (1 << 7);
 8012b60:	b11c      	cbz	r4, 8012b6a <spi_cmd+0x12a>
 8012b62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012b66:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
 8012b6a:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
 8012b6e:	0e13      	lsrs	r3, r2, #24
 8012b70:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
 8012b74:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8012b78:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
 8012b7c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8012b80:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
 8012b84:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
 8012b88:	2408      	movs	r4, #8
 8012b8a:	e778      	b.n	8012a7e <spi_cmd+0x3e>
		bc[1] = (uint8)(adr >> 16);
 8012b8c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8012b90:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
 8012b94:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012b98:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
 8012b9c:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
 8012ba0:	0e13      	lsrs	r3, r2, #24
 8012ba2:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
 8012ba6:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8012baa:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
 8012bae:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8012bb2:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
 8012bb6:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
 8012bba:	2409      	movs	r4, #9
 8012bbc:	e75f      	b.n	8012a7e <spi_cmd+0x3e>
			len-=1;
 8012bbe:	3c01      	subs	r4, #1
 8012bc0:	b2e4      	uxtb	r4, r4
 8012bc2:	e76c      	b.n	8012a9e <spi_cmd+0x5e>
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 8012bc4:	2001      	movs	r0, #1
 8012bc6:	e772      	b.n	8012aae <spi_cmd+0x6e>
		result = N_FAIL;
 8012bc8:	2000      	movs	r0, #0
 8012bca:	e770      	b.n	8012aae <spi_cmd+0x6e>
 8012bcc:	20002418 	.word	0x20002418

08012bd0 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 8012bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bd4:	b083      	sub	sp, #12
 8012bd6:	4607      	mov	r7, r0
 8012bd8:	460e      	mov	r6, r1
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
 8012bda:	2400      	movs	r4, #0
 8012bdc:	f8ad 4004 	strh.w	r4, [sp, #4]
 8012be0:	e01d      	b.n	8012c1e <spi_data_write+0x4e>
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
			nbytes = sz;
 8012be2:	4635      	mov	r5, r6
 8012be4:	e020      	b.n	8012c28 <spi_data_write+0x58>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
		} else {
			if (sz <= DATA_PKT_SZ)
 8012be6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8012bea:	d826      	bhi.n	8012c3a <spi_data_write+0x6a>
				order = 0x3;
 8012bec:	2303      	movs	r3, #3
			else
				order = 0x2;
		}
		cmd |= order;
 8012bee:	f063 030f 	orn	r3, r3, #15
 8012bf2:	a802      	add	r0, sp, #8
 8012bf4:	f800 3d01 	strb.w	r3, [r0, #-1]!
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 8012bf8:	2101      	movs	r1, #1
 8012bfa:	f7ff ff11 	bl	8012a20 <nmi_spi_write>
 8012bfe:	4680      	mov	r8, r0
 8012c00:	bb40      	cbnz	r0, 8012c54 <spi_data_write+0x84>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 8012c02:	4629      	mov	r1, r5
 8012c04:	1938      	adds	r0, r7, r4
 8012c06:	f7ff ff0b 	bl	8012a20 <nmi_spi_write>
 8012c0a:	4681      	mov	r9, r0
 8012c0c:	bb20      	cbnz	r0, 8012c58 <spi_data_write+0x88>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 8012c0e:	4b14      	ldr	r3, [pc, #80]	; (8012c60 <spi_data_write+0x90>)
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	b1a3      	cbz	r3, 8012c3e <spi_data_write+0x6e>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
 8012c14:	442c      	add	r4, r5
 8012c16:	b224      	sxth	r4, r4
		sz -= nbytes;
 8012c18:	1b75      	subs	r5, r6, r5
 8012c1a:	b2ae      	uxth	r6, r5
	} while (sz);
 8012c1c:	b1be      	cbz	r6, 8012c4e <spi_data_write+0x7e>
		if (sz <= DATA_PKT_SZ)
 8012c1e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8012c22:	d9de      	bls.n	8012be2 <spi_data_write+0x12>
			nbytes = DATA_PKT_SZ;
 8012c24:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		if (ix == 0)  {
 8012c28:	2c00      	cmp	r4, #0
 8012c2a:	d1dc      	bne.n	8012be6 <spi_data_write+0x16>
			if (sz <= DATA_PKT_SZ)
 8012c2c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8012c30:	d801      	bhi.n	8012c36 <spi_data_write+0x66>
				order = 0x3;
 8012c32:	2303      	movs	r3, #3
 8012c34:	e7db      	b.n	8012bee <spi_data_write+0x1e>
				order = 0x1;
 8012c36:	2301      	movs	r3, #1
 8012c38:	e7d9      	b.n	8012bee <spi_data_write+0x1e>
				order = 0x2;
 8012c3a:	2302      	movs	r3, #2
 8012c3c:	e7d7      	b.n	8012bee <spi_data_write+0x1e>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 8012c3e:	2102      	movs	r1, #2
 8012c40:	a801      	add	r0, sp, #4
 8012c42:	f7ff feed 	bl	8012a20 <nmi_spi_write>
 8012c46:	2800      	cmp	r0, #0
 8012c48:	d0e4      	beq.n	8012c14 <spi_data_write+0x44>
				result = N_FAIL;
 8012c4a:	46c8      	mov	r8, r9
 8012c4c:	e004      	b.n	8012c58 <spi_data_write+0x88>
	sint8 result = 1;
 8012c4e:	f04f 0801 	mov.w	r8, #1
 8012c52:	e001      	b.n	8012c58 <spi_data_write+0x88>
			result = N_FAIL;
 8012c54:	f04f 0800 	mov.w	r8, #0


	return result;
}
 8012c58:	4640      	mov	r0, r8
 8012c5a:	b003      	add	sp, #12
 8012c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c60:	20002418 	.word	0x20002418
 8012c64:	f3af 8000 	nop.w
 8012c68:	f3af 8000 	nop.w
 8012c6c:	f3af 8000 	nop.w

08012c70 <nmi_spi_read>:
{
 8012c70:	b500      	push	{lr}
 8012c72:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
 8012c74:	2300      	movs	r3, #0
 8012c76:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
 8012c78:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
 8012c7a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8012c7e:	a901      	add	r1, sp, #4
 8012c80:	2003      	movs	r0, #3
 8012c82:	f7fd fba5 	bl	80103d0 <nm_bus_ioctl>
}
 8012c86:	b005      	add	sp, #20
 8012c88:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c8c:	f3af 8000 	nop.w

08012c90 <spi_cmd_rsp>:
{
 8012c90:	b570      	push	{r4, r5, r6, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	4606      	mov	r6, r0
	if ((cmd == CMD_RESET) ||
 8012c96:	28cf      	cmp	r0, #207	; 0xcf
 8012c98:	d003      	beq.n	8012ca2 <spi_cmd_rsp+0x12>
 8012c9a:	28c5      	cmp	r0, #197	; 0xc5
 8012c9c:	d001      	beq.n	8012ca2 <spi_cmd_rsp+0x12>
		 (cmd == CMD_TERMINATE) ||
 8012c9e:	28c6      	cmp	r0, #198	; 0xc6
 8012ca0:	d105      	bne.n	8012cae <spi_cmd_rsp+0x1e>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8012ca2:	2101      	movs	r1, #1
 8012ca4:	f10d 0007 	add.w	r0, sp, #7
 8012ca8:	f7ff ffe2 	bl	8012c70 <nmi_spi_read>
 8012cac:	bb28      	cbnz	r0, 8012cfa <spi_cmd_rsp+0x6a>
{
 8012cae:	240a      	movs	r4, #10
 8012cb0:	e000      	b.n	8012cb4 <spi_cmd_rsp+0x24>
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 8012cb2:	461c      	mov	r4, r3
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8012cb4:	2101      	movs	r1, #1
 8012cb6:	f10d 0007 	add.w	r0, sp, #7
 8012cba:	f7ff ffd9 	bl	8012c70 <nmi_spi_read>
 8012cbe:	4605      	mov	r5, r0
 8012cc0:	b9f8      	cbnz	r0, 8012d02 <spi_cmd_rsp+0x72>
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 8012cc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012cc6:	42b3      	cmp	r3, r6
 8012cc8:	d005      	beq.n	8012cd6 <spi_cmd_rsp+0x46>
 8012cca:	1e63      	subs	r3, r4, #1
 8012ccc:	b25b      	sxtb	r3, r3
 8012cce:	2c00      	cmp	r4, #0
 8012cd0:	dcef      	bgt.n	8012cb2 <spi_cmd_rsp+0x22>
 8012cd2:	240a      	movs	r4, #10
 8012cd4:	e002      	b.n	8012cdc <spi_cmd_rsp+0x4c>
 8012cd6:	240a      	movs	r4, #10
 8012cd8:	e000      	b.n	8012cdc <spi_cmd_rsp+0x4c>
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 8012cda:	461c      	mov	r4, r3
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8012cdc:	2101      	movs	r1, #1
 8012cde:	f10d 0007 	add.w	r0, sp, #7
 8012ce2:	f7ff ffc5 	bl	8012c70 <nmi_spi_read>
 8012ce6:	b948      	cbnz	r0, 8012cfc <spi_cmd_rsp+0x6c>
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 8012ce8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012cec:	b15b      	cbz	r3, 8012d06 <spi_cmd_rsp+0x76>
 8012cee:	1e63      	subs	r3, r4, #1
 8012cf0:	b25b      	sxtb	r3, r3
 8012cf2:	2c00      	cmp	r4, #0
 8012cf4:	dcf1      	bgt.n	8012cda <spi_cmd_rsp+0x4a>
	sint8 result = N_OK;
 8012cf6:	2501      	movs	r5, #1
_fail_:
 8012cf8:	e000      	b.n	8012cfc <spi_cmd_rsp+0x6c>
			result = N_FAIL;
 8012cfa:	2500      	movs	r5, #0
}
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	b002      	add	sp, #8
 8012d00:	bd70      	pop	{r4, r5, r6, pc}
			result = N_FAIL;
 8012d02:	2500      	movs	r5, #0
 8012d04:	e7fa      	b.n	8012cfc <spi_cmd_rsp+0x6c>
	sint8 result = N_OK;
 8012d06:	2501      	movs	r5, #1
 8012d08:	e7f8      	b.n	8012cfc <spi_cmd_rsp+0x6c>
 8012d0a:	bf00      	nop
 8012d0c:	f3af 8000 	nop.w

08012d10 <spi_data_read>:
{
 8012d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d14:	b082      	sub	sp, #8
 8012d16:	4681      	mov	r9, r0
 8012d18:	460f      	mov	r7, r1
 8012d1a:	4692      	mov	sl, r2
	sint8 result = N_OK;
 8012d1c:	f04f 0801 	mov.w	r8, #1
	ix = 0;
 8012d20:	2600      	movs	r6, #0
 8012d22:	e02b      	b.n	8012d7c <spi_data_read+0x6c>
			nbytes = DATA_PKT_SZ;
 8012d24:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8012d28:	e02c      	b.n	8012d84 <spi_data_read+0x74>
		} while (retry--);
 8012d2a:	461c      	mov	r4, r3
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8012d2c:	2101      	movs	r1, #1
 8012d2e:	f10d 0003 	add.w	r0, sp, #3
 8012d32:	f7ff ff9d 	bl	8012c70 <nmi_spi_read>
 8012d36:	bb38      	cbnz	r0, 8012d88 <spi_data_read+0x78>
			if (((rsp >> 4) & 0xf) == 0xf)
 8012d38:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012d3c:	091b      	lsrs	r3, r3, #4
 8012d3e:	2b0f      	cmp	r3, #15
 8012d40:	d004      	beq.n	8012d4c <spi_data_read+0x3c>
		} while (retry--);
 8012d42:	1e63      	subs	r3, r4, #1
 8012d44:	b21b      	sxth	r3, r3
 8012d46:	2c00      	cmp	r4, #0
 8012d48:	d1ef      	bne.n	8012d2a <spi_data_read+0x1a>
 8012d4a:	461c      	mov	r4, r3
		if (result == N_FAIL)
 8012d4c:	f1b8 0f00 	cmp.w	r8, #0
 8012d50:	d027      	beq.n	8012da2 <spi_data_read+0x92>
		if (retry <= 0) {
 8012d52:	2c00      	cmp	r4, #0
 8012d54:	dd23      	ble.n	8012d9e <spi_data_read+0x8e>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 8012d56:	b2ad      	uxth	r5, r5
 8012d58:	4629      	mov	r1, r5
 8012d5a:	eb09 0006 	add.w	r0, r9, r6
 8012d5e:	f7ff ff87 	bl	8012c70 <nmi_spi_read>
 8012d62:	4604      	mov	r4, r0
 8012d64:	bb08      	cbnz	r0, 8012daa <spi_data_read+0x9a>
		if(!clockless)
 8012d66:	f1ba 0f00 	cmp.w	sl, #0
 8012d6a:	d102      	bne.n	8012d72 <spi_data_read+0x62>
			if (!gu8Crc_off) {
 8012d6c:	4b10      	ldr	r3, [pc, #64]	; (8012db0 <spi_data_read+0xa0>)
 8012d6e:	781b      	ldrb	r3, [r3, #0]
 8012d70:	b16b      	cbz	r3, 8012d8e <spi_data_read+0x7e>
		ix += nbytes;
 8012d72:	442e      	add	r6, r5
 8012d74:	b236      	sxth	r6, r6
		sz -= nbytes;
 8012d76:	1b7d      	subs	r5, r7, r5
 8012d78:	b2af      	uxth	r7, r5
	} while (sz);
 8012d7a:	b197      	cbz	r7, 8012da2 <spi_data_read+0x92>
		if (sz <= DATA_PKT_SZ)
 8012d7c:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 8012d80:	d8d0      	bhi.n	8012d24 <spi_data_read+0x14>
			nbytes = sz;
 8012d82:	b23d      	sxth	r5, r7
		retry = SPI_RESP_RETRY_COUNT;
 8012d84:	240a      	movs	r4, #10
 8012d86:	e7d1      	b.n	8012d2c <spi_data_read+0x1c>
				result = N_FAIL;
 8012d88:	f04f 0800 	mov.w	r8, #0
 8012d8c:	e7de      	b.n	8012d4c <spi_data_read+0x3c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 8012d8e:	2102      	movs	r1, #2
 8012d90:	a801      	add	r0, sp, #4
 8012d92:	f7ff ff6d 	bl	8012c70 <nmi_spi_read>
 8012d96:	2800      	cmp	r0, #0
 8012d98:	d0eb      	beq.n	8012d72 <spi_data_read+0x62>
					result = N_FAIL;
 8012d9a:	46a0      	mov	r8, r4
 8012d9c:	e001      	b.n	8012da2 <spi_data_read+0x92>
			result = N_FAIL;
 8012d9e:	f04f 0800 	mov.w	r8, #0
}
 8012da2:	4640      	mov	r0, r8
 8012da4:	b002      	add	sp, #8
 8012da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			result = N_FAIL;
 8012daa:	f04f 0800 	mov.w	r8, #0
 8012dae:	e7f8      	b.n	8012da2 <spi_data_read+0x92>
 8012db0:	20002418 	.word	0x20002418
 8012db4:	f3af 8000 	nop.w
 8012db8:	f3af 8000 	nop.w
 8012dbc:	f3af 8000 	nop.w

08012dc0 <spi_data_rsp>:
{
 8012dc0:	b510      	push	{r4, lr}
 8012dc2:	b082      	sub	sp, #8
    if (!gu8Crc_off)
 8012dc4:	4b0e      	ldr	r3, [pc, #56]	; (8012e00 <spi_data_rsp+0x40>)
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	b9a3      	cbnz	r3, 8012df4 <spi_data_rsp+0x34>
		len = 2;
 8012dca:	2402      	movs	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 8012dcc:	4621      	mov	r1, r4
 8012dce:	a801      	add	r0, sp, #4
 8012dd0:	f7ff ff4e 	bl	8012c70 <nmi_spi_read>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	b978      	cbnz	r0, 8012df8 <spi_data_rsp+0x38>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 8012dd8:	1e62      	subs	r2, r4, #1
 8012dda:	a902      	add	r1, sp, #8
 8012ddc:	440a      	add	r2, r1
 8012dde:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 8012de2:	b952      	cbnz	r2, 8012dfa <spi_data_rsp+0x3a>
 8012de4:	3c02      	subs	r4, #2
 8012de6:	440c      	add	r4, r1
 8012de8:	f814 2c04 	ldrb.w	r2, [r4, #-4]
 8012dec:	2ac3      	cmp	r2, #195	; 0xc3
 8012dee:	d104      	bne.n	8012dfa <spi_data_rsp+0x3a>
	sint8 result = N_OK;
 8012df0:	2301      	movs	r3, #1
 8012df2:	e002      	b.n	8012dfa <spi_data_rsp+0x3a>
		len = 3;
 8012df4:	2403      	movs	r4, #3
 8012df6:	e7e9      	b.n	8012dcc <spi_data_rsp+0xc>
		result = N_FAIL;
 8012df8:	2300      	movs	r3, #0
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	b002      	add	sp, #8
 8012dfe:	bd10      	pop	{r4, pc}
 8012e00:	20002418 	.word	0x20002418
 8012e04:	f3af 8000 	nop.w
 8012e08:	f3af 8000 	nop.w
 8012e0c:	f3af 8000 	nop.w

08012e10 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
 8012e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e14:	b082      	sub	sp, #8
 8012e16:	4607      	mov	r7, r0
 8012e18:	4688      	mov	r8, r1
	uint8 retry = SPI_RETRY_COUNT;
 8012e1a:	240a      	movs	r4, #10
 8012e1c:	e021      	b.n	8012e62 <spi_write_reg+0x52>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
 8012e1e:	2300      	movs	r3, #0
		cmd = CMD_SINGLE_WRITE;
 8012e20:	26c9      	movs	r6, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 8012e22:	9300      	str	r3, [sp, #0]
 8012e24:	2304      	movs	r3, #4
 8012e26:	4642      	mov	r2, r8
 8012e28:	4639      	mov	r1, r7
 8012e2a:	4630      	mov	r0, r6
 8012e2c:	f7ff fe08 	bl	8012a40 <spi_cmd>
 8012e30:	4605      	mov	r5, r0
	if (result != N_OK) {
 8012e32:	2801      	cmp	r0, #1
 8012e34:	d01a      	beq.n	8012e6c <spi_write_reg+0x5c>
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
 8012e36:	2d01      	cmp	r5, #1
 8012e38:	d01d      	beq.n	8012e76 <spi_write_reg+0x66>
	{
		nm_bsp_sleep(1);
 8012e3a:	2001      	movs	r0, #1
 8012e3c:	f7fd f988 	bl	8010150 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8012e40:	2100      	movs	r1, #0
 8012e42:	9100      	str	r1, [sp, #0]
 8012e44:	460b      	mov	r3, r1
 8012e46:	460a      	mov	r2, r1
 8012e48:	20cf      	movs	r0, #207	; 0xcf
 8012e4a:	f7ff fdf9 	bl	8012a40 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8012e4e:	20cf      	movs	r0, #207	; 0xcf
 8012e50:	f7ff ff1e 	bl	8012c90 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
 8012e54:	2001      	movs	r0, #1
 8012e56:	f7fd f97b 	bl	8010150 <nm_bsp_sleep>
		retry--;
 8012e5a:	1e63      	subs	r3, r4, #1
		if(retry) goto _RETRY_;
 8012e5c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8012e60:	d009      	beq.n	8012e76 <spi_write_reg+0x66>
	if (addr <= 0x30)
 8012e62:	2f30      	cmp	r7, #48	; 0x30
 8012e64:	d8db      	bhi.n	8012e1e <spi_write_reg+0xe>
		clockless = 1;
 8012e66:	2301      	movs	r3, #1
		cmd = CMD_INTERNAL_WRITE;
 8012e68:	26c3      	movs	r6, #195	; 0xc3
 8012e6a:	e7da      	b.n	8012e22 <spi_write_reg+0x12>
	result = spi_cmd_rsp(cmd);
 8012e6c:	4630      	mov	r0, r6
 8012e6e:	f7ff ff0f 	bl	8012c90 <spi_cmd_rsp>
 8012e72:	4605      	mov	r5, r0
_FAIL_:
 8012e74:	e7df      	b.n	8012e36 <spi_write_reg+0x26>
	}

	return result;
}
 8012e76:	4628      	mov	r0, r5
 8012e78:	b002      	add	sp, #8
 8012e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e7e:	bf00      	nop

08012e80 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
 8012e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e84:	b085      	sub	sp, #20
 8012e86:	4607      	mov	r7, r0
 8012e88:	4689      	mov	r9, r1
	uint8 retry = SPI_RETRY_COUNT;
 8012e8a:	240a      	movs	r4, #10
 8012e8c:	e023      	b.n	8012ed6 <spi_read_reg+0x56>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
 8012e8e:	f04f 0800 	mov.w	r8, #0
		cmd = CMD_SINGLE_READ;
 8012e92:	26ca      	movs	r6, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
 8012e94:	f8cd 8000 	str.w	r8, [sp]
 8012e98:	2304      	movs	r3, #4
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	4639      	mov	r1, r7
 8012e9e:	4630      	mov	r0, r6
 8012ea0:	f7ff fdce 	bl	8012a40 <spi_cmd>
 8012ea4:	4605      	mov	r5, r0
	if (result != N_OK) {
 8012ea6:	2801      	cmp	r0, #1
 8012ea8:	d01b      	beq.n	8012ee2 <spi_read_reg+0x62>
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

_FAIL_:
	if(result != N_OK)
 8012eaa:	2d01      	cmp	r5, #1
 8012eac:	d038      	beq.n	8012f20 <spi_read_reg+0xa0>
	{

		nm_bsp_sleep(1);
 8012eae:	2001      	movs	r0, #1
 8012eb0:	f7fd f94e 	bl	8010150 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8012eb4:	2100      	movs	r1, #0
 8012eb6:	9100      	str	r1, [sp, #0]
 8012eb8:	460b      	mov	r3, r1
 8012eba:	460a      	mov	r2, r1
 8012ebc:	20cf      	movs	r0, #207	; 0xcf
 8012ebe:	f7ff fdbf 	bl	8012a40 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8012ec2:	20cf      	movs	r0, #207	; 0xcf
 8012ec4:	f7ff fee4 	bl	8012c90 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
 8012ec8:	2001      	movs	r0, #1
 8012eca:	f7fd f941 	bl	8010150 <nm_bsp_sleep>
		retry--;
 8012ece:	1e63      	subs	r3, r4, #1
		if(retry) goto _RETRY_;
 8012ed0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8012ed4:	d024      	beq.n	8012f20 <spi_read_reg+0xa0>
	if (addr <= 0xff)
 8012ed6:	2fff      	cmp	r7, #255	; 0xff
 8012ed8:	d8d9      	bhi.n	8012e8e <spi_read_reg+0xe>
		clockless = 1;
 8012eda:	f04f 0801 	mov.w	r8, #1
		cmd = CMD_INTERNAL_READ;
 8012ede:	26c4      	movs	r6, #196	; 0xc4
 8012ee0:	e7d8      	b.n	8012e94 <spi_read_reg+0x14>
	result = spi_cmd_rsp(cmd);
 8012ee2:	4630      	mov	r0, r6
 8012ee4:	f7ff fed4 	bl	8012c90 <spi_cmd_rsp>
 8012ee8:	4605      	mov	r5, r0
	if (result != N_OK) {
 8012eea:	2801      	cmp	r0, #1
 8012eec:	d1dd      	bne.n	8012eaa <spi_read_reg+0x2a>
	result = spi_data_read(&tmp[0], 4, clockless);
 8012eee:	4642      	mov	r2, r8
 8012ef0:	2104      	movs	r1, #4
 8012ef2:	a803      	add	r0, sp, #12
 8012ef4:	f7ff ff0c 	bl	8012d10 <spi_data_read>
 8012ef8:	4605      	mov	r5, r0
	if (result != N_OK) {
 8012efa:	2801      	cmp	r0, #1
 8012efc:	d1d5      	bne.n	8012eaa <spi_read_reg+0x2a>
	*u32data = tmp[0] |
 8012efe:	f89d 300c 	ldrb.w	r3, [sp, #12]
		((uint32)tmp[1] << 8) |
 8012f02:	f89d 200d 	ldrb.w	r2, [sp, #13]
	*u32data = tmp[0] |
 8012f06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		((uint32)tmp[2] << 16) |
 8012f0a:	f89d 200e 	ldrb.w	r2, [sp, #14]
		((uint32)tmp[1] << 8) |
 8012f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		((uint32)tmp[3] << 24);
 8012f12:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
 8012f16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
 8012f1a:	f8c9 3000 	str.w	r3, [r9]
 8012f1e:	e7c4      	b.n	8012eaa <spi_read_reg+0x2a>
	}

	return result;
}
 8012f20:	4628      	mov	r0, r5
 8012f22:	b005      	add	sp, #20
 8012f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f28:	f3af 8000 	nop.w
 8012f2c:	f3af 8000 	nop.w

08012f30 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 8012f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f34:	b085      	sub	sp, #20
 8012f36:	4606      	mov	r6, r0
 8012f38:	4688      	mov	r8, r1
 8012f3a:	4615      	mov	r5, r2
	uint8 cmd = CMD_DMA_EXT_READ;
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 8012f3c:	2700      	movs	r7, #0
	uint8 retry = SPI_RETRY_COUNT;
 8012f3e:	f04f 090a 	mov.w	r9, #10
 8012f42:	e020      	b.n	8012f86 <nm_spi_read+0x56>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 8012f44:	2200      	movs	r2, #0
 8012f46:	9200      	str	r2, [sp, #0]
 8012f48:	462b      	mov	r3, r5
 8012f4a:	4631      	mov	r1, r6
 8012f4c:	20c8      	movs	r0, #200	; 0xc8
 8012f4e:	f7ff fd77 	bl	8012a40 <spi_cmd>
 8012f52:	4604      	mov	r4, r0
	if (result != N_OK) {
 8012f54:	2801      	cmp	r0, #1
 8012f56:	d01b      	beq.n	8012f90 <nm_spi_read+0x60>
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
 8012f58:	2c01      	cmp	r4, #1
 8012f5a:	d032      	beq.n	8012fc2 <nm_spi_read+0x92>
	{
		nm_bsp_sleep(1);
 8012f5c:	2001      	movs	r0, #1
 8012f5e:	f7fd f8f7 	bl	8010150 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8012f62:	2100      	movs	r1, #0
 8012f64:	9100      	str	r1, [sp, #0]
 8012f66:	460b      	mov	r3, r1
 8012f68:	460a      	mov	r2, r1
 8012f6a:	20cf      	movs	r0, #207	; 0xcf
 8012f6c:	f7ff fd68 	bl	8012a40 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8012f70:	20cf      	movs	r0, #207	; 0xcf
 8012f72:	f7ff fe8d 	bl	8012c90 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 8012f76:	2001      	movs	r0, #1
 8012f78:	f7fd f8ea 	bl	8010150 <nm_bsp_sleep>
		retry--;
 8012f7c:	f109 33ff 	add.w	r3, r9, #4294967295
		if(retry) goto _RETRY_;
 8012f80:	f013 09ff 	ands.w	r9, r3, #255	; 0xff
 8012f84:	d01d      	beq.n	8012fc2 <nm_spi_read+0x92>
	if (size == 1)
 8012f86:	2d01      	cmp	r5, #1
 8012f88:	d1dc      	bne.n	8012f44 <nm_spi_read+0x14>
		single_byte_workaround = 1;
 8012f8a:	2701      	movs	r7, #1
		size = 2;
 8012f8c:	2502      	movs	r5, #2
 8012f8e:	e7d9      	b.n	8012f44 <nm_spi_read+0x14>
	result = spi_cmd_rsp(cmd);
 8012f90:	20c8      	movs	r0, #200	; 0xc8
 8012f92:	f7ff fe7d 	bl	8012c90 <spi_cmd_rsp>
 8012f96:	4604      	mov	r4, r0
	if (result != N_OK) {
 8012f98:	2801      	cmp	r0, #1
 8012f9a:	d1dd      	bne.n	8012f58 <nm_spi_read+0x28>
	if (single_byte_workaround)
 8012f9c:	b157      	cbz	r7, 8012fb4 <nm_spi_read+0x84>
		result = spi_data_read(tmp, size,0);
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	4629      	mov	r1, r5
 8012fa2:	a803      	add	r0, sp, #12
 8012fa4:	f7ff feb4 	bl	8012d10 <spi_data_read>
 8012fa8:	4604      	mov	r4, r0
		buf[0] = tmp[0];
 8012faa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012fae:	f888 3000 	strb.w	r3, [r8]
 8012fb2:	e7d1      	b.n	8012f58 <nm_spi_read+0x28>
		result = spi_data_read(buf, size,0);
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	4629      	mov	r1, r5
 8012fb8:	4640      	mov	r0, r8
 8012fba:	f7ff fea9 	bl	8012d10 <spi_data_read>
 8012fbe:	4604      	mov	r4, r0
 8012fc0:	e7ca      	b.n	8012f58 <nm_spi_read+0x28>
	}

	return result;
}
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	b005      	add	sp, #20
 8012fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fca:	bf00      	nop
 8012fcc:	f3af 8000 	nop.w

08012fd0 <nm_spi_write>:
{
 8012fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd4:	b082      	sub	sp, #8
 8012fd6:	4607      	mov	r7, r0
 8012fd8:	4688      	mov	r8, r1
 8012fda:	4616      	mov	r6, r2
	uint8 retry = SPI_RETRY_COUNT;
 8012fdc:	240a      	movs	r4, #10
 8012fde:	e01f      	b.n	8013020 <nm_spi_write+0x50>
	result = spi_cmd(cmd, addr, 0, size,0);
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	9200      	str	r2, [sp, #0]
 8012fe4:	4633      	mov	r3, r6
 8012fe6:	4639      	mov	r1, r7
 8012fe8:	20c7      	movs	r0, #199	; 0xc7
 8012fea:	f7ff fd29 	bl	8012a40 <spi_cmd>
 8012fee:	4605      	mov	r5, r0
	if (result != N_OK) {
 8012ff0:	2801      	cmp	r0, #1
 8012ff2:	d019      	beq.n	8013028 <nm_spi_write+0x58>
	if(result != N_OK)
 8012ff4:	2d01      	cmp	r5, #1
 8012ff6:	d029      	beq.n	801304c <nm_spi_write+0x7c>
		nm_bsp_sleep(1);
 8012ff8:	2001      	movs	r0, #1
 8012ffa:	f7fd f8a9 	bl	8010150 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8012ffe:	2100      	movs	r1, #0
 8013000:	9100      	str	r1, [sp, #0]
 8013002:	460b      	mov	r3, r1
 8013004:	460a      	mov	r2, r1
 8013006:	20cf      	movs	r0, #207	; 0xcf
 8013008:	f7ff fd1a 	bl	8012a40 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 801300c:	20cf      	movs	r0, #207	; 0xcf
 801300e:	f7ff fe3f 	bl	8012c90 <spi_cmd_rsp>
		nm_bsp_sleep(1);
 8013012:	2001      	movs	r0, #1
 8013014:	f7fd f89c 	bl	8010150 <nm_bsp_sleep>
		retry--;
 8013018:	1e63      	subs	r3, r4, #1
		if(retry) goto _RETRY_;
 801301a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 801301e:	d015      	beq.n	801304c <nm_spi_write+0x7c>
	if (size == 1)
 8013020:	2e01      	cmp	r6, #1
 8013022:	d1dd      	bne.n	8012fe0 <nm_spi_write+0x10>
		size = 2;
 8013024:	2602      	movs	r6, #2
 8013026:	e7db      	b.n	8012fe0 <nm_spi_write+0x10>
	result = spi_cmd_rsp(cmd);
 8013028:	20c7      	movs	r0, #199	; 0xc7
 801302a:	f7ff fe31 	bl	8012c90 <spi_cmd_rsp>
 801302e:	4605      	mov	r5, r0
	if (result != N_OK) {
 8013030:	2801      	cmp	r0, #1
 8013032:	d1df      	bne.n	8012ff4 <nm_spi_write+0x24>
	result = spi_data_write(buf, size);
 8013034:	4631      	mov	r1, r6
 8013036:	4640      	mov	r0, r8
 8013038:	f7ff fdca 	bl	8012bd0 <spi_data_write>
 801303c:	4605      	mov	r5, r0
	if (result != N_OK) {
 801303e:	2801      	cmp	r0, #1
 8013040:	d1d8      	bne.n	8012ff4 <nm_spi_write+0x24>
	result = spi_data_rsp(cmd);
 8013042:	20c7      	movs	r0, #199	; 0xc7
 8013044:	f7ff febc 	bl	8012dc0 <spi_data_rsp>
 8013048:	4605      	mov	r5, r0
_FAIL_:
 801304a:	e7d3      	b.n	8012ff4 <nm_spi_write+0x24>
}
 801304c:	4628      	mov	r0, r5
 801304e:	b002      	add	sp, #8
 8013050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013054:	f3af 8000 	nop.w
 8013058:	f3af 8000 	nop.w
 801305c:	f3af 8000 	nop.w

08013060 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
 8013060:	b510      	push	{r4, lr}
 8013062:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8013064:	2400      	movs	r4, #0
 8013066:	9400      	str	r4, [sp, #0]
 8013068:	4623      	mov	r3, r4
 801306a:	4622      	mov	r2, r4
 801306c:	4621      	mov	r1, r4
 801306e:	20cf      	movs	r0, #207	; 0xcf
 8013070:	f7ff fce6 	bl	8012a40 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
 8013074:	20cf      	movs	r0, #207	; 0xcf
 8013076:	f7ff fe0b 	bl	8012c90 <spi_cmd_rsp>
	return M2M_SUCCESS;
}
 801307a:	4620      	mov	r0, r4
 801307c:	b002      	add	sp, #8
 801307e:	bd10      	pop	{r4, pc}

08013080 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
 8013080:	b500      	push	{lr}
 8013082:	b083      	sub	sp, #12
	uint32 chipid;
	uint32 reg = 0;
 8013084:	2300      	movs	r3, #0
 8013086:	a902      	add	r1, sp, #8
 8013088:	f841 3d08 	str.w	r3, [r1, #-8]!


	/**
		configure protocol
	**/
	gu8Crc_off = 0;
 801308c:	4a19      	ldr	r2, [pc, #100]	; (80130f4 <nm_spi_init+0x74>)
 801308e:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
 8013090:	f64e 0024 	movw	r0, #59428	; 0xe824
 8013094:	f7ff fef4 	bl	8012e80 <spi_read_reg>
 8013098:	b1e0      	cbz	r0, 80130d4 <nm_spi_init+0x54>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
		}
	}
	if(gu8Crc_off == 0)
 801309a:	4b16      	ldr	r3, [pc, #88]	; (80130f4 <nm_spi_init+0x74>)
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	b973      	cbnz	r3, 80130be <nm_spi_init+0x3e>
	{
		reg &= ~0xc;	/* disable crc checking */
 80130a0:	9900      	ldr	r1, [sp, #0]
		reg &= ~0x70;
 80130a2:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
 80130a6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80130aa:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
 80130ac:	f64e 0024 	movw	r0, #59428	; 0xe824
 80130b0:	f7ff feae 	bl	8012e10 <spi_write_reg>
 80130b4:	4603      	mov	r3, r0
 80130b6:	b148      	cbz	r0, 80130cc <nm_spi_init+0x4c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
		}
		gu8Crc_off = 1;
 80130b8:	4b0e      	ldr	r3, [pc, #56]	; (80130f4 <nm_spi_init+0x74>)
 80130ba:	2201      	movs	r2, #1
 80130bc:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
 80130be:	a901      	add	r1, sp, #4
 80130c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80130c4:	f7ff fedc 	bl	8012e80 <spi_read_reg>
 80130c8:	b180      	cbz	r0, 80130ec <nm_spi_init+0x6c>

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	//spi_init_pkt_sz();


	return M2M_SUCCESS;
 80130ca:	2300      	movs	r3, #0
}
 80130cc:	4618      	mov	r0, r3
 80130ce:	b003      	add	sp, #12
 80130d0:	f85d fb04 	ldr.w	pc, [sp], #4
		gu8Crc_off = 1;
 80130d4:	4b07      	ldr	r3, [pc, #28]	; (80130f4 <nm_spi_init+0x74>)
 80130d6:	2201      	movs	r2, #1
 80130d8:	701a      	strb	r2, [r3, #0]
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
 80130da:	4669      	mov	r1, sp
 80130dc:	f64e 0024 	movw	r0, #59428	; 0xe824
 80130e0:	f7ff fece 	bl	8012e80 <spi_read_reg>
 80130e4:	4603      	mov	r3, r0
 80130e6:	2800      	cmp	r0, #0
 80130e8:	d1d7      	bne.n	801309a <nm_spi_init+0x1a>
 80130ea:	e7ef      	b.n	80130cc <nm_spi_init+0x4c>
		return M2M_ERR_BUS_FAIL;
 80130ec:	f06f 0305 	mvn.w	r3, #5
 80130f0:	e7ec      	b.n	80130cc <nm_spi_init+0x4c>
 80130f2:	bf00      	nop
 80130f4:	20002418 	.word	0x20002418
 80130f8:	f3af 8000 	nop.w
 80130fc:	f3af 8000 	nop.w

08013100 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
 8013100:	2000      	movs	r0, #0
 8013102:	4b01      	ldr	r3, [pc, #4]	; (8013108 <nm_spi_deinit+0x8>)
 8013104:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
 8013106:	4770      	bx	lr
 8013108:	20002418 	.word	0x20002418
 801310c:	f3af 8000 	nop.w

08013110 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 8013110:	b500      	push	{lr}
 8013112:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
 8013114:	a901      	add	r1, sp, #4
 8013116:	f7ff feb3 	bl	8012e80 <spi_read_reg>

	return u32Val;
}
 801311a:	9801      	ldr	r0, [sp, #4]
 801311c:	b003      	add	sp, #12
 801311e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013122:	bf00      	nop
 8013124:	f3af 8000 	nop.w
 8013128:	f3af 8000 	nop.w
 801312c:	f3af 8000 	nop.w

08013130 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 8013130:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
 8013132:	f7ff fea5 	bl	8012e80 <spi_read_reg>

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8013136:	2801      	cmp	r0, #1
 8013138:	d101      	bne.n	801313e <nm_spi_read_reg_with_ret+0xe>
 801313a:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
 801313c:	bd08      	pop	{r3, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
 801313e:	f06f 0005 	mvn.w	r0, #5
 8013142:	e7fb      	b.n	801313c <nm_spi_read_reg_with_ret+0xc>
 8013144:	f3af 8000 	nop.w
 8013148:	f3af 8000 	nop.w
 801314c:	f3af 8000 	nop.w

08013150 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
 8013150:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
 8013152:	f7ff fe5d 	bl	8012e10 <spi_write_reg>

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8013156:	2801      	cmp	r0, #1
 8013158:	d101      	bne.n	801315e <nm_spi_write_reg+0xe>
 801315a:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
 801315c:	bd08      	pop	{r3, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
 801315e:	f06f 0005 	mvn.w	r0, #5
 8013162:	e7fb      	b.n	801315c <nm_spi_write_reg+0xc>
 8013164:	f3af 8000 	nop.w
 8013168:	f3af 8000 	nop.w
 801316c:	f3af 8000 	nop.w

08013170 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 8013170:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 8013172:	f7ff fedd 	bl	8012f30 <nm_spi_read>

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8013176:	2801      	cmp	r0, #1
 8013178:	d101      	bne.n	801317e <nm_spi_read_block+0xe>
 801317a:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
 801317c:	bd08      	pop	{r3, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
 801317e:	f06f 0005 	mvn.w	r0, #5
 8013182:	e7fb      	b.n	801317c <nm_spi_read_block+0xc>
 8013184:	f3af 8000 	nop.w
 8013188:	f3af 8000 	nop.w
 801318c:	f3af 8000 	nop.w

08013190 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 8013190:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 8013192:	f7ff ff1d 	bl	8012fd0 <nm_spi_write>

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8013196:	2801      	cmp	r0, #1
 8013198:	d101      	bne.n	801319e <nm_spi_write_block+0xe>
 801319a:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
 801319c:	bd08      	pop	{r3, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
 801319e:	f06f 0005 	mvn.w	r0, #5
 80131a2:	e7fb      	b.n	801319c <nm_spi_write_block+0xc>
	...

080131b0 <sslSetSockOpt>:
		9 September 2014
*********************************************************************/
static sint8 sslSetSockOpt(SOCKET sock, uint8  u8Opt, const void *pvOptVal, uint16 u16OptLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock < TCP_SOCK_MAX)
 80131b0:	2806      	cmp	r0, #6
 80131b2:	dc7a      	bgt.n	80132aa <sslSetSockOpt+0xfa>
{
 80131b4:	b530      	push	{r4, r5, lr}
 80131b6:	b097      	sub	sp, #92	; 0x5c
	{
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 80131b8:	4c42      	ldr	r4, [pc, #264]	; (80132c4 <sslSetSockOpt+0x114>)
 80131ba:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 80131be:	7ae4      	ldrb	r4, [r4, #11]
 80131c0:	f014 0f01 	tst.w	r4, #1
 80131c4:	d074      	beq.n	80132b0 <sslSetSockOpt+0x100>
		{
			if(u8Opt == SO_SSL_BYPASS_X509_VERIF)
 80131c6:	2901      	cmp	r1, #1
 80131c8:	d028      	beq.n	801321c <sslSetSockOpt+0x6c>
				{
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_BYPASS_X509;
				}
				s8Ret = SOCK_ERR_NO_ERROR;
			}
			else if(u8Opt == SO_SSL_ENABLE_SESSION_CACHING)
 80131ca:	2903      	cmp	r1, #3
 80131cc:	d03a      	beq.n	8013244 <sslSetSockOpt+0x94>
				{
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CACHE_SESSION;
				}
				s8Ret = SOCK_ERR_NO_ERROR;
			}
			else if(u8Opt == SO_SSL_ENABLE_SNI_VALIDATION)
 80131ce:	2904      	cmp	r1, #4
 80131d0:	d04c      	beq.n	801326c <sslSetSockOpt+0xbc>
				{
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CHECK_SNI;
				}
				s8Ret = SOCK_ERR_NO_ERROR;
			}
			else if(u8Opt == SO_SSL_SNI)
 80131d2:	2902      	cmp	r1, #2
 80131d4:	d16f      	bne.n	80132b6 <sslSetSockOpt+0x106>
			{
				if(u16OptLen < HOSTNAME_MAX_SIZE)
 80131d6:	2b3f      	cmp	r3, #63	; 0x3f
 80131d8:	d870      	bhi.n	80132bc <sslSetSockOpt+0x10c>
 80131da:	4615      	mov	r5, r2
				{
					uint8					*pu8SNI = (uint8*)pvOptVal;
					tstrSSLSetSockOptCmd	strCmd;

					strCmd.sock			= sock;
 80131dc:	f88d 0010 	strb.w	r0, [sp, #16]
					strCmd.u16SessionID	= gastrSockets[sock].u16SessionID;
 80131e0:	4a38      	ldr	r2, [pc, #224]	; (80132c4 <sslSetSockOpt+0x114>)
 80131e2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80131e6:	88c2      	ldrh	r2, [r0, #6]
 80131e8:	f8ad 2012 	strh.w	r2, [sp, #18]
					strCmd.u8Option		= u8Opt;
 80131ec:	f88d 1011 	strb.w	r1, [sp, #17]
					strCmd.u32OptLen	= u16OptLen;
 80131f0:	9305      	str	r3, [sp, #20]
					m2m_memcpy(strCmd.au8OptVal, pu8SNI, HOSTNAME_MAX_SIZE);
 80131f2:	2240      	movs	r2, #64	; 0x40
 80131f4:	4629      	mov	r1, r5
 80131f6:	a806      	add	r0, sp, #24
 80131f8:	f7fd f90a 	bl	8010410 <m2m_memcpy>

					if(SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT, (uint8*)&strCmd, sizeof(tstrSSLSetSockOptCmd),
 80131fc:	2300      	movs	r3, #0
 80131fe:	9302      	str	r3, [sp, #8]
 8013200:	9301      	str	r3, [sp, #4]
 8013202:	9300      	str	r3, [sp, #0]
 8013204:	2348      	movs	r3, #72	; 0x48
 8013206:	aa04      	add	r2, sp, #16
 8013208:	2151      	movs	r1, #81	; 0x51
 801320a:	2002      	movs	r0, #2
 801320c:	f7fd fb10 	bl	8010830 <hif_send>
 8013210:	f110 0f03 	cmn.w	r0, #3
 8013214:	d03e      	beq.n	8013294 <sslSetSockOpt+0xe4>
						0, 0, 0) == M2M_ERR_MEM_ALLOC)
					{
						s8Ret = SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT | M2M_REQ_DATA_PKT,
							(uint8*)&strCmd, sizeof(tstrSSLSetSockOptCmd), 0, 0, 0);
					}
					s8Ret = SOCK_ERR_NO_ERROR;
 8013216:	2000      	movs	r0, #0
		{
			M2M_ERR("Not SSL Socket\n");
		}
	}
	return s8Ret;
}
 8013218:	b017      	add	sp, #92	; 0x5c
 801321a:	bd30      	pop	{r4, r5, pc}
				int	optVal = *((int*)pvOptVal);
 801321c:	6813      	ldr	r3, [r2, #0]
				if(optVal)
 801321e:	b143      	cbz	r3, 8013232 <sslSetSockOpt+0x82>
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_BYPASS_X509;
 8013220:	4b28      	ldr	r3, [pc, #160]	; (80132c4 <sslSetSockOpt+0x114>)
 8013222:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8013226:	7ac3      	ldrb	r3, [r0, #11]
 8013228:	f043 0302 	orr.w	r3, r3, #2
 801322c:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
 801322e:	2000      	movs	r0, #0
 8013230:	e7f2      	b.n	8013218 <sslSetSockOpt+0x68>
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_BYPASS_X509;
 8013232:	4b24      	ldr	r3, [pc, #144]	; (80132c4 <sslSetSockOpt+0x114>)
 8013234:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8013238:	7ac3      	ldrb	r3, [r0, #11]
 801323a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801323e:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
 8013240:	2000      	movs	r0, #0
 8013242:	e7e9      	b.n	8013218 <sslSetSockOpt+0x68>
				int	optVal = *((int*)pvOptVal);
 8013244:	6813      	ldr	r3, [r2, #0]
				if(optVal)
 8013246:	b143      	cbz	r3, 801325a <sslSetSockOpt+0xaa>
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CACHE_SESSION;
 8013248:	4b1e      	ldr	r3, [pc, #120]	; (80132c4 <sslSetSockOpt+0x114>)
 801324a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 801324e:	7ac3      	ldrb	r3, [r0, #11]
 8013250:	f043 0310 	orr.w	r3, r3, #16
 8013254:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
 8013256:	2000      	movs	r0, #0
 8013258:	e7de      	b.n	8013218 <sslSetSockOpt+0x68>
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CACHE_SESSION;
 801325a:	4b1a      	ldr	r3, [pc, #104]	; (80132c4 <sslSetSockOpt+0x114>)
 801325c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8013260:	7ac3      	ldrb	r3, [r0, #11]
 8013262:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8013266:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
 8013268:	2000      	movs	r0, #0
 801326a:	e7d5      	b.n	8013218 <sslSetSockOpt+0x68>
				int	optVal = *((int*)pvOptVal);
 801326c:	6813      	ldr	r3, [r2, #0]
				if(optVal)
 801326e:	b143      	cbz	r3, 8013282 <sslSetSockOpt+0xd2>
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CHECK_SNI;
 8013270:	4b14      	ldr	r3, [pc, #80]	; (80132c4 <sslSetSockOpt+0x114>)
 8013272:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8013276:	7ac3      	ldrb	r3, [r0, #11]
 8013278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801327c:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
 801327e:	2000      	movs	r0, #0
 8013280:	e7ca      	b.n	8013218 <sslSetSockOpt+0x68>
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CHECK_SNI;
 8013282:	4b10      	ldr	r3, [pc, #64]	; (80132c4 <sslSetSockOpt+0x114>)
 8013284:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8013288:	7ac3      	ldrb	r3, [r0, #11]
 801328a:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 801328e:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
 8013290:	2000      	movs	r0, #0
 8013292:	e7c1      	b.n	8013218 <sslSetSockOpt+0x68>
						s8Ret = SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT | M2M_REQ_DATA_PKT,
 8013294:	2300      	movs	r3, #0
 8013296:	9302      	str	r3, [sp, #8]
 8013298:	9301      	str	r3, [sp, #4]
 801329a:	9300      	str	r3, [sp, #0]
 801329c:	2348      	movs	r3, #72	; 0x48
 801329e:	aa04      	add	r2, sp, #16
 80132a0:	21d1      	movs	r1, #209	; 0xd1
 80132a2:	2002      	movs	r0, #2
 80132a4:	f7fd fac4 	bl	8010830 <hif_send>
 80132a8:	e7b5      	b.n	8013216 <sslSetSockOpt+0x66>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 80132aa:	f06f 0005 	mvn.w	r0, #5
}
 80132ae:	4770      	bx	lr
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 80132b0:	f06f 0005 	mvn.w	r0, #5
 80132b4:	e7b0      	b.n	8013218 <sslSetSockOpt+0x68>
 80132b6:	f06f 0005 	mvn.w	r0, #5
 80132ba:	e7ad      	b.n	8013218 <sslSetSockOpt+0x68>
 80132bc:	f06f 0005 	mvn.w	r0, #5
 80132c0:	e7aa      	b.n	8013218 <sslSetSockOpt+0x68>
 80132c2:	bf00      	nop
 80132c4:	20005a68 	.word	0x20005a68
 80132c8:	f3af 8000 	nop.w
 80132cc:	f3af 8000 	nop.w

080132d0 <Socket_ReadSocketData>:
{
 80132d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132d4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
 80132d8:	b19c      	cbz	r4, 8013302 <Socket_ReadSocketData+0x32>
 80132da:	4680      	mov	r8, r0
 80132dc:	460e      	mov	r6, r1
 80132de:	4692      	mov	sl, r2
 80132e0:	4699      	mov	r9, r3
 80132e2:	4607      	mov	r7, r0
 80132e4:	0103      	lsls	r3, r0, #4
 80132e6:	4a28      	ldr	r2, [pc, #160]	; (8013388 <Socket_ReadSocketData+0xb8>)
 80132e8:	58d3      	ldr	r3, [r2, r3]
 80132ea:	b153      	cbz	r3, 8013302 <Socket_ReadSocketData+0x32>
 80132ec:	eb02 1300 	add.w	r3, r2, r0, lsl #4
 80132f0:	889b      	ldrh	r3, [r3, #4]
 80132f2:	b29b      	uxth	r3, r3
 80132f4:	b12b      	cbz	r3, 8013302 <Socket_ReadSocketData+0x32>
 80132f6:	eb02 1300 	add.w	r3, r2, r0, lsl #4
 80132fa:	7a9b      	ldrb	r3, [r3, #10]
 80132fc:	b2db      	uxtb	r3, r3
 80132fe:	2b01      	cmp	r3, #1
 8013300:	d001      	beq.n	8013306 <Socket_ReadSocketData+0x36>
}
 8013302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pstrRecv->u16RemainingSize = u16ReadCount;
 8013306:	80cc      	strh	r4, [r1, #6]
 8013308:	e004      	b.n	8013314 <Socket_ReadSocketData+0x44>
			u16Read = u16ReadCount;
 801330a:	4625      	mov	r5, r4
			u8SetRxDone = 1;
 801330c:	2301      	movs	r3, #1
 801330e:	e00f      	b.n	8013330 <Socket_ReadSocketData+0x60>
		}while(u16ReadCount != 0);
 8013310:	2c00      	cmp	r4, #0
 8013312:	d0f6      	beq.n	8013302 <Socket_ReadSocketData+0x32>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
 8013314:	4b1c      	ldr	r3, [pc, #112]	; (8013388 <Socket_ReadSocketData+0xb8>)
 8013316:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 801331a:	889b      	ldrh	r3, [r3, #4]
 801331c:	1ae3      	subs	r3, r4, r3
 801331e:	b21b      	sxth	r3, r3
			if(s16Diff > 0)
 8013320:	2b00      	cmp	r3, #0
 8013322:	ddf2      	ble.n	801330a <Socket_ReadSocketData+0x3a>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
 8013324:	4b18      	ldr	r3, [pc, #96]	; (8013388 <Socket_ReadSocketData+0xb8>)
 8013326:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 801332a:	889d      	ldrh	r5, [r3, #4]
 801332c:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
 801332e:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
 8013330:	013a      	lsls	r2, r7, #4
 8013332:	4915      	ldr	r1, [pc, #84]	; (8013388 <Socket_ReadSocketData+0xb8>)
 8013334:	5889      	ldr	r1, [r1, r2]
 8013336:	462a      	mov	r2, r5
 8013338:	4648      	mov	r0, r9
 801333a:	f7fd fb69 	bl	8010a10 <hif_receive>
 801333e:	2800      	cmp	r0, #0
 8013340:	d1df      	bne.n	8013302 <Socket_ReadSocketData+0x32>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
 8013342:	013b      	lsls	r3, r7, #4
 8013344:	4a10      	ldr	r2, [pc, #64]	; (8013388 <Socket_ReadSocketData+0xb8>)
 8013346:	58d3      	ldr	r3, [r2, r3]
 8013348:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
 801334a:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
 801334c:	88f3      	ldrh	r3, [r6, #6]
 801334e:	1b5b      	subs	r3, r3, r5
 8013350:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
 8013352:	4b0e      	ldr	r3, [pc, #56]	; (801338c <Socket_ReadSocketData+0xbc>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	b12b      	cbz	r3, 8013364 <Socket_ReadSocketData+0x94>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
 8013358:	4b0c      	ldr	r3, [pc, #48]	; (801338c <Socket_ReadSocketData+0xbc>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	4632      	mov	r2, r6
 801335e:	4651      	mov	r1, sl
 8013360:	4640      	mov	r0, r8
 8013362:	4798      	blx	r3
				u16ReadCount -= u16Read;
 8013364:	1b64      	subs	r4, r4, r5
 8013366:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
 8013368:	44a9      	add	r9, r5
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
 801336a:	4b07      	ldr	r3, [pc, #28]	; (8013388 <Socket_ReadSocketData+0xb8>)
 801336c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8013370:	7a9b      	ldrb	r3, [r3, #10]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d1cc      	bne.n	8013310 <Socket_ReadSocketData+0x40>
 8013376:	2c00      	cmp	r4, #0
 8013378:	d0ca      	beq.n	8013310 <Socket_ReadSocketData+0x40>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
 801337a:	2301      	movs	r3, #1
 801337c:	2200      	movs	r2, #0
 801337e:	4611      	mov	r1, r2
 8013380:	4610      	mov	r0, r2
 8013382:	f7fd fb45 	bl	8010a10 <hif_receive>
 8013386:	e7bc      	b.n	8013302 <Socket_ReadSocketData+0x32>
 8013388:	20005a68 	.word	0x20005a68
 801338c:	20005b18 	.word	0x20005b18

08013390 <m2m_ip_cb>:
{
 8013390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013392:	b099      	sub	sp, #100	; 0x64
 8013394:	4614      	mov	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
 8013396:	2841      	cmp	r0, #65	; 0x41
 8013398:	d037      	beq.n	801340a <m2m_ip_cb+0x7a>
 801339a:	460d      	mov	r5, r1
 801339c:	2854      	cmp	r0, #84	; 0x54
 801339e:	d034      	beq.n	801340a <m2m_ip_cb+0x7a>
	else if(u8OpCode == SOCKET_CMD_LISTEN)
 80133a0:	2842      	cmp	r0, #66	; 0x42
 80133a2:	d049      	beq.n	8013438 <m2m_ip_cb+0xa8>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
 80133a4:	2843      	cmp	r0, #67	; 0x43
 80133a6:	d05f      	beq.n	8013468 <m2m_ip_cb+0xd8>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
 80133a8:	2844      	cmp	r0, #68	; 0x44
 80133aa:	f000 80a5 	beq.w	80134f8 <m2m_ip_cb+0x168>
 80133ae:	284b      	cmp	r0, #75	; 0x4b
 80133b0:	f000 80a2 	beq.w	80134f8 <m2m_ip_cb+0x168>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
 80133b4:	284a      	cmp	r0, #74	; 0x4a
 80133b6:	f000 80c2 	beq.w	801353e <m2m_ip_cb+0x1ae>
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
 80133ba:	2846      	cmp	r0, #70	; 0x46
 80133bc:	f000 80d3 	beq.w	8013566 <m2m_ip_cb+0x1d6>
 80133c0:	2848      	cmp	r0, #72	; 0x48
 80133c2:	f000 80d0 	beq.w	8013566 <m2m_ip_cb+0x1d6>
 80133c6:	284d      	cmp	r0, #77	; 0x4d
 80133c8:	f000 80cd 	beq.w	8013566 <m2m_ip_cb+0x1d6>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
 80133cc:	2845      	cmp	r0, #69	; 0x45
 80133ce:	f000 8116 	beq.w	80135fe <m2m_ip_cb+0x26e>
 80133d2:	2847      	cmp	r0, #71	; 0x47
 80133d4:	f000 8113 	beq.w	80135fe <m2m_ip_cb+0x26e>
 80133d8:	284c      	cmp	r0, #76	; 0x4c
 80133da:	f000 8110 	beq.w	80135fe <m2m_ip_cb+0x26e>
	else if(u8OpCode == SOCKET_CMD_PING)
 80133de:	2852      	cmp	r0, #82	; 0x52
 80133e0:	d128      	bne.n	8013434 <m2m_ip_cb+0xa4>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
 80133e2:	2301      	movs	r3, #1
 80133e4:	2214      	movs	r2, #20
 80133e6:	a907      	add	r1, sp, #28
 80133e8:	4620      	mov	r0, r4
 80133ea:	f7fd fb11 	bl	8010a10 <hif_receive>
 80133ee:	bb08      	cbnz	r0, 8013434 <m2m_ip_cb+0xa4>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
 80133f0:	4b97      	ldr	r3, [pc, #604]	; (8013650 <m2m_ip_cb+0x2c0>)
 80133f2:	9a08      	ldr	r2, [sp, #32]
 80133f4:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	b1e3      	cbz	r3, 8013434 <m2m_ip_cb+0xa4>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
 80133fa:	4b95      	ldr	r3, [pc, #596]	; (8013650 <m2m_ip_cb+0x2c0>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8013402:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013404:	9807      	ldr	r0, [sp, #28]
 8013406:	4798      	blx	r3
}
 8013408:	e014      	b.n	8013434 <m2m_ip_cb+0xa4>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
 801340a:	2300      	movs	r3, #0
 801340c:	2204      	movs	r2, #4
 801340e:	a907      	add	r1, sp, #28
 8013410:	4620      	mov	r0, r4
 8013412:	f7fd fafd 	bl	8010a10 <hif_receive>
 8013416:	b968      	cbnz	r0, 8013434 <m2m_ip_cb+0xa4>
			strBind.status = strBindReply.s8Status;
 8013418:	f99d 301d 	ldrsb.w	r3, [sp, #29]
 801341c:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
 8013420:	4b8c      	ldr	r3, [pc, #560]	; (8013654 <m2m_ip_cb+0x2c4>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	b133      	cbz	r3, 8013434 <m2m_ip_cb+0xa4>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
 8013426:	4b8b      	ldr	r3, [pc, #556]	; (8013654 <m2m_ip_cb+0x2c4>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	aa03      	add	r2, sp, #12
 801342c:	2101      	movs	r1, #1
 801342e:	f99d 001c 	ldrsb.w	r0, [sp, #28]
 8013432:	4798      	blx	r3
}
 8013434:	b019      	add	sp, #100	; 0x64
 8013436:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
 8013438:	2300      	movs	r3, #0
 801343a:	2204      	movs	r2, #4
 801343c:	a907      	add	r1, sp, #28
 801343e:	4620      	mov	r0, r4
 8013440:	f7fd fae6 	bl	8010a10 <hif_receive>
 8013444:	2800      	cmp	r0, #0
 8013446:	d1f5      	bne.n	8013434 <m2m_ip_cb+0xa4>
			strListen.status = strListenReply.s8Status;
 8013448:	f99d 301d 	ldrsb.w	r3, [sp, #29]
 801344c:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
 8013450:	4b80      	ldr	r3, [pc, #512]	; (8013654 <m2m_ip_cb+0x2c4>)
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d0ed      	beq.n	8013434 <m2m_ip_cb+0xa4>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
 8013458:	4b7e      	ldr	r3, [pc, #504]	; (8013654 <m2m_ip_cb+0x2c4>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	aa03      	add	r2, sp, #12
 801345e:	2102      	movs	r1, #2
 8013460:	f99d 001c 	ldrsb.w	r0, [sp, #28]
 8013464:	4798      	blx	r3
 8013466:	e7e5      	b.n	8013434 <m2m_ip_cb+0xa4>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
 8013468:	2300      	movs	r3, #0
 801346a:	220c      	movs	r2, #12
 801346c:	eb0d 0102 	add.w	r1, sp, r2
 8013470:	4620      	mov	r0, r4
 8013472:	f7fd facd 	bl	8010a10 <hif_receive>
 8013476:	2800      	cmp	r0, #0
 8013478:	d1dc      	bne.n	8013434 <m2m_ip_cb+0xa4>
			if(strAcceptReply.sConnectedSock >= 0)
 801347a:	f99d 2015 	ldrsb.w	r2, [sp, #21]
 801347e:	2a00      	cmp	r2, #0
 8013480:	db23      	blt.n	80134ca <m2m_ip_cb+0x13a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
 8013482:	f99d 1014 	ldrsb.w	r1, [sp, #20]
 8013486:	4b74      	ldr	r3, [pc, #464]	; (8013658 <m2m_ip_cb+0x2c8>)
 8013488:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 801348c:	7ac9      	ldrb	r1, [r1, #11]
 801348e:	b2c9      	uxtb	r1, r1
 8013490:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8013494:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
 8013496:	2101      	movs	r1, #1
 8013498:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 801349a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801349e:	3908      	subs	r1, #8
 80134a0:	b289      	uxth	r1, r1
 80134a2:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
 80134a4:	496d      	ldr	r1, [pc, #436]	; (801365c <m2m_ip_cb+0x2cc>)
 80134a6:	880b      	ldrh	r3, [r1, #0]
 80134a8:	3301      	adds	r3, #1
 80134aa:	b29b      	uxth	r3, r3
 80134ac:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
 80134ae:	880b      	ldrh	r3, [r1, #0]
 80134b0:	b29b      	uxth	r3, r3
 80134b2:	b91b      	cbnz	r3, 80134bc <m2m_ip_cb+0x12c>
					++gu16SessionID;
 80134b4:	880b      	ldrh	r3, [r1, #0]
 80134b6:	3301      	adds	r3, #1
 80134b8:	b29b      	uxth	r3, r3
 80134ba:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
 80134bc:	4b67      	ldr	r3, [pc, #412]	; (801365c <m2m_ip_cb+0x2cc>)
 80134be:	8819      	ldrh	r1, [r3, #0]
 80134c0:	b289      	uxth	r1, r1
 80134c2:	4b65      	ldr	r3, [pc, #404]	; (8013658 <m2m_ip_cb+0x2c8>)
 80134c4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80134c8:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
 80134ca:	f88d 201c 	strb.w	r2, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
 80134ce:	2302      	movs	r3, #2
 80134d0:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
 80134d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80134d8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
 80134dc:	9b04      	ldr	r3, [sp, #16]
 80134de:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
 80134e0:	4b5c      	ldr	r3, [pc, #368]	; (8013654 <m2m_ip_cb+0x2c4>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d0a5      	beq.n	8013434 <m2m_ip_cb+0xa4>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
 80134e8:	4b5a      	ldr	r3, [pc, #360]	; (8013654 <m2m_ip_cb+0x2c4>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	aa07      	add	r2, sp, #28
 80134ee:	2104      	movs	r1, #4
 80134f0:	f99d 0014 	ldrsb.w	r0, [sp, #20]
 80134f4:	4798      	blx	r3
 80134f6:	e79d      	b.n	8013434 <m2m_ip_cb+0xa4>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
 80134f8:	2300      	movs	r3, #0
 80134fa:	2204      	movs	r2, #4
 80134fc:	a907      	add	r1, sp, #28
 80134fe:	4620      	mov	r0, r4
 8013500:	f7fd fa86 	bl	8010a10 <hif_receive>
 8013504:	2800      	cmp	r0, #0
 8013506:	d195      	bne.n	8013434 <m2m_ip_cb+0xa4>
			strConnMsg.sock		= strConnectReply.sock;
 8013508:	f99d 001c 	ldrsb.w	r0, [sp, #28]
 801350c:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
 8013510:	f99d 301d 	ldrsb.w	r3, [sp, #29]
 8013514:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
 8013518:	b93b      	cbnz	r3, 801352a <m2m_ip_cb+0x19a>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 801351a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801351e:	3b08      	subs	r3, #8
 8013520:	b29b      	uxth	r3, r3
 8013522:	4a4d      	ldr	r2, [pc, #308]	; (8013658 <m2m_ip_cb+0x2c8>)
 8013524:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8013528:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
 801352a:	4b4a      	ldr	r3, [pc, #296]	; (8013654 <m2m_ip_cb+0x2c4>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d080      	beq.n	8013434 <m2m_ip_cb+0xa4>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
 8013532:	4b48      	ldr	r3, [pc, #288]	; (8013654 <m2m_ip_cb+0x2c4>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	aa03      	add	r2, sp, #12
 8013538:	2105      	movs	r1, #5
 801353a:	4798      	blx	r3
	{
 801353c:	e77a      	b.n	8013434 <m2m_ip_cb+0xa4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
 801353e:	2300      	movs	r3, #0
 8013540:	2244      	movs	r2, #68	; 0x44
 8013542:	a907      	add	r1, sp, #28
 8013544:	4620      	mov	r0, r4
 8013546:	f7fd fa63 	bl	8010a10 <hif_receive>
 801354a:	2800      	cmp	r0, #0
 801354c:	f47f af72 	bne.w	8013434 <m2m_ip_cb+0xa4>
			if(gpfAppResolveCb)
 8013550:	4b43      	ldr	r3, [pc, #268]	; (8013660 <m2m_ip_cb+0x2d0>)
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	2b00      	cmp	r3, #0
 8013556:	f43f af6d 	beq.w	8013434 <m2m_ip_cb+0xa4>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
 801355a:	4b41      	ldr	r3, [pc, #260]	; (8013660 <m2m_ip_cb+0x2d0>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8013560:	a807      	add	r0, sp, #28
 8013562:	4798      	blx	r3
 8013564:	e766      	b.n	8013434 <m2m_ip_cb+0xa4>
		if(u8OpCode == SOCKET_CMD_RECVFROM)
 8013566:	2848      	cmp	r0, #72	; 0x48
 8013568:	d02a      	beq.n	80135c0 <m2m_ip_cb+0x230>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
 801356a:	2606      	movs	r6, #6
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
 801356c:	2300      	movs	r3, #0
 801356e:	2210      	movs	r2, #16
 8013570:	a903      	add	r1, sp, #12
 8013572:	4620      	mov	r0, r4
 8013574:	f7fd fa4c 	bl	8010a10 <hif_receive>
 8013578:	2800      	cmp	r0, #0
 801357a:	f47f af5b 	bne.w	8013434 <m2m_ip_cb+0xa4>
			sock			= strRecvReply.sock;
 801357e:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
 8013582:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			gastrSockets[sock].bIsRecvPending = 0;
 8013586:	4a34      	ldr	r2, [pc, #208]	; (8013658 <m2m_ip_cb+0x2c8>)
 8013588:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 801358c:	2300      	movs	r3, #0
 801358e:	7313      	strb	r3, [r2, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
 8013590:	f9bd c014 	ldrsh.w	ip, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
 8013594:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
 8013598:	f8bd 700e 	ldrh.w	r7, [sp, #14]
 801359c:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
 80135a0:	9f04      	ldr	r7, [sp, #16]
 80135a2:	970a      	str	r7, [sp, #40]	; 0x28
			if(u16SessionID == gastrSockets[sock].u16SessionID)
 80135a4:	88d2      	ldrh	r2, [r2, #6]
 80135a6:	b292      	uxth	r2, r2
 80135a8:	428a      	cmp	r2, r1
 80135aa:	d00b      	beq.n	80135c4 <m2m_ip_cb+0x234>
				if(u16ReadSize < u16BufferSize)
 80135ac:	2d10      	cmp	r5, #16
 80135ae:	f67f af41 	bls.w	8013434 <m2m_ip_cb+0xa4>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
 80135b2:	2301      	movs	r3, #1
 80135b4:	2200      	movs	r2, #0
 80135b6:	4611      	mov	r1, r2
 80135b8:	4610      	mov	r0, r2
 80135ba:	f7fd fa29 	bl	8010a10 <hif_receive>
	{
 80135be:	e739      	b.n	8013434 <m2m_ip_cb+0xa4>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
 80135c0:	2609      	movs	r6, #9
 80135c2:	e7d3      	b.n	801356c <m2m_ip_cb+0x1dc>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
 80135c4:	f1bc 0f00 	cmp.w	ip, #0
 80135c8:	dd01      	ble.n	80135ce <m2m_ip_cb+0x23e>
 80135ca:	45ac      	cmp	ip, r5
 80135cc:	db0e      	blt.n	80135ec <m2m_ip_cb+0x25c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
 80135ce:	f8ad c020 	strh.w	ip, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
 80135d2:	2300      	movs	r3, #0
 80135d4:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
 80135d6:	4b1f      	ldr	r3, [pc, #124]	; (8013654 <m2m_ip_cb+0x2c4>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	f43f af2a 	beq.w	8013434 <m2m_ip_cb+0xa4>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
 80135e0:	4b1c      	ldr	r3, [pc, #112]	; (8013654 <m2m_ip_cb+0x2c4>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	aa07      	add	r2, sp, #28
 80135e6:	4631      	mov	r1, r6
 80135e8:	4798      	blx	r3
 80135ea:	e723      	b.n	8013434 <m2m_ip_cb+0xa4>
					u16ReadSize = (uint16)s16RecvStatus;
 80135ec:	fa1f f28c 	uxth.w	r2, ip
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
 80135f0:	9200      	str	r2, [sp, #0]
 80135f2:	4423      	add	r3, r4
 80135f4:	4632      	mov	r2, r6
 80135f6:	a907      	add	r1, sp, #28
 80135f8:	f7ff fe6a 	bl	80132d0 <Socket_ReadSocketData>
 80135fc:	e71a      	b.n	8013434 <m2m_ip_cb+0xa4>
		if(u8OpCode == SOCKET_CMD_SENDTO)
 80135fe:	2847      	cmp	r0, #71	; 0x47
 8013600:	d024      	beq.n	801364c <m2m_ip_cb+0x2bc>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
 8013602:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
 8013604:	2300      	movs	r3, #0
 8013606:	2208      	movs	r2, #8
 8013608:	a907      	add	r1, sp, #28
 801360a:	4620      	mov	r0, r4
 801360c:	f7fd fa00 	bl	8010a10 <hif_receive>
 8013610:	2800      	cmp	r0, #0
 8013612:	f47f af0f 	bne.w	8013434 <m2m_ip_cb+0xa4>
			sock = strReply.sock;
 8013616:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
 801361a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
 801361e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013622:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
 8013626:	4b0c      	ldr	r3, [pc, #48]	; (8013658 <m2m_ip_cb+0x2c8>)
 8013628:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801362c:	88db      	ldrh	r3, [r3, #6]
 801362e:	b29b      	uxth	r3, r3
 8013630:	4293      	cmp	r3, r2
 8013632:	f47f aeff 	bne.w	8013434 <m2m_ip_cb+0xa4>
				if(gpfAppSocketCb)
 8013636:	4b07      	ldr	r3, [pc, #28]	; (8013654 <m2m_ip_cb+0x2c4>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	2b00      	cmp	r3, #0
 801363c:	f43f aefa 	beq.w	8013434 <m2m_ip_cb+0xa4>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
 8013640:	4b04      	ldr	r3, [pc, #16]	; (8013654 <m2m_ip_cb+0x2c4>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	aa03      	add	r2, sp, #12
 8013646:	4629      	mov	r1, r5
 8013648:	4798      	blx	r3
	{
 801364a:	e6f3      	b.n	8013434 <m2m_ip_cb+0xa4>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
 801364c:	2508      	movs	r5, #8
 801364e:	e7d9      	b.n	8013604 <m2m_ip_cb+0x274>
 8013650:	20005b1c 	.word	0x20005b1c
 8013654:	20005b18 	.word	0x20005b18
 8013658:	20005a68 	.word	0x20005a68
 801365c:	2000241a 	.word	0x2000241a
 8013660:	20005b20 	.word	0x20005b20
 8013664:	f3af 8000 	nop.w
 8013668:	f3af 8000 	nop.w
 801366c:	f3af 8000 	nop.w

08013670 <socketInit>:
{
 8013670:	b508      	push	{r3, lr}
	if(gbSocketInit == 0)
 8013672:	4b09      	ldr	r3, [pc, #36]	; (8013698 <socketInit+0x28>)
 8013674:	789b      	ldrb	r3, [r3, #2]
 8013676:	b103      	cbz	r3, 801367a <socketInit+0xa>
}
 8013678:	bd08      	pop	{r3, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
 801367a:	22b0      	movs	r2, #176	; 0xb0
 801367c:	2100      	movs	r1, #0
 801367e:	4807      	ldr	r0, [pc, #28]	; (801369c <socketInit+0x2c>)
 8013680:	f7fc fee6 	bl	8010450 <m2m_memset>
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
 8013684:	4906      	ldr	r1, [pc, #24]	; (80136a0 <socketInit+0x30>)
 8013686:	2002      	movs	r0, #2
 8013688:	f7fd fa02 	bl	8010a90 <hif_register_cb>
		gbSocketInit	= 1;
 801368c:	4b02      	ldr	r3, [pc, #8]	; (8013698 <socketInit+0x28>)
 801368e:	2201      	movs	r2, #1
 8013690:	709a      	strb	r2, [r3, #2]
		gu16SessionID	= 0;
 8013692:	2200      	movs	r2, #0
 8013694:	801a      	strh	r2, [r3, #0]
}
 8013696:	e7ef      	b.n	8013678 <socketInit+0x8>
 8013698:	2000241a 	.word	0x2000241a
 801369c:	20005a68 	.word	0x20005a68
 80136a0:	08013391 	.word	0x08013391
 80136a4:	f3af 8000 	nop.w
 80136a8:	f3af 8000 	nop.w
 80136ac:	f3af 8000 	nop.w

080136b0 <socketDeinit>:
{
 80136b0:	b508      	push	{r3, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
 80136b2:	22b0      	movs	r2, #176	; 0xb0
 80136b4:	2100      	movs	r1, #0
 80136b6:	4807      	ldr	r0, [pc, #28]	; (80136d4 <socketDeinit+0x24>)
 80136b8:	f7fc feca 	bl	8010450 <m2m_memset>
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
 80136bc:	2100      	movs	r1, #0
 80136be:	2002      	movs	r0, #2
 80136c0:	f7fd f9e6 	bl	8010a90 <hif_register_cb>
	gpfAppSocketCb	= NULL;
 80136c4:	2300      	movs	r3, #0
 80136c6:	4a04      	ldr	r2, [pc, #16]	; (80136d8 <socketDeinit+0x28>)
 80136c8:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
 80136ca:	4a04      	ldr	r2, [pc, #16]	; (80136dc <socketDeinit+0x2c>)
 80136cc:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
 80136ce:	4a04      	ldr	r2, [pc, #16]	; (80136e0 <socketDeinit+0x30>)
 80136d0:	7093      	strb	r3, [r2, #2]
}
 80136d2:	bd08      	pop	{r3, pc}
 80136d4:	20005a68 	.word	0x20005a68
 80136d8:	20005b18 	.word	0x20005b18
 80136dc:	20005b20 	.word	0x20005b20
 80136e0:	2000241a 	.word	0x2000241a
 80136e4:	f3af 8000 	nop.w
 80136e8:	f3af 8000 	nop.w
 80136ec:	f3af 8000 	nop.w

080136f0 <registerSocketCallback>:
	gpfAppSocketCb = pfAppSocketCb;
 80136f0:	4b02      	ldr	r3, [pc, #8]	; (80136fc <registerSocketCallback+0xc>)
 80136f2:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
 80136f4:	4b02      	ldr	r3, [pc, #8]	; (8013700 <registerSocketCallback+0x10>)
 80136f6:	6019      	str	r1, [r3, #0]
}
 80136f8:	4770      	bx	lr
 80136fa:	bf00      	nop
 80136fc:	20005b18 	.word	0x20005b18
 8013700:	20005b20 	.word	0x20005b20
 8013704:	f3af 8000 	nop.w
 8013708:	f3af 8000 	nop.w
 801370c:	f3af 8000 	nop.w

08013710 <socket>:
{
 8013710:	b570      	push	{r4, r5, r6, lr}
 8013712:	b086      	sub	sp, #24
	if(u16Domain == AF_INET)
 8013714:	2802      	cmp	r0, #2
 8013716:	d175      	bne.n	8013804 <socket+0xf4>
		if(u8Type == SOCK_STREAM)
 8013718:	2901      	cmp	r1, #1
 801371a:	d01d      	beq.n	8013758 <socket+0x48>
		else if(u8Type == SOCK_DGRAM)
 801371c:	2902      	cmp	r1, #2
 801371e:	d13a      	bne.n	8013796 <socket+0x86>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 8013720:	2600      	movs	r6, #0
 8013722:	2e03      	cmp	r6, #3
 8013724:	d83d      	bhi.n	80137a2 <socket+0x92>
				u8SockID		= u8NextUdpSock;
 8013726:	4939      	ldr	r1, [pc, #228]	; (801380c <socket+0xfc>)
 8013728:	790b      	ldrb	r3, [r1, #4]
 801372a:	b2dd      	uxtb	r5, r3
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
 801372c:	790b      	ldrb	r3, [r1, #4]
 801372e:	4c38      	ldr	r4, [pc, #224]	; (8013810 <socket+0x100>)
 8013730:	eb04 1403 	add.w	r4, r4, r3, lsl #4
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
 8013734:	790b      	ldrb	r3, [r1, #4]
 8013736:	3301      	adds	r3, #1
 8013738:	4258      	negs	r0, r3
 801373a:	f003 0303 	and.w	r3, r3, #3
 801373e:	f000 0003 	and.w	r0, r0, #3
 8013742:	bf58      	it	pl
 8013744:	4243      	negpl	r3, r0
 8013746:	b2db      	uxtb	r3, r3
 8013748:	710b      	strb	r3, [r1, #4]
				if(!pstrSock->bIsUsed)
 801374a:	7aa3      	ldrb	r3, [r4, #10]
 801374c:	b333      	cbz	r3, 801379c <socket+0x8c>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 801374e:	3601      	adds	r6, #1
 8013750:	b2f6      	uxtb	r6, r6
 8013752:	e7e6      	b.n	8013722 <socket+0x12>
					sock = (SOCKET)u8SockID;
 8013754:	b26d      	sxtb	r5, r5
					break;
 8013756:	e026      	b.n	80137a6 <socket+0x96>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 8013758:	2000      	movs	r0, #0
 801375a:	2806      	cmp	r0, #6
 801375c:	d818      	bhi.n	8013790 <socket+0x80>
				u8SockID	= u8NextTcpSock;
 801375e:	4e2b      	ldr	r6, [pc, #172]	; (801380c <socket+0xfc>)
 8013760:	78f5      	ldrb	r5, [r6, #3]
 8013762:	b2ed      	uxtb	r5, r5
				pstrSock	= &gastrSockets[u8NextTcpSock];
 8013764:	78f3      	ldrb	r3, [r6, #3]
 8013766:	4c2b      	ldr	r4, [pc, #172]	; (8013814 <socket+0x104>)
 8013768:	eb04 1403 	add.w	r4, r4, r3, lsl #4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
 801376c:	78f1      	ldrb	r1, [r6, #3]
 801376e:	3101      	adds	r1, #1
 8013770:	4b29      	ldr	r3, [pc, #164]	; (8013818 <socket+0x108>)
 8013772:	fb83 c301 	smull	ip, r3, r3, r1
 8013776:	440b      	add	r3, r1
 8013778:	109b      	asrs	r3, r3, #2
 801377a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801377e:	1acb      	subs	r3, r1, r3
 8013780:	b2db      	uxtb	r3, r3
 8013782:	70f3      	strb	r3, [r6, #3]
				if(!pstrSock->bIsUsed)
 8013784:	7aa3      	ldrb	r3, [r4, #10]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d0e4      	beq.n	8013754 <socket+0x44>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 801378a:	3001      	adds	r0, #1
 801378c:	b2c0      	uxtb	r0, r0
 801378e:	e7e4      	b.n	801375a <socket+0x4a>
	SOCKET					sock = -1;
 8013790:	f04f 35ff 	mov.w	r5, #4294967295
 8013794:	e007      	b.n	80137a6 <socket+0x96>
 8013796:	f04f 35ff 	mov.w	r5, #4294967295
 801379a:	e021      	b.n	80137e0 <socket+0xd0>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
 801379c:	3507      	adds	r5, #7
 801379e:	b26d      	sxtb	r5, r5
					break;
 80137a0:	e001      	b.n	80137a6 <socket+0x96>
	SOCKET					sock = -1;
 80137a2:	f04f 35ff 	mov.w	r5, #4294967295
		if(sock >= 0)
 80137a6:	2d00      	cmp	r5, #0
 80137a8:	db1a      	blt.n	80137e0 <socket+0xd0>
 80137aa:	4616      	mov	r6, r2
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
 80137ac:	2210      	movs	r2, #16
 80137ae:	2100      	movs	r1, #0
 80137b0:	4620      	mov	r0, r4
 80137b2:	f7fc fe4d 	bl	8010450 <m2m_memset>
			pstrSock->bIsUsed = 1;
 80137b6:	2301      	movs	r3, #1
 80137b8:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
 80137ba:	4a14      	ldr	r2, [pc, #80]	; (801380c <socket+0xfc>)
 80137bc:	8813      	ldrh	r3, [r2, #0]
 80137be:	3301      	adds	r3, #1
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
 80137c4:	8813      	ldrh	r3, [r2, #0]
 80137c6:	b29b      	uxth	r3, r3
 80137c8:	b91b      	cbnz	r3, 80137d2 <socket+0xc2>
				++gu16SessionID;
 80137ca:	8813      	ldrh	r3, [r2, #0]
 80137cc:	3301      	adds	r3, #1
 80137ce:	b29b      	uxth	r3, r3
 80137d0:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
 80137d2:	4b0e      	ldr	r3, [pc, #56]	; (801380c <socket+0xfc>)
 80137d4:	881b      	ldrh	r3, [r3, #0]
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	80e3      	strh	r3, [r4, #6]
			if(u8Flags & SOCKET_FLAGS_SSL)
 80137da:	f016 0f01 	tst.w	r6, #1
 80137de:	d102      	bne.n	80137e6 <socket+0xd6>
}
 80137e0:	4628      	mov	r0, r5
 80137e2:	b006      	add	sp, #24
 80137e4:	bd70      	pop	{r4, r5, r6, pc}
				strSSLCreate.sslSock = sock;
 80137e6:	aa06      	add	r2, sp, #24
 80137e8:	f802 5d04 	strb.w	r5, [r2, #-4]!
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
 80137ec:	2321      	movs	r3, #33	; 0x21
 80137ee:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
 80137f0:	2300      	movs	r3, #0
 80137f2:	9302      	str	r3, [sp, #8]
 80137f4:	9301      	str	r3, [sp, #4]
 80137f6:	9300      	str	r3, [sp, #0]
 80137f8:	2304      	movs	r3, #4
 80137fa:	2150      	movs	r1, #80	; 0x50
 80137fc:	2002      	movs	r0, #2
 80137fe:	f7fd f817 	bl	8010830 <hif_send>
 8013802:	e7ed      	b.n	80137e0 <socket+0xd0>
	SOCKET					sock = -1;
 8013804:	f04f 35ff 	mov.w	r5, #4294967295
 8013808:	e7ea      	b.n	80137e0 <socket+0xd0>
 801380a:	bf00      	nop
 801380c:	2000241a 	.word	0x2000241a
 8013810:	20005ad8 	.word	0x20005ad8
 8013814:	20005a68 	.word	0x20005a68
 8013818:	92492493 	.word	0x92492493
 801381c:	f3af 8000 	nop.w

08013820 <bind>:
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
 8013820:	2900      	cmp	r1, #0
 8013822:	d035      	beq.n	8013890 <bind+0x70>
{
 8013824:	b530      	push	{r4, r5, lr}
 8013826:	b089      	sub	sp, #36	; 0x24
 8013828:	460c      	mov	r4, r1
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
 801382a:	2800      	cmp	r0, #0
 801382c:	db34      	blt.n	8013898 <bind+0x78>
 801382e:	4b1f      	ldr	r3, [pc, #124]	; (80138ac <bind+0x8c>)
 8013830:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8013834:	7a9b      	ldrb	r3, [r3, #10]
 8013836:	b2db      	uxtb	r3, r3
 8013838:	2b01      	cmp	r3, #1
 801383a:	d130      	bne.n	801389e <bind+0x7e>
 801383c:	b392      	cbz	r2, 80138a4 <bind+0x84>
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 801383e:	4b1b      	ldr	r3, [pc, #108]	; (80138ac <bind+0x8c>)
 8013840:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8013844:	7adb      	ldrb	r3, [r3, #11]
 8013846:	f013 0f01 	tst.w	r3, #1
 801384a:	d11f      	bne.n	801388c <bind+0x6c>
		uint8				u8CMD = SOCKET_CMD_BIND;
 801384c:	2541      	movs	r5, #65	; 0x41
 801384e:	4621      	mov	r1, r4
 8013850:	4604      	mov	r4, r0
		strBind.sock = sock;
 8013852:	f88d 001c 	strb.w	r0, [sp, #28]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
 8013856:	2208      	movs	r2, #8
 8013858:	a805      	add	r0, sp, #20
 801385a:	f7fc fdd9 	bl	8010410 <m2m_memcpy>
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
 801385e:	4813      	ldr	r0, [pc, #76]	; (80138ac <bind+0x8c>)
 8013860:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013864:	88c3      	ldrh	r3, [r0, #6]
 8013866:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
 801386a:	2300      	movs	r3, #0
 801386c:	9302      	str	r3, [sp, #8]
 801386e:	9301      	str	r3, [sp, #4]
 8013870:	9300      	str	r3, [sp, #0]
 8013872:	230c      	movs	r3, #12
 8013874:	aa05      	add	r2, sp, #20
 8013876:	4629      	mov	r1, r5
 8013878:	2002      	movs	r0, #2
 801387a:	f7fc ffd9 	bl	8010830 <hif_send>
		if(s8Ret != SOCK_ERR_NO_ERROR)
 801387e:	4603      	mov	r3, r0
 8013880:	b108      	cbz	r0, 8013886 <bind+0x66>
			s8Ret = SOCK_ERR_INVALID;
 8013882:	f06f 0308 	mvn.w	r3, #8
}
 8013886:	4618      	mov	r0, r3
 8013888:	b009      	add	sp, #36	; 0x24
 801388a:	bd30      	pop	{r4, r5, pc}
			u8CMD = SOCKET_CMD_SSL_BIND;
 801388c:	2554      	movs	r5, #84	; 0x54
 801388e:	e7de      	b.n	801384e <bind+0x2e>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 8013890:	f06f 0305 	mvn.w	r3, #5
}
 8013894:	4618      	mov	r0, r3
 8013896:	4770      	bx	lr
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 8013898:	f06f 0305 	mvn.w	r3, #5
 801389c:	e7f3      	b.n	8013886 <bind+0x66>
 801389e:	f06f 0305 	mvn.w	r3, #5
 80138a2:	e7f0      	b.n	8013886 <bind+0x66>
 80138a4:	f06f 0305 	mvn.w	r3, #5
 80138a8:	e7ed      	b.n	8013886 <bind+0x66>
 80138aa:	bf00      	nop
 80138ac:	20005a68 	.word	0x20005a68

080138b0 <listen>:
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
 80138b0:	2800      	cmp	r0, #0
 80138b2:	db24      	blt.n	80138fe <listen+0x4e>
 80138b4:	4b15      	ldr	r3, [pc, #84]	; (801390c <listen+0x5c>)
 80138b6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80138ba:	7a9b      	ldrb	r3, [r3, #10]
 80138bc:	b2db      	uxtb	r3, r3
 80138be:	2b01      	cmp	r3, #1
 80138c0:	d120      	bne.n	8013904 <listen+0x54>
{
 80138c2:	b500      	push	{lr}
 80138c4:	b087      	sub	sp, #28
		strListen.sock = sock;
 80138c6:	f88d 0014 	strb.w	r0, [sp, #20]
		strListen.u8BackLog = backlog;
 80138ca:	f88d 1015 	strb.w	r1, [sp, #21]
		strListen.u16SessionID		= gastrSockets[sock].u16SessionID;
 80138ce:	4b0f      	ldr	r3, [pc, #60]	; (801390c <listen+0x5c>)
 80138d0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80138d4:	88c3      	ldrh	r3, [r0, #6]
 80138d6:	f8ad 3016 	strh.w	r3, [sp, #22]
		s8Ret = SOCKET_REQUEST(SOCKET_CMD_LISTEN, (uint8*)&strListen, sizeof(tstrListenCmd), NULL, 0, 0);
 80138da:	2300      	movs	r3, #0
 80138dc:	9302      	str	r3, [sp, #8]
 80138de:	9301      	str	r3, [sp, #4]
 80138e0:	9300      	str	r3, [sp, #0]
 80138e2:	2304      	movs	r3, #4
 80138e4:	aa05      	add	r2, sp, #20
 80138e6:	2142      	movs	r1, #66	; 0x42
 80138e8:	2002      	movs	r0, #2
 80138ea:	f7fc ffa1 	bl	8010830 <hif_send>
		if(s8Ret != SOCK_ERR_NO_ERROR)
 80138ee:	4603      	mov	r3, r0
 80138f0:	b108      	cbz	r0, 80138f6 <listen+0x46>
			s8Ret = SOCK_ERR_INVALID;
 80138f2:	f06f 0308 	mvn.w	r3, #8
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	b007      	add	sp, #28
 80138fa:	f85d fb04 	ldr.w	pc, [sp], #4
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 80138fe:	f06f 0305 	mvn.w	r3, #5
 8013902:	e001      	b.n	8013908 <listen+0x58>
 8013904:	f06f 0305 	mvn.w	r3, #5
}
 8013908:	4618      	mov	r0, r3
 801390a:	4770      	bx	lr
 801390c:	20005a68 	.word	0x20005a68

08013910 <accept>:
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
 8013910:	2800      	cmp	r0, #0
 8013912:	db0b      	blt.n	801392c <accept+0x1c>
 8013914:	4b07      	ldr	r3, [pc, #28]	; (8013934 <accept+0x24>)
 8013916:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 801391a:	7a83      	ldrb	r3, [r0, #10]
 801391c:	b2db      	uxtb	r3, r3
 801391e:	2b01      	cmp	r3, #1
 8013920:	d101      	bne.n	8013926 <accept+0x16>
		s8Ret = SOCK_ERR_NO_ERROR;
 8013922:	2000      	movs	r0, #0
}
 8013924:	4770      	bx	lr
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 8013926:	f06f 0005 	mvn.w	r0, #5
 801392a:	4770      	bx	lr
 801392c:	f06f 0005 	mvn.w	r0, #5
 8013930:	4770      	bx	lr
 8013932:	bf00      	nop
 8013934:	20005a68 	.word	0x20005a68
 8013938:	f3af 8000 	nop.w
 801393c:	f3af 8000 	nop.w

08013940 <connect>:
{
 8013940:	b530      	push	{r4, r5, lr}
 8013942:	b089      	sub	sp, #36	; 0x24
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
 8013944:	1e04      	subs	r4, r0, #0
 8013946:	db37      	blt.n	80139b8 <connect+0x78>
 8013948:	2900      	cmp	r1, #0
 801394a:	d038      	beq.n	80139be <connect+0x7e>
 801394c:	4b20      	ldr	r3, [pc, #128]	; (80139d0 <connect+0x90>)
 801394e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8013952:	7a9b      	ldrb	r3, [r3, #10]
 8013954:	b2db      	uxtb	r3, r3
 8013956:	2b01      	cmp	r3, #1
 8013958:	d134      	bne.n	80139c4 <connect+0x84>
 801395a:	2a00      	cmp	r2, #0
 801395c:	d035      	beq.n	80139ca <connect+0x8a>
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
 801395e:	4b1c      	ldr	r3, [pc, #112]	; (80139d0 <connect+0x90>)
 8013960:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8013964:	7adb      	ldrb	r3, [r3, #11]
 8013966:	f013 0f01 	tst.w	r3, #1
 801396a:	d023      	beq.n	80139b4 <connect+0x74>
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
 801396c:	4b18      	ldr	r3, [pc, #96]	; (80139d0 <connect+0x90>)
 801396e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8013972:	7adb      	ldrb	r3, [r3, #11]
 8013974:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
 8013978:	254b      	movs	r5, #75	; 0x4b
		strConnect.sock = sock;
 801397a:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
 801397e:	2208      	movs	r2, #8
 8013980:	a805      	add	r0, sp, #20
 8013982:	f7fc fd45 	bl	8010410 <m2m_memcpy>
		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
 8013986:	4812      	ldr	r0, [pc, #72]	; (80139d0 <connect+0x90>)
 8013988:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801398c:	88c3      	ldrh	r3, [r0, #6]
 801398e:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
 8013992:	2300      	movs	r3, #0
 8013994:	9302      	str	r3, [sp, #8]
 8013996:	9301      	str	r3, [sp, #4]
 8013998:	9300      	str	r3, [sp, #0]
 801399a:	230c      	movs	r3, #12
 801399c:	aa05      	add	r2, sp, #20
 801399e:	4629      	mov	r1, r5
 80139a0:	2002      	movs	r0, #2
 80139a2:	f7fc ff45 	bl	8010830 <hif_send>
		if(s8Ret != SOCK_ERR_NO_ERROR)
 80139a6:	4603      	mov	r3, r0
 80139a8:	b108      	cbz	r0, 80139ae <connect+0x6e>
			s8Ret = SOCK_ERR_INVALID;
 80139aa:	f06f 0308 	mvn.w	r3, #8
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	b009      	add	sp, #36	; 0x24
 80139b2:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
 80139b4:	2544      	movs	r5, #68	; 0x44
 80139b6:	e7e0      	b.n	801397a <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 80139b8:	f06f 0305 	mvn.w	r3, #5
 80139bc:	e7f7      	b.n	80139ae <connect+0x6e>
 80139be:	f06f 0305 	mvn.w	r3, #5
 80139c2:	e7f4      	b.n	80139ae <connect+0x6e>
 80139c4:	f06f 0305 	mvn.w	r3, #5
 80139c8:	e7f1      	b.n	80139ae <connect+0x6e>
 80139ca:	f06f 0305 	mvn.w	r3, #5
 80139ce:	e7ee      	b.n	80139ae <connect+0x6e>
 80139d0:	20005a68 	.word	0x20005a68
 80139d4:	f3af 8000 	nop.w
 80139d8:	f3af 8000 	nop.w
 80139dc:	f3af 8000 	nop.w

080139e0 <send>:
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
 80139e0:	2800      	cmp	r0, #0
 80139e2:	db3c      	blt.n	8013a5e <send+0x7e>
 80139e4:	2900      	cmp	r1, #0
 80139e6:	d03d      	beq.n	8013a64 <send+0x84>
 80139e8:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
 80139ec:	d83d      	bhi.n	8013a6a <send+0x8a>
 80139ee:	4b22      	ldr	r3, [pc, #136]	; (8013a78 <send+0x98>)
 80139f0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80139f4:	7a9b      	ldrb	r3, [r3, #10]
 80139f6:	b2db      	uxtb	r3, r3
 80139f8:	2b01      	cmp	r3, #1
 80139fa:	d139      	bne.n	8013a70 <send+0x90>
{
 80139fc:	b510      	push	{r4, lr}
 80139fe:	b088      	sub	sp, #32
		strSend.sock			= sock;
 8013a00:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
 8013a04:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
 8013a08:	4b1b      	ldr	r3, [pc, #108]	; (8013a78 <send+0x98>)
 8013a0a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8013a0e:	88db      	ldrh	r3, [r3, #6]
 8013a10:	f8ad 301c 	strh.w	r3, [sp, #28]
		if(sock >= TCP_SOCK_MAX)
 8013a14:	2806      	cmp	r0, #6
 8013a16:	dc1e      	bgt.n	8013a56 <send+0x76>
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
 8013a18:	2450      	movs	r4, #80	; 0x50
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 8013a1a:	4b17      	ldr	r3, [pc, #92]	; (8013a78 <send+0x98>)
 8013a1c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8013a20:	7adb      	ldrb	r3, [r3, #11]
 8013a22:	f013 0f01 	tst.w	r3, #1
 8013a26:	d018      	beq.n	8013a5a <send+0x7a>
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
 8013a28:	4b13      	ldr	r3, [pc, #76]	; (8013a78 <send+0x98>)
 8013a2a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8013a2e:	8904      	ldrh	r4, [r0, #8]
 8013a30:	b2a4      	uxth	r4, r4
			u8Cmd			= SOCKET_CMD_SSL_SEND;
 8013a32:	204c      	movs	r0, #76	; 0x4c
		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
 8013a34:	9402      	str	r4, [sp, #8]
 8013a36:	9201      	str	r2, [sp, #4]
 8013a38:	9100      	str	r1, [sp, #0]
 8013a3a:	2310      	movs	r3, #16
 8013a3c:	eb0d 0203 	add.w	r2, sp, r3
 8013a40:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 8013a44:	2002      	movs	r0, #2
 8013a46:	f7fc fef3 	bl	8010830 <hif_send>
 8013a4a:	b200      	sxth	r0, r0
		if(s16Ret != SOCK_ERR_NO_ERROR)
 8013a4c:	b108      	cbz	r0, 8013a52 <send+0x72>
			s16Ret = SOCK_ERR_BUFFER_FULL;
 8013a4e:	f06f 000d 	mvn.w	r0, #13
}
 8013a52:	b008      	add	sp, #32
 8013a54:	bd10      	pop	{r4, pc}
			u16DataOffset = UDP_TX_PACKET_OFFSET;
 8013a56:	2444      	movs	r4, #68	; 0x44
 8013a58:	e7df      	b.n	8013a1a <send+0x3a>
		u8Cmd			= SOCKET_CMD_SEND;
 8013a5a:	2045      	movs	r0, #69	; 0x45
 8013a5c:	e7ea      	b.n	8013a34 <send+0x54>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
 8013a5e:	f06f 0005 	mvn.w	r0, #5
 8013a62:	4770      	bx	lr
 8013a64:	f06f 0005 	mvn.w	r0, #5
 8013a68:	4770      	bx	lr
 8013a6a:	f06f 0005 	mvn.w	r0, #5
 8013a6e:	4770      	bx	lr
 8013a70:	f06f 0005 	mvn.w	r0, #5
}
 8013a74:	4770      	bx	lr
 8013a76:	bf00      	nop
 8013a78:	20005a68 	.word	0x20005a68
 8013a7c:	f3af 8000 	nop.w

08013a80 <sendto>:
{
 8013a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a82:	b089      	sub	sp, #36	; 0x24
 8013a84:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
 8013a86:	1e04      	subs	r4, r0, #0
 8013a88:	db3d      	blt.n	8013b06 <sendto+0x86>
 8013a8a:	2900      	cmp	r1, #0
 8013a8c:	d03e      	beq.n	8013b0c <sendto+0x8c>
 8013a8e:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
 8013a92:	d83e      	bhi.n	8013b12 <sendto+0x92>
 8013a94:	4b23      	ldr	r3, [pc, #140]	; (8013b24 <sendto+0xa4>)
 8013a96:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8013a9a:	7a9b      	ldrb	r3, [r3, #10]
 8013a9c:	b2db      	uxtb	r3, r3
 8013a9e:	2b01      	cmp	r3, #1
 8013aa0:	d13a      	bne.n	8013b18 <sendto+0x98>
		if(gastrSockets[sock].bIsUsed)
 8013aa2:	4b20      	ldr	r3, [pc, #128]	; (8013b24 <sendto+0xa4>)
 8013aa4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8013aa8:	7a9b      	ldrb	r3, [r3, #10]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d037      	beq.n	8013b1e <sendto+0x9e>
 8013aae:	4616      	mov	r6, r2
 8013ab0:	460f      	mov	r7, r1
			m2m_memset((uint8*)&strSendTo, 0, sizeof(tstrSendCmd));
 8013ab2:	2210      	movs	r2, #16
 8013ab4:	2100      	movs	r1, #0
 8013ab6:	eb0d 0002 	add.w	r0, sp, r2
 8013aba:	f7fc fcc9 	bl	8010450 <m2m_memset>
			strSendTo.sock			= sock;
 8013abe:	f88d 4010 	strb.w	r4, [sp, #16]
			strSendTo.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
 8013ac2:	f8ad 6012 	strh.w	r6, [sp, #18]
			strSendTo.u16SessionID	= gastrSockets[sock].u16SessionID;
 8013ac6:	4817      	ldr	r0, [pc, #92]	; (8013b24 <sendto+0xa4>)
 8013ac8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013acc:	88c3      	ldrh	r3, [r0, #6]
 8013ace:	f8ad 301c 	strh.w	r3, [sp, #28]
			if(pstrDestAddr != NULL)
 8013ad2:	b13d      	cbz	r5, 8013ae4 <sendto+0x64>
				strSendTo.strAddr.u16Family	= pstrAddr->sin_family;
 8013ad4:	882b      	ldrh	r3, [r5, #0]
 8013ad6:	f8ad 3014 	strh.w	r3, [sp, #20]
				strSendTo.strAddr.u16Port	= pstrAddr->sin_port;
 8013ada:	886b      	ldrh	r3, [r5, #2]
 8013adc:	f8ad 3016 	strh.w	r3, [sp, #22]
				strSendTo.strAddr.u32IPAddr	= pstrAddr->sin_addr.s_addr;
 8013ae0:	686b      	ldr	r3, [r5, #4]
 8013ae2:	9306      	str	r3, [sp, #24]
			s16Ret = SOCKET_REQUEST(SOCKET_CMD_SENDTO|M2M_REQ_DATA_PKT, (uint8*)&strSendTo,  sizeof(tstrSendCmd),
 8013ae4:	2344      	movs	r3, #68	; 0x44
 8013ae6:	9302      	str	r3, [sp, #8]
 8013ae8:	9601      	str	r6, [sp, #4]
 8013aea:	9700      	str	r7, [sp, #0]
 8013aec:	2310      	movs	r3, #16
 8013aee:	eb0d 0203 	add.w	r2, sp, r3
 8013af2:	21c7      	movs	r1, #199	; 0xc7
 8013af4:	2002      	movs	r0, #2
 8013af6:	f7fc fe9b 	bl	8010830 <hif_send>
 8013afa:	b200      	sxth	r0, r0
			if(s16Ret != SOCK_ERR_NO_ERROR)
 8013afc:	b108      	cbz	r0, 8013b02 <sendto+0x82>
				s16Ret = SOCK_ERR_BUFFER_FULL;
 8013afe:	f06f 000d 	mvn.w	r0, #13
}
 8013b02:	b009      	add	sp, #36	; 0x24
 8013b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
 8013b06:	f06f 0005 	mvn.w	r0, #5
 8013b0a:	e7fa      	b.n	8013b02 <sendto+0x82>
 8013b0c:	f06f 0005 	mvn.w	r0, #5
 8013b10:	e7f7      	b.n	8013b02 <sendto+0x82>
 8013b12:	f06f 0005 	mvn.w	r0, #5
 8013b16:	e7f4      	b.n	8013b02 <sendto+0x82>
 8013b18:	f06f 0005 	mvn.w	r0, #5
 8013b1c:	e7f1      	b.n	8013b02 <sendto+0x82>
 8013b1e:	f06f 0005 	mvn.w	r0, #5
 8013b22:	e7ee      	b.n	8013b02 <sendto+0x82>
 8013b24:	20005a68 	.word	0x20005a68
 8013b28:	f3af 8000 	nop.w
 8013b2c:	f3af 8000 	nop.w

08013b30 <recv>:
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
 8013b30:	2800      	cmp	r0, #0
 8013b32:	db38      	blt.n	8013ba6 <recv+0x76>
 8013b34:	2900      	cmp	r1, #0
 8013b36:	d039      	beq.n	8013bac <recv+0x7c>
 8013b38:	2a00      	cmp	r2, #0
 8013b3a:	d03a      	beq.n	8013bb2 <recv+0x82>
{
 8013b3c:	b570      	push	{r4, r5, r6, lr}
 8013b3e:	b086      	sub	sp, #24
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
 8013b40:	4c20      	ldr	r4, [pc, #128]	; (8013bc4 <recv+0x94>)
 8013b42:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8013b46:	7aa4      	ldrb	r4, [r4, #10]
 8013b48:	b2e4      	uxtb	r4, r4
 8013b4a:	2c01      	cmp	r4, #1
 8013b4c:	d134      	bne.n	8013bb8 <recv+0x88>
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
 8013b4e:	4e1d      	ldr	r6, [pc, #116]	; (8013bc4 <recv+0x94>)
 8013b50:	0105      	lsls	r5, r0, #4
 8013b52:	1974      	adds	r4, r6, r5
 8013b54:	5171      	str	r1, [r6, r5]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
 8013b56:	80a2      	strh	r2, [r4, #4]
		if(!gastrSockets[sock].bIsRecvPending)
 8013b58:	7b22      	ldrb	r2, [r4, #12]
 8013b5a:	bb82      	cbnz	r2, 8013bbe <recv+0x8e>
			gastrSockets[sock].bIsRecvPending = 1;
 8013b5c:	2101      	movs	r1, #1
 8013b5e:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 8013b60:	7ae2      	ldrb	r2, [r4, #11]
 8013b62:	f012 0f01 	tst.w	r2, #1
 8013b66:	d11a      	bne.n	8013b9e <recv+0x6e>
			uint8		u8Cmd = SOCKET_CMD_RECV;
 8013b68:	2146      	movs	r1, #70	; 0x46
			if(u32Timeoutmsec == 0)
 8013b6a:	b9d3      	cbnz	r3, 8013ba2 <recv+0x72>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
 8013b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b70:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
 8013b72:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
 8013b76:	4b13      	ldr	r3, [pc, #76]	; (8013bc4 <recv+0x94>)
 8013b78:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8013b7c:	88c3      	ldrh	r3, [r0, #6]
 8013b7e:	f8ad 3016 	strh.w	r3, [sp, #22]
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
 8013b82:	2300      	movs	r3, #0
 8013b84:	9302      	str	r3, [sp, #8]
 8013b86:	9301      	str	r3, [sp, #4]
 8013b88:	9300      	str	r3, [sp, #0]
 8013b8a:	2308      	movs	r3, #8
 8013b8c:	aa04      	add	r2, sp, #16
 8013b8e:	2002      	movs	r0, #2
 8013b90:	f7fc fe4e 	bl	8010830 <hif_send>
 8013b94:	b200      	sxth	r0, r0
			if(s16Ret != SOCK_ERR_NO_ERROR)
 8013b96:	b198      	cbz	r0, 8013bc0 <recv+0x90>
				s16Ret = SOCK_ERR_BUFFER_FULL;
 8013b98:	f06f 000d 	mvn.w	r0, #13
 8013b9c:	e010      	b.n	8013bc0 <recv+0x90>
				u8Cmd = SOCKET_CMD_SSL_RECV;
 8013b9e:	214d      	movs	r1, #77	; 0x4d
 8013ba0:	e7e3      	b.n	8013b6a <recv+0x3a>
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
 8013ba2:	9304      	str	r3, [sp, #16]
 8013ba4:	e7e5      	b.n	8013b72 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
 8013ba6:	f06f 0005 	mvn.w	r0, #5
 8013baa:	4770      	bx	lr
 8013bac:	f06f 0005 	mvn.w	r0, #5
 8013bb0:	4770      	bx	lr
 8013bb2:	f06f 0005 	mvn.w	r0, #5
}
 8013bb6:	4770      	bx	lr
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
 8013bb8:	f06f 0005 	mvn.w	r0, #5
 8013bbc:	e000      	b.n	8013bc0 <recv+0x90>
		s16Ret = SOCK_ERR_NO_ERROR;
 8013bbe:	2000      	movs	r0, #0
}
 8013bc0:	b006      	add	sp, #24
 8013bc2:	bd70      	pop	{r4, r5, r6, pc}
 8013bc4:	20005a68 	.word	0x20005a68
 8013bc8:	f3af 8000 	nop.w
 8013bcc:	f3af 8000 	nop.w

08013bd0 <close>:
{
 8013bd0:	b530      	push	{r4, r5, lr}
 8013bd2:	b087      	sub	sp, #28
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
 8013bd4:	1e04      	subs	r4, r0, #0
 8013bd6:	db2f      	blt.n	8013c38 <close+0x68>
 8013bd8:	4b1a      	ldr	r3, [pc, #104]	; (8013c44 <close+0x74>)
 8013bda:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8013bde:	7a9b      	ldrb	r3, [r3, #10]
 8013be0:	b2db      	uxtb	r3, r3
 8013be2:	2b01      	cmp	r3, #1
 8013be4:	d12b      	bne.n	8013c3e <close+0x6e>
		strclose.sock = sock;
 8013be6:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
 8013bea:	4b16      	ldr	r3, [pc, #88]	; (8013c44 <close+0x74>)
 8013bec:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8013bf0:	88da      	ldrh	r2, [r3, #6]
 8013bf2:	f8ad 2016 	strh.w	r2, [sp, #22]
		gastrSockets[sock].bIsUsed = 0;
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
 8013bfa:	80da      	strh	r2, [r3, #6]
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 8013bfc:	7adb      	ldrb	r3, [r3, #11]
 8013bfe:	f013 0f01 	tst.w	r3, #1
 8013c02:	d117      	bne.n	8013c34 <close+0x64>
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
 8013c04:	2149      	movs	r1, #73	; 0x49
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
 8013c06:	2300      	movs	r3, #0
 8013c08:	9302      	str	r3, [sp, #8]
 8013c0a:	9301      	str	r3, [sp, #4]
 8013c0c:	9300      	str	r3, [sp, #0]
 8013c0e:	2304      	movs	r3, #4
 8013c10:	aa05      	add	r2, sp, #20
 8013c12:	2002      	movs	r0, #2
 8013c14:	f7fc fe0c 	bl	8010830 <hif_send>
		if(s8Ret != SOCK_ERR_NO_ERROR)
 8013c18:	4605      	mov	r5, r0
 8013c1a:	b108      	cbz	r0, 8013c20 <close+0x50>
			s8Ret = SOCK_ERR_INVALID;
 8013c1c:	f06f 0508 	mvn.w	r5, #8
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
 8013c20:	2210      	movs	r2, #16
 8013c22:	2100      	movs	r1, #0
 8013c24:	4807      	ldr	r0, [pc, #28]	; (8013c44 <close+0x74>)
 8013c26:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013c2a:	f7fc fc11 	bl	8010450 <m2m_memset>
}
 8013c2e:	4628      	mov	r0, r5
 8013c30:	b007      	add	sp, #28
 8013c32:	bd30      	pop	{r4, r5, pc}
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
 8013c34:	214e      	movs	r1, #78	; 0x4e
 8013c36:	e7e6      	b.n	8013c06 <close+0x36>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 8013c38:	f06f 0505 	mvn.w	r5, #5
 8013c3c:	e7f7      	b.n	8013c2e <close+0x5e>
 8013c3e:	f06f 0505 	mvn.w	r5, #5
 8013c42:	e7f4      	b.n	8013c2e <close+0x5e>
 8013c44:	20005a68 	.word	0x20005a68
 8013c48:	f3af 8000 	nop.w
 8013c4c:	f3af 8000 	nop.w

08013c50 <recvfrom>:
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
 8013c50:	2800      	cmp	r0, #0
 8013c52:	db38      	blt.n	8013cc6 <recvfrom+0x76>
 8013c54:	2900      	cmp	r1, #0
 8013c56:	d039      	beq.n	8013ccc <recvfrom+0x7c>
 8013c58:	2a00      	cmp	r2, #0
 8013c5a:	d03a      	beq.n	8013cd2 <recvfrom+0x82>
{
 8013c5c:	b570      	push	{r4, r5, r6, lr}
 8013c5e:	b086      	sub	sp, #24
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
 8013c60:	4c21      	ldr	r4, [pc, #132]	; (8013ce8 <recvfrom+0x98>)
 8013c62:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8013c66:	7aa4      	ldrb	r4, [r4, #10]
 8013c68:	b2e4      	uxtb	r4, r4
 8013c6a:	2c01      	cmp	r4, #1
 8013c6c:	d134      	bne.n	8013cd8 <recvfrom+0x88>
		if(gastrSockets[sock].bIsUsed)
 8013c6e:	4c1e      	ldr	r4, [pc, #120]	; (8013ce8 <recvfrom+0x98>)
 8013c70:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8013c74:	7aa4      	ldrb	r4, [r4, #10]
 8013c76:	2c00      	cmp	r4, #0
 8013c78:	d031      	beq.n	8013cde <recvfrom+0x8e>
			gastrSockets[sock].pu8UserBuffer = (uint8*)pvRecvBuf;
 8013c7a:	4e1b      	ldr	r6, [pc, #108]	; (8013ce8 <recvfrom+0x98>)
 8013c7c:	0105      	lsls	r5, r0, #4
 8013c7e:	1974      	adds	r4, r6, r5
 8013c80:	5171      	str	r1, [r6, r5]
			gastrSockets[sock].u16UserBufferSize = u16BufLen;
 8013c82:	80a2      	strh	r2, [r4, #4]
			if(!gastrSockets[sock].bIsRecvPending)
 8013c84:	7b22      	ldrb	r2, [r4, #12]
 8013c86:	bb6a      	cbnz	r2, 8013ce4 <recvfrom+0x94>
				gastrSockets[sock].bIsRecvPending = 1;
 8013c88:	2101      	movs	r1, #1
 8013c8a:	7321      	strb	r1, [r4, #12]
				if(u32Timeoutmsec == 0)
 8013c8c:	b9cb      	cbnz	r3, 8013cc2 <recvfrom+0x72>
					strRecv.u32Timeoutmsec = 0xFFFFFFFF;
 8013c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8013c92:	9304      	str	r3, [sp, #16]
				strRecv.sock = sock;
 8013c94:	f88d 0014 	strb.w	r0, [sp, #20]
				strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
 8013c98:	4b13      	ldr	r3, [pc, #76]	; (8013ce8 <recvfrom+0x98>)
 8013c9a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8013c9e:	88c3      	ldrh	r3, [r0, #6]
 8013ca0:	f8ad 3016 	strh.w	r3, [sp, #22]
				s16Ret = SOCKET_REQUEST(SOCKET_CMD_RECVFROM, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	9302      	str	r3, [sp, #8]
 8013ca8:	9301      	str	r3, [sp, #4]
 8013caa:	9300      	str	r3, [sp, #0]
 8013cac:	2308      	movs	r3, #8
 8013cae:	aa04      	add	r2, sp, #16
 8013cb0:	2148      	movs	r1, #72	; 0x48
 8013cb2:	2002      	movs	r0, #2
 8013cb4:	f7fc fdbc 	bl	8010830 <hif_send>
 8013cb8:	b200      	sxth	r0, r0
				if(s16Ret != SOCK_ERR_NO_ERROR)
 8013cba:	b188      	cbz	r0, 8013ce0 <recvfrom+0x90>
					s16Ret = SOCK_ERR_BUFFER_FULL;
 8013cbc:	f06f 000d 	mvn.w	r0, #13
 8013cc0:	e00e      	b.n	8013ce0 <recvfrom+0x90>
					strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
 8013cc2:	9304      	str	r3, [sp, #16]
 8013cc4:	e7e6      	b.n	8013c94 <recvfrom+0x44>
		s16Ret = SOCK_ERR_INVALID_ARG;
 8013cc6:	f06f 0005 	mvn.w	r0, #5
 8013cca:	4770      	bx	lr
 8013ccc:	f06f 0005 	mvn.w	r0, #5
 8013cd0:	4770      	bx	lr
 8013cd2:	f06f 0005 	mvn.w	r0, #5
}
 8013cd6:	4770      	bx	lr
		s16Ret = SOCK_ERR_INVALID_ARG;
 8013cd8:	f06f 0005 	mvn.w	r0, #5
 8013cdc:	e000      	b.n	8013ce0 <recvfrom+0x90>
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
 8013cde:	2000      	movs	r0, #0
}
 8013ce0:	b006      	add	sp, #24
 8013ce2:	bd70      	pop	{r4, r5, r6, pc}
			s16Ret = SOCK_ERR_NO_ERROR;
 8013ce4:	2000      	movs	r0, #0
 8013ce6:	e7fb      	b.n	8013ce0 <recvfrom+0x90>
 8013ce8:	20005a68 	.word	0x20005a68
 8013cec:	f3af 8000 	nop.w

08013cf0 <nmi_inet_addr>:
{
 8013cf0:	b530      	push	{r4, r5, lr}
 8013cf2:	b083      	sub	sp, #12
	uint32	u32IP = 0;
 8013cf4:	2100      	movs	r1, #0
 8013cf6:	9101      	str	r1, [sp, #4]
	for(i = 0; i < 4; ++i)
 8013cf8:	460d      	mov	r5, r1
 8013cfa:	2d03      	cmp	r5, #3
 8013cfc:	d823      	bhi.n	8013d46 <nmi_inet_addr+0x56>
		j = 0;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	e008      	b.n	8013d14 <nmi_inet_addr+0x24>
				au8IP[i] = tmp;
 8013d02:	ac02      	add	r4, sp, #8
 8013d04:	442c      	add	r4, r5
 8013d06:	f804 1c08 	strb.w	r1, [r4, #-8]
				tmp = 0;
 8013d0a:	2100      	movs	r1, #0
			++pcIpAddr;
 8013d0c:	3001      	adds	r0, #1
		} while(c != '.' && c != 0);
 8013d0e:	2a2e      	cmp	r2, #46	; 0x2e
 8013d10:	d016      	beq.n	8013d40 <nmi_inet_addr+0x50>
 8013d12:	b1aa      	cbz	r2, 8013d40 <nmi_inet_addr+0x50>
			c = *pcIpAddr;
 8013d14:	7802      	ldrb	r2, [r0, #0]
			++j;
 8013d16:	3301      	adds	r3, #1
 8013d18:	b2db      	uxtb	r3, r3
			if(j > 4)
 8013d1a:	2b04      	cmp	r3, #4
 8013d1c:	d81b      	bhi.n	8013d56 <nmi_inet_addr+0x66>
			if(c == '.' || c == 0)
 8013d1e:	2a2e      	cmp	r2, #46	; 0x2e
 8013d20:	d0ef      	beq.n	8013d02 <nmi_inet_addr+0x12>
 8013d22:	2a00      	cmp	r2, #0
 8013d24:	d0ed      	beq.n	8013d02 <nmi_inet_addr+0x12>
			else if(c >= '0' && c <= '9')
 8013d26:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8013d2a:	b2e4      	uxtb	r4, r4
 8013d2c:	2c09      	cmp	r4, #9
 8013d2e:	d815      	bhi.n	8013d5c <nmi_inet_addr+0x6c>
				tmp = (tmp * 10) + (c - '0');
 8013d30:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8013d34:	004c      	lsls	r4, r1, #1
 8013d36:	1911      	adds	r1, r2, r4
 8013d38:	b2c9      	uxtb	r1, r1
 8013d3a:	3930      	subs	r1, #48	; 0x30
 8013d3c:	b2c9      	uxtb	r1, r1
 8013d3e:	e7e5      	b.n	8013d0c <nmi_inet_addr+0x1c>
	for(i = 0; i < 4; ++i)
 8013d40:	3501      	adds	r5, #1
 8013d42:	b2ed      	uxtb	r5, r5
 8013d44:	e7d9      	b.n	8013cfa <nmi_inet_addr+0xa>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
 8013d46:	2204      	movs	r2, #4
 8013d48:	4669      	mov	r1, sp
 8013d4a:	eb0d 0002 	add.w	r0, sp, r2
 8013d4e:	f7fc fb5f 	bl	8010410 <m2m_memcpy>
	return u32IP;
 8013d52:	9801      	ldr	r0, [sp, #4]
 8013d54:	e000      	b.n	8013d58 <nmi_inet_addr+0x68>
				return 0;
 8013d56:	2000      	movs	r0, #0
}
 8013d58:	b003      	add	sp, #12
 8013d5a:	bd30      	pop	{r4, r5, pc}
				return 0;
 8013d5c:	2000      	movs	r0, #0
 8013d5e:	e7fb      	b.n	8013d58 <nmi_inet_addr+0x68>

08013d60 <gethostbyname>:
{
 8013d60:	b510      	push	{r4, lr}
 8013d62:	b084      	sub	sp, #16
 8013d64:	4604      	mov	r4, r0
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
 8013d66:	f7fc fb7b 	bl	8010460 <m2m_strlen>
 8013d6a:	b2c3      	uxtb	r3, r0
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
 8013d6c:	2b40      	cmp	r3, #64	; 0x40
 8013d6e:	d80b      	bhi.n	8013d88 <gethostbyname+0x28>
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
 8013d70:	2200      	movs	r2, #0
 8013d72:	9202      	str	r2, [sp, #8]
 8013d74:	9201      	str	r2, [sp, #4]
 8013d76:	9200      	str	r2, [sp, #0]
 8013d78:	3301      	adds	r3, #1
 8013d7a:	4622      	mov	r2, r4
 8013d7c:	214a      	movs	r1, #74	; 0x4a
 8013d7e:	2002      	movs	r0, #2
 8013d80:	f7fc fd56 	bl	8010830 <hif_send>
}
 8013d84:	b004      	add	sp, #16
 8013d86:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
 8013d88:	f06f 0005 	mvn.w	r0, #5
 8013d8c:	e7fa      	b.n	8013d84 <gethostbyname+0x24>
 8013d8e:	bf00      	nop

08013d90 <setsockopt>:
*********************************************************************/
sint8 setsockopt(SOCKET sock, uint8  u8Level, uint8  option_name,
       const void *option_value, uint16 u16OptionLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0)  && (option_value != NULL)  && (gastrSockets[sock].bIsUsed == 1))
 8013d90:	2800      	cmp	r0, #0
 8013d92:	db33      	blt.n	8013dfc <setsockopt+0x6c>
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d035      	beq.n	8013e04 <setsockopt+0x74>
{
 8013d98:	b530      	push	{r4, r5, lr}
 8013d9a:	b087      	sub	sp, #28
	if((sock >= 0)  && (option_value != NULL)  && (gastrSockets[sock].bIsUsed == 1))
 8013d9c:	4c1c      	ldr	r4, [pc, #112]	; (8013e10 <setsockopt+0x80>)
 8013d9e:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8013da2:	7aa4      	ldrb	r4, [r4, #10]
 8013da4:	b2e4      	uxtb	r4, r4
 8013da6:	2c01      	cmp	r4, #1
 8013da8:	d12f      	bne.n	8013e0a <setsockopt+0x7a>
 8013daa:	461c      	mov	r4, r3
 8013dac:	4615      	mov	r5, r2
	{
		if(u8Level == SOL_SSL_SOCKET)
 8013dae:	2902      	cmp	r1, #2
 8013db0:	d01c      	beq.n	8013dec <setsockopt+0x5c>
		}
		else
		{
			uint8	u8Cmd = SOCKET_CMD_SET_SOCKET_OPTION;
			tstrSetSocketOptCmd strSetSockOpt;
			strSetSockOpt.u8Option=option_name;
 8013db2:	f88d 2015 	strb.w	r2, [sp, #21]
			strSetSockOpt.sock = sock;
 8013db6:	f88d 0014 	strb.w	r0, [sp, #20]
			strSetSockOpt.u32OptionValue = *(uint32*)option_value;
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	9304      	str	r3, [sp, #16]
			strSetSockOpt.u16SessionID		= gastrSockets[sock].u16SessionID;
 8013dbe:	4b14      	ldr	r3, [pc, #80]	; (8013e10 <setsockopt+0x80>)
 8013dc0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8013dc4:	88c3      	ldrh	r3, [r0, #6]
 8013dc6:	f8ad 3016 	strh.w	r3, [sp, #22]

			s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strSetSockOpt, sizeof(tstrSetSocketOptCmd), NULL,0, 0);
 8013dca:	2300      	movs	r3, #0
 8013dcc:	9302      	str	r3, [sp, #8]
 8013dce:	9301      	str	r3, [sp, #4]
 8013dd0:	9300      	str	r3, [sp, #0]
 8013dd2:	2308      	movs	r3, #8
 8013dd4:	aa04      	add	r2, sp, #16
 8013dd6:	214f      	movs	r1, #79	; 0x4f
 8013dd8:	2002      	movs	r0, #2
 8013dda:	f7fc fd29 	bl	8010830 <hif_send>
			if(s8Ret != SOCK_ERR_NO_ERROR)
 8013dde:	4603      	mov	r3, r0
 8013de0:	b108      	cbz	r0, 8013de6 <setsockopt+0x56>
			{
				s8Ret = SOCK_ERR_INVALID;
 8013de2:	f06f 0308 	mvn.w	r3, #8
			}
		}
	}
	return s8Ret;
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	b007      	add	sp, #28
 8013dea:	bd30      	pop	{r4, r5, pc}
			s8Ret = sslSetSockOpt(sock, option_name, option_value, u16OptionLen);
 8013dec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8013df0:	4622      	mov	r2, r4
 8013df2:	4629      	mov	r1, r5
 8013df4:	f7ff f9dc 	bl	80131b0 <sslSetSockOpt>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	e7f4      	b.n	8013de6 <setsockopt+0x56>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 8013dfc:	f06f 0305 	mvn.w	r3, #5
}
 8013e00:	4618      	mov	r0, r3
 8013e02:	4770      	bx	lr
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 8013e04:	f06f 0305 	mvn.w	r3, #5
 8013e08:	e7fa      	b.n	8013e00 <setsockopt+0x70>
 8013e0a:	f06f 0305 	mvn.w	r3, #5
 8013e0e:	e7ea      	b.n	8013de6 <setsockopt+0x56>
 8013e10:	20005a68 	.word	0x20005a68
 8013e14:	f3af 8000 	nop.w
 8013e18:	f3af 8000 	nop.w
 8013e1c:	f3af 8000 	nop.w

08013e20 <getsockopt>:
*********************************************************************/
sint8 getsockopt(SOCKET sock, uint8 u8Level, uint8 u8OptName, const void *pvOptValue, uint8* pu8OptLen)
{
	/* TBD */
	return M2M_SUCCESS;
}
 8013e20:	2000      	movs	r0, #0
 8013e22:	4770      	bx	lr
 8013e24:	f3af 8000 	nop.w
 8013e28:	f3af 8000 	nop.w
 8013e2c:	f3af 8000 	nop.w

08013e30 <m2m_ping_req>:
*********************************************************************/
sint8 m2m_ping_req(uint32 u32DstIP, uint8 u8TTL, tpfPingCb fpPingCb)
{
	sint8	s8Ret = M2M_ERR_INVALID_ARG;

	if((u32DstIP != 0) && (fpPingCb != NULL))
 8013e30:	b1b8      	cbz	r0, 8013e62 <m2m_ping_req+0x32>
 8013e32:	4603      	mov	r3, r0
 8013e34:	b1c2      	cbz	r2, 8013e68 <m2m_ping_req+0x38>
{
 8013e36:	b500      	push	{lr}
 8013e38:	b089      	sub	sp, #36	; 0x24
	{
		tstrPingCmd	strPingCmd;

		strPingCmd.u16PingCount		= 1;
 8013e3a:	2001      	movs	r0, #1
 8013e3c:	f8ad 001c 	strh.w	r0, [sp, #28]
		strPingCmd.u32DestIPAddr	= u32DstIP;
 8013e40:	9305      	str	r3, [sp, #20]
		strPingCmd.u32CmdPrivate	= (uint32)fpPingCb;
 8013e42:	9206      	str	r2, [sp, #24]
		strPingCmd.u8TTL			= u8TTL;
 8013e44:	f88d 101e 	strb.w	r1, [sp, #30]

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_PING, (uint8*)&strPingCmd, sizeof(tstrPingCmd), NULL, 0, 0);
 8013e48:	2300      	movs	r3, #0
 8013e4a:	9302      	str	r3, [sp, #8]
 8013e4c:	9301      	str	r3, [sp, #4]
 8013e4e:	9300      	str	r3, [sp, #0]
 8013e50:	230c      	movs	r3, #12
 8013e52:	aa05      	add	r2, sp, #20
 8013e54:	2152      	movs	r1, #82	; 0x52
 8013e56:	2002      	movs	r0, #2
 8013e58:	f7fc fcea 	bl	8010830 <hif_send>
	}
	return s8Ret;
}
 8013e5c:	b009      	add	sp, #36	; 0x24
 8013e5e:	f85d fb04 	ldr.w	pc, [sp], #4
	sint8	s8Ret = M2M_ERR_INVALID_ARG;
 8013e62:	f06f 000e 	mvn.w	r0, #14
 8013e66:	4770      	bx	lr
 8013e68:	f06f 000e 	mvn.w	r0, #14
}
 8013e6c:	4770      	bx	lr
 8013e6e:	bf00      	nop

08013e70 <sslEnableCertExpirationCheck>:

Date

*********************************************************************/
sint8 sslEnableCertExpirationCheck(tenuSslCertExpSettings enuValidationSetting)
{
 8013e70:	b500      	push	{lr}
 8013e72:	b087      	sub	sp, #28
	tstrSslCertExpSettings	strSettings;
	strSettings.u32CertExpValidationOpt = (uint32)enuValidationSetting;
 8013e74:	aa06      	add	r2, sp, #24
 8013e76:	f842 0d04 	str.w	r0, [r2, #-4]!
	return SOCKET_REQUEST(SOCKET_CMD_SSL_EXP_CHECK, (uint8*)&strSettings, sizeof(tstrSslCertExpSettings), NULL, 0, 0);
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	9302      	str	r3, [sp, #8]
 8013e7e:	9301      	str	r3, [sp, #4]
 8013e80:	9300      	str	r3, [sp, #0]
 8013e82:	2304      	movs	r3, #4
 8013e84:	2155      	movs	r1, #85	; 0x55
 8013e86:	2002      	movs	r0, #2
 8013e88:	f7fc fcd2 	bl	8010830 <hif_send>
}
 8013e8c:	b007      	add	sp, #28
 8013e8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e92:	bf00      	nop
	...

08013ea0 <spi_flash_load_to_cortus_mem>:
*	@note		Compatible with MX25L6465E and should be working with other types
*	@author		M. Abdelmawla
*	@version	1.0
*/
static sint8 spi_flash_load_to_cortus_mem(uint32 u32MemAdr, uint32 u32FlashAdr, uint32 u32Sz)
{
 8013ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ea4:	b082      	sub	sp, #8
 8013ea6:	4605      	mov	r5, r0
	uint8 cmd[5];
	uint32	val	= 0;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	9301      	str	r3, [sp, #4]
	sint8	ret = M2M_SUCCESS;

	cmd[0] = 0x0b;
	cmd[1] = (uint8)(u32FlashAdr >> 16);
 8013eac:	f3c1 4607 	ubfx	r6, r1, #16, #8
	cmd[2] = (uint8)(u32FlashAdr >> 8);
 8013eb0:	f3c1 2807 	ubfx	r8, r1, #8, #8
	cmd[3] = (uint8)(u32FlashAdr);
 8013eb4:	b2cf      	uxtb	r7, r1
	cmd[4] = 0xA5;

	ret += nm_write_reg(SPI_FLASH_DATA_CNT, u32Sz);
 8013eb6:	4611      	mov	r1, r2
 8013eb8:	481d      	ldr	r0, [pc, #116]	; (8013f30 <spi_flash_load_to_cortus_mem+0x90>)
 8013eba:	f7fe fb81 	bl	80125c0 <nm_write_reg>
 8013ebe:	b2c4      	uxtb	r4, r0
	ret += nm_write_reg(SPI_FLASH_BUF1, cmd[0]|(cmd[1]<<8)|(cmd[2]<<16)|(cmd[3]<<24));
 8013ec0:	0231      	lsls	r1, r6, #8
 8013ec2:	f041 010b 	orr.w	r1, r1, #11
 8013ec6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8013eca:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
 8013ece:	4819      	ldr	r0, [pc, #100]	; (8013f34 <spi_flash_load_to_cortus_mem+0x94>)
 8013ed0:	f7fe fb76 	bl	80125c0 <nm_write_reg>
 8013ed4:	fa54 f480 	uxtab	r4, r4, r0
 8013ed8:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_BUF2, cmd[4]);
 8013eda:	21a5      	movs	r1, #165	; 0xa5
 8013edc:	4816      	ldr	r0, [pc, #88]	; (8013f38 <spi_flash_load_to_cortus_mem+0x98>)
 8013ede:	f7fe fb6f 	bl	80125c0 <nm_write_reg>
 8013ee2:	fa54 f480 	uxtab	r4, r4, r0
 8013ee6:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_BUF_DIR, 0x1f);
 8013ee8:	211f      	movs	r1, #31
 8013eea:	4814      	ldr	r0, [pc, #80]	; (8013f3c <spi_flash_load_to_cortus_mem+0x9c>)
 8013eec:	f7fe fb68 	bl	80125c0 <nm_write_reg>
 8013ef0:	fa54 f480 	uxtab	r4, r4, r0
 8013ef4:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_DMA_ADDR, u32MemAdr);
 8013ef6:	4629      	mov	r1, r5
 8013ef8:	4811      	ldr	r0, [pc, #68]	; (8013f40 <spi_flash_load_to_cortus_mem+0xa0>)
 8013efa:	f7fe fb61 	bl	80125c0 <nm_write_reg>
 8013efe:	fa54 f480 	uxtab	r4, r4, r0
 8013f02:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_CMD_CNT, 5 | (1<<7));
 8013f04:	2185      	movs	r1, #133	; 0x85
 8013f06:	480f      	ldr	r0, [pc, #60]	; (8013f44 <spi_flash_load_to_cortus_mem+0xa4>)
 8013f08:	f7fe fb5a 	bl	80125c0 <nm_write_reg>
 8013f0c:	fa54 f480 	uxtab	r4, r4, r0
 8013f10:	b264      	sxtb	r4, r4
	do
	{
		ret += nm_read_reg_with_ret(SPI_FLASH_TR_DONE, (uint32 *)&val);
 8013f12:	a901      	add	r1, sp, #4
 8013f14:	480c      	ldr	r0, [pc, #48]	; (8013f48 <spi_flash_load_to_cortus_mem+0xa8>)
 8013f16:	f7fe fb4b 	bl	80125b0 <nm_read_reg_with_ret>
 8013f1a:	fa54 f480 	uxtab	r4, r4, r0
 8013f1e:	b264      	sxtb	r4, r4
		if(M2M_SUCCESS != ret) break;
 8013f20:	b914      	cbnz	r4, 8013f28 <spi_flash_load_to_cortus_mem+0x88>
	}
	while(val != 1);
 8013f22:	9b01      	ldr	r3, [sp, #4]
 8013f24:	2b01      	cmp	r3, #1
 8013f26:	d1f4      	bne.n	8013f12 <spi_flash_load_to_cortus_mem+0x72>

	return ret;
}
 8013f28:	4620      	mov	r0, r4
 8013f2a:	b002      	add	sp, #8
 8013f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f30:	00010208 	.word	0x00010208
 8013f34:	0001020c 	.word	0x0001020c
 8013f38:	00010210 	.word	0x00010210
 8013f3c:	00010214 	.word	0x00010214
 8013f40:	0001021c 	.word	0x0001021c
 8013f44:	00010204 	.word	0x00010204
 8013f48:	00010218 	.word	0x00010218
 8013f4c:	f3af 8000 	nop.w

08013f50 <spi_flash_write_enable>:
*	@note		Compatible with MX25L6465E and should be working with other types
*	@author		M. Abdelmawla
*	@version	1.0
*/
static sint8 spi_flash_write_enable(void)
{
 8013f50:	b530      	push	{r4, r5, lr}
 8013f52:	b083      	sub	sp, #12
	uint8 cmd[1];
	uint32	val	= 0;
 8013f54:	2500      	movs	r5, #0
 8013f56:	9501      	str	r5, [sp, #4]
	sint8	ret = M2M_SUCCESS;

	cmd[0] = 0x06;

	ret += nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 8013f58:	4629      	mov	r1, r5
 8013f5a:	4817      	ldr	r0, [pc, #92]	; (8013fb8 <spi_flash_write_enable+0x68>)
 8013f5c:	f7fe fb30 	bl	80125c0 <nm_write_reg>
 8013f60:	b2c4      	uxtb	r4, r0
	ret += nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 8013f62:	2106      	movs	r1, #6
 8013f64:	4815      	ldr	r0, [pc, #84]	; (8013fbc <spi_flash_write_enable+0x6c>)
 8013f66:	f7fe fb2b 	bl	80125c0 <nm_write_reg>
 8013f6a:	fa54 f480 	uxtab	r4, r4, r0
 8013f6e:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_BUF_DIR, 0x01);
 8013f70:	2101      	movs	r1, #1
 8013f72:	4813      	ldr	r0, [pc, #76]	; (8013fc0 <spi_flash_write_enable+0x70>)
 8013f74:	f7fe fb24 	bl	80125c0 <nm_write_reg>
 8013f78:	fa54 f480 	uxtab	r4, r4, r0
 8013f7c:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 8013f7e:	4629      	mov	r1, r5
 8013f80:	4810      	ldr	r0, [pc, #64]	; (8013fc4 <spi_flash_write_enable+0x74>)
 8013f82:	f7fe fb1d 	bl	80125c0 <nm_write_reg>
 8013f86:	fa54 f480 	uxtab	r4, r4, r0
 8013f8a:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1<<7));
 8013f8c:	2181      	movs	r1, #129	; 0x81
 8013f8e:	480e      	ldr	r0, [pc, #56]	; (8013fc8 <spi_flash_write_enable+0x78>)
 8013f90:	f7fe fb16 	bl	80125c0 <nm_write_reg>
 8013f94:	fa54 f480 	uxtab	r4, r4, r0
 8013f98:	b264      	sxtb	r4, r4
	do
	{
		ret += nm_read_reg_with_ret(SPI_FLASH_TR_DONE, (uint32 *)&val);
 8013f9a:	a901      	add	r1, sp, #4
 8013f9c:	480b      	ldr	r0, [pc, #44]	; (8013fcc <spi_flash_write_enable+0x7c>)
 8013f9e:	f7fe fb07 	bl	80125b0 <nm_read_reg_with_ret>
 8013fa2:	fa54 f480 	uxtab	r4, r4, r0
 8013fa6:	b264      	sxtb	r4, r4
		if(M2M_SUCCESS != ret) break;
 8013fa8:	b914      	cbnz	r4, 8013fb0 <spi_flash_write_enable+0x60>
	}
	while(val != 1);
 8013faa:	9b01      	ldr	r3, [sp, #4]
 8013fac:	2b01      	cmp	r3, #1
 8013fae:	d1f4      	bne.n	8013f9a <spi_flash_write_enable+0x4a>

	return ret;
}
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	b003      	add	sp, #12
 8013fb4:	bd30      	pop	{r4, r5, pc}
 8013fb6:	bf00      	nop
 8013fb8:	00010208 	.word	0x00010208
 8013fbc:	0001020c 	.word	0x0001020c
 8013fc0:	00010214 	.word	0x00010214
 8013fc4:	0001021c 	.word	0x0001021c
 8013fc8:	00010204 	.word	0x00010204
 8013fcc:	00010218 	.word	0x00010218

08013fd0 <spi_flash_page_program>:
*	@note		Compatible with MX25L6465E and should be working with other types
*	@author		M. Abdelmawla
*	@version	1.0
*/
static sint8 spi_flash_page_program(uint32 u32MemAdr, uint32 u32FlashAdr, uint32 u32Sz)
{
 8013fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013fd4:	b083      	sub	sp, #12
 8013fd6:	4607      	mov	r7, r0
 8013fd8:	4688      	mov	r8, r1
 8013fda:	4615      	mov	r5, r2
	uint8 cmd[4];
	uint32	val	= 0;
 8013fdc:	2100      	movs	r1, #0
 8013fde:	9101      	str	r1, [sp, #4]
	sint8	ret = M2M_SUCCESS;

	cmd[0] = 0x02;
	cmd[1] = (uint8)(u32FlashAdr >> 16);
 8013fe0:	f3c8 4607 	ubfx	r6, r8, #16, #8
	cmd[2] = (uint8)(u32FlashAdr >> 8);
 8013fe4:	f3c8 2907 	ubfx	r9, r8, #8, #8
	cmd[3] = (uint8)(u32FlashAdr);
 8013fe8:	fa5f f888 	uxtb.w	r8, r8

	ret += nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 8013fec:	481d      	ldr	r0, [pc, #116]	; (8014064 <spi_flash_page_program+0x94>)
 8013fee:	f7fe fae7 	bl	80125c0 <nm_write_reg>
 8013ff2:	b2c4      	uxtb	r4, r0
	ret += nm_write_reg(SPI_FLASH_BUF1, cmd[0]|(cmd[1]<<8)|(cmd[2]<<16)|(cmd[3]<<24));
 8013ff4:	0231      	lsls	r1, r6, #8
 8013ff6:	f041 0102 	orr.w	r1, r1, #2
 8013ffa:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8013ffe:	ea41 6108 	orr.w	r1, r1, r8, lsl #24
 8014002:	4819      	ldr	r0, [pc, #100]	; (8014068 <spi_flash_page_program+0x98>)
 8014004:	f7fe fadc 	bl	80125c0 <nm_write_reg>
 8014008:	fa54 f480 	uxtab	r4, r4, r0
 801400c:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_BUF_DIR, 0x0f);
 801400e:	210f      	movs	r1, #15
 8014010:	4816      	ldr	r0, [pc, #88]	; (801406c <spi_flash_page_program+0x9c>)
 8014012:	f7fe fad5 	bl	80125c0 <nm_write_reg>
 8014016:	fa54 f480 	uxtab	r4, r4, r0
 801401a:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_DMA_ADDR, u32MemAdr);
 801401c:	4639      	mov	r1, r7
 801401e:	4814      	ldr	r0, [pc, #80]	; (8014070 <spi_flash_page_program+0xa0>)
 8014020:	f7fe face 	bl	80125c0 <nm_write_reg>
 8014024:	fa54 f480 	uxtab	r4, r4, r0
 8014028:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_CMD_CNT, 4 | (1<<7) | ((u32Sz & 0xfffff) << 8));
 801402a:	0229      	lsls	r1, r5, #8
 801402c:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
 8014030:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8014034:	f041 0184 	orr.w	r1, r1, #132	; 0x84
 8014038:	480e      	ldr	r0, [pc, #56]	; (8014074 <spi_flash_page_program+0xa4>)
 801403a:	f7fe fac1 	bl	80125c0 <nm_write_reg>
 801403e:	fa54 f480 	uxtab	r4, r4, r0
 8014042:	b264      	sxtb	r4, r4
	do
	{
		ret += nm_read_reg_with_ret(SPI_FLASH_TR_DONE, (uint32 *)&val);
 8014044:	a901      	add	r1, sp, #4
 8014046:	480c      	ldr	r0, [pc, #48]	; (8014078 <spi_flash_page_program+0xa8>)
 8014048:	f7fe fab2 	bl	80125b0 <nm_read_reg_with_ret>
 801404c:	fa54 f480 	uxtab	r4, r4, r0
 8014050:	b264      	sxtb	r4, r4
		if(M2M_SUCCESS != ret) break;
 8014052:	b914      	cbnz	r4, 801405a <spi_flash_page_program+0x8a>
	}
	while(val != 1);
 8014054:	9b01      	ldr	r3, [sp, #4]
 8014056:	2b01      	cmp	r3, #1
 8014058:	d1f4      	bne.n	8014044 <spi_flash_page_program+0x74>

	return ret;
}
 801405a:	4620      	mov	r0, r4
 801405c:	b003      	add	sp, #12
 801405e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014062:	bf00      	nop
 8014064:	00010208 	.word	0x00010208
 8014068:	0001020c 	.word	0x0001020c
 801406c:	00010214 	.word	0x00010214
 8014070:	0001021c 	.word	0x0001021c
 8014074:	00010204 	.word	0x00010204
 8014078:	00010218 	.word	0x00010218
 801407c:	f3af 8000 	nop.w

08014080 <spi_flash_write_disable>:
{
 8014080:	b530      	push	{r4, r5, lr}
 8014082:	b083      	sub	sp, #12
	uint32	val	= 0;
 8014084:	2500      	movs	r5, #0
 8014086:	9501      	str	r5, [sp, #4]
	ret += nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 8014088:	4629      	mov	r1, r5
 801408a:	4817      	ldr	r0, [pc, #92]	; (80140e8 <spi_flash_write_disable+0x68>)
 801408c:	f7fe fa98 	bl	80125c0 <nm_write_reg>
 8014090:	b2c4      	uxtb	r4, r0
	ret += nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 8014092:	2104      	movs	r1, #4
 8014094:	4815      	ldr	r0, [pc, #84]	; (80140ec <spi_flash_write_disable+0x6c>)
 8014096:	f7fe fa93 	bl	80125c0 <nm_write_reg>
 801409a:	fa54 f480 	uxtab	r4, r4, r0
 801409e:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_BUF_DIR, 0x01);
 80140a0:	2101      	movs	r1, #1
 80140a2:	4813      	ldr	r0, [pc, #76]	; (80140f0 <spi_flash_write_disable+0x70>)
 80140a4:	f7fe fa8c 	bl	80125c0 <nm_write_reg>
 80140a8:	fa54 f480 	uxtab	r4, r4, r0
 80140ac:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 80140ae:	4629      	mov	r1, r5
 80140b0:	4810      	ldr	r0, [pc, #64]	; (80140f4 <spi_flash_write_disable+0x74>)
 80140b2:	f7fe fa85 	bl	80125c0 <nm_write_reg>
 80140b6:	fa54 f480 	uxtab	r4, r4, r0
 80140ba:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1<<7));
 80140bc:	2181      	movs	r1, #129	; 0x81
 80140be:	480e      	ldr	r0, [pc, #56]	; (80140f8 <spi_flash_write_disable+0x78>)
 80140c0:	f7fe fa7e 	bl	80125c0 <nm_write_reg>
 80140c4:	fa54 f480 	uxtab	r4, r4, r0
 80140c8:	b264      	sxtb	r4, r4
		ret += nm_read_reg_with_ret(SPI_FLASH_TR_DONE, (uint32 *)&val);
 80140ca:	a901      	add	r1, sp, #4
 80140cc:	480b      	ldr	r0, [pc, #44]	; (80140fc <spi_flash_write_disable+0x7c>)
 80140ce:	f7fe fa6f 	bl	80125b0 <nm_read_reg_with_ret>
 80140d2:	fa54 f480 	uxtab	r4, r4, r0
 80140d6:	b264      	sxtb	r4, r4
		if(M2M_SUCCESS != ret) break;
 80140d8:	b914      	cbnz	r4, 80140e0 <spi_flash_write_disable+0x60>
	while(val != 1);
 80140da:	9b01      	ldr	r3, [sp, #4]
 80140dc:	2b01      	cmp	r3, #1
 80140de:	d1f4      	bne.n	80140ca <spi_flash_write_disable+0x4a>
}
 80140e0:	4620      	mov	r0, r4
 80140e2:	b003      	add	sp, #12
 80140e4:	bd30      	pop	{r4, r5, pc}
 80140e6:	bf00      	nop
 80140e8:	00010208 	.word	0x00010208
 80140ec:	0001020c 	.word	0x0001020c
 80140f0:	00010214 	.word	0x00010214
 80140f4:	0001021c 	.word	0x0001021c
 80140f8:	00010204 	.word	0x00010204
 80140fc:	00010218 	.word	0x00010218

08014100 <spi_flash_sector_erase>:
{
 8014100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014104:	b082      	sub	sp, #8
	uint32	val	= 0;
 8014106:	2600      	movs	r6, #0
 8014108:	9601      	str	r6, [sp, #4]
	cmd[1] = (uint8)(u32FlashAdr >> 16);
 801410a:	f3c0 4507 	ubfx	r5, r0, #16, #8
	cmd[2] = (uint8)(u32FlashAdr >> 8);
 801410e:	f3c0 2807 	ubfx	r8, r0, #8, #8
	cmd[3] = (uint8)(u32FlashAdr);
 8014112:	b2c7      	uxtb	r7, r0
	ret += nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 8014114:	4631      	mov	r1, r6
 8014116:	481a      	ldr	r0, [pc, #104]	; (8014180 <spi_flash_sector_erase+0x80>)
 8014118:	f7fe fa52 	bl	80125c0 <nm_write_reg>
 801411c:	b2c4      	uxtb	r4, r0
	ret += nm_write_reg(SPI_FLASH_BUF1, cmd[0]|(cmd[1]<<8)|(cmd[2]<<16)|(cmd[3]<<24));
 801411e:	0229      	lsls	r1, r5, #8
 8014120:	f041 0120 	orr.w	r1, r1, #32
 8014124:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8014128:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
 801412c:	4815      	ldr	r0, [pc, #84]	; (8014184 <spi_flash_sector_erase+0x84>)
 801412e:	f7fe fa47 	bl	80125c0 <nm_write_reg>
 8014132:	fa54 f480 	uxtab	r4, r4, r0
 8014136:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_BUF_DIR, 0x0f);
 8014138:	210f      	movs	r1, #15
 801413a:	4813      	ldr	r0, [pc, #76]	; (8014188 <spi_flash_sector_erase+0x88>)
 801413c:	f7fe fa40 	bl	80125c0 <nm_write_reg>
 8014140:	fa54 f480 	uxtab	r4, r4, r0
 8014144:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 8014146:	4631      	mov	r1, r6
 8014148:	4810      	ldr	r0, [pc, #64]	; (801418c <spi_flash_sector_erase+0x8c>)
 801414a:	f7fe fa39 	bl	80125c0 <nm_write_reg>
 801414e:	fa54 f480 	uxtab	r4, r4, r0
 8014152:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_CMD_CNT, 4 | (1<<7));
 8014154:	2184      	movs	r1, #132	; 0x84
 8014156:	480e      	ldr	r0, [pc, #56]	; (8014190 <spi_flash_sector_erase+0x90>)
 8014158:	f7fe fa32 	bl	80125c0 <nm_write_reg>
 801415c:	fa54 f480 	uxtab	r4, r4, r0
 8014160:	b264      	sxtb	r4, r4
		ret += nm_read_reg_with_ret(SPI_FLASH_TR_DONE, (uint32 *)&val);
 8014162:	a901      	add	r1, sp, #4
 8014164:	480b      	ldr	r0, [pc, #44]	; (8014194 <spi_flash_sector_erase+0x94>)
 8014166:	f7fe fa23 	bl	80125b0 <nm_read_reg_with_ret>
 801416a:	fa54 f480 	uxtab	r4, r4, r0
 801416e:	b264      	sxtb	r4, r4
		if(M2M_SUCCESS != ret) break;
 8014170:	b914      	cbnz	r4, 8014178 <spi_flash_sector_erase+0x78>
	while(val != 1);
 8014172:	9b01      	ldr	r3, [sp, #4]
 8014174:	2b01      	cmp	r3, #1
 8014176:	d1f4      	bne.n	8014162 <spi_flash_sector_erase+0x62>
}
 8014178:	4620      	mov	r0, r4
 801417a:	b002      	add	sp, #8
 801417c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014180:	00010208 	.word	0x00010208
 8014184:	0001020c 	.word	0x0001020c
 8014188:	00010214 	.word	0x00010214
 801418c:	0001021c 	.word	0x0001021c
 8014190:	00010204 	.word	0x00010204
 8014194:	00010218 	.word	0x00010218
 8014198:	f3af 8000 	nop.w
 801419c:	f3af 8000 	nop.w

080141a0 <spi_flash_leave_low_power_mode>:
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
}


static void spi_flash_leave_low_power_mode(void) {
 80141a0:	b500      	push	{lr}
 80141a2:	b083      	sub	sp, #12
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;
 80141a4:	23ab      	movs	r3, #171	; 0xab
 80141a6:	f88d 3004 	strb.w	r3, [sp, #4]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 80141aa:	2100      	movs	r1, #0
 80141ac:	480d      	ldr	r0, [pc, #52]	; (80141e4 <spi_flash_leave_low_power_mode+0x44>)
 80141ae:	f7fe fa07 	bl	80125c0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 80141b2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80141b6:	480c      	ldr	r0, [pc, #48]	; (80141e8 <spi_flash_leave_low_power_mode+0x48>)
 80141b8:	f7fe fa02 	bl	80125c0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 80141bc:	2101      	movs	r1, #1
 80141be:	480b      	ldr	r0, [pc, #44]	; (80141ec <spi_flash_leave_low_power_mode+0x4c>)
 80141c0:	f7fe f9fe 	bl	80125c0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 80141c4:	2100      	movs	r1, #0
 80141c6:	480a      	ldr	r0, [pc, #40]	; (80141f0 <spi_flash_leave_low_power_mode+0x50>)
 80141c8:	f7fe f9fa 	bl	80125c0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
 80141cc:	2181      	movs	r1, #129	; 0x81
 80141ce:	4809      	ldr	r0, [pc, #36]	; (80141f4 <spi_flash_leave_low_power_mode+0x54>)
 80141d0:	f7fe f9f6 	bl	80125c0 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 80141d4:	4808      	ldr	r0, [pc, #32]	; (80141f8 <spi_flash_leave_low_power_mode+0x58>)
 80141d6:	f7fe f9e3 	bl	80125a0 <nm_read_reg>
 80141da:	2801      	cmp	r0, #1
 80141dc:	d1fa      	bne.n	80141d4 <spi_flash_leave_low_power_mode+0x34>
}
 80141de:	b003      	add	sp, #12
 80141e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80141e4:	00010208 	.word	0x00010208
 80141e8:	0001020c 	.word	0x0001020c
 80141ec:	00010214 	.word	0x00010214
 80141f0:	0001021c 	.word	0x0001021c
 80141f4:	00010204 	.word	0x00010204
 80141f8:	00010218 	.word	0x00010218
 80141fc:	f3af 8000 	nop.w

08014200 <spi_flash_enter_low_power_mode>:
static void spi_flash_enter_low_power_mode(void) {
 8014200:	b500      	push	{lr}
 8014202:	b083      	sub	sp, #12
	cmd[0] = 0xb9;
 8014204:	23b9      	movs	r3, #185	; 0xb9
 8014206:	f88d 3004 	strb.w	r3, [sp, #4]
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 801420a:	2100      	movs	r1, #0
 801420c:	480d      	ldr	r0, [pc, #52]	; (8014244 <spi_flash_enter_low_power_mode+0x44>)
 801420e:	f7fe f9d7 	bl	80125c0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 8014212:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014216:	480c      	ldr	r0, [pc, #48]	; (8014248 <spi_flash_enter_low_power_mode+0x48>)
 8014218:	f7fe f9d2 	bl	80125c0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 801421c:	2101      	movs	r1, #1
 801421e:	480b      	ldr	r0, [pc, #44]	; (801424c <spi_flash_enter_low_power_mode+0x4c>)
 8014220:	f7fe f9ce 	bl	80125c0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 8014224:	2100      	movs	r1, #0
 8014226:	480a      	ldr	r0, [pc, #40]	; (8014250 <spi_flash_enter_low_power_mode+0x50>)
 8014228:	f7fe f9ca 	bl	80125c0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
 801422c:	2181      	movs	r1, #129	; 0x81
 801422e:	4809      	ldr	r0, [pc, #36]	; (8014254 <spi_flash_enter_low_power_mode+0x54>)
 8014230:	f7fe f9c6 	bl	80125c0 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 8014234:	4808      	ldr	r0, [pc, #32]	; (8014258 <spi_flash_enter_low_power_mode+0x58>)
 8014236:	f7fe f9b3 	bl	80125a0 <nm_read_reg>
 801423a:	2801      	cmp	r0, #1
 801423c:	d1fa      	bne.n	8014234 <spi_flash_enter_low_power_mode+0x34>
}
 801423e:	b003      	add	sp, #12
 8014240:	f85d fb04 	ldr.w	pc, [sp], #4
 8014244:	00010208 	.word	0x00010208
 8014248:	0001020c 	.word	0x0001020c
 801424c:	00010214 	.word	0x00010214
 8014250:	0001021c 	.word	0x0001021c
 8014254:	00010204 	.word	0x00010204
 8014258:	00010218 	.word	0x00010218
 801425c:	f3af 8000 	nop.w

08014260 <spi_flash_read_status_reg>:
{
 8014260:	b530      	push	{r4, r5, lr}
 8014262:	b083      	sub	sp, #12
 8014264:	4605      	mov	r5, r0
	ret += nm_write_reg(SPI_FLASH_DATA_CNT, 4);
 8014266:	2104      	movs	r1, #4
 8014268:	481b      	ldr	r0, [pc, #108]	; (80142d8 <spi_flash_read_status_reg+0x78>)
 801426a:	f7fe f9a9 	bl	80125c0 <nm_write_reg>
 801426e:	b2c4      	uxtb	r4, r0
	ret += nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 8014270:	2105      	movs	r1, #5
 8014272:	481a      	ldr	r0, [pc, #104]	; (80142dc <spi_flash_read_status_reg+0x7c>)
 8014274:	f7fe f9a4 	bl	80125c0 <nm_write_reg>
 8014278:	fa54 f480 	uxtab	r4, r4, r0
 801427c:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_BUF_DIR, 0x01);
 801427e:	2101      	movs	r1, #1
 8014280:	4817      	ldr	r0, [pc, #92]	; (80142e0 <spi_flash_read_status_reg+0x80>)
 8014282:	f7fe f99d 	bl	80125c0 <nm_write_reg>
 8014286:	fa54 f480 	uxtab	r4, r4, r0
 801428a:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_DMA_ADDR, DUMMY_REGISTER);
 801428c:	f241 0184 	movw	r1, #4228	; 0x1084
 8014290:	4814      	ldr	r0, [pc, #80]	; (80142e4 <spi_flash_read_status_reg+0x84>)
 8014292:	f7fe f995 	bl	80125c0 <nm_write_reg>
 8014296:	fa54 f480 	uxtab	r4, r4, r0
 801429a:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1<<7));
 801429c:	2181      	movs	r1, #129	; 0x81
 801429e:	4812      	ldr	r0, [pc, #72]	; (80142e8 <spi_flash_read_status_reg+0x88>)
 80142a0:	f7fe f98e 	bl	80125c0 <nm_write_reg>
 80142a4:	fa54 f480 	uxtab	r4, r4, r0
 80142a8:	b264      	sxtb	r4, r4
		ret += nm_read_reg_with_ret(SPI_FLASH_TR_DONE, (uint32 *)&reg);
 80142aa:	a901      	add	r1, sp, #4
 80142ac:	480f      	ldr	r0, [pc, #60]	; (80142ec <spi_flash_read_status_reg+0x8c>)
 80142ae:	f7fe f97f 	bl	80125b0 <nm_read_reg_with_ret>
 80142b2:	fa54 f480 	uxtab	r4, r4, r0
 80142b6:	b264      	sxtb	r4, r4
		if(M2M_SUCCESS != ret) break;
 80142b8:	b914      	cbnz	r4, 80142c0 <spi_flash_read_status_reg+0x60>
	while(reg != 1);
 80142ba:	9b01      	ldr	r3, [sp, #4]
 80142bc:	2b01      	cmp	r3, #1
 80142be:	d1f4      	bne.n	80142aa <spi_flash_read_status_reg+0x4a>
	reg = (M2M_SUCCESS == ret)?(nm_read_reg(DUMMY_REGISTER)):(0);
 80142c0:	b124      	cbz	r4, 80142cc <spi_flash_read_status_reg+0x6c>
 80142c2:	2000      	movs	r0, #0
	*val = (uint8)(reg & 0xff);
 80142c4:	7028      	strb	r0, [r5, #0]
}
 80142c6:	4620      	mov	r0, r4
 80142c8:	b003      	add	sp, #12
 80142ca:	bd30      	pop	{r4, r5, pc}
	reg = (M2M_SUCCESS == ret)?(nm_read_reg(DUMMY_REGISTER)):(0);
 80142cc:	f241 0084 	movw	r0, #4228	; 0x1084
 80142d0:	f7fe f966 	bl	80125a0 <nm_read_reg>
 80142d4:	e7f6      	b.n	80142c4 <spi_flash_read_status_reg+0x64>
 80142d6:	bf00      	nop
 80142d8:	00010208 	.word	0x00010208
 80142dc:	0001020c 	.word	0x0001020c
 80142e0:	00010214 	.word	0x00010214
 80142e4:	0001021c 	.word	0x0001021c
 80142e8:	00010204 	.word	0x00010204
 80142ec:	00010218 	.word	0x00010218

080142f0 <spi_flash_rdid>:
{
 80142f0:	b530      	push	{r4, r5, lr}
 80142f2:	b083      	sub	sp, #12
	uint32 reg = 0;
 80142f4:	2500      	movs	r5, #0
 80142f6:	9501      	str	r5, [sp, #4]
	ret += nm_write_reg(SPI_FLASH_DATA_CNT, 4);
 80142f8:	2104      	movs	r1, #4
 80142fa:	481e      	ldr	r0, [pc, #120]	; (8014374 <spi_flash_rdid+0x84>)
 80142fc:	f7fe f960 	bl	80125c0 <nm_write_reg>
 8014300:	b2c4      	uxtb	r4, r0
	ret += nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 8014302:	219f      	movs	r1, #159	; 0x9f
 8014304:	481c      	ldr	r0, [pc, #112]	; (8014378 <spi_flash_rdid+0x88>)
 8014306:	f7fe f95b 	bl	80125c0 <nm_write_reg>
 801430a:	fa54 f480 	uxtab	r4, r4, r0
 801430e:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 8014310:	2101      	movs	r1, #1
 8014312:	481a      	ldr	r0, [pc, #104]	; (801437c <spi_flash_rdid+0x8c>)
 8014314:	f7fe f954 	bl	80125c0 <nm_write_reg>
 8014318:	fa54 f480 	uxtab	r4, r4, r0
 801431c:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_DMA_ADDR, DUMMY_REGISTER);
 801431e:	f241 0184 	movw	r1, #4228	; 0x1084
 8014322:	4817      	ldr	r0, [pc, #92]	; (8014380 <spi_flash_rdid+0x90>)
 8014324:	f7fe f94c 	bl	80125c0 <nm_write_reg>
 8014328:	fa54 f480 	uxtab	r4, r4, r0
 801432c:	b2e4      	uxtb	r4, r4
	ret += nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1<<7));
 801432e:	2181      	movs	r1, #129	; 0x81
 8014330:	4814      	ldr	r0, [pc, #80]	; (8014384 <spi_flash_rdid+0x94>)
 8014332:	f7fe f945 	bl	80125c0 <nm_write_reg>
 8014336:	fa54 f480 	uxtab	r4, r4, r0
 801433a:	b264      	sxtb	r4, r4
		ret += nm_read_reg_with_ret(SPI_FLASH_TR_DONE, (uint32 *)&reg);
 801433c:	a901      	add	r1, sp, #4
 801433e:	4812      	ldr	r0, [pc, #72]	; (8014388 <spi_flash_rdid+0x98>)
 8014340:	f7fe f936 	bl	80125b0 <nm_read_reg_with_ret>
 8014344:	fa54 f480 	uxtab	r4, r4, r0
 8014348:	b264      	sxtb	r4, r4
		if(M2M_SUCCESS != ret) break;
 801434a:	b934      	cbnz	r4, 801435a <spi_flash_rdid+0x6a>
		if(++cnt > 500)
 801434c:	3501      	adds	r5, #1
 801434e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8014352:	d806      	bhi.n	8014362 <spi_flash_rdid+0x72>
	while(reg != 1);
 8014354:	9b01      	ldr	r3, [sp, #4]
 8014356:	2b01      	cmp	r3, #1
 8014358:	d1f0      	bne.n	801433c <spi_flash_rdid+0x4c>
	reg = (M2M_SUCCESS == ret)?(nm_read_reg(DUMMY_REGISTER)):(0);
 801435a:	b12c      	cbz	r4, 8014368 <spi_flash_rdid+0x78>
 801435c:	2000      	movs	r0, #0
}
 801435e:	b003      	add	sp, #12
 8014360:	bd30      	pop	{r4, r5, pc}
			ret = M2M_ERR_INIT;
 8014362:	f06f 0404 	mvn.w	r4, #4
 8014366:	e7f8      	b.n	801435a <spi_flash_rdid+0x6a>
	reg = (M2M_SUCCESS == ret)?(nm_read_reg(DUMMY_REGISTER)):(0);
 8014368:	f241 0084 	movw	r0, #4228	; 0x1084
 801436c:	f7fe f918 	bl	80125a0 <nm_read_reg>
 8014370:	e7f5      	b.n	801435e <spi_flash_rdid+0x6e>
 8014372:	bf00      	nop
 8014374:	00010208 	.word	0x00010208
 8014378:	0001020c 	.word	0x0001020c
 801437c:	00010214 	.word	0x00010214
 8014380:	0001021c 	.word	0x0001021c
 8014384:	00010204 	.word	0x00010204
 8014388:	00010218 	.word	0x00010218
 801438c:	f3af 8000 	nop.w

08014390 <spi_flash_read_internal>:
{
 8014390:	b538      	push	{r3, r4, r5, lr}
 8014392:	4604      	mov	r4, r0
 8014394:	4615      	mov	r5, r2
	ret = spi_flash_load_to_cortus_mem(HOST_SHARE_MEM_BASE, u32Addr, u32Sz);
 8014396:	f44f 2050 	mov.w	r0, #851968	; 0xd0000
 801439a:	f7ff fd81 	bl	8013ea0 <spi_flash_load_to_cortus_mem>
	if(M2M_SUCCESS != ret) goto ERR;
 801439e:	4603      	mov	r3, r0
 80143a0:	b108      	cbz	r0, 80143a6 <spi_flash_read_internal+0x16>
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	bd38      	pop	{r3, r4, r5, pc}
	ret = nm_read_block(HOST_SHARE_MEM_BASE, pu8Buf, u32Sz);
 80143a6:	462a      	mov	r2, r5
 80143a8:	4621      	mov	r1, r4
 80143aa:	f44f 2050 	mov.w	r0, #851968	; 0xd0000
 80143ae:	f7fe f90f 	bl	80125d0 <nm_read_block>
 80143b2:	4603      	mov	r3, r0
 80143b4:	e7f5      	b.n	80143a2 <spi_flash_read_internal+0x12>
 80143b6:	bf00      	nop
 80143b8:	f3af 8000 	nop.w
 80143bc:	f3af 8000 	nop.w

080143c0 <spi_flash_pp>:
{
 80143c0:	b570      	push	{r4, r5, r6, lr}
 80143c2:	b082      	sub	sp, #8
 80143c4:	4606      	mov	r6, r0
 80143c6:	460c      	mov	r4, r1
 80143c8:	4615      	mov	r5, r2
	spi_flash_write_enable();
 80143ca:	f7ff fdc1 	bl	8013f50 <spi_flash_write_enable>
	ret += nm_write_block(HOST_SHARE_MEM_BASE, pu8Buf, u16Sz);
 80143ce:	462a      	mov	r2, r5
 80143d0:	4621      	mov	r1, r4
 80143d2:	f44f 2050 	mov.w	r0, #851968	; 0xd0000
 80143d6:	f7fe f92b 	bl	8012630 <nm_write_block>
 80143da:	b2c4      	uxtb	r4, r0
	ret += spi_flash_page_program(HOST_SHARE_MEM_BASE, u32Offset, u16Sz);
 80143dc:	462a      	mov	r2, r5
 80143de:	4631      	mov	r1, r6
 80143e0:	f44f 2050 	mov.w	r0, #851968	; 0xd0000
 80143e4:	f7ff fdf4 	bl	8013fd0 <spi_flash_page_program>
 80143e8:	fa54 f480 	uxtab	r4, r4, r0
 80143ec:	b2e4      	uxtb	r4, r4
	ret += spi_flash_read_status_reg(&tmp);
 80143ee:	f10d 0007 	add.w	r0, sp, #7
 80143f2:	f7ff ff35 	bl	8014260 <spi_flash_read_status_reg>
 80143f6:	fa54 f480 	uxtab	r4, r4, r0
 80143fa:	b264      	sxtb	r4, r4
		if(ret != M2M_SUCCESS) goto ERR;
 80143fc:	b98c      	cbnz	r4, 8014422 <spi_flash_pp+0x62>
		ret += spi_flash_read_status_reg(&tmp);
 80143fe:	f10d 0007 	add.w	r0, sp, #7
 8014402:	f7ff ff2d 	bl	8014260 <spi_flash_read_status_reg>
 8014406:	fa54 f080 	uxtab	r0, r4, r0
 801440a:	b2c5      	uxtb	r5, r0
 801440c:	b26c      	sxtb	r4, r5
	}while(tmp & 0x01);
 801440e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014412:	f013 0f01 	tst.w	r3, #1
 8014416:	d1f1      	bne.n	80143fc <spi_flash_pp+0x3c>
	ret += spi_flash_write_disable();
 8014418:	f7ff fe32 	bl	8014080 <spi_flash_write_disable>
 801441c:	fa55 f080 	uxtab	r0, r5, r0
 8014420:	b244      	sxtb	r4, r0
}
 8014422:	4620      	mov	r0, r4
 8014424:	b002      	add	sp, #8
 8014426:	bd70      	pop	{r4, r5, r6, pc}
 8014428:	f3af 8000 	nop.w
 801442c:	f3af 8000 	nop.w

08014430 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
 8014430:	b530      	push	{r4, r5, lr}
 8014432:	b083      	sub	sp, #12
 8014434:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {
 8014436:	f7fd fdab 	bl	8011f90 <nmi_get_chipid>
 801443a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801443e:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
 8014442:	d203      	bcs.n	801444c <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
 8014444:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
 8014446:	4620      	mov	r0, r4
 8014448:	b003      	add	sp, #12
 801444a:	bd30      	pop	{r4, r5, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
 801444c:	a901      	add	r1, sp, #4
 801444e:	f241 4010 	movw	r0, #5136	; 0x1410
 8014452:	f7fe f8ad 	bl	80125b0 <nm_read_reg_with_ret>
		if(s8Ret != M2M_SUCCESS) {
 8014456:	4604      	mov	r4, r0
 8014458:	2800      	cmp	r0, #0
 801445a:	d1f4      	bne.n	8014446 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
 801445c:	9901      	ldr	r1, [sp, #4]
 801445e:	f021 61ee 	bic.w	r1, r1, #124780544	; 0x7700000
 8014462:	f421 21ee 	bic.w	r1, r1, #487424	; 0x77000
		u32Val |= ((0x1111ul) << 12);
 8014466:	f041 7188 	orr.w	r1, r1, #17825792	; 0x1100000
 801446a:	f441 3188 	orr.w	r1, r1, #69632	; 0x11000
 801446e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
 8014470:	f241 4010 	movw	r0, #5136	; 0x1410
 8014474:	f7fe f8a4 	bl	80125c0 <nm_write_reg>
		if(enable) {
 8014478:	b175      	cbz	r5, 8014498 <spi_flash_enable+0x68>
			spi_flash_leave_low_power_mode();
 801447a:	f7ff fe91 	bl	80141a0 <spi_flash_leave_low_power_mode>
		u32Val &= ~((0x7777ul) << 12);
 801447e:	9901      	ldr	r1, [sp, #4]
 8014480:	f021 61ee 	bic.w	r1, r1, #124780544	; 0x7700000
 8014484:	f421 21ee 	bic.w	r1, r1, #487424	; 0x77000
		u32Val |= ((0x0010ul) << 12);
 8014488:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 801448c:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
 801448e:	f241 4010 	movw	r0, #5136	; 0x1410
 8014492:	f7fe f895 	bl	80125c0 <nm_write_reg>
 8014496:	e7d6      	b.n	8014446 <spi_flash_enable+0x16>
			spi_flash_enter_low_power_mode();
 8014498:	f7ff feb2 	bl	8014200 <spi_flash_enter_low_power_mode>
 801449c:	e7ef      	b.n	801447e <spi_flash_enable+0x4e>
 801449e:	bf00      	nop

080144a0 <spi_flash_read>:
*	@note		Data size is limited by the SPI flash size only
*	@author		M. Abdelmawla
*	@version	1.0
*/
sint8 spi_flash_read(uint8 *pu8Buf, uint32 u32offset, uint32 u32Sz)
{
 80144a0:	b570      	push	{r4, r5, r6, lr}
 80144a2:	4605      	mov	r5, r0
 80144a4:	460e      	mov	r6, r1
 80144a6:	4614      	mov	r4, r2
	sint8 ret = M2M_SUCCESS;
	if(u32Sz > FLASH_BLOCK_SIZE)
 80144a8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80144ac:	d910      	bls.n	80144d0 <spi_flash_read+0x30>
	{
		do
		{
			ret = spi_flash_read_internal(pu8Buf, u32offset, FLASH_BLOCK_SIZE);
 80144ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80144b2:	4631      	mov	r1, r6
 80144b4:	4628      	mov	r0, r5
 80144b6:	f7ff ff6b 	bl	8014390 <spi_flash_read_internal>
			if(M2M_SUCCESS != ret) goto ERR;
 80144ba:	4603      	mov	r3, r0
 80144bc:	b970      	cbnz	r0, 80144dc <spi_flash_read+0x3c>
			u32Sz -= FLASH_BLOCK_SIZE;
 80144be:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
			u32offset += FLASH_BLOCK_SIZE;
 80144c2:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
			pu8Buf += FLASH_BLOCK_SIZE;
 80144c6:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
		} while(u32Sz > FLASH_BLOCK_SIZE);
 80144ca:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80144ce:	d8ee      	bhi.n	80144ae <spi_flash_read+0xe>
	}

	ret = spi_flash_read_internal(pu8Buf, u32offset, u32Sz);
 80144d0:	4622      	mov	r2, r4
 80144d2:	4631      	mov	r1, r6
 80144d4:	4628      	mov	r0, r5
 80144d6:	f7ff ff5b 	bl	8014390 <spi_flash_read_internal>
 80144da:	4603      	mov	r3, r0

ERR:
	return ret;
}
 80144dc:	4618      	mov	r0, r3
 80144de:	bd70      	pop	{r4, r5, r6, pc}

080144e0 <spi_flash_write>:
#ifdef PROFILING
	tpercent = (u32Sz/u32Blksz)+((u32Sz%u32Blksz)>0);
	t1 = GetTickCount();
	M2M_PRINT(">Start programming...\r\n");
#endif
	if(u32Sz<=0)
 80144e0:	b34a      	cbz	r2, 8014536 <spi_flash_write+0x56>
{
 80144e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144e4:	4607      	mov	r7, r0
 80144e6:	460e      	mov	r6, r1
 80144e8:	b2cc      	uxtb	r4, r1
 80144ea:	4615      	mov	r5, r2
		M2M_ERR("Data size = %d",(int)u32Sz);
		ret = M2M_ERR_FAIL;
		goto ERR;
	}

	if (u32off)/*first part of data in the address page*/
 80144ec:	b174      	cbz	r4, 801450c <spi_flash_write+0x2c>
	{
		u32wsz = u32Blksz - u32off;
 80144ee:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
		if(spi_flash_pp(u32Offset, pu8Buf, (uint16)BSP_MIN(u32Sz, u32wsz))!=M2M_SUCCESS)
 80144f2:	42a2      	cmp	r2, r4
 80144f4:	d91b      	bls.n	801452e <spi_flash_write+0x4e>
 80144f6:	b2a2      	uxth	r2, r4
 80144f8:	4639      	mov	r1, r7
 80144fa:	4630      	mov	r0, r6
 80144fc:	f7ff ff60 	bl	80143c0 <spi_flash_pp>
 8014500:	b9e0      	cbnz	r0, 801453c <spi_flash_write+0x5c>
		{
			ret = M2M_ERR_FAIL;
			goto ERR;
		}
		if (u32Sz < u32wsz) goto EXIT;
 8014502:	42a5      	cmp	r5, r4
 8014504:	d31d      	bcc.n	8014542 <spi_flash_write+0x62>
		pu8Buf += u32wsz;
 8014506:	4427      	add	r7, r4
		u32Offset += u32wsz;
 8014508:	4426      	add	r6, r4
		u32Sz -= u32wsz;
 801450a:	1b2d      	subs	r5, r5, r4
	}
	while (u32Sz > 0)
 801450c:	b18d      	cbz	r5, 8014532 <spi_flash_write+0x52>
	{
		u32wsz = BSP_MIN(u32Sz, u32Blksz);
 801450e:	462c      	mov	r4, r5
 8014510:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8014514:	bf28      	it	cs
 8014516:	f44f 7480 	movcs.w	r4, #256	; 0x100

		/*write complete page or the remaining data*/
		if(spi_flash_pp(u32Offset, pu8Buf, (uint16)u32wsz)!=M2M_SUCCESS)
 801451a:	b2a2      	uxth	r2, r4
 801451c:	4639      	mov	r1, r7
 801451e:	4630      	mov	r0, r6
 8014520:	f7ff ff4e 	bl	80143c0 <spi_flash_pp>
 8014524:	b978      	cbnz	r0, 8014546 <spi_flash_write+0x66>
		{
			ret = M2M_ERR_FAIL;
			goto ERR;
		}
		pu8Buf += u32wsz;
 8014526:	4427      	add	r7, r4
		u32Offset += u32wsz;
 8014528:	4426      	add	r6, r4
		u32Sz -= u32wsz;
 801452a:	1b2d      	subs	r5, r5, r4
 801452c:	e7ee      	b.n	801450c <spi_flash_write+0x2c>
		if(spi_flash_pp(u32Offset, pu8Buf, (uint16)BSP_MIN(u32Sz, u32wsz))!=M2M_SUCCESS)
 801452e:	b292      	uxth	r2, r2
 8014530:	e7e2      	b.n	80144f8 <spi_flash_write+0x18>
	sint8 ret = M2M_SUCCESS;
 8014532:	2000      	movs	r0, #0
	M2M_PRINT("\rDone\t\t\t\t\t\t");
	M2M_PRINT("\n#Programming time = %f sec\n\r",(GetTickCount() - t1)/1000.0);
#endif
ERR:
	return ret;
}
 8014534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = M2M_ERR_FAIL;
 8014536:	f06f 000b 	mvn.w	r0, #11
}
 801453a:	4770      	bx	lr
			ret = M2M_ERR_FAIL;
 801453c:	f06f 000b 	mvn.w	r0, #11
 8014540:	e7f8      	b.n	8014534 <spi_flash_write+0x54>
	sint8 ret = M2M_SUCCESS;
 8014542:	2000      	movs	r0, #0
 8014544:	e7f6      	b.n	8014534 <spi_flash_write+0x54>
			ret = M2M_ERR_FAIL;
 8014546:	f06f 000b 	mvn.w	r0, #11
 801454a:	e7f3      	b.n	8014534 <spi_flash_write+0x54>
 801454c:	f3af 8000 	nop.w

08014550 <spi_flash_erase>:
*	@note		Data size is limited by the SPI flash size only
*	@author		M. Abdelmawla
*	@version	1.0
*/
sint8 spi_flash_erase(uint32 u32Offset, uint32 u32Sz)
{
 8014550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014552:	b083      	sub	sp, #12
 8014554:	4606      	mov	r6, r0
 8014556:	460f      	mov	r7, r1
	uint32 i = 0;
	sint8 ret = M2M_SUCCESS;
	uint8  tmp = 0;
 8014558:	2400      	movs	r4, #0
 801455a:	f88d 4007 	strb.w	r4, [sp, #7]
#ifdef PROFILING
	uint32 t;
	t = GetTickCount();
#endif
	M2M_PRINT("\r\n>Start erasing...\r\n");
	for(i = u32Offset; i < (u32Sz +u32Offset); i += (16*FLASH_PAGE_SZ))
 801455e:	4605      	mov	r5, r0
 8014560:	19f3      	adds	r3, r6, r7
 8014562:	42ab      	cmp	r3, r5
 8014564:	d929      	bls.n	80145ba <spi_flash_erase+0x6a>
	{
		ret += spi_flash_write_enable();
 8014566:	f7ff fcf3 	bl	8013f50 <spi_flash_write_enable>
 801456a:	fa54 f480 	uxtab	r4, r4, r0
 801456e:	b2e4      	uxtb	r4, r4
		ret += spi_flash_read_status_reg(&tmp);
 8014570:	f10d 0007 	add.w	r0, sp, #7
 8014574:	f7ff fe74 	bl	8014260 <spi_flash_read_status_reg>
 8014578:	fa54 f480 	uxtab	r4, r4, r0
 801457c:	b2e4      	uxtb	r4, r4
		ret += spi_flash_sector_erase(i + 10);
 801457e:	f105 000a 	add.w	r0, r5, #10
 8014582:	f7ff fdbd 	bl	8014100 <spi_flash_sector_erase>
 8014586:	fa54 f480 	uxtab	r4, r4, r0
 801458a:	b2e4      	uxtb	r4, r4
		ret += spi_flash_read_status_reg(&tmp);
 801458c:	f10d 0007 	add.w	r0, sp, #7
 8014590:	f7ff fe66 	bl	8014260 <spi_flash_read_status_reg>
 8014594:	fa54 f480 	uxtab	r4, r4, r0
 8014598:	b264      	sxtb	r4, r4
		do
		{
			if(ret != M2M_SUCCESS) goto ERR;
 801459a:	b974      	cbnz	r4, 80145ba <spi_flash_erase+0x6a>
			ret += spi_flash_read_status_reg(&tmp);
 801459c:	f10d 0007 	add.w	r0, sp, #7
 80145a0:	f7ff fe5e 	bl	8014260 <spi_flash_read_status_reg>
 80145a4:	fa54 f480 	uxtab	r4, r4, r0
 80145a8:	b264      	sxtb	r4, r4
		}while(tmp & 0x01);
 80145aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80145ae:	f013 0f01 	tst.w	r3, #1
 80145b2:	d1f2      	bne.n	801459a <spi_flash_erase+0x4a>
	for(i = u32Offset; i < (u32Sz +u32Offset); i += (16*FLASH_PAGE_SZ))
 80145b4:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 80145b8:	e7d2      	b.n	8014560 <spi_flash_erase+0x10>
#ifdef PROFILING
	M2M_PRINT("#Erase time = %f sec\n", (GetTickCount()-t)/1000.0);
#endif
ERR:
	return ret;
}
 80145ba:	4620      	mov	r0, r4
 80145bc:	b003      	add	sp, #12
 80145be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080145c0 <spi_flash_get_size>:
*	@return		Size of Flash
*	@author		M.S.M
*	@version	1.0
*/
uint32 spi_flash_get_size(void)
{
 80145c0:	b508      	push	{r3, lr}
	uint32 u32FlashId = 0, u32FlashPwr = 0;
	static uint32 gu32InernalFlashSize= 0;

	if(!gu32InernalFlashSize)
 80145c2:	4b0a      	ldr	r3, [pc, #40]	; (80145ec <spi_flash_get_size+0x2c>)
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	b113      	cbz	r3, 80145ce <spi_flash_get_size+0xe>
			M2M_ERR("Cann't Detect Flash size\n");
		}
	}

	return gu32InernalFlashSize;
}
 80145c8:	4b08      	ldr	r3, [pc, #32]	; (80145ec <spi_flash_get_size+0x2c>)
 80145ca:	6818      	ldr	r0, [r3, #0]
 80145cc:	bd08      	pop	{r3, pc}
		u32FlashId = spi_flash_rdid();//spi_flash_probe();
 80145ce:	f7ff fe8f 	bl	80142f0 <spi_flash_rdid>
		if(u32FlashId != 0xffffffff)
 80145d2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80145d6:	d0f7      	beq.n	80145c8 <spi_flash_get_size+0x8>
			u32FlashPwr = ((u32FlashId>>16)&0xff) - 0x11; /*2MBIT is the min*/
 80145d8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80145dc:	3811      	subs	r0, #17
			gu32InernalFlashSize = 1<<u32FlashPwr;
 80145de:	2301      	movs	r3, #1
 80145e0:	fa03 f000 	lsl.w	r0, r3, r0
 80145e4:	4b01      	ldr	r3, [pc, #4]	; (80145ec <spi_flash_get_size+0x2c>)
 80145e6:	6018      	str	r0, [r3, #0]
 80145e8:	e7ee      	b.n	80145c8 <spi_flash_get_size+0x8>
 80145ea:	bf00      	nop
 80145ec:	20002420 	.word	0x20002420

080145f0 <_read_r>:
  return len;
#else
  (void)file;
  (void)ptr;
  (void)len;
  __errno_r(r) = EINVAL;
 80145f0:	2316      	movs	r3, #22
 80145f2:	6003      	str	r3, [r0, #0]
  return -1;
#endif
}
 80145f4:	f04f 30ff 	mov.w	r0, #4294967295
 80145f8:	4770      	bx	lr
 80145fa:	bf00      	nop
 80145fc:	f3af 8000 	nop.w

08014600 <_lseek_r>:
  (void)file;
  (void)ptr;
  (void)dir;

  return 0;
}
 8014600:	2000      	movs	r0, #0
 8014602:	4770      	bx	lr
 8014604:	f3af 8000 	nop.w
 8014608:	f3af 8000 	nop.w
 801460c:	f3af 8000 	nop.w

08014610 <_write_r>:
    return -1;
  }
  sdWrite(&STDOUT_SD, (uint8_t *)ptr, (size_t)len);
#endif
  return len;
}
 8014610:	4618      	mov	r0, r3
 8014612:	4770      	bx	lr
 8014614:	f3af 8000 	nop.w
 8014618:	f3af 8000 	nop.w
 801461c:	f3af 8000 	nop.w

08014620 <_close_r>:
{
  (void)r;
  (void)file;

  return 0;
}
 8014620:	2000      	movs	r0, #0
 8014622:	4770      	bx	lr
 8014624:	f3af 8000 	nop.w
 8014628:	f3af 8000 	nop.w
 801462c:	f3af 8000 	nop.w

08014630 <_sbrk_r>:

/***************************************************************************/

__attribute__((used))
caddr_t _sbrk_r(struct _reent *r, int incr)
{
 8014630:	b538      	push	{r3, r4, r5, lr}
 8014632:	4605      	mov	r5, r0
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr >= 0);
 8014634:	1e0c      	subs	r4, r1, #0
 8014636:	db08      	blt.n	801464a <_sbrk_r+0x1a>
 *
 * @api
 */
static inline void *chCoreAlloc(size_t size) {

  return chCoreAllocAlignedWithOffset(size, PORT_NATURAL_ALIGN, 0U);
 8014638:	2200      	movs	r2, #0
 801463a:	2104      	movs	r1, #4
 801463c:	4620      	mov	r0, r4
 801463e:	f7f6 fb1f 	bl	800ac80 <chCoreAllocAlignedWithOffset>

  p = chCoreAlloc((size_t)incr);
  if (p == NULL) {
 8014642:	4603      	mov	r3, r0
 8014644:	b128      	cbz	r0, 8014652 <_sbrk_r+0x22>
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 8014646:	4618      	mov	r0, r3
 8014648:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(incr >= 0);
 801464a:	4804      	ldr	r0, [pc, #16]	; (801465c <_sbrk_r+0x2c>)
 801464c:	f7f3 f858 	bl	8007700 <chSysHalt>
 8014650:	e7f2      	b.n	8014638 <_sbrk_r+0x8>
    __errno_r(r) = ENOMEM;
 8014652:	230c      	movs	r3, #12
 8014654:	602b      	str	r3, [r5, #0]
    return (caddr_t)-1;
 8014656:	f04f 33ff 	mov.w	r3, #4294967295
 801465a:	e7f4      	b.n	8014646 <_sbrk_r+0x16>
 801465c:	0801a3dc 	.word	0x0801a3dc

08014660 <_fstat_r>:

/***************************************************************************/

__attribute__((used))
int _fstat_r(struct _reent *r, int file, struct stat * st)
{
 8014660:	b510      	push	{r4, lr}
 8014662:	4614      	mov	r4, r2
  (void)r;
  (void)file;

  memset(st, 0, sizeof(*st));
 8014664:	2258      	movs	r2, #88	; 0x58
 8014666:	2100      	movs	r1, #0
 8014668:	4620      	mov	r0, r4
 801466a:	f003 ff29 	bl	80184c0 <memset>
  st->st_mode = S_IFCHR;
 801466e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014672:	6063      	str	r3, [r4, #4]
  return 0;
}
 8014674:	2000      	movs	r0, #0
 8014676:	bd10      	pop	{r4, pc}
 8014678:	f3af 8000 	nop.w
 801467c:	f3af 8000 	nop.w

08014680 <_isatty_r>:
{
  (void)r;
  (void)fd;

  return 1;
}
 8014680:	2001      	movs	r0, #1
 8014682:	4770      	bx	lr
	...

08014690 <gpt5cb>:
*/
volatile uint16_t adc_last_s_index = 0;    //adc sindex counter
uint32_t gpt_new_target = TIM5_CLK;
static void gpt5cb(GPTDriver *gptp) {
 (void)gptp;
 glbl_s_index++;
 8014690:	4a02      	ldr	r2, [pc, #8]	; (801469c <gpt5cb+0xc>)
 8014692:	8813      	ldrh	r3, [r2, #0]
 8014694:	3301      	adds	r3, #1
 8014696:	b29b      	uxth	r3, r3
 8014698:	8013      	strh	r3, [r2, #0]
}
 801469a:	4770      	bx	lr
 801469c:	20001a28 	.word	0x20001a28

080146a0 <chSysUnlock>:
static inline void chSysUnlock(void) {
 80146a0:	b508      	push	{r3, lr}
  _dbg_check_unlock();
 80146a2:	f7f3 f9d5 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80146a6:	f7f4 fcc3 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80146aa:	4b08      	ldr	r3, [pc, #32]	; (80146cc <chSysUnlock+0x2c>)
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d004      	beq.n	80146bc <chSysUnlock+0x1c>
 80146b2:	699b      	ldr	r3, [r3, #24]
 80146b4:	6899      	ldr	r1, [r3, #8]
 80146b6:	6893      	ldr	r3, [r2, #8]
 80146b8:	4299      	cmp	r1, r3
 80146ba:	d303      	bcc.n	80146c4 <chSysUnlock+0x24>
 80146bc:	2300      	movs	r3, #0
 80146be:	f383 8811 	msr	BASEPRI, r3
}
 80146c2:	bd08      	pop	{r3, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80146c4:	4802      	ldr	r0, [pc, #8]	; (80146d0 <chSysUnlock+0x30>)
 80146c6:	f7f3 f81b 	bl	8007700 <chSysHalt>
 80146ca:	e7f7      	b.n	80146bc <chSysUnlock+0x1c>
 80146cc:	200050f8 	.word	0x200050f8
 80146d0:	0801a3e4 	.word	0x0801a3e4
 80146d4:	f3af 8000 	nop.w
 80146d8:	f3af 8000 	nop.w
 80146dc:	f3af 8000 	nop.w

080146e0 <pps_thread>:

/*
 * Test PPS timing thread
 */
static THD_WORKING_AREA(wa_pps_thread, 512);
static THD_FUNCTION(pps_thread, arg) {
 80146e0:	b530      	push	{r4, r5, lr}
 80146e2:	b087      	sub	sp, #28
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80146e4:	4b35      	ldr	r3, [pc, #212]	; (80147bc <pps_thread+0xdc>)
 80146e6:	699b      	ldr	r3, [r3, #24]
 80146e8:	4a35      	ldr	r2, [pc, #212]	; (80147c0 <pps_thread+0xe0>)
 80146ea:	619a      	str	r2, [r3, #24]
  (void)arg;
  chRegSetThreadName("pps");

  gpt_last_target = TIM5_CLK;
 80146ec:	4d35      	ldr	r5, [pc, #212]	; (80147c4 <pps_thread+0xe4>)
 80146ee:	4b36      	ldr	r3, [pc, #216]	; (80147c8 <pps_thread+0xe8>)
 80146f0:	601d      	str	r5, [r3, #0]
  gptStart(&GPTD5, &gpt5cfg);   //periodic timer to trigger Sindex events
 80146f2:	4c36      	ldr	r4, [pc, #216]	; (80147cc <pps_thread+0xec>)
 80146f4:	4936      	ldr	r1, [pc, #216]	; (80147d0 <pps_thread+0xf0>)
 80146f6:	4620      	mov	r0, r4
 80146f8:	f7ed fa5a 	bl	8001bb0 <gptStart>
  gptStartContinuous(&GPTD5, gpt_new_target);
 80146fc:	4b35      	ldr	r3, [pc, #212]	; (80147d4 <pps_thread+0xf4>)
 80146fe:	6859      	ldr	r1, [r3, #4]
 8014700:	4620      	mov	r0, r4
 8014702:	f7ed fb25 	bl	8001d50 <gptStartContinuous>
  GPTD5.tim->CR1 &= ~TIM_CR1_ARPE; //clear the auto reload preload enable bit so that updates to ARR are immediate
 8014706:	68e2      	ldr	r2, [r4, #12]
 8014708:	6813      	ldr	r3, [r2, #0]
 801470a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801470e:	6013      	str	r3, [r2, #0]
  gpt_started = true;
 8014710:	2401      	movs	r4, #1
 8014712:	4b31      	ldr	r3, [pc, #196]	; (80147d8 <pps_thread+0xf8>)
 8014714:	701c      	strb	r4, [r3, #0]
 8014716:	2320      	movs	r3, #32
 8014718:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 801471c:	f7f4 fc80 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8014720:	f7f3 f97e 	bl	8007a20 <_dbg_check_lock>
  palEnableLineEvent( PPS_LINE, PAL_EVENT_MODE_RISING_EDGE );
 8014724:	4622      	mov	r2, r4
 8014726:	2100      	movs	r1, #0
 8014728:	482c      	ldr	r0, [pc, #176]	; (80147dc <pps_thread+0xfc>)
 801472a:	f7f0 fc81 	bl	8005030 <_pal_lld_enablepadevent>
  chSysUnlock();
 801472e:	f7ff ffb7 	bl	80146a0 <chSysUnlock>
  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8014732:	f04f 33ff 	mov.w	r3, #4294967295
 8014736:	2202      	movs	r2, #2
 8014738:	a901      	add	r1, sp, #4
 801473a:	4829      	ldr	r0, [pc, #164]	; (80147e0 <pps_thread+0x100>)
 801473c:	f7f5 fae0 	bl	8009d00 <chEvtRegisterMaskWithFlags>

  event_listener_t ppsListener;
  chEvtRegister(&evtPPS, &ppsListener, EVENT_MASK(0));
  chprintf((BaseSequentialStream*)&SD6, "\npps timing thread\n");
 8014740:	4c28      	ldr	r4, [pc, #160]	; (80147e4 <pps_thread+0x104>)
 8014742:	4929      	ldr	r1, [pc, #164]	; (80147e8 <pps_thread+0x108>)
 8014744:	4620      	mov	r0, r4
 8014746:	f7f7 fbdb 	bl	800bf00 <chprintf>
  chprintf((BaseSequentialStream*)&SD6, "\n\r GPT clk is %d\n", TIM5_CLK);
 801474a:	462a      	mov	r2, r5
 801474c:	4927      	ldr	r1, [pc, #156]	; (80147ec <pps_thread+0x10c>)
 801474e:	4620      	mov	r0, r4
 8014750:	f7f7 fbd6 	bl	800bf00 <chprintf>

  eventflags_t flags = chEvtGetAndClearFlags(&ppsListener);
 8014754:	a801      	add	r0, sp, #4
 8014756:	f7f5 fba3 	bl	8009ea0 <chEvtGetAndClearFlags>
 801475a:	e008      	b.n	801476e <pps_thread+0x8e>
      chprintf((BaseSequentialStream*)&SD6, "\n\rGPT last cnt: %d\n", gpt_cnt);
      chprintf((BaseSequentialStream*)&SD6, "\n\rGPT last error: %d\n", gpt_error);
      flags = chEvtGetAndClearFlags(&ppsListener); //clear flags
    }

    palSetLine(STATUS_LED_LINE);
 801475c:	4c1f      	ldr	r4, [pc, #124]	; (80147dc <pps_thread+0xfc>)
 801475e:	2508      	movs	r5, #8
 8014760:	8325      	strh	r5, [r4, #24]
    chThdSleepMilliseconds(100);
 8014762:	f242 7010 	movw	r0, #10000	; 0x2710
 8014766:	2100      	movs	r1, #0
 8014768:	f7f4 f9d2 	bl	8008b10 <chThdSleep>
    palClearLine(STATUS_LED_LINE);
 801476c:	8365      	strh	r5, [r4, #26]
    if( chEvtWaitAnyTimeout(ALL_EVENTS, chTimeMS2I( 1500 ) ) )
 801476e:	4a20      	ldr	r2, [pc, #128]	; (80147f0 <pps_thread+0x110>)
 8014770:	2300      	movs	r3, #0
 8014772:	f04f 30ff 	mov.w	r0, #4294967295
 8014776:	f7f5 fdb3 	bl	800a2e0 <chEvtWaitAnyTimeout>
 801477a:	2800      	cmp	r0, #0
 801477c:	d0ee      	beq.n	801475c <pps_thread+0x7c>
      chprintf((BaseSequentialStream*)&SD6, "\n\rGPT cur target: %d\n", gptGetIntervalX(&GPTD5));
 801477e:	4b13      	ldr	r3, [pc, #76]	; (80147cc <pps_thread+0xec>)
 8014780:	68db      	ldr	r3, [r3, #12]
 8014782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014784:	4c17      	ldr	r4, [pc, #92]	; (80147e4 <pps_thread+0x104>)
 8014786:	3201      	adds	r2, #1
 8014788:	491a      	ldr	r1, [pc, #104]	; (80147f4 <pps_thread+0x114>)
 801478a:	4620      	mov	r0, r4
 801478c:	f7f7 fbb8 	bl	800bf00 <chprintf>
      chprintf((BaseSequentialStream*)&SD6, "\n\rGPT last target: %d\n", gpt_last_target);
 8014790:	4b0d      	ldr	r3, [pc, #52]	; (80147c8 <pps_thread+0xe8>)
 8014792:	681a      	ldr	r2, [r3, #0]
 8014794:	4918      	ldr	r1, [pc, #96]	; (80147f8 <pps_thread+0x118>)
 8014796:	4620      	mov	r0, r4
 8014798:	f7f7 fbb2 	bl	800bf00 <chprintf>
      chprintf((BaseSequentialStream*)&SD6, "\n\rGPT last cnt: %d\n", gpt_cnt);
 801479c:	4b17      	ldr	r3, [pc, #92]	; (80147fc <pps_thread+0x11c>)
 801479e:	681a      	ldr	r2, [r3, #0]
 80147a0:	4917      	ldr	r1, [pc, #92]	; (8014800 <pps_thread+0x120>)
 80147a2:	4620      	mov	r0, r4
 80147a4:	f7f7 fbac 	bl	800bf00 <chprintf>
      chprintf((BaseSequentialStream*)&SD6, "\n\rGPT last error: %d\n", gpt_error);
 80147a8:	4b0b      	ldr	r3, [pc, #44]	; (80147d8 <pps_thread+0xf8>)
 80147aa:	685a      	ldr	r2, [r3, #4]
 80147ac:	4915      	ldr	r1, [pc, #84]	; (8014804 <pps_thread+0x124>)
 80147ae:	4620      	mov	r0, r4
 80147b0:	f7f7 fba6 	bl	800bf00 <chprintf>
      flags = chEvtGetAndClearFlags(&ppsListener); //clear flags
 80147b4:	a801      	add	r0, sp, #4
 80147b6:	f7f5 fb73 	bl	8009ea0 <chEvtGetAndClearFlags>
 80147ba:	e7cf      	b.n	801475c <pps_thread+0x7c>
 80147bc:	200050f8 	.word	0x200050f8
 80147c0:	0801a9c0 	.word	0x0801a9c0
 80147c4:	0501bd00 	.word	0x0501bd00
 80147c8:	2000f7a4 	.word	0x2000f7a4
 80147cc:	200048d8 	.word	0x200048d8
 80147d0:	0801a3f0 	.word	0x0801a3f0
 80147d4:	20001a28 	.word	0x20001a28
 80147d8:	20002428 	.word	0x20002428
 80147dc:	40021000 	.word	0x40021000
 80147e0:	2000fb88 	.word	0x2000fb88
 80147e4:	20004da0 	.word	0x20004da0
 80147e8:	0801a9c4 	.word	0x0801a9c4
 80147ec:	0801a9d8 	.word	0x0801a9d8
 80147f0:	000249f0 	.word	0x000249f0
 80147f4:	0801a9ec 	.word	0x0801a9ec
 80147f8:	0801aa04 	.word	0x0801aa04
 80147fc:	2000fdb0 	.word	0x2000fdb0
 8014800:	0801aa1c 	.word	0x0801aa1c
 8014804:	0801aa30 	.word	0x0801aa30
 8014808:	f3af 8000 	nop.w
 801480c:	f3af 8000 	nop.w

08014810 <gps_thread>:
static THD_FUNCTION(gps_thread, arg) {
 8014810:	b510      	push	{r4, lr}
 8014812:	b096      	sub	sp, #88	; 0x58
 8014814:	4b5a      	ldr	r3, [pc, #360]	; (8014980 <gps_thread+0x170>)
 8014816:	699b      	ldr	r3, [r3, #24]
 8014818:	4a5a      	ldr	r2, [pc, #360]	; (8014984 <gps_thread+0x174>)
 801481a:	619a      	str	r2, [r3, #24]
   palSetPadMode(GPIOD, 8, PAL_MODE_ALTERNATE(7));
 801481c:	4c5a      	ldr	r4, [pc, #360]	; (8014988 <gps_thread+0x178>)
 801481e:	f240 3282 	movw	r2, #898	; 0x382
 8014822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014826:	4620      	mov	r0, r4
 8014828:	f7f0 fb8a 	bl	8004f40 <_pal_lld_setgroupmode>
   palSetPadMode(GPIOD, 9, PAL_MODE_ALTERNATE(7));
 801482c:	f240 3282 	movw	r2, #898	; 0x382
 8014830:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014834:	4620      	mov	r0, r4
 8014836:	f7f0 fb83 	bl	8004f40 <_pal_lld_setgroupmode>
   sdStart(&SD3, &gpsSerialcfg);
 801483a:	4c54      	ldr	r4, [pc, #336]	; (801498c <gps_thread+0x17c>)
 801483c:	4954      	ldr	r1, [pc, #336]	; (8014990 <gps_thread+0x180>)
 801483e:	4620      	mov	r0, r4
 8014840:	f7ee fc96 	bl	8003170 <sdStart>
   gps_init();
 8014844:	f002 fc4c 	bl	80170e0 <gps_init>
 8014848:	f04f 33ff 	mov.w	r3, #4294967295
 801484c:	2202      	movs	r2, #2
 801484e:	a90f      	add	r1, sp, #60	; 0x3c
 8014850:	1d20      	adds	r0, r4, #4
 8014852:	f7f5 fa55 	bl	8009d00 <chEvtRegisterMaskWithFlags>
 8014856:	f04f 33ff 	mov.w	r3, #4294967295
 801485a:	2202      	movs	r2, #2
 801485c:	a90a      	add	r1, sp, #40	; 0x28
 801485e:	484d      	ldr	r0, [pc, #308]	; (8014994 <gps_thread+0x184>)
 8014860:	f7f5 fa4e 	bl	8009d00 <chEvtRegisterMaskWithFlags>
      chEvtWaitOne(EVENT_MASK(1));
 8014864:	2002      	movs	r0, #2
 8014866:	f7f5 fc23 	bl	800a0b0 <chEvtWaitOne>
      flags = chEvtGetAndClearFlags(&elGPSdata);
 801486a:	a80f      	add	r0, sp, #60	; 0x3c
 801486c:	f7f5 fb18 	bl	8009ea0 <chEvtGetAndClearFlags>
      if (flags & CHN_INPUT_AVAILABLE)
 8014870:	f010 0f04 	tst.w	r0, #4
 8014874:	d176      	bne.n	8014964 <gps_thread+0x154>
      flags = chEvtGetAndClearFlags(&gpsListener);
 8014876:	a80a      	add	r0, sp, #40	; 0x28
 8014878:	f7f5 fb12 	bl	8009ea0 <chEvtGetAndClearFlags>
      if( flags & GPS_NEW_RMC )
 801487c:	f010 0f01 	tst.w	r0, #1
 8014880:	d0f0      	beq.n	8014864 <gps_thread+0x54>
        if( gps_data.fix_status == 'A')
 8014882:	4b45      	ldr	r3, [pc, #276]	; (8014998 <gps_thread+0x188>)
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	2b41      	cmp	r3, #65	; 0x41
 8014888:	d1ec      	bne.n	8014864 <gps_thread+0x54>
          tmpDateTime.year = (2000-1980)+( gps_data.utc_date[4]-'0' )*10 + ( gps_data.utc_date[5]-'0' ); //years since 1980
 801488a:	4b43      	ldr	r3, [pc, #268]	; (8014998 <gps_thread+0x188>)
 801488c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8014890:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8014894:	3a30      	subs	r2, #48	; 0x30
 8014896:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801489a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801489e:	3a1c      	subs	r2, #28
 80148a0:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
          tmpDateTime.month = ( gps_data.utc_date[2]-'0' )*10 + ( gps_data.utc_date[3]-'0' );
 80148a4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80148a8:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80148ac:	3a30      	subs	r2, #48	; 0x30
 80148ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80148b2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80148b6:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
 80148ba:	f362 0003 	bfi	r0, r2, #0, #4
          tmpDateTime.day = ( gps_data.utc_date[0]-'0' )*10 + ( gps_data.utc_date[1]-'0' );
 80148be:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80148c2:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 80148c6:	3a30      	subs	r2, #48	; 0x30
 80148c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80148cc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80148d0:	3a30      	subs	r2, #48	; 0x30
 80148d2:	f89d 1052 	ldrb.w	r1, [sp, #82]	; 0x52
 80148d6:	f362 0104 	bfi	r1, r2, #0, #5
 80148da:	f88d 1052 	strb.w	r1, [sp, #82]	; 0x52
          tmp_second = ( gps_data.utc_time[4]-'0' )*10 + ( gps_data.utc_time[5]-'0' );
 80148de:	f893 4025 	ldrb.w	r4, [r3, #37]	; 0x25
 80148e2:	3c30      	subs	r4, #48	; 0x30
 80148e4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80148e8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80148ec:	3a30      	subs	r2, #48	; 0x30
 80148ee:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          tmp_minute = ( gps_data.utc_time[2]-'0' )*10 + ( gps_data.utc_time[3]-'0' );
 80148f2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80148f6:	3a30      	subs	r2, #48	; 0x30
 80148f8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80148fc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8014900:	3a30      	subs	r2, #48	; 0x30
 8014902:	eb02 0241 	add.w	r2, r2, r1, lsl #1
          tmp_hour = ( gps_data.utc_time[0]-'0' )*10 + ( gps_data.utc_time[1]-'0' );
 8014906:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 801490a:	3930      	subs	r1, #48	; 0x30
 801490c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8014910:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8014914:	3b30      	subs	r3, #48	; 0x30
 8014916:	eb03 0341 	add.w	r3, r3, r1, lsl #1
          tmpDateTime.millisecond = 1000*((tmp_hour)*3600 + tmp_minute*60 + tmp_second); //millisecond since midnight
 801491a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 801491e:	0092      	lsls	r2, r2, #2
 8014920:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014924:	fb01 2303 	mla	r3, r1, r3, r2
 8014928:	4423      	add	r3, r4
 801492a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 801492e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014932:	fb02 f303 	mul.w	r3, r2, r3
 8014936:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 801493a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801493c:	f363 021a 	bfi	r2, r3, #0, #27
 8014940:	9215      	str	r2, [sp, #84]	; 0x54
          tmpDateTime.dstflag = 0;
 8014942:	f36f 1004 	bfc	r0, #4, #1
 8014946:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
          rtcSetTime(&RTCD1, &tmpDateTime);
 801494a:	a914      	add	r1, sp, #80	; 0x50
 801494c:	4813      	ldr	r0, [pc, #76]	; (801499c <gps_thread+0x18c>)
 801494e:	f7ed fd47 	bl	80023e0 <rtcSetTime>
          rtcConvertDateTimeToStructTm(&tmpDateTime,&tmp_time,NULL);
 8014952:	2200      	movs	r2, #0
 8014954:	a901      	add	r1, sp, #4
 8014956:	a814      	add	r0, sp, #80	; 0x50
 8014958:	f7ed fda2 	bl	80024a0 <rtcConvertDateTimeToStructTm>
 801495c:	e782      	b.n	8014864 <gps_thread+0x54>
         while (charbuf != Q_TIMEOUT);
 801495e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8014962:	d088      	beq.n	8014876 <gps_thread+0x66>
            charbuf = chnGetTimeout(&SD3, TIME_IMMEDIATE);
 8014964:	4809      	ldr	r0, [pc, #36]	; (801498c <gps_thread+0x17c>)
 8014966:	6803      	ldr	r3, [r0, #0]
 8014968:	6999      	ldr	r1, [r3, #24]
 801496a:	2200      	movs	r2, #0
 801496c:	2300      	movs	r3, #0
 801496e:	4788      	blx	r1
 8014970:	4604      	mov	r4, r0
            if ( charbuf != Q_TIMEOUT )
 8014972:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014976:	d0f2      	beq.n	801495e <gps_thread+0x14e>
               GPSParseChar((char)charbuf);
 8014978:	b2c0      	uxtb	r0, r0
 801497a:	f002 fcd1 	bl	8017320 <GPSParseChar>
 801497e:	e7ee      	b.n	801495e <gps_thread+0x14e>
 8014980:	200050f8 	.word	0x200050f8
 8014984:	0801aa48 	.word	0x0801aa48
 8014988:	40020c00 	.word	0x40020c00
 801498c:	20004b44 	.word	0x20004b44
 8014990:	0801a400 	.word	0x0801a400
 8014994:	2000fe48 	.word	0x2000fe48
 8014998:	2000fc78 	.word	0x2000fc78
 801499c:	20004820 	.word	0x20004820

080149a0 <blinker_thread>:
static THD_FUNCTION(blinker_thread, arg) {
 80149a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149a2:	b087      	sub	sp, #28
 80149a4:	4b41      	ldr	r3, [pc, #260]	; (8014aac <blinker_thread+0x10c>)
 80149a6:	699b      	ldr	r3, [r3, #24]
 80149a8:	4a41      	ldr	r2, [pc, #260]	; (8014ab0 <blinker_thread+0x110>)
 80149aa:	619a      	str	r2, [r3, #24]
  palSetLineMode(STATUS_LED_LINE,PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);    //set status LED line mode
 80149ac:	4c41      	ldr	r4, [pc, #260]	; (8014ab4 <blinker_thread+0x114>)
 80149ae:	2219      	movs	r2, #25
 80149b0:	2108      	movs	r1, #8
 80149b2:	4620      	mov	r0, r4
 80149b4:	f7f0 fac4 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetLineMode(PWR_CTL_LINE,PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);    //set status LED line mode
 80149b8:	2219      	movs	r2, #25
 80149ba:	2180      	movs	r1, #128	; 0x80
 80149bc:	4620      	mov	r0, r4
 80149be:	f7f0 fabf 	bl	8004f40 <_pal_lld_setgroupmode>
  palClearLine(PWR_CTL_LINE);
 80149c2:	2380      	movs	r3, #128	; 0x80
 80149c4:	8363      	strh	r3, [r4, #26]
  palClearLine(MCP_RST_LINE);
 80149c6:	2502      	movs	r5, #2
 80149c8:	8365      	strh	r5, [r4, #26]
  chThdSleepMilliseconds(1);
 80149ca:	2064      	movs	r0, #100	; 0x64
 80149cc:	2100      	movs	r1, #0
 80149ce:	f7f4 f89f 	bl	8008b10 <chThdSleep>
  palSetLine(MCP_RST_LINE);
 80149d2:	8325      	strh	r5, [r4, #24]
  chThdSleepMilliseconds(1);
 80149d4:	2064      	movs	r0, #100	; 0x64
 80149d6:	2100      	movs	r1, #0
 80149d8:	f7f4 f89a 	bl	8008b10 <chThdSleep>
  mcp23017_init(&mcp_cfg);
 80149dc:	4c36      	ldr	r4, [pc, #216]	; (8014ab8 <blinker_thread+0x118>)
 80149de:	4620      	mov	r0, r4
 80149e0:	f002 fcfe 	bl	80173e0 <mcp23017_init>
  mcp23017_pinModeAB(&mcp_cfg, 0x07, MCP23017_OUTPUT);
 80149e4:	2201      	movs	r2, #1
 80149e6:	2107      	movs	r1, #7
 80149e8:	4620      	mov	r0, r4
 80149ea:	f002 fdb1 	bl	8017550 <mcp23017_pinModeAB>
 80149ee:	f04f 33ff 	mov.w	r3, #4294967295
 80149f2:	462a      	mov	r2, r5
 80149f4:	a901      	add	r1, sp, #4
 80149f6:	4831      	ldr	r0, [pc, #196]	; (8014abc <blinker_thread+0x11c>)
 80149f8:	f7f5 f982 	bl	8009d00 <chEvtRegisterMaskWithFlags>
  flags = chEvtGetAndClearFlags(&ppsListener); //clear flags
 80149fc:	a801      	add	r0, sp, #4
 80149fe:	f7f5 fa4f 	bl	8009ea0 <chEvtGetAndClearFlags>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RDY_LED_PIN_POS, rdy_led_state);
 8014a02:	2300      	movs	r3, #0
 8014a04:	462a      	mov	r2, r5
 8014a06:	2107      	movs	r1, #7
 8014a08:	4620      	mov	r0, r4
 8014a0a:	f002 fde1 	bl	80175d0 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, PPS_LED_PIN_POS, pps_led_state);
 8014a0e:	2300      	movs	r3, #0
 8014a10:	2203      	movs	r2, #3
 8014a12:	2107      	movs	r1, #7
 8014a14:	4620      	mov	r0, r4
 8014a16:	f002 fddb 	bl	80175d0 <mcp23017_digitalWrite>
  bool pps_led_state = 0;
 8014a1a:	2700      	movs	r7, #0
  uint32_t rdy_blink_timebase = 500;
 8014a1c:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
  uint8_t cycle_cnt = 0;
 8014a20:	463c      	mov	r4, r7
 8014a22:	e017      	b.n	8014a54 <blinker_thread+0xb4>
      flags = chEvtGetAndClearFlags(&ppsListener);  //clear flags
 8014a24:	a801      	add	r0, sp, #4
 8014a26:	f7f5 fa3b 	bl	8009ea0 <chEvtGetAndClearFlags>
      pps_led_state = !pps_led_state;               //toggle pps led if pps event
 8014a2a:	f087 0701 	eor.w	r7, r7, #1
 8014a2e:	e024      	b.n	8014a7a <blinker_thread+0xda>
      rdy_blink_timebase = 250;
 8014a30:	26fa      	movs	r6, #250	; 0xfa
 8014a32:	e02e      	b.n	8014a92 <blinker_thread+0xf2>
      rdy_led_state = 0;
 8014a34:	2300      	movs	r3, #0
    mcp23017_digitalWrite(&mcp_cfg, 0x07, RDY_LED_PIN_POS, rdy_led_state);
 8014a36:	4d20      	ldr	r5, [pc, #128]	; (8014ab8 <blinker_thread+0x118>)
 8014a38:	2202      	movs	r2, #2
 8014a3a:	2107      	movs	r1, #7
 8014a3c:	4628      	mov	r0, r5
 8014a3e:	f002 fdc7 	bl	80175d0 <mcp23017_digitalWrite>
    mcp23017_digitalWrite(&mcp_cfg, 0x07, PPS_LED_PIN_POS, pps_led_state);
 8014a42:	463b      	mov	r3, r7
 8014a44:	2203      	movs	r2, #3
 8014a46:	2107      	movs	r1, #7
 8014a48:	4628      	mov	r0, r5
 8014a4a:	f002 fdc1 	bl	80175d0 <mcp23017_digitalWrite>
    cycle_cnt = ++cycle_cnt%4;
 8014a4e:	3401      	adds	r4, #1
 8014a50:	f004 0403 	and.w	r4, r4, #3
  ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 8014a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014a58:	2300      	movs	r3, #0
 8014a5a:	4d19      	ldr	r5, [pc, #100]	; (8014ac0 <blinker_thread+0x120>)
 8014a5c:	f240 30e7 	movw	r0, #999	; 0x3e7
 8014a60:	2100      	movs	r1, #0
 8014a62:	fbe5 0106 	umlal	r0, r1, r5, r6
 8014a66:	f003 f8fb 	bl	8017c60 <__aeabi_uldivmod>
    if( chEvtWaitAnyTimeout(ALL_EVENTS, chTimeMS2I( rdy_blink_timebase ) ) )
 8014a6a:	4602      	mov	r2, r0
 8014a6c:	460b      	mov	r3, r1
 8014a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8014a72:	f7f5 fc35 	bl	800a2e0 <chEvtWaitAnyTimeout>
 8014a76:	2800      	cmp	r0, #0
 8014a78:	d1d4      	bne.n	8014a24 <blinker_thread+0x84>
    if( node_state&STATE_ACTIVE )
 8014a7a:	4b12      	ldr	r3, [pc, #72]	; (8014ac4 <blinker_thread+0x124>)
 8014a7c:	7a1b      	ldrb	r3, [r3, #8]
 8014a7e:	f013 0f08 	tst.w	r3, #8
 8014a82:	d001      	beq.n	8014a88 <blinker_thread+0xe8>
      rdy_blink_timebase = 500;
 8014a84:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    if( logging_state == RECORDING )
 8014a88:	4b0e      	ldr	r3, [pc, #56]	; (8014ac4 <blinker_thread+0x124>)
 8014a8a:	7a5b      	ldrb	r3, [r3, #9]
 8014a8c:	b2db      	uxtb	r3, r3
 8014a8e:	2b04      	cmp	r3, #4
 8014a90:	d0ce      	beq.n	8014a30 <blinker_thread+0x90>
    if( !( node_state&STATE_ACTIVE ) )
 8014a92:	4b0c      	ldr	r3, [pc, #48]	; (8014ac4 <blinker_thread+0x124>)
 8014a94:	7a1b      	ldrb	r3, [r3, #8]
 8014a96:	f013 0f08 	tst.w	r3, #8
 8014a9a:	d0cb      	beq.n	8014a34 <blinker_thread+0x94>
    else if( cycle_cnt%2 == 0 )
 8014a9c:	f014 0f01 	tst.w	r4, #1
 8014aa0:	d101      	bne.n	8014aa6 <blinker_thread+0x106>
      rdy_led_state = 1;
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	e7c7      	b.n	8014a36 <blinker_thread+0x96>
      rdy_led_state = 0;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	e7c5      	b.n	8014a36 <blinker_thread+0x96>
 8014aaa:	bf00      	nop
 8014aac:	200050f8 	.word	0x200050f8
 8014ab0:	0801aa50 	.word	0x0801aa50
 8014ab4:	40021000 	.word	0x40021000
 8014ab8:	0801a40c 	.word	0x0801a40c
 8014abc:	2000fb88 	.word	0x2000fb88
 8014ac0:	000186a0 	.word	0x000186a0
 8014ac4:	20002428 	.word	0x20002428
 8014ac8:	f3af 8000 	nop.w
 8014acc:	f3af 8000 	nop.w

08014ad0 <wifi_cb>:
{
 8014ad0:	b570      	push	{r4, r5, r6, lr}
 8014ad2:	b082      	sub	sp, #8
 8014ad4:	460c      	mov	r4, r1
    switch (u8MsgType) {
 8014ad6:	3811      	subs	r0, #17
 8014ad8:	2821      	cmp	r0, #33	; 0x21
 8014ada:	d875      	bhi.n	8014bc8 <wifi_cb+0xf8>
 8014adc:	e8df f000 	tbb	[pc, r0]
 8014ae0:	74227411 	.word	0x74227411
 8014ae4:	74747474 	.word	0x74747474
 8014ae8:	74747474 	.word	0x74747474
 8014aec:	74747474 	.word	0x74747474
 8014af0:	74747474 	.word	0x74747474
 8014af4:	74747474 	.word	0x74747474
 8014af8:	5b747474 	.word	0x5b747474
 8014afc:	74747474 	.word	0x74747474
 8014b00:	6974      	.short	0x6974
          scan_request_index = 0;
 8014b02:	4b32      	ldr	r3, [pc, #200]	; (8014bcc <wifi_cb+0xfc>)
 8014b04:	2200      	movs	r2, #0
 8014b06:	729a      	strb	r2, [r3, #10]
          if (pstrInfo->u8NumofCh >= 1) {
 8014b08:	780b      	ldrb	r3, [r1, #0]
 8014b0a:	b13b      	cbz	r3, 8014b1c <wifi_cb+0x4c>
              m2m_wifi_req_scan_result(scan_request_index);
 8014b0c:	4610      	mov	r0, r2
 8014b0e:	f7fc ffe7 	bl	8011ae0 <m2m_wifi_req_scan_result>
              scan_request_index++;
 8014b12:	4a2e      	ldr	r2, [pc, #184]	; (8014bcc <wifi_cb+0xfc>)
 8014b14:	7a93      	ldrb	r3, [r2, #10]
 8014b16:	3301      	adds	r3, #1
 8014b18:	7293      	strb	r3, [r2, #10]
 8014b1a:	e055      	b.n	8014bc8 <wifi_cb+0xf8>
              m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 8014b1c:	20ff      	movs	r0, #255	; 0xff
 8014b1e:	f7fc fe2f 	bl	8011780 <m2m_wifi_request_scan>
 8014b22:	e051      	b.n	8014bc8 <wifi_cb+0xf8>
          uint16_t scan_ssid_len = strlen((const char *)pstrScanResult->au8SSID);
 8014b24:	340a      	adds	r4, #10
 8014b26:	4620      	mov	r0, r4
 8014b28:	f003 fc2a 	bl	8018380 <strlen>
 8014b2c:	b285      	uxth	r5, r0
          myPrintf("[%d] SSID:%s\r\n", scan_request_index, pstrScanResult->au8SSID);  /* display founded AP. */
 8014b2e:	4622      	mov	r2, r4
 8014b30:	4b26      	ldr	r3, [pc, #152]	; (8014bcc <wifi_cb+0xfc>)
 8014b32:	7a99      	ldrb	r1, [r3, #10]
 8014b34:	4826      	ldr	r0, [pc, #152]	; (8014bd0 <wifi_cb+0x100>)
 8014b36:	f7f7 f9f3 	bl	800bf20 <myPrintf>
          num_founded_ap = m2m_wifi_get_num_ap_found();
 8014b3a:	f7fc ffe9 	bl	8011b10 <m2m_wifi_get_num_ap_found>
 8014b3e:	4606      	mov	r6, r0
          if (scan_ssid_len) {
 8014b40:	b10d      	cbz	r5, 8014b46 <wifi_cb+0x76>
              (
 8014b42:	2d04      	cmp	r5, #4
 8014b44:	d00a      	beq.n	8014b5c <wifi_cb+0x8c>
          if (scan_request_index < num_founded_ap) {
 8014b46:	4b21      	ldr	r3, [pc, #132]	; (8014bcc <wifi_cb+0xfc>)
 8014b48:	7a98      	ldrb	r0, [r3, #10]
 8014b4a:	4286      	cmp	r6, r0
 8014b4c:	d91b      	bls.n	8014b86 <wifi_cb+0xb6>
              m2m_wifi_req_scan_result(scan_request_index);
 8014b4e:	f7fc ffc7 	bl	8011ae0 <m2m_wifi_req_scan_result>
              scan_request_index++;
 8014b52:	4a1e      	ldr	r2, [pc, #120]	; (8014bcc <wifi_cb+0xfc>)
 8014b54:	7a93      	ldrb	r3, [r2, #10]
 8014b56:	3301      	adds	r3, #1
 8014b58:	7293      	strb	r3, [r2, #10]
 8014b5a:	e035      	b.n	8014bc8 <wifi_cb+0xf8>
                  (!memcmp(pstrScanResult->au8SSID, (uint8_t *)MAIN_WLAN_SSID, demo_ssid_len))
 8014b5c:	2204      	movs	r2, #4
 8014b5e:	491d      	ldr	r1, [pc, #116]	; (8014bd4 <wifi_cb+0x104>)
 8014b60:	4620      	mov	r0, r4
 8014b62:	f003 fc7b 	bl	801845c <memcmp>
                  (demo_ssid_len == scan_ssid_len) &&
 8014b66:	2800      	cmp	r0, #0
 8014b68:	d1ed      	bne.n	8014b46 <wifi_cb+0x76>
                  myPrintf("Found %s \r\n", MAIN_WLAN_SSID);
 8014b6a:	4c1a      	ldr	r4, [pc, #104]	; (8014bd4 <wifi_cb+0x104>)
 8014b6c:	4621      	mov	r1, r4
 8014b6e:	481a      	ldr	r0, [pc, #104]	; (8014bd8 <wifi_cb+0x108>)
 8014b70:	f7f7 f9d6 	bl	800bf20 <myPrintf>
                  m2m_wifi_connect((char *)MAIN_WLAN_SSID,
 8014b74:	23ff      	movs	r3, #255	; 0xff
 8014b76:	9300      	str	r3, [sp, #0]
 8014b78:	4b18      	ldr	r3, [pc, #96]	; (8014bdc <wifi_cb+0x10c>)
 8014b7a:	2202      	movs	r2, #2
 8014b7c:	2105      	movs	r1, #5
 8014b7e:	4620      	mov	r0, r4
 8014b80:	f7fc fd2e 	bl	80115e0 <m2m_wifi_connect>
                  break;
 8014b84:	e020      	b.n	8014bc8 <wifi_cb+0xf8>
              myPrintf("can not find AP %s\r\n", MAIN_WLAN_SSID);
 8014b86:	4913      	ldr	r1, [pc, #76]	; (8014bd4 <wifi_cb+0x104>)
 8014b88:	4815      	ldr	r0, [pc, #84]	; (8014be0 <wifi_cb+0x110>)
 8014b8a:	f7f7 f9c9 	bl	800bf20 <myPrintf>
              m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 8014b8e:	20ff      	movs	r0, #255	; 0xff
 8014b90:	f7fc fdf6 	bl	8011780 <m2m_wifi_request_scan>
 8014b94:	e018      	b.n	8014bc8 <wifi_cb+0xf8>
          if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
 8014b96:	780b      	ldrb	r3, [r1, #0]
 8014b98:	2b01      	cmp	r3, #1
 8014b9a:	d007      	beq.n	8014bac <wifi_cb+0xdc>
          } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 8014b9c:	b9a3      	cbnz	r3, 8014bc8 <wifi_cb+0xf8>
              myPrintf("Wi-Fi disconnected\r\n");
 8014b9e:	4811      	ldr	r0, [pc, #68]	; (8014be4 <wifi_cb+0x114>)
 8014ba0:	f7f7 f9be 	bl	800bf20 <myPrintf>
              m2m_wifi_request_scan(M2M_WIFI_CH_ALL); /* Request scan. */
 8014ba4:	20ff      	movs	r0, #255	; 0xff
 8014ba6:	f7fc fdeb 	bl	8011780 <m2m_wifi_request_scan>
 8014baa:	e00d      	b.n	8014bc8 <wifi_cb+0xf8>
              m2m_wifi_request_dhcp_client();
 8014bac:	f7fc fd60 	bl	8011670 <m2m_wifi_request_dhcp_client>
 8014bb0:	e00a      	b.n	8014bc8 <wifi_cb+0xf8>
          myPrintf("Wi-Fi connected\r\n");
 8014bb2:	480d      	ldr	r0, [pc, #52]	; (8014be8 <wifi_cb+0x118>)
 8014bb4:	f7f7 f9b4 	bl	800bf20 <myPrintf>
                  pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8014bb8:	7821      	ldrb	r1, [r4, #0]
 8014bba:	7862      	ldrb	r2, [r4, #1]
 8014bbc:	78a3      	ldrb	r3, [r4, #2]
 8014bbe:	78e0      	ldrb	r0, [r4, #3]
          myPrintf("Wi-Fi IP is %u.%u.%u.%u\r\n",
 8014bc0:	9000      	str	r0, [sp, #0]
 8014bc2:	480a      	ldr	r0, [pc, #40]	; (8014bec <wifi_cb+0x11c>)
 8014bc4:	f7f7 f9ac 	bl	800bf20 <myPrintf>
}
 8014bc8:	b002      	add	sp, #8
 8014bca:	bd70      	pop	{r4, r5, r6, pc}
 8014bcc:	20002428 	.word	0x20002428
 8014bd0:	0801aa58 	.word	0x0801aa58
 8014bd4:	0801aa68 	.word	0x0801aa68
 8014bd8:	0801aa70 	.word	0x0801aa70
 8014bdc:	0801aa7c 	.word	0x0801aa7c
 8014be0:	0801aa88 	.word	0x0801aa88
 8014be4:	0801aaa0 	.word	0x0801aaa0
 8014be8:	0801aab8 	.word	0x0801aab8
 8014bec:	0801aacc 	.word	0x0801aacc

08014bf0 <write_config_eeprom>:
{
 8014bf0:	b510      	push	{r4, lr}
  eeFS = I2CEepromFileOpen(&eeFile, &eeCfg, EepromFindDevice(EEPROM_DEV_24XX));
 8014bf2:	2018      	movs	r0, #24
 8014bf4:	f7ee ff7c 	bl	8003af0 <EepromFindDevice>
 8014bf8:	4c0c      	ldr	r4, [pc, #48]	; (8014c2c <write_config_eeprom+0x3c>)
 8014bfa:	4602      	mov	r2, r0
 8014bfc:	490c      	ldr	r1, [pc, #48]	; (8014c30 <write_config_eeprom+0x40>)
 8014bfe:	f104 000c 	add.w	r0, r4, #12
 8014c02:	f7ee ff85 	bl	8003b10 <EepromFileOpen>
 8014c06:	61e0      	str	r0, [r4, #28]
  fileStreamSetPosition(eeFS, NODE_CFG_EEPROM_ADDR);//start at eeprom config offset
 8014c08:	6803      	ldr	r3, [r0, #0]
 8014c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c0c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8014c10:	4798      	blx	r3
  fileStreamWrite(eeFS, &node_config, sizeof(node_config)); //write to config file
 8014c12:	69e0      	ldr	r0, [r4, #28]
 8014c14:	6803      	ldr	r3, [r0, #0]
 8014c16:	685b      	ldr	r3, [r3, #4]
 8014c18:	2239      	movs	r2, #57	; 0x39
 8014c1a:	f104 0120 	add.w	r1, r4, #32
 8014c1e:	4798      	blx	r3
  fileStreamClose(eeFS);
 8014c20:	69e0      	ldr	r0, [r4, #28]
 8014c22:	6803      	ldr	r3, [r0, #0]
 8014c24:	695b      	ldr	r3, [r3, #20]
 8014c26:	4798      	blx	r3
}
 8014c28:	bd10      	pop	{r4, pc}
 8014c2a:	bf00      	nop
 8014c2c:	20002428 	.word	0x20002428
 8014c30:	20001a30 	.word	0x20001a30
 8014c34:	f3af 8000 	nop.w
 8014c38:	f3af 8000 	nop.w
 8014c3c:	f3af 8000 	nop.w

08014c40 <read_config_eeprom>:
{
 8014c40:	b510      	push	{r4, lr}
 8014c42:	b09a      	sub	sp, #104	; 0x68
  eeFS = I2CEepromFileOpen(&eeFile, &eeCfg, EepromFindDevice(EEPROM_DEV_24XX));
 8014c44:	2018      	movs	r0, #24
 8014c46:	f7ee ff53 	bl	8003af0 <EepromFindDevice>
 8014c4a:	4c13      	ldr	r4, [pc, #76]	; (8014c98 <read_config_eeprom+0x58>)
 8014c4c:	4602      	mov	r2, r0
 8014c4e:	4913      	ldr	r1, [pc, #76]	; (8014c9c <read_config_eeprom+0x5c>)
 8014c50:	f104 000c 	add.w	r0, r4, #12
 8014c54:	f7ee ff5c 	bl	8003b10 <EepromFileOpen>
 8014c58:	61e0      	str	r0, [r4, #28]
  fileStreamSetPosition(eeFS, NODE_CFG_EEPROM_ADDR);//start at eeprom config offse
 8014c5a:	6803      	ldr	r3, [r0, #0]
 8014c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c5e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8014c62:	4798      	blx	r3
  fileStreamRead(eeFS, &node_config, sizeof(node_config)); //read in the config file
 8014c64:	69e0      	ldr	r0, [r4, #28]
 8014c66:	6803      	ldr	r3, [r0, #0]
 8014c68:	689b      	ldr	r3, [r3, #8]
 8014c6a:	2239      	movs	r2, #57	; 0x39
 8014c6c:	f104 0120 	add.w	r1, r4, #32
 8014c70:	4798      	blx	r3
  fileStreamSetPosition(eeFS, NODE_CFG_EEPROM_ADDR);//start at eeprom config offse
 8014c72:	69e0      	ldr	r0, [r4, #28]
 8014c74:	6803      	ldr	r3, [r0, #0]
 8014c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c78:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8014c7c:	4798      	blx	r3
  fileStreamRead(eeFS, tmpBuff, 100); //read in the config file
 8014c7e:	69e0      	ldr	r0, [r4, #28]
 8014c80:	6803      	ldr	r3, [r0, #0]
 8014c82:	689b      	ldr	r3, [r3, #8]
 8014c84:	2264      	movs	r2, #100	; 0x64
 8014c86:	a901      	add	r1, sp, #4
 8014c88:	4798      	blx	r3
  fileStreamClose(eeFS);
 8014c8a:	69e0      	ldr	r0, [r4, #28]
 8014c8c:	6803      	ldr	r3, [r0, #0]
 8014c8e:	695b      	ldr	r3, [r3, #20]
 8014c90:	4798      	blx	r3
}
 8014c92:	b01a      	add	sp, #104	; 0x68
 8014c94:	bd10      	pop	{r4, pc}
 8014c96:	bf00      	nop
 8014c98:	20002428 	.word	0x20002428
 8014c9c:	20001a30 	.word	0x20001a30

08014ca0 <default_config_eeprom>:
{
 8014ca0:	b510      	push	{r4, lr}
 8014ca2:	b090      	sub	sp, #64	; 0x40
  default_config.device_id[0] = 'A';
 8014ca4:	2341      	movs	r3, #65	; 0x41
 8014ca6:	f88d 3004 	strb.w	r3, [sp, #4]
  default_config.device_id[1] = 'A';
 8014caa:	f88d 3005 	strb.w	r3, [sp, #5]
  default_config.device_id[2] = 'A';
 8014cae:	f88d 3006 	strb.w	r3, [sp, #6]
  default_config.next_file = 0;
 8014cb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	f88d 3007 	strb.w	r3, [sp, #7]
 8014cbc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8014cc0:	f88d 3008 	strb.w	r3, [sp, #8]
 8014cc4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8014cc8:	f88d 3009 	strb.w	r3, [sp, #9]
 8014ccc:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8014cd0:	f88d 300a 	strb.w	r3, [sp, #10]
  default_config.dev_input_type = INPUT_TYPE_V;
 8014cd4:	2256      	movs	r2, #86	; 0x56
 8014cd6:	f88d 2013 	strb.w	r2, [sp, #19]
  default_config.input_factor[0] = DEF_CONV_FACTOR;
 8014cda:	4a1a      	ldr	r2, [pc, #104]	; (8014d44 <default_config_eeprom+0xa4>)
 8014cdc:	9205      	str	r2, [sp, #20]
  default_config.input_factor[1] = DEF_CONV_FACTOR;
 8014cde:	9206      	str	r2, [sp, #24]
  default_config.bat_chem = TYPE_20AH_PANASONIC;
 8014ce0:	2211      	movs	r2, #17
 8014ce2:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
  default_config.adc_raw_offset = 0;
 8014ce6:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8014cea:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8014cee:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8014cf2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8014cf6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8014cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014cfe:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8014d02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  eeFS = I2CEepromFileOpen(&eeFile, &eeCfg, EepromFindDevice(EEPROM_DEV_24XX));
 8014d06:	2018      	movs	r0, #24
 8014d08:	f7ee fef2 	bl	8003af0 <EepromFindDevice>
 8014d0c:	4c0e      	ldr	r4, [pc, #56]	; (8014d48 <default_config_eeprom+0xa8>)
 8014d0e:	4602      	mov	r2, r0
 8014d10:	490e      	ldr	r1, [pc, #56]	; (8014d4c <default_config_eeprom+0xac>)
 8014d12:	f104 000c 	add.w	r0, r4, #12
 8014d16:	f7ee fefb 	bl	8003b10 <EepromFileOpen>
 8014d1a:	61e0      	str	r0, [r4, #28]
  fileStreamSetPosition(eeFS, NODE_CFG_EEPROM_ADDR);//start at eeprom config offset
 8014d1c:	6803      	ldr	r3, [r0, #0]
 8014d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d20:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8014d24:	4798      	blx	r3
  fileStreamWrite(eeFS, &default_config, sizeof(default_config)); //read in the config file
 8014d26:	69e0      	ldr	r0, [r4, #28]
 8014d28:	6803      	ldr	r3, [r0, #0]
 8014d2a:	685b      	ldr	r3, [r3, #4]
 8014d2c:	2239      	movs	r2, #57	; 0x39
 8014d2e:	a901      	add	r1, sp, #4
 8014d30:	4798      	blx	r3
  fileStreamClose(eeFS);
 8014d32:	69e0      	ldr	r0, [r4, #28]
 8014d34:	6803      	ldr	r3, [r0, #0]
 8014d36:	695b      	ldr	r3, [r3, #20]
 8014d38:	4798      	blx	r3
  read_config_eeprom();
 8014d3a:	f7ff ff81 	bl	8014c40 <read_config_eeprom>
}
 8014d3e:	b010      	add	sp, #64	; 0x40
 8014d40:	bd10      	pop	{r4, pc}
 8014d42:	bf00      	nop
 8014d44:	000d1f60 	.word	0x000d1f60
 8014d48:	20002428 	.word	0x20002428
 8014d4c:	20001a30 	.word	0x20001a30

08014d50 <setRelayState>:
{
 8014d50:	b538      	push	{r3, r4, r5, lr}
 8014d52:	4605      	mov	r5, r0
  switch ( new_relay_state  )
 8014d54:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014d58:	2b32      	cmp	r3, #50	; 0x32
 8014d5a:	d868      	bhi.n	8014e2e <setRelayState+0xde>
 8014d5c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014d60:	0067010e 	.word	0x0067010e
 8014d64:	0067009f 	.word	0x0067009f
 8014d68:	00670067 	.word	0x00670067
 8014d6c:	00670067 	.word	0x00670067
 8014d70:	00670067 	.word	0x00670067
 8014d74:	00670067 	.word	0x00670067
 8014d78:	00670067 	.word	0x00670067
 8014d7c:	006700bc 	.word	0x006700bc
 8014d80:	00670067 	.word	0x00670067
 8014d84:	003300d9 	.word	0x003300d9
 8014d88:	00670067 	.word	0x00670067
 8014d8c:	00670067 	.word	0x00670067
 8014d90:	00670067 	.word	0x00670067
 8014d94:	00670067 	.word	0x00670067
 8014d98:	00670067 	.word	0x00670067
 8014d9c:	00670067 	.word	0x00670067
 8014da0:	00670067 	.word	0x00670067
 8014da4:	00670067 	.word	0x00670067
 8014da8:	00670067 	.word	0x00670067
 8014dac:	00670067 	.word	0x00670067
 8014db0:	00670067 	.word	0x00670067
 8014db4:	00670067 	.word	0x00670067
 8014db8:	00670067 	.word	0x00670067
 8014dbc:	00670067 	.word	0x00670067
 8014dc0:	00670067 	.word	0x00670067
 8014dc4:	0143      	.short	0x0143
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN1_POS, 0);
 8014dc6:	4ca2      	ldr	r4, [pc, #648]	; (8015050 <setRelayState+0x300>)
 8014dc8:	2300      	movs	r3, #0
 8014dca:	220e      	movs	r2, #14
 8014dcc:	2107      	movs	r1, #7
 8014dce:	4620      	mov	r0, r4
 8014dd0:	f002 fbfe 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN2_POS, 1);
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	220f      	movs	r2, #15
 8014dd8:	2107      	movs	r1, #7
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f002 fbf8 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN1_POS, 1);
 8014de0:	2301      	movs	r3, #1
 8014de2:	220b      	movs	r2, #11
 8014de4:	2107      	movs	r1, #7
 8014de6:	4620      	mov	r0, r4
 8014de8:	f002 fbf2 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN2_POS, 0);
 8014dec:	2300      	movs	r3, #0
 8014dee:	220a      	movs	r2, #10
 8014df0:	2107      	movs	r1, #7
 8014df2:	4620      	mov	r0, r4
 8014df4:	f002 fbec 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 0);
 8014df8:	2300      	movs	r3, #0
 8014dfa:	2208      	movs	r2, #8
 8014dfc:	2107      	movs	r1, #7
 8014dfe:	4620      	mov	r0, r4
 8014e00:	f002 fbe6 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 1);
 8014e04:	2301      	movs	r3, #1
 8014e06:	2209      	movs	r2, #9
 8014e08:	2107      	movs	r1, #7
 8014e0a:	4620      	mov	r0, r4
 8014e0c:	f002 fbe0 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 0);
 8014e10:	2300      	movs	r3, #0
 8014e12:	2207      	movs	r2, #7
 8014e14:	4611      	mov	r1, r2
 8014e16:	4620      	mov	r0, r4
 8014e18:	f002 fbda 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 1);
 8014e1c:	2301      	movs	r3, #1
 8014e1e:	2206      	movs	r2, #6
 8014e20:	2107      	movs	r1, #7
 8014e22:	4620      	mov	r0, r4
 8014e24:	f002 fbd4 	bl	80175d0 <mcp23017_digitalWrite>
      relay_state = new_relay_state;
 8014e28:	4b8a      	ldr	r3, [pc, #552]	; (8015054 <setRelayState+0x304>)
 8014e2a:	f883 5059 	strb.w	r5, [r3, #89]	; 0x59
  chThdSleepMilliseconds(20); //wait 20mS for relays to click over
 8014e2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014e32:	2100      	movs	r1, #0
 8014e34:	f7f3 fe6c 	bl	8008b10 <chThdSleep>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN1_POS, 0);
 8014e38:	4c85      	ldr	r4, [pc, #532]	; (8015050 <setRelayState+0x300>)
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	220e      	movs	r2, #14
 8014e3e:	2107      	movs	r1, #7
 8014e40:	4620      	mov	r0, r4
 8014e42:	f002 fbc5 	bl	80175d0 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN2_POS, 0);
 8014e46:	2300      	movs	r3, #0
 8014e48:	220f      	movs	r2, #15
 8014e4a:	2107      	movs	r1, #7
 8014e4c:	4620      	mov	r0, r4
 8014e4e:	f002 fbbf 	bl	80175d0 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN1_POS, 0);
 8014e52:	2300      	movs	r3, #0
 8014e54:	220b      	movs	r2, #11
 8014e56:	2107      	movs	r1, #7
 8014e58:	4620      	mov	r0, r4
 8014e5a:	f002 fbb9 	bl	80175d0 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN2_POS, 0);
 8014e5e:	2300      	movs	r3, #0
 8014e60:	220a      	movs	r2, #10
 8014e62:	2107      	movs	r1, #7
 8014e64:	4620      	mov	r0, r4
 8014e66:	f002 fbb3 	bl	80175d0 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 0);
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	2208      	movs	r2, #8
 8014e6e:	2107      	movs	r1, #7
 8014e70:	4620      	mov	r0, r4
 8014e72:	f002 fbad 	bl	80175d0 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 0);
 8014e76:	2300      	movs	r3, #0
 8014e78:	2209      	movs	r2, #9
 8014e7a:	2107      	movs	r1, #7
 8014e7c:	4620      	mov	r0, r4
 8014e7e:	f002 fba7 	bl	80175d0 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 0);
 8014e82:	2300      	movs	r3, #0
 8014e84:	2207      	movs	r2, #7
 8014e86:	4611      	mov	r1, r2
 8014e88:	4620      	mov	r0, r4
 8014e8a:	f002 fba1 	bl	80175d0 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 0);
 8014e8e:	2300      	movs	r3, #0
 8014e90:	2206      	movs	r2, #6
 8014e92:	2107      	movs	r1, #7
 8014e94:	4620      	mov	r0, r4
 8014e96:	f002 fb9b 	bl	80175d0 <mcp23017_digitalWrite>
}
 8014e9a:	4628      	mov	r0, r5
 8014e9c:	bd38      	pop	{r3, r4, r5, pc}
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 1);
 8014e9e:	4c6c      	ldr	r4, [pc, #432]	; (8015050 <setRelayState+0x300>)
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	2208      	movs	r2, #8
 8014ea4:	2107      	movs	r1, #7
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	f002 fb92 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 0);
 8014eac:	2300      	movs	r3, #0
 8014eae:	2209      	movs	r2, #9
 8014eb0:	2107      	movs	r1, #7
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	f002 fb8c 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 1);
 8014eb8:	2301      	movs	r3, #1
 8014eba:	2207      	movs	r2, #7
 8014ebc:	4611      	mov	r1, r2
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	f002 fb86 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 0);
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	2206      	movs	r2, #6
 8014ec8:	2107      	movs	r1, #7
 8014eca:	4620      	mov	r0, r4
 8014ecc:	f002 fb80 	bl	80175d0 <mcp23017_digitalWrite>
      relay_state = new_relay_state;
 8014ed0:	4b60      	ldr	r3, [pc, #384]	; (8015054 <setRelayState+0x304>)
 8014ed2:	f883 5059 	strb.w	r5, [r3, #89]	; 0x59
      break;
 8014ed6:	e7aa      	b.n	8014e2e <setRelayState+0xde>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 0);
 8014ed8:	4c5d      	ldr	r4, [pc, #372]	; (8015050 <setRelayState+0x300>)
 8014eda:	2300      	movs	r3, #0
 8014edc:	2208      	movs	r2, #8
 8014ede:	2107      	movs	r1, #7
 8014ee0:	4620      	mov	r0, r4
 8014ee2:	f002 fb75 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 1);
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	2209      	movs	r2, #9
 8014eea:	2107      	movs	r1, #7
 8014eec:	4620      	mov	r0, r4
 8014eee:	f002 fb6f 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 1);
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	2207      	movs	r2, #7
 8014ef6:	4611      	mov	r1, r2
 8014ef8:	4620      	mov	r0, r4
 8014efa:	f002 fb69 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 0);
 8014efe:	2300      	movs	r3, #0
 8014f00:	2206      	movs	r2, #6
 8014f02:	2107      	movs	r1, #7
 8014f04:	4620      	mov	r0, r4
 8014f06:	f002 fb63 	bl	80175d0 <mcp23017_digitalWrite>
      relay_state = new_relay_state;
 8014f0a:	4b52      	ldr	r3, [pc, #328]	; (8015054 <setRelayState+0x304>)
 8014f0c:	f883 5059 	strb.w	r5, [r3, #89]	; 0x59
      break;
 8014f10:	e78d      	b.n	8014e2e <setRelayState+0xde>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN1_POS, 1);
 8014f12:	4c4f      	ldr	r4, [pc, #316]	; (8015050 <setRelayState+0x300>)
 8014f14:	2301      	movs	r3, #1
 8014f16:	220e      	movs	r2, #14
 8014f18:	2107      	movs	r1, #7
 8014f1a:	4620      	mov	r0, r4
 8014f1c:	f002 fb58 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN2_POS, 0);
 8014f20:	2300      	movs	r3, #0
 8014f22:	220f      	movs	r2, #15
 8014f24:	2107      	movs	r1, #7
 8014f26:	4620      	mov	r0, r4
 8014f28:	f002 fb52 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN1_POS, 0);
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	220b      	movs	r2, #11
 8014f30:	2107      	movs	r1, #7
 8014f32:	4620      	mov	r0, r4
 8014f34:	f002 fb4c 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN2_POS, 1);
 8014f38:	2301      	movs	r3, #1
 8014f3a:	220a      	movs	r2, #10
 8014f3c:	2107      	movs	r1, #7
 8014f3e:	4620      	mov	r0, r4
 8014f40:	f002 fb46 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 0);
 8014f44:	2300      	movs	r3, #0
 8014f46:	2208      	movs	r2, #8
 8014f48:	2107      	movs	r1, #7
 8014f4a:	4620      	mov	r0, r4
 8014f4c:	f002 fb40 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 1);
 8014f50:	2301      	movs	r3, #1
 8014f52:	2209      	movs	r2, #9
 8014f54:	2107      	movs	r1, #7
 8014f56:	4620      	mov	r0, r4
 8014f58:	f002 fb3a 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 0);
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	2207      	movs	r2, #7
 8014f60:	4611      	mov	r1, r2
 8014f62:	4620      	mov	r0, r4
 8014f64:	f002 fb34 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 1);
 8014f68:	2301      	movs	r3, #1
 8014f6a:	2206      	movs	r2, #6
 8014f6c:	2107      	movs	r1, #7
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f002 fb2e 	bl	80175d0 <mcp23017_digitalWrite>
      relay_state = new_relay_state;
 8014f74:	4b37      	ldr	r3, [pc, #220]	; (8015054 <setRelayState+0x304>)
 8014f76:	f883 5059 	strb.w	r5, [r3, #89]	; 0x59
      break;
 8014f7a:	e758      	b.n	8014e2e <setRelayState+0xde>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN1_POS, 0);
 8014f7c:	4c34      	ldr	r4, [pc, #208]	; (8015050 <setRelayState+0x300>)
 8014f7e:	2300      	movs	r3, #0
 8014f80:	220e      	movs	r2, #14
 8014f82:	2107      	movs	r1, #7
 8014f84:	4620      	mov	r0, r4
 8014f86:	f002 fb23 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN2_POS, 1);
 8014f8a:	2301      	movs	r3, #1
 8014f8c:	220f      	movs	r2, #15
 8014f8e:	2107      	movs	r1, #7
 8014f90:	4620      	mov	r0, r4
 8014f92:	f002 fb1d 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN1_POS, 0);
 8014f96:	2300      	movs	r3, #0
 8014f98:	220b      	movs	r2, #11
 8014f9a:	2107      	movs	r1, #7
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	f002 fb17 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN2_POS, 1);
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	220a      	movs	r2, #10
 8014fa6:	2107      	movs	r1, #7
 8014fa8:	4620      	mov	r0, r4
 8014faa:	f002 fb11 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 0);
 8014fae:	2300      	movs	r3, #0
 8014fb0:	2208      	movs	r2, #8
 8014fb2:	2107      	movs	r1, #7
 8014fb4:	4620      	mov	r0, r4
 8014fb6:	f002 fb0b 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 1);
 8014fba:	2301      	movs	r3, #1
 8014fbc:	2209      	movs	r2, #9
 8014fbe:	2107      	movs	r1, #7
 8014fc0:	4620      	mov	r0, r4
 8014fc2:	f002 fb05 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 0);
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	2207      	movs	r2, #7
 8014fca:	4611      	mov	r1, r2
 8014fcc:	4620      	mov	r0, r4
 8014fce:	f002 faff 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 1);
 8014fd2:	2301      	movs	r3, #1
 8014fd4:	2206      	movs	r2, #6
 8014fd6:	2107      	movs	r1, #7
 8014fd8:	4620      	mov	r0, r4
 8014fda:	f002 faf9 	bl	80175d0 <mcp23017_digitalWrite>
      relay_state = new_relay_state;
 8014fde:	4b1d      	ldr	r3, [pc, #116]	; (8015054 <setRelayState+0x304>)
 8014fe0:	f883 5059 	strb.w	r5, [r3, #89]	; 0x59
      break;
 8014fe4:	e723      	b.n	8014e2e <setRelayState+0xde>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN1_POS, 1);
 8014fe6:	4c1a      	ldr	r4, [pc, #104]	; (8015050 <setRelayState+0x300>)
 8014fe8:	2301      	movs	r3, #1
 8014fea:	220e      	movs	r2, #14
 8014fec:	2107      	movs	r1, #7
 8014fee:	4620      	mov	r0, r4
 8014ff0:	f002 faee 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN2_POS, 0);
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	220f      	movs	r2, #15
 8014ff8:	2107      	movs	r1, #7
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	f002 fae8 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN1_POS, 0);
 8015000:	2300      	movs	r3, #0
 8015002:	220b      	movs	r2, #11
 8015004:	2107      	movs	r1, #7
 8015006:	4620      	mov	r0, r4
 8015008:	f002 fae2 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN2_POS, 1);
 801500c:	2301      	movs	r3, #1
 801500e:	220a      	movs	r2, #10
 8015010:	2107      	movs	r1, #7
 8015012:	4620      	mov	r0, r4
 8015014:	f002 fadc 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 0);
 8015018:	2300      	movs	r3, #0
 801501a:	2208      	movs	r2, #8
 801501c:	2107      	movs	r1, #7
 801501e:	4620      	mov	r0, r4
 8015020:	f002 fad6 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 1);
 8015024:	2301      	movs	r3, #1
 8015026:	2209      	movs	r2, #9
 8015028:	2107      	movs	r1, #7
 801502a:	4620      	mov	r0, r4
 801502c:	f002 fad0 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 1);
 8015030:	2301      	movs	r3, #1
 8015032:	2207      	movs	r2, #7
 8015034:	4611      	mov	r1, r2
 8015036:	4620      	mov	r0, r4
 8015038:	f002 faca 	bl	80175d0 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 0);
 801503c:	2300      	movs	r3, #0
 801503e:	2206      	movs	r2, #6
 8015040:	2107      	movs	r1, #7
 8015042:	4620      	mov	r0, r4
 8015044:	f002 fac4 	bl	80175d0 <mcp23017_digitalWrite>
      relay_state = new_relay_state;
 8015048:	4b02      	ldr	r3, [pc, #8]	; (8015054 <setRelayState+0x304>)
 801504a:	f883 5059 	strb.w	r5, [r3, #89]	; 0x59
      break;
 801504e:	e6ee      	b.n	8014e2e <setRelayState+0xde>
 8015050:	0801a40c 	.word	0x0801a40c
 8015054:	20002428 	.word	0x20002428
 8015058:	f3af 8000 	nop.w
 801505c:	f3af 8000 	nop.w

08015060 <cmd_adc>:
void cmd_adc(BaseSequentialStream *chp) {
 8015060:	b508      	push	{r3, lr}
  if( logging_state == RECORDING )
 8015062:	4b09      	ldr	r3, [pc, #36]	; (8015088 <cmd_adc+0x28>)
 8015064:	7a5b      	ldrb	r3, [r3, #9]
 8015066:	b2db      	uxtb	r3, r3
 8015068:	2b04      	cmp	r3, #4
 801506a:	d006      	beq.n	801507a <cmd_adc+0x1a>
    logging_state = START_RECORDING;
 801506c:	4b06      	ldr	r3, [pc, #24]	; (8015088 <cmd_adc+0x28>)
 801506e:	2202      	movs	r2, #2
 8015070:	725a      	strb	r2, [r3, #9]
    chprintf(chp, "toggle adc start recording\r\n");
 8015072:	4906      	ldr	r1, [pc, #24]	; (801508c <cmd_adc+0x2c>)
 8015074:	f7f6 ff44 	bl	800bf00 <chprintf>
}
 8015078:	bd08      	pop	{r3, pc}
    logging_state = STOP_RECORDING;
 801507a:	4b03      	ldr	r3, [pc, #12]	; (8015088 <cmd_adc+0x28>)
 801507c:	2205      	movs	r2, #5
 801507e:	725a      	strb	r2, [r3, #9]
    chprintf(chp, "toggle adc stop recording\r\n");
 8015080:	4903      	ldr	r1, [pc, #12]	; (8015090 <cmd_adc+0x30>)
 8015082:	f7f6 ff3d 	bl	800bf00 <chprintf>
 8015086:	e7f7      	b.n	8015078 <cmd_adc+0x18>
 8015088:	20002428 	.word	0x20002428
 801508c:	0801ab04 	.word	0x0801ab04
 8015090:	0801aae8 	.word	0x0801aae8
 8015094:	f3af 8000 	nop.w
 8015098:	f3af 8000 	nop.w
 801509c:	f3af 8000 	nop.w

080150a0 <xbee_setup>:
{
 80150a0:	b538      	push	{r3, r4, r5, lr}
  palSetPadMode(GPIOD, 5, PAL_MODE_ALTERNATE(7));
 80150a2:	4c0f      	ldr	r4, [pc, #60]	; (80150e0 <xbee_setup+0x40>)
 80150a4:	f240 3282 	movw	r2, #898	; 0x382
 80150a8:	2120      	movs	r1, #32
 80150aa:	4620      	mov	r0, r4
 80150ac:	f7ef ff48 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOD, 6, PAL_MODE_ALTERNATE(7));
 80150b0:	f240 3282 	movw	r2, #898	; 0x382
 80150b4:	2140      	movs	r1, #64	; 0x40
 80150b6:	4620      	mov	r0, r4
 80150b8:	f7ef ff42 	bl	8004f40 <_pal_lld_setgroupmode>
  sdStart(&SD2, &xbeeSerialcfg);
 80150bc:	4c09      	ldr	r4, [pc, #36]	; (80150e4 <xbee_setup+0x44>)
 80150be:	490a      	ldr	r1, [pc, #40]	; (80150e8 <xbee_setup+0x48>)
 80150c0:	4620      	mov	r0, r4
 80150c2:	f7ee f855 	bl	8003170 <sdStart>
  chprintf((BaseSequentialStream*)&SD6, "\nxbee interface thread\n");
 80150c6:	4d09      	ldr	r5, [pc, #36]	; (80150ec <xbee_setup+0x4c>)
 80150c8:	4909      	ldr	r1, [pc, #36]	; (80150f0 <xbee_setup+0x50>)
 80150ca:	4628      	mov	r0, r5
 80150cc:	f7f6 ff18 	bl	800bf00 <chprintf>
  xbee_mbx = xbee_init( &SD2,&SD6 );
 80150d0:	4629      	mov	r1, r5
 80150d2:	4620      	mov	r0, r4
 80150d4:	f002 fb34 	bl	8017740 <xbee_init>
 80150d8:	4b06      	ldr	r3, [pc, #24]	; (80150f4 <xbee_setup+0x54>)
 80150da:	6018      	str	r0, [r3, #0]
}
 80150dc:	bd38      	pop	{r3, r4, r5, pc}
 80150de:	bf00      	nop
 80150e0:	40020c00 	.word	0x40020c00
 80150e4:	200048e8 	.word	0x200048e8
 80150e8:	0801a410 	.word	0x0801a410
 80150ec:	20004da0 	.word	0x20004da0
 80150f0:	0801ab24 	.word	0x0801ab24
 80150f4:	2000fc74 	.word	0x2000fc74
 80150f8:	f3af 8000 	nop.w
 80150fc:	f3af 8000 	nop.w

08015100 <Vector58>:
  pr = EXTI->PR;
 8015100:	4b30      	ldr	r3, [pc, #192]	; (80151c4 <Vector58+0xc4>)
 8015102:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & (1U << 0);
 8015104:	6819      	ldr	r1, [r3, #0]
 8015106:	f001 0101 	and.w	r1, r1, #1
 801510a:	400a      	ands	r2, r1
  EXTI->PR = pr;
 801510c:	615a      	str	r2, [r3, #20]
  glbl_pps_cnt++;
 801510e:	4b2e      	ldr	r3, [pc, #184]	; (80151c8 <Vector58+0xc8>)
 8015110:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015112:	3201      	adds	r2, #1
 8015114:	65da      	str	r2, [r3, #92]	; 0x5c
  if( gpt_started && ( palReadPad(GPIOE, 0U) == PAL_HIGH ) )//filter out interference spikes
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d052      	beq.n	80151c2 <Vector58+0xc2>
 801511c:	4b2b      	ldr	r3, [pc, #172]	; (80151cc <Vector58+0xcc>)
 801511e:	691b      	ldr	r3, [r3, #16]
 8015120:	f013 0f01 	tst.w	r3, #1
 8015124:	d04d      	beq.n	80151c2 <Vector58+0xc2>
CH_FAST_IRQ_HANDLER(Vector58) {
 8015126:	b410      	push	{r4}
    gpt_cnt = GPTD5.tim->CNT;
 8015128:	4b29      	ldr	r3, [pc, #164]	; (80151d0 <Vector58+0xd0>)
 801512a:	68da      	ldr	r2, [r3, #12]
 801512c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801512e:	4929      	ldr	r1, [pc, #164]	; (80151d4 <Vector58+0xd4>)
 8015130:	600b      	str	r3, [r1, #0]
    GPTD5.tim->CNT = 0;
 8015132:	2100      	movs	r1, #0
 8015134:	6251      	str	r1, [r2, #36]	; 0x24
    gpt_last_target = GPTD5.tim->ARR;
 8015136:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8015138:	4927      	ldr	r1, [pc, #156]	; (80151d8 <Vector58+0xd8>)
 801513a:	6008      	str	r0, [r1, #0]
    if( gpt_cnt < gpt_last_target/10 )
 801513c:	4927      	ldr	r1, [pc, #156]	; (80151dc <Vector58+0xdc>)
 801513e:	fba1 4100 	umull	r4, r1, r1, r0
 8015142:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8015146:	d21e      	bcs.n	8015186 <Vector58+0x86>
      gpt_error = gpt_cnt;
 8015148:	491f      	ldr	r1, [pc, #124]	; (80151c8 <Vector58+0xc8>)
 801514a:	604b      	str	r3, [r1, #4]
      if( GPTD5.tim->SR & TIM_SR_UIF )
 801514c:	6911      	ldr	r1, [r2, #16]
 801514e:	f011 0f01 	tst.w	r1, #1
 8015152:	d00a      	beq.n	801516a <Vector58+0x6a>
        GPTD5.tim->ARR = (gpt_error/5 + 1) + gpt_last_target; //correct to ideal period
 8015154:	4922      	ldr	r1, [pc, #136]	; (80151e0 <Vector58+0xe0>)
 8015156:	fb81 4103 	smull	r4, r1, r1, r3
 801515a:	17db      	asrs	r3, r3, #31
 801515c:	ebc3 0161 	rsb	r1, r3, r1, asr #1
 8015160:	180b      	adds	r3, r1, r0
 8015162:	3301      	adds	r3, #1
 8015164:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8015166:	bc10      	pop	{r4}
 8015168:	4770      	bx	lr
        GPTD5.tim->ARR = (gpt_error/5 + 1) + gpt_last_target; //correct to ideal period
 801516a:	4c1d      	ldr	r4, [pc, #116]	; (80151e0 <Vector58+0xe0>)
 801516c:	fb84 1403 	smull	r1, r4, r4, r3
 8015170:	17d9      	asrs	r1, r3, #31
 8015172:	ebc1 0164 	rsb	r1, r1, r4, asr #1
 8015176:	180b      	adds	r3, r1, r0
 8015178:	3301      	adds	r3, #1
 801517a:	62d3      	str	r3, [r2, #44]	; 0x2c
        GPTD5.tim->SR &= ~TIM_SR_UIF; //clear the update interrupt flag we just created by updating the ARR value
 801517c:	6913      	ldr	r3, [r2, #16]
 801517e:	f023 0301 	bic.w	r3, r3, #1
 8015182:	6113      	str	r3, [r2, #16]
 8015184:	e7ef      	b.n	8015166 <Vector58+0x66>
    else if( gpt_cnt > 9*gpt_last_target/10 )
 8015186:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 801518a:	4c14      	ldr	r4, [pc, #80]	; (80151dc <Vector58+0xdc>)
 801518c:	fba4 4101 	umull	r4, r1, r4, r1
 8015190:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8015194:	d9e7      	bls.n	8015166 <Vector58+0x66>
      gpt_error = ( gpt_last_target - gpt_cnt );
 8015196:	1ac3      	subs	r3, r0, r3
 8015198:	490b      	ldr	r1, [pc, #44]	; (80151c8 <Vector58+0xc8>)
 801519a:	604b      	str	r3, [r1, #4]
      GPTD5.tim->ARR = gpt_last_target - (gpt_error/5 + 1); //correct to ideal period
 801519c:	4910      	ldr	r1, [pc, #64]	; (80151e0 <Vector58+0xe0>)
 801519e:	fb81 4103 	smull	r4, r1, r1, r3
 80151a2:	17db      	asrs	r3, r3, #31
 80151a4:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 80151a8:	1ac3      	subs	r3, r0, r3
 80151aa:	3b01      	subs	r3, #1
 80151ac:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(!( GPTD5.tim->SR & TIM_SR_UIF ) )
 80151ae:	6913      	ldr	r3, [r2, #16]
 80151b0:	f013 0f01 	tst.w	r3, #1
 80151b4:	d1d7      	bne.n	8015166 <Vector58+0x66>
        glbl_s_index++; //generate an S-marker if there is no pending timer event
 80151b6:	4a0b      	ldr	r2, [pc, #44]	; (80151e4 <Vector58+0xe4>)
 80151b8:	8813      	ldrh	r3, [r2, #0]
 80151ba:	3301      	adds	r3, #1
 80151bc:	b29b      	uxth	r3, r3
 80151be:	8013      	strh	r3, [r2, #0]
}
 80151c0:	e7d1      	b.n	8015166 <Vector58+0x66>
 80151c2:	4770      	bx	lr
 80151c4:	40013c00 	.word	0x40013c00
 80151c8:	20002428 	.word	0x20002428
 80151cc:	40021000 	.word	0x40021000
 80151d0:	200048d8 	.word	0x200048d8
 80151d4:	2000fdb0 	.word	0x2000fdb0
 80151d8:	2000f7a4 	.word	0x2000f7a4
 80151dc:	cccccccd 	.word	0xcccccccd
 80151e0:	66666667 	.word	0x66666667
 80151e4:	20001a28 	.word	0x20001a28
 80151e8:	f3af 8000 	nop.w
 80151ec:	f3af 8000 	nop.w

080151f0 <VectorE0>:
  //trigger PendSV exception
  //clear interrupt flag
  uint32_t pr;
  //save the current timestamp for later

  pr = EXTI->PR;
 80151f0:	4b38      	ldr	r3, [pc, #224]	; (80152d4 <VectorE0+0xe4>)
 80151f2:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 80151f4:	6819      	ldr	r1, [r3, #0]
 80151f6:	f401 417c 	and.w	r1, r1, #64512	; 0xfc00
 80151fa:	400a      	ands	r2, r1
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 80151fc:	615a      	str	r2, [r3, #20]
  tmp_data_value = 0;
 80151fe:	2300      	movs	r3, #0
 8015200:	4a35      	ldr	r2, [pc, #212]	; (80152d8 <VectorE0+0xe8>)
 8015202:	6013      	str	r3, [r2, #0]
  byte_index = 0;
 8015204:	4a35      	ldr	r2, [pc, #212]	; (80152dc <VectorE0+0xec>)
 8015206:	7013      	strb	r3, [r2, #0]
  SPID1.spi->DR = 0xFF; //write to DR to trigger spi exchange
 8015208:	4b35      	ldr	r3, [pc, #212]	; (80152e0 <VectorE0+0xf0>)
 801520a:	69db      	ldr	r3, [r3, #28]
 801520c:	22ff      	movs	r2, #255	; 0xff
 801520e:	60da      	str	r2, [r3, #12]
  raw_sample_end = (raw_sample_end+1)%RAW_BUFFER_LENGTH;   //increment index
 8015210:	4a34      	ldr	r2, [pc, #208]	; (80152e4 <VectorE0+0xf4>)
 8015212:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8015214:	3101      	adds	r1, #1
 8015216:	4b34      	ldr	r3, [pc, #208]	; (80152e8 <VectorE0+0xf8>)
 8015218:	fba3 0301 	umull	r0, r3, r3, r1
 801521c:	095b      	lsrs	r3, r3, #5
 801521e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015222:	00d8      	lsls	r0, r3, #3
 8015224:	1a0b      	subs	r3, r1, r0
 8015226:	6613      	str	r3, [r2, #96]	; 0x60
  raw_sample_buffer[raw_sample_end].gpt_cnt = GPTD5.tim->CNT; //log the counter value for this sample
 8015228:	4b30      	ldr	r3, [pc, #192]	; (80152ec <VectorE0+0xfc>)
 801522a:	68d9      	ldr	r1, [r3, #12]
 801522c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 801522e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8015230:	011b      	lsls	r3, r3, #4
 8015232:	492f      	ldr	r1, [pc, #188]	; (80152f0 <VectorE0+0x100>)
 8015234:	50c8      	str	r0, [r1, r3]
  //check for pps
  if( adc_last_pps_cnt != glbl_pps_cnt )
 8015236:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8015238:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801523a:	4299      	cmp	r1, r3
 801523c:	d033      	beq.n	80152a6 <VectorE0+0xb6>
  {
    if( glbl_pps_cnt != adc_last_pps_cnt +1 )
 801523e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8015240:	3301      	adds	r3, #1
 8015242:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8015244:	4293      	cmp	r3, r2
 8015246:	d003      	beq.n	8015250 <VectorE0+0x60>
    {
      glbl_pps_cnt = adc_last_pps_cnt +1;
 8015248:	4a26      	ldr	r2, [pc, #152]	; (80152e4 <VectorE0+0xf4>)
 801524a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801524c:	3301      	adds	r3, #1
 801524e:	65d3      	str	r3, [r2, #92]	; 0x5c
    }
    adc_last_pps_cnt = glbl_pps_cnt;
 8015250:	4b24      	ldr	r3, [pc, #144]	; (80152e4 <VectorE0+0xf4>)
 8015252:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015254:	665a      	str	r2, [r3, #100]	; 0x64
    raw_sample_buffer[raw_sample_end].pps = true;
 8015256:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015258:	4b25      	ldr	r3, [pc, #148]	; (80152f0 <VectorE0+0x100>)
 801525a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801525e:	2201      	movs	r2, #1
 8015260:	731a      	strb	r2, [r3, #12]
  {
    raw_sample_buffer[raw_sample_end].pps = false;
  }
  //check for glbl_s_index marker

  if( glbl_s_index != glbl_last_s_index )
 8015262:	4b24      	ldr	r3, [pc, #144]	; (80152f4 <VectorE0+0x104>)
 8015264:	881a      	ldrh	r2, [r3, #0]
 8015266:	b292      	uxth	r2, r2
 8015268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801526a:	b29b      	uxth	r3, r3
 801526c:	429a      	cmp	r2, r3
 801526e:	d022      	beq.n	80152b6 <VectorE0+0xc6>
  {
    glbl_last_s_index = glbl_s_index;
 8015270:	4b20      	ldr	r3, [pc, #128]	; (80152f4 <VectorE0+0x104>)
 8015272:	881a      	ldrh	r2, [r3, #0]
 8015274:	b292      	uxth	r2, r2
 8015276:	851a      	strh	r2, [r3, #40]	; 0x28
    raw_sample_buffer[raw_sample_end].s_index = glbl_s_index;
 8015278:	881a      	ldrh	r2, [r3, #0]
 801527a:	b292      	uxth	r2, r2
 801527c:	4b19      	ldr	r3, [pc, #100]	; (80152e4 <VectorE0+0xf4>)
 801527e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8015280:	4b1b      	ldr	r3, [pc, #108]	; (80152f0 <VectorE0+0x100>)
 8015282:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8015286:	609a      	str	r2, [r3, #8]
  }
  else
  {
    raw_sample_buffer[raw_sample_end].s_index = 0;
  }
  if( raw_sample_start == ( ( raw_sample_end+1 )%RAW_BUFFER_LENGTH ) )
 8015288:	4916      	ldr	r1, [pc, #88]	; (80152e4 <VectorE0+0xf4>)
 801528a:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 801528c:	3201      	adds	r2, #1
 801528e:	4b16      	ldr	r3, [pc, #88]	; (80152e8 <VectorE0+0xf8>)
 8015290:	fba3 0302 	umull	r0, r3, r3, r2
 8015294:	095b      	lsrs	r3, r3, #5
 8015296:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801529a:	00d8      	lsls	r0, r3, #3
 801529c:	1a13      	subs	r3, r2, r0
 801529e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 80152a0:	4293      	cmp	r3, r2
 80152a2:	d010      	beq.n	80152c6 <VectorE0+0xd6>
  {
    raw_buff_overflow++;
  }
  //should also check to make sure we haven't run out of buffer
}
 80152a4:	4770      	bx	lr
    raw_sample_buffer[raw_sample_end].pps = false;
 80152a6:	4b0f      	ldr	r3, [pc, #60]	; (80152e4 <VectorE0+0xf4>)
 80152a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80152aa:	4b11      	ldr	r3, [pc, #68]	; (80152f0 <VectorE0+0x100>)
 80152ac:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80152b0:	2200      	movs	r2, #0
 80152b2:	731a      	strb	r2, [r3, #12]
 80152b4:	e7d5      	b.n	8015262 <VectorE0+0x72>
    raw_sample_buffer[raw_sample_end].s_index = 0;
 80152b6:	4b0b      	ldr	r3, [pc, #44]	; (80152e4 <VectorE0+0xf4>)
 80152b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80152ba:	4b0d      	ldr	r3, [pc, #52]	; (80152f0 <VectorE0+0x100>)
 80152bc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80152c0:	2200      	movs	r2, #0
 80152c2:	609a      	str	r2, [r3, #8]
 80152c4:	e7e0      	b.n	8015288 <VectorE0+0x98>
    raw_buff_overflow++;
 80152c6:	f8b1 306c 	ldrh.w	r3, [r1, #108]	; 0x6c
 80152ca:	3301      	adds	r3, #1
 80152cc:	b29b      	uxth	r3, r3
 80152ce:	f8a1 306c 	strh.w	r3, [r1, #108]	; 0x6c
}
 80152d2:	e7e7      	b.n	80152a4 <VectorE0+0xb4>
 80152d4:	40013c00 	.word	0x40013c00
 80152d8:	2000fb84 	.word	0x2000fb84
 80152dc:	20005b28 	.word	0x20005b28
 80152e0:	2000482c 	.word	0x2000482c
 80152e4:	20002428 	.word	0x20002428
 80152e8:	cccccccd 	.word	0xcccccccd
 80152ec:	200048d8 	.word	0x200048d8
 80152f0:	2000f8e8 	.word	0x2000f8e8
 80152f4:	20001a28 	.word	0x20001a28
 80152f8:	f3af 8000 	nop.w
 80152fc:	f3af 8000 	nop.w

08015300 <PendSV_Handler>:
volatile int32_t pendsv_skipped_s_index = 0;
volatile int32_t raw_max_val = 0;
volatile int32_t raw_min_val = 0;

// low priority handler to use os calls
CH_IRQ_HANDLER(PendSV_Handler){//PendSVVector) {
 8015300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  CH_IRQ_PROLOGUE();
 8015304:	f7f3 fe64 	bl	8008fd0 <_stats_increase_irq>
 8015308:	480a      	ldr	r0, [pc, #40]	; (8015334 <PendSV_Handler+0x34>)
 801530a:	f7f2 fcb9 	bl	8007c80 <_trace_isr_enter>
 801530e:	f7f2 fbe7 	bl	8007ae0 <_dbg_check_enter_isr>
  uint32_t gpt_interval_cnt = gptGetIntervalX(&GPTD5);
 8015312:	4b09      	ldr	r3, [pc, #36]	; (8015338 <PendSV_Handler+0x38>)
 8015314:	68db      	ldr	r3, [r3, #12]
 8015316:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8015318:	3601      	adds	r6, #1

  // loop through half of raw data buffer, apply FIR, subsample to new sample rate and write to output buffer
  uint8_t stop_index =  ( raw_sample_start + RAW_BUFFER_LENGTH/2 )%RAW_BUFFER_LENGTH;
 801531a:	4b08      	ldr	r3, [pc, #32]	; (801533c <PendSV_Handler+0x3c>)
 801531c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801531e:	3314      	adds	r3, #20
 8015320:	4f07      	ldr	r7, [pc, #28]	; (8015340 <PendSV_Handler+0x40>)
 8015322:	fba7 2703 	umull	r2, r7, r7, r3
 8015326:	097f      	lsrs	r7, r7, #5
 8015328:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 801532c:	00fa      	lsls	r2, r7, #3
 801532e:	1a9f      	subs	r7, r3, r2
  while( raw_sample_start != stop_index )
 8015330:	e13d      	b.n	80155ae <PendSV_Handler+0x2ae>
 8015332:	bf00      	nop
 8015334:	0801a41c 	.word	0x0801a41c
 8015338:	200048d8 	.word	0x200048d8
 801533c:	20002428 	.word	0x20002428
 8015340:	cccccccd 	.word	0xcccccccd
    //calculate filtered value
    fir_adcValue = 0;

    for( int i = 0; i < FIR_length; i++)
    {
      fir_adcValue += (int64_t)fir_adc_buffer[( fir_head_index + i ) % FIR_length ] * (int64_t)FIR_coeffs[ i ];
 8015344:	1862      	adds	r2, r4, r1
 8015346:	48c2      	ldr	r0, [pc, #776]	; (8015650 <PendSV_Handler+0x350>)
 8015348:	fb80 3002 	smull	r3, r0, r0, r2
 801534c:	17d3      	asrs	r3, r2, #31
 801534e:	ebc3 03e0 	rsb	r3, r3, r0, asr #3
 8015352:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015356:	0098      	lsls	r0, r3, #2
 8015358:	1a13      	subs	r3, r2, r0
 801535a:	4abe      	ldr	r2, [pc, #760]	; (8015654 <PendSV_Handler+0x354>)
 801535c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015360:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8015364:	4bbc      	ldr	r3, [pc, #752]	; (8015658 <PendSV_Handler+0x358>)
 8015366:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801536a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801536c:	ea4f 7be3 	mov.w	fp, r3, asr #31
 8015370:	fb02 f00b 	mul.w	r0, r2, fp
 8015374:	fb03 0009 	mla	r0, r3, r9, r0
 8015378:	fba2 ab03 	umull	sl, fp, r2, r3
 801537c:	4483      	add	fp, r0
 801537e:	48b7      	ldr	r0, [pc, #732]	; (801565c <PendSV_Handler+0x35c>)
 8015380:	e9d0 8900 	ldrd	r8, r9, [r0]
 8015384:	eb1a 0208 	adds.w	r2, sl, r8
 8015388:	eb4b 0309 	adc.w	r3, fp, r9
 801538c:	e9c0 2300 	strd	r2, r3, [r0]
    for( int i = 0; i < FIR_length; i++)
 8015390:	3101      	adds	r1, #1
 8015392:	2913      	cmp	r1, #19
 8015394:	ddd6      	ble.n	8015344 <PendSV_Handler+0x44>
    }

    fir_adcValue = fir_adcValue/FIR_coeffs_sum;
 8015396:	4db1      	ldr	r5, [pc, #708]	; (801565c <PendSV_Handler+0x35c>)
 8015398:	4ab1      	ldr	r2, [pc, #708]	; (8015660 <PendSV_Handler+0x360>)
 801539a:	2300      	movs	r3, #0
 801539c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80153a0:	f002 fc0e 	bl	8017bc0 <__aeabi_ldivmod>
 80153a4:	e9c5 0100 	strd	r0, r1, [r5]

    //get the cnt value from the mid position of the fir buffer
    uint64_t new_cnt = fir_cnt_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 80153a8:	340a      	adds	r4, #10
 80153aa:	4ba9      	ldr	r3, [pc, #676]	; (8015650 <PendSV_Handler+0x350>)
 80153ac:	fb83 2304 	smull	r2, r3, r3, r4
 80153b0:	10db      	asrs	r3, r3, #3
 80153b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80153b6:	009a      	lsls	r2, r3, #2
 80153b8:	1aa3      	subs	r3, r4, r2
 80153ba:	4aaa      	ldr	r2, [pc, #680]	; (8015664 <PendSV_Handler+0x364>)
 80153bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80153c0:	17e5      	asrs	r5, r4, #31

    //check for PPS
    if( fir_pps_buffer[(fir_head_index + FIR_length/2)%FIR_length] )
 80153c2:	4aa9      	ldr	r2, [pc, #676]	; (8015668 <PendSV_Handler+0x368>)
 80153c4:	5cd3      	ldrb	r3, [r2, r3]
 80153c6:	b3ab      	cbz	r3, 8015434 <PendSV_Handler+0x134>
    {
      //write the PPS marker, make sure not to over-write an s-marker
      if( ( adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency ) % adcBuffer.bufferLength]&0xFF000000 ) == DATA_TYPE_SINDEX  )
 80153c8:	4ba8      	ldr	r3, [pc, #672]	; (801566c <PendSV_Handler+0x36c>)
 80153ca:	699a      	ldr	r2, [r3, #24]
 80153cc:	49a8      	ldr	r1, [pc, #672]	; (8015670 <PendSV_Handler+0x370>)
 80153ce:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80153d0:	1811      	adds	r1, r2, r0
 80153d2:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80153d6:	fbb1 f2fc 	udiv	r2, r1, ip
 80153da:	fb0c 1212 	mls	r2, ip, r2, r1
 80153de:	3208      	adds	r2, #8
 80153e0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80153ea:	f1b3 4f03 	cmp.w	r3, #2197815296	; 0x83000000
 80153ee:	f000 8153 	beq.w	8015698 <PendSV_Handler+0x398>
      {
        adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength] = DATA_TYPE_PPS;
      }
      else
      {
        adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency ) % adcBuffer.bufferLength] = DATA_TYPE_PPS;
 80153f2:	4b9e      	ldr	r3, [pc, #632]	; (801566c <PendSV_Handler+0x36c>)
 80153f4:	699a      	ldr	r2, [r3, #24]
 80153f6:	4410      	add	r0, r2
 80153f8:	6919      	ldr	r1, [r3, #16]
 80153fa:	fbb0 f2f1 	udiv	r2, r0, r1
 80153fe:	fb01 0012 	mls	r0, r1, r2, r0
 8015402:	f100 0208 	add.w	r2, r0, #8
 8015406:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801540a:	f04f 4202 	mov.w	r2, #2181038080	; 0x82000000
 801540e:	605a      	str	r2, [r3, #4]
 8015410:	2320      	movs	r3, #32
 8015412:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8015416:	f7f3 fe13 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 801541a:	f7f2 fb31 	bl	8007a80 <_dbg_check_lock_from_isr>
      }

      chSysLockFromISR();
      chEvtBroadcastFlagsI(&evtPPS, EVT_NEW_PPS);    //fire off an event
 801541e:	2101      	movs	r1, #1
 8015420:	4894      	ldr	r0, [pc, #592]	; (8015674 <PendSV_Handler+0x374>)
 8015422:	f7f4 fd8d 	bl	8009f40 <chEvtBroadcastFlagsI>
  _dbg_check_unlock_from_isr();
 8015426:	f7f2 fb43 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 801542a:	f7f3 fe11 	bl	8009050 <_stats_stop_measure_crit_isr>
 801542e:	2300      	movs	r3, #0
 8015430:	f383 8811 	msr	BASEPRI, r3
      chSysUnlockFromISR();
    }
    //check for SIndex
    if( fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length] != 0)
 8015434:	4b90      	ldr	r3, [pc, #576]	; (8015678 <PendSV_Handler+0x378>)
 8015436:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 801543a:	320a      	adds	r2, #10
 801543c:	4b84      	ldr	r3, [pc, #528]	; (8015650 <PendSV_Handler+0x350>)
 801543e:	fb83 1302 	smull	r1, r3, r3, r2
 8015442:	10db      	asrs	r3, r3, #3
 8015444:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015448:	0099      	lsls	r1, r3, #2
 801544a:	1a53      	subs	r3, r2, r1
 801544c:	4a8b      	ldr	r2, [pc, #556]	; (801567c <PendSV_Handler+0x37c>)
 801544e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015452:	2a00      	cmp	r2, #0
 8015454:	d063      	beq.n	801551e <PendSV_Handler+0x21e>
    {
      //write s marker, but skip any filled buffer (from previous PPS marker)

      if( adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency ) % adcBuffer.bufferLength] == DATA_TYPE_PPS  )
 8015456:	4a85      	ldr	r2, [pc, #532]	; (801566c <PendSV_Handler+0x36c>)
 8015458:	6991      	ldr	r1, [r2, #24]
 801545a:	4885      	ldr	r0, [pc, #532]	; (8015670 <PendSV_Handler+0x370>)
 801545c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801545e:	eb01 0c00 	add.w	ip, r1, r0
 8015462:	f8d2 e010 	ldr.w	lr, [r2, #16]
 8015466:	fbbc f1fe 	udiv	r1, ip, lr
 801546a:	fb0e c111 	mls	r1, lr, r1, ip
 801546e:	3108      	adds	r1, #8
 8015470:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015474:	6852      	ldr	r2, [r2, #4]
 8015476:	f1b2 4f02 	cmp.w	r2, #2181038080	; 0x82000000
 801547a:	f000 811d 	beq.w	80156b8 <PendSV_Handler+0x3b8>
        else
        {
          adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength] = DATA_TYPE_SINDEX + fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
        }
      }
      else if( ( adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency ) % adcBuffer.bufferLength]&0xFF000000 ) == DATA_TYPE_SINDEX  )
 801547e:	4a7b      	ldr	r2, [pc, #492]	; (801566c <PendSV_Handler+0x36c>)
 8015480:	6991      	ldr	r1, [r2, #24]
 8015482:	eb00 0c01 	add.w	ip, r0, r1
 8015486:	f8d2 e010 	ldr.w	lr, [r2, #16]
 801548a:	fbbc f1fe 	udiv	r1, ip, lr
 801548e:	fb0e c111 	mls	r1, lr, r1, ip
 8015492:	3108      	adds	r1, #8
 8015494:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015498:	6852      	ldr	r2, [r2, #4]
 801549a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 801549e:	f1b2 4f03 	cmp.w	r2, #2197815296	; 0x83000000
 80154a2:	f000 8144 	beq.w	801572e <PendSV_Handler+0x42e>
      {
        adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength] = DATA_TYPE_SINDEX + fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
      }
      else
      {
        adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency ) % adcBuffer.bufferLength] = DATA_TYPE_SINDEX + fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 80154a6:	4a75      	ldr	r2, [pc, #468]	; (801567c <PendSV_Handler+0x37c>)
 80154a8:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 80154ac:	4a6f      	ldr	r2, [pc, #444]	; (801566c <PendSV_Handler+0x36c>)
 80154ae:	6991      	ldr	r1, [r2, #24]
 80154b0:	4408      	add	r0, r1
 80154b2:	f8d2 e010 	ldr.w	lr, [r2, #16]
 80154b6:	fbb0 f1fe 	udiv	r1, r0, lr
 80154ba:	fb0e 0011 	mls	r0, lr, r1, r0
 80154be:	f10c 4c03 	add.w	ip, ip, #2197815296	; 0x83000000
 80154c2:	f100 0108 	add.w	r1, r0, #8
 80154c6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80154ca:	f8c2 c004 	str.w	ip, [r2, #4]
      }
      //sanity check for missed s markers
      if( fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length] != ( pendsv_last_s_index+1 ) )
 80154ce:	4a6b      	ldr	r2, [pc, #428]	; (801567c <PendSV_Handler+0x37c>)
 80154d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80154d4:	4a68      	ldr	r2, [pc, #416]	; (8015678 <PendSV_Handler+0x378>)
 80154d6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80154d8:	3201      	adds	r2, #1
 80154da:	4291      	cmp	r1, r2
 80154dc:	d003      	beq.n	80154e6 <PendSV_Handler+0x1e6>
      {
        pendsv_skipped_s_index++;
 80154de:	4966      	ldr	r1, [pc, #408]	; (8015678 <PendSV_Handler+0x378>)
 80154e0:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 80154e2:	3201      	adds	r2, #1
 80154e4:	67ca      	str	r2, [r1, #124]	; 0x7c
      }
      pendsv_last_s_index = fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 80154e6:	4a65      	ldr	r2, [pc, #404]	; (801567c <PendSV_Handler+0x37c>)
 80154e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80154ec:	4962      	ldr	r1, [pc, #392]	; (8015678 <PendSV_Handler+0x378>)
 80154ee:	6788      	str	r0, [r1, #120]	; 0x78

      glbl_last_s_index = fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 80154f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	4a5e      	ldr	r2, [pc, #376]	; (8015670 <PendSV_Handler+0x370>)
 80154f8:	8513      	strh	r3, [r2, #40]	; 0x28
 80154fa:	2320      	movs	r3, #32
 80154fc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8015500:	f7f3 fd9e 	bl	8009040 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8015504:	f7f2 fabc 	bl	8007a80 <_dbg_check_lock_from_isr>

      chSysLockFromISR();
      chEvtBroadcastFlagsI(&evtSindex, EVT_NEW_SINDEX);    //fire off an event
 8015508:	2102      	movs	r1, #2
 801550a:	485d      	ldr	r0, [pc, #372]	; (8015680 <PendSV_Handler+0x380>)
 801550c:	f7f4 fd18 	bl	8009f40 <chEvtBroadcastFlagsI>
  _dbg_check_unlock_from_isr();
 8015510:	f7f2 face 	bl	8007ab0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8015514:	f7f3 fd9c 	bl	8009050 <_stats_stop_measure_crit_isr>
 8015518:	2300      	movs	r3, #0
 801551a:	f383 8811 	msr	BASEPRI, r3
      chSysUnlockFromISR();
    }
    //allow new_cnt to go larger than a period to simplify the math
    if( new_cnt <= gpt_interval_cnt/38400 )
 801551e:	4a59      	ldr	r2, [pc, #356]	; (8015684 <PendSV_Handler+0x384>)
 8015520:	fba2 3206 	umull	r3, r2, r2, r6
 8015524:	0b12      	lsrs	r2, r2, #12
 8015526:	2300      	movs	r3, #0
 8015528:	42ab      	cmp	r3, r5
 801552a:	bf08      	it	eq
 801552c:	42a2      	cmpeq	r2, r4
 801552e:	d306      	bcc.n	801553e <PendSV_Handler+0x23e>
    {
     cur_sample_num = 0; //if this is the very first ADC sample after counter reset, then reset sample num
 8015530:	4b51      	ldr	r3, [pc, #324]	; (8015678 <PendSV_Handler+0x378>)
 8015532:	2200      	movs	r2, #0
 8015534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

     new_cnt += gpt_interval_cnt;
 8015538:	19a4      	adds	r4, r4, r6
 801553a:	f145 0500 	adc.w	r5, r5, #0
    }
    //now calculate sub-sample value, linearly averaging 2 values to get the value for desired gpt_cnt
    uint64_t target_sample_cnt = ((uint64_t)(cur_sample_num)*(uint64_t)gpt_interval_cnt)/target_sps;
 801553e:	4b4e      	ldr	r3, [pc, #312]	; (8015678 <PendSV_Handler+0x378>)
 8015540:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8015544:	46b0      	mov	r8, r6
 8015546:	f04f 0900 	mov.w	r9, #0
 801554a:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 801554e:	2300      	movs	r3, #0
 8015550:	fba0 0106 	umull	r0, r1, r0, r6
 8015554:	f002 fb84 	bl	8017c60 <__aeabi_uldivmod>

    //if we padded new_cnt, then need to pad target_sample_cnt also
    if( new_cnt >= gpt_interval_cnt )
 8015558:	454d      	cmp	r5, r9
 801555a:	bf08      	it	eq
 801555c:	42b4      	cmpeq	r4, r6
 801555e:	d302      	bcc.n	8015566 <PendSV_Handler+0x266>
    {
      target_sample_cnt += gpt_interval_cnt;
 8015560:	1980      	adds	r0, r0, r6
 8015562:	eb41 0109 	adc.w	r1, r1, r9
    }

    //calculate and save new value if valid
    if( new_cnt > target_sample_cnt )
 8015566:	42a9      	cmp	r1, r5
 8015568:	bf08      	it	eq
 801556a:	42a0      	cmpeq	r0, r4
 801556c:	d206      	bcs.n	801557c <PendSV_Handler+0x27c>
    //sampling at 19200, record all values
    //if(true)
      //record every other sample
    if( ( fir_head_index%2 ) == 0)
 801556e:	4b42      	ldr	r3, [pc, #264]	; (8015678 <PendSV_Handler+0x378>)
 8015570:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8015574:	f013 0f01 	tst.w	r3, #1
 8015578:	f000 80ed 	beq.w	8015756 <PendSV_Handler+0x456>
        adcBuffer.startPos = (adcBuffer.startPos+1)%adcBuffer.bufferLength; //increment startPos (new data over-rules old data)
      }
      adcBuffer.freshData = TRUE;
      cur_sample_num++;
    }
    last_val = new_cnt; //fir_adcValue;
 801557c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8015678 <PendSV_Handler+0x378>
 8015580:	e9ca 4522 	strd	r4, r5, [sl, #136]	; 0x88
    last_cnt = new_cnt%gpt_interval_cnt;
 8015584:	4642      	mov	r2, r8
 8015586:	464b      	mov	r3, r9
 8015588:	4620      	mov	r0, r4
 801558a:	4629      	mov	r1, r5
 801558c:	f002 fb68 	bl	8017c60 <__aeabi_uldivmod>
 8015590:	e9ca 2324 	strd	r2, r3, [sl, #144]	; 0x90
    fir_head_index = ( fir_head_index + 1 ) % FIR_length;
 8015594:	f8ba 206e 	ldrh.w	r2, [sl, #110]	; 0x6e
 8015598:	3201      	adds	r2, #1
 801559a:	4b2d      	ldr	r3, [pc, #180]	; (8015650 <PendSV_Handler+0x350>)
 801559c:	fb83 1302 	smull	r1, r3, r3, r2
 80155a0:	10db      	asrs	r3, r3, #3
 80155a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80155a6:	0099      	lsls	r1, r3, #2
 80155a8:	1a53      	subs	r3, r2, r1
 80155aa:	f8aa 306e 	strh.w	r3, [sl, #110]	; 0x6e
  while( raw_sample_start != stop_index )
 80155ae:	4b32      	ldr	r3, [pc, #200]	; (8015678 <PendSV_Handler+0x378>)
 80155b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80155b2:	b2fb      	uxtb	r3, r7
 80155b4:	429a      	cmp	r2, r3
 80155b6:	f000 812c 	beq.w	8015812 <PendSV_Handler+0x512>
    fir_adc_buffer[ fir_head_index ] = raw_sample_buffer[raw_sample_start].adc_value;
 80155ba:	4a2f      	ldr	r2, [pc, #188]	; (8015678 <PendSV_Handler+0x378>)
 80155bc:	6e91      	ldr	r1, [r2, #104]	; 0x68
 80155be:	f8b2 406e 	ldrh.w	r4, [r2, #110]	; 0x6e
 80155c2:	4b31      	ldr	r3, [pc, #196]	; (8015688 <PendSV_Handler+0x388>)
 80155c4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80155c8:	6848      	ldr	r0, [r1, #4]
 80155ca:	4922      	ldr	r1, [pc, #136]	; (8015654 <PendSV_Handler+0x354>)
 80155cc:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
    fir_cnt_buffer[ fir_head_index ] = raw_sample_buffer[raw_sample_start].gpt_cnt;
 80155d0:	6e91      	ldr	r1, [r2, #104]	; 0x68
 80155d2:	0109      	lsls	r1, r1, #4
 80155d4:	5858      	ldr	r0, [r3, r1]
 80155d6:	4923      	ldr	r1, [pc, #140]	; (8015664 <PendSV_Handler+0x364>)
 80155d8:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
    fir_sindex_buffer[ fir_head_index ] = raw_sample_buffer[raw_sample_start].s_index;
 80155dc:	6e91      	ldr	r1, [r2, #104]	; 0x68
 80155de:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80155e2:	6888      	ldr	r0, [r1, #8]
 80155e4:	4925      	ldr	r1, [pc, #148]	; (801567c <PendSV_Handler+0x37c>)
 80155e6:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
    fir_pps_buffer[ fir_head_index ] = raw_sample_buffer[raw_sample_start].pps;
 80155ea:	6e91      	ldr	r1, [r2, #104]	; 0x68
 80155ec:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80155f0:	7b09      	ldrb	r1, [r1, #12]
 80155f2:	b2c9      	uxtb	r1, r1
 80155f4:	481c      	ldr	r0, [pc, #112]	; (8015668 <PendSV_Handler+0x368>)
 80155f6:	5501      	strb	r1, [r0, r4]
    if( raw_sample_buffer[raw_sample_start].adc_value < raw_min_val )
 80155f8:	6e91      	ldr	r1, [r2, #104]	; 0x68
 80155fa:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80155fe:	6859      	ldr	r1, [r3, #4]
 8015600:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8015602:	4299      	cmp	r1, r3
 8015604:	da05      	bge.n	8015612 <PendSV_Handler+0x312>
      raw_min_val = raw_sample_buffer[raw_sample_start].adc_value;
 8015606:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8015608:	4b1f      	ldr	r3, [pc, #124]	; (8015688 <PendSV_Handler+0x388>)
 801560a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801560e:	685b      	ldr	r3, [r3, #4]
 8015610:	6713      	str	r3, [r2, #112]	; 0x70
    if( raw_sample_buffer[raw_sample_start].adc_value > raw_max_val )
 8015612:	4a19      	ldr	r2, [pc, #100]	; (8015678 <PendSV_Handler+0x378>)
 8015614:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8015616:	4b1c      	ldr	r3, [pc, #112]	; (8015688 <PendSV_Handler+0x388>)
 8015618:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801561c:	6859      	ldr	r1, [r3, #4]
 801561e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8015620:	4299      	cmp	r1, r3
 8015622:	dd05      	ble.n	8015630 <PendSV_Handler+0x330>
      raw_max_val = raw_sample_buffer[raw_sample_start].adc_value;
 8015624:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8015626:	4b18      	ldr	r3, [pc, #96]	; (8015688 <PendSV_Handler+0x388>)
 8015628:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801562c:	685b      	ldr	r3, [r3, #4]
 801562e:	6753      	str	r3, [r2, #116]	; 0x74
    raw_sample_start = ( raw_sample_start+1 )%RAW_BUFFER_LENGTH;
 8015630:	4911      	ldr	r1, [pc, #68]	; (8015678 <PendSV_Handler+0x378>)
 8015632:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 8015634:	3201      	adds	r2, #1
 8015636:	4b15      	ldr	r3, [pc, #84]	; (801568c <PendSV_Handler+0x38c>)
 8015638:	fba3 0302 	umull	r0, r3, r3, r2
 801563c:	095b      	lsrs	r3, r3, #5
 801563e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015642:	00d8      	lsls	r0, r3, #3
 8015644:	1a13      	subs	r3, r2, r0
 8015646:	668b      	str	r3, [r1, #104]	; 0x68
    fir_adcValue = 0;
 8015648:	4b04      	ldr	r3, [pc, #16]	; (801565c <PendSV_Handler+0x35c>)
 801564a:	2000      	movs	r0, #0
 801564c:	2100      	movs	r1, #0
 801564e:	e01f      	b.n	8015690 <PendSV_Handler+0x390>
 8015650:	66666667 	.word	0x66666667
 8015654:	2000f80c 	.word	0x2000f80c
 8015658:	0801a3e4 	.word	0x0801a3e4
 801565c:	2000fdb8 	.word	0x2000fdb8
 8015660:	000f4c48 	.word	0x000f4c48
 8015664:	2000fcd0 	.word	0x2000fcd0
 8015668:	2000feb0 	.word	0x2000feb0
 801566c:	20005b30 	.word	0x20005b30
 8015670:	20001a28 	.word	0x20001a28
 8015674:	2000fb88 	.word	0x2000fb88
 8015678:	20002428 	.word	0x20002428
 801567c:	2000fdc0 	.word	0x2000fdc0
 8015680:	2000fb7c 	.word	0x2000fb7c
 8015684:	1b4e81b5 	.word	0x1b4e81b5
 8015688:	2000f8e8 	.word	0x2000f8e8
 801568c:	cccccccd 	.word	0xcccccccd
 8015690:	e9c3 0100 	strd	r0, r1, [r3]
    for( int i = 0; i < FIR_length; i++)
 8015694:	2100      	movs	r1, #0
 8015696:	e67c      	b.n	8015392 <PendSV_Handler+0x92>
        adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength] = DATA_TYPE_PPS;
 8015698:	4a62      	ldr	r2, [pc, #392]	; (8015824 <PendSV_Handler+0x524>)
 801569a:	6993      	ldr	r3, [r2, #24]
 801569c:	4403      	add	r3, r0
 801569e:	3301      	adds	r3, #1
 80156a0:	6910      	ldr	r0, [r2, #16]
 80156a2:	fbb3 f1f0 	udiv	r1, r3, r0
 80156a6:	fb00 3311 	mls	r3, r0, r1, r3
 80156aa:	3308      	adds	r3, #8
 80156ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80156b0:	f04f 4302 	mov.w	r3, #2181038080	; 0x82000000
 80156b4:	6053      	str	r3, [r2, #4]
 80156b6:	e6ab      	b.n	8015410 <PendSV_Handler+0x110>
        if( ( adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength]&0xFF000000 ) == DATA_TYPE_SINDEX )
 80156b8:	495a      	ldr	r1, [pc, #360]	; (8015824 <PendSV_Handler+0x524>)
 80156ba:	698a      	ldr	r2, [r1, #24]
 80156bc:	4402      	add	r2, r0
 80156be:	3201      	adds	r2, #1
 80156c0:	f8d1 e010 	ldr.w	lr, [r1, #16]
 80156c4:	fbb2 fcfe 	udiv	ip, r2, lr
 80156c8:	fb0e 221c 	mls	r2, lr, ip, r2
 80156cc:	3208      	adds	r2, #8
 80156ce:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80156d2:	684a      	ldr	r2, [r1, #4]
 80156d4:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80156d8:	f1b2 4f03 	cmp.w	r2, #2197815296	; 0x83000000
 80156dc:	d013      	beq.n	8015706 <PendSV_Handler+0x406>
          adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength] = DATA_TYPE_SINDEX + fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 80156de:	4a52      	ldr	r2, [pc, #328]	; (8015828 <PendSV_Handler+0x528>)
 80156e0:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 80156e4:	494f      	ldr	r1, [pc, #316]	; (8015824 <PendSV_Handler+0x524>)
 80156e6:	698a      	ldr	r2, [r1, #24]
 80156e8:	4402      	add	r2, r0
 80156ea:	3201      	adds	r2, #1
 80156ec:	f8d1 e010 	ldr.w	lr, [r1, #16]
 80156f0:	fbb2 f0fe 	udiv	r0, r2, lr
 80156f4:	fb0e 2210 	mls	r2, lr, r0, r2
 80156f8:	f10c 4003 	add.w	r0, ip, #2197815296	; 0x83000000
 80156fc:	3208      	adds	r2, #8
 80156fe:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015702:	6048      	str	r0, [r1, #4]
 8015704:	e6e3      	b.n	80154ce <PendSV_Handler+0x1ce>
          adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 2 ) % adcBuffer.bufferLength] = DATA_TYPE_SINDEX + fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 8015706:	4a48      	ldr	r2, [pc, #288]	; (8015828 <PendSV_Handler+0x528>)
 8015708:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 801570c:	4945      	ldr	r1, [pc, #276]	; (8015824 <PendSV_Handler+0x524>)
 801570e:	698a      	ldr	r2, [r1, #24]
 8015710:	4402      	add	r2, r0
 8015712:	3202      	adds	r2, #2
 8015714:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8015718:	fbb2 f0fe 	udiv	r0, r2, lr
 801571c:	fb0e 2210 	mls	r2, lr, r0, r2
 8015720:	f10c 4003 	add.w	r0, ip, #2197815296	; 0x83000000
 8015724:	3208      	adds	r2, #8
 8015726:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801572a:	6048      	str	r0, [r1, #4]
 801572c:	e6cf      	b.n	80154ce <PendSV_Handler+0x1ce>
        adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength] = DATA_TYPE_SINDEX + fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 801572e:	4a3e      	ldr	r2, [pc, #248]	; (8015828 <PendSV_Handler+0x528>)
 8015730:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 8015734:	493b      	ldr	r1, [pc, #236]	; (8015824 <PendSV_Handler+0x524>)
 8015736:	698a      	ldr	r2, [r1, #24]
 8015738:	4402      	add	r2, r0
 801573a:	3201      	adds	r2, #1
 801573c:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8015740:	fbb2 f0fe 	udiv	r0, r2, lr
 8015744:	fb0e 2210 	mls	r2, lr, r0, r2
 8015748:	f10c 4003 	add.w	r0, ip, #2197815296	; 0x83000000
 801574c:	3208      	adds	r2, #8
 801574e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015752:	6048      	str	r0, [r1, #4]
 8015754:	e6bb      	b.n	80154ce <PendSV_Handler+0x1ce>
      adcBuffer.dataBuffer[ adcBuffer.dataEndPos ] = (int32_t)fir_adcValue;//linear interp seems broken(int32_t)sub_adc_val;
 8015756:	4b35      	ldr	r3, [pc, #212]	; (801582c <PendSV_Handler+0x52c>)
 8015758:	e9d3 0100 	ldrd	r0, r1, [r3]
 801575c:	4b31      	ldr	r3, [pc, #196]	; (8015824 <PendSV_Handler+0x524>)
 801575e:	699a      	ldr	r2, [r3, #24]
 8015760:	3208      	adds	r2, #8
 8015762:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8015766:	6050      	str	r0, [r2, #4]
      adcBuffer.dataEndPos = (adcBuffer.dataEndPos+1)%adcBuffer.bufferLength;
 8015768:	699a      	ldr	r2, [r3, #24]
 801576a:	3201      	adds	r2, #1
 801576c:	6918      	ldr	r0, [r3, #16]
 801576e:	fb92 f1f0 	sdiv	r1, r2, r0
 8015772:	fb00 2211 	mls	r2, r0, r1, r2
 8015776:	619a      	str	r2, [r3, #24]
      while( ( adcBuffer.dataBuffer[ adcBuffer.dataEndPos ] != 0 ) && ( ( adcBuffer.dataEndPos+adcLatency+2 )%adcBuffer.bufferLength != adcBuffer.startPos ) )
 8015778:	e008      	b.n	801578c <PendSV_Handler+0x48c>
        adcBuffer.dataEndPos = (adcBuffer.dataEndPos+1)%adcBuffer.bufferLength;
 801577a:	4a2a      	ldr	r2, [pc, #168]	; (8015824 <PendSV_Handler+0x524>)
 801577c:	6993      	ldr	r3, [r2, #24]
 801577e:	3301      	adds	r3, #1
 8015780:	6910      	ldr	r0, [r2, #16]
 8015782:	fb93 f1f0 	sdiv	r1, r3, r0
 8015786:	fb00 3311 	mls	r3, r0, r1, r3
 801578a:	6193      	str	r3, [r2, #24]
      while( ( adcBuffer.dataBuffer[ adcBuffer.dataEndPos ] != 0 ) && ( ( adcBuffer.dataEndPos+adcLatency+2 )%adcBuffer.bufferLength != adcBuffer.startPos ) )
 801578c:	4b25      	ldr	r3, [pc, #148]	; (8015824 <PendSV_Handler+0x524>)
 801578e:	699a      	ldr	r2, [r3, #24]
 8015790:	3208      	adds	r2, #8
 8015792:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015796:	685b      	ldr	r3, [r3, #4]
 8015798:	b16b      	cbz	r3, 80157b6 <PendSV_Handler+0x4b6>
 801579a:	4922      	ldr	r1, [pc, #136]	; (8015824 <PendSV_Handler+0x524>)
 801579c:	698b      	ldr	r3, [r1, #24]
 801579e:	4a24      	ldr	r2, [pc, #144]	; (8015830 <PendSV_Handler+0x530>)
 80157a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80157a2:	4413      	add	r3, r2
 80157a4:	3302      	adds	r3, #2
 80157a6:	6908      	ldr	r0, [r1, #16]
 80157a8:	fbb3 f2f0 	udiv	r2, r3, r0
 80157ac:	fb00 3312 	mls	r3, r0, r2, r3
 80157b0:	694a      	ldr	r2, [r1, #20]
 80157b2:	4293      	cmp	r3, r2
 80157b4:	d1e1      	bne.n	801577a <PendSV_Handler+0x47a>
      if( (adcBuffer.dataEndPos+adcLatency+2)%adcBuffer.bufferLength == adcBuffer.startPos  ) //test for full buffer, allow space for PPS
 80157b6:	491b      	ldr	r1, [pc, #108]	; (8015824 <PendSV_Handler+0x524>)
 80157b8:	698b      	ldr	r3, [r1, #24]
 80157ba:	4a1d      	ldr	r2, [pc, #116]	; (8015830 <PendSV_Handler+0x530>)
 80157bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80157be:	4413      	add	r3, r2
 80157c0:	3302      	adds	r3, #2
 80157c2:	6908      	ldr	r0, [r1, #16]
 80157c4:	fbb3 f2f0 	udiv	r2, r3, r0
 80157c8:	fb00 3312 	mls	r3, r0, r2, r3
 80157cc:	694a      	ldr	r2, [r1, #20]
 80157ce:	4293      	cmp	r3, r2
 80157d0:	d00b      	beq.n	80157ea <PendSV_Handler+0x4ea>
      adcBuffer.freshData = TRUE;
 80157d2:	4a14      	ldr	r2, [pc, #80]	; (8015824 <PendSV_Handler+0x524>)
 80157d4:	f649 4364 	movw	r3, #40036	; 0x9c64
 80157d8:	2101      	movs	r1, #1
 80157da:	54d1      	strb	r1, [r2, r3]
      cur_sample_num++;
 80157dc:	4a15      	ldr	r2, [pc, #84]	; (8015834 <PendSV_Handler+0x534>)
 80157de:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80157e2:	440b      	add	r3, r1
 80157e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80157e8:	e6c8      	b.n	801557c <PendSV_Handler+0x27c>
        buffer_overflows++;
 80157ea:	4a13      	ldr	r2, [pc, #76]	; (8015838 <PendSV_Handler+0x538>)
 80157ec:	6813      	ldr	r3, [r2, #0]
 80157ee:	3301      	adds	r3, #1
 80157f0:	6013      	str	r3, [r2, #0]
        adcBuffer.dataBuffer[adcBuffer.startPos] = 0; //clear out the value for fresh data
 80157f2:	460b      	mov	r3, r1
 80157f4:	694a      	ldr	r2, [r1, #20]
 80157f6:	3208      	adds	r2, #8
 80157f8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80157fc:	2100      	movs	r1, #0
 80157fe:	6051      	str	r1, [r2, #4]
        adcBuffer.startPos = (adcBuffer.startPos+1)%adcBuffer.bufferLength; //increment startPos (new data over-rules old data)
 8015800:	695a      	ldr	r2, [r3, #20]
 8015802:	3201      	adds	r2, #1
 8015804:	6918      	ldr	r0, [r3, #16]
 8015806:	fb92 f1f0 	sdiv	r1, r2, r0
 801580a:	fb00 2211 	mls	r2, r0, r1, r2
 801580e:	615a      	str	r2, [r3, #20]
 8015810:	e7df      	b.n	80157d2 <PendSV_Handler+0x4d2>
  }
  //measure how long we took processing the data
  CH_IRQ_EPILOGUE();
 8015812:	f7f2 f985 	bl	8007b20 <_dbg_check_leave_isr>
 8015816:	4809      	ldr	r0, [pc, #36]	; (801583c <PendSV_Handler+0x53c>)
 8015818:	f7f2 fa5a 	bl	8007cd0 <_trace_isr_leave>
 801581c:	f7f6 f9e0 	bl	800bbe0 <_port_irq_epilogue>
}
 8015820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015824:	20005b30 	.word	0x20005b30
 8015828:	2000fdc0 	.word	0x2000fdc0
 801582c:	2000fdb8 	.word	0x2000fdb8
 8015830:	20001a28 	.word	0x20001a28
 8015834:	20002428 	.word	0x20002428
 8015838:	2000fb6c 	.word	0x2000fb6c
 801583c:	0801a41c 	.word	0x0801a41c

08015840 <VectorCC>:
 */
uint32_t tmp_data[4];
CH_FAST_IRQ_HANDLER(STM32_SPI1_HANDLER)
{
  //fast interrupt, don't use os calls
  tmp_data_value = ( tmp_data_value << 16 ) + (uint32_t)SPID1.spi->DR;
 8015840:	4a22      	ldr	r2, [pc, #136]	; (80158cc <VectorCC+0x8c>)
 8015842:	6811      	ldr	r1, [r2, #0]
 8015844:	4b22      	ldr	r3, [pc, #136]	; (80158d0 <VectorCC+0x90>)
 8015846:	69d8      	ldr	r0, [r3, #28]
 8015848:	68c3      	ldr	r3, [r0, #12]
 801584a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801584e:	6013      	str	r3, [r2, #0]
  if( byte_index++ >=1 )
 8015850:	4920      	ldr	r1, [pc, #128]	; (80158d4 <VectorCC+0x94>)
 8015852:	780b      	ldrb	r3, [r1, #0]
 8015854:	b2db      	uxtb	r3, r3
 8015856:	1c5a      	adds	r2, r3, #1
 8015858:	b2d2      	uxtb	r2, r2
 801585a:	700a      	strb	r2, [r1, #0]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d031      	beq.n	80158c4 <VectorCC+0x84>
  {
    raw_sample_buffer[raw_sample_end].adc_value = tmp_data_value;//raw_sample_buffer[raw_sample_end].gpt_cnt;// tmp_data_value;
 8015860:	4a1d      	ldr	r2, [pc, #116]	; (80158d8 <VectorCC+0x98>)
 8015862:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8015864:	4b19      	ldr	r3, [pc, #100]	; (80158cc <VectorCC+0x8c>)
 8015866:	6819      	ldr	r1, [r3, #0]
 8015868:	4b1c      	ldr	r3, [pc, #112]	; (80158dc <VectorCC+0x9c>)
 801586a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801586e:	6059      	str	r1, [r3, #4]

    //trigger filter code when buffer is half full and full-full
    if( (raw_sample_end+1)%( RAW_BUFFER_LENGTH/2 ) == 0 )
 8015870:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8015872:	3201      	adds	r2, #1
 8015874:	4b1a      	ldr	r3, [pc, #104]	; (80158e0 <VectorCC+0xa0>)
 8015876:	fba3 1302 	umull	r1, r3, r3, r2
 801587a:	091b      	lsrs	r3, r3, #4
 801587c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015880:	0099      	lsls	r1, r3, #2
 8015882:	428a      	cmp	r2, r1
 8015884:	d110      	bne.n	80158a8 <VectorCC+0x68>
    {
      SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8015886:	4a17      	ldr	r2, [pc, #92]	; (80158e4 <VectorCC+0xa4>)
 8015888:	6853      	ldr	r3, [r2, #4]
 801588a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801588e:	6053      	str	r3, [r2, #4]
      raw_sample_start = ( raw_sample_end + 1 + RAW_BUFFER_LENGTH/2 )%RAW_BUFFER_LENGTH; //hard set start to 0 or half
 8015890:	4911      	ldr	r1, [pc, #68]	; (80158d8 <VectorCC+0x98>)
 8015892:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8015894:	3215      	adds	r2, #21
 8015896:	4b12      	ldr	r3, [pc, #72]	; (80158e0 <VectorCC+0xa0>)
 8015898:	fba3 0302 	umull	r0, r3, r3, r2
 801589c:	095b      	lsrs	r3, r3, #5
 801589e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80158a2:	00d8      	lsls	r0, r3, #3
 80158a4:	1a13      	subs	r3, r2, r0
 80158a6:	668b      	str	r3, [r1, #104]	; 0x68
    }

    //check if drdy ahs already gone low, showing we took too long to read thedata
    if( palReadPad(GPIOE, 15U) == PAL_LOW ) //too slow
 80158a8:	4b0f      	ldr	r3, [pc, #60]	; (80158e8 <VectorCC+0xa8>)
 80158aa:	691b      	ldr	r3, [r3, #16]
 80158ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80158b0:	d10a      	bne.n	80158c8 <VectorCC+0x88>
    {
      missed_adc_flag = true;
 80158b2:	4b09      	ldr	r3, [pc, #36]	; (80158d8 <VectorCC+0x98>)
 80158b4:	2201      	movs	r2, #1
 80158b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      missed_sample_cnt++;
 80158ba:	4a0c      	ldr	r2, [pc, #48]	; (80158ec <VectorCC+0xac>)
 80158bc:	6813      	ldr	r3, [r2, #0]
 80158be:	3301      	adds	r3, #1
 80158c0:	6013      	str	r3, [r2, #0]
 80158c2:	4770      	bx	lr
    }
  }
  else
  {
    SPID1.spi->DR = 0xFF; //write to DR to intiate another transfer
 80158c4:	23ff      	movs	r3, #255	; 0xff
 80158c6:	60c3      	str	r3, [r0, #12]
  }
}
 80158c8:	4770      	bx	lr
 80158ca:	bf00      	nop
 80158cc:	2000fb84 	.word	0x2000fb84
 80158d0:	2000482c 	.word	0x2000482c
 80158d4:	20005b28 	.word	0x20005b28
 80158d8:	20002428 	.word	0x20002428
 80158dc:	2000f8e8 	.word	0x2000f8e8
 80158e0:	cccccccd 	.word	0xcccccccd
 80158e4:	e000ed00 	.word	0xe000ed00
 80158e8:	40021000 	.word	0x40021000
 80158ec:	2000f798 	.word	0x2000f798

080158f0 <spi1_custom_start>:
/*
 * non dma spi config code
 */
void spi1_custom_start(SPIDriver *spip, const SPIConfig *config)
{
  spip->config = config;
 80158f0:	6041      	str	r1, [r0, #4]
  /* enable SPI1 clock */
  rccEnableSPI1(true);
 80158f2:	4b13      	ldr	r3, [pc, #76]	; (8015940 <spi1_custom_start+0x50>)
 80158f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80158f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80158fa:	645a      	str	r2, [r3, #68]	; 0x44
 80158fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80158fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8015902:	665a      	str	r2, [r3, #100]	; 0x64
 8015904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  /* SPI setup and enable. Use same BR and POL settings as HAL config */
  spip->spi->CR1 &= ~( SPI_CR1_SPE ); //clear SPE and BIDIOE
 8015906:	69c2      	ldr	r2, [r0, #28]
 8015908:	6813      	ldr	r3, [r2, #0]
 801590a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801590e:	6013      	str	r3, [r2, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8015910:	6843      	ldr	r3, [r0, #4]
 8015912:	8a1b      	ldrh	r3, [r3, #16]
 8015914:	69c2      	ldr	r2, [r0, #28]
                    SPI_CR1_SSI | SPI_CR1_DFF;
 8015916:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 801591a:	f043 0304 	orr.w	r3, r3, #4
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 801591e:	6013      	str	r3, [r2, #0]
  spip->spi->CR2 &= ~( SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN ); //disable dma bufers
 8015920:	69c2      	ldr	r2, [r0, #28]
 8015922:	6853      	ldr	r3, [r2, #4]
 8015924:	f023 0303 	bic.w	r3, r3, #3
 8015928:	6053      	str	r3, [r2, #4]
  spip->spi->CR2 |= SPI_CR2_RXNEIE;   //enable rx interrupt
 801592a:	69c2      	ldr	r2, [r0, #28]
 801592c:	6853      	ldr	r3, [r2, #4]
 801592e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015932:	6053      	str	r3, [r2, #4]
  spip->spi->CR1 |= SPI_CR1_SPE; //clear SPE and BIDIOE
 8015934:	69c2      	ldr	r2, [r0, #28]
 8015936:	6813      	ldr	r3, [r2, #0]
 8015938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801593c:	6013      	str	r3, [r2, #0]
}
 801593e:	4770      	bx	lr
 8015940:	40023800 	.word	0x40023800
 8015944:	f3af 8000 	nop.w
 8015948:	f3af 8000 	nop.w
 801594c:	f3af 8000 	nop.w

08015950 <ads1282_init>:
#define CONFIG1_DISABLE_CHOP 0x00 //config1 value for chopper disabled
#define CONFIG1_ENABLE_CHOP 0x80 //config1 value for chopper enabled
#define CHOP_BIT 0x08 //chopper enable bit for PGA
char txbuf;
uint8_t ads1282_init()
{
 8015950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /*
   * start ADC spi interface
   */
  palSetPadMode(GPIOB, 5U, PAL_MODE_ALTERNATE(5)| PAL_STM32_OSPEED_HIGHEST); //SPI1_MOSI
 8015954:	4f4c      	ldr	r7, [pc, #304]	; (8015a88 <ads1282_init+0x138>)
 8015956:	f240 229a 	movw	r2, #666	; 0x29a
 801595a:	2120      	movs	r1, #32
 801595c:	4638      	mov	r0, r7
 801595e:	f7ef faef 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 6U, PAL_MODE_ALTERNATE(5)| PAL_STM32_OSPEED_HIGHEST); //SPI1_MISO
 8015962:	4c4a      	ldr	r4, [pc, #296]	; (8015a8c <ads1282_init+0x13c>)
 8015964:	f240 229a 	movw	r2, #666	; 0x29a
 8015968:	2140      	movs	r1, #64	; 0x40
 801596a:	4620      	mov	r0, r4
 801596c:	f7ef fae8 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 5U, PAL_MODE_ALTERNATE(5)| PAL_STM32_OSPEED_HIGHEST); //SPI1_CLK
 8015970:	f240 229a 	movw	r2, #666	; 0x29a
 8015974:	2120      	movs	r1, #32
 8015976:	4620      	mov	r0, r4
 8015978:	f7ef fae2 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 4U, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST); //CS
 801597c:	2219      	movs	r2, #25
 801597e:	2110      	movs	r1, #16
 8015980:	4620      	mov	r0, r4
 8015982:	f7ef fadd 	bl	8004f40 <_pal_lld_setgroupmode>

  spiStart(&SPID1,  &ads1282ADC_spicfg);
 8015986:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8015aa0 <ads1282_init+0x150>
 801598a:	4d41      	ldr	r5, [pc, #260]	; (8015a90 <ads1282_init+0x140>)
 801598c:	4649      	mov	r1, r9
 801598e:	4628      	mov	r0, r5
 8015990:	f7ed fd16 	bl	80033c0 <spiStart>

  /*
   * write config values to adc registers
   */
  chThdSleepMilliseconds(1000);
 8015994:	483f      	ldr	r0, [pc, #252]	; (8015a94 <ads1282_init+0x144>)
 8015996:	2100      	movs	r1, #0
 8015998:	f7f3 f8ba 	bl	8008b10 <chThdSleep>
  txbuf = 0x00; //wakeup
 801599c:	4c3e      	ldr	r4, [pc, #248]	; (8015a98 <ads1282_init+0x148>)
 801599e:	f04f 0800 	mov.w	r8, #0
 80159a2:	f884 8000 	strb.w	r8, [r4]
  spiSend(&SPID1, 1, &txbuf);
 80159a6:	4622      	mov	r2, r4
 80159a8:	2101      	movs	r1, #1
 80159aa:	4628      	mov	r0, r5
 80159ac:	f7ed ffd8 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 80159b0:	2064      	movs	r0, #100	; 0x64
 80159b2:	2100      	movs	r1, #0
 80159b4:	f7f3 f8ac 	bl	8008b10 <chThdSleep>
  txbuf = 0x06; //reset
 80159b8:	2306      	movs	r3, #6
 80159ba:	7023      	strb	r3, [r4, #0]
  spiSend(&SPID1, 1, &txbuf);
 80159bc:	4622      	mov	r2, r4
 80159be:	2101      	movs	r1, #1
 80159c0:	4628      	mov	r0, r5
 80159c2:	f7ed ffcd 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 80159c6:	2064      	movs	r0, #100	; 0x64
 80159c8:	2100      	movs	r1, #0
 80159ca:	f7f3 f8a1 	bl	8008b10 <chThdSleep>
  txbuf = SDATAC; //stop continous conversion
 80159ce:	2311      	movs	r3, #17
 80159d0:	7023      	strb	r3, [r4, #0]
  spiSend(&SPID1, 1, &txbuf);
 80159d2:	4622      	mov	r2, r4
 80159d4:	2101      	movs	r1, #1
 80159d6:	4628      	mov	r0, r5
 80159d8:	f7ed ffc2 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 80159dc:	2064      	movs	r0, #100	; 0x64
 80159de:	2100      	movs	r1, #0
 80159e0:	f7f3 f896 	bl	8008b10 <chThdSleep>
  txbuf = WREG | CONFIG0_ADDR; //write to CONFIG0 address
 80159e4:	2341      	movs	r3, #65	; 0x41
 80159e6:	7023      	strb	r3, [r4, #0]
  spiSend(&SPID1, 1, &txbuf);
 80159e8:	4622      	mov	r2, r4
 80159ea:	2101      	movs	r1, #1
 80159ec:	4628      	mov	r0, r5
 80159ee:	f7ed ffb7 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 80159f2:	2064      	movs	r0, #100	; 0x64
 80159f4:	2100      	movs	r1, #0
 80159f6:	f7f3 f88b 	bl	8008b10 <chThdSleep>
  txbuf = 0x01; //write 2 bytes, CONFIG0 and CONFIG1
 80159fa:	2601      	movs	r6, #1
 80159fc:	7026      	strb	r6, [r4, #0]
  spiSend(&SPID1, 1, &txbuf);
 80159fe:	4622      	mov	r2, r4
 8015a00:	4631      	mov	r1, r6
 8015a02:	4628      	mov	r0, r5
 8015a04:	f7ed ffac 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 8015a08:	2064      	movs	r0, #100	; 0x64
 8015a0a:	2100      	movs	r1, #0
 8015a0c:	f7f3 f880 	bl	8008b10 <chThdSleep>
  txbuf = FILT_SINC | DR_32KSPS | 0x40; //config value to write
 8015a10:	2351      	movs	r3, #81	; 0x51
 8015a12:	7023      	strb	r3, [r4, #0]
  spiSend(&SPID1, 1, &txbuf);
 8015a14:	4622      	mov	r2, r4
 8015a16:	4631      	mov	r1, r6
 8015a18:	4628      	mov	r0, r5
 8015a1a:	f7ed ffa1 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 8015a1e:	2064      	movs	r0, #100	; 0x64
 8015a20:	2100      	movs	r1, #0
 8015a22:	f7f3 f875 	bl	8008b10 <chThdSleep>
  txbuf = CONFIG1_DISABLE_CHOP; //config1 MUX 000, CHOP disabled PGA gain = 1
 8015a26:	f884 8000 	strb.w	r8, [r4]
  spiSend(&SPID1, 1, &txbuf);
 8015a2a:	4622      	mov	r2, r4
 8015a2c:	4631      	mov	r1, r6
 8015a2e:	4628      	mov	r0, r5
 8015a30:	f7ed ff96 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 8015a34:	2064      	movs	r0, #100	; 0x64
 8015a36:	2100      	movs	r1, #0
 8015a38:	f7f3 f86a 	bl	8008b10 <chThdSleep>
  txbuf = RDATAC; //enable continuous conversion
 8015a3c:	2310      	movs	r3, #16
 8015a3e:	7023      	strb	r3, [r4, #0]
  spiSend(&SPID1, 1, &txbuf);
 8015a40:	4622      	mov	r2, r4
 8015a42:	4631      	mov	r1, r6
 8015a44:	4628      	mov	r0, r5
 8015a46:	f7ed ff8b 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 8015a4a:	2064      	movs	r0, #100	; 0x64
 8015a4c:	2100      	movs	r1, #0
 8015a4e:	f7f3 f85f 	bl	8008b10 <chThdSleep>
  txbuf = 0x00; //wakeup
 8015a52:	f884 8000 	strb.w	r8, [r4]
  spiSend(&SPID1, 1, &txbuf);
 8015a56:	4622      	mov	r2, r4
 8015a58:	4631      	mov	r1, r6
 8015a5a:	4628      	mov	r0, r5
 8015a5c:	f7ed ff80 	bl	8003960 <spiSend>

  //configure MOSI as digital out, hold low to enable ADC
  palSetPadMode(GPIOB, 5U, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST); //SPI1_MOSI held low for now
 8015a60:	2219      	movs	r2, #25
 8015a62:	2120      	movs	r1, #32
 8015a64:	4638      	mov	r0, r7
 8015a66:	f7ef fa6b 	bl	8004f40 <_pal_lld_setgroupmode>
  palClearPad(GPIOB, 5U); /* drive SPI_MOSI low for ADC */
 8015a6a:	2320      	movs	r3, #32
 8015a6c:	837b      	strh	r3, [r7, #26]
  enable_spi_cb = true;
 8015a6e:	4b0b      	ldr	r3, [pc, #44]	; (8015a9c <ads1282_init+0x14c>)
 8015a70:	f883 6099 	strb.w	r6, [r3, #153]	; 0x99

  //disable current SPI config to disable DMA etc
  spiStop(&SPID1);
 8015a74:	4628      	mov	r0, r5
 8015a76:	f7ed fce3 	bl	8003440 <spiStop>
  //re-config SPI
  spi1_custom_start(&SPID1, &ads1282ADC_spicfg);
 8015a7a:	4649      	mov	r1, r9
 8015a7c:	4628      	mov	r0, r5
 8015a7e:	f7ff ff37 	bl	80158f0 <spi1_custom_start>

  return true;
}
 8015a82:	4630      	mov	r0, r6
 8015a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a88:	40020400 	.word	0x40020400
 8015a8c:	40020000 	.word	0x40020000
 8015a90:	2000482c 	.word	0x2000482c
 8015a94:	000186a0 	.word	0x000186a0
 8015a98:	2000fe44 	.word	0x2000fe44
 8015a9c:	20002428 	.word	0x20002428
 8015aa0:	0801a47c 	.word	0x0801a47c
 8015aa4:	f3af 8000 	nop.w
 8015aa8:	f3af 8000 	nop.w
 8015aac:	f3af 8000 	nop.w

08015ab0 <init_adc>:

/*
 * ADC initialization thread
 */
char init_adc()
{
 8015ab0:	b538      	push	{r3, r4, r5, lr}
  /* init ADC interface */
  chMtxObjectInit( &adcBuffer.adcMutex );
 8015ab2:	4c2c      	ldr	r4, [pc, #176]	; (8015b64 <init_adc+0xb4>)
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	f7f3 fdbb 	bl	8009630 <chMtxObjectInit>
  ads1282_init();
 8015aba:	f7ff ff49 	bl	8015950 <ads1282_init>

  chprintf((BaseSequentialStream*)&SD6, "\n\rads1282 init\n");
 8015abe:	4d2a      	ldr	r5, [pc, #168]	; (8015b68 <init_adc+0xb8>)
 8015ac0:	492a      	ldr	r1, [pc, #168]	; (8015b6c <init_adc+0xbc>)
 8015ac2:	4628      	mov	r0, r5
 8015ac4:	f7f6 fa1c 	bl	800bf00 <chprintf>
  /* show info on system time */
  chprintf((BaseSequentialStream*)&SD6, "\n\r system resolution is %i ticks/second\n",TIME_MS2I(1000));
 8015ac8:	4a29      	ldr	r2, [pc, #164]	; (8015b70 <init_adc+0xc0>)
 8015aca:	2300      	movs	r3, #0
 8015acc:	4929      	ldr	r1, [pc, #164]	; (8015b74 <init_adc+0xc4>)
 8015ace:	4628      	mov	r0, r5
 8015ad0:	f7f6 fa16 	bl	800bf00 <chprintf>
  //initialize the shared buffer
  chMtxLock( &adcBuffer.adcMutex );  //lock the mutex
 8015ad4:	4620      	mov	r0, r4
 8015ad6:	f7f3 fe3b 	bl	8009750 <chMtxLock>
  adcBuffer.bufferLength = ADC_BUFFER_LENGTH; //sizeof( adcBuffer.dataBuffer/sizeof(adcValue));
 8015ada:	f242 7310 	movw	r3, #10000	; 0x2710
 8015ade:	6123      	str	r3, [r4, #16]
  adcBuffer.dataEndPos = 1;
 8015ae0:	2301      	movs	r3, #1
 8015ae2:	61a3      	str	r3, [r4, #24]
  adcBuffer.startPos = 0;
 8015ae4:	2500      	movs	r5, #0
 8015ae6:	6165      	str	r5, [r4, #20]
  adcBuffer.PPSPos = -1;
 8015ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8015aec:	61e2      	str	r2, [r4, #28]
  adcBuffer.SIndexPos = -1;
 8015aee:	6222      	str	r2, [r4, #32]
  adcBuffer.freshData = TRUE;
 8015af0:	f649 4264 	movw	r2, #40036	; 0x9c64
 8015af4:	54a3      	strb	r3, [r4, r2]
  chMtxUnlock( &adcBuffer.adcMutex );  //lock the mutex
 8015af6:	4620      	mov	r0, r4
 8015af8:	f7f3 fe9a 	bl	8009830 <chMtxUnlock>

  missed_sample_cnt = 0;
 8015afc:	4b1e      	ldr	r3, [pc, #120]	; (8015b78 <init_adc+0xc8>)
 8015afe:	601d      	str	r5, [r3, #0]
  buffer_overflows = 0;
 8015b00:	4b1e      	ldr	r3, [pc, #120]	; (8015b7c <init_adc+0xcc>)
 8015b02:	601d      	str	r5, [r3, #0]
  * Enable hardware interrupt events on falling edge of DRDY of ADC
  */
  // enable PendSVR interrupt

  //enable the vector and set priority
  nvicEnableVector(SPI1_IRQn, 0);
 8015b04:	4629      	mov	r1, r5
 8015b06:	2023      	movs	r0, #35	; 0x23
 8015b08:	f7ee fab2 	bl	8004070 <nvicEnableVector>

  //enable PendSV for handling SPI data
  nvicEnableVector(PendSV_IRQn, 4);
 8015b0c:	2104      	movs	r1, #4
 8015b0e:	f06f 0001 	mvn.w	r0, #1
 8015b12:	f7ee faad 	bl	8004070 <nvicEnableVector>
  nvicSetSystemHandlerPriority(HANDLER_PENDSV, 4); //PendSV_Handler HANDLER_PENDSV
 8015b16:	2104      	movs	r1, #4
 8015b18:	200a      	movs	r0, #10
 8015b1a:	f7ee fad1 	bl	80040c0 <nvicSetSystemHandlerPriority>
 8015b1e:	2320      	movs	r3, #32
 8015b20:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8015b24:	f7f3 fa7c 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8015b28:	f7f1 ff7a 	bl	8007a20 <_dbg_check_lock>

  //already configured as an input in board.h
  palEnablePadEvent(GPIOE, 15U, PAL_EVENT_MODE_FALLING_EDGE);
 8015b2c:	2202      	movs	r2, #2
 8015b2e:	210f      	movs	r1, #15
 8015b30:	4813      	ldr	r0, [pc, #76]	; (8015b80 <init_adc+0xd0>)
 8015b32:	f7ef fa7d 	bl	8005030 <_pal_lld_enablepadevent>
  _dbg_check_unlock();
 8015b36:	f7f1 ff8b 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8015b3a:	f7f3 fa79 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8015b3e:	4b11      	ldr	r3, [pc, #68]	; (8015b84 <init_adc+0xd4>)
 8015b40:	681a      	ldr	r2, [r3, #0]
 8015b42:	429a      	cmp	r2, r3
 8015b44:	d004      	beq.n	8015b50 <init_adc+0xa0>
 8015b46:	699b      	ldr	r3, [r3, #24]
 8015b48:	6899      	ldr	r1, [r3, #8]
 8015b4a:	6893      	ldr	r3, [r2, #8]
 8015b4c:	4299      	cmp	r1, r3
 8015b4e:	d304      	bcc.n	8015b5a <init_adc+0xaa>
 8015b50:	2300      	movs	r3, #0
 8015b52:	f383 8811 	msr	BASEPRI, r3
  /* Assigning a callback to ADC DRDY falling  edge event, passing no arguments.*/

  return 1;
}
 8015b56:	2001      	movs	r0, #1
 8015b58:	bd38      	pop	{r3, r4, r5, pc}
 8015b5a:	480b      	ldr	r0, [pc, #44]	; (8015b88 <init_adc+0xd8>)
 8015b5c:	f7f1 fdd0 	bl	8007700 <chSysHalt>
 8015b60:	e7f6      	b.n	8015b50 <init_adc+0xa0>
 8015b62:	bf00      	nop
 8015b64:	20005b30 	.word	0x20005b30
 8015b68:	20004da0 	.word	0x20004da0
 8015b6c:	0801ab3c 	.word	0x0801ab3c
 8015b70:	000186a0 	.word	0x000186a0
 8015b74:	0801ab4c 	.word	0x0801ab4c
 8015b78:	2000f798 	.word	0x2000f798
 8015b7c:	2000fb6c 	.word	0x2000fb6c
 8015b80:	40021000 	.word	0x40021000
 8015b84:	200050f8 	.word	0x200050f8
 8015b88:	0801a3e4 	.word	0x0801a3e4
 8015b8c:	f3af 8000 	nop.w

08015b90 <new_filename>:
/*
 * helper function to make the data file filename strin
 */
char data_filename[] = "00000000000"; //AAA00000.BIN";
char *new_filename()
{
 8015b90:	b510      	push	{r4, lr}
 8015b92:	b082      	sub	sp, #8
  char file_number_string[] = "000000";
 8015b94:	4b19      	ldr	r3, [pc, #100]	; (8015bfc <new_filename+0x6c>)
 8015b96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015b9a:	9000      	str	r0, [sp, #0]
 8015b9c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015ba0:	0c09      	lsrs	r1, r1, #16
 8015ba2:	f88d 1006 	strb.w	r1, [sp, #6]

  memcpy( data_filename, node_config.device_id , 3); //copy device id to 1st 3 characters
 8015ba6:	4c16      	ldr	r4, [pc, #88]	; (8015c00 <new_filename+0x70>)
 8015ba8:	4a16      	ldr	r2, [pc, #88]	; (8015c04 <new_filename+0x74>)
 8015baa:	6a13      	ldr	r3, [r2, #32]
 8015bac:	8623      	strh	r3, [r4, #48]	; 0x30
 8015bae:	0c1b      	lsrs	r3, r3, #16
 8015bb0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  data_filename[3] = 0; //null terminate to make a string
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  chsnprintf( file_number_string, 6, "%d",node_config.next_file++);
 8015bba:	f8d2 3023 	ldr.w	r3, [r2, #35]	; 0x23
 8015bbe:	1c59      	adds	r1, r3, #1
 8015bc0:	f8c2 1023 	str.w	r1, [r2, #35]	; 0x23
 8015bc4:	4a10      	ldr	r2, [pc, #64]	; (8015c08 <new_filename+0x78>)
 8015bc6:	2106      	movs	r1, #6
 8015bc8:	4668      	mov	r0, sp
 8015bca:	f7f6 f9e1 	bl	800bf90 <chsnprintf>
  strcat(data_filename,file_number_string); //keep filename length constant. Pad with 0's
 8015bce:	3430      	adds	r4, #48	; 0x30
 8015bd0:	4669      	mov	r1, sp
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	f002 fcbe 	bl	8018554 <strcat>
  strcat(data_filename,".BIN");
 8015bd8:	4620      	mov	r0, r4
 8015bda:	f002 fbd1 	bl	8018380 <strlen>
 8015bde:	4602      	mov	r2, r0
 8015be0:	1821      	adds	r1, r4, r0
 8015be2:	4b0a      	ldr	r3, [pc, #40]	; (8015c0c <new_filename+0x7c>)
 8015be4:	6818      	ldr	r0, [r3, #0]
 8015be6:	50a0      	str	r0, [r4, r2]
 8015be8:	791b      	ldrb	r3, [r3, #4]
 8015bea:	710b      	strb	r3, [r1, #4]

  chprintf((BaseSequentialStream*)&SD6, "\r\nnew data filename: %s \r\n", data_filename);
 8015bec:	4622      	mov	r2, r4
 8015bee:	4908      	ldr	r1, [pc, #32]	; (8015c10 <new_filename+0x80>)
 8015bf0:	4808      	ldr	r0, [pc, #32]	; (8015c14 <new_filename+0x84>)
 8015bf2:	f7f6 f985 	bl	800bf00 <chprintf>

  return data_filename;
}
 8015bf6:	4620      	mov	r0, r4
 8015bf8:	b002      	add	sp, #8
 8015bfa:	bd10      	pop	{r4, pc}
 8015bfc:	0801aba0 	.word	0x0801aba0
 8015c00:	20001a28 	.word	0x20001a28
 8015c04:	20002428 	.word	0x20002428
 8015c08:	0801ab78 	.word	0x0801ab78
 8015c0c:	0801ab7c 	.word	0x0801ab7c
 8015c10:	0801ab84 	.word	0x0801ab84
 8015c14:	20004da0 	.word	0x20004da0
 8015c18:	f3af 8000 	nop.w
 8015c1c:	f3af 8000 	nop.w

08015c20 <new_logfile>:
/*
 * helper function to open a new data file
 */

FRESULT new_logfile( BaseSequentialStream *chp, FIL *fp)
{
 8015c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c22:	4607      	mov	r7, r0
 8015c24:	460e      	mov	r6, r1
  FRESULT err;
  char *path;

  path = new_filename();
 8015c26:	f7ff ffb3 	bl	8015b90 <new_filename>
 8015c2a:	4605      	mov	r5, r0
  err = f_open (fp, path, (FA_CREATE_NEW | FA_WRITE) ); //open a new data file
 8015c2c:	2206      	movs	r2, #6
 8015c2e:	4601      	mov	r1, r0
 8015c30:	4630      	mov	r0, r6
 8015c32:	f7f8 fed5 	bl	800e9e0 <f_open>
 8015c36:	4604      	mov	r4, r0
  //test to see if the filename already exists
  while( err == FR_EXIST )
 8015c38:	e008      	b.n	8015c4c <new_logfile+0x2c>
  {
    //try again. Note new_filename() auto-increments file number.
    path = new_filename();
 8015c3a:	f7ff ffa9 	bl	8015b90 <new_filename>
 8015c3e:	4605      	mov	r5, r0
    err = f_open (fp, path, (FA_CREATE_NEW | FA_WRITE) ); //open a new data file
 8015c40:	2206      	movs	r2, #6
 8015c42:	4601      	mov	r1, r0
 8015c44:	4630      	mov	r0, r6
 8015c46:	f7f8 fecb 	bl	800e9e0 <f_open>
 8015c4a:	4604      	mov	r4, r0
  while( err == FR_EXIST )
 8015c4c:	2c08      	cmp	r4, #8
 8015c4e:	d0f4      	beq.n	8015c3a <new_logfile+0x1a>
  }

  if( err != FR_OK )
 8015c50:	b994      	cbnz	r4, 8015c78 <new_logfile+0x58>
    chsnprintf( message_buffer, MSG_BUFF_LENGTH, "File open error: %d", err ); //message to buffer
    msg_flag = true; //set message flag to trigger sending
  }
  else
  {
    chprintf(chp, "\r\nFile %s created\r\n", path );
 8015c52:	462a      	mov	r2, r5
 8015c54:	4910      	ldr	r1, [pc, #64]	; (8015c98 <new_logfile+0x78>)
 8015c56:	4638      	mov	r0, r7
 8015c58:	f7f6 f952 	bl	800bf00 <chprintf>
    chsnprintf( message_buffer, MSG_BUFF_LENGTH, "File %s created", path ); //message to buffer
 8015c5c:	462b      	mov	r3, r5
 8015c5e:	4a0f      	ldr	r2, [pc, #60]	; (8015c9c <new_logfile+0x7c>)
 8015c60:	2164      	movs	r1, #100	; 0x64
 8015c62:	480f      	ldr	r0, [pc, #60]	; (8015ca0 <new_logfile+0x80>)
 8015c64:	f7f6 f994 	bl	800bf90 <chsnprintf>
    msg_flag = true; //set message flag to trigger sending
 8015c68:	4b0e      	ldr	r3, [pc, #56]	; (8015ca4 <new_logfile+0x84>)
 8015c6a:	2201      	movs	r2, #1
 8015c6c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    //save the updated file number to eeprom
    write_config_eeprom();
 8015c70:	f7fe ffbe 	bl	8014bf0 <write_config_eeprom>
  }
  return err;
}
 8015c74:	4620      	mov	r0, r4
 8015c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chprintf(chp, "\r\nFile open error: %d\r\n", err);
 8015c78:	4622      	mov	r2, r4
 8015c7a:	490b      	ldr	r1, [pc, #44]	; (8015ca8 <new_logfile+0x88>)
 8015c7c:	4638      	mov	r0, r7
 8015c7e:	f7f6 f93f 	bl	800bf00 <chprintf>
    chsnprintf( message_buffer, MSG_BUFF_LENGTH, "File open error: %d", err ); //message to buffer
 8015c82:	4623      	mov	r3, r4
 8015c84:	4a09      	ldr	r2, [pc, #36]	; (8015cac <new_logfile+0x8c>)
 8015c86:	2164      	movs	r1, #100	; 0x64
 8015c88:	4805      	ldr	r0, [pc, #20]	; (8015ca0 <new_logfile+0x80>)
 8015c8a:	f7f6 f981 	bl	800bf90 <chsnprintf>
    msg_flag = true; //set message flag to trigger sending
 8015c8e:	4b05      	ldr	r3, [pc, #20]	; (8015ca4 <new_logfile+0x84>)
 8015c90:	2201      	movs	r2, #1
 8015c92:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8015c96:	e7ed      	b.n	8015c74 <new_logfile+0x54>
 8015c98:	0801abd4 	.word	0x0801abd4
 8015c9c:	0801abe8 	.word	0x0801abe8
 8015ca0:	2000fe4c 	.word	0x2000fe4c
 8015ca4:	20002428 	.word	0x20002428
 8015ca8:	0801aba8 	.word	0x0801aba8
 8015cac:	0801abc0 	.word	0x0801abc0

08015cb0 <format_data>:

/*
 * helper function to format data to add to data buffer
 */
uint32_t format_data( char *tmp_buff, char *tmp_data, uint32_t num_bytes, uint32_t data_type )
{
 8015cb0:	b538      	push	{r3, r4, r5, lr}
 8015cb2:	4605      	mov	r5, r0
 8015cb4:	4614      	mov	r4, r2
  uint32_t tmp_buff_end = 0;
  uint32_t data_end_marker = DATA_END;
  memcpy( tmp_buff, &data_type,4);
 8015cb6:	f840 3b04 	str.w	r3, [r0], #4
  tmp_buff_end = 4;
  memcpy( tmp_buff + tmp_buff_end, tmp_data, num_bytes );
 8015cba:	f002 f951 	bl	8017f60 <memcpy>
  tmp_buff_end += num_bytes;
 8015cbe:	1d20      	adds	r0, r4, #4
  while( tmp_buff_end%4 != 0 )
 8015cc0:	e002      	b.n	8015cc8 <format_data+0x18>
  {
    tmp_buff[tmp_buff_end++] = ' ';//pad with spaces to keep data alignment
 8015cc2:	2320      	movs	r3, #32
 8015cc4:	542b      	strb	r3, [r5, r0]
 8015cc6:	3001      	adds	r0, #1
  while( tmp_buff_end%4 != 0 )
 8015cc8:	f010 0f03 	tst.w	r0, #3
 8015ccc:	d1f9      	bne.n	8015cc2 <format_data+0x12>
  }
  memcpy( tmp_buff + tmp_buff_end, &data_end_marker, 4 ); //append data end marker
 8015cce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015cd2:	502b      	str	r3, [r5, r0]
  tmp_buff_end += 4;
  return tmp_buff_end;
}
 8015cd4:	3004      	adds	r0, #4
 8015cd6:	bd38      	pop	{r3, r4, r5, pc}
 8015cd8:	f3af 8000 	nop.w
 8015cdc:	f3af 8000 	nop.w

08015ce0 <set_pga>:
 * function to set pga, returns the new pga value
 */
uint8_t set_pga(uint8_t new_pga_index)
{
  //high gain
  if( new_pga_index == 0 )
 8015ce0:	b148      	cbz	r0, 8015cf6 <set_pga+0x16>
    gain_setting = new_pga_index;
  }
  //low gain
  else
  {
    palSetLine(PGA_SIG_LINE); //drive high for low gain
 8015ce2:	4a08      	ldr	r2, [pc, #32]	; (8015d04 <set_pga+0x24>)
 8015ce4:	2104      	movs	r1, #4
 8015ce6:	8311      	strh	r1, [r2, #24]
    gain_setting = new_pga_index;
 8015ce8:	4a07      	ldr	r2, [pc, #28]	; (8015d08 <set_pga+0x28>)
 8015cea:	f882 009b 	strb.w	r0, [r2, #155]	; 0x9b
  }
  return gain_setting;
 8015cee:	4b06      	ldr	r3, [pc, #24]	; (8015d08 <set_pga+0x28>)
 8015cf0:	f893 009b 	ldrb.w	r0, [r3, #155]	; 0x9b
}
 8015cf4:	4770      	bx	lr
    palClearLine(PGA_SIG_LINE); //drive low for high gain
 8015cf6:	4a03      	ldr	r2, [pc, #12]	; (8015d04 <set_pga+0x24>)
 8015cf8:	2104      	movs	r1, #4
 8015cfa:	8351      	strh	r1, [r2, #26]
    gain_setting = new_pga_index;
 8015cfc:	4a02      	ldr	r2, [pc, #8]	; (8015d08 <set_pga+0x28>)
 8015cfe:	f882 009b 	strb.w	r0, [r2, #155]	; 0x9b
 8015d02:	e7f4      	b.n	8015cee <set_pga+0xe>
 8015d04:	40021000 	.word	0x40021000
 8015d08:	20002428 	.word	0x20002428
 8015d0c:	f3af 8000 	nop.w

08015d10 <logger_thread>:
#define LOW_GAIN 1
#define ADC_MAX_VAL 200000000 //2^30 //2^31/2 is max +/- range of 31 bit ADC
#define ADC_EXCESSIVE_LIMIT 1000000000 // - 2^27//approx 90% signal range

static THD_WORKING_AREA(wa_logger_thread, 2048);
static THD_FUNCTION(logger_thread, arg) {
 8015d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d14:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8015d18:	4b93      	ldr	r3, [pc, #588]	; (8015f68 <logger_thread+0x258>)
 8015d1a:	699b      	ldr	r3, [r3, #24]
 8015d1c:	4a93      	ldr	r2, [pc, #588]	; (8015f6c <logger_thread+0x25c>)
 8015d1e:	619a      	str	r2, [r3, #24]
  static char file_buffer2[ FILE_BUFFER_LENGTH ];
  static char string_buffer[ STRING_BUFFER_LENGTH ]; //tempory string buffer for using sprintf
  uint32_t bytes_written;
  uint32_t sps_count = 0;

  palSetLineMode(PGA_SIG_LINE,PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8015d20:	2219      	movs	r2, #25
 8015d22:	2104      	movs	r1, #4
 8015d24:	4892      	ldr	r0, [pc, #584]	; (8015f70 <logger_thread+0x260>)
 8015d26:	f7ef f90b 	bl	8004f40 <_pal_lld_setgroupmode>
  set_pga(HIGH_GAIN);
 8015d2a:	2000      	movs	r0, #0
 8015d2c:	f7ff ffd8 	bl	8015ce0 <set_pga>

  FIL fp;
  //initialize SD card
  FRESULT err = sdcConnect(&SDCD1);
 8015d30:	4890      	ldr	r0, [pc, #576]	; (8015f74 <logger_thread+0x264>)
 8015d32:	f7ec fe8d 	bl	8002a50 <sdcConnect>
 8015d36:	4604      	mov	r4, r0
 8015d38:	f04f 33ff 	mov.w	r3, #4294967295
 8015d3c:	2202      	movs	r2, #2
 8015d3e:	a907      	add	r1, sp, #28
 8015d40:	488d      	ldr	r0, [pc, #564]	; (8015f78 <logger_thread+0x268>)
 8015d42:	f7f3 ffdd 	bl	8009d00 <chEvtRegisterMaskWithFlags>

  event_listener_t gpsListener;
  chEvtRegister(&evtGPS, &gpsListener, EVENT_MASK(0));

  if( err != FR_OK )
 8015d46:	b364      	cbz	r4, 8015da2 <logger_thread+0x92>
  {
    chprintf((BaseSequentialStream*)&SD6, "\r\nSDCD1 sdcConnect error: %x", err);
 8015d48:	4622      	mov	r2, r4
 8015d4a:	498c      	ldr	r1, [pc, #560]	; (8015f7c <logger_thread+0x26c>)
 8015d4c:	488c      	ldr	r0, [pc, #560]	; (8015f80 <logger_thread+0x270>)
 8015d4e:	f7f6 f8d7 	bl	800bf00 <chprintf>
    chsnprintf( message_buffer, MSG_BUFF_LENGTH, "SDCD1 sdcConnect error: %x", err); //write error message to buffer
 8015d52:	4623      	mov	r3, r4
 8015d54:	4a8b      	ldr	r2, [pc, #556]	; (8015f84 <logger_thread+0x274>)
 8015d56:	2164      	movs	r1, #100	; 0x64
 8015d58:	488b      	ldr	r0, [pc, #556]	; (8015f88 <logger_thread+0x278>)
 8015d5a:	f7f6 f919 	bl	800bf90 <chsnprintf>
    msg_flag = true; //set message flag to trigger sending
 8015d5e:	4b8b      	ldr	r3, [pc, #556]	; (8015f8c <logger_thread+0x27c>)
 8015d60:	2201      	movs	r2, #1
 8015d62:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }
  else
  {
    chprintf((BaseSequentialStream*)&SD6, "\r\nSDCD1 sdc connected\r\n");
  }
  err = f_mount(&SDC_FS, "/", 1);
 8015d66:	2201      	movs	r2, #1
 8015d68:	4989      	ldr	r1, [pc, #548]	; (8015f90 <logger_thread+0x280>)
 8015d6a:	488a      	ldr	r0, [pc, #552]	; (8015f94 <logger_thread+0x284>)
 8015d6c:	f7f8 fe10 	bl	800e990 <f_mount>
  if( err != FR_OK )
 8015d70:	4607      	mov	r7, r0
 8015d72:	b1d8      	cbz	r0, 8015dac <logger_thread+0x9c>
  {
    chprintf((BaseSequentialStream*)&SD6, "\r\nSD f_mount error: %x\r\n", err);
 8015d74:	4602      	mov	r2, r0
 8015d76:	4988      	ldr	r1, [pc, #544]	; (8015f98 <logger_thread+0x288>)
 8015d78:	4881      	ldr	r0, [pc, #516]	; (8015f80 <logger_thread+0x270>)
 8015d7a:	f7f6 f8c1 	bl	800bf00 <chprintf>
    chsnprintf( message_buffer, MSG_BUFF_LENGTH, "SD f_mount error: %x", err); //write error message to buffer
 8015d7e:	463b      	mov	r3, r7
 8015d80:	4a86      	ldr	r2, [pc, #536]	; (8015f9c <logger_thread+0x28c>)
 8015d82:	2164      	movs	r1, #100	; 0x64
 8015d84:	4880      	ldr	r0, [pc, #512]	; (8015f88 <logger_thread+0x278>)
 8015d86:	f7f6 f903 	bl	800bf90 <chsnprintf>
    msg_flag = true; //set message flag to trigger sending
 8015d8a:	4b80      	ldr	r3, [pc, #512]	; (8015f8c <logger_thread+0x27c>)
 8015d8c:	2201      	movs	r2, #1
 8015d8e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
static THD_FUNCTION(logger_thread, arg) {
 8015d92:	2500      	movs	r5, #0
 8015d94:	9503      	str	r5, [sp, #12]
 8015d96:	46a9      	mov	r9, r5
 8015d98:	9505      	str	r5, [sp, #20]
 8015d9a:	9504      	str	r5, [sp, #16]
 8015d9c:	46ab      	mov	fp, r5
 8015d9e:	462e      	mov	r6, r5
 8015da0:	e3ac      	b.n	80164fc <logger_thread+0x7ec>
    chprintf((BaseSequentialStream*)&SD6, "\r\nSDCD1 sdc connected\r\n");
 8015da2:	497f      	ldr	r1, [pc, #508]	; (8015fa0 <logger_thread+0x290>)
 8015da4:	4876      	ldr	r0, [pc, #472]	; (8015f80 <logger_thread+0x270>)
 8015da6:	f7f6 f8ab 	bl	800bf00 <chprintf>
 8015daa:	e7dc      	b.n	8015d66 <logger_thread+0x56>
  }
  else
  {
    chprintf((BaseSequentialStream*)&SD6, "\r\nSDCD1 mounted\r\n");
 8015dac:	497d      	ldr	r1, [pc, #500]	; (8015fa4 <logger_thread+0x294>)
 8015dae:	4874      	ldr	r0, [pc, #464]	; (8015f80 <logger_thread+0x270>)
 8015db0:	f7f6 f8a6 	bl	800bf00 <chprintf>
 8015db4:	e7ed      	b.n	8015d92 <logger_thread+0x82>
  while (true)
  {
    logger_pos = 0;
    if( missed_adc_flag )
    {
      chprintf((BaseSequentialStream*)&SD6, "\nmissed adc reading\n\r");
 8015db6:	4c72      	ldr	r4, [pc, #456]	; (8015f80 <logger_thread+0x270>)
 8015db8:	497b      	ldr	r1, [pc, #492]	; (8015fa8 <logger_thread+0x298>)
 8015dba:	4620      	mov	r0, r4
 8015dbc:	f7f6 f8a0 	bl	800bf00 <chprintf>
      chprintf((BaseSequentialStream*)&SD6, "Missed samples %d buffer overflows: %d\n\r",missed_sample_cnt,buffer_overflows);
 8015dc0:	4b7a      	ldr	r3, [pc, #488]	; (8015fac <logger_thread+0x29c>)
 8015dc2:	681a      	ldr	r2, [r3, #0]
 8015dc4:	4b7a      	ldr	r3, [pc, #488]	; (8015fb0 <logger_thread+0x2a0>)
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	497a      	ldr	r1, [pc, #488]	; (8015fb4 <logger_thread+0x2a4>)
 8015dca:	4620      	mov	r0, r4
 8015dcc:	f7f6 f898 	bl	800bf00 <chprintf>
      missed_adc_flag = false;
 8015dd0:	4b6e      	ldr	r3, [pc, #440]	; (8015f8c <logger_thread+0x27c>)
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8015dd8:	e399      	b.n	801650e <logger_thread+0x7fe>
    }
    if( raw_buff_overflow )
    {
      chprintf((BaseSequentialStream*)&SD6, "\nraw buffer overflowed %d times\n\r",raw_buff_overflow);
 8015dda:	4c6c      	ldr	r4, [pc, #432]	; (8015f8c <logger_thread+0x27c>)
 8015ddc:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 8015de0:	4975      	ldr	r1, [pc, #468]	; (8015fb8 <logger_thread+0x2a8>)
 8015de2:	4867      	ldr	r0, [pc, #412]	; (8015f80 <logger_thread+0x270>)
 8015de4:	f7f6 f88c 	bl	800bf00 <chprintf>
      sum_raw_buff_overflows+=raw_buff_overflow;
 8015de8:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
 8015dec:	9a05      	ldr	r2, [sp, #20]
 8015dee:	441a      	add	r2, r3
 8015df0:	9205      	str	r2, [sp, #20]
      raw_buff_overflow = 0;
 8015df2:	2300      	movs	r3, #0
 8015df4:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8015df8:	e390      	b.n	801651c <logger_thread+0x80c>
      {
        if( ( logging_state == WAIT_START_RECORDING ) || ( logging_state == RECORDING ) )
        {
          if( glbl_s_index < 30 )
          {
            set_pga(LOW_GAIN);
 8015dfa:	2001      	movs	r0, #1
 8015dfc:	f7ff ff70 	bl	8015ce0 <set_pga>
            //add new gain setting to data file
            uint32_t tmp_val = DATA_TYPE_CONV;
            memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //conversion value flag
 8015e00:	f04f 4304 	mov.w	r3, #2214592512	; 0x84000000
 8015e04:	f84a 3006 	str.w	r3, [sl, r6]
            bufferEndPos += 4;
 8015e08:	1d32      	adds	r2, r6, #4
            tmp_val = node_config.input_factor[1]/2;
 8015e0a:	4b60      	ldr	r3, [pc, #384]	; (8015f8c <logger_thread+0x27c>)
 8015e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e0e:	085b      	lsrs	r3, r3, #1
            memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //copy conversion factor
 8015e10:	f84a 3002 	str.w	r3, [sl, r2]
            bufferEndPos += 4;
 8015e14:	f106 0308 	add.w	r3, r6, #8
            tmp_val = DATA_END;
            memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //data end flag
 8015e18:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015e1c:	f84a 2003 	str.w	r2, [sl, r3]
            bufferEndPos += 4;
 8015e20:	360c      	adds	r6, #12
 8015e22:	e3ad      	b.n	8016580 <logger_thread+0x870>
          }
        }
        else
        {
          //if not recording, then can change gain without doing anything else
          set_pga(LOW_GAIN);
 8015e24:	2001      	movs	r0, #1
 8015e26:	f7ff ff5b 	bl	8015ce0 <set_pga>
 8015e2a:	e3a9      	b.n	8016580 <logger_thread+0x870>
        }
      }
      //send message if updated
      else
      {
        chsnprintf( message_buffer, MSG_BUFF_LENGTH, "Changed PGA To Low Gain"); //write error message to buffer
 8015e2c:	4a63      	ldr	r2, [pc, #396]	; (8015fbc <logger_thread+0x2ac>)
 8015e2e:	2164      	movs	r1, #100	; 0x64
 8015e30:	4855      	ldr	r0, [pc, #340]	; (8015f88 <logger_thread+0x278>)
 8015e32:	f7f6 f8ad 	bl	800bf90 <chsnprintf>
        msg_flag = true; //set message flag to trigger sending
 8015e36:	4b55      	ldr	r3, [pc, #340]	; (8015f8c <logger_thread+0x27c>)
 8015e38:	2201      	movs	r2, #1
 8015e3a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
        chThdSleepMicroseconds(200); //wait 200uS for the signal to settle after PGA change
 8015e3e:	2014      	movs	r0, #20
 8015e40:	2100      	movs	r1, #0
 8015e42:	f7f2 fe65 	bl	8008b10 <chThdSleep>
      }
      raw_max_val = 0;
 8015e46:	4b51      	ldr	r3, [pc, #324]	; (8015f8c <logger_thread+0x27c>)
 8015e48:	2200      	movs	r2, #0
 8015e4a:	675a      	str	r2, [r3, #116]	; 0x74
      raw_min_val = 0;
 8015e4c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    if( logging_state == START_RECORDING ) //need to wait until the start of a new period
 8015e4e:	4b4f      	ldr	r3, [pc, #316]	; (8015f8c <logger_thread+0x27c>)
 8015e50:	7a5b      	ldrb	r3, [r3, #9]
 8015e52:	b2db      	uxtb	r3, r3
 8015e54:	2b02      	cmp	r3, #2
 8015e56:	d008      	beq.n	8015e6a <logger_thread+0x15a>
        chprintf((BaseSequentialStream*)&SD6, "\nfile open failed:  %d\n\r", err);
        chsnprintf( message_buffer, MSG_BUFF_LENGTH, "file open failed:  %d", err); //write error message to buffer
        msg_flag = true; //set message flag to trigger sending
      }
    }
    else if( logging_state == STOP_RECORDING )
 8015e58:	4b4c      	ldr	r3, [pc, #304]	; (8015f8c <logger_thread+0x27c>)
 8015e5a:	7a5b      	ldrb	r3, [r3, #9]
 8015e5c:	b2db      	uxtb	r3, r3
 8015e5e:	2b05      	cmp	r3, #5
 8015e60:	d064      	beq.n	8015f2c <logger_thread+0x21c>
 8015e62:	f8cd b008 	str.w	fp, [sp, #8]
 8015e66:	464c      	mov	r4, r9
 8015e68:	e1cb      	b.n	8016202 <logger_thread+0x4f2>
      FRESULT err = new_logfile((BaseSequentialStream*)&SD6, &fp);
 8015e6a:	a90c      	add	r1, sp, #48	; 0x30
 8015e6c:	4844      	ldr	r0, [pc, #272]	; (8015f80 <logger_thread+0x270>)
 8015e6e:	f7ff fed7 	bl	8015c20 <new_logfile>
      glbl_s_index = 1;
 8015e72:	4b53      	ldr	r3, [pc, #332]	; (8015fc0 <logger_thread+0x2b0>)
 8015e74:	2201      	movs	r2, #1
 8015e76:	801a      	strh	r2, [r3, #0]
      glbl_last_s_index = 1;
 8015e78:	851a      	strh	r2, [r3, #40]	; 0x28
      raw_min_val = 0;
 8015e7a:	4b44      	ldr	r3, [pc, #272]	; (8015f8c <logger_thread+0x27c>)
 8015e7c:	2200      	movs	r2, #0
 8015e7e:	671a      	str	r2, [r3, #112]	; 0x70
      raw_max_val = 0;
 8015e80:	675a      	str	r2, [r3, #116]	; 0x74
      if( err == FR_OK )//file created successfully
 8015e82:	4604      	mov	r4, r0
 8015e84:	2800      	cmp	r0, #0
 8015e86:	d13a      	bne.n	8015efe <logger_thread+0x1ee>
        uint32_t tmp_val = node_config.input_factor[gain_setting]/2;
 8015e88:	f893 209b 	ldrb.w	r2, [r3, #155]	; 0x9b
 8015e8c:	3204      	adds	r2, #4
 8015e8e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8015e92:	6a12      	ldr	r2, [r2, #32]
 8015e94:	0852      	lsrs	r2, r2, #1
        memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //copy conversion factor
 8015e96:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
        memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //conversion value flag
 8015e9a:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 8015e9e:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
        tmp_val = node_config.input_factor[gain_setting]/2;
 8015ea2:	f893 209b 	ldrb.w	r2, [r3, #155]	; 0x9b
 8015ea6:	3204      	adds	r2, #4
 8015ea8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8015eac:	6a12      	ldr	r2, [r2, #32]
 8015eae:	0852      	lsrs	r2, r2, #1
        memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //copy conversion factor
 8015eb0:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
        memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //data end flag
 8015eb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015eb8:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
        adcBuffer.startPos = adcBuffer.dataEndPos; //reset buffer
 8015ebc:	4b41      	ldr	r3, [pc, #260]	; (8015fc4 <logger_thread+0x2b4>)
 8015ebe:	699a      	ldr	r2, [r3, #24]
 8015ec0:	615a      	str	r2, [r3, #20]
        for( i=0;i< adcBuffer.bufferLength;i++)
 8015ec2:	2100      	movs	r1, #0
 8015ec4:	4b3f      	ldr	r3, [pc, #252]	; (8015fc4 <logger_thread+0x2b4>)
 8015ec6:	691b      	ldr	r3, [r3, #16]
 8015ec8:	428b      	cmp	r3, r1
 8015eca:	d908      	bls.n	8015ede <logger_thread+0x1ce>
          adcBuffer.dataBuffer[i] = 0;
 8015ecc:	f101 0208 	add.w	r2, r1, #8
 8015ed0:	4b3c      	ldr	r3, [pc, #240]	; (8015fc4 <logger_thread+0x2b4>)
 8015ed2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	605a      	str	r2, [r3, #4]
        for( i=0;i< adcBuffer.bufferLength;i++)
 8015eda:	3101      	adds	r1, #1
 8015edc:	e7f2      	b.n	8015ec4 <logger_thread+0x1b4>
        adcBuffer.freshData = false;
 8015ede:	2300      	movs	r3, #0
 8015ee0:	4938      	ldr	r1, [pc, #224]	; (8015fc4 <logger_thread+0x2b4>)
 8015ee2:	f649 4264 	movw	r2, #40036	; 0x9c64
 8015ee6:	548b      	strb	r3, [r1, r2]
        logging_state = WAIT_START_RECORDING; //waiting for start of new second
 8015ee8:	4a28      	ldr	r2, [pc, #160]	; (8015f8c <logger_thread+0x27c>)
 8015eea:	2103      	movs	r1, #3
 8015eec:	7251      	strb	r1, [r2, #9]
      sps_count = 0;
 8015eee:	461d      	mov	r5, r3
      sum_buffer_overflows = 0;
 8015ef0:	9304      	str	r3, [sp, #16]
        curFile_buffer = file_buffer1; //init the buffer pointer
 8015ef2:	f502 7a47 	add.w	sl, r2, #796	; 0x31c
        bufferEndPos += 4;
 8015ef6:	2610      	movs	r6, #16
 8015ef8:	9302      	str	r3, [sp, #8]
 8015efa:	464c      	mov	r4, r9
 8015efc:	e181      	b.n	8016202 <logger_thread+0x4f2>
        logging_state = READY; //couldn't open the file, so can't record.
 8015efe:	4d23      	ldr	r5, [pc, #140]	; (8015f8c <logger_thread+0x27c>)
 8015f00:	f04f 0801 	mov.w	r8, #1
 8015f04:	f885 8009 	strb.w	r8, [r5, #9]
        chprintf((BaseSequentialStream*)&SD6, "\nfile open failed:  %d\n\r", err);
 8015f08:	4602      	mov	r2, r0
 8015f0a:	492f      	ldr	r1, [pc, #188]	; (8015fc8 <logger_thread+0x2b8>)
 8015f0c:	481c      	ldr	r0, [pc, #112]	; (8015f80 <logger_thread+0x270>)
 8015f0e:	f7f5 fff7 	bl	800bf00 <chprintf>
        chsnprintf( message_buffer, MSG_BUFF_LENGTH, "file open failed:  %d", err); //write error message to buffer
 8015f12:	4623      	mov	r3, r4
 8015f14:	4a2d      	ldr	r2, [pc, #180]	; (8015fcc <logger_thread+0x2bc>)
 8015f16:	2164      	movs	r1, #100	; 0x64
 8015f18:	481b      	ldr	r0, [pc, #108]	; (8015f88 <logger_thread+0x278>)
 8015f1a:	f7f6 f839 	bl	800bf90 <chsnprintf>
        msg_flag = true; //set message flag to trigger sending
 8015f1e:	f885 809a 	strb.w	r8, [r5, #154]	; 0x9a
      sps_count = 0;
 8015f22:	2500      	movs	r5, #0
      sum_buffer_overflows = 0;
 8015f24:	9504      	str	r5, [sp, #16]
 8015f26:	9502      	str	r5, [sp, #8]
 8015f28:	464c      	mov	r4, r9
 8015f2a:	e16a      	b.n	8016202 <logger_thread+0x4f2>
    {
      chprintf((BaseSequentialStream*)&SD6, "\nClose the File\n\r");
 8015f2c:	4928      	ldr	r1, [pc, #160]	; (8015fd0 <logger_thread+0x2c0>)
 8015f2e:	4814      	ldr	r0, [pc, #80]	; (8015f80 <logger_thread+0x270>)
 8015f30:	f7f5 ffe6 	bl	800bf00 <chprintf>
      //if there is data in the buffer, write it before closing
      if( bufferEndPos > 0 )
 8015f34:	b94e      	cbnz	r6, 8015f4a <logger_thread+0x23a>
      {
        err = f_write(&fp, curFile_buffer, bufferEndPos, &bytes_written);
      }
      f_close(&fp); //close datafile
 8015f36:	a80c      	add	r0, sp, #48	; 0x30
 8015f38:	f7f9 f9b2 	bl	800f2a0 <f_close>
      logging_state = READY;
 8015f3c:	4b13      	ldr	r3, [pc, #76]	; (8015f8c <logger_thread+0x27c>)
 8015f3e:	2201      	movs	r2, #1
 8015f40:	725a      	strb	r2, [r3, #9]
 8015f42:	f8cd b008 	str.w	fp, [sp, #8]
 8015f46:	464c      	mov	r4, r9
 8015f48:	e15b      	b.n	8016202 <logger_thread+0x4f2>
        err = f_write(&fp, curFile_buffer, bufferEndPos, &bytes_written);
 8015f4a:	aba3      	add	r3, sp, #652	; 0x28c
 8015f4c:	4632      	mov	r2, r6
 8015f4e:	4651      	mov	r1, sl
 8015f50:	a80c      	add	r0, sp, #48	; 0x30
 8015f52:	f7f8 ffc5 	bl	800eee0 <f_write>
 8015f56:	4607      	mov	r7, r0
 8015f58:	e7ed      	b.n	8015f36 <logger_thread+0x226>
      adcBuffer.dataBuffer[ adcBuffer.startPos ] = 0;

      buff_free_size = adcBuffer.startPos-adcBuffer.dataEndPos;
      if( buff_free_size <= 0 )
      {
        buff_free_size+=adcBuffer.bufferLength;
 8015f5a:	4a1a      	ldr	r2, [pc, #104]	; (8015fc4 <logger_thread+0x2b4>)
 8015f5c:	6912      	ldr	r2, [r2, #16]
 8015f5e:	4413      	add	r3, r2
 8015f60:	4a0a      	ldr	r2, [pc, #40]	; (8015f8c <logger_thread+0x27c>)
 8015f62:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
 8015f66:	e169      	b.n	801623c <logger_thread+0x52c>
 8015f68:	200050f8 	.word	0x200050f8
 8015f6c:	0801abf8 	.word	0x0801abf8
 8015f70:	40021000 	.word	0x40021000
 8015f74:	2000488c 	.word	0x2000488c
 8015f78:	2000fe48 	.word	0x2000fe48
 8015f7c:	0801ac00 	.word	0x0801ac00
 8015f80:	20004da0 	.word	0x20004da0
 8015f84:	0801ac20 	.word	0x0801ac20
 8015f88:	2000fe4c 	.word	0x2000fe4c
 8015f8c:	20002428 	.word	0x20002428
 8015f90:	0801ac54 	.word	0x0801ac54
 8015f94:	200029c4 	.word	0x200029c4
 8015f98:	0801ac58 	.word	0x0801ac58
 8015f9c:	0801ac74 	.word	0x0801ac74
 8015fa0:	0801ac3c 	.word	0x0801ac3c
 8015fa4:	0801ac8c 	.word	0x0801ac8c
 8015fa8:	0801aca0 	.word	0x0801aca0
 8015fac:	2000f798 	.word	0x2000f798
 8015fb0:	2000fb6c 	.word	0x2000fb6c
 8015fb4:	0801acb8 	.word	0x0801acb8
 8015fb8:	0801ace4 	.word	0x0801ace4
 8015fbc:	0801ad24 	.word	0x0801ad24
 8015fc0:	20001a28 	.word	0x20001a28
 8015fc4:	20005b30 	.word	0x20005b30
 8015fc8:	0801ad3c 	.word	0x0801ad3c
 8015fcc:	0801ad58 	.word	0x0801ad58
 8015fd0:	0801ad70 	.word	0x0801ad70
      data_end_pos = adcBuffer.dataEndPos;

      adcBuffer.startPos = ( adcBuffer.startPos + 1 ) % adcBuffer.bufferLength;
      if( adcBuffer.startPos == adcBuffer.dataEndPos )
      {
        adcBuffer.freshData = FALSE;
 8015fd4:	4aae      	ldr	r2, [pc, #696]	; (8016290 <logger_thread+0x580>)
 8015fd6:	f649 4364 	movw	r3, #40036	; 0x9c64
 8015fda:	2100      	movs	r1, #0
 8015fdc:	54d1      	strb	r1, [r2, r3]
        if( logging_state == RECORDING )
 8015fde:	4bad      	ldr	r3, [pc, #692]	; (8016294 <logger_thread+0x584>)
 8015fe0:	7a5b      	ldrb	r3, [r3, #9]
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	2b04      	cmp	r3, #4
 8015fe6:	f040 813b 	bne.w	8016260 <logger_thread+0x550>
        {

          logger_pos = 1;
 8015fea:	4baa      	ldr	r3, [pc, #680]	; (8016294 <logger_thread+0x584>)
 8015fec:	2201      	movs	r2, #1
 8015fee:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
 8015ff2:	2320      	movs	r3, #32
 8015ff4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8015ff8:	f7f3 f812 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8015ffc:	f7f1 fd10 	bl	8007a20 <_dbg_check_lock>
 8016000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016004:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8016008:	f7f1 fd22 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 801600c:	f7f3 f810 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8016010:	4ba1      	ldr	r3, [pc, #644]	; (8016298 <logger_thread+0x588>)
 8016012:	681a      	ldr	r2, [r3, #0]
 8016014:	429a      	cmp	r2, r3
 8016016:	d004      	beq.n	8016022 <logger_thread+0x312>
 8016018:	699b      	ldr	r3, [r3, #24]
 801601a:	6899      	ldr	r1, [r3, #8]
 801601c:	6893      	ldr	r3, [r2, #8]
 801601e:	4299      	cmp	r1, r3
 8016020:	d365      	bcc.n	80160ee <logger_thread+0x3de>
 8016022:	2300      	movs	r3, #0
 8016024:	f383 8811 	msr	BASEPRI, r3
          write_time_mS = chVTGetSystemTime();
          if( sync_timer > 2 )//sync every 2s, but only if caught up processing the data buffer
 8016028:	2c02      	cmp	r4, #2
 801602a:	d864      	bhi.n	80160f6 <logger_thread+0x3e6>
 801602c:	2320      	movs	r3, #32
 801602e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8016032:	f7f2 fff5 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8016036:	f7f1 fcf3 	bl	8007a20 <_dbg_check_lock>
 801603a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801603e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8016040:	f7f1 fd06 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8016044:	f7f2 fff4 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8016048:	4b93      	ldr	r3, [pc, #588]	; (8016298 <logger_thread+0x588>)
 801604a:	681a      	ldr	r2, [r3, #0]
 801604c:	429a      	cmp	r2, r3
 801604e:	d004      	beq.n	801605a <logger_thread+0x34a>
 8016050:	699b      	ldr	r3, [r3, #24]
 8016052:	6899      	ldr	r1, [r3, #8]
 8016054:	6893      	ldr	r3, [r2, #8]
 8016056:	4299      	cmp	r1, r3
 8016058:	d352      	bcc.n	8016100 <logger_thread+0x3f0>
 801605a:	2300      	movs	r3, #0
 801605c:	f383 8811 	msr	BASEPRI, r3
  return (sysinterval_t)((systime_t)(end - start));
 8016060:	eba4 0409 	sub.w	r4, r4, r9
 8016064:	4622      	mov	r2, r4
 8016066:	2300      	movs	r3, #0
            err = f_sync (&fp);   //flush changes every second

          write_time_mS = chTimeDiffX(write_time_mS, chVTGetSystemTime());
          sync_timer = 0;
          if( TIME_I2MS(write_time_mS) > 10 ) //print out if takes more than 10mS to write
 8016068:	0160      	lsls	r0, r4, #5
 801606a:	0ee1      	lsrs	r1, r4, #27
 801606c:	1b00      	subs	r0, r0, r4
 801606e:	eb61 0103 	sbc.w	r1, r1, r3
 8016072:	008c      	lsls	r4, r1, #2
 8016074:	ea44 7490 	orr.w	r4, r4, r0, lsr #30
 8016078:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 801607c:	eb1c 0002 	adds.w	r0, ip, r2
 8016080:	eb44 0103 	adc.w	r1, r4, r3
 8016084:	00cb      	lsls	r3, r1, #3
 8016086:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801608a:	00c2      	lsls	r2, r0, #3
 801608c:	4610      	mov	r0, r2
 801608e:	4619      	mov	r1, r3
 8016090:	4a82      	ldr	r2, [pc, #520]	; (801629c <logger_thread+0x58c>)
 8016092:	2300      	movs	r3, #0
 8016094:	f8df b234 	ldr.w	fp, [pc, #564]	; 80162cc <logger_thread+0x5bc>
 8016098:	f04f 0c00 	mov.w	ip, #0
 801609c:	eb1b 0b00 	adds.w	fp, fp, r0
 80160a0:	eb4c 0c01 	adc.w	ip, ip, r1
 80160a4:	4658      	mov	r0, fp
 80160a6:	4661      	mov	r1, ip
 80160a8:	f001 fdda 	bl	8017c60 <__aeabi_uldivmod>
 80160ac:	4604      	mov	r4, r0
 80160ae:	280a      	cmp	r0, #10
 80160b0:	d82a      	bhi.n	8016108 <logger_thread+0x3f8>
            chprintf((BaseSequentialStream*)&SD6, "\n\r f_sync took %d mS\n\r",TIME_I2MS(write_time_mS));
          if( TIME_I2MS(write_time_mS) > max_latency )
 80160b2:	4b78      	ldr	r3, [pc, #480]	; (8016294 <logger_thread+0x584>)
 80160b4:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 80160b8:	429c      	cmp	r4, r3
 80160ba:	d902      	bls.n	80160c2 <logger_thread+0x3b2>
            max_latency = TIME_I2MS(write_time_mS);
 80160bc:	4b75      	ldr	r3, [pc, #468]	; (8016294 <logger_thread+0x584>)
 80160be:	f8c3 47e0 	str.w	r4, [r3, #2016]	; 0x7e0

          if( buffer_overflows )
 80160c2:	4b77      	ldr	r3, [pc, #476]	; (80162a0 <logger_thread+0x590>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	bb2b      	cbnz	r3, 8016114 <logger_thread+0x404>
          {
            chprintf((BaseSequentialStream*)&SD6, "Buffer Overflow: %d\n\r",buffer_overflows);
            sum_buffer_overflows += buffer_overflows;
            buffer_overflows = 0;
          }
          buff_free_size = adcBuffer.startPos-adcBuffer.dataEndPos;
 80160c8:	4a71      	ldr	r2, [pc, #452]	; (8016290 <logger_thread+0x580>)
 80160ca:	6953      	ldr	r3, [r2, #20]
 80160cc:	6992      	ldr	r2, [r2, #24]
 80160ce:	1a9b      	subs	r3, r3, r2
 80160d0:	4a70      	ldr	r2, [pc, #448]	; (8016294 <logger_thread+0x584>)
 80160d2:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
          if( buff_free_size <= 0 )
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	dd29      	ble.n	801612e <logger_thread+0x41e>
          {
            buff_free_size+=adcBuffer.bufferLength;
          }
          data_end_pos = adcBuffer.dataEndPos;
 80160da:	4b6d      	ldr	r3, [pc, #436]	; (8016290 <logger_thread+0x580>)
 80160dc:	699a      	ldr	r2, [r3, #24]
 80160de:	4b6d      	ldr	r3, [pc, #436]	; (8016294 <logger_thread+0x584>)
 80160e0:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc

          logger_pos = 2;
 80160e4:	2202      	movs	r2, #2
 80160e6:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
          sync_timer = 0;
 80160ea:	2400      	movs	r4, #0
 80160ec:	e0b8      	b.n	8016260 <logger_thread+0x550>
 80160ee:	486d      	ldr	r0, [pc, #436]	; (80162a4 <logger_thread+0x594>)
 80160f0:	f7f1 fb06 	bl	8007700 <chSysHalt>
 80160f4:	e795      	b.n	8016022 <logger_thread+0x312>
            err = f_sync (&fp);   //flush changes every second
 80160f6:	a80c      	add	r0, sp, #48	; 0x30
 80160f8:	f7f9 f812 	bl	800f120 <f_sync>
 80160fc:	4607      	mov	r7, r0
 80160fe:	e795      	b.n	801602c <logger_thread+0x31c>
 8016100:	4868      	ldr	r0, [pc, #416]	; (80162a4 <logger_thread+0x594>)
 8016102:	f7f1 fafd 	bl	8007700 <chSysHalt>
 8016106:	e7a8      	b.n	801605a <logger_thread+0x34a>
            chprintf((BaseSequentialStream*)&SD6, "\n\r f_sync took %d mS\n\r",TIME_I2MS(write_time_mS));
 8016108:	4602      	mov	r2, r0
 801610a:	4967      	ldr	r1, [pc, #412]	; (80162a8 <logger_thread+0x598>)
 801610c:	4867      	ldr	r0, [pc, #412]	; (80162ac <logger_thread+0x59c>)
 801610e:	f7f5 fef7 	bl	800bf00 <chprintf>
 8016112:	e7ce      	b.n	80160b2 <logger_thread+0x3a2>
            chprintf((BaseSequentialStream*)&SD6, "Buffer Overflow: %d\n\r",buffer_overflows);
 8016114:	4c62      	ldr	r4, [pc, #392]	; (80162a0 <logger_thread+0x590>)
 8016116:	6822      	ldr	r2, [r4, #0]
 8016118:	4965      	ldr	r1, [pc, #404]	; (80162b0 <logger_thread+0x5a0>)
 801611a:	4864      	ldr	r0, [pc, #400]	; (80162ac <logger_thread+0x59c>)
 801611c:	f7f5 fef0 	bl	800bf00 <chprintf>
            sum_buffer_overflows += buffer_overflows;
 8016120:	6823      	ldr	r3, [r4, #0]
 8016122:	9a04      	ldr	r2, [sp, #16]
 8016124:	441a      	add	r2, r3
 8016126:	9204      	str	r2, [sp, #16]
            buffer_overflows = 0;
 8016128:	2300      	movs	r3, #0
 801612a:	6023      	str	r3, [r4, #0]
 801612c:	e7cc      	b.n	80160c8 <logger_thread+0x3b8>
            buff_free_size+=adcBuffer.bufferLength;
 801612e:	4a58      	ldr	r2, [pc, #352]	; (8016290 <logger_thread+0x580>)
 8016130:	6912      	ldr	r2, [r2, #16]
 8016132:	4413      	add	r3, r2
 8016134:	4a57      	ldr	r2, [pc, #348]	; (8016294 <logger_thread+0x584>)
 8016136:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
 801613a:	e7ce      	b.n	80160da <logger_thread+0x3ca>
      }

      //glbl_s_index record
      if( ( tmpADCSample & 0xFF000000 ) == DATA_TYPE_SINDEX )
      {
        if( logging_state == WAIT_START_RECORDING )
 801613c:	4b55      	ldr	r3, [pc, #340]	; (8016294 <logger_thread+0x584>)
 801613e:	7a5b      	ldrb	r3, [r3, #9]
 8016140:	b2db      	uxtb	r3, r3
 8016142:	2b03      	cmp	r3, #3
 8016144:	d00d      	beq.n	8016162 <logger_thread+0x452>
        {
          logging_state = RECORDING;
        }
        if( logging_state == RECORDING )
 8016146:	4b53      	ldr	r3, [pc, #332]	; (8016294 <logger_thread+0x584>)
 8016148:	7a5b      	ldrb	r3, [r3, #9]
 801614a:	b2db      	uxtb	r3, r3
 801614c:	2b04      	cmp	r3, #4
 801614e:	d00c      	beq.n	801616a <logger_thread+0x45a>
          memcpy(curFile_buffer+bufferEndPos,&tmpADCSample,4);  //copy Sindex marker to buffer
          bufferEndPos += 4;
          sync_timer++;
        }
        //debug check for missed s_index
        if( ( tmpADCSample & 0xFFFFFF ) != last_s_index+1)
 8016150:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
 8016154:	9a03      	ldr	r2, [sp, #12]
 8016156:	1c53      	adds	r3, r2, #1
 8016158:	4598      	cmp	r8, r3
 801615a:	d10b      	bne.n	8016174 <logger_thread+0x464>
          chprintf((BaseSequentialStream*)&SD6, "Missed S index %d, %d\n\r", ( tmpADCSample & 0xFFFFFF ),last_s_index);
        last_s_index = ( tmpADCSample & 0xFFFFFF );
 801615c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016160:	e036      	b.n	80161d0 <logger_thread+0x4c0>
          logging_state = RECORDING;
 8016162:	4b4c      	ldr	r3, [pc, #304]	; (8016294 <logger_thread+0x584>)
 8016164:	2104      	movs	r1, #4
 8016166:	7259      	strb	r1, [r3, #9]
 8016168:	e7ed      	b.n	8016146 <logger_thread+0x436>
          memcpy(curFile_buffer+bufferEndPos,&tmpADCSample,4);  //copy Sindex marker to buffer
 801616a:	f84a 2006 	str.w	r2, [sl, r6]
          bufferEndPos += 4;
 801616e:	3604      	adds	r6, #4
          sync_timer++;
 8016170:	3401      	adds	r4, #1
 8016172:	e7ed      	b.n	8016150 <logger_thread+0x440>
          chprintf((BaseSequentialStream*)&SD6, "Missed S index %d, %d\n\r", ( tmpADCSample & 0xFFFFFF ),last_s_index);
 8016174:	4613      	mov	r3, r2
 8016176:	4642      	mov	r2, r8
 8016178:	494e      	ldr	r1, [pc, #312]	; (80162b4 <logger_thread+0x5a4>)
 801617a:	484c      	ldr	r0, [pc, #304]	; (80162ac <logger_thread+0x59c>)
 801617c:	f7f5 fec0 	bl	800bf00 <chprintf>
        last_s_index = ( tmpADCSample & 0xFFFFFF );
 8016180:	f8cd 800c 	str.w	r8, [sp, #12]
 8016184:	e024      	b.n	80161d0 <logger_thread+0x4c0>
      }

      // pps record
      else if( tmpADCSample == DATA_TYPE_PPS )
      {
        if( logging_state == RECORDING )
 8016186:	4b43      	ldr	r3, [pc, #268]	; (8016294 <logger_thread+0x584>)
 8016188:	7a5b      	ldrb	r3, [r3, #9]
 801618a:	b2db      	uxtb	r3, r3
 801618c:	2b04      	cmp	r3, #4
 801618e:	d07b      	beq.n	8016288 <logger_thread+0x578>
        {
          memcpy(curFile_buffer+bufferEndPos,&tmpADCSample,4);  //copy PPS marker to buffer
          bufferEndPos += 4;
        }
        chprintf((BaseSequentialStream*)&SD6, "PPS %d samples for glbl_s_index %d\n\r",sps_count,glbl_s_index);
 8016190:	4b49      	ldr	r3, [pc, #292]	; (80162b8 <logger_thread+0x5a8>)
 8016192:	881b      	ldrh	r3, [r3, #0]
 8016194:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80162ac <logger_thread+0x59c>
 8016198:	462a      	mov	r2, r5
 801619a:	4948      	ldr	r1, [pc, #288]	; (80162bc <logger_thread+0x5ac>)
 801619c:	4640      	mov	r0, r8
 801619e:	f7f5 feaf 	bl	800bf00 <chprintf>
        chprintf((BaseSequentialStream*)&SD6, "Max file latency: %dmS\n\r",max_latency);
 80161a2:	4b3c      	ldr	r3, [pc, #240]	; (8016294 <logger_thread+0x584>)
 80161a4:	f8d3 27e0 	ldr.w	r2, [r3, #2016]	; 0x7e0
 80161a8:	4945      	ldr	r1, [pc, #276]	; (80162c0 <logger_thread+0x5b0>)
 80161aa:	4640      	mov	r0, r8
 80161ac:	f7f5 fea8 	bl	800bf00 <chprintf>
        chprintf((BaseSequentialStream*)&SD6, "Missed samples %d, raw overflows: %d, overflows: %d\n\r",sum_missed_sample_cnt,sum_raw_buff_overflows,sum_buffer_overflows);
 80161b0:	9b04      	ldr	r3, [sp, #16]
 80161b2:	9300      	str	r3, [sp, #0]
 80161b4:	9b05      	ldr	r3, [sp, #20]
 80161b6:	9d02      	ldr	r5, [sp, #8]
 80161b8:	462a      	mov	r2, r5
 80161ba:	4942      	ldr	r1, [pc, #264]	; (80162c4 <logger_thread+0x5b4>)
 80161bc:	4640      	mov	r0, r8
 80161be:	f7f5 fe9f 	bl	800bf00 <chprintf>

        sum_missed_sample_cnt += missed_sample_cnt;
 80161c2:	4b41      	ldr	r3, [pc, #260]	; (80162c8 <logger_thread+0x5b8>)
 80161c4:	681a      	ldr	r2, [r3, #0]
 80161c6:	4629      	mov	r1, r5
 80161c8:	4411      	add	r1, r2
 80161ca:	9102      	str	r1, [sp, #8]
        missed_sample_cnt = 0;
 80161cc:	2500      	movs	r5, #0
 80161ce:	601d      	str	r5, [r3, #0]
          memcpy(curFile_buffer+bufferEndPos,&tmpADCSample,4);  //write raw data
          bufferEndPos += 4;
        }
      }

      logger_pos = 4;
 80161d0:	4b30      	ldr	r3, [pc, #192]	; (8016294 <logger_thread+0x584>)
 80161d2:	2204      	movs	r2, #4
 80161d4:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
      //check for any new gps events
      eventflags_t flags = chEvtGetAndClearFlags(&gpsListener);
 80161d8:	a807      	add	r0, sp, #28
 80161da:	f7f3 fe61 	bl	8009ea0 <chEvtGetAndClearFlags>
      if( flags )
 80161de:	4680      	mov	r8, r0
 80161e0:	b130      	cbz	r0, 80161f0 <logger_thread+0x4e0>
      {
        if( flags & GPS_NEW_RMC )
 80161e2:	f010 0f01 	tst.w	r0, #1
 80161e6:	d173      	bne.n	80162d0 <logger_thread+0x5c0>
            uint32_t str_buf_len = format_data( string_buffer, global_GPRMC, strlen( global_GPRMC ), DATA_GPS_START );
            memcpy( curFile_buffer + bufferEndPos, string_buffer, str_buf_len );  //copy gps string to data buffer
            bufferEndPos += str_buf_len;
          }
        }
        if( flags & GPS_NEW_GGA )
 80161e8:	f018 0f02 	tst.w	r8, #2
 80161ec:	f040 808f 	bne.w	801630e <logger_thread+0x5fe>
            bufferEndPos += str_buf_len;
          }
        }
      }

      if( logging_state == RECORDING )
 80161f0:	4b28      	ldr	r3, [pc, #160]	; (8016294 <logger_thread+0x584>)
 80161f2:	7a5b      	ldrb	r3, [r3, #9]
 80161f4:	b2db      	uxtb	r3, r3
 80161f6:	2b04      	cmp	r3, #4
 80161f8:	f000 80ab 	beq.w	8016352 <logger_thread+0x642>
          }
          data_end_pos = adcBuffer.dataEndPos;
        }

      }
      if( err != FR_OK )
 80161fc:	2f00      	cmp	r7, #0
 80161fe:	f040 815f 	bne.w	80164c0 <logger_thread+0x7b0>
    while( adcBuffer.freshData == TRUE )
 8016202:	4a23      	ldr	r2, [pc, #140]	; (8016290 <logger_thread+0x580>)
 8016204:	f649 4364 	movw	r3, #40036	; 0x9c64
 8016208:	5cd3      	ldrb	r3, [r2, r3]
 801620a:	2b00      	cmp	r3, #0
 801620c:	f000 816b 	beq.w	80164e6 <logger_thread+0x7d6>
      tmpADCSample = adcBuffer.dataBuffer[ adcBuffer.startPos ];
 8016210:	4b1f      	ldr	r3, [pc, #124]	; (8016290 <logger_thread+0x580>)
 8016212:	695a      	ldr	r2, [r3, #20]
 8016214:	3208      	adds	r2, #8
 8016216:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801621a:	f8d2 8004 	ldr.w	r8, [r2, #4]
      adcBuffer.dataBuffer[ adcBuffer.startPos ] = 0;
 801621e:	695a      	ldr	r2, [r3, #20]
 8016220:	3208      	adds	r2, #8
 8016222:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8016226:	2100      	movs	r1, #0
 8016228:	6051      	str	r1, [r2, #4]
      buff_free_size = adcBuffer.startPos-adcBuffer.dataEndPos;
 801622a:	695a      	ldr	r2, [r3, #20]
 801622c:	699b      	ldr	r3, [r3, #24]
 801622e:	1ad3      	subs	r3, r2, r3
 8016230:	4a18      	ldr	r2, [pc, #96]	; (8016294 <logger_thread+0x584>)
 8016232:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
      if( buff_free_size <= 0 )
 8016236:	428b      	cmp	r3, r1
 8016238:	f77f ae8f 	ble.w	8015f5a <logger_thread+0x24a>
      data_end_pos = adcBuffer.dataEndPos;
 801623c:	4b14      	ldr	r3, [pc, #80]	; (8016290 <logger_thread+0x580>)
 801623e:	6999      	ldr	r1, [r3, #24]
 8016240:	4a14      	ldr	r2, [pc, #80]	; (8016294 <logger_thread+0x584>)
 8016242:	f8c2 17dc 	str.w	r1, [r2, #2012]	; 0x7dc
      adcBuffer.startPos = ( adcBuffer.startPos + 1 ) % adcBuffer.bufferLength;
 8016246:	695a      	ldr	r2, [r3, #20]
 8016248:	3201      	adds	r2, #1
 801624a:	6918      	ldr	r0, [r3, #16]
 801624c:	fb92 f1f0 	sdiv	r1, r2, r0
 8016250:	fb00 2211 	mls	r2, r0, r1, r2
 8016254:	615a      	str	r2, [r3, #20]
      if( adcBuffer.startPos == adcBuffer.dataEndPos )
 8016256:	695a      	ldr	r2, [r3, #20]
 8016258:	699b      	ldr	r3, [r3, #24]
 801625a:	429a      	cmp	r2, r3
 801625c:	f43f aeba 	beq.w	8015fd4 <logger_thread+0x2c4>
      if( ( tmpADCSample & 0xFF000000 ) == DATA_TYPE_SINDEX )
 8016260:	4642      	mov	r2, r8
 8016262:	f008 437f 	and.w	r3, r8, #4278190080	; 0xff000000
 8016266:	f1b3 4f03 	cmp.w	r3, #2197815296	; 0x83000000
 801626a:	f43f af67 	beq.w	801613c <logger_thread+0x42c>
      else if( tmpADCSample == DATA_TYPE_PPS )
 801626e:	f1b8 4f02 	cmp.w	r8, #2181038080	; 0x82000000
 8016272:	d088      	beq.n	8016186 <logger_thread+0x476>
        sps_count++;
 8016274:	3501      	adds	r5, #1
        if( logging_state == RECORDING )
 8016276:	4b07      	ldr	r3, [pc, #28]	; (8016294 <logger_thread+0x584>)
 8016278:	7a5b      	ldrb	r3, [r3, #9]
 801627a:	b2db      	uxtb	r3, r3
 801627c:	2b04      	cmp	r3, #4
 801627e:	d1a7      	bne.n	80161d0 <logger_thread+0x4c0>
          memcpy(curFile_buffer+bufferEndPos,&tmpADCSample,4);  //write raw data
 8016280:	f84a 8006 	str.w	r8, [sl, r6]
          bufferEndPos += 4;
 8016284:	3604      	adds	r6, #4
 8016286:	e7a3      	b.n	80161d0 <logger_thread+0x4c0>
          memcpy(curFile_buffer+bufferEndPos,&tmpADCSample,4);  //copy PPS marker to buffer
 8016288:	f84a 8006 	str.w	r8, [sl, r6]
          bufferEndPos += 4;
 801628c:	3604      	adds	r6, #4
 801628e:	e77f      	b.n	8016190 <logger_thread+0x480>
 8016290:	20005b30 	.word	0x20005b30
 8016294:	20002428 	.word	0x20002428
 8016298:	200050f8 	.word	0x200050f8
 801629c:	000186a0 	.word	0x000186a0
 80162a0:	2000fb6c 	.word	0x2000fb6c
 80162a4:	0801a3e4 	.word	0x0801a3e4
 80162a8:	0801ad84 	.word	0x0801ad84
 80162ac:	20004da0 	.word	0x20004da0
 80162b0:	0801ad9c 	.word	0x0801ad9c
 80162b4:	0801adb4 	.word	0x0801adb4
 80162b8:	20001a28 	.word	0x20001a28
 80162bc:	0801adcc 	.word	0x0801adcc
 80162c0:	0801adf4 	.word	0x0801adf4
 80162c4:	0801ae10 	.word	0x0801ae10
 80162c8:	2000f798 	.word	0x2000f798
 80162cc:	0001869f 	.word	0x0001869f
          chprintf((BaseSequentialStream*)&SD6, "\n\r %s\n\r",global_GPRMC);
 80162d0:	4abb      	ldr	r2, [pc, #748]	; (80165c0 <logger_thread+0x8b0>)
 80162d2:	49bc      	ldr	r1, [pc, #752]	; (80165c4 <logger_thread+0x8b4>)
 80162d4:	48bc      	ldr	r0, [pc, #752]	; (80165c8 <logger_thread+0x8b8>)
 80162d6:	f7f5 fe13 	bl	800bf00 <chprintf>
          if( logging_state == RECORDING )
 80162da:	4bbc      	ldr	r3, [pc, #752]	; (80165cc <logger_thread+0x8bc>)
 80162dc:	7a5b      	ldrb	r3, [r3, #9]
 80162de:	b2db      	uxtb	r3, r3
 80162e0:	2b04      	cmp	r3, #4
 80162e2:	d181      	bne.n	80161e8 <logger_thread+0x4d8>
            uint32_t str_buf_len = format_data( string_buffer, global_GPRMC, strlen( global_GPRMC ), DATA_GPS_START );
 80162e4:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 80165c0 <logger_thread+0x8b0>
 80162e8:	4648      	mov	r0, r9
 80162ea:	f002 f849 	bl	8018380 <strlen>
 80162ee:	f04f 4301 	mov.w	r3, #2164260864	; 0x81000000
 80162f2:	4602      	mov	r2, r0
 80162f4:	4649      	mov	r1, r9
 80162f6:	48b6      	ldr	r0, [pc, #728]	; (80165d0 <logger_thread+0x8c0>)
 80162f8:	f7ff fcda 	bl	8015cb0 <format_data>
 80162fc:	4681      	mov	r9, r0
            memcpy( curFile_buffer + bufferEndPos, string_buffer, str_buf_len );  //copy gps string to data buffer
 80162fe:	4602      	mov	r2, r0
 8016300:	49b3      	ldr	r1, [pc, #716]	; (80165d0 <logger_thread+0x8c0>)
 8016302:	eb0a 0006 	add.w	r0, sl, r6
 8016306:	f001 fe2b 	bl	8017f60 <memcpy>
            bufferEndPos += str_buf_len;
 801630a:	444e      	add	r6, r9
 801630c:	e76c      	b.n	80161e8 <logger_thread+0x4d8>
          chprintf((BaseSequentialStream*)&SD6, "\n\r %s\n\r",global_GPGGA);
 801630e:	4ab1      	ldr	r2, [pc, #708]	; (80165d4 <logger_thread+0x8c4>)
 8016310:	49ac      	ldr	r1, [pc, #688]	; (80165c4 <logger_thread+0x8b4>)
 8016312:	48ad      	ldr	r0, [pc, #692]	; (80165c8 <logger_thread+0x8b8>)
 8016314:	f7f5 fdf4 	bl	800bf00 <chprintf>
          if( logging_state == RECORDING )
 8016318:	4bac      	ldr	r3, [pc, #688]	; (80165cc <logger_thread+0x8bc>)
 801631a:	7a5b      	ldrb	r3, [r3, #9]
 801631c:	b2db      	uxtb	r3, r3
 801631e:	2b04      	cmp	r3, #4
 8016320:	f47f af66 	bne.w	80161f0 <logger_thread+0x4e0>
            uint32_t str_buf_len = format_data( string_buffer, global_GPGGA, strlen( global_GPGGA ), DATA_GPS_START );
 8016324:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 80165d4 <logger_thread+0x8c4>
 8016328:	4640      	mov	r0, r8
 801632a:	f002 f829 	bl	8018380 <strlen>
 801632e:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 80165d0 <logger_thread+0x8c0>
 8016332:	f04f 4301 	mov.w	r3, #2164260864	; 0x81000000
 8016336:	4602      	mov	r2, r0
 8016338:	4641      	mov	r1, r8
 801633a:	4648      	mov	r0, r9
 801633c:	f7ff fcb8 	bl	8015cb0 <format_data>
 8016340:	4680      	mov	r8, r0
            memcpy( curFile_buffer + bufferEndPos, string_buffer, str_buf_len );  //copy gps string to data buffer
 8016342:	4602      	mov	r2, r0
 8016344:	4649      	mov	r1, r9
 8016346:	eb0a 0006 	add.w	r0, sl, r6
 801634a:	f001 fe09 	bl	8017f60 <memcpy>
            bufferEndPos += str_buf_len;
 801634e:	4446      	add	r6, r8
 8016350:	e74e      	b.n	80161f0 <logger_thread+0x4e0>
        if( bufferEndPos >= ( FILE_BUFFER_LENGTH - STRING_BUFFER_LENGTH ))
 8016352:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8016356:	f4ff af51 	bcc.w	80161fc <logger_thread+0x4ec>
 801635a:	2320      	movs	r3, #32
 801635c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8016360:	f7f2 fe5e 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8016364:	f7f1 fb5c 	bl	8007a20 <_dbg_check_lock>
 8016368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801636c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8016370:	f7f1 fb6e 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8016374:	f7f2 fe5c 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8016378:	4b97      	ldr	r3, [pc, #604]	; (80165d8 <logger_thread+0x8c8>)
 801637a:	681a      	ldr	r2, [r3, #0]
 801637c:	429a      	cmp	r2, r3
 801637e:	d004      	beq.n	801638a <logger_thread+0x67a>
 8016380:	699b      	ldr	r3, [r3, #24]
 8016382:	6899      	ldr	r1, [r3, #8]
 8016384:	6893      	ldr	r3, [r2, #8]
 8016386:	4299      	cmp	r1, r3
 8016388:	d36d      	bcc.n	8016466 <logger_thread+0x756>
 801638a:	2300      	movs	r3, #0
 801638c:	f383 8811 	msr	BASEPRI, r3
          logger_pos = 5;
 8016390:	4b8e      	ldr	r3, [pc, #568]	; (80165cc <logger_thread+0x8bc>)
 8016392:	2205      	movs	r2, #5
 8016394:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
          err = f_write(&fp, curFile_buffer, bufferEndPos, &bytes_written);
 8016398:	aba3      	add	r3, sp, #652	; 0x28c
 801639a:	4632      	mov	r2, r6
 801639c:	4651      	mov	r1, sl
 801639e:	a80c      	add	r0, sp, #48	; 0x30
 80163a0:	f7f8 fd9e 	bl	800eee0 <f_write>
 80163a4:	4607      	mov	r7, r0
 80163a6:	2320      	movs	r3, #32
 80163a8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80163ac:	f7f2 fe38 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80163b0:	f7f1 fb36 	bl	8007a20 <_dbg_check_lock>
 80163b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80163b8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  _dbg_check_unlock();
 80163ba:	f7f1 fb49 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80163be:	f7f2 fe37 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80163c2:	4b85      	ldr	r3, [pc, #532]	; (80165d8 <logger_thread+0x8c8>)
 80163c4:	681a      	ldr	r2, [r3, #0]
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d004      	beq.n	80163d4 <logger_thread+0x6c4>
 80163ca:	699b      	ldr	r3, [r3, #24]
 80163cc:	6899      	ldr	r1, [r3, #8]
 80163ce:	6893      	ldr	r3, [r2, #8]
 80163d0:	4299      	cmp	r1, r3
 80163d2:	d34c      	bcc.n	801646e <logger_thread+0x75e>
 80163d4:	2300      	movs	r3, #0
 80163d6:	f383 8811 	msr	BASEPRI, r3
 80163da:	eba6 0608 	sub.w	r6, r6, r8
 80163de:	4632      	mov	r2, r6
 80163e0:	2300      	movs	r3, #0
          if( TIME_I2MS(write_time_mS) > 10 ) //print out if takes more than 10mS to write
 80163e2:	0170      	lsls	r0, r6, #5
 80163e4:	0ef1      	lsrs	r1, r6, #27
 80163e6:	1b80      	subs	r0, r0, r6
 80163e8:	eb61 0103 	sbc.w	r1, r1, r3
 80163ec:	008e      	lsls	r6, r1, #2
 80163ee:	ea46 7690 	orr.w	r6, r6, r0, lsr #30
 80163f2:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 80163f6:	eb1c 0b02 	adds.w	fp, ip, r2
 80163fa:	eb46 0c03 	adc.w	ip, r6, r3
 80163fe:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8016402:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8016406:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 801640a:	4693      	mov	fp, r2
 801640c:	469c      	mov	ip, r3
 801640e:	4a73      	ldr	r2, [pc, #460]	; (80165dc <logger_thread+0x8cc>)
 8016410:	2300      	movs	r3, #0
 8016412:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8016608 <logger_thread+0x8f8>
 8016416:	f04f 0900 	mov.w	r9, #0
 801641a:	eb1b 0008 	adds.w	r0, fp, r8
 801641e:	eb4c 0109 	adc.w	r1, ip, r9
 8016422:	f001 fc1d 	bl	8017c60 <__aeabi_uldivmod>
 8016426:	4606      	mov	r6, r0
 8016428:	280a      	cmp	r0, #10
 801642a:	d824      	bhi.n	8016476 <logger_thread+0x766>
          if( buffer_overflows )
 801642c:	4b6c      	ldr	r3, [pc, #432]	; (80165e0 <logger_thread+0x8d0>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	bb7b      	cbnz	r3, 8016492 <logger_thread+0x782>
          logger_pos = 6;
 8016432:	4b66      	ldr	r3, [pc, #408]	; (80165cc <logger_thread+0x8bc>)
 8016434:	2206      	movs	r2, #6
 8016436:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
          if( curFile_buffer == file_buffer1 )
 801643a:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 801643e:	459a      	cmp	sl, r3
 8016440:	d034      	beq.n	80164ac <logger_thread+0x79c>
            curFile_buffer = file_buffer1;
 8016442:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 801660c <logger_thread+0x8fc>
          buff_free_size = adcBuffer.startPos-adcBuffer.dataEndPos;
 8016446:	4a67      	ldr	r2, [pc, #412]	; (80165e4 <logger_thread+0x8d4>)
 8016448:	6953      	ldr	r3, [r2, #20]
 801644a:	6992      	ldr	r2, [r2, #24]
 801644c:	1a9b      	subs	r3, r3, r2
 801644e:	4a5f      	ldr	r2, [pc, #380]	; (80165cc <logger_thread+0x8bc>)
 8016450:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
          if( buff_free_size <= 0 )
 8016454:	2b00      	cmp	r3, #0
 8016456:	dd2c      	ble.n	80164b2 <logger_thread+0x7a2>
          data_end_pos = adcBuffer.dataEndPos;
 8016458:	4b62      	ldr	r3, [pc, #392]	; (80165e4 <logger_thread+0x8d4>)
 801645a:	699a      	ldr	r2, [r3, #24]
 801645c:	4b5b      	ldr	r3, [pc, #364]	; (80165cc <logger_thread+0x8bc>)
 801645e:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
          bufferEndPos = 0;
 8016462:	2600      	movs	r6, #0
 8016464:	e6ca      	b.n	80161fc <logger_thread+0x4ec>
 8016466:	4860      	ldr	r0, [pc, #384]	; (80165e8 <logger_thread+0x8d8>)
 8016468:	f7f1 f94a 	bl	8007700 <chSysHalt>
 801646c:	e78d      	b.n	801638a <logger_thread+0x67a>
 801646e:	485e      	ldr	r0, [pc, #376]	; (80165e8 <logger_thread+0x8d8>)
 8016470:	f7f1 f946 	bl	8007700 <chSysHalt>
 8016474:	e7ae      	b.n	80163d4 <logger_thread+0x6c4>
            chprintf((BaseSequentialStream*)&SD6, "\n\r f_write took %d mS\n\r",TIME_I2MS(write_time_mS));
 8016476:	4602      	mov	r2, r0
 8016478:	495c      	ldr	r1, [pc, #368]	; (80165ec <logger_thread+0x8dc>)
 801647a:	4853      	ldr	r0, [pc, #332]	; (80165c8 <logger_thread+0x8b8>)
 801647c:	f7f5 fd40 	bl	800bf00 <chprintf>
            if( TIME_I2MS(write_time_mS) > max_latency )
 8016480:	4b52      	ldr	r3, [pc, #328]	; (80165cc <logger_thread+0x8bc>)
 8016482:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 8016486:	429e      	cmp	r6, r3
 8016488:	d9d0      	bls.n	801642c <logger_thread+0x71c>
              max_latency = TIME_I2MS(write_time_mS);
 801648a:	4b50      	ldr	r3, [pc, #320]	; (80165cc <logger_thread+0x8bc>)
 801648c:	f8c3 67e0 	str.w	r6, [r3, #2016]	; 0x7e0
 8016490:	e7cc      	b.n	801642c <logger_thread+0x71c>
            chprintf((BaseSequentialStream*)&SD6, "Buffer Overflow: %d\n\r",buffer_overflows);
 8016492:	4e53      	ldr	r6, [pc, #332]	; (80165e0 <logger_thread+0x8d0>)
 8016494:	6832      	ldr	r2, [r6, #0]
 8016496:	4956      	ldr	r1, [pc, #344]	; (80165f0 <logger_thread+0x8e0>)
 8016498:	484b      	ldr	r0, [pc, #300]	; (80165c8 <logger_thread+0x8b8>)
 801649a:	f7f5 fd31 	bl	800bf00 <chprintf>
            sum_buffer_overflows += buffer_overflows;
 801649e:	6833      	ldr	r3, [r6, #0]
 80164a0:	9a04      	ldr	r2, [sp, #16]
 80164a2:	441a      	add	r2, r3
 80164a4:	9204      	str	r2, [sp, #16]
            buffer_overflows = 0;
 80164a6:	2300      	movs	r3, #0
 80164a8:	6033      	str	r3, [r6, #0]
 80164aa:	e7c2      	b.n	8016432 <logger_thread+0x722>
            curFile_buffer = file_buffer2;
 80164ac:	f5a3 7a20 	sub.w	sl, r3, #640	; 0x280
 80164b0:	e7c9      	b.n	8016446 <logger_thread+0x736>
            buff_free_size+=adcBuffer.bufferLength;
 80164b2:	4a4c      	ldr	r2, [pc, #304]	; (80165e4 <logger_thread+0x8d4>)
 80164b4:	6912      	ldr	r2, [r2, #16]
 80164b6:	4413      	add	r3, r2
 80164b8:	4a44      	ldr	r2, [pc, #272]	; (80165cc <logger_thread+0x8bc>)
 80164ba:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
 80164be:	e7cb      	b.n	8016458 <logger_thread+0x748>
      {
        chprintf((BaseSequentialStream*)&SD6, "\nfile recording failed:  %d\n\r", err);
 80164c0:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8016610 <logger_thread+0x900>
 80164c4:	463a      	mov	r2, r7
 80164c6:	4641      	mov	r1, r8
 80164c8:	483f      	ldr	r0, [pc, #252]	; (80165c8 <logger_thread+0x8b8>)
 80164ca:	f7f5 fd19 	bl	800bf00 <chprintf>
        chsnprintf( message_buffer, MSG_BUFF_LENGTH, "\nfile recording failed:  %d\n\r", err); //write error message to buffer
 80164ce:	463b      	mov	r3, r7
 80164d0:	4642      	mov	r2, r8
 80164d2:	2164      	movs	r1, #100	; 0x64
 80164d4:	4847      	ldr	r0, [pc, #284]	; (80165f4 <logger_thread+0x8e4>)
 80164d6:	f7f5 fd5b 	bl	800bf90 <chsnprintf>
        msg_flag = true; //set message flag to trigger sending
 80164da:	4b3c      	ldr	r3, [pc, #240]	; (80165cc <logger_thread+0x8bc>)
 80164dc:	2201      	movs	r2, #1
 80164de:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
        logging_state = READY; //show we are no longer recording. Can't close file because there was an error with the card
 80164e2:	725a      	strb	r2, [r3, #9]
 80164e4:	e68d      	b.n	8016202 <logger_thread+0x4f2>
 80164e6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80164ea:	46a1      	mov	r9, r4
      }
    }
    //sleep to allow some time for fresh data
    logger_pos = 7;
 80164ec:	4b37      	ldr	r3, [pc, #220]	; (80165cc <logger_thread+0x8bc>)
 80164ee:	2207      	movs	r2, #7
 80164f0:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
    chThdSleepMicroseconds(200);
 80164f4:	2014      	movs	r0, #20
 80164f6:	2100      	movs	r1, #0
 80164f8:	f7f2 fb0a 	bl	8008b10 <chThdSleep>
    logger_pos = 0;
 80164fc:	4b33      	ldr	r3, [pc, #204]	; (80165cc <logger_thread+0x8bc>)
 80164fe:	2200      	movs	r2, #0
 8016500:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
    if( missed_adc_flag )
 8016504:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016508:	2b00      	cmp	r3, #0
 801650a:	f47f ac54 	bne.w	8015db6 <logger_thread+0xa6>
    if( raw_buff_overflow )
 801650e:	4b2f      	ldr	r3, [pc, #188]	; (80165cc <logger_thread+0x8bc>)
 8016510:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8016514:	b29b      	uxth	r3, r3
 8016516:	2b00      	cmp	r3, #0
 8016518:	f47f ac5f 	bne.w	8015dda <logger_thread+0xca>
    if( ( ( abs(raw_min_val) > (ADC_EXCESSIVE_LIMIT/5) ) || (raw_max_val > (ADC_EXCESSIVE_LIMIT/5)) ) && ( logging_state >= READY ))
 801651c:	4b2b      	ldr	r3, [pc, #172]	; (80165cc <logger_thread+0x8bc>)
 801651e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016520:	2b00      	cmp	r3, #0
 8016522:	bfb8      	it	lt
 8016524:	425b      	neglt	r3, r3
 8016526:	4a34      	ldr	r2, [pc, #208]	; (80165f8 <logger_thread+0x8e8>)
 8016528:	4293      	cmp	r3, r2
 801652a:	dc05      	bgt.n	8016538 <logger_thread+0x828>
 801652c:	4b27      	ldr	r3, [pc, #156]	; (80165cc <logger_thread+0x8bc>)
 801652e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8016530:	4b31      	ldr	r3, [pc, #196]	; (80165f8 <logger_thread+0x8e8>)
 8016532:	429a      	cmp	r2, r3
 8016534:	f77f ac8b 	ble.w	8015e4e <logger_thread+0x13e>
 8016538:	4b24      	ldr	r3, [pc, #144]	; (80165cc <logger_thread+0x8bc>)
 801653a:	7a5b      	ldrb	r3, [r3, #9]
 801653c:	2b00      	cmp	r3, #0
 801653e:	f43f ac86 	beq.w	8015e4e <logger_thread+0x13e>
      uint8_t tmp_gain_setting = gain_setting;
 8016542:	4b22      	ldr	r3, [pc, #136]	; (80165cc <logger_thread+0x8bc>)
 8016544:	f893 409b 	ldrb.w	r4, [r3, #155]	; 0x9b
 8016548:	b2e4      	uxtb	r4, r4
      if( auto_gain_flag && ( gain_setting != LOW_GAIN ))
 801654a:	4b2c      	ldr	r3, [pc, #176]	; (80165fc <logger_thread+0x8ec>)
 801654c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016550:	b1b3      	cbz	r3, 8016580 <logger_thread+0x870>
 8016552:	4b1e      	ldr	r3, [pc, #120]	; (80165cc <logger_thread+0x8bc>)
 8016554:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016558:	b2db      	uxtb	r3, r3
 801655a:	2b01      	cmp	r3, #1
 801655c:	d010      	beq.n	8016580 <logger_thread+0x870>
        if( ( logging_state == WAIT_START_RECORDING ) || ( logging_state == RECORDING ) )
 801655e:	4b1b      	ldr	r3, [pc, #108]	; (80165cc <logger_thread+0x8bc>)
 8016560:	7a5b      	ldrb	r3, [r3, #9]
 8016562:	b2db      	uxtb	r3, r3
 8016564:	2b03      	cmp	r3, #3
 8016566:	d005      	beq.n	8016574 <logger_thread+0x864>
 8016568:	4b18      	ldr	r3, [pc, #96]	; (80165cc <logger_thread+0x8bc>)
 801656a:	7a5b      	ldrb	r3, [r3, #9]
 801656c:	b2db      	uxtb	r3, r3
 801656e:	2b04      	cmp	r3, #4
 8016570:	f47f ac58 	bne.w	8015e24 <logger_thread+0x114>
          if( glbl_s_index < 30 )
 8016574:	4b21      	ldr	r3, [pc, #132]	; (80165fc <logger_thread+0x8ec>)
 8016576:	881b      	ldrh	r3, [r3, #0]
 8016578:	b29b      	uxth	r3, r3
 801657a:	2b1d      	cmp	r3, #29
 801657c:	f67f ac3d 	bls.w	8015dfa <logger_thread+0xea>
      if( gain_setting == tmp_gain_setting )
 8016580:	4b12      	ldr	r3, [pc, #72]	; (80165cc <logger_thread+0x8bc>)
 8016582:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016586:	b2db      	uxtb	r3, r3
 8016588:	42a3      	cmp	r3, r4
 801658a:	f47f ac4f 	bne.w	8015e2c <logger_thread+0x11c>
        if( ( abs(raw_min_val) > (ADC_EXCESSIVE_LIMIT) ) || (raw_max_val > (ADC_EXCESSIVE_LIMIT) ) )
 801658e:	4b0f      	ldr	r3, [pc, #60]	; (80165cc <logger_thread+0x8bc>)
 8016590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016592:	2b00      	cmp	r3, #0
 8016594:	bfb8      	it	lt
 8016596:	425b      	neglt	r3, r3
 8016598:	4a19      	ldr	r2, [pc, #100]	; (8016600 <logger_thread+0x8f0>)
 801659a:	4293      	cmp	r3, r2
 801659c:	dc05      	bgt.n	80165aa <logger_thread+0x89a>
 801659e:	4b0b      	ldr	r3, [pc, #44]	; (80165cc <logger_thread+0x8bc>)
 80165a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80165a2:	4b17      	ldr	r3, [pc, #92]	; (8016600 <logger_thread+0x8f0>)
 80165a4:	429a      	cmp	r2, r3
 80165a6:	f77f ac4e 	ble.w	8015e46 <logger_thread+0x136>
          chsnprintf( message_buffer, MSG_BUFF_LENGTH, "Excessive Input Voltage!!"); //write error message to buffer
 80165aa:	4a16      	ldr	r2, [pc, #88]	; (8016604 <logger_thread+0x8f4>)
 80165ac:	2164      	movs	r1, #100	; 0x64
 80165ae:	4811      	ldr	r0, [pc, #68]	; (80165f4 <logger_thread+0x8e4>)
 80165b0:	f7f5 fcee 	bl	800bf90 <chsnprintf>
          msg_flag = true; //set message flag to trigger sending
 80165b4:	4b05      	ldr	r3, [pc, #20]	; (80165cc <logger_thread+0x8bc>)
 80165b6:	2201      	movs	r2, #1
 80165b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 80165bc:	e443      	b.n	8015e46 <logger_thread+0x136>
 80165be:	bf00      	nop
 80165c0:	2000f7a8 	.word	0x2000f7a8
 80165c4:	0801ae48 	.word	0x0801ae48
 80165c8:	20004da0 	.word	0x20004da0
 80165cc:	20002428 	.word	0x20002428
 80165d0:	20002c0c 	.word	0x20002c0c
 80165d4:	2000fc10 	.word	0x2000fc10
 80165d8:	200050f8 	.word	0x200050f8
 80165dc:	000186a0 	.word	0x000186a0
 80165e0:	2000fb6c 	.word	0x2000fb6c
 80165e4:	20005b30 	.word	0x20005b30
 80165e8:	0801a3e4 	.word	0x0801a3e4
 80165ec:	0801ae50 	.word	0x0801ae50
 80165f0:	0801ad9c 	.word	0x0801ad9c
 80165f4:	2000fe4c 	.word	0x2000fe4c
 80165f8:	0bebc200 	.word	0x0bebc200
 80165fc:	20001a28 	.word	0x20001a28
 8016600:	3b9aca00 	.word	0x3b9aca00
 8016604:	0801ad08 	.word	0x0801ad08
 8016608:	0001869f 	.word	0x0001869f
 801660c:	20002744 	.word	0x20002744
 8016610:	0801ae68 	.word	0x0801ae68
 8016614:	f3af 8000 	nop.w
 8016618:	f3af 8000 	nop.w
 801661c:	f3af 8000 	nop.w

08016620 <check_node_state>:
/* helper function to verify/update node state
 *
 */
char check_node_state(char new_state)
{
  char new_node_state = node_state;
 8016620:	4b05      	ldr	r3, [pc, #20]	; (8016638 <check_node_state+0x18>)
 8016622:	7a1b      	ldrb	r3, [r3, #8]
 8016624:	b2db      	uxtb	r3, r3
  // currently the only thing that can be set is read/active
  if( new_state&STATE_ACTIVE )
 8016626:	f010 0f08 	tst.w	r0, #8
 801662a:	d102      	bne.n	8016632 <check_node_state+0x12>
  {
    new_node_state |= STATE_ACTIVE;
  }
  else
  {
    new_node_state &= ~STATE_ACTIVE;
 801662c:	f003 00f7 	and.w	r0, r3, #247	; 0xf7
  }
  return new_node_state;
}
 8016630:	4770      	bx	lr
    new_node_state |= STATE_ACTIVE;
 8016632:	f043 0008 	orr.w	r0, r3, #8
 8016636:	4770      	bx	lr
 8016638:	20002428 	.word	0x20002428
 801663c:	f3af 8000 	nop.w

08016640 <check_valid_relay>:
 * helper function to verify the new relay state is valid (eg don't allow non ready nodes to set to analog)
 */
bool check_valid_relay(char new_relay_state )
{
  //not valid to set analog relay if node isn't active
  if( new_relay_state == RELAY_STATE_ADC && !( node_state&STATE_ACTIVE ) )
 8016640:	2841      	cmp	r0, #65	; 0x41
 8016642:	d001      	beq.n	8016648 <check_valid_relay+0x8>
  {
    return 0;
  }
  return 1;
 8016644:	2001      	movs	r0, #1
 8016646:	4770      	bx	lr
  if( new_relay_state == RELAY_STATE_ADC && !( node_state&STATE_ACTIVE ) )
 8016648:	4b04      	ldr	r3, [pc, #16]	; (801665c <check_valid_relay+0x1c>)
 801664a:	7a1b      	ldrb	r3, [r3, #8]
 801664c:	f013 0f08 	tst.w	r3, #8
 8016650:	d001      	beq.n	8016656 <check_valid_relay+0x16>
  return 1;
 8016652:	2001      	movs	r0, #1
 8016654:	4770      	bx	lr
    return 0;
 8016656:	2000      	movs	r0, #0
}
 8016658:	4770      	bx	lr
 801665a:	bf00      	nop
 801665c:	20002428 	.word	0x20002428

08016660 <run_cmd>:
 * run_cmd can also be used to send info initiated internally (eg relay change or state change messages)
 */
#define SEND_REPLY 0
#define NO_REPLY -1
msg_t run_cmd(volatile xbee_packet *cmd_packet, xbee_mailbox_t *mbx )
{
 8016660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016664:	b084      	sub	sp, #16
 8016666:	4606      	mov	r6, r0
 8016668:	460d      	mov	r5, r1
  xbee_packet *resp_packet;
  msg_t msg = chMBFetchTimeout(&mbx->tx_free_packets, (msg_t *)&resp_packet,TIME_IMMEDIATE);
 801666a:	f101 08a0 	add.w	r8, r1, #160	; 0xa0
 801666e:	2200      	movs	r2, #0
 8016670:	2300      	movs	r3, #0
 8016672:	a903      	add	r1, sp, #12
 8016674:	4640      	mov	r0, r8
 8016676:	f7f4 fa6b 	bl	800ab50 <chMBFetchTimeout>
  if( msg != MSG_OK)
 801667a:	4607      	mov	r7, r0
 801667c:	2800      	cmp	r0, #0
 801667e:	d13d      	bne.n	80166fc <run_cmd+0x9c>
  {
    chprintf((BaseSequentialStream*)&SD6, "\n\rxbee response mailbox failure\n\r");
    return msg;
  }

  memcpy(resp_packet,cmd_packet,sizeof(xbee_packet)); //copy the address etc.
 8016680:	225e      	movs	r2, #94	; 0x5e
 8016682:	4631      	mov	r1, r6
 8016684:	9803      	ldr	r0, [sp, #12]
 8016686:	f001 fc6b 	bl	8017f60 <memcpy>
  resp_packet->data_length = 0; //reset data buffer
 801668a:	9c03      	ldr	r4, [sp, #12]
 801668c:	2300      	movs	r3, #0
 801668e:	81a3      	strh	r3, [r4, #12]

  switch ( cmd_packet->data[0] )
 8016690:	7bb3      	ldrb	r3, [r6, #14]
 8016692:	3b45      	subs	r3, #69	; 0x45
 8016694:	2b2e      	cmp	r3, #46	; 0x2e
 8016696:	f200 8281 	bhi.w	8016b9c <run_cmd+0x53c>
 801669a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801669e:	01c1      	.short	0x01c1
 80166a0:	027f027f 	.word	0x027f027f
 80166a4:	016e027f 	.word	0x016e027f
 80166a8:	027f027f 	.word	0x027f027f
 80166ac:	027f027f 	.word	0x027f027f
 80166b0:	027f027f 	.word	0x027f027f
 80166b4:	027f027f 	.word	0x027f027f
 80166b8:	01a6027f 	.word	0x01a6027f
 80166bc:	027f027f 	.word	0x027f027f
 80166c0:	027f027f 	.word	0x027f027f
 80166c4:	01ed027f 	.word	0x01ed027f
 80166c8:	027f027f 	.word	0x027f027f
 80166cc:	027f027f 	.word	0x027f027f
 80166d0:	027f027f 	.word	0x027f027f
 80166d4:	027f027f 	.word	0x027f027f
 80166d8:	027f027f 	.word	0x027f027f
 80166dc:	027f027f 	.word	0x027f027f
 80166e0:	027f027f 	.word	0x027f027f
 80166e4:	0064027f 	.word	0x0064027f
 80166e8:	027f027f 	.word	0x027f027f
 80166ec:	026501f5 	.word	0x026501f5
 80166f0:	027f0239 	.word	0x027f0239
 80166f4:	027f027f 	.word	0x027f027f
 80166f8:	0037027f 	.word	0x0037027f
    chprintf((BaseSequentialStream*)&SD6, "\n\rxbee response mailbox failure\n\r");
 80166fc:	49cd      	ldr	r1, [pc, #820]	; (8016a34 <run_cmd+0x3d4>)
 80166fe:	48ce      	ldr	r0, [pc, #824]	; (8016a38 <run_cmd+0x3d8>)
 8016700:	f7f5 fbfe 	bl	800bf00 <chprintf>
      break;
  }

 (void)chMBPostTimeout(&xbee_mbx->tx_free_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //if not needed, return to pool
  return NO_REPLY; //don't send response packet
}
 8016704:	4638      	mov	r0, r7
 8016706:	b004      	add	sp, #16
 8016708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if( cmd_packet->data_length > 1 )
 801670c:	89b3      	ldrh	r3, [r6, #12]
 801670e:	b29b      	uxth	r3, r3
 8016710:	2b01      	cmp	r3, #1
 8016712:	d81c      	bhi.n	801674e <run_cmd+0xee>
        resp_packet->data[1] = 0;//null terminate to make like a string
 8016714:	2300      	movs	r3, #0
 8016716:	73e3      	strb	r3, [r4, #15]
        chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 6, "%02X",node_state);
 8016718:	f104 000e 	add.w	r0, r4, #14
 801671c:	f001 fe30 	bl	8018380 <strlen>
 8016720:	4bc6      	ldr	r3, [pc, #792]	; (8016a3c <run_cmd+0x3dc>)
 8016722:	7a1b      	ldrb	r3, [r3, #8]
 8016724:	3008      	adds	r0, #8
 8016726:	4420      	add	r0, r4
 8016728:	4ac5      	ldr	r2, [pc, #788]	; (8016a40 <run_cmd+0x3e0>)
 801672a:	2106      	movs	r1, #6
 801672c:	4408      	add	r0, r1
 801672e:	f7f5 fc2f 	bl	800bf90 <chsnprintf>
        resp_packet->data_length = strlen(resp_packet->data);
 8016732:	9c03      	ldr	r4, [sp, #12]
 8016734:	f104 000e 	add.w	r0, r4, #14
 8016738:	f001 fe22 	bl	8018380 <strlen>
 801673c:	81a0      	strh	r0, [r4, #12]
        (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 801673e:	2200      	movs	r2, #0
 8016740:	2300      	movs	r3, #0
 8016742:	4621      	mov	r1, r4
 8016744:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8016748:	f7f4 f8aa 	bl	800a8a0 <chMBPostTimeout>
        return SEND_REPLY; //flag that the packet needs to be sent
 801674c:	e7da      	b.n	8016704 <run_cmd+0xa4>
        node_state = check_node_state( strtoul(&cmd_packet->data[1], NULL, 16) );
 801674e:	2210      	movs	r2, #16
 8016750:	2100      	movs	r1, #0
 8016752:	f106 000f 	add.w	r0, r6, #15
 8016756:	f002 f971 	bl	8018a3c <strtoul>
 801675a:	b2c0      	uxtb	r0, r0
 801675c:	f7ff ff60 	bl	8016620 <check_node_state>
 8016760:	4bb6      	ldr	r3, [pc, #728]	; (8016a3c <run_cmd+0x3dc>)
 8016762:	7218      	strb	r0, [r3, #8]
      break;
 8016764:	e21a      	b.n	8016b9c <run_cmd+0x53c>
      resp_packet->data[1] = ';';
 8016766:	233b      	movs	r3, #59	; 0x3b
 8016768:	73e3      	strb	r3, [r4, #15]
      resp_packet->data[2] = READ_INFO;
 801676a:	2349      	movs	r3, #73	; 0x49
 801676c:	7423      	strb	r3, [r4, #16]
      resp_packet->data[3] = node_config.device_id[0];  //node id
 801676e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8016a3c <run_cmd+0x3dc>
 8016772:	f899 3020 	ldrb.w	r3, [r9, #32]
 8016776:	7463      	strb	r3, [r4, #17]
      resp_packet->data[4] = node_config.device_id[1];
 8016778:	f899 3021 	ldrb.w	r3, [r9, #33]	; 0x21
 801677c:	74a3      	strb	r3, [r4, #18]
      resp_packet->data[5] = 0;//node_config.device_id[2];
 801677e:	2300      	movs	r3, #0
 8016780:	74e3      	strb	r3, [r4, #19]
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, "%s%s",HW_TYPE,HW_VERSION); //HW data
 8016782:	f104 000e 	add.w	r0, r4, #14
 8016786:	f001 fdfb 	bl	8018380 <strlen>
 801678a:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8016a70 <run_cmd+0x410>
 801678e:	3008      	adds	r0, #8
 8016790:	4420      	add	r0, r4
 8016792:	4bac      	ldr	r3, [pc, #688]	; (8016a44 <run_cmd+0x3e4>)
 8016794:	9300      	str	r3, [sp, #0]
 8016796:	4bac      	ldr	r3, [pc, #688]	; (8016a48 <run_cmd+0x3e8>)
 8016798:	4652      	mov	r2, sl
 801679a:	2164      	movs	r1, #100	; 0x64
 801679c:	3006      	adds	r0, #6
 801679e:	f7f5 fbf7 	bl	800bf90 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, "%s%s",FW_TYPE,FW_VERSION); //FW data
 80167a2:	9c03      	ldr	r4, [sp, #12]
 80167a4:	f104 000e 	add.w	r0, r4, #14
 80167a8:	f001 fdea 	bl	8018380 <strlen>
 80167ac:	3008      	adds	r0, #8
 80167ae:	4420      	add	r0, r4
 80167b0:	4ba6      	ldr	r3, [pc, #664]	; (8016a4c <run_cmd+0x3ec>)
 80167b2:	9300      	str	r3, [sp, #0]
 80167b4:	4ba6      	ldr	r3, [pc, #664]	; (8016a50 <run_cmd+0x3f0>)
 80167b6:	4652      	mov	r2, sl
 80167b8:	2164      	movs	r1, #100	; 0x64
 80167ba:	3006      	adds	r0, #6
 80167bc:	f7f5 fbe8 	bl	800bf90 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%c",INPUT_TYPE_CMD,node_config.dev_input_type); //input type
 80167c0:	9c03      	ldr	r4, [sp, #12]
 80167c2:	f104 000e 	add.w	r0, r4, #14
 80167c6:	f001 fddb 	bl	8018380 <strlen>
 80167ca:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
 80167ce:	3008      	adds	r0, #8
 80167d0:	4420      	add	r0, r4
 80167d2:	9300      	str	r3, [sp, #0]
 80167d4:	2355      	movs	r3, #85	; 0x55
 80167d6:	4a9f      	ldr	r2, [pc, #636]	; (8016a54 <run_cmd+0x3f4>)
 80167d8:	2164      	movs	r1, #100	; 0x64
 80167da:	3006      	adds	r0, #6
 80167dc:	f7f5 fbd8 	bl	800bf90 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%d",REC_RATE_CMD,target_sps); //recording rate
 80167e0:	9c03      	ldr	r4, [sp, #12]
 80167e2:	f104 000e 	add.w	r0, r4, #14
 80167e6:	f001 fdcb 	bl	8018380 <strlen>
 80167ea:	3008      	adds	r0, #8
 80167ec:	4420      	add	r0, r4
 80167ee:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80167f2:	9300      	str	r3, [sp, #0]
 80167f4:	2366      	movs	r3, #102	; 0x66
 80167f6:	4a98      	ldr	r2, [pc, #608]	; (8016a58 <run_cmd+0x3f8>)
 80167f8:	2164      	movs	r1, #100	; 0x64
 80167fa:	3006      	adds	r0, #6
 80167fc:	f7f5 fbc8 	bl	800bf90 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%i",TIMEBASE_CMD,2000); //timebase
 8016800:	9c03      	ldr	r4, [sp, #12]
 8016802:	f104 000e 	add.w	r0, r4, #14
 8016806:	f001 fdbb 	bl	8018380 <strlen>
 801680a:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8016a68 <run_cmd+0x408>
 801680e:	3008      	adds	r0, #8
 8016810:	4420      	add	r0, r4
 8016812:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8016816:	9300      	str	r3, [sp, #0]
 8016818:	2354      	movs	r3, #84	; 0x54
 801681a:	4652      	mov	r2, sl
 801681c:	2164      	movs	r1, #100	; 0x64
 801681e:	3006      	adds	r0, #6
 8016820:	f7f5 fbb6 	bl	800bf90 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%i",READ_BAT_CMD,battery_soc); //battery level
 8016824:	9c03      	ldr	r4, [sp, #12]
 8016826:	f104 000e 	add.w	r0, r4, #14
 801682a:	f001 fda9 	bl	8018380 <strlen>
 801682e:	f899 3864 	ldrb.w	r3, [r9, #2148]	; 0x864
 8016832:	3008      	adds	r0, #8
 8016834:	4420      	add	r0, r4
 8016836:	9300      	str	r3, [sp, #0]
 8016838:	2362      	movs	r3, #98	; 0x62
 801683a:	4652      	mov	r2, sl
 801683c:	2164      	movs	r1, #100	; 0x64
 801683e:	3006      	adds	r0, #6
 8016840:	f7f5 fba6 	bl	800bf90 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%s,%c,",READ_GPS,gps_data.lat,gps_data.lat_NS); //gps lat
 8016844:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8016848:	f109 000e 	add.w	r0, r9, #14
 801684c:	f001 fd98 	bl	8018380 <strlen>
 8016850:	4c82      	ldr	r4, [pc, #520]	; (8016a5c <run_cmd+0x3fc>)
 8016852:	7b63      	ldrb	r3, [r4, #13]
 8016854:	3008      	adds	r0, #8
 8016856:	4448      	add	r0, r9
 8016858:	9301      	str	r3, [sp, #4]
 801685a:	1c63      	adds	r3, r4, #1
 801685c:	9300      	str	r3, [sp, #0]
 801685e:	2347      	movs	r3, #71	; 0x47
 8016860:	4a7f      	ldr	r2, [pc, #508]	; (8016a60 <run_cmd+0x400>)
 8016862:	2164      	movs	r1, #100	; 0x64
 8016864:	3006      	adds	r0, #6
 8016866:	f7f5 fb93 	bl	800bf90 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, "%s,%c,%s",gps_data.lon,gps_data.lon_EW,gps_data.elev); //gps lon and elev
 801686a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801686e:	f109 000e 	add.w	r0, r9, #14
 8016872:	f001 fd85 	bl	8018380 <strlen>
 8016876:	7ea3      	ldrb	r3, [r4, #26]
 8016878:	3008      	adds	r0, #8
 801687a:	4448      	add	r0, r9
 801687c:	f104 021b 	add.w	r2, r4, #27
 8016880:	9201      	str	r2, [sp, #4]
 8016882:	9300      	str	r3, [sp, #0]
 8016884:	f104 030e 	add.w	r3, r4, #14
 8016888:	4a76      	ldr	r2, [pc, #472]	; (8016a64 <run_cmd+0x404>)
 801688a:	2164      	movs	r1, #100	; 0x64
 801688c:	3006      	adds	r0, #6
 801688e:	f7f5 fb7f 	bl	800bf90 <chsnprintf>
      resp_packet->data_length = strlen(resp_packet->data);
 8016892:	ac04      	add	r4, sp, #16
 8016894:	f854 9d04 	ldr.w	r9, [r4, #-4]!
 8016898:	f109 000e 	add.w	r0, r9, #14
 801689c:	f001 fd70 	bl	8018380 <strlen>
 80168a0:	f8a9 000c 	strh.w	r0, [r9, #12]
      (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response  msg_t msg = chMBFetchTimeout(&mbx->tx_free_packets, (msg_t *)&resp_packet,TIME_IMMEDIATE);
 80168a4:	3578      	adds	r5, #120	; 0x78
 80168a6:	2200      	movs	r2, #0
 80168a8:	2300      	movs	r3, #0
 80168aa:	4649      	mov	r1, r9
 80168ac:	4628      	mov	r0, r5
 80168ae:	f7f3 fff7 	bl	800a8a0 <chMBPostTimeout>
      msg_t msg = chMBFetchTimeout(&mbx->tx_free_packets, (msg_t *)&resp_packet,TIME_IMMEDIATE); //grab a new packet
 80168b2:	2200      	movs	r2, #0
 80168b4:	2300      	movs	r3, #0
 80168b6:	4621      	mov	r1, r4
 80168b8:	4640      	mov	r0, r8
 80168ba:	f7f4 f949 	bl	800ab50 <chMBFetchTimeout>
      if( msg != MSG_OK)
 80168be:	4680      	mov	r8, r0
 80168c0:	b120      	cbz	r0, 80168cc <run_cmd+0x26c>
        chprintf((BaseSequentialStream*)&SD6, "\n\rxbee response mailbox failure\n\r");
 80168c2:	495c      	ldr	r1, [pc, #368]	; (8016a34 <run_cmd+0x3d4>)
 80168c4:	485c      	ldr	r0, [pc, #368]	; (8016a38 <run_cmd+0x3d8>)
 80168c6:	f7f5 fb1b 	bl	800bf00 <chprintf>
        return SEND_REPLY; //still need to send the first packet
 80168ca:	e71b      	b.n	8016704 <run_cmd+0xa4>
      memcpy(resp_packet,cmd_packet,sizeof(xbee_packet)); //copy the address etc.
 80168cc:	225e      	movs	r2, #94	; 0x5e
 80168ce:	4631      	mov	r1, r6
 80168d0:	9803      	ldr	r0, [sp, #12]
 80168d2:	f001 fb45 	bl	8017f60 <memcpy>
      resp_packet->data_length = 0; //reset data buffer
 80168d6:	9c03      	ldr	r4, [sp, #12]
 80168d8:	2300      	movs	r3, #0
 80168da:	81a3      	strh	r3, [r4, #12]
      resp_packet->data[1] = 0; //null terminate to make it a string
 80168dc:	73e3      	strb	r3, [r4, #15]
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%i",LINE_CMD,node_config.node_line); //node line
 80168de:	f104 000e 	add.w	r0, r4, #14
 80168e2:	f001 fd4d 	bl	8018380 <strlen>
 80168e6:	4e55      	ldr	r6, [pc, #340]	; (8016a3c <run_cmd+0x3dc>)
 80168e8:	f8d6 3051 	ldr.w	r3, [r6, #81]	; 0x51
 80168ec:	4f5e      	ldr	r7, [pc, #376]	; (8016a68 <run_cmd+0x408>)
 80168ee:	3008      	adds	r0, #8
 80168f0:	4420      	add	r0, r4
 80168f2:	9300      	str	r3, [sp, #0]
 80168f4:	236c      	movs	r3, #108	; 0x6c
 80168f6:	463a      	mov	r2, r7
 80168f8:	2164      	movs	r1, #100	; 0x64
 80168fa:	3006      	adds	r0, #6
 80168fc:	f7f5 fb48 	bl	800bf90 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%i",STATION_CMD,node_config.node_station); //node station
 8016900:	9c03      	ldr	r4, [sp, #12]
 8016902:	f104 000e 	add.w	r0, r4, #14
 8016906:	f001 fd3b 	bl	8018380 <strlen>
 801690a:	f8d6 3055 	ldr.w	r3, [r6, #85]	; 0x55
 801690e:	3008      	adds	r0, #8
 8016910:	4420      	add	r0, r4
 8016912:	9300      	str	r3, [sp, #0]
 8016914:	236e      	movs	r3, #110	; 0x6e
 8016916:	463a      	mov	r2, r7
 8016918:	2164      	movs	r1, #100	; 0x64
 801691a:	3006      	adds	r0, #6
 801691c:	f7f5 fb38 	bl	800bf90 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%02X",READ_STATUS_CMD,node_state); //status
 8016920:	9c03      	ldr	r4, [sp, #12]
 8016922:	f104 000e 	add.w	r0, r4, #14
 8016926:	f001 fd2b 	bl	8018380 <strlen>
 801692a:	7a33      	ldrb	r3, [r6, #8]
 801692c:	3008      	adds	r0, #8
 801692e:	4420      	add	r0, r4
 8016930:	9300      	str	r3, [sp, #0]
 8016932:	2373      	movs	r3, #115	; 0x73
 8016934:	4a4d      	ldr	r2, [pc, #308]	; (8016a6c <run_cmd+0x40c>)
 8016936:	2164      	movs	r1, #100	; 0x64
 8016938:	3006      	adds	r0, #6
 801693a:	f7f5 fb29 	bl	800bf90 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%c",RELAY_CMD,relay_state); //recording rate
 801693e:	9c03      	ldr	r4, [sp, #12]
 8016940:	f104 000e 	add.w	r0, r4, #14
 8016944:	f001 fd1c 	bl	8018380 <strlen>
 8016948:	f896 3059 	ldrb.w	r3, [r6, #89]	; 0x59
 801694c:	3008      	adds	r0, #8
 801694e:	4420      	add	r0, r4
 8016950:	9300      	str	r3, [sp, #0]
 8016952:	2359      	movs	r3, #89	; 0x59
 8016954:	4a3f      	ldr	r2, [pc, #252]	; (8016a54 <run_cmd+0x3f4>)
 8016956:	2164      	movs	r1, #100	; 0x64
 8016958:	3006      	adds	r0, #6
 801695a:	f7f5 fb19 	bl	800bf90 <chsnprintf>
      resp_packet->data_length = strlen(resp_packet->data);
 801695e:	9c03      	ldr	r4, [sp, #12]
 8016960:	f104 000e 	add.w	r0, r4, #14
 8016964:	f001 fd0c 	bl	8018380 <strlen>
 8016968:	81a0      	strh	r0, [r4, #12]
      (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 801696a:	2200      	movs	r2, #0
 801696c:	2300      	movs	r3, #0
 801696e:	4621      	mov	r1, r4
 8016970:	4628      	mov	r0, r5
 8016972:	f7f3 ff95 	bl	800a8a0 <chMBPostTimeout>
      return SEND_REPLY; //flag that the packet needs to be sent
 8016976:	4647      	mov	r7, r8
 8016978:	e6c4      	b.n	8016704 <run_cmd+0xa4>
      resp_packet->data[1] = ';';
 801697a:	233b      	movs	r3, #59	; 0x3b
 801697c:	73e3      	strb	r3, [r4, #15]
      resp_packet->data[2] = READ_INFO;
 801697e:	2349      	movs	r3, #73	; 0x49
 8016980:	7423      	strb	r3, [r4, #16]
      resp_packet->data[3] = node_config.device_id[0];  //node id
 8016982:	4b2e      	ldr	r3, [pc, #184]	; (8016a3c <run_cmd+0x3dc>)
 8016984:	f893 2020 	ldrb.w	r2, [r3, #32]
 8016988:	7462      	strb	r2, [r4, #17]
      resp_packet->data[4] = node_config.device_id[1];
 801698a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801698e:	74a2      	strb	r2, [r4, #18]
      resp_packet->data[5] = node_config.device_id[2];
 8016990:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8016994:	74e3      	strb	r3, [r4, #19]
      resp_packet->data[6] = 0;
 8016996:	2300      	movs	r3, #0
 8016998:	7523      	strb	r3, [r4, #20]
      chsnprintf( resp_packet->data[strlen(resp_packet)], 100, "%s%s",HW_TYPE,HW_VERSION); //HW data
 801699a:	4620      	mov	r0, r4
 801699c:	f001 fcf0 	bl	8018380 <strlen>
 80169a0:	4420      	add	r0, r4
 80169a2:	7b80      	ldrb	r0, [r0, #14]
 80169a4:	4e32      	ldr	r6, [pc, #200]	; (8016a70 <run_cmd+0x410>)
 80169a6:	4b27      	ldr	r3, [pc, #156]	; (8016a44 <run_cmd+0x3e4>)
 80169a8:	9300      	str	r3, [sp, #0]
 80169aa:	4b27      	ldr	r3, [pc, #156]	; (8016a48 <run_cmd+0x3e8>)
 80169ac:	4632      	mov	r2, r6
 80169ae:	2164      	movs	r1, #100	; 0x64
 80169b0:	f7f5 faee 	bl	800bf90 <chsnprintf>
      chsnprintf( resp_packet->data[strlen(resp_packet)], 100, "%s%s",FW_TYPE,FW_VERSION); //FW data
 80169b4:	9c03      	ldr	r4, [sp, #12]
 80169b6:	4620      	mov	r0, r4
 80169b8:	f001 fce2 	bl	8018380 <strlen>
 80169bc:	4420      	add	r0, r4
 80169be:	7b80      	ldrb	r0, [r0, #14]
 80169c0:	4b22      	ldr	r3, [pc, #136]	; (8016a4c <run_cmd+0x3ec>)
 80169c2:	9300      	str	r3, [sp, #0]
 80169c4:	4b22      	ldr	r3, [pc, #136]	; (8016a50 <run_cmd+0x3f0>)
 80169c6:	4632      	mov	r2, r6
 80169c8:	2164      	movs	r1, #100	; 0x64
 80169ca:	f7f5 fae1 	bl	800bf90 <chsnprintf>
      resp_packet->data_length = strlen(resp_packet->data);
 80169ce:	9c03      	ldr	r4, [sp, #12]
 80169d0:	f104 000e 	add.w	r0, r4, #14
 80169d4:	f001 fcd4 	bl	8018380 <strlen>
 80169d8:	81a0      	strh	r0, [r4, #12]
      (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 80169da:	2200      	movs	r2, #0
 80169dc:	2300      	movs	r3, #0
 80169de:	4621      	mov	r1, r4
 80169e0:	f105 0078 	add.w	r0, r5, #120	; 0x78
 80169e4:	f7f3 ff5c 	bl	800a8a0 <chMBPostTimeout>
      return SEND_REPLY; //flag that the packet needs to be sent
 80169e8:	e68c      	b.n	8016704 <run_cmd+0xa4>
       if( cmd_packet->data_length >= 12 ) //6char for endTIme, 6char for memVal
 80169ea:	89b3      	ldrh	r3, [r6, #12]
 80169ec:	b29b      	uxth	r3, r3
 80169ee:	2b0b      	cmp	r3, #11
 80169f0:	f240 80d4 	bls.w	8016b9c <run_cmd+0x53c>
         if( ( node_state & STATE_ACTIVE ) && ( logging_state == READY ) )
 80169f4:	4b11      	ldr	r3, [pc, #68]	; (8016a3c <run_cmd+0x3dc>)
 80169f6:	7a1b      	ldrb	r3, [r3, #8]
 80169f8:	f013 0f08 	tst.w	r3, #8
 80169fc:	f000 80ce 	beq.w	8016b9c <run_cmd+0x53c>
 8016a00:	4b0e      	ldr	r3, [pc, #56]	; (8016a3c <run_cmd+0x3dc>)
 8016a02:	7a5b      	ldrb	r3, [r3, #9]
 8016a04:	b2db      	uxtb	r3, r3
 8016a06:	2b01      	cmp	r3, #1
 8016a08:	f040 80c8 	bne.w	8016b9c <run_cmd+0x53c>
           memcpy(mem_value,6+cmd_packet->data,6); //copy the address etc.
 8016a0c:	4b19      	ldr	r3, [pc, #100]	; (8016a74 <run_cmd+0x414>)
 8016a0e:	f856 2f14 	ldr.w	r2, [r6, #20]!
 8016a12:	601a      	str	r2, [r3, #0]
 8016a14:	88b2      	ldrh	r2, [r6, #4]
 8016a16:	809a      	strh	r2, [r3, #4]
           logging_state = START_RECORDING;
 8016a18:	4b08      	ldr	r3, [pc, #32]	; (8016a3c <run_cmd+0x3dc>)
 8016a1a:	2202      	movs	r2, #2
 8016a1c:	725a      	strb	r2, [r3, #9]
 8016a1e:	e0bd      	b.n	8016b9c <run_cmd+0x53c>
       if( logging_state >= START_RECORDING )
 8016a20:	4b06      	ldr	r3, [pc, #24]	; (8016a3c <run_cmd+0x3dc>)
 8016a22:	7a5b      	ldrb	r3, [r3, #9]
 8016a24:	b2db      	uxtb	r3, r3
 8016a26:	2b01      	cmp	r3, #1
 8016a28:	f240 80b8 	bls.w	8016b9c <run_cmd+0x53c>
         logging_state = STOP_RECORDING;
 8016a2c:	4b03      	ldr	r3, [pc, #12]	; (8016a3c <run_cmd+0x3dc>)
 8016a2e:	2205      	movs	r2, #5
 8016a30:	725a      	strb	r2, [r3, #9]
 8016a32:	e0b3      	b.n	8016b9c <run_cmd+0x53c>
 8016a34:	0801ae88 	.word	0x0801ae88
 8016a38:	20004da0 	.word	0x20004da0
 8016a3c:	20002428 	.word	0x20002428
 8016a40:	0801aeac 	.word	0x0801aeac
 8016a44:	0801aec0 	.word	0x0801aec0
 8016a48:	0801aeb4 	.word	0x0801aeb4
 8016a4c:	0801aed0 	.word	0x0801aed0
 8016a50:	0801aec8 	.word	0x0801aec8
 8016a54:	0801aed8 	.word	0x0801aed8
 8016a58:	0801aee0 	.word	0x0801aee0
 8016a5c:	2000fc78 	.word	0x2000fc78
 8016a60:	0801aef0 	.word	0x0801aef0
 8016a64:	0801aefc 	.word	0x0801aefc
 8016a68:	0801aee8 	.word	0x0801aee8
 8016a6c:	0801af08 	.word	0x0801af08
 8016a70:	0801aeb8 	.word	0x0801aeb8
 8016a74:	2000fda8 	.word	0x2000fda8
      if( cmd_packet->data_length > 1 )//check if cmd has argument
 8016a78:	89b3      	ldrh	r3, [r6, #12]
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	2b01      	cmp	r3, #1
 8016a7e:	d92a      	bls.n	8016ad6 <run_cmd+0x476>
        if( check_valid_relay(cmd_packet->data[1]) )
 8016a80:	7bf0      	ldrb	r0, [r6, #15]
 8016a82:	f7ff fddd 	bl	8016640 <check_valid_relay>
 8016a86:	bb10      	cbnz	r0, 8016ace <run_cmd+0x46e>
       if( cmd_packet->data_length > 1 )
 8016a88:	89b3      	ldrh	r3, [r6, #12]
 8016a8a:	b29b      	uxth	r3, r3
 8016a8c:	2b01      	cmp	r3, #1
 8016a8e:	d835      	bhi.n	8016afc <run_cmd+0x49c>
         resp_packet->data[1] = 0;//null terminate to make like a string
 8016a90:	9c03      	ldr	r4, [sp, #12]
 8016a92:	2300      	movs	r3, #0
 8016a94:	73e3      	strb	r3, [r4, #15]
         chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%i",node_config.node_line); //node line
 8016a96:	f104 000e 	add.w	r0, r4, #14
 8016a9a:	f001 fc71 	bl	8018380 <strlen>
 8016a9e:	4b45      	ldr	r3, [pc, #276]	; (8016bb4 <run_cmd+0x554>)
 8016aa0:	f8d3 3051 	ldr.w	r3, [r3, #81]	; 0x51
 8016aa4:	3008      	adds	r0, #8
 8016aa6:	4420      	add	r0, r4
 8016aa8:	4a43      	ldr	r2, [pc, #268]	; (8016bb8 <run_cmd+0x558>)
 8016aaa:	2164      	movs	r1, #100	; 0x64
 8016aac:	3006      	adds	r0, #6
 8016aae:	f7f5 fa6f 	bl	800bf90 <chsnprintf>
         resp_packet->data_length = strlen(resp_packet->data);
 8016ab2:	9c03      	ldr	r4, [sp, #12]
 8016ab4:	f104 000e 	add.w	r0, r4, #14
 8016ab8:	f001 fc62 	bl	8018380 <strlen>
 8016abc:	81a0      	strh	r0, [r4, #12]
         (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 8016abe:	2200      	movs	r2, #0
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	4621      	mov	r1, r4
 8016ac4:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8016ac8:	f7f3 feea 	bl	800a8a0 <chMBPostTimeout>
         return SEND_REPLY; //flag that the packet needs to be sent
 8016acc:	e61a      	b.n	8016704 <run_cmd+0xa4>
          setRelayState( cmd_packet->data[1] );
 8016ace:	7bf0      	ldrb	r0, [r6, #15]
 8016ad0:	f7fe f93e 	bl	8014d50 <setRelayState>
 8016ad4:	e7d8      	b.n	8016a88 <run_cmd+0x428>
        resp_packet->data[1] = relay_state;
 8016ad6:	4b37      	ldr	r3, [pc, #220]	; (8016bb4 <run_cmd+0x554>)
 8016ad8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016adc:	73e3      	strb	r3, [r4, #15]
        resp_packet->data[2] = 0;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	7423      	strb	r3, [r4, #16]
        resp_packet->data_length = strlen(resp_packet->data);
 8016ae2:	f104 000e 	add.w	r0, r4, #14
 8016ae6:	f001 fc4b 	bl	8018380 <strlen>
 8016aea:	81a0      	strh	r0, [r4, #12]
        (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 8016aec:	2200      	movs	r2, #0
 8016aee:	2300      	movs	r3, #0
 8016af0:	4621      	mov	r1, r4
 8016af2:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8016af6:	f7f3 fed3 	bl	800a8a0 <chMBPostTimeout>
        return SEND_REPLY; //flag that the packet needs to be sent
 8016afa:	e603      	b.n	8016704 <run_cmd+0xa4>
         node_config.node_line = strtoul(&cmd_packet->data[1], NULL, 10);
 8016afc:	220a      	movs	r2, #10
 8016afe:	2100      	movs	r1, #0
 8016b00:	f106 000f 	add.w	r0, r6, #15
 8016b04:	f001 ff9a 	bl	8018a3c <strtoul>
 8016b08:	4b2a      	ldr	r3, [pc, #168]	; (8016bb4 <run_cmd+0x554>)
 8016b0a:	f8c3 0051 	str.w	r0, [r3, #81]	; 0x51
       break;
 8016b0e:	e045      	b.n	8016b9c <run_cmd+0x53c>
       if( cmd_packet->data_length > 1 )
 8016b10:	89b3      	ldrh	r3, [r6, #12]
 8016b12:	b29b      	uxth	r3, r3
 8016b14:	2b01      	cmp	r3, #1
 8016b16:	d81d      	bhi.n	8016b54 <run_cmd+0x4f4>
         resp_packet->data[1] = 0;//null terminate to make like a string
 8016b18:	2300      	movs	r3, #0
 8016b1a:	73e3      	strb	r3, [r4, #15]
         chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%i",node_config.node_station); //node station
 8016b1c:	f104 000e 	add.w	r0, r4, #14
 8016b20:	f001 fc2e 	bl	8018380 <strlen>
 8016b24:	4b23      	ldr	r3, [pc, #140]	; (8016bb4 <run_cmd+0x554>)
 8016b26:	f8d3 3055 	ldr.w	r3, [r3, #85]	; 0x55
 8016b2a:	3008      	adds	r0, #8
 8016b2c:	4420      	add	r0, r4
 8016b2e:	4a22      	ldr	r2, [pc, #136]	; (8016bb8 <run_cmd+0x558>)
 8016b30:	2164      	movs	r1, #100	; 0x64
 8016b32:	3006      	adds	r0, #6
 8016b34:	f7f5 fa2c 	bl	800bf90 <chsnprintf>
         resp_packet->data_length = strlen(resp_packet->data);
 8016b38:	9c03      	ldr	r4, [sp, #12]
 8016b3a:	f104 000e 	add.w	r0, r4, #14
 8016b3e:	f001 fc1f 	bl	8018380 <strlen>
 8016b42:	81a0      	strh	r0, [r4, #12]
         (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 8016b44:	2200      	movs	r2, #0
 8016b46:	2300      	movs	r3, #0
 8016b48:	4621      	mov	r1, r4
 8016b4a:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8016b4e:	f7f3 fea7 	bl	800a8a0 <chMBPostTimeout>
         return SEND_REPLY; //flag that the packet needs to be sent
 8016b52:	e5d7      	b.n	8016704 <run_cmd+0xa4>
         node_config.node_station = strtoul(&cmd_packet->data[1], NULL, 10);
 8016b54:	220a      	movs	r2, #10
 8016b56:	2100      	movs	r1, #0
 8016b58:	f106 000f 	add.w	r0, r6, #15
 8016b5c:	f001 ff6e 	bl	8018a3c <strtoul>
 8016b60:	4b14      	ldr	r3, [pc, #80]	; (8016bb4 <run_cmd+0x554>)
 8016b62:	f8c3 0055 	str.w	r0, [r3, #85]	; 0x55
       break;
 8016b66:	e019      	b.n	8016b9c <run_cmd+0x53c>
      resp_packet->data[1] = '0'; //null terminate
 8016b68:	2330      	movs	r3, #48	; 0x30
 8016b6a:	73e3      	strb	r3, [r4, #15]
      chsnprintf( &resp_packet->data[strlen(resp_packet)], 100, "%s",message_buffer); //append message buffer contents
 8016b6c:	4620      	mov	r0, r4
 8016b6e:	f001 fc07 	bl	8018380 <strlen>
 8016b72:	3008      	adds	r0, #8
 8016b74:	4420      	add	r0, r4
 8016b76:	4b11      	ldr	r3, [pc, #68]	; (8016bbc <run_cmd+0x55c>)
 8016b78:	4a11      	ldr	r2, [pc, #68]	; (8016bc0 <run_cmd+0x560>)
 8016b7a:	2164      	movs	r1, #100	; 0x64
 8016b7c:	3006      	adds	r0, #6
 8016b7e:	f7f5 fa07 	bl	800bf90 <chsnprintf>
      resp_packet->data_length = strlen(resp_packet->data);
 8016b82:	9c03      	ldr	r4, [sp, #12]
 8016b84:	f104 000e 	add.w	r0, r4, #14
 8016b88:	f001 fbfa 	bl	8018380 <strlen>
 8016b8c:	81a0      	strh	r0, [r4, #12]
      (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 8016b8e:	2200      	movs	r2, #0
 8016b90:	2300      	movs	r3, #0
 8016b92:	4621      	mov	r1, r4
 8016b94:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8016b98:	f7f3 fe82 	bl	800a8a0 <chMBPostTimeout>
 (void)chMBPostTimeout(&xbee_mbx->tx_free_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //if not needed, return to pool
 8016b9c:	4b09      	ldr	r3, [pc, #36]	; (8016bc4 <run_cmd+0x564>)
 8016b9e:	6818      	ldr	r0, [r3, #0]
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	9903      	ldr	r1, [sp, #12]
 8016ba6:	30a0      	adds	r0, #160	; 0xa0
 8016ba8:	f7f3 fe7a 	bl	800a8a0 <chMBPostTimeout>
  return NO_REPLY; //don't send response packet
 8016bac:	f04f 37ff 	mov.w	r7, #4294967295
 8016bb0:	e5a8      	b.n	8016704 <run_cmd+0xa4>
 8016bb2:	bf00      	nop
 8016bb4:	20002428 	.word	0x20002428
 8016bb8:	0801af10 	.word	0x0801af10
 8016bbc:	2000fe4c 	.word	0x2000fe4c
 8016bc0:	0801a5a4 	.word	0x0801a5a4
 8016bc4:	2000fc74 	.word	0x2000fc74
 8016bc8:	f3af 8000 	nop.w
 8016bcc:	f3af 8000 	nop.w

08016bd0 <button_hw_init>:
}

//configure buttons as inputs

void button_hw_init()
{
 8016bd0:	b510      	push	{r4, lr}
  palSetLineMode(RDY_BTN_LINE,PAL_MODE_INPUT_PULLUP | PAL_STM32_OSPEED_HIGHEST);    //set status LED line mode
 8016bd2:	4c06      	ldr	r4, [pc, #24]	; (8016bec <button_hw_init+0x1c>)
 8016bd4:	2238      	movs	r2, #56	; 0x38
 8016bd6:	2110      	movs	r1, #16
 8016bd8:	4620      	mov	r0, r4
 8016bda:	f7ee f9b1 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetLineMode(PWR_BTN_LINE,PAL_MODE_INPUT_PULLUP | PAL_STM32_OSPEED_HIGHEST);    //set status LED line mode
 8016bde:	2238      	movs	r2, #56	; 0x38
 8016be0:	2120      	movs	r1, #32
 8016be2:	4620      	mov	r0, r4
 8016be4:	f7ee f9ac 	bl	8004f40 <_pal_lld_setgroupmode>
}
 8016be8:	bd10      	pop	{r4, pc}
 8016bea:	bf00      	nop
 8016bec:	40021000 	.word	0x40021000

08016bf0 <read_buttons>:
#define PRESS_CNT 2 //hold button for 40mS min for short press

uint32_t rdy_btn_cnt = 0;
uint32_t pwr_btn_cnt = 0;
void read_buttons()//THD_FUNCTION(button_thread, arg)
{
 8016bf0:	b508      	push	{r3, lr}
   //read button states, update logger state
  if( !palReadLine ( RDY_BTN_LINE ) )
 8016bf2:	4b2f      	ldr	r3, [pc, #188]	; (8016cb0 <read_buttons+0xc0>)
 8016bf4:	691b      	ldr	r3, [r3, #16]
 8016bf6:	f013 0f10 	tst.w	r3, #16
 8016bfa:	d123      	bne.n	8016c44 <read_buttons+0x54>
  {
    rdy_btn_cnt++;
 8016bfc:	4a2d      	ldr	r2, [pc, #180]	; (8016cb4 <read_buttons+0xc4>)
 8016bfe:	f8d2 3868 	ldr.w	r3, [r2, #2152]	; 0x868
 8016c02:	3301      	adds	r3, #1
 8016c04:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868

    if( rdy_btn_cnt >= HOLD_CNT )
 8016c08:	2b31      	cmp	r3, #49	; 0x31
 8016c0a:	d806      	bhi.n	8016c1a <read_buttons+0x2a>
    {
      rdy_btn_state = LONG_HOLD;
      rdy_btn_cnt = HOLD_CNT;
      chprintf((BaseSequentialStream*)&SD6, "\nRDY button long hold\n\r");
    }
    else if( rdy_btn_cnt == PRESS_CNT )
 8016c0c:	2b02      	cmp	r3, #2
 8016c0e:	d010      	beq.n	8016c32 <read_buttons+0x42>
      rdy_btn_state = PRESSED;//should broadcast an event
      chprintf((BaseSequentialStream*)&SD6, "\nRDY button pressed\n\r");
    }
    else
    {
      rdy_btn_state = 0;
 8016c10:	4b28      	ldr	r3, [pc, #160]	; (8016cb4 <read_buttons+0xc4>)
 8016c12:	2200      	movs	r2, #0
 8016c14:	f883 286c 	strb.w	r2, [r3, #2156]	; 0x86c
 8016c18:	e01a      	b.n	8016c50 <read_buttons+0x60>
      rdy_btn_state = LONG_HOLD;
 8016c1a:	4613      	mov	r3, r2
 8016c1c:	2202      	movs	r2, #2
 8016c1e:	f883 286c 	strb.w	r2, [r3, #2156]	; 0x86c
      rdy_btn_cnt = HOLD_CNT;
 8016c22:	2232      	movs	r2, #50	; 0x32
 8016c24:	f8c3 2868 	str.w	r2, [r3, #2152]	; 0x868
      chprintf((BaseSequentialStream*)&SD6, "\nRDY button long hold\n\r");
 8016c28:	4923      	ldr	r1, [pc, #140]	; (8016cb8 <read_buttons+0xc8>)
 8016c2a:	4824      	ldr	r0, [pc, #144]	; (8016cbc <read_buttons+0xcc>)
 8016c2c:	f7f5 f968 	bl	800bf00 <chprintf>
 8016c30:	e00e      	b.n	8016c50 <read_buttons+0x60>
      rdy_btn_state = PRESSED;//should broadcast an event
 8016c32:	4b20      	ldr	r3, [pc, #128]	; (8016cb4 <read_buttons+0xc4>)
 8016c34:	2201      	movs	r2, #1
 8016c36:	f883 286c 	strb.w	r2, [r3, #2156]	; 0x86c
      chprintf((BaseSequentialStream*)&SD6, "\nRDY button pressed\n\r");
 8016c3a:	4921      	ldr	r1, [pc, #132]	; (8016cc0 <read_buttons+0xd0>)
 8016c3c:	481f      	ldr	r0, [pc, #124]	; (8016cbc <read_buttons+0xcc>)
 8016c3e:	f7f5 f95f 	bl	800bf00 <chprintf>
 8016c42:	e005      	b.n	8016c50 <read_buttons+0x60>
    }
  }
  else
  {
    rdy_btn_cnt = 0;
 8016c44:	4b1b      	ldr	r3, [pc, #108]	; (8016cb4 <read_buttons+0xc4>)
 8016c46:	2200      	movs	r2, #0
 8016c48:	f8c3 2868 	str.w	r2, [r3, #2152]	; 0x868
    rdy_btn_state = 0;
 8016c4c:	f883 286c 	strb.w	r2, [r3, #2156]	; 0x86c
  }
  if( !palReadLine ( PWR_BTN_LINE ) )
 8016c50:	4b17      	ldr	r3, [pc, #92]	; (8016cb0 <read_buttons+0xc0>)
 8016c52:	691b      	ldr	r3, [r3, #16]
 8016c54:	f013 0f20 	tst.w	r3, #32
 8016c58:	d123      	bne.n	8016ca2 <read_buttons+0xb2>
  {
    pwr_btn_cnt++;
 8016c5a:	4a16      	ldr	r2, [pc, #88]	; (8016cb4 <read_buttons+0xc4>)
 8016c5c:	f8d2 3870 	ldr.w	r3, [r2, #2160]	; 0x870
 8016c60:	3301      	adds	r3, #1
 8016c62:	f8c2 3870 	str.w	r3, [r2, #2160]	; 0x870

    if( pwr_btn_cnt >= HOLD_CNT )
 8016c66:	2b31      	cmp	r3, #49	; 0x31
 8016c68:	d806      	bhi.n	8016c78 <read_buttons+0x88>
    {
      pwr_btn_state = LONG_HOLD;
      pwr_btn_cnt = HOLD_CNT;
      chprintf((BaseSequentialStream*)&SD6, "\nPWR button hold\n\r");
    }
    else if( pwr_btn_cnt >= PRESS_CNT )
 8016c6a:	2b01      	cmp	r3, #1
 8016c6c:	d810      	bhi.n	8016c90 <read_buttons+0xa0>
      pwr_btn_state = PRESSED; //should broadcast an event
      chprintf((BaseSequentialStream*)&SD6, "\nPWR button pressed\n\r");
    }
    else
    {
      pwr_btn_state = 0;
 8016c6e:	4b11      	ldr	r3, [pc, #68]	; (8016cb4 <read_buttons+0xc4>)
 8016c70:	2200      	movs	r2, #0
 8016c72:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
 8016c76:	e01a      	b.n	8016cae <read_buttons+0xbe>
      pwr_btn_state = LONG_HOLD;
 8016c78:	4613      	mov	r3, r2
 8016c7a:	2202      	movs	r2, #2
 8016c7c:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
      pwr_btn_cnt = HOLD_CNT;
 8016c80:	2232      	movs	r2, #50	; 0x32
 8016c82:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870
      chprintf((BaseSequentialStream*)&SD6, "\nPWR button hold\n\r");
 8016c86:	490f      	ldr	r1, [pc, #60]	; (8016cc4 <read_buttons+0xd4>)
 8016c88:	480c      	ldr	r0, [pc, #48]	; (8016cbc <read_buttons+0xcc>)
 8016c8a:	f7f5 f939 	bl	800bf00 <chprintf>
 8016c8e:	e00e      	b.n	8016cae <read_buttons+0xbe>
      pwr_btn_state = PRESSED; //should broadcast an event
 8016c90:	4b08      	ldr	r3, [pc, #32]	; (8016cb4 <read_buttons+0xc4>)
 8016c92:	2201      	movs	r2, #1
 8016c94:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
      chprintf((BaseSequentialStream*)&SD6, "\nPWR button pressed\n\r");
 8016c98:	490b      	ldr	r1, [pc, #44]	; (8016cc8 <read_buttons+0xd8>)
 8016c9a:	4808      	ldr	r0, [pc, #32]	; (8016cbc <read_buttons+0xcc>)
 8016c9c:	f7f5 f930 	bl	800bf00 <chprintf>
 8016ca0:	e005      	b.n	8016cae <read_buttons+0xbe>
    }
  }
  else
  {
    pwr_btn_cnt = 0;
 8016ca2:	4b04      	ldr	r3, [pc, #16]	; (8016cb4 <read_buttons+0xc4>)
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870
    pwr_btn_state = 0;
 8016caa:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
  }
}
 8016cae:	bd08      	pop	{r3, pc}
 8016cb0:	40021000 	.word	0x40021000
 8016cb4:	20002428 	.word	0x20002428
 8016cb8:	0801af14 	.word	0x0801af14
 8016cbc:	20004da0 	.word	0x20004da0
 8016cc0:	0801af2c 	.word	0x0801af2c
 8016cc4:	0801af44 	.word	0x0801af44
 8016cc8:	0801af58 	.word	0x0801af58
 8016ccc:	f3af 8000 	nop.w

08016cd0 <ctl_thread>:
{
 8016cd0:	b570      	push	{r4, r5, r6, lr}
 8016cd2:	b082      	sub	sp, #8
  chprintf((BaseSequentialStream*)&SD6, "\nctl thread started\n\r");
 8016cd4:	498c      	ldr	r1, [pc, #560]	; (8016f08 <ctl_thread+0x238>)
 8016cd6:	488d      	ldr	r0, [pc, #564]	; (8016f0c <ctl_thread+0x23c>)
 8016cd8:	f7f5 f912 	bl	800bf00 <chprintf>
   button_hw_init();
 8016cdc:	f7ff ff78 	bl	8016bd0 <button_hw_init>
  xbee_setup();
 8016ce0:	f7fe f9de 	bl	80150a0 <xbee_setup>
  relay_state = setRelayState( RELAY_STATE_OPEN );
 8016ce4:	204f      	movs	r0, #79	; 0x4f
 8016ce6:	f7fe f833 	bl	8014d50 <setRelayState>
 8016cea:	4b89      	ldr	r3, [pc, #548]	; (8016f10 <ctl_thread+0x240>)
 8016cec:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
  last_relay_state = relay_state;
 8016cf0:	f893 5059 	ldrb.w	r5, [r3, #89]	; 0x59
 8016cf4:	b2ed      	uxtb	r5, r5
 8016cf6:	e086      	b.n	8016e06 <ctl_thread+0x136>
      chprintf((BaseSequentialStream*)&SD6, "\n\rxbee message received\n\r");
 8016cf8:	4e84      	ldr	r6, [pc, #528]	; (8016f0c <ctl_thread+0x23c>)
 8016cfa:	4986      	ldr	r1, [pc, #536]	; (8016f14 <ctl_thread+0x244>)
 8016cfc:	4630      	mov	r0, r6
 8016cfe:	f7f5 f8ff 	bl	800bf00 <chprintf>
      chprintf((BaseSequentialStream*)&SD6, "\n\rcmd: %c\n\r",xbee_cmd->data[0]);
 8016d02:	9b01      	ldr	r3, [sp, #4]
 8016d04:	7b9a      	ldrb	r2, [r3, #14]
 8016d06:	4984      	ldr	r1, [pc, #528]	; (8016f18 <ctl_thread+0x248>)
 8016d08:	4630      	mov	r0, r6
 8016d0a:	f7f5 f8f9 	bl	800bf00 <chprintf>
      memcpy(&tx_packet,xbee_cmd,sizeof(xbee_packet)); //save a copy to keep address etc
 8016d0e:	9e01      	ldr	r6, [sp, #4]
 8016d10:	225e      	movs	r2, #94	; 0x5e
 8016d12:	4631      	mov	r1, r6
 8016d14:	4881      	ldr	r0, [pc, #516]	; (8016f1c <ctl_thread+0x24c>)
 8016d16:	f001 f923 	bl	8017f60 <memcpy>
      if( run_cmd(xbee_cmd, xbee_mbx) == SEND_REPLY )
 8016d1a:	4b81      	ldr	r3, [pc, #516]	; (8016f20 <ctl_thread+0x250>)
 8016d1c:	6819      	ldr	r1, [r3, #0]
 8016d1e:	4630      	mov	r0, r6
 8016d20:	f7ff fc9e 	bl	8016660 <run_cmd>
 8016d24:	b140      	cbz	r0, 8016d38 <ctl_thread+0x68>
      (void)chMBPostTimeout(&xbee_mbx->rx_free_packets, (msg_t)xbee_cmd,TIME_IMMEDIATE);    //free the run packet
 8016d26:	4b7e      	ldr	r3, [pc, #504]	; (8016f20 <ctl_thread+0x250>)
 8016d28:	6818      	ldr	r0, [r3, #0]
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	9901      	ldr	r1, [sp, #4]
 8016d30:	3028      	adds	r0, #40	; 0x28
 8016d32:	f7f3 fdb5 	bl	800a8a0 <chMBPostTimeout>
 8016d36:	e072      	b.n	8016e1e <ctl_thread+0x14e>
        xbee_send_packet();//send response packet(s) if needed
 8016d38:	f000 fd52 	bl	80177e0 <xbee_send_packet>
 8016d3c:	e7f3      	b.n	8016d26 <ctl_thread+0x56>
      if( !( node_state&STATE_ACTIVE ) )
 8016d3e:	4b74      	ldr	r3, [pc, #464]	; (8016f10 <ctl_thread+0x240>)
 8016d40:	7a1b      	ldrb	r3, [r3, #8]
 8016d42:	f013 0f08 	tst.w	r3, #8
 8016d46:	d105      	bne.n	8016d54 <ctl_thread+0x84>
        node_state |= STATE_ACTIVE;
 8016d48:	4a71      	ldr	r2, [pc, #452]	; (8016f10 <ctl_thread+0x240>)
 8016d4a:	7a13      	ldrb	r3, [r2, #8]
 8016d4c:	f043 0308 	orr.w	r3, r3, #8
 8016d50:	7213      	strb	r3, [r2, #8]
 8016d52:	e06c      	b.n	8016e2e <ctl_thread+0x15e>
      else if( node_state&STATE_ACTIVE )
 8016d54:	4b6e      	ldr	r3, [pc, #440]	; (8016f10 <ctl_thread+0x240>)
 8016d56:	7a1b      	ldrb	r3, [r3, #8]
 8016d58:	f013 0f08 	tst.w	r3, #8
 8016d5c:	d067      	beq.n	8016e2e <ctl_thread+0x15e>
        node_state &= ~STATE_ACTIVE;
 8016d5e:	4a6c      	ldr	r2, [pc, #432]	; (8016f10 <ctl_thread+0x240>)
 8016d60:	7a13      	ldrb	r3, [r2, #8]
 8016d62:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8016d66:	7213      	strb	r3, [r2, #8]
 8016d68:	e061      	b.n	8016e2e <ctl_thread+0x15e>
      if( logging_state == READY )
 8016d6a:	4b69      	ldr	r3, [pc, #420]	; (8016f10 <ctl_thread+0x240>)
 8016d6c:	7a5b      	ldrb	r3, [r3, #9]
 8016d6e:	b2db      	uxtb	r3, r3
 8016d70:	2b01      	cmp	r3, #1
 8016d72:	d162      	bne.n	8016e3a <ctl_thread+0x16a>
        relay_state = setRelayState( RELAY_STATE_ADC );
 8016d74:	2041      	movs	r0, #65	; 0x41
 8016d76:	f7fd ffeb 	bl	8014d50 <setRelayState>
 8016d7a:	4b65      	ldr	r3, [pc, #404]	; (8016f10 <ctl_thread+0x240>)
 8016d7c:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
        logging_state = START_RECORDING;
 8016d80:	2202      	movs	r2, #2
 8016d82:	725a      	strb	r2, [r3, #9]
 8016d84:	e059      	b.n	8016e3a <ctl_thread+0x16a>
      node_state &= ~STATE_PPS_SYNC;
 8016d86:	4a62      	ldr	r2, [pc, #392]	; (8016f10 <ctl_thread+0x240>)
 8016d88:	7a13      	ldrb	r3, [r2, #8]
 8016d8a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8016d8e:	7213      	strb	r3, [r2, #8]
 8016d90:	e05d      	b.n	8016e4e <ctl_thread+0x17e>
      node_state |= STATE_RECORDING;
 8016d92:	4a5f      	ldr	r2, [pc, #380]	; (8016f10 <ctl_thread+0x240>)
 8016d94:	7a13      	ldrb	r3, [r2, #8]
 8016d96:	f043 0310 	orr.w	r3, r3, #16
 8016d9a:	7213      	strb	r3, [r2, #8]
 8016d9c:	e061      	b.n	8016e62 <ctl_thread+0x192>
          relay_state = setRelayState( RELAY_STATE_OPEN );
 8016d9e:	204f      	movs	r0, #79	; 0x4f
 8016da0:	f7fd ffd6 	bl	8014d50 <setRelayState>
 8016da4:	4b5a      	ldr	r3, [pc, #360]	; (8016f10 <ctl_thread+0x240>)
 8016da6:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
          if( logging_state == RECORDING )
 8016daa:	7a5b      	ldrb	r3, [r3, #9]
 8016dac:	b2db      	uxtb	r3, r3
 8016dae:	2b04      	cmp	r3, #4
 8016db0:	f000 8083 	beq.w	8016eba <ctl_thread+0x1ea>
            logging_state = NOT_READY;
 8016db4:	4b56      	ldr	r3, [pc, #344]	; (8016f10 <ctl_thread+0x240>)
 8016db6:	2200      	movs	r2, #0
 8016db8:	725a      	strb	r2, [r3, #9]
          mcp23017_digitalWrite(&mcp_cfg, 0x07, SW_5VS_PIN_POS, 0); //turn off power to input circuit
 8016dba:	2300      	movs	r3, #0
 8016dbc:	220c      	movs	r2, #12
 8016dbe:	2107      	movs	r1, #7
 8016dc0:	4858      	ldr	r0, [pc, #352]	; (8016f24 <ctl_thread+0x254>)
 8016dc2:	f000 fc05 	bl	80175d0 <mcp23017_digitalWrite>
      tx_packet.data[0] = READ_STATUS_CMD;
 8016dc6:	4855      	ldr	r0, [pc, #340]	; (8016f1c <ctl_thread+0x24c>)
 8016dc8:	2373      	movs	r3, #115	; 0x73
 8016dca:	7383      	strb	r3, [r0, #14]
      tx_packet.data[1] = 0;
 8016dcc:	2300      	movs	r3, #0
 8016dce:	73c3      	strb	r3, [r0, #15]
      tx_packet.data_length = 1;
 8016dd0:	2301      	movs	r3, #1
 8016dd2:	8183      	strh	r3, [r0, #12]
      run_cmd( &tx_packet, xbee_mbx );
 8016dd4:	4b52      	ldr	r3, [pc, #328]	; (8016f20 <ctl_thread+0x250>)
 8016dd6:	6819      	ldr	r1, [r3, #0]
 8016dd8:	f7ff fc42 	bl	8016660 <run_cmd>
      xbee_send_packet();
 8016ddc:	f000 fd00 	bl	80177e0 <xbee_send_packet>
      last_node_state = node_state;
 8016de0:	4b4b      	ldr	r3, [pc, #300]	; (8016f10 <ctl_thread+0x240>)
 8016de2:	7a1c      	ldrb	r4, [r3, #8]
 8016de4:	b2e4      	uxtb	r4, r4
    if( last_relay_state != relay_state )
 8016de6:	4b4a      	ldr	r3, [pc, #296]	; (8016f10 <ctl_thread+0x240>)
 8016de8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016dec:	b2db      	uxtb	r3, r3
 8016dee:	42ab      	cmp	r3, r5
 8016df0:	d167      	bne.n	8016ec2 <ctl_thread+0x1f2>
    if( msg_flag )
 8016df2:	4b47      	ldr	r3, [pc, #284]	; (8016f10 <ctl_thread+0x240>)
 8016df4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d174      	bne.n	8016ee6 <ctl_thread+0x216>
    chThdSleepMilliseconds(20);
 8016dfc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8016e00:	2100      	movs	r1, #0
 8016e02:	f7f1 fe85 	bl	8008b10 <chThdSleep>
    xbee_com_parse();   //process any new received data from xbee
 8016e06:	f000 fdfb 	bl	8017a00 <xbee_com_parse>
    msg_t msg = chMBFetchTimeout(&xbee_mbx->rx_filled_packets, (msg_t *)&xbee_cmd,TIME_IMMEDIATE);
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	a901      	add	r1, sp, #4
 8016e10:	4843      	ldr	r0, [pc, #268]	; (8016f20 <ctl_thread+0x250>)
 8016e12:	6800      	ldr	r0, [r0, #0]
 8016e14:	f7f3 fe9c 	bl	800ab50 <chMBFetchTimeout>
    if( msg == MSG_OK )
 8016e18:	2800      	cmp	r0, #0
 8016e1a:	f43f af6d 	beq.w	8016cf8 <ctl_thread+0x28>
    read_buttons();
 8016e1e:	f7ff fee7 	bl	8016bf0 <read_buttons>
    if( rdy_btn_state == PRESSED )
 8016e22:	4b3b      	ldr	r3, [pc, #236]	; (8016f10 <ctl_thread+0x240>)
 8016e24:	f893 386c 	ldrb.w	r3, [r3, #2156]	; 0x86c
 8016e28:	b2db      	uxtb	r3, r3
 8016e2a:	2b01      	cmp	r3, #1
 8016e2c:	d087      	beq.n	8016d3e <ctl_thread+0x6e>
    if( rdy_btn_state == LONG_HOLD )
 8016e2e:	4b38      	ldr	r3, [pc, #224]	; (8016f10 <ctl_thread+0x240>)
 8016e30:	f893 386c 	ldrb.w	r3, [r3, #2156]	; 0x86c
 8016e34:	b2db      	uxtb	r3, r3
 8016e36:	2b02      	cmp	r3, #2
 8016e38:	d097      	beq.n	8016d6a <ctl_thread+0x9a>
    if( pps_lock )
 8016e3a:	4b35      	ldr	r3, [pc, #212]	; (8016f10 <ctl_thread+0x240>)
 8016e3c:	f893 3875 	ldrb.w	r3, [r3, #2165]	; 0x875
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d0a0      	beq.n	8016d86 <ctl_thread+0xb6>
      node_state |= STATE_PPS_SYNC;
 8016e44:	4a32      	ldr	r2, [pc, #200]	; (8016f10 <ctl_thread+0x240>)
 8016e46:	7a13      	ldrb	r3, [r2, #8]
 8016e48:	f043 0301 	orr.w	r3, r3, #1
 8016e4c:	7213      	strb	r3, [r2, #8]
    if( logging_state == RECORDING )
 8016e4e:	4b30      	ldr	r3, [pc, #192]	; (8016f10 <ctl_thread+0x240>)
 8016e50:	7a5b      	ldrb	r3, [r3, #9]
 8016e52:	b2db      	uxtb	r3, r3
 8016e54:	2b04      	cmp	r3, #4
 8016e56:	d09c      	beq.n	8016d92 <ctl_thread+0xc2>
      node_state &= ~STATE_RECORDING;
 8016e58:	4a2d      	ldr	r2, [pc, #180]	; (8016f10 <ctl_thread+0x240>)
 8016e5a:	7a13      	ldrb	r3, [r2, #8]
 8016e5c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8016e60:	7213      	strb	r3, [r2, #8]
    if( last_node_state != node_state)
 8016e62:	4b2b      	ldr	r3, [pc, #172]	; (8016f10 <ctl_thread+0x240>)
 8016e64:	7a1b      	ldrb	r3, [r3, #8]
 8016e66:	b2db      	uxtb	r3, r3
 8016e68:	42a3      	cmp	r3, r4
 8016e6a:	d0bc      	beq.n	8016de6 <ctl_thread+0x116>
      if( ( last_node_state^node_state ) & STATE_ACTIVE ) //if active status changed, then may need to switch relay
 8016e6c:	4b28      	ldr	r3, [pc, #160]	; (8016f10 <ctl_thread+0x240>)
 8016e6e:	7a1b      	ldrb	r3, [r3, #8]
 8016e70:	405c      	eors	r4, r3
 8016e72:	f014 0f08 	tst.w	r4, #8
 8016e76:	d0a6      	beq.n	8016dc6 <ctl_thread+0xf6>
        if( node_state & STATE_ACTIVE )//if now enabled, need to be in analog relay
 8016e78:	4b25      	ldr	r3, [pc, #148]	; (8016f10 <ctl_thread+0x240>)
 8016e7a:	7a1b      	ldrb	r3, [r3, #8]
 8016e7c:	f013 0f08 	tst.w	r3, #8
 8016e80:	d08d      	beq.n	8016d9e <ctl_thread+0xce>
          relay_state = setRelayState( RELAY_STATE_ADC );
 8016e82:	2041      	movs	r0, #65	; 0x41
 8016e84:	f7fd ff64 	bl	8014d50 <setRelayState>
 8016e88:	4c21      	ldr	r4, [pc, #132]	; (8016f10 <ctl_thread+0x240>)
 8016e8a:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
          mcp23017_digitalWrite(&mcp_cfg, 0x07, SW_5VS_PIN_POS, 1); //turn on power to input circuit
 8016e8e:	2301      	movs	r3, #1
 8016e90:	220c      	movs	r2, #12
 8016e92:	2107      	movs	r1, #7
 8016e94:	4823      	ldr	r0, [pc, #140]	; (8016f24 <ctl_thread+0x254>)
 8016e96:	f000 fb9b 	bl	80175d0 <mcp23017_digitalWrite>
          set_pga(HIGH_GAIN); //always start with high gain
 8016e9a:	2000      	movs	r0, #0
 8016e9c:	f7fe ff20 	bl	8015ce0 <set_pga>
          raw_min_val = 0;  //reset min/max
 8016ea0:	2600      	movs	r6, #0
 8016ea2:	6726      	str	r6, [r4, #112]	; 0x70
          raw_max_val = 0;
 8016ea4:	6766      	str	r6, [r4, #116]	; 0x74
          chThdSleepMilliseconds(20);
 8016ea6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8016eaa:	2100      	movs	r1, #0
 8016eac:	f7f1 fe30 	bl	8008b10 <chThdSleep>
          raw_min_val = 0;  //reset min/max
 8016eb0:	6726      	str	r6, [r4, #112]	; 0x70
          raw_max_val = 0;
 8016eb2:	6766      	str	r6, [r4, #116]	; 0x74
          logging_state = READY;
 8016eb4:	2301      	movs	r3, #1
 8016eb6:	7263      	strb	r3, [r4, #9]
 8016eb8:	e785      	b.n	8016dc6 <ctl_thread+0xf6>
            logging_state = STOP_RECORDING;
 8016eba:	4b15      	ldr	r3, [pc, #84]	; (8016f10 <ctl_thread+0x240>)
 8016ebc:	2205      	movs	r2, #5
 8016ebe:	725a      	strb	r2, [r3, #9]
 8016ec0:	e77b      	b.n	8016dba <ctl_thread+0xea>
      tx_packet.data[0] = RELAY_CMD;
 8016ec2:	4816      	ldr	r0, [pc, #88]	; (8016f1c <ctl_thread+0x24c>)
 8016ec4:	2359      	movs	r3, #89	; 0x59
 8016ec6:	7383      	strb	r3, [r0, #14]
      tx_packet.data[1] = 0;
 8016ec8:	2300      	movs	r3, #0
 8016eca:	73c3      	strb	r3, [r0, #15]
      tx_packet.data_length = 1;
 8016ecc:	2301      	movs	r3, #1
 8016ece:	8183      	strh	r3, [r0, #12]
      run_cmd( &tx_packet, xbee_mbx );
 8016ed0:	4b13      	ldr	r3, [pc, #76]	; (8016f20 <ctl_thread+0x250>)
 8016ed2:	6819      	ldr	r1, [r3, #0]
 8016ed4:	f7ff fbc4 	bl	8016660 <run_cmd>
      xbee_send_packet();
 8016ed8:	f000 fc82 	bl	80177e0 <xbee_send_packet>
      last_relay_state = relay_state;
 8016edc:	4b0c      	ldr	r3, [pc, #48]	; (8016f10 <ctl_thread+0x240>)
 8016ede:	f893 5059 	ldrb.w	r5, [r3, #89]	; 0x59
 8016ee2:	b2ed      	uxtb	r5, r5
 8016ee4:	e785      	b.n	8016df2 <ctl_thread+0x122>
      tx_packet.data[0] = MSG_CMD;
 8016ee6:	480d      	ldr	r0, [pc, #52]	; (8016f1c <ctl_thread+0x24c>)
 8016ee8:	236d      	movs	r3, #109	; 0x6d
 8016eea:	7383      	strb	r3, [r0, #14]
      tx_packet.data[1] = 0;
 8016eec:	2600      	movs	r6, #0
 8016eee:	73c6      	strb	r6, [r0, #15]
      tx_packet.data_length = 1;
 8016ef0:	2301      	movs	r3, #1
 8016ef2:	8183      	strh	r3, [r0, #12]
      run_cmd( &tx_packet, xbee_mbx );
 8016ef4:	4b0a      	ldr	r3, [pc, #40]	; (8016f20 <ctl_thread+0x250>)
 8016ef6:	6819      	ldr	r1, [r3, #0]
 8016ef8:	f7ff fbb2 	bl	8016660 <run_cmd>
      xbee_send_packet();
 8016efc:	f000 fc70 	bl	80177e0 <xbee_send_packet>
      msg_flag = false;
 8016f00:	4b03      	ldr	r3, [pc, #12]	; (8016f10 <ctl_thread+0x240>)
 8016f02:	f883 609a 	strb.w	r6, [r3, #154]	; 0x9a
 8016f06:	e779      	b.n	8016dfc <ctl_thread+0x12c>
 8016f08:	0801af70 	.word	0x0801af70
 8016f0c:	20004da0 	.word	0x20004da0
 8016f10:	20002428 	.word	0x20002428
 8016f14:	0801af88 	.word	0x0801af88
 8016f18:	0801afa4 	.word	0x0801afa4
 8016f1c:	2000fd48 	.word	0x2000fd48
 8016f20:	2000fc74 	.word	0x2000fc74
 8016f24:	0801a40c 	.word	0x0801a40c
 8016f28:	f3af 8000 	nop.w
 8016f2c:	f3af 8000 	nop.w

08016f30 <init_i2c>:
/*
 * configure i2c
 */

void init_i2c(void)
{
 8016f30:	b510      	push	{r4, lr}
  /* Configuring I2C SCK and I2C SDA related GPIOs .*/
   /* should be already done from board.h */
   palSetLineMode(LINE_I2C1_SCL, PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_OPENDRAIN);
 8016f32:	4c10      	ldr	r4, [pc, #64]	; (8016f74 <init_i2c+0x44>)
 8016f34:	f240 221e 	movw	r2, #542	; 0x21e
 8016f38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016f3c:	4620      	mov	r0, r4
 8016f3e:	f7ed ffff 	bl	8004f40 <_pal_lld_setgroupmode>
   palSetLineMode(LINE_I2C1_SDA, PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_OPENDRAIN);
 8016f42:	f240 221e 	movw	r2, #542	; 0x21e
 8016f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016f4a:	4620      	mov	r0, r4
 8016f4c:	f7ed fff8 	bl	8004f40 <_pal_lld_setgroupmode>
   palSetLineMode(MCP_RST_LINE,PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);    //set status LED line mode
 8016f50:	2219      	movs	r2, #25
 8016f52:	2102      	movs	r1, #2
 8016f54:	4808      	ldr	r0, [pc, #32]	; (8016f78 <init_i2c+0x48>)
 8016f56:	f7ed fff3 	bl	8004f40 <_pal_lld_setgroupmode>
  i2cAcquireBus(&I2CD1);
 8016f5a:	4c08      	ldr	r4, [pc, #32]	; (8016f7c <init_i2c+0x4c>)
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	f7eb f927 	bl	80021b0 <i2cAcquireBus>
  /* Intializing the I2C. */
  i2cStart(&I2CD1, &eeprom_i2ccfg);
 8016f62:	4907      	ldr	r1, [pc, #28]	; (8016f80 <init_i2c+0x50>)
 8016f64:	4620      	mov	r0, r4
 8016f66:	f7ea ffdb 	bl	8001f20 <i2cStart>

    i2cReleaseBus(&I2CD1);
 8016f6a:	4620      	mov	r0, r4
 8016f6c:	f7eb f930 	bl	80021d0 <i2cReleaseBus>
}
 8016f70:	bd10      	pop	{r4, pc}
 8016f72:	bf00      	nop
 8016f74:	40020400 	.word	0x40020400
 8016f78:	40021000 	.word	0x40021000
 8016f7c:	200047e8 	.word	0x200047e8
 8016f80:	20001a68 	.word	0x20001a68
 8016f84:	f3af 8000 	nop.w
 8016f88:	f3af 8000 	nop.w
 8016f8c:	f3af 8000 	nop.w

08016f90 <main>:

/*
 * Application entry point.
 */
int main(void) {
 8016f90:	b530      	push	{r4, r5, lr}
 8016f92:	b089      	sub	sp, #36	; 0x24
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
 8016f94:	f7e9 faa4 	bl	80004e0 <halInit>
  chSysInit();
 8016f98:	f7f0 fb5a 	bl	8007650 <chSysInit>

  /*
   * Shell manager initialization.
   */
  shellInit();
 8016f9c:	f7f5 f8e0 	bl	800c160 <shellInit>

  /*
   * Activates the serial driver 6 using the driver default configuration.
   */
  sdStart(&SD6, NULL);
 8016fa0:	2100      	movs	r1, #0
 8016fa2:	483b      	ldr	r0, [pc, #236]	; (8017090 <main+0x100>)
 8016fa4:	f7ec f8e4 	bl	8003170 <sdStart>

  /*
   * Initializes the SDIO drivers.
   */
  sdcStart(&SDCD1, &sdccfg);
 8016fa8:	493a      	ldr	r1, [pc, #232]	; (8017094 <main+0x104>)
 8016faa:	483b      	ldr	r0, [pc, #236]	; (8017098 <main+0x108>)
 8016fac:	f7eb ff28 	bl	8002e00 <sdcStart>

  /*
   * make sure gpio are configured properly for i2c use
   */
  init_i2c();
 8016fb0:	f7ff ffbe 	bl	8016f30 <init_i2c>
  esp->next = (event_listener_t *)esp;
 8016fb4:	4b39      	ldr	r3, [pc, #228]	; (801709c <main+0x10c>)
 8016fb6:	601b      	str	r3, [r3, #0]
 8016fb8:	4b39      	ldr	r3, [pc, #228]	; (80170a0 <main+0x110>)
 8016fba:	601b      	str	r3, [r3, #0]
  chEvtObjectInit( &evtSindex );

  /*
   * load the node config data
   */
  read_config_eeprom(); //load node config
 8016fbc:	f7fd fe40 	bl	8014c40 <read_config_eeprom>
  if( !( '0' <= node_config.device_id[0] <= 'Z') )
 8016fc0:	4b38      	ldr	r3, [pc, #224]	; (80170a4 <main+0x114>)
 8016fc2:	f893 2020 	ldrb.w	r2, [r3, #32]
  {
      default_config_eeprom();    //save default config.
  }

  if( node_config.device_id[0] == 0x00 )
 8016fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016fca:	b91b      	cbnz	r3, 8016fd4 <main+0x44>
    node_config.device_id[0] = 'a';
 8016fcc:	4b35      	ldr	r3, [pc, #212]	; (80170a4 <main+0x114>)
 8016fce:	2261      	movs	r2, #97	; 0x61
 8016fd0:	f883 2020 	strb.w	r2, [r3, #32]
  /*
   * initialize wifi
   */
  tstrWifiInitParam param;
  int8_t ret;
  myPrintf("Bismillah\n");
 8016fd4:	4834      	ldr	r0, [pc, #208]	; (80170a8 <main+0x118>)
 8016fd6:	f7f4 ffa3 	bl	800bf20 <myPrintf>
  myPrintf("initializing bsp_init\n");
 8016fda:	4834      	ldr	r0, [pc, #208]	; (80170ac <main+0x11c>)
 8016fdc:	f7f4 ffa0 	bl	800bf20 <myPrintf>
  nm_bsp_init();
 8016fe0:	f7f9 f8e6 	bl	80101b0 <nm_bsp_init>

  memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	9303      	str	r3, [sp, #12]
 8016fe8:	9304      	str	r3, [sp, #16]
 8016fea:	9305      	str	r3, [sp, #20]
 8016fec:	9306      	str	r3, [sp, #24]
 8016fee:	9307      	str	r3, [sp, #28]

  /* Initialize Wi-Fi driver with data and status callbacks. */
  param.pfAppWifiCb = wifi_cb;
 8016ff0:	4b2f      	ldr	r3, [pc, #188]	; (80170b0 <main+0x120>)
 8016ff2:	9302      	str	r3, [sp, #8]
  myPrintf("initializing wifi_init\n");
 8016ff4:	482f      	ldr	r0, [pc, #188]	; (80170b4 <main+0x124>)
 8016ff6:	f7f4 ff93 	bl	800bf20 <myPrintf>
  ret = m2m_wifi_init(&param);
 8016ffa:	a802      	add	r0, sp, #8
 8016ffc:	f7fa f9a8 	bl	8011350 <m2m_wifi_init>

  if (M2M_SUCCESS != ret) {
 8017000:	4601      	mov	r1, r0
 8017002:	b118      	cbz	r0, 801700c <main+0x7c>
      myPrintf("main: m2m_wifi_init call error!(%d)\r\n", ret);
 8017004:	482c      	ldr	r0, [pc, #176]	; (80170b8 <main+0x128>)
 8017006:	f7f4 ff8b 	bl	800bf20 <myPrintf>
 801700a:	e7fe      	b.n	801700a <main+0x7a>
      while (1) {
      }
  }
  myPrintf("initializing wifi_request_scan\n");
 801700c:	482b      	ldr	r0, [pc, #172]	; (80170bc <main+0x12c>)
 801700e:	f7f4 ff87 	bl	800bf20 <myPrintf>
  m2m_wifi_request_scan(M2M_WIFI_CH_ALL);   /* Request scan. */
 8017012:	20ff      	movs	r0, #255	; 0xff
 8017014:	f7fa fbb4 	bl	8011780 <m2m_wifi_request_scan>

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(wa_blinker_thread, sizeof(wa_blinker_thread), NORMALPRIO, blinker_thread, NULL);
 8017018:	4d22      	ldr	r5, [pc, #136]	; (80170a4 <main+0x114>)
 801701a:	2400      	movs	r4, #0
 801701c:	9400      	str	r4, [sp, #0]
 801701e:	4b28      	ldr	r3, [pc, #160]	; (80170c0 <main+0x130>)
 8017020:	2280      	movs	r2, #128	; 0x80
 8017022:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8017026:	f605 0078 	addw	r0, r5, #2168	; 0x878
 801702a:	f7f1 fb61 	bl	80086f0 <chThdCreateStatic>
  /*
   * Creates the gps thread.
   */
  chThdCreateStatic(wa_gps_thread, sizeof(wa_gps_thread), NORMALPRIO, gps_thread, NULL);
 801702e:	9400      	str	r4, [sp, #0]
 8017030:	4b24      	ldr	r3, [pc, #144]	; (80170c4 <main+0x134>)
 8017032:	2280      	movs	r2, #128	; 0x80
 8017034:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8017038:	f505 6036 	add.w	r0, r5, #2912	; 0xb60
 801703c:	f7f1 fb58 	bl	80086f0 <chThdCreateStatic>
  /*
   * Creates the adc thread.
   */
  init_adc(); //init adc interface and callbacks
 8017040:	f7fe fd36 	bl	8015ab0 <init_adc>

  /*
   * Creates the PPS timing thread.
   */
  chThdCreateStatic(wa_pps_thread, sizeof(wa_pps_thread), HIGHPRIO-2, pps_thread, NULL);
 8017044:	9400      	str	r4, [sp, #0]
 8017046:	4b20      	ldr	r3, [pc, #128]	; (80170c8 <main+0x138>)
 8017048:	22fd      	movs	r2, #253	; 0xfd
 801704a:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 801704e:	f605 6048 	addw	r0, r5, #3656	; 0xe48
 8017052:	f7f1 fb4d 	bl	80086f0 <chThdCreateStatic>

  /*
   * Creates the logger thread.
   */
  chThdCreateStatic(wa_logger_thread, sizeof(wa_logger_thread), HIGHPRIO-1, logger_thread, NULL);
 8017056:	4d1d      	ldr	r5, [pc, #116]	; (80170cc <main+0x13c>)
 8017058:	9400      	str	r4, [sp, #0]
 801705a:	4b1d      	ldr	r3, [pc, #116]	; (80170d0 <main+0x140>)
 801705c:	22fe      	movs	r2, #254	; 0xfe
 801705e:	f640 01e8 	movw	r1, #2280	; 0x8e8
 8017062:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8017066:	f7f1 fb43 	bl	80086f0 <chThdCreateStatic>
  /*
   * Creates the node ctl thread.
   */
  chThdCreateStatic(wa_ctl_thread, sizeof(wa_ctl_thread), NORMALPRIO, ctl_thread, NULL);
 801706a:	9400      	str	r4, [sp, #0]
 801706c:	4b19      	ldr	r3, [pc, #100]	; (80170d4 <main+0x144>)
 801706e:	2280      	movs	r2, #128	; 0x80
 8017070:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8017074:	f505 6012 	add.w	r0, r5, #2336	; 0x920
 8017078:	f7f1 fb3a 	bl	80086f0 <chThdCreateStatic>
  /*
   * Normal main() thread activity, spawning shells.
   */
  while (true) {
     /* Handle pending events from network controller. */
     while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS) {
 801707c:	2000      	movs	r0, #0
 801707e:	f7fa f9df 	bl	8011440 <m2m_wifi_handle_events>
 8017082:	2800      	cmp	r0, #0
 8017084:	d1fa      	bne.n	801707c <main+0xec>
     }
     chThdSleepMilliseconds(1000);
 8017086:	4814      	ldr	r0, [pc, #80]	; (80170d8 <main+0x148>)
 8017088:	2100      	movs	r1, #0
 801708a:	f7f1 fd41 	bl	8008b10 <chThdSleep>
     while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS) {
 801708e:	e7f5      	b.n	801707c <main+0xec>
 8017090:	20004da0 	.word	0x20004da0
 8017094:	0801a490 	.word	0x0801a490
 8017098:	2000488c 	.word	0x2000488c
 801709c:	2000fb88 	.word	0x2000fb88
 80170a0:	2000fb7c 	.word	0x2000fb7c
 80170a4:	20002428 	.word	0x20002428
 80170a8:	0801afb0 	.word	0x0801afb0
 80170ac:	0801afbc 	.word	0x0801afbc
 80170b0:	08014ad1 	.word	0x08014ad1
 80170b4:	0801afd4 	.word	0x0801afd4
 80170b8:	0801afec 	.word	0x0801afec
 80170bc:	0801b014 	.word	0x0801b014
 80170c0:	080149a1 	.word	0x080149a1
 80170c4:	08014811 	.word	0x08014811
 80170c8:	080146e1 	.word	0x080146e1
 80170cc:	20003520 	.word	0x20003520
 80170d0:	08015d11 	.word	0x08015d11
 80170d4:	08016cd1 	.word	0x08016cd1
 80170d8:	000186a0 	.word	0x000186a0
 80170dc:	00000000 	.word	0x00000000

080170e0 <gps_init>:
  return result;

}

void gps_init(void)
{
 80170e0:	b508      	push	{r3, lr}
  chMtxObjectInit( &gpsMutex );    //init gps data sharing mutex
 80170e2:	4803      	ldr	r0, [pc, #12]	; (80170f0 <gps_init+0x10>)
 80170e4:	f7f2 faa4 	bl	8009630 <chMtxObjectInit>
 80170e8:	4b02      	ldr	r3, [pc, #8]	; (80170f4 <gps_init+0x14>)
 80170ea:	601b      	str	r3, [r3, #0]
  chEvtObjectInit( &evtGPS );
}
 80170ec:	bd08      	pop	{r3, pc}
 80170ee:	bf00      	nop
 80170f0:	2000fed0 	.word	0x2000fed0
 80170f4:	2000fe48 	.word	0x2000fe48
 80170f8:	f3af 8000 	nop.w
 80170fc:	f3af 8000 	nop.w

08017100 <gps_parse_sentence>:

/*
 * identify NMEA sentence type and call appropriate parser
 */
char gps_parse_sentence()
{
 8017100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017102:	b083      	sub	sp, #12
  char result;
  const char type_rmc[] = "RMC";
 8017104:	4b4b      	ldr	r3, [pc, #300]	; (8017234 <gps_parse_sentence+0x134>)
 8017106:	9301      	str	r3, [sp, #4]
  const char type_gga[] = "GGA";
 8017108:	f5a3 3301 	sub.w	r3, r3, #132096	; 0x20400
 801710c:	f2a3 230b 	subw	r3, r3, #523	; 0x20b
 8017110:	9300      	str	r3, [sp, #0]
  chprintf((BaseSequentialStream*)&SD6, "\n\rGPS type: ");
  streamWrite((BaseSequentialStream*)&SD6, &tmp_GPS_buffer[3], 3 );
  chprintf((BaseSequentialStream*)&SD6, "\n\r");
#endif

  if( strncmp(&tmp_GPS_buffer[3],type_rmc,3) == 0 ) //$GPRMC test
 8017112:	2203      	movs	r2, #3
 8017114:	a901      	add	r1, sp, #4
 8017116:	4848      	ldr	r0, [pc, #288]	; (8017238 <gps_parse_sentence+0x138>)
 8017118:	f001 fb0e 	bl	8018738 <strncmp>
 801711c:	b148      	cbz	r0, 8017132 <gps_parse_sentence+0x32>
#ifdef GPS_debug
    chprintf((BaseSequentialStream*)&SD6, "\n\r saved RMC sentence: %s \n\r",local_GPRMC);
#endif
    result = E_OK;
  }
  else if( strncmp(&tmp_GPS_buffer[3],type_gga,3) == 0 ) //$GPGGA test
 801711e:	2203      	movs	r2, #3
 8017120:	4669      	mov	r1, sp
 8017122:	4845      	ldr	r0, [pc, #276]	; (8017238 <gps_parse_sentence+0x138>)
 8017124:	f001 fb08 	bl	8018738 <strncmp>
 8017128:	2800      	cmp	r0, #0
 801712a:	d06a      	beq.n	8017202 <gps_parse_sentence+0x102>
#endif
    result = E_OK;
  }
  return result;

}
 801712c:	2000      	movs	r0, #0
 801712e:	b003      	add	sp, #12
 8017130:	bdf0      	pop	{r4, r5, r6, r7, pc}
    strncpy(local_GPRMC,tmp_GPS_buffer,tmp_buffer_index);
 8017132:	4f42      	ldr	r7, [pc, #264]	; (801723c <gps_parse_sentence+0x13c>)
 8017134:	4e42      	ldr	r6, [pc, #264]	; (8017240 <gps_parse_sentence+0x140>)
 8017136:	4c43      	ldr	r4, [pc, #268]	; (8017244 <gps_parse_sentence+0x144>)
 8017138:	883a      	ldrh	r2, [r7, #0]
 801713a:	4631      	mov	r1, r6
 801713c:	4620      	mov	r0, r4
 801713e:	f001 fb47 	bl	80187d0 <strncpy>
    chMtxLock( &gpsMutex );
 8017142:	4d41      	ldr	r5, [pc, #260]	; (8017248 <gps_parse_sentence+0x148>)
 8017144:	4628      	mov	r0, r5
 8017146:	f7f2 fb03 	bl	8009750 <chMtxLock>
    strncpy(global_GPRMC,tmp_GPS_buffer,tmp_buffer_index);
 801714a:	883a      	ldrh	r2, [r7, #0]
 801714c:	4631      	mov	r1, r6
 801714e:	483f      	ldr	r0, [pc, #252]	; (801724c <gps_parse_sentence+0x14c>)
 8017150:	f001 fb3e 	bl	80187d0 <strncpy>
    chMtxUnlock( &gpsMutex );
 8017154:	4628      	mov	r0, r5
 8017156:	f7f2 fb6b 	bl	8009830 <chMtxUnlock>
    chEvtBroadcastFlags(&evtGPS, GPS_NEW_RMC);    //parse some of the data
 801715a:	2101      	movs	r1, #1
 801715c:	483c      	ldr	r0, [pc, #240]	; (8017250 <gps_parse_sentence+0x150>)
 801715e:	f7f2 ff3f 	bl	8009fe0 <chEvtBroadcastFlags>
    cur_field_pos = strchr(local_GPRMC,',')+1;  //strchr returns position of the ",", so add 1 to get to first pos of next field
 8017162:	212c      	movs	r1, #44	; 0x2c
 8017164:	4620      	mov	r0, r4
 8017166:	f001 fa15 	bl	8018594 <strchr>
 801716a:	1c45      	adds	r5, r0, #1
    uint8_t field_index = 1;
 801716c:	2401      	movs	r4, #1
    while( field_index < 10 )
 801716e:	e00f      	b.n	8017190 <gps_parse_sentence+0x90>
        gps_data.fix_status = cur_field_pos[0];
 8017170:	782b      	ldrb	r3, [r5, #0]
 8017172:	4a38      	ldr	r2, [pc, #224]	; (8017254 <gps_parse_sentence+0x154>)
 8017174:	7013      	strb	r3, [r2, #0]
        if( gps_data.fix_status == 'A' )
 8017176:	2b41      	cmp	r3, #65	; 0x41
 8017178:	d022      	beq.n	80171c0 <gps_parse_sentence+0xc0>
          gps_data.gps_fix = false;
 801717a:	4b36      	ldr	r3, [pc, #216]	; (8017254 <gps_parse_sentence+0x154>)
 801717c:	2200      	movs	r2, #0
 801717e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      cur_field_pos = strchr(last_field_pos,',')+1; //strchr returns position of the ",", so add 1 to get to first pos of next field
 8017182:	212c      	movs	r1, #44	; 0x2c
 8017184:	4628      	mov	r0, r5
 8017186:	f001 fa05 	bl	8018594 <strchr>
 801718a:	1c45      	adds	r5, r0, #1
      field_index++;
 801718c:	3401      	adds	r4, #1
 801718e:	b2e4      	uxtb	r4, r4
    while( field_index < 10 )
 8017190:	2c09      	cmp	r4, #9
 8017192:	d8cb      	bhi.n	801712c <gps_parse_sentence+0x2c>
      if( field_index == RMC_STAT_POS )
 8017194:	2c02      	cmp	r4, #2
 8017196:	d0eb      	beq.n	8017170 <gps_parse_sentence+0x70>
      else if( gps_data.fix_status == 'A' )
 8017198:	4b2e      	ldr	r3, [pc, #184]	; (8017254 <gps_parse_sentence+0x154>)
 801719a:	781b      	ldrb	r3, [r3, #0]
 801719c:	2b41      	cmp	r3, #65	; 0x41
 801719e:	d1f0      	bne.n	8017182 <gps_parse_sentence+0x82>
        if( field_index == RMC_TIME_POS )
 80171a0:	2c01      	cmp	r4, #1
 80171a2:	d012      	beq.n	80171ca <gps_parse_sentence+0xca>
        else if( field_index == RMC_DATE_POS )
 80171a4:	2c09      	cmp	r4, #9
 80171a6:	d016      	beq.n	80171d6 <gps_parse_sentence+0xd6>
        else if( field_index == RMC_LAT_POS )
 80171a8:	2c03      	cmp	r4, #3
 80171aa:	d01a      	beq.n	80171e2 <gps_parse_sentence+0xe2>
        else if( field_index == RMC_LON_POS )
 80171ac:	2c05      	cmp	r4, #5
 80171ae:	d01e      	beq.n	80171ee <gps_parse_sentence+0xee>
        else if( field_index == RMC_NS_POS )
 80171b0:	2c04      	cmp	r4, #4
 80171b2:	d022      	beq.n	80171fa <gps_parse_sentence+0xfa>
        else if( field_index == RMC_EW_POS )
 80171b4:	2c06      	cmp	r4, #6
 80171b6:	d1e4      	bne.n	8017182 <gps_parse_sentence+0x82>
          gps_data.lon_EW = cur_field_pos[0];
 80171b8:	782a      	ldrb	r2, [r5, #0]
 80171ba:	4b26      	ldr	r3, [pc, #152]	; (8017254 <gps_parse_sentence+0x154>)
 80171bc:	769a      	strb	r2, [r3, #26]
 80171be:	e7e0      	b.n	8017182 <gps_parse_sentence+0x82>
          gps_data.gps_fix = true;
 80171c0:	4613      	mov	r3, r2
 80171c2:	2201      	movs	r2, #1
 80171c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80171c8:	e7db      	b.n	8017182 <gps_parse_sentence+0x82>
          strncpy(gps_data.utc_time,cur_field_pos,9);
 80171ca:	2209      	movs	r2, #9
 80171cc:	4629      	mov	r1, r5
 80171ce:	4822      	ldr	r0, [pc, #136]	; (8017258 <gps_parse_sentence+0x158>)
 80171d0:	f001 fafe 	bl	80187d0 <strncpy>
 80171d4:	e7d5      	b.n	8017182 <gps_parse_sentence+0x82>
          strncpy(gps_data.utc_date,cur_field_pos,6);
 80171d6:	2206      	movs	r2, #6
 80171d8:	4629      	mov	r1, r5
 80171da:	4820      	ldr	r0, [pc, #128]	; (801725c <gps_parse_sentence+0x15c>)
 80171dc:	f001 faf8 	bl	80187d0 <strncpy>
 80171e0:	e7cf      	b.n	8017182 <gps_parse_sentence+0x82>
          strncpy(gps_data.lat,cur_field_pos,10);
 80171e2:	220a      	movs	r2, #10
 80171e4:	4629      	mov	r1, r5
 80171e6:	481e      	ldr	r0, [pc, #120]	; (8017260 <gps_parse_sentence+0x160>)
 80171e8:	f001 faf2 	bl	80187d0 <strncpy>
 80171ec:	e7c9      	b.n	8017182 <gps_parse_sentence+0x82>
          strncpy(gps_data.lon,cur_field_pos,10);
 80171ee:	220a      	movs	r2, #10
 80171f0:	4629      	mov	r1, r5
 80171f2:	481c      	ldr	r0, [pc, #112]	; (8017264 <gps_parse_sentence+0x164>)
 80171f4:	f001 faec 	bl	80187d0 <strncpy>
 80171f8:	e7c3      	b.n	8017182 <gps_parse_sentence+0x82>
          gps_data.lat_NS = cur_field_pos[0];
 80171fa:	782a      	ldrb	r2, [r5, #0]
 80171fc:	4b15      	ldr	r3, [pc, #84]	; (8017254 <gps_parse_sentence+0x154>)
 80171fe:	735a      	strb	r2, [r3, #13]
 8017200:	e7bf      	b.n	8017182 <gps_parse_sentence+0x82>
    strncpy(local_GPGGA,tmp_GPS_buffer,tmp_buffer_index);
 8017202:	4e0e      	ldr	r6, [pc, #56]	; (801723c <gps_parse_sentence+0x13c>)
 8017204:	4d0e      	ldr	r5, [pc, #56]	; (8017240 <gps_parse_sentence+0x140>)
 8017206:	8832      	ldrh	r2, [r6, #0]
 8017208:	4629      	mov	r1, r5
 801720a:	4817      	ldr	r0, [pc, #92]	; (8017268 <gps_parse_sentence+0x168>)
 801720c:	f001 fae0 	bl	80187d0 <strncpy>
    chMtxLock( &gpsMutex );
 8017210:	4c0d      	ldr	r4, [pc, #52]	; (8017248 <gps_parse_sentence+0x148>)
 8017212:	4620      	mov	r0, r4
 8017214:	f7f2 fa9c 	bl	8009750 <chMtxLock>
    strncpy(global_GPGGA,tmp_GPS_buffer,tmp_buffer_index);
 8017218:	8832      	ldrh	r2, [r6, #0]
 801721a:	4629      	mov	r1, r5
 801721c:	4813      	ldr	r0, [pc, #76]	; (801726c <gps_parse_sentence+0x16c>)
 801721e:	f001 fad7 	bl	80187d0 <strncpy>
    chMtxUnlock( &gpsMutex );
 8017222:	4620      	mov	r0, r4
 8017224:	f7f2 fb04 	bl	8009830 <chMtxUnlock>
    chEvtBroadcastFlags(&evtGPS, GPS_NEW_GGA);
 8017228:	2102      	movs	r1, #2
 801722a:	4809      	ldr	r0, [pc, #36]	; (8017250 <gps_parse_sentence+0x150>)
 801722c:	f7f2 fed8 	bl	8009fe0 <chEvtBroadcastFlags>
 8017230:	e77c      	b.n	801712c <gps_parse_sentence+0x2c>
 8017232:	bf00      	nop
 8017234:	00434d52 	.word	0x00434d52
 8017238:	2000f887 	.word	0x2000f887
 801723c:	2000423a 	.word	0x2000423a
 8017240:	2000f884 	.word	0x2000f884
 8017244:	2000ff44 	.word	0x2000ff44
 8017248:	2000fed0 	.word	0x2000fed0
 801724c:	2000f7a8 	.word	0x2000f7a8
 8017250:	2000fe48 	.word	0x2000fe48
 8017254:	2000fc78 	.word	0x2000fc78
 8017258:	2000fc99 	.word	0x2000fc99
 801725c:	2000fca2 	.word	0x2000fca2
 8017260:	2000fc79 	.word	0x2000fc79
 8017264:	2000fc86 	.word	0x2000fc86
 8017268:	2000fee0 	.word	0x2000fee0
 801726c:	2000fc10 	.word	0x2000fc10

08017270 <hex_to_int>:
//0,1,2..,9,A,B,C,D,E,F

uint8_t hex_to_int(char ch)
{
    int num=0;
    if(ch>='0' && ch<='9')
 8017270:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017274:	b2db      	uxtb	r3, r3
 8017276:	2b09      	cmp	r3, #9
 8017278:	d917      	bls.n	80172aa <hex_to_int+0x3a>
    {
        num=ch-0x30;
    }
    else
    {
        switch(ch)
 801727a:	3841      	subs	r0, #65	; 0x41
 801727c:	2825      	cmp	r0, #37	; 0x25
 801727e:	d821      	bhi.n	80172c4 <hex_to_int+0x54>
 8017280:	e8df f000 	tbb	[pc, r0]
 8017284:	1a182216 	.word	0x1a182216
 8017288:	20201e1c 	.word	0x20201e1c
 801728c:	20202020 	.word	0x20202020
 8017290:	20202020 	.word	0x20202020
 8017294:	20202020 	.word	0x20202020
 8017298:	20202020 	.word	0x20202020
 801729c:	20202020 	.word	0x20202020
 80172a0:	20202020 	.word	0x20202020
 80172a4:	1a182216 	.word	0x1a182216
 80172a8:	1e1c      	.short	0x1e1c
        num=ch-0x30;
 80172aa:	3830      	subs	r0, #48	; 0x30
            case 'F': case 'f': num=15; break;
            default: num=0;
        }
    }
    return num;
}
 80172ac:	b2c0      	uxtb	r0, r0
 80172ae:	4770      	bx	lr
            case 'A': case 'a': num=10; break;
 80172b0:	200a      	movs	r0, #10
 80172b2:	e7fb      	b.n	80172ac <hex_to_int+0x3c>
            case 'C': case 'c': num=12; break;
 80172b4:	200c      	movs	r0, #12
 80172b6:	e7f9      	b.n	80172ac <hex_to_int+0x3c>
            case 'D': case 'd': num=13; break;
 80172b8:	200d      	movs	r0, #13
 80172ba:	e7f7      	b.n	80172ac <hex_to_int+0x3c>
            case 'E': case 'e': num=14; break;
 80172bc:	200e      	movs	r0, #14
 80172be:	e7f5      	b.n	80172ac <hex_to_int+0x3c>
            case 'F': case 'f': num=15; break;
 80172c0:	200f      	movs	r0, #15
 80172c2:	e7f3      	b.n	80172ac <hex_to_int+0x3c>
            default: num=0;
 80172c4:	2000      	movs	r0, #0
 80172c6:	e7f1      	b.n	80172ac <hex_to_int+0x3c>
            case 'B': case 'b': num=11; break;
 80172c8:	200b      	movs	r0, #11
 80172ca:	e7ef      	b.n	80172ac <hex_to_int+0x3c>
 80172cc:	f3af 8000 	nop.w

080172d0 <gps_test_checksum>:
{
 80172d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  char checksum = 0;
 80172d2:	2400      	movs	r4, #0
  for(i=1;i<tmp_buffer_index-4;i++ )
 80172d4:	2301      	movs	r3, #1
 80172d6:	e004      	b.n	80172e2 <gps_test_checksum+0x12>
     checksum = checksum^tmp_GPS_buffer[i];
 80172d8:	4a0e      	ldr	r2, [pc, #56]	; (8017314 <gps_test_checksum+0x44>)
 80172da:	5cd2      	ldrb	r2, [r2, r3]
 80172dc:	4054      	eors	r4, r2
  for(i=1;i<tmp_buffer_index-4;i++ )
 80172de:	3301      	adds	r3, #1
 80172e0:	b2db      	uxtb	r3, r3
 80172e2:	461d      	mov	r5, r3
 80172e4:	4a0c      	ldr	r2, [pc, #48]	; (8017318 <gps_test_checksum+0x48>)
 80172e6:	8812      	ldrh	r2, [r2, #0]
 80172e8:	3a04      	subs	r2, #4
 80172ea:	4293      	cmp	r3, r2
 80172ec:	dbf4      	blt.n	80172d8 <gps_test_checksum+0x8>
  checksum_val = ( hex_to_int( (char)tmp_GPS_buffer[i+1] ) << 4 ) + hex_to_int( (char)tmp_GPS_buffer[i+2] );
 80172ee:	3301      	adds	r3, #1
 80172f0:	4f08      	ldr	r7, [pc, #32]	; (8017314 <gps_test_checksum+0x44>)
 80172f2:	5cf8      	ldrb	r0, [r7, r3]
 80172f4:	f7ff ffbc 	bl	8017270 <hex_to_int>
 80172f8:	0100      	lsls	r0, r0, #4
 80172fa:	b2c6      	uxtb	r6, r0
 80172fc:	3502      	adds	r5, #2
 80172fe:	5d78      	ldrb	r0, [r7, r5]
 8017300:	f7ff ffb6 	bl	8017270 <hex_to_int>
 8017304:	4430      	add	r0, r6
 8017306:	b2c0      	uxtb	r0, r0
  if( checksum_val == checksum )
 8017308:	4284      	cmp	r4, r0
 801730a:	d101      	bne.n	8017310 <gps_test_checksum+0x40>
    return E_OK;
 801730c:	2000      	movs	r0, #0
}
 801730e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return E_CHKSUM_ERROR;
 8017310:	2004      	movs	r0, #4
 8017312:	e7fc      	b.n	801730e <gps_test_checksum+0x3e>
 8017314:	2000f884 	.word	0x2000f884
 8017318:	2000423a 	.word	0x2000423a
 801731c:	f3af 8000 	nop.w

08017320 <GPSParseChar>:
char GPSParseChar(char c){
 8017320:	b510      	push	{r4, lr}
  tmp_GPS_buffer[tmp_buffer_index] = c; //save the received char to the buffer
 8017322:	491c      	ldr	r1, [pc, #112]	; (8017394 <GPSParseChar+0x74>)
 8017324:	880b      	ldrh	r3, [r1, #0]
 8017326:	4a1c      	ldr	r2, [pc, #112]	; (8017398 <GPSParseChar+0x78>)
 8017328:	54d0      	strb	r0, [r2, r3]
  tmp_GPS_buffer[++tmp_buffer_index] = 0; //null terminate buffer to make a valid string
 801732a:	3301      	adds	r3, #1
 801732c:	b29b      	uxth	r3, r3
 801732e:	800b      	strh	r3, [r1, #0]
 8017330:	2100      	movs	r1, #0
 8017332:	54d1      	strb	r1, [r2, r3]
  if( tmp_buffer_index > ( MAX_NMEA_LENGTH-1 ) )
 8017334:	2b63      	cmp	r3, #99	; 0x63
 8017336:	d807      	bhi.n	8017348 <GPSParseChar+0x28>
  switch(c){
 8017338:	280d      	cmp	r0, #13
 801733a:	d017      	beq.n	801736c <GPSParseChar+0x4c>
 801733c:	2824      	cmp	r0, #36	; 0x24
 801733e:	d008      	beq.n	8017352 <GPSParseChar+0x32>
 8017340:	280a      	cmp	r0, #10
 8017342:	d013      	beq.n	801736c <GPSParseChar+0x4c>
  char result = E_OK;
 8017344:	2400      	movs	r4, #0
 8017346:	e002      	b.n	801734e <GPSParseChar+0x2e>
    tmp_buffer_index = 0;
 8017348:	4b12      	ldr	r3, [pc, #72]	; (8017394 <GPSParseChar+0x74>)
 801734a:	8019      	strh	r1, [r3, #0]
    return result;
 801734c:	2403      	movs	r4, #3
}
 801734e:	4620      	mov	r0, r4
 8017350:	bd10      	pop	{r4, pc}
      if( tmp_buffer_index != 1 )
 8017352:	2b01      	cmp	r3, #1
 8017354:	d101      	bne.n	801735a <GPSParseChar+0x3a>
  char result = E_OK;
 8017356:	2400      	movs	r4, #0
 8017358:	e7f9      	b.n	801734e <GPSParseChar+0x2e>
        tmp_GPS_buffer[tmp_buffer_index++] = c;
 801735a:	4b0e      	ldr	r3, [pc, #56]	; (8017394 <GPSParseChar+0x74>)
 801735c:	2201      	movs	r2, #1
 801735e:	801a      	strh	r2, [r3, #0]
 8017360:	4b0d      	ldr	r3, [pc, #52]	; (8017398 <GPSParseChar+0x78>)
 8017362:	7018      	strb	r0, [r3, #0]
        tmp_GPS_buffer[tmp_buffer_index] = 0; //null terminate
 8017364:	2200      	movs	r2, #0
 8017366:	705a      	strb	r2, [r3, #1]
        return result;
 8017368:	2406      	movs	r4, #6
 801736a:	e7f0      	b.n	801734e <GPSParseChar+0x2e>
      if( tmp_buffer_index > 1 )
 801736c:	2b01      	cmp	r3, #1
 801736e:	d804      	bhi.n	801737a <GPSParseChar+0x5a>
  char result = E_OK;
 8017370:	2400      	movs	r4, #0
      tmp_buffer_index = 0; //end of sentence, reset the buffer index.
 8017372:	4b08      	ldr	r3, [pc, #32]	; (8017394 <GPSParseChar+0x74>)
 8017374:	2200      	movs	r2, #0
 8017376:	801a      	strh	r2, [r3, #0]
      break;
 8017378:	e7e9      	b.n	801734e <GPSParseChar+0x2e>
        tmp_GPS_buffer[tmp_buffer_index-1] = 0; //null terminate
 801737a:	3b01      	subs	r3, #1
 801737c:	4a06      	ldr	r2, [pc, #24]	; (8017398 <GPSParseChar+0x78>)
 801737e:	2100      	movs	r1, #0
 8017380:	54d1      	strb	r1, [r2, r3]
        result = gps_test_checksum();
 8017382:	f7ff ffa5 	bl	80172d0 <gps_test_checksum>
        if( result == E_OK )
 8017386:	4604      	mov	r4, r0
 8017388:	2800      	cmp	r0, #0
 801738a:	d1e0      	bne.n	801734e <GPSParseChar+0x2e>
          gps_parse_sentence();
 801738c:	f7ff feb8 	bl	8017100 <gps_parse_sentence>
 8017390:	e7ef      	b.n	8017372 <GPSParseChar+0x52>
 8017392:	bf00      	nop
 8017394:	2000423a 	.word	0x2000423a
 8017398:	2000f884 	.word	0x2000f884
 801739c:	00000000 	.word	0x00000000

080173a0 <mcp23017_regForPin>:

/**
 * Register address, port dependent, for a given PIN
 */
static uint8_t mcp23017_regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr) {
  return(pin<8) ?portAaddr:portBaddr;
 80173a0:	2807      	cmp	r0, #7
 80173a2:	d901      	bls.n	80173a8 <mcp23017_regForPin+0x8>
}
 80173a4:	4610      	mov	r0, r2
 80173a6:	4770      	bx	lr
  return(pin<8) ?portAaddr:portBaddr;
 80173a8:	460a      	mov	r2, r1
 80173aa:	e7fb      	b.n	80173a4 <mcp23017_regForPin+0x4>
 80173ac:	f3af 8000 	nop.w

080173b0 <mcp23017_bitForPin>:
/**
 * Bit number associated to a give Pin
 */
static uint8_t mcp23017_bitForPin(uint8_t pin) {
  return pin%8;
}
 80173b0:	f000 0007 	and.w	r0, r0, #7
 80173b4:	4770      	bx	lr
 80173b6:	bf00      	nop
 80173b8:	f3af 8000 	nop.w
 80173bc:	f3af 8000 	nop.w

080173c0 <mcp23017_bitWrite>:
/**
 * returns a copy of the 'value' byte with the 'bitNumber' bit 0 or 1 depending on 'setValue'
 */
static uint8_t mcp23017_bitWrite(uint8_t value, uint8_t bitNumber, uint8_t setValue) {
  setValue = setValue&1;
  if (setValue) {
 80173c0:	f012 0f01 	tst.w	r2, #1
 80173c4:	d105      	bne.n	80173d2 <mcp23017_bitWrite+0x12>
    // raise the bit
    return value | 1<<bitNumber;
  } else {
    // lower the bit
    return value & ~(1<<bitNumber);
 80173c6:	2301      	movs	r3, #1
 80173c8:	fa03 f101 	lsl.w	r1, r3, r1
 80173cc:	ea20 0001 	bic.w	r0, r0, r1
  }
}
 80173d0:	4770      	bx	lr
    return value | 1<<bitNumber;
 80173d2:	2301      	movs	r3, #1
 80173d4:	fa03 f101 	lsl.w	r1, r3, r1
 80173d8:	4308      	orrs	r0, r1
 80173da:	b2c0      	uxtb	r0, r0
 80173dc:	4770      	bx	lr
 80173de:	bf00      	nop

080173e0 <mcp23017_init>:
bool mcp23017_init(MCP23017_config *self) {
 80173e0:	b510      	push	{r4, lr}
 80173e2:	4604      	mov	r4, r0
    i2cAcquireBus(self->i2cp);
 80173e4:	6800      	ldr	r0, [r0, #0]
 80173e6:	f7ea fee3 	bl	80021b0 <i2cAcquireBus>
    i2cStart(self->i2cp, &mcp23017_i2ccfg);
 80173ea:	4904      	ldr	r1, [pc, #16]	; (80173fc <mcp23017_init+0x1c>)
 80173ec:	6820      	ldr	r0, [r4, #0]
 80173ee:	f7ea fd97 	bl	8001f20 <i2cStart>
      i2cReleaseBus(self->i2cp);
 80173f2:	6820      	ldr	r0, [r4, #0]
 80173f4:	f7ea feec 	bl	80021d0 <i2cReleaseBus>
}
 80173f8:	2001      	movs	r0, #1
 80173fa:	bd10      	pop	{r4, pc}
 80173fc:	20001a74 	.word	0x20001a74

08017400 <mcp23017_readRegister>:
bool mcp23017_readRegister(MCP23017_config *self, uint8_t deviceAddr, uint8_t regAddr, uint8_t *regValue) {
 8017400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017404:	b086      	sub	sp, #24
 8017406:	4605      	mov	r5, r0
 8017408:	4698      	mov	r8, r3
  deviceAddr &= 0x7;
 801740a:	f001 0107 	and.w	r1, r1, #7
  deviceAddr |= MCP23017_ADDRESS;
 801740e:	f041 0620 	orr.w	r6, r1, #32
  txbuf[0] = regAddr;
 8017412:	af06      	add	r7, sp, #24
 8017414:	f807 2d04 	strb.w	r2, [r7, #-4]!
  i2cAcquireBus(self->i2cp);
 8017418:	6800      	ldr	r0, [r0, #0]
 801741a:	f7ea fec9 	bl	80021b0 <i2cAcquireBus>
  result = i2cMasterTransmitTimeout(self->i2cp, deviceAddr, txbuf, 1,rxbuf, 1, TIME_INFINITE);
 801741e:	f04f 32ff 	mov.w	r2, #4294967295
 8017422:	f04f 33ff 	mov.w	r3, #4294967295
 8017426:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801742a:	2401      	movs	r4, #1
 801742c:	9401      	str	r4, [sp, #4]
 801742e:	ab04      	add	r3, sp, #16
 8017430:	9300      	str	r3, [sp, #0]
 8017432:	4623      	mov	r3, r4
 8017434:	463a      	mov	r2, r7
 8017436:	4631      	mov	r1, r6
 8017438:	6828      	ldr	r0, [r5, #0]
 801743a:	f7ea fe01 	bl	8002040 <i2cMasterTransmitTimeout>
  i2cReleaseBus(self->i2cp);
 801743e:	6828      	ldr	r0, [r5, #0]
 8017440:	f7ea fec6 	bl	80021d0 <i2cReleaseBus>
  *regValue = rxbuf[0];
 8017444:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8017448:	f888 3000 	strb.w	r3, [r8]
}
 801744c:	4620      	mov	r0, r4
 801744e:	b006      	add	sp, #24
 8017450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017454:	f3af 8000 	nop.w
 8017458:	f3af 8000 	nop.w
 801745c:	f3af 8000 	nop.w

08017460 <mcp23017_digitalRead>:
bool mcp23017_digitalRead(MCP23017_config *self, uint8_t deviceAddr, uint8_t pin, bool* data) {
 8017460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017464:	b083      	sub	sp, #12
 8017466:	4680      	mov	r8, r0
 8017468:	4689      	mov	r9, r1
 801746a:	4615      	mov	r5, r2
 801746c:	461e      	mov	r6, r3
  uint8_t bit=mcp23017_bitForPin(pin);
 801746e:	4610      	mov	r0, r2
 8017470:	f7ff ff9e 	bl	80173b0 <mcp23017_bitForPin>
 8017474:	4607      	mov	r7, r0
  uint8_t regValue = 0;
 8017476:	ac02      	add	r4, sp, #8
 8017478:	2300      	movs	r3, #0
 801747a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  uint8_t regAddr=mcp23017_regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
 801747e:	2213      	movs	r2, #19
 8017480:	2112      	movs	r1, #18
 8017482:	4628      	mov	r0, r5
 8017484:	f7ff ff8c 	bl	80173a0 <mcp23017_regForPin>
  bool rv =mcp23017_readRegister(self, deviceAddr, regAddr, &regValue);
 8017488:	4623      	mov	r3, r4
 801748a:	4602      	mov	r2, r0
 801748c:	4649      	mov	r1, r9
 801748e:	4640      	mov	r0, r8
 8017490:	f7ff ffb6 	bl	8017400 <mcp23017_readRegister>
  *data = (regValue >> bit) & 0x1;
 8017494:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017498:	413b      	asrs	r3, r7
 801749a:	f003 0301 	and.w	r3, r3, #1
 801749e:	7033      	strb	r3, [r6, #0]
}
 80174a0:	b003      	add	sp, #12
 80174a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174a6:	bf00      	nop
 80174a8:	f3af 8000 	nop.w
 80174ac:	f3af 8000 	nop.w

080174b0 <mcp23017_digitalReadA>:
bool mcp23017_digitalReadA(MCP23017_config *self, uint8_t deviceAddr, uint8_t* data) {
 80174b0:	b508      	push	{r3, lr}
  return mcp23017_readRegister(self, deviceAddr, MCP23017_GPIOA, data);
 80174b2:	4613      	mov	r3, r2
 80174b4:	2212      	movs	r2, #18
 80174b6:	f7ff ffa3 	bl	8017400 <mcp23017_readRegister>
}
 80174ba:	bd08      	pop	{r3, pc}
 80174bc:	f3af 8000 	nop.w

080174c0 <mcp23017_digitalReadB>:
bool mcp23017_digitalReadB(MCP23017_config *self, uint8_t deviceAddr, uint8_t* data) {
 80174c0:	b508      	push	{r3, lr}
  return mcp23017_readRegister(self, deviceAddr, MCP23017_GPIOB, data);
 80174c2:	4613      	mov	r3, r2
 80174c4:	2213      	movs	r2, #19
 80174c6:	f7ff ff9b 	bl	8017400 <mcp23017_readRegister>
}
 80174ca:	bd08      	pop	{r3, pc}
 80174cc:	f3af 8000 	nop.w

080174d0 <mcp23017_writeRegister>:
bool mcp23017_writeRegister(MCP23017_config *self, uint8_t deviceAddr, uint8_t regAddr, uint8_t regValue) {
 80174d0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80174d4:	b086      	sub	sp, #24
 80174d6:	4605      	mov	r5, r0
 80174d8:	461e      	mov	r6, r3
  deviceAddr &= 0x7;
 80174da:	f001 0407 	and.w	r4, r1, #7
  deviceAddr |= MCP23017_ADDRESS;
 80174de:	f044 0420 	orr.w	r4, r4, #32
  txbuf[0] = regAddr;
 80174e2:	f88d 2014 	strb.w	r2, [sp, #20]
  txbuf[1] = regValue;
 80174e6:	f88d 3015 	strb.w	r3, [sp, #21]
  i2cAcquireBus(self->i2cp);
 80174ea:	6800      	ldr	r0, [r0, #0]
 80174ec:	f7ea fe60 	bl	80021b0 <i2cAcquireBus>
  result = i2cMasterTransmitTimeout(self->i2cp, deviceAddr, txbuf, 2, NULL, 0, TIME_INFINITE);
 80174f0:	b2a4      	uxth	r4, r4
 80174f2:	f04f 38ff 	mov.w	r8, #4294967295
 80174f6:	f04f 39ff 	mov.w	r9, #4294967295
 80174fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80174fe:	2300      	movs	r3, #0
 8017500:	9301      	str	r3, [sp, #4]
 8017502:	9300      	str	r3, [sp, #0]
 8017504:	2302      	movs	r3, #2
 8017506:	aa05      	add	r2, sp, #20
 8017508:	4621      	mov	r1, r4
 801750a:	6828      	ldr	r0, [r5, #0]
 801750c:	f7ea fd98 	bl	8002040 <i2cMasterTransmitTimeout>
  result = i2cMasterTransmitTimeout(self->i2cp, deviceAddr, txbuf, 1,&newRegValue, 1, TIME_INFINITE);
 8017510:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8017514:	2301      	movs	r3, #1
 8017516:	9301      	str	r3, [sp, #4]
 8017518:	f10d 0213 	add.w	r2, sp, #19
 801751c:	9200      	str	r2, [sp, #0]
 801751e:	aa05      	add	r2, sp, #20
 8017520:	4621      	mov	r1, r4
 8017522:	6828      	ldr	r0, [r5, #0]
 8017524:	f7ea fd8c 	bl	8002040 <i2cMasterTransmitTimeout>
  i2cReleaseBus(self->i2cp);
 8017528:	6828      	ldr	r0, [r5, #0]
 801752a:	f7ea fe51 	bl	80021d0 <i2cReleaseBus>
  if( newRegValue != regValue )
 801752e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8017532:	42b3      	cmp	r3, r6
 8017534:	d003      	beq.n	801753e <mcp23017_writeRegister+0x6e>
    return false;
 8017536:	2000      	movs	r0, #0
}
 8017538:	b006      	add	sp, #24
 801753a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    return rv;
 801753e:	2001      	movs	r0, #1
 8017540:	e7fa      	b.n	8017538 <mcp23017_writeRegister+0x68>
 8017542:	bf00      	nop
 8017544:	f3af 8000 	nop.w
 8017548:	f3af 8000 	nop.w
 801754c:	f3af 8000 	nop.w

08017550 <mcp23017_pinModeAB>:
bool mcp23017_pinModeAB(MCP23017_config *self, uint8_t deviceAddr, MCP23017_PinMode pinmode) {
 8017550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017552:	4605      	mov	r5, r0
 8017554:	460e      	mov	r6, r1
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRA, (pinmode==MCP23017_INPUT)?0xff:0x00);
 8017556:	b1f2      	cbz	r2, 8017596 <mcp23017_pinModeAB+0x46>
 8017558:	2700      	movs	r7, #0
 801755a:	463b      	mov	r3, r7
 801755c:	2200      	movs	r2, #0
 801755e:	4631      	mov	r1, r6
 8017560:	4628      	mov	r0, r5
 8017562:	f7ff ffb5 	bl	80174d0 <mcp23017_writeRegister>
 8017566:	4604      	mov	r4, r0
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IPOLA, 0x00);
 8017568:	2300      	movs	r3, #0
 801756a:	2202      	movs	r2, #2
 801756c:	4631      	mov	r1, r6
 801756e:	4628      	mov	r0, r5
 8017570:	f7ff ffae 	bl	80174d0 <mcp23017_writeRegister>
 8017574:	4004      	ands	r4, r0
 8017576:	b2e4      	uxtb	r4, r4
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRB, (pinmode==MCP23017_INPUT)?0xff:0x00);
 8017578:	463b      	mov	r3, r7
 801757a:	2201      	movs	r2, #1
 801757c:	4631      	mov	r1, r6
 801757e:	4628      	mov	r0, r5
 8017580:	f7ff ffa6 	bl	80174d0 <mcp23017_writeRegister>
 8017584:	4004      	ands	r4, r0
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IPOLB, 0x00);
 8017586:	2300      	movs	r3, #0
 8017588:	2203      	movs	r2, #3
 801758a:	4631      	mov	r1, r6
 801758c:	4628      	mov	r0, r5
 801758e:	f7ff ff9f 	bl	80174d0 <mcp23017_writeRegister>
}
 8017592:	4020      	ands	r0, r4
 8017594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRA, (pinmode==MCP23017_INPUT)?0xff:0x00);
 8017596:	27ff      	movs	r7, #255	; 0xff
 8017598:	e7df      	b.n	801755a <mcp23017_pinModeAB+0xa>
 801759a:	bf00      	nop
 801759c:	f3af 8000 	nop.w

080175a0 <mcp23017_digitalWriteAB>:
bool mcp23017_digitalWriteAB(MCP23017_config *self, uint8_t deviceAddr, uint16_t data) {
 80175a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175a2:	4606      	mov	r6, r0
 80175a4:	460f      	mov	r7, r1
 80175a6:	4615      	mov	r5, r2
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_GPIOA, data);
 80175a8:	b2d3      	uxtb	r3, r2
 80175aa:	2212      	movs	r2, #18
 80175ac:	f7ff ff90 	bl	80174d0 <mcp23017_writeRegister>
 80175b0:	4604      	mov	r4, r0
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_GPIOB, data>>8);
 80175b2:	0a2b      	lsrs	r3, r5, #8
 80175b4:	2213      	movs	r2, #19
 80175b6:	4639      	mov	r1, r7
 80175b8:	4630      	mov	r0, r6
 80175ba:	f7ff ff89 	bl	80174d0 <mcp23017_writeRegister>
  return rv;
 80175be:	4020      	ands	r0, r4
}
 80175c0:	b2c0      	uxtb	r0, r0
 80175c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175c4:	f3af 8000 	nop.w
 80175c8:	f3af 8000 	nop.w
 80175cc:	f3af 8000 	nop.w

080175d0 <mcp23017_digitalWrite>:
bool mcp23017_digitalWrite(const MCP23017_config *self, uint8_t deviceAddr, uint8_t pin, bool data) {
 80175d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175d4:	b083      	sub	sp, #12
 80175d6:	4606      	mov	r6, r0
 80175d8:	460f      	mov	r7, r1
 80175da:	4615      	mov	r5, r2
 80175dc:	4699      	mov	r9, r3
  uint8_t bit=mcp23017_bitForPin(pin);
 80175de:	4610      	mov	r0, r2
 80175e0:	f7ff fee6 	bl	80173b0 <mcp23017_bitForPin>
 80175e4:	4680      	mov	r8, r0
  uint8_t regAddr=mcp23017_regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
 80175e6:	2215      	movs	r2, #21
 80175e8:	2114      	movs	r1, #20
 80175ea:	4628      	mov	r0, r5
 80175ec:	f7ff fed8 	bl	80173a0 <mcp23017_regForPin>
  rv &= mcp23017_readRegister(self, deviceAddr, regAddr, &gpio);
 80175f0:	f10d 0307 	add.w	r3, sp, #7
 80175f4:	4602      	mov	r2, r0
 80175f6:	4639      	mov	r1, r7
 80175f8:	4630      	mov	r0, r6
 80175fa:	f7ff ff01 	bl	8017400 <mcp23017_readRegister>
 80175fe:	4604      	mov	r4, r0
  gpio = mcp23017_bitWrite(gpio,bit,data);
 8017600:	464a      	mov	r2, r9
 8017602:	4641      	mov	r1, r8
 8017604:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8017608:	f7ff feda 	bl	80173c0 <mcp23017_bitWrite>
 801760c:	4680      	mov	r8, r0
 801760e:	f88d 0007 	strb.w	r0, [sp, #7]
  regAddr=mcp23017_regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
 8017612:	2213      	movs	r2, #19
 8017614:	2112      	movs	r1, #18
 8017616:	4628      	mov	r0, r5
 8017618:	f7ff fec2 	bl	80173a0 <mcp23017_regForPin>
  rv &= mcp23017_writeRegister(self, deviceAddr, regAddr,gpio);
 801761c:	4643      	mov	r3, r8
 801761e:	4602      	mov	r2, r0
 8017620:	4639      	mov	r1, r7
 8017622:	4630      	mov	r0, r6
 8017624:	f7ff ff54 	bl	80174d0 <mcp23017_writeRegister>
  return rv;
 8017628:	4020      	ands	r0, r4
}
 801762a:	b2c0      	uxtb	r0, r0
 801762c:	b003      	add	sp, #12
 801762e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017632:	bf00      	nop
 8017634:	f3af 8000 	nop.w
 8017638:	f3af 8000 	nop.w
 801763c:	f3af 8000 	nop.w

08017640 <mcp23017_updateRegisterBit>:
static bool mcp23017_updateRegisterBit(MCP23017_config *self, uint8_t deviceAddr, uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
 8017640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017644:	b083      	sub	sp, #12
 8017646:	4605      	mov	r5, r0
 8017648:	460e      	mov	r6, r1
 801764a:	4614      	mov	r4, r2
 801764c:	4699      	mov	r9, r3
  uint8_t regAddr=mcp23017_regForPin(pin, portAaddr, portBaddr);
 801764e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8017652:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 8017656:	4620      	mov	r0, r4
 8017658:	f7ff fea2 	bl	80173a0 <mcp23017_regForPin>
 801765c:	4607      	mov	r7, r0
  uint8_t bit=mcp23017_bitForPin(pin);
 801765e:	4620      	mov	r0, r4
 8017660:	f7ff fea6 	bl	80173b0 <mcp23017_bitForPin>
 8017664:	4680      	mov	r8, r0
  rv &= mcp23017_readRegister(self, deviceAddr, regAddr, &regValue);
 8017666:	f10d 0307 	add.w	r3, sp, #7
 801766a:	463a      	mov	r2, r7
 801766c:	4631      	mov	r1, r6
 801766e:	4628      	mov	r0, r5
 8017670:	f7ff fec6 	bl	8017400 <mcp23017_readRegister>
 8017674:	4604      	mov	r4, r0
  regValue = mcp23017_bitWrite(regValue, bit, pValue);
 8017676:	464a      	mov	r2, r9
 8017678:	4641      	mov	r1, r8
 801767a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801767e:	f7ff fe9f 	bl	80173c0 <mcp23017_bitWrite>
 8017682:	4603      	mov	r3, r0
 8017684:	f88d 0007 	strb.w	r0, [sp, #7]
  rv &= mcp23017_writeRegister(self, deviceAddr, regAddr, regValue);
 8017688:	463a      	mov	r2, r7
 801768a:	4631      	mov	r1, r6
 801768c:	4628      	mov	r0, r5
 801768e:	f7ff ff1f 	bl	80174d0 <mcp23017_writeRegister>
  return rv;
 8017692:	4020      	ands	r0, r4
}
 8017694:	b2c0      	uxtb	r0, r0
 8017696:	b003      	add	sp, #12
 8017698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801769c:	f3af 8000 	nop.w

080176a0 <mcp23017_pinMode>:
bool mcp23017_pinMode(MCP23017_config *self, uint8_t deviceAddr, uint8_t pin, MCP23017_PinMode pinmode) {
 80176a0:	b510      	push	{r4, lr}
 80176a2:	b082      	sub	sp, #8
  return mcp23017_updateRegisterBit(self, deviceAddr, pin,(pinmode==MCP23017_INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
 80176a4:	2401      	movs	r4, #1
 80176a6:	9401      	str	r4, [sp, #4]
 80176a8:	2400      	movs	r4, #0
 80176aa:	9400      	str	r4, [sp, #0]
 80176ac:	fab3 f383 	clz	r3, r3
 80176b0:	095b      	lsrs	r3, r3, #5
 80176b2:	f7ff ffc5 	bl	8017640 <mcp23017_updateRegisterBit>
}
 80176b6:	b002      	add	sp, #8
 80176b8:	bd10      	pop	{r4, pc}
 80176ba:	bf00      	nop
 80176bc:	f3af 8000 	nop.w

080176c0 <mcp23017_pinModeA>:
bool mcp23017_pinModeA(MCP23017_config *self, uint8_t deviceAddr, MCP23017_PinMode pinmode){
 80176c0:	b570      	push	{r4, r5, r6, lr}
 80176c2:	4605      	mov	r5, r0
 80176c4:	460e      	mov	r6, r1
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRA, (pinmode==MCP23017_INPUT)?0xff:0x00);
 80176c6:	b17a      	cbz	r2, 80176e8 <mcp23017_pinModeA+0x28>
 80176c8:	2300      	movs	r3, #0
 80176ca:	2200      	movs	r2, #0
 80176cc:	4631      	mov	r1, r6
 80176ce:	4628      	mov	r0, r5
 80176d0:	f7ff fefe 	bl	80174d0 <mcp23017_writeRegister>
 80176d4:	4604      	mov	r4, r0
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IPOLA, 0x00);
 80176d6:	2300      	movs	r3, #0
 80176d8:	2202      	movs	r2, #2
 80176da:	4631      	mov	r1, r6
 80176dc:	4628      	mov	r0, r5
 80176de:	f7ff fef7 	bl	80174d0 <mcp23017_writeRegister>
  return rv;
 80176e2:	4020      	ands	r0, r4
}
 80176e4:	b2c0      	uxtb	r0, r0
 80176e6:	bd70      	pop	{r4, r5, r6, pc}
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRA, (pinmode==MCP23017_INPUT)?0xff:0x00);
 80176e8:	23ff      	movs	r3, #255	; 0xff
 80176ea:	e7ee      	b.n	80176ca <mcp23017_pinModeA+0xa>
 80176ec:	f3af 8000 	nop.w

080176f0 <mcp23017_digitalWriteA>:
bool mcp23017_digitalWriteA(MCP23017_config *self, uint8_t deviceAddr, uint8_t data) {
 80176f0:	b508      	push	{r3, lr}
  return mcp23017_writeRegister(self, deviceAddr, MCP23017_GPIOA, data);
 80176f2:	4613      	mov	r3, r2
 80176f4:	2212      	movs	r2, #18
 80176f6:	f7ff feeb 	bl	80174d0 <mcp23017_writeRegister>
}
 80176fa:	bd08      	pop	{r3, pc}
 80176fc:	f3af 8000 	nop.w

08017700 <mcp23017_pinModeB>:
bool mcp23017_pinModeB(MCP23017_config *self, uint8_t deviceAddr, MCP23017_PinMode pinmode){
 8017700:	b570      	push	{r4, r5, r6, lr}
 8017702:	4605      	mov	r5, r0
 8017704:	460e      	mov	r6, r1
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRB, (pinmode==MCP23017_INPUT)?0xff:0x00);
 8017706:	b17a      	cbz	r2, 8017728 <mcp23017_pinModeB+0x28>
 8017708:	2300      	movs	r3, #0
 801770a:	2201      	movs	r2, #1
 801770c:	4631      	mov	r1, r6
 801770e:	4628      	mov	r0, r5
 8017710:	f7ff fede 	bl	80174d0 <mcp23017_writeRegister>
 8017714:	4604      	mov	r4, r0
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IPOLB, 0x00);
 8017716:	2300      	movs	r3, #0
 8017718:	2203      	movs	r2, #3
 801771a:	4631      	mov	r1, r6
 801771c:	4628      	mov	r0, r5
 801771e:	f7ff fed7 	bl	80174d0 <mcp23017_writeRegister>
  return rv;
 8017722:	4020      	ands	r0, r4
}
 8017724:	b2c0      	uxtb	r0, r0
 8017726:	bd70      	pop	{r4, r5, r6, pc}
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRB, (pinmode==MCP23017_INPUT)?0xff:0x00);
 8017728:	23ff      	movs	r3, #255	; 0xff
 801772a:	e7ee      	b.n	801770a <mcp23017_pinModeB+0xa>
 801772c:	f3af 8000 	nop.w

08017730 <mcp23017_digitalWriteB>:
bool mcp23017_digitalWriteB(MCP23017_config *self, uint8_t deviceAddr, uint8_t data) {
 8017730:	b508      	push	{r3, lr}
  return mcp23017_writeRegister(self, deviceAddr, MCP23017_GPIOB, data);
 8017732:	4613      	mov	r3, r2
 8017734:	2213      	movs	r2, #19
 8017736:	f7ff fecb 	bl	80174d0 <mcp23017_writeRegister>
}
 801773a:	bd08      	pop	{r3, pc}
 801773c:	0000      	movs	r0, r0
	...

08017740 <xbee_init>:

/*
 * initialize mailbox etc
 */
xbee_mailbox_t* xbee_init(SerialDriver* xbee_stream_val,SerialDriver* debug_stream_val )
{
 8017740:	b510      	push	{r4, lr}
  //setup serial streams
  xbee_stream = xbee_stream_val;
 8017742:	4b22      	ldr	r3, [pc, #136]	; (80177cc <xbee_init+0x8c>)
 8017744:	6018      	str	r0, [r3, #0]
  debug_stream = debug_stream_val;
 8017746:	4b22      	ldr	r3, [pc, #136]	; (80177d0 <xbee_init+0x90>)
 8017748:	6019      	str	r1, [r3, #0]


  /* Creating rx the mailboxes.*/
  chMBObjectInit(&xbee_mailbox.rx_filled_packets, xbee_mailbox.rx_filled_packet_queue, NUM_PACKET_BUFFERS);
 801774a:	4c22      	ldr	r4, [pc, #136]	; (80177d4 <xbee_init+0x94>)
 801774c:	2205      	movs	r2, #5
 801774e:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8017752:	4620      	mov	r0, r4
 8017754:	f7f2 fff4 	bl	800a740 <chMBObjectInit>
  chMBObjectInit(&xbee_mailbox.rx_free_packets, xbee_mailbox.rx_free_packet_queue,NUM_PACKET_BUFFERS);
 8017758:	2205      	movs	r2, #5
 801775a:	f104 0150 	add.w	r1, r4, #80	; 0x50
 801775e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8017762:	f7f2 ffed 	bl	800a740 <chMBObjectInit>

  /* Pre-filling the free buffers pool with the available buffers*/
  uint32_t i;
  for (i = 0; i < NUM_PACKET_BUFFERS; i++)
 8017766:	2400      	movs	r4, #0
 8017768:	e00b      	b.n	8017782 <xbee_init+0x42>
  {
    (void)chMBPostTimeout(&xbee_mailbox.rx_free_packets, (msg_t)&xbee_mailbox.rx_packet_buffers[i],TIME_IMMEDIATE);
 801776a:	481a      	ldr	r0, [pc, #104]	; (80177d4 <xbee_init+0x94>)
 801776c:	215e      	movs	r1, #94	; 0x5e
 801776e:	fb01 f104 	mul.w	r1, r1, r4
 8017772:	31f0      	adds	r1, #240	; 0xf0
 8017774:	2200      	movs	r2, #0
 8017776:	2300      	movs	r3, #0
 8017778:	4401      	add	r1, r0
 801777a:	3028      	adds	r0, #40	; 0x28
 801777c:	f7f3 f890 	bl	800a8a0 <chMBPostTimeout>
  for (i = 0; i < NUM_PACKET_BUFFERS; i++)
 8017780:	3401      	adds	r4, #1
 8017782:	2c04      	cmp	r4, #4
 8017784:	d9f1      	bls.n	801776a <xbee_init+0x2a>
  }

  /* Creating tx the mailboxes.*/
  chMBObjectInit(&xbee_mailbox.tx_filled_packets, xbee_mailbox.tx_filled_packet_queue, NUM_PACKET_BUFFERS);
 8017786:	4c13      	ldr	r4, [pc, #76]	; (80177d4 <xbee_init+0x94>)
 8017788:	2205      	movs	r2, #5
 801778a:	f104 01dc 	add.w	r1, r4, #220	; 0xdc
 801778e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8017792:	f7f2 ffd5 	bl	800a740 <chMBObjectInit>
  chMBObjectInit(&xbee_mailbox.tx_free_packets, xbee_mailbox.tx_free_packet_queue,NUM_PACKET_BUFFERS);
 8017796:	2205      	movs	r2, #5
 8017798:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 801779c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 80177a0:	f7f2 ffce 	bl	800a740 <chMBObjectInit>

  /* Pre-filling the free buffers pool with the available buffers*/
  for (i = 0; i < NUM_PACKET_BUFFERS; i++)
 80177a4:	2400      	movs	r4, #0
 80177a6:	e00d      	b.n	80177c4 <xbee_init+0x84>
  {
    (void)chMBPostTimeout(&xbee_mailbox.tx_free_packets, (msg_t)&xbee_mailbox.tx_packet_buffers[i],TIME_IMMEDIATE);
 80177a8:	480a      	ldr	r0, [pc, #40]	; (80177d4 <xbee_init+0x94>)
 80177aa:	215e      	movs	r1, #94	; 0x5e
 80177ac:	fb01 f104 	mul.w	r1, r1, r4
 80177b0:	f501 7130 	add.w	r1, r1, #704	; 0x2c0
 80177b4:	4401      	add	r1, r0
 80177b6:	2200      	movs	r2, #0
 80177b8:	2300      	movs	r3, #0
 80177ba:	3106      	adds	r1, #6
 80177bc:	30a0      	adds	r0, #160	; 0xa0
 80177be:	f7f3 f86f 	bl	800a8a0 <chMBPostTimeout>
  for (i = 0; i < NUM_PACKET_BUFFERS; i++)
 80177c2:	3401      	adds	r4, #1
 80177c4:	2c04      	cmp	r4, #4
 80177c6:	d9ef      	bls.n	80177a8 <xbee_init+0x68>
  }
  return &xbee_mailbox;

}
 80177c8:	4802      	ldr	r0, [pc, #8]	; (80177d4 <xbee_init+0x94>)
 80177ca:	bd10      	pop	{r4, pc}
 80177cc:	2000f7a0 	.word	0x2000f7a0
 80177d0:	2000fb74 	.word	0x2000fb74
 80177d4:	2000423c 	.word	0x2000423c
 80177d8:	f3af 8000 	nop.w
 80177dc:	f3af 8000 	nop.w

080177e0 <xbee_send_packet>:

/*
 * sends a packet to xbee
 */
void xbee_send_packet()
{
 80177e0:	b530      	push	{r4, r5, lr}
 80177e2:	b085      	sub	sp, #20
  xbee_packet *tx_packet;
//  char checksum = 0;

  //check for new packets to transmit
  while(chMBFetchTimeout(&xbee_mailbox.tx_filled_packets, (msg_t *)&tx_packet, TIME_IMMEDIATE) == MSG_OK)
 80177e4:	e022      	b.n	801782c <xbee_send_packet+0x4c>
          //chprintf( debug_stream, "\n\rsource address: 0x%08X, 0x%08X\n\r", (uint32_t)*(xbee_com_buffer+FRAME_SRC_ADDR_OFFSET_H),(uint32_t)*(&xbee_com_buffer[FRAME_SRC_ADDR_OFFSET_H]));
//#endif
    if( tx_packet->type == RX_FRAME )
    {
      //this is a response to a cmd, set packet type to TX
      tx_packet->type = TX_FRAME;
 80177e6:	2210      	movs	r2, #16
 80177e8:	709a      	strb	r2, [r3, #2]
 80177ea:	e032      	b.n	8017852 <xbee_send_packet+0x72>
    //calculate checksum
    uint8_t i,checksum;
    checksum = 0;
    for(i = FRAME_TYPE_OFFSET; i < FRAME_TYPE_OFFSET + tx_packet->packet_length; i++)
    {
      checksum += xbee_tx_buffer[i];
 80177ec:	492f      	ldr	r1, [pc, #188]	; (80178ac <xbee_send_packet+0xcc>)
 80177ee:	5cc9      	ldrb	r1, [r1, r3]
 80177f0:	440a      	add	r2, r1
 80177f2:	b2d2      	uxtb	r2, r2
    for(i = FRAME_TYPE_OFFSET; i < FRAME_TYPE_OFFSET + tx_packet->packet_length; i++)
 80177f4:	3301      	adds	r3, #1
 80177f6:	b2db      	uxtb	r3, r3
 80177f8:	8829      	ldrh	r1, [r5, #0]
 80177fa:	3103      	adds	r1, #3
 80177fc:	428b      	cmp	r3, r1
 80177fe:	dbf5      	blt.n	80177ec <xbee_send_packet+0xc>
    }
    checksum = 0xFF-checksum;
 8017800:	43d2      	mvns	r2, r2
    xbee_tx_buffer[i] = checksum;
 8017802:	492a      	ldr	r1, [pc, #168]	; (80178ac <xbee_send_packet+0xcc>)
 8017804:	54ca      	strb	r2, [r1, r3]


    msg_t result = sdWrite(xbee_stream,xbee_tx_buffer, tx_packet->packet_length+4);
 8017806:	4b2a      	ldr	r3, [pc, #168]	; (80178b0 <xbee_send_packet+0xd0>)
 8017808:	6818      	ldr	r0, [r3, #0]
 801780a:	882a      	ldrh	r2, [r5, #0]
 801780c:	f04f 34ff 	mov.w	r4, #4294967295
 8017810:	f04f 35ff 	mov.w	r5, #4294967295
 8017814:	e9cd 4500 	strd	r4, r5, [sp]
 8017818:	3204      	adds	r2, #4
 801781a:	3030      	adds	r0, #48	; 0x30
 801781c:	f7e9 fdf0 	bl	8001400 <oqWriteTimeout>
#ifdef XBEE_debug
          chprintf( debug_stream, "\n\rxbee send failed\n\r");
          //chprintf( debug_stream, "\n\rsource address: 0x%08X, 0x%08X\n\r", (uint32_t)*(xbee_com_buffer+FRAME_SRC_ADDR_OFFSET_H),(uint32_t)*(&xbee_com_buffer[FRAME_SRC_ADDR_OFFSET_H]));
#endif
    }
    (void)chMBPostTimeout(&xbee_mailbox.tx_free_packets, (msg_t)tx_packet,TIME_IMMEDIATE);
 8017820:	2200      	movs	r2, #0
 8017822:	2300      	movs	r3, #0
 8017824:	9903      	ldr	r1, [sp, #12]
 8017826:	4823      	ldr	r0, [pc, #140]	; (80178b4 <xbee_send_packet+0xd4>)
 8017828:	f7f3 f83a 	bl	800a8a0 <chMBPostTimeout>
  while(chMBFetchTimeout(&xbee_mailbox.tx_filled_packets, (msg_t *)&tx_packet, TIME_IMMEDIATE) == MSG_OK)
 801782c:	2200      	movs	r2, #0
 801782e:	2300      	movs	r3, #0
 8017830:	a903      	add	r1, sp, #12
 8017832:	4821      	ldr	r0, [pc, #132]	; (80178b8 <xbee_send_packet+0xd8>)
 8017834:	f7f3 f98c 	bl	800ab50 <chMBFetchTimeout>
 8017838:	2800      	cmp	r0, #0
 801783a:	d134      	bne.n	80178a6 <xbee_send_packet+0xc6>
    chprintf( debug_stream, "\n\rXbee send data[] = %s\n\r",tx_packet->data);
 801783c:	9a03      	ldr	r2, [sp, #12]
 801783e:	320e      	adds	r2, #14
 8017840:	491e      	ldr	r1, [pc, #120]	; (80178bc <xbee_send_packet+0xdc>)
 8017842:	4b1f      	ldr	r3, [pc, #124]	; (80178c0 <xbee_send_packet+0xe0>)
 8017844:	6818      	ldr	r0, [r3, #0]
 8017846:	f7f4 fb5b 	bl	800bf00 <chprintf>
    if( tx_packet->type == RX_FRAME )
 801784a:	9b03      	ldr	r3, [sp, #12]
 801784c:	789a      	ldrb	r2, [r3, #2]
 801784e:	2a90      	cmp	r2, #144	; 0x90
 8017850:	d0c9      	beq.n	80177e6 <xbee_send_packet+0x6>
    tx_packet->packet_length = tx_packet->data_length + TX_PACKET_OVERHEAD;
 8017852:	9a03      	ldr	r2, [sp, #12]
 8017854:	8993      	ldrh	r3, [r2, #12]
 8017856:	330e      	adds	r3, #14
 8017858:	8013      	strh	r3, [r2, #0]
    xbee_tx_buffer[0] = FRAME_START_BYTE;
 801785a:	4814      	ldr	r0, [pc, #80]	; (80178ac <xbee_send_packet+0xcc>)
 801785c:	237e      	movs	r3, #126	; 0x7e
 801785e:	7003      	strb	r3, [r0, #0]
    xbee_tx_buffer[FRAME_LENGTH_OFFSET_H] = tx_packet->packet_length >> 8;
 8017860:	9d03      	ldr	r5, [sp, #12]
 8017862:	882b      	ldrh	r3, [r5, #0]
 8017864:	0a1b      	lsrs	r3, r3, #8
 8017866:	7043      	strb	r3, [r0, #1]
    xbee_tx_buffer[FRAME_LENGTH_OFFSET_L] = (uint8_t)tx_packet->packet_length;
 8017868:	782b      	ldrb	r3, [r5, #0]
 801786a:	7083      	strb	r3, [r0, #2]
    xbee_tx_buffer[ FRAME_TYPE_OFFSET ] = tx_packet->type;
 801786c:	78ab      	ldrb	r3, [r5, #2]
 801786e:	70c3      	strb	r3, [r0, #3]
    xbee_tx_buffer[ FRAME_TX_ID_OFFSET ] = DEFAULT_FRAME_ID;
 8017870:	2301      	movs	r3, #1
 8017872:	7103      	strb	r3, [r0, #4]
    memcpy( &xbee_tx_buffer[ FRAME_TX_ADDR_OFFSET_H ], tx_packet->address_H, 4);
 8017874:	f8d5 3003 	ldr.w	r3, [r5, #3]
 8017878:	f8c0 3005 	str.w	r3, [r0, #5]
    memcpy( &xbee_tx_buffer[ FRAME_TX_ADDR_OFFSET_L ], tx_packet->address_L, 4);
 801787c:	f8d5 3007 	ldr.w	r3, [r5, #7]
 8017880:	f8c0 3009 	str.w	r3, [r0, #9]
    xbee_tx_buffer[ FRAME_TX_RES1_OFFSET ] = 0xFF; //reserved values
 8017884:	23ff      	movs	r3, #255	; 0xff
 8017886:	7343      	strb	r3, [r0, #13]
    xbee_tx_buffer[ FRAME_TX_RES2_OFFSET ] = 0xFE;
 8017888:	23fe      	movs	r3, #254	; 0xfe
 801788a:	7383      	strb	r3, [r0, #14]
    xbee_tx_buffer[ FRAME_TX_BCAST_OFFSET ] = TX_BCAST_RADIUS; //default
 801788c:	2400      	movs	r4, #0
 801788e:	73c4      	strb	r4, [r0, #15]
    xbee_tx_buffer[ FRAME_TX_OPPS_OFFSET ] = TX_OPPS; //digimesh, no ACK
 8017890:	23c1      	movs	r3, #193	; 0xc1
 8017892:	7403      	strb	r3, [r0, #16]
    memcpy( &xbee_tx_buffer[ FRAME_TX_DATA_OFFSET ], tx_packet->data, tx_packet->data_length );
 8017894:	89aa      	ldrh	r2, [r5, #12]
 8017896:	f105 010e 	add.w	r1, r5, #14
 801789a:	3011      	adds	r0, #17
 801789c:	f000 fb60 	bl	8017f60 <memcpy>
    checksum = 0;
 80178a0:	4622      	mov	r2, r4
    for(i = FRAME_TYPE_OFFSET; i < FRAME_TYPE_OFFSET + tx_packet->packet_length; i++)
 80178a2:	2303      	movs	r3, #3
 80178a4:	e7a8      	b.n	80177f8 <xbee_send_packet+0x18>
  }

}
 80178a6:	b005      	add	sp, #20
 80178a8:	bd30      	pop	{r4, r5, pc}
 80178aa:	bf00      	nop
 80178ac:	2001020c 	.word	0x2001020c
 80178b0:	2000f7a0 	.word	0x2000f7a0
 80178b4:	200042dc 	.word	0x200042dc
 80178b8:	200042b4 	.word	0x200042b4
 80178bc:	0801b034 	.word	0x0801b034
 80178c0:	2000fb74 	.word	0x2000fb74
 80178c4:	f3af 8000 	nop.w
 80178c8:	f3af 8000 	nop.w
 80178cc:	f3af 8000 	nop.w

080178d0 <xbee_process_packet>:
/*
 * Processes valid xbee packets.
 * most packet will be ignored, command packets will be sent on
 */
uint8_t xbee_process_packet()
{
 80178d0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80178d4:	b082      	sub	sp, #8
  // act based on the packet type

  switch ( new_packet.type  )
 80178d6:	4b3e      	ldr	r3, [pc, #248]	; (80179d0 <xbee_process_packet+0x100>)
 80178d8:	789b      	ldrb	r3, [r3, #2]
 80178da:	2b8b      	cmp	r3, #139	; 0x8b
 80178dc:	d072      	beq.n	80179c4 <xbee_process_packet+0xf4>
 80178de:	2b90      	cmp	r3, #144	; 0x90
 80178e0:	d003      	beq.n	80178ea <xbee_process_packet+0x1a>
//#endif
      break;
  }
  return 0;

}
 80178e2:	2000      	movs	r0, #0
 80178e4:	b002      	add	sp, #8
 80178e6:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80178ea:	2320      	movs	r3, #32
 80178ec:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80178f0:	f7f1 fb96 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80178f4:	f7f0 f894 	bl	8007a20 <_dbg_check_lock>
 80178f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80178fc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  _dbg_check_unlock();
 80178fe:	f7f0 f8a7 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8017902:	f7f1 fb95 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8017906:	4b33      	ldr	r3, [pc, #204]	; (80179d4 <xbee_process_packet+0x104>)
 8017908:	681a      	ldr	r2, [r3, #0]
 801790a:	429a      	cmp	r2, r3
 801790c:	d004      	beq.n	8017918 <xbee_process_packet+0x48>
 801790e:	699b      	ldr	r3, [r3, #24]
 8017910:	6899      	ldr	r1, [r3, #8]
 8017912:	6893      	ldr	r3, [r2, #8]
 8017914:	4299      	cmp	r1, r3
 8017916:	d351      	bcc.n	80179bc <xbee_process_packet+0xec>
 8017918:	2500      	movs	r5, #0
 801791a:	f385 8811 	msr	BASEPRI, r5
      lastXB_CMD_mS = TIME_I2MS( chVTGetSystemTime() );
 801791e:	2700      	movs	r7, #0
 8017920:	0160      	lsls	r0, r4, #5
 8017922:	0ee1      	lsrs	r1, r4, #27
 8017924:	1b00      	subs	r0, r0, r4
 8017926:	eb61 0107 	sbc.w	r1, r1, r7
 801792a:	008b      	lsls	r3, r1, #2
 801792c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8017930:	0082      	lsls	r2, r0, #2
 8017932:	eb12 0b04 	adds.w	fp, r2, r4
 8017936:	eb43 0c07 	adc.w	ip, r3, r7
 801793a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801793e:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8017942:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8017946:	4693      	mov	fp, r2
 8017948:	469c      	mov	ip, r3
 801794a:	4a23      	ldr	r2, [pc, #140]	; (80179d8 <xbee_process_packet+0x108>)
 801794c:	2300      	movs	r3, #0
 801794e:	4e23      	ldr	r6, [pc, #140]	; (80179dc <xbee_process_packet+0x10c>)
 8017950:	2700      	movs	r7, #0
 8017952:	eb1b 0006 	adds.w	r0, fp, r6
 8017956:	eb4c 0107 	adc.w	r1, ip, r7
 801795a:	f000 f981 	bl	8017c60 <__aeabi_uldivmod>
 801795e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80179f0 <xbee_process_packet+0x120>
 8017962:	f8c8 049c 	str.w	r0, [r8, #1180]	; 0x49c
      new_packet.data_length = new_packet.packet_length - FRAME_LENGTH_OVERHEAD;
 8017966:	4e1a      	ldr	r6, [pc, #104]	; (80179d0 <xbee_process_packet+0x100>)
 8017968:	8834      	ldrh	r4, [r6, #0]
 801796a:	3c0c      	subs	r4, #12
 801796c:	b2a4      	uxth	r4, r4
 801796e:	81b4      	strh	r4, [r6, #12]
      memcpy(new_packet.data, &xbee_com_buffer[FRAME_RX_DATA_OFFSET],new_packet.data_length );
 8017970:	4f1b      	ldr	r7, [pc, #108]	; (80179e0 <xbee_process_packet+0x110>)
 8017972:	4622      	mov	r2, r4
 8017974:	4639      	mov	r1, r7
 8017976:	f106 000e 	add.w	r0, r6, #14
 801797a:	f000 faf1 	bl	8017f60 <memcpy>
      new_packet.data[new_packet.data_length] = 0;//null terminate to make it a string
 801797e:	4434      	add	r4, r6
 8017980:	73a5      	strb	r5, [r4, #14]
      memcpy(new_packet.address_H, &xbee_com_buffer[FRAME_SRC_ADDR_OFFSET_H], 4);
 8017982:	f857 3c0b 	ldr.w	r3, [r7, #-11]
 8017986:	f8c6 3003 	str.w	r3, [r6, #3]
      memcpy(new_packet.address_L, &xbee_com_buffer[FRAME_SRC_ADDR_OFFSET_L], 4);
 801798a:	f857 3c07 	ldr.w	r3, [r7, #-7]
 801798e:	f8c6 3007 	str.w	r3, [r6, #7]
      if (chMBFetchTimeout(&xbee_mailbox.rx_free_packets, (msg_t *)&pbuf, TIME_IMMEDIATE) == MSG_OK)
 8017992:	2200      	movs	r2, #0
 8017994:	2300      	movs	r3, #0
 8017996:	a901      	add	r1, sp, #4
 8017998:	f108 0028 	add.w	r0, r8, #40	; 0x28
 801799c:	f7f3 f8d8 	bl	800ab50 <chMBFetchTimeout>
 80179a0:	2800      	cmp	r0, #0
 80179a2:	d19e      	bne.n	80178e2 <xbee_process_packet+0x12>
        memcpy(pbuf,&new_packet,sizeof(new_packet)); //copy new packet contents to message buffer
 80179a4:	225e      	movs	r2, #94	; 0x5e
 80179a6:	4631      	mov	r1, r6
 80179a8:	9801      	ldr	r0, [sp, #4]
 80179aa:	f000 fad9 	bl	8017f60 <memcpy>
        (void)chMBPostTimeout(&xbee_mailbox.rx_filled_packets, (msg_t)pbuf,TIME_IMMEDIATE);
 80179ae:	2200      	movs	r2, #0
 80179b0:	2300      	movs	r3, #0
 80179b2:	9901      	ldr	r1, [sp, #4]
 80179b4:	4640      	mov	r0, r8
 80179b6:	f7f2 ff73 	bl	800a8a0 <chMBPostTimeout>
 80179ba:	e792      	b.n	80178e2 <xbee_process_packet+0x12>
 80179bc:	4809      	ldr	r0, [pc, #36]	; (80179e4 <xbee_process_packet+0x114>)
 80179be:	f7ef fe9f 	bl	8007700 <chSysHalt>
 80179c2:	e7a9      	b.n	8017918 <xbee_process_packet+0x48>
      chprintf( debug_stream, "\n\rxbee TX status packet received\n\r");
 80179c4:	4908      	ldr	r1, [pc, #32]	; (80179e8 <xbee_process_packet+0x118>)
 80179c6:	4b09      	ldr	r3, [pc, #36]	; (80179ec <xbee_process_packet+0x11c>)
 80179c8:	6818      	ldr	r0, [r3, #0]
 80179ca:	f7f4 fa99 	bl	800bf00 <chprintf>
      break;
 80179ce:	e788      	b.n	80178e2 <xbee_process_packet+0x12>
 80179d0:	200100ac 	.word	0x200100ac
 80179d4:	200050f8 	.word	0x200050f8
 80179d8:	000186a0 	.word	0x000186a0
 80179dc:	0001869f 	.word	0x0001869f
 80179e0:	2000ffbb 	.word	0x2000ffbb
 80179e4:	0801a4a0 	.word	0x0801a4a0
 80179e8:	0801b050 	.word	0x0801b050
 80179ec:	2000fb74 	.word	0x2000fb74
 80179f0:	2000423c 	.word	0x2000423c
 80179f4:	f3af 8000 	nop.w
 80179f8:	f3af 8000 	nop.w
 80179fc:	f3af 8000 	nop.w

08017a00 <xbee_com_parse>:
{
 8017a00:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  readByte = sdGetTimeout(xbee_stream, TIME_IMMEDIATE);
 8017a04:	4b63      	ldr	r3, [pc, #396]	; (8017b94 <xbee_com_parse+0x194>)
 8017a06:	6818      	ldr	r0, [r3, #0]
 8017a08:	2200      	movs	r2, #0
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	300c      	adds	r0, #12
 8017a0e:	f7e9 fb47 	bl	80010a0 <iqGetTimeout>
 8017a12:	4604      	mov	r4, r0
  while(readByte != MSG_TIMEOUT)
 8017a14:	e02b      	b.n	8017a6e <xbee_com_parse+0x6e>
 8017a16:	4860      	ldr	r0, [pc, #384]	; (8017b98 <xbee_com_parse+0x198>)
 8017a18:	f7ef fe72 	bl	8007700 <chSysHalt>
 8017a1c:	e042      	b.n	8017aa4 <xbee_com_parse+0xa4>
      chprintf(debug_stream, "\n\rcorrupted xbee packet\n\r",(char)readByte);
 8017a1e:	b2e2      	uxtb	r2, r4
 8017a20:	495e      	ldr	r1, [pc, #376]	; (8017b9c <xbee_com_parse+0x19c>)
 8017a22:	4b5f      	ldr	r3, [pc, #380]	; (8017ba0 <xbee_com_parse+0x1a0>)
 8017a24:	6818      	ldr	r0, [r3, #0]
 8017a26:	f7f4 fa6b 	bl	800bf00 <chprintf>
      buf_end_pos = 0;    //reset buffer
 8017a2a:	4b5e      	ldr	r3, [pc, #376]	; (8017ba4 <xbee_com_parse+0x1a4>)
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
 8017a32:	e066      	b.n	8017b02 <xbee_com_parse+0x102>
      if( buf_end_pos != 0 )
 8017a34:	4b5b      	ldr	r3, [pc, #364]	; (8017ba4 <xbee_com_parse+0x1a4>)
 8017a36:	f8b3 34a4 	ldrh.w	r3, [r3, #1188]	; 0x4a4
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d16d      	bne.n	8017b1a <xbee_com_parse+0x11a>
      buf_end_pos = 0; //reset buffer
 8017a3e:	4b59      	ldr	r3, [pc, #356]	; (8017ba4 <xbee_com_parse+0x1a4>)
 8017a40:	2200      	movs	r2, #0
 8017a42:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
    xbee_com_buffer[buf_end_pos++] = newByte;
 8017a46:	4a57      	ldr	r2, [pc, #348]	; (8017ba4 <xbee_com_parse+0x1a4>)
 8017a48:	f8b2 14a4 	ldrh.w	r1, [r2, #1188]	; 0x4a4
 8017a4c:	1c4b      	adds	r3, r1, #1
 8017a4e:	b29b      	uxth	r3, r3
 8017a50:	f8a2 34a4 	strh.w	r3, [r2, #1188]	; 0x4a4
 8017a54:	4a54      	ldr	r2, [pc, #336]	; (8017ba8 <xbee_com_parse+0x1a8>)
 8017a56:	5455      	strb	r5, [r2, r1]
    if( ( xbee_com_buffer[0] == FRAME_START_BYTE ) && ( buf_end_pos >= FRAME_MIN_PACKET_LENGTH ) )
 8017a58:	7812      	ldrb	r2, [r2, #0]
 8017a5a:	2a7e      	cmp	r2, #126	; 0x7e
 8017a5c:	d064      	beq.n	8017b28 <xbee_com_parse+0x128>
    readByte = sdGetTimeout(xbee_stream, chTimeUS2I( 15 )); //wait up to 15uS for next char.
 8017a5e:	4b4d      	ldr	r3, [pc, #308]	; (8017b94 <xbee_com_parse+0x194>)
 8017a60:	6818      	ldr	r0, [r3, #0]
 8017a62:	2202      	movs	r2, #2
 8017a64:	2300      	movs	r3, #0
 8017a66:	300c      	adds	r0, #12
 8017a68:	f7e9 fb1a 	bl	80010a0 <iqGetTimeout>
 8017a6c:	4604      	mov	r4, r0
  while(readByte != MSG_TIMEOUT)
 8017a6e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8017a72:	f000 808c 	beq.w	8017b8e <xbee_com_parse+0x18e>
 8017a76:	2320      	movs	r3, #32
 8017a78:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8017a7c:	f7f1 fad0 	bl	8009020 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8017a80:	f7ef ffce 	bl	8007a20 <_dbg_check_lock>
 8017a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017a88:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8017a8a:	f7ef ffe1 	bl	8007a50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8017a8e:	f7f1 facf 	bl	8009030 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8017a92:	4b46      	ldr	r3, [pc, #280]	; (8017bac <xbee_com_parse+0x1ac>)
 8017a94:	681a      	ldr	r2, [r3, #0]
 8017a96:	429a      	cmp	r2, r3
 8017a98:	d004      	beq.n	8017aa4 <xbee_com_parse+0xa4>
 8017a9a:	699b      	ldr	r3, [r3, #24]
 8017a9c:	6899      	ldr	r1, [r3, #8]
 8017a9e:	6893      	ldr	r3, [r2, #8]
 8017aa0:	4299      	cmp	r1, r3
 8017aa2:	d3b8      	bcc.n	8017a16 <xbee_com_parse+0x16>
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	f383 8811 	msr	BASEPRI, r3
    cur_mS = TIME_I2MS( chVTGetSystemTime() );
 8017aaa:	2700      	movs	r7, #0
 8017aac:	0168      	lsls	r0, r5, #5
 8017aae:	0ee9      	lsrs	r1, r5, #27
 8017ab0:	1b40      	subs	r0, r0, r5
 8017ab2:	eb61 0107 	sbc.w	r1, r1, r7
 8017ab6:	008b      	lsls	r3, r1, #2
 8017ab8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8017abc:	0082      	lsls	r2, r0, #2
 8017abe:	eb12 0805 	adds.w	r8, r2, r5
 8017ac2:	eb43 0907 	adc.w	r9, r3, r7
 8017ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017ad2:	4690      	mov	r8, r2
 8017ad4:	4699      	mov	r9, r3
 8017ad6:	4a36      	ldr	r2, [pc, #216]	; (8017bb0 <xbee_com_parse+0x1b0>)
 8017ad8:	2300      	movs	r3, #0
 8017ada:	4e36      	ldr	r6, [pc, #216]	; (8017bb4 <xbee_com_parse+0x1b4>)
 8017adc:	2700      	movs	r7, #0
 8017ade:	eb18 0006 	adds.w	r0, r8, r6
 8017ae2:	eb49 0107 	adc.w	r1, r9, r7
 8017ae6:	f000 f8bb 	bl	8017c60 <__aeabi_uldivmod>
 8017aea:	4605      	mov	r5, r0
    if( ( ( cur_mS - lastXB_RX_mS ) > XBEE_PKT_TIMEOUT_MS ) && ( buf_end_pos != 0 ) )
 8017aec:	4b2d      	ldr	r3, [pc, #180]	; (8017ba4 <xbee_com_parse+0x1a4>)
 8017aee:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8017af2:	1ac3      	subs	r3, r0, r3
 8017af4:	2b64      	cmp	r3, #100	; 0x64
 8017af6:	d904      	bls.n	8017b02 <xbee_com_parse+0x102>
 8017af8:	4b2a      	ldr	r3, [pc, #168]	; (8017ba4 <xbee_com_parse+0x1a4>)
 8017afa:	f8b3 34a4 	ldrh.w	r3, [r3, #1188]	; 0x4a4
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d18d      	bne.n	8017a1e <xbee_com_parse+0x1e>
    lastXB_RX_mS = cur_mS;
 8017b02:	4b28      	ldr	r3, [pc, #160]	; (8017ba4 <xbee_com_parse+0x1a4>)
 8017b04:	f8c3 54a0 	str.w	r5, [r3, #1184]	; 0x4a0
    newByte = (char)readByte;
 8017b08:	b2e5      	uxtb	r5, r4
    if( ( newByte == FRAME_START_BYTE ) || ( buf_end_pos == XBEE_COM_BUF_SIZE ) )
 8017b0a:	2d7e      	cmp	r5, #126	; 0x7e
 8017b0c:	d092      	beq.n	8017a34 <xbee_com_parse+0x34>
 8017b0e:	f8b3 34a4 	ldrh.w	r3, [r3, #1188]	; 0x4a4
 8017b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017b16:	d196      	bne.n	8017a46 <xbee_com_parse+0x46>
 8017b18:	e78c      	b.n	8017a34 <xbee_com_parse+0x34>
        chprintf(debug_stream, "\n\rcorrupted xbee packet\n\r",(char)readByte);
 8017b1a:	b2e2      	uxtb	r2, r4
 8017b1c:	491f      	ldr	r1, [pc, #124]	; (8017b9c <xbee_com_parse+0x19c>)
 8017b1e:	4b20      	ldr	r3, [pc, #128]	; (8017ba0 <xbee_com_parse+0x1a0>)
 8017b20:	6818      	ldr	r0, [r3, #0]
 8017b22:	f7f4 f9ed 	bl	800bf00 <chprintf>
 8017b26:	e78a      	b.n	8017a3e <xbee_com_parse+0x3e>
    if( ( xbee_com_buffer[0] == FRAME_START_BYTE ) && ( buf_end_pos >= FRAME_MIN_PACKET_LENGTH ) )
 8017b28:	2b04      	cmp	r3, #4
 8017b2a:	d998      	bls.n	8017a5e <xbee_com_parse+0x5e>
      new_packet.packet_length = ( xbee_com_buffer[FRAME_LENGTH_OFFSET_H] << 8 ) + xbee_com_buffer[ FRAME_LENGTH_OFFSET_L ];
 8017b2c:	491e      	ldr	r1, [pc, #120]	; (8017ba8 <xbee_com_parse+0x1a8>)
 8017b2e:	7848      	ldrb	r0, [r1, #1]
 8017b30:	788a      	ldrb	r2, [r1, #2]
 8017b32:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8017b36:	b292      	uxth	r2, r2
 8017b38:	491f      	ldr	r1, [pc, #124]	; (8017bb8 <xbee_com_parse+0x1b8>)
 8017b3a:	800a      	strh	r2, [r1, #0]
      if( buf_end_pos == ( new_packet.packet_length + FRAME_DATA_OFFSET + 1 ) )
 8017b3c:	3204      	adds	r2, #4
 8017b3e:	4293      	cmp	r3, r2
 8017b40:	d18d      	bne.n	8017a5e <xbee_com_parse+0x5e>
        uint8_t xbee_checksum = 0;
 8017b42:	2500      	movs	r5, #0
        for(i=FRAME_DATA_OFFSET;i < ( buf_end_pos - 1 );i++)
 8017b44:	2403      	movs	r4, #3
 8017b46:	e00a      	b.n	8017b5e <xbee_com_parse+0x15e>
          xbee_checksum += xbee_com_buffer[i];
 8017b48:	4b17      	ldr	r3, [pc, #92]	; (8017ba8 <xbee_com_parse+0x1a8>)
 8017b4a:	5d1a      	ldrb	r2, [r3, r4]
 8017b4c:	4415      	add	r5, r2
 8017b4e:	b2ed      	uxtb	r5, r5
          chprintf( debug_stream, "0x%02X ", xbee_com_buffer[i]);
 8017b50:	491a      	ldr	r1, [pc, #104]	; (8017bbc <xbee_com_parse+0x1bc>)
 8017b52:	4b13      	ldr	r3, [pc, #76]	; (8017ba0 <xbee_com_parse+0x1a0>)
 8017b54:	6818      	ldr	r0, [r3, #0]
 8017b56:	f7f4 f9d3 	bl	800bf00 <chprintf>
        for(i=FRAME_DATA_OFFSET;i < ( buf_end_pos - 1 );i++)
 8017b5a:	3401      	adds	r4, #1
 8017b5c:	b2e4      	uxtb	r4, r4
 8017b5e:	4b11      	ldr	r3, [pc, #68]	; (8017ba4 <xbee_com_parse+0x1a4>)
 8017b60:	f8b3 34a4 	ldrh.w	r3, [r3, #1188]	; 0x4a4
 8017b64:	3b01      	subs	r3, #1
 8017b66:	429c      	cmp	r4, r3
 8017b68:	dbee      	blt.n	8017b48 <xbee_com_parse+0x148>
        xbee_checksum = 0xFF - xbee_checksum;
 8017b6a:	43ed      	mvns	r5, r5
 8017b6c:	b2ed      	uxtb	r5, r5
        if( xbee_checksum == xbee_com_buffer[i])
 8017b6e:	4b0e      	ldr	r3, [pc, #56]	; (8017ba8 <xbee_com_parse+0x1a8>)
 8017b70:	5d1b      	ldrb	r3, [r3, r4]
 8017b72:	42ab      	cmp	r3, r5
 8017b74:	f47f af73 	bne.w	8017a5e <xbee_com_parse+0x5e>
          new_packet.type = xbee_com_buffer[FRAME_TYPE_OFFSET];   //packet type
 8017b78:	4b0b      	ldr	r3, [pc, #44]	; (8017ba8 <xbee_com_parse+0x1a8>)
 8017b7a:	78da      	ldrb	r2, [r3, #3]
 8017b7c:	4b0e      	ldr	r3, [pc, #56]	; (8017bb8 <xbee_com_parse+0x1b8>)
 8017b7e:	709a      	strb	r2, [r3, #2]
          xbee_process_packet();
 8017b80:	f7ff fea6 	bl	80178d0 <xbee_process_packet>
          buf_end_pos = 0; //reset buffer
 8017b84:	4b07      	ldr	r3, [pc, #28]	; (8017ba4 <xbee_com_parse+0x1a4>)
 8017b86:	2200      	movs	r2, #0
 8017b88:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
 8017b8c:	e767      	b.n	8017a5e <xbee_com_parse+0x5e>
}
 8017b8e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8017b92:	bf00      	nop
 8017b94:	2000f7a0 	.word	0x2000f7a0
 8017b98:	0801a4a0 	.word	0x0801a4a0
 8017b9c:	0801b074 	.word	0x0801b074
 8017ba0:	2000fb74 	.word	0x2000fb74
 8017ba4:	2000423c 	.word	0x2000423c
 8017ba8:	2000ffac 	.word	0x2000ffac
 8017bac:	200050f8 	.word	0x200050f8
 8017bb0:	000186a0 	.word	0x000186a0
 8017bb4:	0001869f 	.word	0x0001869f
 8017bb8:	200100ac 	.word	0x200100ac
 8017bbc:	0801b090 	.word	0x0801b090

08017bc0 <__aeabi_ldivmod>:
 8017bc0:	b97b      	cbnz	r3, 8017be2 <__aeabi_ldivmod+0x22>
 8017bc2:	b972      	cbnz	r2, 8017be2 <__aeabi_ldivmod+0x22>
 8017bc4:	2900      	cmp	r1, #0
 8017bc6:	bfbe      	ittt	lt
 8017bc8:	2000      	movlt	r0, #0
 8017bca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8017bce:	e006      	blt.n	8017bde <__aeabi_ldivmod+0x1e>
 8017bd0:	bf08      	it	eq
 8017bd2:	2800      	cmpeq	r0, #0
 8017bd4:	bf1c      	itt	ne
 8017bd6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8017bda:	f04f 30ff 	movne.w	r0, #4294967295
 8017bde:	f000 b9bd 	b.w	8017f5c <__aeabi_idiv0>
 8017be2:	f1ad 0c08 	sub.w	ip, sp, #8
 8017be6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8017bea:	2900      	cmp	r1, #0
 8017bec:	db09      	blt.n	8017c02 <__aeabi_ldivmod+0x42>
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	db1a      	blt.n	8017c28 <__aeabi_ldivmod+0x68>
 8017bf2:	f000 f84d 	bl	8017c90 <__udivmoddi4>
 8017bf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017bfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017bfe:	b004      	add	sp, #16
 8017c00:	4770      	bx	lr
 8017c02:	4240      	negs	r0, r0
 8017c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	db1b      	blt.n	8017c44 <__aeabi_ldivmod+0x84>
 8017c0c:	f000 f840 	bl	8017c90 <__udivmoddi4>
 8017c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c18:	b004      	add	sp, #16
 8017c1a:	4240      	negs	r0, r0
 8017c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8017c20:	4252      	negs	r2, r2
 8017c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8017c26:	4770      	bx	lr
 8017c28:	4252      	negs	r2, r2
 8017c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8017c2e:	f000 f82f 	bl	8017c90 <__udivmoddi4>
 8017c32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c3a:	b004      	add	sp, #16
 8017c3c:	4240      	negs	r0, r0
 8017c3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8017c42:	4770      	bx	lr
 8017c44:	4252      	negs	r2, r2
 8017c46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8017c4a:	f000 f821 	bl	8017c90 <__udivmoddi4>
 8017c4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017c52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c56:	b004      	add	sp, #16
 8017c58:	4252      	negs	r2, r2
 8017c5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8017c5e:	4770      	bx	lr

08017c60 <__aeabi_uldivmod>:
 8017c60:	b953      	cbnz	r3, 8017c78 <__aeabi_uldivmod+0x18>
 8017c62:	b94a      	cbnz	r2, 8017c78 <__aeabi_uldivmod+0x18>
 8017c64:	2900      	cmp	r1, #0
 8017c66:	bf08      	it	eq
 8017c68:	2800      	cmpeq	r0, #0
 8017c6a:	bf1c      	itt	ne
 8017c6c:	f04f 31ff 	movne.w	r1, #4294967295
 8017c70:	f04f 30ff 	movne.w	r0, #4294967295
 8017c74:	f000 b972 	b.w	8017f5c <__aeabi_idiv0>
 8017c78:	f1ad 0c08 	sub.w	ip, sp, #8
 8017c7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8017c80:	f000 f806 	bl	8017c90 <__udivmoddi4>
 8017c84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017c88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c8c:	b004      	add	sp, #16
 8017c8e:	4770      	bx	lr

08017c90 <__udivmoddi4>:
 8017c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c94:	9e08      	ldr	r6, [sp, #32]
 8017c96:	4604      	mov	r4, r0
 8017c98:	4688      	mov	r8, r1
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d14b      	bne.n	8017d36 <__udivmoddi4+0xa6>
 8017c9e:	428a      	cmp	r2, r1
 8017ca0:	4615      	mov	r5, r2
 8017ca2:	d967      	bls.n	8017d74 <__udivmoddi4+0xe4>
 8017ca4:	fab2 f282 	clz	r2, r2
 8017ca8:	b14a      	cbz	r2, 8017cbe <__udivmoddi4+0x2e>
 8017caa:	f1c2 0720 	rsb	r7, r2, #32
 8017cae:	fa01 f302 	lsl.w	r3, r1, r2
 8017cb2:	fa20 f707 	lsr.w	r7, r0, r7
 8017cb6:	4095      	lsls	r5, r2
 8017cb8:	ea47 0803 	orr.w	r8, r7, r3
 8017cbc:	4094      	lsls	r4, r2
 8017cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8017cc2:	0c23      	lsrs	r3, r4, #16
 8017cc4:	fbb8 f7fe 	udiv	r7, r8, lr
 8017cc8:	fa1f fc85 	uxth.w	ip, r5
 8017ccc:	fb0e 8817 	mls	r8, lr, r7, r8
 8017cd0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8017cd4:	fb07 f10c 	mul.w	r1, r7, ip
 8017cd8:	4299      	cmp	r1, r3
 8017cda:	d909      	bls.n	8017cf0 <__udivmoddi4+0x60>
 8017cdc:	18eb      	adds	r3, r5, r3
 8017cde:	f107 30ff 	add.w	r0, r7, #4294967295
 8017ce2:	f080 811b 	bcs.w	8017f1c <__udivmoddi4+0x28c>
 8017ce6:	4299      	cmp	r1, r3
 8017ce8:	f240 8118 	bls.w	8017f1c <__udivmoddi4+0x28c>
 8017cec:	3f02      	subs	r7, #2
 8017cee:	442b      	add	r3, r5
 8017cf0:	1a5b      	subs	r3, r3, r1
 8017cf2:	b2a4      	uxth	r4, r4
 8017cf4:	fbb3 f0fe 	udiv	r0, r3, lr
 8017cf8:	fb0e 3310 	mls	r3, lr, r0, r3
 8017cfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8017d00:	fb00 fc0c 	mul.w	ip, r0, ip
 8017d04:	45a4      	cmp	ip, r4
 8017d06:	d909      	bls.n	8017d1c <__udivmoddi4+0x8c>
 8017d08:	192c      	adds	r4, r5, r4
 8017d0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8017d0e:	f080 8107 	bcs.w	8017f20 <__udivmoddi4+0x290>
 8017d12:	45a4      	cmp	ip, r4
 8017d14:	f240 8104 	bls.w	8017f20 <__udivmoddi4+0x290>
 8017d18:	3802      	subs	r0, #2
 8017d1a:	442c      	add	r4, r5
 8017d1c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8017d20:	eba4 040c 	sub.w	r4, r4, ip
 8017d24:	2700      	movs	r7, #0
 8017d26:	b11e      	cbz	r6, 8017d30 <__udivmoddi4+0xa0>
 8017d28:	40d4      	lsrs	r4, r2
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	e9c6 4300 	strd	r4, r3, [r6]
 8017d30:	4639      	mov	r1, r7
 8017d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d36:	428b      	cmp	r3, r1
 8017d38:	d909      	bls.n	8017d4e <__udivmoddi4+0xbe>
 8017d3a:	2e00      	cmp	r6, #0
 8017d3c:	f000 80eb 	beq.w	8017f16 <__udivmoddi4+0x286>
 8017d40:	2700      	movs	r7, #0
 8017d42:	e9c6 0100 	strd	r0, r1, [r6]
 8017d46:	4638      	mov	r0, r7
 8017d48:	4639      	mov	r1, r7
 8017d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d4e:	fab3 f783 	clz	r7, r3
 8017d52:	2f00      	cmp	r7, #0
 8017d54:	d147      	bne.n	8017de6 <__udivmoddi4+0x156>
 8017d56:	428b      	cmp	r3, r1
 8017d58:	d302      	bcc.n	8017d60 <__udivmoddi4+0xd0>
 8017d5a:	4282      	cmp	r2, r0
 8017d5c:	f200 80fa 	bhi.w	8017f54 <__udivmoddi4+0x2c4>
 8017d60:	1a84      	subs	r4, r0, r2
 8017d62:	eb61 0303 	sbc.w	r3, r1, r3
 8017d66:	2001      	movs	r0, #1
 8017d68:	4698      	mov	r8, r3
 8017d6a:	2e00      	cmp	r6, #0
 8017d6c:	d0e0      	beq.n	8017d30 <__udivmoddi4+0xa0>
 8017d6e:	e9c6 4800 	strd	r4, r8, [r6]
 8017d72:	e7dd      	b.n	8017d30 <__udivmoddi4+0xa0>
 8017d74:	b902      	cbnz	r2, 8017d78 <__udivmoddi4+0xe8>
 8017d76:	deff      	udf	#255	; 0xff
 8017d78:	fab2 f282 	clz	r2, r2
 8017d7c:	2a00      	cmp	r2, #0
 8017d7e:	f040 808f 	bne.w	8017ea0 <__udivmoddi4+0x210>
 8017d82:	1b49      	subs	r1, r1, r5
 8017d84:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8017d88:	fa1f f885 	uxth.w	r8, r5
 8017d8c:	2701      	movs	r7, #1
 8017d8e:	fbb1 fcfe 	udiv	ip, r1, lr
 8017d92:	0c23      	lsrs	r3, r4, #16
 8017d94:	fb0e 111c 	mls	r1, lr, ip, r1
 8017d98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017d9c:	fb08 f10c 	mul.w	r1, r8, ip
 8017da0:	4299      	cmp	r1, r3
 8017da2:	d907      	bls.n	8017db4 <__udivmoddi4+0x124>
 8017da4:	18eb      	adds	r3, r5, r3
 8017da6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8017daa:	d202      	bcs.n	8017db2 <__udivmoddi4+0x122>
 8017dac:	4299      	cmp	r1, r3
 8017dae:	f200 80cd 	bhi.w	8017f4c <__udivmoddi4+0x2bc>
 8017db2:	4684      	mov	ip, r0
 8017db4:	1a59      	subs	r1, r3, r1
 8017db6:	b2a3      	uxth	r3, r4
 8017db8:	fbb1 f0fe 	udiv	r0, r1, lr
 8017dbc:	fb0e 1410 	mls	r4, lr, r0, r1
 8017dc0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8017dc4:	fb08 f800 	mul.w	r8, r8, r0
 8017dc8:	45a0      	cmp	r8, r4
 8017dca:	d907      	bls.n	8017ddc <__udivmoddi4+0x14c>
 8017dcc:	192c      	adds	r4, r5, r4
 8017dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8017dd2:	d202      	bcs.n	8017dda <__udivmoddi4+0x14a>
 8017dd4:	45a0      	cmp	r8, r4
 8017dd6:	f200 80b6 	bhi.w	8017f46 <__udivmoddi4+0x2b6>
 8017dda:	4618      	mov	r0, r3
 8017ddc:	eba4 0408 	sub.w	r4, r4, r8
 8017de0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8017de4:	e79f      	b.n	8017d26 <__udivmoddi4+0x96>
 8017de6:	f1c7 0c20 	rsb	ip, r7, #32
 8017dea:	40bb      	lsls	r3, r7
 8017dec:	fa22 fe0c 	lsr.w	lr, r2, ip
 8017df0:	ea4e 0e03 	orr.w	lr, lr, r3
 8017df4:	fa01 f407 	lsl.w	r4, r1, r7
 8017df8:	fa20 f50c 	lsr.w	r5, r0, ip
 8017dfc:	fa21 f30c 	lsr.w	r3, r1, ip
 8017e00:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8017e04:	4325      	orrs	r5, r4
 8017e06:	fbb3 f9f8 	udiv	r9, r3, r8
 8017e0a:	0c2c      	lsrs	r4, r5, #16
 8017e0c:	fb08 3319 	mls	r3, r8, r9, r3
 8017e10:	fa1f fa8e 	uxth.w	sl, lr
 8017e14:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8017e18:	fb09 f40a 	mul.w	r4, r9, sl
 8017e1c:	429c      	cmp	r4, r3
 8017e1e:	fa02 f207 	lsl.w	r2, r2, r7
 8017e22:	fa00 f107 	lsl.w	r1, r0, r7
 8017e26:	d90b      	bls.n	8017e40 <__udivmoddi4+0x1b0>
 8017e28:	eb1e 0303 	adds.w	r3, lr, r3
 8017e2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8017e30:	f080 8087 	bcs.w	8017f42 <__udivmoddi4+0x2b2>
 8017e34:	429c      	cmp	r4, r3
 8017e36:	f240 8084 	bls.w	8017f42 <__udivmoddi4+0x2b2>
 8017e3a:	f1a9 0902 	sub.w	r9, r9, #2
 8017e3e:	4473      	add	r3, lr
 8017e40:	1b1b      	subs	r3, r3, r4
 8017e42:	b2ad      	uxth	r5, r5
 8017e44:	fbb3 f0f8 	udiv	r0, r3, r8
 8017e48:	fb08 3310 	mls	r3, r8, r0, r3
 8017e4c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8017e50:	fb00 fa0a 	mul.w	sl, r0, sl
 8017e54:	45a2      	cmp	sl, r4
 8017e56:	d908      	bls.n	8017e6a <__udivmoddi4+0x1da>
 8017e58:	eb1e 0404 	adds.w	r4, lr, r4
 8017e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017e60:	d26b      	bcs.n	8017f3a <__udivmoddi4+0x2aa>
 8017e62:	45a2      	cmp	sl, r4
 8017e64:	d969      	bls.n	8017f3a <__udivmoddi4+0x2aa>
 8017e66:	3802      	subs	r0, #2
 8017e68:	4474      	add	r4, lr
 8017e6a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8017e6e:	fba0 8902 	umull	r8, r9, r0, r2
 8017e72:	eba4 040a 	sub.w	r4, r4, sl
 8017e76:	454c      	cmp	r4, r9
 8017e78:	46c2      	mov	sl, r8
 8017e7a:	464b      	mov	r3, r9
 8017e7c:	d354      	bcc.n	8017f28 <__udivmoddi4+0x298>
 8017e7e:	d051      	beq.n	8017f24 <__udivmoddi4+0x294>
 8017e80:	2e00      	cmp	r6, #0
 8017e82:	d069      	beq.n	8017f58 <__udivmoddi4+0x2c8>
 8017e84:	ebb1 050a 	subs.w	r5, r1, sl
 8017e88:	eb64 0403 	sbc.w	r4, r4, r3
 8017e8c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8017e90:	40fd      	lsrs	r5, r7
 8017e92:	40fc      	lsrs	r4, r7
 8017e94:	ea4c 0505 	orr.w	r5, ip, r5
 8017e98:	e9c6 5400 	strd	r5, r4, [r6]
 8017e9c:	2700      	movs	r7, #0
 8017e9e:	e747      	b.n	8017d30 <__udivmoddi4+0xa0>
 8017ea0:	f1c2 0320 	rsb	r3, r2, #32
 8017ea4:	fa20 f703 	lsr.w	r7, r0, r3
 8017ea8:	4095      	lsls	r5, r2
 8017eaa:	fa01 f002 	lsl.w	r0, r1, r2
 8017eae:	fa21 f303 	lsr.w	r3, r1, r3
 8017eb2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8017eb6:	4338      	orrs	r0, r7
 8017eb8:	0c01      	lsrs	r1, r0, #16
 8017eba:	fbb3 f7fe 	udiv	r7, r3, lr
 8017ebe:	fa1f f885 	uxth.w	r8, r5
 8017ec2:	fb0e 3317 	mls	r3, lr, r7, r3
 8017ec6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8017eca:	fb07 f308 	mul.w	r3, r7, r8
 8017ece:	428b      	cmp	r3, r1
 8017ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8017ed4:	d907      	bls.n	8017ee6 <__udivmoddi4+0x256>
 8017ed6:	1869      	adds	r1, r5, r1
 8017ed8:	f107 3cff 	add.w	ip, r7, #4294967295
 8017edc:	d22f      	bcs.n	8017f3e <__udivmoddi4+0x2ae>
 8017ede:	428b      	cmp	r3, r1
 8017ee0:	d92d      	bls.n	8017f3e <__udivmoddi4+0x2ae>
 8017ee2:	3f02      	subs	r7, #2
 8017ee4:	4429      	add	r1, r5
 8017ee6:	1acb      	subs	r3, r1, r3
 8017ee8:	b281      	uxth	r1, r0
 8017eea:	fbb3 f0fe 	udiv	r0, r3, lr
 8017eee:	fb0e 3310 	mls	r3, lr, r0, r3
 8017ef2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8017ef6:	fb00 f308 	mul.w	r3, r0, r8
 8017efa:	428b      	cmp	r3, r1
 8017efc:	d907      	bls.n	8017f0e <__udivmoddi4+0x27e>
 8017efe:	1869      	adds	r1, r5, r1
 8017f00:	f100 3cff 	add.w	ip, r0, #4294967295
 8017f04:	d217      	bcs.n	8017f36 <__udivmoddi4+0x2a6>
 8017f06:	428b      	cmp	r3, r1
 8017f08:	d915      	bls.n	8017f36 <__udivmoddi4+0x2a6>
 8017f0a:	3802      	subs	r0, #2
 8017f0c:	4429      	add	r1, r5
 8017f0e:	1ac9      	subs	r1, r1, r3
 8017f10:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8017f14:	e73b      	b.n	8017d8e <__udivmoddi4+0xfe>
 8017f16:	4637      	mov	r7, r6
 8017f18:	4630      	mov	r0, r6
 8017f1a:	e709      	b.n	8017d30 <__udivmoddi4+0xa0>
 8017f1c:	4607      	mov	r7, r0
 8017f1e:	e6e7      	b.n	8017cf0 <__udivmoddi4+0x60>
 8017f20:	4618      	mov	r0, r3
 8017f22:	e6fb      	b.n	8017d1c <__udivmoddi4+0x8c>
 8017f24:	4541      	cmp	r1, r8
 8017f26:	d2ab      	bcs.n	8017e80 <__udivmoddi4+0x1f0>
 8017f28:	ebb8 0a02 	subs.w	sl, r8, r2
 8017f2c:	eb69 020e 	sbc.w	r2, r9, lr
 8017f30:	3801      	subs	r0, #1
 8017f32:	4613      	mov	r3, r2
 8017f34:	e7a4      	b.n	8017e80 <__udivmoddi4+0x1f0>
 8017f36:	4660      	mov	r0, ip
 8017f38:	e7e9      	b.n	8017f0e <__udivmoddi4+0x27e>
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	e795      	b.n	8017e6a <__udivmoddi4+0x1da>
 8017f3e:	4667      	mov	r7, ip
 8017f40:	e7d1      	b.n	8017ee6 <__udivmoddi4+0x256>
 8017f42:	4681      	mov	r9, r0
 8017f44:	e77c      	b.n	8017e40 <__udivmoddi4+0x1b0>
 8017f46:	3802      	subs	r0, #2
 8017f48:	442c      	add	r4, r5
 8017f4a:	e747      	b.n	8017ddc <__udivmoddi4+0x14c>
 8017f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8017f50:	442b      	add	r3, r5
 8017f52:	e72f      	b.n	8017db4 <__udivmoddi4+0x124>
 8017f54:	4638      	mov	r0, r7
 8017f56:	e708      	b.n	8017d6a <__udivmoddi4+0xda>
 8017f58:	4637      	mov	r7, r6
 8017f5a:	e6e9      	b.n	8017d30 <__udivmoddi4+0xa0>

08017f5c <__aeabi_idiv0>:
 8017f5c:	4770      	bx	lr
 8017f5e:	bf00      	nop

08017f60 <memcpy>:
 8017f60:	4684      	mov	ip, r0
 8017f62:	ea41 0300 	orr.w	r3, r1, r0
 8017f66:	f013 0303 	ands.w	r3, r3, #3
 8017f6a:	d16d      	bne.n	8018048 <memcpy+0xe8>
 8017f6c:	3a40      	subs	r2, #64	; 0x40
 8017f6e:	d341      	bcc.n	8017ff4 <memcpy+0x94>
 8017f70:	f851 3b04 	ldr.w	r3, [r1], #4
 8017f74:	f840 3b04 	str.w	r3, [r0], #4
 8017f78:	f851 3b04 	ldr.w	r3, [r1], #4
 8017f7c:	f840 3b04 	str.w	r3, [r0], #4
 8017f80:	f851 3b04 	ldr.w	r3, [r1], #4
 8017f84:	f840 3b04 	str.w	r3, [r0], #4
 8017f88:	f851 3b04 	ldr.w	r3, [r1], #4
 8017f8c:	f840 3b04 	str.w	r3, [r0], #4
 8017f90:	f851 3b04 	ldr.w	r3, [r1], #4
 8017f94:	f840 3b04 	str.w	r3, [r0], #4
 8017f98:	f851 3b04 	ldr.w	r3, [r1], #4
 8017f9c:	f840 3b04 	str.w	r3, [r0], #4
 8017fa0:	f851 3b04 	ldr.w	r3, [r1], #4
 8017fa4:	f840 3b04 	str.w	r3, [r0], #4
 8017fa8:	f851 3b04 	ldr.w	r3, [r1], #4
 8017fac:	f840 3b04 	str.w	r3, [r0], #4
 8017fb0:	f851 3b04 	ldr.w	r3, [r1], #4
 8017fb4:	f840 3b04 	str.w	r3, [r0], #4
 8017fb8:	f851 3b04 	ldr.w	r3, [r1], #4
 8017fbc:	f840 3b04 	str.w	r3, [r0], #4
 8017fc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8017fc4:	f840 3b04 	str.w	r3, [r0], #4
 8017fc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8017fcc:	f840 3b04 	str.w	r3, [r0], #4
 8017fd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8017fd4:	f840 3b04 	str.w	r3, [r0], #4
 8017fd8:	f851 3b04 	ldr.w	r3, [r1], #4
 8017fdc:	f840 3b04 	str.w	r3, [r0], #4
 8017fe0:	f851 3b04 	ldr.w	r3, [r1], #4
 8017fe4:	f840 3b04 	str.w	r3, [r0], #4
 8017fe8:	f851 3b04 	ldr.w	r3, [r1], #4
 8017fec:	f840 3b04 	str.w	r3, [r0], #4
 8017ff0:	3a40      	subs	r2, #64	; 0x40
 8017ff2:	d2bd      	bcs.n	8017f70 <memcpy+0x10>
 8017ff4:	3230      	adds	r2, #48	; 0x30
 8017ff6:	d311      	bcc.n	801801c <memcpy+0xbc>
 8017ff8:	f851 3b04 	ldr.w	r3, [r1], #4
 8017ffc:	f840 3b04 	str.w	r3, [r0], #4
 8018000:	f851 3b04 	ldr.w	r3, [r1], #4
 8018004:	f840 3b04 	str.w	r3, [r0], #4
 8018008:	f851 3b04 	ldr.w	r3, [r1], #4
 801800c:	f840 3b04 	str.w	r3, [r0], #4
 8018010:	f851 3b04 	ldr.w	r3, [r1], #4
 8018014:	f840 3b04 	str.w	r3, [r0], #4
 8018018:	3a10      	subs	r2, #16
 801801a:	d2ed      	bcs.n	8017ff8 <memcpy+0x98>
 801801c:	320c      	adds	r2, #12
 801801e:	d305      	bcc.n	801802c <memcpy+0xcc>
 8018020:	f851 3b04 	ldr.w	r3, [r1], #4
 8018024:	f840 3b04 	str.w	r3, [r0], #4
 8018028:	3a04      	subs	r2, #4
 801802a:	d2f9      	bcs.n	8018020 <memcpy+0xc0>
 801802c:	3204      	adds	r2, #4
 801802e:	d008      	beq.n	8018042 <memcpy+0xe2>
 8018030:	07d2      	lsls	r2, r2, #31
 8018032:	bf1c      	itt	ne
 8018034:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8018038:	f800 3b01 	strbne.w	r3, [r0], #1
 801803c:	d301      	bcc.n	8018042 <memcpy+0xe2>
 801803e:	880b      	ldrh	r3, [r1, #0]
 8018040:	8003      	strh	r3, [r0, #0]
 8018042:	4660      	mov	r0, ip
 8018044:	4770      	bx	lr
 8018046:	bf00      	nop
 8018048:	2a08      	cmp	r2, #8
 801804a:	d313      	bcc.n	8018074 <memcpy+0x114>
 801804c:	078b      	lsls	r3, r1, #30
 801804e:	d08d      	beq.n	8017f6c <memcpy+0xc>
 8018050:	f010 0303 	ands.w	r3, r0, #3
 8018054:	d08a      	beq.n	8017f6c <memcpy+0xc>
 8018056:	f1c3 0304 	rsb	r3, r3, #4
 801805a:	1ad2      	subs	r2, r2, r3
 801805c:	07db      	lsls	r3, r3, #31
 801805e:	bf1c      	itt	ne
 8018060:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8018064:	f800 3b01 	strbne.w	r3, [r0], #1
 8018068:	d380      	bcc.n	8017f6c <memcpy+0xc>
 801806a:	f831 3b02 	ldrh.w	r3, [r1], #2
 801806e:	f820 3b02 	strh.w	r3, [r0], #2
 8018072:	e77b      	b.n	8017f6c <memcpy+0xc>
 8018074:	3a04      	subs	r2, #4
 8018076:	d3d9      	bcc.n	801802c <memcpy+0xcc>
 8018078:	3a01      	subs	r2, #1
 801807a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801807e:	f800 3b01 	strb.w	r3, [r0], #1
 8018082:	d2f9      	bcs.n	8018078 <memcpy+0x118>
 8018084:	780b      	ldrb	r3, [r1, #0]
 8018086:	7003      	strb	r3, [r0, #0]
 8018088:	784b      	ldrb	r3, [r1, #1]
 801808a:	7043      	strb	r3, [r0, #1]
 801808c:	788b      	ldrb	r3, [r1, #2]
 801808e:	7083      	strb	r3, [r0, #2]
 8018090:	4660      	mov	r0, ip
 8018092:	4770      	bx	lr
	...
 80180a0:	eba2 0003 	sub.w	r0, r2, r3
 80180a4:	4770      	bx	lr
 80180a6:	bf00      	nop

080180a8 <strcmp>:
 80180a8:	7802      	ldrb	r2, [r0, #0]
 80180aa:	780b      	ldrb	r3, [r1, #0]
 80180ac:	2a01      	cmp	r2, #1
 80180ae:	bf28      	it	cs
 80180b0:	429a      	cmpcs	r2, r3
 80180b2:	d1f5      	bne.n	80180a0 <memcpy+0x140>
 80180b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 80180b8:	ea40 0401 	orr.w	r4, r0, r1
 80180bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80180c0:	f06f 0c00 	mvn.w	ip, #0
 80180c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 80180c8:	b312      	cbz	r2, 8018110 <strcmp+0x68>
 80180ca:	ea80 0401 	eor.w	r4, r0, r1
 80180ce:	f014 0f07 	tst.w	r4, #7
 80180d2:	d16a      	bne.n	80181aa <strcmp+0x102>
 80180d4:	f000 0407 	and.w	r4, r0, #7
 80180d8:	f020 0007 	bic.w	r0, r0, #7
 80180dc:	f004 0503 	and.w	r5, r4, #3
 80180e0:	f021 0107 	bic.w	r1, r1, #7
 80180e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80180e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80180ec:	f014 0f04 	tst.w	r4, #4
 80180f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80180f4:	fa0c f405 	lsl.w	r4, ip, r5
 80180f8:	ea62 0204 	orn	r2, r2, r4
 80180fc:	ea66 0604 	orn	r6, r6, r4
 8018100:	d00a      	beq.n	8018118 <strcmp+0x70>
 8018102:	ea63 0304 	orn	r3, r3, r4
 8018106:	4662      	mov	r2, ip
 8018108:	ea67 0704 	orn	r7, r7, r4
 801810c:	4666      	mov	r6, ip
 801810e:	e003      	b.n	8018118 <strcmp+0x70>
 8018110:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8018114:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8018118:	fa82 f54c 	uadd8	r5, r2, ip
 801811c:	ea82 0406 	eor.w	r4, r2, r6
 8018120:	faa4 f48c 	sel	r4, r4, ip
 8018124:	bb6c      	cbnz	r4, 8018182 <strcmp+0xda>
 8018126:	fa83 f54c 	uadd8	r5, r3, ip
 801812a:	ea83 0507 	eor.w	r5, r3, r7
 801812e:	faa5 f58c 	sel	r5, r5, ip
 8018132:	b995      	cbnz	r5, 801815a <strcmp+0xb2>
 8018134:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8018138:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 801813c:	fa82 f54c 	uadd8	r5, r2, ip
 8018140:	ea82 0406 	eor.w	r4, r2, r6
 8018144:	faa4 f48c 	sel	r4, r4, ip
 8018148:	fa83 f54c 	uadd8	r5, r3, ip
 801814c:	ea83 0507 	eor.w	r5, r3, r7
 8018150:	faa5 f58c 	sel	r5, r5, ip
 8018154:	4325      	orrs	r5, r4
 8018156:	d0db      	beq.n	8018110 <strcmp+0x68>
 8018158:	b99c      	cbnz	r4, 8018182 <strcmp+0xda>
 801815a:	ba2d      	rev	r5, r5
 801815c:	fab5 f485 	clz	r4, r5
 8018160:	f024 0407 	bic.w	r4, r4, #7
 8018164:	fa27 f104 	lsr.w	r1, r7, r4
 8018168:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801816c:	fa23 f304 	lsr.w	r3, r3, r4
 8018170:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8018174:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8018178:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 801817c:	eba0 0001 	sub.w	r0, r0, r1
 8018180:	4770      	bx	lr
 8018182:	ba24      	rev	r4, r4
 8018184:	fab4 f484 	clz	r4, r4
 8018188:	f024 0407 	bic.w	r4, r4, #7
 801818c:	fa26 f104 	lsr.w	r1, r6, r4
 8018190:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018194:	fa22 f204 	lsr.w	r2, r2, r4
 8018198:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 801819c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80181a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80181a4:	eba0 0001 	sub.w	r0, r0, r1
 80181a8:	4770      	bx	lr
 80181aa:	f014 0f03 	tst.w	r4, #3
 80181ae:	d13c      	bne.n	801822a <strcmp+0x182>
 80181b0:	f010 0403 	ands.w	r4, r0, #3
 80181b4:	d128      	bne.n	8018208 <strcmp+0x160>
 80181b6:	f850 2b08 	ldr.w	r2, [r0], #8
 80181ba:	f851 3b08 	ldr.w	r3, [r1], #8
 80181be:	fa82 f54c 	uadd8	r5, r2, ip
 80181c2:	ea82 0503 	eor.w	r5, r2, r3
 80181c6:	faa5 f58c 	sel	r5, r5, ip
 80181ca:	b95d      	cbnz	r5, 80181e4 <strcmp+0x13c>
 80181cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80181d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80181d4:	fa82 f54c 	uadd8	r5, r2, ip
 80181d8:	ea82 0503 	eor.w	r5, r2, r3
 80181dc:	faa5 f58c 	sel	r5, r5, ip
 80181e0:	2d00      	cmp	r5, #0
 80181e2:	d0e8      	beq.n	80181b6 <strcmp+0x10e>
 80181e4:	ba2d      	rev	r5, r5
 80181e6:	fab5 f485 	clz	r4, r5
 80181ea:	f024 0407 	bic.w	r4, r4, #7
 80181ee:	fa23 f104 	lsr.w	r1, r3, r4
 80181f2:	fa22 f204 	lsr.w	r2, r2, r4
 80181f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80181fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80181fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8018202:	eba0 0001 	sub.w	r0, r0, r1
 8018206:	4770      	bx	lr
 8018208:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801820c:	f020 0003 	bic.w	r0, r0, #3
 8018210:	f850 2b08 	ldr.w	r2, [r0], #8
 8018214:	f021 0103 	bic.w	r1, r1, #3
 8018218:	f851 3b08 	ldr.w	r3, [r1], #8
 801821c:	fa0c f404 	lsl.w	r4, ip, r4
 8018220:	ea62 0204 	orn	r2, r2, r4
 8018224:	ea63 0304 	orn	r3, r3, r4
 8018228:	e7c9      	b.n	80181be <strcmp+0x116>
 801822a:	f010 0403 	ands.w	r4, r0, #3
 801822e:	d01a      	beq.n	8018266 <strcmp+0x1be>
 8018230:	eba1 0104 	sub.w	r1, r1, r4
 8018234:	f020 0003 	bic.w	r0, r0, #3
 8018238:	07e4      	lsls	r4, r4, #31
 801823a:	f850 2b04 	ldr.w	r2, [r0], #4
 801823e:	d006      	beq.n	801824e <strcmp+0x1a6>
 8018240:	d20f      	bcs.n	8018262 <strcmp+0x1ba>
 8018242:	788b      	ldrb	r3, [r1, #2]
 8018244:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8018248:	1ae4      	subs	r4, r4, r3
 801824a:	d106      	bne.n	801825a <strcmp+0x1b2>
 801824c:	b12b      	cbz	r3, 801825a <strcmp+0x1b2>
 801824e:	78cb      	ldrb	r3, [r1, #3]
 8018250:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8018254:	1ae4      	subs	r4, r4, r3
 8018256:	d100      	bne.n	801825a <strcmp+0x1b2>
 8018258:	b91b      	cbnz	r3, 8018262 <strcmp+0x1ba>
 801825a:	4620      	mov	r0, r4
 801825c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8018260:	4770      	bx	lr
 8018262:	f101 0104 	add.w	r1, r1, #4
 8018266:	f850 2b04 	ldr.w	r2, [r0], #4
 801826a:	07cc      	lsls	r4, r1, #31
 801826c:	f021 0103 	bic.w	r1, r1, #3
 8018270:	f851 3b04 	ldr.w	r3, [r1], #4
 8018274:	d848      	bhi.n	8018308 <strcmp+0x260>
 8018276:	d224      	bcs.n	80182c2 <strcmp+0x21a>
 8018278:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 801827c:	fa82 f54c 	uadd8	r5, r2, ip
 8018280:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8018284:	faa5 f58c 	sel	r5, r5, ip
 8018288:	d10a      	bne.n	80182a0 <strcmp+0x1f8>
 801828a:	b965      	cbnz	r5, 80182a6 <strcmp+0x1fe>
 801828c:	f851 3b04 	ldr.w	r3, [r1], #4
 8018290:	ea84 0402 	eor.w	r4, r4, r2
 8018294:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8018298:	d10e      	bne.n	80182b8 <strcmp+0x210>
 801829a:	f850 2b04 	ldr.w	r2, [r0], #4
 801829e:	e7eb      	b.n	8018278 <strcmp+0x1d0>
 80182a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80182a4:	e055      	b.n	8018352 <strcmp+0x2aa>
 80182a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80182aa:	d14d      	bne.n	8018348 <strcmp+0x2a0>
 80182ac:	7808      	ldrb	r0, [r1, #0]
 80182ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80182b2:	f1c0 0000 	rsb	r0, r0, #0
 80182b6:	4770      	bx	lr
 80182b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80182bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80182c0:	e047      	b.n	8018352 <strcmp+0x2aa>
 80182c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 80182c6:	fa82 f54c 	uadd8	r5, r2, ip
 80182ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 80182ce:	faa5 f58c 	sel	r5, r5, ip
 80182d2:	d10a      	bne.n	80182ea <strcmp+0x242>
 80182d4:	b965      	cbnz	r5, 80182f0 <strcmp+0x248>
 80182d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80182da:	ea84 0402 	eor.w	r4, r4, r2
 80182de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 80182e2:	d10c      	bne.n	80182fe <strcmp+0x256>
 80182e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80182e8:	e7eb      	b.n	80182c2 <strcmp+0x21a>
 80182ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80182ee:	e030      	b.n	8018352 <strcmp+0x2aa>
 80182f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 80182f4:	d128      	bne.n	8018348 <strcmp+0x2a0>
 80182f6:	880b      	ldrh	r3, [r1, #0]
 80182f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80182fc:	e029      	b.n	8018352 <strcmp+0x2aa>
 80182fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8018302:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8018306:	e024      	b.n	8018352 <strcmp+0x2aa>
 8018308:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 801830c:	fa82 f54c 	uadd8	r5, r2, ip
 8018310:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8018314:	faa5 f58c 	sel	r5, r5, ip
 8018318:	d10a      	bne.n	8018330 <strcmp+0x288>
 801831a:	b965      	cbnz	r5, 8018336 <strcmp+0x28e>
 801831c:	f851 3b04 	ldr.w	r3, [r1], #4
 8018320:	ea84 0402 	eor.w	r4, r4, r2
 8018324:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8018328:	d109      	bne.n	801833e <strcmp+0x296>
 801832a:	f850 2b04 	ldr.w	r2, [r0], #4
 801832e:	e7eb      	b.n	8018308 <strcmp+0x260>
 8018330:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8018334:	e00d      	b.n	8018352 <strcmp+0x2aa>
 8018336:	f015 0fff 	tst.w	r5, #255	; 0xff
 801833a:	d105      	bne.n	8018348 <strcmp+0x2a0>
 801833c:	680b      	ldr	r3, [r1, #0]
 801833e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8018342:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018346:	e004      	b.n	8018352 <strcmp+0x2aa>
 8018348:	f04f 0000 	mov.w	r0, #0
 801834c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8018350:	4770      	bx	lr
 8018352:	ba12      	rev	r2, r2
 8018354:	ba1b      	rev	r3, r3
 8018356:	fa82 f44c 	uadd8	r4, r2, ip
 801835a:	ea82 0403 	eor.w	r4, r2, r3
 801835e:	faa4 f58c 	sel	r5, r4, ip
 8018362:	fab5 f485 	clz	r4, r5
 8018366:	fa02 f204 	lsl.w	r2, r2, r4
 801836a:	fa03 f304 	lsl.w	r3, r3, r4
 801836e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8018372:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8018376:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 801837a:	4770      	bx	lr
 801837c:	0000      	movs	r0, r0
	...

08018380 <strlen>:
 8018380:	f890 f000 	pld	[r0]
 8018384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8018388:	f020 0107 	bic.w	r1, r0, #7
 801838c:	f06f 0c00 	mvn.w	ip, #0
 8018390:	f010 0407 	ands.w	r4, r0, #7
 8018394:	f891 f020 	pld	[r1, #32]
 8018398:	f040 8049 	bne.w	801842e <strlen+0xae>
 801839c:	f04f 0400 	mov.w	r4, #0
 80183a0:	f06f 0007 	mvn.w	r0, #7
 80183a4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80183a8:	f891 f040 	pld	[r1, #64]	; 0x40
 80183ac:	f100 0008 	add.w	r0, r0, #8
 80183b0:	fa82 f24c 	uadd8	r2, r2, ip
 80183b4:	faa4 f28c 	sel	r2, r4, ip
 80183b8:	fa83 f34c 	uadd8	r3, r3, ip
 80183bc:	faa2 f38c 	sel	r3, r2, ip
 80183c0:	bb4b      	cbnz	r3, 8018416 <strlen+0x96>
 80183c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80183c6:	fa82 f24c 	uadd8	r2, r2, ip
 80183ca:	f100 0008 	add.w	r0, r0, #8
 80183ce:	faa4 f28c 	sel	r2, r4, ip
 80183d2:	fa83 f34c 	uadd8	r3, r3, ip
 80183d6:	faa2 f38c 	sel	r3, r2, ip
 80183da:	b9e3      	cbnz	r3, 8018416 <strlen+0x96>
 80183dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80183e0:	fa82 f24c 	uadd8	r2, r2, ip
 80183e4:	f100 0008 	add.w	r0, r0, #8
 80183e8:	faa4 f28c 	sel	r2, r4, ip
 80183ec:	fa83 f34c 	uadd8	r3, r3, ip
 80183f0:	faa2 f38c 	sel	r3, r2, ip
 80183f4:	b97b      	cbnz	r3, 8018416 <strlen+0x96>
 80183f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80183fa:	f101 0120 	add.w	r1, r1, #32
 80183fe:	fa82 f24c 	uadd8	r2, r2, ip
 8018402:	f100 0008 	add.w	r0, r0, #8
 8018406:	faa4 f28c 	sel	r2, r4, ip
 801840a:	fa83 f34c 	uadd8	r3, r3, ip
 801840e:	faa2 f38c 	sel	r3, r2, ip
 8018412:	2b00      	cmp	r3, #0
 8018414:	d0c6      	beq.n	80183a4 <strlen+0x24>
 8018416:	2a00      	cmp	r2, #0
 8018418:	bf04      	itt	eq
 801841a:	3004      	addeq	r0, #4
 801841c:	461a      	moveq	r2, r3
 801841e:	ba12      	rev	r2, r2
 8018420:	fab2 f282 	clz	r2, r2
 8018424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8018428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 801842c:	4770      	bx	lr
 801842e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8018432:	f004 0503 	and.w	r5, r4, #3
 8018436:	f1c4 0000 	rsb	r0, r4, #0
 801843a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801843e:	f014 0f04 	tst.w	r4, #4
 8018442:	f891 f040 	pld	[r1, #64]	; 0x40
 8018446:	fa0c f505 	lsl.w	r5, ip, r5
 801844a:	ea62 0205 	orn	r2, r2, r5
 801844e:	bf1c      	itt	ne
 8018450:	ea63 0305 	ornne	r3, r3, r5
 8018454:	4662      	movne	r2, ip
 8018456:	f04f 0400 	mov.w	r4, #0
 801845a:	e7a9      	b.n	80183b0 <strlen+0x30>

0801845c <memcmp>:
 801845c:	2a03      	cmp	r2, #3
 801845e:	b470      	push	{r4, r5, r6}
 8018460:	d914      	bls.n	801848c <memcmp+0x30>
 8018462:	ea40 0501 	orr.w	r5, r0, r1
 8018466:	07ad      	lsls	r5, r5, #30
 8018468:	4604      	mov	r4, r0
 801846a:	460b      	mov	r3, r1
 801846c:	d122      	bne.n	80184b4 <memcmp+0x58>
 801846e:	681d      	ldr	r5, [r3, #0]
 8018470:	6826      	ldr	r6, [r4, #0]
 8018472:	42ae      	cmp	r6, r5
 8018474:	4619      	mov	r1, r3
 8018476:	4620      	mov	r0, r4
 8018478:	f103 0304 	add.w	r3, r3, #4
 801847c:	f104 0404 	add.w	r4, r4, #4
 8018480:	d118      	bne.n	80184b4 <memcmp+0x58>
 8018482:	3a04      	subs	r2, #4
 8018484:	2a03      	cmp	r2, #3
 8018486:	4620      	mov	r0, r4
 8018488:	4619      	mov	r1, r3
 801848a:	d8f0      	bhi.n	801846e <memcmp+0x12>
 801848c:	1e54      	subs	r4, r2, #1
 801848e:	b172      	cbz	r2, 80184ae <memcmp+0x52>
 8018490:	7802      	ldrb	r2, [r0, #0]
 8018492:	780b      	ldrb	r3, [r1, #0]
 8018494:	429a      	cmp	r2, r3
 8018496:	bf08      	it	eq
 8018498:	1864      	addeq	r4, r4, r1
 801849a:	d006      	beq.n	80184aa <memcmp+0x4e>
 801849c:	e00c      	b.n	80184b8 <memcmp+0x5c>
 801849e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80184a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80184a6:	429a      	cmp	r2, r3
 80184a8:	d106      	bne.n	80184b8 <memcmp+0x5c>
 80184aa:	42a1      	cmp	r1, r4
 80184ac:	d1f7      	bne.n	801849e <memcmp+0x42>
 80184ae:	2000      	movs	r0, #0
 80184b0:	bc70      	pop	{r4, r5, r6}
 80184b2:	4770      	bx	lr
 80184b4:	1e54      	subs	r4, r2, #1
 80184b6:	e7eb      	b.n	8018490 <memcmp+0x34>
 80184b8:	1ad0      	subs	r0, r2, r3
 80184ba:	bc70      	pop	{r4, r5, r6}
 80184bc:	4770      	bx	lr
 80184be:	bf00      	nop

080184c0 <memset>:
 80184c0:	b4f0      	push	{r4, r5, r6, r7}
 80184c2:	0786      	lsls	r6, r0, #30
 80184c4:	d043      	beq.n	801854e <memset+0x8e>
 80184c6:	1e54      	subs	r4, r2, #1
 80184c8:	2a00      	cmp	r2, #0
 80184ca:	d03e      	beq.n	801854a <memset+0x8a>
 80184cc:	b2ca      	uxtb	r2, r1
 80184ce:	4603      	mov	r3, r0
 80184d0:	e002      	b.n	80184d8 <memset+0x18>
 80184d2:	f114 34ff 	adds.w	r4, r4, #4294967295
 80184d6:	d338      	bcc.n	801854a <memset+0x8a>
 80184d8:	f803 2b01 	strb.w	r2, [r3], #1
 80184dc:	079d      	lsls	r5, r3, #30
 80184de:	d1f8      	bne.n	80184d2 <memset+0x12>
 80184e0:	2c03      	cmp	r4, #3
 80184e2:	d92b      	bls.n	801853c <memset+0x7c>
 80184e4:	b2cd      	uxtb	r5, r1
 80184e6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80184ea:	2c0f      	cmp	r4, #15
 80184ec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80184f0:	d916      	bls.n	8018520 <memset+0x60>
 80184f2:	f1a4 0710 	sub.w	r7, r4, #16
 80184f6:	093f      	lsrs	r7, r7, #4
 80184f8:	f103 0620 	add.w	r6, r3, #32
 80184fc:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8018500:	f103 0210 	add.w	r2, r3, #16
 8018504:	e942 5504 	strd	r5, r5, [r2, #-16]
 8018508:	e942 5502 	strd	r5, r5, [r2, #-8]
 801850c:	3210      	adds	r2, #16
 801850e:	42b2      	cmp	r2, r6
 8018510:	d1f8      	bne.n	8018504 <memset+0x44>
 8018512:	f004 040f 	and.w	r4, r4, #15
 8018516:	3701      	adds	r7, #1
 8018518:	2c03      	cmp	r4, #3
 801851a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 801851e:	d90d      	bls.n	801853c <memset+0x7c>
 8018520:	461e      	mov	r6, r3
 8018522:	4622      	mov	r2, r4
 8018524:	3a04      	subs	r2, #4
 8018526:	2a03      	cmp	r2, #3
 8018528:	f846 5b04 	str.w	r5, [r6], #4
 801852c:	d8fa      	bhi.n	8018524 <memset+0x64>
 801852e:	1f22      	subs	r2, r4, #4
 8018530:	f022 0203 	bic.w	r2, r2, #3
 8018534:	3204      	adds	r2, #4
 8018536:	4413      	add	r3, r2
 8018538:	f004 0403 	and.w	r4, r4, #3
 801853c:	b12c      	cbz	r4, 801854a <memset+0x8a>
 801853e:	b2c9      	uxtb	r1, r1
 8018540:	441c      	add	r4, r3
 8018542:	f803 1b01 	strb.w	r1, [r3], #1
 8018546:	429c      	cmp	r4, r3
 8018548:	d1fb      	bne.n	8018542 <memset+0x82>
 801854a:	bcf0      	pop	{r4, r5, r6, r7}
 801854c:	4770      	bx	lr
 801854e:	4614      	mov	r4, r2
 8018550:	4603      	mov	r3, r0
 8018552:	e7c5      	b.n	80184e0 <memset+0x20>

08018554 <strcat>:
 8018554:	0783      	lsls	r3, r0, #30
 8018556:	b510      	push	{r4, lr}
 8018558:	4604      	mov	r4, r0
 801855a:	d110      	bne.n	801857e <strcat+0x2a>
 801855c:	6802      	ldr	r2, [r0, #0]
 801855e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8018562:	ea23 0302 	bic.w	r3, r3, r2
 8018566:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 801856a:	d108      	bne.n	801857e <strcat+0x2a>
 801856c:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8018570:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8018574:	ea23 0302 	bic.w	r3, r3, r2
 8018578:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 801857c:	d0f6      	beq.n	801856c <strcat+0x18>
 801857e:	7803      	ldrb	r3, [r0, #0]
 8018580:	b11b      	cbz	r3, 801858a <strcat+0x36>
 8018582:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8018586:	2b00      	cmp	r3, #0
 8018588:	d1fb      	bne.n	8018582 <strcat+0x2e>
 801858a:	f000 f877 	bl	801867c <strcpy>
 801858e:	4620      	mov	r0, r4
 8018590:	bd10      	pop	{r4, pc}
 8018592:	bf00      	nop

08018594 <strchr>:
 8018594:	b2c9      	uxtb	r1, r1
 8018596:	f000 0303 	and.w	r3, r0, #3
 801859a:	2900      	cmp	r1, #0
 801859c:	d043      	beq.n	8018626 <strchr+0x92>
 801859e:	b17b      	cbz	r3, 80185c0 <strchr+0x2c>
 80185a0:	7803      	ldrb	r3, [r0, #0]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d067      	beq.n	8018676 <strchr+0xe2>
 80185a6:	4299      	cmp	r1, r3
 80185a8:	d03c      	beq.n	8018624 <strchr+0x90>
 80185aa:	1c43      	adds	r3, r0, #1
 80185ac:	e005      	b.n	80185ba <strchr+0x26>
 80185ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185b2:	2a00      	cmp	r2, #0
 80185b4:	d05d      	beq.n	8018672 <strchr+0xde>
 80185b6:	428a      	cmp	r2, r1
 80185b8:	d034      	beq.n	8018624 <strchr+0x90>
 80185ba:	079a      	lsls	r2, r3, #30
 80185bc:	4618      	mov	r0, r3
 80185be:	d1f6      	bne.n	80185ae <strchr+0x1a>
 80185c0:	b470      	push	{r4, r5, r6}
 80185c2:	6804      	ldr	r4, [r0, #0]
 80185c4:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 80185c8:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80185cc:	ea86 0504 	eor.w	r5, r6, r4
 80185d0:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 80185d4:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80185d8:	ea23 0305 	bic.w	r3, r3, r5
 80185dc:	ea22 0204 	bic.w	r2, r2, r4
 80185e0:	4313      	orrs	r3, r2
 80185e2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80185e6:	d10f      	bne.n	8018608 <strchr+0x74>
 80185e8:	f850 4f04 	ldr.w	r4, [r0, #4]!
 80185ec:	ea84 0506 	eor.w	r5, r4, r6
 80185f0:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 80185f4:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 80185f8:	ea22 0205 	bic.w	r2, r2, r5
 80185fc:	ea23 0304 	bic.w	r3, r3, r4
 8018600:	4313      	orrs	r3, r2
 8018602:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8018606:	d0ef      	beq.n	80185e8 <strchr+0x54>
 8018608:	7803      	ldrb	r3, [r0, #0]
 801860a:	b143      	cbz	r3, 801861e <strchr+0x8a>
 801860c:	4299      	cmp	r1, r3
 801860e:	d102      	bne.n	8018616 <strchr+0x82>
 8018610:	e006      	b.n	8018620 <strchr+0x8c>
 8018612:	428b      	cmp	r3, r1
 8018614:	d004      	beq.n	8018620 <strchr+0x8c>
 8018616:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801861a:	2b00      	cmp	r3, #0
 801861c:	d1f9      	bne.n	8018612 <strchr+0x7e>
 801861e:	4618      	mov	r0, r3
 8018620:	bc70      	pop	{r4, r5, r6}
 8018622:	4770      	bx	lr
 8018624:	4770      	bx	lr
 8018626:	b15b      	cbz	r3, 8018640 <strchr+0xac>
 8018628:	7803      	ldrb	r3, [r0, #0]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d0fa      	beq.n	8018624 <strchr+0x90>
 801862e:	1c43      	adds	r3, r0, #1
 8018630:	e003      	b.n	801863a <strchr+0xa6>
 8018632:	7802      	ldrb	r2, [r0, #0]
 8018634:	3301      	adds	r3, #1
 8018636:	2a00      	cmp	r2, #0
 8018638:	d0f4      	beq.n	8018624 <strchr+0x90>
 801863a:	0799      	lsls	r1, r3, #30
 801863c:	4618      	mov	r0, r3
 801863e:	d1f8      	bne.n	8018632 <strchr+0x9e>
 8018640:	6802      	ldr	r2, [r0, #0]
 8018642:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8018646:	ea23 0302 	bic.w	r3, r3, r2
 801864a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 801864e:	d108      	bne.n	8018662 <strchr+0xce>
 8018650:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8018654:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8018658:	ea23 0302 	bic.w	r3, r3, r2
 801865c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8018660:	d0f6      	beq.n	8018650 <strchr+0xbc>
 8018662:	7803      	ldrb	r3, [r0, #0]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d0dd      	beq.n	8018624 <strchr+0x90>
 8018668:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801866c:	2b00      	cmp	r3, #0
 801866e:	d1fb      	bne.n	8018668 <strchr+0xd4>
 8018670:	4770      	bx	lr
 8018672:	4610      	mov	r0, r2
 8018674:	4770      	bx	lr
 8018676:	4618      	mov	r0, r3
 8018678:	4770      	bx	lr
 801867a:	bf00      	nop

0801867c <strcpy>:
 801867c:	ea80 0201 	eor.w	r2, r0, r1
 8018680:	4684      	mov	ip, r0
 8018682:	f012 0f03 	tst.w	r2, #3
 8018686:	d14f      	bne.n	8018728 <strcpy+0xac>
 8018688:	f011 0f03 	tst.w	r1, #3
 801868c:	d132      	bne.n	80186f4 <strcpy+0x78>
 801868e:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8018692:	f011 0f04 	tst.w	r1, #4
 8018696:	f851 3b04 	ldr.w	r3, [r1], #4
 801869a:	d00b      	beq.n	80186b4 <strcpy+0x38>
 801869c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80186a0:	439a      	bics	r2, r3
 80186a2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80186a6:	bf04      	itt	eq
 80186a8:	f84c 3b04 	streq.w	r3, [ip], #4
 80186ac:	f851 3b04 	ldreq.w	r3, [r1], #4
 80186b0:	d116      	bne.n	80186e0 <strcpy+0x64>
 80186b2:	bf00      	nop
 80186b4:	f851 4b04 	ldr.w	r4, [r1], #4
 80186b8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80186bc:	439a      	bics	r2, r3
 80186be:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80186c2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80186c6:	d10b      	bne.n	80186e0 <strcpy+0x64>
 80186c8:	f84c 3b04 	str.w	r3, [ip], #4
 80186cc:	43a2      	bics	r2, r4
 80186ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80186d2:	bf04      	itt	eq
 80186d4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80186d8:	f84c 4b04 	streq.w	r4, [ip], #4
 80186dc:	d0ea      	beq.n	80186b4 <strcpy+0x38>
 80186de:	4623      	mov	r3, r4
 80186e0:	f80c 3b01 	strb.w	r3, [ip], #1
 80186e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80186e8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80186ec:	d1f8      	bne.n	80186e0 <strcpy+0x64>
 80186ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186f2:	4770      	bx	lr
 80186f4:	f011 0f01 	tst.w	r1, #1
 80186f8:	d006      	beq.n	8018708 <strcpy+0x8c>
 80186fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186fe:	f80c 2b01 	strb.w	r2, [ip], #1
 8018702:	2a00      	cmp	r2, #0
 8018704:	bf08      	it	eq
 8018706:	4770      	bxeq	lr
 8018708:	f011 0f02 	tst.w	r1, #2
 801870c:	d0bf      	beq.n	801868e <strcpy+0x12>
 801870e:	f831 2b02 	ldrh.w	r2, [r1], #2
 8018712:	f012 0fff 	tst.w	r2, #255	; 0xff
 8018716:	bf16      	itet	ne
 8018718:	f82c 2b02 	strhne.w	r2, [ip], #2
 801871c:	f88c 2000 	strbeq.w	r2, [ip]
 8018720:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8018724:	d1b3      	bne.n	801868e <strcpy+0x12>
 8018726:	4770      	bx	lr
 8018728:	f811 2b01 	ldrb.w	r2, [r1], #1
 801872c:	f80c 2b01 	strb.w	r2, [ip], #1
 8018730:	2a00      	cmp	r2, #0
 8018732:	d1f9      	bne.n	8018728 <strcpy+0xac>
 8018734:	4770      	bx	lr
 8018736:	bf00      	nop

08018738 <strncmp>:
 8018738:	2a00      	cmp	r2, #0
 801873a:	d041      	beq.n	80187c0 <strncmp+0x88>
 801873c:	ea40 0301 	orr.w	r3, r0, r1
 8018740:	f013 0303 	ands.w	r3, r3, #3
 8018744:	b4f0      	push	{r4, r5, r6, r7}
 8018746:	d125      	bne.n	8018794 <strncmp+0x5c>
 8018748:	2a03      	cmp	r2, #3
 801874a:	d923      	bls.n	8018794 <strncmp+0x5c>
 801874c:	6804      	ldr	r4, [r0, #0]
 801874e:	680d      	ldr	r5, [r1, #0]
 8018750:	42ac      	cmp	r4, r5
 8018752:	d11f      	bne.n	8018794 <strncmp+0x5c>
 8018754:	3a04      	subs	r2, #4
 8018756:	d035      	beq.n	80187c4 <strncmp+0x8c>
 8018758:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 801875c:	ea25 0404 	bic.w	r4, r5, r4
 8018760:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8018764:	d131      	bne.n	80187ca <strncmp+0x92>
 8018766:	1d07      	adds	r7, r0, #4
 8018768:	1d0d      	adds	r5, r1, #4
 801876a:	e00d      	b.n	8018788 <strncmp+0x50>
 801876c:	f857 3b04 	ldr.w	r3, [r7], #4
 8018770:	680e      	ldr	r6, [r1, #0]
 8018772:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8018776:	42b3      	cmp	r3, r6
 8018778:	ea24 0403 	bic.w	r4, r4, r3
 801877c:	d10a      	bne.n	8018794 <strncmp+0x5c>
 801877e:	3a04      	subs	r2, #4
 8018780:	d020      	beq.n	80187c4 <strncmp+0x8c>
 8018782:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8018786:	d11d      	bne.n	80187c4 <strncmp+0x8c>
 8018788:	2a03      	cmp	r2, #3
 801878a:	4629      	mov	r1, r5
 801878c:	4638      	mov	r0, r7
 801878e:	f105 0504 	add.w	r5, r5, #4
 8018792:	d8eb      	bhi.n	801876c <strncmp+0x34>
 8018794:	7803      	ldrb	r3, [r0, #0]
 8018796:	780c      	ldrb	r4, [r1, #0]
 8018798:	429c      	cmp	r4, r3
 801879a:	f102 32ff 	add.w	r2, r2, #4294967295
 801879e:	d10c      	bne.n	80187ba <strncmp+0x82>
 80187a0:	b182      	cbz	r2, 80187c4 <strncmp+0x8c>
 80187a2:	b914      	cbnz	r4, 80187aa <strncmp+0x72>
 80187a4:	e00e      	b.n	80187c4 <strncmp+0x8c>
 80187a6:	b16a      	cbz	r2, 80187c4 <strncmp+0x8c>
 80187a8:	b17b      	cbz	r3, 80187ca <strncmp+0x92>
 80187aa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80187ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80187b2:	42a3      	cmp	r3, r4
 80187b4:	f102 32ff 	add.w	r2, r2, #4294967295
 80187b8:	d0f5      	beq.n	80187a6 <strncmp+0x6e>
 80187ba:	1b18      	subs	r0, r3, r4
 80187bc:	bcf0      	pop	{r4, r5, r6, r7}
 80187be:	4770      	bx	lr
 80187c0:	4610      	mov	r0, r2
 80187c2:	4770      	bx	lr
 80187c4:	2000      	movs	r0, #0
 80187c6:	bcf0      	pop	{r4, r5, r6, r7}
 80187c8:	4770      	bx	lr
 80187ca:	4618      	mov	r0, r3
 80187cc:	e7f6      	b.n	80187bc <strncmp+0x84>
 80187ce:	bf00      	nop

080187d0 <strncpy>:
 80187d0:	ea40 0301 	orr.w	r3, r0, r1
 80187d4:	079b      	lsls	r3, r3, #30
 80187d6:	b470      	push	{r4, r5, r6}
 80187d8:	d12a      	bne.n	8018830 <strncpy+0x60>
 80187da:	2a03      	cmp	r2, #3
 80187dc:	d928      	bls.n	8018830 <strncpy+0x60>
 80187de:	460c      	mov	r4, r1
 80187e0:	4603      	mov	r3, r0
 80187e2:	4621      	mov	r1, r4
 80187e4:	f854 6b04 	ldr.w	r6, [r4], #4
 80187e8:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 80187ec:	ea25 0506 	bic.w	r5, r5, r6
 80187f0:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 80187f4:	d106      	bne.n	8018804 <strncpy+0x34>
 80187f6:	3a04      	subs	r2, #4
 80187f8:	2a03      	cmp	r2, #3
 80187fa:	f843 6b04 	str.w	r6, [r3], #4
 80187fe:	4621      	mov	r1, r4
 8018800:	d8ef      	bhi.n	80187e2 <strncpy+0x12>
 8018802:	b19a      	cbz	r2, 801882c <strncpy+0x5c>
 8018804:	780c      	ldrb	r4, [r1, #0]
 8018806:	701c      	strb	r4, [r3, #0]
 8018808:	3a01      	subs	r2, #1
 801880a:	3301      	adds	r3, #1
 801880c:	b13c      	cbz	r4, 801881e <strncpy+0x4e>
 801880e:	b16a      	cbz	r2, 801882c <strncpy+0x5c>
 8018810:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018814:	f803 4b01 	strb.w	r4, [r3], #1
 8018818:	3a01      	subs	r2, #1
 801881a:	2c00      	cmp	r4, #0
 801881c:	d1f7      	bne.n	801880e <strncpy+0x3e>
 801881e:	b12a      	cbz	r2, 801882c <strncpy+0x5c>
 8018820:	441a      	add	r2, r3
 8018822:	2100      	movs	r1, #0
 8018824:	f803 1b01 	strb.w	r1, [r3], #1
 8018828:	4293      	cmp	r3, r2
 801882a:	d1fb      	bne.n	8018824 <strncpy+0x54>
 801882c:	bc70      	pop	{r4, r5, r6}
 801882e:	4770      	bx	lr
 8018830:	4603      	mov	r3, r0
 8018832:	e7e6      	b.n	8018802 <strncpy+0x32>

08018834 <strpbrk>:
 8018834:	b430      	push	{r4, r5}
 8018836:	7804      	ldrb	r4, [r0, #0]
 8018838:	b1dc      	cbz	r4, 8018872 <strpbrk+0x3e>
 801883a:	780d      	ldrb	r5, [r1, #0]
 801883c:	b19d      	cbz	r5, 8018866 <strpbrk+0x32>
 801883e:	42ac      	cmp	r4, r5
 8018840:	d00f      	beq.n	8018862 <strpbrk+0x2e>
 8018842:	460a      	mov	r2, r1
 8018844:	e001      	b.n	801884a <strpbrk+0x16>
 8018846:	429c      	cmp	r4, r3
 8018848:	d00b      	beq.n	8018862 <strpbrk+0x2e>
 801884a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801884e:	2b00      	cmp	r3, #0
 8018850:	d1f9      	bne.n	8018846 <strpbrk+0x12>
 8018852:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8018856:	2c00      	cmp	r4, #0
 8018858:	d1f0      	bne.n	801883c <strpbrk+0x8>
 801885a:	7813      	ldrb	r3, [r2, #0]
 801885c:	2b00      	cmp	r3, #0
 801885e:	bf08      	it	eq
 8018860:	2000      	moveq	r0, #0
 8018862:	bc30      	pop	{r4, r5}
 8018864:	4770      	bx	lr
 8018866:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 801886a:	460a      	mov	r2, r1
 801886c:	2c00      	cmp	r4, #0
 801886e:	d1e5      	bne.n	801883c <strpbrk+0x8>
 8018870:	e7f3      	b.n	801885a <strpbrk+0x26>
 8018872:	4620      	mov	r0, r4
 8018874:	e7f5      	b.n	8018862 <strpbrk+0x2e>
 8018876:	bf00      	nop

08018878 <strspn>:
 8018878:	b470      	push	{r4, r5, r6}
 801887a:	7804      	ldrb	r4, [r0, #0]
 801887c:	b1a4      	cbz	r4, 80188a8 <strspn+0x30>
 801887e:	780d      	ldrb	r5, [r1, #0]
 8018880:	4606      	mov	r6, r0
 8018882:	b14d      	cbz	r5, 8018898 <strspn+0x20>
 8018884:	42a5      	cmp	r5, r4
 8018886:	d00a      	beq.n	801889e <strspn+0x26>
 8018888:	460a      	mov	r2, r1
 801888a:	e001      	b.n	8018890 <strspn+0x18>
 801888c:	42a3      	cmp	r3, r4
 801888e:	d006      	beq.n	801889e <strspn+0x26>
 8018890:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8018894:	2b00      	cmp	r3, #0
 8018896:	d1f9      	bne.n	801888c <strspn+0x14>
 8018898:	1b80      	subs	r0, r0, r6
 801889a:	bc70      	pop	{r4, r5, r6}
 801889c:	4770      	bx	lr
 801889e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80188a2:	2c00      	cmp	r4, #0
 80188a4:	d1ed      	bne.n	8018882 <strspn+0xa>
 80188a6:	e7f7      	b.n	8018898 <strspn+0x20>
 80188a8:	4620      	mov	r0, r4
 80188aa:	e7f6      	b.n	801889a <strspn+0x22>

080188ac <_strtoul_l.isra.0>:
 80188ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188b0:	460d      	mov	r5, r1
 80188b2:	4607      	mov	r7, r0
 80188b4:	4616      	mov	r6, r2
 80188b6:	4698      	mov	r8, r3
 80188b8:	468a      	mov	sl, r1
 80188ba:	e000      	b.n	80188be <_strtoul_l.isra.0+0x12>
 80188bc:	46a2      	mov	sl, r4
 80188be:	4654      	mov	r4, sl
 80188c0:	9808      	ldr	r0, [sp, #32]
 80188c2:	f814 9b01 	ldrb.w	r9, [r4], #1
 80188c6:	f000 f8fd 	bl	8018ac4 <__locale_ctype_ptr_l>
 80188ca:	4448      	add	r0, r9
 80188cc:	7840      	ldrb	r0, [r0, #1]
 80188ce:	f010 0008 	ands.w	r0, r0, #8
 80188d2:	d1f3      	bne.n	80188bc <_strtoul_l.isra.0+0x10>
 80188d4:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 80188d8:	d05c      	beq.n	8018994 <_strtoul_l.isra.0+0xe8>
 80188da:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80188de:	bf0a      	itet	eq
 80188e0:	f89a 1001 	ldrbeq.w	r1, [sl, #1]
 80188e4:	4649      	movne	r1, r9
 80188e6:	f10a 0402 	addeq.w	r4, sl, #2
 80188ea:	f1b8 0f00 	cmp.w	r8, #0
 80188ee:	d00c      	beq.n	801890a <_strtoul_l.isra.0+0x5e>
 80188f0:	f1b8 0f10 	cmp.w	r8, #16
 80188f4:	d054      	beq.n	80189a0 <_strtoul_l.isra.0+0xf4>
 80188f6:	f04f 3eff 	mov.w	lr, #4294967295
 80188fa:	fbbe fef8 	udiv	lr, lr, r8
 80188fe:	fb08 fa0e 	mul.w	sl, r8, lr
 8018902:	ea6f 0a0a 	mvn.w	sl, sl
 8018906:	46c1      	mov	r9, r8
 8018908:	e008      	b.n	801891c <_strtoul_l.isra.0+0x70>
 801890a:	2930      	cmp	r1, #48	; 0x30
 801890c:	d050      	beq.n	80189b0 <_strtoul_l.isra.0+0x104>
 801890e:	f04f 080a 	mov.w	r8, #10
 8018912:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 80189f4 <_strtoul_l.isra.0+0x148>
 8018916:	46c1      	mov	r9, r8
 8018918:	f04f 0a05 	mov.w	sl, #5
 801891c:	2300      	movs	r3, #0
 801891e:	469c      	mov	ip, r3
 8018920:	e007      	b.n	8018932 <_strtoul_l.isra.0+0x86>
 8018922:	45f4      	cmp	ip, lr
 8018924:	d813      	bhi.n	801894e <_strtoul_l.isra.0+0xa2>
 8018926:	d028      	beq.n	801897a <_strtoul_l.isra.0+0xce>
 8018928:	fb09 2c0c 	mla	ip, r9, ip, r2
 801892c:	2301      	movs	r3, #1
 801892e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018932:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018936:	2a09      	cmp	r2, #9
 8018938:	d905      	bls.n	8018946 <_strtoul_l.isra.0+0x9a>
 801893a:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 801893e:	2a19      	cmp	r2, #25
 8018940:	d808      	bhi.n	8018954 <_strtoul_l.isra.0+0xa8>
 8018942:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
 8018946:	4590      	cmp	r8, r2
 8018948:	dd0c      	ble.n	8018964 <_strtoul_l.isra.0+0xb8>
 801894a:	2b00      	cmp	r3, #0
 801894c:	dae9      	bge.n	8018922 <_strtoul_l.isra.0+0x76>
 801894e:	f04f 33ff 	mov.w	r3, #4294967295
 8018952:	e7ec      	b.n	801892e <_strtoul_l.isra.0+0x82>
 8018954:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 8018958:	2a19      	cmp	r2, #25
 801895a:	d803      	bhi.n	8018964 <_strtoul_l.isra.0+0xb8>
 801895c:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
 8018960:	4590      	cmp	r8, r2
 8018962:	dcf2      	bgt.n	801894a <_strtoul_l.isra.0+0x9e>
 8018964:	2b00      	cmp	r3, #0
 8018966:	db0d      	blt.n	8018984 <_strtoul_l.isra.0+0xd8>
 8018968:	b108      	cbz	r0, 801896e <_strtoul_l.isra.0+0xc2>
 801896a:	f1cc 0c00 	rsb	ip, ip, #0
 801896e:	b10e      	cbz	r6, 8018974 <_strtoul_l.isra.0+0xc8>
 8018970:	b973      	cbnz	r3, 8018990 <_strtoul_l.isra.0+0xe4>
 8018972:	6035      	str	r5, [r6, #0]
 8018974:	4660      	mov	r0, ip
 8018976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801897a:	4552      	cmp	r2, sl
 801897c:	ddd4      	ble.n	8018928 <_strtoul_l.isra.0+0x7c>
 801897e:	f04f 33ff 	mov.w	r3, #4294967295
 8018982:	e7d4      	b.n	801892e <_strtoul_l.isra.0+0x82>
 8018984:	2322      	movs	r3, #34	; 0x22
 8018986:	603b      	str	r3, [r7, #0]
 8018988:	f04f 3cff 	mov.w	ip, #4294967295
 801898c:	2e00      	cmp	r6, #0
 801898e:	d0f1      	beq.n	8018974 <_strtoul_l.isra.0+0xc8>
 8018990:	1e65      	subs	r5, r4, #1
 8018992:	e7ee      	b.n	8018972 <_strtoul_l.isra.0+0xc6>
 8018994:	f10a 0402 	add.w	r4, sl, #2
 8018998:	f89a 1001 	ldrb.w	r1, [sl, #1]
 801899c:	2001      	movs	r0, #1
 801899e:	e7a4      	b.n	80188ea <_strtoul_l.isra.0+0x3e>
 80189a0:	2930      	cmp	r1, #48	; 0x30
 80189a2:	d012      	beq.n	80189ca <_strtoul_l.isra.0+0x11e>
 80189a4:	f04f 0a0f 	mov.w	sl, #15
 80189a8:	f06f 4e70 	mvn.w	lr, #4026531840	; 0xf0000000
 80189ac:	46c1      	mov	r9, r8
 80189ae:	e7b5      	b.n	801891c <_strtoul_l.isra.0+0x70>
 80189b0:	7823      	ldrb	r3, [r4, #0]
 80189b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80189b6:	2b58      	cmp	r3, #88	; 0x58
 80189b8:	d00c      	beq.n	80189d4 <_strtoul_l.isra.0+0x128>
 80189ba:	f04f 0808 	mov.w	r8, #8
 80189be:	46c1      	mov	r9, r8
 80189c0:	f04f 0a07 	mov.w	sl, #7
 80189c4:	f06f 4e60 	mvn.w	lr, #3758096384	; 0xe0000000
 80189c8:	e7a8      	b.n	801891c <_strtoul_l.isra.0+0x70>
 80189ca:	7823      	ldrb	r3, [r4, #0]
 80189cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80189d0:	2b58      	cmp	r3, #88	; 0x58
 80189d2:	d109      	bne.n	80189e8 <_strtoul_l.isra.0+0x13c>
 80189d4:	f04f 0910 	mov.w	r9, #16
 80189d8:	7861      	ldrb	r1, [r4, #1]
 80189da:	46c8      	mov	r8, r9
 80189dc:	f04f 0a0f 	mov.w	sl, #15
 80189e0:	3402      	adds	r4, #2
 80189e2:	f06f 4e70 	mvn.w	lr, #4026531840	; 0xf0000000
 80189e6:	e799      	b.n	801891c <_strtoul_l.isra.0+0x70>
 80189e8:	46c1      	mov	r9, r8
 80189ea:	f06f 4e70 	mvn.w	lr, #4026531840	; 0xf0000000
 80189ee:	f04f 0a0f 	mov.w	sl, #15
 80189f2:	e793      	b.n	801891c <_strtoul_l.isra.0+0x70>
 80189f4:	19999999 	.word	0x19999999

080189f8 <_strtoul_r>:
 80189f8:	b530      	push	{r4, r5, lr}
 80189fa:	4c06      	ldr	r4, [pc, #24]	; (8018a14 <_strtoul_r+0x1c>)
 80189fc:	4d06      	ldr	r5, [pc, #24]	; (8018a18 <_strtoul_r+0x20>)
 80189fe:	6824      	ldr	r4, [r4, #0]
 8018a00:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8018a02:	b083      	sub	sp, #12
 8018a04:	2c00      	cmp	r4, #0
 8018a06:	bf08      	it	eq
 8018a08:	462c      	moveq	r4, r5
 8018a0a:	9400      	str	r4, [sp, #0]
 8018a0c:	f7ff ff4e 	bl	80188ac <_strtoul_l.isra.0>
 8018a10:	b003      	add	sp, #12
 8018a12:	bd30      	pop	{r4, r5, pc}
 8018a14:	20001a80 	.word	0x20001a80
 8018a18:	20001eb0 	.word	0x20001eb0

08018a1c <strtoul_l>:
 8018a1c:	b510      	push	{r4, lr}
 8018a1e:	b082      	sub	sp, #8
 8018a20:	4c05      	ldr	r4, [pc, #20]	; (8018a38 <strtoul_l+0x1c>)
 8018a22:	9300      	str	r3, [sp, #0]
 8018a24:	6824      	ldr	r4, [r4, #0]
 8018a26:	4613      	mov	r3, r2
 8018a28:	460a      	mov	r2, r1
 8018a2a:	4601      	mov	r1, r0
 8018a2c:	4620      	mov	r0, r4
 8018a2e:	f7ff ff3d 	bl	80188ac <_strtoul_l.isra.0>
 8018a32:	b002      	add	sp, #8
 8018a34:	bd10      	pop	{r4, pc}
 8018a36:	bf00      	nop
 8018a38:	20001a80 	.word	0x20001a80

08018a3c <strtoul>:
 8018a3c:	b530      	push	{r4, r5, lr}
 8018a3e:	4c08      	ldr	r4, [pc, #32]	; (8018a60 <strtoul+0x24>)
 8018a40:	4b08      	ldr	r3, [pc, #32]	; (8018a64 <strtoul+0x28>)
 8018a42:	6825      	ldr	r5, [r4, #0]
 8018a44:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8018a46:	b083      	sub	sp, #12
 8018a48:	2c00      	cmp	r4, #0
 8018a4a:	bf08      	it	eq
 8018a4c:	461c      	moveq	r4, r3
 8018a4e:	9400      	str	r4, [sp, #0]
 8018a50:	4613      	mov	r3, r2
 8018a52:	460a      	mov	r2, r1
 8018a54:	4601      	mov	r1, r0
 8018a56:	4628      	mov	r0, r5
 8018a58:	f7ff ff28 	bl	80188ac <_strtoul_l.isra.0>
 8018a5c:	b003      	add	sp, #12
 8018a5e:	bd30      	pop	{r4, r5, pc}
 8018a60:	20001a80 	.word	0x20001a80
 8018a64:	20001eb0 	.word	0x20001eb0

08018a68 <_setlocale_r>:
 8018a68:	b1b2      	cbz	r2, 8018a98 <_setlocale_r+0x30>
 8018a6a:	b510      	push	{r4, lr}
 8018a6c:	490b      	ldr	r1, [pc, #44]	; (8018a9c <_setlocale_r+0x34>)
 8018a6e:	4610      	mov	r0, r2
 8018a70:	4614      	mov	r4, r2
 8018a72:	f7ff fb19 	bl	80180a8 <strcmp>
 8018a76:	b908      	cbnz	r0, 8018a7c <_setlocale_r+0x14>
 8018a78:	4809      	ldr	r0, [pc, #36]	; (8018aa0 <_setlocale_r+0x38>)
 8018a7a:	bd10      	pop	{r4, pc}
 8018a7c:	4908      	ldr	r1, [pc, #32]	; (8018aa0 <_setlocale_r+0x38>)
 8018a7e:	4620      	mov	r0, r4
 8018a80:	f7ff fb12 	bl	80180a8 <strcmp>
 8018a84:	2800      	cmp	r0, #0
 8018a86:	d0f7      	beq.n	8018a78 <_setlocale_r+0x10>
 8018a88:	4620      	mov	r0, r4
 8018a8a:	4906      	ldr	r1, [pc, #24]	; (8018aa4 <_setlocale_r+0x3c>)
 8018a8c:	f7ff fb0c 	bl	80180a8 <strcmp>
 8018a90:	2800      	cmp	r0, #0
 8018a92:	d0f1      	beq.n	8018a78 <_setlocale_r+0x10>
 8018a94:	2000      	movs	r0, #0
 8018a96:	bd10      	pop	{r4, pc}
 8018a98:	4801      	ldr	r0, [pc, #4]	; (8018aa0 <_setlocale_r+0x38>)
 8018a9a:	4770      	bx	lr
 8018a9c:	0801b0a0 	.word	0x0801b0a0
 8018aa0:	0801b09c 	.word	0x0801b09c
 8018aa4:	0801a5ac 	.word	0x0801a5ac

08018aa8 <__locale_mb_cur_max>:
 8018aa8:	4b04      	ldr	r3, [pc, #16]	; (8018abc <__locale_mb_cur_max+0x14>)
 8018aaa:	4a05      	ldr	r2, [pc, #20]	; (8018ac0 <__locale_mb_cur_max+0x18>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	bf08      	it	eq
 8018ab4:	4613      	moveq	r3, r2
 8018ab6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8018aba:	4770      	bx	lr
 8018abc:	20001a80 	.word	0x20001a80
 8018ac0:	20001eb0 	.word	0x20001eb0

08018ac4 <__locale_ctype_ptr_l>:
 8018ac4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018ac8:	4770      	bx	lr
 8018aca:	bf00      	nop

08018acc <__locale_ctype_ptr>:
 8018acc:	4b04      	ldr	r3, [pc, #16]	; (8018ae0 <__locale_ctype_ptr+0x14>)
 8018ace:	4a05      	ldr	r2, [pc, #20]	; (8018ae4 <__locale_ctype_ptr+0x18>)
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	bf08      	it	eq
 8018ad8:	4613      	moveq	r3, r2
 8018ada:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018ade:	4770      	bx	lr
 8018ae0:	20001a80 	.word	0x20001a80
 8018ae4:	20001eb0 	.word	0x20001eb0

08018ae8 <setlocale>:
 8018ae8:	4b02      	ldr	r3, [pc, #8]	; (8018af4 <setlocale+0xc>)
 8018aea:	460a      	mov	r2, r1
 8018aec:	4601      	mov	r1, r0
 8018aee:	6818      	ldr	r0, [r3, #0]
 8018af0:	f7ff bfba 	b.w	8018a68 <_setlocale_r>
 8018af4:	20001a80 	.word	0x20001a80

08018af8 <_mbtowc_r>:
 8018af8:	b430      	push	{r4, r5}
 8018afa:	4c06      	ldr	r4, [pc, #24]	; (8018b14 <_mbtowc_r+0x1c>)
 8018afc:	4d06      	ldr	r5, [pc, #24]	; (8018b18 <_mbtowc_r+0x20>)
 8018afe:	6824      	ldr	r4, [r4, #0]
 8018b00:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8018b02:	2c00      	cmp	r4, #0
 8018b04:	bf08      	it	eq
 8018b06:	462c      	moveq	r4, r5
 8018b08:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8018b0c:	46a4      	mov	ip, r4
 8018b0e:	bc30      	pop	{r4, r5}
 8018b10:	4760      	bx	ip
 8018b12:	bf00      	nop
 8018b14:	20001a80 	.word	0x20001a80
 8018b18:	20001eb0 	.word	0x20001eb0

08018b1c <__ascii_mbtowc>:
 8018b1c:	b082      	sub	sp, #8
 8018b1e:	b149      	cbz	r1, 8018b34 <__ascii_mbtowc+0x18>
 8018b20:	b15a      	cbz	r2, 8018b3a <__ascii_mbtowc+0x1e>
 8018b22:	b16b      	cbz	r3, 8018b40 <__ascii_mbtowc+0x24>
 8018b24:	7813      	ldrb	r3, [r2, #0]
 8018b26:	600b      	str	r3, [r1, #0]
 8018b28:	7812      	ldrb	r2, [r2, #0]
 8018b2a:	1c10      	adds	r0, r2, #0
 8018b2c:	bf18      	it	ne
 8018b2e:	2001      	movne	r0, #1
 8018b30:	b002      	add	sp, #8
 8018b32:	4770      	bx	lr
 8018b34:	a901      	add	r1, sp, #4
 8018b36:	2a00      	cmp	r2, #0
 8018b38:	d1f3      	bne.n	8018b22 <__ascii_mbtowc+0x6>
 8018b3a:	4610      	mov	r0, r2
 8018b3c:	b002      	add	sp, #8
 8018b3e:	4770      	bx	lr
 8018b40:	f06f 0001 	mvn.w	r0, #1
 8018b44:	e7f4      	b.n	8018b30 <__ascii_mbtowc+0x14>
 8018b46:	bf00      	nop

08018b48 <_wctomb_r>:
 8018b48:	b430      	push	{r4, r5}
 8018b4a:	4c06      	ldr	r4, [pc, #24]	; (8018b64 <_wctomb_r+0x1c>)
 8018b4c:	4d06      	ldr	r5, [pc, #24]	; (8018b68 <_wctomb_r+0x20>)
 8018b4e:	6824      	ldr	r4, [r4, #0]
 8018b50:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8018b52:	2c00      	cmp	r4, #0
 8018b54:	bf08      	it	eq
 8018b56:	462c      	moveq	r4, r5
 8018b58:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8018b5c:	46a4      	mov	ip, r4
 8018b5e:	bc30      	pop	{r4, r5}
 8018b60:	4760      	bx	ip
 8018b62:	bf00      	nop
 8018b64:	20001a80 	.word	0x20001a80
 8018b68:	20001eb0 	.word	0x20001eb0

08018b6c <__ascii_wctomb>:
 8018b6c:	b121      	cbz	r1, 8018b78 <__ascii_wctomb+0xc>
 8018b6e:	2aff      	cmp	r2, #255	; 0xff
 8018b70:	d804      	bhi.n	8018b7c <__ascii_wctomb+0x10>
 8018b72:	700a      	strb	r2, [r1, #0]
 8018b74:	2001      	movs	r0, #1
 8018b76:	4770      	bx	lr
 8018b78:	4608      	mov	r0, r1
 8018b7a:	4770      	bx	lr
 8018b7c:	238a      	movs	r3, #138	; 0x8a
 8018b7e:	6003      	str	r3, [r0, #0]
 8018b80:	f04f 30ff 	mov.w	r0, #4294967295
 8018b84:	4770      	bx	lr
 8018b86:	bf00      	nop
