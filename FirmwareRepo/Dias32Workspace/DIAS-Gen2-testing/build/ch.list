
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	0800bb31 	.word	0x0800bb31
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	08010bf1 	.word	0x08010bf1
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	08005d91 	.word	0x08005d91
 800004c:	08005e21 	.word	0x08005e21
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	080109f1 	.word	0x080109f1
 800005c:	08004111 	.word	0x08004111
 8000060:	08004181 	.word	0x08004181
 8000064:	080041f1 	.word	0x080041f1
 8000068:	08004261 	.word	0x08004261
 800006c:	080046a1 	.word	0x080046a1
 8000070:	080046f1 	.word	0x080046f1
 8000074:	08004741 	.word	0x08004741
 8000078:	08004791 	.word	0x08004791
 800007c:	080047e1 	.word	0x080047e1
 8000080:	08004831 	.word	0x08004831
 8000084:	08004881 	.word	0x08004881
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	080042d1 	.word	0x080042d1
 80000a0:	080002db 	.word	0x080002db
 80000a4:	080002db 	.word	0x080002db
 80000a8:	080002db 	.word	0x080002db
 80000ac:	080002db 	.word	0x080002db
 80000b0:	08006e91 	.word	0x08006e91
 80000b4:	080002db 	.word	0x080002db
 80000b8:	080002db 	.word	0x080002db
 80000bc:	08005611 	.word	0x08005611
 80000c0:	08005641 	.word	0x08005641
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	08011131 	.word	0x08011131
 80000d0:	080002db 	.word	0x080002db
 80000d4:	080002db 	.word	0x080002db
 80000d8:	08007391 	.word	0x08007391
 80000dc:	080073c1 	.word	0x080073c1
 80000e0:	08010ae1 	.word	0x08010ae1
 80000e4:	08005e81 	.word	0x08005e81
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	080048d1 	.word	0x080048d1
 8000100:	080002db 	.word	0x080002db
 8000104:	08006761 	.word	0x08006761
 8000108:	08007121 	.word	0x08007121
 800010c:	080002db 	.word	0x080002db
 8000110:	080002db 	.word	0x080002db
 8000114:	080002db 	.word	0x080002db
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	08004921 	.word	0x08004921
 8000124:	08004971 	.word	0x08004971
 8000128:	080049c1 	.word	0x080049c1
 800012c:	08004a11 	.word	0x08004a11
 8000130:	08004a61 	.word	0x08004a61
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	080002db 	.word	0x080002db
 8000150:	08004ab1 	.word	0x08004ab1
 8000154:	08004b01 	.word	0x08004b01
 8000158:	08004b51 	.word	0x08004b51
 800015c:	080073f1 	.word	0x080073f1
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
                msr     MSP, r0
 8000204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
                msr     PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800021c:	f380 8814 	msr	CONTROL, r0
                isb
 8000220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000224:	f000 f87c 	bl	8000320 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000228:	f000 f92a 	bl	8000480 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
msloop:
                cmp     r1, r2
 8000234:	4291      	cmp	r1, r2
                itt     lo
 8000236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800023c:	e7fa      	bcc.n	8000234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
psloop:
                cmp     r1, r2
 8000242:	4291      	cmp	r1, r2
                itt     lo
 8000244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024a:	e7fa      	bcc.n	8000242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
dloop:
                cmp     r2, r3
 8000252:	429a      	cmp	r2, r3
                ittt    lo
 8000254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800025e:	e7f8      	bcc.n	8000252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000260:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
bloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800026e:	e7fa      	bcc.n	8000266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000270:	f000 f876 	bl	8000360 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000274:	f000 f864 	bl	8000340 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
initloop:
                cmp     r4, r5
 800027c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800027e:	da03      	bge.n	8000288 <endinitloop>
                ldr     r1, [r4], #4
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000284:	4788      	blx	r1
                b       initloop
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000288:	f012 fafa 	bl	8012880 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
finiloop:
                cmp     r4, r5
 8000290:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000292:	da03      	bge.n	800029c <endfiniloop>
                ldr     r1, [r4], #4
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000298:	4788      	blx	r1
                b       finiloop
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800029c:	f000 b858 	b.w	8000350 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002a4:	20001a00 	.word	0x20001a00
                ldr     r0, =_vectors
 80002a8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 80002b4:	08016734 	.word	0x08016734
                ldr     r2, =_data_start
 80002b8:	20001a00 	.word	0x20001a00
                ldr     r3, =_data_end
 80002bc:	20002014 	.word	0x20002014
                ldr     r1, =_bss_start
 80002c0:	20002018 	.word	0x20002018
                ldr     r2, =_bss_end
 80002c4:	20010094 	.word	0x20010094
                ldr     r4, =__init_array_start
 80002c8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002cc:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_start
 80002d0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002e8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ea:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <_port_thread_start>:
_port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      _port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002f0:	f007 fb66 	bl	80079c0 <_dbg_check_unlock>
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 80002f4:	f008 fe54 	bl	8008fa0 <_stats_stop_measure_crit_thd>
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f8:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002fa:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002fe:	4628      	mov	r0, r5
                blx     r4
 8000300:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 8000302:	2000      	movs	r0, #0
                bl      chThdExit
 8000304:	f008 fafc 	bl	8008900 <chThdExit>

08000308 <_port_switch_from_isr>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch_from_isr
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
 8000308:	f008 fe42 	bl	8008f90 <_stats_start_measure_crit_thd>
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 800030c:	f007 fb40 	bl	8007990 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 8000310:	f008 f88e 	bl	8008430 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 8000314:	f007 fb54 	bl	80079c0 <_dbg_check_unlock>
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 8000318:	f008 fe42 	bl	8008fa0 <_stats_stop_measure_crit_thd>

0800031c <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 800031c:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 800031e:	e7fe      	b.n	800031e <_port_exit_from_isr+0x2>

08000320 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	f3af 8000 	nop.w
 8000328:	f3af 8000 	nop.w
 800032c:	f3af 8000 	nop.w
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __early_init(void) {}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	f3af 8000 	nop.w
 8000338:	f3af 8000 	nop.w
 800033c:	f3af 8000 	nop.w

08000340 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	f3af 8000 	nop.w
 8000348:	f3af 8000 	nop.w
 800034c:	f3af 8000 	nop.w

08000350 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000350:	e7fe      	b.n	8000350 <__default_exit>
 8000352:	bf00      	nop
 8000354:	f3af 8000 	nop.w
 8000358:	f3af 8000 	nop.w
 800035c:	f3af 8000 	nop.w

08000360 <__init_ram_areas>:
/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8000360:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <__init_ram_areas+0x30>)
 8000362:	e011      	b.n	8000388 <__init_ram_areas+0x28>
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
 8000364:	f850 1b04 	ldr.w	r1, [r0], #4
 8000368:	f843 1b04 	str.w	r1, [r3], #4
    while (p < rap->clear_area) {
 800036c:	6891      	ldr	r1, [r2, #8]
 800036e:	4299      	cmp	r1, r3
 8000370:	d8f8      	bhi.n	8000364 <__init_ram_areas+0x4>
 8000372:	e002      	b.n	800037a <__init_ram_areas+0x1a>
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8000374:	2100      	movs	r1, #0
 8000376:	f843 1b04 	str.w	r1, [r3], #4
    while (p < rap->no_init_area) {
 800037a:	68d1      	ldr	r1, [r2, #12]
 800037c:	4299      	cmp	r1, r3
 800037e:	d8f9      	bhi.n	8000374 <__init_ram_areas+0x14>
      p++;
    }
    rap++;
 8000380:	3210      	adds	r2, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000382:	4b04      	ldr	r3, [pc, #16]	; (8000394 <__init_ram_areas+0x34>)
 8000384:	429a      	cmp	r2, r3
 8000386:	d202      	bcs.n	800038e <__init_ram_areas+0x2e>
    uint32_t *tp = rap->init_text_area;
 8000388:	6810      	ldr	r0, [r2, #0]
    uint32_t *p = rap->init_area;
 800038a:	6853      	ldr	r3, [r2, #4]
    while (p < rap->clear_area) {
 800038c:	e7ee      	b.n	800036c <__init_ram_areas+0xc>
#endif
}
 800038e:	4770      	bx	lr
 8000390:	080143e4 	.word	0x080143e4
 8000394:	08014464 	.word	0x08014464
	...

080003a0 <gpio_init>:
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80003a0:	684b      	ldr	r3, [r1, #4]
 80003a2:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80003a4:	688b      	ldr	r3, [r1, #8]
 80003a6:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80003a8:	68cb      	ldr	r3, [r1, #12]
 80003aa:	60c3      	str	r3, [r0, #12]
  gpiop->ODR     = config->odr;
 80003ac:	690b      	ldr	r3, [r1, #16]
 80003ae:	6143      	str	r3, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80003b0:	694b      	ldr	r3, [r1, #20]
 80003b2:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80003b4:	698b      	ldr	r3, [r1, #24]
 80003b6:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80003b8:	680b      	ldr	r3, [r1, #0]
 80003ba:	6003      	str	r3, [r0, #0]
}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
 80003c0:	b510      	push	{r4, lr}

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80003c2:	4b21      	ldr	r3, [pc, #132]	; (8000448 <stm32_gpio_init+0x88>)
 80003c4:	691a      	ldr	r2, [r3, #16]
 80003c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80003ca:	430a      	orrs	r2, r1
 80003cc:	611a      	str	r2, [r3, #16]
 80003ce:	691a      	ldr	r2, [r3, #16]
 80003d0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80003d4:	f022 0201 	bic.w	r2, r2, #1
 80003d8:	611a      	str	r2, [r3, #16]
 80003da:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80003dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003de:	430a      	orrs	r2, r1
 80003e0:	631a      	str	r2, [r3, #48]	; 0x30
 80003e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003e4:	430a      	orrs	r2, r1
 80003e6:	651a      	str	r2, [r3, #80]	; 0x50
 80003e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
 80003ea:	4c18      	ldr	r4, [pc, #96]	; (800044c <stm32_gpio_init+0x8c>)
 80003ec:	4621      	mov	r1, r4
 80003ee:	4818      	ldr	r0, [pc, #96]	; (8000450 <stm32_gpio_init+0x90>)
 80003f0:	f7ff ffd6 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
 80003f4:	f104 011c 	add.w	r1, r4, #28
 80003f8:	4816      	ldr	r0, [pc, #88]	; (8000454 <stm32_gpio_init+0x94>)
 80003fa:	f7ff ffd1 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
 80003fe:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8000402:	4815      	ldr	r0, [pc, #84]	; (8000458 <stm32_gpio_init+0x98>)
 8000404:	f7ff ffcc 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
 8000408:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800040c:	4813      	ldr	r0, [pc, #76]	; (800045c <stm32_gpio_init+0x9c>)
 800040e:	f7ff ffc7 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
 8000412:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8000416:	4812      	ldr	r0, [pc, #72]	; (8000460 <stm32_gpio_init+0xa0>)
 8000418:	f7ff ffc2 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOF
  gpio_init(GPIOF, &gpio_default_config.PFData);
 800041c:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8000420:	4810      	ldr	r0, [pc, #64]	; (8000464 <stm32_gpio_init+0xa4>)
 8000422:	f7ff ffbd 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
 8000426:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
 800042a:	480f      	ldr	r0, [pc, #60]	; (8000468 <stm32_gpio_init+0xa8>)
 800042c:	f7ff ffb8 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
 8000430:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 8000434:	480d      	ldr	r0, [pc, #52]	; (800046c <stm32_gpio_init+0xac>)
 8000436:	f7ff ffb3 	bl	80003a0 <gpio_init>
#endif
#if STM32_HAS_GPIOI
  gpio_init(GPIOI, &gpio_default_config.PIData);
 800043a:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 800043e:	480c      	ldr	r0, [pc, #48]	; (8000470 <stm32_gpio_init+0xb0>)
 8000440:	f7ff ffae 	bl	80003a0 <gpio_init>
  gpio_init(GPIOJ, &gpio_default_config.PJData);
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
#endif
}
 8000444:	bd10      	pop	{r4, pc}
 8000446:	bf00      	nop
 8000448:	40023800 	.word	0x40023800
 800044c:	08014464 	.word	0x08014464
 8000450:	40020000 	.word	0x40020000
 8000454:	40020400 	.word	0x40020400
 8000458:	40020800 	.word	0x40020800
 800045c:	40020c00 	.word	0x40020c00
 8000460:	40021000 	.word	0x40021000
 8000464:	40021400 	.word	0x40021400
 8000468:	40021800 	.word	0x40021800
 800046c:	40021c00 	.word	0x40021c00
 8000470:	40022000 	.word	0x40022000
 8000474:	f3af 8000 	nop.w
 8000478:	f3af 8000 	nop.w
 800047c:	f3af 8000 	nop.w

08000480 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8000480:	b508      	push	{r3, lr}

  stm32_gpio_init();
 8000482:	f7ff ff9d 	bl	80003c0 <stm32_gpio_init>
  stm32_clock_init();
 8000486:	f004 f87b 	bl	8004580 <stm32_clock_init>
}
 800048a:	bd08      	pop	{r3, pc}
 800048c:	f3af 8000 	nop.w

08000490 <sdc_lld_is_card_inserted>:
 * @brief   SDC card detection.
 */
bool sdc_lld_is_card_inserted(SDCDriver *sdcp) {
  static bool last_status = false;

  if (blkIsTransferring(sdcp))
 8000490:	7902      	ldrb	r2, [r0, #4]
 8000492:	1ed3      	subs	r3, r2, #3
 8000494:	b2db      	uxtb	r3, r3
 8000496:	2b01      	cmp	r3, #1
 8000498:	d90a      	bls.n	80004b0 <sdc_lld_is_card_inserted+0x20>
 800049a:	2a06      	cmp	r2, #6
 800049c:	d008      	beq.n	80004b0 <sdc_lld_is_card_inserted+0x20>
 800049e:	2a07      	cmp	r2, #7
 80004a0:	d006      	beq.n	80004b0 <sdc_lld_is_card_inserted+0x20>
    return last_status;
  return last_status = (bool)palReadPad(GPIOC, GPIOC_SD_D3);
 80004a2:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <sdc_lld_is_card_inserted+0x28>)
 80004a4:	6918      	ldr	r0, [r3, #16]
 80004a6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <sdc_lld_is_card_inserted+0x2c>)
 80004ac:	7018      	strb	r0, [r3, #0]
}
 80004ae:	4770      	bx	lr
    return last_status;
 80004b0:	4b02      	ldr	r3, [pc, #8]	; (80004bc <sdc_lld_is_card_inserted+0x2c>)
 80004b2:	7818      	ldrb	r0, [r3, #0]
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40020800 	.word	0x40020800
 80004bc:	20002018 	.word	0x20002018

080004c0 <sdc_lld_is_write_protected>:
 */
bool sdc_lld_is_write_protected(SDCDriver *sdcp) {

  (void)sdcp;
  return false;
}
 80004c0:	2000      	movs	r0, #0
 80004c2:	4770      	bx	lr
 80004c4:	f3af 8000 	nop.w
 80004c8:	f3af 8000 	nop.w
 80004cc:	f3af 8000 	nop.w

080004d0 <boardInit>:
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {

}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
	...

080004e0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 80004e0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 80004e2:	f004 f815 	bl	8004510 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 80004e6:	f004 fd1b 	bl	8004f20 <_pal_lld_init>
#endif
#if (HAL_USE_DAC == TRUE) || defined(__DOXYGEN__)
  dacInit();
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
 80004ea:	f001 fb51 	bl	8001b90 <gptInit>
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 80004ee:	f001 fcff 	bl	8001ef0 <i2cInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 80004f2:	f002 fe0d 	bl	8003110 <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
 80004f6:	f002 fc6b 	bl	8002dd0 <sdcInit>
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 80004fa:	f002 ff49 	bl	8003390 <spiInit>
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
#endif
#if (HAL_USE_RTC == TRUE) || defined(__DOXYGEN__)
  rtcInit();
 80004fe:	f001 ff5f 	bl	80023c0 <rtcInit>
#endif

  /* Community driver overlay initialization.*/
#if defined(HAL_USE_COMMUNITY) || defined(__DOXYGEN__)
#if (HAL_USE_COMMUNITY == TRUE) || defined(__DOXYGEN__)
  halCommunityInit();
 8000502:	f003 faed 	bl	8003ae0 <halCommunityInit>
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8000506:	f7ff ffe3 	bl	80004d0 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 800050a:	f000 f801 	bl	8000510 <stInit>
#endif
}
 800050e:	bd08      	pop	{r3, pc}

08000510 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 8000510:	b508      	push	{r3, lr}

  st_lld_init();
 8000512:	f006 fced 	bl	8006ef0 <st_lld_init>
}
 8000516:	bd08      	pop	{r3, pc}
 8000518:	f3af 8000 	nop.w
 800051c:	f3af 8000 	nop.w

08000520 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8000520:	b510      	push	{r4, lr}
 8000522:	4604      	mov	r4, r0
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000528:	68db      	ldr	r3, [r3, #12]

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 800052a:	f013 0f02 	tst.w	r3, #2
 800052e:	d107      	bne.n	8000540 <stStartAlarm+0x20>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000534:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800053a:	2202      	movs	r2, #2
 800053c:	60da      	str	r2, [r3, #12]

  st_lld_start_alarm(abstime);
}
 800053e:	bd10      	pop	{r4, pc}
  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8000540:	4801      	ldr	r0, [pc, #4]	; (8000548 <stStartAlarm+0x28>)
 8000542:	f007 f895 	bl	8007670 <chSysHalt>
 8000546:	e7f3      	b.n	8000530 <stStartAlarm+0x10>
 8000548:	08014560 	.word	0x08014560
 800054c:	f3af 8000 	nop.w

08000550 <stStopAlarm>:
  STM32_ST_TIM->DIER = 0;
 8000550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	f3af 8000 	nop.w

08000560 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8000560:	b510      	push	{r4, lr}
 8000562:	4604      	mov	r4, r0
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000568:	68db      	ldr	r3, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 800056a:	f013 0f02 	tst.w	r3, #2
 800056e:	d003      	beq.n	8000578 <stSetAlarm+0x18>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000574:	635c      	str	r4, [r3, #52]	; 0x34

  st_lld_set_alarm(abstime);
}
 8000576:	bd10      	pop	{r4, pc}
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8000578:	4801      	ldr	r0, [pc, #4]	; (8000580 <stSetAlarm+0x20>)
 800057a:	f007 f879 	bl	8007670 <chSysHalt>
 800057e:	e7f7      	b.n	8000570 <stSetAlarm+0x10>
 8000580:	08014570 	.word	0x08014570
 8000584:	f3af 8000 	nop.w
 8000588:	f3af 8000 	nop.w
 800058c:	f3af 8000 	nop.w

08000590 <stGetAlarm>:
 *
 * @return              The currently set alarm time.
 *
 * @api
 */
systime_t stGetAlarm(void) {
 8000590:	b508      	push	{r3, lr}
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000592:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000596:	68db      	ldr	r3, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8000598:	f013 0f02 	tst.w	r3, #2
 800059c:	d003      	beq.n	80005a6 <stGetAlarm+0x16>
  return (systime_t)STM32_ST_TIM->CCR[0];
 800059e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a2:	6b58      	ldr	r0, [r3, #52]	; 0x34

  return st_lld_get_alarm();
}
 80005a4:	bd08      	pop	{r3, pc}
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <stGetAlarm+0x20>)
 80005a8:	f007 f862 	bl	8007670 <chSysHalt>
 80005ac:	e7f7      	b.n	800059e <stGetAlarm+0xe>
 80005ae:	bf00      	nop
 80005b0:	0801457c 	.word	0x0801457c
	...

080005c0 <ibqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t infy, void *link) {
 80005c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005c4:	4688      	mov	r8, r1
 80005c6:	4615      	mov	r5, r2
 80005c8:	461e      	mov	r6, r3
 80005ca:	9f06      	ldr	r7, [sp, #24]

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
 80005cc:	4604      	mov	r4, r0
 80005ce:	b110      	cbz	r0, 80005d6 <ibqObjectInit+0x16>
 80005d0:	b10a      	cbz	r2, 80005d6 <ibqObjectInit+0x16>
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d802      	bhi.n	80005dc <ibqObjectInit+0x1c>
 80005d6:	480d      	ldr	r0, [pc, #52]	; (800060c <ibqObjectInit+0x4c>)
 80005d8:	f007 f84a 	bl	8007670 <chSysHalt>
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80005dc:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
 80005de:	6064      	str	r4, [r4, #4]

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->suspended = suspended;
 80005e0:	f884 8008 	strb.w	r8, [r4, #8]
  ibqp->bcounter  = 0;
 80005e4:	2200      	movs	r2, #0
 80005e6:	60e2      	str	r2, [r4, #12]
  ibqp->brdptr    = bp;
 80005e8:	6165      	str	r5, [r4, #20]
  ibqp->bwrptr    = bp;
 80005ea:	6125      	str	r5, [r4, #16]
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80005ec:	3604      	adds	r6, #4
 80005ee:	fb07 5106 	mla	r1, r7, r6, r5
 80005f2:	61a1      	str	r1, [r4, #24]
  ibqp->bsize     = size + sizeof (size_t);
 80005f4:	61e6      	str	r6, [r4, #28]
  ibqp->bn        = n;
 80005f6:	6227      	str	r7, [r4, #32]
  ibqp->buffers   = bp;
 80005f8:	6265      	str	r5, [r4, #36]	; 0x24
  ibqp->ptr       = NULL;
 80005fa:	62a2      	str	r2, [r4, #40]	; 0x28
  ibqp->top       = NULL;
 80005fc:	62e2      	str	r2, [r4, #44]	; 0x2c
  ibqp->notify    = infy;
 80005fe:	9b07      	ldr	r3, [sp, #28]
 8000600:	6323      	str	r3, [r4, #48]	; 0x30
  ibqp->link      = link;
 8000602:	9b08      	ldr	r3, [sp, #32]
 8000604:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800060a:	bf00      	nop
 800060c:	08014588 	.word	0x08014588

08000610 <ibqResetI>:
 *
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 *
 * @iclass
 */
void ibqResetI(input_buffers_queue_t *ibqp) {
 8000610:	b510      	push	{r4, lr}
 8000612:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8000614:	f007 fa5c 	bl	8007ad0 <chDbgCheckClassI>

  ibqp->bcounter  = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	60e3      	str	r3, [r4, #12]
  ibqp->brdptr    = ibqp->buffers;
 800061c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800061e:	6162      	str	r2, [r4, #20]
  ibqp->bwrptr    = ibqp->buffers;
 8000620:	6122      	str	r2, [r4, #16]
  ibqp->ptr       = NULL;
 8000622:	62a3      	str	r3, [r4, #40]	; 0x28
  ibqp->top       = NULL;
 8000624:	62e3      	str	r3, [r4, #44]	; 0x2c
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8000626:	f06f 0101 	mvn.w	r1, #1
 800062a:	4620      	mov	r0, r4
 800062c:	f008 fbd0 	bl	8008dd0 <chThdDequeueAllI>
  osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
}
 8000630:	bd10      	pop	{r4, pc}
 8000632:	bf00      	nop
 8000634:	f3af 8000 	nop.w
 8000638:	f3af 8000 	nop.w
 800063c:	f3af 8000 	nop.w

08000640 <ibqGetEmptyBufferI>:
 * @return              A pointer to the next buffer to be filled.
 * @retval NULL         if the queue is full.
 *
 * @iclass
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 8000640:	b510      	push	{r4, lr}
 8000642:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8000644:	f007 fa44 	bl	8007ad0 <chDbgCheckClassI>

  if (ibqIsFullI(ibqp)) {
 8000648:	6920      	ldr	r0, [r4, #16]
 800064a:	6963      	ldr	r3, [r4, #20]
 800064c:	4298      	cmp	r0, r3
 800064e:	d003      	beq.n	8000658 <ibqGetEmptyBufferI+0x18>
 8000650:	2300      	movs	r3, #0
 8000652:	b933      	cbnz	r3, 8000662 <ibqGetEmptyBufferI+0x22>
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 8000654:	3004      	adds	r0, #4
}
 8000656:	bd10      	pop	{r4, pc}
  if (ibqIsFullI(ibqp)) {
 8000658:	68e3      	ldr	r3, [r4, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <ibqGetEmptyBufferI+0x12>
 800065e:	2301      	movs	r3, #1
 8000660:	e7f7      	b.n	8000652 <ibqGetEmptyBufferI+0x12>
    return NULL;
 8000662:	2000      	movs	r0, #0
 8000664:	e7f7      	b.n	8000656 <ibqGetEmptyBufferI+0x16>
 8000666:	bf00      	nop
 8000668:	f3af 8000 	nop.w
 800066c:	f3af 8000 	nop.w

08000670 <ibqPostFullBufferI>:
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @iclass
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 8000670:	b538      	push	{r3, r4, r5, lr}
 8000672:	4604      	mov	r4, r0
 8000674:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8000676:	f007 fa2b 	bl	8007ad0 <chDbgCheckClassI>

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 800067a:	b11d      	cbz	r5, 8000684 <ibqPostFullBufferI+0x14>
 800067c:	69e3      	ldr	r3, [r4, #28]
 800067e:	3b04      	subs	r3, #4
 8000680:	42ab      	cmp	r3, r5
 8000682:	d202      	bcs.n	800068a <ibqPostFullBufferI+0x1a>
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <ibqPostFullBufferI+0x60>)
 8000686:	f006 fff3 	bl	8007670 <chSysHalt>
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 800068a:	6922      	ldr	r2, [r4, #16]
 800068c:	6963      	ldr	r3, [r4, #20]
 800068e:	429a      	cmp	r2, r3
 8000690:	d014      	beq.n	80006bc <ibqPostFullBufferI+0x4c>
 8000692:	2300      	movs	r3, #0
 8000694:	b9bb      	cbnz	r3, 80006c6 <ibqPostFullBufferI+0x56>

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8000696:	6923      	ldr	r3, [r4, #16]
 8000698:	601d      	str	r5, [r3, #0]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 800069a:	68e3      	ldr	r3, [r4, #12]
 800069c:	3301      	adds	r3, #1
 800069e:	60e3      	str	r3, [r4, #12]
  ibqp->bwrptr += ibqp->bsize;
 80006a0:	69e2      	ldr	r2, [r4, #28]
 80006a2:	6923      	ldr	r3, [r4, #16]
 80006a4:	4413      	add	r3, r2
 80006a6:	6123      	str	r3, [r4, #16]
  if (ibqp->bwrptr >= ibqp->btop) {
 80006a8:	69a2      	ldr	r2, [r4, #24]
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d301      	bcc.n	80006b2 <ibqPostFullBufferI+0x42>
    ibqp->bwrptr = ibqp->buffers;
 80006ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006b0:	6123      	str	r3, [r4, #16]
  chThdDequeueNextI(tqp, msg);
 80006b2:	2100      	movs	r1, #0
 80006b4:	4620      	mov	r0, r4
 80006b6:	f008 fb6b 	bl	8008d90 <chThdDequeueNextI>
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
}
 80006ba:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 80006bc:	68e3      	ldr	r3, [r4, #12]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0e8      	beq.n	8000694 <ibqPostFullBufferI+0x24>
 80006c2:	2301      	movs	r3, #1
 80006c4:	e7e6      	b.n	8000694 <ibqPostFullBufferI+0x24>
 80006c6:	4802      	ldr	r0, [pc, #8]	; (80006d0 <ibqPostFullBufferI+0x60>)
 80006c8:	f006 ffd2 	bl	8007670 <chSysHalt>
 80006cc:	e7e3      	b.n	8000696 <ibqPostFullBufferI+0x26>
 80006ce:	bf00      	nop
 80006d0:	08014598 	.word	0x08014598
 80006d4:	f3af 8000 	nop.w
 80006d8:	f3af 8000 	nop.w
 80006dc:	f3af 8000 	nop.w

080006e0 <ibqGetFullBufferTimeoutS>:
   *                      suspended state.
   *
   * @sclass
   */
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 sysinterval_t timeout) {
 80006e0:	b5d0      	push	{r4, r6, r7, lr}
 80006e2:	4604      	mov	r4, r0
 80006e4:	4616      	mov	r6, r2
 80006e6:	461f      	mov	r7, r3

  osalDbgCheckClassS();
 80006e8:	f007 fa0a 	bl	8007b00 <chDbgCheckClassS>

  while (ibqIsEmptyI(ibqp)) {
 80006ec:	68e3      	ldr	r3, [r4, #12]
 80006ee:	b94b      	cbnz	r3, 8000704 <ibqGetFullBufferTimeoutS+0x24>
    if (ibqp->suspended) {
 80006f0:	7a23      	ldrb	r3, [r4, #8]
 80006f2:	b9ab      	cbnz	r3, 8000720 <ibqGetFullBufferTimeoutS+0x40>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80006f4:	4632      	mov	r2, r6
 80006f6:	463b      	mov	r3, r7
 80006f8:	4620      	mov	r0, r4
 80006fa:	f008 fb31 	bl	8008d60 <chThdEnqueueTimeoutS>
      return MSG_RESET;
    }
    msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
    if (msg < MSG_OK) {
 80006fe:	2800      	cmp	r0, #0
 8000700:	daf4      	bge.n	80006ec <ibqGetFullBufferTimeoutS+0xc>
 8000702:	e008      	b.n	8000716 <ibqGetFullBufferTimeoutS+0x36>
       return msg;
    }
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 8000704:	68e3      	ldr	r3, [r4, #12]
 8000706:	b13b      	cbz	r3, 8000718 <ibqGetFullBufferTimeoutS+0x38>

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8000708:	6962      	ldr	r2, [r4, #20]
 800070a:	1d13      	adds	r3, r2, #4
 800070c:	62a3      	str	r3, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 800070e:	6812      	ldr	r2, [r2, #0]
 8000710:	4413      	add	r3, r2
 8000712:	62e3      	str	r3, [r4, #44]	; 0x2c

  return MSG_OK;
 8000714:	2000      	movs	r0, #0
}
 8000716:	bdd0      	pop	{r4, r6, r7, pc}
  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <ibqGetFullBufferTimeoutS+0x48>)
 800071a:	f006 ffa9 	bl	8007670 <chSysHalt>
 800071e:	e7f3      	b.n	8000708 <ibqGetFullBufferTimeoutS+0x28>
      return MSG_RESET;
 8000720:	f06f 0001 	mvn.w	r0, #1
 8000724:	e7f7      	b.n	8000716 <ibqGetFullBufferTimeoutS+0x36>
 8000726:	bf00      	nop
 8000728:	080145ac 	.word	0x080145ac
 800072c:	f3af 8000 	nop.w

08000730 <ibqGetFullBufferTimeout>:
                              sysinterval_t timeout) {
 8000730:	b5d0      	push	{r4, r6, r7, lr}
 8000732:	4604      	mov	r4, r0
 8000734:	4616      	mov	r6, r2
 8000736:	461f      	mov	r7, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000738:	2320      	movs	r3, #32
 800073a:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800073e:	f008 fc27 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000742:	f007 f925 	bl	8007990 <_dbg_check_lock>
  msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8000746:	4632      	mov	r2, r6
 8000748:	463b      	mov	r3, r7
 800074a:	4620      	mov	r0, r4
 800074c:	f7ff ffc8 	bl	80006e0 <ibqGetFullBufferTimeoutS>
 8000750:	4604      	mov	r4, r0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000752:	f007 f935 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000756:	f008 fc23 	bl	8008fa0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <ibqGetFullBufferTimeout+0x50>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	429a      	cmp	r2, r3
 8000760:	d004      	beq.n	800076c <ibqGetFullBufferTimeout+0x3c>
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	6899      	ldr	r1, [r3, #8]
 8000766:	6893      	ldr	r3, [r2, #8]
 8000768:	4299      	cmp	r1, r3
 800076a:	d304      	bcc.n	8000776 <ibqGetFullBufferTimeout+0x46>
 800076c:	2300      	movs	r3, #0
 800076e:	f383 8811 	msr	BASEPRI, r3
}
 8000772:	4620      	mov	r0, r4
 8000774:	bdd0      	pop	{r4, r6, r7, pc}
 8000776:	4803      	ldr	r0, [pc, #12]	; (8000784 <ibqGetFullBufferTimeout+0x54>)
 8000778:	f006 ff7a 	bl	8007670 <chSysHalt>
 800077c:	e7f6      	b.n	800076c <ibqGetFullBufferTimeout+0x3c>
 800077e:	bf00      	nop
 8000780:	20004f68 	.word	0x20004f68
 8000784:	080145c8 	.word	0x080145c8
 8000788:	f3af 8000 	nop.w
 800078c:	f3af 8000 	nop.w

08000790 <ibqReleaseEmptyBufferS>:
   *
   * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
   *
   * @sclass
   */
  void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 8000790:	b510      	push	{r4, lr}
 8000792:	4604      	mov	r4, r0

  osalDbgCheckClassS();
 8000794:	f007 f9b4 	bl	8007b00 <chDbgCheckClassS>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 8000798:	68e3      	ldr	r3, [r4, #12]
 800079a:	b193      	cbz	r3, 80007c2 <ibqReleaseEmptyBufferS+0x32>

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 800079c:	68e3      	ldr	r3, [r4, #12]
 800079e:	3b01      	subs	r3, #1
 80007a0:	60e3      	str	r3, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 80007a2:	69e2      	ldr	r2, [r4, #28]
 80007a4:	6963      	ldr	r3, [r4, #20]
 80007a6:	4413      	add	r3, r2
 80007a8:	6163      	str	r3, [r4, #20]
  if (ibqp->brdptr >= ibqp->btop) {
 80007aa:	69a2      	ldr	r2, [r4, #24]
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d301      	bcc.n	80007b4 <ibqReleaseEmptyBufferS+0x24>
    ibqp->brdptr = ibqp->buffers;
 80007b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007b2:	6163      	str	r3, [r4, #20]
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 80007b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007ba:	b10b      	cbz	r3, 80007c0 <ibqReleaseEmptyBufferS+0x30>
    ibqp->notify(ibqp);
 80007bc:	4620      	mov	r0, r4
 80007be:	4798      	blx	r3
  }
}
 80007c0:	bd10      	pop	{r4, pc}
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 80007c2:	4802      	ldr	r0, [pc, #8]	; (80007cc <ibqReleaseEmptyBufferS+0x3c>)
 80007c4:	f006 ff54 	bl	8007670 <chSysHalt>
 80007c8:	e7e8      	b.n	800079c <ibqReleaseEmptyBufferS+0xc>
 80007ca:	bf00      	nop
 80007cc:	080145d4 	.word	0x080145d4

080007d0 <ibqReleaseEmptyBuffer>:
void ibqReleaseEmptyBuffer(input_buffers_queue_t *ibqp) {
 80007d0:	b510      	push	{r4, lr}
 80007d2:	4604      	mov	r4, r0
 80007d4:	2320      	movs	r3, #32
 80007d6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80007da:	f008 fbd9 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80007de:	f007 f8d7 	bl	8007990 <_dbg_check_lock>
  ibqReleaseEmptyBufferS(ibqp);
 80007e2:	4620      	mov	r0, r4
 80007e4:	f7ff ffd4 	bl	8000790 <ibqReleaseEmptyBufferS>
  _dbg_check_unlock();
 80007e8:	f007 f8ea 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80007ec:	f008 fbd8 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <ibqReleaseEmptyBuffer+0x44>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d004      	beq.n	8000802 <ibqReleaseEmptyBuffer+0x32>
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	6899      	ldr	r1, [r3, #8]
 80007fc:	6893      	ldr	r3, [r2, #8]
 80007fe:	4299      	cmp	r1, r3
 8000800:	d303      	bcc.n	800080a <ibqReleaseEmptyBuffer+0x3a>
 8000802:	2300      	movs	r3, #0
 8000804:	f383 8811 	msr	BASEPRI, r3
}
 8000808:	bd10      	pop	{r4, pc}
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <ibqReleaseEmptyBuffer+0x48>)
 800080c:	f006 ff30 	bl	8007670 <chSysHalt>
 8000810:	e7f7      	b.n	8000802 <ibqReleaseEmptyBuffer+0x32>
 8000812:	bf00      	nop
 8000814:	20004f68 	.word	0x20004f68
 8000818:	080145c8 	.word	0x080145c8
 800081c:	f3af 8000 	nop.w

08000820 <ibqGetTimeout>:
 * @retval MSG_RESET    if the queue has been reset or has been put in
 *                      suspended state.
 *
 * @api
 */
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8000820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000822:	4604      	mov	r4, r0
 8000824:	4616      	mov	r6, r2
 8000826:	461f      	mov	r7, r3
 8000828:	2320      	movs	r3, #32
 800082a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800082e:	f008 fbaf 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000832:	f007 f8ad 	bl	8007990 <_dbg_check_lock>
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
 8000836:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000838:	b1c3      	cbz	r3, 800086c <ibqGetTimeout+0x4c>
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 800083a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800083c:	f813 5b01 	ldrb.w	r5, [r3], #1
  ibqp->ptr++;
 8000840:	62a3      	str	r3, [r4, #40]	; 0x28

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 8000842:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000844:	4293      	cmp	r3, r2
 8000846:	d22e      	bcs.n	80008a6 <ibqGetTimeout+0x86>
  _dbg_check_unlock();
 8000848:	f007 f8ba 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800084c:	f008 fba8 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <ibqGetTimeout+0x98>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	429a      	cmp	r2, r3
 8000856:	d004      	beq.n	8000862 <ibqGetTimeout+0x42>
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	6899      	ldr	r1, [r3, #8]
 800085c:	6893      	ldr	r3, [r2, #8]
 800085e:	4299      	cmp	r1, r3
 8000860:	d325      	bcc.n	80008ae <ibqGetTimeout+0x8e>
 8000862:	2300      	movs	r3, #0
 8000864:	f383 8811 	msr	BASEPRI, r3
    ibqReleaseEmptyBufferS(ibqp);
  }

  osalSysUnlock();
  return msg;
}
 8000868:	4628      	mov	r0, r5
 800086a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 800086c:	4632      	mov	r2, r6
 800086e:	463b      	mov	r3, r7
 8000870:	4620      	mov	r0, r4
 8000872:	f7ff ff35 	bl	80006e0 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 8000876:	4605      	mov	r5, r0
 8000878:	2800      	cmp	r0, #0
 800087a:	d0de      	beq.n	800083a <ibqGetTimeout+0x1a>
  _dbg_check_unlock();
 800087c:	f007 f8a0 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000880:	f008 fb8e 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <ibqGetTimeout+0x98>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	429a      	cmp	r2, r3
 800088a:	d004      	beq.n	8000896 <ibqGetTimeout+0x76>
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	6899      	ldr	r1, [r3, #8]
 8000890:	6893      	ldr	r3, [r2, #8]
 8000892:	4299      	cmp	r1, r3
 8000894:	d303      	bcc.n	800089e <ibqGetTimeout+0x7e>
 8000896:	2300      	movs	r3, #0
 8000898:	f383 8811 	msr	BASEPRI, r3
 800089c:	e7e4      	b.n	8000868 <ibqGetTimeout+0x48>
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <ibqGetTimeout+0x9c>)
 80008a0:	f006 fee6 	bl	8007670 <chSysHalt>
 80008a4:	e7f7      	b.n	8000896 <ibqGetTimeout+0x76>
    ibqReleaseEmptyBufferS(ibqp);
 80008a6:	4620      	mov	r0, r4
 80008a8:	f7ff ff72 	bl	8000790 <ibqReleaseEmptyBufferS>
 80008ac:	e7cc      	b.n	8000848 <ibqGetTimeout+0x28>
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <ibqGetTimeout+0x9c>)
 80008b0:	f006 fede 	bl	8007670 <chSysHalt>
 80008b4:	e7d5      	b.n	8000862 <ibqGetTimeout+0x42>
 80008b6:	bf00      	nop
 80008b8:	20004f68 	.word	0x20004f68
 80008bc:	080145c8 	.word	0x080145c8

080008c0 <ibqReadTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80008c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
  size_t r = 0;

  osalDbgCheck(n > 0U);
 80008c8:	4690      	mov	r8, r2
 80008ca:	b142      	cbz	r2, 80008de <ibqReadTimeout+0x1e>
 80008cc:	2320      	movs	r3, #32
 80008ce:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80008d2:	f008 fb5d 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80008d6:	f007 f85b 	bl	8007990 <_dbg_check_lock>
  size_t r = 0;
 80008da:	2600      	movs	r6, #0
 80008dc:	e047      	b.n	800096e <ibqReadTimeout+0xae>
  osalDbgCheck(n > 0U);
 80008de:	483b      	ldr	r0, [pc, #236]	; (80009cc <ibqReadTimeout+0x10c>)
 80008e0:	f006 fec6 	bl	8007670 <chSysHalt>
 80008e4:	e7f2      	b.n	80008cc <ibqReadTimeout+0xc>
    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
      msg_t msg;

      /* Getting a data buffer using the specified timeout.*/
      msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 80008e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80008ea:	4620      	mov	r0, r4
 80008ec:	f7ff fef8 	bl	80006e0 <ibqGetFullBufferTimeoutS>

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d03f      	beq.n	8000974 <ibqReadTimeout+0xb4>
  _dbg_check_unlock();
 80008f4:	f007 f864 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80008f8:	f008 fb52 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80008fc:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <ibqReadTimeout+0x110>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	429a      	cmp	r2, r3
 8000902:	d004      	beq.n	800090e <ibqReadTimeout+0x4e>
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	6899      	ldr	r1, [r3, #8]
 8000908:	6893      	ldr	r3, [r2, #8]
 800090a:	4299      	cmp	r1, r3
 800090c:	d305      	bcc.n	800091a <ibqReadTimeout+0x5a>
 800090e:	2300      	movs	r3, #0
 8000910:	f383 8811 	msr	BASEPRI, r3
    if (r >= n) {
      return r;
    }
    osalSysLock();
  }
}
 8000914:	4630      	mov	r0, r6
 8000916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800091a:	482e      	ldr	r0, [pc, #184]	; (80009d4 <ibqReadTimeout+0x114>)
 800091c:	f006 fea8 	bl	8007670 <chSysHalt>
 8000920:	e7f5      	b.n	800090e <ibqReadTimeout+0x4e>
      memcpy(bp, ibqp->ptr, size);
 8000922:	462a      	mov	r2, r5
 8000924:	4638      	mov	r0, r7
 8000926:	f012 ff63 	bl	80137f0 <memcpy>
      bp        += size;
 800092a:	442f      	add	r7, r5
      ibqp->ptr += size;
 800092c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800092e:	442b      	add	r3, r5
 8000930:	62a3      	str	r3, [r4, #40]	; 0x28
      r         += size;
 8000932:	442e      	add	r6, r5
    if (ibqp->ptr >= ibqp->top) {
 8000934:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000936:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000938:	429a      	cmp	r2, r3
 800093a:	d23e      	bcs.n	80009ba <ibqReadTimeout+0xfa>
  _dbg_check_unlock();
 800093c:	f007 f840 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000940:	f008 fb2e 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <ibqReadTimeout+0x110>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	429a      	cmp	r2, r3
 800094a:	d004      	beq.n	8000956 <ibqReadTimeout+0x96>
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	6899      	ldr	r1, [r3, #8]
 8000950:	6893      	ldr	r3, [r2, #8]
 8000952:	4299      	cmp	r1, r3
 8000954:	d335      	bcc.n	80009c2 <ibqReadTimeout+0x102>
 8000956:	2300      	movs	r3, #0
 8000958:	f383 8811 	msr	BASEPRI, r3
    if (r >= n) {
 800095c:	4546      	cmp	r6, r8
 800095e:	d2d9      	bcs.n	8000914 <ibqReadTimeout+0x54>
 8000960:	2320      	movs	r3, #32
 8000962:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000966:	f008 fb13 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800096a:	f007 f811 	bl	8007990 <_dbg_check_lock>
    if (ibqp->ptr == NULL) {
 800096e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0b8      	beq.n	80008e6 <ibqReadTimeout+0x26>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8000974:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000976:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000978:	1a5b      	subs	r3, r3, r1
    if (size > (n - r)) {
 800097a:	eba8 0506 	sub.w	r5, r8, r6
 800097e:	429d      	cmp	r5, r3
 8000980:	d300      	bcc.n	8000984 <ibqReadTimeout+0xc4>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8000982:	461d      	mov	r5, r3
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8000984:	2d40      	cmp	r5, #64	; 0x40
 8000986:	d9cc      	bls.n	8000922 <ibqReadTimeout+0x62>
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8000988:	460b      	mov	r3, r1
 800098a:	463a      	mov	r2, r7
 800098c:	3140      	adds	r1, #64	; 0x40
 800098e:	f8d3 e000 	ldr.w	lr, [r3]
 8000992:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8000996:	689d      	ldr	r5, [r3, #8]
 8000998:	68d8      	ldr	r0, [r3, #12]
 800099a:	f8c2 e000 	str.w	lr, [r2]
 800099e:	f8c2 c004 	str.w	ip, [r2, #4]
 80009a2:	6095      	str	r5, [r2, #8]
 80009a4:	60d0      	str	r0, [r2, #12]
 80009a6:	3310      	adds	r3, #16
 80009a8:	3210      	adds	r2, #16
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d1ef      	bne.n	800098e <ibqReadTimeout+0xce>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 80009ae:	3740      	adds	r7, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80009b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009b2:	3340      	adds	r3, #64	; 0x40
 80009b4:	62a3      	str	r3, [r4, #40]	; 0x28
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 80009b6:	3640      	adds	r6, #64	; 0x40
 80009b8:	e7bc      	b.n	8000934 <ibqReadTimeout+0x74>
      ibqReleaseEmptyBufferS(ibqp);
 80009ba:	4620      	mov	r0, r4
 80009bc:	f7ff fee8 	bl	8000790 <ibqReleaseEmptyBufferS>
 80009c0:	e7bc      	b.n	800093c <ibqReadTimeout+0x7c>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80009c2:	4804      	ldr	r0, [pc, #16]	; (80009d4 <ibqReadTimeout+0x114>)
 80009c4:	f006 fe54 	bl	8007670 <chSysHalt>
 80009c8:	e7c5      	b.n	8000956 <ibqReadTimeout+0x96>
 80009ca:	bf00      	nop
 80009cc:	080145ec 	.word	0x080145ec
 80009d0:	20004f68 	.word	0x20004f68
 80009d4:	080145c8 	.word	0x080145c8
 80009d8:	f3af 8000 	nop.w
 80009dc:	f3af 8000 	nop.w

080009e0 <obqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t onfy, void *link) {
 80009e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009e4:	4688      	mov	r8, r1
 80009e6:	4615      	mov	r5, r2
 80009e8:	461e      	mov	r6, r3
 80009ea:	9f06      	ldr	r7, [sp, #24]

  osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 80009ec:	4604      	mov	r4, r0
 80009ee:	b110      	cbz	r0, 80009f6 <obqObjectInit+0x16>
 80009f0:	b10a      	cbz	r2, 80009f6 <obqObjectInit+0x16>
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d802      	bhi.n	80009fc <obqObjectInit+0x1c>
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <obqObjectInit+0x4c>)
 80009f8:	f006 fe3a 	bl	8007670 <chSysHalt>
  tqp->next = (thread_t *)tqp;
 80009fc:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
 80009fe:	6064      	str	r4, [r4, #4]

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->suspended = suspended;
 8000a00:	f884 8008 	strb.w	r8, [r4, #8]
  obqp->bcounter  = n;
 8000a04:	60e7      	str	r7, [r4, #12]
  obqp->brdptr    = bp;
 8000a06:	6165      	str	r5, [r4, #20]
  obqp->bwrptr    = bp;
 8000a08:	6125      	str	r5, [r4, #16]
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8000a0a:	3604      	adds	r6, #4
 8000a0c:	fb07 5206 	mla	r2, r7, r6, r5
 8000a10:	61a2      	str	r2, [r4, #24]
  obqp->bsize     = size + sizeof (size_t);
 8000a12:	61e6      	str	r6, [r4, #28]
  obqp->bn        = n;
 8000a14:	6227      	str	r7, [r4, #32]
  obqp->buffers   = bp;
 8000a16:	6265      	str	r5, [r4, #36]	; 0x24
  obqp->ptr       = NULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62a3      	str	r3, [r4, #40]	; 0x28
  obqp->top       = NULL;
 8000a1c:	62e3      	str	r3, [r4, #44]	; 0x2c
  obqp->notify    = onfy;
 8000a1e:	9b07      	ldr	r3, [sp, #28]
 8000a20:	6323      	str	r3, [r4, #48]	; 0x30
  obqp->link      = link;
 8000a22:	9b08      	ldr	r3, [sp, #32]
 8000a24:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a2a:	bf00      	nop
 8000a2c:	080145fc 	.word	0x080145fc

08000a30 <obqResetI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqResetI(output_buffers_queue_t *obqp) {
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8000a34:	f007 f84c 	bl	8007ad0 <chDbgCheckClassI>

  obqp->bcounter  = bqSizeX(obqp);
 8000a38:	6a23      	ldr	r3, [r4, #32]
 8000a3a:	60e3      	str	r3, [r4, #12]
  obqp->brdptr    = obqp->buffers;
 8000a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a3e:	6163      	str	r3, [r4, #20]
  obqp->bwrptr    = obqp->buffers;
 8000a40:	6123      	str	r3, [r4, #16]
  obqp->ptr       = NULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62a3      	str	r3, [r4, #40]	; 0x28
  obqp->top       = NULL;
 8000a46:	62e3      	str	r3, [r4, #44]	; 0x2c
  chThdDequeueAllI(tqp, msg);
 8000a48:	f06f 0101 	mvn.w	r1, #1
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	f008 f9bf 	bl	8008dd0 <chThdDequeueAllI>
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
}
 8000a52:	bd10      	pop	{r4, pc}
 8000a54:	f3af 8000 	nop.w
 8000a58:	f3af 8000 	nop.w
 8000a5c:	f3af 8000 	nop.w

08000a60 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 8000a60:	b538      	push	{r3, r4, r5, lr}
 8000a62:	4604      	mov	r4, r0
 8000a64:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8000a66:	f007 f833 	bl	8007ad0 <chDbgCheckClassI>

  if (obqIsEmptyI(obqp)) {
 8000a6a:	6922      	ldr	r2, [r4, #16]
 8000a6c:	6963      	ldr	r3, [r4, #20]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d006      	beq.n	8000a80 <obqGetFullBufferI+0x20>
 8000a72:	2200      	movs	r2, #0
 8000a74:	b94a      	cbnz	r2, 8000a8a <obqGetFullBufferI+0x2a>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	602b      	str	r3, [r5, #0]

  return obqp->brdptr + sizeof (size_t);
 8000a7a:	6960      	ldr	r0, [r4, #20]
 8000a7c:	3004      	adds	r0, #4
}
 8000a7e:	bd38      	pop	{r3, r4, r5, pc}
  if (obqIsEmptyI(obqp)) {
 8000a80:	68e2      	ldr	r2, [r4, #12]
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d0f6      	beq.n	8000a74 <obqGetFullBufferI+0x14>
 8000a86:	2201      	movs	r2, #1
 8000a88:	e7f4      	b.n	8000a74 <obqGetFullBufferI+0x14>
    return NULL;
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	e7f7      	b.n	8000a7e <obqGetFullBufferI+0x1e>
 8000a8e:	bf00      	nop

08000a90 <obqReleaseEmptyBufferI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 8000a90:	b510      	push	{r4, lr}
 8000a92:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8000a94:	f007 f81c 	bl	8007ad0 <chDbgCheckClassI>
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 8000a98:	6922      	ldr	r2, [r4, #16]
 8000a9a:	6963      	ldr	r3, [r4, #20]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d012      	beq.n	8000ac6 <obqReleaseEmptyBufferI+0x36>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	b9ab      	cbnz	r3, 8000ad0 <obqReleaseEmptyBufferI+0x40>

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8000aa4:	68e3      	ldr	r3, [r4, #12]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	60e3      	str	r3, [r4, #12]
  obqp->brdptr += obqp->bsize;
 8000aaa:	69e2      	ldr	r2, [r4, #28]
 8000aac:	6963      	ldr	r3, [r4, #20]
 8000aae:	4413      	add	r3, r2
 8000ab0:	6163      	str	r3, [r4, #20]
  if (obqp->brdptr >= obqp->btop) {
 8000ab2:	69a2      	ldr	r2, [r4, #24]
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d301      	bcc.n	8000abc <obqReleaseEmptyBufferI+0x2c>
    obqp->brdptr = obqp->buffers;
 8000ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000aba:	6163      	str	r3, [r4, #20]
  chThdDequeueNextI(tqp, msg);
 8000abc:	2100      	movs	r1, #0
 8000abe:	4620      	mov	r0, r4
 8000ac0:	f008 f966 	bl	8008d90 <chThdDequeueNextI>
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
}
 8000ac4:	bd10      	pop	{r4, pc}
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 8000ac6:	68e3      	ldr	r3, [r4, #12]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d0ea      	beq.n	8000aa2 <obqReleaseEmptyBufferI+0x12>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e7e8      	b.n	8000aa2 <obqReleaseEmptyBufferI+0x12>
 8000ad0:	4801      	ldr	r0, [pc, #4]	; (8000ad8 <obqReleaseEmptyBufferI+0x48>)
 8000ad2:	f006 fdcd 	bl	8007670 <chSysHalt>
 8000ad6:	e7e5      	b.n	8000aa4 <obqReleaseEmptyBufferI+0x14>
 8000ad8:	0801460c 	.word	0x0801460c
 8000adc:	f3af 8000 	nop.w

08000ae0 <obqGetEmptyBufferTimeoutS>:
 *                      suspended state.
 *
 * @sclass
 */
msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                sysinterval_t timeout) {
 8000ae0:	b5d0      	push	{r4, r6, r7, lr}
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4616      	mov	r6, r2
 8000ae6:	461f      	mov	r7, r3

  osalDbgCheckClassS();
 8000ae8:	f007 f80a 	bl	8007b00 <chDbgCheckClassS>

  while (obqIsFullI(obqp)) {
 8000aec:	68e3      	ldr	r3, [r4, #12]
 8000aee:	b94b      	cbnz	r3, 8000b04 <obqGetEmptyBufferTimeoutS+0x24>
    if (obqp->suspended) {
 8000af0:	7a23      	ldrb	r3, [r4, #8]
 8000af2:	b9ab      	cbnz	r3, 8000b20 <obqGetEmptyBufferTimeoutS+0x40>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8000af4:	4632      	mov	r2, r6
 8000af6:	463b      	mov	r3, r7
 8000af8:	4620      	mov	r0, r4
 8000afa:	f008 f931 	bl	8008d60 <chThdEnqueueTimeoutS>
      return MSG_RESET;
    }
    msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
    if (msg < MSG_OK) {
 8000afe:	2800      	cmp	r0, #0
 8000b00:	daf4      	bge.n	8000aec <obqGetEmptyBufferTimeoutS+0xc>
 8000b02:	e008      	b.n	8000b16 <obqGetEmptyBufferTimeoutS+0x36>
      return msg;
    }
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");
 8000b04:	68e3      	ldr	r3, [r4, #12]
 8000b06:	b13b      	cbz	r3, 8000b18 <obqGetEmptyBufferTimeoutS+0x38>

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8000b08:	6923      	ldr	r3, [r4, #16]
 8000b0a:	1d1a      	adds	r2, r3, #4
 8000b0c:	62a2      	str	r2, [r4, #40]	; 0x28
  obqp->top = obqp->bwrptr + obqp->bsize;
 8000b0e:	69e2      	ldr	r2, [r4, #28]
 8000b10:	4413      	add	r3, r2
 8000b12:	62e3      	str	r3, [r4, #44]	; 0x2c

  return MSG_OK;
 8000b14:	2000      	movs	r0, #0
}
 8000b16:	bdd0      	pop	{r4, r6, r7, pc}
  osalDbgAssert(!obqIsFullI(obqp), "still full");
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <obqGetEmptyBufferTimeoutS+0x48>)
 8000b1a:	f006 fda9 	bl	8007670 <chSysHalt>
 8000b1e:	e7f3      	b.n	8000b08 <obqGetEmptyBufferTimeoutS+0x28>
      return MSG_RESET;
 8000b20:	f06f 0001 	mvn.w	r0, #1
 8000b24:	e7f7      	b.n	8000b16 <obqGetEmptyBufferTimeoutS+0x36>
 8000b26:	bf00      	nop
 8000b28:	08014624 	.word	0x08014624
 8000b2c:	f3af 8000 	nop.w

08000b30 <obqGetEmptyBufferTimeout>:
                               sysinterval_t timeout) {
 8000b30:	b5d0      	push	{r4, r6, r7, lr}
 8000b32:	4604      	mov	r4, r0
 8000b34:	4616      	mov	r6, r2
 8000b36:	461f      	mov	r7, r3
 8000b38:	2320      	movs	r3, #32
 8000b3a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000b3e:	f008 fa27 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000b42:	f006 ff25 	bl	8007990 <_dbg_check_lock>
  msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8000b46:	4632      	mov	r2, r6
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f7ff ffc8 	bl	8000ae0 <obqGetEmptyBufferTimeoutS>
 8000b50:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8000b52:	f006 ff35 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000b56:	f008 fa23 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <obqGetEmptyBufferTimeout+0x50>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d004      	beq.n	8000b6c <obqGetEmptyBufferTimeout+0x3c>
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	6899      	ldr	r1, [r3, #8]
 8000b66:	6893      	ldr	r3, [r2, #8]
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	d304      	bcc.n	8000b76 <obqGetEmptyBufferTimeout+0x46>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f383 8811 	msr	BASEPRI, r3
}
 8000b72:	4620      	mov	r0, r4
 8000b74:	bdd0      	pop	{r4, r6, r7, pc}
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <obqGetEmptyBufferTimeout+0x54>)
 8000b78:	f006 fd7a 	bl	8007670 <chSysHalt>
 8000b7c:	e7f6      	b.n	8000b6c <obqGetEmptyBufferTimeout+0x3c>
 8000b7e:	bf00      	nop
 8000b80:	20004f68 	.word	0x20004f68
 8000b84:	080145c8 	.word	0x080145c8
 8000b88:	f3af 8000 	nop.w
 8000b8c:	f3af 8000 	nop.w

08000b90 <obqPostFullBufferS>:
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @sclass
 */
void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4604      	mov	r4, r0
 8000b94:	460d      	mov	r5, r1

  osalDbgCheckClassS();
 8000b96:	f006 ffb3 	bl	8007b00 <chDbgCheckClassS>
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 8000b9a:	b11d      	cbz	r5, 8000ba4 <obqPostFullBufferS+0x14>
 8000b9c:	69e3      	ldr	r3, [r4, #28]
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d202      	bcs.n	8000baa <obqPostFullBufferS+0x1a>
 8000ba4:	480e      	ldr	r0, [pc, #56]	; (8000be0 <obqPostFullBufferS+0x50>)
 8000ba6:	f006 fd63 	bl	8007670 <chSysHalt>
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 8000baa:	68e3      	ldr	r3, [r4, #12]
 8000bac:	b1a3      	cbz	r3, 8000bd8 <obqPostFullBufferS+0x48>

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8000bae:	6923      	ldr	r3, [r4, #16]
 8000bb0:	601d      	str	r5, [r3, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8000bb2:	68e3      	ldr	r3, [r4, #12]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	60e3      	str	r3, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 8000bb8:	69e2      	ldr	r2, [r4, #28]
 8000bba:	6923      	ldr	r3, [r4, #16]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	6123      	str	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 8000bc0:	69a2      	ldr	r2, [r4, #24]
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d301      	bcc.n	8000bca <obqPostFullBufferS+0x3a>
    obqp->bwrptr = obqp->buffers;
 8000bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bc8:	6123      	str	r3, [r4, #16]
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8000bce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bd0:	b10b      	cbz	r3, 8000bd6 <obqPostFullBufferS+0x46>
    obqp->notify(obqp);
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	4798      	blx	r3
  }
}
 8000bd6:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 8000bd8:	4801      	ldr	r0, [pc, #4]	; (8000be0 <obqPostFullBufferS+0x50>)
 8000bda:	f006 fd49 	bl	8007670 <chSysHalt>
 8000bde:	e7e6      	b.n	8000bae <obqPostFullBufferS+0x1e>
 8000be0:	08014640 	.word	0x08014640
 8000be4:	f3af 8000 	nop.w
 8000be8:	f3af 8000 	nop.w
 8000bec:	f3af 8000 	nop.w

08000bf0 <obqPostFullBuffer>:
void obqPostFullBuffer(output_buffers_queue_t *obqp, size_t size) {
 8000bf0:	b538      	push	{r3, r4, r5, lr}
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	460d      	mov	r5, r1
 8000bf6:	2320      	movs	r3, #32
 8000bf8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000bfc:	f008 f9c8 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000c00:	f006 fec6 	bl	8007990 <_dbg_check_lock>
  obqPostFullBufferS(obqp, size);
 8000c04:	4629      	mov	r1, r5
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff ffc2 	bl	8000b90 <obqPostFullBufferS>
  _dbg_check_unlock();
 8000c0c:	f006 fed8 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000c10:	f008 f9c6 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <obqPostFullBuffer+0x48>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d004      	beq.n	8000c26 <obqPostFullBuffer+0x36>
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	6899      	ldr	r1, [r3, #8]
 8000c20:	6893      	ldr	r3, [r2, #8]
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d303      	bcc.n	8000c2e <obqPostFullBuffer+0x3e>
 8000c26:	2300      	movs	r3, #0
 8000c28:	f383 8811 	msr	BASEPRI, r3
}
 8000c2c:	bd38      	pop	{r3, r4, r5, pc}
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <obqPostFullBuffer+0x4c>)
 8000c30:	f006 fd1e 	bl	8007670 <chSysHalt>
 8000c34:	e7f7      	b.n	8000c26 <obqPostFullBuffer+0x36>
 8000c36:	bf00      	nop
 8000c38:	20004f68 	.word	0x20004f68
 8000c3c:	080145c8 	.word	0x080145c8

08000c40 <obqPutTimeout>:
 *                      suspended state.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    sysinterval_t timeout) {
 8000c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c44:	4604      	mov	r4, r0
 8000c46:	4688      	mov	r8, r1
 8000c48:	4616      	mov	r6, r2
 8000c4a:	461f      	mov	r7, r3
 8000c4c:	2320      	movs	r3, #32
 8000c4e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000c52:	f008 f99d 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000c56:	f006 fe9b 	bl	8007990 <_dbg_check_lock>
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 8000c5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c5c:	b1e3      	cbz	r3, 8000c98 <obqPutTimeout+0x58>
      return msg;
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
 8000c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c60:	f883 8000 	strb.w	r8, [r3]
  obqp->ptr++;
 8000c64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c66:	3301      	adds	r3, #1
 8000c68:	62a3      	str	r3, [r4, #40]	; 0x28

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8000c6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d230      	bcs.n	8000cd2 <obqPutTimeout+0x92>
  _dbg_check_unlock();
 8000c70:	f006 fea6 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000c74:	f008 f994 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <obqPutTimeout+0xa8>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d004      	beq.n	8000c8a <obqPutTimeout+0x4a>
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	6899      	ldr	r1, [r3, #8]
 8000c84:	6893      	ldr	r3, [r2, #8]
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d329      	bcc.n	8000cde <obqPutTimeout+0x9e>
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f380 8811 	msr	BASEPRI, r0
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
  }

  osalSysUnlock();
  return MSG_OK;
 8000c90:	4605      	mov	r5, r0
}
 8000c92:	4628      	mov	r0, r5
 8000c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8000c98:	4632      	mov	r2, r6
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f7ff ff1f 	bl	8000ae0 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8000ca2:	4605      	mov	r5, r0
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d0da      	beq.n	8000c5e <obqPutTimeout+0x1e>
  _dbg_check_unlock();
 8000ca8:	f006 fe8a 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000cac:	f008 f978 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <obqPutTimeout+0xa8>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d004      	beq.n	8000cc2 <obqPutTimeout+0x82>
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	6899      	ldr	r1, [r3, #8]
 8000cbc:	6893      	ldr	r3, [r2, #8]
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	d303      	bcc.n	8000cca <obqPutTimeout+0x8a>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f383 8811 	msr	BASEPRI, r3
 8000cc8:	e7e3      	b.n	8000c92 <obqPutTimeout+0x52>
 8000cca:	4808      	ldr	r0, [pc, #32]	; (8000cec <obqPutTimeout+0xac>)
 8000ccc:	f006 fcd0 	bl	8007670 <chSysHalt>
 8000cd0:	e7f7      	b.n	8000cc2 <obqPutTimeout+0x82>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8000cd2:	69e1      	ldr	r1, [r4, #28]
 8000cd4:	3904      	subs	r1, #4
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f7ff ff5a 	bl	8000b90 <obqPostFullBufferS>
 8000cdc:	e7c8      	b.n	8000c70 <obqPutTimeout+0x30>
 8000cde:	4803      	ldr	r0, [pc, #12]	; (8000cec <obqPutTimeout+0xac>)
 8000ce0:	f006 fcc6 	bl	8007670 <chSysHalt>
 8000ce4:	e7d1      	b.n	8000c8a <obqPutTimeout+0x4a>
 8000ce6:	bf00      	nop
 8000ce8:	20004f68 	.word	0x20004f68
 8000cec:	080145c8 	.word	0x080145c8

08000cf0 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
 8000cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	460f      	mov	r7, r1
  size_t w = 0;

  osalDbgCheck(n > 0U);
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	b142      	cbz	r2, 8000d0e <obqWriteTimeout+0x1e>
 8000cfc:	2320      	movs	r3, #32
 8000cfe:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000d02:	f008 f945 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000d06:	f006 fe43 	bl	8007990 <_dbg_check_lock>
  size_t w = 0;
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	e047      	b.n	8000d9e <obqWriteTimeout+0xae>
  osalDbgCheck(n > 0U);
 8000d0e:	483c      	ldr	r0, [pc, #240]	; (8000e00 <obqWriteTimeout+0x110>)
 8000d10:	f006 fcae 	bl	8007670 <chSysHalt>
 8000d14:	e7f2      	b.n	8000cfc <obqWriteTimeout+0xc>
    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
      msg_t msg;

      /* Getting an empty buffer using the specified timeout.*/
      msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8000d16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f7ff fee0 	bl	8000ae0 <obqGetEmptyBufferTimeoutS>

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8000d20:	2800      	cmp	r0, #0
 8000d22:	d03f      	beq.n	8000da4 <obqWriteTimeout+0xb4>
  _dbg_check_unlock();
 8000d24:	f006 fe4c 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000d28:	f008 f93a 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000d2c:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <obqWriteTimeout+0x114>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d004      	beq.n	8000d3e <obqWriteTimeout+0x4e>
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	6899      	ldr	r1, [r3, #8]
 8000d38:	6893      	ldr	r3, [r2, #8]
 8000d3a:	4299      	cmp	r1, r3
 8000d3c:	d305      	bcc.n	8000d4a <obqWriteTimeout+0x5a>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f383 8811 	msr	BASEPRI, r3
    if (w >= n) {
      return w;
    }
    osalSysLock();
  }
}
 8000d44:	4630      	mov	r0, r6
 8000d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d4a:	482f      	ldr	r0, [pc, #188]	; (8000e08 <obqWriteTimeout+0x118>)
 8000d4c:	f006 fc90 	bl	8007670 <chSysHalt>
 8000d50:	e7f5      	b.n	8000d3e <obqWriteTimeout+0x4e>
      memcpy(obqp->ptr, bp, size);
 8000d52:	462a      	mov	r2, r5
 8000d54:	4639      	mov	r1, r7
 8000d56:	f012 fd4b 	bl	80137f0 <memcpy>
      bp        += size;
 8000d5a:	442f      	add	r7, r5
      obqp->ptr += size;
 8000d5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d5e:	442b      	add	r3, r5
 8000d60:	62a3      	str	r3, [r4, #40]	; 0x28
      w         += size;
 8000d62:	442e      	add	r6, r5
    if (obqp->ptr >= obqp->top) {
 8000d64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d23e      	bcs.n	8000dea <obqWriteTimeout+0xfa>
  _dbg_check_unlock();
 8000d6c:	f006 fe28 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000d70:	f008 f916 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <obqWriteTimeout+0x114>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d004      	beq.n	8000d86 <obqWriteTimeout+0x96>
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	6899      	ldr	r1, [r3, #8]
 8000d80:	6893      	ldr	r3, [r2, #8]
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d337      	bcc.n	8000df6 <obqWriteTimeout+0x106>
 8000d86:	2300      	movs	r3, #0
 8000d88:	f383 8811 	msr	BASEPRI, r3
    if (w >= n) {
 8000d8c:	4546      	cmp	r6, r8
 8000d8e:	d2d9      	bcs.n	8000d44 <obqWriteTimeout+0x54>
 8000d90:	2320      	movs	r3, #32
 8000d92:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000d96:	f008 f8fb 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000d9a:	f006 fdf9 	bl	8007990 <_dbg_check_lock>
    if (obqp->ptr == NULL) {
 8000d9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0b8      	beq.n	8000d16 <obqWriteTimeout+0x26>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8000da4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000da6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000da8:	1a1b      	subs	r3, r3, r0
    if (size > (n - w)) {
 8000daa:	eba8 0506 	sub.w	r5, r8, r6
 8000dae:	429d      	cmp	r5, r3
 8000db0:	d300      	bcc.n	8000db4 <obqWriteTimeout+0xc4>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8000db2:	461d      	mov	r5, r3
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8000db4:	2d40      	cmp	r5, #64	; 0x40
 8000db6:	d9cc      	bls.n	8000d52 <obqWriteTimeout+0x62>
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8000db8:	463b      	mov	r3, r7
 8000dba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000dbe:	f8d3 e000 	ldr.w	lr, [r3]
 8000dc2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8000dc6:	689d      	ldr	r5, [r3, #8]
 8000dc8:	68d9      	ldr	r1, [r3, #12]
 8000dca:	f8c0 e000 	str.w	lr, [r0]
 8000dce:	f8c0 c004 	str.w	ip, [r0, #4]
 8000dd2:	6085      	str	r5, [r0, #8]
 8000dd4:	60c1      	str	r1, [r0, #12]
 8000dd6:	3310      	adds	r3, #16
 8000dd8:	3010      	adds	r0, #16
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d1ef      	bne.n	8000dbe <obqWriteTimeout+0xce>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 8000dde:	3740      	adds	r7, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8000de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000de2:	3340      	adds	r3, #64	; 0x40
 8000de4:	62a3      	str	r3, [r4, #40]	; 0x28
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 8000de6:	3640      	adds	r6, #64	; 0x40
 8000de8:	e7bc      	b.n	8000d64 <obqWriteTimeout+0x74>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8000dea:	69e1      	ldr	r1, [r4, #28]
 8000dec:	3904      	subs	r1, #4
 8000dee:	4620      	mov	r0, r4
 8000df0:	f7ff fece 	bl	8000b90 <obqPostFullBufferS>
 8000df4:	e7ba      	b.n	8000d6c <obqWriteTimeout+0x7c>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000df6:	4804      	ldr	r0, [pc, #16]	; (8000e08 <obqWriteTimeout+0x118>)
 8000df8:	f006 fc3a 	bl	8007670 <chSysHalt>
 8000dfc:	e7c3      	b.n	8000d86 <obqWriteTimeout+0x96>
 8000dfe:	bf00      	nop
 8000e00:	08014654 	.word	0x08014654
 8000e04:	20004f68 	.word	0x20004f68
 8000e08:	080145c8 	.word	0x080145c8
 8000e0c:	f3af 8000 	nop.w

08000e10 <obqTryFlushI>:
 * @retval false        if no new filled buffer has been posted to the queue.
 * @retval true         if a new filled buffer has been posted to the queue.
 *
 * @iclass
 */
bool obqTryFlushI(output_buffers_queue_t *obqp) {
 8000e10:	b510      	push	{r4, lr}
 8000e12:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8000e14:	f006 fe5c 	bl	8007ad0 <chDbgCheckClassI>

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8000e18:	6922      	ldr	r2, [r4, #16]
 8000e1a:	6963      	ldr	r3, [r4, #20]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d017      	beq.n	8000e50 <obqTryFlushI+0x40>
 8000e20:	2300      	movs	r3, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	b19b      	cbz	r3, 8000e4e <obqTryFlushI+0x3e>
 8000e26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e28:	b1bb      	cbz	r3, 8000e5a <obqTryFlushI+0x4a>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8000e2a:	1a9b      	subs	r3, r3, r2

    if (size > 0U) {
 8000e2c:	3b04      	subs	r3, #4
 8000e2e:	d016      	beq.n	8000e5e <obqTryFlushI+0x4e>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8000e30:	6013      	str	r3, [r2, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8000e32:	68e3      	ldr	r3, [r4, #12]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	60e3      	str	r3, [r4, #12]
      obqp->bwrptr += obqp->bsize;
 8000e38:	69e2      	ldr	r2, [r4, #28]
 8000e3a:	6923      	ldr	r3, [r4, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	6123      	str	r3, [r4, #16]
      if (obqp->bwrptr >= obqp->btop) {
 8000e40:	69a2      	ldr	r2, [r4, #24]
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d301      	bcc.n	8000e4a <obqTryFlushI+0x3a>
        obqp->bwrptr = obqp->buffers;
 8000e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e48:	6123      	str	r3, [r4, #16]
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62a3      	str	r3, [r4, #40]	; 0x28

      return true;
    }
  }
  return false;
}
 8000e4e:	bd10      	pop	{r4, pc}
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8000e50:	68e3      	ldr	r3, [r4, #12]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0e5      	beq.n	8000e22 <obqTryFlushI+0x12>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e7e3      	b.n	8000e22 <obqTryFlushI+0x12>
  return false;
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	e7f7      	b.n	8000e4e <obqTryFlushI+0x3e>
 8000e5e:	2000      	movs	r0, #0
 8000e60:	e7f5      	b.n	8000e4e <obqTryFlushI+0x3e>
 8000e62:	bf00      	nop
 8000e64:	f3af 8000 	nop.w
 8000e68:	f3af 8000 	nop.w
 8000e6c:	f3af 8000 	nop.w

08000e70 <obqFlush>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @api
 */
void obqFlush(output_buffers_queue_t *obqp) {
 8000e70:	b510      	push	{r4, lr}
 8000e72:	4604      	mov	r4, r0
 8000e74:	2320      	movs	r3, #32
 8000e76:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000e7a:	f008 f889 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000e7e:	f006 fd87 	bl	8007990 <_dbg_check_lock>

  osalSysLock();

  /* If there is a buffer partially filled and not being written.*/
  if (obqp->ptr != NULL) {
 8000e82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000e84:	b119      	cbz	r1, 8000e8e <obqFlush+0x1e>
    size_t size = ((size_t)obqp->ptr - (size_t)obqp->bwrptr) - sizeof (size_t);
 8000e86:	6923      	ldr	r3, [r4, #16]
 8000e88:	1ac9      	subs	r1, r1, r3

    if (size > 0U) {
 8000e8a:	3904      	subs	r1, #4
 8000e8c:	d110      	bne.n	8000eb0 <obqFlush+0x40>
  _dbg_check_unlock();
 8000e8e:	f006 fd97 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000e92:	f008 f885 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <obqFlush+0x50>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d004      	beq.n	8000ea8 <obqFlush+0x38>
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	6899      	ldr	r1, [r3, #8]
 8000ea2:	6893      	ldr	r3, [r2, #8]
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	d307      	bcc.n	8000eb8 <obqFlush+0x48>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f383 8811 	msr	BASEPRI, r3
      obqPostFullBufferS(obqp, size);
    }
  }

  osalSysUnlock();
}
 8000eae:	bd10      	pop	{r4, pc}
      obqPostFullBufferS(obqp, size);
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f7ff fe6d 	bl	8000b90 <obqPostFullBufferS>
 8000eb6:	e7ea      	b.n	8000e8e <obqFlush+0x1e>
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <obqFlush+0x54>)
 8000eba:	f006 fbd9 	bl	8007670 <chSysHalt>
 8000ebe:	e7f3      	b.n	8000ea8 <obqFlush+0x38>
 8000ec0:	20004f68 	.word	0x20004f68
 8000ec4:	080145c8 	.word	0x080145c8
	...

08000ed0 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8000ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	460f      	mov	r7, r1
  size_t s1, s2;

  osalDbgCheck(n > 0U);
 8000ed8:	4615      	mov	r5, r2
 8000eda:	b1b2      	cbz	r2, 8000f0a <iq_read+0x3a>

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 8000edc:	68a3      	ldr	r3, [r4, #8]
 8000ede:	42ab      	cmp	r3, r5
 8000ee0:	d200      	bcs.n	8000ee4 <iq_read+0x14>
    n = iqGetFullI(iqp);
 8000ee2:	68a5      	ldr	r5, [r4, #8]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000ee4:	6926      	ldr	r6, [r4, #16]
 8000ee6:	69a1      	ldr	r1, [r4, #24]
 8000ee8:	1a76      	subs	r6, r6, r1
  /*lint -restore*/
  if (n < s1) {
 8000eea:	42b5      	cmp	r5, r6
 8000eec:	d311      	bcc.n	8000f12 <iq_read+0x42>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
    iqp->q_rdptr += n;
  }
  else if (n > s1) {
 8000eee:	42b5      	cmp	r5, r6
 8000ef0:	d817      	bhi.n	8000f22 <iq_read+0x52>
    s2 = n - s1;
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
    iqp->q_rdptr = iqp->q_buffer + s2;
  }
  else { /* n == s1 */
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000ef2:	462a      	mov	r2, r5
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	f012 fc7b 	bl	80137f0 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8000efa:	68e3      	ldr	r3, [r4, #12]
 8000efc:	61a3      	str	r3, [r4, #24]
  }

  iqp->q_counter -= n;
 8000efe:	68a3      	ldr	r3, [r4, #8]
 8000f00:	1b5b      	subs	r3, r3, r5
 8000f02:	60a3      	str	r3, [r4, #8]
  return n;
}
 8000f04:	4628      	mov	r0, r5
 8000f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  osalDbgCheck(n > 0U);
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <iq_read+0x70>)
 8000f0c:	f006 fbb0 	bl	8007670 <chSysHalt>
 8000f10:	e7e4      	b.n	8000edc <iq_read+0xc>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000f12:	462a      	mov	r2, r5
 8000f14:	4638      	mov	r0, r7
 8000f16:	f012 fc6b 	bl	80137f0 <memcpy>
    iqp->q_rdptr += n;
 8000f1a:	69a3      	ldr	r3, [r4, #24]
 8000f1c:	442b      	add	r3, r5
 8000f1e:	61a3      	str	r3, [r4, #24]
 8000f20:	e7ed      	b.n	8000efe <iq_read+0x2e>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000f22:	4632      	mov	r2, r6
 8000f24:	4638      	mov	r0, r7
 8000f26:	f012 fc63 	bl	80137f0 <memcpy>
    s2 = n - s1;
 8000f2a:	eba5 0806 	sub.w	r8, r5, r6
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8000f2e:	4642      	mov	r2, r8
 8000f30:	68e1      	ldr	r1, [r4, #12]
 8000f32:	19b8      	adds	r0, r7, r6
 8000f34:	f012 fc5c 	bl	80137f0 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8000f38:	68e2      	ldr	r2, [r4, #12]
 8000f3a:	4442      	add	r2, r8
 8000f3c:	61a2      	str	r2, [r4, #24]
 8000f3e:	e7de      	b.n	8000efe <iq_read+0x2e>
 8000f40:	08014664 	.word	0x08014664
 8000f44:	f3af 8000 	nop.w
 8000f48:	f3af 8000 	nop.w
 8000f4c:	f3af 8000 	nop.w

08000f50 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 8000f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f54:	4604      	mov	r4, r0
 8000f56:	460f      	mov	r7, r1
  size_t s1, s2;

  osalDbgCheck(n > 0U);
 8000f58:	4615      	mov	r5, r2
 8000f5a:	b1b2      	cbz	r2, 8000f8a <oq_write+0x3a>

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 8000f5c:	68a3      	ldr	r3, [r4, #8]
 8000f5e:	42ab      	cmp	r3, r5
 8000f60:	d200      	bcs.n	8000f64 <oq_write+0x14>
    n = oqGetEmptyI(oqp);
 8000f62:	68a5      	ldr	r5, [r4, #8]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000f64:	6926      	ldr	r6, [r4, #16]
 8000f66:	6960      	ldr	r0, [r4, #20]
 8000f68:	1a36      	subs	r6, r6, r0
  /*lint -restore*/
  if (n < s1) {
 8000f6a:	42b5      	cmp	r5, r6
 8000f6c:	d311      	bcc.n	8000f92 <oq_write+0x42>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
    oqp->q_wrptr += n;
  }
  else if (n > s1) {
 8000f6e:	42b5      	cmp	r5, r6
 8000f70:	d817      	bhi.n	8000fa2 <oq_write+0x52>
    s2 = n - s1;
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
    oqp->q_wrptr = oqp->q_buffer + s2;
  }
  else { /* n == s1 */
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000f72:	462a      	mov	r2, r5
 8000f74:	4639      	mov	r1, r7
 8000f76:	f012 fc3b 	bl	80137f0 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8000f7a:	68e3      	ldr	r3, [r4, #12]
 8000f7c:	6163      	str	r3, [r4, #20]
  }

  oqp->q_counter -= n;
 8000f7e:	68a3      	ldr	r3, [r4, #8]
 8000f80:	1b5b      	subs	r3, r3, r5
 8000f82:	60a3      	str	r3, [r4, #8]
  return n;
}
 8000f84:	4628      	mov	r0, r5
 8000f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  osalDbgCheck(n > 0U);
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <oq_write+0x70>)
 8000f8c:	f006 fb70 	bl	8007670 <chSysHalt>
 8000f90:	e7e4      	b.n	8000f5c <oq_write+0xc>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000f92:	462a      	mov	r2, r5
 8000f94:	4639      	mov	r1, r7
 8000f96:	f012 fc2b 	bl	80137f0 <memcpy>
    oqp->q_wrptr += n;
 8000f9a:	6963      	ldr	r3, [r4, #20]
 8000f9c:	442b      	add	r3, r5
 8000f9e:	6163      	str	r3, [r4, #20]
 8000fa0:	e7ed      	b.n	8000f7e <oq_write+0x2e>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000fa2:	4632      	mov	r2, r6
 8000fa4:	4639      	mov	r1, r7
 8000fa6:	f012 fc23 	bl	80137f0 <memcpy>
    s2 = n - s1;
 8000faa:	eba5 0806 	sub.w	r8, r5, r6
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8000fae:	4642      	mov	r2, r8
 8000fb0:	19b9      	adds	r1, r7, r6
 8000fb2:	68e0      	ldr	r0, [r4, #12]
 8000fb4:	f012 fc1c 	bl	80137f0 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8000fb8:	68e2      	ldr	r2, [r4, #12]
 8000fba:	4442      	add	r2, r8
 8000fbc:	6162      	str	r2, [r4, #20]
 8000fbe:	e7de      	b.n	8000f7e <oq_write+0x2e>
 8000fc0:	0801466c 	.word	0x0801466c
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	f3af 8000 	nop.w
 8000fcc:	f3af 8000 	nop.w

08000fd0 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 8000fd0:	b410      	push	{r4}
  tqp->next = (thread_t *)tqp;
 8000fd2:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 8000fd4:	6040      	str	r0, [r0, #4]

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	6084      	str	r4, [r0, #8]
  iqp->q_buffer  = bp;
 8000fda:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 8000fdc:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 8000fde:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
 8000fe0:	440a      	add	r2, r1
 8000fe2:	6102      	str	r2, [r0, #16]
  iqp->q_notify  = infy;
 8000fe4:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
 8000fe6:	9b01      	ldr	r3, [sp, #4]
 8000fe8:	6203      	str	r3, [r0, #32]
}
 8000fea:	bc10      	pop	{r4}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <iqResetI>:
 *
 * @param[in] iqp       pointer to an @p input_queue_t structure
 *
 * @iclass
 */
void iqResetI(input_queue_t *iqp) {
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8000ff4:	f006 fd6c 	bl	8007ad0 <chDbgCheckClassI>

  iqp->q_rdptr = iqp->q_buffer;
 8000ff8:	68e3      	ldr	r3, [r4, #12]
 8000ffa:	61a3      	str	r3, [r4, #24]
  iqp->q_wrptr = iqp->q_buffer;
 8000ffc:	6163      	str	r3, [r4, #20]
  iqp->q_counter = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60a3      	str	r3, [r4, #8]
  chThdDequeueAllI(tqp, msg);
 8001002:	f06f 0101 	mvn.w	r1, #1
 8001006:	4620      	mov	r0, r4
 8001008:	f007 fee2 	bl	8008dd0 <chThdDequeueAllI>
  osalThreadDequeueAllI(&iqp->q_waiting, MSG_RESET);
}
 800100c:	bd10      	pop	{r4, pc}
 800100e:	bf00      	nop

08001010 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4604      	mov	r4, r0
 8001014:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8001016:	f006 fd5b 	bl	8007ad0 <chDbgCheckClassI>

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 800101a:	6963      	ldr	r3, [r4, #20]
 800101c:	69a2      	ldr	r2, [r4, #24]
 800101e:	4293      	cmp	r3, r2
 8001020:	d013      	beq.n	800104a <iqPutI+0x3a>
 8001022:	2200      	movs	r2, #0
 8001024:	b9b2      	cbnz	r2, 8001054 <iqPutI+0x44>
    iqp->q_counter++;
 8001026:	68a2      	ldr	r2, [r4, #8]
 8001028:	3201      	adds	r2, #1
 800102a:	60a2      	str	r2, [r4, #8]
    *iqp->q_wrptr++ = b;
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	6162      	str	r2, [r4, #20]
 8001030:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8001032:	6962      	ldr	r2, [r4, #20]
 8001034:	6923      	ldr	r3, [r4, #16]
 8001036:	429a      	cmp	r2, r3
 8001038:	d301      	bcc.n	800103e <iqPutI+0x2e>
      iqp->q_wrptr = iqp->q_buffer;
 800103a:	68e3      	ldr	r3, [r4, #12]
 800103c:	6163      	str	r3, [r4, #20]
  chThdDequeueNextI(tqp, msg);
 800103e:	2100      	movs	r1, #0
 8001040:	4620      	mov	r0, r4
 8001042:	f007 fea5 	bl	8008d90 <chThdDequeueNextI>
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);

    return MSG_OK;
 8001046:	2000      	movs	r0, #0
  }

  return MSG_TIMEOUT;
}
 8001048:	bd38      	pop	{r3, r4, r5, pc}
  if (!iqIsFullI(iqp)) {
 800104a:	68a2      	ldr	r2, [r4, #8]
 800104c:	2a00      	cmp	r2, #0
 800104e:	d0e9      	beq.n	8001024 <iqPutI+0x14>
 8001050:	2201      	movs	r2, #1
 8001052:	e7e7      	b.n	8001024 <iqPutI+0x14>
  return MSG_TIMEOUT;
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	e7f6      	b.n	8001048 <iqPutI+0x38>
 800105a:	bf00      	nop
 800105c:	f3af 8000 	nop.w

08001060 <iqGetI>:
 * @retval MSG_TIMEOUT  if the queue is empty.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @iclass
 */
msg_t iqGetI(input_queue_t *iqp) {
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8001064:	f006 fd34 	bl	8007ad0 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!iqIsEmptyI(iqp)) {
 8001068:	68a3      	ldr	r3, [r4, #8]
 800106a:	b18b      	cbz	r3, 8001090 <iqGetI+0x30>
    uint8_t b;

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 800106c:	68a3      	ldr	r3, [r4, #8]
 800106e:	3b01      	subs	r3, #1
 8001070:	60a3      	str	r3, [r4, #8]
    b = *iqp->q_rdptr++;
 8001072:	69a2      	ldr	r2, [r4, #24]
 8001074:	1c53      	adds	r3, r2, #1
 8001076:	61a3      	str	r3, [r4, #24]
 8001078:	7815      	ldrb	r5, [r2, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 800107a:	6922      	ldr	r2, [r4, #16]
 800107c:	4293      	cmp	r3, r2
 800107e:	d301      	bcc.n	8001084 <iqGetI+0x24>
      iqp->q_rdptr = iqp->q_buffer;
 8001080:	68e3      	ldr	r3, [r4, #12]
 8001082:	61a3      	str	r3, [r4, #24]
    }

    /* Inform the low side that the queue has at least one slot available.*/
    if (iqp->q_notify != NULL) {
 8001084:	69e3      	ldr	r3, [r4, #28]
 8001086:	b10b      	cbz	r3, 800108c <iqGetI+0x2c>
      iqp->q_notify(iqp);
 8001088:	4620      	mov	r0, r4
 800108a:	4798      	blx	r3
    }

    return (msg_t)b;
 800108c:	4628      	mov	r0, r5
  }

  return MSG_TIMEOUT;
}
 800108e:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	e7fb      	b.n	800108e <iqGetI+0x2e>
 8001096:	bf00      	nop
 8001098:	f3af 8000 	nop.w
 800109c:	f3af 8000 	nop.w

080010a0 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	4604      	mov	r4, r0
 80010a4:	4616      	mov	r6, r2
 80010a6:	461f      	mov	r7, r3
 80010a8:	2320      	movs	r3, #32
 80010aa:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80010ae:	f007 ff6f 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80010b2:	f006 fc6d 	bl	8007990 <_dbg_check_lock>
  uint8_t b;

  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 80010b6:	68a3      	ldr	r3, [r4, #8]
 80010b8:	b9db      	cbnz	r3, 80010f2 <iqGetTimeout+0x52>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80010ba:	4632      	mov	r2, r6
 80010bc:	463b      	mov	r3, r7
 80010be:	4620      	mov	r0, r4
 80010c0:	f007 fe4e 	bl	8008d60 <chThdEnqueueTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 80010c4:	1e05      	subs	r5, r0, #0
 80010c6:	daf6      	bge.n	80010b6 <iqGetTimeout+0x16>
  _dbg_check_unlock();
 80010c8:	f006 fc7a 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80010cc:	f007 ff68 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <iqGetTimeout+0xa0>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d004      	beq.n	80010e2 <iqGetTimeout+0x42>
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	6899      	ldr	r1, [r3, #8]
 80010dc:	6893      	ldr	r3, [r2, #8]
 80010de:	4299      	cmp	r1, r3
 80010e0:	d303      	bcc.n	80010ea <iqGetTimeout+0x4a>
 80010e2:	2300      	movs	r3, #0
 80010e4:	f383 8811 	msr	BASEPRI, r3
 80010e8:	e023      	b.n	8001132 <iqGetTimeout+0x92>
 80010ea:	4816      	ldr	r0, [pc, #88]	; (8001144 <iqGetTimeout+0xa4>)
 80010ec:	f006 fac0 	bl	8007670 <chSysHalt>
 80010f0:	e7f7      	b.n	80010e2 <iqGetTimeout+0x42>
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 80010f2:	68a3      	ldr	r3, [r4, #8]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 80010f8:	69a2      	ldr	r2, [r4, #24]
 80010fa:	1c53      	adds	r3, r2, #1
 80010fc:	61a3      	str	r3, [r4, #24]
 80010fe:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001100:	6922      	ldr	r2, [r4, #16]
 8001102:	4293      	cmp	r3, r2
 8001104:	d301      	bcc.n	800110a <iqGetTimeout+0x6a>
    iqp->q_rdptr = iqp->q_buffer;
 8001106:	68e3      	ldr	r3, [r4, #12]
 8001108:	61a3      	str	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 800110a:	69e3      	ldr	r3, [r4, #28]
 800110c:	b10b      	cbz	r3, 8001112 <iqGetTimeout+0x72>
    iqp->q_notify(iqp);
 800110e:	4620      	mov	r0, r4
 8001110:	4798      	blx	r3
  _dbg_check_unlock();
 8001112:	f006 fc55 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001116:	f007 ff43 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <iqGetTimeout+0xa0>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d004      	beq.n	800112c <iqGetTimeout+0x8c>
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	6899      	ldr	r1, [r3, #8]
 8001126:	6893      	ldr	r3, [r2, #8]
 8001128:	4299      	cmp	r1, r3
 800112a:	d304      	bcc.n	8001136 <iqGetTimeout+0x96>
 800112c:	2300      	movs	r3, #0
 800112e:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return (msg_t)b;
}
 8001132:	4628      	mov	r0, r5
 8001134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <iqGetTimeout+0xa4>)
 8001138:	f006 fa9a 	bl	8007670 <chSysHalt>
 800113c:	e7f6      	b.n	800112c <iqGetTimeout+0x8c>
 800113e:	bf00      	nop
 8001140:	20004f68 	.word	0x20004f68
 8001144:	08014678 	.word	0x08014678
 8001148:	f3af 8000 	nop.w
 800114c:	f3af 8000 	nop.w

08001150 <iqReadI>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @iclass
 */
size_t iqReadI(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8001150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001152:	4604      	mov	r4, r0
 8001154:	460e      	mov	r6, r1
 8001156:	4617      	mov	r7, r2
  qnotify_t nfy = iqp->q_notify;
 8001158:	69c5      	ldr	r5, [r0, #28]
  size_t rd;

  osalDbgCheckClassI();
 800115a:	f006 fcb9 	bl	8007ad0 <chDbgCheckClassI>

  rd = iq_read(iqp, bp, n);
 800115e:	463a      	mov	r2, r7
 8001160:	4631      	mov	r1, r6
 8001162:	4620      	mov	r0, r4
 8001164:	f7ff feb4 	bl	8000ed0 <iq_read>

  /* Inform the low side that the queue has at least one character
     available.*/
  if ((rd > (size_t)0) && (nfy != NULL)) {
 8001168:	4606      	mov	r6, r0
 800116a:	b110      	cbz	r0, 8001172 <iqReadI+0x22>
 800116c:	b10d      	cbz	r5, 8001172 <iqReadI+0x22>
    nfy(iqp);
 800116e:	4620      	mov	r0, r4
 8001170:	47a8      	blx	r5
  }

  return rd;
}
 8001172:	4630      	mov	r0, r6
 8001174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001176:	bf00      	nop
 8001178:	f3af 8000 	nop.w
 800117c:	f3af 8000 	nop.w

08001180 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8001180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001184:	4607      	mov	r7, r0
 8001186:	460d      	mov	r5, r1
  qnotify_t nfy = iqp->q_notify;
 8001188:	f8d0 801c 	ldr.w	r8, [r0, #28]
  size_t max = n;

  osalDbgCheck(n > 0U);
 800118c:	4691      	mov	r9, r2
 800118e:	b142      	cbz	r2, 80011a2 <iqReadTimeout+0x22>
 8001190:	2320      	movs	r3, #32
 8001192:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001196:	f007 fefb 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800119a:	f006 fbf9 	bl	8007990 <_dbg_check_lock>
 800119e:	464c      	mov	r4, r9
 80011a0:	e02c      	b.n	80011fc <iqReadTimeout+0x7c>
 80011a2:	4827      	ldr	r0, [pc, #156]	; (8001240 <iqReadTimeout+0xc0>)
 80011a4:	f006 fa64 	bl	8007670 <chSysHalt>
 80011a8:	e7f2      	b.n	8001190 <iqReadTimeout+0x10>
 80011aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80011ae:	4638      	mov	r0, r7
 80011b0:	f007 fdd6 	bl	8008d60 <chThdEnqueueTimeoutS>
    done = iq_read(iqp, bp, n);
    if (done == (size_t)0) {
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80011b4:	b310      	cbz	r0, 80011fc <iqReadTimeout+0x7c>
  _dbg_check_unlock();
 80011b6:	f006 fc03 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80011ba:	f007 fef1 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <iqReadTimeout+0xc4>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d004      	beq.n	80011d0 <iqReadTimeout+0x50>
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	6899      	ldr	r1, [r3, #8]
 80011ca:	6893      	ldr	r3, [r2, #8]
 80011cc:	4299      	cmp	r1, r3
 80011ce:	d332      	bcc.n	8001236 <iqReadTimeout+0xb6>
 80011d0:	2300      	movs	r3, #0
 80011d2:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80011d6:	eba9 0004 	sub.w	r0, r9, r4
 80011da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011de:	481a      	ldr	r0, [pc, #104]	; (8001248 <iqReadTimeout+0xc8>)
 80011e0:	f006 fa46 	bl	8007670 <chSysHalt>
 80011e4:	2300      	movs	r3, #0
 80011e6:	f383 8811 	msr	BASEPRI, r3
      n  -= done;
 80011ea:	1ba4      	subs	r4, r4, r6
      bp += done;
 80011ec:	4435      	add	r5, r6
 80011ee:	2320      	movs	r3, #32
 80011f0:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80011f4:	f007 fecc 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80011f8:	f006 fbca 	bl	8007990 <_dbg_check_lock>
  while (n > 0U) {
 80011fc:	2c00      	cmp	r4, #0
 80011fe:	d0da      	beq.n	80011b6 <iqReadTimeout+0x36>
    done = iq_read(iqp, bp, n);
 8001200:	4622      	mov	r2, r4
 8001202:	4629      	mov	r1, r5
 8001204:	4638      	mov	r0, r7
 8001206:	f7ff fe63 	bl	8000ed0 <iq_read>
    if (done == (size_t)0) {
 800120a:	4606      	mov	r6, r0
 800120c:	2800      	cmp	r0, #0
 800120e:	d0cc      	beq.n	80011aa <iqReadTimeout+0x2a>
      if (nfy != NULL) {
 8001210:	f1b8 0f00 	cmp.w	r8, #0
 8001214:	d001      	beq.n	800121a <iqReadTimeout+0x9a>
        nfy(iqp);
 8001216:	4638      	mov	r0, r7
 8001218:	47c0      	blx	r8
  _dbg_check_unlock();
 800121a:	f006 fbd1 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800121e:	f007 febf 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <iqReadTimeout+0xc4>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d0dc      	beq.n	80011e4 <iqReadTimeout+0x64>
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	6899      	ldr	r1, [r3, #8]
 800122e:	6893      	ldr	r3, [r2, #8]
 8001230:	4299      	cmp	r1, r3
 8001232:	d2d7      	bcs.n	80011e4 <iqReadTimeout+0x64>
 8001234:	e7d3      	b.n	80011de <iqReadTimeout+0x5e>
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <iqReadTimeout+0xc8>)
 8001238:	f006 fa1a 	bl	8007670 <chSysHalt>
 800123c:	e7c8      	b.n	80011d0 <iqReadTimeout+0x50>
 800123e:	bf00      	nop
 8001240:	08014684 	.word	0x08014684
 8001244:	20004f68 	.word	0x20004f68
 8001248:	08014678 	.word	0x08014678
 800124c:	f3af 8000 	nop.w

08001250 <oqObjectInit>:
  tqp->next = (thread_t *)tqp;
 8001250:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 8001252:	6040      	str	r0, [r0, #4]
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001254:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 8001256:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 8001258:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 800125a:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
 800125c:	4411      	add	r1, r2
 800125e:	6101      	str	r1, [r0, #16]
  oqp->q_notify  = onfy;
 8001260:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
 8001262:	9b00      	ldr	r3, [sp, #0]
 8001264:	6203      	str	r3, [r0, #32]
}
 8001266:	4770      	bx	lr
 8001268:	f3af 8000 	nop.w
 800126c:	f3af 8000 	nop.w

08001270 <oqResetI>:
 *
 * @param[in] oqp       pointer to an @p output_queue_t structure
 *
 * @iclass
 */
void oqResetI(output_queue_t *oqp) {
 8001270:	b510      	push	{r4, lr}
 8001272:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8001274:	f006 fc2c 	bl	8007ad0 <chDbgCheckClassI>

  oqp->q_rdptr = oqp->q_buffer;
 8001278:	68e2      	ldr	r2, [r4, #12]
 800127a:	61a2      	str	r2, [r4, #24]
  oqp->q_wrptr = oqp->q_buffer;
 800127c:	6162      	str	r2, [r4, #20]
  oqp->q_counter = qSizeX(oqp);
 800127e:	6923      	ldr	r3, [r4, #16]
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	60a3      	str	r3, [r4, #8]
  chThdDequeueAllI(tqp, msg);
 8001284:	f06f 0101 	mvn.w	r1, #1
 8001288:	4620      	mov	r0, r4
 800128a:	f007 fda1 	bl	8008dd0 <chThdDequeueAllI>
  osalThreadDequeueAllI(&oqp->q_waiting, MSG_RESET);
}
 800128e:	bd10      	pop	{r4, pc}

08001290 <oqPutI>:
 * @retval MSG_TIMEOUT  if the queue is full.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @iclass
 */
msg_t oqPutI(output_queue_t *oqp, uint8_t b) {
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8001296:	f006 fc1b 	bl	8007ad0 <chDbgCheckClassI>

  /* Queue space check.*/
  while (!oqIsFullI(oqp)) {
 800129a:	68a3      	ldr	r3, [r4, #8]
 800129c:	b193      	cbz	r3, 80012c4 <oqPutI+0x34>
    /* Putting the character into the queue.*/
    oqp->q_counter--;
 800129e:	68a3      	ldr	r3, [r4, #8]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = b;
 80012a4:	6963      	ldr	r3, [r4, #20]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	6162      	str	r2, [r4, #20]
 80012aa:	701d      	strb	r5, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 80012ac:	6962      	ldr	r2, [r4, #20]
 80012ae:	6923      	ldr	r3, [r4, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d301      	bcc.n	80012b8 <oqPutI+0x28>
      oqp->q_wrptr = oqp->q_buffer;
 80012b4:	68e3      	ldr	r3, [r4, #12]
 80012b6:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (oqp->q_notify != NULL) {
 80012b8:	69e3      	ldr	r3, [r4, #28]
 80012ba:	b133      	cbz	r3, 80012ca <oqPutI+0x3a>
      oqp->q_notify(oqp);
 80012bc:	4620      	mov	r0, r4
 80012be:	4798      	blx	r3
    }

    return MSG_OK;
 80012c0:	2000      	movs	r0, #0
  }

  return MSG_TIMEOUT;
}
 80012c2:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	e7fb      	b.n	80012c2 <oqPutI+0x32>
    return MSG_OK;
 80012ca:	2000      	movs	r0, #0
 80012cc:	e7f9      	b.n	80012c2 <oqPutI+0x32>
 80012ce:	bf00      	nop

080012d0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 80012d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012d4:	4604      	mov	r4, r0
 80012d6:	4688      	mov	r8, r1
 80012d8:	4616      	mov	r6, r2
 80012da:	461f      	mov	r7, r3
 80012dc:	2320      	movs	r3, #32
 80012de:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80012e2:	f007 fe55 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80012e6:	f006 fb53 	bl	8007990 <_dbg_check_lock>

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 80012ea:	68a3      	ldr	r3, [r4, #8]
 80012ec:	b9db      	cbnz	r3, 8001326 <oqPutTimeout+0x56>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80012ee:	4632      	mov	r2, r6
 80012f0:	463b      	mov	r3, r7
 80012f2:	4620      	mov	r0, r4
 80012f4:	f007 fd34 	bl	8008d60 <chThdEnqueueTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 80012f8:	1e05      	subs	r5, r0, #0
 80012fa:	daf6      	bge.n	80012ea <oqPutTimeout+0x1a>
  _dbg_check_unlock();
 80012fc:	f006 fb60 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001300:	f007 fe4e 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001304:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <oqPutTimeout+0xa8>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d004      	beq.n	8001316 <oqPutTimeout+0x46>
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	6899      	ldr	r1, [r3, #8]
 8001310:	6893      	ldr	r3, [r2, #8]
 8001312:	4299      	cmp	r1, r3
 8001314:	d303      	bcc.n	800131e <oqPutTimeout+0x4e>
 8001316:	2300      	movs	r3, #0
 8001318:	f383 8811 	msr	BASEPRI, r3
 800131c:	e025      	b.n	800136a <oqPutTimeout+0x9a>
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <oqPutTimeout+0xac>)
 8001320:	f006 f9a6 	bl	8007670 <chSysHalt>
 8001324:	e7f7      	b.n	8001316 <oqPutTimeout+0x46>
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001326:	68a3      	ldr	r3, [r4, #8]
 8001328:	3b01      	subs	r3, #1
 800132a:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800132c:	6963      	ldr	r3, [r4, #20]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	6162      	str	r2, [r4, #20]
 8001332:	f883 8000 	strb.w	r8, [r3]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001336:	6962      	ldr	r2, [r4, #20]
 8001338:	6923      	ldr	r3, [r4, #16]
 800133a:	429a      	cmp	r2, r3
 800133c:	d301      	bcc.n	8001342 <oqPutTimeout+0x72>
    oqp->q_wrptr = oqp->q_buffer;
 800133e:	68e3      	ldr	r3, [r4, #12]
 8001340:	6163      	str	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8001342:	69e3      	ldr	r3, [r4, #28]
 8001344:	b10b      	cbz	r3, 800134a <oqPutTimeout+0x7a>
    oqp->q_notify(oqp);
 8001346:	4620      	mov	r0, r4
 8001348:	4798      	blx	r3
  _dbg_check_unlock();
 800134a:	f006 fb39 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800134e:	f007 fe27 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <oqPutTimeout+0xa8>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d004      	beq.n	8001364 <oqPutTimeout+0x94>
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	6899      	ldr	r1, [r3, #8]
 800135e:	6893      	ldr	r3, [r2, #8]
 8001360:	4299      	cmp	r1, r3
 8001362:	d305      	bcc.n	8001370 <oqPutTimeout+0xa0>
 8001364:	2500      	movs	r5, #0
 8001366:	f385 8811 	msr	BASEPRI, r5
  }

  osalSysUnlock();

  return MSG_OK;
}
 800136a:	4628      	mov	r0, r5
 800136c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <oqPutTimeout+0xac>)
 8001372:	f006 f97d 	bl	8007670 <chSysHalt>
 8001376:	e7f5      	b.n	8001364 <oqPutTimeout+0x94>
 8001378:	20004f68 	.word	0x20004f68
 800137c:	08014678 	.word	0x08014678

08001380 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 8001380:	b538      	push	{r3, r4, r5, lr}
 8001382:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8001384:	f006 fba4 	bl	8007ad0 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8001388:	6962      	ldr	r2, [r4, #20]
 800138a:	69a3      	ldr	r3, [r4, #24]
 800138c:	429a      	cmp	r2, r3
 800138e:	d012      	beq.n	80013b6 <oqGetI+0x36>
 8001390:	2200      	movs	r2, #0
 8001392:	b9aa      	cbnz	r2, 80013c0 <oqGetI+0x40>
    uint8_t b;

    oqp->q_counter++;
 8001394:	68a2      	ldr	r2, [r4, #8]
 8001396:	3201      	adds	r2, #1
 8001398:	60a2      	str	r2, [r4, #8]
    b = *oqp->q_rdptr++;
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	61a2      	str	r2, [r4, #24]
 800139e:	781d      	ldrb	r5, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 80013a0:	6923      	ldr	r3, [r4, #16]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d301      	bcc.n	80013aa <oqGetI+0x2a>
      oqp->q_rdptr = oqp->q_buffer;
 80013a6:	68e3      	ldr	r3, [r4, #12]
 80013a8:	61a3      	str	r3, [r4, #24]
  chThdDequeueNextI(tqp, msg);
 80013aa:	2100      	movs	r1, #0
 80013ac:	4620      	mov	r0, r4
 80013ae:	f007 fcef 	bl	8008d90 <chThdDequeueNextI>
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);

    return (msg_t)b;
 80013b2:	4628      	mov	r0, r5
  }

  return MSG_TIMEOUT;
}
 80013b4:	bd38      	pop	{r3, r4, r5, pc}
  if (!oqIsEmptyI(oqp)) {
 80013b6:	68a2      	ldr	r2, [r4, #8]
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	d0ea      	beq.n	8001392 <oqGetI+0x12>
 80013bc:	2201      	movs	r2, #1
 80013be:	e7e8      	b.n	8001392 <oqGetI+0x12>
  return MSG_TIMEOUT;
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	e7f6      	b.n	80013b4 <oqGetI+0x34>
 80013c6:	bf00      	nop
 80013c8:	f3af 8000 	nop.w
 80013cc:	f3af 8000 	nop.w

080013d0 <oqWriteI>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @iclass
 */
size_t oqWriteI(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d2:	4604      	mov	r4, r0
 80013d4:	460e      	mov	r6, r1
 80013d6:	4617      	mov	r7, r2
  qnotify_t nfy = oqp->q_notify;
 80013d8:	69c5      	ldr	r5, [r0, #28]
  size_t wr;

  osalDbgCheckClassI();
 80013da:	f006 fb79 	bl	8007ad0 <chDbgCheckClassI>

  wr = oq_write(oqp, bp, n);
 80013de:	463a      	mov	r2, r7
 80013e0:	4631      	mov	r1, r6
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff fdb4 	bl	8000f50 <oq_write>

  /* Inform the low side that the queue has at least one character
     available.*/
  if ((wr > (size_t)0) && (nfy != NULL)) {
 80013e8:	4606      	mov	r6, r0
 80013ea:	b110      	cbz	r0, 80013f2 <oqWriteI+0x22>
 80013ec:	b10d      	cbz	r5, 80013f2 <oqWriteI+0x22>
    nfy(oqp);
 80013ee:	4620      	mov	r0, r4
 80013f0:	47a8      	blx	r5
  }

  return wr;
}
 80013f2:	4630      	mov	r0, r6
 80013f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	f3af 8000 	nop.w
 80013fc:	f3af 8000 	nop.w

08001400 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001404:	4607      	mov	r7, r0
 8001406:	460d      	mov	r5, r1
  qnotify_t nfy = oqp->q_notify;
 8001408:	f8d0 801c 	ldr.w	r8, [r0, #28]
  size_t max = n;

  osalDbgCheck(n > 0U);
 800140c:	4691      	mov	r9, r2
 800140e:	b142      	cbz	r2, 8001422 <oqWriteTimeout+0x22>
 8001410:	2320      	movs	r3, #32
 8001412:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001416:	f007 fdbb 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800141a:	f006 fab9 	bl	8007990 <_dbg_check_lock>
 800141e:	464c      	mov	r4, r9
 8001420:	e02c      	b.n	800147c <oqWriteTimeout+0x7c>
 8001422:	4827      	ldr	r0, [pc, #156]	; (80014c0 <oqWriteTimeout+0xc0>)
 8001424:	f006 f924 	bl	8007670 <chSysHalt>
 8001428:	e7f2      	b.n	8001410 <oqWriteTimeout+0x10>
  return chThdEnqueueTimeoutS(tqp, timeout);
 800142a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800142e:	4638      	mov	r0, r7
 8001430:	f007 fc96 	bl	8008d60 <chThdEnqueueTimeoutS>
    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8001434:	b310      	cbz	r0, 800147c <oqWriteTimeout+0x7c>
  _dbg_check_unlock();
 8001436:	f006 fac3 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800143a:	f007 fdb1 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <oqWriteTimeout+0xc4>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d004      	beq.n	8001450 <oqWriteTimeout+0x50>
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	6899      	ldr	r1, [r3, #8]
 800144a:	6893      	ldr	r3, [r2, #8]
 800144c:	4299      	cmp	r1, r3
 800144e:	d332      	bcc.n	80014b6 <oqWriteTimeout+0xb6>
 8001450:	2300      	movs	r3, #0
 8001452:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8001456:	eba9 0004 	sub.w	r0, r9, r4
 800145a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800145e:	481a      	ldr	r0, [pc, #104]	; (80014c8 <oqWriteTimeout+0xc8>)
 8001460:	f006 f906 	bl	8007670 <chSysHalt>
 8001464:	2300      	movs	r3, #0
 8001466:	f383 8811 	msr	BASEPRI, r3
      n  -= done;
 800146a:	1ba4      	subs	r4, r4, r6
      bp += done;
 800146c:	4435      	add	r5, r6
 800146e:	2320      	movs	r3, #32
 8001470:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001474:	f007 fd8c 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001478:	f006 fa8a 	bl	8007990 <_dbg_check_lock>
  while (n > 0U) {
 800147c:	2c00      	cmp	r4, #0
 800147e:	d0da      	beq.n	8001436 <oqWriteTimeout+0x36>
    done = oq_write(oqp, bp, n);
 8001480:	4622      	mov	r2, r4
 8001482:	4629      	mov	r1, r5
 8001484:	4638      	mov	r0, r7
 8001486:	f7ff fd63 	bl	8000f50 <oq_write>
    if (done == (size_t)0) {
 800148a:	4606      	mov	r6, r0
 800148c:	2800      	cmp	r0, #0
 800148e:	d0cc      	beq.n	800142a <oqWriteTimeout+0x2a>
      if (nfy != NULL) {
 8001490:	f1b8 0f00 	cmp.w	r8, #0
 8001494:	d001      	beq.n	800149a <oqWriteTimeout+0x9a>
        nfy(oqp);
 8001496:	4638      	mov	r0, r7
 8001498:	47c0      	blx	r8
  _dbg_check_unlock();
 800149a:	f006 fa91 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800149e:	f007 fd7f 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <oqWriteTimeout+0xc4>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d0dc      	beq.n	8001464 <oqWriteTimeout+0x64>
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	6899      	ldr	r1, [r3, #8]
 80014ae:	6893      	ldr	r3, [r2, #8]
 80014b0:	4299      	cmp	r1, r3
 80014b2:	d2d7      	bcs.n	8001464 <oqWriteTimeout+0x64>
 80014b4:	e7d3      	b.n	800145e <oqWriteTimeout+0x5e>
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <oqWriteTimeout+0xc8>)
 80014b8:	f006 f8da 	bl	8007670 <chSysHalt>
 80014bc:	e7c8      	b.n	8001450 <oqWriteTimeout+0x50>
 80014be:	bf00      	nop
 80014c0:	08014694 	.word	0x08014694
 80014c4:	20004f68 	.word	0x20004f68
 80014c8:	08014678 	.word	0x08014678
 80014cc:	00000000 	.word	0x00000000

080014d0 <_mmcsd_get_slice>:
 *
 * @notapi
 */
uint32_t _mmcsd_get_slice(const uint32_t *data,
                          uint32_t end,
                          uint32_t start) {
 80014d0:	b570      	push	{r4, r5, r6, lr}
 80014d2:	4605      	mov	r5, r0
 80014d4:	460c      	mov	r4, r1
 80014d6:	4616      	mov	r6, r2
  unsigned startidx, endidx, startoff;
  uint32_t endmask;

  osalDbgCheck((end >= start) && ((end - start) < 32U));
 80014d8:	4291      	cmp	r1, r2
 80014da:	d302      	bcc.n	80014e2 <_mmcsd_get_slice+0x12>
 80014dc:	1a8b      	subs	r3, r1, r2
 80014de:	2b1f      	cmp	r3, #31
 80014e0:	d902      	bls.n	80014e8 <_mmcsd_get_slice+0x18>
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <_mmcsd_get_slice+0x54>)
 80014e4:	f006 f8c4 	bl	8007670 <chSysHalt>

  startidx = start / 32U;
 80014e8:	0973      	lsrs	r3, r6, #5
  startoff = start % 32U;
 80014ea:	f006 061f 	and.w	r6, r6, #31
  endidx   = end / 32U;
 80014ee:	0962      	lsrs	r2, r4, #5
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;
 80014f0:	f004 041f 	and.w	r4, r4, #31
 80014f4:	3401      	adds	r4, #1
 80014f6:	2001      	movs	r0, #1
 80014f8:	fa00 f404 	lsl.w	r4, r0, r4
 80014fc:	3c01      	subs	r4, #1

  /* One or two pieces?*/
  if (startidx < endidx) {
 80014fe:	4293      	cmp	r3, r2
 8001500:	d304      	bcc.n	800150c <_mmcsd_get_slice+0x3c>
    return (data[startidx] >> startoff) |               /* Two pieces case. */
           ((data[endidx] & endmask) << (32U - startoff));
  }
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 8001502:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8001506:	4020      	ands	r0, r4
 8001508:	40f0      	lsrs	r0, r6
}
 800150a:	bd70      	pop	{r4, r5, r6, pc}
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 800150c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8001510:	40f3      	lsrs	r3, r6
           ((data[endidx] & endmask) << (32U - startoff));
 8001512:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8001516:	4020      	ands	r0, r4
 8001518:	f1c6 0620 	rsb	r6, r6, #32
 800151c:	40b0      	lsls	r0, r6
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 800151e:	4318      	orrs	r0, r3
 8001520:	e7f3      	b.n	800150a <_mmcsd_get_slice+0x3a>
 8001522:	bf00      	nop
 8001524:	080146a4 	.word	0x080146a4
 8001528:	f3af 8000 	nop.w
 800152c:	f3af 8000 	nop.w

08001530 <_mmcsd_get_capacity>:
 * @return              The card capacity.
 * @retval 0            CSD format error
 *
 * @notapi
 */
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
 8001530:	b570      	push	{r4, r5, r6, lr}
  uint32_t a, b, c;

  osalDbgCheck(NULL != csd);
 8001532:	4605      	mov	r5, r0
 8001534:	b148      	cbz	r0, 800154a <_mmcsd_get_capacity+0x1a>

  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8001536:	227e      	movs	r2, #126	; 0x7e
 8001538:	217f      	movs	r1, #127	; 0x7f
 800153a:	4628      	mov	r0, r5
 800153c:	f7ff ffc8 	bl	80014d0 <_mmcsd_get_slice>
 8001540:	b138      	cbz	r0, 8001552 <_mmcsd_get_capacity+0x22>
 8001542:	2801      	cmp	r0, #1
 8001544:	d01d      	beq.n	8001582 <_mmcsd_get_capacity+0x52>
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
  default:
    /* Reserved value detected.*/
    break;
  }
  return 0U;
 8001546:	2000      	movs	r0, #0
 8001548:	e01a      	b.n	8001580 <_mmcsd_get_capacity+0x50>
  osalDbgCheck(NULL != csd);
 800154a:	4812      	ldr	r0, [pc, #72]	; (8001594 <_mmcsd_get_capacity+0x64>)
 800154c:	f006 f890 	bl	8007670 <chSysHalt>
 8001550:	e7f1      	b.n	8001536 <_mmcsd_get_capacity+0x6>
    a = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_SLICE);
 8001552:	223e      	movs	r2, #62	; 0x3e
 8001554:	2149      	movs	r1, #73	; 0x49
 8001556:	4628      	mov	r0, r5
 8001558:	f7ff ffba 	bl	80014d0 <_mmcsd_get_slice>
 800155c:	4604      	mov	r4, r0
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 800155e:	222f      	movs	r2, #47	; 0x2f
 8001560:	2131      	movs	r1, #49	; 0x31
 8001562:	4628      	mov	r0, r5
 8001564:	f7ff ffb4 	bl	80014d0 <_mmcsd_get_slice>
 8001568:	4606      	mov	r6, r0
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
 800156a:	2250      	movs	r2, #80	; 0x50
 800156c:	2153      	movs	r1, #83	; 0x53
 800156e:	4628      	mov	r0, r5
 8001570:	f7ff ffae 	bl	80014d0 <_mmcsd_get_slice>
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
 8001574:	3401      	adds	r4, #1
 8001576:	3602      	adds	r6, #2
 8001578:	40b4      	lsls	r4, r6
 800157a:	3809      	subs	r0, #9
 800157c:	fa04 f000 	lsl.w	r0, r4, r0
}
 8001580:	bd70      	pop	{r4, r5, r6, pc}
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
 8001582:	2230      	movs	r2, #48	; 0x30
 8001584:	2145      	movs	r1, #69	; 0x45
 8001586:	4628      	mov	r0, r5
 8001588:	f7ff ffa2 	bl	80014d0 <_mmcsd_get_slice>
 800158c:	3001      	adds	r0, #1
 800158e:	0280      	lsls	r0, r0, #10
 8001590:	e7f6      	b.n	8001580 <_mmcsd_get_capacity+0x50>
 8001592:	bf00      	nop
 8001594:	080146b8 	.word	0x080146b8
 8001598:	f3af 8000 	nop.w
 800159c:	f3af 8000 	nop.w

080015a0 <_mmcsd_get_capacity_ext>:
 *
 * @return              The card capacity.
 *
 * @notapi
 */
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {
 80015a0:	b510      	push	{r4, lr}

  osalDbgCheck(NULL != ext_csd);
 80015a2:	4604      	mov	r4, r0
 80015a4:	b170      	cbz	r0, 80015c4 <_mmcsd_get_capacity_ext+0x24>

  return ((uint32_t)ext_csd[215] << 24U) +
 80015a6:	f894 00d7 	ldrb.w	r0, [r4, #215]	; 0xd7
         ((uint32_t)ext_csd[214] << 16U) +
 80015aa:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
 80015ae:	041b      	lsls	r3, r3, #16
  return ((uint32_t)ext_csd[215] << 24U) +
 80015b0:	eb03 6300 	add.w	r3, r3, r0, lsl #24
         ((uint32_t)ext_csd[213] << 8U)  +
 80015b4:	f894 00d5 	ldrb.w	r0, [r4, #213]	; 0xd5
         ((uint32_t)ext_csd[214] << 16U) +
 80015b8:	eb03 2300 	add.w	r3, r3, r0, lsl #8
         (uint32_t)ext_csd[212];
 80015bc:	f894 00d4 	ldrb.w	r0, [r4, #212]	; 0xd4
}
 80015c0:	4418      	add	r0, r3
 80015c2:	bd10      	pop	{r4, pc}
  osalDbgCheck(NULL != ext_csd);
 80015c4:	4801      	ldr	r0, [pc, #4]	; (80015cc <_mmcsd_get_capacity_ext+0x2c>)
 80015c6:	f006 f853 	bl	8007670 <chSysHalt>
 80015ca:	e7ec      	b.n	80015a6 <_mmcsd_get_capacity_ext+0x6>
 80015cc:	080146cc 	.word	0x080146cc

080015d0 <_mmcsd_unpack_sdc_cid>:
 * @param[out] cidsdc   pointer to the @p unpacked_sdc_cid_t object
 *
 * @notapi
 */
void _mmcsd_unpack_sdc_cid(const MMCSDBlockDevice *sdcp,
                           unpacked_sdc_cid_t *cidsdc) {
 80015d0:	b538      	push	{r3, r4, r5, lr}
 80015d2:	460d      	mov	r5, r1
  const uint32_t *cid;

  osalDbgCheck((NULL != sdcp) && (NULL != cidsdc));
 80015d4:	4604      	mov	r4, r0
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d054      	beq.n	8001684 <_mmcsd_unpack_sdc_cid+0xb4>
 80015da:	2900      	cmp	r1, #0
 80015dc:	d052      	beq.n	8001684 <_mmcsd_unpack_sdc_cid+0xb4>

  cid = sdcp->cid;
 80015de:	3408      	adds	r4, #8
  cidsdc->crc    = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_SDC_CRC_SLICE);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2107      	movs	r1, #7
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff ff73 	bl	80014d0 <_mmcsd_get_slice>
 80015ea:	7528      	strb	r0, [r5, #20]
  cidsdc->mdt_y  = (uint16_t)_mmcsd_get_slice(cid, MMCSD_CID_SDC_MDT_Y_SLICE) +
 80015ec:	220c      	movs	r2, #12
 80015ee:	2113      	movs	r1, #19
 80015f0:	4620      	mov	r0, r4
 80015f2:	f7ff ff6d 	bl	80014d0 <_mmcsd_get_slice>
 80015f6:	b280      	uxth	r0, r0
 80015f8:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 80015fc:	8268      	strh	r0, [r5, #18]
                             2000U;
  cidsdc->mdt_m  = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_SDC_MDT_M_SLICE);
 80015fe:	2208      	movs	r2, #8
 8001600:	210b      	movs	r1, #11
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff ff64 	bl	80014d0 <_mmcsd_get_slice>
 8001608:	7428      	strb	r0, [r5, #16]
  cidsdc->mid    = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_SDC_MID_SLICE);
 800160a:	2278      	movs	r2, #120	; 0x78
 800160c:	217f      	movs	r1, #127	; 0x7f
 800160e:	4620      	mov	r0, r4
 8001610:	f7ff ff5e 	bl	80014d0 <_mmcsd_get_slice>
 8001614:	7028      	strb	r0, [r5, #0]
  cidsdc->oid    = (uint16_t)_mmcsd_get_slice(cid, MMCSD_CID_SDC_OID_SLICE);
 8001616:	2268      	movs	r2, #104	; 0x68
 8001618:	2177      	movs	r1, #119	; 0x77
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff ff58 	bl	80014d0 <_mmcsd_get_slice>
 8001620:	8068      	strh	r0, [r5, #2]
  cidsdc->pnm[4] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_SDC_PNM0_SLICE);
 8001622:	2240      	movs	r2, #64	; 0x40
 8001624:	2147      	movs	r1, #71	; 0x47
 8001626:	4620      	mov	r0, r4
 8001628:	f7ff ff52 	bl	80014d0 <_mmcsd_get_slice>
 800162c:	7228      	strb	r0, [r5, #8]
  cidsdc->pnm[3] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_SDC_PNM1_SLICE);
 800162e:	2248      	movs	r2, #72	; 0x48
 8001630:	214f      	movs	r1, #79	; 0x4f
 8001632:	4620      	mov	r0, r4
 8001634:	f7ff ff4c 	bl	80014d0 <_mmcsd_get_slice>
 8001638:	71e8      	strb	r0, [r5, #7]
  cidsdc->pnm[2] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_SDC_PNM2_SLICE);
 800163a:	2250      	movs	r2, #80	; 0x50
 800163c:	2157      	movs	r1, #87	; 0x57
 800163e:	4620      	mov	r0, r4
 8001640:	f7ff ff46 	bl	80014d0 <_mmcsd_get_slice>
 8001644:	71a8      	strb	r0, [r5, #6]
  cidsdc->pnm[1] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_SDC_PNM3_SLICE);
 8001646:	2258      	movs	r2, #88	; 0x58
 8001648:	215f      	movs	r1, #95	; 0x5f
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff ff40 	bl	80014d0 <_mmcsd_get_slice>
 8001650:	7168      	strb	r0, [r5, #5]
  cidsdc->pnm[0] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_SDC_PNM4_SLICE);
 8001652:	2260      	movs	r2, #96	; 0x60
 8001654:	2167      	movs	r1, #103	; 0x67
 8001656:	4620      	mov	r0, r4
 8001658:	f7ff ff3a 	bl	80014d0 <_mmcsd_get_slice>
 800165c:	7128      	strb	r0, [r5, #4]
  cidsdc->prv_n  = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_SDC_PRV_N_SLICE);
 800165e:	223c      	movs	r2, #60	; 0x3c
 8001660:	213f      	movs	r1, #63	; 0x3f
 8001662:	4620      	mov	r0, r4
 8001664:	f7ff ff34 	bl	80014d0 <_mmcsd_get_slice>
 8001668:	7268      	strb	r0, [r5, #9]
  cidsdc->prv_m  = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_SDC_PRV_M_SLICE);
 800166a:	2238      	movs	r2, #56	; 0x38
 800166c:	213b      	movs	r1, #59	; 0x3b
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff ff2e 	bl	80014d0 <_mmcsd_get_slice>
 8001674:	72a8      	strb	r0, [r5, #10]
  cidsdc->psn    =           _mmcsd_get_slice(cid, MMCSD_CID_SDC_PSN_SLICE);
 8001676:	2218      	movs	r2, #24
 8001678:	2137      	movs	r1, #55	; 0x37
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff ff28 	bl	80014d0 <_mmcsd_get_slice>
 8001680:	60e8      	str	r0, [r5, #12]
}
 8001682:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((NULL != sdcp) && (NULL != cidsdc));
 8001684:	4801      	ldr	r0, [pc, #4]	; (800168c <_mmcsd_unpack_sdc_cid+0xbc>)
 8001686:	f005 fff3 	bl	8007670 <chSysHalt>
 800168a:	e7a8      	b.n	80015de <_mmcsd_unpack_sdc_cid+0xe>
 800168c:	080146e4 	.word	0x080146e4

08001690 <_mmcsd_unpack_mmc_cid>:
 * @param[out] cidmmc   pointer to the @p unpacked_mmc_cid_t object
 *
 * @notapi
 */
void _mmcsd_unpack_mmc_cid(const MMCSDBlockDevice *sdcp,
                           unpacked_mmc_cid_t *cidmmc) {
 8001690:	b538      	push	{r3, r4, r5, lr}
 8001692:	460d      	mov	r5, r1
  const uint32_t *cid;

  osalDbgCheck((NULL != sdcp) && (NULL != cidmmc));
 8001694:	4604      	mov	r4, r0
 8001696:	2800      	cmp	r0, #0
 8001698:	d05a      	beq.n	8001750 <_mmcsd_unpack_mmc_cid+0xc0>
 800169a:	2900      	cmp	r1, #0
 800169c:	d058      	beq.n	8001750 <_mmcsd_unpack_mmc_cid+0xc0>

  cid = sdcp->cid;
 800169e:	3408      	adds	r4, #8
  cidmmc->crc    = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_MMC_CRC_SLICE);
 80016a0:	2201      	movs	r2, #1
 80016a2:	2107      	movs	r1, #7
 80016a4:	4620      	mov	r0, r4
 80016a6:	f7ff ff13 	bl	80014d0 <_mmcsd_get_slice>
 80016aa:	7528      	strb	r0, [r5, #20]
  cidmmc->mdt_y  = (uint16_t)_mmcsd_get_slice(cid, MMCSD_CID_MMC_MDT_Y_SLICE) +
 80016ac:	2208      	movs	r2, #8
 80016ae:	210b      	movs	r1, #11
 80016b0:	4620      	mov	r0, r4
 80016b2:	f7ff ff0d 	bl	80014d0 <_mmcsd_get_slice>
 80016b6:	b280      	uxth	r0, r0
 80016b8:	f200 70cd 	addw	r0, r0, #1997	; 0x7cd
 80016bc:	8268      	strh	r0, [r5, #18]
                             1997U;
  cidmmc->mdt_m  = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_MMC_MDT_M_SLICE);
 80016be:	220c      	movs	r2, #12
 80016c0:	210f      	movs	r1, #15
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff ff04 	bl	80014d0 <_mmcsd_get_slice>
 80016c8:	7428      	strb	r0, [r5, #16]
  cidmmc->mid    = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_MMC_MID_SLICE);
 80016ca:	2278      	movs	r2, #120	; 0x78
 80016cc:	217f      	movs	r1, #127	; 0x7f
 80016ce:	4620      	mov	r0, r4
 80016d0:	f7ff fefe 	bl	80014d0 <_mmcsd_get_slice>
 80016d4:	7028      	strb	r0, [r5, #0]
  cidmmc->oid    = (uint16_t)_mmcsd_get_slice(cid, MMCSD_CID_MMC_OID_SLICE);
 80016d6:	2268      	movs	r2, #104	; 0x68
 80016d8:	2177      	movs	r1, #119	; 0x77
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff fef8 	bl	80014d0 <_mmcsd_get_slice>
 80016e0:	8068      	strh	r0, [r5, #2]
  cidmmc->pnm[5] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_MMC_PNM0_SLICE);
 80016e2:	2238      	movs	r2, #56	; 0x38
 80016e4:	213f      	movs	r1, #63	; 0x3f
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff fef2 	bl	80014d0 <_mmcsd_get_slice>
 80016ec:	7268      	strb	r0, [r5, #9]
  cidmmc->pnm[4] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_MMC_PNM1_SLICE);
 80016ee:	2240      	movs	r2, #64	; 0x40
 80016f0:	2147      	movs	r1, #71	; 0x47
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff feec 	bl	80014d0 <_mmcsd_get_slice>
 80016f8:	7228      	strb	r0, [r5, #8]
  cidmmc->pnm[3] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_MMC_PNM2_SLICE);
 80016fa:	2248      	movs	r2, #72	; 0x48
 80016fc:	214f      	movs	r1, #79	; 0x4f
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff fee6 	bl	80014d0 <_mmcsd_get_slice>
 8001704:	71e8      	strb	r0, [r5, #7]
  cidmmc->pnm[2] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_MMC_PNM3_SLICE);
 8001706:	2250      	movs	r2, #80	; 0x50
 8001708:	2157      	movs	r1, #87	; 0x57
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff fee0 	bl	80014d0 <_mmcsd_get_slice>
 8001710:	71a8      	strb	r0, [r5, #6]
  cidmmc->pnm[1] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_MMC_PNM4_SLICE);
 8001712:	2258      	movs	r2, #88	; 0x58
 8001714:	215f      	movs	r1, #95	; 0x5f
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff feda 	bl	80014d0 <_mmcsd_get_slice>
 800171c:	7168      	strb	r0, [r5, #5]
  cidmmc->pnm[0] = (char)    _mmcsd_get_slice(cid, MMCSD_CID_MMC_PNM5_SLICE);
 800171e:	2260      	movs	r2, #96	; 0x60
 8001720:	2167      	movs	r1, #103	; 0x67
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff fed4 	bl	80014d0 <_mmcsd_get_slice>
 8001728:	7128      	strb	r0, [r5, #4]
  cidmmc->prv_n  = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_MMC_PRV_N_SLICE);
 800172a:	2234      	movs	r2, #52	; 0x34
 800172c:	2137      	movs	r1, #55	; 0x37
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff fece 	bl	80014d0 <_mmcsd_get_slice>
 8001734:	72a8      	strb	r0, [r5, #10]
  cidmmc->prv_m  = (uint8_t) _mmcsd_get_slice(cid, MMCSD_CID_MMC_PRV_M_SLICE);
 8001736:	2230      	movs	r2, #48	; 0x30
 8001738:	2133      	movs	r1, #51	; 0x33
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff fec8 	bl	80014d0 <_mmcsd_get_slice>
 8001740:	72e8      	strb	r0, [r5, #11]
  cidmmc->psn    =           _mmcsd_get_slice(cid, MMCSD_CID_MMC_PSN_SLICE);
 8001742:	2210      	movs	r2, #16
 8001744:	212f      	movs	r1, #47	; 0x2f
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff fec2 	bl	80014d0 <_mmcsd_get_slice>
 800174c:	60e8      	str	r0, [r5, #12]
}
 800174e:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((NULL != sdcp) && (NULL != cidmmc));
 8001750:	4801      	ldr	r0, [pc, #4]	; (8001758 <_mmcsd_unpack_mmc_cid+0xc8>)
 8001752:	f005 ff8d 	bl	8007670 <chSysHalt>
 8001756:	e7a2      	b.n	800169e <_mmcsd_unpack_mmc_cid+0xe>
 8001758:	080146fc 	.word	0x080146fc
 800175c:	f3af 8000 	nop.w

08001760 <_mmcsd_unpack_csd_mmc>:
 * @param[out] csdmmc   pointer to the @p unpacked_mmc_csd_t object
 *
 * @notapi
 */
void _mmcsd_unpack_csd_mmc(const MMCSDBlockDevice *sdcp,
                           unpacked_mmc_csd_t *csdmmc) {
 8001760:	b538      	push	{r3, r4, r5, lr}
 8001762:	460d      	mov	r5, r1
  const uint32_t *csd;

  osalDbgCheck((NULL != sdcp) && (NULL != csdmmc));
 8001764:	4604      	mov	r4, r0
 8001766:	2800      	cmp	r0, #0
 8001768:	f000 80c4 	beq.w	80018f4 <_mmcsd_unpack_csd_mmc+0x194>
 800176c:	2900      	cmp	r1, #0
 800176e:	f000 80c1 	beq.w	80018f4 <_mmcsd_unpack_csd_mmc+0x194>

  csd = sdcp->csd;
 8001772:	3418      	adds	r4, #24
  csdmmc->c_size             = (uint16_t)_mmcsd_get_slice(csd, MMCSD_CSD_MMC_C_SIZE_SLICE);
 8001774:	223e      	movs	r2, #62	; 0x3e
 8001776:	2149      	movs	r1, #73	; 0x49
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff fea9 	bl	80014d0 <_mmcsd_get_slice>
 800177e:	81e8      	strh	r0, [r5, #14]
  csdmmc->c_size_mult        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_C_SIZE_MULT_SLICE);
 8001780:	222f      	movs	r2, #47	; 0x2f
 8001782:	2131      	movs	r1, #49	; 0x31
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff fea3 	bl	80014d0 <_mmcsd_get_slice>
 800178a:	7528      	strb	r0, [r5, #20]
  csdmmc->ccc                = (uint16_t)_mmcsd_get_slice(csd, MMCSD_CSD_MMC_CCC_SLICE);
 800178c:	2254      	movs	r2, #84	; 0x54
 800178e:	215f      	movs	r1, #95	; 0x5f
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff fe9d 	bl	80014d0 <_mmcsd_get_slice>
 8001796:	80e8      	strh	r0, [r5, #6]
  csdmmc->copy               = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_COPY_SLICE);
 8001798:	220e      	movs	r2, #14
 800179a:	4611      	mov	r1, r2
 800179c:	4620      	mov	r0, r4
 800179e:	f7ff fe97 	bl	80014d0 <_mmcsd_get_slice>
 80017a2:	77e8      	strb	r0, [r5, #31]
  csdmmc->crc                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_CRC_SLICE);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2107      	movs	r1, #7
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7ff fe91 	bl	80014d0 <_mmcsd_get_slice>
 80017ae:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  csdmmc->csd_structure      = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_CSD_STRUCTURE_SLICE);
 80017b2:	227e      	movs	r2, #126	; 0x7e
 80017b4:	217f      	movs	r1, #127	; 0x7f
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff fe8a 	bl	80014d0 <_mmcsd_get_slice>
 80017bc:	7028      	strb	r0, [r5, #0]
  csdmmc->dsr_imp            = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_DSR_IMP_SLICE);
 80017be:	224c      	movs	r2, #76	; 0x4c
 80017c0:	4611      	mov	r1, r2
 80017c2:	4620      	mov	r0, r4
 80017c4:	f7ff fe84 	bl	80014d0 <_mmcsd_get_slice>
 80017c8:	7328      	strb	r0, [r5, #12]
  csdmmc->ecc                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_ECC_SLICE);
 80017ca:	2208      	movs	r2, #8
 80017cc:	2109      	movs	r1, #9
 80017ce:	4620      	mov	r0, r4
 80017d0:	f7ff fe7e 	bl	80014d0 <_mmcsd_get_slice>
 80017d4:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
  csdmmc->erase_grp_mult     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_ERASE_GRP_MULT_SLICE);
 80017d8:	2225      	movs	r2, #37	; 0x25
 80017da:	2129      	movs	r1, #41	; 0x29
 80017dc:	4620      	mov	r0, r4
 80017de:	f7ff fe77 	bl	80014d0 <_mmcsd_get_slice>
 80017e2:	75a8      	strb	r0, [r5, #22]
  csdmmc->erase_grp_size     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_ERASE_GRP_SIZE_SLICE);
 80017e4:	222a      	movs	r2, #42	; 0x2a
 80017e6:	212e      	movs	r1, #46	; 0x2e
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff fe71 	bl	80014d0 <_mmcsd_get_slice>
 80017ee:	7568      	strb	r0, [r5, #21]
  csdmmc->file_format        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_FILE_FORMAT_SLICE);
 80017f0:	220a      	movs	r2, #10
 80017f2:	210b      	movs	r1, #11
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff fe6b 	bl	80014d0 <_mmcsd_get_slice>
 80017fa:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
  csdmmc->file_format_grp    = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_FILE_FORMAT_GRP_SLICE);
 80017fe:	220f      	movs	r2, #15
 8001800:	4611      	mov	r1, r2
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff fe64 	bl	80014d0 <_mmcsd_get_slice>
 8001808:	77a8      	strb	r0, [r5, #30]
  csdmmc->nsac               = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_NSAC_SLICE);
 800180a:	2268      	movs	r2, #104	; 0x68
 800180c:	216f      	movs	r1, #111	; 0x6f
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff fe5e 	bl	80014d0 <_mmcsd_get_slice>
 8001814:	70e8      	strb	r0, [r5, #3]
  csdmmc->perm_write_protect = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_PERM_WRITE_PROTECT_SLICE);
 8001816:	220d      	movs	r2, #13
 8001818:	4611      	mov	r1, r2
 800181a:	4620      	mov	r0, r4
 800181c:	f7ff fe58 	bl	80014d0 <_mmcsd_get_slice>
 8001820:	f885 0020 	strb.w	r0, [r5, #32]
  csdmmc->r2w_factor         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_R2W_FACTOR_SLICE);
 8001824:	221a      	movs	r2, #26
 8001826:	211c      	movs	r1, #28
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fe51 	bl	80014d0 <_mmcsd_get_slice>
 800182e:	76a8      	strb	r0, [r5, #26]
  csdmmc->read_bl_len        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_READ_BL_LEN_SLICE);
 8001830:	2250      	movs	r2, #80	; 0x50
 8001832:	2153      	movs	r1, #83	; 0x53
 8001834:	4620      	mov	r0, r4
 8001836:	f7ff fe4b 	bl	80014d0 <_mmcsd_get_slice>
 800183a:	7228      	strb	r0, [r5, #8]
  csdmmc->read_bl_partial    = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_READ_BL_PARTIAL_SLICE);
 800183c:	224f      	movs	r2, #79	; 0x4f
 800183e:	4611      	mov	r1, r2
 8001840:	4620      	mov	r0, r4
 8001842:	f7ff fe45 	bl	80014d0 <_mmcsd_get_slice>
 8001846:	7268      	strb	r0, [r5, #9]
  csdmmc->read_blk_misalign  = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_READ_BLK_MISALIGN_SLICE);
 8001848:	224d      	movs	r2, #77	; 0x4d
 800184a:	4611      	mov	r1, r2
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff fe3f 	bl	80014d0 <_mmcsd_get_slice>
 8001852:	72e8      	strb	r0, [r5, #11]
  csdmmc->spec_vers          = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_SPEC_VERS_SLICE);
 8001854:	227a      	movs	r2, #122	; 0x7a
 8001856:	217d      	movs	r1, #125	; 0x7d
 8001858:	4620      	mov	r0, r4
 800185a:	f7ff fe39 	bl	80014d0 <_mmcsd_get_slice>
 800185e:	7068      	strb	r0, [r5, #1]
  csdmmc->taac               = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_TAAC_SLICE);
 8001860:	2270      	movs	r2, #112	; 0x70
 8001862:	2177      	movs	r1, #119	; 0x77
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fe33 	bl	80014d0 <_mmcsd_get_slice>
 800186a:	70a8      	strb	r0, [r5, #2]
  csdmmc->tmp_write_protect  = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_TMP_WRITE_PROTECT_SLICE);
 800186c:	220c      	movs	r2, #12
 800186e:	4611      	mov	r1, r2
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff fe2d 	bl	80014d0 <_mmcsd_get_slice>
 8001876:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
  csdmmc->tran_speed         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_TRAN_SPEED_SLICE);
 800187a:	2260      	movs	r2, #96	; 0x60
 800187c:	2167      	movs	r1, #103	; 0x67
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff fe26 	bl	80014d0 <_mmcsd_get_slice>
 8001884:	7128      	strb	r0, [r5, #4]
  csdmmc->vdd_r_curr_max     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_VDD_R_CURR_MAX_SLICE);
 8001886:	2238      	movs	r2, #56	; 0x38
 8001888:	213a      	movs	r1, #58	; 0x3a
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff fe20 	bl	80014d0 <_mmcsd_get_slice>
 8001890:	7468      	strb	r0, [r5, #17]
  csdmmc->vdd_r_curr_min     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_VDD_R_CURR_MIN_SLICE);
 8001892:	223b      	movs	r2, #59	; 0x3b
 8001894:	213d      	movs	r1, #61	; 0x3d
 8001896:	4620      	mov	r0, r4
 8001898:	f7ff fe1a 	bl	80014d0 <_mmcsd_get_slice>
 800189c:	7428      	strb	r0, [r5, #16]
  csdmmc->vdd_w_curr_max     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_VDD_W_CURR_MAX_SLICE);
 800189e:	2232      	movs	r2, #50	; 0x32
 80018a0:	2134      	movs	r1, #52	; 0x34
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff fe14 	bl	80014d0 <_mmcsd_get_slice>
 80018a8:	74e8      	strb	r0, [r5, #19]
  csdmmc->vdd_w_curr_min     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_VDD_W_CURR_MIN_SLICE);
 80018aa:	2235      	movs	r2, #53	; 0x35
 80018ac:	2137      	movs	r1, #55	; 0x37
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff fe0e 	bl	80014d0 <_mmcsd_get_slice>
 80018b4:	74a8      	strb	r0, [r5, #18]
  csdmmc->wp_grp_enable      = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_WP_GRP_ENABLE_SLICE);
 80018b6:	221f      	movs	r2, #31
 80018b8:	4611      	mov	r1, r2
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7ff fe08 	bl	80014d0 <_mmcsd_get_slice>
 80018c0:	7628      	strb	r0, [r5, #24]
  csdmmc->wp_grp_size        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_WP_GRP_SIZE_SLICE);
 80018c2:	2220      	movs	r2, #32
 80018c4:	2124      	movs	r1, #36	; 0x24
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff fe02 	bl	80014d0 <_mmcsd_get_slice>
 80018cc:	75e8      	strb	r0, [r5, #23]
  csdmmc->write_bl_len       = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_WRITE_BL_LEN_SLICE);
 80018ce:	2216      	movs	r2, #22
 80018d0:	2119      	movs	r1, #25
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff fdfc 	bl	80014d0 <_mmcsd_get_slice>
 80018d8:	76e8      	strb	r0, [r5, #27]
  csdmmc->write_bl_partial   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_WRITE_BL_PARTIAL_SLICE);
 80018da:	2215      	movs	r2, #21
 80018dc:	4611      	mov	r1, r2
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff fdf6 	bl	80014d0 <_mmcsd_get_slice>
 80018e4:	7728      	strb	r0, [r5, #28]
  csdmmc->write_blk_misalign = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_MMC_WRITE_BLK_MISALIGN_SLICE);
 80018e6:	224e      	movs	r2, #78	; 0x4e
 80018e8:	4611      	mov	r1, r2
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff fdf0 	bl	80014d0 <_mmcsd_get_slice>
 80018f0:	72a8      	strb	r0, [r5, #10]
}
 80018f2:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((NULL != sdcp) && (NULL != csdmmc));
 80018f4:	4801      	ldr	r0, [pc, #4]	; (80018fc <_mmcsd_unpack_csd_mmc+0x19c>)
 80018f6:	f005 febb 	bl	8007670 <chSysHalt>
 80018fa:	e73a      	b.n	8001772 <_mmcsd_unpack_csd_mmc+0x12>
 80018fc:	08014714 	.word	0x08014714

08001900 <_mmcsd_unpack_csd_v10>:
 * @param[out] csd10    pointer to the @p unpacked_sdc_csd_10_t object
 *
 * @notapi
 */
void _mmcsd_unpack_csd_v10(const MMCSDBlockDevice *sdcp,
                           unpacked_sdc_csd_10_t *csd10) {
 8001900:	b538      	push	{r3, r4, r5, lr}
 8001902:	460d      	mov	r5, r1
  const uint32_t *csd;

  osalDbgCheck(NULL != sdcp);
 8001904:	4604      	mov	r4, r0
 8001906:	2800      	cmp	r0, #0
 8001908:	f000 8098 	beq.w	8001a3c <_mmcsd_unpack_csd_v10+0x13c>

  csd = sdcp->csd;
 800190c:	3418      	adds	r4, #24
  csd10->c_size              = (uint16_t)_mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_SLICE);
 800190e:	223e      	movs	r2, #62	; 0x3e
 8001910:	2149      	movs	r1, #73	; 0x49
 8001912:	4620      	mov	r0, r4
 8001914:	f7ff fddc 	bl	80014d0 <_mmcsd_get_slice>
 8001918:	81a8      	strh	r0, [r5, #12]
  csd10->c_size_mult         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 800191a:	222f      	movs	r2, #47	; 0x2f
 800191c:	2131      	movs	r1, #49	; 0x31
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff fdd6 	bl	80014d0 <_mmcsd_get_slice>
 8001924:	74a8      	strb	r0, [r5, #18]
  csd10->ccc                 = (uint16_t)_mmcsd_get_slice(csd, MMCSD_CSD_10_CCC_SLICE);
 8001926:	2254      	movs	r2, #84	; 0x54
 8001928:	215f      	movs	r1, #95	; 0x5f
 800192a:	4620      	mov	r0, r4
 800192c:	f7ff fdd0 	bl	80014d0 <_mmcsd_get_slice>
 8001930:	80a8      	strh	r0, [r5, #4]
  csd10->copy                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_COPY_SLICE);
 8001932:	220e      	movs	r2, #14
 8001934:	4611      	mov	r1, r2
 8001936:	4620      	mov	r0, r4
 8001938:	f7ff fdca 	bl	80014d0 <_mmcsd_get_slice>
 800193c:	76e8      	strb	r0, [r5, #27]
  csd10->crc                 = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_CRC_SLICE);
 800193e:	2201      	movs	r2, #1
 8001940:	2107      	movs	r1, #7
 8001942:	4620      	mov	r0, r4
 8001944:	f7ff fdc4 	bl	80014d0 <_mmcsd_get_slice>
 8001948:	77e8      	strb	r0, [r5, #31]
  csd10->csd_structure       = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE);
 800194a:	227e      	movs	r2, #126	; 0x7e
 800194c:	217f      	movs	r1, #127	; 0x7f
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff fdbe 	bl	80014d0 <_mmcsd_get_slice>
 8001954:	7028      	strb	r0, [r5, #0]
  csd10->dsr_imp             = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_DSR_IMP_SLICE);
 8001956:	224c      	movs	r2, #76	; 0x4c
 8001958:	4611      	mov	r1, r2
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff fdb8 	bl	80014d0 <_mmcsd_get_slice>
 8001960:	72a8      	strb	r0, [r5, #10]
  csd10->erase_blk_en        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_ERASE_BLK_EN_SLICE);
 8001962:	222e      	movs	r2, #46	; 0x2e
 8001964:	4611      	mov	r1, r2
 8001966:	4620      	mov	r0, r4
 8001968:	f7ff fdb2 	bl	80014d0 <_mmcsd_get_slice>
 800196c:	74e8      	strb	r0, [r5, #19]
  csd10->erase_sector_size   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_ERASE_SECTOR_SIZE_SLICE);
 800196e:	2227      	movs	r2, #39	; 0x27
 8001970:	212d      	movs	r1, #45	; 0x2d
 8001972:	4620      	mov	r0, r4
 8001974:	f7ff fdac 	bl	80014d0 <_mmcsd_get_slice>
 8001978:	7528      	strb	r0, [r5, #20]
  csd10->file_format         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_FILE_FORMAT_SLICE);
 800197a:	220a      	movs	r2, #10
 800197c:	210b      	movs	r1, #11
 800197e:	4620      	mov	r0, r4
 8001980:	f7ff fda6 	bl	80014d0 <_mmcsd_get_slice>
 8001984:	77a8      	strb	r0, [r5, #30]
  csd10->file_format_grp     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_FILE_FORMAT_GRP_SLICE);
 8001986:	220f      	movs	r2, #15
 8001988:	4611      	mov	r1, r2
 800198a:	4620      	mov	r0, r4
 800198c:	f7ff fda0 	bl	80014d0 <_mmcsd_get_slice>
 8001990:	76a8      	strb	r0, [r5, #26]
  csd10->nsac                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_NSAC_SLICE);
 8001992:	2268      	movs	r2, #104	; 0x68
 8001994:	216f      	movs	r1, #111	; 0x6f
 8001996:	4620      	mov	r0, r4
 8001998:	f7ff fd9a 	bl	80014d0 <_mmcsd_get_slice>
 800199c:	70a8      	strb	r0, [r5, #2]
  csd10->perm_write_protect  = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_PERM_WRITE_PROTECT_SLICE);
 800199e:	220d      	movs	r2, #13
 80019a0:	4611      	mov	r1, r2
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff fd94 	bl	80014d0 <_mmcsd_get_slice>
 80019a8:	7728      	strb	r0, [r5, #28]
  csd10->r2w_factor          = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_R2W_FACTOR_SLICE);
 80019aa:	221a      	movs	r2, #26
 80019ac:	211c      	movs	r1, #28
 80019ae:	4620      	mov	r0, r4
 80019b0:	f7ff fd8e 	bl	80014d0 <_mmcsd_get_slice>
 80019b4:	75e8      	strb	r0, [r5, #23]
  csd10->read_bl_len         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
 80019b6:	2250      	movs	r2, #80	; 0x50
 80019b8:	2153      	movs	r1, #83	; 0x53
 80019ba:	4620      	mov	r0, r4
 80019bc:	f7ff fd88 	bl	80014d0 <_mmcsd_get_slice>
 80019c0:	71a8      	strb	r0, [r5, #6]
  csd10->read_bl_partial     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_PARTIAL_SLICE);
 80019c2:	224f      	movs	r2, #79	; 0x4f
 80019c4:	4611      	mov	r1, r2
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fd82 	bl	80014d0 <_mmcsd_get_slice>
 80019cc:	71e8      	strb	r0, [r5, #7]
  csd10->read_blk_misalign   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BLK_MISALIGN_SLICE);
 80019ce:	224d      	movs	r2, #77	; 0x4d
 80019d0:	4611      	mov	r1, r2
 80019d2:	4620      	mov	r0, r4
 80019d4:	f7ff fd7c 	bl	80014d0 <_mmcsd_get_slice>
 80019d8:	7268      	strb	r0, [r5, #9]
  csd10->taac                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_TAAC_SLICE);
 80019da:	2270      	movs	r2, #112	; 0x70
 80019dc:	2177      	movs	r1, #119	; 0x77
 80019de:	4620      	mov	r0, r4
 80019e0:	f7ff fd76 	bl	80014d0 <_mmcsd_get_slice>
 80019e4:	7068      	strb	r0, [r5, #1]
  csd10->tmp_write_protect   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_TMP_WRITE_PROTECT_SLICE);
 80019e6:	220c      	movs	r2, #12
 80019e8:	4611      	mov	r1, r2
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff fd70 	bl	80014d0 <_mmcsd_get_slice>
 80019f0:	7768      	strb	r0, [r5, #29]
  csd10->tran_speed          = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_TRANS_SPEED_SLICE);
 80019f2:	2260      	movs	r2, #96	; 0x60
 80019f4:	2167      	movs	r1, #103	; 0x67
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7ff fd6a 	bl	80014d0 <_mmcsd_get_slice>
 80019fc:	70e8      	strb	r0, [r5, #3]
  csd10->wp_grp_enable       = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_WP_GRP_ENABLE_SLICE);
 80019fe:	221f      	movs	r2, #31
 8001a00:	4611      	mov	r1, r2
 8001a02:	4620      	mov	r0, r4
 8001a04:	f7ff fd64 	bl	80014d0 <_mmcsd_get_slice>
 8001a08:	75a8      	strb	r0, [r5, #22]
  csd10->wp_grp_size         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_WP_GRP_SIZE_SLICE);
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	2126      	movs	r1, #38	; 0x26
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f7ff fd5e 	bl	80014d0 <_mmcsd_get_slice>
 8001a14:	7568      	strb	r0, [r5, #21]
  csd10->write_bl_len        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_WRITE_BL_LEN_SLICE);
 8001a16:	220c      	movs	r2, #12
 8001a18:	2119      	movs	r1, #25
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f7ff fd58 	bl	80014d0 <_mmcsd_get_slice>
 8001a20:	7628      	strb	r0, [r5, #24]
  csd10->write_bl_partial    = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_WRITE_BL_PARTIAL_SLICE);
 8001a22:	2215      	movs	r2, #21
 8001a24:	4611      	mov	r1, r2
 8001a26:	4620      	mov	r0, r4
 8001a28:	f7ff fd52 	bl	80014d0 <_mmcsd_get_slice>
 8001a2c:	7668      	strb	r0, [r5, #25]
  csd10->write_blk_misalign  = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_10_WRITE_BLK_MISALIGN_SLICE);
 8001a2e:	224e      	movs	r2, #78	; 0x4e
 8001a30:	4611      	mov	r1, r2
 8001a32:	4620      	mov	r0, r4
 8001a34:	f7ff fd4c 	bl	80014d0 <_mmcsd_get_slice>
 8001a38:	7228      	strb	r0, [r5, #8]
}
 8001a3a:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(NULL != sdcp);
 8001a3c:	4801      	ldr	r0, [pc, #4]	; (8001a44 <_mmcsd_unpack_csd_v10+0x144>)
 8001a3e:	f005 fe17 	bl	8007670 <chSysHalt>
 8001a42:	e763      	b.n	800190c <_mmcsd_unpack_csd_v10+0xc>
 8001a44:	0801472c 	.word	0x0801472c
 8001a48:	f3af 8000 	nop.w
 8001a4c:	f3af 8000 	nop.w

08001a50 <_mmcsd_unpack_csd_v20>:
 * @param[out] csd20    pointer to the @p unpacked_sdc_csd_20_t object
 *
 * @notapi
 */
void _mmcsd_unpack_csd_v20(const MMCSDBlockDevice *sdcp,
                           unpacked_sdc_csd_20_t *csd20) {
 8001a50:	b538      	push	{r3, r4, r5, lr}
 8001a52:	460d      	mov	r5, r1
  const uint32_t *csd;

  osalDbgCheck(NULL != sdcp);
 8001a54:	4604      	mov	r4, r0
 8001a56:	2800      	cmp	r0, #0
 8001a58:	f000 8092 	beq.w	8001b80 <_mmcsd_unpack_csd_v20+0x130>

  csd = sdcp->csd;
 8001a5c:	3418      	adds	r4, #24
  csd20->c_size              =           _mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE);
 8001a5e:	2230      	movs	r2, #48	; 0x30
 8001a60:	2145      	movs	r1, #69	; 0x45
 8001a62:	4620      	mov	r0, r4
 8001a64:	f7ff fd34 	bl	80014d0 <_mmcsd_get_slice>
 8001a68:	60e8      	str	r0, [r5, #12]
  csd20->crc                 = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_CRC_SLICE);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2107      	movs	r1, #7
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f7ff fd2e 	bl	80014d0 <_mmcsd_get_slice>
 8001a74:	7728      	strb	r0, [r5, #28]
  csd20->ccc                 = (uint16_t)_mmcsd_get_slice(csd, MMCSD_CSD_20_CCC_SLICE);
 8001a76:	2254      	movs	r2, #84	; 0x54
 8001a78:	215f      	movs	r1, #95	; 0x5f
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f7ff fd28 	bl	80014d0 <_mmcsd_get_slice>
 8001a80:	80a8      	strh	r0, [r5, #4]
  csd20->copy                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_COPY_SLICE);
 8001a82:	220e      	movs	r2, #14
 8001a84:	4611      	mov	r1, r2
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff fd22 	bl	80014d0 <_mmcsd_get_slice>
 8001a8c:	7628      	strb	r0, [r5, #24]
  csd20->csd_structure       = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_CSD_STRUCTURE_SLICE);
 8001a8e:	227e      	movs	r2, #126	; 0x7e
 8001a90:	217f      	movs	r1, #127	; 0x7f
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7ff fd1c 	bl	80014d0 <_mmcsd_get_slice>
 8001a98:	7028      	strb	r0, [r5, #0]
  csd20->dsr_imp             = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_DSR_IMP_SLICE);
 8001a9a:	224c      	movs	r2, #76	; 0x4c
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7ff fd16 	bl	80014d0 <_mmcsd_get_slice>
 8001aa4:	72a8      	strb	r0, [r5, #10]
  csd20->erase_blk_en        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_ERASE_BLK_EN_SLICE);
 8001aa6:	222e      	movs	r2, #46	; 0x2e
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff fd10 	bl	80014d0 <_mmcsd_get_slice>
 8001ab0:	7428      	strb	r0, [r5, #16]
  csd20->file_format         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_FILE_FORMAT_SLICE);
 8001ab2:	220a      	movs	r2, #10
 8001ab4:	210b      	movs	r1, #11
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7ff fd0a 	bl	80014d0 <_mmcsd_get_slice>
 8001abc:	76e8      	strb	r0, [r5, #27]
  csd20->file_format_grp     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_FILE_FORMAT_GRP_SLICE);
 8001abe:	220f      	movs	r2, #15
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff fd04 	bl	80014d0 <_mmcsd_get_slice>
 8001ac8:	75e8      	strb	r0, [r5, #23]
  csd20->nsac                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_NSAC_SLICE);
 8001aca:	2268      	movs	r2, #104	; 0x68
 8001acc:	216f      	movs	r1, #111	; 0x6f
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f7ff fcfe 	bl	80014d0 <_mmcsd_get_slice>
 8001ad4:	70a8      	strb	r0, [r5, #2]
  csd20->perm_write_protect  = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_PERM_WRITE_PROTECT_SLICE);
 8001ad6:	220d      	movs	r2, #13
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4620      	mov	r0, r4
 8001adc:	f7ff fcf8 	bl	80014d0 <_mmcsd_get_slice>
 8001ae0:	7668      	strb	r0, [r5, #25]
  csd20->r2w_factor          = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_R2W_FACTOR_SLICE);
 8001ae2:	221a      	movs	r2, #26
 8001ae4:	211c      	movs	r1, #28
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f7ff fcf2 	bl	80014d0 <_mmcsd_get_slice>
 8001aec:	7528      	strb	r0, [r5, #20]
  csd20->read_bl_len         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_READ_BL_LEN_SLICE);
 8001aee:	2250      	movs	r2, #80	; 0x50
 8001af0:	2153      	movs	r1, #83	; 0x53
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff fcec 	bl	80014d0 <_mmcsd_get_slice>
 8001af8:	71a8      	strb	r0, [r5, #6]
  csd20->read_bl_partial     = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_READ_BL_PARTIAL_SLICE);
 8001afa:	224f      	movs	r2, #79	; 0x4f
 8001afc:	4611      	mov	r1, r2
 8001afe:	4620      	mov	r0, r4
 8001b00:	f7ff fce6 	bl	80014d0 <_mmcsd_get_slice>
 8001b04:	71e8      	strb	r0, [r5, #7]
  csd20->read_blk_misalign   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_READ_BLK_MISALIGN_SLICE);
 8001b06:	224d      	movs	r2, #77	; 0x4d
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff fce0 	bl	80014d0 <_mmcsd_get_slice>
 8001b10:	7268      	strb	r0, [r5, #9]
  csd20->erase_sector_size   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_ERASE_SECTOR_SIZE_SLICE);
 8001b12:	2227      	movs	r2, #39	; 0x27
 8001b14:	212d      	movs	r1, #45	; 0x2d
 8001b16:	4620      	mov	r0, r4
 8001b18:	f7ff fcda 	bl	80014d0 <_mmcsd_get_slice>
 8001b1c:	7468      	strb	r0, [r5, #17]
  csd20->taac                = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_TAAC_SLICE);
 8001b1e:	2270      	movs	r2, #112	; 0x70
 8001b20:	2177      	movs	r1, #119	; 0x77
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7ff fcd4 	bl	80014d0 <_mmcsd_get_slice>
 8001b28:	7068      	strb	r0, [r5, #1]
  csd20->tmp_write_protect   = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_TMP_WRITE_PROTECT_SLICE);
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7ff fcce 	bl	80014d0 <_mmcsd_get_slice>
 8001b34:	76a8      	strb	r0, [r5, #26]
  csd20->tran_speed          = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_TRANS_SPEED_SLICE);
 8001b36:	2260      	movs	r2, #96	; 0x60
 8001b38:	2167      	movs	r1, #103	; 0x67
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f7ff fcc8 	bl	80014d0 <_mmcsd_get_slice>
 8001b40:	70e8      	strb	r0, [r5, #3]
  csd20->wp_grp_enable       = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_WP_GRP_ENABLE_SLICE);
 8001b42:	221f      	movs	r2, #31
 8001b44:	4611      	mov	r1, r2
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff fcc2 	bl	80014d0 <_mmcsd_get_slice>
 8001b4c:	74e8      	strb	r0, [r5, #19]
  csd20->wp_grp_size         = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_WP_GRP_SIZE_SLICE);
 8001b4e:	2220      	movs	r2, #32
 8001b50:	2126      	movs	r1, #38	; 0x26
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7ff fcbc 	bl	80014d0 <_mmcsd_get_slice>
 8001b58:	74a8      	strb	r0, [r5, #18]
  csd20->write_bl_len        = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_WRITE_BL_LEN_SLICE);
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	2119      	movs	r1, #25
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff fcb6 	bl	80014d0 <_mmcsd_get_slice>
 8001b64:	7568      	strb	r0, [r5, #21]
  csd20->write_bl_partial    = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_WRITE_BL_PARTIAL_SLICE);
 8001b66:	2215      	movs	r2, #21
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7ff fcb0 	bl	80014d0 <_mmcsd_get_slice>
 8001b70:	75a8      	strb	r0, [r5, #22]
  csd20->write_blk_misalign  = (uint8_t) _mmcsd_get_slice(csd, MMCSD_CSD_20_WRITE_BLK_MISALIGN_SLICE);
 8001b72:	224e      	movs	r2, #78	; 0x4e
 8001b74:	4611      	mov	r1, r2
 8001b76:	4620      	mov	r0, r4
 8001b78:	f7ff fcaa 	bl	80014d0 <_mmcsd_get_slice>
 8001b7c:	7228      	strb	r0, [r5, #8]
}
 8001b7e:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(NULL != sdcp);
 8001b80:	4801      	ldr	r0, [pc, #4]	; (8001b88 <_mmcsd_unpack_csd_v20+0x138>)
 8001b82:	f005 fd75 	bl	8007670 <chSysHalt>
 8001b86:	e769      	b.n	8001a5c <_mmcsd_unpack_csd_v20+0xc>
 8001b88:	08014744 	.word	0x08014744
 8001b8c:	00000000 	.word	0x00000000

08001b90 <gptInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void gptInit(void) {
 8001b90:	b508      	push	{r3, lr}

  gpt_lld_init();
 8001b92:	f005 f9dd 	bl	8006f50 <gpt_lld_init>
}
 8001b96:	bd08      	pop	{r3, pc}
 8001b98:	f3af 8000 	nop.w
 8001b9c:	f3af 8000 	nop.w

08001ba0 <gptObjectInit>:
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	7003      	strb	r3, [r0, #0]
  gptp->config = NULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	6043      	str	r3, [r0, #4]
}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	f3af 8000 	nop.w

08001bb0 <gptStart>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] config    pointer to the @p GPTConfig object
 *
 * @api
 */
void gptStart(GPTDriver *gptp, const GPTConfig *config) {
 8001bb0:	b538      	push	{r3, r4, r5, lr}
 8001bb2:	460d      	mov	r5, r1

  osalDbgCheck((gptp != NULL) && (config != NULL));
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	b330      	cbz	r0, 8001c06 <gptStart+0x56>
 8001bb8:	b329      	cbz	r1, 8001c06 <gptStart+0x56>
 8001bba:	2320      	movs	r3, #32
 8001bbc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001bc0:	f007 f9e6 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001bc4:	f005 fee4 	bl	8007990 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
 8001bc8:	7823      	ldrb	r3, [r4, #0]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d902      	bls.n	8001bd8 <gptStart+0x28>
 8001bd2:	4811      	ldr	r0, [pc, #68]	; (8001c18 <gptStart+0x68>)
 8001bd4:	f005 fd4c 	bl	8007670 <chSysHalt>
              "invalid state");
  gptp->config = config;
 8001bd8:	6065      	str	r5, [r4, #4]
  gpt_lld_start(gptp);
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f005 f9c8 	bl	8006f70 <gpt_lld_start>
  gptp->state = GPT_READY;
 8001be0:	2302      	movs	r3, #2
 8001be2:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 8001be4:	f005 feec 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001be8:	f007 f9da 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <gptStart+0x6c>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d004      	beq.n	8001bfe <gptStart+0x4e>
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	6899      	ldr	r1, [r3, #8]
 8001bf8:	6893      	ldr	r3, [r2, #8]
 8001bfa:	4299      	cmp	r1, r3
 8001bfc:	d307      	bcc.n	8001c0e <gptStart+0x5e>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8001c04:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((gptp != NULL) && (config != NULL));
 8001c06:	4804      	ldr	r0, [pc, #16]	; (8001c18 <gptStart+0x68>)
 8001c08:	f005 fd32 	bl	8007670 <chSysHalt>
 8001c0c:	e7d5      	b.n	8001bba <gptStart+0xa>
 8001c0e:	4804      	ldr	r0, [pc, #16]	; (8001c20 <gptStart+0x70>)
 8001c10:	f005 fd2e 	bl	8007670 <chSysHalt>
 8001c14:	e7f3      	b.n	8001bfe <gptStart+0x4e>
 8001c16:	bf00      	nop
 8001c18:	0801475c 	.word	0x0801475c
 8001c1c:	20004f68 	.word	0x20004f68
 8001c20:	08014768 	.word	0x08014768
 8001c24:	f3af 8000 	nop.w
 8001c28:	f3af 8000 	nop.w
 8001c2c:	f3af 8000 	nop.w

08001c30 <gptStop>:
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @api
 */
void gptStop(GPTDriver *gptp) {
 8001c30:	b510      	push	{r4, lr}

  osalDbgCheck(gptp != NULL);
 8001c32:	4604      	mov	r4, r0
 8001c34:	b330      	cbz	r0, 8001c84 <gptStop+0x54>
 8001c36:	2320      	movs	r3, #32
 8001c38:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001c3c:	f007 f9a8 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001c40:	f005 fea6 	bl	8007990 <_dbg_check_lock>

  osalSysLock();

  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
 8001c44:	7823      	ldrb	r3, [r4, #0]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d902      	bls.n	8001c54 <gptStop+0x24>
 8001c4e:	4811      	ldr	r0, [pc, #68]	; (8001c94 <gptStop+0x64>)
 8001c50:	f005 fd0e 	bl	8007670 <chSysHalt>
                "invalid state");

  gpt_lld_stop(gptp);
 8001c54:	4620      	mov	r0, r4
 8001c56:	f005 f9db 	bl	8007010 <gpt_lld_stop>
  gptp->config = NULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	6063      	str	r3, [r4, #4]
  gptp->state  = GPT_STOP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 8001c62:	f005 fead 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001c66:	f007 f99b 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <gptStop+0x68>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d004      	beq.n	8001c7c <gptStop+0x4c>
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	6899      	ldr	r1, [r3, #8]
 8001c76:	6893      	ldr	r3, [r2, #8]
 8001c78:	4299      	cmp	r1, r3
 8001c7a:	d307      	bcc.n	8001c8c <gptStop+0x5c>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f383 8811 	msr	BASEPRI, r3

  osalSysUnlock();
}
 8001c82:	bd10      	pop	{r4, pc}
  osalDbgCheck(gptp != NULL);
 8001c84:	4803      	ldr	r0, [pc, #12]	; (8001c94 <gptStop+0x64>)
 8001c86:	f005 fcf3 	bl	8007670 <chSysHalt>
 8001c8a:	e7d4      	b.n	8001c36 <gptStop+0x6>
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <gptStop+0x6c>)
 8001c8e:	f005 fcef 	bl	8007670 <chSysHalt>
 8001c92:	e7f3      	b.n	8001c7c <gptStop+0x4c>
 8001c94:	08014774 	.word	0x08014774
 8001c98:	20004f68 	.word	0x20004f68
 8001c9c:	08014768 	.word	0x08014768

08001ca0 <gptChangeInterval>:
 * @param[in] gptp      pointer to a @p GPTDriver object
 * @param[in] interval  new cycle time in timer ticks
 *
 * @api
 */
void gptChangeInterval(GPTDriver *gptp, gptcnt_t interval) {
 8001ca0:	b538      	push	{r3, r4, r5, lr}
 8001ca2:	460c      	mov	r4, r1

  osalDbgCheck(gptp != NULL);
 8001ca4:	4605      	mov	r5, r0
 8001ca6:	b300      	cbz	r0, 8001cea <gptChangeInterval+0x4a>
 8001ca8:	2320      	movs	r3, #32
 8001caa:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001cae:	f007 f96f 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001cb2:	f005 fe6d 	bl	8007990 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(gptp->state == GPT_CONTINUOUS,
 8001cb6:	782b      	ldrb	r3, [r5, #0]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d002      	beq.n	8001cc2 <gptChangeInterval+0x22>
 8001cbc:	480f      	ldr	r0, [pc, #60]	; (8001cfc <gptChangeInterval+0x5c>)
 8001cbe:	f005 fcd7 	bl	8007670 <chSysHalt>
                "invalid state");
  gptChangeIntervalI(gptp, interval);
 8001cc2:	68eb      	ldr	r3, [r5, #12]
 8001cc4:	3c01      	subs	r4, #1
 8001cc6:	62dc      	str	r4, [r3, #44]	; 0x2c
  _dbg_check_unlock();
 8001cc8:	f005 fe7a 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001ccc:	f007 f968 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <gptChangeInterval+0x60>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d004      	beq.n	8001ce2 <gptChangeInterval+0x42>
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	6899      	ldr	r1, [r3, #8]
 8001cdc:	6893      	ldr	r3, [r2, #8]
 8001cde:	4299      	cmp	r1, r3
 8001ce0:	d307      	bcc.n	8001cf2 <gptChangeInterval+0x52>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8001ce8:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(gptp != NULL);
 8001cea:	4804      	ldr	r0, [pc, #16]	; (8001cfc <gptChangeInterval+0x5c>)
 8001cec:	f005 fcc0 	bl	8007670 <chSysHalt>
 8001cf0:	e7da      	b.n	8001ca8 <gptChangeInterval+0x8>
 8001cf2:	4804      	ldr	r0, [pc, #16]	; (8001d04 <gptChangeInterval+0x64>)
 8001cf4:	f005 fcbc 	bl	8007670 <chSysHalt>
 8001cf8:	e7f3      	b.n	8001ce2 <gptChangeInterval+0x42>
 8001cfa:	bf00      	nop
 8001cfc:	0801477c 	.word	0x0801477c
 8001d00:	20004f68 	.word	0x20004f68
 8001d04:	08014768 	.word	0x08014768
 8001d08:	f3af 8000 	nop.w
 8001d0c:	f3af 8000 	nop.w

08001d10 <gptStartContinuousI>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] interval  period in ticks
 *
 * @iclass
 */
void gptStartContinuousI(GPTDriver *gptp, gptcnt_t interval) {
 8001d10:	b538      	push	{r3, r4, r5, lr}
 8001d12:	4604      	mov	r4, r0
 8001d14:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8001d16:	f005 fedb 	bl	8007ad0 <chDbgCheckClassI>
  osalDbgCheck(gptp != NULL);
 8001d1a:	b164      	cbz	r4, 8001d36 <gptStartContinuousI+0x26>
  osalDbgAssert(gptp->state == GPT_READY,
 8001d1c:	7823      	ldrb	r3, [r4, #0]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d002      	beq.n	8001d28 <gptStartContinuousI+0x18>
 8001d22:	4807      	ldr	r0, [pc, #28]	; (8001d40 <gptStartContinuousI+0x30>)
 8001d24:	f005 fca4 	bl	8007670 <chSysHalt>
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	7023      	strb	r3, [r4, #0]
  gpt_lld_start_timer(gptp, interval);
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f005 f996 	bl	8007060 <gpt_lld_start_timer>
}
 8001d34:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(gptp != NULL);
 8001d36:	4802      	ldr	r0, [pc, #8]	; (8001d40 <gptStartContinuousI+0x30>)
 8001d38:	f005 fc9a 	bl	8007670 <chSysHalt>
 8001d3c:	e7ee      	b.n	8001d1c <gptStartContinuousI+0xc>
 8001d3e:	bf00      	nop
 8001d40:	08014790 	.word	0x08014790
 8001d44:	f3af 8000 	nop.w
 8001d48:	f3af 8000 	nop.w
 8001d4c:	f3af 8000 	nop.w

08001d50 <gptStartContinuous>:
void gptStartContinuous(GPTDriver *gptp, gptcnt_t interval) {
 8001d50:	b538      	push	{r3, r4, r5, lr}
 8001d52:	4604      	mov	r4, r0
 8001d54:	460d      	mov	r5, r1
 8001d56:	2320      	movs	r3, #32
 8001d58:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001d5c:	f007 f918 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001d60:	f005 fe16 	bl	8007990 <_dbg_check_lock>
  gptStartContinuousI(gptp, interval);
 8001d64:	4629      	mov	r1, r5
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff ffd2 	bl	8001d10 <gptStartContinuousI>
  _dbg_check_unlock();
 8001d6c:	f005 fe28 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001d70:	f007 f916 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <gptStartContinuous+0x48>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d004      	beq.n	8001d86 <gptStartContinuous+0x36>
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	6899      	ldr	r1, [r3, #8]
 8001d80:	6893      	ldr	r3, [r2, #8]
 8001d82:	4299      	cmp	r1, r3
 8001d84:	d303      	bcc.n	8001d8e <gptStartContinuous+0x3e>
 8001d86:	2300      	movs	r3, #0
 8001d88:	f383 8811 	msr	BASEPRI, r3
}
 8001d8c:	bd38      	pop	{r3, r4, r5, pc}
 8001d8e:	4803      	ldr	r0, [pc, #12]	; (8001d9c <gptStartContinuous+0x4c>)
 8001d90:	f005 fc6e 	bl	8007670 <chSysHalt>
 8001d94:	e7f7      	b.n	8001d86 <gptStartContinuous+0x36>
 8001d96:	bf00      	nop
 8001d98:	20004f68 	.word	0x20004f68
 8001d9c:	08014768 	.word	0x08014768

08001da0 <gptStartOneShotI>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] interval  time interval in ticks
 *
 * @api
 */
void gptStartOneShotI(GPTDriver *gptp, gptcnt_t interval) {
 8001da0:	b538      	push	{r3, r4, r5, lr}
 8001da2:	4604      	mov	r4, r0
 8001da4:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8001da6:	f005 fe93 	bl	8007ad0 <chDbgCheckClassI>
  osalDbgCheck(gptp != NULL);
 8001daa:	b17c      	cbz	r4, 8001dcc <gptStartOneShotI+0x2c>
  osalDbgCheck(gptp->config->callback != NULL);
 8001dac:	6863      	ldr	r3, [r4, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	b183      	cbz	r3, 8001dd4 <gptStartOneShotI+0x34>
  osalDbgAssert(gptp->state == GPT_READY,
 8001db2:	7823      	ldrb	r3, [r4, #0]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d002      	beq.n	8001dbe <gptStartOneShotI+0x1e>
 8001db8:	4808      	ldr	r0, [pc, #32]	; (8001ddc <gptStartOneShotI+0x3c>)
 8001dba:	f005 fc59 	bl	8007670 <chSysHalt>
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	7023      	strb	r3, [r4, #0]
  gpt_lld_start_timer(gptp, interval);
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f005 f94b 	bl	8007060 <gpt_lld_start_timer>
}
 8001dca:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(gptp != NULL);
 8001dcc:	4803      	ldr	r0, [pc, #12]	; (8001ddc <gptStartOneShotI+0x3c>)
 8001dce:	f005 fc4f 	bl	8007670 <chSysHalt>
 8001dd2:	e7eb      	b.n	8001dac <gptStartOneShotI+0xc>
  osalDbgCheck(gptp->config->callback != NULL);
 8001dd4:	4801      	ldr	r0, [pc, #4]	; (8001ddc <gptStartOneShotI+0x3c>)
 8001dd6:	f005 fc4b 	bl	8007670 <chSysHalt>
 8001dda:	e7ea      	b.n	8001db2 <gptStartOneShotI+0x12>
 8001ddc:	080147a4 	.word	0x080147a4

08001de0 <gptStartOneShot>:
void gptStartOneShot(GPTDriver *gptp, gptcnt_t interval) {
 8001de0:	b538      	push	{r3, r4, r5, lr}
 8001de2:	4604      	mov	r4, r0
 8001de4:	460d      	mov	r5, r1
 8001de6:	2320      	movs	r3, #32
 8001de8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001dec:	f007 f8d0 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001df0:	f005 fdce 	bl	8007990 <_dbg_check_lock>
  gptStartOneShotI(gptp, interval);
 8001df4:	4629      	mov	r1, r5
 8001df6:	4620      	mov	r0, r4
 8001df8:	f7ff ffd2 	bl	8001da0 <gptStartOneShotI>
  _dbg_check_unlock();
 8001dfc:	f005 fde0 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001e00:	f007 f8ce 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <gptStartOneShot+0x48>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d004      	beq.n	8001e16 <gptStartOneShot+0x36>
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	6899      	ldr	r1, [r3, #8]
 8001e10:	6893      	ldr	r3, [r2, #8]
 8001e12:	4299      	cmp	r1, r3
 8001e14:	d303      	bcc.n	8001e1e <gptStartOneShot+0x3e>
 8001e16:	2300      	movs	r3, #0
 8001e18:	f383 8811 	msr	BASEPRI, r3
}
 8001e1c:	bd38      	pop	{r3, r4, r5, pc}
 8001e1e:	4803      	ldr	r0, [pc, #12]	; (8001e2c <gptStartOneShot+0x4c>)
 8001e20:	f005 fc26 	bl	8007670 <chSysHalt>
 8001e24:	e7f7      	b.n	8001e16 <gptStartOneShot+0x36>
 8001e26:	bf00      	nop
 8001e28:	20004f68 	.word	0x20004f68
 8001e2c:	08014768 	.word	0x08014768

08001e30 <gptStopTimerI>:
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @api
 */
void gptStopTimerI(GPTDriver *gptp) {
 8001e30:	b510      	push	{r4, lr}
 8001e32:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8001e34:	f005 fe4c 	bl	8007ad0 <chDbgCheckClassI>
  osalDbgCheck(gptp != NULL);
 8001e38:	b154      	cbz	r4, 8001e50 <gptStopTimerI+0x20>
  osalDbgAssert((gptp->state == GPT_READY) || (gptp->state == GPT_CONTINUOUS) ||
 8001e3a:	7823      	ldrb	r3, [r4, #0]
 8001e3c:	3b02      	subs	r3, #2
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d809      	bhi.n	8001e58 <gptStopTimerI+0x28>
                (gptp->state == GPT_ONESHOT),
                "invalid state");

  gptp->state = GPT_READY;
 8001e44:	2302      	movs	r3, #2
 8001e46:	7023      	strb	r3, [r4, #0]
  gpt_lld_stop_timer(gptp);
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f005 f921 	bl	8007090 <gpt_lld_stop_timer>
}
 8001e4e:	bd10      	pop	{r4, pc}
  osalDbgCheck(gptp != NULL);
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <gptStopTimerI+0x30>)
 8001e52:	f005 fc0d 	bl	8007670 <chSysHalt>
 8001e56:	e7f0      	b.n	8001e3a <gptStopTimerI+0xa>
  osalDbgAssert((gptp->state == GPT_READY) || (gptp->state == GPT_CONTINUOUS) ||
 8001e58:	4801      	ldr	r0, [pc, #4]	; (8001e60 <gptStopTimerI+0x30>)
 8001e5a:	f005 fc09 	bl	8007670 <chSysHalt>
 8001e5e:	e7f1      	b.n	8001e44 <gptStopTimerI+0x14>
 8001e60:	080147b8 	.word	0x080147b8
 8001e64:	f3af 8000 	nop.w
 8001e68:	f3af 8000 	nop.w
 8001e6c:	f3af 8000 	nop.w

08001e70 <gptStopTimer>:
void gptStopTimer(GPTDriver *gptp) {
 8001e70:	b510      	push	{r4, lr}
 8001e72:	4604      	mov	r4, r0
 8001e74:	2320      	movs	r3, #32
 8001e76:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001e7a:	f007 f889 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001e7e:	f005 fd87 	bl	8007990 <_dbg_check_lock>
  gptStopTimerI(gptp);
 8001e82:	4620      	mov	r0, r4
 8001e84:	f7ff ffd4 	bl	8001e30 <gptStopTimerI>
  _dbg_check_unlock();
 8001e88:	f005 fd9a 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001e8c:	f007 f888 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <gptStopTimer+0x44>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d004      	beq.n	8001ea2 <gptStopTimer+0x32>
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	6899      	ldr	r1, [r3, #8]
 8001e9c:	6893      	ldr	r3, [r2, #8]
 8001e9e:	4299      	cmp	r1, r3
 8001ea0:	d303      	bcc.n	8001eaa <gptStopTimer+0x3a>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f383 8811 	msr	BASEPRI, r3
}
 8001ea8:	bd10      	pop	{r4, pc}
 8001eaa:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <gptStopTimer+0x48>)
 8001eac:	f005 fbe0 	bl	8007670 <chSysHalt>
 8001eb0:	e7f7      	b.n	8001ea2 <gptStopTimer+0x32>
 8001eb2:	bf00      	nop
 8001eb4:	20004f68 	.word	0x20004f68
 8001eb8:	08014768 	.word	0x08014768
 8001ebc:	f3af 8000 	nop.w

08001ec0 <gptPolledDelay>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] interval  time interval in ticks
 *
 * @api
 */
void gptPolledDelay(GPTDriver *gptp, gptcnt_t interval) {
 8001ec0:	b538      	push	{r3, r4, r5, lr}
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	460d      	mov	r5, r1

  osalDbgAssert(gptp->state == GPT_READY,
 8001ec6:	7803      	ldrb	r3, [r0, #0]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d002      	beq.n	8001ed2 <gptPolledDelay+0x12>
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <gptPolledDelay+0x24>)
 8001ece:	f005 fbcf 	bl	8007670 <chSysHalt>
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	7023      	strb	r3, [r4, #0]
  gpt_lld_polled_delay(gptp, interval);
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f005 f8e9 	bl	80070b0 <gpt_lld_polled_delay>
  gptp->state = GPT_READY;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	7023      	strb	r3, [r4, #0]
}
 8001ee2:	bd38      	pop	{r3, r4, r5, pc}
 8001ee4:	080147c8 	.word	0x080147c8
	...

08001ef0 <i2cInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void i2cInit(void) {
 8001ef0:	b508      	push	{r3, lr}

  i2c_lld_init();
 8001ef2:	f003 fbcd 	bl	8005690 <i2c_lld_init>
}
 8001ef6:	bd08      	pop	{r3, pc}
 8001ef8:	f3af 8000 	nop.w
 8001efc:	f3af 8000 	nop.w

08001f00 <i2cObjectInit>:
 *
 * @param[out] i2cp     pointer to the @p I2CDriver object
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {
 8001f00:	b508      	push	{r3, lr}

  i2cp->state  = I2C_STOP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	7003      	strb	r3, [r0, #0]
  i2cp->config = NULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	6043      	str	r3, [r0, #4]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8001f0a:	300c      	adds	r0, #12
 8001f0c:	f007 fb48 	bl	80095a0 <chMtxObjectInit>
#endif

#if defined(I2C_DRIVER_EXT_INIT_HOOK)
  I2C_DRIVER_EXT_INIT_HOOK(i2cp);
#endif
}
 8001f10:	bd08      	pop	{r3, pc}
 8001f12:	bf00      	nop
 8001f14:	f3af 8000 	nop.w
 8001f18:	f3af 8000 	nop.w
 8001f1c:	f3af 8000 	nop.w

08001f20 <i2cStart>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] config    pointer to the @p I2CConfig object
 *
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
 8001f20:	b538      	push	{r3, r4, r5, lr}
 8001f22:	460d      	mov	r5, r1

  osalDbgCheck((i2cp != NULL) && (config != NULL));
 8001f24:	4604      	mov	r4, r0
 8001f26:	b340      	cbz	r0, 8001f7a <i2cStart+0x5a>
 8001f28:	b339      	cbz	r1, 8001f7a <i2cStart+0x5a>
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 8001f2a:	7822      	ldrb	r2, [r4, #0]
 8001f2c:	1e53      	subs	r3, r2, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d904      	bls.n	8001f3e <i2cStart+0x1e>
 8001f34:	2a05      	cmp	r2, #5
 8001f36:	d002      	beq.n	8001f3e <i2cStart+0x1e>
 8001f38:	4814      	ldr	r0, [pc, #80]	; (8001f8c <i2cStart+0x6c>)
 8001f3a:	f005 fb99 	bl	8007670 <chSysHalt>
 8001f3e:	2320      	movs	r3, #32
 8001f40:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001f44:	f007 f824 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001f48:	f005 fd22 	bl	8007990 <_dbg_check_lock>
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 8001f4c:	6065      	str	r5, [r4, #4]
  i2c_lld_start(i2cp);
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f003 fbae 	bl	80056b0 <i2c_lld_start>
  i2cp->state = I2C_READY;
 8001f54:	2302      	movs	r3, #2
 8001f56:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 8001f58:	f005 fd32 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001f5c:	f007 f820 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <i2cStart+0x70>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d004      	beq.n	8001f72 <i2cStart+0x52>
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	6899      	ldr	r1, [r3, #8]
 8001f6c:	6893      	ldr	r3, [r2, #8]
 8001f6e:	4299      	cmp	r1, r3
 8001f70:	d307      	bcc.n	8001f82 <i2cStart+0x62>
 8001f72:	2300      	movs	r3, #0
 8001f74:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8001f78:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((i2cp != NULL) && (config != NULL));
 8001f7a:	4804      	ldr	r0, [pc, #16]	; (8001f8c <i2cStart+0x6c>)
 8001f7c:	f005 fb78 	bl	8007670 <chSysHalt>
 8001f80:	e7d3      	b.n	8001f2a <i2cStart+0xa>
 8001f82:	4804      	ldr	r0, [pc, #16]	; (8001f94 <i2cStart+0x74>)
 8001f84:	f005 fb74 	bl	8007670 <chSysHalt>
 8001f88:	e7f3      	b.n	8001f72 <i2cStart+0x52>
 8001f8a:	bf00      	nop
 8001f8c:	080147d8 	.word	0x080147d8
 8001f90:	20004f68 	.word	0x20004f68
 8001f94:	080147e4 	.word	0x080147e4
 8001f98:	f3af 8000 	nop.w
 8001f9c:	f3af 8000 	nop.w

08001fa0 <i2cStop>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cStop(I2CDriver *i2cp) {
 8001fa0:	b510      	push	{r4, lr}

  osalDbgCheck(i2cp != NULL);
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	b340      	cbz	r0, 8001ff8 <i2cStop+0x58>
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001fac:	f006 fff0 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001fb0:	f005 fcee 	bl	8007990 <_dbg_check_lock>

  osalSysLock();

  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 8001fb4:	7822      	ldrb	r2, [r4, #0]
 8001fb6:	1e53      	subs	r3, r2, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d904      	bls.n	8001fc8 <i2cStop+0x28>
 8001fbe:	2a05      	cmp	r2, #5
 8001fc0:	d002      	beq.n	8001fc8 <i2cStop+0x28>
 8001fc2:	4811      	ldr	r0, [pc, #68]	; (8002008 <i2cStop+0x68>)
 8001fc4:	f005 fb54 	bl	8007670 <chSysHalt>
                (i2cp->state == I2C_LOCKED), "invalid state");

  i2c_lld_stop(i2cp);
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f003 fbe9 	bl	80057a0 <i2c_lld_stop>
  i2cp->config = NULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	6063      	str	r3, [r4, #4]
  i2cp->state  = I2C_STOP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 8001fd6:	f005 fcf3 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001fda:	f006 ffe1 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <i2cStop+0x6c>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d004      	beq.n	8001ff0 <i2cStop+0x50>
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	6899      	ldr	r1, [r3, #8]
 8001fea:	6893      	ldr	r3, [r2, #8]
 8001fec:	4299      	cmp	r1, r3
 8001fee:	d307      	bcc.n	8002000 <i2cStop+0x60>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f383 8811 	msr	BASEPRI, r3

  osalSysUnlock();
}
 8001ff6:	bd10      	pop	{r4, pc}
  osalDbgCheck(i2cp != NULL);
 8001ff8:	4803      	ldr	r0, [pc, #12]	; (8002008 <i2cStop+0x68>)
 8001ffa:	f005 fb39 	bl	8007670 <chSysHalt>
 8001ffe:	e7d2      	b.n	8001fa6 <i2cStop+0x6>
 8002000:	4803      	ldr	r0, [pc, #12]	; (8002010 <i2cStop+0x70>)
 8002002:	f005 fb35 	bl	8007670 <chSysHalt>
 8002006:	e7f3      	b.n	8001ff0 <i2cStop+0x50>
 8002008:	080147f0 	.word	0x080147f0
 800200c:	20004f68 	.word	0x20004f68
 8002010:	080147e4 	.word	0x080147e4
 8002014:	f3af 8000 	nop.w
 8002018:	f3af 8000 	nop.w
 800201c:	f3af 8000 	nop.w

08002020 <i2cGetErrors>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @return              The errors mask.
 *
 * @api
 */
i2cflags_t i2cGetErrors(I2CDriver *i2cp) {
 8002020:	b510      	push	{r4, lr}

  osalDbgCheck(i2cp != NULL);
 8002022:	4604      	mov	r4, r0
 8002024:	b108      	cbz	r0, 800202a <i2cGetErrors+0xa>

  return i2c_lld_get_errors(i2cp);
}
 8002026:	68a0      	ldr	r0, [r4, #8]
 8002028:	bd10      	pop	{r4, pc}
  osalDbgCheck(i2cp != NULL);
 800202a:	4802      	ldr	r0, [pc, #8]	; (8002034 <i2cGetErrors+0x14>)
 800202c:	f005 fb20 	bl	8007670 <chSysHalt>
 8002030:	e7f9      	b.n	8002026 <i2cGetErrors+0x6>
 8002032:	bf00      	nop
 8002034:	080147f8 	.word	0x080147f8
 8002038:	f3af 8000 	nop.w
 800203c:	f3af 8000 	nop.w

08002040 <i2cMasterTransmitTimeout>:
                               i2caddr_t addr,
                               const uint8_t *txbuf,
                               size_t txbytes,
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               sysinterval_t timeout) {
 8002040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002044:	b085      	sub	sp, #20
 8002046:	468b      	mov	fp, r1
 8002048:	4692      	mov	sl, r2
 800204a:	461f      	mov	r7, r3
 800204c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800204e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8002050:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
  msg_t rdymsg;

  osalDbgCheck((i2cp != NULL) &&
 8002054:	4604      	mov	r4, r0
 8002056:	b130      	cbz	r0, 8002066 <i2cMasterTransmitTimeout+0x26>
 8002058:	b12b      	cbz	r3, 8002066 <i2cMasterTransmitTimeout+0x26>
 800205a:	b122      	cbz	r2, 8002066 <i2cMasterTransmitTimeout+0x26>
 800205c:	b105      	cbz	r5, 8002060 <i2cMasterTransmitTimeout+0x20>
 800205e:	b116      	cbz	r6, 8002066 <i2cMasterTransmitTimeout+0x26>
 8002060:	ea58 0309 	orrs.w	r3, r8, r9
 8002064:	d102      	bne.n	800206c <i2cMasterTransmitTimeout+0x2c>
 8002066:	4820      	ldr	r0, [pc, #128]	; (80020e8 <i2cMasterTransmitTimeout+0xa8>)
 8002068:	f005 fb02 	bl	8007670 <chSysHalt>
               (txbytes > 0U) && (txbuf != NULL) &&
               ((rxbytes == 0U) || ((rxbytes > 0U) && (rxbuf != NULL))) &&
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 800206c:	7823      	ldrb	r3, [r4, #0]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d12e      	bne.n	80020d0 <i2cMasterTransmitTimeout+0x90>
 8002072:	2320      	movs	r3, #32
 8002074:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002078:	f006 ff8a 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800207c:	f005 fc88 	bl	8007990 <_dbg_check_lock>

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8002080:	2300      	movs	r3, #0
 8002082:	60a3      	str	r3, [r4, #8]
  i2cp->state = I2C_ACTIVE_TX;
 8002084:	2303      	movs	r3, #3
 8002086:	7023      	strb	r3, [r4, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8002088:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800208c:	9501      	str	r5, [sp, #4]
 800208e:	9600      	str	r6, [sp, #0]
 8002090:	463b      	mov	r3, r7
 8002092:	4652      	mov	r2, sl
 8002094:	4659      	mov	r1, fp
 8002096:	4620      	mov	r0, r4
 8002098:	f003 fc4a 	bl	8005930 <i2c_lld_master_transmit_timeout>
 800209c:	4605      	mov	r5, r0
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 800209e:	f1b0 3fff 	cmp.w	r0, #4294967295
 80020a2:	d019      	beq.n	80020d8 <i2cMasterTransmitTimeout+0x98>
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
 80020a4:	2302      	movs	r3, #2
 80020a6:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 80020a8:	f005 fc8a 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80020ac:	f006 ff78 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <i2cMasterTransmitTimeout+0xac>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d004      	beq.n	80020c2 <i2cMasterTransmitTimeout+0x82>
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	6899      	ldr	r1, [r3, #8]
 80020bc:	6893      	ldr	r3, [r2, #8]
 80020be:	4299      	cmp	r1, r3
 80020c0:	d30d      	bcc.n	80020de <i2cMasterTransmitTimeout+0x9e>
 80020c2:	2300      	movs	r3, #0
 80020c4:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();
  return rdymsg;
}
 80020c8:	4628      	mov	r0, r5
 80020ca:	b005      	add	sp, #20
 80020cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <i2cMasterTransmitTimeout+0xa8>)
 80020d2:	f005 facd 	bl	8007670 <chSysHalt>
 80020d6:	e7cc      	b.n	8002072 <i2cMasterTransmitTimeout+0x32>
    i2cp->state = I2C_LOCKED;
 80020d8:	2305      	movs	r3, #5
 80020da:	7023      	strb	r3, [r4, #0]
 80020dc:	e7e4      	b.n	80020a8 <i2cMasterTransmitTimeout+0x68>
 80020de:	4804      	ldr	r0, [pc, #16]	; (80020f0 <i2cMasterTransmitTimeout+0xb0>)
 80020e0:	f005 fac6 	bl	8007670 <chSysHalt>
 80020e4:	e7ed      	b.n	80020c2 <i2cMasterTransmitTimeout+0x82>
 80020e6:	bf00      	nop
 80020e8:	08014808 	.word	0x08014808
 80020ec:	20004f68 	.word	0x20004f68
 80020f0:	080147e4 	.word	0x080147e4
 80020f4:	f3af 8000 	nop.w
 80020f8:	f3af 8000 	nop.w
 80020fc:	f3af 8000 	nop.w

08002100 <i2cMasterReceiveTimeout>:
 */
msg_t i2cMasterReceiveTimeout(I2CDriver *i2cp,
                              i2caddr_t addr,
                              uint8_t *rxbuf,
                              size_t rxbytes,
                              sysinterval_t timeout) {
 8002100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002104:	b083      	sub	sp, #12
 8002106:	460d      	mov	r5, r1
 8002108:	4691      	mov	r9, r2
 800210a:	4698      	mov	r8, r3
 800210c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28

  msg_t rdymsg;

  osalDbgCheck((i2cp != NULL) && (addr != 0U) &&
 8002110:	4604      	mov	r4, r0
 8002112:	b128      	cbz	r0, 8002120 <i2cMasterReceiveTimeout+0x20>
 8002114:	b121      	cbz	r1, 8002120 <i2cMasterReceiveTimeout+0x20>
 8002116:	b11b      	cbz	r3, 8002120 <i2cMasterReceiveTimeout+0x20>
 8002118:	b112      	cbz	r2, 8002120 <i2cMasterReceiveTimeout+0x20>
 800211a:	ea56 0307 	orrs.w	r3, r6, r7
 800211e:	d102      	bne.n	8002126 <i2cMasterReceiveTimeout+0x26>
 8002120:	481e      	ldr	r0, [pc, #120]	; (800219c <i2cMasterReceiveTimeout+0x9c>)
 8002122:	f005 faa5 	bl	8007670 <chSysHalt>
               (rxbytes > 0U) && (rxbuf != NULL) &&
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 8002126:	7823      	ldrb	r3, [r4, #0]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d12c      	bne.n	8002186 <i2cMasterReceiveTimeout+0x86>
 800212c:	2320      	movs	r3, #32
 800212e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002132:	f006 ff2d 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002136:	f005 fc2b 	bl	8007990 <_dbg_check_lock>

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 800213a:	2300      	movs	r3, #0
 800213c:	60a3      	str	r3, [r4, #8]
  i2cp->state = I2C_ACTIVE_RX;
 800213e:	2304      	movs	r3, #4
 8002140:	7023      	strb	r3, [r4, #0]
  rdymsg = i2c_lld_master_receive_timeout(i2cp, addr, rxbuf, rxbytes, timeout);
 8002142:	e9cd 6700 	strd	r6, r7, [sp]
 8002146:	4643      	mov	r3, r8
 8002148:	464a      	mov	r2, r9
 800214a:	4629      	mov	r1, r5
 800214c:	4620      	mov	r0, r4
 800214e:	f003 fb57 	bl	8005800 <i2c_lld_master_receive_timeout>
 8002152:	4605      	mov	r5, r0
  if (rdymsg == MSG_TIMEOUT) {
 8002154:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002158:	d019      	beq.n	800218e <i2cMasterReceiveTimeout+0x8e>
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
 800215a:	2302      	movs	r3, #2
 800215c:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 800215e:	f005 fc2f 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002162:	f006 ff1d 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <i2cMasterReceiveTimeout+0xa0>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d004      	beq.n	8002178 <i2cMasterReceiveTimeout+0x78>
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	6899      	ldr	r1, [r3, #8]
 8002172:	6893      	ldr	r3, [r2, #8]
 8002174:	4299      	cmp	r1, r3
 8002176:	d30d      	bcc.n	8002194 <i2cMasterReceiveTimeout+0x94>
 8002178:	2300      	movs	r3, #0
 800217a:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();
  return rdymsg;
}
 800217e:	4628      	mov	r0, r5
 8002180:	b003      	add	sp, #12
 8002182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <i2cMasterReceiveTimeout+0x9c>)
 8002188:	f005 fa72 	bl	8007670 <chSysHalt>
 800218c:	e7ce      	b.n	800212c <i2cMasterReceiveTimeout+0x2c>
    i2cp->state = I2C_LOCKED;
 800218e:	2305      	movs	r3, #5
 8002190:	7023      	strb	r3, [r4, #0]
 8002192:	e7e4      	b.n	800215e <i2cMasterReceiveTimeout+0x5e>
 8002194:	4803      	ldr	r0, [pc, #12]	; (80021a4 <i2cMasterReceiveTimeout+0xa4>)
 8002196:	f005 fa6b 	bl	8007670 <chSysHalt>
 800219a:	e7ed      	b.n	8002178 <i2cMasterReceiveTimeout+0x78>
 800219c:	08014824 	.word	0x08014824
 80021a0:	20004f68 	.word	0x20004f68
 80021a4:	080147e4 	.word	0x080147e4
 80021a8:	f3af 8000 	nop.w
 80021ac:	f3af 8000 	nop.w

080021b0 <i2cAcquireBus>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cAcquireBus(I2CDriver *i2cp) {
 80021b0:	b510      	push	{r4, lr}

  osalDbgCheck(i2cp != NULL);
 80021b2:	4604      	mov	r4, r0
 80021b4:	b120      	cbz	r0, 80021c0 <i2cAcquireBus+0x10>
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 80021b6:	f104 000c 	add.w	r0, r4, #12
 80021ba:	f007 fa81 	bl	80096c0 <chMtxLock>

  osalMutexLock(&i2cp->mutex);
}
 80021be:	bd10      	pop	{r4, pc}
  osalDbgCheck(i2cp != NULL);
 80021c0:	4801      	ldr	r0, [pc, #4]	; (80021c8 <i2cAcquireBus+0x18>)
 80021c2:	f005 fa55 	bl	8007670 <chSysHalt>
 80021c6:	e7f6      	b.n	80021b6 <i2cAcquireBus+0x6>
 80021c8:	0801483c 	.word	0x0801483c
 80021cc:	f3af 8000 	nop.w

080021d0 <i2cReleaseBus>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cReleaseBus(I2CDriver *i2cp) {
 80021d0:	b510      	push	{r4, lr}

  osalDbgCheck(i2cp != NULL);
 80021d2:	4604      	mov	r4, r0
 80021d4:	b120      	cbz	r0, 80021e0 <i2cReleaseBus+0x10>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 80021d6:	f104 000c 	add.w	r0, r4, #12
 80021da:	f007 fae1 	bl	80097a0 <chMtxUnlock>

  osalMutexUnlock(&i2cp->mutex);
}
 80021de:	bd10      	pop	{r4, pc}
  osalDbgCheck(i2cp != NULL);
 80021e0:	4801      	ldr	r0, [pc, #4]	; (80021e8 <i2cReleaseBus+0x18>)
 80021e2:	f005 fa45 	bl	8007670 <chSysHalt>
 80021e6:	e7f6      	b.n	80021d6 <i2cReleaseBus+0x6>
 80021e8:	0801484c 	.word	0x0801484c
 80021ec:	00000000 	.word	0x00000000

080021f0 <palReadBus>:
 * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
 * @return              The bus logical states.
 *
 * @special
 */
ioportmask_t palReadBus(const IOBus *bus) {
 80021f0:	b510      	push	{r4, lr}

  osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
 80021f2:	4604      	mov	r4, r0
 80021f4:	b110      	cbz	r0, 80021fc <palReadBus+0xc>
 80021f6:	6883      	ldr	r3, [r0, #8]
 80021f8:	2b0f      	cmp	r3, #15
 80021fa:	d902      	bls.n	8002202 <palReadBus+0x12>
 80021fc:	4804      	ldr	r0, [pc, #16]	; (8002210 <palReadBus+0x20>)
 80021fe:	f005 fa37 	bl	8007670 <chSysHalt>

  return palReadGroup(bus->portid, bus->mask, bus->offset);
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	68a0      	ldr	r0, [r4, #8]
 8002208:	40c3      	lsrs	r3, r0
 800220a:	6860      	ldr	r0, [r4, #4]
}
 800220c:	4018      	ands	r0, r3
 800220e:	bd10      	pop	{r4, pc}
 8002210:	0801485c 	.word	0x0801485c
 8002214:	f3af 8000 	nop.w
 8002218:	f3af 8000 	nop.w
 800221c:	f3af 8000 	nop.w

08002220 <palWriteBus>:
 *                      the bus width are masked so most significant bits are
 *                      lost.
 *
 * @special
 */
void palWriteBus(const IOBus *bus, ioportmask_t bits) {
 8002220:	b538      	push	{r3, r4, r5, lr}
 8002222:	460d      	mov	r5, r1

  osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
 8002224:	4604      	mov	r4, r0
 8002226:	b110      	cbz	r0, 800222e <palWriteBus+0xe>
 8002228:	6883      	ldr	r3, [r0, #8]
 800222a:	2b0f      	cmp	r3, #15
 800222c:	d902      	bls.n	8002234 <palWriteBus+0x14>
 800222e:	4808      	ldr	r0, [pc, #32]	; (8002250 <palWriteBus+0x30>)
 8002230:	f005 fa1e 	bl	8007670 <chSysHalt>

  palWriteGroup(bus->portid, bus->mask, bus->offset, bits);
 8002234:	6861      	ldr	r1, [r4, #4]
 8002236:	ea21 0305 	bic.w	r3, r1, r5
 800223a:	68a2      	ldr	r2, [r4, #8]
 800223c:	f102 0010 	add.w	r0, r2, #16
 8002240:	4083      	lsls	r3, r0
 8002242:	4029      	ands	r1, r5
 8002244:	4091      	lsls	r1, r2
 8002246:	4319      	orrs	r1, r3
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	6199      	str	r1, [r3, #24]
}
 800224c:	bd38      	pop	{r3, r4, r5, pc}
 800224e:	bf00      	nop
 8002250:	08014868 	.word	0x08014868
 8002254:	f3af 8000 	nop.w
 8002258:	f3af 8000 	nop.w
 800225c:	f3af 8000 	nop.w

08002260 <palSetBusMode>:
 * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
 * @param[in] mode      the mode
 *
 * @special
 */
void palSetBusMode(const IOBus *bus, iomode_t mode) {
 8002260:	b538      	push	{r3, r4, r5, lr}
 8002262:	460d      	mov	r5, r1

  osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
 8002264:	4604      	mov	r4, r0
 8002266:	b110      	cbz	r0, 800226e <palSetBusMode+0xe>
 8002268:	6883      	ldr	r3, [r0, #8]
 800226a:	2b0f      	cmp	r3, #15
 800226c:	d902      	bls.n	8002274 <palSetBusMode+0x14>
 800226e:	4805      	ldr	r0, [pc, #20]	; (8002284 <palSetBusMode+0x24>)
 8002270:	f005 f9fe 	bl	8007670 <chSysHalt>

  palSetGroupMode(bus->portid, bus->mask, bus->offset, mode);
 8002274:	6861      	ldr	r1, [r4, #4]
 8002276:	68a3      	ldr	r3, [r4, #8]
 8002278:	462a      	mov	r2, r5
 800227a:	4099      	lsls	r1, r3
 800227c:	6820      	ldr	r0, [r4, #0]
 800227e:	f002 fe5f 	bl	8004f40 <_pal_lld_setgroupmode>
}
 8002282:	bd38      	pop	{r3, r4, r5, pc}
 8002284:	08014874 	.word	0x08014874
 8002288:	f3af 8000 	nop.w
 800228c:	f3af 8000 	nop.w

08002290 <palSetPadCallbackI>:
 */
void palSetPadCallbackI(ioportid_t port, iopadid_t pad,
                        palcallback_t cb, void *arg) {

  palevent_t *pep = pal_lld_get_pad_event(port, pad);
  pep->cb = cb;
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <palSetPadCallbackI+0xc>)
 8002292:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002296:	608a      	str	r2, [r1, #8]
  pep->arg = arg;
 8002298:	60cb      	str	r3, [r1, #12]
}
 800229a:	4770      	bx	lr
 800229c:	20004588 	.word	0x20004588

080022a0 <palSetLineCallbackI>:
 *
 * @iclass
 */
void palSetLineCallbackI(ioline_t line, palcallback_t cb, void *arg) {

  palevent_t *pep = pal_lld_get_line_event(line);
 80022a0:	f000 000f 	and.w	r0, r0, #15
  pep->cb = cb;
 80022a4:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <palSetLineCallbackI+0x10>)
 80022a6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80022aa:	6081      	str	r1, [r0, #8]
  pep->arg = arg;
 80022ac:	60c2      	str	r2, [r0, #12]
}
 80022ae:	4770      	bx	lr
 80022b0:	20004588 	.word	0x20004588
 80022b4:	f3af 8000 	nop.w
 80022b8:	f3af 8000 	nop.w
 80022bc:	f3af 8000 	nop.w

080022c0 <palWaitPadTimeoutS>:
 *
 * @sclass
 */
msg_t palWaitPadTimeoutS(ioportid_t port,
                         iopadid_t pad,
                         sysinterval_t timeout) {
 80022c0:	b508      	push	{r3, lr}
  return chThdEnqueueTimeoutS(tqp, timeout);
 80022c2:	4803      	ldr	r0, [pc, #12]	; (80022d0 <palWaitPadTimeoutS+0x10>)
 80022c4:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80022c8:	f006 fd4a 	bl	8008d60 <chThdEnqueueTimeoutS>

  palevent_t *pep = pal_lld_get_pad_event(port, pad);
  return osalThreadEnqueueTimeoutS(&pep->threads, timeout);
}
 80022cc:	bd08      	pop	{r3, pc}
 80022ce:	bf00      	nop
 80022d0:	20004588 	.word	0x20004588
 80022d4:	f3af 8000 	nop.w
 80022d8:	f3af 8000 	nop.w
 80022dc:	f3af 8000 	nop.w

080022e0 <palWaitPadTimeout>:
 *
 * @api
 */
msg_t palWaitPadTimeout(ioportid_t port,
                        iopadid_t pad,
                        sysinterval_t timeout) {
 80022e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e2:	4604      	mov	r4, r0
 80022e4:	460d      	mov	r5, r1
 80022e6:	4616      	mov	r6, r2
 80022e8:	461f      	mov	r7, r3
 80022ea:	2320      	movs	r3, #32
 80022ec:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80022f0:	f006 fe4e 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80022f4:	f005 fb4c 	bl	8007990 <_dbg_check_lock>
  msg_t msg;

  osalSysLock();
  msg = palWaitPadTimeoutS(port, pad, timeout);
 80022f8:	4632      	mov	r2, r6
 80022fa:	463b      	mov	r3, r7
 80022fc:	4629      	mov	r1, r5
 80022fe:	4620      	mov	r0, r4
 8002300:	f7ff ffde 	bl	80022c0 <palWaitPadTimeoutS>
 8002304:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8002306:	f005 fb5b 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800230a:	f006 fe49 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <palWaitPadTimeout+0x54>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d004      	beq.n	8002320 <palWaitPadTimeout+0x40>
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	6893      	ldr	r3, [r2, #8]
 800231c:	4299      	cmp	r1, r3
 800231e:	d304      	bcc.n	800232a <palWaitPadTimeout+0x4a>
 8002320:	2300      	movs	r3, #0
 8002322:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
  return msg;
}
 8002326:	4620      	mov	r0, r4
 8002328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800232a:	4803      	ldr	r0, [pc, #12]	; (8002338 <palWaitPadTimeout+0x58>)
 800232c:	f005 f9a0 	bl	8007670 <chSysHalt>
 8002330:	e7f6      	b.n	8002320 <palWaitPadTimeout+0x40>
 8002332:	bf00      	nop
 8002334:	20004f68 	.word	0x20004f68
 8002338:	08014884 	.word	0x08014884
 800233c:	f3af 8000 	nop.w

08002340 <palWaitLineTimeoutS>:
 *                      waiting for an edge.
 *
 * @sclass
 */
msg_t palWaitLineTimeoutS(ioline_t line,
                          sysinterval_t timeout) {
 8002340:	b508      	push	{r3, lr}

  palevent_t *pep = pal_lld_get_line_event(line);
 8002342:	f000 000f 	and.w	r0, r0, #15
 8002346:	4903      	ldr	r1, [pc, #12]	; (8002354 <palWaitLineTimeoutS+0x14>)
 8002348:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800234c:	f006 fd08 	bl	8008d60 <chThdEnqueueTimeoutS>
  return osalThreadEnqueueTimeoutS(&pep->threads, timeout);
}
 8002350:	bd08      	pop	{r3, pc}
 8002352:	bf00      	nop
 8002354:	20004588 	.word	0x20004588
 8002358:	f3af 8000 	nop.w
 800235c:	f3af 8000 	nop.w

08002360 <palWaitLineTimeout>:
 * @retval MSG_RESET    if the event has been disabled while the thread was
 *                      waiting for an edge.
 *
 * @api
 */
msg_t palWaitLineTimeout(ioline_t line, sysinterval_t timeout) {
 8002360:	b5d0      	push	{r4, r6, r7, lr}
 8002362:	4604      	mov	r4, r0
 8002364:	4616      	mov	r6, r2
 8002366:	461f      	mov	r7, r3
 8002368:	2320      	movs	r3, #32
 800236a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800236e:	f006 fe0f 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002372:	f005 fb0d 	bl	8007990 <_dbg_check_lock>
  msg_t msg;

  osalSysLock();
  msg= palWaitLineTimeoutS(line, timeout);
 8002376:	4632      	mov	r2, r6
 8002378:	463b      	mov	r3, r7
 800237a:	4620      	mov	r0, r4
 800237c:	f7ff ffe0 	bl	8002340 <palWaitLineTimeoutS>
 8002380:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8002382:	f005 fb1d 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002386:	f006 fe0b 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <palWaitLineTimeout+0x50>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d004      	beq.n	800239c <palWaitLineTimeout+0x3c>
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	6893      	ldr	r3, [r2, #8]
 8002398:	4299      	cmp	r1, r3
 800239a:	d304      	bcc.n	80023a6 <palWaitLineTimeout+0x46>
 800239c:	2300      	movs	r3, #0
 800239e:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
  return msg;
}
 80023a2:	4620      	mov	r0, r4
 80023a4:	bdd0      	pop	{r4, r6, r7, pc}
 80023a6:	4803      	ldr	r0, [pc, #12]	; (80023b4 <palWaitLineTimeout+0x54>)
 80023a8:	f005 f962 	bl	8007670 <chSysHalt>
 80023ac:	e7f6      	b.n	800239c <palWaitLineTimeout+0x3c>
 80023ae:	bf00      	nop
 80023b0:	20004f68 	.word	0x20004f68
 80023b4:	08014884 	.word	0x08014884
	...

080023c0 <rtcInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void rtcInit(void) {
 80023c0:	b508      	push	{r3, lr}

  rtc_lld_init();
 80023c2:	f003 fd95 	bl	8005ef0 <rtc_lld_init>
}
 80023c6:	bd08      	pop	{r3, pc}
 80023c8:	f3af 8000 	nop.w
 80023cc:	f3af 8000 	nop.w

080023d0 <rtcObjectInit>:
 * @init
 */
void rtcObjectInit(RTCDriver *rtcp) {

#if RTC_HAS_STORAGE == TRUE
  rtcp->vmt = &_rtc_lld_vmt;
 80023d0:	4b01      	ldr	r3, [pc, #4]	; (80023d8 <rtcObjectInit+0x8>)
 80023d2:	6003      	str	r3, [r0, #0]
#else
  (void)rtcp;
#endif
}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20001a10 	.word	0x20001a10
 80023dc:	f3af 8000 	nop.w

080023e0 <rtcSetTime>:
 * @param[in] rtcp      pointer to RTC driver structure
 * @param[in] timespec  pointer to a @p RTCDateTime structure
 *
 * @special
 */
void rtcSetTime(RTCDriver *rtcp, const RTCDateTime *timespec) {
 80023e0:	b538      	push	{r3, r4, r5, lr}
 80023e2:	460c      	mov	r4, r1

  osalDbgCheck((rtcp != NULL) && (timespec != NULL));
 80023e4:	4605      	mov	r5, r0
 80023e6:	b128      	cbz	r0, 80023f4 <rtcSetTime+0x14>
 80023e8:	b121      	cbz	r1, 80023f4 <rtcSetTime+0x14>

  rtc_lld_set_time(rtcp, timespec);
 80023ea:	4621      	mov	r1, r4
 80023ec:	4628      	mov	r0, r5
 80023ee:	f003 fdbf 	bl	8005f70 <rtc_lld_set_time>
}
 80023f2:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((rtcp != NULL) && (timespec != NULL));
 80023f4:	4801      	ldr	r0, [pc, #4]	; (80023fc <rtcSetTime+0x1c>)
 80023f6:	f005 f93b 	bl	8007670 <chSysHalt>
 80023fa:	e7f6      	b.n	80023ea <rtcSetTime+0xa>
 80023fc:	08014890 	.word	0x08014890

08002400 <rtcGetTime>:
 * @param[in] rtcp      pointer to RTC driver structure
 * @param[out] timespec pointer to a @p RTCDateTime structure
 *
 * @special
 */
void rtcGetTime(RTCDriver *rtcp, RTCDateTime *timespec) {
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	460c      	mov	r4, r1

  osalDbgCheck((rtcp != NULL) && (timespec != NULL));
 8002404:	4605      	mov	r5, r0
 8002406:	b128      	cbz	r0, 8002414 <rtcGetTime+0x14>
 8002408:	b121      	cbz	r1, 8002414 <rtcGetTime+0x14>

  rtc_lld_get_time(rtcp, timespec);
 800240a:	4621      	mov	r1, r4
 800240c:	4628      	mov	r0, r5
 800240e:	f003 fddf 	bl	8005fd0 <rtc_lld_get_time>
}
 8002412:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((rtcp != NULL) && (timespec != NULL));
 8002414:	4801      	ldr	r0, [pc, #4]	; (800241c <rtcGetTime+0x1c>)
 8002416:	f005 f92b 	bl	8007670 <chSysHalt>
 800241a:	e7f6      	b.n	800240a <rtcGetTime+0xa>
 800241c:	0801489c 	.word	0x0801489c

08002420 <rtcSetAlarm>:
 *
 * @special
 */
void rtcSetAlarm(RTCDriver *rtcp,
                 rtcalarm_t alarm,
                 const RTCAlarm *alarmspec) {
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	460c      	mov	r4, r1
 8002424:	4616      	mov	r6, r2

  osalDbgCheck((rtcp != NULL) && (alarm < (rtcalarm_t)RTC_ALARMS));
 8002426:	4605      	mov	r5, r0
 8002428:	b108      	cbz	r0, 800242e <rtcSetAlarm+0xe>
 800242a:	2901      	cmp	r1, #1
 800242c:	d902      	bls.n	8002434 <rtcSetAlarm+0x14>
 800242e:	4804      	ldr	r0, [pc, #16]	; (8002440 <rtcSetAlarm+0x20>)
 8002430:	f005 f91e 	bl	8007670 <chSysHalt>

  rtc_lld_set_alarm(rtcp, alarm, alarmspec);
 8002434:	4632      	mov	r2, r6
 8002436:	4621      	mov	r1, r4
 8002438:	4628      	mov	r0, r5
 800243a:	f003 fe01 	bl	8006040 <rtc_lld_set_alarm>
}
 800243e:	bd70      	pop	{r4, r5, r6, pc}
 8002440:	080148a8 	.word	0x080148a8
 8002444:	f3af 8000 	nop.w
 8002448:	f3af 8000 	nop.w
 800244c:	f3af 8000 	nop.w

08002450 <rtcGetAlarm>:
 *
 * @special
 */
void rtcGetAlarm(RTCDriver *rtcp,
                 rtcalarm_t alarm,
                 RTCAlarm *alarmspec) {
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	460c      	mov	r4, r1
 8002454:	4615      	mov	r5, r2

  osalDbgCheck((rtcp != NULL) &&
 8002456:	4606      	mov	r6, r0
 8002458:	b108      	cbz	r0, 800245e <rtcGetAlarm+0xe>
 800245a:	2901      	cmp	r1, #1
 800245c:	d908      	bls.n	8002470 <rtcGetAlarm+0x20>
 800245e:	4806      	ldr	r0, [pc, #24]	; (8002478 <rtcGetAlarm+0x28>)
 8002460:	f005 f906 	bl	8007670 <chSysHalt>
               (alarm < (rtcalarm_t)RTC_ALARMS) &&
               (alarmspec != NULL));

  rtc_lld_get_alarm(rtcp, alarm, alarmspec);
 8002464:	462a      	mov	r2, r5
 8002466:	4621      	mov	r1, r4
 8002468:	4630      	mov	r0, r6
 800246a:	f003 fe39 	bl	80060e0 <rtc_lld_get_alarm>
}
 800246e:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgCheck((rtcp != NULL) &&
 8002470:	2a00      	cmp	r2, #0
 8002472:	d1f7      	bne.n	8002464 <rtcGetAlarm+0x14>
 8002474:	e7f3      	b.n	800245e <rtcGetAlarm+0xe>
 8002476:	bf00      	nop
 8002478:	080148b4 	.word	0x080148b4
 800247c:	f3af 8000 	nop.w

08002480 <rtcSetCallback>:
 * @param[in] rtcp      pointer to RTC driver structure
 * @param[in] callback  callback function pointer or @p NULL
 *
 * @special
 */
void rtcSetCallback(RTCDriver *rtcp, rtccb_t callback) {
 8002480:	b538      	push	{r3, r4, r5, lr}
 8002482:	460d      	mov	r5, r1

  osalDbgCheck(rtcp != NULL);
 8002484:	4604      	mov	r4, r0
 8002486:	b120      	cbz	r0, 8002492 <rtcSetCallback+0x12>

  rtc_lld_set_callback(rtcp, callback);
 8002488:	4629      	mov	r1, r5
 800248a:	4620      	mov	r0, r4
 800248c:	f003 fe38 	bl	8006100 <rtc_lld_set_callback>
}
 8002490:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(rtcp != NULL);
 8002492:	4802      	ldr	r0, [pc, #8]	; (800249c <rtcSetCallback+0x1c>)
 8002494:	f005 f8ec 	bl	8007670 <chSysHalt>
 8002498:	e7f6      	b.n	8002488 <rtcSetCallback+0x8>
 800249a:	bf00      	nop
 800249c:	080148c0 	.word	0x080148c0

080024a0 <rtcConvertDateTimeToStructTm>:
 *
 * @api
 */
void rtcConvertDateTimeToStructTm(const RTCDateTime *timespec,
                                  struct tm *timp,
                                  uint32_t *tv_msec) {
 80024a0:	b430      	push	{r4, r5}
  int sec;

  timp->tm_year  = (int)timespec->year + (1980 - 1900);
 80024a2:	7803      	ldrb	r3, [r0, #0]
 80024a4:	3350      	adds	r3, #80	; 0x50
 80024a6:	614b      	str	r3, [r1, #20]
  timp->tm_mon   = (int)timespec->month - 1;
 80024a8:	7843      	ldrb	r3, [r0, #1]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3b01      	subs	r3, #1
 80024b0:	610b      	str	r3, [r1, #16]
  timp->tm_mday  = (int)timespec->day;
 80024b2:	7883      	ldrb	r3, [r0, #2]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	60cb      	str	r3, [r1, #12]
  timp->tm_isdst = (int)timespec->dstflag;
 80024ba:	7843      	ldrb	r3, [r0, #1]
 80024bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80024c0:	620b      	str	r3, [r1, #32]
  timp->tm_wday  = (int)timespec->dayofweek - 1;
 80024c2:	7843      	ldrb	r3, [r0, #1]
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	3b01      	subs	r3, #1
 80024c8:	618b      	str	r3, [r1, #24]

  sec = (int)timespec->millisecond / 1000;
 80024ca:	6843      	ldr	r3, [r0, #4]
 80024cc:	f3c3 031a 	ubfx	r3, r3, #0, #27
 80024d0:	4c17      	ldr	r4, [pc, #92]	; (8002530 <rtcConvertDateTimeToStructTm+0x90>)
 80024d2:	fb84 5403 	smull	r5, r4, r4, r3
 80024d6:	11a4      	asrs	r4, r4, #6
  timp->tm_hour = sec / 3600;
 80024d8:	4d16      	ldr	r5, [pc, #88]	; (8002534 <rtcConvertDateTimeToStructTm+0x94>)
 80024da:	fb85 5303 	smull	r5, r3, r5, r3
 80024de:	151b      	asrs	r3, r3, #20
 80024e0:	608b      	str	r3, [r1, #8]
  sec %= 3600;
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <rtcConvertDateTimeToStructTm+0x98>)
 80024e4:	fb83 5304 	smull	r5, r3, r3, r4
 80024e8:	4423      	add	r3, r4
 80024ea:	12db      	asrs	r3, r3, #11
 80024ec:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 80024f0:	fb05 4313 	mls	r3, r5, r3, r4
  timp->tm_min = sec / 60;
 80024f4:	4c11      	ldr	r4, [pc, #68]	; (800253c <rtcConvertDateTimeToStructTm+0x9c>)
 80024f6:	fb84 5403 	smull	r5, r4, r4, r3
 80024fa:	18e5      	adds	r5, r4, r3
 80024fc:	17dc      	asrs	r4, r3, #31
 80024fe:	ebc4 1465 	rsb	r4, r4, r5, asr #5
 8002502:	604c      	str	r4, [r1, #4]
  timp->tm_sec = sec % 60;
 8002504:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8002508:	00a5      	lsls	r5, r4, #2
 800250a:	1b5d      	subs	r5, r3, r5
 800250c:	600d      	str	r5, [r1, #0]

  if (NULL != tv_msec) {
 800250e:	b162      	cbz	r2, 800252a <rtcConvertDateTimeToStructTm+0x8a>
 8002510:	4611      	mov	r1, r2
    *tv_msec = (uint32_t)timespec->millisecond % 1000U;
 8002512:	6842      	ldr	r2, [r0, #4]
 8002514:	f3c2 021a 	ubfx	r2, r2, #0, #27
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <rtcConvertDateTimeToStructTm+0x90>)
 800251a:	fba3 0302 	umull	r0, r3, r3, r2
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002524:	fb00 2313 	mls	r3, r0, r3, r2
 8002528:	600b      	str	r3, [r1, #0]
  }
}
 800252a:	bc30      	pop	{r4, r5}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	10624dd3 	.word	0x10624dd3
 8002534:	4a90be59 	.word	0x4a90be59
 8002538:	91a2b3c5 	.word	0x91a2b3c5
 800253c:	88888889 	.word	0x88888889

08002540 <rtcConvertStructTmToDateTime>:
 *
 * @api
 */
void rtcConvertStructTmToDateTime(const struct tm *timp,
                                  uint32_t tv_msec,
                                  RTCDateTime *timespec) {
 8002540:	b430      	push	{r4, r5}

  /*lint -save -e9034 [10.4] Verified assignments to bit fields.*/
  timespec->year      = (uint32_t)timp->tm_year - (1980U - 1900U);
 8002542:	6944      	ldr	r4, [r0, #20]
 8002544:	3c50      	subs	r4, #80	; 0x50
 8002546:	7014      	strb	r4, [r2, #0]
  timespec->month     = (uint32_t)timp->tm_mon + 1U;
 8002548:	6904      	ldr	r4, [r0, #16]
 800254a:	3401      	adds	r4, #1
 800254c:	7853      	ldrb	r3, [r2, #1]
 800254e:	f364 0303 	bfi	r3, r4, #0, #4
 8002552:	7053      	strb	r3, [r2, #1]
  timespec->day       = (uint32_t)timp->tm_mday;
 8002554:	68c4      	ldr	r4, [r0, #12]
 8002556:	7893      	ldrb	r3, [r2, #2]
 8002558:	f364 0304 	bfi	r3, r4, #0, #5
 800255c:	7093      	strb	r3, [r2, #2]
  timespec->dayofweek = (uint32_t)timp->tm_wday + 1U;
 800255e:	6984      	ldr	r4, [r0, #24]
 8002560:	3401      	adds	r4, #1
 8002562:	7853      	ldrb	r3, [r2, #1]
 8002564:	f364 1347 	bfi	r3, r4, #5, #3
 8002568:	7053      	strb	r3, [r2, #1]
  if (-1 == timp->tm_isdst) {
 800256a:	6a03      	ldr	r3, [r0, #32]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d018      	beq.n	80025a4 <rtcConvertStructTmToDateTime+0x64>
    timespec->dstflag = 0U;  /* set zero if dst is unknown */
  }
  else {
    timespec->dstflag = (uint32_t)timp->tm_isdst;
 8002572:	7854      	ldrb	r4, [r2, #1]
 8002574:	f363 1404 	bfi	r4, r3, #4, #1
 8002578:	7054      	strb	r4, [r2, #1]
  }
  /*lint -restore*/
  /*lint -save -e9033 [10.8] Verified assignments to bit fields.*/
  timespec->millisecond = tv_msec + (uint32_t)(((timp->tm_hour * 3600) +
 800257a:	6883      	ldr	r3, [r0, #8]
                                                (timp->tm_min * 60) +
 800257c:	6844      	ldr	r4, [r0, #4]
 800257e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8002582:	00a5      	lsls	r5, r4, #2
  timespec->millisecond = tv_msec + (uint32_t)(((timp->tm_hour * 3600) +
 8002584:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8002588:	fb04 5303 	mla	r3, r4, r3, r5
                                                 timp->tm_sec) * 1000);
 800258c:	6800      	ldr	r0, [r0, #0]
                                                (timp->tm_min * 60) +
 800258e:	4403      	add	r3, r0
  timespec->millisecond = tv_msec + (uint32_t)(((timp->tm_hour * 3600) +
 8002590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002594:	fb00 1103 	mla	r1, r0, r3, r1
 8002598:	6853      	ldr	r3, [r2, #4]
 800259a:	f361 031a 	bfi	r3, r1, #0, #27
 800259e:	6053      	str	r3, [r2, #4]
  /*lint -restore*/
}
 80025a0:	bc30      	pop	{r4, r5}
 80025a2:	4770      	bx	lr
    timespec->dstflag = 0U;  /* set zero if dst is unknown */
 80025a4:	7853      	ldrb	r3, [r2, #1]
 80025a6:	f36f 1304 	bfc	r3, #4, #1
 80025aa:	7053      	strb	r3, [r2, #1]
 80025ac:	e7e5      	b.n	800257a <rtcConvertStructTmToDateTime+0x3a>
 80025ae:	bf00      	nop

080025b0 <rtcConvertDateTimeToFAT>:
 * @param[out] timespec pointer to a @p RTCDateTime structure
 * @return              FAT date/time value.
 *
 * @api
 */
uint32_t rtcConvertDateTimeToFAT(const RTCDateTime *timespec) {
 80025b0:	b470      	push	{r4, r5, r6}
  uint32_t fattime;
  uint32_t sec, min, hour, day, month;

  sec   = timespec->millisecond / 1000U;
 80025b2:	6842      	ldr	r2, [r0, #4]
 80025b4:	f3c2 021a 	ubfx	r2, r2, #0, #27
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <rtcConvertDateTimeToFAT+0x80>)
 80025ba:	fba3 3202 	umull	r3, r2, r3, r2
 80025be:	0992      	lsrs	r2, r2, #6
  hour  = sec / 3600U;
 80025c0:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <rtcConvertDateTimeToFAT+0x84>)
 80025c2:	fba3 1302 	umull	r1, r3, r3, r2
 80025c6:	0adc      	lsrs	r4, r3, #11
  sec  %= 3600U;
 80025c8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80025cc:	fb01 2114 	mls	r1, r1, r4, r2
  min   = sec / 60U;
 80025d0:	4b19      	ldr	r3, [pc, #100]	; (8002638 <rtcConvertDateTimeToFAT+0x88>)
 80025d2:	fba3 2301 	umull	r2, r3, r3, r1
 80025d6:	095b      	lsrs	r3, r3, #5
  sec  %= 60U;
 80025d8:	ebc3 1503 	rsb	r5, r3, r3, lsl #4
 80025dc:	00aa      	lsls	r2, r5, #2
 80025de:	1a8a      	subs	r2, r1, r2
  day   = timespec->day;
 80025e0:	7881      	ldrb	r1, [r0, #2]
 80025e2:	f001 011f 	and.w	r1, r1, #31
  month = timespec->month;
 80025e6:	7845      	ldrb	r5, [r0, #1]
 80025e8:	f005 060f 	and.w	r6, r5, #15

  /* handle DST flag */
  if (1U == timespec->dstflag) {
 80025ec:	f015 0f10 	tst.w	r5, #16
 80025f0:	d002      	beq.n	80025f8 <rtcConvertDateTimeToFAT+0x48>
    hour += 1U;
 80025f2:	3401      	adds	r4, #1
    if (hour == 24U) {
 80025f4:	2c18      	cmp	r4, #24
 80025f6:	d00d      	beq.n	8002614 <rtcConvertDateTimeToFAT+0x64>
      }
    }
  }

  fattime  = sec   >> 1U;
  fattime |= min   << 5U;
 80025f8:	015b      	lsls	r3, r3, #5
 80025fa:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
  fattime |= hour  << 11U;
 80025fe:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
  fattime |= day   << 16U;
 8002602:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  fattime |= month << 21U;
 8002606:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
  fattime |= (uint32_t)timespec->year << 25U;
 800260a:	7800      	ldrb	r0, [r0, #0]

  return fattime;
}
 800260c:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
 8002610:	bc70      	pop	{r4, r5, r6}
 8002612:	4770      	bx	lr
      day += 1U;
 8002614:	3101      	adds	r1, #1
      if (day > month_len[month - 1U]) {
 8002616:	1e75      	subs	r5, r6, #1
 8002618:	4c08      	ldr	r4, [pc, #32]	; (800263c <rtcConvertDateTimeToFAT+0x8c>)
 800261a:	442c      	add	r4, r5
 800261c:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
 8002620:	428c      	cmp	r4, r1
 8002622:	d203      	bcs.n	800262c <rtcConvertDateTimeToFAT+0x7c>
        month += 1U;
 8002624:	3601      	adds	r6, #1
        day = 1U;
 8002626:	2101      	movs	r1, #1
      hour = 0U;
 8002628:	2400      	movs	r4, #0
 800262a:	e7e5      	b.n	80025f8 <rtcConvertDateTimeToFAT+0x48>
 800262c:	2400      	movs	r4, #0
 800262e:	e7e3      	b.n	80025f8 <rtcConvertDateTimeToFAT+0x48>
 8002630:	10624dd3 	.word	0x10624dd3
 8002634:	91a2b3c5 	.word	0x91a2b3c5
 8002638:	88888889 	.word	0x88888889
 800263c:	08014890 	.word	0x08014890

08002640 <sdc_cmd6_extract_info>:
 * @notapi
 */
static uint16_t sdc_cmd6_extract_info(sd_switch_function_t function,
                                      const uint8_t *buf) {

  unsigned start = 12U - ((unsigned)function * 2U);
 8002640:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
 8002644:	0043      	lsls	r3, r0, #1
 8002646:	f103 020c 	add.w	r2, r3, #12

  return ((uint16_t)buf[start] << 8U) | (uint16_t)buf[start + 1U];
 800264a:	5c88      	ldrb	r0, [r1, r2]
 800264c:	4419      	add	r1, r3
 800264e:	7b4b      	ldrb	r3, [r1, #13]
}
 8002650:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	f3af 8000 	nop.w
 800265c:	f3af 8000 	nop.w

08002660 <sdc_cmd6_check_status>:
                                 const uint8_t *buf) {

  uint32_t tmp;
  uint32_t status;

  tmp = ((uint32_t)buf[14] << 16U) |
 8002660:	7b8a      	ldrb	r2, [r1, #14]
        ((uint32_t)buf[15] << 8U) |
 8002662:	7bcb      	ldrb	r3, [r1, #15]
 8002664:	021b      	lsls	r3, r3, #8
  tmp = ((uint32_t)buf[14] << 16U) |
 8002666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        (uint32_t)buf[16];
 800266a:	7c0a      	ldrb	r2, [r1, #16]
  tmp = ((uint32_t)buf[14] << 16U) |
 800266c:	4313      	orrs	r3, r2
  status = (tmp >> ((uint32_t)function * 4U)) & 0xFU;
 800266e:	0080      	lsls	r0, r0, #2
 8002670:	40c3      	lsrs	r3, r0
 8002672:	f003 030f 	and.w	r3, r3, #15
  if (0xFU != status) {
 8002676:	2b0f      	cmp	r3, #15
 8002678:	d001      	beq.n	800267e <sdc_cmd6_check_status+0x1e>
    return HAL_SUCCESS;
 800267a:	2000      	movs	r0, #0
 800267c:	4770      	bx	lr
  }
  return HAL_FAILED;
 800267e:	2001      	movs	r0, #1
}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	f3af 8000 	nop.w
 8002688:	f3af 8000 	nop.w
 800268c:	f3af 8000 	nop.w

08002690 <mmc_cmd6_construct>:
                                   uint32_t value, uint32_t cmd_set) {
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	4607      	mov	r7, r0
 8002694:	460c      	mov	r4, r1
 8002696:	4616      	mov	r6, r2
 8002698:	461d      	mov	r5, r3
  osalDbgAssert(idx <= 191U, "This field is not writable");
 800269a:	29bf      	cmp	r1, #191	; 0xbf
 800269c:	d808      	bhi.n	80026b0 <mmc_cmd6_construct+0x20>
  osalDbgAssert(cmd_set < 8U, "This field has only 3 bits");
 800269e:	2d07      	cmp	r5, #7
 80026a0:	d80a      	bhi.n	80026b8 <mmc_cmd6_construct+0x28>
  return ((uint32_t)access << 24U) | (idx << 16U) | (value << 8U) | cmd_set;
 80026a2:	0420      	lsls	r0, r4, #16
 80026a4:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
 80026a8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
}
 80026ac:	4328      	orrs	r0, r5
 80026ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgAssert(idx <= 191U, "This field is not writable");
 80026b0:	4803      	ldr	r0, [pc, #12]	; (80026c0 <mmc_cmd6_construct+0x30>)
 80026b2:	f004 ffdd 	bl	8007670 <chSysHalt>
 80026b6:	e7f2      	b.n	800269e <mmc_cmd6_construct+0xe>
  osalDbgAssert(cmd_set < 8U, "This field has only 3 bits");
 80026b8:	4801      	ldr	r0, [pc, #4]	; (80026c0 <mmc_cmd6_construct+0x30>)
 80026ba:	f004 ffd9 	bl	8007670 <chSysHalt>
 80026be:	e7f0      	b.n	80026a2 <mmc_cmd6_construct+0x12>
 80026c0:	080148dc 	.word	0x080148dc
 80026c4:	f3af 8000 	nop.w
 80026c8:	f3af 8000 	nop.w
 80026cc:	f3af 8000 	nop.w

080026d0 <mmc_detect_bus_clk>:
 * @notapi
 */
static bool mmc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
  uint32_t cmdarg;
  uint32_t resp[1];
  uint8_t *scratchpad = sdcp->config->scratchpad;
 80026d0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80026d2:	681b      	ldr	r3, [r3, #0]

  /* Safe default.*/
  *clk = SDC_CLK_25MHz;
 80026d4:	2200      	movs	r2, #0
 80026d6:	700a      	strb	r2, [r1, #0]

  /* Use safe default when there is no space for data.*/
  if (NULL == scratchpad) {
 80026d8:	b1cb      	cbz	r3, 800270e <mmc_detect_bus_clk+0x3e>
static bool mmc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 80026da:	b530      	push	{r4, r5, lr}
 80026dc:	b083      	sub	sp, #12
 80026de:	460d      	mov	r5, r1
 80026e0:	4604      	mov	r4, r0
    return HAL_SUCCESS;
  }

  cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 185, 1, 0);
 80026e2:	4613      	mov	r3, r2
 80026e4:	2201      	movs	r2, #1
 80026e6:	21b9      	movs	r1, #185	; 0xb9
 80026e8:	2003      	movs	r0, #3
 80026ea:	f7ff ffd1 	bl	8002690 <mmc_cmd6_construct>
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 80026ee:	ab01      	add	r3, sp, #4
 80026f0:	4602      	mov	r2, r0
 80026f2:	2106      	movs	r1, #6
 80026f4:	4620      	mov	r0, r4
 80026f6:	f004 f94b 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 80026fa:	b928      	cbnz	r0, 8002708 <mmc_detect_bus_clk+0x38>
                                   MMCSD_R1_ERROR(resp[0]))) {
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <mmc_detect_bus_clk+0x44>)
 80026fe:	9a01      	ldr	r2, [sp, #4]
 8002700:	4013      	ands	r3, r2
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8002702:	b90b      	cbnz	r3, 8002708 <mmc_detect_bus_clk+0x38>
    *clk = SDC_CLK_50MHz;
 8002704:	2301      	movs	r3, #1
 8002706:	702b      	strb	r3, [r5, #0]
  }

  return HAL_SUCCESS;
}
 8002708:	2000      	movs	r0, #0
 800270a:	b003      	add	sp, #12
 800270c:	bd30      	pop	{r4, r5, pc}
 800270e:	2000      	movs	r0, #0
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	fdffe008 	.word	0xfdffe008
 8002718:	f3af 8000 	nop.w
 800271c:	f3af 8000 	nop.w

08002720 <sdc_cmd6_construct>:
                                   uint32_t value) {
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	4605      	mov	r5, r0
 8002724:	460e      	mov	r6, r1
 8002726:	4614      	mov	r4, r2
  osalDbgAssert((value < 16U), "This field has only 4 bits");
 8002728:	2a0f      	cmp	r2, #15
 800272a:	d80a      	bhi.n	8002742 <sdc_cmd6_construct+0x22>
  ret &= ~((uint32_t)0xFU << ((uint32_t)function * 4U));
 800272c:	00b1      	lsls	r1, r6, #2
 800272e:	200f      	movs	r0, #15
 8002730:	4088      	lsls	r0, r1
 8002732:	43c0      	mvns	r0, r0
 8002734:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  ret |= value << ((uint32_t)function * 4U);
 8002738:	408c      	lsls	r4, r1
 800273a:	4320      	orrs	r0, r4
}
 800273c:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
 8002740:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert((value < 16U), "This field has only 4 bits");
 8002742:	4802      	ldr	r0, [pc, #8]	; (800274c <sdc_cmd6_construct+0x2c>)
 8002744:	f004 ff94 	bl	8007670 <chSysHalt>
 8002748:	e7f0      	b.n	800272c <sdc_cmd6_construct+0xc>
 800274a:	bf00      	nop
 800274c:	080148f0 	.word	0x080148f0

08002750 <sdcGetInfo>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdcGetInfo(SDCDriver *sdcp, BlockDeviceInfo *bdip) {
 8002750:	b538      	push	{r3, r4, r5, lr}
 8002752:	460c      	mov	r4, r1

  osalDbgCheck((sdcp != NULL) && (bdip != NULL));
 8002754:	4605      	mov	r5, r0
 8002756:	b128      	cbz	r0, 8002764 <sdcGetInfo+0x14>
 8002758:	b121      	cbz	r1, 8002764 <sdcGetInfo+0x14>

  if (sdcp->state != BLK_READY) {
 800275a:	792b      	ldrb	r3, [r5, #4]
 800275c:	2b05      	cmp	r3, #5
 800275e:	d005      	beq.n	800276c <sdcGetInfo+0x1c>
    return HAL_FAILED;
 8002760:	2001      	movs	r0, #1

  bdip->blk_num = sdcp->capacity;
  bdip->blk_size = MMCSD_BLOCK_SIZE;

  return HAL_SUCCESS;
}
 8002762:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((sdcp != NULL) && (bdip != NULL));
 8002764:	4805      	ldr	r0, [pc, #20]	; (800277c <sdcGetInfo+0x2c>)
 8002766:	f004 ff83 	bl	8007670 <chSysHalt>
 800276a:	e7f6      	b.n	800275a <sdcGetInfo+0xa>
  bdip->blk_num = sdcp->capacity;
 800276c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800276e:	6063      	str	r3, [r4, #4]
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 8002770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002774:	6023      	str	r3, [r4, #0]
  return HAL_SUCCESS;
 8002776:	2000      	movs	r0, #0
 8002778:	e7f3      	b.n	8002762 <sdcGetInfo+0x12>
 800277a:	bf00      	nop
 800277c:	08014904 	.word	0x08014904

08002780 <mode_detect>:
static bool mode_detect(SDCDriver *sdcp) {
 8002780:	b530      	push	{r4, r5, lr}
 8002782:	b083      	sub	sp, #12
 8002784:	4604      	mov	r4, r0
  if (!sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_IF_COND,
 8002786:	ab01      	add	r3, sp, #4
 8002788:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800278c:	2108      	movs	r1, #8
 800278e:	f004 f8ff 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8002792:	b9d0      	cbnz	r0, 80027ca <mode_detect+0x4a>
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
 8002794:	2301      	movs	r3, #1
 8002796:	6323      	str	r3, [r4, #48]	; 0x30
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
 8002798:	9b01      	ldr	r3, [sp, #4]
 800279a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d003      	beq.n	80027aa <mode_detect+0x2a>
      return HAL_FAILED;
 80027a2:	2501      	movs	r5, #1
}
 80027a4:	4628      	mov	r0, r5
 80027a6:	b003      	add	sp, #12
 80027a8:	bd30      	pop	{r4, r5, pc}
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80027aa:	ab01      	add	r3, sp, #4
 80027ac:	2200      	movs	r2, #0
 80027ae:	2137      	movs	r1, #55	; 0x37
 80027b0:	4620      	mov	r0, r4
 80027b2:	f004 f8ed 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 80027b6:	4605      	mov	r5, r0
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d1f3      	bne.n	80027a4 <mode_detect+0x24>
        MMCSD_R1_ERROR(resp[0])) {
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <mode_detect+0x78>)
 80027be:	9a01      	ldr	r2, [sp, #4]
 80027c0:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0ee      	beq.n	80027a4 <mode_detect+0x24>
      return HAL_FAILED;
 80027c6:	2501      	movs	r5, #1
 80027c8:	e7ec      	b.n	80027a4 <mode_detect+0x24>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80027ca:	ab01      	add	r3, sp, #4
 80027cc:	2200      	movs	r2, #0
 80027ce:	2137      	movs	r1, #55	; 0x37
 80027d0:	4620      	mov	r0, r4
 80027d2:	f004 f8dd 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 80027d6:	4605      	mov	r5, r0
 80027d8:	b918      	cbnz	r0, 80027e2 <mode_detect+0x62>
        MMCSD_R1_ERROR(resp[0])) {
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <mode_detect+0x78>)
 80027dc:	9a01      	ldr	r2, [sp, #4]
 80027de:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80027e0:	b11b      	cbz	r3, 80027ea <mode_detect+0x6a>
      sdcp->cardmode = SDC_MODE_CARDTYPE_MMC;
 80027e2:	2302      	movs	r3, #2
 80027e4:	6323      	str	r3, [r4, #48]	; 0x30
  return HAL_SUCCESS;
 80027e6:	2500      	movs	r5, #0
      sdcp->cardmode = SDC_MODE_CARDTYPE_MMC;
 80027e8:	e7dc      	b.n	80027a4 <mode_detect+0x24>
      sdcp->cardmode = SDC_MODE_CARDTYPE_SDV11;
 80027ea:	2100      	movs	r1, #0
 80027ec:	6321      	str	r1, [r4, #48]	; 0x30
      sdc_lld_send_cmd_none(sdcp, MMCSD_CMD_GO_IDLE_STATE, 0);
 80027ee:	460a      	mov	r2, r1
 80027f0:	4620      	mov	r0, r4
 80027f2:	f004 f89d 	bl	8006930 <sdc_lld_send_cmd_none>
 80027f6:	e7d5      	b.n	80027a4 <mode_detect+0x24>
 80027f8:	fdffe008 	.word	0xfdffe008
 80027fc:	f3af 8000 	nop.w

08002800 <mmc_init>:
static bool mmc_init(SDCDriver *sdcp) {
 8002800:	b530      	push	{r4, r5, lr}
 8002802:	b083      	sub	sp, #12
 8002804:	4605      	mov	r5, r0
  i = 0;
 8002806:	2400      	movs	r4, #0
    if (sdc_lld_send_cmd_short(sdcp, MMCSD_CMD_INIT, ocr, resp)) {
 8002808:	ab01      	add	r3, sp, #4
 800280a:	4a0f      	ldr	r2, [pc, #60]	; (8002848 <mmc_init+0x48>)
 800280c:	2101      	movs	r1, #1
 800280e:	4628      	mov	r0, r5
 8002810:	f004 f89e 	bl	8006950 <sdc_lld_send_cmd_short>
 8002814:	4602      	mov	r2, r0
 8002816:	b990      	cbnz	r0, 800283e <mmc_init+0x3e>
    if ((resp[0] & 0x80000000U) != 0U) {
 8002818:	9b01      	ldr	r3, [sp, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	db08      	blt.n	8002830 <mmc_init+0x30>
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 800281e:	3401      	adds	r4, #1
 8002820:	2c63      	cmp	r4, #99	; 0x63
 8002822:	d80f      	bhi.n	8002844 <mmc_init+0x44>
  chThdSleep(delay);
 8002824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002828:	2100      	movs	r1, #0
 800282a:	f006 f929 	bl	8008a80 <chThdSleep>
 800282e:	e7eb      	b.n	8002808 <mmc_init+0x8>
      if ((resp[0] & 0x40000000U) != 0U) {
 8002830:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8002834:	d003      	beq.n	800283e <mmc_init+0x3e>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 8002836:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002838:	f043 0310 	orr.w	r3, r3, #16
 800283c:	632b      	str	r3, [r5, #48]	; 0x30
}
 800283e:	4610      	mov	r0, r2
 8002840:	b003      	add	sp, #12
 8002842:	bd30      	pop	{r4, r5, pc}
      return HAL_FAILED;
 8002844:	2201      	movs	r2, #1
 8002846:	e7fa      	b.n	800283e <mmc_init+0x3e>
 8002848:	c0ff8000 	.word	0xc0ff8000
 800284c:	f3af 8000 	nop.w

08002850 <sdc_init>:
static bool sdc_init(SDCDriver *sdcp) {
 8002850:	b570      	push	{r4, r5, r6, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	4605      	mov	r5, r0
  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_SDV20) {
 8002856:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	2b01      	cmp	r3, #1
 800285e:	d021      	beq.n	80028a4 <sdc_init+0x54>
    ocr = SDC_INIT_OCR;
 8002860:	4e18      	ldr	r6, [pc, #96]	; (80028c4 <sdc_init+0x74>)
  i = 0;
 8002862:	2400      	movs	r4, #0
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002864:	ab01      	add	r3, sp, #4
 8002866:	2200      	movs	r2, #0
 8002868:	2137      	movs	r1, #55	; 0x37
 800286a:	4628      	mov	r0, r5
 800286c:	f004 f890 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8002870:	4603      	mov	r3, r0
 8002872:	bb10      	cbnz	r0, 80028ba <sdc_init+0x6a>
        MMCSD_R1_ERROR(resp[0])) {
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <sdc_init+0x78>)
 8002876:	9a01      	ldr	r2, [sp, #4]
 8002878:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 800287a:	b9eb      	cbnz	r3, 80028b8 <sdc_init+0x68>
    if (sdc_lld_send_cmd_short(sdcp, MMCSD_CMD_APP_OP_COND, ocr, resp)) {
 800287c:	ab01      	add	r3, sp, #4
 800287e:	4632      	mov	r2, r6
 8002880:	2129      	movs	r1, #41	; 0x29
 8002882:	4628      	mov	r0, r5
 8002884:	f004 f864 	bl	8006950 <sdc_lld_send_cmd_short>
 8002888:	4603      	mov	r3, r0
 800288a:	b9b0      	cbnz	r0, 80028ba <sdc_init+0x6a>
    if ((resp[0] & 0x80000000U) != 0U) {
 800288c:	9a01      	ldr	r2, [sp, #4]
 800288e:	2a00      	cmp	r2, #0
 8002890:	db0a      	blt.n	80028a8 <sdc_init+0x58>
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 8002892:	3401      	adds	r4, #1
 8002894:	2c63      	cmp	r4, #99	; 0x63
 8002896:	d813      	bhi.n	80028c0 <sdc_init+0x70>
 8002898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800289c:	2100      	movs	r1, #0
 800289e:	f006 f8ef 	bl	8008a80 <chThdSleep>
 80028a2:	e7df      	b.n	8002864 <sdc_init+0x14>
    ocr = SDC_INIT_OCR_V20;
 80028a4:	4e09      	ldr	r6, [pc, #36]	; (80028cc <sdc_init+0x7c>)
 80028a6:	e7dc      	b.n	8002862 <sdc_init+0x12>
      if ((resp[0] & 0x40000000U) != 0U) {
 80028a8:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
 80028ac:	d005      	beq.n	80028ba <sdc_init+0x6a>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 80028ae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80028b0:	f042 0210 	orr.w	r2, r2, #16
 80028b4:	632a      	str	r2, [r5, #48]	; 0x30
 80028b6:	e000      	b.n	80028ba <sdc_init+0x6a>
      return HAL_FAILED;
 80028b8:	2301      	movs	r3, #1
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	b002      	add	sp, #8
 80028be:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_FAILED;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e7fa      	b.n	80028ba <sdc_init+0x6a>
 80028c4:	80100000 	.word	0x80100000
 80028c8:	fdffe008 	.word	0xfdffe008
 80028cc:	50ff8000 	.word	0x50ff8000

080028d0 <sdc_detect_bus_clk>:
static bool sdc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 80028d0:	b570      	push	{r4, r5, r6, lr}
 80028d2:	b092      	sub	sp, #72	; 0x48
 80028d4:	4606      	mov	r6, r0
 80028d6:	460d      	mov	r5, r1
  *clk = SDC_CLK_25MHz;
 80028d8:	2300      	movs	r3, #0
 80028da:	700b      	strb	r3, [r1, #0]
  if (0U == _mmcsd_get_slice(sdcp->csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 80028dc:	227e      	movs	r2, #126	; 0x7e
 80028de:	217f      	movs	r1, #127	; 0x7f
 80028e0:	3018      	adds	r0, #24
 80028e2:	f7fe fdf5 	bl	80014d0 <_mmcsd_get_slice>
 80028e6:	b920      	cbnz	r0, 80028f2 <sdc_detect_bus_clk+0x22>
    *clk = SDC_CLK_25MHz;
 80028e8:	2400      	movs	r4, #0
 80028ea:	702c      	strb	r4, [r5, #0]
}
 80028ec:	4620      	mov	r0, r4
 80028ee:	b012      	add	sp, #72	; 0x48
 80028f0:	bd70      	pop	{r4, r5, r6, pc}
  if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, 0)) {
 80028f2:	2300      	movs	r3, #0
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2306      	movs	r3, #6
 80028f8:	2240      	movs	r2, #64	; 0x40
 80028fa:	a902      	add	r1, sp, #8
 80028fc:	4630      	mov	r0, r6
 80028fe:	f004 f987 	bl	8006c10 <sdc_lld_read_special>
 8002902:	4604      	mov	r4, r0
 8002904:	2800      	cmp	r0, #0
 8002906:	d1f1      	bne.n	80028ec <sdc_detect_bus_clk+0x1c>
  if ((sdc_cmd6_extract_info(SD_SWITCH_FUNCTION_SPEED, tmp) & 2U) == 2U) {
 8002908:	a902      	add	r1, sp, #8
 800290a:	f7ff fe99 	bl	8002640 <sdc_cmd6_extract_info>
 800290e:	f010 0f02 	tst.w	r0, #2
 8002912:	d0eb      	beq.n	80028ec <sdc_detect_bus_clk+0x1c>
    cmdarg = sdc_cmd6_construct(SD_SWITCH_SET, SD_SWITCH_FUNCTION_SPEED, 1);
 8002914:	2201      	movs	r2, #1
 8002916:	2100      	movs	r1, #0
 8002918:	4610      	mov	r0, r2
 800291a:	f7ff ff01 	bl	8002720 <sdc_cmd6_construct>
    if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, cmdarg)) {
 800291e:	9000      	str	r0, [sp, #0]
 8002920:	2306      	movs	r3, #6
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	a902      	add	r1, sp, #8
 8002926:	4630      	mov	r0, r6
 8002928:	f004 f972 	bl	8006c10 <sdc_lld_read_special>
 800292c:	4604      	mov	r4, r0
 800292e:	2800      	cmp	r0, #0
 8002930:	d1dc      	bne.n	80028ec <sdc_detect_bus_clk+0x1c>
    if (HAL_SUCCESS == sdc_cmd6_check_status(SD_SWITCH_FUNCTION_SPEED, tmp)) {
 8002932:	a902      	add	r1, sp, #8
 8002934:	f7ff fe94 	bl	8002660 <sdc_cmd6_check_status>
 8002938:	b110      	cbz	r0, 8002940 <sdc_detect_bus_clk+0x70>
      *clk = SDC_CLK_25MHz;
 800293a:	2300      	movs	r3, #0
 800293c:	702b      	strb	r3, [r5, #0]
 800293e:	e7d5      	b.n	80028ec <sdc_detect_bus_clk+0x1c>
      *clk = SDC_CLK_50MHz;
 8002940:	2201      	movs	r2, #1
 8002942:	702a      	strb	r2, [r5, #0]
  return HAL_SUCCESS;
 8002944:	4604      	mov	r4, r0
 8002946:	e7d1      	b.n	80028ec <sdc_detect_bus_clk+0x1c>
 8002948:	f3af 8000 	nop.w
 800294c:	f3af 8000 	nop.w

08002950 <detect_bus_clk>:
static bool detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 8002950:	b508      	push	{r3, lr}
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8002952:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	2b02      	cmp	r3, #2
 800295a:	d002      	beq.n	8002962 <detect_bus_clk+0x12>
  return sdc_detect_bus_clk(sdcp, clk);
 800295c:	f7ff ffb8 	bl	80028d0 <sdc_detect_bus_clk>
}
 8002960:	bd08      	pop	{r3, pc}
    return mmc_detect_bus_clk(sdcp, clk);
 8002962:	f7ff feb5 	bl	80026d0 <mmc_detect_bus_clk>
 8002966:	e7fb      	b.n	8002960 <detect_bus_clk+0x10>

08002968 <sdc_set_bus_width>:
  if (SDC_MODE_1BIT == sdcp->config->bus_width) {
 8002968:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800296a:	791b      	ldrb	r3, [r3, #4]
 800296c:	b31b      	cbz	r3, 80029b6 <sdc_set_bus_width+0x4e>
  else if (SDC_MODE_4BIT == sdcp->config->bus_width) {
 800296e:	2b01      	cmp	r3, #1
 8002970:	d124      	bne.n	80029bc <sdc_set_bus_width+0x54>
static bool sdc_set_bus_width(SDCDriver *sdcp) {
 8002972:	b510      	push	{r4, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	4604      	mov	r4, r0
    sdc_lld_set_bus_mode(sdcp, SDC_MODE_4BIT);
 8002978:	2101      	movs	r1, #1
 800297a:	f003 ffc1 	bl	8006900 <sdc_lld_set_bus_mode>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 800297e:	ab01      	add	r3, sp, #4
 8002980:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002982:	2137      	movs	r1, #55	; 0x37
 8002984:	4620      	mov	r0, r4
 8002986:	f004 f803 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 800298a:	4603      	mov	r3, r0
 800298c:	b980      	cbnz	r0, 80029b0 <sdc_set_bus_width+0x48>
        MMCSD_R1_ERROR(resp[0])) {
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <sdc_set_bus_width+0x5c>)
 8002990:	9a01      	ldr	r2, [sp, #4]
 8002992:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 8002994:	b9a3      	cbnz	r3, 80029c0 <sdc_set_bus_width+0x58>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 8002996:	ab01      	add	r3, sp, #4
 8002998:	2202      	movs	r2, #2
 800299a:	2106      	movs	r1, #6
 800299c:	4620      	mov	r0, r4
 800299e:	f003 fff7 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 80029a2:	4603      	mov	r3, r0
 80029a4:	b920      	cbnz	r0, 80029b0 <sdc_set_bus_width+0x48>
        MMCSD_R1_ERROR(resp[0])) {
 80029a6:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <sdc_set_bus_width+0x5c>)
 80029a8:	9901      	ldr	r1, [sp, #4]
 80029aa:	400a      	ands	r2, r1
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 80029ac:	b102      	cbz	r2, 80029b0 <sdc_set_bus_width+0x48>
      return HAL_FAILED;
 80029ae:	2301      	movs	r3, #1
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	b002      	add	sp, #8
 80029b4:	bd10      	pop	{r4, pc}
    return HAL_SUCCESS;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	4770      	bx	lr
    return HAL_FAILED;
 80029bc:	2301      	movs	r3, #1
 80029be:	e7fb      	b.n	80029b8 <sdc_set_bus_width+0x50>
      return HAL_FAILED;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e7f5      	b.n	80029b0 <sdc_set_bus_width+0x48>
 80029c4:	fdffe008 	.word	0xfdffe008

080029c8 <mmc_set_bus_width>:
static bool mmc_set_bus_width(SDCDriver *sdcp) {
 80029c8:	b530      	push	{r4, r5, lr}
 80029ca:	b083      	sub	sp, #12
 80029cc:	4604      	mov	r4, r0
  uint32_t cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 0, 0);
 80029ce:	2300      	movs	r3, #0
 80029d0:	461a      	mov	r2, r3
 80029d2:	21b7      	movs	r1, #183	; 0xb7
 80029d4:	2003      	movs	r0, #3
 80029d6:	f7ff fe5b 	bl	8002690 <mmc_cmd6_construct>
  switch (sdcp->config->bus_width) {
 80029da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029dc:	791b      	ldrb	r3, [r3, #4]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d007      	beq.n	80029f2 <mmc_set_bus_width+0x2a>
 80029e2:	4605      	mov	r5, r0
 80029e4:	b34b      	cbz	r3, 8002a3a <mmc_set_bus_width+0x72>
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d01f      	beq.n	8002a2a <mmc_set_bus_width+0x62>
    osalDbgAssert(false, "unexpected case");
 80029ea:	4815      	ldr	r0, [pc, #84]	; (8002a40 <mmc_set_bus_width+0x78>)
 80029ec:	f004 fe40 	bl	8007670 <chSysHalt>
    break;
 80029f0:	e006      	b.n	8002a00 <mmc_set_bus_width+0x38>
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 1, 0);
 80029f2:	2300      	movs	r3, #0
 80029f4:	2201      	movs	r2, #1
 80029f6:	21b7      	movs	r1, #183	; 0xb7
 80029f8:	2003      	movs	r0, #3
 80029fa:	f7ff fe49 	bl	8002690 <mmc_cmd6_construct>
 80029fe:	4605      	mov	r5, r0
  sdc_lld_set_bus_mode(sdcp, sdcp->config->bus_width);
 8002a00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a02:	7919      	ldrb	r1, [r3, #4]
 8002a04:	4620      	mov	r0, r4
 8002a06:	f003 ff7b 	bl	8006900 <sdc_lld_set_bus_mode>
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8002a0a:	ab01      	add	r3, sp, #4
 8002a0c:	462a      	mov	r2, r5
 8002a0e:	2106      	movs	r1, #6
 8002a10:	4620      	mov	r0, r4
 8002a12:	f003 ffbd 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8002a16:	4603      	mov	r3, r0
 8002a18:	b920      	cbnz	r0, 8002a24 <mmc_set_bus_width+0x5c>
      MMCSD_R1_ERROR(resp[0])) {
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <mmc_set_bus_width+0x7c>)
 8002a1c:	9901      	ldr	r1, [sp, #4]
 8002a1e:	400a      	ands	r2, r1
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8002a20:	b102      	cbz	r2, 8002a24 <mmc_set_bus_width+0x5c>
    return HAL_FAILED;
 8002a22:	2301      	movs	r3, #1
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	b003      	add	sp, #12
 8002a28:	bd30      	pop	{r4, r5, pc}
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 2, 0);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	21b7      	movs	r1, #183	; 0xb7
 8002a30:	2003      	movs	r0, #3
 8002a32:	f7ff fe2d 	bl	8002690 <mmc_cmd6_construct>
 8002a36:	4605      	mov	r5, r0
    break;
 8002a38:	e7e2      	b.n	8002a00 <mmc_set_bus_width+0x38>
    return HAL_SUCCESS;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e7f2      	b.n	8002a24 <mmc_set_bus_width+0x5c>
 8002a3e:	bf00      	nop
 8002a40:	08014910 	.word	0x08014910
 8002a44:	fdffe008 	.word	0xfdffe008
 8002a48:	f3af 8000 	nop.w
 8002a4c:	f3af 8000 	nop.w

08002a50 <sdcConnect>:
bool sdcConnect(SDCDriver *sdcp) {
 8002a50:	b530      	push	{r4, r5, lr}
 8002a52:	b085      	sub	sp, #20
  sdcbusclk_t clk = SDC_CLK_25MHz;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f88d 300b 	strb.w	r3, [sp, #11]
  osalDbgCheck(sdcp != NULL);
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	b360      	cbz	r0, 8002ab8 <sdcConnect+0x68>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 8002a5e:	7923      	ldrb	r3, [r4, #4]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d001      	beq.n	8002a68 <sdcConnect+0x18>
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d12b      	bne.n	8002ac0 <sdcConnect+0x70>
  sdcp->state = BLK_CONNECTING;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	7123      	strb	r3, [r4, #4]
  sdc_lld_start_clk(sdcp);
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f003 ff1f 	bl	80068b0 <sdc_lld_start_clk>
  sdc_lld_send_cmd_none(sdcp, MMCSD_CMD_GO_IDLE_STATE, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	4611      	mov	r1, r2
 8002a76:	4620      	mov	r0, r4
 8002a78:	f003 ff5a 	bl	8006930 <sdc_lld_send_cmd_none>
  if (HAL_FAILED == mode_detect(sdcp)) {
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f7ff fe7f 	bl	8002780 <mode_detect>
 8002a82:	b980      	cbnz	r0, 8002aa6 <sdcConnect+0x56>
  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_MMC) {
 8002a84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d01c      	beq.n	8002ac8 <sdcConnect+0x78>
    if (HAL_FAILED == sdc_init(sdcp)) {
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7ff fede 	bl	8002850 <sdc_init>
 8002a94:	b938      	cbnz	r0, 8002aa6 <sdcConnect+0x56>
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_ALL_SEND_CID, 0, sdcp->cid)) {
 8002a96:	f104 0308 	add.w	r3, r4, #8
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f004 f88e 	bl	8006bc0 <sdc_lld_send_cmd_long_crc>
 8002aa4:	b1b0      	cbz	r0, 8002ad4 <sdcConnect+0x84>
  sdc_lld_stop_clk(sdcp);
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f003 ff22 	bl	80068f0 <sdc_lld_stop_clk>
  sdcp->state = BLK_ACTIVE;
 8002aac:	2302      	movs	r3, #2
 8002aae:	7123      	strb	r3, [r4, #4]
  return HAL_FAILED;
 8002ab0:	2501      	movs	r5, #1
}
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	b005      	add	sp, #20
 8002ab6:	bd30      	pop	{r4, r5, pc}
  osalDbgCheck(sdcp != NULL);
 8002ab8:	4841      	ldr	r0, [pc, #260]	; (8002bc0 <sdcConnect+0x170>)
 8002aba:	f004 fdd9 	bl	8007670 <chSysHalt>
 8002abe:	e7ce      	b.n	8002a5e <sdcConnect+0xe>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 8002ac0:	483f      	ldr	r0, [pc, #252]	; (8002bc0 <sdcConnect+0x170>)
 8002ac2:	f004 fdd5 	bl	8007670 <chSysHalt>
 8002ac6:	e7cf      	b.n	8002a68 <sdcConnect+0x18>
    if (HAL_FAILED == mmc_init(sdcp)) {
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f7ff fe99 	bl	8002800 <mmc_init>
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	d1e9      	bne.n	8002aa6 <sdcConnect+0x56>
 8002ad2:	e7e0      	b.n	8002a96 <sdcConnect+0x46>
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_RELATIVE_ADDR,
 8002ad4:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2103      	movs	r1, #3
 8002adc:	4620      	mov	r0, r4
 8002ade:	f003 ff57 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	d1df      	bne.n	8002aa6 <sdcConnect+0x56>
                                sdcp->rca, sdcp->csd)) {
 8002ae6:	f104 0518 	add.w	r5, r4, #24
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_SEND_CSD,
 8002aea:	462b      	mov	r3, r5
 8002aec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002aee:	2109      	movs	r1, #9
 8002af0:	4620      	mov	r0, r4
 8002af2:	f004 f865 	bl	8006bc0 <sdc_lld_send_cmd_long_crc>
 8002af6:	2800      	cmp	r0, #0
 8002af8:	d1d5      	bne.n	8002aa6 <sdcConnect+0x56>
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEL_DESEL_CARD,
 8002afa:	ab03      	add	r3, sp, #12
 8002afc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002afe:	2107      	movs	r1, #7
 8002b00:	4620      	mov	r0, r4
 8002b02:	f003 ff45 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d1cd      	bne.n	8002aa6 <sdcConnect+0x56>
  if (HAL_SUCCESS != detect_bus_clk(sdcp, &clk)) {
 8002b0a:	f10d 010b 	add.w	r1, sp, #11
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f7ff ff1e 	bl	8002950 <detect_bus_clk>
 8002b14:	2800      	cmp	r0, #0
 8002b16:	d1c6      	bne.n	8002aa6 <sdcConnect+0x56>
  sdc_lld_set_data_clk(sdcp, clk);
 8002b18:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f003 fedf 	bl	80068e0 <sdc_lld_set_data_clk>
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8002b22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d01f      	beq.n	8002b6c <sdcConnect+0x11c>
    sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	f7fe fcff 	bl	8001530 <_mmcsd_get_capacity>
 8002b32:	62a0      	str	r0, [r4, #40]	; 0x28
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BLOCKLEN,
 8002b34:	ab03      	add	r3, sp, #12
 8002b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b3a:	2110      	movs	r1, #16
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f003 ff27 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8002b42:	4605      	mov	r5, r0
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d1ae      	bne.n	8002aa6 <sdcConnect+0x56>
      MMCSD_R1_ERROR(resp[0])) {
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <sdcConnect+0x174>)
 8002b4a:	9a03      	ldr	r2, [sp, #12]
 8002b4c:	4013      	ands	r3, r2
                                 MMCSD_BLOCK_SIZE, resp) ||
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1a9      	bne.n	8002aa6 <sdcConnect+0x56>
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
 8002b52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d927      	bls.n	8002bac <sdcConnect+0x15c>
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d1a2      	bne.n	8002aa6 <sdcConnect+0x56>
    if (HAL_FAILED == mmc_set_bus_width(sdcp)) {
 8002b60:	4620      	mov	r0, r4
 8002b62:	f7ff ff31 	bl	80029c8 <mmc_set_bus_width>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d19d      	bne.n	8002aa6 <sdcConnect+0x56>
 8002b6a:	e025      	b.n	8002bb8 <sdcConnect+0x168>
    if (_mmcsd_get_slice(sdcp->csd, MMCSD_CSD_MMC_CSD_STRUCTURE_SLICE) > 1U) {
 8002b6c:	227e      	movs	r2, #126	; 0x7e
 8002b6e:	217f      	movs	r1, #127	; 0x7f
 8002b70:	4628      	mov	r0, r5
 8002b72:	f7fe fcad 	bl	80014d0 <_mmcsd_get_slice>
 8002b76:	2801      	cmp	r0, #1
 8002b78:	d913      	bls.n	8002ba2 <sdcConnect+0x152>
      uint8_t *ext_csd = sdcp->config->scratchpad;
 8002b7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b7c:	681d      	ldr	r5, [r3, #0]
      if (NULL == ext_csd) {
 8002b7e:	2d00      	cmp	r5, #0
 8002b80:	d091      	beq.n	8002aa6 <sdcConnect+0x56>
      if(sdc_lld_read_special(sdcp, ext_csd, 512, MMCSD_CMD_SEND_EXT_CSD, 0)) {
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2308      	movs	r3, #8
 8002b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f004 f83e 	bl	8006c10 <sdc_lld_read_special>
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d186      	bne.n	8002aa6 <sdcConnect+0x56>
      sdcp->capacity = _mmcsd_get_capacity_ext(ext_csd);
 8002b98:	4628      	mov	r0, r5
 8002b9a:	f7fe fd01 	bl	80015a0 <_mmcsd_get_capacity_ext>
 8002b9e:	62a0      	str	r0, [r4, #40]	; 0x28
 8002ba0:	e7c8      	b.n	8002b34 <sdcConnect+0xe4>
      sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f7fe fcc4 	bl	8001530 <_mmcsd_get_capacity>
 8002ba8:	62a0      	str	r0, [r4, #40]	; 0x28
 8002baa:	e7c3      	b.n	8002b34 <sdcConnect+0xe4>
    if (HAL_FAILED == sdc_set_bus_width(sdcp)) {
 8002bac:	4620      	mov	r0, r4
 8002bae:	f7ff fedb 	bl	8002968 <sdc_set_bus_width>
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	f47f af77 	bne.w	8002aa6 <sdcConnect+0x56>
  sdcp->state = BLK_READY;
 8002bb8:	2305      	movs	r3, #5
 8002bba:	7123      	strb	r3, [r4, #4]
  return HAL_SUCCESS;
 8002bbc:	e779      	b.n	8002ab2 <sdcConnect+0x62>
 8002bbe:	bf00      	nop
 8002bc0:	08014924 	.word	0x08014924
 8002bc4:	fdffe008 	.word	0xfdffe008
 8002bc8:	f3af 8000 	nop.w
 8002bcc:	f3af 8000 	nop.w

08002bd0 <sdcRead>:
bool sdcRead(SDCDriver *sdcp, uint32_t startblk, uint8_t *buf, uint32_t n) {
 8002bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd2:	460e      	mov	r6, r1
 8002bd4:	4617      	mov	r7, r2
 8002bd6:	461d      	mov	r5, r3
  osalDbgCheck((sdcp != NULL) && (buf != NULL) && (n > 0U));
 8002bd8:	4604      	mov	r4, r0
 8002bda:	b108      	cbz	r0, 8002be0 <sdcRead+0x10>
 8002bdc:	b102      	cbz	r2, 8002be0 <sdcRead+0x10>
 8002bde:	b913      	cbnz	r3, 8002be6 <sdcRead+0x16>
 8002be0:	480f      	ldr	r0, [pc, #60]	; (8002c20 <sdcRead+0x50>)
 8002be2:	f004 fd45 	bl	8007670 <chSysHalt>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002be6:	7923      	ldrb	r3, [r4, #4]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d10a      	bne.n	8002c02 <sdcRead+0x32>
  if ((startblk + n - 1U) > sdcp->capacity) {
 8002bec:	19ab      	adds	r3, r5, r6
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d909      	bls.n	8002c0a <sdcRead+0x3a>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8002bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfc:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_FAILED;
 8002bfe:	2001      	movs	r0, #1
}
 8002c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002c02:	4807      	ldr	r0, [pc, #28]	; (8002c20 <sdcRead+0x50>)
 8002c04:	f004 fd34 	bl	8007670 <chSysHalt>
 8002c08:	e7f0      	b.n	8002bec <sdcRead+0x1c>
  sdcp->state = BLK_READING;
 8002c0a:	2306      	movs	r3, #6
 8002c0c:	7123      	strb	r3, [r4, #4]
  status = sdc_lld_read(sdcp, startblk, buf, n);
 8002c0e:	462b      	mov	r3, r5
 8002c10:	463a      	mov	r2, r7
 8002c12:	4631      	mov	r1, r6
 8002c14:	4620      	mov	r0, r4
 8002c16:	f004 f8d3 	bl	8006dc0 <sdc_lld_read>
  sdcp->state = BLK_READY;
 8002c1a:	2305      	movs	r3, #5
 8002c1c:	7123      	strb	r3, [r4, #4]
  return status;
 8002c1e:	e7ef      	b.n	8002c00 <sdcRead+0x30>
 8002c20:	08014930 	.word	0x08014930
 8002c24:	f3af 8000 	nop.w
 8002c28:	f3af 8000 	nop.w
 8002c2c:	f3af 8000 	nop.w

08002c30 <sdcWrite>:
              const uint8_t *buf, uint32_t n) {
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	460e      	mov	r6, r1
 8002c34:	4617      	mov	r7, r2
 8002c36:	461d      	mov	r5, r3
  osalDbgCheck((sdcp != NULL) && (buf != NULL) && (n > 0U));
 8002c38:	4604      	mov	r4, r0
 8002c3a:	b108      	cbz	r0, 8002c40 <sdcWrite+0x10>
 8002c3c:	b102      	cbz	r2, 8002c40 <sdcWrite+0x10>
 8002c3e:	b913      	cbnz	r3, 8002c46 <sdcWrite+0x16>
 8002c40:	480f      	ldr	r0, [pc, #60]	; (8002c80 <sdcWrite+0x50>)
 8002c42:	f004 fd15 	bl	8007670 <chSysHalt>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002c46:	7923      	ldrb	r3, [r4, #4]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d10a      	bne.n	8002c62 <sdcWrite+0x32>
  if ((startblk + n - 1U) > sdcp->capacity) {
 8002c4c:	19ab      	adds	r3, r5, r6
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d909      	bls.n	8002c6a <sdcWrite+0x3a>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8002c56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5c:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_FAILED;
 8002c5e:	2001      	movs	r0, #1
}
 8002c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002c62:	4807      	ldr	r0, [pc, #28]	; (8002c80 <sdcWrite+0x50>)
 8002c64:	f004 fd04 	bl	8007670 <chSysHalt>
 8002c68:	e7f0      	b.n	8002c4c <sdcWrite+0x1c>
  sdcp->state = BLK_WRITING;
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	7123      	strb	r3, [r4, #4]
  status = sdc_lld_write(sdcp, startblk, buf, n);
 8002c6e:	462b      	mov	r3, r5
 8002c70:	463a      	mov	r2, r7
 8002c72:	4631      	mov	r1, r6
 8002c74:	4620      	mov	r0, r4
 8002c76:	f004 f8d3 	bl	8006e20 <sdc_lld_write>
  sdcp->state = BLK_READY;
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	7123      	strb	r3, [r4, #4]
  return status;
 8002c7e:	e7ef      	b.n	8002c60 <sdcWrite+0x30>
 8002c80:	08014938 	.word	0x08014938
 8002c84:	f3af 8000 	nop.w
 8002c88:	f3af 8000 	nop.w
 8002c8c:	f3af 8000 	nop.w

08002c90 <sdcSync>:
bool sdcSync(SDCDriver *sdcp) {
 8002c90:	b510      	push	{r4, lr}
  osalDbgCheck(sdcp != NULL);
 8002c92:	4604      	mov	r4, r0
 8002c94:	b120      	cbz	r0, 8002ca0 <sdcSync+0x10>
  if (sdcp->state != BLK_READY) {
 8002c96:	7923      	ldrb	r3, [r4, #4]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d005      	beq.n	8002ca8 <sdcSync+0x18>
    return HAL_FAILED;
 8002c9c:	2001      	movs	r0, #1
}
 8002c9e:	bd10      	pop	{r4, pc}
  osalDbgCheck(sdcp != NULL);
 8002ca0:	4805      	ldr	r0, [pc, #20]	; (8002cb8 <sdcSync+0x28>)
 8002ca2:	f004 fce5 	bl	8007670 <chSysHalt>
 8002ca6:	e7f6      	b.n	8002c96 <sdcSync+0x6>
  sdcp->state = BLK_SYNCING;
 8002ca8:	2308      	movs	r3, #8
 8002caa:	7123      	strb	r3, [r4, #4]
  result = sdc_lld_sync(sdcp);
 8002cac:	4620      	mov	r0, r4
 8002cae:	f004 f8e7 	bl	8006e80 <sdc_lld_sync>
  sdcp->state = BLK_READY;
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	7123      	strb	r3, [r4, #4]
  return result;
 8002cb6:	e7f2      	b.n	8002c9e <sdcSync+0xe>
 8002cb8:	08014944 	.word	0x08014944
 8002cbc:	f3af 8000 	nop.w

08002cc0 <_sdc_wait_for_transfer_state>:
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	4604      	mov	r4, r0
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
 8002cc6:	ab01      	add	r3, sp, #4
 8002cc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002cca:	210d      	movs	r1, #13
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f003 fe5f 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8002cd2:	4601      	mov	r1, r0
 8002cd4:	b990      	cbnz	r0, 8002cfc <_sdc_wait_for_transfer_state+0x3c>
        MMCSD_R1_ERROR(resp[0])) {
 8002cd6:	9b01      	ldr	r3, [sp, #4]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <_sdc_wait_for_transfer_state+0x44>)
 8002cda:	401a      	ands	r2, r3
                                   sdcp->rca, resp) ||
 8002cdc:	b95a      	cbnz	r2, 8002cf6 <_sdc_wait_for_transfer_state+0x36>
    switch (MMCSD_R1_STS(resp[0])) {
 8002cde:	f3c3 2343 	ubfx	r3, r3, #9, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d00a      	beq.n	8002cfc <_sdc_wait_for_transfer_state+0x3c>
 8002ce6:	d308      	bcc.n	8002cfa <_sdc_wait_for_transfer_state+0x3a>
 8002ce8:	2b07      	cmp	r3, #7
 8002cea:	d806      	bhi.n	8002cfa <_sdc_wait_for_transfer_state+0x3a>
 8002cec:	2064      	movs	r0, #100	; 0x64
 8002cee:	2100      	movs	r1, #0
 8002cf0:	f005 fec6 	bl	8008a80 <chThdSleep>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
 8002cf4:	e7e7      	b.n	8002cc6 <_sdc_wait_for_transfer_state+0x6>
      return HAL_FAILED;
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	e000      	b.n	8002cfc <_sdc_wait_for_transfer_state+0x3c>
      return HAL_FAILED;
 8002cfa:	2101      	movs	r1, #1
}
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	b002      	add	sp, #8
 8002d00:	bd10      	pop	{r4, pc}
 8002d02:	bf00      	nop
 8002d04:	fdffe008 	.word	0xfdffe008
 8002d08:	f3af 8000 	nop.w
 8002d0c:	f3af 8000 	nop.w

08002d10 <sdcDisconnect>:
bool sdcDisconnect(SDCDriver *sdcp) {
 8002d10:	b538      	push	{r3, r4, r5, lr}
  osalDbgCheck(sdcp != NULL);
 8002d12:	4604      	mov	r4, r0
 8002d14:	b360      	cbz	r0, 8002d70 <sdcDisconnect+0x60>
 8002d16:	2320      	movs	r3, #32
 8002d18:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002d1c:	f006 f938 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002d20:	f004 fe36 	bl	8007990 <_dbg_check_lock>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 8002d24:	7923      	ldrb	r3, [r4, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d001      	beq.n	8002d2e <sdcDisconnect+0x1e>
 8002d2a:	2b05      	cmp	r3, #5
 8002d2c:	d124      	bne.n	8002d78 <sdcDisconnect+0x68>
  if (sdcp->state == BLK_ACTIVE) {
 8002d2e:	7923      	ldrb	r3, [r4, #4]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d025      	beq.n	8002d80 <sdcDisconnect+0x70>
  sdcp->state = BLK_DISCONNECTING;
 8002d34:	2304      	movs	r3, #4
 8002d36:	7123      	strb	r3, [r4, #4]
  _dbg_check_unlock();
 8002d38:	f004 fe42 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002d3c:	f006 f930 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <sdcDisconnect+0xb0>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d004      	beq.n	8002d52 <sdcDisconnect+0x42>
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	6893      	ldr	r3, [r2, #8]
 8002d4e:	4299      	cmp	r1, r3
 8002d50:	d32b      	bcc.n	8002daa <sdcDisconnect+0x9a>
 8002d52:	2300      	movs	r3, #0
 8002d54:	f383 8811 	msr	BASEPRI, r3
  if (_sdc_wait_for_transfer_state(sdcp)) {
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff ffb1 	bl	8002cc0 <_sdc_wait_for_transfer_state>
 8002d5e:	4605      	mov	r5, r0
 8002d60:	bb38      	cbnz	r0, 8002db2 <sdcDisconnect+0xa2>
  sdc_lld_stop_clk(sdcp);
 8002d62:	4620      	mov	r0, r4
 8002d64:	f003 fdc4 	bl	80068f0 <sdc_lld_stop_clk>
  sdcp->state = BLK_ACTIVE;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	7123      	strb	r3, [r4, #4]
}
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(sdcp != NULL);
 8002d70:	4814      	ldr	r0, [pc, #80]	; (8002dc4 <sdcDisconnect+0xb4>)
 8002d72:	f004 fc7d 	bl	8007670 <chSysHalt>
 8002d76:	e7ce      	b.n	8002d16 <sdcDisconnect+0x6>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 8002d78:	4812      	ldr	r0, [pc, #72]	; (8002dc4 <sdcDisconnect+0xb4>)
 8002d7a:	f004 fc79 	bl	8007670 <chSysHalt>
 8002d7e:	e7d6      	b.n	8002d2e <sdcDisconnect+0x1e>
  _dbg_check_unlock();
 8002d80:	f004 fe1e 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002d84:	f006 f90c 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002d88:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <sdcDisconnect+0xb0>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d004      	beq.n	8002d9a <sdcDisconnect+0x8a>
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	6899      	ldr	r1, [r3, #8]
 8002d94:	6893      	ldr	r3, [r2, #8]
 8002d96:	4299      	cmp	r1, r3
 8002d98:	d303      	bcc.n	8002da2 <sdcDisconnect+0x92>
 8002d9a:	2500      	movs	r5, #0
 8002d9c:	f385 8811 	msr	BASEPRI, r5
 8002da0:	e7e4      	b.n	8002d6c <sdcDisconnect+0x5c>
 8002da2:	4809      	ldr	r0, [pc, #36]	; (8002dc8 <sdcDisconnect+0xb8>)
 8002da4:	f004 fc64 	bl	8007670 <chSysHalt>
 8002da8:	e7f7      	b.n	8002d9a <sdcDisconnect+0x8a>
 8002daa:	4807      	ldr	r0, [pc, #28]	; (8002dc8 <sdcDisconnect+0xb8>)
 8002dac:	f004 fc60 	bl	8007670 <chSysHalt>
 8002db0:	e7cf      	b.n	8002d52 <sdcDisconnect+0x42>
    sdc_lld_stop_clk(sdcp);
 8002db2:	4620      	mov	r0, r4
 8002db4:	f003 fd9c 	bl	80068f0 <sdc_lld_stop_clk>
    sdcp->state = BLK_ACTIVE;
 8002db8:	2302      	movs	r3, #2
 8002dba:	7123      	strb	r3, [r4, #4]
    return HAL_FAILED;
 8002dbc:	e7d6      	b.n	8002d6c <sdcDisconnect+0x5c>
 8002dbe:	bf00      	nop
 8002dc0:	20004f68 	.word	0x20004f68
 8002dc4:	0801494c 	.word	0x0801494c
 8002dc8:	0801495c 	.word	0x0801495c
 8002dcc:	f3af 8000 	nop.w

08002dd0 <sdcInit>:
void sdcInit(void) {
 8002dd0:	b508      	push	{r3, lr}
  sdc_lld_init();
 8002dd2:	f003 fcf5 	bl	80067c0 <sdc_lld_init>
}
 8002dd6:	bd08      	pop	{r3, pc}
 8002dd8:	f3af 8000 	nop.w
 8002ddc:	f3af 8000 	nop.w

08002de0 <sdcObjectInit>:
  sdcp->vmt      = &sdc_vmt;
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <sdcObjectInit+0x14>)
 8002de2:	6003      	str	r3, [r0, #0]
  sdcp->state    = BLK_STOP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	7103      	strb	r3, [r0, #4]
  sdcp->errors   = SDC_NO_ERROR;
 8002de8:	2300      	movs	r3, #0
 8002dea:	6343      	str	r3, [r0, #52]	; 0x34
  sdcp->config   = NULL;
 8002dec:	62c3      	str	r3, [r0, #44]	; 0x2c
  sdcp->capacity = 0;
 8002dee:	6283      	str	r3, [r0, #40]	; 0x28
}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	08014968 	.word	0x08014968
 8002df8:	f3af 8000 	nop.w
 8002dfc:	f3af 8000 	nop.w

08002e00 <sdcStart>:
void sdcStart(SDCDriver *sdcp, const SDCConfig *config) {
 8002e00:	b538      	push	{r3, r4, r5, lr}
 8002e02:	460d      	mov	r5, r1
  osalDbgCheck(sdcp != NULL);
 8002e04:	4604      	mov	r4, r0
 8002e06:	b328      	cbz	r0, 8002e54 <sdcStart+0x54>
 8002e08:	2320      	movs	r3, #32
 8002e0a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002e0e:	f006 f8bf 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002e12:	f004 fdbd 	bl	8007990 <_dbg_check_lock>
  osalDbgAssert((sdcp->state == BLK_STOP) || (sdcp->state == BLK_ACTIVE),
 8002e16:	7923      	ldrb	r3, [r4, #4]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d902      	bls.n	8002e26 <sdcStart+0x26>
 8002e20:	4810      	ldr	r0, [pc, #64]	; (8002e64 <sdcStart+0x64>)
 8002e22:	f004 fc25 	bl	8007670 <chSysHalt>
  sdcp->config = config;
 8002e26:	62e5      	str	r5, [r4, #44]	; 0x2c
  sdc_lld_start(sdcp);
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f003 fce1 	bl	80067f0 <sdc_lld_start>
  sdcp->state = BLK_ACTIVE;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	7123      	strb	r3, [r4, #4]
  _dbg_check_unlock();
 8002e32:	f004 fdc5 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002e36:	f006 f8b3 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <sdcStart+0x68>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d004      	beq.n	8002e4c <sdcStart+0x4c>
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	6899      	ldr	r1, [r3, #8]
 8002e46:	6893      	ldr	r3, [r2, #8]
 8002e48:	4299      	cmp	r1, r3
 8002e4a:	d307      	bcc.n	8002e5c <sdcStart+0x5c>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f383 8811 	msr	BASEPRI, r3
}
 8002e52:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(sdcp != NULL);
 8002e54:	4803      	ldr	r0, [pc, #12]	; (8002e64 <sdcStart+0x64>)
 8002e56:	f004 fc0b 	bl	8007670 <chSysHalt>
 8002e5a:	e7d5      	b.n	8002e08 <sdcStart+0x8>
 8002e5c:	4803      	ldr	r0, [pc, #12]	; (8002e6c <sdcStart+0x6c>)
 8002e5e:	f004 fc07 	bl	8007670 <chSysHalt>
 8002e62:	e7f3      	b.n	8002e4c <sdcStart+0x4c>
 8002e64:	0801498c 	.word	0x0801498c
 8002e68:	20004f68 	.word	0x20004f68
 8002e6c:	0801495c 	.word	0x0801495c

08002e70 <sdcStop>:
void sdcStop(SDCDriver *sdcp) {
 8002e70:	b510      	push	{r4, lr}
  osalDbgCheck(sdcp != NULL);
 8002e72:	4604      	mov	r4, r0
 8002e74:	b330      	cbz	r0, 8002ec4 <sdcStop+0x54>
 8002e76:	2320      	movs	r3, #32
 8002e78:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002e7c:	f006 f888 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002e80:	f004 fd86 	bl	8007990 <_dbg_check_lock>
  osalDbgAssert((sdcp->state == BLK_STOP) || (sdcp->state == BLK_ACTIVE),
 8002e84:	7923      	ldrb	r3, [r4, #4]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d902      	bls.n	8002e94 <sdcStop+0x24>
 8002e8e:	4811      	ldr	r0, [pc, #68]	; (8002ed4 <sdcStop+0x64>)
 8002e90:	f004 fbee 	bl	8007670 <chSysHalt>
  sdc_lld_stop(sdcp);
 8002e94:	4620      	mov	r0, r4
 8002e96:	f003 fceb 	bl	8006870 <sdc_lld_stop>
  sdcp->config = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
  sdcp->state  = BLK_STOP;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	7123      	strb	r3, [r4, #4]
  _dbg_check_unlock();
 8002ea2:	f004 fd8d 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002ea6:	f006 f87b 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <sdcStop+0x68>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d004      	beq.n	8002ebc <sdcStop+0x4c>
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	6893      	ldr	r3, [r2, #8]
 8002eb8:	4299      	cmp	r1, r3
 8002eba:	d307      	bcc.n	8002ecc <sdcStop+0x5c>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f383 8811 	msr	BASEPRI, r3
}
 8002ec2:	bd10      	pop	{r4, pc}
  osalDbgCheck(sdcp != NULL);
 8002ec4:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <sdcStop+0x64>)
 8002ec6:	f004 fbd3 	bl	8007670 <chSysHalt>
 8002eca:	e7d4      	b.n	8002e76 <sdcStop+0x6>
 8002ecc:	4803      	ldr	r0, [pc, #12]	; (8002edc <sdcStop+0x6c>)
 8002ece:	f004 fbcf 	bl	8007670 <chSysHalt>
 8002ed2:	e7f3      	b.n	8002ebc <sdcStop+0x4c>
 8002ed4:	08014998 	.word	0x08014998
 8002ed8:	20004f68 	.word	0x20004f68
 8002edc:	0801495c 	.word	0x0801495c

08002ee0 <sdcGetAndClearErrors>:
sdcflags_t sdcGetAndClearErrors(SDCDriver *sdcp) {
 8002ee0:	b538      	push	{r3, r4, r5, lr}
  osalDbgCheck(sdcp != NULL);
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	b308      	cbz	r0, 8002f2a <sdcGetAndClearErrors+0x4a>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002ee6:	7923      	ldrb	r3, [r4, #4]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d002      	beq.n	8002ef2 <sdcGetAndClearErrors+0x12>
 8002eec:	4813      	ldr	r0, [pc, #76]	; (8002f3c <sdcGetAndClearErrors+0x5c>)
 8002eee:	f004 fbbf 	bl	8007670 <chSysHalt>
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002ef8:	f006 f84a 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002efc:	f004 fd48 	bl	8007990 <_dbg_check_lock>
  flags = sdcp->errors;
 8002f00:	6b65      	ldr	r5, [r4, #52]	; 0x34
  sdcp->errors = SDC_NO_ERROR;
 8002f02:	2300      	movs	r3, #0
 8002f04:	6363      	str	r3, [r4, #52]	; 0x34
  _dbg_check_unlock();
 8002f06:	f004 fd5b 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002f0a:	f006 f849 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <sdcGetAndClearErrors+0x60>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d004      	beq.n	8002f20 <sdcGetAndClearErrors+0x40>
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	6899      	ldr	r1, [r3, #8]
 8002f1a:	6893      	ldr	r3, [r2, #8]
 8002f1c:	4299      	cmp	r1, r3
 8002f1e:	d308      	bcc.n	8002f32 <sdcGetAndClearErrors+0x52>
 8002f20:	2300      	movs	r3, #0
 8002f22:	f383 8811 	msr	BASEPRI, r3
}
 8002f26:	4628      	mov	r0, r5
 8002f28:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(sdcp != NULL);
 8002f2a:	4804      	ldr	r0, [pc, #16]	; (8002f3c <sdcGetAndClearErrors+0x5c>)
 8002f2c:	f004 fba0 	bl	8007670 <chSysHalt>
 8002f30:	e7d9      	b.n	8002ee6 <sdcGetAndClearErrors+0x6>
 8002f32:	4804      	ldr	r0, [pc, #16]	; (8002f44 <sdcGetAndClearErrors+0x64>)
 8002f34:	f004 fb9c 	bl	8007670 <chSysHalt>
 8002f38:	e7f2      	b.n	8002f20 <sdcGetAndClearErrors+0x40>
 8002f3a:	bf00      	nop
 8002f3c:	080149a0 	.word	0x080149a0
 8002f40:	20004f68 	.word	0x20004f68
 8002f44:	0801495c 	.word	0x0801495c
 8002f48:	f3af 8000 	nop.w
 8002f4c:	f3af 8000 	nop.w

08002f50 <sdcErase>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdcErase(SDCDriver *sdcp, uint32_t startblk, uint32_t endblk) {
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	460d      	mov	r5, r1
 8002f56:	4616      	mov	r6, r2
  uint32_t resp[1];

  osalDbgCheck((sdcp != NULL));
 8002f58:	4604      	mov	r4, r0
 8002f5a:	b1a0      	cbz	r0, 8002f86 <sdcErase+0x36>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002f5c:	7923      	ldrb	r3, [r4, #4]
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d115      	bne.n	8002f8e <sdcErase+0x3e>

  /* Erase operation in progress.*/
  sdcp->state = BLK_WRITING;
 8002f62:	2307      	movs	r3, #7
 8002f64:	7123      	strb	r3, [r4, #4]

  /* Handling command differences between HC and normal cards.*/
  if ((sdcp->cardmode & SDC_MODE_HIGH_CAPACITY) != 0U) {
 8002f66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f68:	f013 0f10 	tst.w	r3, #16
 8002f6c:	d001      	beq.n	8002f72 <sdcErase+0x22>
    startblk *= MMCSD_BLOCK_SIZE;
 8002f6e:	026d      	lsls	r5, r5, #9
    endblk *= MMCSD_BLOCK_SIZE;
 8002f70:	0276      	lsls	r6, r6, #9
  }

  if (_sdc_wait_for_transfer_state(sdcp)) {
 8002f72:	4620      	mov	r0, r4
 8002f74:	f7ff fea4 	bl	8002cc0 <_sdc_wait_for_transfer_state>
 8002f78:	b168      	cbz	r0, 8002f96 <sdcErase+0x46>

  sdcp->state = BLK_READY;
  return HAL_SUCCESS;

failed:
  sdcp->state = BLK_READY;
 8002f7a:	2305      	movs	r3, #5
 8002f7c:	7123      	strb	r3, [r4, #4]
  return HAL_FAILED;
 8002f7e:	2301      	movs	r3, #1
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	b002      	add	sp, #8
 8002f84:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgCheck((sdcp != NULL));
 8002f86:	481c      	ldr	r0, [pc, #112]	; (8002ff8 <sdcErase+0xa8>)
 8002f88:	f004 fb72 	bl	8007670 <chSysHalt>
 8002f8c:	e7e6      	b.n	8002f5c <sdcErase+0xc>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002f8e:	481a      	ldr	r0, [pc, #104]	; (8002ff8 <sdcErase+0xa8>)
 8002f90:	f004 fb6e 	bl	8007670 <chSysHalt>
 8002f94:	e7e5      	b.n	8002f62 <sdcErase+0x12>
  if ((sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_ERASE_RW_BLK_START,
 8002f96:	ab01      	add	r3, sp, #4
 8002f98:	462a      	mov	r2, r5
 8002f9a:	2120      	movs	r1, #32
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f003 fcf7 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d1e9      	bne.n	8002f7a <sdcErase+0x2a>
      MMCSD_R1_ERROR(resp[0])) {
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <sdcErase+0xac>)
 8002fa8:	9a01      	ldr	r2, [sp, #4]
 8002faa:	4013      	ands	r3, r2
                                  startblk, resp) != HAL_SUCCESS) ||
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e4      	bne.n	8002f7a <sdcErase+0x2a>
  if ((sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_ERASE_RW_BLK_END,
 8002fb0:	ab01      	add	r3, sp, #4
 8002fb2:	4632      	mov	r2, r6
 8002fb4:	2121      	movs	r1, #33	; 0x21
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f003 fcea 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d1dc      	bne.n	8002f7a <sdcErase+0x2a>
      MMCSD_R1_ERROR(resp[0])) {
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <sdcErase+0xac>)
 8002fc2:	9a01      	ldr	r2, [sp, #4]
 8002fc4:	4013      	ands	r3, r2
                                  endblk, resp) != HAL_SUCCESS) ||
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1d7      	bne.n	8002f7a <sdcErase+0x2a>
  if ((sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_ERASE,
 8002fca:	ab01      	add	r3, sp, #4
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2126      	movs	r1, #38	; 0x26
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f003 fcdd 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	d1cf      	bne.n	8002f7a <sdcErase+0x2a>
      MMCSD_R1_ERROR(resp[0])) {
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <sdcErase+0xac>)
 8002fdc:	9a01      	ldr	r2, [sp, #4]
 8002fde:	4013      	ands	r3, r2
                                  0, resp) != HAL_SUCCESS) ||
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ca      	bne.n	8002f7a <sdcErase+0x2a>
  if (_sdc_wait_for_transfer_state(sdcp)) {
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f7ff fe6b 	bl	8002cc0 <_sdc_wait_for_transfer_state>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2800      	cmp	r0, #0
 8002fee:	d1c4      	bne.n	8002f7a <sdcErase+0x2a>
  sdcp->state = BLK_READY;
 8002ff0:	2205      	movs	r2, #5
 8002ff2:	7122      	strb	r2, [r4, #4]
  return HAL_SUCCESS;
 8002ff4:	e7c4      	b.n	8002f80 <sdcErase+0x30>
 8002ff6:	bf00      	nop
 8002ff8:	080149b8 	.word	0x080149b8
 8002ffc:	fdffe008 	.word	0xfdffe008

08003000 <_ctl>:
                     sysinterval_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
}

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8003000:	b538      	push	{r3, r4, r5, lr}
 8003002:	460c      	mov	r4, r1
 8003004:	4615      	mov	r5, r2
  SerialDriver *sdp = (SerialDriver *)ip;

  osalDbgCheck(sdp != NULL);
 8003006:	b138      	cbz	r0, 8003018 <_ctl+0x18>

  switch (operation) {
 8003008:	b154      	cbz	r4, 8003020 <_ctl+0x20>
 800300a:	2c01      	cmp	r4, #1
 800300c:	d10b      	bne.n	8003026 <_ctl+0x26>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
 800300e:	b155      	cbz	r5, 8003026 <_ctl+0x26>
 8003010:	4806      	ldr	r0, [pc, #24]	; (800302c <_ctl+0x2c>)
 8003012:	f004 fb2d 	bl	8007670 <chSysHalt>
 8003016:	e006      	b.n	8003026 <_ctl+0x26>
  osalDbgCheck(sdp != NULL);
 8003018:	4804      	ldr	r0, [pc, #16]	; (800302c <_ctl+0x2c>)
 800301a:	f004 fb29 	bl	8007670 <chSysHalt>
 800301e:	e7f3      	b.n	8003008 <_ctl+0x8>
    break;
  case CHN_CTL_INVALID:
    osalDbgAssert(false, "invalid CTL operation");
 8003020:	4802      	ldr	r0, [pc, #8]	; (800302c <_ctl+0x2c>)
 8003022:	f004 fb25 	bl	8007670 <chSysHalt>
#else
    break;
#endif
  }
  return MSG_OK;
}
 8003026:	2000      	movs	r0, #0
 8003028:	bd38      	pop	{r3, r4, r5, pc}
 800302a:	bf00      	nop
 800302c:	080149c4 	.word	0x080149c4

08003030 <_readt>:
                     sysinterval_t timeout) {
 8003030:	b530      	push	{r4, r5, lr}
 8003032:	b083      	sub	sp, #12
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003034:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003038:	e9cd 4500 	strd	r4, r5, [sp]
 800303c:	300c      	adds	r0, #12
 800303e:	f7fe f89f 	bl	8001180 <iqReadTimeout>
}
 8003042:	b003      	add	sp, #12
 8003044:	bd30      	pop	{r4, r5, pc}
 8003046:	bf00      	nop
 8003048:	f3af 8000 	nop.w
 800304c:	f3af 8000 	nop.w

08003050 <_read>:
static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8003050:	b530      	push	{r4, r5, lr}
 8003052:	b083      	sub	sp, #12
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003054:	f04f 34ff 	mov.w	r4, #4294967295
 8003058:	f04f 35ff 	mov.w	r5, #4294967295
 800305c:	e9cd 4500 	strd	r4, r5, [sp]
 8003060:	300c      	adds	r0, #12
 8003062:	f7fe f88d 	bl	8001180 <iqReadTimeout>
}
 8003066:	b003      	add	sp, #12
 8003068:	bd30      	pop	{r4, r5, pc}
 800306a:	bf00      	nop
 800306c:	f3af 8000 	nop.w

08003070 <_writet>:
                      sysinterval_t timeout) {
 8003070:	b530      	push	{r4, r5, lr}
 8003072:	b083      	sub	sp, #12
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003074:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003078:	e9cd 4500 	strd	r4, r5, [sp]
 800307c:	3030      	adds	r0, #48	; 0x30
 800307e:	f7fe f9bf 	bl	8001400 <oqWriteTimeout>
}
 8003082:	b003      	add	sp, #12
 8003084:	bd30      	pop	{r4, r5, pc}
 8003086:	bf00      	nop
 8003088:	f3af 8000 	nop.w
 800308c:	f3af 8000 	nop.w

08003090 <_write>:
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8003090:	b530      	push	{r4, r5, lr}
 8003092:	b083      	sub	sp, #12
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003094:	f04f 34ff 	mov.w	r4, #4294967295
 8003098:	f04f 35ff 	mov.w	r5, #4294967295
 800309c:	e9cd 4500 	strd	r4, r5, [sp]
 80030a0:	3030      	adds	r0, #48	; 0x30
 80030a2:	f7fe f9ad 	bl	8001400 <oqWriteTimeout>
}
 80030a6:	b003      	add	sp, #12
 80030a8:	bd30      	pop	{r4, r5, pc}
 80030aa:	bf00      	nop
 80030ac:	f3af 8000 	nop.w

080030b0 <_gett>:
static msg_t _gett(void *ip, sysinterval_t timeout) {
 80030b0:	b508      	push	{r3, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80030b2:	300c      	adds	r0, #12
 80030b4:	f7fd fff4 	bl	80010a0 <iqGetTimeout>
}
 80030b8:	bd08      	pop	{r3, pc}
 80030ba:	bf00      	nop
 80030bc:	f3af 8000 	nop.w

080030c0 <_get>:
static msg_t _get(void *ip) {
 80030c0:	b508      	push	{r3, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80030c2:	f04f 32ff 	mov.w	r2, #4294967295
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	300c      	adds	r0, #12
 80030cc:	f7fd ffe8 	bl	80010a0 <iqGetTimeout>
}
 80030d0:	bd08      	pop	{r3, pc}
 80030d2:	bf00      	nop
 80030d4:	f3af 8000 	nop.w
 80030d8:	f3af 8000 	nop.w
 80030dc:	f3af 8000 	nop.w

080030e0 <_putt>:
static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 80030e0:	b508      	push	{r3, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80030e2:	3030      	adds	r0, #48	; 0x30
 80030e4:	f7fe f8f4 	bl	80012d0 <oqPutTimeout>
}
 80030e8:	bd08      	pop	{r3, pc}
 80030ea:	bf00      	nop
 80030ec:	f3af 8000 	nop.w

080030f0 <_put>:
static msg_t _put(void *ip, uint8_t b) {
 80030f0:	b508      	push	{r3, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80030f2:	f04f 32ff 	mov.w	r2, #4294967295
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	3030      	adds	r0, #48	; 0x30
 80030fc:	f7fe f8e8 	bl	80012d0 <oqPutTimeout>
}
 8003100:	bd08      	pop	{r3, pc}
 8003102:	bf00      	nop
 8003104:	f3af 8000 	nop.w
 8003108:	f3af 8000 	nop.w
 800310c:	f3af 8000 	nop.w

08003110 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 8003110:	b508      	push	{r3, lr}

  sd_lld_init();
 8003112:	f004 f985 	bl	8007420 <sd_lld_init>
}
 8003116:	bd08      	pop	{r3, pc}
 8003118:	f3af 8000 	nop.w
 800311c:	f3af 8000 	nop.w

08003120 <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8003120:	b530      	push	{r4, r5, lr}
 8003122:	b083      	sub	sp, #12
 8003124:	4604      	mov	r4, r0
 8003126:	4615      	mov	r5, r2

  sdp->vmt = &vmt;
 8003128:	4603      	mov	r3, r0
 800312a:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <sdObjectInit+0x40>)
 800312c:	f843 2b04 	str.w	r2, [r3], #4
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8003130:	6043      	str	r3, [r0, #4]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8003132:	2301      	movs	r3, #1
 8003134:	7203      	strb	r3, [r0, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8003136:	9000      	str	r0, [sp, #0]
 8003138:	460b      	mov	r3, r1
 800313a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800313e:	f100 0154 	add.w	r1, r0, #84	; 0x54
 8003142:	300c      	adds	r0, #12
 8003144:	f7fd ff44 	bl	8000fd0 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8003148:	9400      	str	r4, [sp, #0]
 800314a:	462b      	mov	r3, r5
 800314c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003150:	f504 71aa 	add.w	r1, r4, #340	; 0x154
 8003154:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003158:	f7fe f87a 	bl	8001250 <oqObjectInit>
}
 800315c:	b003      	add	sp, #12
 800315e:	bd30      	pop	{r4, r5, pc}
 8003160:	080149cc 	.word	0x080149cc
 8003164:	f3af 8000 	nop.w
 8003168:	f3af 8000 	nop.w
 800316c:	f3af 8000 	nop.w

08003170 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	460d      	mov	r5, r1

  osalDbgCheck(sdp != NULL);
 8003174:	4604      	mov	r4, r0
 8003176:	b328      	cbz	r0, 80031c4 <sdStart+0x54>
 8003178:	2320      	movs	r3, #32
 800317a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800317e:	f005 ff07 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003182:	f004 fc05 	bl	8007990 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 8003186:	7a23      	ldrb	r3, [r4, #8]
 8003188:	3b01      	subs	r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d902      	bls.n	8003196 <sdStart+0x26>
 8003190:	4810      	ldr	r0, [pc, #64]	; (80031d4 <sdStart+0x64>)
 8003192:	f004 fa6d 	bl	8007670 <chSysHalt>
                "invalid state");
  sd_lld_start(sdp, config);
 8003196:	4629      	mov	r1, r5
 8003198:	4620      	mov	r0, r4
 800319a:	f004 f971 	bl	8007480 <sd_lld_start>
  sdp->state = SD_READY;
 800319e:	2302      	movs	r3, #2
 80031a0:	7223      	strb	r3, [r4, #8]
  _dbg_check_unlock();
 80031a2:	f004 fc0d 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80031a6:	f005 fefb 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <sdStart+0x68>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d004      	beq.n	80031bc <sdStart+0x4c>
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	6899      	ldr	r1, [r3, #8]
 80031b6:	6893      	ldr	r3, [r2, #8]
 80031b8:	4299      	cmp	r1, r3
 80031ba:	d307      	bcc.n	80031cc <sdStart+0x5c>
 80031bc:	2300      	movs	r3, #0
 80031be:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80031c2:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(sdp != NULL);
 80031c4:	4803      	ldr	r0, [pc, #12]	; (80031d4 <sdStart+0x64>)
 80031c6:	f004 fa53 	bl	8007670 <chSysHalt>
 80031ca:	e7d5      	b.n	8003178 <sdStart+0x8>
 80031cc:	4803      	ldr	r0, [pc, #12]	; (80031dc <sdStart+0x6c>)
 80031ce:	f004 fa4f 	bl	8007670 <chSysHalt>
 80031d2:	e7f3      	b.n	80031bc <sdStart+0x4c>
 80031d4:	080149f4 	.word	0x080149f4
 80031d8:	20004f68 	.word	0x20004f68
 80031dc:	080149fc 	.word	0x080149fc

080031e0 <sdStop>:
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 *
 * @api
 */
void sdStop(SerialDriver *sdp) {
 80031e0:	b510      	push	{r4, lr}

  osalDbgCheck(sdp != NULL);
 80031e2:	4604      	mov	r4, r0
 80031e4:	b370      	cbz	r0, 8003244 <sdStop+0x64>
 80031e6:	2320      	movs	r3, #32
 80031e8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80031ec:	f005 fed0 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80031f0:	f004 fbce 	bl	8007990 <_dbg_check_lock>

  osalSysLock();

  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 80031f4:	7a23      	ldrb	r3, [r4, #8]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d902      	bls.n	8003204 <sdStop+0x24>
 80031fe:	4815      	ldr	r0, [pc, #84]	; (8003254 <sdStop+0x74>)
 8003200:	f004 fa36 	bl	8007670 <chSysHalt>
                "invalid state");

  sd_lld_stop(sdp);
 8003204:	4620      	mov	r0, r4
 8003206:	f004 f98b 	bl	8007520 <sd_lld_stop>
  sdp->state = SD_STOP;
 800320a:	2301      	movs	r3, #1
 800320c:	7223      	strb	r3, [r4, #8]
  oqResetI(&sdp->oqueue);
 800320e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003212:	f7fe f82d 	bl	8001270 <oqResetI>
  iqResetI(&sdp->iqueue);
 8003216:	f104 000c 	add.w	r0, r4, #12
 800321a:	f7fd fee9 	bl	8000ff0 <iqResetI>
  chSchRescheduleS();
 800321e:	f005 f8ef 	bl	8008400 <chSchRescheduleS>
  _dbg_check_unlock();
 8003222:	f004 fbcd 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003226:	f005 febb 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <sdStop+0x78>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d004      	beq.n	800323c <sdStop+0x5c>
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	6899      	ldr	r1, [r3, #8]
 8003236:	6893      	ldr	r3, [r2, #8]
 8003238:	4299      	cmp	r1, r3
 800323a:	d307      	bcc.n	800324c <sdStop+0x6c>
 800323c:	2300      	movs	r3, #0
 800323e:	f383 8811 	msr	BASEPRI, r3
  osalOsRescheduleS();

  osalSysUnlock();
}
 8003242:	bd10      	pop	{r4, pc}
  osalDbgCheck(sdp != NULL);
 8003244:	4803      	ldr	r0, [pc, #12]	; (8003254 <sdStop+0x74>)
 8003246:	f004 fa13 	bl	8007670 <chSysHalt>
 800324a:	e7cc      	b.n	80031e6 <sdStop+0x6>
 800324c:	4803      	ldr	r0, [pc, #12]	; (800325c <sdStop+0x7c>)
 800324e:	f004 fa0f 	bl	8007670 <chSysHalt>
 8003252:	e7f3      	b.n	800323c <sdStop+0x5c>
 8003254:	08014a08 	.word	0x08014a08
 8003258:	20004f68 	.word	0x20004f68
 800325c:	080149fc 	.word	0x080149fc

08003260 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8003260:	b538      	push	{r3, r4, r5, lr}
 8003262:	4604      	mov	r4, r0
 8003264:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8003266:	f004 fc33 	bl	8007ad0 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);
 800326a:	b14c      	cbz	r4, 8003280 <sdIncomingDataI+0x20>

  if (iqIsEmptyI(&sdp->iqueue))
 800326c:	6963      	ldr	r3, [r4, #20]
 800326e:	b15b      	cbz	r3, 8003288 <sdIncomingDataI+0x28>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8003270:	4629      	mov	r1, r5
 8003272:	f104 000c 	add.w	r0, r4, #12
 8003276:	f7fd fecb 	bl	8001010 <iqPutI>
 800327a:	2800      	cmp	r0, #0
 800327c:	db09      	blt.n	8003292 <sdIncomingDataI+0x32>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
 800327e:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(sdp != NULL);
 8003280:	4807      	ldr	r0, [pc, #28]	; (80032a0 <sdIncomingDataI+0x40>)
 8003282:	f004 f9f5 	bl	8007670 <chSysHalt>
 8003286:	e7f1      	b.n	800326c <sdIncomingDataI+0xc>
  chEvtBroadcastFlagsI(esp, flags);
 8003288:	2104      	movs	r1, #4
 800328a:	1860      	adds	r0, r4, r1
 800328c:	f006 fe10 	bl	8009eb0 <chEvtBroadcastFlagsI>
 8003290:	e7ee      	b.n	8003270 <sdIncomingDataI+0x10>
 8003292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003296:	1d20      	adds	r0, r4, #4
 8003298:	f006 fe0a 	bl	8009eb0 <chEvtBroadcastFlagsI>
}
 800329c:	e7ef      	b.n	800327e <sdIncomingDataI+0x1e>
 800329e:	bf00      	nop
 80032a0:	08014a10 	.word	0x08014a10
 80032a4:	f3af 8000 	nop.w
 80032a8:	f3af 8000 	nop.w
 80032ac:	f3af 8000 	nop.w

080032b0 <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
 80032b0:	b538      	push	{r3, r4, r5, lr}
 80032b2:	4604      	mov	r4, r0
  msg_t  b;

  osalDbgCheckClassI();
 80032b4:	f004 fc0c 	bl	8007ad0 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);
 80032b8:	b13c      	cbz	r4, 80032ca <sdRequestDataI+0x1a>

  b = oqGetI(&sdp->oqueue);
 80032ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80032be:	f7fe f85f 	bl	8001380 <oqGetI>
  if (b < MSG_OK)
 80032c2:	1e05      	subs	r5, r0, #0
 80032c4:	db05      	blt.n	80032d2 <sdRequestDataI+0x22>
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
 80032c6:	4628      	mov	r0, r5
 80032c8:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(sdp != NULL);
 80032ca:	4804      	ldr	r0, [pc, #16]	; (80032dc <sdRequestDataI+0x2c>)
 80032cc:	f004 f9d0 	bl	8007670 <chSysHalt>
 80032d0:	e7f3      	b.n	80032ba <sdRequestDataI+0xa>
 80032d2:	2108      	movs	r1, #8
 80032d4:	1d20      	adds	r0, r4, #4
 80032d6:	f006 fdeb 	bl	8009eb0 <chEvtBroadcastFlagsI>
  return b;
 80032da:	e7f4      	b.n	80032c6 <sdRequestDataI+0x16>
 80032dc:	08014a20 	.word	0x08014a20

080032e0 <sdPutWouldBlock>:
 *
 * @deprecated
 *
 * @api
 */
bool sdPutWouldBlock(SerialDriver *sdp) {
 80032e0:	b510      	push	{r4, lr}
 80032e2:	4604      	mov	r4, r0
 80032e4:	2320      	movs	r3, #32
 80032e6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80032ea:	f005 fe51 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80032ee:	f004 fb4f 	bl	8007990 <_dbg_check_lock>
  bool b;

  osalSysLock();
  b = oqIsFullI(&sdp->oqueue);
 80032f2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80032f4:	fab4 f484 	clz	r4, r4
 80032f8:	0964      	lsrs	r4, r4, #5
  _dbg_check_unlock();
 80032fa:	f004 fb61 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80032fe:	f005 fe4f 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <sdPutWouldBlock+0x48>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d004      	beq.n	8003314 <sdPutWouldBlock+0x34>
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	6899      	ldr	r1, [r3, #8]
 800330e:	6893      	ldr	r3, [r2, #8]
 8003310:	4299      	cmp	r1, r3
 8003312:	d304      	bcc.n	800331e <sdPutWouldBlock+0x3e>
 8003314:	2300      	movs	r3, #0
 8003316:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();

  return b;
}
 800331a:	4620      	mov	r0, r4
 800331c:	bd10      	pop	{r4, pc}
 800331e:	4803      	ldr	r0, [pc, #12]	; (800332c <sdPutWouldBlock+0x4c>)
 8003320:	f004 f9a6 	bl	8007670 <chSysHalt>
 8003324:	e7f6      	b.n	8003314 <sdPutWouldBlock+0x34>
 8003326:	bf00      	nop
 8003328:	20004f68 	.word	0x20004f68
 800332c:	080149fc 	.word	0x080149fc

08003330 <sdGetWouldBlock>:
 *
 * @deprecated
 *
 * @api
 */
bool sdGetWouldBlock(SerialDriver *sdp) {
 8003330:	b510      	push	{r4, lr}
 8003332:	4604      	mov	r4, r0
 8003334:	2320      	movs	r3, #32
 8003336:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800333a:	f005 fe29 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800333e:	f004 fb27 	bl	8007990 <_dbg_check_lock>
  bool b;

  osalSysLock();
  b = iqIsEmptyI(&sdp->iqueue);
 8003342:	6964      	ldr	r4, [r4, #20]
 8003344:	fab4 f484 	clz	r4, r4
 8003348:	0964      	lsrs	r4, r4, #5
  _dbg_check_unlock();
 800334a:	f004 fb39 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800334e:	f005 fe27 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <sdGetWouldBlock+0x48>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d004      	beq.n	8003364 <sdGetWouldBlock+0x34>
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	6893      	ldr	r3, [r2, #8]
 8003360:	4299      	cmp	r1, r3
 8003362:	d304      	bcc.n	800336e <sdGetWouldBlock+0x3e>
 8003364:	2300      	movs	r3, #0
 8003366:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();

  return b;
}
 800336a:	4620      	mov	r0, r4
 800336c:	bd10      	pop	{r4, pc}
 800336e:	4803      	ldr	r0, [pc, #12]	; (800337c <sdGetWouldBlock+0x4c>)
 8003370:	f004 f97e 	bl	8007670 <chSysHalt>
 8003374:	e7f6      	b.n	8003364 <sdGetWouldBlock+0x34>
 8003376:	bf00      	nop
 8003378:	20004f68 	.word	0x20004f68
 800337c:	080149fc 	.word	0x080149fc

08003380 <sdControl>:
 * @retval MSG_TIMEOUT  in case of operation timeout.
 * @retval MSG_RESET    in case of operation reset.
 *
 * @api
 */
msg_t sdControl(SerialDriver *sdp, unsigned int operation, void *arg) {
 8003380:	b508      	push	{r3, lr}

  return _ctl((void *)sdp, operation, arg);
 8003382:	f7ff fe3d 	bl	8003000 <_ctl>
}
 8003386:	bd08      	pop	{r3, pc}
	...

08003390 <spiInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void spiInit(void) {
 8003390:	b508      	push	{r3, lr}

  spi_lld_init();
 8003392:	f002 ff9d 	bl	80062d0 <spi_lld_init>
}
 8003396:	bd08      	pop	{r3, pc}
 8003398:	f3af 8000 	nop.w
 800339c:	f3af 8000 	nop.w

080033a0 <spiObjectInit>:
 *
 * @param[out] spip     pointer to the @p SPIDriver object
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {
 80033a0:	b508      	push	{r3, lr}

  spip->state = SPI_STOP;
 80033a2:	2301      	movs	r3, #1
 80033a4:	7003      	strb	r3, [r0, #0]
  spip->config = NULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	6043      	str	r3, [r0, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80033aa:	6083      	str	r3, [r0, #8]
  chMtxObjectInit(mp);
 80033ac:	300c      	adds	r0, #12
 80033ae:	f006 f8f7 	bl	80095a0 <chMtxObjectInit>
  osalMutexObjectInit(&spip->mutex);
#endif
#if defined(SPI_DRIVER_EXT_INIT_HOOK)
  SPI_DRIVER_EXT_INIT_HOOK(spip);
#endif
}
 80033b2:	bd08      	pop	{r3, pc}
 80033b4:	f3af 8000 	nop.w
 80033b8:	f3af 8000 	nop.w
 80033bc:	f3af 8000 	nop.w

080033c0 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 80033c0:	b538      	push	{r3, r4, r5, lr}
 80033c2:	460d      	mov	r5, r1

  osalDbgCheck((spip != NULL) && (config != NULL));
 80033c4:	4604      	mov	r4, r0
 80033c6:	b330      	cbz	r0, 8003416 <spiStart+0x56>
 80033c8:	b329      	cbz	r1, 8003416 <spiStart+0x56>
 80033ca:	2320      	movs	r3, #32
 80033cc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80033d0:	f005 fdde 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80033d4:	f004 fadc 	bl	8007990 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 80033d8:	7823      	ldrb	r3, [r4, #0]
 80033da:	3b01      	subs	r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d902      	bls.n	80033e8 <spiStart+0x28>
 80033e2:	4811      	ldr	r0, [pc, #68]	; (8003428 <spiStart+0x68>)
 80033e4:	f004 f944 	bl	8007670 <chSysHalt>
                "invalid state");
  spip->config = config;
 80033e8:	6065      	str	r5, [r4, #4]
  spi_lld_start(spip);
 80033ea:	4620      	mov	r0, r4
 80033ec:	f002 ff88 	bl	8006300 <spi_lld_start>
  spip->state = SPI_READY;
 80033f0:	2302      	movs	r3, #2
 80033f2:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 80033f4:	f004 fae4 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80033f8:	f005 fdd2 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <spiStart+0x6c>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d004      	beq.n	800340e <spiStart+0x4e>
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	6899      	ldr	r1, [r3, #8]
 8003408:	6893      	ldr	r3, [r2, #8]
 800340a:	4299      	cmp	r1, r3
 800340c:	d307      	bcc.n	800341e <spiStart+0x5e>
 800340e:	2300      	movs	r3, #0
 8003410:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8003414:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((spip != NULL) && (config != NULL));
 8003416:	4804      	ldr	r0, [pc, #16]	; (8003428 <spiStart+0x68>)
 8003418:	f004 f92a 	bl	8007670 <chSysHalt>
 800341c:	e7d5      	b.n	80033ca <spiStart+0xa>
 800341e:	4804      	ldr	r0, [pc, #16]	; (8003430 <spiStart+0x70>)
 8003420:	f004 f926 	bl	8007670 <chSysHalt>
 8003424:	e7f3      	b.n	800340e <spiStart+0x4e>
 8003426:	bf00      	nop
 8003428:	08014a30 	.word	0x08014a30
 800342c:	20004f68 	.word	0x20004f68
 8003430:	08014a3c 	.word	0x08014a3c
 8003434:	f3af 8000 	nop.w
 8003438:	f3af 8000 	nop.w
 800343c:	f3af 8000 	nop.w

08003440 <spiStop>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiStop(SPIDriver *spip) {
 8003440:	b510      	push	{r4, lr}

  osalDbgCheck(spip != NULL);
 8003442:	4604      	mov	r4, r0
 8003444:	b330      	cbz	r0, 8003494 <spiStop+0x54>
 8003446:	2320      	movs	r3, #32
 8003448:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800344c:	f005 fda0 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003450:	f004 fa9e 	bl	8007990 <_dbg_check_lock>

  osalSysLock();

  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 8003454:	7823      	ldrb	r3, [r4, #0]
 8003456:	3b01      	subs	r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d902      	bls.n	8003464 <spiStop+0x24>
 800345e:	4811      	ldr	r0, [pc, #68]	; (80034a4 <spiStop+0x64>)
 8003460:	f004 f906 	bl	8007670 <chSysHalt>
                "invalid state");

  spi_lld_stop(spip);
 8003464:	4620      	mov	r0, r4
 8003466:	f002 ffd3 	bl	8006410 <spi_lld_stop>
  spip->config = NULL;
 800346a:	2300      	movs	r3, #0
 800346c:	6063      	str	r3, [r4, #4]
  spip->state  = SPI_STOP;
 800346e:	2301      	movs	r3, #1
 8003470:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 8003472:	f004 faa5 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003476:	f005 fd93 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <spiStop+0x68>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d004      	beq.n	800348c <spiStop+0x4c>
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	6899      	ldr	r1, [r3, #8]
 8003486:	6893      	ldr	r3, [r2, #8]
 8003488:	4299      	cmp	r1, r3
 800348a:	d307      	bcc.n	800349c <spiStop+0x5c>
 800348c:	2300      	movs	r3, #0
 800348e:	f383 8811 	msr	BASEPRI, r3

  osalSysUnlock();
}
 8003492:	bd10      	pop	{r4, pc}
  osalDbgCheck(spip != NULL);
 8003494:	4803      	ldr	r0, [pc, #12]	; (80034a4 <spiStop+0x64>)
 8003496:	f004 f8eb 	bl	8007670 <chSysHalt>
 800349a:	e7d4      	b.n	8003446 <spiStop+0x6>
 800349c:	4803      	ldr	r0, [pc, #12]	; (80034ac <spiStop+0x6c>)
 800349e:	f004 f8e7 	bl	8007670 <chSysHalt>
 80034a2:	e7f3      	b.n	800348c <spiStop+0x4c>
 80034a4:	08014a48 	.word	0x08014a48
 80034a8:	20004f68 	.word	0x20004f68
 80034ac:	08014a3c 	.word	0x08014a3c

080034b0 <spiSelect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 80034b0:	b510      	push	{r4, lr}

  osalDbgCheck(spip != NULL);
 80034b2:	4604      	mov	r4, r0
 80034b4:	b320      	cbz	r0, 8003500 <spiSelect+0x50>
 80034b6:	2320      	movs	r3, #32
 80034b8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80034bc:	f005 fd68 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80034c0:	f004 fa66 	bl	8007990 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 80034c4:	7823      	ldrb	r3, [r4, #0]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d002      	beq.n	80034d0 <spiSelect+0x20>
 80034ca:	4811      	ldr	r0, [pc, #68]	; (8003510 <spiSelect+0x60>)
 80034cc:	f004 f8d0 	bl	8007670 <chSysHalt>
  spiSelectI(spip);
 80034d0:	6862      	ldr	r2, [r4, #4]
 80034d2:	68d1      	ldr	r1, [r2, #12]
 80034d4:	2301      	movs	r3, #1
 80034d6:	408b      	lsls	r3, r1
 80034d8:	6892      	ldr	r2, [r2, #8]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	8353      	strh	r3, [r2, #26]
  _dbg_check_unlock();
 80034de:	f004 fa6f 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80034e2:	f005 fd5d 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <spiSelect+0x64>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d004      	beq.n	80034f8 <spiSelect+0x48>
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	6899      	ldr	r1, [r3, #8]
 80034f2:	6893      	ldr	r3, [r2, #8]
 80034f4:	4299      	cmp	r1, r3
 80034f6:	d307      	bcc.n	8003508 <spiSelect+0x58>
 80034f8:	2300      	movs	r3, #0
 80034fa:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80034fe:	bd10      	pop	{r4, pc}
  osalDbgCheck(spip != NULL);
 8003500:	4803      	ldr	r0, [pc, #12]	; (8003510 <spiSelect+0x60>)
 8003502:	f004 f8b5 	bl	8007670 <chSysHalt>
 8003506:	e7d6      	b.n	80034b6 <spiSelect+0x6>
 8003508:	4803      	ldr	r0, [pc, #12]	; (8003518 <spiSelect+0x68>)
 800350a:	f004 f8b1 	bl	8007670 <chSysHalt>
 800350e:	e7f3      	b.n	80034f8 <spiSelect+0x48>
 8003510:	08014a50 	.word	0x08014a50
 8003514:	20004f68 	.word	0x20004f68
 8003518:	08014a3c 	.word	0x08014a3c
 800351c:	f3af 8000 	nop.w

08003520 <spiUnselect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 8003520:	b510      	push	{r4, lr}

  osalDbgCheck(spip != NULL);
 8003522:	4604      	mov	r4, r0
 8003524:	b320      	cbz	r0, 8003570 <spiUnselect+0x50>
 8003526:	2320      	movs	r3, #32
 8003528:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800352c:	f005 fd30 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003530:	f004 fa2e 	bl	8007990 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8003534:	7823      	ldrb	r3, [r4, #0]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d002      	beq.n	8003540 <spiUnselect+0x20>
 800353a:	4811      	ldr	r0, [pc, #68]	; (8003580 <spiUnselect+0x60>)
 800353c:	f004 f898 	bl	8007670 <chSysHalt>
  spiUnselectI(spip);
 8003540:	6862      	ldr	r2, [r4, #4]
 8003542:	68d1      	ldr	r1, [r2, #12]
 8003544:	2301      	movs	r3, #1
 8003546:	408b      	lsls	r3, r1
 8003548:	6892      	ldr	r2, [r2, #8]
 800354a:	b29b      	uxth	r3, r3
 800354c:	8313      	strh	r3, [r2, #24]
  _dbg_check_unlock();
 800354e:	f004 fa37 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003552:	f005 fd25 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <spiUnselect+0x64>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d004      	beq.n	8003568 <spiUnselect+0x48>
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	6899      	ldr	r1, [r3, #8]
 8003562:	6893      	ldr	r3, [r2, #8]
 8003564:	4299      	cmp	r1, r3
 8003566:	d307      	bcc.n	8003578 <spiUnselect+0x58>
 8003568:	2300      	movs	r3, #0
 800356a:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800356e:	bd10      	pop	{r4, pc}
  osalDbgCheck(spip != NULL);
 8003570:	4803      	ldr	r0, [pc, #12]	; (8003580 <spiUnselect+0x60>)
 8003572:	f004 f87d 	bl	8007670 <chSysHalt>
 8003576:	e7d6      	b.n	8003526 <spiUnselect+0x6>
 8003578:	4803      	ldr	r0, [pc, #12]	; (8003588 <spiUnselect+0x68>)
 800357a:	f004 f879 	bl	8007670 <chSysHalt>
 800357e:	e7f3      	b.n	8003568 <spiUnselect+0x48>
 8003580:	08014a5c 	.word	0x08014a5c
 8003584:	20004f68 	.word	0x20004f68
 8003588:	08014a3c 	.word	0x08014a3c
 800358c:	f3af 8000 	nop.w

08003590 <spiStartIgnore>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] n         number of words to be ignored
 *
 * @api
 */
void spiStartIgnore(SPIDriver *spip, size_t n) {
 8003590:	b538      	push	{r3, r4, r5, lr}
 8003592:	460d      	mov	r5, r1

  osalDbgCheck((spip != NULL) && (n > 0U));
 8003594:	4604      	mov	r4, r0
 8003596:	b100      	cbz	r0, 800359a <spiStartIgnore+0xa>
 8003598:	b911      	cbnz	r1, 80035a0 <spiStartIgnore+0x10>
 800359a:	4815      	ldr	r0, [pc, #84]	; (80035f0 <spiStartIgnore+0x60>)
 800359c:	f004 f868 	bl	8007670 <chSysHalt>
 80035a0:	2320      	movs	r3, #32
 80035a2:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80035a6:	f005 fcf3 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80035aa:	f004 f9f1 	bl	8007990 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 80035ae:	7823      	ldrb	r3, [r4, #0]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d002      	beq.n	80035ba <spiStartIgnore+0x2a>
 80035b4:	480e      	ldr	r0, [pc, #56]	; (80035f0 <spiStartIgnore+0x60>)
 80035b6:	f004 f85b 	bl	8007670 <chSysHalt>
  spiStartIgnoreI(spip, n);
 80035ba:	2303      	movs	r3, #3
 80035bc:	7023      	strb	r3, [r4, #0]
 80035be:	4629      	mov	r1, r5
 80035c0:	4620      	mov	r0, r4
 80035c2:	f002 ff55 	bl	8006470 <spi_lld_ignore>
  _dbg_check_unlock();
 80035c6:	f004 f9fb 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80035ca:	f005 fce9 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <spiStartIgnore+0x64>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d004      	beq.n	80035e0 <spiStartIgnore+0x50>
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	6899      	ldr	r1, [r3, #8]
 80035da:	6893      	ldr	r3, [r2, #8]
 80035dc:	4299      	cmp	r1, r3
 80035de:	d303      	bcc.n	80035e8 <spiStartIgnore+0x58>
 80035e0:	2300      	movs	r3, #0
 80035e2:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80035e6:	bd38      	pop	{r3, r4, r5, pc}
 80035e8:	4803      	ldr	r0, [pc, #12]	; (80035f8 <spiStartIgnore+0x68>)
 80035ea:	f004 f841 	bl	8007670 <chSysHalt>
 80035ee:	e7f7      	b.n	80035e0 <spiStartIgnore+0x50>
 80035f0:	08014a68 	.word	0x08014a68
 80035f4:	20004f68 	.word	0x20004f68
 80035f8:	08014a3c 	.word	0x08014a3c
 80035fc:	f3af 8000 	nop.w

08003600 <spiStartExchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiStartExchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003602:	460d      	mov	r5, r1
 8003604:	4617      	mov	r7, r2
 8003606:	461e      	mov	r6, r3

  osalDbgCheck((spip != NULL) && (n > 0U) &&
 8003608:	4604      	mov	r4, r0
 800360a:	b110      	cbz	r0, 8003612 <spiStartExchange+0x12>
 800360c:	b109      	cbz	r1, 8003612 <spiStartExchange+0x12>
 800360e:	b103      	cbz	r3, 8003612 <spiStartExchange+0x12>
 8003610:	b912      	cbnz	r2, 8003618 <spiStartExchange+0x18>
 8003612:	4816      	ldr	r0, [pc, #88]	; (800366c <spiStartExchange+0x6c>)
 8003614:	f004 f82c 	bl	8007670 <chSysHalt>
 8003618:	2320      	movs	r3, #32
 800361a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800361e:	f005 fcb7 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003622:	f004 f9b5 	bl	8007990 <_dbg_check_lock>
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8003626:	7823      	ldrb	r3, [r4, #0]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d002      	beq.n	8003632 <spiStartExchange+0x32>
 800362c:	480f      	ldr	r0, [pc, #60]	; (800366c <spiStartExchange+0x6c>)
 800362e:	f004 f81f 	bl	8007670 <chSysHalt>
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 8003632:	2303      	movs	r3, #3
 8003634:	7023      	strb	r3, [r4, #0]
 8003636:	4633      	mov	r3, r6
 8003638:	463a      	mov	r2, r7
 800363a:	4629      	mov	r1, r5
 800363c:	4620      	mov	r0, r4
 800363e:	f002 ff4f 	bl	80064e0 <spi_lld_exchange>
  _dbg_check_unlock();
 8003642:	f004 f9bd 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003646:	f005 fcab 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <spiStartExchange+0x70>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d004      	beq.n	800365c <spiStartExchange+0x5c>
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	6899      	ldr	r1, [r3, #8]
 8003656:	6893      	ldr	r3, [r2, #8]
 8003658:	4299      	cmp	r1, r3
 800365a:	d303      	bcc.n	8003664 <spiStartExchange+0x64>
 800365c:	2300      	movs	r3, #0
 800365e:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8003662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003664:	4803      	ldr	r0, [pc, #12]	; (8003674 <spiStartExchange+0x74>)
 8003666:	f004 f803 	bl	8007670 <chSysHalt>
 800366a:	e7f7      	b.n	800365c <spiStartExchange+0x5c>
 800366c:	08014a78 	.word	0x08014a78
 8003670:	20004f68 	.word	0x20004f68
 8003674:	08014a3c 	.word	0x08014a3c
 8003678:	f3af 8000 	nop.w
 800367c:	f3af 8000 	nop.w

08003680 <spiStartSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiStartSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	460d      	mov	r5, r1
 8003684:	4616      	mov	r6, r2

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 8003686:	4604      	mov	r4, r0
 8003688:	b108      	cbz	r0, 800368e <spiStartSend+0xe>
 800368a:	b101      	cbz	r1, 800368e <spiStartSend+0xe>
 800368c:	b912      	cbnz	r2, 8003694 <spiStartSend+0x14>
 800368e:	4816      	ldr	r0, [pc, #88]	; (80036e8 <spiStartSend+0x68>)
 8003690:	f003 ffee 	bl	8007670 <chSysHalt>
 8003694:	2320      	movs	r3, #32
 8003696:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800369a:	f005 fc79 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800369e:	f004 f977 	bl	8007990 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 80036a2:	7823      	ldrb	r3, [r4, #0]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d002      	beq.n	80036ae <spiStartSend+0x2e>
 80036a8:	480f      	ldr	r0, [pc, #60]	; (80036e8 <spiStartSend+0x68>)
 80036aa:	f003 ffe1 	bl	8007670 <chSysHalt>
  spiStartSendI(spip, n, txbuf);
 80036ae:	2303      	movs	r3, #3
 80036b0:	7023      	strb	r3, [r4, #0]
 80036b2:	4632      	mov	r2, r6
 80036b4:	4629      	mov	r1, r5
 80036b6:	4620      	mov	r0, r4
 80036b8:	f002 ff4a 	bl	8006550 <spi_lld_send>
  _dbg_check_unlock();
 80036bc:	f004 f980 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80036c0:	f005 fc6e 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80036c4:	4b09      	ldr	r3, [pc, #36]	; (80036ec <spiStartSend+0x6c>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d004      	beq.n	80036d6 <spiStartSend+0x56>
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	6899      	ldr	r1, [r3, #8]
 80036d0:	6893      	ldr	r3, [r2, #8]
 80036d2:	4299      	cmp	r1, r3
 80036d4:	d303      	bcc.n	80036de <spiStartSend+0x5e>
 80036d6:	2300      	movs	r3, #0
 80036d8:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80036dc:	bd70      	pop	{r4, r5, r6, pc}
 80036de:	4804      	ldr	r0, [pc, #16]	; (80036f0 <spiStartSend+0x70>)
 80036e0:	f003 ffc6 	bl	8007670 <chSysHalt>
 80036e4:	e7f7      	b.n	80036d6 <spiStartSend+0x56>
 80036e6:	bf00      	nop
 80036e8:	08014a8c 	.word	0x08014a8c
 80036ec:	20004f68 	.word	0x20004f68
 80036f0:	08014a3c 	.word	0x08014a3c
 80036f4:	f3af 8000 	nop.w
 80036f8:	f3af 8000 	nop.w
 80036fc:	f3af 8000 	nop.w

08003700 <spiStartReceive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiStartReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	460d      	mov	r5, r1
 8003704:	4616      	mov	r6, r2

  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
 8003706:	4604      	mov	r4, r0
 8003708:	b108      	cbz	r0, 800370e <spiStartReceive+0xe>
 800370a:	b101      	cbz	r1, 800370e <spiStartReceive+0xe>
 800370c:	b912      	cbnz	r2, 8003714 <spiStartReceive+0x14>
 800370e:	4816      	ldr	r0, [pc, #88]	; (8003768 <spiStartReceive+0x68>)
 8003710:	f003 ffae 	bl	8007670 <chSysHalt>
 8003714:	2320      	movs	r3, #32
 8003716:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800371a:	f005 fc39 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800371e:	f004 f937 	bl	8007990 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8003722:	7823      	ldrb	r3, [r4, #0]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d002      	beq.n	800372e <spiStartReceive+0x2e>
 8003728:	480f      	ldr	r0, [pc, #60]	; (8003768 <spiStartReceive+0x68>)
 800372a:	f003 ffa1 	bl	8007670 <chSysHalt>
  spiStartReceiveI(spip, n, rxbuf);
 800372e:	2303      	movs	r3, #3
 8003730:	7023      	strb	r3, [r4, #0]
 8003732:	4632      	mov	r2, r6
 8003734:	4629      	mov	r1, r5
 8003736:	4620      	mov	r0, r4
 8003738:	f002 ff42 	bl	80065c0 <spi_lld_receive>
  _dbg_check_unlock();
 800373c:	f004 f940 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003740:	f005 fc2e 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <spiStartReceive+0x6c>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d004      	beq.n	8003756 <spiStartReceive+0x56>
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	6893      	ldr	r3, [r2, #8]
 8003752:	4299      	cmp	r1, r3
 8003754:	d303      	bcc.n	800375e <spiStartReceive+0x5e>
 8003756:	2300      	movs	r3, #0
 8003758:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800375c:	bd70      	pop	{r4, r5, r6, pc}
 800375e:	4804      	ldr	r0, [pc, #16]	; (8003770 <spiStartReceive+0x70>)
 8003760:	f003 ff86 	bl	8007670 <chSysHalt>
 8003764:	e7f7      	b.n	8003756 <spiStartReceive+0x56>
 8003766:	bf00      	nop
 8003768:	08014a9c 	.word	0x08014a9c
 800376c:	20004f68 	.word	0x20004f68
 8003770:	08014a3c 	.word	0x08014a3c
 8003774:	f3af 8000 	nop.w
 8003778:	f3af 8000 	nop.w
 800377c:	f3af 8000 	nop.w

08003780 <spiAbortI>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @iclass
 */
void spiAbortI(SPIDriver *spip) {
 8003780:	b510      	push	{r4, lr}
 8003782:	4604      	mov	r4, r0

  osalDbgCheckClassI();
 8003784:	f004 f9a4 	bl	8007ad0 <chDbgCheckClassI>

  osalDbgCheck(spip != NULL);
 8003788:	b194      	cbz	r4, 80037b0 <spiAbortI+0x30>
  osalDbgAssert((spip->state == SPI_ACTIVE) || (spip->state == SPI_COMPLETE),
 800378a:	7823      	ldrb	r3, [r4, #0]
 800378c:	3b03      	subs	r3, #3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d902      	bls.n	800379a <spiAbortI+0x1a>
 8003794:	4808      	ldr	r0, [pc, #32]	; (80037b8 <spiAbortI+0x38>)
 8003796:	f003 ff6b 	bl	8007670 <chSysHalt>
                "invalid state");

  spi_lld_abort(spip);
 800379a:	4620      	mov	r0, r4
 800379c:	f002 ff48 	bl	8006630 <spi_lld_abort>
  spip->state = SPI_READY;
 80037a0:	4620      	mov	r0, r4
 80037a2:	2302      	movs	r3, #2
 80037a4:	f800 3b08 	strb.w	r3, [r0], #8
  chThdResumeI(trp, msg);
 80037a8:	2100      	movs	r1, #0
 80037aa:	f005 fa81 	bl	8008cb0 <chThdResumeI>
#if SPI_USE_WAIT == TRUE
  osalThreadResumeI(&spip->thread, MSG_OK);
#endif
}
 80037ae:	bd10      	pop	{r4, pc}
  osalDbgCheck(spip != NULL);
 80037b0:	4801      	ldr	r0, [pc, #4]	; (80037b8 <spiAbortI+0x38>)
 80037b2:	f003 ff5d 	bl	8007670 <chSysHalt>
 80037b6:	e7e8      	b.n	800378a <spiAbortI+0xa>
 80037b8:	08014aac 	.word	0x08014aac
 80037bc:	f3af 8000 	nop.w

080037c0 <spiAbort>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiAbort(SPIDriver *spip) {
 80037c0:	b510      	push	{r4, lr}
 80037c2:	4604      	mov	r4, r0
 80037c4:	2320      	movs	r3, #32
 80037c6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80037ca:	f005 fbe1 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80037ce:	f004 f8df 	bl	8007990 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((spip->state == SPI_READY) || (spip->state == SPI_ACTIVE),
 80037d2:	7823      	ldrb	r3, [r4, #0]
 80037d4:	3b02      	subs	r3, #2
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d813      	bhi.n	8003804 <spiAbort+0x44>
                "invalid state");
  if (spip->state == SPI_ACTIVE) {
 80037dc:	7823      	ldrb	r3, [r4, #0]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d014      	beq.n	800380c <spiAbort+0x4c>
  _dbg_check_unlock();
 80037e2:	f004 f8ed 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80037e6:	f005 fbdb 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <spiAbort+0x60>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d004      	beq.n	80037fc <spiAbort+0x3c>
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	6899      	ldr	r1, [r3, #8]
 80037f6:	6893      	ldr	r3, [r2, #8]
 80037f8:	4299      	cmp	r1, r3
 80037fa:	d30d      	bcc.n	8003818 <spiAbort+0x58>
 80037fc:	2300      	movs	r3, #0
 80037fe:	f383 8811 	msr	BASEPRI, r3
    spiAbortI(spip);
    osalOsRescheduleS();
  }
  osalSysUnlock();
}
 8003802:	bd10      	pop	{r4, pc}
  osalDbgAssert((spip->state == SPI_READY) || (spip->state == SPI_ACTIVE),
 8003804:	4807      	ldr	r0, [pc, #28]	; (8003824 <spiAbort+0x64>)
 8003806:	f003 ff33 	bl	8007670 <chSysHalt>
 800380a:	e7e7      	b.n	80037dc <spiAbort+0x1c>
    spiAbortI(spip);
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff ffb7 	bl	8003780 <spiAbortI>
  chSchRescheduleS();
 8003812:	f004 fdf5 	bl	8008400 <chSchRescheduleS>
 8003816:	e7e4      	b.n	80037e2 <spiAbort+0x22>
 8003818:	4803      	ldr	r0, [pc, #12]	; (8003828 <spiAbort+0x68>)
 800381a:	f003 ff29 	bl	8007670 <chSysHalt>
 800381e:	e7ed      	b.n	80037fc <spiAbort+0x3c>
 8003820:	20004f68 	.word	0x20004f68
 8003824:	08014ab8 	.word	0x08014ab8
 8003828:	08014a3c 	.word	0x08014a3c
 800382c:	f3af 8000 	nop.w

08003830 <spiIgnore>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] n         number of words to be ignored
 *
 * @api
 */
void spiIgnore(SPIDriver *spip, size_t n) {
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	460d      	mov	r5, r1

  osalDbgCheck((spip != NULL) && (n > 0U));
 8003834:	4604      	mov	r4, r0
 8003836:	b100      	cbz	r0, 800383a <spiIgnore+0xa>
 8003838:	b911      	cbnz	r1, 8003840 <spiIgnore+0x10>
 800383a:	481e      	ldr	r0, [pc, #120]	; (80038b4 <spiIgnore+0x84>)
 800383c:	f003 ff18 	bl	8007670 <chSysHalt>
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8003840:	6863      	ldr	r3, [r4, #4]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b113      	cbz	r3, 800384c <spiIgnore+0x1c>
 8003846:	f015 0f01 	tst.w	r5, #1
 800384a:	d12b      	bne.n	80038a4 <spiIgnore+0x74>
 800384c:	2320      	movs	r3, #32
 800384e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8003852:	f005 fb9d 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003856:	f004 f89b 	bl	8007990 <_dbg_check_lock>
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800385a:	7823      	ldrb	r3, [r4, #0]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d002      	beq.n	8003866 <spiIgnore+0x36>
 8003860:	4814      	ldr	r0, [pc, #80]	; (80038b4 <spiIgnore+0x84>)
 8003862:	f003 ff05 	bl	8007670 <chSysHalt>
  spiStartIgnoreI(spip, n);
 8003866:	2303      	movs	r3, #3
 8003868:	7023      	strb	r3, [r4, #0]
 800386a:	4629      	mov	r1, r5
 800386c:	4620      	mov	r0, r4
 800386e:	f002 fdff 	bl	8006470 <spi_lld_ignore>
  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 8003872:	f04f 32ff 	mov.w	r2, #4294967295
 8003876:	f04f 33ff 	mov.w	r3, #4294967295
 800387a:	f104 0008 	add.w	r0, r4, #8
 800387e:	f005 f9f7 	bl	8008c70 <chThdSuspendTimeoutS>
  _dbg_check_unlock();
 8003882:	f004 f89d 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003886:	f005 fb8b 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <spiIgnore+0x88>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d004      	beq.n	800389c <spiIgnore+0x6c>
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	6899      	ldr	r1, [r3, #8]
 8003896:	6893      	ldr	r3, [r2, #8]
 8003898:	4299      	cmp	r1, r3
 800389a:	d307      	bcc.n	80038ac <spiIgnore+0x7c>
 800389c:	2300      	movs	r3, #0
 800389e:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 80038a4:	4803      	ldr	r0, [pc, #12]	; (80038b4 <spiIgnore+0x84>)
 80038a6:	f003 fee3 	bl	8007670 <chSysHalt>
 80038aa:	e7cf      	b.n	800384c <spiIgnore+0x1c>
 80038ac:	4803      	ldr	r0, [pc, #12]	; (80038bc <spiIgnore+0x8c>)
 80038ae:	f003 fedf 	bl	8007670 <chSysHalt>
 80038b2:	e7f3      	b.n	800389c <spiIgnore+0x6c>
 80038b4:	08014ac4 	.word	0x08014ac4
 80038b8:	20004f68 	.word	0x20004f68
 80038bc:	08014a3c 	.word	0x08014a3c

080038c0 <spiExchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiExchange(SPIDriver *spip, size_t n,
                 const void *txbuf, void *rxbuf) {
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	460d      	mov	r5, r1
 80038c4:	4617      	mov	r7, r2
 80038c6:	461e      	mov	r6, r3

  osalDbgCheck((spip != NULL) && (n > 0U) &&
 80038c8:	4604      	mov	r4, r0
 80038ca:	b110      	cbz	r0, 80038d2 <spiExchange+0x12>
 80038cc:	b109      	cbz	r1, 80038d2 <spiExchange+0x12>
 80038ce:	b103      	cbz	r3, 80038d2 <spiExchange+0x12>
 80038d0:	b912      	cbnz	r2, 80038d8 <spiExchange+0x18>
 80038d2:	481f      	ldr	r0, [pc, #124]	; (8003950 <spiExchange+0x90>)
 80038d4:	f003 fecc 	bl	8007670 <chSysHalt>
               (rxbuf != NULL) && (txbuf != NULL));
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 80038d8:	6863      	ldr	r3, [r4, #4]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	b113      	cbz	r3, 80038e4 <spiExchange+0x24>
 80038de:	f015 0f01 	tst.w	r5, #1
 80038e2:	d12d      	bne.n	8003940 <spiExchange+0x80>
 80038e4:	2320      	movs	r3, #32
 80038e6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80038ea:	f005 fb51 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80038ee:	f004 f84f 	bl	8007990 <_dbg_check_lock>
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 80038f2:	7823      	ldrb	r3, [r4, #0]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d002      	beq.n	80038fe <spiExchange+0x3e>
 80038f8:	4815      	ldr	r0, [pc, #84]	; (8003950 <spiExchange+0x90>)
 80038fa:	f003 feb9 	bl	8007670 <chSysHalt>
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 80038fe:	2303      	movs	r3, #3
 8003900:	7023      	strb	r3, [r4, #0]
 8003902:	4633      	mov	r3, r6
 8003904:	463a      	mov	r2, r7
 8003906:	4629      	mov	r1, r5
 8003908:	4620      	mov	r0, r4
 800390a:	f002 fde9 	bl	80064e0 <spi_lld_exchange>
 800390e:	f04f 32ff 	mov.w	r2, #4294967295
 8003912:	f04f 33ff 	mov.w	r3, #4294967295
 8003916:	f104 0008 	add.w	r0, r4, #8
 800391a:	f005 f9a9 	bl	8008c70 <chThdSuspendTimeoutS>
  _dbg_check_unlock();
 800391e:	f004 f84f 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003922:	f005 fb3d 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <spiExchange+0x94>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d004      	beq.n	8003938 <spiExchange+0x78>
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	6899      	ldr	r1, [r3, #8]
 8003932:	6893      	ldr	r3, [r2, #8]
 8003934:	4299      	cmp	r1, r3
 8003936:	d307      	bcc.n	8003948 <spiExchange+0x88>
 8003938:	2300      	movs	r3, #0
 800393a:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 800393e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8003940:	4803      	ldr	r0, [pc, #12]	; (8003950 <spiExchange+0x90>)
 8003942:	f003 fe95 	bl	8007670 <chSysHalt>
 8003946:	e7cd      	b.n	80038e4 <spiExchange+0x24>
 8003948:	4803      	ldr	r0, [pc, #12]	; (8003958 <spiExchange+0x98>)
 800394a:	f003 fe91 	bl	8007670 <chSysHalt>
 800394e:	e7f3      	b.n	8003938 <spiExchange+0x78>
 8003950:	08014ad0 	.word	0x08014ad0
 8003954:	20004f68 	.word	0x20004f68
 8003958:	08014a3c 	.word	0x08014a3c
 800395c:	f3af 8000 	nop.w

08003960 <spiSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	460d      	mov	r5, r1
 8003964:	4616      	mov	r6, r2

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 8003966:	4604      	mov	r4, r0
 8003968:	b108      	cbz	r0, 800396e <spiSend+0xe>
 800396a:	b101      	cbz	r1, 800396e <spiSend+0xe>
 800396c:	b912      	cbnz	r2, 8003974 <spiSend+0x14>
 800396e:	481f      	ldr	r0, [pc, #124]	; (80039ec <spiSend+0x8c>)
 8003970:	f003 fe7e 	bl	8007670 <chSysHalt>
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8003974:	6863      	ldr	r3, [r4, #4]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	b113      	cbz	r3, 8003980 <spiSend+0x20>
 800397a:	f015 0f01 	tst.w	r5, #1
 800397e:	d12c      	bne.n	80039da <spiSend+0x7a>
 8003980:	2320      	movs	r3, #32
 8003982:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8003986:	f005 fb03 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800398a:	f004 f801 	bl	8007990 <_dbg_check_lock>
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800398e:	7823      	ldrb	r3, [r4, #0]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d002      	beq.n	800399a <spiSend+0x3a>
 8003994:	4815      	ldr	r0, [pc, #84]	; (80039ec <spiSend+0x8c>)
 8003996:	f003 fe6b 	bl	8007670 <chSysHalt>
  spiStartSendI(spip, n, txbuf);
 800399a:	2303      	movs	r3, #3
 800399c:	7023      	strb	r3, [r4, #0]
 800399e:	4632      	mov	r2, r6
 80039a0:	4629      	mov	r1, r5
 80039a2:	4620      	mov	r0, r4
 80039a4:	f002 fdd4 	bl	8006550 <spi_lld_send>
 80039a8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
 80039b0:	f104 0008 	add.w	r0, r4, #8
 80039b4:	f005 f95c 	bl	8008c70 <chThdSuspendTimeoutS>
  _dbg_check_unlock();
 80039b8:	f004 f802 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80039bc:	f005 faf0 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <spiSend+0x90>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d004      	beq.n	80039d2 <spiSend+0x72>
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	6899      	ldr	r1, [r3, #8]
 80039cc:	6893      	ldr	r3, [r2, #8]
 80039ce:	4299      	cmp	r1, r3
 80039d0:	d307      	bcc.n	80039e2 <spiSend+0x82>
 80039d2:	2300      	movs	r3, #0
 80039d4:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 80039d8:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 80039da:	4804      	ldr	r0, [pc, #16]	; (80039ec <spiSend+0x8c>)
 80039dc:	f003 fe48 	bl	8007670 <chSysHalt>
 80039e0:	e7ce      	b.n	8003980 <spiSend+0x20>
 80039e2:	4804      	ldr	r0, [pc, #16]	; (80039f4 <spiSend+0x94>)
 80039e4:	f003 fe44 	bl	8007670 <chSysHalt>
 80039e8:	e7f3      	b.n	80039d2 <spiSend+0x72>
 80039ea:	bf00      	nop
 80039ec:	08014adc 	.word	0x08014adc
 80039f0:	20004f68 	.word	0x20004f68
 80039f4:	08014a3c 	.word	0x08014a3c
 80039f8:	f3af 8000 	nop.w
 80039fc:	f3af 8000 	nop.w

08003a00 <spiReceive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	460d      	mov	r5, r1
 8003a04:	4616      	mov	r6, r2

  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
 8003a06:	4604      	mov	r4, r0
 8003a08:	b108      	cbz	r0, 8003a0e <spiReceive+0xe>
 8003a0a:	b101      	cbz	r1, 8003a0e <spiReceive+0xe>
 8003a0c:	b912      	cbnz	r2, 8003a14 <spiReceive+0x14>
 8003a0e:	481f      	ldr	r0, [pc, #124]	; (8003a8c <spiReceive+0x8c>)
 8003a10:	f003 fe2e 	bl	8007670 <chSysHalt>
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8003a14:	6863      	ldr	r3, [r4, #4]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	b113      	cbz	r3, 8003a20 <spiReceive+0x20>
 8003a1a:	f015 0f01 	tst.w	r5, #1
 8003a1e:	d12c      	bne.n	8003a7a <spiReceive+0x7a>
 8003a20:	2320      	movs	r3, #32
 8003a22:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8003a26:	f005 fab3 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003a2a:	f003 ffb1 	bl	8007990 <_dbg_check_lock>
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8003a2e:	7823      	ldrb	r3, [r4, #0]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d002      	beq.n	8003a3a <spiReceive+0x3a>
 8003a34:	4815      	ldr	r0, [pc, #84]	; (8003a8c <spiReceive+0x8c>)
 8003a36:	f003 fe1b 	bl	8007670 <chSysHalt>
  spiStartReceiveI(spip, n, rxbuf);
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	7023      	strb	r3, [r4, #0]
 8003a3e:	4632      	mov	r2, r6
 8003a40:	4629      	mov	r1, r5
 8003a42:	4620      	mov	r0, r4
 8003a44:	f002 fdbc 	bl	80065c0 <spi_lld_receive>
 8003a48:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a50:	f104 0008 	add.w	r0, r4, #8
 8003a54:	f005 f90c 	bl	8008c70 <chThdSuspendTimeoutS>
  _dbg_check_unlock();
 8003a58:	f003 ffb2 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003a5c:	f005 faa0 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <spiReceive+0x90>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d004      	beq.n	8003a72 <spiReceive+0x72>
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	6899      	ldr	r1, [r3, #8]
 8003a6c:	6893      	ldr	r3, [r2, #8]
 8003a6e:	4299      	cmp	r1, r3
 8003a70:	d307      	bcc.n	8003a82 <spiReceive+0x82>
 8003a72:	2300      	movs	r3, #0
 8003a74:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 8003a78:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8003a7a:	4804      	ldr	r0, [pc, #16]	; (8003a8c <spiReceive+0x8c>)
 8003a7c:	f003 fdf8 	bl	8007670 <chSysHalt>
 8003a80:	e7ce      	b.n	8003a20 <spiReceive+0x20>
 8003a82:	4804      	ldr	r0, [pc, #16]	; (8003a94 <spiReceive+0x94>)
 8003a84:	f003 fdf4 	bl	8007670 <chSysHalt>
 8003a88:	e7f3      	b.n	8003a72 <spiReceive+0x72>
 8003a8a:	bf00      	nop
 8003a8c:	08014ae4 	.word	0x08014ae4
 8003a90:	20004f68 	.word	0x20004f68
 8003a94:	08014a3c 	.word	0x08014a3c
 8003a98:	f3af 8000 	nop.w
 8003a9c:	f3af 8000 	nop.w

08003aa0 <spiAcquireBus>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiAcquireBus(SPIDriver *spip) {
 8003aa0:	b510      	push	{r4, lr}

  osalDbgCheck(spip != NULL);
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	b120      	cbz	r0, 8003ab0 <spiAcquireBus+0x10>
  chMtxLock(mp);
 8003aa6:	f104 000c 	add.w	r0, r4, #12
 8003aaa:	f005 fe09 	bl	80096c0 <chMtxLock>

  osalMutexLock(&spip->mutex);
}
 8003aae:	bd10      	pop	{r4, pc}
  osalDbgCheck(spip != NULL);
 8003ab0:	4801      	ldr	r0, [pc, #4]	; (8003ab8 <spiAcquireBus+0x18>)
 8003ab2:	f003 fddd 	bl	8007670 <chSysHalt>
 8003ab6:	e7f6      	b.n	8003aa6 <spiAcquireBus+0x6>
 8003ab8:	08014af0 	.word	0x08014af0
 8003abc:	f3af 8000 	nop.w

08003ac0 <spiReleaseBus>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiReleaseBus(SPIDriver *spip) {
 8003ac0:	b510      	push	{r4, lr}

  osalDbgCheck(spip != NULL);
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	b120      	cbz	r0, 8003ad0 <spiReleaseBus+0x10>
  chMtxUnlock(mp);
 8003ac6:	f104 000c 	add.w	r0, r4, #12
 8003aca:	f005 fe69 	bl	80097a0 <chMtxUnlock>

  osalMutexUnlock(&spip->mutex);
}
 8003ace:	bd10      	pop	{r4, pc}
  osalDbgCheck(spip != NULL);
 8003ad0:	4801      	ldr	r0, [pc, #4]	; (8003ad8 <spiReleaseBus+0x18>)
 8003ad2:	f003 fdcd 	bl	8007670 <chSysHalt>
 8003ad6:	e7f6      	b.n	8003ac6 <spiReleaseBus+0x6>
 8003ad8:	08014b00 	.word	0x08014b00
 8003adc:	00000000 	.word	0x00000000

08003ae0 <halCommunityInit>:
#endif

#if HAL_USE_FSMC || defined(__DOXYGEN__)
  fsmcInit();
#endif
}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
	...

08003af0 <EepromFindDevice>:
const EepromDevice *EepromFindDevice(uint8_t id) {

  uint8_t i;
  const EepromDevice *drv;

  for (i = 0; i < EEPROM_TABLE_SIZE; i++) {
 8003af0:	2300      	movs	r3, #0
 8003af2:	b113      	cbz	r3, 8003afa <EepromFindDevice+0xa>
    if (drv->id == id) {
      return drv;
    }
  }

  return NULL;
 8003af4:	2200      	movs	r2, #0
}
 8003af6:	4610      	mov	r0, r2
 8003af8:	4770      	bx	lr
    drv = __eeprom_drv_table[i];
 8003afa:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <EepromFindDevice+0x1c>)
 8003afc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (drv->id == id) {
 8003b00:	7811      	ldrb	r1, [r2, #0]
 8003b02:	4281      	cmp	r1, r0
 8003b04:	d0f7      	beq.n	8003af6 <EepromFindDevice+0x6>
  for (i = 0; i < EEPROM_TABLE_SIZE; i++) {
 8003b06:	3301      	adds	r3, #1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	e7f2      	b.n	8003af2 <EepromFindDevice+0x2>
 8003b0c:	20001a00 	.word	0x20001a00

08003b10 <EepromFileOpen>:
 * @note      Fucntion allways successfully open file. All checking makes
 *            in read/write functions.
 */
EepromFileStream *EepromFileOpen(EepromFileStream *efs,
                                 const EepromFileConfig *eepcfg,
                                 const EepromDevice *eepdev) {
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	460c      	mov	r4, r1
 8003b14:	4616      	mov	r6, r2

  osalDbgAssert((efs != NULL) && (eepcfg != NULL) && (eepdev != NULL) &&
 8003b16:	4605      	mov	r5, r0
 8003b18:	b118      	cbz	r0, 8003b22 <EepromFileOpen+0x12>
 8003b1a:	b111      	cbz	r1, 8003b22 <EepromFileOpen+0x12>
 8003b1c:	b10a      	cbz	r2, 8003b22 <EepromFileOpen+0x12>
 8003b1e:	6853      	ldr	r3, [r2, #4]
 8003b20:	b913      	cbnz	r3, 8003b28 <EepromFileOpen+0x18>
 8003b22:	4815      	ldr	r0, [pc, #84]	; (8003b78 <EepromFileOpen+0x68>)
 8003b24:	f003 fda4 	bl	8007670 <chSysHalt>
             (eepdev->efsvmt != NULL), "EepromFileOpen");
  osalDbgAssert(efs->vmt != eepdev->efsvmt, "File allready opened");
 8003b28:	682a      	ldr	r2, [r5, #0]
 8003b2a:	6873      	ldr	r3, [r6, #4]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d013      	beq.n	8003b58 <EepromFileOpen+0x48>
  osalDbgAssert(eepcfg->barrier_hi > eepcfg->barrier_low, "Low barrier exceeds High barrier");
 8003b30:	6862      	ldr	r2, [r4, #4]
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d913      	bls.n	8003b60 <EepromFileOpen+0x50>
  osalDbgAssert(eepcfg->pagesize < eepcfg->size, "Pagesize cannot be lager than EEPROM size");
 8003b38:	89a2      	ldrh	r2, [r4, #12]
 8003b3a:	68a3      	ldr	r3, [r4, #8]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d213      	bcs.n	8003b68 <EepromFileOpen+0x58>
  osalDbgAssert(eepcfg->barrier_hi <= eepcfg->size, "Barrier exceeds EEPROM size");
 8003b40:	6862      	ldr	r2, [r4, #4]
 8003b42:	68a3      	ldr	r3, [r4, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d813      	bhi.n	8003b70 <EepromFileOpen+0x60>

  efs->vmt      = eepdev->efsvmt;
 8003b48:	6873      	ldr	r3, [r6, #4]
 8003b4a:	602b      	str	r3, [r5, #0]
  efs->cfg      = eepcfg;
 8003b4c:	60ec      	str	r4, [r5, #12]
  efs->errors   = FILE_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	606b      	str	r3, [r5, #4]
  efs->position = 0;
 8003b52:	60ab      	str	r3, [r5, #8]
  return (EepromFileStream *)efs;
}
 8003b54:	4628      	mov	r0, r5
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert(efs->vmt != eepdev->efsvmt, "File allready opened");
 8003b58:	4807      	ldr	r0, [pc, #28]	; (8003b78 <EepromFileOpen+0x68>)
 8003b5a:	f003 fd89 	bl	8007670 <chSysHalt>
 8003b5e:	e7e7      	b.n	8003b30 <EepromFileOpen+0x20>
  osalDbgAssert(eepcfg->barrier_hi > eepcfg->barrier_low, "Low barrier exceeds High barrier");
 8003b60:	4805      	ldr	r0, [pc, #20]	; (8003b78 <EepromFileOpen+0x68>)
 8003b62:	f003 fd85 	bl	8007670 <chSysHalt>
 8003b66:	e7e7      	b.n	8003b38 <EepromFileOpen+0x28>
  osalDbgAssert(eepcfg->pagesize < eepcfg->size, "Pagesize cannot be lager than EEPROM size");
 8003b68:	4803      	ldr	r0, [pc, #12]	; (8003b78 <EepromFileOpen+0x68>)
 8003b6a:	f003 fd81 	bl	8007670 <chSysHalt>
 8003b6e:	e7e7      	b.n	8003b40 <EepromFileOpen+0x30>
  osalDbgAssert(eepcfg->barrier_hi <= eepcfg->size, "Barrier exceeds EEPROM size");
 8003b70:	4801      	ldr	r0, [pc, #4]	; (8003b78 <EepromFileOpen+0x68>)
 8003b72:	f003 fd7d 	bl	8007670 <chSysHalt>
 8003b76:	e7e7      	b.n	8003b48 <EepromFileOpen+0x38>
 8003b78:	08014b10 	.word	0x08014b10
 8003b7c:	f3af 8000 	nop.w

08003b80 <EepromReadByte>:

uint8_t EepromReadByte(EepromFileStream *efs) {
 8003b80:	b500      	push	{lr}
 8003b82:	b083      	sub	sp, #12

  uint8_t buf;
  fileStreamRead(efs, &buf, sizeof(buf));
 8003b84:	6803      	ldr	r3, [r0, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f10d 0107 	add.w	r1, sp, #7
 8003b8e:	4798      	blx	r3
  return buf;
}
 8003b90:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003b94:	b003      	add	sp, #12
 8003b96:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b9a:	bf00      	nop
 8003b9c:	f3af 8000 	nop.w

08003ba0 <EepromReadHalfword>:

uint16_t EepromReadHalfword(EepromFileStream *efs) {
 8003ba0:	b500      	push	{lr}
 8003ba2:	b083      	sub	sp, #12

  uint16_t buf;
  fileStreamRead(efs, (uint8_t *)&buf, sizeof(buf));
 8003ba4:	6803      	ldr	r3, [r0, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	f10d 0106 	add.w	r1, sp, #6
 8003bae:	4798      	blx	r3
  return buf;
}
 8003bb0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003bb4:	b003      	add	sp, #12
 8003bb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bba:	bf00      	nop
 8003bbc:	f3af 8000 	nop.w

08003bc0 <EepromReadWord>:

uint32_t EepromReadWord(EepromFileStream *efs) {
 8003bc0:	b500      	push	{lr}
 8003bc2:	b083      	sub	sp, #12

  uint32_t buf;
  fileStreamRead(efs, (uint8_t *)&buf, sizeof(buf));
 8003bc4:	6803      	ldr	r3, [r0, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	eb0d 0102 	add.w	r1, sp, r2
 8003bce:	4798      	blx	r3
  return buf;
}
 8003bd0:	9801      	ldr	r0, [sp, #4]
 8003bd2:	b003      	add	sp, #12
 8003bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bd8:	f3af 8000 	nop.w
 8003bdc:	f3af 8000 	nop.w

08003be0 <EepromWriteByte>:

size_t EepromWriteByte(EepromFileStream *efs, uint8_t data) {
 8003be0:	b510      	push	{r4, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	ab02      	add	r3, sp, #8
 8003be6:	f803 1d01 	strb.w	r1, [r3, #-1]!

  return fileStreamWrite(efs, &data, sizeof(data));
 8003bea:	6802      	ldr	r2, [r0, #0]
 8003bec:	6854      	ldr	r4, [r2, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	47a0      	blx	r4
}
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd10      	pop	{r4, pc}
 8003bf8:	f3af 8000 	nop.w
 8003bfc:	f3af 8000 	nop.w

08003c00 <EepromWriteHalfword>:

size_t EepromWriteHalfword(EepromFileStream *efs, uint16_t data) {
 8003c00:	b510      	push	{r4, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	ab02      	add	r3, sp, #8
 8003c06:	f823 1d02 	strh.w	r1, [r3, #-2]!

  return fileStreamWrite(efs, (uint8_t *)&data, sizeof(data));
 8003c0a:	6802      	ldr	r2, [r0, #0]
 8003c0c:	6854      	ldr	r4, [r2, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	4619      	mov	r1, r3
 8003c12:	47a0      	blx	r4
}
 8003c14:	b002      	add	sp, #8
 8003c16:	bd10      	pop	{r4, pc}
 8003c18:	f3af 8000 	nop.w
 8003c1c:	f3af 8000 	nop.w

08003c20 <EepromWriteWord>:

size_t EepromWriteWord(EepromFileStream *efs, uint32_t data) {
 8003c20:	b510      	push	{r4, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	ab02      	add	r3, sp, #8
 8003c26:	f843 1d04 	str.w	r1, [r3, #-4]!

  return fileStreamWrite(efs, (uint8_t *)&data, sizeof(data));
 8003c2a:	6802      	ldr	r2, [r0, #0]
 8003c2c:	6854      	ldr	r4, [r2, #4]
 8003c2e:	2204      	movs	r2, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	47a0      	blx	r4
}
 8003c34:	b002      	add	sp, #8
 8003c36:	bd10      	pop	{r4, pc}
 8003c38:	f3af 8000 	nop.w
 8003c3c:	f3af 8000 	nop.w

08003c40 <eepfs_getsize>:

msg_t eepfs_getsize(void *ip) {
 8003c40:	b510      	push	{r4, lr}

  uint32_t h, l;

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL) &&
 8003c42:	4604      	mov	r4, r0
 8003c44:	b118      	cbz	r0, 8003c4e <eepfs_getsize+0xe>
 8003c46:	6803      	ldr	r3, [r0, #0]
 8003c48:	b10b      	cbz	r3, 8003c4e <eepfs_getsize+0xe>
 8003c4a:	68c3      	ldr	r3, [r0, #12]
 8003c4c:	b913      	cbnz	r3, 8003c54 <eepfs_getsize+0x14>
 8003c4e:	4804      	ldr	r0, [pc, #16]	; (8003c60 <eepfs_getsize+0x20>)
 8003c50:	f003 fd0e 	bl	8007670 <chSysHalt>
             (((EepromFileStream *)ip)->cfg != NULL));

  h = ((EepromFileStream *)ip)->cfg->barrier_hi;
 8003c54:	68e3      	ldr	r3, [r4, #12]
 8003c56:	6858      	ldr	r0, [r3, #4]
  l = ((EepromFileStream *)ip)->cfg->barrier_low;
 8003c58:	681b      	ldr	r3, [r3, #0]
  return  h - l;
}
 8003c5a:	1ac0      	subs	r0, r0, r3
 8003c5c:	bd10      	pop	{r4, pc}
 8003c5e:	bf00      	nop
 8003c60:	08014b20 	.word	0x08014b20
 8003c64:	f3af 8000 	nop.w
 8003c68:	f3af 8000 	nop.w
 8003c6c:	f3af 8000 	nop.w

08003c70 <eepfs_getposition>:

msg_t eepfs_getposition(void *ip) {
 8003c70:	b510      	push	{r4, lr}

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003c72:	4604      	mov	r4, r0
 8003c74:	b118      	cbz	r0, 8003c7e <eepfs_getposition+0xe>
 8003c76:	6803      	ldr	r3, [r0, #0]
 8003c78:	b10b      	cbz	r3, 8003c7e <eepfs_getposition+0xe>

  return ((EepromFileStream *)ip)->position;
}
 8003c7a:	68a0      	ldr	r0, [r4, #8]
 8003c7c:	bd10      	pop	{r4, pc}
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003c7e:	4802      	ldr	r0, [pc, #8]	; (8003c88 <eepfs_getposition+0x18>)
 8003c80:	f003 fcf6 	bl	8007670 <chSysHalt>
 8003c84:	e7f9      	b.n	8003c7a <eepfs_getposition+0xa>
 8003c86:	bf00      	nop
 8003c88:	08014b30 	.word	0x08014b30
 8003c8c:	f3af 8000 	nop.w

08003c90 <eepfs_lseek>:

msg_t eepfs_lseek(void *ip, fileoffset_t offset) {
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	460d      	mov	r5, r1

  uint32_t size;

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003c94:	4604      	mov	r4, r0
 8003c96:	b140      	cbz	r0, 8003caa <eepfs_lseek+0x1a>
 8003c98:	6803      	ldr	r3, [r0, #0]
 8003c9a:	b133      	cbz	r3, 8003caa <eepfs_lseek+0x1a>

  size = eepfs_getsize(ip);
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f7ff ffcf 	bl	8003c40 <eepfs_getsize>
  if (offset > size)
 8003ca2:	42a8      	cmp	r0, r5
 8003ca4:	d205      	bcs.n	8003cb2 <eepfs_lseek+0x22>
    offset = size;
  ((EepromFileStream *)ip)->position = offset;
 8003ca6:	60a0      	str	r0, [r4, #8]
  return offset;
}
 8003ca8:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003caa:	4803      	ldr	r0, [pc, #12]	; (8003cb8 <eepfs_lseek+0x28>)
 8003cac:	f003 fce0 	bl	8007670 <chSysHalt>
 8003cb0:	e7f4      	b.n	8003c9c <eepfs_lseek+0xc>
  if (offset > size)
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	e7f7      	b.n	8003ca6 <eepfs_lseek+0x16>
 8003cb6:	bf00      	nop
 8003cb8:	08014b44 	.word	0x08014b44
 8003cbc:	f3af 8000 	nop.w

08003cc0 <eepfs_close>:

msg_t eepfs_close(void *ip) {
 8003cc0:	b510      	push	{r4, lr}

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	b138      	cbz	r0, 8003cd6 <eepfs_close+0x16>
 8003cc6:	6803      	ldr	r3, [r0, #0]
 8003cc8:	b12b      	cbz	r3, 8003cd6 <eepfs_close+0x16>

  ((EepromFileStream *)ip)->errors   = FILE_OK;
 8003cca:	2000      	movs	r0, #0
 8003ccc:	6060      	str	r0, [r4, #4]
  ((EepromFileStream *)ip)->position = 0;
 8003cce:	60a0      	str	r0, [r4, #8]
  ((EepromFileStream *)ip)->vmt      = NULL;
 8003cd0:	6020      	str	r0, [r4, #0]
  ((EepromFileStream *)ip)->cfg      = NULL;
 8003cd2:	60e0      	str	r0, [r4, #12]
  return FILE_OK;
}
 8003cd4:	bd10      	pop	{r4, pc}
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003cd6:	4802      	ldr	r0, [pc, #8]	; (8003ce0 <eepfs_close+0x20>)
 8003cd8:	f003 fcca 	bl	8007670 <chSysHalt>
 8003cdc:	e7f5      	b.n	8003cca <eepfs_close+0xa>
 8003cde:	bf00      	nop
 8003ce0:	08014b50 	.word	0x08014b50
 8003ce4:	f3af 8000 	nop.w
 8003ce8:	f3af 8000 	nop.w
 8003cec:	f3af 8000 	nop.w

08003cf0 <eepfs_geterror>:

msg_t eepfs_geterror(void *ip) {
 8003cf0:	b510      	push	{r4, lr}

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	b118      	cbz	r0, 8003cfe <eepfs_geterror+0xe>
 8003cf6:	6803      	ldr	r3, [r0, #0]
 8003cf8:	b10b      	cbz	r3, 8003cfe <eepfs_geterror+0xe>
  return ((EepromFileStream *)ip)->errors;
}
 8003cfa:	6860      	ldr	r0, [r4, #4]
 8003cfc:	bd10      	pop	{r4, pc}
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003cfe:	4802      	ldr	r0, [pc, #8]	; (8003d08 <eepfs_geterror+0x18>)
 8003d00:	f003 fcb6 	bl	8007670 <chSysHalt>
 8003d04:	e7f9      	b.n	8003cfa <eepfs_geterror+0xa>
 8003d06:	bf00      	nop
 8003d08:	08014b5c 	.word	0x08014b5c
 8003d0c:	f3af 8000 	nop.w

08003d10 <eepfs_put>:
msg_t eepfs_put(void *ip, uint8_t b) {

  (void)ip;
  (void)b;
  return 0;
}
 8003d10:	2000      	movs	r0, #0
 8003d12:	4770      	bx	lr
 8003d14:	f3af 8000 	nop.w
 8003d18:	f3af 8000 	nop.w
 8003d1c:	f3af 8000 	nop.w

08003d20 <eepfs_get>:

msg_t eepfs_get(void *ip) {

  (void)ip;
  return 0;
}
 8003d20:	2000      	movs	r0, #0
 8003d22:	4770      	bx	lr
	...

08003d30 <calc_timeout>:
 */

/**
 * @brief     Calculates requred timeout.
 */
static systime_t calc_timeout(I2CDriver *i2cp, size_t txbytes, size_t rxbytes) {
 8003d30:	b538      	push	{r3, r4, r5, lr}
  (void)i2cp;
  const uint32_t bitsinbyte = 10;
  uint32_t tmo;
  tmo = ((txbytes + rxbytes + 1) * bitsinbyte * 1000);
 8003d32:	4411      	add	r1, r2
 8003d34:	f242 7310 	movw	r3, #10000	; 0x2710
 8003d38:	fb01 3103 	mla	r1, r1, r3, r3
  tmo /= EEPROM_I2C_CLOCK;
 8003d3c:	09c9      	lsrs	r1, r1, #7
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <calc_timeout+0x34>)
 8003d40:	fba3 3101 	umull	r3, r1, r3, r1
 8003d44:	0909      	lsrs	r1, r1, #4
  tmo += 10; /* some additional milliseconds to be safer */
 8003d46:	310a      	adds	r1, #10
  return TIME_MS2I(tmo);
 8003d48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	4806      	ldr	r0, [pc, #24]	; (8003d68 <calc_timeout+0x38>)
 8003d50:	f240 34e7 	movw	r4, #999	; 0x3e7
 8003d54:	2500      	movs	r5, #0
 8003d56:	fbe0 4501 	umlal	r4, r5, r0, r1
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	f00f fbc7 	bl	80134f0 <__aeabi_uldivmod>
}
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
 8003d64:	014f8b59 	.word	0x014f8b59
 8003d68:	000186a0 	.word	0x000186a0
 8003d6c:	f3af 8000 	nop.w

08003d70 <__clamp_size>:
}

/**
 * @brief   Determines and returns size of data that can be processed
 */
static size_t __clamp_size(void *ip, size_t n) {
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	4605      	mov	r5, r0
 8003d74:	460c      	mov	r4, r1

  if (((size_t)eepfs_getposition(ip) + n) > (size_t)eepfs_getsize(ip))
 8003d76:	f7ff ff7b 	bl	8003c70 <eepfs_getposition>
 8003d7a:	1906      	adds	r6, r0, r4
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f7ff ff5f 	bl	8003c40 <eepfs_getsize>
 8003d82:	4286      	cmp	r6, r0
 8003d84:	d801      	bhi.n	8003d8a <__clamp_size+0x1a>
    return eepfs_getsize(ip) - eepfs_getposition(ip);
  else
    return n;
}
 8003d86:	4620      	mov	r0, r4
 8003d88:	bd70      	pop	{r4, r5, r6, pc}
    return eepfs_getsize(ip) - eepfs_getposition(ip);
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	f7ff ff58 	bl	8003c40 <eepfs_getsize>
 8003d90:	4604      	mov	r4, r0
 8003d92:	4628      	mov	r0, r5
 8003d94:	f7ff ff6c 	bl	8003c70 <eepfs_getposition>
 8003d98:	1a24      	subs	r4, r4, r0
 8003d9a:	e7f4      	b.n	8003d86 <__clamp_size+0x16>
 8003d9c:	f3af 8000 	nop.w

08003da0 <eeprom_read>:
                         uint32_t offset, uint8_t *data, size_t len) {
 8003da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	4604      	mov	r4, r0
 8003da8:	460d      	mov	r5, r1
 8003daa:	4617      	mov	r7, r2
 8003dac:	461e      	mov	r6, r3
  systime_t tmo = calc_timeout(eepcfg->i2cp, 2, len);
 8003dae:	461a      	mov	r2, r3
 8003db0:	2102      	movs	r1, #2
 8003db2:	6940      	ldr	r0, [r0, #20]
 8003db4:	f7ff ffbc 	bl	8003d30 <calc_timeout>
 8003db8:	4680      	mov	r8, r0
  osalDbgAssert(((len <= eepcfg->size) && ((offset + len) <= eepcfg->size)),
 8003dba:	68a3      	ldr	r3, [r4, #8]
 8003dbc:	42b3      	cmp	r3, r6
 8003dbe:	d302      	bcc.n	8003dc6 <eeprom_read+0x26>
 8003dc0:	1972      	adds	r2, r6, r5
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d202      	bcs.n	8003dcc <eeprom_read+0x2c>
 8003dc6:	4812      	ldr	r0, [pc, #72]	; (8003e10 <eeprom_read+0x70>)
 8003dc8:	f003 fc52 	bl	8007670 <chSysHalt>
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	442b      	add	r3, r5
 8003dd0:	69e2      	ldr	r2, [r4, #28]
 8003dd2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003dd6:	7013      	strb	r3, [r2, #0]
 8003dd8:	6822      	ldr	r2, [r4, #0]
 8003dda:	69e3      	ldr	r3, [r4, #28]
 8003ddc:	4415      	add	r5, r2
 8003dde:	705d      	strb	r5, [r3, #1]
  i2cAcquireBus(eepcfg->i2cp);
 8003de0:	6960      	ldr	r0, [r4, #20]
 8003de2:	f7fe f9e5 	bl	80021b0 <i2cAcquireBus>
  status = i2cMasterTransmitTimeout(eepcfg->i2cp, eepcfg->addr,
 8003de6:	8b21      	ldrh	r1, [r4, #24]
 8003de8:	f8cd 8008 	str.w	r8, [sp, #8]
 8003dec:	2300      	movs	r3, #0
 8003dee:	9303      	str	r3, [sp, #12]
 8003df0:	9601      	str	r6, [sp, #4]
 8003df2:	9700      	str	r7, [sp, #0]
 8003df4:	2302      	movs	r3, #2
 8003df6:	69e2      	ldr	r2, [r4, #28]
 8003df8:	6960      	ldr	r0, [r4, #20]
 8003dfa:	f7fe f921 	bl	8002040 <i2cMasterTransmitTimeout>
 8003dfe:	4605      	mov	r5, r0
  i2cReleaseBus(eepcfg->i2cp);
 8003e00:	6960      	ldr	r0, [r4, #20]
 8003e02:	f7fe f9e5 	bl	80021d0 <i2cReleaseBus>
}
 8003e06:	4628      	mov	r0, r5
 8003e08:	b004      	add	sp, #16
 8003e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e0e:	bf00      	nop
 8003e10:	08014b6c 	.word	0x08014b6c
 8003e14:	f3af 8000 	nop.w
 8003e18:	f3af 8000 	nop.w
 8003e1c:	f3af 8000 	nop.w

08003e20 <read>:
/**
 * Read some bytes from current position in file. After successful
 * read operation the position pointer will be increased by the number
 * of read bytes.
 */
static size_t read(void *ip, uint8_t *bp, size_t n) {
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	460e      	mov	r6, r1
 8003e24:	4614      	mov	r4, r2
  msg_t status = MSG_OK;

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003e26:	4605      	mov	r5, r0
 8003e28:	b120      	cbz	r0, 8003e34 <read+0x14>
 8003e2a:	6803      	ldr	r3, [r0, #0]
 8003e2c:	b113      	cbz	r3, 8003e34 <read+0x14>

  if (n == 0)
 8003e2e:	b92c      	cbnz	r4, 8003e3c <read+0x1c>
    return 0;
  else {
    eepfs_lseek(ip, (eepfs_getposition(ip) + n));
    return n;
  }
}
 8003e30:	4620      	mov	r0, r4
 8003e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003e34:	480f      	ldr	r0, [pc, #60]	; (8003e74 <read+0x54>)
 8003e36:	f003 fc1b 	bl	8007670 <chSysHalt>
 8003e3a:	e7f8      	b.n	8003e2e <read+0xe>
  n = __clamp_size(ip, n);
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f7ff ff96 	bl	8003d70 <__clamp_size>
  if (n == 0)
 8003e44:	4604      	mov	r4, r0
 8003e46:	2800      	cmp	r0, #0
 8003e48:	d0f2      	beq.n	8003e30 <read+0x10>
  status  = eeprom_read(((I2CEepromFileStream *)ip)->cfg,
 8003e4a:	68ef      	ldr	r7, [r5, #12]
                        eepfs_getposition(ip), bp, n);
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	f7ff ff0f 	bl	8003c70 <eepfs_getposition>
  status  = eeprom_read(((I2CEepromFileStream *)ip)->cfg,
 8003e52:	4623      	mov	r3, r4
 8003e54:	4632      	mov	r2, r6
 8003e56:	4601      	mov	r1, r0
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f7ff ffa1 	bl	8003da0 <eeprom_read>
  if (status != MSG_OK)
 8003e5e:	b108      	cbz	r0, 8003e64 <read+0x44>
    return 0;
 8003e60:	2400      	movs	r4, #0
 8003e62:	e7e5      	b.n	8003e30 <read+0x10>
    eepfs_lseek(ip, (eepfs_getposition(ip) + n));
 8003e64:	4628      	mov	r0, r5
 8003e66:	f7ff ff03 	bl	8003c70 <eepfs_getposition>
 8003e6a:	1901      	adds	r1, r0, r4
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	f7ff ff0f 	bl	8003c90 <eepfs_lseek>
    return n;
 8003e72:	e7dd      	b.n	8003e30 <read+0x10>
 8003e74:	08014b78 	.word	0x08014b78
 8003e78:	f3af 8000 	nop.w
 8003e7c:	f3af 8000 	nop.w

08003e80 <eeprom_write>:
                          const uint8_t *data, size_t len) {
 8003e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e84:	b085      	sub	sp, #20
 8003e86:	4604      	mov	r4, r0
 8003e88:	460d      	mov	r5, r1
 8003e8a:	4691      	mov	r9, r2
 8003e8c:	461e      	mov	r6, r3
  systime_t tmo = calc_timeout(eepcfg->i2cp, (len + 2), 0);
 8003e8e:	1c9f      	adds	r7, r3, #2
 8003e90:	2200      	movs	r2, #0
 8003e92:	4639      	mov	r1, r7
 8003e94:	6940      	ldr	r0, [r0, #20]
 8003e96:	f7ff ff4b 	bl	8003d30 <calc_timeout>
 8003e9a:	4680      	mov	r8, r0
  osalDbgAssert(((len <= eepcfg->size) && ((offset + len) <= eepcfg->size)),
 8003e9c:	68a3      	ldr	r3, [r4, #8]
 8003e9e:	42b3      	cmp	r3, r6
 8003ea0:	d302      	bcc.n	8003ea8 <eeprom_write+0x28>
 8003ea2:	1972      	adds	r2, r6, r5
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d202      	bcs.n	8003eae <eeprom_write+0x2e>
 8003ea8:	481d      	ldr	r0, [pc, #116]	; (8003f20 <eeprom_write+0xa0>)
 8003eaa:	f003 fbe1 	bl	8007670 <chSysHalt>
  osalDbgAssert((((offset + eepcfg->barrier_low) / eepcfg->pagesize) ==
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	442b      	add	r3, r5
 8003eb2:	89a2      	ldrh	r2, [r4, #12]
 8003eb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003eb8:	4433      	add	r3, r6
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	d002      	beq.n	8003eca <eeprom_write+0x4a>
 8003ec4:	4816      	ldr	r0, [pc, #88]	; (8003f20 <eeprom_write+0xa0>)
 8003ec6:	f003 fbd3 	bl	8007670 <chSysHalt>
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	442b      	add	r3, r5
 8003ece:	69e2      	ldr	r2, [r4, #28]
 8003ed0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003ed4:	7013      	strb	r3, [r2, #0]
 8003ed6:	6822      	ldr	r2, [r4, #0]
 8003ed8:	69e3      	ldr	r3, [r4, #28]
 8003eda:	4415      	add	r5, r2
 8003edc:	705d      	strb	r5, [r3, #1]
  memcpy(&(eepcfg->write_buf[2]), data, len);
 8003ede:	69e0      	ldr	r0, [r4, #28]
 8003ee0:	4632      	mov	r2, r6
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	3002      	adds	r0, #2
 8003ee6:	f00f fc83 	bl	80137f0 <memcpy>
  i2cAcquireBus(eepcfg->i2cp);
 8003eea:	6960      	ldr	r0, [r4, #20]
 8003eec:	f7fe f960 	bl	80021b0 <i2cAcquireBus>
  status = i2cMasterTransmitTimeout(eepcfg->i2cp, eepcfg->addr,
 8003ef0:	8b21      	ldrh	r1, [r4, #24]
 8003ef2:	2500      	movs	r5, #0
 8003ef4:	f8cd 8008 	str.w	r8, [sp, #8]
 8003ef8:	9503      	str	r5, [sp, #12]
 8003efa:	9501      	str	r5, [sp, #4]
 8003efc:	9500      	str	r5, [sp, #0]
 8003efe:	463b      	mov	r3, r7
 8003f00:	69e2      	ldr	r2, [r4, #28]
 8003f02:	6960      	ldr	r0, [r4, #20]
 8003f04:	f7fe f89c 	bl	8002040 <i2cMasterTransmitTimeout>
 8003f08:	4606      	mov	r6, r0
  i2cReleaseBus(eepcfg->i2cp);
 8003f0a:	6960      	ldr	r0, [r4, #20]
 8003f0c:	f7fe f960 	bl	80021d0 <i2cReleaseBus>
  chThdSleep(eepcfg->write_time);
 8003f10:	6920      	ldr	r0, [r4, #16]
 8003f12:	4629      	mov	r1, r5
 8003f14:	f004 fdb4 	bl	8008a80 <chThdSleep>
}
 8003f18:	4630      	mov	r0, r6
 8003f1a:	b005      	add	sp, #20
 8003f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f20:	08014b80 	.word	0x08014b80
 8003f24:	f3af 8000 	nop.w
 8003f28:	f3af 8000 	nop.w
 8003f2c:	f3af 8000 	nop.w

08003f30 <__fitted_write>:
static msg_t __fitted_write(void *ip, const uint8_t *data, size_t len, uint32_t *written) {
 8003f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f34:	4604      	mov	r4, r0
 8003f36:	460f      	mov	r7, r1
 8003f38:	4698      	mov	r8, r3
  osalDbgAssert(len > 0, "len must be greater than 0");
 8003f3a:	4615      	mov	r5, r2
 8003f3c:	b172      	cbz	r2, 8003f5c <__fitted_write+0x2c>
  status = eeprom_write(((I2CEepromFileStream *)ip)->cfg,
 8003f3e:	68e6      	ldr	r6, [r4, #12]
                        eepfs_getposition(ip), data, len);
 8003f40:	4620      	mov	r0, r4
 8003f42:	f7ff fe95 	bl	8003c70 <eepfs_getposition>
  status = eeprom_write(((I2CEepromFileStream *)ip)->cfg,
 8003f46:	462b      	mov	r3, r5
 8003f48:	463a      	mov	r2, r7
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f7ff ff97 	bl	8003e80 <eeprom_write>
  if (status == MSG_OK) {
 8003f52:	4606      	mov	r6, r0
 8003f54:	b130      	cbz	r0, 8003f64 <__fitted_write+0x34>
}
 8003f56:	4630      	mov	r0, r6
 8003f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  osalDbgAssert(len > 0, "len must be greater than 0");
 8003f5c:	4808      	ldr	r0, [pc, #32]	; (8003f80 <__fitted_write+0x50>)
 8003f5e:	f003 fb87 	bl	8007670 <chSysHalt>
 8003f62:	e7ec      	b.n	8003f3e <__fitted_write+0xe>
    *written += len;
 8003f64:	f8d8 3000 	ldr.w	r3, [r8]
 8003f68:	442b      	add	r3, r5
 8003f6a:	f8c8 3000 	str.w	r3, [r8]
    eepfs_lseek(ip, eepfs_getposition(ip) + len);
 8003f6e:	4620      	mov	r0, r4
 8003f70:	f7ff fe7e 	bl	8003c70 <eepfs_getposition>
 8003f74:	1941      	adds	r1, r0, r5
 8003f76:	4620      	mov	r0, r4
 8003f78:	f7ff fe8a 	bl	8003c90 <eepfs_lseek>
  return status;
 8003f7c:	e7eb      	b.n	8003f56 <__fitted_write+0x26>
 8003f7e:	bf00      	nop
 8003f80:	08014b90 	.word	0x08014b90
 8003f84:	f3af 8000 	nop.w
 8003f88:	f3af 8000 	nop.w
 8003f8c:	f3af 8000 	nop.w

08003f90 <write>:
static size_t write(void *ip, const uint8_t *bp, size_t n) {
 8003f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	460e      	mov	r6, r1
 8003f98:	4614      	mov	r4, r2
  uint32_t written = 0;  /* total bytes successfully written */
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9301      	str	r3, [sp, #4]
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003f9e:	4605      	mov	r5, r0
 8003fa0:	b130      	cbz	r0, 8003fb0 <write+0x20>
 8003fa2:	6803      	ldr	r3, [r0, #0]
 8003fa4:	b123      	cbz	r3, 8003fb0 <write+0x20>
  if (n == 0)
 8003fa6:	b93c      	cbnz	r4, 8003fb8 <write+0x28>
}
 8003fa8:	4620      	mov	r0, r4
 8003faa:	b002      	add	sp, #8
 8003fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));
 8003fb0:	482b      	ldr	r0, [pc, #172]	; (8004060 <write+0xd0>)
 8003fb2:	f003 fb5d 	bl	8007670 <chSysHalt>
 8003fb6:	e7f6      	b.n	8003fa6 <write+0x16>
  n = __clamp_size(ip, n);
 8003fb8:	4621      	mov	r1, r4
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f7ff fed8 	bl	8003d70 <__clamp_size>
  if (n == 0)
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <write+0x18>
  pagesize  =  ((EepromFileStream *)ip)->cfg->pagesize;
 8003fc6:	68eb      	ldr	r3, [r5, #12]
 8003fc8:	f8b3 800c 	ldrh.w	r8, [r3, #12]
  firstpage = (((EepromFileStream *)ip)->cfg->barrier_low +
 8003fcc:	681f      	ldr	r7, [r3, #0]
               eepfs_getposition(ip)) / pagesize;
 8003fce:	4628      	mov	r0, r5
 8003fd0:	f7ff fe4e 	bl	8003c70 <eepfs_getposition>
  firstpage = (((EepromFileStream *)ip)->cfg->barrier_low +
 8003fd4:	4438      	add	r0, r7
               eepfs_getposition(ip)) / pagesize;
 8003fd6:	46c1      	mov	r9, r8
  firstpage = (((EepromFileStream *)ip)->cfg->barrier_low +
 8003fd8:	fbb0 faf8 	udiv	sl, r0, r8
  lastpage  = (((EepromFileStream *)ip)->cfg->barrier_low +
 8003fdc:	68eb      	ldr	r3, [r5, #12]
 8003fde:	681f      	ldr	r7, [r3, #0]
               eepfs_getposition(ip) + n - 1) / pagesize;
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f7ff fe45 	bl	8003c70 <eepfs_getposition>
  lastpage  = (((EepromFileStream *)ip)->cfg->barrier_low +
 8003fe6:	183b      	adds	r3, r7, r0
               eepfs_getposition(ip) + n - 1) / pagesize;
 8003fe8:	4423      	add	r3, r4
 8003fea:	3b01      	subs	r3, #1
  lastpage  = (((EepromFileStream *)ip)->cfg->barrier_low +
 8003fec:	fbb3 f3f8 	udiv	r3, r3, r8
  if (firstpage == lastpage) {
 8003ff0:	459a      	cmp	sl, r3
 8003ff2:	d01f      	beq.n	8004034 <write+0xa4>
    len =  ((firstpage + 1) * pagesize) - eepfs_getposition(ip);
 8003ff4:	fb0a 8808 	mla	r8, sl, r8, r8
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f7ff fe39 	bl	8003c70 <eepfs_getposition>
 8003ffe:	eba8 0800 	sub.w	r8, r8, r0
    len -= ((EepromFileStream *)ip)->cfg->barrier_low;
 8004002:	68eb      	ldr	r3, [r5, #12]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	eba8 0800 	sub.w	r8, r8, r0
    if (__fitted_write(ip, bp, len, &written) != MSG_OK)
 800400a:	ab01      	add	r3, sp, #4
 800400c:	4642      	mov	r2, r8
 800400e:	4631      	mov	r1, r6
 8004010:	4628      	mov	r0, r5
 8004012:	f7ff ff8d 	bl	8003f30 <__fitted_write>
 8004016:	b9a8      	cbnz	r0, 8004044 <write+0xb4>
    bp += len;
 8004018:	4446      	add	r6, r8
    while ((n - written) > pagesize) {
 800401a:	9b01      	ldr	r3, [sp, #4]
 800401c:	1ae2      	subs	r2, r4, r3
 800401e:	4591      	cmp	r9, r2
 8004020:	d214      	bcs.n	800404c <write+0xbc>
      if (__fitted_write(ip, bp, len, &written) != MSG_OK)
 8004022:	ab01      	add	r3, sp, #4
 8004024:	464a      	mov	r2, r9
 8004026:	4631      	mov	r1, r6
 8004028:	4628      	mov	r0, r5
 800402a:	f7ff ff81 	bl	8003f30 <__fitted_write>
 800402e:	b958      	cbnz	r0, 8004048 <write+0xb8>
      bp += len;
 8004030:	444e      	add	r6, r9
 8004032:	e7f2      	b.n	800401a <write+0x8a>
    __fitted_write(ip, bp, len, &written);
 8004034:	ab01      	add	r3, sp, #4
 8004036:	4622      	mov	r2, r4
 8004038:	4631      	mov	r1, r6
 800403a:	4628      	mov	r0, r5
 800403c:	f7ff ff78 	bl	8003f30 <__fitted_write>
    return written;
 8004040:	9c01      	ldr	r4, [sp, #4]
 8004042:	e7b1      	b.n	8003fa8 <write+0x18>
      return written;
 8004044:	9c01      	ldr	r4, [sp, #4]
 8004046:	e7af      	b.n	8003fa8 <write+0x18>
        return written;
 8004048:	9c01      	ldr	r4, [sp, #4]
 800404a:	e7ad      	b.n	8003fa8 <write+0x18>
    if (len == 0)
 800404c:	b90a      	cbnz	r2, 8004052 <write+0xc2>
      return written;
 800404e:	461c      	mov	r4, r3
 8004050:	e7aa      	b.n	8003fa8 <write+0x18>
      __fitted_write(ip, bp, len, &written);
 8004052:	ab01      	add	r3, sp, #4
 8004054:	4631      	mov	r1, r6
 8004056:	4628      	mov	r0, r5
 8004058:	f7ff ff6a 	bl	8003f30 <__fitted_write>
  return written;
 800405c:	9c01      	ldr	r4, [sp, #4]
 800405e:	e7a3      	b.n	8003fa8 <write+0x18>
 8004060:	08014ba0 	.word	0x08014ba0
	...

08004070 <nvicEnableVector>:

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004070:	0109      	lsls	r1, r1, #4
 8004072:	b2c9      	uxtb	r1, r1
 8004074:	4a07      	ldr	r2, [pc, #28]	; (8004094 <nvicEnableVector+0x24>)
 8004076:	1813      	adds	r3, r2, r0
 8004078:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800407c:	f000 011f 	and.w	r1, r0, #31
 8004080:	0940      	lsrs	r0, r0, #5
 8004082:	2301      	movs	r3, #1
 8004084:	408b      	lsls	r3, r1
 8004086:	f100 0160 	add.w	r1, r0, #96	; 0x60
 800408a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800408e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8004092:	4770      	bx	lr
 8004094:	e000e100 	.word	0xe000e100
 8004098:	f3af 8000 	nop.w
 800409c:	f3af 8000 	nop.w

080040a0 <nvicDisableVector>:
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80040a0:	f000 031f 	and.w	r3, r0, #31
 80040a4:	0942      	lsrs	r2, r0, #5
 80040a6:	2101      	movs	r1, #1
 80040a8:	4099      	lsls	r1, r3
 80040aa:	4b04      	ldr	r3, [pc, #16]	; (80040bc <nvicDisableVector+0x1c>)
 80040ac:	3220      	adds	r2, #32
 80040ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80040b2:	4403      	add	r3, r0
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
#endif
}
 80040ba:	4770      	bx	lr
 80040bc:	e000e100 	.word	0xe000e100

080040c0 <nvicSetSystemHandlerPriority>:
 * @brief   Changes the priority of a system handler.
 *
 * @param[in] handler   the system handler number
 * @param[in] prio      the system handler priority
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4604      	mov	r4, r0
 80040c4:	460d      	mov	r5, r1

  osalDbgCheck(handler < 12U);
 80040c6:	280b      	cmp	r0, #11
 80040c8:	d807      	bhi.n	80040da <nvicSetSystemHandlerPriority+0x1a>
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
#else
  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 80040ca:	012d      	lsls	r5, r5, #4
 80040cc:	b2ed      	uxtb	r5, r5
 80040ce:	f104 4060 	add.w	r0, r4, #3758096384	; 0xe0000000
 80040d2:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 80040d6:	7605      	strb	r5, [r0, #24]
#endif
}
 80040d8:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(handler < 12U);
 80040da:	4802      	ldr	r0, [pc, #8]	; (80040e4 <nvicSetSystemHandlerPriority+0x24>)
 80040dc:	f003 fac8 	bl	8007670 <chSysHalt>
 80040e0:	e7f3      	b.n	80040ca <nvicSetSystemHandlerPriority+0xa>
 80040e2:	bf00      	nop
 80040e4:	08014bd0 	.word	0x08014bd0
 80040e8:	f3af 8000 	nop.w
 80040ec:	f3af 8000 	nop.w

080040f0 <nvicClearPending>:
 *
 * @param[in] n         the interrupt number
 */
void nvicClearPending(uint32_t n) {

  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80040f0:	f000 021f 	and.w	r2, r0, #31
 80040f4:	0940      	lsrs	r0, r0, #5
 80040f6:	2301      	movs	r3, #1
 80040f8:	4093      	lsls	r3, r2
 80040fa:	3060      	adds	r0, #96	; 0x60
 80040fc:	4a01      	ldr	r2, [pc, #4]	; (8004104 <nvicClearPending+0x14>)
 80040fe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8004102:	4770      	bx	lr
 8004104:	e000e100 	.word	0xe000e100
	...

08004110 <Vector5C>:
/**
 * @brief   EXTI[1] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector5C) {
 8004110:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 8004112:	f004 ff15 	bl	8008f40 <_stats_increase_irq>
 8004116:	4816      	ldr	r0, [pc, #88]	; (8004170 <Vector5C+0x60>)
 8004118:	f003 fd6a 	bl	8007bf0 <_trace_isr_enter>
 800411c:	f003 fc98 	bl	8007a50 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8004120:	4a14      	ldr	r2, [pc, #80]	; (8004174 <Vector5C+0x64>)
 8004122:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8004124:	6811      	ldr	r1, [r2, #0]
 8004126:	f001 0102 	and.w	r1, r1, #2
 800412a:	400b      	ands	r3, r1
  EXTI->PR = pr;
 800412c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 1);
 800412e:	b1bb      	cbz	r3, 8004160 <Vector5C+0x50>
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <Vector5C+0x68>)
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	b113      	cbz	r3, 800413c <Vector5C+0x2c>
 8004136:	4a10      	ldr	r2, [pc, #64]	; (8004178 <Vector5C+0x68>)
 8004138:	69d0      	ldr	r0, [r2, #28]
 800413a:	4798      	blx	r3
 800413c:	2320      	movs	r3, #32
 800413e:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8004142:	f004 ff35 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8004146:	f003 fc53 	bl	80079f0 <_dbg_check_lock_from_isr>
  chThdDequeueAllI(tqp, msg);
 800414a:	2100      	movs	r1, #0
 800414c:	480b      	ldr	r0, [pc, #44]	; (800417c <Vector5C+0x6c>)
 800414e:	f004 fe3f 	bl	8008dd0 <chThdDequeueAllI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8004152:	f003 fc65 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8004156:	f004 ff33 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 800415a:	2300      	movs	r3, #0
 800415c:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
 8004160:	f003 fc96 	bl	8007a90 <_dbg_check_leave_isr>
 8004164:	4802      	ldr	r0, [pc, #8]	; (8004170 <Vector5C+0x60>)
 8004166:	f003 fd6b 	bl	8007c40 <_trace_isr_leave>
 800416a:	f007 fcf1 	bl	800bb50 <_port_irq_epilogue>
}
 800416e:	bd08      	pop	{r3, pc}
 8004170:	08014bf0 	.word	0x08014bf0
 8004174:	40013c00 	.word	0x40013c00
 8004178:	20004588 	.word	0x20004588
 800417c:	20004598 	.word	0x20004598

08004180 <Vector60>:
/**
 * @brief   EXTI[2] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector60) {
 8004180:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 8004182:	f004 fedd 	bl	8008f40 <_stats_increase_irq>
 8004186:	4816      	ldr	r0, [pc, #88]	; (80041e0 <Vector60+0x60>)
 8004188:	f003 fd32 	bl	8007bf0 <_trace_isr_enter>
 800418c:	f003 fc60 	bl	8007a50 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8004190:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <Vector60+0x64>)
 8004192:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8004194:	6811      	ldr	r1, [r2, #0]
 8004196:	f001 0104 	and.w	r1, r1, #4
 800419a:	400b      	ands	r3, r1
  EXTI->PR = pr;
 800419c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 2);
 800419e:	b1bb      	cbz	r3, 80041d0 <Vector60+0x50>
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <Vector60+0x68>)
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	b113      	cbz	r3, 80041ac <Vector60+0x2c>
 80041a6:	4a10      	ldr	r2, [pc, #64]	; (80041e8 <Vector60+0x68>)
 80041a8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80041aa:	4798      	blx	r3
 80041ac:	2320      	movs	r3, #32
 80041ae:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80041b2:	f004 fefd 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80041b6:	f003 fc1b 	bl	80079f0 <_dbg_check_lock_from_isr>
 80041ba:	2100      	movs	r1, #0
 80041bc:	480b      	ldr	r0, [pc, #44]	; (80041ec <Vector60+0x6c>)
 80041be:	f004 fe07 	bl	8008dd0 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 80041c2:	f003 fc2d 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80041c6:	f004 fefb 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 80041ca:	2300      	movs	r3, #0
 80041cc:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
 80041d0:	f003 fc5e 	bl	8007a90 <_dbg_check_leave_isr>
 80041d4:	4802      	ldr	r0, [pc, #8]	; (80041e0 <Vector60+0x60>)
 80041d6:	f003 fd33 	bl	8007c40 <_trace_isr_leave>
 80041da:	f007 fcb9 	bl	800bb50 <_port_irq_epilogue>
}
 80041de:	bd08      	pop	{r3, pc}
 80041e0:	08014bfc 	.word	0x08014bfc
 80041e4:	40013c00 	.word	0x40013c00
 80041e8:	20004588 	.word	0x20004588
 80041ec:	200045a8 	.word	0x200045a8

080041f0 <Vector64>:
/**
 * @brief   EXTI[3] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector64) {
 80041f0:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 80041f2:	f004 fea5 	bl	8008f40 <_stats_increase_irq>
 80041f6:	4816      	ldr	r0, [pc, #88]	; (8004250 <Vector64+0x60>)
 80041f8:	f003 fcfa 	bl	8007bf0 <_trace_isr_enter>
 80041fc:	f003 fc28 	bl	8007a50 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8004200:	4a14      	ldr	r2, [pc, #80]	; (8004254 <Vector64+0x64>)
 8004202:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8004204:	6811      	ldr	r1, [r2, #0]
 8004206:	f001 0108 	and.w	r1, r1, #8
 800420a:	400b      	ands	r3, r1
  EXTI->PR = pr;
 800420c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 3);
 800420e:	b1bb      	cbz	r3, 8004240 <Vector64+0x50>
 8004210:	4b11      	ldr	r3, [pc, #68]	; (8004258 <Vector64+0x68>)
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	b113      	cbz	r3, 800421c <Vector64+0x2c>
 8004216:	4a10      	ldr	r2, [pc, #64]	; (8004258 <Vector64+0x68>)
 8004218:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 800421a:	4798      	blx	r3
 800421c:	2320      	movs	r3, #32
 800421e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8004222:	f004 fec5 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8004226:	f003 fbe3 	bl	80079f0 <_dbg_check_lock_from_isr>
 800422a:	2100      	movs	r1, #0
 800422c:	480b      	ldr	r0, [pc, #44]	; (800425c <Vector64+0x6c>)
 800422e:	f004 fdcf 	bl	8008dd0 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 8004232:	f003 fbf5 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8004236:	f004 fec3 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 800423a:	2300      	movs	r3, #0
 800423c:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
 8004240:	f003 fc26 	bl	8007a90 <_dbg_check_leave_isr>
 8004244:	4802      	ldr	r0, [pc, #8]	; (8004250 <Vector64+0x60>)
 8004246:	f003 fcfb 	bl	8007c40 <_trace_isr_leave>
 800424a:	f007 fc81 	bl	800bb50 <_port_irq_epilogue>
}
 800424e:	bd08      	pop	{r3, pc}
 8004250:	08014c08 	.word	0x08014c08
 8004254:	40013c00 	.word	0x40013c00
 8004258:	20004588 	.word	0x20004588
 800425c:	200045b8 	.word	0x200045b8

08004260 <Vector68>:
/**
 * @brief   EXTI[4] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector68) {
 8004260:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 8004262:	f004 fe6d 	bl	8008f40 <_stats_increase_irq>
 8004266:	4816      	ldr	r0, [pc, #88]	; (80042c0 <Vector68+0x60>)
 8004268:	f003 fcc2 	bl	8007bf0 <_trace_isr_enter>
 800426c:	f003 fbf0 	bl	8007a50 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8004270:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <Vector68+0x64>)
 8004272:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8004274:	6811      	ldr	r1, [r2, #0]
 8004276:	f001 0110 	and.w	r1, r1, #16
 800427a:	400b      	ands	r3, r1
  EXTI->PR = pr;
 800427c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 4);
 800427e:	b1bb      	cbz	r3, 80042b0 <Vector68+0x50>
 8004280:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <Vector68+0x68>)
 8004282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004284:	b113      	cbz	r3, 800428c <Vector68+0x2c>
 8004286:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <Vector68+0x68>)
 8004288:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800428a:	4798      	blx	r3
 800428c:	2320      	movs	r3, #32
 800428e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8004292:	f004 fe8d 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8004296:	f003 fbab 	bl	80079f0 <_dbg_check_lock_from_isr>
 800429a:	2100      	movs	r1, #0
 800429c:	480b      	ldr	r0, [pc, #44]	; (80042cc <Vector68+0x6c>)
 800429e:	f004 fd97 	bl	8008dd0 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 80042a2:	f003 fbbd 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80042a6:	f004 fe8b 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 80042aa:	2300      	movs	r3, #0
 80042ac:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
 80042b0:	f003 fbee 	bl	8007a90 <_dbg_check_leave_isr>
 80042b4:	4802      	ldr	r0, [pc, #8]	; (80042c0 <Vector68+0x60>)
 80042b6:	f003 fcc3 	bl	8007c40 <_trace_isr_leave>
 80042ba:	f007 fc49 	bl	800bb50 <_port_irq_epilogue>
}
 80042be:	bd08      	pop	{r3, pc}
 80042c0:	08014c14 	.word	0x08014c14
 80042c4:	40013c00 	.word	0x40013c00
 80042c8:	20004588 	.word	0x20004588
 80042cc:	200045c8 	.word	0x200045c8

080042d0 <Vector9C>:
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 80042d0:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 80042d2:	f004 fe35 	bl	8008f40 <_stats_increase_irq>
 80042d6:	484f      	ldr	r0, [pc, #316]	; (8004414 <Vector9C+0x144>)
 80042d8:	f003 fc8a 	bl	8007bf0 <_trace_isr_enter>
 80042dc:	f003 fbb8 	bl	8007a50 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 80042e0:	4b4d      	ldr	r3, [pc, #308]	; (8004418 <Vector9C+0x148>)
 80042e2:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
 80042ea:	4014      	ands	r4, r2
                     (1U << 9));
  EXTI->PR = pr;
 80042ec:	615c      	str	r4, [r3, #20]

  exti_serve_irq(pr, 5);
 80042ee:	f014 0f20 	tst.w	r4, #32
 80042f2:	d017      	beq.n	8004324 <Vector9C+0x54>
 80042f4:	4b49      	ldr	r3, [pc, #292]	; (800441c <Vector9C+0x14c>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	b113      	cbz	r3, 8004300 <Vector9C+0x30>
 80042fa:	4a48      	ldr	r2, [pc, #288]	; (800441c <Vector9C+0x14c>)
 80042fc:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80042fe:	4798      	blx	r3
 8004300:	2320      	movs	r3, #32
 8004302:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8004306:	f004 fe53 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800430a:	f003 fb71 	bl	80079f0 <_dbg_check_lock_from_isr>
 800430e:	2100      	movs	r1, #0
 8004310:	4843      	ldr	r0, [pc, #268]	; (8004420 <Vector9C+0x150>)
 8004312:	f004 fd5d 	bl	8008dd0 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 8004316:	f003 fb83 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800431a:	f004 fe51 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 800431e:	2300      	movs	r3, #0
 8004320:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 6);
 8004324:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004328:	d017      	beq.n	800435a <Vector9C+0x8a>
 800432a:	4b3c      	ldr	r3, [pc, #240]	; (800441c <Vector9C+0x14c>)
 800432c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800432e:	b113      	cbz	r3, 8004336 <Vector9C+0x66>
 8004330:	4a3a      	ldr	r2, [pc, #232]	; (800441c <Vector9C+0x14c>)
 8004332:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8004334:	4798      	blx	r3
 8004336:	2320      	movs	r3, #32
 8004338:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800433c:	f004 fe38 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8004340:	f003 fb56 	bl	80079f0 <_dbg_check_lock_from_isr>
 8004344:	2100      	movs	r1, #0
 8004346:	4837      	ldr	r0, [pc, #220]	; (8004424 <Vector9C+0x154>)
 8004348:	f004 fd42 	bl	8008dd0 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 800434c:	f003 fb68 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8004350:	f004 fe36 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 8004354:	2300      	movs	r3, #0
 8004356:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 7);
 800435a:	f014 0f80 	tst.w	r4, #128	; 0x80
 800435e:	d017      	beq.n	8004390 <Vector9C+0xc0>
 8004360:	4b2e      	ldr	r3, [pc, #184]	; (800441c <Vector9C+0x14c>)
 8004362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004364:	b113      	cbz	r3, 800436c <Vector9C+0x9c>
 8004366:	4a2d      	ldr	r2, [pc, #180]	; (800441c <Vector9C+0x14c>)
 8004368:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 800436a:	4798      	blx	r3
 800436c:	2320      	movs	r3, #32
 800436e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8004372:	f004 fe1d 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8004376:	f003 fb3b 	bl	80079f0 <_dbg_check_lock_from_isr>
 800437a:	2100      	movs	r1, #0
 800437c:	482a      	ldr	r0, [pc, #168]	; (8004428 <Vector9C+0x158>)
 800437e:	f004 fd27 	bl	8008dd0 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 8004382:	f003 fb4d 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8004386:	f004 fe1b 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 800438a:	2300      	movs	r3, #0
 800438c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 8);
 8004390:	f414 7f80 	tst.w	r4, #256	; 0x100
 8004394:	d019      	beq.n	80043ca <Vector9C+0xfa>
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <Vector9C+0x14c>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	b11b      	cbz	r3, 80043a6 <Vector9C+0xd6>
 800439e:	4a1f      	ldr	r2, [pc, #124]	; (800441c <Vector9C+0x14c>)
 80043a0:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80043a4:	4798      	blx	r3
 80043a6:	2320      	movs	r3, #32
 80043a8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80043ac:	f004 fe00 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80043b0:	f003 fb1e 	bl	80079f0 <_dbg_check_lock_from_isr>
 80043b4:	2100      	movs	r1, #0
 80043b6:	481d      	ldr	r0, [pc, #116]	; (800442c <Vector9C+0x15c>)
 80043b8:	f004 fd0a 	bl	8008dd0 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 80043bc:	f003 fb30 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80043c0:	f004 fdfe 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 80043c4:	2300      	movs	r3, #0
 80043c6:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 9);
 80043ca:	f414 7f00 	tst.w	r4, #512	; 0x200
 80043ce:	d019      	beq.n	8004404 <Vector9C+0x134>
 80043d0:	4b12      	ldr	r3, [pc, #72]	; (800441c <Vector9C+0x14c>)
 80043d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d6:	b11b      	cbz	r3, 80043e0 <Vector9C+0x110>
 80043d8:	4a10      	ldr	r2, [pc, #64]	; (800441c <Vector9C+0x14c>)
 80043da:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
 80043de:	4798      	blx	r3
 80043e0:	2320      	movs	r3, #32
 80043e2:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80043e6:	f004 fde3 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80043ea:	f003 fb01 	bl	80079f0 <_dbg_check_lock_from_isr>
 80043ee:	2100      	movs	r1, #0
 80043f0:	480f      	ldr	r0, [pc, #60]	; (8004430 <Vector9C+0x160>)
 80043f2:	f004 fced 	bl	8008dd0 <chThdDequeueAllI>
  _dbg_check_unlock_from_isr();
 80043f6:	f003 fb13 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80043fa:	f004 fde1 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 80043fe:	2300      	movs	r3, #0
 8004400:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
 8004404:	f003 fb44 	bl	8007a90 <_dbg_check_leave_isr>
 8004408:	4802      	ldr	r0, [pc, #8]	; (8004414 <Vector9C+0x144>)
 800440a:	f003 fc19 	bl	8007c40 <_trace_isr_leave>
 800440e:	f007 fb9f 	bl	800bb50 <_port_irq_epilogue>
}
 8004412:	bd10      	pop	{r4, pc}
 8004414:	08014c20 	.word	0x08014c20
 8004418:	40013c00 	.word	0x40013c00
 800441c:	20004588 	.word	0x20004588
 8004420:	200045d8 	.word	0x200045d8
 8004424:	200045e8 	.word	0x200045e8
 8004428:	200045f8 	.word	0x200045f8
 800442c:	20004608 	.word	0x20004608
 8004430:	20004618 	.word	0x20004618
 8004434:	f3af 8000 	nop.w
 8004438:	f3af 8000 	nop.w
 800443c:	f3af 8000 	nop.w

08004440 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 8004440:	b508      	push	{r3, lr}

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8004442:	2100      	movs	r1, #0
 8004444:	2006      	movs	r0, #6
 8004446:	f7ff fe13 	bl	8004070 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 800444a:	2106      	movs	r1, #6
 800444c:	2007      	movs	r0, #7
 800444e:	f7ff fe0f 	bl	8004070 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8004452:	2106      	movs	r1, #6
 8004454:	2008      	movs	r0, #8
 8004456:	f7ff fe0b 	bl	8004070 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 800445a:	2106      	movs	r1, #6
 800445c:	2009      	movs	r0, #9
 800445e:	f7ff fe07 	bl	8004070 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 8004462:	2106      	movs	r1, #6
 8004464:	200a      	movs	r0, #10
 8004466:	f7ff fe03 	bl	8004070 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 800446a:	2106      	movs	r1, #6
 800446c:	2017      	movs	r0, #23
 800446e:	f7ff fdff 	bl	8004070 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8004472:	2101      	movs	r1, #1
 8004474:	2028      	movs	r0, #40	; 0x28
 8004476:	f7ff fdfb 	bl	8004070 <nvicEnableVector>
#endif
}
 800447a:	bd08      	pop	{r3, pc}
 800447c:	f3af 8000 	nop.w

08004480 <irqDeinit>:
/**
 * @brief   Disables IRQ sources.
 *
 * @notapi
 */
void irqDeinit(void) {
 8004480:	b508      	push	{r3, lr}

#if HAL_USE_PAL
  nvicDisableVector(EXTI0_IRQn);
 8004482:	2006      	movs	r0, #6
 8004484:	f7ff fe0c 	bl	80040a0 <nvicDisableVector>
  nvicDisableVector(EXTI1_IRQn);
 8004488:	2007      	movs	r0, #7
 800448a:	f7ff fe09 	bl	80040a0 <nvicDisableVector>
  nvicDisableVector(EXTI2_IRQn);
 800448e:	2008      	movs	r0, #8
 8004490:	f7ff fe06 	bl	80040a0 <nvicDisableVector>
  nvicDisableVector(EXTI3_IRQn);
 8004494:	2009      	movs	r0, #9
 8004496:	f7ff fe03 	bl	80040a0 <nvicDisableVector>
  nvicDisableVector(EXTI4_IRQn);
 800449a:	200a      	movs	r0, #10
 800449c:	f7ff fe00 	bl	80040a0 <nvicDisableVector>
  nvicDisableVector(EXTI9_5_IRQn);
 80044a0:	2017      	movs	r0, #23
 80044a2:	f7ff fdfd 	bl	80040a0 <nvicDisableVector>
  nvicDisableVector(EXTI15_10_IRQn);
 80044a6:	2028      	movs	r0, #40	; 0x28
 80044a8:	f7ff fdfa 	bl	80040a0 <nvicDisableVector>
#endif
}
 80044ac:	bd08      	pop	{r3, pc}
 80044ae:	bf00      	nop

080044b0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80044b0:	4a12      	ldr	r2, [pc, #72]	; (80044fc <hal_lld_backup_domain_init+0x4c>)
 80044b2:	6813      	ldr	r3, [r2, #0]
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80044ba:	4b11      	ldr	r3, [pc, #68]	; (8004500 <hal_lld_backup_domain_init+0x50>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c6:	d005      	beq.n	80044d4 <hal_lld_backup_domain_init+0x24>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80044c8:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <hal_lld_backup_domain_init+0x50>)
 80044ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044ce:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80044d0:	2200      	movs	r2, #0
 80044d2:	671a      	str	r2, [r3, #112]	; 0x70
#endif

#if HAL_USE_RTC
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <hal_lld_backup_domain_init+0x50>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80044dc:	d108      	bne.n	80044f0 <hal_lld_backup_domain_init+0x40>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 80044de:	4b08      	ldr	r3, [pc, #32]	; (8004500 <hal_lld_backup_domain_init+0x50>)
 80044e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e6:	671a      	str	r2, [r3, #112]	; 0x70

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 80044e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ee:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80044f0:	4a02      	ldr	r2, [pc, #8]	; (80044fc <hal_lld_backup_domain_init+0x4c>)
 80044f2:	6853      	ldr	r3, [r2, #4]
 80044f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044f8:	6053      	str	r3, [r2, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
 80044fa:	4770      	bx	lr
 80044fc:	40007000 	.word	0x40007000
 8004500:	40023800 	.word	0x40023800
 8004504:	f3af 8000 	nop.w
 8004508:	f3af 8000 	nop.w
 800450c:	f3af 8000 	nop.w

08004510 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8004510:	b508      	push	{r3, lr}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8004512:	4b19      	ldr	r3, [pc, #100]	; (8004578 <hal_lld_init+0x68>)
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 800451a:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
 800451e:	611a      	str	r2, [r3, #16]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004526:	611a      	str	r2, [r3, #16]
 8004528:	691a      	ldr	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	f04f 30ff 	mov.w	r0, #4294967295
 8004530:	6158      	str	r0, [r3, #20]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	2100      	movs	r1, #0
 8004536:	6159      	str	r1, [r3, #20]
 8004538:	695a      	ldr	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800453a:	6a1a      	ldr	r2, [r3, #32]
 800453c:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8004540:	621a      	str	r2, [r3, #32]
 8004542:	6a1a      	ldr	r2, [r3, #32]
 8004544:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004548:	621a      	str	r2, [r3, #32]
 800454a:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 800454c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800454e:	6258      	str	r0, [r3, #36]	; 0x24
 8004550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004552:	6259      	str	r1, [r3, #36]	; 0x24
 8004554:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8004556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004558:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
 800455e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004560:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004564:	661a      	str	r2, [r3, #96]	; 0x60
 8004566:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 8004568:	f7ff ffa2 	bl	80044b0 <hal_lld_backup_domain_init>

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800456c:	f000 fb18 	bl	8004ba0 <dmaInit>
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 8004570:	f7ff ff66 	bl	8004440 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8004574:	bd08      	pop	{r3, pc}
 8004576:	bf00      	nop
 8004578:	40023800 	.word	0x40023800
 800457c:	f3af 8000 	nop.w

08004580 <stm32_clock_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8004580:	4b3b      	ldr	r3, [pc, #236]	; (8004670 <stm32_clock_init+0xf0>)
 8004582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004586:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8004588:	4a3a      	ldr	r2, [pc, #232]	; (8004674 <stm32_clock_init+0xf4>)
 800458a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800458e:	6011      	str	r1, [r2, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004598:	4b35      	ldr	r3, [pc, #212]	; (8004670 <stm32_clock_init+0xf0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f013 0f02 	tst.w	r3, #2
 80045a0:	d0fa      	beq.n	8004598 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80045a2:	4a33      	ldr	r2, [pc, #204]	; (8004670 <stm32_clock_init+0xf0>)
 80045a4:	6893      	ldr	r3, [r2, #8]
 80045a6:	f023 0303 	bic.w	r3, r3, #3
 80045aa:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80045ac:	4b30      	ldr	r3, [pc, #192]	; (8004670 <stm32_clock_init+0xf0>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f013 0f0c 	tst.w	r3, #12
 80045b4:	d1fa      	bne.n	80045ac <stm32_clock_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80045b6:	4b2e      	ldr	r3, [pc, #184]	; (8004670 <stm32_clock_init+0xf0>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 80045be:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80045c0:	2200      	movs	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045ca:	601a      	str	r2, [r3, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80045cc:	4b28      	ldr	r3, [pc, #160]	; (8004670 <stm32_clock_init+0xf0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045d4:	d0fa      	beq.n	80045cc <stm32_clock_init+0x4c>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80045d6:	4a26      	ldr	r2, [pc, #152]	; (8004670 <stm32_clock_init+0xf0>)
 80045d8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80045e0:	4b23      	ldr	r3, [pc, #140]	; (8004670 <stm32_clock_init+0xf0>)
 80045e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e4:	f013 0f02 	tst.w	r3, #2
 80045e8:	d0fa      	beq.n	80045e0 <stm32_clock_init+0x60>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <stm32_clock_init+0xf0>)
 80045ec:	4a22      	ldr	r2, [pc, #136]	; (8004678 <stm32_clock_init+0xf8>)
 80045ee:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80045f6:	601a      	str	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80045f8:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <stm32_clock_init+0xf4>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004600:	d0fa      	beq.n	80045f8 <stm32_clock_init+0x78>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8004602:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <stm32_clock_init+0xf0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800460a:	d0fa      	beq.n	8004602 <stm32_clock_init+0x82>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800460c:	4b18      	ldr	r3, [pc, #96]	; (8004670 <stm32_clock_init+0xf0>)
 800460e:	4a1b      	ldr	r2, [pc, #108]	; (800467c <stm32_clock_init+0xfc>)
 8004610:	609a      	str	r2, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8004612:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <stm32_clock_init+0x100>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b1b      	ldr	r3, [pc, #108]	; (8004684 <stm32_clock_init+0x104>)
 8004618:	429a      	cmp	r2, r3
 800461a:	d01f      	beq.n	800465c <stm32_clock_init+0xdc>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800461c:	4b1a      	ldr	r3, [pc, #104]	; (8004688 <stm32_clock_init+0x108>)
 800461e:	f240 7205 	movw	r2, #1797	; 0x705
 8004622:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8004624:	4b18      	ldr	r3, [pc, #96]	; (8004688 <stm32_clock_init+0x108>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	2b05      	cmp	r3, #5
 800462e:	d1f9      	bne.n	8004624 <stm32_clock_init+0xa4>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8004630:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <stm32_clock_init+0xf0>)
 8004632:	6893      	ldr	r3, [r2, #8]
 8004634:	f043 0302 	orr.w	r3, r3, #2
 8004638:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <stm32_clock_init+0xf0>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b08      	cmp	r3, #8
 8004644:	d1f9      	bne.n	800463a <stm32_clock_init+0xba>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <stm32_clock_init+0xf0>)
 8004648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800464e:	645a      	str	r2, [r3, #68]	; 0x44
 8004650:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004656:	665a      	str	r2, [r3, #100]	; 0x64
 8004658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 800465a:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <stm32_clock_init+0x10c>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <stm32_clock_init+0x110>)
 8004662:	429a      	cmp	r2, r3
 8004664:	d1da      	bne.n	800461c <stm32_clock_init+0x9c>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8004666:	4b08      	ldr	r3, [pc, #32]	; (8004688 <stm32_clock_init+0x108>)
 8004668:	f240 1205 	movw	r2, #261	; 0x105
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e7d9      	b.n	8004624 <stm32_clock_init+0xa4>
 8004670:	40023800 	.word	0x40023800
 8004674:	40007000 	.word	0x40007000
 8004678:	0740540c 	.word	0x0740540c
 800467c:	38889400 	.word	0x38889400
 8004680:	e0042000 	.word	0xe0042000
 8004684:	20006411 	.word	0x20006411
 8004688:	40023c00 	.word	0x40023c00
 800468c:	e000ed00 	.word	0xe000ed00
 8004690:	410fc241 	.word	0x410fc241
	...

080046a0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 80046a0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80046a2:	f004 fc4d 	bl	8008f40 <_stats_increase_irq>
 80046a6:	480c      	ldr	r0, [pc, #48]	; (80046d8 <Vector6C+0x38>)
 80046a8:	f003 faa2 	bl	8007bf0 <_trace_isr_enter>
 80046ac:	f003 f9d0 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <Vector6C+0x3c>)
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 80046b8:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <Vector6C+0x40>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b113      	cbz	r3, 80046c6 <Vector6C+0x26>
    dma.streams[0].func(dma.streams[0].param, flags);
 80046c0:	4a07      	ldr	r2, [pc, #28]	; (80046e0 <Vector6C+0x40>)
 80046c2:	6890      	ldr	r0, [r2, #8]
 80046c4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80046c6:	f003 f9e3 	bl	8007a90 <_dbg_check_leave_isr>
 80046ca:	4803      	ldr	r0, [pc, #12]	; (80046d8 <Vector6C+0x38>)
 80046cc:	f003 fab8 	bl	8007c40 <_trace_isr_leave>
 80046d0:	f007 fa3e 	bl	800bb50 <_port_irq_epilogue>
}
 80046d4:	bd08      	pop	{r3, pc}
 80046d6:	bf00      	nop
 80046d8:	08014c2c 	.word	0x08014c2c
 80046dc:	40026000 	.word	0x40026000
 80046e0:	2000201c 	.word	0x2000201c
 80046e4:	f3af 8000 	nop.w
 80046e8:	f3af 8000 	nop.w
 80046ec:	f3af 8000 	nop.w

080046f0 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80046f0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80046f2:	f004 fc25 	bl	8008f40 <_stats_increase_irq>
 80046f6:	480d      	ldr	r0, [pc, #52]	; (800472c <Vector70+0x3c>)
 80046f8:	f003 fa7a 	bl	8007bf0 <_trace_isr_enter>
 80046fc:	f003 f9a8 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <Vector70+0x40>)
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	0989      	lsrs	r1, r1, #6
 8004706:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 800470a:	018a      	lsls	r2, r1, #6
 800470c:	609a      	str	r2, [r3, #8]
  if (dma.streams[1].func)
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <Vector70+0x44>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	b113      	cbz	r3, 800471a <Vector70+0x2a>
    dma.streams[1].func(dma.streams[1].param, flags);
 8004714:	4a07      	ldr	r2, [pc, #28]	; (8004734 <Vector70+0x44>)
 8004716:	6910      	ldr	r0, [r2, #16]
 8004718:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800471a:	f003 f9b9 	bl	8007a90 <_dbg_check_leave_isr>
 800471e:	4803      	ldr	r0, [pc, #12]	; (800472c <Vector70+0x3c>)
 8004720:	f003 fa8e 	bl	8007c40 <_trace_isr_leave>
 8004724:	f007 fa14 	bl	800bb50 <_port_irq_epilogue>
}
 8004728:	bd08      	pop	{r3, pc}
 800472a:	bf00      	nop
 800472c:	08014c38 	.word	0x08014c38
 8004730:	40026000 	.word	0x40026000
 8004734:	2000201c 	.word	0x2000201c
 8004738:	f3af 8000 	nop.w
 800473c:	f3af 8000 	nop.w

08004740 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8004740:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004742:	f004 fbfd 	bl	8008f40 <_stats_increase_irq>
 8004746:	480d      	ldr	r0, [pc, #52]	; (800477c <Vector74+0x3c>)
 8004748:	f003 fa52 	bl	8007bf0 <_trace_isr_enter>
 800474c:	f003 f980 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <Vector74+0x40>)
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	0c09      	lsrs	r1, r1, #16
 8004756:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 800475a:	040a      	lsls	r2, r1, #16
 800475c:	609a      	str	r2, [r3, #8]
  if (dma.streams[2].func)
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <Vector74+0x44>)
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	b113      	cbz	r3, 800476a <Vector74+0x2a>
    dma.streams[2].func(dma.streams[2].param, flags);
 8004764:	4a07      	ldr	r2, [pc, #28]	; (8004784 <Vector74+0x44>)
 8004766:	6990      	ldr	r0, [r2, #24]
 8004768:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800476a:	f003 f991 	bl	8007a90 <_dbg_check_leave_isr>
 800476e:	4803      	ldr	r0, [pc, #12]	; (800477c <Vector74+0x3c>)
 8004770:	f003 fa66 	bl	8007c40 <_trace_isr_leave>
 8004774:	f007 f9ec 	bl	800bb50 <_port_irq_epilogue>
}
 8004778:	bd08      	pop	{r3, pc}
 800477a:	bf00      	nop
 800477c:	08014c44 	.word	0x08014c44
 8004780:	40026000 	.word	0x40026000
 8004784:	2000201c 	.word	0x2000201c
 8004788:	f3af 8000 	nop.w
 800478c:	f3af 8000 	nop.w

08004790 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8004790:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004792:	f004 fbd5 	bl	8008f40 <_stats_increase_irq>
 8004796:	480d      	ldr	r0, [pc, #52]	; (80047cc <Vector78+0x3c>)
 8004798:	f003 fa2a 	bl	8007bf0 <_trace_isr_enter>
 800479c:	f003 f958 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <Vector78+0x40>)
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	0d89      	lsrs	r1, r1, #22
 80047a6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 80047aa:	058a      	lsls	r2, r1, #22
 80047ac:	609a      	str	r2, [r3, #8]
  if (dma.streams[3].func)
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <Vector78+0x44>)
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	b113      	cbz	r3, 80047ba <Vector78+0x2a>
    dma.streams[3].func(dma.streams[3].param, flags);
 80047b4:	4a07      	ldr	r2, [pc, #28]	; (80047d4 <Vector78+0x44>)
 80047b6:	6a10      	ldr	r0, [r2, #32]
 80047b8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80047ba:	f003 f969 	bl	8007a90 <_dbg_check_leave_isr>
 80047be:	4803      	ldr	r0, [pc, #12]	; (80047cc <Vector78+0x3c>)
 80047c0:	f003 fa3e 	bl	8007c40 <_trace_isr_leave>
 80047c4:	f007 f9c4 	bl	800bb50 <_port_irq_epilogue>
}
 80047c8:	bd08      	pop	{r3, pc}
 80047ca:	bf00      	nop
 80047cc:	08014c50 	.word	0x08014c50
 80047d0:	40026000 	.word	0x40026000
 80047d4:	2000201c 	.word	0x2000201c
 80047d8:	f3af 8000 	nop.w
 80047dc:	f3af 8000 	nop.w

080047e0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80047e0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80047e2:	f004 fbad 	bl	8008f40 <_stats_increase_irq>
 80047e6:	480c      	ldr	r0, [pc, #48]	; (8004818 <Vector7C+0x38>)
 80047e8:	f003 fa02 	bl	8007bf0 <_trace_isr_enter>
 80047ec:	f003 f930 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <Vector7C+0x3c>)
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80047f8:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <Vector7C+0x40>)
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	b113      	cbz	r3, 8004806 <Vector7C+0x26>
    dma.streams[4].func(dma.streams[4].param, flags);
 8004800:	4a07      	ldr	r2, [pc, #28]	; (8004820 <Vector7C+0x40>)
 8004802:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004804:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004806:	f003 f943 	bl	8007a90 <_dbg_check_leave_isr>
 800480a:	4803      	ldr	r0, [pc, #12]	; (8004818 <Vector7C+0x38>)
 800480c:	f003 fa18 	bl	8007c40 <_trace_isr_leave>
 8004810:	f007 f99e 	bl	800bb50 <_port_irq_epilogue>
}
 8004814:	bd08      	pop	{r3, pc}
 8004816:	bf00      	nop
 8004818:	08014c5c 	.word	0x08014c5c
 800481c:	40026000 	.word	0x40026000
 8004820:	2000201c 	.word	0x2000201c
 8004824:	f3af 8000 	nop.w
 8004828:	f3af 8000 	nop.w
 800482c:	f3af 8000 	nop.w

08004830 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8004830:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004832:	f004 fb85 	bl	8008f40 <_stats_increase_irq>
 8004836:	480d      	ldr	r0, [pc, #52]	; (800486c <Vector80+0x3c>)
 8004838:	f003 f9da 	bl	8007bf0 <_trace_isr_enter>
 800483c:	f003 f908 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <Vector80+0x40>)
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	0989      	lsrs	r1, r1, #6
 8004846:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 800484a:	018a      	lsls	r2, r1, #6
 800484c:	60da      	str	r2, [r3, #12]
  if (dma.streams[5].func)
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <Vector80+0x44>)
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	b113      	cbz	r3, 800485a <Vector80+0x2a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8004854:	4a07      	ldr	r2, [pc, #28]	; (8004874 <Vector80+0x44>)
 8004856:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8004858:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800485a:	f003 f919 	bl	8007a90 <_dbg_check_leave_isr>
 800485e:	4803      	ldr	r0, [pc, #12]	; (800486c <Vector80+0x3c>)
 8004860:	f003 f9ee 	bl	8007c40 <_trace_isr_leave>
 8004864:	f007 f974 	bl	800bb50 <_port_irq_epilogue>
}
 8004868:	bd08      	pop	{r3, pc}
 800486a:	bf00      	nop
 800486c:	08014c68 	.word	0x08014c68
 8004870:	40026000 	.word	0x40026000
 8004874:	2000201c 	.word	0x2000201c
 8004878:	f3af 8000 	nop.w
 800487c:	f3af 8000 	nop.w

08004880 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8004880:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004882:	f004 fb5d 	bl	8008f40 <_stats_increase_irq>
 8004886:	480d      	ldr	r0, [pc, #52]	; (80048bc <Vector84+0x3c>)
 8004888:	f003 f9b2 	bl	8007bf0 <_trace_isr_enter>
 800488c:	f003 f8e0 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <Vector84+0x40>)
 8004892:	6859      	ldr	r1, [r3, #4]
 8004894:	0c09      	lsrs	r1, r1, #16
 8004896:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 800489a:	040a      	lsls	r2, r1, #16
 800489c:	60da      	str	r2, [r3, #12]
  if (dma.streams[6].func)
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <Vector84+0x44>)
 80048a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a2:	b113      	cbz	r3, 80048aa <Vector84+0x2a>
    dma.streams[6].func(dma.streams[6].param, flags);
 80048a4:	4a07      	ldr	r2, [pc, #28]	; (80048c4 <Vector84+0x44>)
 80048a6:	6b90      	ldr	r0, [r2, #56]	; 0x38
 80048a8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80048aa:	f003 f8f1 	bl	8007a90 <_dbg_check_leave_isr>
 80048ae:	4803      	ldr	r0, [pc, #12]	; (80048bc <Vector84+0x3c>)
 80048b0:	f003 f9c6 	bl	8007c40 <_trace_isr_leave>
 80048b4:	f007 f94c 	bl	800bb50 <_port_irq_epilogue>
}
 80048b8:	bd08      	pop	{r3, pc}
 80048ba:	bf00      	nop
 80048bc:	08014c74 	.word	0x08014c74
 80048c0:	40026000 	.word	0x40026000
 80048c4:	2000201c 	.word	0x2000201c
 80048c8:	f3af 8000 	nop.w
 80048cc:	f3af 8000 	nop.w

080048d0 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80048d0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80048d2:	f004 fb35 	bl	8008f40 <_stats_increase_irq>
 80048d6:	480d      	ldr	r0, [pc, #52]	; (800490c <VectorFC+0x3c>)
 80048d8:	f003 f98a 	bl	8007bf0 <_trace_isr_enter>
 80048dc:	f003 f8b8 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <VectorFC+0x40>)
 80048e2:	6859      	ldr	r1, [r3, #4]
 80048e4:	0d89      	lsrs	r1, r1, #22
 80048e6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 80048ea:	058a      	lsls	r2, r1, #22
 80048ec:	60da      	str	r2, [r3, #12]
  if (dma.streams[7].func)
 80048ee:	4b09      	ldr	r3, [pc, #36]	; (8004914 <VectorFC+0x44>)
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	b113      	cbz	r3, 80048fa <VectorFC+0x2a>
    dma.streams[7].func(dma.streams[7].param, flags);
 80048f4:	4a07      	ldr	r2, [pc, #28]	; (8004914 <VectorFC+0x44>)
 80048f6:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80048f8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80048fa:	f003 f8c9 	bl	8007a90 <_dbg_check_leave_isr>
 80048fe:	4803      	ldr	r0, [pc, #12]	; (800490c <VectorFC+0x3c>)
 8004900:	f003 f99e 	bl	8007c40 <_trace_isr_leave>
 8004904:	f007 f924 	bl	800bb50 <_port_irq_epilogue>
}
 8004908:	bd08      	pop	{r3, pc}
 800490a:	bf00      	nop
 800490c:	08014c80 	.word	0x08014c80
 8004910:	40026000 	.word	0x40026000
 8004914:	2000201c 	.word	0x2000201c
 8004918:	f3af 8000 	nop.w
 800491c:	f3af 8000 	nop.w

08004920 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8004920:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004922:	f004 fb0d 	bl	8008f40 <_stats_increase_irq>
 8004926:	480c      	ldr	r0, [pc, #48]	; (8004958 <Vector120+0x38>)
 8004928:	f003 f962 	bl	8007bf0 <_trace_isr_enter>
 800492c:	f003 f890 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <Vector120+0x3c>)
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8004938:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <Vector120+0x40>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	b113      	cbz	r3, 8004946 <Vector120+0x26>
    dma.streams[8].func(dma.streams[8].param, flags);
 8004940:	4a07      	ldr	r2, [pc, #28]	; (8004960 <Vector120+0x40>)
 8004942:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8004944:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004946:	f003 f8a3 	bl	8007a90 <_dbg_check_leave_isr>
 800494a:	4803      	ldr	r0, [pc, #12]	; (8004958 <Vector120+0x38>)
 800494c:	f003 f978 	bl	8007c40 <_trace_isr_leave>
 8004950:	f007 f8fe 	bl	800bb50 <_port_irq_epilogue>
}
 8004954:	bd08      	pop	{r3, pc}
 8004956:	bf00      	nop
 8004958:	08014c8c 	.word	0x08014c8c
 800495c:	40026400 	.word	0x40026400
 8004960:	2000201c 	.word	0x2000201c
 8004964:	f3af 8000 	nop.w
 8004968:	f3af 8000 	nop.w
 800496c:	f3af 8000 	nop.w

08004970 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8004970:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004972:	f004 fae5 	bl	8008f40 <_stats_increase_irq>
 8004976:	480d      	ldr	r0, [pc, #52]	; (80049ac <Vector124+0x3c>)
 8004978:	f003 f93a 	bl	8007bf0 <_trace_isr_enter>
 800497c:	f003 f868 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <Vector124+0x40>)
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	0989      	lsrs	r1, r1, #6
 8004986:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 800498a:	018a      	lsls	r2, r1, #6
 800498c:	609a      	str	r2, [r3, #8]
  if (dma.streams[9].func)
 800498e:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <Vector124+0x44>)
 8004990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004992:	b113      	cbz	r3, 800499a <Vector124+0x2a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8004994:	4a07      	ldr	r2, [pc, #28]	; (80049b4 <Vector124+0x44>)
 8004996:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8004998:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800499a:	f003 f879 	bl	8007a90 <_dbg_check_leave_isr>
 800499e:	4803      	ldr	r0, [pc, #12]	; (80049ac <Vector124+0x3c>)
 80049a0:	f003 f94e 	bl	8007c40 <_trace_isr_leave>
 80049a4:	f007 f8d4 	bl	800bb50 <_port_irq_epilogue>
}
 80049a8:	bd08      	pop	{r3, pc}
 80049aa:	bf00      	nop
 80049ac:	08014c98 	.word	0x08014c98
 80049b0:	40026400 	.word	0x40026400
 80049b4:	2000201c 	.word	0x2000201c
 80049b8:	f3af 8000 	nop.w
 80049bc:	f3af 8000 	nop.w

080049c0 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80049c0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80049c2:	f004 fabd 	bl	8008f40 <_stats_increase_irq>
 80049c6:	480d      	ldr	r0, [pc, #52]	; (80049fc <Vector128+0x3c>)
 80049c8:	f003 f912 	bl	8007bf0 <_trace_isr_enter>
 80049cc:	f003 f840 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <Vector128+0x40>)
 80049d2:	6819      	ldr	r1, [r3, #0]
 80049d4:	0c09      	lsrs	r1, r1, #16
 80049d6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 80049da:	040a      	lsls	r2, r1, #16
 80049dc:	609a      	str	r2, [r3, #8]
  if (dma.streams[10].func)
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <Vector128+0x44>)
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	b113      	cbz	r3, 80049ea <Vector128+0x2a>
    dma.streams[10].func(dma.streams[10].param, flags);
 80049e4:	4a07      	ldr	r2, [pc, #28]	; (8004a04 <Vector128+0x44>)
 80049e6:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80049e8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80049ea:	f003 f851 	bl	8007a90 <_dbg_check_leave_isr>
 80049ee:	4803      	ldr	r0, [pc, #12]	; (80049fc <Vector128+0x3c>)
 80049f0:	f003 f926 	bl	8007c40 <_trace_isr_leave>
 80049f4:	f007 f8ac 	bl	800bb50 <_port_irq_epilogue>
}
 80049f8:	bd08      	pop	{r3, pc}
 80049fa:	bf00      	nop
 80049fc:	08014ca4 	.word	0x08014ca4
 8004a00:	40026400 	.word	0x40026400
 8004a04:	2000201c 	.word	0x2000201c
 8004a08:	f3af 8000 	nop.w
 8004a0c:	f3af 8000 	nop.w

08004a10 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8004a10:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004a12:	f004 fa95 	bl	8008f40 <_stats_increase_irq>
 8004a16:	480d      	ldr	r0, [pc, #52]	; (8004a4c <Vector12C+0x3c>)
 8004a18:	f003 f8ea 	bl	8007bf0 <_trace_isr_enter>
 8004a1c:	f003 f818 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <Vector12C+0x40>)
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	0d89      	lsrs	r1, r1, #22
 8004a26:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 8004a2a:	058a      	lsls	r2, r1, #22
 8004a2c:	609a      	str	r2, [r3, #8]
  if (dma.streams[11].func)
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <Vector12C+0x44>)
 8004a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a32:	b113      	cbz	r3, 8004a3a <Vector12C+0x2a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8004a34:	4a07      	ldr	r2, [pc, #28]	; (8004a54 <Vector12C+0x44>)
 8004a36:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004a38:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004a3a:	f003 f829 	bl	8007a90 <_dbg_check_leave_isr>
 8004a3e:	4803      	ldr	r0, [pc, #12]	; (8004a4c <Vector12C+0x3c>)
 8004a40:	f003 f8fe 	bl	8007c40 <_trace_isr_leave>
 8004a44:	f007 f884 	bl	800bb50 <_port_irq_epilogue>
}
 8004a48:	bd08      	pop	{r3, pc}
 8004a4a:	bf00      	nop
 8004a4c:	08014cb0 	.word	0x08014cb0
 8004a50:	40026400 	.word	0x40026400
 8004a54:	2000201c 	.word	0x2000201c
 8004a58:	f3af 8000 	nop.w
 8004a5c:	f3af 8000 	nop.w

08004a60 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8004a60:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004a62:	f004 fa6d 	bl	8008f40 <_stats_increase_irq>
 8004a66:	480c      	ldr	r0, [pc, #48]	; (8004a98 <Vector130+0x38>)
 8004a68:	f003 f8c2 	bl	8007bf0 <_trace_isr_enter>
 8004a6c:	f002 fff0 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8004a70:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <Vector130+0x3c>)
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8004a78:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8004a7a:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <Vector130+0x40>)
 8004a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a7e:	b113      	cbz	r3, 8004a86 <Vector130+0x26>
    dma.streams[12].func(dma.streams[12].param, flags);
 8004a80:	4a07      	ldr	r2, [pc, #28]	; (8004aa0 <Vector130+0x40>)
 8004a82:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004a84:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004a86:	f003 f803 	bl	8007a90 <_dbg_check_leave_isr>
 8004a8a:	4803      	ldr	r0, [pc, #12]	; (8004a98 <Vector130+0x38>)
 8004a8c:	f003 f8d8 	bl	8007c40 <_trace_isr_leave>
 8004a90:	f007 f85e 	bl	800bb50 <_port_irq_epilogue>
}
 8004a94:	bd08      	pop	{r3, pc}
 8004a96:	bf00      	nop
 8004a98:	08014cbc 	.word	0x08014cbc
 8004a9c:	40026400 	.word	0x40026400
 8004aa0:	2000201c 	.word	0x2000201c
 8004aa4:	f3af 8000 	nop.w
 8004aa8:	f3af 8000 	nop.w
 8004aac:	f3af 8000 	nop.w

08004ab0 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8004ab0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004ab2:	f004 fa45 	bl	8008f40 <_stats_increase_irq>
 8004ab6:	480d      	ldr	r0, [pc, #52]	; (8004aec <Vector150+0x3c>)
 8004ab8:	f003 f89a 	bl	8007bf0 <_trace_isr_enter>
 8004abc:	f002 ffc8 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <Vector150+0x40>)
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	0989      	lsrs	r1, r1, #6
 8004ac6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 8004aca:	018a      	lsls	r2, r1, #6
 8004acc:	60da      	str	r2, [r3, #12]
  if (dma.streams[13].func)
 8004ace:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <Vector150+0x44>)
 8004ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad2:	b113      	cbz	r3, 8004ada <Vector150+0x2a>
    dma.streams[13].func(dma.streams[13].param, flags);
 8004ad4:	4a07      	ldr	r2, [pc, #28]	; (8004af4 <Vector150+0x44>)
 8004ad6:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8004ad8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004ada:	f002 ffd9 	bl	8007a90 <_dbg_check_leave_isr>
 8004ade:	4803      	ldr	r0, [pc, #12]	; (8004aec <Vector150+0x3c>)
 8004ae0:	f003 f8ae 	bl	8007c40 <_trace_isr_leave>
 8004ae4:	f007 f834 	bl	800bb50 <_port_irq_epilogue>
}
 8004ae8:	bd08      	pop	{r3, pc}
 8004aea:	bf00      	nop
 8004aec:	08014cc8 	.word	0x08014cc8
 8004af0:	40026400 	.word	0x40026400
 8004af4:	2000201c 	.word	0x2000201c
 8004af8:	f3af 8000 	nop.w
 8004afc:	f3af 8000 	nop.w

08004b00 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8004b00:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004b02:	f004 fa1d 	bl	8008f40 <_stats_increase_irq>
 8004b06:	480d      	ldr	r0, [pc, #52]	; (8004b3c <Vector154+0x3c>)
 8004b08:	f003 f872 	bl	8007bf0 <_trace_isr_enter>
 8004b0c:	f002 ffa0 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <Vector154+0x40>)
 8004b12:	6859      	ldr	r1, [r3, #4]
 8004b14:	0c09      	lsrs	r1, r1, #16
 8004b16:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 8004b1a:	040a      	lsls	r2, r1, #16
 8004b1c:	60da      	str	r2, [r3, #12]
  if (dma.streams[14].func)
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <Vector154+0x44>)
 8004b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b22:	b113      	cbz	r3, 8004b2a <Vector154+0x2a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8004b24:	4a07      	ldr	r2, [pc, #28]	; (8004b44 <Vector154+0x44>)
 8004b26:	6f90      	ldr	r0, [r2, #120]	; 0x78
 8004b28:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004b2a:	f002 ffb1 	bl	8007a90 <_dbg_check_leave_isr>
 8004b2e:	4803      	ldr	r0, [pc, #12]	; (8004b3c <Vector154+0x3c>)
 8004b30:	f003 f886 	bl	8007c40 <_trace_isr_leave>
 8004b34:	f007 f80c 	bl	800bb50 <_port_irq_epilogue>
}
 8004b38:	bd08      	pop	{r3, pc}
 8004b3a:	bf00      	nop
 8004b3c:	08014cd4 	.word	0x08014cd4
 8004b40:	40026400 	.word	0x40026400
 8004b44:	2000201c 	.word	0x2000201c
 8004b48:	f3af 8000 	nop.w
 8004b4c:	f3af 8000 	nop.w

08004b50 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8004b50:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8004b52:	f004 f9f5 	bl	8008f40 <_stats_increase_irq>
 8004b56:	480d      	ldr	r0, [pc, #52]	; (8004b8c <Vector158+0x3c>)
 8004b58:	f003 f84a 	bl	8007bf0 <_trace_isr_enter>
 8004b5c:	f002 ff78 	bl	8007a50 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <Vector158+0x40>)
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	0d89      	lsrs	r1, r1, #22
 8004b66:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8004b6a:	058a      	lsls	r2, r1, #22
 8004b6c:	60da      	str	r2, [r3, #12]
  if (dma.streams[15].func)
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <Vector158+0x44>)
 8004b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b72:	b11b      	cbz	r3, 8004b7c <Vector158+0x2c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8004b74:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <Vector158+0x44>)
 8004b76:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 8004b7a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004b7c:	f002 ff88 	bl	8007a90 <_dbg_check_leave_isr>
 8004b80:	4802      	ldr	r0, [pc, #8]	; (8004b8c <Vector158+0x3c>)
 8004b82:	f003 f85d 	bl	8007c40 <_trace_isr_leave>
 8004b86:	f006 ffe3 	bl	800bb50 <_port_irq_epilogue>
}
 8004b8a:	bd08      	pop	{r3, pc}
 8004b8c:	08014ce0 	.word	0x08014ce0
 8004b90:	40026400 	.word	0x40026400
 8004b94:	2000201c 	.word	0x2000201c
 8004b98:	f3af 8000 	nop.w
 8004b9c:	f3af 8000 	nop.w

08004ba0 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma.allocated_mask = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <dmaInit+0x3c>)
 8004ba4:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8004ba6:	e00d      	b.n	8004bc4 <dmaInit+0x24>
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8004ba8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8004bac:	0091      	lsls	r1, r2, #2
 8004bae:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <dmaInit+0x40>)
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	6011      	str	r1, [r2, #0]
    dma.streams[i].func = NULL;
 8004bba:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <dmaInit+0x3c>)
 8004bbc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004bc0:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	2b0f      	cmp	r3, #15
 8004bc6:	d9ef      	bls.n	8004ba8 <dmaInit+0x8>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8004bc8:	4a06      	ldr	r2, [pc, #24]	; (8004be4 <dmaInit+0x44>)
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	6093      	str	r3, [r2, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8004bd0:	60d3      	str	r3, [r2, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8004bd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bd6:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8004bd8:	60d3      	str	r3, [r2, #12]
}
 8004bda:	4770      	bx	lr
 8004bdc:	2000201c 	.word	0x2000201c
 8004be0:	08014c2c 	.word	0x08014c2c
 8004be4:	40026000 	.word	0x40026000
 8004be8:	f3af 8000 	nop.w
 8004bec:	f3af 8000 	nop.w

08004bf0 <dmaStreamAllocI>:
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
                                          uint32_t priority,
                                          stm32_dmaisr_t func,
                                          void *param) {
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	460e      	mov	r6, r1
 8004bf6:	4615      	mov	r5, r2
 8004bf8:	461f      	mov	r7, r3
  uint32_t i, startid, endid;

  osalDbgCheckClassI();
 8004bfa:	f002 ff69 	bl	8007ad0 <chDbgCheckClassI>

  if (id < STM32_DMA_STREAMS) {
 8004bfe:	2c0f      	cmp	r4, #15
 8004c00:	d805      	bhi.n	8004c0e <dmaStreamAllocI+0x1e>
  else {
    osalDbgCheck(false);
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
 8004c02:	4623      	mov	r3, r4
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	d907      	bls.n	8004c18 <dmaStreamAllocI+0x28>

      return dmastp;
    }
  }

  return NULL;
 8004c08:	2400      	movs	r4, #0
}
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osalDbgCheck(false);
 8004c0e:	4830      	ldr	r0, [pc, #192]	; (8004cd0 <dmaStreamAllocI+0xe0>)
 8004c10:	f002 fd2e 	bl	8007670 <chSysHalt>
    return NULL;
 8004c14:	2400      	movs	r4, #0
 8004c16:	e7f8      	b.n	8004c0a <dmaStreamAllocI+0x1a>
    uint32_t mask = (1U << i);
 8004c18:	2201      	movs	r2, #1
 8004c1a:	409a      	lsls	r2, r3
    if ((dma.allocated_mask & mask) == 0U) {
 8004c1c:	492d      	ldr	r1, [pc, #180]	; (8004cd4 <dmaStreamAllocI+0xe4>)
 8004c1e:	6809      	ldr	r1, [r1, #0]
 8004c20:	4211      	tst	r1, r2
 8004c22:	d001      	beq.n	8004c28 <dmaStreamAllocI+0x38>
  for (i = startid; i <= endid; i++) {
 8004c24:	3301      	adds	r3, #1
 8004c26:	e7ed      	b.n	8004c04 <dmaStreamAllocI+0x14>
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8004c28:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8004c2c:	00a0      	lsls	r0, r4, #2
 8004c2e:	4c2a      	ldr	r4, [pc, #168]	; (8004cd8 <dmaStreamAllocI+0xe8>)
 8004c30:	4404      	add	r4, r0
      dma.streams[i].func  = func;
 8004c32:	4828      	ldr	r0, [pc, #160]	; (8004cd4 <dmaStreamAllocI+0xe4>)
 8004c34:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
 8004c38:	f8cc 5004 	str.w	r5, [ip, #4]
      dma.streams[i].param = param;
 8004c3c:	f8cc 7008 	str.w	r7, [ip, #8]
      dma.allocated_mask  |= mask;
 8004c40:	4311      	orrs	r1, r2
 8004c42:	6001      	str	r1, [r0, #0]
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8004c44:	f012 0fff 	tst.w	r2, #255	; 0xff
 8004c48:	d009      	beq.n	8004c5e <dmaStreamAllocI+0x6e>
        rccEnableDMA1(true);
 8004c4a:	4924      	ldr	r1, [pc, #144]	; (8004cdc <dmaStreamAllocI+0xec>)
 8004c4c:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8004c4e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8004c52:	6308      	str	r0, [r1, #48]	; 0x30
 8004c54:	6d08      	ldr	r0, [r1, #80]	; 0x50
 8004c56:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8004c5a:	6508      	str	r0, [r1, #80]	; 0x50
 8004c5c:	6d09      	ldr	r1, [r1, #80]	; 0x50
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
 8004c5e:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 8004c62:	d009      	beq.n	8004c78 <dmaStreamAllocI+0x88>
        rccEnableDMA2(true);
 8004c64:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <dmaStreamAllocI+0xec>)
 8004c66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004c68:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8004c6c:	6311      	str	r1, [r2, #48]	; 0x30
 8004c6e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004c70:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8004c74:	6511      	str	r1, [r2, #80]	; 0x50
 8004c76:	6d12      	ldr	r2, [r2, #80]	; 0x50
      dmaStreamDisable(dmastp);
 8004c78:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8004c7c:	0091      	lsls	r1, r2, #2
 8004c7e:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <dmaStreamAllocI+0xf0>)
 8004c80:	440a      	add	r2, r1
 8004c82:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 8004c86:	680a      	ldr	r2, [r1, #0]
 8004c88:	f022 021f 	bic.w	r2, r2, #31
 8004c8c:	600a      	str	r2, [r1, #0]
 8004c8e:	680a      	ldr	r2, [r1, #0]
 8004c90:	f012 0f01 	tst.w	r2, #1
 8004c94:	d1fb      	bne.n	8004c8e <dmaStreamAllocI+0x9e>
 8004c96:	0058      	lsls	r0, r3, #1
 8004c98:	4418      	add	r0, r3
 8004c9a:	0087      	lsls	r7, r0, #2
 8004c9c:	4a10      	ldr	r2, [pc, #64]	; (8004ce0 <dmaStreamAllocI+0xf0>)
 8004c9e:	443a      	add	r2, r7
 8004ca0:	f892 70c9 	ldrb.w	r7, [r2, #201]	; 0xc9
 8004ca4:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
 8004ca8:	223d      	movs	r2, #61	; 0x3d
 8004caa:	40ba      	lsls	r2, r7
 8004cac:	6002      	str	r2, [r0, #0]
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8004cae:	2200      	movs	r2, #0
 8004cb0:	600a      	str	r2, [r1, #0]
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8004cb2:	2221      	movs	r2, #33	; 0x21
 8004cb4:	614a      	str	r2, [r1, #20]
      if (func != NULL) {
 8004cb6:	2d00      	cmp	r5, #0
 8004cb8:	d0a7      	beq.n	8004c0a <dmaStreamAllocI+0x1a>
        nvicEnableVector(dmastp->vector, priority);
 8004cba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004cbe:	009a      	lsls	r2, r3, #2
 8004cc0:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <dmaStreamAllocI+0xf0>)
 8004cc2:	4413      	add	r3, r2
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	f893 00cb 	ldrb.w	r0, [r3, #203]	; 0xcb
 8004cca:	f7ff f9d1 	bl	8004070 <nvicEnableVector>
 8004cce:	e79c      	b.n	8004c0a <dmaStreamAllocI+0x1a>
 8004cd0:	08014dac 	.word	0x08014dac
 8004cd4:	2000201c 	.word	0x2000201c
 8004cd8:	08014cec 	.word	0x08014cec
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	08014c2c 	.word	0x08014c2c
 8004ce4:	f3af 8000 	nop.w
 8004ce8:	f3af 8000 	nop.w
 8004cec:	f3af 8000 	nop.w

08004cf0 <dmaStreamAlloc>:
 * @api
 */
const stm32_dma_stream_t *dmaStreamAlloc(uint32_t id,
                                         uint32_t priority,
                                         stm32_dmaisr_t func,
                                         void *param) {
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	460d      	mov	r5, r1
 8004cf6:	4616      	mov	r6, r2
 8004cf8:	461f      	mov	r7, r3
 8004cfa:	2320      	movs	r3, #32
 8004cfc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8004d00:	f004 f946 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8004d04:	f002 fe44 	bl	8007990 <_dbg_check_lock>
  const stm32_dma_stream_t *dmastp;

  osalSysLock();
  dmastp = dmaStreamAllocI(id, priority, func, param);
 8004d08:	463b      	mov	r3, r7
 8004d0a:	4632      	mov	r2, r6
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f7ff ff6e 	bl	8004bf0 <dmaStreamAllocI>
 8004d14:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8004d16:	f002 fe53 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004d1a:	f004 f941 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <dmaStreamAlloc+0x54>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d004      	beq.n	8004d30 <dmaStreamAlloc+0x40>
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	6899      	ldr	r1, [r3, #8]
 8004d2a:	6893      	ldr	r3, [r2, #8]
 8004d2c:	4299      	cmp	r1, r3
 8004d2e:	d304      	bcc.n	8004d3a <dmaStreamAlloc+0x4a>
 8004d30:	2300      	movs	r3, #0
 8004d32:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();

  return dmastp;
}
 8004d36:	4620      	mov	r0, r4
 8004d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d3a:	4803      	ldr	r0, [pc, #12]	; (8004d48 <dmaStreamAlloc+0x58>)
 8004d3c:	f002 fc98 	bl	8007670 <chSysHalt>
 8004d40:	e7f6      	b.n	8004d30 <dmaStreamAlloc+0x40>
 8004d42:	bf00      	nop
 8004d44:	20004f68 	.word	0x20004f68
 8004d48:	08014dbc 	.word	0x08014dbc
 8004d4c:	f3af 8000 	nop.w

08004d50 <dmaStreamFreeI>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @iclass
 */
void dmaStreamFreeI(const stm32_dma_stream_t *dmastp) {
 8004d50:	b510      	push	{r4, lr}

  osalDbgCheck(dmastp != NULL);
 8004d52:	4604      	mov	r4, r0
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d02d      	beq.n	8004db4 <dmaStreamFreeI+0x64>

  /* Check if the streams is not taken.*/
  osalDbgAssert((dma.allocated_mask & (1U << dmastp->selfindex)) != 0U,
 8004d58:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <dmaStreamFreeI+0x74>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	7aa1      	ldrb	r1, [r4, #10]
 8004d5e:	2301      	movs	r3, #1
 8004d60:	408b      	lsls	r3, r1
 8004d62:	421a      	tst	r2, r3
 8004d64:	d02a      	beq.n	8004dbc <dmaStreamFreeI+0x6c>
                "not allocated");

  /* Disables the associated IRQ vector.*/
  nvicDisableVector(dmastp->vector);
 8004d66:	7ae0      	ldrb	r0, [r4, #11]
 8004d68:	f7ff f99a 	bl	80040a0 <nvicDisableVector>

  /* Marks the stream as not allocated.*/
  dma.allocated_mask &= ~(1U << dmastp->selfindex);
 8004d6c:	7aa2      	ldrb	r2, [r4, #10]
 8004d6e:	2301      	movs	r3, #1
 8004d70:	fa03 f202 	lsl.w	r2, r3, r2
 8004d74:	4913      	ldr	r1, [pc, #76]	; (8004dc4 <dmaStreamFreeI+0x74>)
 8004d76:	680b      	ldr	r3, [r1, #0]
 8004d78:	ea23 0302 	bic.w	r3, r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8004d7e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004d82:	d109      	bne.n	8004d98 <dmaStreamFreeI+0x48>
    rccDisableDMA1();
 8004d84:	4a10      	ldr	r2, [pc, #64]	; (8004dc8 <dmaStreamFreeI+0x78>)
 8004d86:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004d88:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8004d8c:	6311      	str	r1, [r2, #48]	; 0x30
 8004d8e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004d90:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8004d94:	6511      	str	r1, [r2, #80]	; 0x50
 8004d96:	6d12      	ldr	r2, [r2, #80]	; 0x50
  }
  if ((dma.allocated_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 8004d98:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8004d9c:	d109      	bne.n	8004db2 <dmaStreamFreeI+0x62>
    rccDisableDMA2();
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <dmaStreamFreeI+0x78>)
 8004da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
 8004da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004daa:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8004dae:	651a      	str	r2, [r3, #80]	; 0x50
 8004db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  /* Shutting down DMAMUX if present.*/
  if (dma.allocated_mask == 0U) {
    rccDisableDMAMUX();
  }
#endif
}
 8004db2:	bd10      	pop	{r4, pc}
  osalDbgCheck(dmastp != NULL);
 8004db4:	4805      	ldr	r0, [pc, #20]	; (8004dcc <dmaStreamFreeI+0x7c>)
 8004db6:	f002 fc5b 	bl	8007670 <chSysHalt>
 8004dba:	e7cd      	b.n	8004d58 <dmaStreamFreeI+0x8>
  osalDbgAssert((dma.allocated_mask & (1U << dmastp->selfindex)) != 0U,
 8004dbc:	4803      	ldr	r0, [pc, #12]	; (8004dcc <dmaStreamFreeI+0x7c>)
 8004dbe:	f002 fc57 	bl	8007670 <chSysHalt>
 8004dc2:	e7d0      	b.n	8004d66 <dmaStreamFreeI+0x16>
 8004dc4:	2000201c 	.word	0x2000201c
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	08014dc8 	.word	0x08014dc8

08004dd0 <dmaStreamFree>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @api
 */
void dmaStreamFree(const stm32_dma_stream_t *dmastp) {
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	2320      	movs	r3, #32
 8004dd6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8004dda:	f004 f8d9 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8004dde:	f002 fdd7 	bl	8007990 <_dbg_check_lock>

  osalSysLock();
  dmaStreamFreeI(dmastp);
 8004de2:	4620      	mov	r0, r4
 8004de4:	f7ff ffb4 	bl	8004d50 <dmaStreamFreeI>
  _dbg_check_unlock();
 8004de8:	f002 fdea 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004dec:	f004 f8d8 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004df0:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <dmaStreamFree+0x44>)
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d004      	beq.n	8004e02 <dmaStreamFree+0x32>
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	6899      	ldr	r1, [r3, #8]
 8004dfc:	6893      	ldr	r3, [r2, #8]
 8004dfe:	4299      	cmp	r1, r3
 8004e00:	d303      	bcc.n	8004e0a <dmaStreamFree+0x3a>
 8004e02:	2300      	movs	r3, #0
 8004e04:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8004e08:	bd10      	pop	{r4, pc}
 8004e0a:	4803      	ldr	r0, [pc, #12]	; (8004e18 <dmaStreamFree+0x48>)
 8004e0c:	f002 fc30 	bl	8007670 <chSysHalt>
 8004e10:	e7f7      	b.n	8004e02 <dmaStreamFree+0x32>
 8004e12:	bf00      	nop
 8004e14:	20004f68 	.word	0x20004f68
 8004e18:	08014dbc 	.word	0x08014dbc
 8004e1c:	00000000 	.word	0x00000000

08004e20 <extiEnableGroup1>:
void extiEnableGroup1(uint32_t mask, extimode_t mode) {

  /* Masked out lines must not be touched by this driver.*/
  osalDbgAssert((mask & STM32_EXTI_IMR1_MASK) == 0U, "fixed lines");

  if ((mode & EXTI_MODE_EDGES_MASK) == 0U) {
 8004e20:	f011 0f03 	tst.w	r1, #3
 8004e24:	d019      	beq.n	8004e5a <extiEnableGroup1+0x3a>
    EXTI->FTSR1 &= ~mask;
    EXTI->PR1    =  mask;
  }
  else {
    /* Programming edge registers.*/
    if (mode & EXTI_MODE_RISING_EDGE) {
 8004e26:	f011 0f01 	tst.w	r1, #1
 8004e2a:	d026      	beq.n	8004e7a <extiEnableGroup1+0x5a>
      EXTI->RTSR1 |= mask;
 8004e2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e2e:	6893      	ldr	r3, [r2, #8]
 8004e30:	4303      	orrs	r3, r0
 8004e32:	6093      	str	r3, [r2, #8]
    }
    else {
      EXTI->RTSR1 &= ~mask;
    }
    if (mode & EXTI_MODE_FALLING_EDGE) {
 8004e34:	f011 0f02 	tst.w	r1, #2
 8004e38:	d025      	beq.n	8004e86 <extiEnableGroup1+0x66>
      EXTI->FTSR1 |= mask;
 8004e3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e3c:	68d3      	ldr	r3, [r2, #12]
 8004e3e:	4303      	orrs	r3, r0
 8004e40:	60d3      	str	r3, [r2, #12]
    else {
      EXTI->FTSR1 &= ~mask;
    }

    /* Programming interrupt and event registers.*/
    if ((mode & EXTI_MODE_ACTION_MASK) == EXTI_MODE_ACTION_INTERRUPT) {
 8004e42:	f011 0f04 	tst.w	r1, #4
 8004e46:	d024      	beq.n	8004e92 <extiEnableGroup1+0x72>
      EXTI->IMR1 |= mask;
      EXTI->EMR1 &= ~mask;
    }
    else {
      EXTI->EMR1 |= mask;
 8004e48:	4b16      	ldr	r3, [pc, #88]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	4302      	orrs	r2, r0
 8004e4e:	605a      	str	r2, [r3, #4]
      EXTI->IMR1 &= ~mask;
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	ea22 0000 	bic.w	r0, r2, r0
 8004e56:	6018      	str	r0, [r3, #0]
    }
  }
}
 8004e58:	4770      	bx	lr
    EXTI->IMR1  &= ~mask;
 8004e5a:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	43c2      	mvns	r2, r0
 8004e60:	4011      	ands	r1, r2
 8004e62:	6019      	str	r1, [r3, #0]
    EXTI->EMR1  &= ~mask;
 8004e64:	6859      	ldr	r1, [r3, #4]
 8004e66:	4011      	ands	r1, r2
 8004e68:	6059      	str	r1, [r3, #4]
    EXTI->RTSR1 &= ~mask;
 8004e6a:	6899      	ldr	r1, [r3, #8]
 8004e6c:	4011      	ands	r1, r2
 8004e6e:	6099      	str	r1, [r3, #8]
    EXTI->FTSR1 &= ~mask;
 8004e70:	68d9      	ldr	r1, [r3, #12]
 8004e72:	400a      	ands	r2, r1
 8004e74:	60da      	str	r2, [r3, #12]
    EXTI->PR1    =  mask;
 8004e76:	6158      	str	r0, [r3, #20]
 8004e78:	4770      	bx	lr
      EXTI->RTSR1 &= ~mask;
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e7c:	6893      	ldr	r3, [r2, #8]
 8004e7e:	ea23 0300 	bic.w	r3, r3, r0
 8004e82:	6093      	str	r3, [r2, #8]
 8004e84:	e7d6      	b.n	8004e34 <extiEnableGroup1+0x14>
      EXTI->FTSR1 &= ~mask;
 8004e86:	4a07      	ldr	r2, [pc, #28]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e88:	68d3      	ldr	r3, [r2, #12]
 8004e8a:	ea23 0300 	bic.w	r3, r3, r0
 8004e8e:	60d3      	str	r3, [r2, #12]
 8004e90:	e7d7      	b.n	8004e42 <extiEnableGroup1+0x22>
      EXTI->IMR1 |= mask;
 8004e92:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <extiEnableGroup1+0x84>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4302      	orrs	r2, r0
 8004e98:	601a      	str	r2, [r3, #0]
      EXTI->EMR1 &= ~mask;
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	ea22 0000 	bic.w	r0, r2, r0
 8004ea0:	6058      	str	r0, [r3, #4]
 8004ea2:	4770      	bx	lr
 8004ea4:	40013c00 	.word	0x40013c00
 8004ea8:	f3af 8000 	nop.w
 8004eac:	f3af 8000 	nop.w

08004eb0 <extiEnableLine>:
 * @param[in] line      line to be initialized
 * @param[in] mode      initialization mode
 *
 * @api
 */
void extiEnableLine(extiline_t line, extimode_t mode) {
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	460d      	mov	r5, r1
  uint32_t mask = (1U << (line & 0x1FU));
 8004eb4:	f000 031f 	and.w	r3, r0, #31
 8004eb8:	2401      	movs	r4, #1
 8004eba:	409c      	lsls	r4, r3

  osalDbgCheck(line < STM32_EXTI_NUM_LINES);
 8004ebc:	2816      	cmp	r0, #22
 8004ebe:	d807      	bhi.n	8004ed0 <extiEnableLine+0x20>
  osalDbgCheck((mode & ~EXTI_MODE_MASK) == 0U);
 8004ec0:	f035 0307 	bics.w	r3, r5, #7
 8004ec4:	d108      	bne.n	8004ed8 <extiEnableLine+0x28>

#if STM32_EXTI_NUM_LINES > 32
  if (line < 32) {
#endif
    extiEnableGroup1(mask, mode);
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff ffa9 	bl	8004e20 <extiEnableGroup1>
  }
  else {
    extiEnableGroup2(mask, mode);
  }
#endif
}
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(line < STM32_EXTI_NUM_LINES);
 8004ed0:	4803      	ldr	r0, [pc, #12]	; (8004ee0 <extiEnableLine+0x30>)
 8004ed2:	f002 fbcd 	bl	8007670 <chSysHalt>
 8004ed6:	e7f3      	b.n	8004ec0 <extiEnableLine+0x10>
  osalDbgCheck((mode & ~EXTI_MODE_MASK) == 0U);
 8004ed8:	4801      	ldr	r0, [pc, #4]	; (8004ee0 <extiEnableLine+0x30>)
 8004eda:	f002 fbc9 	bl	8007670 <chSysHalt>
 8004ede:	e7f2      	b.n	8004ec6 <extiEnableLine+0x16>
 8004ee0:	08014dd8 	.word	0x08014dd8
 8004ee4:	f3af 8000 	nop.w
 8004ee8:	f3af 8000 	nop.w
 8004eec:	f3af 8000 	nop.w

08004ef0 <extiClearLine>:
 *
 * @param[in] line      line to be initialized
 *
 * @api
 */
void extiClearLine(extiline_t line) {
 8004ef0:	b510      	push	{r4, lr}
  uint32_t mask = (1U << (line & 0x1FU));
 8004ef2:	f000 031f 	and.w	r3, r0, #31
 8004ef6:	2401      	movs	r4, #1
 8004ef8:	409c      	lsls	r4, r3

  osalDbgCheck(line < STM32_EXTI_NUM_LINES);
 8004efa:	2816      	cmp	r0, #22
 8004efc:	d802      	bhi.n	8004f04 <extiClearLine+0x14>

#if STM32_EXTI_NUM_LINES > 32
  if (line < 32) {
#endif
    extiClearGroup1(mask);
 8004efe:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <extiClearLine+0x1c>)
 8004f00:	615c      	str	r4, [r3, #20]
  }
  else {
    extiClearGroup2(mask);
  }
#endif
}
 8004f02:	bd10      	pop	{r4, pc}
  osalDbgCheck(line < STM32_EXTI_NUM_LINES);
 8004f04:	4802      	ldr	r0, [pc, #8]	; (8004f10 <extiClearLine+0x20>)
 8004f06:	f002 fbb3 	bl	8007670 <chSysHalt>
 8004f0a:	e7f8      	b.n	8004efe <extiClearLine+0xe>
 8004f0c:	40013c00 	.word	0x40013c00
 8004f10:	08014de8 	.word	0x08014de8
	...

08004f20 <_pal_lld_init>:
void _pal_lld_init(void) {

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
 8004f20:	2200      	movs	r2, #0
 8004f22:	e008      	b.n	8004f36 <_pal_lld_init+0x16>
    _pal_init_event(i);
 8004f24:	0110      	lsls	r0, r2, #4
 8004f26:	4905      	ldr	r1, [pc, #20]	; (8004f3c <_pal_lld_init+0x1c>)
 8004f28:	1843      	adds	r3, r0, r1
  tqp->next = (thread_t *)tqp;
 8004f2a:	5043      	str	r3, [r0, r1]
  tqp->prev = (thread_t *)tqp;
 8004f2c:	605b      	str	r3, [r3, #4]
 8004f2e:	2100      	movs	r1, #0
 8004f30:	6099      	str	r1, [r3, #8]
 8004f32:	60d9      	str	r1, [r3, #12]
  for (i = 0; i < 16; i++) {
 8004f34:	3201      	adds	r2, #1
 8004f36:	2a0f      	cmp	r2, #15
 8004f38:	d9f4      	bls.n	8004f24 <_pal_lld_init+0x4>
  }
#endif
}
 8004f3a:	4770      	bx	lr
 8004f3c:	20004588 	.word	0x20004588

08004f40 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8004f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8004f44:	f002 0903 	and.w	r9, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8004f48:	f3c2 0c80 	ubfx	ip, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8004f4c:	f3c2 07c1 	ubfx	r7, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8004f50:	f3c2 1641 	ubfx	r6, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8004f54:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8004f58:	464d      	mov	r5, r9
  uint32_t bit     = 0;
 8004f5a:	2400      	movs	r4, #0
 8004f5c:	e017      	b.n	8004f8e <_pal_lld_setgroupmode+0x4e>
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 8004f5e:	2c07      	cmp	r4, #7
 8004f60:	d854      	bhi.n	800500c <_pal_lld_setgroupmode+0xcc>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8004f62:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8004f66:	ea2a 0e0e 	bic.w	lr, sl, lr
 8004f6a:	ea4e 0808 	orr.w	r8, lr, r8
 8004f6e:	f8c0 8020 	str.w	r8, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8004f72:	f8d0 e000 	ldr.w	lr, [r0]
 8004f76:	ea03 030e 	and.w	r3, r3, lr
 8004f7a:	432b      	orrs	r3, r5
 8004f7c:	6003      	str	r3, [r0, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8004f7e:	0849      	lsrs	r1, r1, #1
 8004f80:	d054      	beq.n	800502c <_pal_lld_setgroupmode+0xec>
      return;
    otyper <<= 1;
 8004f82:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    ospeedr <<= 2;
 8004f86:	00bf      	lsls	r7, r7, #2
    pupdr <<= 2;
 8004f88:	00b6      	lsls	r6, r6, #2
    moder <<= 2;
 8004f8a:	00ad      	lsls	r5, r5, #2
    bit++;
 8004f8c:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 8004f8e:	f011 0f01 	tst.w	r1, #1
 8004f92:	d0f4      	beq.n	8004f7e <_pal_lld_setgroupmode+0x3e>
      altrmask = altr << ((bit & 7) * 4);
 8004f94:	f004 0e07 	and.w	lr, r4, #7
 8004f98:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004f9c:	fa02 f80e 	lsl.w	r8, r2, lr
      m1 = 1 << bit;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	fa03 fa04 	lsl.w	sl, r3, r4
      m2 = 3 << (bit * 2);
 8004fa6:	fa04 f303 	lsl.w	r3, r4, r3
 8004faa:	f04f 0b03 	mov.w	fp, #3
 8004fae:	fa0b fb03 	lsl.w	fp, fp, r3
      m4 = 15 << ((bit & 7) * 4);
 8004fb2:	230f      	movs	r3, #15
 8004fb4:	fa03 fe0e 	lsl.w	lr, r3, lr
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8004fb8:	6843      	ldr	r3, [r0, #4]
 8004fba:	ea23 030a 	bic.w	r3, r3, sl
 8004fbe:	ea43 030c 	orr.w	r3, r3, ip
 8004fc2:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8004fc4:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8004fc8:	ea6f 030b 	mvn.w	r3, fp
 8004fcc:	ea0a 0a03 	and.w	sl, sl, r3
 8004fd0:	ea4a 0a07 	orr.w	sl, sl, r7
 8004fd4:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8004fd8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8004fdc:	ea03 0a0a 	and.w	sl, r3, sl
 8004fe0:	ea4a 0a06 	orr.w	sl, sl, r6
 8004fe4:	f8c0 a00c 	str.w	sl, [r0, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8004fe8:	f1b9 0f02 	cmp.w	r9, #2
 8004fec:	d0b7      	beq.n	8004f5e <_pal_lld_setgroupmode+0x1e>
        port->MODER   = (port->MODER & ~m2) | moder;
 8004fee:	f8d0 a000 	ldr.w	sl, [r0]
 8004ff2:	ea03 030a 	and.w	r3, r3, sl
 8004ff6:	432b      	orrs	r3, r5
 8004ff8:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8004ffa:	2c07      	cmp	r4, #7
 8004ffc:	d80f      	bhi.n	800501e <_pal_lld_setgroupmode+0xde>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8004ffe:	6a03      	ldr	r3, [r0, #32]
 8005000:	ea23 0e0e 	bic.w	lr, r3, lr
 8005004:	ea4e 0308 	orr.w	r3, lr, r8
 8005008:	6203      	str	r3, [r0, #32]
 800500a:	e7b8      	b.n	8004f7e <_pal_lld_setgroupmode+0x3e>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800500c:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8005010:	ea2a 0e0e 	bic.w	lr, sl, lr
 8005014:	ea4e 0808 	orr.w	r8, lr, r8
 8005018:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 800501c:	e7a9      	b.n	8004f72 <_pal_lld_setgroupmode+0x32>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800501e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005020:	ea23 0e0e 	bic.w	lr, r3, lr
 8005024:	ea4e 0308 	orr.w	r3, lr, r8
 8005028:	6243      	str	r3, [r0, #36]	; 0x24
 800502a:	e7a8      	b.n	8004f7e <_pal_lld_setgroupmode+0x3e>
  }
}
 800502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005030 <_pal_lld_enablepadevent>:
 *
 * @notapi
 */
void _pal_lld_enablepadevent(ioportid_t port,
                             iopadid_t pad,
                             ioeventmode_t mode) {
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	4607      	mov	r7, r0
 8005034:	460c      	mov	r4, r1
 8005036:	4616      	mov	r6, r2

  uint32_t padmask, cridx, croff, crmask, portidx;

  /* Mask of the pad.*/
  padmask = 1U << (uint32_t)pad;
 8005038:	2501      	movs	r5, #1
 800503a:	408d      	lsls	r5, r1

  /* Multiple channel setting of the same channel not allowed, first disable
     it. This is done because on STM32 the same channel cannot be mapped on
     multiple ports.*/
  osalDbgAssert(((EXTI->RTSR1 & padmask) == 0U) &&
 800503c:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	422b      	tst	r3, r5
 8005042:	d103      	bne.n	800504c <_pal_lld_enablepadevent+0x1c>
 8005044:	4b1e      	ldr	r3, [pc, #120]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	422b      	tst	r3, r5
 800504a:	d002      	beq.n	8005052 <_pal_lld_enablepadevent+0x22>
 800504c:	481d      	ldr	r0, [pc, #116]	; (80050c4 <_pal_lld_enablepadevent+0x94>)
 800504e:	f002 fb0f 	bl	8007670 <chSysHalt>
                ((EXTI->FTSR1 & padmask) == 0U), "channel already in use");

  /* Index and mask of the SYSCFG CR register to be used.*/
  cridx  = (uint32_t)pad >> 2U;
 8005052:	08a2      	lsrs	r2, r4, #2
  croff = ((uint32_t)pad & 3U) * 4U;
 8005054:	f004 0403 	and.w	r4, r4, #3
 8005058:	00a4      	lsls	r4, r4, #2
  crmask = ~(0xFU << croff);
 800505a:	230f      	movs	r3, #15
 800505c:	fa03 f104 	lsl.w	r1, r3, r4

  /* Port index is obtained assuming that GPIO ports are placed at regular
     0x400 intervals in memory space. So far this is true for all devices.*/
  portidx = (((uint32_t)port - (uint32_t)GPIOA) >> 10U) & 0xFU;
 8005060:	f3c7 2783 	ubfx	r7, r7, #10, #4

  /* Port selection in SYSCFG.*/
  SYSCFG->EXTICR[cridx] = (SYSCFG->EXTICR[cridx] & crmask) | (portidx << croff);
 8005064:	4818      	ldr	r0, [pc, #96]	; (80050c8 <_pal_lld_enablepadevent+0x98>)
 8005066:	3202      	adds	r2, #2
 8005068:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800506c:	ea23 0301 	bic.w	r3, r3, r1
 8005070:	fa07 f404 	lsl.w	r4, r7, r4
 8005074:	431c      	orrs	r4, r3
 8005076:	f840 4022 	str.w	r4, [r0, r2, lsl #2]

  /* Programming edge registers.*/
  if (mode & PAL_EVENT_MODE_RISING_EDGE)
 800507a:	f016 0f01 	tst.w	r6, #1
 800507e:	d014      	beq.n	80050aa <_pal_lld_enablepadevent+0x7a>
    EXTI->RTSR1 |= padmask;
 8005080:	4a0f      	ldr	r2, [pc, #60]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 8005082:	6893      	ldr	r3, [r2, #8]
 8005084:	432b      	orrs	r3, r5
 8005086:	6093      	str	r3, [r2, #8]
  else
    EXTI->RTSR1 &= ~padmask;
  if (mode & PAL_EVENT_MODE_FALLING_EDGE)
 8005088:	f016 0f02 	tst.w	r6, #2
 800508c:	d113      	bne.n	80050b6 <_pal_lld_enablepadevent+0x86>
    EXTI->FTSR1 |= padmask;
  else
    EXTI->FTSR1 &= ~padmask;
 800508e:	4a0c      	ldr	r2, [pc, #48]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 8005090:	68d3      	ldr	r3, [r2, #12]
 8005092:	ea23 0305 	bic.w	r3, r3, r5
 8005096:	60d3      	str	r3, [r2, #12]
  /* Programming interrupt and event registers.*/
#if defined(STM32_EXTI_ENHANCED)
  EXTI_D1->IMR1 |= padmask;
  EXTI_D1->EMR1 &= ~padmask;
#else
  EXTI->IMR1 |= padmask;
 8005098:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	432a      	orrs	r2, r5
 800509e:	601a      	str	r2, [r3, #0]
  EXTI->EMR1 &= ~padmask;
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	ea22 0505 	bic.w	r5, r2, r5
 80050a6:	605d      	str	r5, [r3, #4]
#endif
}
 80050a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    EXTI->RTSR1 &= ~padmask;
 80050aa:	4a05      	ldr	r2, [pc, #20]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 80050ac:	6893      	ldr	r3, [r2, #8]
 80050ae:	ea23 0305 	bic.w	r3, r3, r5
 80050b2:	6093      	str	r3, [r2, #8]
 80050b4:	e7e8      	b.n	8005088 <_pal_lld_enablepadevent+0x58>
    EXTI->FTSR1 |= padmask;
 80050b6:	4a02      	ldr	r2, [pc, #8]	; (80050c0 <_pal_lld_enablepadevent+0x90>)
 80050b8:	68d3      	ldr	r3, [r2, #12]
 80050ba:	432b      	orrs	r3, r5
 80050bc:	60d3      	str	r3, [r2, #12]
 80050be:	e7eb      	b.n	8005098 <_pal_lld_enablepadevent+0x68>
 80050c0:	40013c00 	.word	0x40013c00
 80050c4:	08014df8 	.word	0x08014df8
 80050c8:	40013800 	.word	0x40013800
 80050cc:	f3af 8000 	nop.w

080050d0 <_pal_lld_disablepadevent>:
 * @param[in] port      port identifier
 * @param[in] pad       pad number within the port
 *
 * @notapi
 */
void _pal_lld_disablepadevent(ioportid_t port, iopadid_t pad) {
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t padmask, rtsr1, ftsr1;

  rtsr1 = EXTI->RTSR1;
 80050d2:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <_pal_lld_disablepadevent+0x70>)
 80050d4:	689e      	ldr	r6, [r3, #8]
  ftsr1 = EXTI->FTSR1;
 80050d6:	68df      	ldr	r7, [r3, #12]

  /* Mask of the pad.*/
  padmask = 1U << (uint32_t)pad;
 80050d8:	2401      	movs	r4, #1
 80050da:	408c      	lsls	r4, r1

  /* If either RTRS1 or FTSR1 is enabled then the channel is in use.*/
  if (((rtsr1 | ftsr1) & padmask) != 0U) {
 80050dc:	ea46 0307 	orr.w	r3, r6, r7
 80050e0:	4223      	tst	r3, r4
 80050e2:	d027      	beq.n	8005134 <_pal_lld_disablepadevent+0x64>
 80050e4:	460d      	mov	r5, r1
    uint32_t cridx, croff, crport, portidx;

    /* Index and mask of the SYSCFG CR register to be used.*/
    cridx  = (uint32_t)pad >> 2U;
 80050e6:	0889      	lsrs	r1, r1, #2
    croff = ((uint32_t)pad & 3U) * 4U;
 80050e8:	f005 0303 	and.w	r3, r5, #3
 80050ec:	009a      	lsls	r2, r3, #2

    /* Port index is obtained assuming that GPIO ports are placed at regular
       0x400 intervals in memory space. So far this is true for all devices.*/
    portidx = (((uint32_t)port - (uint32_t)GPIOA) >> 10U) & 0xFU;
 80050ee:	f3c0 2083 	ubfx	r0, r0, #10, #4

    crport = (SYSCFG->EXTICR[cridx] >> croff) & 0xFU;
 80050f2:	1c8b      	adds	r3, r1, #2
 80050f4:	4913      	ldr	r1, [pc, #76]	; (8005144 <_pal_lld_disablepadevent+0x74>)
 80050f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80050fa:	40d3      	lsrs	r3, r2
 80050fc:	f003 030f 	and.w	r3, r3, #15

    osalDbgAssert(crport == portidx, "channel mapped on different port");
 8005100:	4298      	cmp	r0, r3
 8005102:	d118      	bne.n	8005136 <_pal_lld_disablepadevent+0x66>
    EXTI->RTSR1     = rtsr1 & ~padmask;
    EXTI->FTSR1     = ftsr1 & ~padmask;
    EXTI_D1->PR1    = padmask;
#else
    /* Disabling channel.*/
    EXTI->IMR1  &= ~padmask;
 8005104:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <_pal_lld_disablepadevent+0x70>)
 8005106:	6819      	ldr	r1, [r3, #0]
 8005108:	43e2      	mvns	r2, r4
 800510a:	4011      	ands	r1, r2
 800510c:	6019      	str	r1, [r3, #0]
    EXTI->EMR1  &= ~padmask;
 800510e:	6859      	ldr	r1, [r3, #4]
 8005110:	4011      	ands	r1, r2
 8005112:	6059      	str	r1, [r3, #4]
    EXTI->RTSR1  = rtsr1 & ~padmask;
 8005114:	4016      	ands	r6, r2
 8005116:	609e      	str	r6, [r3, #8]
    EXTI->FTSR1  = ftsr1 & ~padmask;
 8005118:	403a      	ands	r2, r7
 800511a:	60da      	str	r2, [r3, #12]
    EXTI->PR1    = padmask;
 800511c:	615c      	str	r4, [r3, #20]
#endif

#if PAL_USE_CALLBACKS || PAL_USE_WAIT
  /* Callback cleared and/or thread reset.*/
  _pal_clear_event(pad);
 800511e:	490a      	ldr	r1, [pc, #40]	; (8005148 <_pal_lld_disablepadevent+0x78>)
 8005120:	eb01 1505 	add.w	r5, r1, r5, lsl #4
 8005124:	f06f 0101 	mvn.w	r1, #1
 8005128:	4628      	mov	r0, r5
 800512a:	f003 fe51 	bl	8008dd0 <chThdDequeueAllI>
 800512e:	2300      	movs	r3, #0
 8005130:	60ab      	str	r3, [r5, #8]
 8005132:	60eb      	str	r3, [r5, #12]
#endif
  }
}
 8005134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osalDbgAssert(crport == portidx, "channel mapped on different port");
 8005136:	4805      	ldr	r0, [pc, #20]	; (800514c <_pal_lld_disablepadevent+0x7c>)
 8005138:	f002 fa9a 	bl	8007670 <chSysHalt>
 800513c:	e7e2      	b.n	8005104 <_pal_lld_disablepadevent+0x34>
 800513e:	bf00      	nop
 8005140:	40013c00 	.word	0x40013c00
 8005144:	40013800 	.word	0x40013800
 8005148:	20004588 	.word	0x20004588
 800514c:	08014e10 	.word	0x08014e10

08005150 <i2c_lld_abort_operation>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_abort_operation(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8005150:	6b43      	ldr	r3, [r0, #52]	; 0x34

  /* Stops the I2C peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8005152:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005156:	601a      	str	r2, [r3, #0]
  dp->CR1 = 0;
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
  dp->CR2 = 0;
 800515c:	605a      	str	r2, [r3, #4]
  dp->SR1 = 0;
 800515e:	615a      	str	r2, [r3, #20]

  /* Stops the associated DMA streams.*/
  dmaStreamDisable(i2cp->dmatx);
 8005160:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	6813      	ldr	r3, [r2, #0]
 8005166:	f023 031f 	bic.w	r3, r3, #31
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	f012 0f01 	tst.w	r2, #1
 8005176:	d1f9      	bne.n	800516c <i2c_lld_abort_operation+0x1c>
 8005178:	7a59      	ldrb	r1, [r3, #9]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	233d      	movs	r3, #61	; 0x3d
 800517e:	408b      	lsls	r3, r1
 8005180:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8005182:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	6813      	ldr	r3, [r2, #0]
 8005188:	f023 031f 	bic.w	r3, r3, #31
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	f012 0f01 	tst.w	r2, #1
 8005198:	d1f9      	bne.n	800518e <i2c_lld_abort_operation+0x3e>
 800519a:	7a59      	ldrb	r1, [r3, #9]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	233d      	movs	r3, #61	; 0x3d
 80051a0:	408b      	lsls	r3, r1
 80051a2:	6013      	str	r3, [r2, #0]
}
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	f3af 8000 	nop.w
 80051ac:	f3af 8000 	nop.w

080051b0 <i2c_lld_set_opmode>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80051b0:	6b41      	ldr	r1, [r0, #52]	; 0x34
  i2copmode_t opmode = i2cp->config->op_mode;
 80051b2:	6843      	ldr	r3, [r0, #4]
 80051b4:	781a      	ldrb	r2, [r3, #0]
  uint16_t regCR1;

  regCR1 = dp->CR1;
 80051b6:	680b      	ldr	r3, [r1, #0]
 80051b8:	b29b      	uxth	r3, r3
  switch (opmode) {
 80051ba:	2a02      	cmp	r2, #2
 80051bc:	d009      	beq.n	80051d2 <i2c_lld_set_opmode+0x22>
 80051be:	2a03      	cmp	r2, #3
 80051c0:	d00d      	beq.n	80051de <i2c_lld_set_opmode+0x2e>
 80051c2:	2a01      	cmp	r2, #1
 80051c4:	d001      	beq.n	80051ca <i2c_lld_set_opmode+0x1a>
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  }
  dp->CR1 = regCR1;
 80051c6:	600b      	str	r3, [r1, #0]
}
 80051c8:	4770      	bx	lr
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 80051ca:	f023 030a 	bic.w	r3, r3, #10
 80051ce:	b29b      	uxth	r3, r3
    break;
 80051d0:	e7f9      	b.n	80051c6 <i2c_lld_set_opmode+0x16>
 80051d2:	f023 0308 	bic.w	r3, r3, #8
 80051d6:	b29b      	uxth	r3, r3
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 80051d8:	f043 0302 	orr.w	r3, r3, #2
    break;
 80051dc:	e7f3      	b.n	80051c6 <i2c_lld_set_opmode+0x16>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 80051de:	f043 030a 	orr.w	r3, r3, #10
    break;
 80051e2:	e7f0      	b.n	80051c6 <i2c_lld_set_opmode+0x16>
 80051e4:	f3af 8000 	nop.w
 80051e8:	f3af 8000 	nop.w
 80051ec:	f3af 8000 	nop.w

080051f0 <i2c_lld_serve_event_interrupt>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
 80051f0:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 80051f2:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 80051f4:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 80051f6:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80051f8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80051fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005200:	4a40      	ldr	r2, [pc, #256]	; (8005304 <i2c_lld_serve_event_interrupt+0x114>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d02f      	beq.n	8005266 <i2c_lld_serve_event_interrupt+0x76>
 8005206:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 800520a:	d318      	bcc.n	800523e <i2c_lld_serve_event_interrupt+0x4e>
 800520c:	4a3e      	ldr	r2, [pc, #248]	; (8005308 <i2c_lld_serve_event_interrupt+0x118>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d041      	beq.n	8005296 <i2c_lld_serve_event_interrupt+0xa6>
 8005212:	3202      	adds	r2, #2
 8005214:	4293      	cmp	r3, r2
 8005216:	d049      	beq.n	80052ac <i2c_lld_serve_event_interrupt+0xbc>
 8005218:	4a3c      	ldr	r2, [pc, #240]	; (800530c <i2c_lld_serve_event_interrupt+0x11c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d103      	bne.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800521e:	8c03      	ldrh	r3, [r0, #32]
 8005220:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8005224:	6123      	str	r3, [r4, #16]
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8005226:	f015 0f0a 	tst.w	r5, #10
 800522a:	d000      	beq.n	800522e <i2c_lld_serve_event_interrupt+0x3e>
    (void)dp->SR2;
 800522c:	69a3      	ldr	r3, [r4, #24]

  /* Errata 2.4.6 for STM32F40x, Spurious Bus Error detection in Master mode.*/
  if (event & I2C_SR1_BERR) {
 800522e:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005232:	d003      	beq.n	800523c <i2c_lld_serve_event_interrupt+0x4c>
    dp->SR1 &= ~I2C_SR1_BERR;
 8005234:	6963      	ldr	r3, [r4, #20]
 8005236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800523a:	6163      	str	r3, [r4, #20]
  }
}
 800523c:	bd70      	pop	{r4, r5, r6, pc}
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800523e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005242:	d002      	beq.n	800524a <i2c_lld_serve_event_interrupt+0x5a>
 8005244:	3a01      	subs	r2, #1
 8005246:	4293      	cmp	r3, r2
 8005248:	d1ed      	bne.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
    if ((i2cp->addr >> 8) > 0) {
 800524a:	8c03      	ldrh	r3, [r0, #32]
 800524c:	0a1a      	lsrs	r2, r3, #8
 800524e:	d008      	beq.n	8005262 <i2c_lld_serve_event_interrupt+0x72>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8005250:	f002 0206 	and.w	r2, r2, #6
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	4313      	orrs	r3, r2
 800525a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800525e:	6123      	str	r3, [r4, #16]
 8005260:	e7e1      	b.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
      dp->DR = i2cp->addr;
 8005262:	6123      	str	r3, [r4, #16]
 8005264:	e7df      	b.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8005266:	6863      	ldr	r3, [r4, #4]
 8005268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800526c:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800526e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	6013      	str	r3, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800527a:	6863      	ldr	r3, [r4, #4]
 800527c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005280:	6063      	str	r3, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8005282:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d8cc      	bhi.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
      dp->CR1 &= ~I2C_CR1_ACK;
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005292:	6023      	str	r3, [r4, #0]
 8005294:	e7c7      	b.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8005296:	6863      	ldr	r3, [r4, #4]
 8005298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800529c:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800529e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	6813      	ldr	r3, [r2, #0]
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	6013      	str	r3, [r2, #0]
    break;
 80052aa:	e7bc      	b.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
    (void)dp->DR; /* clear BTF.*/
 80052ac:	6923      	ldr	r3, [r4, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80052ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	b143      	cbz	r3, 80052c8 <i2c_lld_serve_event_interrupt+0xd8>
      i2cp->addr |= 0x01;
 80052b6:	8c03      	ldrh	r3, [r0, #32]
 80052b8:	f043 0301 	orr.w	r3, r3, #1
 80052bc:	8403      	strh	r3, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80052c4:	6023      	str	r3, [r4, #0]
      return;
 80052c6:	e7b9      	b.n	800523c <i2c_lld_serve_event_interrupt+0x4c>
 80052c8:	4606      	mov	r6, r0
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80052ca:	6863      	ldr	r3, [r4, #4]
 80052cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052d0:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	2320      	movs	r3, #32
 80052dc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80052e0:	f003 fe66 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80052e4:	f002 fb84 	bl	80079f0 <_dbg_check_lock_from_isr>
  chThdResumeI(trp, msg);
 80052e8:	2100      	movs	r1, #0
 80052ea:	f106 001c 	add.w	r0, r6, #28
 80052ee:	f003 fcdf 	bl	8008cb0 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 80052f2:	f002 fb95 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80052f6:	f003 fe63 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 80052fa:	2300      	movs	r3, #0
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	e791      	b.n	8005226 <i2c_lld_serve_event_interrupt+0x36>
 8005302:	bf00      	nop
 8005304:	00030002 	.word	0x00030002
 8005308:	00070082 	.word	0x00070082
 800530c:	00030008 	.word	0x00030008

08005310 <i2c_lld_serve_error_interrupt>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in]  sr       content of the SR1 register to be decoded
 *
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {
 8005310:	b510      	push	{r4, lr}

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8005312:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	6813      	ldr	r3, [r2, #0]
 8005318:	f023 031f 	bic.w	r3, r3, #31
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	f012 0f01 	tst.w	r2, #1
 8005328:	d1f9      	bne.n	800531e <i2c_lld_serve_error_interrupt+0xe>
 800532a:	7a5c      	ldrb	r4, [r3, #9]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	233d      	movs	r3, #61	; 0x3d
 8005330:	40a3      	lsls	r3, r4
 8005332:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8005334:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	6813      	ldr	r3, [r2, #0]
 800533a:	f023 031f 	bic.w	r3, r3, #31
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	f012 0f01 	tst.w	r2, #1
 800534a:	d1f9      	bne.n	8005340 <i2c_lld_serve_error_interrupt+0x30>
 800534c:	7a5c      	ldrb	r4, [r3, #9]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	233d      	movs	r3, #61	; 0x3d
 8005352:	40a3      	lsls	r3, r4
 8005354:	6013      	str	r3, [r2, #0]

  i2cp->errors = I2C_NO_ERROR;
 8005356:	2300      	movs	r3, #0
 8005358:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 800535a:	f411 7f80 	tst.w	r1, #256	; 0x100
 800535e:	d006      	beq.n	800536e <i2c_lld_serve_error_interrupt+0x5e>
    i2cp->errors |= I2C_BUS_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	6083      	str	r3, [r0, #8]
    /* Errata 2.4.6 for STM32F40x, Spurious Bus Error detection in
       Master mode.*/
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 8005364:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005366:	6953      	ldr	r3, [r2, #20]
 8005368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800536c:	6153      	str	r3, [r2, #20]
  }

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800536e:	f411 7f00 	tst.w	r1, #512	; 0x200
 8005372:	d003      	beq.n	800537c <i2c_lld_serve_error_interrupt+0x6c>
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8005374:	6883      	ldr	r3, [r0, #8]
 8005376:	f043 0302 	orr.w	r3, r3, #2
 800537a:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800537c:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8005380:	d00d      	beq.n	800539e <i2c_lld_serve_error_interrupt+0x8e>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8005382:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005384:	6853      	ldr	r3, [r2, #4]
 8005386:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800538a:	6053      	str	r3, [r2, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800538c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800538e:	6813      	ldr	r3, [r2, #0]
 8005390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005394:	6013      	str	r3, [r2, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8005396:	6883      	ldr	r3, [r0, #8]
 8005398:	f043 0304 	orr.w	r3, r3, #4
 800539c:	6083      	str	r3, [r0, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800539e:	f411 6f00 	tst.w	r1, #2048	; 0x800
 80053a2:	d003      	beq.n	80053ac <i2c_lld_serve_error_interrupt+0x9c>
    i2cp->errors |= I2C_OVERRUN;
 80053a4:	6883      	ldr	r3, [r0, #8]
 80053a6:	f043 0308 	orr.w	r3, r3, #8
 80053aa:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 80053ac:	f411 4f80 	tst.w	r1, #16384	; 0x4000
 80053b0:	d003      	beq.n	80053ba <i2c_lld_serve_error_interrupt+0xaa>
    i2cp->errors |= I2C_TIMEOUT;
 80053b2:	6883      	ldr	r3, [r0, #8]
 80053b4:	f043 0320 	orr.w	r3, r3, #32
 80053b8:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 80053ba:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 80053be:	d003      	beq.n	80053c8 <i2c_lld_serve_error_interrupt+0xb8>
    i2cp->errors |= I2C_PEC_ERROR;
 80053c0:	6883      	ldr	r3, [r0, #8]
 80053c2:	f043 0310 	orr.w	r3, r3, #16
 80053c6:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80053c8:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80053cc:	d102      	bne.n	80053d4 <i2c_lld_serve_error_interrupt+0xc4>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 80053ce:	6883      	ldr	r3, [r0, #8]
 80053d0:	b92b      	cbnz	r3, 80053de <i2c_lld_serve_error_interrupt+0xce>
    _i2c_wakeup_error_isr(i2cp);
}
 80053d2:	bd10      	pop	{r4, pc}
    i2cp->errors |= I2C_SMB_ALERT;
 80053d4:	6883      	ldr	r3, [r0, #8]
 80053d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053da:	6083      	str	r3, [r0, #8]
 80053dc:	e7f7      	b.n	80053ce <i2c_lld_serve_error_interrupt+0xbe>
 80053de:	4604      	mov	r4, r0
 80053e0:	2320      	movs	r3, #32
 80053e2:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80053e6:	f003 fde3 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80053ea:	f002 fb01 	bl	80079f0 <_dbg_check_lock_from_isr>
 80053ee:	f06f 0101 	mvn.w	r1, #1
 80053f2:	f104 001c 	add.w	r0, r4, #28
 80053f6:	f003 fc5b 	bl	8008cb0 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 80053fa:	f002 fb11 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80053fe:	f003 fddf 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 8005402:	2300      	movs	r3, #0
 8005404:	f383 8811 	msr	BASEPRI, r3
}
 8005408:	e7e3      	b.n	80053d2 <i2c_lld_serve_error_interrupt+0xc2>
 800540a:	bf00      	nop
 800540c:	f3af 8000 	nop.w

08005410 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4604      	mov	r4, r0
  I2C_TypeDef *dp = i2cp->i2c;
 8005414:	6b45      	ldr	r5, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005416:	f011 0f0c 	tst.w	r1, #12
 800541a:	d115      	bne.n	8005448 <i2c_lld_serve_tx_end_irq+0x38>
  dmaStreamDisable(i2cp->dmatx);
 800541c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	6813      	ldr	r3, [r2, #0]
 8005422:	f023 031f 	bic.w	r3, r3, #31
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	6812      	ldr	r2, [r2, #0]
 800542e:	f012 0f01 	tst.w	r2, #1
 8005432:	d1f9      	bne.n	8005428 <i2c_lld_serve_tx_end_irq+0x18>
 8005434:	7a59      	ldrb	r1, [r3, #9]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	233d      	movs	r3, #61	; 0x3d
 800543a:	408b      	lsls	r3, r1
 800543c:	6013      	str	r3, [r2, #0]
  dp->CR2 |= I2C_CR2_ITEVTEN;
 800543e:	686b      	ldr	r3, [r5, #4]
 8005440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005444:	606b      	str	r3, [r5, #4]
}
 8005446:	bd38      	pop	{r3, r4, r5, pc}
  chSysHalt(reason);
 8005448:	4801      	ldr	r0, [pc, #4]	; (8005450 <i2c_lld_serve_tx_end_irq+0x40>)
 800544a:	f002 f911 	bl	8007670 <chSysHalt>
 800544e:	e7e5      	b.n	800541c <i2c_lld_serve_tx_end_irq+0xc>
 8005450:	08015be8 	.word	0x08015be8
 8005454:	f3af 8000 	nop.w
 8005458:	f3af 8000 	nop.w
 800545c:	f3af 8000 	nop.w

08005460 <i2c_lld_serve_rx_end_irq>:
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4604      	mov	r4, r0
  I2C_TypeDef *dp = i2cp->i2c;
 8005464:	6b45      	ldr	r5, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005466:	f011 0f0c 	tst.w	r1, #12
 800546a:	d130      	bne.n	80054ce <i2c_lld_serve_rx_end_irq+0x6e>
  dmaStreamDisable(i2cp->dmarx);
 800546c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	6813      	ldr	r3, [r2, #0]
 8005472:	f023 031f 	bic.w	r3, r3, #31
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	f012 0f01 	tst.w	r2, #1
 8005482:	d1f9      	bne.n	8005478 <i2c_lld_serve_rx_end_irq+0x18>
 8005484:	7a59      	ldrb	r1, [r3, #9]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	233d      	movs	r3, #61	; 0x3d
 800548a:	408b      	lsls	r3, r1
 800548c:	6013      	str	r3, [r2, #0]
  dp->CR2 &= ~I2C_CR2_LAST;
 800548e:	686b      	ldr	r3, [r5, #4]
 8005490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005494:	606b      	str	r3, [r5, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8005496:	682b      	ldr	r3, [r5, #0]
 8005498:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800549c:	602b      	str	r3, [r5, #0]
  dp->CR1 |= I2C_CR1_STOP;
 800549e:	682b      	ldr	r3, [r5, #0]
 80054a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054a4:	602b      	str	r3, [r5, #0]
 80054a6:	2320      	movs	r3, #32
 80054a8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80054ac:	f003 fd80 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80054b0:	f002 fa9e 	bl	80079f0 <_dbg_check_lock_from_isr>
  chThdResumeI(trp, msg);
 80054b4:	2100      	movs	r1, #0
 80054b6:	f104 001c 	add.w	r0, r4, #28
 80054ba:	f003 fbf9 	bl	8008cb0 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 80054be:	f002 faaf 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80054c2:	f003 fd7d 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 80054c6:	2300      	movs	r3, #0
 80054c8:	f383 8811 	msr	BASEPRI, r3
}
 80054cc:	bd38      	pop	{r3, r4, r5, pc}
  chSysHalt(reason);
 80054ce:	4802      	ldr	r0, [pc, #8]	; (80054d8 <i2c_lld_serve_rx_end_irq+0x78>)
 80054d0:	f002 f8ce 	bl	8007670 <chSysHalt>
 80054d4:	e7ca      	b.n	800546c <i2c_lld_serve_rx_end_irq+0xc>
 80054d6:	bf00      	nop
 80054d8:	08015be8 	.word	0x08015be8
 80054dc:	f3af 8000 	nop.w

080054e0 <i2c_lld_set_clock>:
static void i2c_lld_set_clock(I2CDriver *i2cp) {
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 80054e2:	6b45      	ldr	r5, [r0, #52]	; 0x34
  int32_t clock_speed = i2cp->config->clock_speed;
 80054e4:	6843      	ldr	r3, [r0, #4]
 80054e6:	685c      	ldr	r4, [r3, #4]
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 80054e8:	7a1e      	ldrb	r6, [r3, #8]
  osalDbgCheck((i2cp != NULL) &&
 80054ea:	b120      	cbz	r0, 80054f6 <i2c_lld_set_clock+0x16>
 80054ec:	2c00      	cmp	r4, #0
 80054ee:	dd02      	ble.n	80054f6 <i2c_lld_set_clock+0x16>
 80054f0:	4b41      	ldr	r3, [pc, #260]	; (80055f8 <i2c_lld_set_clock+0x118>)
 80054f2:	429c      	cmp	r4, r3
 80054f4:	dd02      	ble.n	80054fc <i2c_lld_set_clock+0x1c>
 80054f6:	4841      	ldr	r0, [pc, #260]	; (80055fc <i2c_lld_set_clock+0x11c>)
 80054f8:	f002 f8ba 	bl	8007670 <chSysHalt>
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80054fc:	686b      	ldr	r3, [r5, #4]
 80054fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005502:	041b      	lsls	r3, r3, #16
 8005504:	0c1b      	lsrs	r3, r3, #16
 8005506:	606b      	str	r3, [r5, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8005508:	686b      	ldr	r3, [r5, #4]
 800550a:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
 800550e:	606b      	str	r3, [r5, #4]
  if (clock_speed <= 100000) {
 8005510:	4b3b      	ldr	r3, [pc, #236]	; (8005600 <i2c_lld_set_clock+0x120>)
 8005512:	429c      	cmp	r4, r3
 8005514:	dc23      	bgt.n	800555e <i2c_lld_set_clock+0x7e>
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");
 8005516:	2e01      	cmp	r6, #1
 8005518:	d115      	bne.n	8005546 <i2c_lld_set_clock+0x66>
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
 800551a:	0066      	lsls	r6, r4, #1
 800551c:	4a39      	ldr	r2, [pc, #228]	; (8005604 <i2c_lld_set_clock+0x124>)
 800551e:	fbb2 f3f6 	udiv	r3, r2, r6
 8005522:	fb06 2313 	mls	r3, r6, r3, r2
 8005526:	b993      	cbnz	r3, 800554e <i2c_lld_set_clock+0x6e>
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8005528:	4c36      	ldr	r4, [pc, #216]	; (8005604 <i2c_lld_set_clock+0x124>)
 800552a:	fbb4 f4f6 	udiv	r4, r4, r6
 800552e:	b2a4      	uxth	r4, r4
    osalDbgAssert(clock_div >= 0x04,
 8005530:	2c03      	cmp	r4, #3
 8005532:	d910      	bls.n	8005556 <i2c_lld_set_clock+0x76>
    regCCR |= (clock_div & I2C_CCR_CCR);
 8005534:	f3c4 060b 	ubfx	r6, r4, #0, #12
    dp->TRISE = I2C_CLK_FREQ + 1;
 8005538:	232b      	movs	r3, #43	; 0x2b
 800553a:	622b      	str	r3, [r5, #32]
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 800553c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8005540:	d253      	bcs.n	80055ea <i2c_lld_set_clock+0x10a>
  dp->CCR = regCCR;
 8005542:	61ee      	str	r6, [r5, #28]
}
 8005544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");
 8005546:	482d      	ldr	r0, [pc, #180]	; (80055fc <i2c_lld_set_clock+0x11c>)
 8005548:	f002 f892 	bl	8007670 <chSysHalt>
 800554c:	e7e5      	b.n	800551a <i2c_lld_set_clock+0x3a>
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
 800554e:	482b      	ldr	r0, [pc, #172]	; (80055fc <i2c_lld_set_clock+0x11c>)
 8005550:	f002 f88e 	bl	8007670 <chSysHalt>
 8005554:	e7e8      	b.n	8005528 <i2c_lld_set_clock+0x48>
    osalDbgAssert(clock_div >= 0x04,
 8005556:	4829      	ldr	r0, [pc, #164]	; (80055fc <i2c_lld_set_clock+0x11c>)
 8005558:	f002 f88a 	bl	8007670 <chSysHalt>
 800555c:	e7ea      	b.n	8005534 <i2c_lld_set_clock+0x54>
  else if (clock_speed <= 400000) {
 800555e:	4b26      	ldr	r3, [pc, #152]	; (80055f8 <i2c_lld_set_clock+0x118>)
 8005560:	429c      	cmp	r4, r3
 8005562:	dc46      	bgt.n	80055f2 <i2c_lld_set_clock+0x112>
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
 8005564:	1eb3      	subs	r3, r6, #2
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	d80e      	bhi.n	800558a <i2c_lld_set_clock+0xaa>
    if (duty == FAST_DUTY_CYCLE_2) {
 800556c:	2e02      	cmp	r6, #2
 800556e:	d010      	beq.n	8005592 <i2c_lld_set_clock+0xb2>
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8005570:	2e03      	cmp	r6, #3
 8005572:	d025      	beq.n	80055c0 <i2c_lld_set_clock+0xe0>
  clock_div = I2C_CCR_CCR;
 8005574:	f640 74ff 	movw	r4, #4095	; 0xfff
  regCCR = 0;
 8005578:	2700      	movs	r7, #0
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 800557a:	f3c4 060b 	ubfx	r6, r4, #0, #12
 800557e:	433e      	orrs	r6, r7
 8005580:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8005584:	230d      	movs	r3, #13
 8005586:	622b      	str	r3, [r5, #32]
 8005588:	e7d8      	b.n	800553c <i2c_lld_set_clock+0x5c>
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
 800558a:	481c      	ldr	r0, [pc, #112]	; (80055fc <i2c_lld_set_clock+0x11c>)
 800558c:	f002 f870 	bl	8007670 <chSysHalt>
 8005590:	e7ec      	b.n	800556c <i2c_lld_set_clock+0x8c>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
 8005592:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005596:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <i2c_lld_set_clock+0x124>)
 8005598:	fbb2 f3f4 	udiv	r3, r2, r4
 800559c:	fb04 2313 	mls	r3, r4, r3, r2
 80055a0:	b953      	cbnz	r3, 80055b8 <i2c_lld_set_clock+0xd8>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 80055a2:	4b18      	ldr	r3, [pc, #96]	; (8005604 <i2c_lld_set_clock+0x124>)
 80055a4:	fbb3 f4f4 	udiv	r4, r3, r4
 80055a8:	b2a4      	uxth	r4, r4
  regCCR = 0;
 80055aa:	2700      	movs	r7, #0
    osalDbgAssert(clock_div >= 0x01,
 80055ac:	2c00      	cmp	r4, #0
 80055ae:	d1e4      	bne.n	800557a <i2c_lld_set_clock+0x9a>
 80055b0:	4812      	ldr	r0, [pc, #72]	; (80055fc <i2c_lld_set_clock+0x11c>)
 80055b2:	f002 f85d 	bl	8007670 <chSysHalt>
 80055b6:	e7e0      	b.n	800557a <i2c_lld_set_clock+0x9a>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
 80055b8:	4810      	ldr	r0, [pc, #64]	; (80055fc <i2c_lld_set_clock+0x11c>)
 80055ba:	f002 f859 	bl	8007670 <chSysHalt>
 80055be:	e7f0      	b.n	80055a2 <i2c_lld_set_clock+0xc2>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
 80055c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80055c4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 80055c8:	4a0e      	ldr	r2, [pc, #56]	; (8005604 <i2c_lld_set_clock+0x124>)
 80055ca:	fbb2 f3f6 	udiv	r3, r2, r6
 80055ce:	fb06 2313 	mls	r3, r6, r3, r2
 80055d2:	b933      	cbnz	r3, 80055e2 <i2c_lld_set_clock+0x102>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 80055d4:	4c0b      	ldr	r4, [pc, #44]	; (8005604 <i2c_lld_set_clock+0x124>)
 80055d6:	fbb4 f4f6 	udiv	r4, r4, r6
 80055da:	b2a4      	uxth	r4, r4
      regCCR |= I2C_CCR_DUTY;
 80055dc:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 80055e0:	e7e4      	b.n	80055ac <i2c_lld_set_clock+0xcc>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
 80055e2:	4806      	ldr	r0, [pc, #24]	; (80055fc <i2c_lld_set_clock+0x11c>)
 80055e4:	f002 f844 	bl	8007670 <chSysHalt>
 80055e8:	e7f4      	b.n	80055d4 <i2c_lld_set_clock+0xf4>
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 80055ea:	4804      	ldr	r0, [pc, #16]	; (80055fc <i2c_lld_set_clock+0x11c>)
 80055ec:	f002 f840 	bl	8007670 <chSysHalt>
 80055f0:	e7a7      	b.n	8005542 <i2c_lld_set_clock+0x62>
  regCCR = 0;
 80055f2:	2600      	movs	r6, #0
 80055f4:	e7a5      	b.n	8005542 <i2c_lld_set_clock+0x62>
 80055f6:	bf00      	nop
 80055f8:	00061a80 	.word	0x00061a80
 80055fc:	08014e2c 	.word	0x08014e2c
 8005600:	000186a0 	.word	0x000186a0
 8005604:	0280de80 	.word	0x0280de80
 8005608:	f3af 8000 	nop.w
 800560c:	f3af 8000 	nop.w

08005610 <VectorBC>:
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8005610:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8005612:	f003 fc95 	bl	8008f40 <_stats_increase_irq>
 8005616:	4c08      	ldr	r4, [pc, #32]	; (8005638 <VectorBC+0x28>)
 8005618:	4620      	mov	r0, r4
 800561a:	f002 fae9 	bl	8007bf0 <_trace_isr_enter>
 800561e:	f002 fa17 	bl	8007a50 <_dbg_check_enter_isr>

  i2c_lld_serve_event_interrupt(&I2CD1);
 8005622:	4806      	ldr	r0, [pc, #24]	; (800563c <VectorBC+0x2c>)
 8005624:	f7ff fde4 	bl	80051f0 <i2c_lld_serve_event_interrupt>

  OSAL_IRQ_EPILOGUE();
 8005628:	f002 fa32 	bl	8007a90 <_dbg_check_leave_isr>
 800562c:	4620      	mov	r0, r4
 800562e:	f002 fb07 	bl	8007c40 <_trace_isr_leave>
 8005632:	f006 fa8d 	bl	800bb50 <_port_irq_epilogue>
}
 8005636:	bd10      	pop	{r4, pc}
 8005638:	08014e40 	.word	0x08014e40
 800563c:	20004688 	.word	0x20004688

08005640 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8005640:	b570      	push	{r4, r5, r6, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 8005642:	4d0e      	ldr	r5, [pc, #56]	; (800567c <VectorC0+0x3c>)
 8005644:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005646:	695c      	ldr	r4, [r3, #20]
 8005648:	b2a4      	uxth	r4, r4

  OSAL_IRQ_PROLOGUE();
 800564a:	f003 fc79 	bl	8008f40 <_stats_increase_irq>
 800564e:	4e0c      	ldr	r6, [pc, #48]	; (8005680 <VectorC0+0x40>)
 8005650:	4630      	mov	r0, r6
 8005652:	f002 facd 	bl	8007bf0 <_trace_isr_enter>
 8005656:	f002 f9fb 	bl	8007a50 <_dbg_check_enter_isr>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800565a:	f404 435f 	and.w	r3, r4, #57088	; 0xdf00
 800565e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005660:	43db      	mvns	r3, r3
 8005662:	6153      	str	r3, [r2, #20]
  i2c_lld_serve_error_interrupt(&I2CD1, sr);
 8005664:	4621      	mov	r1, r4
 8005666:	4628      	mov	r0, r5
 8005668:	f7ff fe52 	bl	8005310 <i2c_lld_serve_error_interrupt>

  OSAL_IRQ_EPILOGUE();
 800566c:	f002 fa10 	bl	8007a90 <_dbg_check_leave_isr>
 8005670:	4630      	mov	r0, r6
 8005672:	f002 fae5 	bl	8007c40 <_trace_isr_leave>
 8005676:	f006 fa6b 	bl	800bb50 <_port_irq_epilogue>
}
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	20004688 	.word	0x20004688
 8005680:	08014e4c 	.word	0x08014e4c
 8005684:	f3af 8000 	nop.w
 8005688:	f3af 8000 	nop.w
 800568c:	f3af 8000 	nop.w

08005690 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 8005690:	b510      	push	{r4, lr}

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
 8005692:	4c05      	ldr	r4, [pc, #20]	; (80056a8 <i2c_lld_init+0x18>)
 8005694:	4620      	mov	r0, r4
 8005696:	f7fc fc33 	bl	8001f00 <i2cObjectInit>
  I2CD1.thread = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	61e3      	str	r3, [r4, #28]
  I2CD1.i2c    = I2C1;
 800569e:	4a03      	ldr	r2, [pc, #12]	; (80056ac <i2c_lld_init+0x1c>)
 80056a0:	6362      	str	r2, [r4, #52]	; 0x34
  I2CD1.dmarx  = NULL;
 80056a2:	62e3      	str	r3, [r4, #44]	; 0x2c
  I2CD1.dmatx  = NULL;
 80056a4:	6323      	str	r3, [r4, #48]	; 0x30
  I2CD3.thread = NULL;
  I2CD3.i2c    = I2C3;
  I2CD3.dmarx  = NULL;
  I2CD3.dmatx  = NULL;
#endif /* STM32_I2C_USE_I2C3 */
}
 80056a6:	bd10      	pop	{r4, pc}
 80056a8:	20004688 	.word	0x20004688
 80056ac:	40005400 	.word	0x40005400

080056b0 <i2c_lld_start>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4604      	mov	r4, r0
  I2C_TypeDef *dp = i2cp->i2c;
 80056b4:	6b45      	ldr	r5, [r0, #52]	; 0x34

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80056b6:	7803      	ldrb	r3, [r0, #0]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d01a      	beq.n	80056f2 <i2c_lld_start+0x42>
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80056bc:	f105 0310 	add.w	r3, r5, #16
 80056c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	6093      	str	r3, [r2, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80056c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	6093      	str	r3, [r2, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 80056cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d0:	602b      	str	r3, [r5, #0]
  dp->CR1 = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	602b      	str	r3, [r5, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80056d6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80056da:	606b      	str	r3, [r5, #4]

  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
 80056dc:	4620      	mov	r0, r4
 80056de:	f7ff feff 	bl	80054e0 <i2c_lld_set_clock>
  i2c_lld_set_opmode(i2cp);
 80056e2:	4620      	mov	r0, r4
 80056e4:	f7ff fd64 	bl	80051b0 <i2c_lld_set_opmode>

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	602b      	str	r3, [r5, #0]
}
 80056f0:	bd38      	pop	{r3, r4, r5, pc}
    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80056f2:	f240 4356 	movw	r3, #1110	; 0x456
 80056f6:	6283      	str	r3, [r0, #40]	; 0x28
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80056f8:	f240 4316 	movw	r3, #1046	; 0x416
 80056fc:	6243      	str	r3, [r0, #36]	; 0x24
    if (&I2CD1 == i2cp) {
 80056fe:	4b22      	ldr	r3, [pc, #136]	; (8005788 <i2c_lld_start+0xd8>)
 8005700:	4298      	cmp	r0, r3
 8005702:	d1db      	bne.n	80056bc <i2c_lld_start+0xc>
      rccResetI2C1();
 8005704:	4b21      	ldr	r3, [pc, #132]	; (800578c <i2c_lld_start+0xdc>)
 8005706:	6a1a      	ldr	r2, [r3, #32]
 8005708:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800570c:	621a      	str	r2, [r3, #32]
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005714:	621a      	str	r2, [r3, #32]
 8005716:	6a1b      	ldr	r3, [r3, #32]
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C1_RX_DMA_STREAM,
 8005718:	4603      	mov	r3, r0
 800571a:	4a1d      	ldr	r2, [pc, #116]	; (8005790 <i2c_lld_start+0xe0>)
 800571c:	2105      	movs	r1, #5
 800571e:	2000      	movs	r0, #0
 8005720:	f7ff fa66 	bl	8004bf0 <dmaStreamAllocI>
 8005724:	62e0      	str	r0, [r4, #44]	; 0x2c
      osalDbgAssert(i2cp->dmarx != NULL, "unable to allocate stream");
 8005726:	b330      	cbz	r0, 8005776 <i2c_lld_start+0xc6>
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C1_TX_DMA_STREAM,
 8005728:	4623      	mov	r3, r4
 800572a:	4a1a      	ldr	r2, [pc, #104]	; (8005794 <i2c_lld_start+0xe4>)
 800572c:	2105      	movs	r1, #5
 800572e:	2006      	movs	r0, #6
 8005730:	f7ff fa5e 	bl	8004bf0 <dmaStreamAllocI>
 8005734:	6320      	str	r0, [r4, #48]	; 0x30
      osalDbgAssert(i2cp->dmatx != NULL, "unable to allocate stream");
 8005736:	b310      	cbz	r0, 800577e <i2c_lld_start+0xce>
      rccEnableI2C1(true);
 8005738:	4b14      	ldr	r3, [pc, #80]	; (800578c <i2c_lld_start+0xdc>)
 800573a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800573c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
 8005742:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005744:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005748:	661a      	str	r2, [r3, #96]	; 0x60
 800574a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 800574c:	2105      	movs	r1, #5
 800574e:	201f      	movs	r0, #31
 8005750:	f7fe fc8e 	bl	8004070 <nvicEnableVector>
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 8005754:	2105      	movs	r1, #5
 8005756:	2020      	movs	r0, #32
 8005758:	f7fe fc8a 	bl	8004070 <nvicEnableVector>
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 800575c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800575e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005766:	6263      	str	r3, [r4, #36]	; 0x24
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8005768:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800576a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800576e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005772:	62a3      	str	r3, [r4, #40]	; 0x28
 8005774:	e7a2      	b.n	80056bc <i2c_lld_start+0xc>
      osalDbgAssert(i2cp->dmarx != NULL, "unable to allocate stream");
 8005776:	4808      	ldr	r0, [pc, #32]	; (8005798 <i2c_lld_start+0xe8>)
 8005778:	f001 ff7a 	bl	8007670 <chSysHalt>
 800577c:	e7d4      	b.n	8005728 <i2c_lld_start+0x78>
      osalDbgAssert(i2cp->dmatx != NULL, "unable to allocate stream");
 800577e:	4806      	ldr	r0, [pc, #24]	; (8005798 <i2c_lld_start+0xe8>)
 8005780:	f001 ff76 	bl	8007670 <chSysHalt>
 8005784:	e7d8      	b.n	8005738 <i2c_lld_start+0x88>
 8005786:	bf00      	nop
 8005788:	20004688 	.word	0x20004688
 800578c:	40023800 	.word	0x40023800
 8005790:	08005461 	.word	0x08005461
 8005794:	08005411 	.word	0x08005411
 8005798:	08014e58 	.word	0x08014e58
 800579c:	f3af 8000 	nop.w

080057a0 <i2c_lld_stop>:
 * @notapi
 */
void i2c_lld_stop(I2CDriver *i2cp) {

  /* If not in stopped state then disables the I2C clock.*/
  if (i2cp->state != I2C_STOP) {
 80057a0:	7803      	ldrb	r3, [r0, #0]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d021      	beq.n	80057ea <i2c_lld_stop+0x4a>
void i2c_lld_stop(I2CDriver *i2cp) {
 80057a6:	b510      	push	{r4, lr}
 80057a8:	4604      	mov	r4, r0

    /* I2C disable.*/
    i2c_lld_abort_operation(i2cp);
 80057aa:	f7ff fcd1 	bl	8005150 <i2c_lld_abort_operation>
    dmaStreamFreeI(i2cp->dmatx);
 80057ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80057b0:	f7ff face 	bl	8004d50 <dmaStreamFreeI>
    dmaStreamFreeI(i2cp->dmarx);
 80057b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80057b6:	f7ff facb 	bl	8004d50 <dmaStreamFreeI>
    i2cp->dmatx = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	6323      	str	r3, [r4, #48]	; 0x30
    i2cp->dmarx = NULL;
 80057be:	62e3      	str	r3, [r4, #44]	; 0x2c

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
 80057c0:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <i2c_lld_stop+0x4c>)
 80057c2:	429c      	cmp	r4, r3
 80057c4:	d000      	beq.n	80057c8 <i2c_lld_stop+0x28>
      nvicDisableVector(I2C3_ER_IRQn);
      rccDisableI2C3();
    }
#endif
  }
}
 80057c6:	bd10      	pop	{r4, pc}
      nvicDisableVector(I2C1_EV_IRQn);
 80057c8:	201f      	movs	r0, #31
 80057ca:	f7fe fc69 	bl	80040a0 <nvicDisableVector>
      nvicDisableVector(I2C1_ER_IRQn);
 80057ce:	2020      	movs	r0, #32
 80057d0:	f7fe fc66 	bl	80040a0 <nvicDisableVector>
      rccDisableI2C1();
 80057d4:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <i2c_lld_stop+0x50>)
 80057d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
 80057de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057e0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80057e4:	661a      	str	r2, [r3, #96]	; 0x60
 80057e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80057e8:	e7ed      	b.n	80057c6 <i2c_lld_stop+0x26>
 80057ea:	4770      	bx	lr
 80057ec:	20004688 	.word	0x20004688
 80057f0:	40023800 	.word	0x40023800
 80057f4:	f3af 8000 	nop.w
 80057f8:	f3af 8000 	nop.w
 80057fc:	f3af 8000 	nop.w

08005800 <i2c_lld_master_receive_timeout>:
 *
 * @notapi
 */
msg_t i2c_lld_master_receive_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                     uint8_t *rxbuf, size_t rxbytes,
                                     sysinterval_t timeout) {
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	4605      	mov	r5, r0
 8005804:	4617      	mov	r7, r2
 8005806:	461e      	mov	r6, r3
  I2C_TypeDef *dp = i2cp->i2c;
 8005808:	6b44      	ldr	r4, [r0, #52]	; 0x34
#if defined(STM32F1XX_I2C)
  osalDbgCheck(rxbytes > 1);
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 800580a:	2300      	movs	r3, #0
 800580c:	6083      	str	r3, [r0, #8]

  /* Initializes driver fields, LSB = 1 -> receive.*/
  i2cp->addr = (addr << 1) | 0x01;
 800580e:	0049      	lsls	r1, r1, #1
 8005810:	f041 0101 	orr.w	r1, r1, #1
 8005814:	8401      	strh	r1, [r0, #32]
  _dbg_check_unlock();
 8005816:	f002 f8d3 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800581a:	f003 fbc1 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800581e:	4b40      	ldr	r3, [pc, #256]	; (8005920 <i2c_lld_master_receive_timeout+0x120>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d004      	beq.n	8005830 <i2c_lld_master_receive_timeout+0x30>
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	6899      	ldr	r1, [r3, #8]
 800582a:	6893      	ldr	r3, [r2, #8]
 800582c:	4299      	cmp	r1, r3
 800582e:	d310      	bcc.n	8005852 <i2c_lld_master_receive_timeout+0x52>
 8005830:	2300      	movs	r3, #0
 8005832:	f383 8811 	msr	BASEPRI, r3

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8005836:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800583c:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 800583e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8005844:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	605e      	str	r6, [r3, #4]
  return (systime_t)STM32_ST_TIM->CNT;
 800584a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800584e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8005850:	e01b      	b.n	800588a <i2c_lld_master_receive_timeout+0x8a>
 8005852:	4834      	ldr	r0, [pc, #208]	; (8005924 <i2c_lld_master_receive_timeout+0x124>)
 8005854:	f001 ff0c 	bl	8007670 <chSysHalt>
 8005858:	e7ea      	b.n	8005830 <i2c_lld_master_receive_timeout+0x30>
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
      dmaStreamDisable(i2cp->dmarx);
 800585a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	6813      	ldr	r3, [r2, #0]
 8005860:	f023 031f 	bic.w	r3, r3, #31
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	f012 0f01 	tst.w	r2, #1
 8005870:	d1f9      	bne.n	8005866 <i2c_lld_master_receive_timeout+0x66>
 8005872:	7a59      	ldrb	r1, [r3, #9]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	233d      	movs	r3, #61	; 0x3d
 8005878:	408b      	lsls	r3, r1
 800587a:	6013      	str	r3, [r2, #0]
      return MSG_TIMEOUT;
 800587c:	f04f 31ff 	mov.w	r1, #4294967295
  if (msg != MSG_OK) {
    dmaStreamDisable(i2cp->dmarx);
  }

  return msg;
}
 8005880:	4608      	mov	r0, r1
 8005882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005884:	2300      	movs	r3, #0
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	2320      	movs	r3, #32
 800588c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8005890:	f003 fb7e 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8005894:	f002 f87c 	bl	8007990 <_dbg_check_lock>
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8005898:	69a3      	ldr	r3, [r4, #24]
 800589a:	f013 0f02 	tst.w	r3, #2
 800589e:	d103      	bne.n	80058a8 <i2c_lld_master_receive_timeout+0xa8>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80058a6:	d018      	beq.n	80058da <i2c_lld_master_receive_timeout+0xda>
 80058a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80058ae:	1b9b      	subs	r3, r3, r6
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 80058b0:	f241 3287 	movw	r2, #4999	; 0x1387
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d8d0      	bhi.n	800585a <i2c_lld_master_receive_timeout+0x5a>
  _dbg_check_unlock();
 80058b8:	f002 f882 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80058bc:	f003 fb70 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80058c0:	4b17      	ldr	r3, [pc, #92]	; (8005920 <i2c_lld_master_receive_timeout+0x120>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d0dd      	beq.n	8005884 <i2c_lld_master_receive_timeout+0x84>
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	6899      	ldr	r1, [r3, #8]
 80058cc:	6893      	ldr	r3, [r2, #8]
 80058ce:	4299      	cmp	r1, r3
 80058d0:	d2d8      	bcs.n	8005884 <i2c_lld_master_receive_timeout+0x84>
 80058d2:	4814      	ldr	r0, [pc, #80]	; (8005924 <i2c_lld_master_receive_timeout+0x124>)
 80058d4:	f001 fecc 	bl	8007670 <chSysHalt>
 80058d8:	e7d4      	b.n	8005884 <i2c_lld_master_receive_timeout+0x84>
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80058da:	6863      	ldr	r3, [r4, #4]
 80058dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058e0:	6063      	str	r3, [r4, #4]
  dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80058e8:	6023      	str	r3, [r4, #0]
  return chThdSuspendTimeoutS(trp, timeout);
 80058ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058ee:	f105 001c 	add.w	r0, r5, #28
 80058f2:	f003 f9bd 	bl	8008c70 <chThdSuspendTimeoutS>
  if (msg != MSG_OK) {
 80058f6:	4601      	mov	r1, r0
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d0c1      	beq.n	8005880 <i2c_lld_master_receive_timeout+0x80>
    dmaStreamDisable(i2cp->dmarx);
 80058fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	6813      	ldr	r3, [r2, #0]
 8005902:	f023 031f 	bic.w	r3, r3, #31
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	f012 0f01 	tst.w	r2, #1
 8005912:	d1f9      	bne.n	8005908 <i2c_lld_master_receive_timeout+0x108>
 8005914:	7a58      	ldrb	r0, [r3, #9]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	233d      	movs	r3, #61	; 0x3d
 800591a:	4083      	lsls	r3, r0
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	e7af      	b.n	8005880 <i2c_lld_master_receive_timeout+0x80>
 8005920:	20004f68 	.word	0x20004f68
 8005924:	08014e68 	.word	0x08014e68
 8005928:	f3af 8000 	nop.w
 800592c:	f3af 8000 	nop.w

08005930 <i2c_lld_master_transmit_timeout>:
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      sysinterval_t timeout) {
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	4604      	mov	r4, r0
 8005934:	4617      	mov	r7, r2
 8005936:	461e      	mov	r6, r3
  I2C_TypeDef *dp = i2cp->i2c;
 8005938:	6b45      	ldr	r5, [r0, #52]	; 0x34
#if defined(STM32F1XX_I2C)
  osalDbgCheck((rxbytes == 0) || ((rxbytes > 1) && (rxbuf != NULL)));
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 800593a:	2300      	movs	r3, #0
 800593c:	6083      	str	r3, [r0, #8]

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 800593e:	0049      	lsls	r1, r1, #1
 8005940:	8401      	strh	r1, [r0, #32]
  _dbg_check_unlock();
 8005942:	f002 f83d 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8005946:	f003 fb2b 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800594a:	4b57      	ldr	r3, [pc, #348]	; (8005aa8 <i2c_lld_master_transmit_timeout+0x178>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d004      	beq.n	800595c <i2c_lld_master_transmit_timeout+0x2c>
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	6899      	ldr	r1, [r3, #8]
 8005956:	6893      	ldr	r3, [r2, #8]
 8005958:	4299      	cmp	r1, r3
 800595a:	d31c      	bcc.n	8005996 <i2c_lld_master_transmit_timeout+0x66>
 800595c:	2300      	movs	r3, #0
 800595e:	f383 8811 	msr	BASEPRI, r3

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8005962:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005968:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 800596a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8005970:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	605e      	str	r6, [r3, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8005976:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800597c:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 800597e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	9a06      	ldr	r2, [sp, #24]
 8005984:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8005986:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	9a07      	ldr	r2, [sp, #28]
 800598c:	605a      	str	r2, [r3, #4]
 800598e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005992:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8005994:	e02c      	b.n	80059f0 <i2c_lld_master_transmit_timeout+0xc0>
 8005996:	4845      	ldr	r0, [pc, #276]	; (8005aac <i2c_lld_master_transmit_timeout+0x17c>)
 8005998:	f001 fe6a 	bl	8007670 <chSysHalt>
 800599c:	e7de      	b.n	800595c <i2c_lld_master_transmit_timeout+0x2c>
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
      dmaStreamDisable(i2cp->dmatx);
 800599e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	6813      	ldr	r3, [r2, #0]
 80059a4:	f023 031f 	bic.w	r3, r3, #31
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	f012 0f01 	tst.w	r2, #1
 80059b4:	d1f9      	bne.n	80059aa <i2c_lld_master_transmit_timeout+0x7a>
 80059b6:	7a59      	ldrb	r1, [r3, #9]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	233d      	movs	r3, #61	; 0x3d
 80059bc:	408b      	lsls	r3, r1
 80059be:	6013      	str	r3, [r2, #0]
      dmaStreamDisable(i2cp->dmarx);
 80059c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	6813      	ldr	r3, [r2, #0]
 80059c6:	f023 031f 	bic.w	r3, r3, #31
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	f012 0f01 	tst.w	r2, #1
 80059d6:	d1f9      	bne.n	80059cc <i2c_lld_master_transmit_timeout+0x9c>
 80059d8:	7a59      	ldrb	r1, [r3, #9]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	233d      	movs	r3, #61	; 0x3d
 80059de:	408b      	lsls	r3, r1
 80059e0:	6013      	str	r3, [r2, #0]
      return MSG_TIMEOUT;
 80059e2:	f04f 31ff 	mov.w	r1, #4294967295
    dmaStreamDisable(i2cp->dmatx);
    dmaStreamDisable(i2cp->dmarx);
  }

  return msg;
}
 80059e6:	4608      	mov	r0, r1
 80059e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ea:	2300      	movs	r3, #0
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	2320      	movs	r3, #32
 80059f2:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80059f6:	f003 facb 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80059fa:	f001 ffc9 	bl	8007990 <_dbg_check_lock>
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 80059fe:	69ab      	ldr	r3, [r5, #24]
 8005a00:	f013 0f02 	tst.w	r3, #2
 8005a04:	d103      	bne.n	8005a0e <i2c_lld_master_transmit_timeout+0xde>
 8005a06:	682b      	ldr	r3, [r5, #0]
 8005a08:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005a0c:	d018      	beq.n	8005a40 <i2c_lld_master_transmit_timeout+0x110>
 8005a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	1b9b      	subs	r3, r3, r6
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 8005a16:	f241 3287 	movw	r2, #4999	; 0x1387
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d8bf      	bhi.n	800599e <i2c_lld_master_transmit_timeout+0x6e>
  _dbg_check_unlock();
 8005a1e:	f001 ffcf 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8005a22:	f003 fabd 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005a26:	4b20      	ldr	r3, [pc, #128]	; (8005aa8 <i2c_lld_master_transmit_timeout+0x178>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d0dd      	beq.n	80059ea <i2c_lld_master_transmit_timeout+0xba>
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	6899      	ldr	r1, [r3, #8]
 8005a32:	6893      	ldr	r3, [r2, #8]
 8005a34:	4299      	cmp	r1, r3
 8005a36:	d2d8      	bcs.n	80059ea <i2c_lld_master_transmit_timeout+0xba>
 8005a38:	481c      	ldr	r0, [pc, #112]	; (8005aac <i2c_lld_master_transmit_timeout+0x17c>)
 8005a3a:	f001 fe19 	bl	8007670 <chSysHalt>
 8005a3e:	e7d4      	b.n	80059ea <i2c_lld_master_transmit_timeout+0xba>
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8005a40:	686b      	ldr	r3, [r5, #4]
 8005a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a46:	606b      	str	r3, [r5, #4]
  dp->CR1 |= I2C_CR1_START;
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4e:	602b      	str	r3, [r5, #0]
 8005a50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a54:	f104 001c 	add.w	r0, r4, #28
 8005a58:	f003 f90a 	bl	8008c70 <chThdSuspendTimeoutS>
  if (msg != MSG_OK) {
 8005a5c:	4601      	mov	r1, r0
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d0c1      	beq.n	80059e6 <i2c_lld_master_transmit_timeout+0xb6>
    dmaStreamDisable(i2cp->dmatx);
 8005a62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	6813      	ldr	r3, [r2, #0]
 8005a68:	f023 031f 	bic.w	r3, r3, #31
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	6812      	ldr	r2, [r2, #0]
 8005a74:	f012 0f01 	tst.w	r2, #1
 8005a78:	d1f9      	bne.n	8005a6e <i2c_lld_master_transmit_timeout+0x13e>
 8005a7a:	7a58      	ldrb	r0, [r3, #9]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	233d      	movs	r3, #61	; 0x3d
 8005a80:	4083      	lsls	r3, r0
 8005a82:	6013      	str	r3, [r2, #0]
    dmaStreamDisable(i2cp->dmarx);
 8005a84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	6813      	ldr	r3, [r2, #0]
 8005a8a:	f023 031f 	bic.w	r3, r3, #31
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	f012 0f01 	tst.w	r2, #1
 8005a9a:	d1f9      	bne.n	8005a90 <i2c_lld_master_transmit_timeout+0x160>
 8005a9c:	7a58      	ldrb	r0, [r3, #9]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	233d      	movs	r3, #61	; 0x3d
 8005aa2:	4083      	lsls	r3, r0
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	e79e      	b.n	80059e6 <i2c_lld_master_transmit_timeout+0xb6>
 8005aa8:	20004f68 	.word	0x20004f68
 8005aac:	08014e68 	.word	0x08014e68

08005ab0 <rtc_enter_init>:
 *
 * @notapi
 */
static void rtc_enter_init(void) {

  RTCD1.rtc->ISR |= RTC_ISR_INIT;
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <rtc_enter_init+0x18>)
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	68d3      	ldr	r3, [r2, #12]
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aba:	60d3      	str	r3, [r2, #12]
  while ((RTCD1.rtc->ISR & RTC_ISR_INITF) == 0)
 8005abc:	68d3      	ldr	r3, [r2, #12]
 8005abe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ac2:	d0fb      	beq.n	8005abc <rtc_enter_init+0xc>
    ;
}
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	200046c0 	.word	0x200046c0
 8005acc:	f3af 8000 	nop.w

08005ad0 <rtc_decode_time>:
 * @param[in] tr        TR register value
 * @param[out] timespec pointer to a @p RTCDateTime structure
 *
 * @notapi
 */
static void rtc_decode_time(uint32_t tr, RTCDateTime *timespec) {
 8005ad0:	b410      	push	{r4}
  uint32_t n;

  n  = ((tr >> RTC_TR_HT_OFFSET) & 3)   * 36000000;
 8005ad2:	f3c0 5201 	ubfx	r2, r0, #20, #2
  n += ((tr >> RTC_TR_HU_OFFSET) & 15)  * 3600000;
 8005ad6:	f3c0 4403 	ubfx	r4, r0, #16, #4
 8005ada:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <rtc_decode_time+0x50>)
 8005adc:	fb03 f304 	mul.w	r3, r3, r4
 8005ae0:	4c10      	ldr	r4, [pc, #64]	; (8005b24 <rtc_decode_time+0x54>)
 8005ae2:	fb04 3302 	mla	r3, r4, r2, r3
  n += ((tr >> RTC_TR_MNT_OFFSET) & 7)  * 600000;
 8005ae6:	f3c0 3202 	ubfx	r2, r0, #12, #3
 8005aea:	4c0f      	ldr	r4, [pc, #60]	; (8005b28 <rtc_decode_time+0x58>)
 8005aec:	fb04 3202 	mla	r2, r4, r2, r3
  n += ((tr >> RTC_TR_MNU_OFFSET) & 15) * 60000;
 8005af0:	f3c0 2303 	ubfx	r3, r0, #8, #4
 8005af4:	f64e 2460 	movw	r4, #60000	; 0xea60
 8005af8:	fb04 2203 	mla	r2, r4, r3, r2
  n += ((tr >> RTC_TR_ST_OFFSET) & 7)   * 10000;
 8005afc:	f3c0 1302 	ubfx	r3, r0, #4, #3
 8005b00:	f242 7410 	movw	r4, #10000	; 0x2710
 8005b04:	fb04 2303 	mla	r3, r4, r3, r2
  n += ((tr >> RTC_TR_SU_OFFSET) & 15)  * 1000;
 8005b08:	f000 000f 	and.w	r0, r0, #15
 8005b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b10:	fb02 3000 	mla	r0, r2, r0, r3
  timespec->millisecond = n;
 8005b14:	684b      	ldr	r3, [r1, #4]
 8005b16:	f360 031a 	bfi	r3, r0, #0, #27
 8005b1a:	604b      	str	r3, [r1, #4]
}
 8005b1c:	bc10      	pop	{r4}
 8005b1e:	4770      	bx	lr
 8005b20:	0036ee80 	.word	0x0036ee80
 8005b24:	02255100 	.word	0x02255100
 8005b28:	000927c0 	.word	0x000927c0
 8005b2c:	f3af 8000 	nop.w

08005b30 <rtc_decode_date>:
 * @param[in] dr        DR register value
 * @param[out] timespec pointer to a @p RTCDateTime structure
 *
 * @notapi
 */
static void rtc_decode_date(uint32_t dr, RTCDateTime *timespec) {
 8005b30:	b430      	push	{r4, r5}

  timespec->year  = (((dr >> RTC_DR_YT_OFFSET) & 15) * 10) +
                     ((dr >> RTC_DR_YU_OFFSET) & 15);
 8005b32:	f3c0 4203 	ubfx	r2, r0, #16, #4
  timespec->year  = (((dr >> RTC_DR_YT_OFFSET) & 15) * 10) +
 8005b36:	f3c0 5303 	ubfx	r3, r0, #20, #4
 8005b3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b3e:	005c      	lsls	r4, r3, #1
 8005b40:	1913      	adds	r3, r2, r4
 8005b42:	700b      	strb	r3, [r1, #0]
  timespec->month = (((dr >> RTC_TR_MNT_OFFSET) & 1) * 10) +
                     ((dr >> RTC_TR_MNU_OFFSET) & 15);
 8005b44:	f3c0 2203 	ubfx	r2, r0, #8, #4
  timespec->month = (((dr >> RTC_TR_MNT_OFFSET) & 1) * 10) +
 8005b48:	f3c0 3300 	ubfx	r3, r0, #12, #1
 8005b4c:	009c      	lsls	r4, r3, #2
 8005b4e:	4423      	add	r3, r4
 8005b50:	005c      	lsls	r4, r3, #1
 8005b52:	4422      	add	r2, r4
 8005b54:	784b      	ldrb	r3, [r1, #1]
 8005b56:	f362 0303 	bfi	r3, r2, #0, #4
  timespec->day   = (((dr >> RTC_DR_DT_OFFSET) & 3) * 10) +
                     ((dr >> RTC_DR_DU_OFFSET) & 15);
 8005b5a:	f000 040f 	and.w	r4, r0, #15
  timespec->day   = (((dr >> RTC_DR_DT_OFFSET) & 3) * 10) +
 8005b5e:	f3c0 1201 	ubfx	r2, r0, #4, #2
 8005b62:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005b66:	0055      	lsls	r5, r2, #1
 8005b68:	1962      	adds	r2, r4, r5
 8005b6a:	788c      	ldrb	r4, [r1, #2]
 8005b6c:	f362 0404 	bfi	r4, r2, #0, #5
 8005b70:	708c      	strb	r4, [r1, #2]
  timespec->dayofweek = (dr >> RTC_DR_WDU_OFFSET) & 7;
 8005b72:	f3c0 3042 	ubfx	r0, r0, #13, #3
 8005b76:	f360 1347 	bfi	r3, r0, #5, #3
 8005b7a:	704b      	strb	r3, [r1, #1]
}
 8005b7c:	bc30      	pop	{r4, r5}
 8005b7e:	4770      	bx	lr

08005b80 <rtc_encode_time>:
 * @param[in] timespec  pointer to a @p RTCDateTime structure
 * @return              the TR register encoding.
 *
 * @notapi
 */
static uint32_t rtc_encode_time(const RTCDateTime *timespec) {
 8005b80:	b470      	push	{r4, r5, r6}
  uint32_t n, tr = 0;

  /* Subseconds cannot be set.*/
  n = timespec->millisecond / 1000;
 8005b82:	6842      	ldr	r2, [r0, #4]
 8005b84:	f3c2 021a 	ubfx	r2, r2, #0, #27
 8005b88:	4822      	ldr	r0, [pc, #136]	; (8005c14 <rtc_encode_time+0x94>)
 8005b8a:	fb80 3202 	smull	r3, r2, r0, r2
 8005b8e:	1192      	asrs	r2, r2, #6

  /* Seconds conversion.*/
  tr = tr | ((n % 10) << RTC_TR_SU_OFFSET);
 8005b90:	4921      	ldr	r1, [pc, #132]	; (8005c18 <rtc_encode_time+0x98>)
 8005b92:	fba1 0302 	umull	r0, r3, r1, r2
 8005b96:	08db      	lsrs	r3, r3, #3
 8005b98:	461e      	mov	r6, r3
 8005b9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b9e:	0058      	lsls	r0, r3, #1
 8005ba0:	1a13      	subs	r3, r2, r0
  n /= 10;
  tr = tr | ((n % 6) << RTC_TR_ST_OFFSET);
 8005ba2:	4c1e      	ldr	r4, [pc, #120]	; (8005c1c <rtc_encode_time+0x9c>)
 8005ba4:	fba4 5006 	umull	r5, r0, r4, r6
 8005ba8:	0880      	lsrs	r0, r0, #2
 8005baa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005bae:	0045      	lsls	r5, r0, #1
 8005bb0:	1b70      	subs	r0, r6, r5
 8005bb2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  n /= 6;
 8005bb6:	4d1a      	ldr	r5, [pc, #104]	; (8005c20 <rtc_encode_time+0xa0>)
 8005bb8:	fba5 0502 	umull	r0, r5, r5, r2
 8005bbc:	096d      	lsrs	r5, r5, #5

  /* Minutes conversion.*/
  tr = tr | ((n % 10) << RTC_TR_MNU_OFFSET);
 8005bbe:	fba1 6005 	umull	r6, r0, r1, r5
 8005bc2:	08c0      	lsrs	r0, r0, #3
 8005bc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bc8:	0046      	lsls	r6, r0, #1
 8005bca:	1ba8      	subs	r0, r5, r6
 8005bcc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  n /= 10;
 8005bd0:	4d14      	ldr	r5, [pc, #80]	; (8005c24 <rtc_encode_time+0xa4>)
 8005bd2:	fba5 0502 	umull	r0, r5, r5, r2
 8005bd6:	09ad      	lsrs	r5, r5, #6
  tr = tr | ((n % 6) << RTC_TR_MNT_OFFSET);
 8005bd8:	fba4 4005 	umull	r4, r0, r4, r5
 8005bdc:	0880      	lsrs	r0, r0, #2
 8005bde:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005be2:	0044      	lsls	r4, r0, #1
 8005be4:	1b28      	subs	r0, r5, r4
 8005be6:	ea43 3000 	orr.w	r0, r3, r0, lsl #12
  n /= 6;
 8005bea:	4c0f      	ldr	r4, [pc, #60]	; (8005c28 <rtc_encode_time+0xa8>)
 8005bec:	fba4 3402 	umull	r3, r4, r4, r2
 8005bf0:	0ae4      	lsrs	r4, r4, #11

  /* Hours conversion.*/
  tr = tr | ((n % 10) << RTC_TR_HU_OFFSET);
 8005bf2:	fba1 1304 	umull	r1, r3, r1, r4
 8005bf6:	08db      	lsrs	r3, r3, #3
 8005bf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005bfc:	0059      	lsls	r1, r3, #1
 8005bfe:	1a63      	subs	r3, r4, r1
 8005c00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  n /= 10;
 8005c04:	4809      	ldr	r0, [pc, #36]	; (8005c2c <rtc_encode_time+0xac>)
 8005c06:	fba0 2002 	umull	r2, r0, r0, r2
 8005c0a:	0bc0      	lsrs	r0, r0, #15
  tr = tr | (n << RTC_TR_HT_OFFSET);

  return tr;
}
 8005c0c:	ea43 5000 	orr.w	r0, r3, r0, lsl #20
 8005c10:	bc70      	pop	{r4, r5, r6}
 8005c12:	4770      	bx	lr
 8005c14:	10624dd3 	.word	0x10624dd3
 8005c18:	cccccccd 	.word	0xcccccccd
 8005c1c:	aaaaaaab 	.word	0xaaaaaaab
 8005c20:	88888889 	.word	0x88888889
 8005c24:	1b4e81b5 	.word	0x1b4e81b5
 8005c28:	91a2b3c5 	.word	0x91a2b3c5
 8005c2c:	e90452d5 	.word	0xe90452d5

08005c30 <rtc_encode_date>:
 * @param[in] timespec  pointer to a @p RTCDateTime structure
 * @return              the DR register encoding.
 *
 * @notapi
 */
static uint32_t rtc_encode_date(const RTCDateTime *timespec) {
 8005c30:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t n, dr = 0;

  /* Year conversion. Note, only years last two digits are considered.*/
  n = timespec->year;
 8005c32:	7804      	ldrb	r4, [r0, #0]
  dr = dr | ((n % 10) << RTC_DR_YU_OFFSET);
 8005c34:	4b1a      	ldr	r3, [pc, #104]	; (8005ca0 <rtc_encode_date+0x70>)
 8005c36:	fba3 1204 	umull	r1, r2, r3, r4
 8005c3a:	08d1      	lsrs	r1, r2, #3
 8005c3c:	460d      	mov	r5, r1
 8005c3e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005c42:	0051      	lsls	r1, r2, #1
 8005c44:	1a61      	subs	r1, r4, r1
  n /= 10;
  dr = dr | ((n % 10) << RTC_DR_YT_OFFSET);
 8005c46:	fba3 4205 	umull	r4, r2, r3, r5
 8005c4a:	08d2      	lsrs	r2, r2, #3
 8005c4c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c50:	0054      	lsls	r4, r2, #1
 8005c52:	1b2a      	subs	r2, r5, r4
 8005c54:	0512      	lsls	r2, r2, #20
 8005c56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

  /* Months conversion.*/
  n = timespec->month;
 8005c5a:	7844      	ldrb	r4, [r0, #1]
 8005c5c:	f004 060f 	and.w	r6, r4, #15
  dr = dr | ((n % 10) << RTC_DR_MU_OFFSET);
 8005c60:	fba3 5106 	umull	r5, r1, r3, r6
 8005c64:	08c9      	lsrs	r1, r1, #3
 8005c66:	460f      	mov	r7, r1
 8005c68:	008d      	lsls	r5, r1, #2
 8005c6a:	440d      	add	r5, r1
 8005c6c:	0069      	lsls	r1, r5, #1
 8005c6e:	1a71      	subs	r1, r6, r1
 8005c70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  n /= 10;
  dr = dr | ((n % 10) << RTC_DR_MT_OFFSET);
 8005c74:	ea42 3207 	orr.w	r2, r2, r7, lsl #12

  /* Days conversion.*/
  n = timespec->day;
 8005c78:	7881      	ldrb	r1, [r0, #2]
 8005c7a:	f001 011f 	and.w	r1, r1, #31
  dr = dr | ((n % 10) << RTC_DR_DU_OFFSET);
 8005c7e:	fba3 0301 	umull	r0, r3, r3, r1
 8005c82:	08db      	lsrs	r3, r3, #3
 8005c84:	461d      	mov	r5, r3
 8005c86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c8a:	0058      	lsls	r0, r3, #1
 8005c8c:	1a0b      	subs	r3, r1, r0
 8005c8e:	4313      	orrs	r3, r2
  n /= 10;
  dr = dr | ((n % 10) << RTC_DR_DT_OFFSET);
 8005c90:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Days of week conversion.*/
  dr = dr | (timespec->dayofweek << RTC_DR_WDU_OFFSET);
 8005c94:	0960      	lsrs	r0, r4, #5

  return dr;
}
 8005c96:	ea43 3040 	orr.w	r0, r3, r0, lsl #13
 8005c9a:	bcf0      	pop	{r4, r5, r6, r7}
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	cccccccd 	.word	0xcccccccd
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	f3af 8000 	nop.w
 8005cac:	f3af 8000 	nop.w

08005cb0 <_getsize>:
static size_t _getsize(void *instance) {

  (void)instance;

  return (size_t)STM32_RTC_STORAGE_SIZE;
}
 8005cb0:	2050      	movs	r0, #80	; 0x50
 8005cb2:	4770      	bx	lr
 8005cb4:	f3af 8000 	nop.w
 8005cb8:	f3af 8000 	nop.w
 8005cbc:	f3af 8000 	nop.w

08005cc0 <_write>:

  return PS_NO_ERROR;
}

static ps_error_t _write(void *instance, ps_offset_t offset,
                         size_t n, const uint8_t *wp) {
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	460f      	mov	r7, r1
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	461c      	mov	r4, r3
  volatile uint32_t *bkpr = &((RTCDriver *)instance)->rtc->BKP0R;
 8005cc8:	6845      	ldr	r5, [r0, #4]
 8005cca:	3550      	adds	r5, #80	; 0x50
  unsigned i;

  chDbgCheck((instance != NULL) && (wp != NULL));
 8005ccc:	b168      	cbz	r0, 8005cea <_write+0x2a>
 8005cce:	b163      	cbz	r3, 8005cea <_write+0x2a>
  chDbgCheck((n > 0U) && (n <= STM32_RTC_STORAGE_SIZE));
 8005cd0:	1e73      	subs	r3, r6, #1
 8005cd2:	2b4f      	cmp	r3, #79	; 0x4f
 8005cd4:	d80d      	bhi.n	8005cf2 <_write+0x32>
  chDbgCheck((offset < STM32_RTC_STORAGE_SIZE) &&
 8005cd6:	2f4f      	cmp	r7, #79	; 0x4f
 8005cd8:	d802      	bhi.n	8005ce0 <_write+0x20>
 8005cda:	19f3      	adds	r3, r6, r7
 8005cdc:	2b50      	cmp	r3, #80	; 0x50
 8005cde:	d902      	bls.n	8005ce6 <_write+0x26>
 8005ce0:	4812      	ldr	r0, [pc, #72]	; (8005d2c <_write+0x6c>)
 8005ce2:	f001 fcc5 	bl	8007670 <chSysHalt>
                         size_t n, const uint8_t *wp) {
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	e01c      	b.n	8005d24 <_write+0x64>
  chDbgCheck((instance != NULL) && (wp != NULL));
 8005cea:	4810      	ldr	r0, [pc, #64]	; (8005d2c <_write+0x6c>)
 8005cec:	f001 fcc0 	bl	8007670 <chSysHalt>
 8005cf0:	e7ee      	b.n	8005cd0 <_write+0x10>
  chDbgCheck((n > 0U) && (n <= STM32_RTC_STORAGE_SIZE));
 8005cf2:	480e      	ldr	r0, [pc, #56]	; (8005d2c <_write+0x6c>)
 8005cf4:	f001 fcbc 	bl	8007670 <chSysHalt>
 8005cf8:	e7ed      	b.n	8005cd6 <_write+0x16>
             (offset + n <= STM32_RTC_STORAGE_SIZE));

  for (i = 0; i < (unsigned)n; i++) {
    unsigned index = ((unsigned)offset + i) / sizeof (uint32_t);
 8005cfa:	19c3      	adds	r3, r0, r7
    unsigned shift = ((unsigned)offset + i) % sizeof (uint32_t);
 8005cfc:	f003 0103 	and.w	r1, r3, #3
    uint32_t regval = bkpr[index];
 8005d00:	f023 0303 	bic.w	r3, r3, #3
 8005d04:	58ea      	ldr	r2, [r5, r3]
    regval &= ~(0xFFU << (shift * 8U));
 8005d06:	00c9      	lsls	r1, r1, #3
 8005d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005d0c:	fa0c fc01 	lsl.w	ip, ip, r1
 8005d10:	ea22 020c 	bic.w	r2, r2, ip
    regval |= (uint32_t)*wp++ << (shift * 8U);
 8005d14:	f894 c000 	ldrb.w	ip, [r4]
 8005d18:	fa0c f101 	lsl.w	r1, ip, r1
 8005d1c:	430a      	orrs	r2, r1
    bkpr[index] = regval;
 8005d1e:	50ea      	str	r2, [r5, r3]
  for (i = 0; i < (unsigned)n; i++) {
 8005d20:	3001      	adds	r0, #1
    regval |= (uint32_t)*wp++ << (shift * 8U);
 8005d22:	3401      	adds	r4, #1
  for (i = 0; i < (unsigned)n; i++) {
 8005d24:	42b0      	cmp	r0, r6
 8005d26:	d3e8      	bcc.n	8005cfa <_write+0x3a>
  }

  return PS_NO_ERROR;
}
 8005d28:	2000      	movs	r0, #0
 8005d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d2c:	08014e74 	.word	0x08014e74

08005d30 <_read>:
                        size_t n, uint8_t *rp) {
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	460f      	mov	r7, r1
 8005d34:	4615      	mov	r5, r2
 8005d36:	461c      	mov	r4, r3
  volatile uint32_t *bkpr = &((RTCDriver *)instance)->rtc->BKP0R;
 8005d38:	6846      	ldr	r6, [r0, #4]
 8005d3a:	3650      	adds	r6, #80	; 0x50
  chDbgCheck((instance != NULL) && (rp != NULL));
 8005d3c:	b168      	cbz	r0, 8005d5a <_read+0x2a>
 8005d3e:	b163      	cbz	r3, 8005d5a <_read+0x2a>
  chDbgCheck((n > 0U) && (n <= STM32_RTC_STORAGE_SIZE));
 8005d40:	1e6b      	subs	r3, r5, #1
 8005d42:	2b4f      	cmp	r3, #79	; 0x4f
 8005d44:	d80d      	bhi.n	8005d62 <_read+0x32>
  chDbgCheck((offset < STM32_RTC_STORAGE_SIZE) &&
 8005d46:	2f4f      	cmp	r7, #79	; 0x4f
 8005d48:	d802      	bhi.n	8005d50 <_read+0x20>
 8005d4a:	19eb      	adds	r3, r5, r7
 8005d4c:	2b50      	cmp	r3, #80	; 0x50
 8005d4e:	d902      	bls.n	8005d56 <_read+0x26>
 8005d50:	480d      	ldr	r0, [pc, #52]	; (8005d88 <_read+0x58>)
 8005d52:	f001 fc8d 	bl	8007670 <chSysHalt>
                        size_t n, uint8_t *rp) {
 8005d56:	2200      	movs	r2, #0
 8005d58:	e012      	b.n	8005d80 <_read+0x50>
  chDbgCheck((instance != NULL) && (rp != NULL));
 8005d5a:	480b      	ldr	r0, [pc, #44]	; (8005d88 <_read+0x58>)
 8005d5c:	f001 fc88 	bl	8007670 <chSysHalt>
 8005d60:	e7ee      	b.n	8005d40 <_read+0x10>
  chDbgCheck((n > 0U) && (n <= STM32_RTC_STORAGE_SIZE));
 8005d62:	4809      	ldr	r0, [pc, #36]	; (8005d88 <_read+0x58>)
 8005d64:	f001 fc84 	bl	8007670 <chSysHalt>
 8005d68:	e7ed      	b.n	8005d46 <_read+0x16>
    unsigned index = ((unsigned)offset + i) / sizeof (uint32_t);
 8005d6a:	19d3      	adds	r3, r2, r7
    unsigned shift = ((unsigned)offset + i) % sizeof (uint32_t);
 8005d6c:	f003 0103 	and.w	r1, r3, #3
    *rp++ = (uint8_t)(bkpr[index] >> (shift * 8U));
 8005d70:	f023 0303 	bic.w	r3, r3, #3
 8005d74:	58f3      	ldr	r3, [r6, r3]
 8005d76:	00c9      	lsls	r1, r1, #3
 8005d78:	40cb      	lsrs	r3, r1
 8005d7a:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < (unsigned)n; i++) {
 8005d7c:	3201      	adds	r2, #1
    *rp++ = (uint8_t)(bkpr[index] >> (shift * 8U));
 8005d7e:	3401      	adds	r4, #1
  for (i = 0; i < (unsigned)n; i++) {
 8005d80:	42aa      	cmp	r2, r5
 8005d82:	d3f2      	bcc.n	8005d6a <_read+0x3a>
}
 8005d84:	2000      	movs	r0, #0
 8005d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d88:	08014e7c 	.word	0x08014e7c
 8005d8c:	f3af 8000 	nop.w

08005d90 <Vector48>:
/**
 * @brief   RTC TAMP/STAMP interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_RTC_TAMP_STAMP_HANDLER) {
 8005d90:	b510      	push	{r4, lr}
  uint32_t isr, clear;

  OSAL_IRQ_PROLOGUE();
 8005d92:	f003 f8d5 	bl	8008f40 <_stats_increase_irq>
 8005d96:	481f      	ldr	r0, [pc, #124]	; (8005e14 <Vector48+0x84>)
 8005d98:	f001 ff2a 	bl	8007bf0 <_trace_isr_enter>
 8005d9c:	f001 fe58 	bl	8007a50 <_dbg_check_enter_isr>
#if defined(RTC_ISR_TAMP3F)
           | RTC_ISR_TAMP3F
#endif
          );

  isr = RTCD1.rtc->ISR;
 8005da0:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <Vector48+0x88>)
 8005da2:	6853      	ldr	r3, [r2, #4]
 8005da4:	68dc      	ldr	r4, [r3, #12]
  RTCD1.rtc->ISR = isr & ~clear;
 8005da6:	f424 41f0 	bic.w	r1, r4, #30720	; 0x7800
 8005daa:	60d9      	str	r1, [r3, #12]

  extiClearGroup1(EXTI_MASK1(STM32_RTC_TAMP_STAMP_EXTI));
 8005dac:	491b      	ldr	r1, [pc, #108]	; (8005e1c <Vector48+0x8c>)
 8005dae:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005db2:	6148      	str	r0, [r1, #20]

  if (RTCD1.callback != NULL) {
 8005db4:	6892      	ldr	r2, [r2, #8]
 8005db6:	b322      	cbz	r2, 8005e02 <Vector48+0x72>
    uint32_t cr, tcr;

    cr = RTCD1.rtc->CR;
 8005db8:	689b      	ldr	r3, [r3, #8]
    if ((cr & RTC_CR_TSIE) != 0U) {
 8005dba:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005dbe:	d00c      	beq.n	8005dda <Vector48+0x4a>
      if ((isr & RTC_ISR_TSF) != 0U) {
 8005dc0:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8005dc4:	d002      	beq.n	8005dcc <Vector48+0x3c>
        RTCD1.callback(&RTCD1, RTC_EVENT_TS);
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	4813      	ldr	r0, [pc, #76]	; (8005e18 <Vector48+0x88>)
 8005dca:	4790      	blx	r2
      }
      if ((isr & RTC_ISR_TSOVF) != 0U) {
 8005dcc:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8005dd0:	d003      	beq.n	8005dda <Vector48+0x4a>
        RTCD1.callback(&RTCD1, RTC_EVENT_TS_OVF);
 8005dd2:	4811      	ldr	r0, [pc, #68]	; (8005e18 <Vector48+0x88>)
 8005dd4:	6883      	ldr	r3, [r0, #8]
 8005dd6:	2103      	movs	r1, #3
 8005dd8:	4798      	blx	r3
    }

    /* This part is different depending on if the RTC has a TAMPCR or TAFCR
       register.*/
#if defined(RTC_TAFCR_TAMP1E)
    tcr = RTCD1.rtc->TAFCR;
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <Vector48+0x88>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if ((tcr & RTC_TAFCR_TAMPIE) != 0U) {
 8005de0:	f013 0f04 	tst.w	r3, #4
 8005de4:	d00d      	beq.n	8005e02 <Vector48+0x72>
#if defined(RTC_ISR_TAMP1F)
      if ((isr & RTC_ISR_TAMP1F) != 0U) {
 8005de6:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8005dea:	d003      	beq.n	8005df4 <Vector48+0x64>
        RTCD1.callback(&RTCD1, RTC_EVENT_TAMP1);
 8005dec:	480a      	ldr	r0, [pc, #40]	; (8005e18 <Vector48+0x88>)
 8005dee:	6883      	ldr	r3, [r0, #8]
 8005df0:	2104      	movs	r1, #4
 8005df2:	4798      	blx	r3
      }
#endif
#if defined(RTC_ISR_TAMP2F)
      if ((isr & RTC_ISR_TAMP2F) != 0U) {
 8005df4:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8005df8:	d003      	beq.n	8005e02 <Vector48+0x72>
        RTCD1.callback(&RTCD1, RTC_EVENT_TAMP2);
 8005dfa:	4807      	ldr	r0, [pc, #28]	; (8005e18 <Vector48+0x88>)
 8005dfc:	6883      	ldr	r3, [r0, #8]
 8005dfe:	2105      	movs	r1, #5
 8005e00:	4798      	blx	r3
    }
#endif
#endif /* !defined(RTC_TAFCR_TAMP1E) */
  }

  OSAL_IRQ_EPILOGUE();
 8005e02:	f001 fe45 	bl	8007a90 <_dbg_check_leave_isr>
 8005e06:	4803      	ldr	r0, [pc, #12]	; (8005e14 <Vector48+0x84>)
 8005e08:	f001 ff1a 	bl	8007c40 <_trace_isr_leave>
 8005e0c:	f005 fea0 	bl	800bb50 <_port_irq_epilogue>
}
 8005e10:	bd10      	pop	{r4, pc}
 8005e12:	bf00      	nop
 8005e14:	08014e84 	.word	0x08014e84
 8005e18:	200046c0 	.word	0x200046c0
 8005e1c:	40013c00 	.word	0x40013c00

08005e20 <Vector4C>:
/**
 * @brief   RTC wakeup interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_RTC_WKUP_HANDLER) {
 8005e20:	b510      	push	{r4, lr}
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();
 8005e22:	f003 f88d 	bl	8008f40 <_stats_increase_irq>
 8005e26:	4811      	ldr	r0, [pc, #68]	; (8005e6c <Vector4C+0x4c>)
 8005e28:	f001 fee2 	bl	8007bf0 <_trace_isr_enter>
 8005e2c:	f001 fe10 	bl	8007a50 <_dbg_check_enter_isr>

  isr = RTCD1.rtc->ISR;
 8005e30:	4a0f      	ldr	r2, [pc, #60]	; (8005e70 <Vector4C+0x50>)
 8005e32:	6853      	ldr	r3, [r2, #4]
 8005e34:	68d9      	ldr	r1, [r3, #12]
  RTCD1.rtc->ISR = isr & ~RTC_ISR_WUTF;
 8005e36:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8005e3a:	60d8      	str	r0, [r3, #12]

  extiClearGroup1(EXTI_MASK1(STM32_RTC_WKUP_EXTI));
 8005e3c:	480d      	ldr	r0, [pc, #52]	; (8005e74 <Vector4C+0x54>)
 8005e3e:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
 8005e42:	6144      	str	r4, [r0, #20]

  if (RTCD1.callback != NULL) {
 8005e44:	6892      	ldr	r2, [r2, #8]
 8005e46:	b14a      	cbz	r2, 8005e5c <Vector4C+0x3c>
    uint32_t cr = RTCD1.rtc->CR;
 8005e48:	689b      	ldr	r3, [r3, #8]

    if (((cr & RTC_CR_WUTIE) != 0U) && ((isr & RTC_ISR_WUTF) != 0U)) {
 8005e4a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005e4e:	d005      	beq.n	8005e5c <Vector4C+0x3c>
 8005e50:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8005e54:	d002      	beq.n	8005e5c <Vector4C+0x3c>
      RTCD1.callback(&RTCD1, RTC_EVENT_WAKEUP);
 8005e56:	2107      	movs	r1, #7
 8005e58:	4805      	ldr	r0, [pc, #20]	; (8005e70 <Vector4C+0x50>)
 8005e5a:	4790      	blx	r2
    }
  }

  OSAL_IRQ_EPILOGUE();
 8005e5c:	f001 fe18 	bl	8007a90 <_dbg_check_leave_isr>
 8005e60:	4802      	ldr	r0, [pc, #8]	; (8005e6c <Vector4C+0x4c>)
 8005e62:	f001 feed 	bl	8007c40 <_trace_isr_leave>
 8005e66:	f005 fe73 	bl	800bb50 <_port_irq_epilogue>
}
 8005e6a:	bd10      	pop	{r4, pc}
 8005e6c:	08014e90 	.word	0x08014e90
 8005e70:	200046c0 	.word	0x200046c0
 8005e74:	40013c00 	.word	0x40013c00
 8005e78:	f3af 8000 	nop.w
 8005e7c:	f3af 8000 	nop.w

08005e80 <VectorE4>:
/**
 * @brief   RTC alarm interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_RTC_ALARM_HANDLER) {
 8005e80:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr, clear;

  OSAL_IRQ_PROLOGUE();
 8005e82:	f003 f85d 	bl	8008f40 <_stats_increase_irq>
 8005e86:	4816      	ldr	r0, [pc, #88]	; (8005ee0 <VectorE4+0x60>)
 8005e88:	f001 feb2 	bl	8007bf0 <_trace_isr_enter>
 8005e8c:	f001 fde0 	bl	8007a50 <_dbg_check_enter_isr>
#if defined(RTC_ISR_ALRBF)
           | RTC_ISR_ALRBF
#endif
          );

  isr = RTCD1.rtc->ISR;
 8005e90:	4a14      	ldr	r2, [pc, #80]	; (8005ee4 <VectorE4+0x64>)
 8005e92:	6853      	ldr	r3, [r2, #4]
 8005e94:	68dc      	ldr	r4, [r3, #12]
  RTCD1.rtc->ISR = isr & ~clear;
 8005e96:	f424 7140 	bic.w	r1, r4, #768	; 0x300
 8005e9a:	60d9      	str	r1, [r3, #12]

  extiClearGroup1(EXTI_MASK1(STM32_RTC_ALARM_EXTI));
 8005e9c:	4912      	ldr	r1, [pc, #72]	; (8005ee8 <VectorE4+0x68>)
 8005e9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005ea2:	6148      	str	r0, [r1, #20]

  if (RTCD1.callback != NULL) {
 8005ea4:	6892      	ldr	r2, [r2, #8]
 8005ea6:	b19a      	cbz	r2, 8005ed0 <VectorE4+0x50>
    uint32_t cr = RTCD1.rtc->CR;
 8005ea8:	689d      	ldr	r5, [r3, #8]
#if defined(RTC_ISR_ALRAF)
    if (((cr & RTC_CR_ALRAIE) != 0U) && ((isr & RTC_ISR_ALRAF) != 0U)) {
 8005eaa:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8005eae:	d005      	beq.n	8005ebc <VectorE4+0x3c>
 8005eb0:	f414 7f80 	tst.w	r4, #256	; 0x100
 8005eb4:	d002      	beq.n	8005ebc <VectorE4+0x3c>
      RTCD1.callback(&RTCD1, RTC_EVENT_ALARM_A);
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	480a      	ldr	r0, [pc, #40]	; (8005ee4 <VectorE4+0x64>)
 8005eba:	4790      	blx	r2
    }
#endif
#if defined(RTC_ISR_ALRBF)
    if (((cr & RTC_CR_ALRBIE) != 0U) && ((isr & RTC_ISR_ALRBF) != 0U)) {
 8005ebc:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 8005ec0:	d006      	beq.n	8005ed0 <VectorE4+0x50>
 8005ec2:	f414 7f00 	tst.w	r4, #512	; 0x200
 8005ec6:	d003      	beq.n	8005ed0 <VectorE4+0x50>
      RTCD1.callback(&RTCD1, RTC_EVENT_ALARM_B);
 8005ec8:	4806      	ldr	r0, [pc, #24]	; (8005ee4 <VectorE4+0x64>)
 8005eca:	6883      	ldr	r3, [r0, #8]
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4798      	blx	r3
    }
#endif
  }

  OSAL_IRQ_EPILOGUE();
 8005ed0:	f001 fdde 	bl	8007a90 <_dbg_check_leave_isr>
 8005ed4:	4802      	ldr	r0, [pc, #8]	; (8005ee0 <VectorE4+0x60>)
 8005ed6:	f001 feb3 	bl	8007c40 <_trace_isr_leave>
 8005eda:	f005 fe39 	bl	800bb50 <_port_irq_epilogue>
}
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	08014e9c 	.word	0x08014e9c
 8005ee4:	200046c0 	.word	0x200046c0
 8005ee8:	40013c00 	.word	0x40013c00
 8005eec:	f3af 8000 	nop.w

08005ef0 <rtc_lld_init>:
/**
 * @brief   Enable access to registers.
 *
 * @notapi
 */
void rtc_lld_init(void) {
 8005ef0:	b510      	push	{r4, lr}

  /* RTC object initialization.*/
  rtcObjectInit(&RTCD1);
 8005ef2:	4c1c      	ldr	r4, [pc, #112]	; (8005f64 <rtc_lld_init+0x74>)
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f7fc fa6b 	bl	80023d0 <rtcObjectInit>

  /* RTC pointer initialization.*/
  RTCD1.rtc = RTC;
 8005efa:	4b1b      	ldr	r3, [pc, #108]	; (8005f68 <rtc_lld_init+0x78>)
 8005efc:	6063      	str	r3, [r4, #4]

  /* Disable write protection. */
  RTCD1.rtc->WPR = 0xCA;
 8005efe:	22ca      	movs	r2, #202	; 0xca
 8005f00:	625a      	str	r2, [r3, #36]	; 0x24
  RTCD1.rtc->WPR = 0x53;
 8005f02:	2253      	movs	r2, #83	; 0x53
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24

  /* If calendar has not been initialized yet then proceed with the
     initial setup.*/
  if (!(RTCD1.rtc->ISR & RTC_ISR_INITS)) {
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f013 0f10 	tst.w	r3, #16
 8005f0c:	d019      	beq.n	8005f42 <rtc_lld_init+0x52>
    RTCD1.rtc->PRER     = STM32_RTC_PRER_BITS;

    rtc_exit_init();
  }
  else {
    RTCD1.rtc->ISR &= ~RTC_ISR_RSF;
 8005f0e:	4a16      	ldr	r2, [pc, #88]	; (8005f68 <rtc_lld_init+0x78>)
 8005f10:	68d3      	ldr	r3, [r2, #12]
 8005f12:	f023 0320 	bic.w	r3, r3, #32
 8005f16:	60d3      	str	r3, [r2, #12]
  }

  /* Callback initially disabled.*/
  RTCD1.callback = NULL;
 8005f18:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <rtc_lld_init+0x74>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	609a      	str	r2, [r3, #8]

  /* Enabling RTC-related EXTI lines.*/
  extiEnableGroup1(EXTI_MASK1(STM32_RTC_ALARM_EXTI) |
 8005f1e:	2101      	movs	r1, #1
 8005f20:	f44f 00c4 	mov.w	r0, #6422528	; 0x620000
 8005f24:	f7fe ff7c 	bl	8004e20 <extiEnableGroup1>
                   EXTI_MASK1(STM32_RTC_TAMP_STAMP_EXTI) |
                   EXTI_MASK1(STM32_RTC_WKUP_EXTI),
                   EXTI_MODE_RISING_EDGE | EXTI_MODE_ACTION_INTERRUPT);

  /* IRQ vectors permanently assigned to this driver.*/
  STM32_RTC_IRQ_ENABLE();
 8005f28:	210f      	movs	r1, #15
 8005f2a:	2002      	movs	r0, #2
 8005f2c:	f7fe f8a0 	bl	8004070 <nvicEnableVector>
 8005f30:	210f      	movs	r1, #15
 8005f32:	2003      	movs	r0, #3
 8005f34:	f7fe f89c 	bl	8004070 <nvicEnableVector>
 8005f38:	210f      	movs	r1, #15
 8005f3a:	2029      	movs	r0, #41	; 0x29
 8005f3c:	f7fe f898 	bl	8004070 <nvicEnableVector>
}
 8005f40:	bd10      	pop	{r4, pc}
    rtc_enter_init();
 8005f42:	f7ff fdb5 	bl	8005ab0 <rtc_enter_init>
    RTCD1.rtc->CR       = STM32_RTC_CR_INIT;
 8005f46:	6863      	ldr	r3, [r4, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	609a      	str	r2, [r3, #8]
    RTCD1.rtc->TAFCR    = STM32_RTC_TAMPCR_INIT;
 8005f4c:	641a      	str	r2, [r3, #64]	; 0x40
    RTCD1.rtc->ISR      = RTC_ISR_INIT; /* Clearing all but RTC_ISR_INIT.   */
 8005f4e:	2280      	movs	r2, #128	; 0x80
 8005f50:	60da      	str	r2, [r3, #12]
    RTCD1.rtc->PRER     = STM32_RTC_PRER_BITS;
 8005f52:	4a06      	ldr	r2, [pc, #24]	; (8005f6c <rtc_lld_init+0x7c>)
 8005f54:	611a      	str	r2, [r3, #16]
    RTCD1.rtc->PRER     = STM32_RTC_PRER_BITS;
 8005f56:	611a      	str	r2, [r3, #16]
  RTCD1.rtc->ISR &= ~RTC_ISR_INIT;
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f5e:	60da      	str	r2, [r3, #12]
 8005f60:	e7da      	b.n	8005f18 <rtc_lld_init+0x28>
 8005f62:	bf00      	nop
 8005f64:	200046c0 	.word	0x200046c0
 8005f68:	40002800 	.word	0x40002800
 8005f6c:	001f03ff 	.word	0x001f03ff

08005f70 <rtc_lld_set_time>:
 * @param[in] rtcp      pointer to RTC driver structure
 * @param[in] timespec  pointer to a @p RTCDateTime structure
 *
 * @notapi
 */
void rtc_lld_set_time(RTCDriver *rtcp, const RTCDateTime *timespec) {
 8005f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f74:	4606      	mov	r6, r0
 8005f76:	460d      	mov	r5, r1
  uint32_t dr, tr;
  syssts_t sts;

  tr = rtc_encode_time(timespec);
 8005f78:	4608      	mov	r0, r1
 8005f7a:	f7ff fe01 	bl	8005b80 <rtc_encode_time>
 8005f7e:	4680      	mov	r8, r0
  dr = rtc_encode_date(timespec);
 8005f80:	4628      	mov	r0, r5
 8005f82:	f7ff fe55 	bl	8005c30 <rtc_encode_date>
 8005f86:	4607      	mov	r7, r0
  return chSysGetStatusAndLockX();
 8005f88:	f001 fc6a 	bl	8007860 <chSysGetStatusAndLockX>
 8005f8c:	4604      	mov	r4, r0

  /* Entering a reentrant critical zone.*/
  sts = osalSysGetStatusAndLockX();

  /* Writing the registers.*/
  rtc_enter_init();
 8005f8e:	f7ff fd8f 	bl	8005ab0 <rtc_enter_init>
  rtcp->rtc->TR = tr;
 8005f92:	6873      	ldr	r3, [r6, #4]
 8005f94:	f8c3 8000 	str.w	r8, [r3]
  rtcp->rtc->DR = dr;
 8005f98:	6873      	ldr	r3, [r6, #4]
 8005f9a:	605f      	str	r7, [r3, #4]
  rtcp->rtc->CR = (rtcp->rtc->CR & ~(1U << RTC_CR_BKP_OFFSET)) |
 8005f9c:	6871      	ldr	r1, [r6, #4]
 8005f9e:	688b      	ldr	r3, [r1, #8]
 8005fa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
                  (timespec->dstflag << RTC_CR_BKP_OFFSET);
 8005fa4:	786a      	ldrb	r2, [r5, #1]
 8005fa6:	f3c2 1200 	ubfx	r2, r2, #4, #1
  rtcp->rtc->CR = (rtcp->rtc->CR & ~(1U << RTC_CR_BKP_OFFSET)) |
 8005faa:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8005fae:	608b      	str	r3, [r1, #8]
  RTCD1.rtc->ISR &= ~RTC_ISR_INIT;
 8005fb0:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <rtc_lld_set_time+0x58>)
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	68d3      	ldr	r3, [r2, #12]
 8005fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fba:	60d3      	str	r3, [r2, #12]
  chSysRestoreStatusX(sts);
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f001 fc6f 	bl	80078a0 <chSysRestoreStatusX>
  rtc_exit_init();

  /* Leaving a reentrant critical zone.*/
  osalSysRestoreStatusX(sts);
}
 8005fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fc6:	bf00      	nop
 8005fc8:	200046c0 	.word	0x200046c0
 8005fcc:	f3af 8000 	nop.w

08005fd0 <rtc_lld_get_time>:
 * @param[in] rtcp      pointer to RTC driver structure
 * @param[out] timespec pointer to a @p RTCDateTime structure
 *
 * @notapi
 */
void rtc_lld_get_time(RTCDriver *rtcp, RTCDateTime *timespec) {
 8005fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	460d      	mov	r5, r1
  return chSysGetStatusAndLockX();
 8005fd8:	f001 fc42 	bl	8007860 <chSysGetStatusAndLockX>
  /* Entering a reentrant critical zone.*/
  sts = osalSysGetStatusAndLockX();

  /* Synchronization with the RTC and reading the registers, note
     DR must be read last.*/
  while ((rtcp->rtc->ISR & RTC_ISR_RSF) == 0)
 8005fdc:	6863      	ldr	r3, [r4, #4]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	f012 0f20 	tst.w	r2, #32
 8005fe4:	d0fa      	beq.n	8005fdc <rtc_lld_get_time+0xc>
    ;
#if STM32_RTC_HAS_SUBSECONDS
  ssr = rtcp->rtc->SSR;
 8005fe6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
#endif /* STM32_RTC_HAS_SUBSECONDS */
  tr  = rtcp->rtc->TR;
 8005fe8:	f8d3 8000 	ldr.w	r8, [r3]
  dr  = rtcp->rtc->DR;
 8005fec:	685e      	ldr	r6, [r3, #4]
  cr  = rtcp->rtc->CR;
 8005fee:	689c      	ldr	r4, [r3, #8]
  rtcp->rtc->ISR &= ~RTC_ISR_RSF;
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	f022 0220 	bic.w	r2, r2, #32
 8005ff6:	60da      	str	r2, [r3, #12]
  chSysRestoreStatusX(sts);
 8005ff8:	f001 fc52 	bl	80078a0 <chSysRestoreStatusX>
  /* Leaving a reentrant critical zone.*/
  osalSysRestoreStatusX(sts);

  /* Decoding day time, this starts the atomic read sequence, see "Reading
     the calendar" in the RTC documentation.*/
  rtc_decode_time(tr, timespec);
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	4640      	mov	r0, r8
 8006000:	f7ff fd66 	bl	8005ad0 <rtc_decode_time>

  /* If the RTC is capable of sub-second counting then the value is
     normalized in milliseconds and added to the time.*/
#if STM32_RTC_HAS_SUBSECONDS
  subs = (((STM32_RTC_PRESS_VALUE - 1U) - ssr) * 1000U) / STM32_RTC_PRESS_VALUE;
 8006004:	4b0d      	ldr	r3, [pc, #52]	; (800603c <rtc_lld_get_time+0x6c>)
 8006006:	fb03 f307 	mul.w	r3, r3, r7
 800600a:	f503 2379 	add.w	r3, r3, #1019904	; 0xf9000
 800600e:	f603 4318 	addw	r3, r3, #3096	; 0xc18
#else
  subs = 0;
#endif /* STM32_RTC_HAS_SUBSECONDS */
  timespec->millisecond += subs;
 8006012:	686a      	ldr	r2, [r5, #4]
 8006014:	f3c2 011a 	ubfx	r1, r2, #0, #27
 8006018:	eb01 2393 	add.w	r3, r1, r3, lsr #10
 800601c:	f363 021a 	bfi	r2, r3, #0, #27
 8006020:	606a      	str	r2, [r5, #4]

  /* Decoding date, this concludes the atomic read sequence.*/
  rtc_decode_date(dr, timespec);
 8006022:	4629      	mov	r1, r5
 8006024:	4630      	mov	r0, r6
 8006026:	f7ff fd83 	bl	8005b30 <rtc_decode_date>

  /* Retrieving the DST bit.*/
  timespec->dstflag = (cr >> RTC_CR_BKP_OFFSET) & 1;
 800602a:	f3c4 4480 	ubfx	r4, r4, #18, #1
 800602e:	786b      	ldrb	r3, [r5, #1]
 8006030:	f364 1304 	bfi	r3, r4, #4, #1
 8006034:	706b      	strb	r3, [r5, #1]
}
 8006036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800603a:	bf00      	nop
 800603c:	fffffc18 	.word	0xfffffc18

08006040 <rtc_lld_set_alarm>:
 *
 * @notapi
 */
void rtc_lld_set_alarm(RTCDriver *rtcp,
                       rtcalarm_t alarm,
                       const RTCAlarm *alarmspec) {
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	4604      	mov	r4, r0
 8006044:	460e      	mov	r6, r1
 8006046:	4615      	mov	r5, r2
  return chSysGetStatusAndLockX();
 8006048:	f001 fc0a 	bl	8007860 <chSysGetStatusAndLockX>
  syssts_t sts;

  /* Entering a reentrant critical zone.*/
  sts = osalSysGetStatusAndLockX();

  if (alarm == 0) {
 800604c:	bb26      	cbnz	r6, 8006098 <rtc_lld_set_alarm+0x58>
    if (alarmspec != NULL) {
 800604e:	b1c5      	cbz	r5, 8006082 <rtc_lld_set_alarm+0x42>
      rtcp->rtc->CR &= ~RTC_CR_ALRAE;
 8006050:	6862      	ldr	r2, [r4, #4]
 8006052:	6893      	ldr	r3, [r2, #8]
 8006054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006058:	6093      	str	r3, [r2, #8]
      while (!(rtcp->rtc->ISR & RTC_ISR_ALRAWF))
 800605a:	6863      	ldr	r3, [r4, #4]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	f012 0f01 	tst.w	r2, #1
 8006062:	d0fa      	beq.n	800605a <rtc_lld_set_alarm+0x1a>
        ;
      rtcp->rtc->ALRMAR = alarmspec->alrmr;
 8006064:	682a      	ldr	r2, [r5, #0]
 8006066:	61da      	str	r2, [r3, #28]
      rtcp->rtc->CR |= RTC_CR_ALRAE;
 8006068:	6862      	ldr	r2, [r4, #4]
 800606a:	6893      	ldr	r3, [r2, #8]
 800606c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006070:	6093      	str	r3, [r2, #8]
      rtcp->rtc->CR |= RTC_CR_ALRAIE;
 8006072:	6862      	ldr	r2, [r4, #4]
 8006074:	6893      	ldr	r3, [r2, #8]
 8006076:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800607a:	6093      	str	r3, [r2, #8]
  chSysRestoreStatusX(sts);
 800607c:	f001 fc10 	bl	80078a0 <chSysRestoreStatusX>
  }
#endif /* RTC_ALARMS > 1 */

  /* Leaving a reentrant critical zone.*/
  osalSysRestoreStatusX(sts);
}
 8006080:	bd70      	pop	{r4, r5, r6, pc}
      rtcp->rtc->CR &= ~RTC_CR_ALRAIE;
 8006082:	6862      	ldr	r2, [r4, #4]
 8006084:	6893      	ldr	r3, [r2, #8]
 8006086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800608a:	6093      	str	r3, [r2, #8]
      rtcp->rtc->CR &= ~RTC_CR_ALRAE;
 800608c:	6862      	ldr	r2, [r4, #4]
 800608e:	6893      	ldr	r3, [r2, #8]
 8006090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006094:	6093      	str	r3, [r2, #8]
 8006096:	e7f1      	b.n	800607c <rtc_lld_set_alarm+0x3c>
    if (alarmspec != NULL) {
 8006098:	b1b5      	cbz	r5, 80060c8 <rtc_lld_set_alarm+0x88>
      rtcp->rtc->CR &= ~RTC_CR_ALRBE;
 800609a:	6862      	ldr	r2, [r4, #4]
 800609c:	6893      	ldr	r3, [r2, #8]
 800609e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060a2:	6093      	str	r3, [r2, #8]
      while (!(rtcp->rtc->ISR & RTC_ISR_ALRBWF))
 80060a4:	6863      	ldr	r3, [r4, #4]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	f012 0f02 	tst.w	r2, #2
 80060ac:	d0fa      	beq.n	80060a4 <rtc_lld_set_alarm+0x64>
      rtcp->rtc->ALRMBR = alarmspec->alrmr;
 80060ae:	682a      	ldr	r2, [r5, #0]
 80060b0:	621a      	str	r2, [r3, #32]
      rtcp->rtc->CR |= RTC_CR_ALRBE;
 80060b2:	6862      	ldr	r2, [r4, #4]
 80060b4:	6893      	ldr	r3, [r2, #8]
 80060b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060ba:	6093      	str	r3, [r2, #8]
      rtcp->rtc->CR |= RTC_CR_ALRBIE;
 80060bc:	6862      	ldr	r2, [r4, #4]
 80060be:	6893      	ldr	r3, [r2, #8]
 80060c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80060c4:	6093      	str	r3, [r2, #8]
 80060c6:	e7d9      	b.n	800607c <rtc_lld_set_alarm+0x3c>
      rtcp->rtc->CR &= ~RTC_CR_ALRBIE;
 80060c8:	6862      	ldr	r2, [r4, #4]
 80060ca:	6893      	ldr	r3, [r2, #8]
 80060cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d0:	6093      	str	r3, [r2, #8]
      rtcp->rtc->CR &= ~RTC_CR_ALRBE;
 80060d2:	6862      	ldr	r2, [r4, #4]
 80060d4:	6893      	ldr	r3, [r2, #8]
 80060d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060da:	6093      	str	r3, [r2, #8]
 80060dc:	e7ce      	b.n	800607c <rtc_lld_set_alarm+0x3c>
 80060de:	bf00      	nop

080060e0 <rtc_lld_get_alarm>:
 */
void rtc_lld_get_alarm(RTCDriver *rtcp,
                       rtcalarm_t alarm,
                       RTCAlarm *alarmspec) {

  if (alarm == 0)
 80060e0:	b119      	cbz	r1, 80060ea <rtc_lld_get_alarm+0xa>
    alarmspec->alrmr = rtcp->rtc->ALRMAR;
#if RTC_ALARMS > 1
  else
    alarmspec->alrmr = rtcp->rtc->ALRMBR;
 80060e2:	6843      	ldr	r3, [r0, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	6013      	str	r3, [r2, #0]
#endif /* RTC_ALARMS > 1 */
}
 80060e8:	4770      	bx	lr
    alarmspec->alrmr = rtcp->rtc->ALRMAR;
 80060ea:	6843      	ldr	r3, [r0, #4]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	f3af 8000 	nop.w
 80060f8:	f3af 8000 	nop.w
 80060fc:	f3af 8000 	nop.w

08006100 <rtc_lld_set_callback>:
 *
 * @notapi
 */
void rtc_lld_set_callback(RTCDriver *rtcp, rtccb_t callback) {

  rtcp->callback = callback;
 8006100:	6081      	str	r1, [r0, #8]
}
 8006102:	4770      	bx	lr
 8006104:	f3af 8000 	nop.w
 8006108:	f3af 8000 	nop.w
 800610c:	f3af 8000 	nop.w

08006110 <rtcSTM32SetPeriodicWakeup>:
 * @param[in] rtcp       pointer to RTC driver structure
 * @param[in] wakeupspec pointer to a @p RTCWakeup structure
 *
 * @api
 */
void rtcSTM32SetPeriodicWakeup(RTCDriver *rtcp, const RTCWakeup *wakeupspec) {
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4604      	mov	r4, r0
 8006114:	460d      	mov	r5, r1
  return chSysGetStatusAndLockX();
 8006116:	f001 fba3 	bl	8007860 <chSysGetStatusAndLockX>
 800611a:	4606      	mov	r6, r0
  syssts_t sts;

  /* Entering a reentrant critical zone.*/
  sts = osalSysGetStatusAndLockX();

  if (wakeupspec != NULL) {
 800611c:	2d00      	cmp	r5, #0
 800611e:	d032      	beq.n	8006186 <rtcSTM32SetPeriodicWakeup+0x76>
    osalDbgCheck(wakeupspec->wutr != 0x30000);
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006126:	d02a      	beq.n	800617e <rtcSTM32SetPeriodicWakeup+0x6e>

    rtcp->rtc->CR &= ~RTC_CR_WUTE;
 8006128:	6862      	ldr	r2, [r4, #4]
 800612a:	6893      	ldr	r3, [r2, #8]
 800612c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006130:	6093      	str	r3, [r2, #8]
    rtcp->rtc->CR &= ~RTC_CR_WUTIE;
 8006132:	6862      	ldr	r2, [r4, #4]
 8006134:	6893      	ldr	r3, [r2, #8]
 8006136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800613a:	6093      	str	r3, [r2, #8]
    while (!(rtcp->rtc->ISR & RTC_ISR_WUTWF))
 800613c:	6863      	ldr	r3, [r4, #4]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	f012 0f04 	tst.w	r2, #4
 8006144:	d0fa      	beq.n	800613c <rtcSTM32SetPeriodicWakeup+0x2c>
      ;
    rtcp->rtc->WUTR = wakeupspec->wutr & 0xFFFF;
 8006146:	882a      	ldrh	r2, [r5, #0]
 8006148:	615a      	str	r2, [r3, #20]
    rtcp->rtc->CR &= ~RTC_CR_WUCKSEL;
 800614a:	6862      	ldr	r2, [r4, #4]
 800614c:	6893      	ldr	r3, [r2, #8]
 800614e:	f023 0307 	bic.w	r3, r3, #7
 8006152:	6093      	str	r3, [r2, #8]
    rtcp->rtc->CR |= (wakeupspec->wutr >> 16) & RTC_CR_WUCKSEL;
 8006154:	6861      	ldr	r1, [r4, #4]
 8006156:	688b      	ldr	r3, [r1, #8]
 8006158:	886a      	ldrh	r2, [r5, #2]
 800615a:	f002 0207 	and.w	r2, r2, #7
 800615e:	4313      	orrs	r3, r2
 8006160:	608b      	str	r3, [r1, #8]
    rtcp->rtc->CR |= RTC_CR_WUTIE;
 8006162:	6862      	ldr	r2, [r4, #4]
 8006164:	6893      	ldr	r3, [r2, #8]
 8006166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800616a:	6093      	str	r3, [r2, #8]
    rtcp->rtc->CR |= RTC_CR_WUTE;
 800616c:	6862      	ldr	r2, [r4, #4]
 800616e:	6893      	ldr	r3, [r2, #8]
 8006170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006174:	6093      	str	r3, [r2, #8]
  chSysRestoreStatusX(sts);
 8006176:	4630      	mov	r0, r6
 8006178:	f001 fb92 	bl	80078a0 <chSysRestoreStatusX>
    rtcp->rtc->CR &= ~RTC_CR_WUTIE;
  }

  /* Leaving a reentrant critical zone.*/
  osalSysRestoreStatusX(sts);
}
 800617c:	bd70      	pop	{r4, r5, r6, pc}
    osalDbgCheck(wakeupspec->wutr != 0x30000);
 800617e:	4807      	ldr	r0, [pc, #28]	; (800619c <rtcSTM32SetPeriodicWakeup+0x8c>)
 8006180:	f001 fa76 	bl	8007670 <chSysHalt>
 8006184:	e7d0      	b.n	8006128 <rtcSTM32SetPeriodicWakeup+0x18>
    rtcp->rtc->CR &= ~RTC_CR_WUTE;
 8006186:	6862      	ldr	r2, [r4, #4]
 8006188:	6893      	ldr	r3, [r2, #8]
 800618a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800618e:	6093      	str	r3, [r2, #8]
    rtcp->rtc->CR &= ~RTC_CR_WUTIE;
 8006190:	6862      	ldr	r2, [r4, #4]
 8006192:	6893      	ldr	r3, [r2, #8]
 8006194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006198:	6093      	str	r3, [r2, #8]
 800619a:	e7ec      	b.n	8006176 <rtcSTM32SetPeriodicWakeup+0x66>
 800619c:	08014ea8 	.word	0x08014ea8

080061a0 <rtcSTM32GetPeriodicWakeup>:
 * @param[in] rtcp        pointer to RTC driver structure
 * @param[out] wakeupspec pointer to a @p RTCWakeup structure
 *
 * @api
 */
void rtcSTM32GetPeriodicWakeup(RTCDriver *rtcp, RTCWakeup *wakeupspec) {
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4605      	mov	r5, r0
 80061a4:	460c      	mov	r4, r1
  return chSysGetStatusAndLockX();
 80061a6:	f001 fb5b 	bl	8007860 <chSysGetStatusAndLockX>
  syssts_t sts;

  /* Entering a reentrant critical zone.*/
  sts = osalSysGetStatusAndLockX();

  wakeupspec->wutr  = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	6023      	str	r3, [r4, #0]
  wakeupspec->wutr |= rtcp->rtc->WUTR;
 80061ae:	686b      	ldr	r3, [r5, #4]
 80061b0:	695a      	ldr	r2, [r3, #20]
 80061b2:	6022      	str	r2, [r4, #0]
  wakeupspec->wutr |= (((uint32_t)rtcp->rtc->CR) & 0x7) << 16;
 80061b4:	686b      	ldr	r3, [r5, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	041b      	lsls	r3, r3, #16
 80061ba:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80061be:	4313      	orrs	r3, r2
 80061c0:	6023      	str	r3, [r4, #0]
  chSysRestoreStatusX(sts);
 80061c2:	f001 fb6d 	bl	80078a0 <chSysRestoreStatusX>

  /* Leaving a reentrant critical zone.*/
  osalSysRestoreStatusX(sts);
}
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
	...

080061d0 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80061d0:	f011 0f0c 	tst.w	r1, #12
 80061d4:	d100      	bne.n	80061d8 <spi_lld_serve_tx_interrupt+0x8>
 80061d6:	4770      	bx	lr
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 80061d8:	b508      	push	{r3, lr}
  chSysHalt(reason);
 80061da:	4802      	ldr	r0, [pc, #8]	; (80061e4 <spi_lld_serve_tx_interrupt+0x14>)
 80061dc:	f001 fa48 	bl	8007670 <chSysHalt>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 80061e0:	bd08      	pop	{r3, pc}
 80061e2:	bf00      	nop
 80061e4:	08015be8 	.word	0x08015be8
 80061e8:	f3af 8000 	nop.w
 80061ec:	f3af 8000 	nop.w

080061f0 <spi_lld_serve_rx_interrupt>:
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4604      	mov	r4, r0
 80061f4:	460d      	mov	r5, r1
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80061f6:	f011 0f0c 	tst.w	r1, #12
 80061fa:	d11b      	bne.n	8006234 <spi_lld_serve_rx_interrupt+0x44>
  if (spip->config->circular) {
 80061fc:	6863      	ldr	r3, [r4, #4]
 80061fe:	781a      	ldrb	r2, [r3, #0]
 8006200:	b1e2      	cbz	r2, 800623c <spi_lld_serve_rx_interrupt+0x4c>
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 8006202:	f015 0f10 	tst.w	r5, #16
 8006206:	d003      	beq.n	8006210 <spi_lld_serve_rx_interrupt+0x20>
      _spi_isr_half_code(spip);
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	b10b      	cbz	r3, 8006210 <spi_lld_serve_rx_interrupt+0x20>
 800620c:	4620      	mov	r0, r4
 800620e:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8006210:	f015 0f20 	tst.w	r5, #32
 8006214:	d052      	beq.n	80062bc <spi_lld_serve_rx_interrupt+0xcc>
      _spi_isr_full_code(spip);
 8006216:	6863      	ldr	r3, [r4, #4]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	2a00      	cmp	r2, #0
 800621c:	d04e      	beq.n	80062bc <spi_lld_serve_rx_interrupt+0xcc>
 800621e:	2204      	movs	r2, #4
 8006220:	7022      	strb	r2, [r4, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	4620      	mov	r0, r4
 8006226:	4798      	blx	r3
 8006228:	7823      	ldrb	r3, [r4, #0]
 800622a:	2b04      	cmp	r3, #4
 800622c:	d146      	bne.n	80062bc <spi_lld_serve_rx_interrupt+0xcc>
 800622e:	2303      	movs	r3, #3
 8006230:	7023      	strb	r3, [r4, #0]
 8006232:	e043      	b.n	80062bc <spi_lld_serve_rx_interrupt+0xcc>
 8006234:	4825      	ldr	r0, [pc, #148]	; (80062cc <spi_lld_serve_rx_interrupt+0xdc>)
 8006236:	f001 fa1b 	bl	8007670 <chSysHalt>
 800623a:	e7df      	b.n	80061fc <spi_lld_serve_rx_interrupt+0xc>
    dmaStreamDisable(spip->dmatx);
 800623c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	6813      	ldr	r3, [r2, #0]
 8006242:	f023 031f 	bic.w	r3, r3, #31
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	f012 0f01 	tst.w	r2, #1
 8006252:	d1f9      	bne.n	8006248 <spi_lld_serve_rx_interrupt+0x58>
 8006254:	7a59      	ldrb	r1, [r3, #9]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	233d      	movs	r3, #61	; 0x3d
 800625a:	408b      	lsls	r3, r1
 800625c:	6013      	str	r3, [r2, #0]
    dmaStreamDisable(spip->dmarx);
 800625e:	6a23      	ldr	r3, [r4, #32]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	6813      	ldr	r3, [r2, #0]
 8006264:	f023 031f 	bic.w	r3, r3, #31
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	6a23      	ldr	r3, [r4, #32]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	6812      	ldr	r2, [r2, #0]
 8006270:	f012 0f01 	tst.w	r2, #1
 8006274:	d1f9      	bne.n	800626a <spi_lld_serve_rx_interrupt+0x7a>
 8006276:	7a59      	ldrb	r1, [r3, #9]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	233d      	movs	r3, #61	; 0x3d
 800627c:	408b      	lsls	r3, r1
 800627e:	6013      	str	r3, [r2, #0]
    _spi_isr_code(spip);
 8006280:	6863      	ldr	r3, [r4, #4]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	b1f2      	cbz	r2, 80062c4 <spi_lld_serve_rx_interrupt+0xd4>
 8006286:	2204      	movs	r2, #4
 8006288:	7022      	strb	r2, [r4, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4620      	mov	r0, r4
 800628e:	4798      	blx	r3
 8006290:	7823      	ldrb	r3, [r4, #0]
 8006292:	2b04      	cmp	r3, #4
 8006294:	d013      	beq.n	80062be <spi_lld_serve_rx_interrupt+0xce>
 8006296:	2320      	movs	r3, #32
 8006298:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800629c:	f002 fe88 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80062a0:	f001 fba6 	bl	80079f0 <_dbg_check_lock_from_isr>
  chThdResumeI(trp, msg);
 80062a4:	2100      	movs	r1, #0
 80062a6:	f104 0008 	add.w	r0, r4, #8
 80062aa:	f002 fd01 	bl	8008cb0 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 80062ae:	f001 fbb7 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80062b2:	f002 fe85 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 80062b6:	2300      	movs	r3, #0
 80062b8:	f383 8811 	msr	BASEPRI, r3
}
 80062bc:	bd38      	pop	{r3, r4, r5, pc}
    _spi_isr_code(spip);
 80062be:	2302      	movs	r3, #2
 80062c0:	7023      	strb	r3, [r4, #0]
 80062c2:	e7e8      	b.n	8006296 <spi_lld_serve_rx_interrupt+0xa6>
 80062c4:	2302      	movs	r3, #2
 80062c6:	7023      	strb	r3, [r4, #0]
 80062c8:	e7e5      	b.n	8006296 <spi_lld_serve_rx_interrupt+0xa6>
 80062ca:	bf00      	nop
 80062cc:	08015be8 	.word	0x08015be8

080062d0 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 80062d0:	b510      	push	{r4, lr}

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 80062d2:	4c07      	ldr	r4, [pc, #28]	; (80062f0 <spi_lld_init+0x20>)
 80062d4:	4620      	mov	r0, r4
 80062d6:	f7fd f863 	bl	80033a0 <spiObjectInit>
  SPID1.spi       = SPI1;
 80062da:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <spi_lld_init+0x24>)
 80062dc:	61e3      	str	r3, [r4, #28]
  SPID1.dmarx     = NULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	6223      	str	r3, [r4, #32]
  SPID1.dmatx     = NULL;
 80062e2:	6263      	str	r3, [r4, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80062e4:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <spi_lld_init+0x28>)
 80062e6:	62a3      	str	r3, [r4, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80062e8:	3330      	adds	r3, #48	; 0x30
 80062ea:	62e3      	str	r3, [r4, #44]	; 0x2c
                    STM32_DMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_M2P |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif
}
 80062ec:	bd10      	pop	{r4, pc}
 80062ee:	bf00      	nop
 80062f0:	200046cc 	.word	0x200046cc
 80062f4:	40013000 	.word	0x40013000
 80062f8:	06030016 	.word	0x06030016
 80062fc:	f3af 8000 	nop.w

08006300 <spi_lld_start>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8006300:	b510      	push	{r4, lr}
 8006302:	4604      	mov	r4, r0

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8006304:	7803      	ldrb	r3, [r0, #0]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d02f      	beq.n	800636a <spi_lld_start+0x6a>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800630a:	6863      	ldr	r3, [r4, #4]
 800630c:	8a1b      	ldrh	r3, [r3, #16]
 800630e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006312:	d15b      	bne.n	80063cc <spi_lld_start+0xcc>
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8006314:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8006316:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800631a:	62a3      	str	r3, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800631c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 800631e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8006322:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  if (spip->config->circular) {
 8006324:	6863      	ldr	r3, [r4, #4]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d15c      	bne.n	80063e6 <spi_lld_start+0xe6>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
  }
  else {
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800632c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800632e:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 8006332:	62a3      	str	r3, [r4, #40]	; 0x28
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8006334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006336:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 800633a:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 800633c:	69e2      	ldr	r2, [r4, #28]
 800633e:	6813      	ldr	r3, [r2, #0]
 8006340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006344:	6013      	str	r3, [r2, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	8a1b      	ldrh	r3, [r3, #16]
 800634a:	69e2      	ldr	r2, [r4, #28]
 800634c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8006350:	6013      	str	r3, [r2, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8006352:	6863      	ldr	r3, [r4, #4]
 8006354:	8a5b      	ldrh	r3, [r3, #18]
 8006356:	69e2      	ldr	r2, [r4, #28]
 8006358:	f043 0307 	orr.w	r3, r3, #7
 800635c:	6053      	str	r3, [r2, #4]
                    SPI_CR2_TXDMAEN;
  spip->spi->CR1 |= SPI_CR1_SPE;
 800635e:	69e2      	ldr	r2, [r4, #28]
 8006360:	6813      	ldr	r3, [r2, #0]
 8006362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006366:	6013      	str	r3, [r2, #0]
}
 8006368:	bd10      	pop	{r4, pc}
    if (&SPID1 == spip) {
 800636a:	4b23      	ldr	r3, [pc, #140]	; (80063f8 <spi_lld_start+0xf8>)
 800636c:	4298      	cmp	r0, r3
 800636e:	d00a      	beq.n	8006386 <spi_lld_start+0x86>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8006370:	69e3      	ldr	r3, [r4, #28]
 8006372:	330c      	adds	r3, #12
 8006374:	6a22      	ldr	r2, [r4, #32]
 8006376:	6812      	ldr	r2, [r2, #0]
 8006378:	6093      	str	r3, [r2, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800637a:	69e3      	ldr	r3, [r4, #28]
 800637c:	330c      	adds	r3, #12
 800637e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	6093      	str	r3, [r2, #8]
 8006384:	e7c1      	b.n	800630a <spi_lld_start+0xa>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI1_RX_DMA_STREAM,
 8006386:	4603      	mov	r3, r0
 8006388:	4a1c      	ldr	r2, [pc, #112]	; (80063fc <spi_lld_start+0xfc>)
 800638a:	2102      	movs	r1, #2
 800638c:	2008      	movs	r0, #8
 800638e:	f7fe fc2f 	bl	8004bf0 <dmaStreamAllocI>
 8006392:	6220      	str	r0, [r4, #32]
      osalDbgAssert(spip->dmarx != NULL, "unable to allocate stream");
 8006394:	b190      	cbz	r0, 80063bc <spi_lld_start+0xbc>
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 8006396:	4623      	mov	r3, r4
 8006398:	4a19      	ldr	r2, [pc, #100]	; (8006400 <spi_lld_start+0x100>)
 800639a:	2102      	movs	r1, #2
 800639c:	200b      	movs	r0, #11
 800639e:	f7fe fc27 	bl	8004bf0 <dmaStreamAllocI>
 80063a2:	6260      	str	r0, [r4, #36]	; 0x24
      osalDbgAssert(spip->dmatx != NULL, "unable to allocate stream");
 80063a4:	b170      	cbz	r0, 80063c4 <spi_lld_start+0xc4>
      rccEnableSPI1(true);
 80063a6:	4b17      	ldr	r3, [pc, #92]	; (8006404 <spi_lld_start+0x104>)
 80063a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063ae:	645a      	str	r2, [r3, #68]	; 0x44
 80063b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80063b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063b6:	665a      	str	r2, [r3, #100]	; 0x64
 80063b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ba:	e7d9      	b.n	8006370 <spi_lld_start+0x70>
      osalDbgAssert(spip->dmarx != NULL, "unable to allocate stream");
 80063bc:	4812      	ldr	r0, [pc, #72]	; (8006408 <spi_lld_start+0x108>)
 80063be:	f001 f957 	bl	8007670 <chSysHalt>
 80063c2:	e7e8      	b.n	8006396 <spi_lld_start+0x96>
      osalDbgAssert(spip->dmatx != NULL, "unable to allocate stream");
 80063c4:	4810      	ldr	r0, [pc, #64]	; (8006408 <spi_lld_start+0x108>)
 80063c6:	f001 f953 	bl	8007670 <chSysHalt>
 80063ca:	e7ec      	b.n	80063a6 <spi_lld_start+0xa6>
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80063cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063ce:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80063d2:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80063d6:	62a3      	str	r3, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80063d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80063da:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80063de:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80063e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063e4:	e79e      	b.n	8006324 <spi_lld_start+0x24>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80063e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063e8:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 80063ec:	62a3      	str	r3, [r4, #40]	; 0x28
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80063ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80063f0:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 80063f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063f6:	e7a1      	b.n	800633c <spi_lld_start+0x3c>
 80063f8:	200046cc 	.word	0x200046cc
 80063fc:	080061f1 	.word	0x080061f1
 8006400:	080061d1 	.word	0x080061d1
 8006404:	40023800 	.word	0x40023800
 8006408:	08014ec4 	.word	0x08014ec4
 800640c:	f3af 8000 	nop.w

08006410 <spi_lld_stop>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_stop(SPIDriver *spip) {
 8006410:	b538      	push	{r3, r4, r5, lr}

  /* If in ready state then disables the SPI clock.*/
  if (spip->state == SPI_READY) {
 8006412:	7803      	ldrb	r3, [r0, #0]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d000      	beq.n	800641a <spi_lld_stop+0xa>
#if STM32_SPI_USE_SPI6
    if (&SPID6 == spip)
      rccDisableSPI6();
#endif
  }
}
 8006418:	bd38      	pop	{r3, r4, r5, pc}
 800641a:	4604      	mov	r4, r0
    spip->spi->CR1 &= ~SPI_CR1_SPE;
 800641c:	69c2      	ldr	r2, [r0, #28]
 800641e:	6813      	ldr	r3, [r2, #0]
 8006420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006424:	6013      	str	r3, [r2, #0]
    spip->spi->CR1  = 0;
 8006426:	69c3      	ldr	r3, [r0, #28]
 8006428:	2500      	movs	r5, #0
 800642a:	601d      	str	r5, [r3, #0]
    spip->spi->CR2  = 0;
 800642c:	69c3      	ldr	r3, [r0, #28]
 800642e:	605d      	str	r5, [r3, #4]
    dmaStreamFreeI(spip->dmarx);
 8006430:	6a00      	ldr	r0, [r0, #32]
 8006432:	f7fe fc8d 	bl	8004d50 <dmaStreamFreeI>
    dmaStreamFreeI(spip->dmatx);
 8006436:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006438:	f7fe fc8a 	bl	8004d50 <dmaStreamFreeI>
    spip->dmarx = NULL;
 800643c:	6225      	str	r5, [r4, #32]
    spip->dmatx = NULL;
 800643e:	6265      	str	r5, [r4, #36]	; 0x24
    if (&SPID1 == spip)
 8006440:	4b06      	ldr	r3, [pc, #24]	; (800645c <spi_lld_stop+0x4c>)
 8006442:	429c      	cmp	r4, r3
 8006444:	d1e8      	bne.n	8006418 <spi_lld_stop+0x8>
      rccDisableSPI1();
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <spi_lld_stop+0x50>)
 8006448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800644a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800644e:	645a      	str	r2, [r3, #68]	; 0x44
 8006450:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006456:	665a      	str	r2, [r3, #100]	; 0x64
 8006458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 800645a:	e7dd      	b.n	8006418 <spi_lld_stop+0x8>
 800645c:	200046cc 	.word	0x200046cc
 8006460:	40023800 	.word	0x40023800
 8006464:	f3af 8000 	nop.w
 8006468:	f3af 8000 	nop.w
 800646c:	f3af 8000 	nop.w

08006470 <spi_lld_ignore>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] n         number of words to be ignored
 *
 * @notapi
 */
void spi_lld_ignore(SPIDriver *spip, size_t n) {
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4604      	mov	r4, r0
 8006474:	460d      	mov	r5, r1

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 8006476:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800647a:	d222      	bcs.n	80064c2 <spi_lld_ignore+0x52>

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800647c:	6a23      	ldr	r3, [r4, #32]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a12      	ldr	r2, [pc, #72]	; (80064cc <spi_lld_ignore+0x5c>)
 8006482:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8006484:	6a23      	ldr	r3, [r4, #32]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800648a:	6a23      	ldr	r3, [r4, #32]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006490:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8006492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a0e      	ldr	r2, [pc, #56]	; (80064d0 <spi_lld_ignore+0x60>)
 8006498:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800649a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 80064a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80064a6:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 80064a8:	6a23      	ldr	r3, [r4, #32]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	6813      	ldr	r3, [r2, #0]
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 80064b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	6813      	ldr	r3, [r2, #0]
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	6013      	str	r3, [r2, #0]
}
 80064c0:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 80064c2:	4804      	ldr	r0, [pc, #16]	; (80064d4 <spi_lld_ignore+0x64>)
 80064c4:	f001 f8d4 	bl	8007670 <chSysHalt>
 80064c8:	e7d8      	b.n	800647c <spi_lld_ignore+0xc>
 80064ca:	bf00      	nop
 80064cc:	200020a0 	.word	0x200020a0
 80064d0:	08014ee4 	.word	0x08014ee4
 80064d4:	08014ed4 	.word	0x08014ed4
 80064d8:	f3af 8000 	nop.w
 80064dc:	f3af 8000 	nop.w

080064e0 <spi_lld_exchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	4604      	mov	r4, r0
 80064e4:	460d      	mov	r5, r1
 80064e6:	4616      	mov	r6, r2
 80064e8:	461f      	mov	r7, r3

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 80064ea:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80064ee:	d224      	bcs.n	800653a <spi_lld_exchange+0x5a>

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80064f0:	6a23      	ldr	r3, [r4, #32]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80064f6:	6a23      	ldr	r3, [r4, #32]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 80064fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80064fe:	6a22      	ldr	r2, [r4, #32]
 8006500:	6812      	ldr	r2, [r2, #0]
 8006502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006506:	6013      	str	r3, [r2, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8006508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800650e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8006514:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006516:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800651e:	6013      	str	r3, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 8006520:	6a23      	ldr	r3, [r4, #32]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	6813      	ldr	r3, [r2, #0]
 8006526:	f043 0301 	orr.w	r3, r3, #1
 800652a:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 800652c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	6813      	ldr	r3, [r2, #0]
 8006532:	f043 0301 	orr.w	r3, r3, #1
 8006536:	6013      	str	r3, [r2, #0]
}
 8006538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 800653a:	4802      	ldr	r0, [pc, #8]	; (8006544 <spi_lld_exchange+0x64>)
 800653c:	f001 f898 	bl	8007670 <chSysHalt>
 8006540:	e7d6      	b.n	80064f0 <spi_lld_exchange+0x10>
 8006542:	bf00      	nop
 8006544:	08014ee8 	.word	0x08014ee8
 8006548:	f3af 8000 	nop.w
 800654c:	f3af 8000 	nop.w

08006550 <spi_lld_send>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	4604      	mov	r4, r0
 8006554:	460d      	mov	r5, r1
 8006556:	4616      	mov	r6, r2

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 8006558:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800655c:	d223      	bcs.n	80065a6 <spi_lld_send+0x56>

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800655e:	6a23      	ldr	r3, [r4, #32]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <spi_lld_send+0x60>)
 8006564:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8006566:	6a23      	ldr	r3, [r4, #32]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800656c:	6a23      	ldr	r3, [r4, #32]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006572:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8006574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800657a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8006580:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006582:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800658a:	6013      	str	r3, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 800658c:	6a23      	ldr	r3, [r4, #32]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	6813      	ldr	r3, [r2, #0]
 8006592:	f043 0301 	orr.w	r3, r3, #1
 8006596:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8006598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	6813      	ldr	r3, [r2, #0]
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	6013      	str	r3, [r2, #0]
}
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 80065a6:	4803      	ldr	r0, [pc, #12]	; (80065b4 <spi_lld_send+0x64>)
 80065a8:	f001 f862 	bl	8007670 <chSysHalt>
 80065ac:	e7d7      	b.n	800655e <spi_lld_send+0xe>
 80065ae:	bf00      	nop
 80065b0:	200020a0 	.word	0x200020a0
 80065b4:	08014efc 	.word	0x08014efc
 80065b8:	f3af 8000 	nop.w
 80065bc:	f3af 8000 	nop.w

080065c0 <spi_lld_receive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	4604      	mov	r4, r0
 80065c4:	460d      	mov	r5, r1
 80065c6:	4616      	mov	r6, r2

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 80065c8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80065cc:	d223      	bcs.n	8006616 <spi_lld_receive+0x56>

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80065ce:	6a23      	ldr	r3, [r4, #32]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80065d4:	6a23      	ldr	r3, [r4, #32]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 80065da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065dc:	6a22      	ldr	r2, [r4, #32]
 80065de:	6812      	ldr	r2, [r2, #0]
 80065e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065e4:	6013      	str	r3, [r2, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 80065e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a0d      	ldr	r2, [pc, #52]	; (8006620 <spi_lld_receive+0x60>)
 80065ec:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80065ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 80065f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80065fa:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 80065fc:	6a23      	ldr	r3, [r4, #32]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	6813      	ldr	r3, [r2, #0]
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8006608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	6813      	ldr	r3, [r2, #0]
 800660e:	f043 0301 	orr.w	r3, r3, #1
 8006612:	6013      	str	r3, [r2, #0]
}
 8006614:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 8006616:	4803      	ldr	r0, [pc, #12]	; (8006624 <spi_lld_receive+0x64>)
 8006618:	f001 f82a 	bl	8007670 <chSysHalt>
 800661c:	e7d7      	b.n	80065ce <spi_lld_receive+0xe>
 800661e:	bf00      	nop
 8006620:	08014ee4 	.word	0x08014ee4
 8006624:	08014f0c 	.word	0x08014f0c
 8006628:	f3af 8000 	nop.w
 800662c:	f3af 8000 	nop.w

08006630 <spi_lld_abort>:
 * @notapi
 */
void spi_lld_abort(SPIDriver *spip) {

  /* Stopping DMAs.*/
  dmaStreamDisable(spip->dmatx);
 8006630:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	6813      	ldr	r3, [r2, #0]
 8006636:	f023 031f 	bic.w	r3, r3, #31
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	f012 0f01 	tst.w	r2, #1
 8006646:	d1f9      	bne.n	800663c <spi_lld_abort+0xc>
 8006648:	7a59      	ldrb	r1, [r3, #9]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	233d      	movs	r3, #61	; 0x3d
 800664e:	408b      	lsls	r3, r1
 8006650:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(spip->dmarx);
 8006652:	6a03      	ldr	r3, [r0, #32]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	6813      	ldr	r3, [r2, #0]
 8006658:	f023 031f 	bic.w	r3, r3, #31
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	6a03      	ldr	r3, [r0, #32]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	f012 0f01 	tst.w	r2, #1
 8006668:	d1f9      	bne.n	800665e <spi_lld_abort+0x2e>
 800666a:	7a59      	ldrb	r1, [r3, #9]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	233d      	movs	r3, #61	; 0x3d
 8006670:	408b      	lsls	r3, r1
 8006672:	6013      	str	r3, [r2, #0]
}
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	f3af 8000 	nop.w
 800667c:	f3af 8000 	nop.w

08006680 <spi_lld_polled_exchange>:
 * @param[in] frame     the data frame to send over the SPI bus
 * @return              The received data frame from the SPI bus.
 */
uint16_t spi_lld_polled_exchange(SPIDriver *spip, uint16_t frame) {

  spip->spi->DR = frame;
 8006680:	69c3      	ldr	r3, [r0, #28]
 8006682:	60d9      	str	r1, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8006684:	69c3      	ldr	r3, [r0, #28]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	f012 0f01 	tst.w	r2, #1
 800668c:	d0fa      	beq.n	8006684 <spi_lld_polled_exchange+0x4>
    ;
  return spip->spi->DR;
 800668e:	68d8      	ldr	r0, [r3, #12]
}
 8006690:	b280      	uxth	r0, r0
 8006692:	4770      	bx	lr
	...

080066a0 <sdc_lld_collect_errors>:
 * @notapi
 */
static void sdc_lld_collect_errors(SDCDriver *sdcp, uint32_t sta) {
  uint32_t errors = SDC_NO_ERROR;

  if (sta & SDIO_STA_CCRCFAIL)
 80066a0:	f011 0f01 	tst.w	r1, #1
 80066a4:	d122      	bne.n	80066ec <sdc_lld_collect_errors+0x4c>
  uint32_t errors = SDC_NO_ERROR;
 80066a6:	2300      	movs	r3, #0
    errors |= SDC_CMD_CRC_ERROR;
  if (sta & SDIO_STA_DCRCFAIL)
 80066a8:	f011 0f02 	tst.w	r1, #2
 80066ac:	d001      	beq.n	80066b2 <sdc_lld_collect_errors+0x12>
    errors |= SDC_DATA_CRC_ERROR;
 80066ae:	f043 0302 	orr.w	r3, r3, #2
  if (sta & SDIO_STA_CTIMEOUT)
 80066b2:	f011 0f04 	tst.w	r1, #4
 80066b6:	d001      	beq.n	80066bc <sdc_lld_collect_errors+0x1c>
    errors |= SDC_COMMAND_TIMEOUT;
 80066b8:	f043 0308 	orr.w	r3, r3, #8
  if (sta & SDIO_STA_DTIMEOUT)
 80066bc:	f011 0f08 	tst.w	r1, #8
 80066c0:	d001      	beq.n	80066c6 <sdc_lld_collect_errors+0x26>
    errors |= SDC_DATA_TIMEOUT;
 80066c2:	f043 0304 	orr.w	r3, r3, #4
  if (sta & SDIO_STA_TXUNDERR)
 80066c6:	f011 0f10 	tst.w	r1, #16
 80066ca:	d001      	beq.n	80066d0 <sdc_lld_collect_errors+0x30>
    errors |= SDC_TX_UNDERRUN;
 80066cc:	f043 0310 	orr.w	r3, r3, #16
  if (sta & SDIO_STA_RXOVERR)
 80066d0:	f011 0f20 	tst.w	r1, #32
 80066d4:	d001      	beq.n	80066da <sdc_lld_collect_errors+0x3a>
    errors |= SDC_RX_OVERRUN;
 80066d6:	f043 0320 	orr.w	r3, r3, #32
  if (sta & SDIO_STA_STBITERR)
 80066da:	f411 7f00 	tst.w	r1, #512	; 0x200
 80066de:	d001      	beq.n	80066e4 <sdc_lld_collect_errors+0x44>
    errors |= SDC_STARTBIT_ERROR;
 80066e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40

  sdcp->errors |= errors;
 80066e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80066e6:	4313      	orrs	r3, r2
 80066e8:	6343      	str	r3, [r0, #52]	; 0x34
}
 80066ea:	4770      	bx	lr
    errors |= SDC_CMD_CRC_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e7db      	b.n	80066a8 <sdc_lld_collect_errors+0x8>

080066f0 <sdc_lld_prepare_read_bytes>:
                                       uint8_t *buf, uint32_t bytes) {
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	4604      	mov	r4, r0
 80066f4:	460e      	mov	r6, r1
 80066f6:	4615      	mov	r5, r2
  osalDbgCheck(bytes < 0x1000000);
 80066f8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80066fc:	d226      	bcs.n	800674c <sdc_lld_prepare_read_bytes+0x5c>
  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 80066fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006700:	4a14      	ldr	r2, [pc, #80]	; (8006754 <sdc_lld_prepare_read_bytes+0x64>)
 8006702:	625a      	str	r2, [r3, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 8006704:	4620      	mov	r0, r4
 8006706:	f7fc fadb 	bl	8002cc0 <_sdc_wait_for_transfer_state>
 800670a:	4602      	mov	r2, r0
 800670c:	b9e0      	cbnz	r0, 8006748 <sdc_lld_prepare_read_bytes+0x58>
  dmaStreamSetMemory0(sdcp->dma, buf);
 800670e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma, bytes / sizeof (uint32_t));
 8006714:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	08a9      	lsrs	r1, r5, #2
 800671a:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 800671c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006722:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 8006724:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006726:	6819      	ldr	r1, [r3, #0]
 8006728:	680b      	ldr	r3, [r1, #0]
 800672a:	f043 0301 	orr.w	r3, r3, #1
 800672e:	600b      	str	r3, [r1, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8006730:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006732:	4909      	ldr	r1, [pc, #36]	; (8006758 <sdc_lld_prepare_read_bytes+0x68>)
 8006734:	6399      	str	r1, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8006736:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006738:	f240 312a 	movw	r1, #810	; 0x32a
 800673c:	63d9      	str	r1, [r3, #60]	; 0x3c
  sdcp->sdio->DLEN  = bytes;
 800673e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006740:	629d      	str	r5, [r3, #40]	; 0x28
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 8006742:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006744:	210f      	movs	r1, #15
 8006746:	62d9      	str	r1, [r3, #44]	; 0x2c
}
 8006748:	4610      	mov	r0, r2
 800674a:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgCheck(bytes < 0x1000000);
 800674c:	4803      	ldr	r0, [pc, #12]	; (800675c <sdc_lld_prepare_read_bytes+0x6c>)
 800674e:	f000 ff8f 	bl	8007670 <chSysHalt>
 8006752:	e7d4      	b.n	80066fe <sdc_lld_prepare_read_bytes+0xe>
 8006754:	016e3600 	.word	0x016e3600
 8006758:	00c007ff 	.word	0x00c007ff
 800675c:	08014f1c 	.word	0x08014f1c

08006760 <Vector104>:
 * @details It just wakes transaction thread. All error  handling performs in
 *          that thread.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_SDIO_HANDLER) {
 8006760:	b538      	push	{r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();
 8006762:	f002 fbed 	bl	8008f40 <_stats_increase_irq>
 8006766:	4d11      	ldr	r5, [pc, #68]	; (80067ac <Vector104+0x4c>)
 8006768:	4628      	mov	r0, r5
 800676a:	f001 fa41 	bl	8007bf0 <_trace_isr_enter>
 800676e:	f001 f96f 	bl	8007a50 <_dbg_check_enter_isr>
 8006772:	2320      	movs	r3, #32
 8006774:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8006778:	f002 fc1a 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800677c:	f001 f938 	bl	80079f0 <_dbg_check_lock_from_isr>

  osalSysLockFromISR();

  /* Disables the source but the status flags are not reset because the
     read/write functions needs to check them.*/
  SDIO->MASK = 0;
 8006780:	2400      	movs	r4, #0
 8006782:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <Vector104+0x50>)
 8006784:	63dc      	str	r4, [r3, #60]	; 0x3c
 8006786:	4621      	mov	r1, r4
 8006788:	480a      	ldr	r0, [pc, #40]	; (80067b4 <Vector104+0x54>)
 800678a:	f002 fa91 	bl	8008cb0 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 800678e:	f001 f947 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8006792:	f002 fc15 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 8006796:	f384 8811 	msr	BASEPRI, r4

  osalThreadResumeI(&SDCD1.thread, MSG_OK);

  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 800679a:	f001 f979 	bl	8007a90 <_dbg_check_leave_isr>
 800679e:	4628      	mov	r0, r5
 80067a0:	f001 fa4e 	bl	8007c40 <_trace_isr_leave>
 80067a4:	f005 f9d4 	bl	800bb50 <_port_irq_epilogue>
}
 80067a8:	bd38      	pop	{r3, r4, r5, pc}
 80067aa:	bf00      	nop
 80067ac:	08014f38 	.word	0x08014f38
 80067b0:	40012c00 	.word	0x40012c00
 80067b4:	20004738 	.word	0x20004738
 80067b8:	f3af 8000 	nop.w
 80067bc:	f3af 8000 	nop.w

080067c0 <sdc_lld_init>:
/**
 * @brief   Low level SDC driver initialization.
 *
 * @notapi
 */
void sdc_lld_init(void) {
 80067c0:	b510      	push	{r4, lr}

  sdcObjectInit(&SDCD1);
 80067c2:	4c07      	ldr	r4, [pc, #28]	; (80067e0 <sdc_lld_init+0x20>)
 80067c4:	4620      	mov	r0, r4
 80067c6:	f7fc fb0b 	bl	8002de0 <sdcObjectInit>
  SDCD1.thread = NULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	63e3      	str	r3, [r4, #60]	; 0x3c
  SDCD1.dma    = NULL;
 80067ce:	6463      	str	r3, [r4, #68]	; 0x44
  SDCD1.sdio   = SDIO;
 80067d0:	4b04      	ldr	r3, [pc, #16]	; (80067e4 <sdc_lld_init+0x24>)
 80067d2:	64a3      	str	r3, [r4, #72]	; 0x48
  nvicEnableVector(STM32_SDIO_NUMBER, STM32_SDC_SDIO_IRQ_PRIORITY);
 80067d4:	2109      	movs	r1, #9
 80067d6:	2031      	movs	r0, #49	; 0x31
 80067d8:	f7fd fc4a 	bl	8004070 <nvicEnableVector>
}
 80067dc:	bd10      	pop	{r4, pc}
 80067de:	bf00      	nop
 80067e0:	200046fc 	.word	0x200046fc
 80067e4:	40012c00 	.word	0x40012c00
 80067e8:	f3af 8000 	nop.w
 80067ec:	f3af 8000 	nop.w

080067f0 <sdc_lld_start>:
 *
 * @param[in] sdcp      pointer to the @p SDCDriver object
 *
 * @notapi
 */
void sdc_lld_start(SDCDriver *sdcp) {
 80067f0:	b510      	push	{r4, lr}
 80067f2:	4604      	mov	r4, r0

  /* Checking configuration, using a default if NULL has been passed.*/
  if (sdcp->config == NULL) {
 80067f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80067f6:	b173      	cbz	r3, 8006816 <sdc_lld_start+0x26>
                  STM32_DMA_CR_PSIZE_WORD |
                  STM32_DMA_CR_MSIZE_WORD |
                  STM32_DMA_CR_MINC;

#if (defined(STM32F4XX) || defined(STM32F2XX))
  sdcp->dmamode |= STM32_DMA_CR_PFCTRL |
 80067f8:	4b18      	ldr	r3, [pc, #96]	; (800685c <sdc_lld_start+0x6c>)
 80067fa:	6423      	str	r3, [r4, #64]	; 0x40
                   STM32_DMA_CR_PBURST_INCR4 |
                   STM32_DMA_CR_MBURST_INCR4;
#endif

  if (sdcp->state == BLK_STOP) {
 80067fc:	7923      	ldrb	r3, [r4, #4]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d00c      	beq.n	800681c <sdc_lld_start+0x2c>
#endif
    rccEnableSDIO(true);
  }

  /* Configuration, card clock is initially stopped.*/
  sdcp->sdio->POWER  = 0;
 8006802:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006804:	2300      	movs	r3, #0
 8006806:	6013      	str	r3, [r2, #0]
  sdcp->sdio->CLKCR  = 0;
 8006808:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800680a:	6053      	str	r3, [r2, #4]
  sdcp->sdio->DCTRL  = 0;
 800680c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800680e:	62d3      	str	r3, [r2, #44]	; 0x2c
  sdcp->sdio->DTIMER = 0;
 8006810:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006812:	6253      	str	r3, [r2, #36]	; 0x24
}
 8006814:	bd10      	pop	{r4, pc}
    sdcp->config = &sdc_default_cfg;
 8006816:	4b12      	ldr	r3, [pc, #72]	; (8006860 <sdc_lld_start+0x70>)
 8006818:	62c3      	str	r3, [r0, #44]	; 0x2c
 800681a:	e7ed      	b.n	80067f8 <sdc_lld_start+0x8>
    sdcp->dma = dmaStreamAllocI(STM32_SDC_SDIO_DMA_STREAM,
 800681c:	2300      	movs	r3, #0
 800681e:	461a      	mov	r2, r3
 8006820:	2109      	movs	r1, #9
 8006822:	200e      	movs	r0, #14
 8006824:	f7fe f9e4 	bl	8004bf0 <dmaStreamAllocI>
 8006828:	6460      	str	r0, [r4, #68]	; 0x44
    osalDbgAssert(sdcp->dma != NULL, "unable to allocate stream");
 800682a:	b198      	cbz	r0, 8006854 <sdc_lld_start+0x64>
    dmaStreamSetPeripheral(sdcp->dma, &sdcp->sdio->FIFO);
 800682c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800682e:	3380      	adds	r3, #128	; 0x80
 8006830:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006832:	6812      	ldr	r2, [r2, #0]
 8006834:	6093      	str	r3, [r2, #8]
    dmaStreamSetFIFO(sdcp->dma, STM32_DMA_FCR_DMDIS | STM32_DMA_FCR_FTH_FULL);
 8006836:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2207      	movs	r2, #7
 800683c:	615a      	str	r2, [r3, #20]
    rccEnableSDIO(true);
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <sdc_lld_start+0x74>)
 8006840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006846:	645a      	str	r2, [r3, #68]	; 0x44
 8006848:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800684a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800684e:	665a      	str	r2, [r3, #100]	; 0x64
 8006850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006852:	e7d6      	b.n	8006802 <sdc_lld_start+0x12>
    osalDbgAssert(sdcp->dma != NULL, "unable to allocate stream");
 8006854:	4804      	ldr	r0, [pc, #16]	; (8006868 <sdc_lld_start+0x78>)
 8006856:	f000 ff0b 	bl	8007670 <chSysHalt>
 800685a:	e7e7      	b.n	800682c <sdc_lld_start+0x3c>
 800685c:	08a25420 	.word	0x08a25420
 8006860:	08014f44 	.word	0x08014f44
 8006864:	40023800 	.word	0x40023800
 8006868:	08014f4c 	.word	0x08014f4c
 800686c:	f3af 8000 	nop.w

08006870 <sdc_lld_stop>:
 *
 * @param[in] sdcp      pointer to the @p SDCDriver object
 *
 * @notapi
 */
void sdc_lld_stop(SDCDriver *sdcp) {
 8006870:	b538      	push	{r3, r4, r5, lr}

  if (sdcp->state != BLK_STOP) {
 8006872:	7903      	ldrb	r3, [r0, #4]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d017      	beq.n	80068a8 <sdc_lld_stop+0x38>
 8006878:	4604      	mov	r4, r0

    /* SDIO deactivation.*/
    sdcp->sdio->POWER  = 0;
 800687a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800687c:	2500      	movs	r5, #0
 800687e:	601d      	str	r5, [r3, #0]
    sdcp->sdio->CLKCR  = 0;
 8006880:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006882:	605d      	str	r5, [r3, #4]
    sdcp->sdio->DCTRL  = 0;
 8006884:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006886:	62dd      	str	r5, [r3, #44]	; 0x2c
    sdcp->sdio->DTIMER = 0;
 8006888:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800688a:	625d      	str	r5, [r3, #36]	; 0x24

    /* DMA stream released.*/
    dmaStreamFreeI(sdcp->dma);
 800688c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800688e:	f7fe fa5f 	bl	8004d50 <dmaStreamFreeI>
    sdcp->dma = NULL;
 8006892:	6465      	str	r5, [r4, #68]	; 0x44

    /* Clock deactivation.*/
    rccDisableSDIO();
 8006894:	4b05      	ldr	r3, [pc, #20]	; (80068ac <sdc_lld_stop+0x3c>)
 8006896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800689c:	645a      	str	r2, [r3, #68]	; 0x44
 800689e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80068a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068a4:	665a      	str	r2, [r3, #100]	; 0x64
 80068a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  }
}
 80068a8:	bd38      	pop	{r3, r4, r5, pc}
 80068aa:	bf00      	nop
 80068ac:	40023800 	.word	0x40023800

080068b0 <sdc_lld_start_clk>:
 *
 * @param[in] sdcp      pointer to the @p SDCDriver object
 *
 * @notapi
 */
void sdc_lld_start_clk(SDCDriver *sdcp) {
 80068b0:	b508      	push	{r3, lr}

  /* Initial clock setting: 400kHz, 1bit mode.*/
  sdcp->sdio->CLKCR  = STM32_SDIO_DIV_LS;
 80068b2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80068b4:	2278      	movs	r2, #120	; 0x78
 80068b6:	605a      	str	r2, [r3, #4]
  sdcp->sdio->POWER |= SDIO_POWER_PWRCTRL_0 | SDIO_POWER_PWRCTRL_1;
 80068b8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80068ba:	6813      	ldr	r3, [r2, #0]
 80068bc:	f043 0303 	orr.w	r3, r3, #3
 80068c0:	6013      	str	r3, [r2, #0]
  sdcp->sdio->CLKCR |= SDIO_CLKCR_CLKEN;
 80068c2:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80068c4:	6853      	ldr	r3, [r2, #4]
 80068c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ca:	6053      	str	r3, [r2, #4]
  chThdSleep(delay);
 80068cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068d0:	2100      	movs	r1, #0
 80068d2:	f002 f8d5 	bl	8008a80 <chThdSleep>

  /* Clock activation delay.*/
  osalThreadSleep(OSAL_MS2I(STM32_SDC_CLOCK_ACTIVATION_DELAY));
}
 80068d6:	bd08      	pop	{r3, pc}
 80068d8:	f3af 8000 	nop.w
 80068dc:	f3af 8000 	nop.w

080068e0 <sdc_lld_set_data_clk>:
  else
    sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & 0xFFFFFF00U) | STM32_SDIO_DIV_HS;
#else
  (void)clk;

  sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & 0xFFFFFF00U) | STM32_SDIO_DIV_HS;
 80068e0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80068e2:	6853      	ldr	r3, [r2, #4]
 80068e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068e8:	6053      	str	r3, [r2, #4]
#endif
}
 80068ea:	4770      	bx	lr
 80068ec:	f3af 8000 	nop.w

080068f0 <sdc_lld_stop_clk>:
 *
 * @notapi
 */
void sdc_lld_stop_clk(SDCDriver *sdcp) {

  sdcp->sdio->CLKCR = 0;
 80068f0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80068f2:	2300      	movs	r3, #0
 80068f4:	6053      	str	r3, [r2, #4]
  sdcp->sdio->POWER = 0;
 80068f6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80068f8:	6013      	str	r3, [r2, #0]
}
 80068fa:	4770      	bx	lr
 80068fc:	f3af 8000 	nop.w

08006900 <sdc_lld_set_bus_mode>:
 * @param[in] mode      bus mode
 *
 * @notapi
 */
void sdc_lld_set_bus_mode(SDCDriver *sdcp, sdcbusmode_t mode) {
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 8006900:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006902:	6853      	ldr	r3, [r2, #4]
 8006904:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800

  switch (mode) {
 8006908:	2901      	cmp	r1, #1
 800690a:	d005      	beq.n	8006918 <sdc_lld_set_bus_mode+0x18>
 800690c:	b111      	cbz	r1, 8006914 <sdc_lld_set_bus_mode+0x14>
 800690e:	2902      	cmp	r1, #2
 8006910:	d006      	beq.n	8006920 <sdc_lld_set_bus_mode+0x20>
 8006912:	4770      	bx	lr
  case SDC_MODE_1BIT:
    sdcp->sdio->CLKCR = clk;
 8006914:	6053      	str	r3, [r2, #4]
    break;
 8006916:	4770      	bx	lr
  case SDC_MODE_4BIT:
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_0;
 8006918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800691c:	6053      	str	r3, [r2, #4]
    break;
 800691e:	4770      	bx	lr
  case SDC_MODE_8BIT:
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_1;
 8006920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006924:	6053      	str	r3, [r2, #4]
    break;
  }
}
 8006926:	4770      	bx	lr
 8006928:	f3af 8000 	nop.w
 800692c:	f3af 8000 	nop.w

08006930 <sdc_lld_send_cmd_none>:
 *
 * @notapi
 */
void sdc_lld_send_cmd_none(SDCDriver *sdcp, uint8_t cmd, uint32_t arg) {

  sdcp->sdio->ARG = arg;
 8006930:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006932:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 8006934:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006936:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800693a:	60d9      	str	r1, [r3, #12]
  while ((sdcp->sdio->STA & SDIO_STA_CMDSENT) == 0)
 800693c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800693e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006940:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006944:	d0fa      	beq.n	800693c <sdc_lld_send_cmd_none+0xc>
    ;
  sdcp->sdio->ICR = SDIO_ICR_CMDSENTC;
 8006946:	2280      	movs	r2, #128	; 0x80
 8006948:	639a      	str	r2, [r3, #56]	; 0x38
}
 800694a:	4770      	bx	lr
 800694c:	f3af 8000 	nop.w

08006950 <sdc_lld_send_cmd_short>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_short(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                            uint32_t *resp) {
 8006950:	b510      	push	{r4, lr}
  uint32_t sta;

  sdcp->sdio->ARG = arg;
 8006952:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006954:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8006956:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006958:	f441 6188 	orr.w	r1, r1, #1088	; 0x440
 800695c:	60d1      	str	r1, [r2, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800695e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006960:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006962:	f011 0445 	ands.w	r4, r1, #69	; 0x45
 8006966:	d0fa      	beq.n	800695e <sdc_lld_send_cmd_short+0xe>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8006968:	6394      	str	r4, [r2, #56]	; 0x38
                           SDIO_STA_CCRCFAIL);
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0) {
 800696a:	f011 0f04 	tst.w	r1, #4
 800696e:	d104      	bne.n	800697a <sdc_lld_send_cmd_short+0x2a>
    sdc_lld_collect_errors(sdcp, sta);
    return HAL_FAILED;
  }
  *resp = sdcp->sdio->RESP1;
 8006970:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006972:	6952      	ldr	r2, [r2, #20]
 8006974:	601a      	str	r2, [r3, #0]
  return HAL_SUCCESS;
 8006976:	2000      	movs	r0, #0
}
 8006978:	bd10      	pop	{r4, pc}
    sdc_lld_collect_errors(sdcp, sta);
 800697a:	f7ff fe91 	bl	80066a0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 800697e:	2001      	movs	r0, #1
 8006980:	e7fa      	b.n	8006978 <sdc_lld_send_cmd_short+0x28>
 8006982:	bf00      	nop
 8006984:	f3af 8000 	nop.w
 8006988:	f3af 8000 	nop.w
 800698c:	f3af 8000 	nop.w

08006990 <sdc_lld_send_cmd_short_crc>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_short_crc(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                                uint32_t *resp) {
 8006990:	b510      	push	{r4, lr}
  uint32_t sta;

  sdcp->sdio->ARG = arg;
 8006992:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006994:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8006996:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006998:	f441 6188 	orr.w	r1, r1, #1088	; 0x440
 800699c:	60d1      	str	r1, [r2, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800699e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80069a0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80069a2:	f011 0445 	ands.w	r4, r1, #69	; 0x45
 80069a6:	d0fa      	beq.n	800699e <sdc_lld_send_cmd_short_crc+0xe>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 80069a8:	6394      	str	r4, [r2, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80069aa:	f011 0f05 	tst.w	r1, #5
 80069ae:	d104      	bne.n	80069ba <sdc_lld_send_cmd_short_crc+0x2a>
    sdc_lld_collect_errors(sdcp, sta);
    return HAL_FAILED;
  }
  *resp = sdcp->sdio->RESP1;
 80069b0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80069b2:	6952      	ldr	r2, [r2, #20]
 80069b4:	601a      	str	r2, [r3, #0]
  return HAL_SUCCESS;
 80069b6:	2000      	movs	r0, #0
}
 80069b8:	bd10      	pop	{r4, pc}
    sdc_lld_collect_errors(sdcp, sta);
 80069ba:	f7ff fe71 	bl	80066a0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 80069be:	2001      	movs	r0, #1
 80069c0:	e7fa      	b.n	80069b8 <sdc_lld_send_cmd_short_crc+0x28>
 80069c2:	bf00      	nop
 80069c4:	f3af 8000 	nop.w
 80069c8:	f3af 8000 	nop.w
 80069cc:	f3af 8000 	nop.w

080069d0 <sdc_lld_wait_transaction_end>:
                                         uint32_t *resp) {
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	4604      	mov	r4, r0
 80069d4:	460d      	mov	r5, r1
 80069d6:	4616      	mov	r6, r2
 80069d8:	2320      	movs	r3, #32
 80069da:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80069de:	f002 fad7 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80069e2:	f000 ffd5 	bl	8007990 <_dbg_check_lock>
  if (sdcp->sdio->MASK != 0)
 80069e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80069e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d12e      	bne.n	8006a4c <sdc_lld_wait_transaction_end+0x7c>
  if ((sdcp->sdio->STA & SDIO_STA_DATAEND) == 0) {
 80069ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80069f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80069f6:	d032      	beq.n	8006a5e <sdc_lld_wait_transaction_end+0x8e>
  while (sdcp->dma->stream->CR & STM32_DMA_CR_EN)
 80069f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	f012 0f01 	tst.w	r2, #1
 8006a02:	d1f9      	bne.n	80069f8 <sdc_lld_wait_transaction_end+0x28>
  dmaStreamClearInterrupt(sdcp->dma);
 8006a04:	7a59      	ldrb	r1, [r3, #9]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	233d      	movs	r3, #61	; 0x3d
 8006a0a:	408b      	lsls	r3, r1
 8006a0c:	6013      	str	r3, [r2, #0]
  sdcp->sdio->ICR = STM32_SDIO_ICR_ALL_FLAGS;
 8006a0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006a10:	4a21      	ldr	r2, [pc, #132]	; (8006a98 <sdc_lld_wait_transaction_end+0xc8>)
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->DCTRL = 0;
 8006a14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006a16:	2200      	movs	r2, #0
 8006a18:	62da      	str	r2, [r3, #44]	; 0x2c
  _dbg_check_unlock();
 8006a1a:	f000 ffd1 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8006a1e:	f002 fabf 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8006a22:	4b1e      	ldr	r3, [pc, #120]	; (8006a9c <sdc_lld_wait_transaction_end+0xcc>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d004      	beq.n	8006a34 <sdc_lld_wait_transaction_end+0x64>
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	6899      	ldr	r1, [r3, #8]
 8006a2e:	6893      	ldr	r3, [r2, #8]
 8006a30:	4299      	cmp	r1, r3
 8006a32:	d32a      	bcc.n	8006a8a <sdc_lld_wait_transaction_end+0xba>
 8006a34:	2300      	movs	r3, #0
 8006a36:	f383 8811 	msr	BASEPRI, r3
  if (n > 1)
 8006a3a:	2d01      	cmp	r5, #1
 8006a3c:	d929      	bls.n	8006a92 <sdc_lld_wait_transaction_end+0xc2>
    return sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8006a3e:	4633      	mov	r3, r6
 8006a40:	2200      	movs	r2, #0
 8006a42:	210c      	movs	r1, #12
 8006a44:	4620      	mov	r0, r4
 8006a46:	f7ff ffa3 	bl	8006990 <sdc_lld_send_cmd_short_crc>
}
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 8006a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a50:	f04f 33ff 	mov.w	r3, #4294967295
 8006a54:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8006a58:	f002 f90a 	bl	8008c70 <chThdSuspendTimeoutS>
 8006a5c:	e7c7      	b.n	80069ee <sdc_lld_wait_transaction_end+0x1e>
  _dbg_check_unlock();
 8006a5e:	f000 ffaf 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8006a62:	f002 fa9d 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8006a66:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <sdc_lld_wait_transaction_end+0xcc>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d004      	beq.n	8006a78 <sdc_lld_wait_transaction_end+0xa8>
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	6899      	ldr	r1, [r3, #8]
 8006a72:	6893      	ldr	r3, [r2, #8]
 8006a74:	4299      	cmp	r1, r3
 8006a76:	d304      	bcc.n	8006a82 <sdc_lld_wait_transaction_end+0xb2>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f383 8811 	msr	BASEPRI, r3
    return HAL_FAILED;
 8006a7e:	2001      	movs	r0, #1
 8006a80:	e7e3      	b.n	8006a4a <sdc_lld_wait_transaction_end+0x7a>
 8006a82:	4807      	ldr	r0, [pc, #28]	; (8006aa0 <sdc_lld_wait_transaction_end+0xd0>)
 8006a84:	f000 fdf4 	bl	8007670 <chSysHalt>
 8006a88:	e7f6      	b.n	8006a78 <sdc_lld_wait_transaction_end+0xa8>
 8006a8a:	4805      	ldr	r0, [pc, #20]	; (8006aa0 <sdc_lld_wait_transaction_end+0xd0>)
 8006a8c:	f000 fdf0 	bl	8007670 <chSysHalt>
 8006a90:	e7d0      	b.n	8006a34 <sdc_lld_wait_transaction_end+0x64>
  return HAL_SUCCESS;
 8006a92:	2000      	movs	r0, #0
 8006a94:	e7d9      	b.n	8006a4a <sdc_lld_wait_transaction_end+0x7a>
 8006a96:	bf00      	nop
 8006a98:	00c007ff 	.word	0x00c007ff
 8006a9c:	20004f68 	.word	0x20004f68
 8006aa0:	08014f5c 	.word	0x08014f5c
 8006aa4:	f3af 8000 	nop.w
 8006aa8:	f3af 8000 	nop.w
 8006aac:	f3af 8000 	nop.w

08006ab0 <sdc_lld_error_cleanup>:
                                  uint32_t *resp) {
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	460d      	mov	r5, r1
 8006ab6:	4616      	mov	r6, r2
  uint32_t sta = sdcp->sdio->STA;
 8006ab8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006aba:	6b59      	ldr	r1, [r3, #52]	; 0x34
  dmaStreamClearInterrupt(sdcp->dma);
 8006abc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006abe:	7a50      	ldrb	r0, [r2, #9]
 8006ac0:	6852      	ldr	r2, [r2, #4]
 8006ac2:	233d      	movs	r3, #61	; 0x3d
 8006ac4:	4083      	lsls	r3, r0
 8006ac6:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(sdcp->dma);
 8006ac8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	6813      	ldr	r3, [r2, #0]
 8006ace:	f023 031f 	bic.w	r3, r3, #31
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	6812      	ldr	r2, [r2, #0]
 8006ada:	f012 0f01 	tst.w	r2, #1
 8006ade:	d1f9      	bne.n	8006ad4 <sdc_lld_error_cleanup+0x24>
 8006ae0:	7a58      	ldrb	r0, [r3, #9]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	233d      	movs	r3, #61	; 0x3d
 8006ae6:	4083      	lsls	r3, r0
 8006ae8:	6013      	str	r3, [r2, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8006aea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006aec:	4a09      	ldr	r2, [pc, #36]	; (8006b14 <sdc_lld_error_cleanup+0x64>)
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = 0;
 8006af0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006af2:	2300      	movs	r3, #0
 8006af4:	63d3      	str	r3, [r2, #60]	; 0x3c
  sdcp->sdio->DCTRL = 0;
 8006af6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006af8:	62d3      	str	r3, [r2, #44]	; 0x2c
  sdc_lld_collect_errors(sdcp, sta);
 8006afa:	4620      	mov	r0, r4
 8006afc:	f7ff fdd0 	bl	80066a0 <sdc_lld_collect_errors>
  if (n > 1)
 8006b00:	2d01      	cmp	r5, #1
 8006b02:	d905      	bls.n	8006b10 <sdc_lld_error_cleanup+0x60>
    sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8006b04:	4633      	mov	r3, r6
 8006b06:	2200      	movs	r2, #0
 8006b08:	210c      	movs	r1, #12
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f7ff ff40 	bl	8006990 <sdc_lld_send_cmd_short_crc>
}
 8006b10:	bd70      	pop	{r4, r5, r6, pc}
 8006b12:	bf00      	nop
 8006b14:	00c007ff 	.word	0x00c007ff
 8006b18:	f3af 8000 	nop.w
 8006b1c:	f3af 8000 	nop.w

08006b20 <sdc_lld_prepare_read>:
                                 uint32_t n, uint32_t *resp) {
 8006b20:	b510      	push	{r4, lr}
 8006b22:	461c      	mov	r4, r3
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8006b24:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006b26:	f013 0f10 	tst.w	r3, #16
 8006b2a:	d100      	bne.n	8006b2e <sdc_lld_prepare_read+0xe>
    startblk *= MMCSD_BLOCK_SIZE;
 8006b2c:	0249      	lsls	r1, r1, #9
  if (n > 1) {
 8006b2e:	2a01      	cmp	r2, #1
 8006b30:	d90d      	bls.n	8006b4e <sdc_lld_prepare_read+0x2e>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_MULTIPLE_BLOCK,
 8006b32:	4623      	mov	r3, r4
 8006b34:	460a      	mov	r2, r1
 8006b36:	2112      	movs	r1, #18
 8006b38:	f7ff ff2a 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	b920      	cbnz	r0, 8006b4a <sdc_lld_prepare_read+0x2a>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8006b40:	6821      	ldr	r1, [r4, #0]
 8006b42:	4a0a      	ldr	r2, [pc, #40]	; (8006b6c <sdc_lld_prepare_read+0x4c>)
 8006b44:	400a      	ands	r2, r1
 8006b46:	b102      	cbz	r2, 8006b4a <sdc_lld_prepare_read+0x2a>
      return HAL_FAILED;
 8006b48:	2301      	movs	r3, #1
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	bd10      	pop	{r4, pc}
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_SINGLE_BLOCK,
 8006b4e:	4623      	mov	r3, r4
 8006b50:	460a      	mov	r2, r1
 8006b52:	2111      	movs	r1, #17
 8006b54:	f7ff ff1c 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d1f5      	bne.n	8006b4a <sdc_lld_prepare_read+0x2a>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8006b5e:	6821      	ldr	r1, [r4, #0]
 8006b60:	4a02      	ldr	r2, [pc, #8]	; (8006b6c <sdc_lld_prepare_read+0x4c>)
 8006b62:	400a      	ands	r2, r1
 8006b64:	2a00      	cmp	r2, #0
 8006b66:	d0f0      	beq.n	8006b4a <sdc_lld_prepare_read+0x2a>
      return HAL_FAILED;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e7ee      	b.n	8006b4a <sdc_lld_prepare_read+0x2a>
 8006b6c:	fdffe008 	.word	0xfdffe008

08006b70 <sdc_lld_prepare_write>:
                                  uint32_t n, uint32_t *resp) {
 8006b70:	b510      	push	{r4, lr}
 8006b72:	461c      	mov	r4, r3
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8006b74:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006b76:	f013 0f10 	tst.w	r3, #16
 8006b7a:	d100      	bne.n	8006b7e <sdc_lld_prepare_write+0xe>
    startblk *= MMCSD_BLOCK_SIZE;
 8006b7c:	0249      	lsls	r1, r1, #9
  if (n > 1) {
 8006b7e:	2a01      	cmp	r2, #1
 8006b80:	d90d      	bls.n	8006b9e <sdc_lld_prepare_write+0x2e>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK,
 8006b82:	4623      	mov	r3, r4
 8006b84:	460a      	mov	r2, r1
 8006b86:	2119      	movs	r1, #25
 8006b88:	f7ff ff02 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	b920      	cbnz	r0, 8006b9a <sdc_lld_prepare_write+0x2a>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8006b90:	6821      	ldr	r1, [r4, #0]
 8006b92:	4a0a      	ldr	r2, [pc, #40]	; (8006bbc <sdc_lld_prepare_write+0x4c>)
 8006b94:	400a      	ands	r2, r1
 8006b96:	b102      	cbz	r2, 8006b9a <sdc_lld_prepare_write+0x2a>
      return HAL_FAILED;
 8006b98:	2301      	movs	r3, #1
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	bd10      	pop	{r4, pc}
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_BLOCK,
 8006b9e:	4623      	mov	r3, r4
 8006ba0:	460a      	mov	r2, r1
 8006ba2:	2118      	movs	r1, #24
 8006ba4:	f7ff fef4 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d1f5      	bne.n	8006b9a <sdc_lld_prepare_write+0x2a>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8006bae:	6821      	ldr	r1, [r4, #0]
 8006bb0:	4a02      	ldr	r2, [pc, #8]	; (8006bbc <sdc_lld_prepare_write+0x4c>)
 8006bb2:	400a      	ands	r2, r1
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	d0f0      	beq.n	8006b9a <sdc_lld_prepare_write+0x2a>
      return HAL_FAILED;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e7ee      	b.n	8006b9a <sdc_lld_prepare_write+0x2a>
 8006bbc:	fdffe008 	.word	0xfdffe008

08006bc0 <sdc_lld_send_cmd_long_crc>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_long_crc(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                               uint32_t *resp) {
 8006bc0:	b510      	push	{r4, lr}
  uint32_t sta;

  (void)sdcp;

  sdcp->sdio->ARG = arg;
 8006bc2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006bc4:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 8006bc6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006bc8:	f441 6198 	orr.w	r1, r1, #1216	; 0x4c0
 8006bcc:	60d1      	str	r1, [r2, #12]
                                    SDIO_CMD_CPSMEN;
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8006bce:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006bd0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006bd2:	f011 0445 	ands.w	r4, r1, #69	; 0x45
 8006bd6:	d0fa      	beq.n	8006bce <sdc_lld_send_cmd_long_crc+0xe>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8006bd8:	6394      	str	r4, [r2, #56]	; 0x38
                           SDIO_STA_CCRCFAIL);
  if ((sta & (STM32_SDIO_STA_ERROR_MASK)) != 0) {
 8006bda:	f011 0f3f 	tst.w	r1, #63	; 0x3f
 8006bde:	d10d      	bne.n	8006bfc <sdc_lld_send_cmd_long_crc+0x3c>
    sdc_lld_collect_errors(sdcp, sta);
    return HAL_FAILED;
  }
  /* Save bytes in reverse order because MSB in response comes first.*/
  *resp++ = sdcp->sdio->RESP4;
 8006be0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006be2:	6a12      	ldr	r2, [r2, #32]
 8006be4:	601a      	str	r2, [r3, #0]
  *resp++ = sdcp->sdio->RESP3;
 8006be6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006be8:	69d2      	ldr	r2, [r2, #28]
 8006bea:	605a      	str	r2, [r3, #4]
  *resp++ = sdcp->sdio->RESP2;
 8006bec:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006bee:	6992      	ldr	r2, [r2, #24]
 8006bf0:	609a      	str	r2, [r3, #8]
  *resp   = sdcp->sdio->RESP1;
 8006bf2:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006bf4:	6952      	ldr	r2, [r2, #20]
 8006bf6:	60da      	str	r2, [r3, #12]
  return HAL_SUCCESS;
 8006bf8:	2000      	movs	r0, #0
}
 8006bfa:	bd10      	pop	{r4, pc}
    sdc_lld_collect_errors(sdcp, sta);
 8006bfc:	f7ff fd50 	bl	80066a0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 8006c00:	2001      	movs	r0, #1
 8006c02:	e7fa      	b.n	8006bfa <sdc_lld_send_cmd_long_crc+0x3a>
 8006c04:	f3af 8000 	nop.w
 8006c08:	f3af 8000 	nop.w
 8006c0c:	f3af 8000 	nop.w

08006c10 <sdc_lld_read_special>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read_special(SDCDriver *sdcp, uint8_t *buf, size_t bytes,
                          uint8_t cmd, uint32_t arg) {
 8006c10:	b530      	push	{r4, r5, lr}
 8006c12:	b083      	sub	sp, #12
 8006c14:	4604      	mov	r4, r0
 8006c16:	461d      	mov	r5, r3
  uint32_t resp[1];

  if(sdc_lld_prepare_read_bytes(sdcp, buf, bytes))
 8006c18:	f7ff fd6a 	bl	80066f0 <sdc_lld_prepare_read_bytes>
 8006c1c:	b950      	cbnz	r0, 8006c34 <sdc_lld_read_special+0x24>
    goto error;

  if (sdc_lld_send_cmd_short_crc(sdcp, cmd, arg, resp)
 8006c1e:	ab01      	add	r3, sp, #4
 8006c20:	9a06      	ldr	r2, [sp, #24]
 8006c22:	4629      	mov	r1, r5
 8006c24:	4620      	mov	r0, r4
 8006c26:	f7ff feb3 	bl	8006990 <sdc_lld_send_cmd_short_crc>
 8006c2a:	b918      	cbnz	r0, 8006c34 <sdc_lld_read_special+0x24>
                                 || MMCSD_R1_ERROR(resp[0]))
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <sdc_lld_read_special+0x48>)
 8006c2e:	9a01      	ldr	r2, [sp, #4]
 8006c30:	4013      	ands	r3, r2
 8006c32:	b143      	cbz	r3, 8006c46 <sdc_lld_read_special+0x36>
    goto error;

  return HAL_SUCCESS;

error:
  sdc_lld_error_cleanup(sdcp, 1, resp);
 8006c34:	aa01      	add	r2, sp, #4
 8006c36:	2101      	movs	r1, #1
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f7ff ff39 	bl	8006ab0 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8006c3e:	2301      	movs	r3, #1
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	b003      	add	sp, #12
 8006c44:	bd30      	pop	{r4, r5, pc}
  if (sdc_lld_wait_transaction_end(sdcp, 1, resp))
 8006c46:	aa01      	add	r2, sp, #4
 8006c48:	2101      	movs	r1, #1
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f7ff fec0 	bl	80069d0 <sdc_lld_wait_transaction_end>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d1ee      	bne.n	8006c34 <sdc_lld_read_special+0x24>
 8006c56:	e7f3      	b.n	8006c40 <sdc_lld_read_special+0x30>
 8006c58:	fdffe008 	.word	0xfdffe008
 8006c5c:	f3af 8000 	nop.w

08006c60 <sdc_lld_read_aligned>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
                          uint8_t *buf, uint32_t blocks) {
 8006c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c62:	b083      	sub	sp, #12
 8006c64:	4604      	mov	r4, r0
 8006c66:	460e      	mov	r6, r1
 8006c68:	4617      	mov	r7, r2
 8006c6a:	461d      	mov	r5, r3
  uint32_t resp[1];

  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8006c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c70:	d20a      	bcs.n	8006c88 <sdc_lld_read_aligned+0x28>

  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 8006c72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006c74:	4a20      	ldr	r2, [pc, #128]	; (8006cf8 <sdc_lld_read_aligned+0x98>)
 8006c76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Checks for errors and waits for the card to be ready for reading.*/
  if (_sdc_wait_for_transfer_state(sdcp))
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f7fc f821 	bl	8002cc0 <_sdc_wait_for_transfer_state>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	b130      	cbz	r0, 8006c90 <sdc_lld_read_aligned+0x30>
  return HAL_SUCCESS;

error:
  sdc_lld_error_cleanup(sdcp, blocks, resp);
  return HAL_FAILED;
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	b003      	add	sp, #12
 8006c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8006c88:	481c      	ldr	r0, [pc, #112]	; (8006cfc <sdc_lld_read_aligned+0x9c>)
 8006c8a:	f000 fcf1 	bl	8007670 <chSysHalt>
 8006c8e:	e7f0      	b.n	8006c72 <sdc_lld_read_aligned+0x12>
  dmaStreamSetMemory0(sdcp->dma, buf);
 8006c90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma,
 8006c96:	026a      	lsls	r2, r5, #9
 8006c98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	0891      	lsrs	r1, r2, #2
 8006c9e:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 8006ca0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006ca6:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 8006ca8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006caa:	6819      	ldr	r1, [r3, #0]
 8006cac:	680b      	ldr	r3, [r1, #0]
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	600b      	str	r3, [r1, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8006cb4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006cb6:	4912      	ldr	r1, [pc, #72]	; (8006d00 <sdc_lld_read_aligned+0xa0>)
 8006cb8:	6399      	str	r1, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8006cba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006cbc:	f240 312a 	movw	r1, #810	; 0x32a
 8006cc0:	63d9      	str	r1, [r3, #60]	; 0x3c
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8006cc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006cc4:	629a      	str	r2, [r3, #40]	; 0x28
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 8006cc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006cc8:	229b      	movs	r2, #155	; 0x9b
 8006cca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (sdc_lld_prepare_read(sdcp, startblk, blocks, resp) == true)
 8006ccc:	ab01      	add	r3, sp, #4
 8006cce:	462a      	mov	r2, r5
 8006cd0:	4631      	mov	r1, r6
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f7ff ff24 	bl	8006b20 <sdc_lld_prepare_read>
 8006cd8:	b938      	cbnz	r0, 8006cea <sdc_lld_read_aligned+0x8a>
  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 8006cda:	aa01      	add	r2, sp, #4
 8006cdc:	4629      	mov	r1, r5
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7ff fe76 	bl	80069d0 <sdc_lld_wait_transaction_end>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d0cb      	beq.n	8006c82 <sdc_lld_read_aligned+0x22>
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8006cea:	aa01      	add	r2, sp, #4
 8006cec:	4629      	mov	r1, r5
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f7ff fede 	bl	8006ab0 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e7c4      	b.n	8006c82 <sdc_lld_read_aligned+0x22>
 8006cf8:	016e3600 	.word	0x016e3600
 8006cfc:	08014f68 	.word	0x08014f68
 8006d00:	00c007ff 	.word	0x00c007ff
 8006d04:	f3af 8000 	nop.w
 8006d08:	f3af 8000 	nop.w
 8006d0c:	f3af 8000 	nop.w

08006d10 <sdc_lld_write_aligned>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
                           const uint8_t *buf, uint32_t blocks) {
 8006d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d12:	b083      	sub	sp, #12
 8006d14:	4604      	mov	r4, r0
 8006d16:	460e      	mov	r6, r1
 8006d18:	4617      	mov	r7, r2
 8006d1a:	461d      	mov	r5, r3
  uint32_t resp[1];

  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8006d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d20:	d20a      	bcs.n	8006d38 <sdc_lld_write_aligned+0x28>

  sdcp->sdio->DTIMER = STM32_SDC_WRITE_TIMEOUT;
 8006d22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d24:	4a21      	ldr	r2, [pc, #132]	; (8006dac <sdc_lld_write_aligned+0x9c>)
 8006d26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Checks for errors and waits for the card to be ready for writing.*/
  if (_sdc_wait_for_transfer_state(sdcp))
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f7fb ffc9 	bl	8002cc0 <_sdc_wait_for_transfer_state>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	b130      	cbz	r0, 8006d40 <sdc_lld_write_aligned+0x30>
  return HAL_SUCCESS;

error:
  sdc_lld_error_cleanup(sdcp, blocks, resp);
  return HAL_FAILED;
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	b003      	add	sp, #12
 8006d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8006d38:	481d      	ldr	r0, [pc, #116]	; (8006db0 <sdc_lld_write_aligned+0xa0>)
 8006d3a:	f000 fc99 	bl	8007670 <chSysHalt>
 8006d3e:	e7f0      	b.n	8006d22 <sdc_lld_write_aligned+0x12>
  dmaStreamSetMemory0(sdcp->dma, buf);
 8006d40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma,
 8006d46:	026a      	lsls	r2, r5, #9
 8006d48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	0891      	lsrs	r1, r2, #2
 8006d4e:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 8006d50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d52:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006d54:	6809      	ldr	r1, [r1, #0]
 8006d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d5a:	600b      	str	r3, [r1, #0]
  dmaStreamEnable(sdcp->dma);
 8006d5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d5e:	6819      	ldr	r1, [r3, #0]
 8006d60:	680b      	ldr	r3, [r1, #0]
 8006d62:	f043 0301 	orr.w	r3, r3, #1
 8006d66:	600b      	str	r3, [r1, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8006d68:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d6a:	4912      	ldr	r1, [pc, #72]	; (8006db4 <sdc_lld_write_aligned+0xa4>)
 8006d6c:	6399      	str	r1, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8006d6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d70:	f240 311a 	movw	r1, #794	; 0x31a
 8006d74:	63d9      	str	r1, [r3, #60]	; 0x3c
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8006d76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d78:	629a      	str	r2, [r3, #40]	; 0x28
  if (sdc_lld_prepare_write(sdcp, startblk, blocks, resp) == true)
 8006d7a:	ab01      	add	r3, sp, #4
 8006d7c:	462a      	mov	r2, r5
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4620      	mov	r0, r4
 8006d82:	f7ff fef5 	bl	8006b70 <sdc_lld_prepare_write>
 8006d86:	b950      	cbnz	r0, 8006d9e <sdc_lld_write_aligned+0x8e>
  sdcp->sdio->DCTRL = SDIO_DCTRL_DBLOCKSIZE_3 |
 8006d88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d8a:	2299      	movs	r2, #153	; 0x99
 8006d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 8006d8e:	aa01      	add	r2, sp, #4
 8006d90:	4629      	mov	r1, r5
 8006d92:	4620      	mov	r0, r4
 8006d94:	f7ff fe1c 	bl	80069d0 <sdc_lld_wait_transaction_end>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d0c9      	beq.n	8006d32 <sdc_lld_write_aligned+0x22>
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8006d9e:	aa01      	add	r2, sp, #4
 8006da0:	4629      	mov	r1, r5
 8006da2:	4620      	mov	r0, r4
 8006da4:	f7ff fe84 	bl	8006ab0 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e7c2      	b.n	8006d32 <sdc_lld_write_aligned+0x22>
 8006dac:	016e3600 	.word	0x016e3600
 8006db0:	08014f80 	.word	0x08014f80
 8006db4:	00c007ff 	.word	0x00c007ff
 8006db8:	f3af 8000 	nop.w
 8006dbc:	f3af 8000 	nop.w

08006dc0 <sdc_lld_read>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read(SDCDriver *sdcp, uint32_t startblk,
                  uint8_t *buf, uint32_t blocks) {
 8006dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc4:	4680      	mov	r8, r0
 8006dc6:	460d      	mov	r5, r1
 8006dc8:	4614      	mov	r4, r2
 8006dca:	461f      	mov	r7, r3

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
 8006dcc:	f012 0f03 	tst.w	r2, #3
 8006dd0:	d019      	beq.n	8006e06 <sdc_lld_read+0x46>
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 8006dd2:	2600      	movs	r6, #0
 8006dd4:	42be      	cmp	r6, r7
 8006dd6:	d212      	bcs.n	8006dfe <sdc_lld_read+0x3e>
      if (sdc_lld_read_aligned(sdcp, startblk, u.buf, 1))
 8006dd8:	2301      	movs	r3, #1
 8006dda:	4a0d      	ldr	r2, [pc, #52]	; (8006e10 <sdc_lld_read+0x50>)
 8006ddc:	4629      	mov	r1, r5
 8006dde:	4640      	mov	r0, r8
 8006de0:	f7ff ff3e 	bl	8006c60 <sdc_lld_read_aligned>
 8006de4:	4603      	mov	r3, r0
 8006de6:	b958      	cbnz	r0, 8006e00 <sdc_lld_read+0x40>
        return HAL_FAILED;
      memcpy(buf, u.buf, MMCSD_BLOCK_SIZE);
 8006de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dec:	4908      	ldr	r1, [pc, #32]	; (8006e10 <sdc_lld_read+0x50>)
 8006dee:	4620      	mov	r0, r4
 8006df0:	f00c fcfe 	bl	80137f0 <memcpy>
      buf += MMCSD_BLOCK_SIZE;
 8006df4:	f504 7400 	add.w	r4, r4, #512	; 0x200
      startblk++;
 8006df8:	3501      	adds	r5, #1
    for (i = 0; i < blocks; i++) {
 8006dfa:	3601      	adds	r6, #1
 8006dfc:	e7ea      	b.n	8006dd4 <sdc_lld_read+0x14>
    }
    return HAL_SUCCESS;
 8006dfe:	2300      	movs	r3, #0
  }
#else /* !STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  osalDbgAssert((((unsigned)buf & 3) == 0), "unaligned buffer");
#endif /* !STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  return sdc_lld_read_aligned(sdcp, startblk, buf, blocks);
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return sdc_lld_read_aligned(sdcp, startblk, buf, blocks);
 8006e06:	f7ff ff2b 	bl	8006c60 <sdc_lld_read_aligned>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	e7f8      	b.n	8006e00 <sdc_lld_read+0x40>
 8006e0e:	bf00      	nop
 8006e10:	200020a4 	.word	0x200020a4
 8006e14:	f3af 8000 	nop.w
 8006e18:	f3af 8000 	nop.w
 8006e1c:	f3af 8000 	nop.w

08006e20 <sdc_lld_write>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_write(SDCDriver *sdcp, uint32_t startblk,
                   const uint8_t *buf, uint32_t blocks) {
 8006e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e24:	4681      	mov	r9, r0
 8006e26:	460d      	mov	r5, r1
 8006e28:	4614      	mov	r4, r2
 8006e2a:	4698      	mov	r8, r3

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
 8006e2c:	f012 0f03 	tst.w	r2, #3
 8006e30:	d01a      	beq.n	8006e68 <sdc_lld_write+0x48>
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 8006e32:	2600      	movs	r6, #0
 8006e34:	4546      	cmp	r6, r8
 8006e36:	d213      	bcs.n	8006e60 <sdc_lld_write+0x40>
      memcpy(u.buf, buf, MMCSD_BLOCK_SIZE);
 8006e38:	4f0d      	ldr	r7, [pc, #52]	; (8006e70 <sdc_lld_write+0x50>)
 8006e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4638      	mov	r0, r7
 8006e42:	f00c fcd5 	bl	80137f0 <memcpy>
      buf += MMCSD_BLOCK_SIZE;
 8006e46:	f504 7400 	add.w	r4, r4, #512	; 0x200
      if (sdc_lld_write_aligned(sdcp, startblk, u.buf, 1))
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	463a      	mov	r2, r7
 8006e4e:	4629      	mov	r1, r5
 8006e50:	4648      	mov	r0, r9
 8006e52:	f7ff ff5d 	bl	8006d10 <sdc_lld_write_aligned>
 8006e56:	4603      	mov	r3, r0
 8006e58:	b918      	cbnz	r0, 8006e62 <sdc_lld_write+0x42>
        return HAL_FAILED;
      startblk++;
 8006e5a:	3501      	adds	r5, #1
    for (i = 0; i < blocks; i++) {
 8006e5c:	3601      	adds	r6, #1
 8006e5e:	e7e9      	b.n	8006e34 <sdc_lld_write+0x14>
    }
    return HAL_SUCCESS;
 8006e60:	2300      	movs	r3, #0
  }
#else /* !STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  osalDbgAssert((((unsigned)buf & 3) == 0), "unaligned buffer");
#endif /* !STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  return sdc_lld_write_aligned(sdcp, startblk, buf, blocks);
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return sdc_lld_write_aligned(sdcp, startblk, buf, blocks);
 8006e68:	f7ff ff52 	bl	8006d10 <sdc_lld_write_aligned>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	e7f8      	b.n	8006e62 <sdc_lld_write+0x42>
 8006e70:	200020a4 	.word	0x200020a4
 8006e74:	f3af 8000 	nop.w
 8006e78:	f3af 8000 	nop.w
 8006e7c:	f3af 8000 	nop.w

08006e80 <sdc_lld_sync>:
bool sdc_lld_sync(SDCDriver *sdcp) {

  /* TODO: Implement.*/
  (void)sdcp;
  return HAL_SUCCESS;
}
 8006e80:	2000      	movs	r0, #0
 8006e82:	4770      	bx	lr
	...

08006e90 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8006e90:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8006e92:	f002 f855 	bl	8008f40 <_stats_increase_irq>
 8006e96:	4813      	ldr	r0, [pc, #76]	; (8006ee4 <VectorB0+0x54>)
 8006e98:	f000 feaa 	bl	8007bf0 <_trace_isr_enter>
 8006e9c:	f000 fdd8 	bl	8007a50 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8006ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f013 0f02 	tst.w	r3, #2
 8006eaa:	d107      	bne.n	8006ebc <VectorB0+0x2c>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8006eac:	f000 fdf0 	bl	8007a90 <_dbg_check_leave_isr>
 8006eb0:	480c      	ldr	r0, [pc, #48]	; (8006ee4 <VectorB0+0x54>)
 8006eb2:	f000 fec5 	bl	8007c40 <_trace_isr_leave>
 8006eb6:	f004 fe4b 	bl	800bb50 <_port_irq_epilogue>
}
 8006eba:	bd10      	pop	{r4, pc}
    STM32_ST_TIM->SR = 0U;
 8006ebc:	2400      	movs	r4, #0
 8006ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ec2:	611c      	str	r4, [r3, #16]
 8006ec4:	2320      	movs	r3, #32
 8006ec6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8006eca:	f002 f871 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8006ece:	f000 fd8f 	bl	80079f0 <_dbg_check_lock_from_isr>
  chSysTimerHandlerI();
 8006ed2:	f000 fc2d 	bl	8007730 <chSysTimerHandlerI>
  _dbg_check_unlock_from_isr();
 8006ed6:	f000 fda3 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8006eda:	f002 f871 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 8006ede:	f384 8811 	msr	BASEPRI, r4
 8006ee2:	e7e3      	b.n	8006eac <VectorB0+0x1c>
 8006ee4:	08014f98 	.word	0x08014f98
 8006ee8:	f3af 8000 	nop.w
 8006eec:	f3af 8000 	nop.w

08006ef0 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8006ef0:	b508      	push	{r3, lr}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8006ef2:	4b12      	ldr	r3, [pc, #72]	; (8006f3c <st_lld_init+0x4c>)
 8006ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	641a      	str	r2, [r3, #64]	; 0x40
 8006efc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006efe:	f042 0201 	orr.w	r2, r2, #1
 8006f02:	661a      	str	r2, [r3, #96]	; 0x60
 8006f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8006f06:	4a0e      	ldr	r2, [pc, #56]	; (8006f40 <st_lld_init+0x50>)
 8006f08:	6893      	ldr	r3, [r2, #8]
 8006f0a:	f043 0301 	orr.w	r3, r3, #1
 8006f0e:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8006f10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f14:	f240 3247 	movw	r2, #839	; 0x347
 8006f18:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8006f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8006f20:	2200      	movs	r2, #0
 8006f22:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8006f24:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8006f26:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8006f28:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8006f2e:	601a      	str	r2, [r3, #0]

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8006f30:	2108      	movs	r1, #8
 8006f32:	201c      	movs	r0, #28
 8006f34:	f7fd f89c 	bl	8004070 <nvicEnableVector>
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8006f38:	bd08      	pop	{r3, pc}
 8006f3a:	bf00      	nop
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	e0042000 	.word	0xe0042000
	...

08006f50 <gpt_lld_init>:
/**
 * @brief   Low level GPT driver initialization.
 *
 * @notapi
 */
void gpt_lld_init(void) {
 8006f50:	b508      	push	{r3, lr}
  gptObjectInit(&GPTD4);
#endif

#if STM32_GPT_USE_TIM5
  /* Driver initialization.*/
  GPTD5.tim = STM32_TIM5;
 8006f52:	4803      	ldr	r0, [pc, #12]	; (8006f60 <gpt_lld_init+0x10>)
 8006f54:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <gpt_lld_init+0x14>)
 8006f56:	60c3      	str	r3, [r0, #12]
  gptObjectInit(&GPTD5);
 8006f58:	f7fa fe22 	bl	8001ba0 <gptObjectInit>
#if STM32_GPT_USE_TIM22
  /* Driver initialization.*/
  GPTD22.tim = STM32_TIM22;
  gptObjectInit(&GPTD22);
#endif
}
 8006f5c:	bd08      	pop	{r3, pc}
 8006f5e:	bf00      	nop
 8006f60:	20004748 	.word	0x20004748
 8006f64:	40000c00 	.word	0x40000c00
 8006f68:	f3af 8000 	nop.w
 8006f6c:	f3af 8000 	nop.w

08006f70 <gpt_lld_start>:
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4604      	mov	r4, r0
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 8006f74:	7803      	ldrb	r3, [r0, #0]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d020      	beq.n	8006fbc <gpt_lld_start+0x4c>
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8006f7a:	68a2      	ldr	r2, [r4, #8]
 8006f7c:	6863      	ldr	r3, [r4, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	fbb2 f5f3 	udiv	r5, r2, r3
 8006f84:	b2ad      	uxth	r5, r5
 8006f86:	3d01      	subs	r5, #1
 8006f88:	b2ad      	uxth	r5, r5
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
 8006f8a:	fb05 3303 	mla	r3, r5, r3, r3
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d002      	beq.n	8006f98 <gpt_lld_start+0x28>
 8006f92:	4819      	ldr	r0, [pc, #100]	; (8006ff8 <gpt_lld_start+0x88>)
 8006f94:	f000 fb6c 	bl	8007670 <chSysHalt>
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8006f98:	68e2      	ldr	r2, [r4, #12]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	6013      	str	r3, [r2, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 8006f9e:	6861      	ldr	r1, [r4, #4]
 8006fa0:	68e2      	ldr	r2, [r4, #12]
 8006fa2:	6889      	ldr	r1, [r1, #8]
 8006fa4:	6051      	str	r1, [r2, #4]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 8006fa6:	68e2      	ldr	r2, [r4, #12]
 8006fa8:	6295      	str	r5, [r2, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 8006faa:	68e2      	ldr	r2, [r4, #12]
 8006fac:	6113      	str	r3, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8006fae:	6863      	ldr	r3, [r4, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	68e2      	ldr	r2, [r4, #12]
 8006fb4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006fb8:	60d3      	str	r3, [r2, #12]
                    ~STM32_TIM_DIER_IRQ_MASK;
}
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
    if (&GPTD5 == gptp) {
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	; (8006ffc <gpt_lld_start+0x8c>)
 8006fbe:	4298      	cmp	r0, r3
 8006fc0:	d1db      	bne.n	8006f7a <gpt_lld_start+0xa>
      rccEnableTIM5(true);
 8006fc2:	4b0f      	ldr	r3, [pc, #60]	; (8007000 <gpt_lld_start+0x90>)
 8006fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fc6:	f042 0208 	orr.w	r2, r2, #8
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40
 8006fcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006fce:	f042 0208 	orr.w	r2, r2, #8
 8006fd2:	661a      	str	r2, [r3, #96]	; 0x60
 8006fd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
      rccResetTIM5();
 8006fd6:	6a1a      	ldr	r2, [r3, #32]
 8006fd8:	f042 0208 	orr.w	r2, r2, #8
 8006fdc:	621a      	str	r2, [r3, #32]
 8006fde:	6a1a      	ldr	r2, [r3, #32]
 8006fe0:	f022 0208 	bic.w	r2, r2, #8
 8006fe4:	621a      	str	r2, [r3, #32]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
      nvicEnableVector(STM32_TIM5_NUMBER, STM32_GPT_TIM5_IRQ_PRIORITY);
 8006fe8:	2102      	movs	r1, #2
 8006fea:	2032      	movs	r0, #50	; 0x32
 8006fec:	f7fd f840 	bl	8004070 <nvicEnableVector>
      gptp->clock = STM32_TIMCLK1;
 8006ff0:	4b04      	ldr	r3, [pc, #16]	; (8007004 <gpt_lld_start+0x94>)
 8006ff2:	60a3      	str	r3, [r4, #8]
 8006ff4:	e7c1      	b.n	8006f7a <gpt_lld_start+0xa>
 8006ff6:	bf00      	nop
 8006ff8:	08014fa4 	.word	0x08014fa4
 8006ffc:	20004748 	.word	0x20004748
 8007000:	40023800 	.word	0x40023800
 8007004:	0501bd00 	.word	0x0501bd00
 8007008:	f3af 8000 	nop.w
 800700c:	f3af 8000 	nop.w

08007010 <gpt_lld_stop>:
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @notapi
 */
void gpt_lld_stop(GPTDriver *gptp) {
 8007010:	b508      	push	{r3, lr}

  if (gptp->state == GPT_READY) {
 8007012:	7803      	ldrb	r3, [r0, #0]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d000      	beq.n	800701a <gpt_lld_stop+0xa>
#endif
      rccDisableTIM22();
    }
#endif
  }
}
 8007018:	bd08      	pop	{r3, pc}
    gptp->tim->CR1  = 0;                        /* Timer disabled.          */
 800701a:	68c2      	ldr	r2, [r0, #12]
 800701c:	2300      	movs	r3, #0
 800701e:	6013      	str	r3, [r2, #0]
    gptp->tim->DIER = 0;                        /* All IRQs disabled.       */
 8007020:	68c2      	ldr	r2, [r0, #12]
 8007022:	60d3      	str	r3, [r2, #12]
    gptp->tim->SR   = 0;                        /* Clear pending IRQs.      */
 8007024:	68c2      	ldr	r2, [r0, #12]
 8007026:	6113      	str	r3, [r2, #16]
    if (&GPTD5 == gptp) {
 8007028:	4b08      	ldr	r3, [pc, #32]	; (800704c <gpt_lld_stop+0x3c>)
 800702a:	4298      	cmp	r0, r3
 800702c:	d1f4      	bne.n	8007018 <gpt_lld_stop+0x8>
      nvicDisableVector(STM32_TIM5_NUMBER);
 800702e:	2032      	movs	r0, #50	; 0x32
 8007030:	f7fd f836 	bl	80040a0 <nvicDisableVector>
      rccDisableTIM5();
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <gpt_lld_stop+0x40>)
 8007036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007038:	f022 0208 	bic.w	r2, r2, #8
 800703c:	641a      	str	r2, [r3, #64]	; 0x40
 800703e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007040:	f022 0208 	bic.w	r2, r2, #8
 8007044:	661a      	str	r2, [r3, #96]	; 0x60
 8007046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8007048:	e7e6      	b.n	8007018 <gpt_lld_stop+0x8>
 800704a:	bf00      	nop
 800704c:	20004748 	.word	0x20004748
 8007050:	40023800 	.word	0x40023800
 8007054:	f3af 8000 	nop.w
 8007058:	f3af 8000 	nop.w
 800705c:	f3af 8000 	nop.w

08007060 <gpt_lld_start_timer>:
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8007060:	68c3      	ldr	r3, [r0, #12]
 8007062:	3901      	subs	r1, #1
 8007064:	62d9      	str	r1, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
 8007066:	68c3      	ldr	r3, [r0, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	615a      	str	r2, [r3, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
 800706c:	68c2      	ldr	r2, [r0, #12]
 800706e:	2300      	movs	r3, #0
 8007070:	6253      	str	r3, [r2, #36]	; 0x24

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is why the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8007072:	68c2      	ldr	r2, [r0, #12]
 8007074:	6113      	str	r3, [r2, #16]
  if (NULL != gptp->config->callback)
 8007076:	6843      	ldr	r3, [r0, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	b123      	cbz	r3, 8007086 <gpt_lld_start_timer+0x26>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
 800707c:	68c2      	ldr	r2, [r0, #12]
 800707e:	68d3      	ldr	r3, [r2, #12]
 8007080:	f043 0301 	orr.w	r3, r3, #1
 8007084:	60d3      	str	r3, [r2, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8007086:	68c3      	ldr	r3, [r0, #12]
 8007088:	2285      	movs	r2, #133	; 0x85
 800708a:	601a      	str	r2, [r3, #0]
}
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop

08007090 <gpt_lld_stop_timer>:
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 8007090:	68c2      	ldr	r2, [r0, #12]
 8007092:	2300      	movs	r3, #0
 8007094:	6013      	str	r3, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8007096:	68c2      	ldr	r2, [r0, #12]
 8007098:	6113      	str	r3, [r2, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 800709a:	68c2      	ldr	r2, [r0, #12]
 800709c:	68d3      	ldr	r3, [r2, #12]
 800709e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80070a2:	60d3      	str	r3, [r2, #12]
}
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	f3af 8000 	nop.w
 80070ac:	f3af 8000 	nop.w

080070b0 <gpt_lld_polled_delay>:
 *
 * @notapi
 */
void gpt_lld_polled_delay(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 80070b0:	68c3      	ldr	r3, [r0, #12]
 80070b2:	3901      	subs	r1, #1
 80070b4:	62d9      	str	r1, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
 80070b6:	68c3      	ldr	r3, [r0, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	615a      	str	r2, [r3, #20]
  gptp->tim->SR  = 0;                           /* Clear pending IRQs.      */
 80070bc:	68c3      	ldr	r3, [r0, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	611a      	str	r2, [r3, #16]
  gptp->tim->CR1 = STM32_TIM_CR1_OPM | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80070c2:	68c3      	ldr	r3, [r0, #12]
 80070c4:	220d      	movs	r2, #13
 80070c6:	601a      	str	r2, [r3, #0]
  while (!(gptp->tim->SR & STM32_TIM_SR_UIF))
 80070c8:	68c3      	ldr	r3, [r0, #12]
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	f012 0f01 	tst.w	r2, #1
 80070d0:	d0fa      	beq.n	80070c8 <gpt_lld_polled_delay+0x18>
    ;
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 80070d2:	2200      	movs	r2, #0
 80070d4:	611a      	str	r2, [r3, #16]
}
 80070d6:	4770      	bx	lr
 80070d8:	f3af 8000 	nop.w
 80070dc:	f3af 8000 	nop.w

080070e0 <gpt_lld_serve_interrupt>:
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
  uint32_t sr;

  sr  = gptp->tim->SR;
 80070e0:	68c2      	ldr	r2, [r0, #12]
 80070e2:	6913      	ldr	r3, [r2, #16]
  sr &= gptp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80070e4:	68d1      	ldr	r1, [r2, #12]
 80070e6:	b2c9      	uxtb	r1, r1
 80070e8:	400b      	ands	r3, r1
  gptp->tim->SR = ~sr;
 80070ea:	43d9      	mvns	r1, r3
 80070ec:	6111      	str	r1, [r2, #16]
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 80070ee:	f013 0f01 	tst.w	r3, #1
 80070f2:	d00f      	beq.n	8007114 <gpt_lld_serve_interrupt+0x34>
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
 80070f4:	b510      	push	{r4, lr}
 80070f6:	4604      	mov	r4, r0
    _gpt_isr_invoke_cb(gptp);
 80070f8:	7803      	ldrb	r3, [r0, #0]
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d005      	beq.n	800710a <gpt_lld_serve_interrupt+0x2a>
 80070fe:	6863      	ldr	r3, [r4, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	b10b      	cbz	r3, 8007108 <gpt_lld_serve_interrupt+0x28>
 8007104:	4620      	mov	r0, r4
 8007106:	4798      	blx	r3
  }
}
 8007108:	bd10      	pop	{r4, pc}
    _gpt_isr_invoke_cb(gptp);
 800710a:	2302      	movs	r3, #2
 800710c:	7003      	strb	r3, [r0, #0]
 800710e:	f7ff ffbf 	bl	8007090 <gpt_lld_stop_timer>
 8007112:	e7f4      	b.n	80070fe <gpt_lld_serve_interrupt+0x1e>
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	f3af 8000 	nop.w
 800711c:	f3af 8000 	nop.w

08007120 <Vector108>:
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 8007120:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8007122:	f001 ff0d 	bl	8008f40 <_stats_increase_irq>
 8007126:	4c08      	ldr	r4, [pc, #32]	; (8007148 <Vector108+0x28>)
 8007128:	4620      	mov	r0, r4
 800712a:	f000 fd61 	bl	8007bf0 <_trace_isr_enter>
 800712e:	f000 fc8f 	bl	8007a50 <_dbg_check_enter_isr>
  gpt_lld_serve_interrupt(&GPTD5);
 8007132:	4806      	ldr	r0, [pc, #24]	; (800714c <Vector108+0x2c>)
 8007134:	f7ff ffd4 	bl	80070e0 <gpt_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 8007138:	f000 fcaa 	bl	8007a90 <_dbg_check_leave_isr>
 800713c:	4620      	mov	r0, r4
 800713e:	f000 fd7f 	bl	8007c40 <_trace_isr_leave>
 8007142:	f004 fd05 	bl	800bb50 <_port_irq_epilogue>
}
 8007146:	bd10      	pop	{r4, pc}
 8007148:	08014fb4 	.word	0x08014fb4
 800714c:	20004748 	.word	0x20004748

08007150 <usart_init>:
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 8007150:	b410      	push	{r4}
  uint32_t fck;
  USART_TypeDef *u = sdp->usart;
 8007152:	f8d0 3254 	ldr.w	r3, [r0, #596]	; 0x254

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8007156:	4a1e      	ldr	r2, [pc, #120]	; (80071d0 <usart_init+0x80>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d008      	beq.n	800716e <usart_init+0x1e>
 800715c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007160:	4293      	cmp	r3, r2
 8007162:	d004      	beq.n	800716e <usart_init+0x1e>
#else
  if (sdp->usart == USART1)
#endif
    fck = STM32_PCLK2 / config->speed;
  else
    fck = STM32_PCLK1 / config->speed;
 8007164:	680c      	ldr	r4, [r1, #0]
 8007166:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <usart_init+0x84>)
 8007168:	fbb2 f2f4 	udiv	r2, r2, r4
 800716c:	e003      	b.n	8007176 <usart_init+0x26>
    fck = STM32_PCLK2 / config->speed;
 800716e:	680c      	ldr	r4, [r1, #0]
 8007170:	4a19      	ldr	r2, [pc, #100]	; (80071d8 <usart_init+0x88>)
 8007172:	fbb2 f2f4 	udiv	r2, r2, r4

  /* Correcting USARTDIV when oversampling by 8 instead of 16.
     Fraction is still 4 bits wide, but only lower 3 bits used.
     Mantissa is doubled, but Fraction is left the same.*/
#if defined(USART_CR1_OVER8)
  if (config->cr1 & USART_CR1_OVER8)
 8007176:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800717a:	2c00      	cmp	r4, #0
 800717c:	db1d      	blt.n	80071ba <usart_init+0x6a>
    fck = ((fck & ~7) * 2) | (fck & 7);
#endif
  u->BRR = fck;
 800717e:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8007180:	88ca      	ldrh	r2, [r1, #6]
 8007182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007186:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8007188:	890a      	ldrh	r2, [r1, #8]
 800718a:	f042 0201 	orr.w	r2, r2, #1
 800718e:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8007190:	888a      	ldrh	r2, [r1, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8007192:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
 8007196:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800719a:	60da      	str	r2, [r3, #12]
                         USART_CR1_RE;
  u->SR = 0;
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80071a0:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80071a2:	685b      	ldr	r3, [r3, #4]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 80071a4:	888b      	ldrh	r3, [r1, #4]
 80071a6:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 80071aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ae:	d00b      	beq.n	80071c8 <usart_init+0x78>
    sdp->rxmask = 0x7F;
  }
  else {
    sdp->rxmask = 0xFF;
 80071b0:	23ff      	movs	r3, #255	; 0xff
 80071b2:	f880 3258 	strb.w	r3, [r0, #600]	; 0x258
  }
}
 80071b6:	bc10      	pop	{r4}
 80071b8:	4770      	bx	lr
    fck = ((fck & ~7) * 2) | (fck & 7);
 80071ba:	f022 0407 	bic.w	r4, r2, #7
 80071be:	f002 0207 	and.w	r2, r2, #7
 80071c2:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 80071c6:	e7da      	b.n	800717e <usart_init+0x2e>
    sdp->rxmask = 0x7F;
 80071c8:	237f      	movs	r3, #127	; 0x7f
 80071ca:	f880 3258 	strb.w	r3, [r0, #600]	; 0x258
 80071ce:	e7f2      	b.n	80071b6 <usart_init+0x66>
 80071d0:	40011000 	.word	0x40011000
 80071d4:	0280de80 	.word	0x0280de80
 80071d8:	0501bd00 	.word	0x0501bd00
 80071dc:	f3af 8000 	nop.w

080071e0 <usart_deinit>:
 *
 * @param[in] u         pointer to an USART I/O block
 */
static void usart_deinit(USART_TypeDef *u) {

  u->CR1 = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60c3      	str	r3, [r0, #12]
  u->CR2 = 0;
 80071e4:	6103      	str	r3, [r0, #16]
  u->CR3 = 0;
 80071e6:	6143      	str	r3, [r0, #20]
}
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	f3af 8000 	nop.w

080071f0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80071f0:	4a02      	ldr	r2, [pc, #8]	; (80071fc <notify2+0xc>)
 80071f2:	68d3      	ldr	r3, [r2, #12]
 80071f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071f8:	60d3      	str	r3, [r2, #12]
}
 80071fa:	4770      	bx	lr
 80071fc:	40004400 	.word	0x40004400

08007200 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8007200:	4a02      	ldr	r2, [pc, #8]	; (800720c <notify3+0xc>)
 8007202:	68d3      	ldr	r3, [r2, #12]
 8007204:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007208:	60d3      	str	r3, [r2, #12]
}
 800720a:	4770      	bx	lr
 800720c:	40004800 	.word	0x40004800

08007210 <notify6>:

#if STM32_SERIAL_USE_USART6 || defined(__DOXYGEN__)
static void notify6(io_queue_t *qp) {

  (void)qp;
  USART6->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8007210:	4a02      	ldr	r2, [pc, #8]	; (800721c <notify6+0xc>)
 8007212:	68d3      	ldr	r3, [r2, #12]
 8007214:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007218:	60d3      	str	r3, [r2, #12]
}
 800721a:	4770      	bx	lr
 800721c:	40011400 	.word	0x40011400

08007220 <set_error>:
static void set_error(SerialDriver *sdp, uint16_t sr) {
 8007220:	b508      	push	{r3, lr}
  if (sr & USART_SR_ORE)
 8007222:	f011 0f08 	tst.w	r1, #8
 8007226:	d114      	bne.n	8007252 <set_error+0x32>
  eventflags_t sts = 0;
 8007228:	2300      	movs	r3, #0
  if (sr & USART_SR_PE)
 800722a:	f011 0f01 	tst.w	r1, #1
 800722e:	d001      	beq.n	8007234 <set_error+0x14>
    sts |= SD_PARITY_ERROR;
 8007230:	f043 0320 	orr.w	r3, r3, #32
  if (sr & USART_SR_FE)
 8007234:	f011 0f02 	tst.w	r1, #2
 8007238:	d001      	beq.n	800723e <set_error+0x1e>
    sts |= SD_FRAMING_ERROR;
 800723a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  if (sr & USART_SR_NE)
 800723e:	f011 0f04 	tst.w	r1, #4
 8007242:	d001      	beq.n	8007248 <set_error+0x28>
    sts |= SD_NOISE_ERROR;
 8007244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 8007248:	4619      	mov	r1, r3
 800724a:	3004      	adds	r0, #4
 800724c:	f002 fe30 	bl	8009eb0 <chEvtBroadcastFlagsI>
}
 8007250:	bd08      	pop	{r3, pc}
    sts |= SD_OVERRUN_ERROR;
 8007252:	2380      	movs	r3, #128	; 0x80
 8007254:	e7e9      	b.n	800722a <set_error+0xa>
 8007256:	bf00      	nop
 8007258:	f3af 8000 	nop.w
 800725c:	f3af 8000 	nop.w

08007260 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	4606      	mov	r6, r0
  USART_TypeDef *u = sdp->usart;
 8007264:	f8d0 5254 	ldr.w	r5, [r0, #596]	; 0x254
  uint16_t cr1 = u->CR1;
 8007268:	68ef      	ldr	r7, [r5, #12]
  uint16_t sr = u->SR;
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 800726e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007272:	d107      	bne.n	8007284 <serve_interrupt+0x24>
 8007274:	2320      	movs	r3, #32
 8007276:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800727a:	f001 fe99 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800727e:	f000 fbb7 	bl	80079f0 <_dbg_check_lock_from_isr>
 8007282:	e01d      	b.n	80072c0 <serve_interrupt+0x60>
 8007284:	2320      	movs	r3, #32
 8007286:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800728a:	f001 fe91 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800728e:	f000 fbaf 	bl	80079f0 <_dbg_check_lock_from_isr>
 8007292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007296:	1d30      	adds	r0, r6, #4
 8007298:	f002 fe0a 	bl	8009eb0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 800729c:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80072a0:	602b      	str	r3, [r5, #0]
  _dbg_check_unlock_from_isr();
 80072a2:	f000 fbbd 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80072a6:	f001 fe8b 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 80072aa:	2300      	movs	r3, #0
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	e7e0      	b.n	8007274 <serve_interrupt+0x14>
      set_error(sdp, sr);
 80072b2:	4621      	mov	r1, r4
 80072b4:	4630      	mov	r0, r6
 80072b6:	f7ff ffb3 	bl	8007220 <set_error>
 80072ba:	e007      	b.n	80072cc <serve_interrupt+0x6c>
    sr = u->SR;
 80072bc:	682c      	ldr	r4, [r5, #0]
 80072be:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80072c0:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80072c4:	d00d      	beq.n	80072e2 <serve_interrupt+0x82>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80072c6:	f014 0f0f 	tst.w	r4, #15
 80072ca:	d1f2      	bne.n	80072b2 <serve_interrupt+0x52>
    b = (uint8_t)u->DR & sdp->rxmask;
 80072cc:	6869      	ldr	r1, [r5, #4]
 80072ce:	f896 3258 	ldrb.w	r3, [r6, #600]	; 0x258
 80072d2:	4019      	ands	r1, r3
    if (sr & USART_SR_RXNE)
 80072d4:	f014 0f20 	tst.w	r4, #32
 80072d8:	d0f0      	beq.n	80072bc <serve_interrupt+0x5c>
      sdIncomingDataI(sdp, b);
 80072da:	4630      	mov	r0, r6
 80072dc:	f7fb ffc0 	bl	8003260 <sdIncomingDataI>
 80072e0:	e7ec      	b.n	80072bc <serve_interrupt+0x5c>
  _dbg_check_unlock_from_isr();
 80072e2:	f000 fb9d 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80072e6:	f001 fe6b 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 80072ea:	2300      	movs	r3, #0
 80072ec:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80072f0:	f017 0f80 	tst.w	r7, #128	; 0x80
 80072f4:	d002      	beq.n	80072fc <serve_interrupt+0x9c>
 80072f6:	f014 0f80 	tst.w	r4, #128	; 0x80
 80072fa:	d106      	bne.n	800730a <serve_interrupt+0xaa>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80072fc:	f017 0f40 	tst.w	r7, #64	; 0x40
 8007300:	d002      	beq.n	8007308 <serve_interrupt+0xa8>
 8007302:	f014 0f40 	tst.w	r4, #64	; 0x40
 8007306:	d11f      	bne.n	8007348 <serve_interrupt+0xe8>
}
 8007308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800730a:	2320      	movs	r3, #32
 800730c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8007310:	f001 fe4e 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8007314:	f000 fb6c 	bl	80079f0 <_dbg_check_lock_from_isr>
    b = oqGetI(&sdp->oqueue);
 8007318:	f106 0030 	add.w	r0, r6, #48	; 0x30
 800731c:	f7fa f830 	bl	8001380 <oqGetI>
    if (b < MSG_OK) {
 8007320:	2800      	cmp	r0, #0
 8007322:	db08      	blt.n	8007336 <serve_interrupt+0xd6>
      u->DR = b;
 8007324:	6068      	str	r0, [r5, #4]
  _dbg_check_unlock_from_isr();
 8007326:	f000 fb7b 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800732a:	f001 fe49 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 800732e:	2300      	movs	r3, #0
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	e7e2      	b.n	80072fc <serve_interrupt+0x9c>
 8007336:	2108      	movs	r1, #8
 8007338:	1d30      	adds	r0, r6, #4
 800733a:	f002 fdb9 	bl	8009eb0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 800733e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8007342:	403b      	ands	r3, r7
 8007344:	60eb      	str	r3, [r5, #12]
 8007346:	e7ee      	b.n	8007326 <serve_interrupt+0xc6>
 8007348:	2320      	movs	r3, #32
 800734a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800734e:	f001 fe2f 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8007352:	f000 fb4d 	bl	80079f0 <_dbg_check_lock_from_isr>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8007356:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8007358:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800735a:	429a      	cmp	r2, r3
 800735c:	d009      	beq.n	8007372 <serve_interrupt+0x112>
 800735e:	2300      	movs	r3, #0
 8007360:	b963      	cbnz	r3, 800737c <serve_interrupt+0x11c>
  _dbg_check_unlock_from_isr();
 8007362:	f000 fb5d 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8007366:	f001 fe2b 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 800736a:	2300      	movs	r3, #0
 800736c:	f383 8811 	msr	BASEPRI, r3
}
 8007370:	e7ca      	b.n	8007308 <serve_interrupt+0xa8>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8007372:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0f3      	beq.n	8007360 <serve_interrupt+0x100>
 8007378:	2301      	movs	r3, #1
 800737a:	e7f1      	b.n	8007360 <serve_interrupt+0x100>
 800737c:	2110      	movs	r1, #16
 800737e:	1d30      	adds	r0, r6, #4
 8007380:	f002 fd96 	bl	8009eb0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8007384:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 8007388:	043f      	lsls	r7, r7, #16
 800738a:	0c3f      	lsrs	r7, r7, #16
 800738c:	60ef      	str	r7, [r5, #12]
 800738e:	e7e8      	b.n	8007362 <serve_interrupt+0x102>

08007390 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8007390:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8007392:	f001 fdd5 	bl	8008f40 <_stats_increase_irq>
 8007396:	4c08      	ldr	r4, [pc, #32]	; (80073b8 <VectorD8+0x28>)
 8007398:	4620      	mov	r0, r4
 800739a:	f000 fc29 	bl	8007bf0 <_trace_isr_enter>
 800739e:	f000 fb57 	bl	8007a50 <_dbg_check_enter_isr>

  serve_interrupt(&SD2);
 80073a2:	4806      	ldr	r0, [pc, #24]	; (80073bc <VectorD8+0x2c>)
 80073a4:	f7ff ff5c 	bl	8007260 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80073a8:	f000 fb72 	bl	8007a90 <_dbg_check_leave_isr>
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 fc47 	bl	8007c40 <_trace_isr_leave>
 80073b2:	f004 fbcd 	bl	800bb50 <_port_irq_epilogue>
}
 80073b6:	bd10      	pop	{r4, pc}
 80073b8:	08014fc0 	.word	0x08014fc0
 80073bc:	20004758 	.word	0x20004758

080073c0 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 80073c0:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 80073c2:	f001 fdbd 	bl	8008f40 <_stats_increase_irq>
 80073c6:	4c08      	ldr	r4, [pc, #32]	; (80073e8 <VectorDC+0x28>)
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 fc11 	bl	8007bf0 <_trace_isr_enter>
 80073ce:	f000 fb3f 	bl	8007a50 <_dbg_check_enter_isr>

  serve_interrupt(&SD3);
 80073d2:	4806      	ldr	r0, [pc, #24]	; (80073ec <VectorDC+0x2c>)
 80073d4:	f7ff ff44 	bl	8007260 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80073d8:	f000 fb5a 	bl	8007a90 <_dbg_check_leave_isr>
 80073dc:	4620      	mov	r0, r4
 80073de:	f000 fc2f 	bl	8007c40 <_trace_isr_leave>
 80073e2:	f004 fbb5 	bl	800bb50 <_port_irq_epilogue>
}
 80073e6:	bd10      	pop	{r4, pc}
 80073e8:	08014fcc 	.word	0x08014fcc
 80073ec:	200049b4 	.word	0x200049b4

080073f0 <Vector15C>:
/**
 * @brief   USART6 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 80073f0:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 80073f2:	f001 fda5 	bl	8008f40 <_stats_increase_irq>
 80073f6:	4c08      	ldr	r4, [pc, #32]	; (8007418 <Vector15C+0x28>)
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 fbf9 	bl	8007bf0 <_trace_isr_enter>
 80073fe:	f000 fb27 	bl	8007a50 <_dbg_check_enter_isr>

  serve_interrupt(&SD6);
 8007402:	4806      	ldr	r0, [pc, #24]	; (800741c <Vector15C+0x2c>)
 8007404:	f7ff ff2c 	bl	8007260 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8007408:	f000 fb42 	bl	8007a90 <_dbg_check_leave_isr>
 800740c:	4620      	mov	r0, r4
 800740e:	f000 fc17 	bl	8007c40 <_trace_isr_leave>
 8007412:	f004 fb9d 	bl	800bb50 <_port_irq_epilogue>
}
 8007416:	bd10      	pop	{r4, pc}
 8007418:	08014fd8 	.word	0x08014fd8
 800741c:	20004c10 	.word	0x20004c10

08007420 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8007420:	b510      	push	{r4, lr}
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8007422:	4c0e      	ldr	r4, [pc, #56]	; (800745c <sd_lld_init+0x3c>)
 8007424:	4a0e      	ldr	r2, [pc, #56]	; (8007460 <sd_lld_init+0x40>)
 8007426:	2100      	movs	r1, #0
 8007428:	4620      	mov	r0, r4
 800742a:	f7fb fe79 	bl	8003120 <sdObjectInit>
  SD2.usart = USART2;
 800742e:	4b0d      	ldr	r3, [pc, #52]	; (8007464 <sd_lld_init+0x44>)
 8007430:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 8007434:	4c0c      	ldr	r4, [pc, #48]	; (8007468 <sd_lld_init+0x48>)
 8007436:	4a0d      	ldr	r2, [pc, #52]	; (800746c <sd_lld_init+0x4c>)
 8007438:	2100      	movs	r1, #0
 800743a:	4620      	mov	r0, r4
 800743c:	f7fb fe70 	bl	8003120 <sdObjectInit>
  SD3.usart = USART3;
 8007440:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <sd_lld_init+0x50>)
 8007442:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
  sdObjectInit(&SD5, NULL, notify5);
  SD5.usart = UART5;
#endif

#if STM32_SERIAL_USE_USART6
  sdObjectInit(&SD6, NULL, notify6);
 8007446:	4c0b      	ldr	r4, [pc, #44]	; (8007474 <sd_lld_init+0x54>)
 8007448:	4a0b      	ldr	r2, [pc, #44]	; (8007478 <sd_lld_init+0x58>)
 800744a:	2100      	movs	r1, #0
 800744c:	4620      	mov	r0, r4
 800744e:	f7fb fe67 	bl	8003120 <sdObjectInit>
  SD6.usart = USART6;
 8007452:	4b0a      	ldr	r3, [pc, #40]	; (800747c <sd_lld_init+0x5c>)
 8007454:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254

#if STM32_SERIAL_USE_UART8
  sdObjectInit(&SD8, NULL, notify8);
  SD8.usart = UART8;
#endif
}
 8007458:	bd10      	pop	{r4, pc}
 800745a:	bf00      	nop
 800745c:	20004758 	.word	0x20004758
 8007460:	080071f1 	.word	0x080071f1
 8007464:	40004400 	.word	0x40004400
 8007468:	200049b4 	.word	0x200049b4
 800746c:	08007201 	.word	0x08007201
 8007470:	40004800 	.word	0x40004800
 8007474:	20004c10 	.word	0x20004c10
 8007478:	08007211 	.word	0x08007211
 800747c:	40011400 	.word	0x40011400

08007480 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4604      	mov	r4, r0

  if (config == NULL)
 8007484:	460d      	mov	r5, r1
 8007486:	b139      	cbz	r1, 8007498 <sd_lld_start+0x18>
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8007488:	7a23      	ldrb	r3, [r4, #8]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d006      	beq.n	800749c <sd_lld_start+0x1c>
      rccEnableUART8(true);
      nvicEnableVector(STM32_UART8_NUMBER, STM32_SERIAL_UART8_PRIORITY);
    }
#endif
  }
  usart_init(sdp, config);
 800748e:	4629      	mov	r1, r5
 8007490:	4620      	mov	r0, r4
 8007492:	f7ff fe5d 	bl	8007150 <usart_init>
}
 8007496:	bd38      	pop	{r3, r4, r5, pc}
    config = &default_config;
 8007498:	4d1b      	ldr	r5, [pc, #108]	; (8007508 <sd_lld_start+0x88>)
 800749a:	e7f5      	b.n	8007488 <sd_lld_start+0x8>
    if (&SD2 == sdp) {
 800749c:	4b1b      	ldr	r3, [pc, #108]	; (800750c <sd_lld_start+0x8c>)
 800749e:	429c      	cmp	r4, r3
 80074a0:	d014      	beq.n	80074cc <sd_lld_start+0x4c>
    if (&SD3 == sdp) {
 80074a2:	4b1b      	ldr	r3, [pc, #108]	; (8007510 <sd_lld_start+0x90>)
 80074a4:	429c      	cmp	r4, r3
 80074a6:	d020      	beq.n	80074ea <sd_lld_start+0x6a>
    if (&SD6 == sdp) {
 80074a8:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <sd_lld_start+0x94>)
 80074aa:	429c      	cmp	r4, r3
 80074ac:	d1ef      	bne.n	800748e <sd_lld_start+0xe>
      rccEnableUSART6(true);
 80074ae:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <sd_lld_start+0x98>)
 80074b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074b2:	f042 0220 	orr.w	r2, r2, #32
 80074b6:	645a      	str	r2, [r3, #68]	; 0x44
 80074b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80074ba:	f042 0220 	orr.w	r2, r2, #32
 80074be:	665a      	str	r2, [r3, #100]	; 0x64
 80074c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART6_NUMBER, STM32_SERIAL_USART6_PRIORITY);
 80074c2:	210c      	movs	r1, #12
 80074c4:	2047      	movs	r0, #71	; 0x47
 80074c6:	f7fc fdd3 	bl	8004070 <nvicEnableVector>
 80074ca:	e7e0      	b.n	800748e <sd_lld_start+0xe>
      rccEnableUSART2(true);
 80074cc:	4b12      	ldr	r3, [pc, #72]	; (8007518 <sd_lld_start+0x98>)
 80074ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40
 80074d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80074d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80074dc:	661a      	str	r2, [r3, #96]	; 0x60
 80074de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
 80074e0:	2103      	movs	r1, #3
 80074e2:	2026      	movs	r0, #38	; 0x26
 80074e4:	f7fc fdc4 	bl	8004070 <nvicEnableVector>
 80074e8:	e7db      	b.n	80074a2 <sd_lld_start+0x22>
      rccEnableUSART3(true);
 80074ea:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <sd_lld_start+0x98>)
 80074ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80074f2:	641a      	str	r2, [r3, #64]	; 0x40
 80074f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80074f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80074fa:	661a      	str	r2, [r3, #96]	; 0x60
 80074fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
 80074fe:	2103      	movs	r1, #3
 8007500:	2027      	movs	r0, #39	; 0x27
 8007502:	f7fc fdb5 	bl	8004070 <nvicEnableVector>
 8007506:	e7cf      	b.n	80074a8 <sd_lld_start+0x28>
 8007508:	08014fe4 	.word	0x08014fe4
 800750c:	20004758 	.word	0x20004758
 8007510:	200049b4 	.word	0x200049b4
 8007514:	20004c10 	.word	0x20004c10
 8007518:	40023800 	.word	0x40023800
 800751c:	f3af 8000 	nop.w

08007520 <sd_lld_stop>:
 *
 * @notapi
 */
void sd_lld_stop(SerialDriver *sdp) {

  if (sdp->state == SD_READY) {
 8007520:	7a03      	ldrb	r3, [r0, #8]
 8007522:	2b02      	cmp	r3, #2
 8007524:	d000      	beq.n	8007528 <sd_lld_stop+0x8>
 8007526:	4770      	bx	lr
void sd_lld_stop(SerialDriver *sdp) {
 8007528:	b510      	push	{r4, lr}
 800752a:	4604      	mov	r4, r0
    usart_deinit(sdp->usart);
 800752c:	f8d0 0254 	ldr.w	r0, [r0, #596]	; 0x254
 8007530:	f7ff fe56 	bl	80071e0 <usart_deinit>
      nvicDisableVector(STM32_USART1_NUMBER);
      return;
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8007534:	4b19      	ldr	r3, [pc, #100]	; (800759c <sd_lld_stop+0x7c>)
 8007536:	429c      	cmp	r4, r3
 8007538:	d006      	beq.n	8007548 <sd_lld_stop+0x28>
      nvicDisableVector(STM32_USART2_NUMBER);
      return;
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
 800753a:	4b19      	ldr	r3, [pc, #100]	; (80075a0 <sd_lld_stop+0x80>)
 800753c:	429c      	cmp	r4, r3
 800753e:	d011      	beq.n	8007564 <sd_lld_stop+0x44>
      nvicDisableVector(STM32_UART5_NUMBER);
      return;
    }
#endif
#if STM32_SERIAL_USE_USART6
    if (&SD6 == sdp) {
 8007540:	4b18      	ldr	r3, [pc, #96]	; (80075a4 <sd_lld_stop+0x84>)
 8007542:	429c      	cmp	r4, r3
 8007544:	d01c      	beq.n	8007580 <sd_lld_stop+0x60>
      nvicDisableVector(STM32_UART8_NUMBER);
      return;
    }
#endif
  }
}
 8007546:	bd10      	pop	{r4, pc}
      rccDisableUSART2();
 8007548:	4b17      	ldr	r3, [pc, #92]	; (80075a8 <sd_lld_stop+0x88>)
 800754a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800754c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007550:	641a      	str	r2, [r3, #64]	; 0x40
 8007552:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007554:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007558:	661a      	str	r2, [r3, #96]	; 0x60
 800755a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicDisableVector(STM32_USART2_NUMBER);
 800755c:	2026      	movs	r0, #38	; 0x26
 800755e:	f7fc fd9f 	bl	80040a0 <nvicDisableVector>
      return;
 8007562:	e7f0      	b.n	8007546 <sd_lld_stop+0x26>
      rccDisableUSART3();
 8007564:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <sd_lld_stop+0x88>)
 8007566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800756c:	641a      	str	r2, [r3, #64]	; 0x40
 800756e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007570:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007574:	661a      	str	r2, [r3, #96]	; 0x60
 8007576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicDisableVector(STM32_USART3_NUMBER);
 8007578:	2027      	movs	r0, #39	; 0x27
 800757a:	f7fc fd91 	bl	80040a0 <nvicDisableVector>
      return;
 800757e:	e7e2      	b.n	8007546 <sd_lld_stop+0x26>
      rccDisableUSART6();
 8007580:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <sd_lld_stop+0x88>)
 8007582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007584:	f022 0220 	bic.w	r2, r2, #32
 8007588:	645a      	str	r2, [r3, #68]	; 0x44
 800758a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800758c:	f022 0220 	bic.w	r2, r2, #32
 8007590:	665a      	str	r2, [r3, #100]	; 0x64
 8007592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      nvicDisableVector(STM32_USART6_NUMBER);
 8007594:	2047      	movs	r0, #71	; 0x47
 8007596:	f7fc fd83 	bl	80040a0 <nvicDisableVector>
      return;
 800759a:	e7d4      	b.n	8007546 <sd_lld_stop+0x26>
 800759c:	20004758 	.word	0x20004758
 80075a0:	200049b4 	.word	0x200049b4
 80075a4:	20004c10 	.word	0x20004c10
 80075a8:	40023800 	.word	0x40023800
 80075ac:	00000000 	.word	0x00000000

080075b0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80075b0:	e7fe      	b.n	80075b0 <_idle_thread>
 80075b2:	bf00      	nop
 80075b4:	f3af 8000 	nop.w
 80075b8:	f3af 8000 	nop.w
 80075bc:	f3af 8000 	nop.w

080075c0 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 80075c0:	b538      	push	{r3, r4, r5, lr}

  _scheduler_init();
 80075c2:	f000 fd65 	bl	8008090 <_scheduler_init>
  _vt_init();
 80075c6:	f000 fc43 	bl	8007e50 <_vt_init>
  _trace_init();
 80075ca:	f000 fac9 	bl	8007b60 <_trace_init>

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  ch.dbg.isr_cnt  = (cnt_t)0;
 80075ce:	4c1f      	ldr	r4, [pc, #124]	; (800764c <chSysInit+0x8c>)
 80075d0:	2500      	movs	r5, #0
 80075d2:	63e5      	str	r5, [r4, #60]	; 0x3c
  ch.dbg.lock_cnt = (cnt_t)0;
 80075d4:	6425      	str	r5, [r4, #64]	; 0x40
#endif
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 80075d6:	f001 fc63 	bl	8008ea0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 80075da:	f003 fad1 	bl	800ab80 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 80075de:	f003 fb3f 	bl	800ac60 <_heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  _factory_init();
 80075e2:	f004 f855 	bl	800b690 <_factory_init>
#endif
#if CH_DBG_STATISTICS == TRUE
  _stats_init();
 80075e6:	f001 fc93 	bl	8008f10 <_stats_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80075ea:	2280      	movs	r2, #128	; 0x80
 80075ec:	4918      	ldr	r1, [pc, #96]	; (8007650 <chSysInit+0x90>)
 80075ee:	f504 6005 	add.w	r0, r4, #2128	; 0x850
 80075f2:	f000 ff4d 	bl	8008490 <_thread_init>
 80075f6:	61a0      	str	r0, [r4, #24]
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  {
    /* Setting up the base address of the static main thread stack, the
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
 80075f8:	4b16      	ldr	r3, [pc, #88]	; (8007654 <chSysInit+0x94>)
 80075fa:	61c3      	str	r3, [r0, #28]
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 80075fc:	2301      	movs	r3, #1
 80075fe:	f880 3020 	strb.w	r3, [r0, #32]
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007602:	4b15      	ldr	r3, [pc, #84]	; (8007658 <chSysInit+0x98>)
 8007604:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007606:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800760a:	0409      	lsls	r1, r1, #16
 800760c:	0c09      	lsrs	r1, r1, #16
  reg_value  =  (reg_value                                   |
 800760e:	4a13      	ldr	r2, [pc, #76]	; (800765c <chSysInit+0x9c>)
 8007610:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8007612:	60da      	str	r2, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007614:	4912      	ldr	r1, [pc, #72]	; (8007660 <chSysInit+0xa0>)
 8007616:	68ca      	ldr	r2, [r1, #12]
 8007618:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800761c:	60ca      	str	r2, [r1, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800761e:	4911      	ldr	r1, [pc, #68]	; (8007664 <chSysInit+0xa4>)
 8007620:	680a      	ldr	r2, [r1, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	600a      	str	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007628:	2210      	movs	r2, #16
 800762a:	77da      	strb	r2, [r3, #31]
 800762c:	2220      	movs	r2, #32
 800762e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
     initializations performed before.*/
  port_init();

#if CH_DBG_STATISTICS == TRUE
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->stats);
 8007632:	3048      	adds	r0, #72	; 0x48
 8007634:	f001 fc04 	bl	8008e40 <chTMStartMeasurementX>
  _dbg_check_enable();
 8007638:	f000 f99a 	bl	8007970 <_dbg_check_enable>
 800763c:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 8007640:	b662      	cpsie	i
    };

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
 8007642:	4809      	ldr	r0, [pc, #36]	; (8007668 <chSysInit+0xa8>)
 8007644:	f000 ffd4 	bl	80085f0 <chThdCreate>
  }
#endif
}
 8007648:	bd38      	pop	{r3, r4, r5, pc}
 800764a:	bf00      	nop
 800764c:	20004f68 	.word	0x20004f68
 8007650:	080151c4 	.word	0x080151c4
 8007654:	20000400 	.word	0x20000400
 8007658:	e000ed00 	.word	0xe000ed00
 800765c:	05fa0300 	.word	0x05fa0300
 8007660:	e000edf0 	.word	0xe000edf0
 8007664:	e0001000 	.word	0xe0001000
 8007668:	08014ff0 	.word	0x08014ff0
 800766c:	f3af 8000 	nop.w

08007670 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8007670:	b508      	push	{r3, lr}
 8007672:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8007674:	b672      	cpsid	i

  port_disable();

  /* Logging the event.*/
  _trace_halt(reason);
 8007676:	f000 fb0b 	bl	8007c90 <_trace_halt>

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 800767a:	4b01      	ldr	r3, [pc, #4]	; (8007680 <chSysHalt+0x10>)
 800767c:	639c      	str	r4, [r3, #56]	; 0x38
 800767e:	e7fe      	b.n	800767e <chSysHalt+0xe>
 8007680:	20004f68 	.word	0x20004f68
 8007684:	f3af 8000 	nop.w
 8007688:	f3af 8000 	nop.w
 800768c:	f3af 8000 	nop.w

08007690 <chSysIntegrityCheckI>:
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 8007690:	b510      	push	{r4, lr}
 8007692:	4604      	mov	r4, r0
  cnt_t n;

  chDbgCheckClassI();
 8007694:	f000 fa1c 	bl	8007ad0 <chDbgCheckClassI>

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8007698:	f014 0f01 	tst.w	r4, #1
 800769c:	d010      	beq.n	80076c0 <chSysIntegrityCheckI+0x30>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.queue.next;
 800769e:	4b22      	ldr	r3, [pc, #136]	; (8007728 <chSysIntegrityCheckI+0x98>)
 80076a0:	681a      	ldr	r2, [r3, #0]
    n = (cnt_t)0;
 80076a2:	2300      	movs	r3, #0
    while (tp != (thread_t *)&ch.rlist.queue) {
 80076a4:	e001      	b.n	80076aa <chSysIntegrityCheckI+0x1a>
      n++;
 80076a6:	3301      	adds	r3, #1
      tp = tp->queue.next;
 80076a8:	6812      	ldr	r2, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80076aa:	491f      	ldr	r1, [pc, #124]	; (8007728 <chSysIntegrityCheckI+0x98>)
 80076ac:	428a      	cmp	r2, r1
 80076ae:	d1fa      	bne.n	80076a6 <chSysIntegrityCheckI+0x16>
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.queue.prev;
 80076b0:	684a      	ldr	r2, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80076b2:	e001      	b.n	80076b8 <chSysIntegrityCheckI+0x28>
      n--;
 80076b4:	3b01      	subs	r3, #1
      tp = tp->queue.prev;
 80076b6:	6852      	ldr	r2, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80076b8:	491b      	ldr	r1, [pc, #108]	; (8007728 <chSysIntegrityCheckI+0x98>)
 80076ba:	428a      	cmp	r2, r1
 80076bc:	d1fa      	bne.n	80076b4 <chSysIntegrityCheckI+0x24>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80076be:	bb5b      	cbnz	r3, 8007718 <chSysIntegrityCheckI+0x88>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 80076c0:	f014 0f02 	tst.w	r4, #2
 80076c4:	d012      	beq.n	80076ec <chSysIntegrityCheckI+0x5c>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.next;
 80076c6:	4b18      	ldr	r3, [pc, #96]	; (8007728 <chSysIntegrityCheckI+0x98>)
 80076c8:	6a1a      	ldr	r2, [r3, #32]
    n = (cnt_t)0;
 80076ca:	2300      	movs	r3, #0
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80076cc:	e001      	b.n	80076d2 <chSysIntegrityCheckI+0x42>
      n++;
 80076ce:	3301      	adds	r3, #1
      vtp = vtp->next;
 80076d0:	6812      	ldr	r2, [r2, #0]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80076d2:	4916      	ldr	r1, [pc, #88]	; (800772c <chSysIntegrityCheckI+0x9c>)
 80076d4:	428a      	cmp	r2, r1
 80076d6:	d1fa      	bne.n	80076ce <chSysIntegrityCheckI+0x3e>
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.prev;
 80076d8:	f1a1 0220 	sub.w	r2, r1, #32
 80076dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80076de:	e001      	b.n	80076e4 <chSysIntegrityCheckI+0x54>
      n--;
 80076e0:	3b01      	subs	r3, #1
      vtp = vtp->prev;
 80076e2:	6852      	ldr	r2, [r2, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80076e4:	4911      	ldr	r1, [pc, #68]	; (800772c <chSysIntegrityCheckI+0x9c>)
 80076e6:	428a      	cmp	r2, r1
 80076e8:	d1fa      	bne.n	80076e0 <chSysIntegrityCheckI+0x50>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80076ea:	b9bb      	cbnz	r3, 800771c <chSysIntegrityCheckI+0x8c>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 80076ec:	f014 0f04 	tst.w	r4, #4
 80076f0:	d016      	beq.n	8007720 <chSysIntegrityCheckI+0x90>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.newer;
 80076f2:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <chSysIntegrityCheckI+0x98>)
 80076f4:	691a      	ldr	r2, [r3, #16]
    n = (cnt_t)0;
 80076f6:	2300      	movs	r3, #0
    while (tp != (thread_t *)&ch.rlist) {
 80076f8:	e001      	b.n	80076fe <chSysIntegrityCheckI+0x6e>
      n++;
 80076fa:	3301      	adds	r3, #1
      tp = tp->newer;
 80076fc:	6912      	ldr	r2, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 80076fe:	490a      	ldr	r1, [pc, #40]	; (8007728 <chSysIntegrityCheckI+0x98>)
 8007700:	428a      	cmp	r2, r1
 8007702:	d1fa      	bne.n	80076fa <chSysIntegrityCheckI+0x6a>
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.older;
 8007704:	694a      	ldr	r2, [r1, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8007706:	e001      	b.n	800770c <chSysIntegrityCheckI+0x7c>
      n--;
 8007708:	3b01      	subs	r3, #1
      tp = tp->older;
 800770a:	6952      	ldr	r2, [r2, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800770c:	4906      	ldr	r1, [pc, #24]	; (8007728 <chSysIntegrityCheckI+0x98>)
 800770e:	428a      	cmp	r2, r1
 8007710:	d1fa      	bne.n	8007708 <chSysIntegrityCheckI+0x78>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8007712:	b93b      	cbnz	r3, 8007724 <chSysIntegrityCheckI+0x94>
  if ((testmask & CH_INTEGRITY_PORT) != 0U) {
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
 8007714:	2000      	movs	r0, #0
 8007716:	e004      	b.n	8007722 <chSysIntegrityCheckI+0x92>
      return true;
 8007718:	2001      	movs	r0, #1
 800771a:	e002      	b.n	8007722 <chSysIntegrityCheckI+0x92>
      return true;
 800771c:	2001      	movs	r0, #1
 800771e:	e000      	b.n	8007722 <chSysIntegrityCheckI+0x92>
  return false;
 8007720:	2000      	movs	r0, #0
}
 8007722:	bd10      	pop	{r4, pc}
      return true;
 8007724:	2001      	movs	r0, #1
 8007726:	e7fc      	b.n	8007722 <chSysIntegrityCheckI+0x92>
 8007728:	20004f68 	.word	0x20004f68
 800772c:	20004f88 	.word	0x20004f88

08007730 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8007730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  chDbgCheckClassI();
 8007734:	f000 f9cc 	bl	8007ad0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();
 8007738:	f000 f9ca 	bl	8007ad0 <chDbgCheckClassI>
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 800773c:	4b45      	ldr	r3, [pc, #276]	; (8007854 <chSysTimerHandlerI+0x124>)
 800773e:	6a1c      	ldr	r4, [r3, #32]
 8007740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007744:	6a59      	ldr	r1, [r3, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8007746:	4b43      	ldr	r3, [pc, #268]	; (8007854 <chSysTimerHandlerI+0x124>)
 8007748:	6b1e      	ldr	r6, [r3, #48]	; 0x30
  return (sysinterval_t)((systime_t)(end - start));
 800774a:	1b8e      	subs	r6, r1, r6
 800774c:	46b0      	mov	r8, r6
 800774e:	f04f 0900 	mov.w	r9, #0

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8007752:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007756:	4599      	cmp	r9, r3
 8007758:	bf08      	it	eq
 800775a:	4296      	cmpeq	r6, r2
 800775c:	d240      	bcs.n	80077e0 <chSysTimerHandlerI+0xb0>
    }
    while (vtp->delta <= nowdelta);
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800775e:	4b3d      	ldr	r3, [pc, #244]	; (8007854 <chSysTimerHandlerI+0x124>)
 8007760:	f853 0f20 	ldr.w	r0, [r3, #32]!
 8007764:	4298      	cmp	r0, r3
 8007766:	d06d      	beq.n	8007844 <chSysTimerHandlerI+0x114>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 8007768:	4d3a      	ldr	r5, [pc, #232]	; (8007854 <chSysTimerHandlerI+0x124>)
 800776a:	6329      	str	r1, [r5, #48]	; 0x30
  ch.vtlist.next->delta -= nowdelta;
 800776c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8007770:	1b92      	subs	r2, r2, r6
 8007772:	eb63 0309 	sbc.w	r3, r3, r9
 8007776:	4616      	mov	r6, r2
 8007778:	461f      	mov	r7, r3
 800777a:	e9c0 6702 	strd	r6, r7, [r0, #8]

  /* Recalculating the next alarm time.*/
  delta = vtp->delta - chTimeDiffX(ch.vtlist.lasttime, now);
 800777e:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007782:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007784:	1acb      	subs	r3, r1, r3
 8007786:	ebb6 0803 	subs.w	r8, r6, r3
 800778a:	f167 0900 	sbc.w	r9, r7, #0
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800778e:	f1b9 0f00 	cmp.w	r9, #0
 8007792:	bf08      	it	eq
 8007794:	f1b8 0f02 	cmpeq.w	r8, #2
 8007798:	d33c      	bcc.n	8007814 <chSysTimerHandlerI+0xe4>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
  }
#if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
  /* The delta could be too large for the physical timer to handle.*/
  else if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 800779a:	f1b9 0f01 	cmp.w	r9, #1
 800779e:	bf08      	it	eq
 80077a0:	f1b8 0f00 	cmpeq.w	r8, #0
 80077a4:	d33a      	bcc.n	800781c <chSysTimerHandlerI+0xec>
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
 80077a6:	f04f 38ff 	mov.w	r8, #4294967295
 80077aa:	f04f 0900 	mov.w	r9, #0
 80077ae:	e035      	b.n	800781c <chSysTimerHandlerI+0xec>
  _dbg_check_unlock_from_isr();
 80077b0:	f000 f936 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80077b4:	f001 fc04 	bl	8008fc0 <_stats_stop_measure_crit_isr>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80077b8:	2300      	movs	r3, #0
 80077ba:	f383 8811 	msr	BASEPRI, r3
      fn(vtp->par);
 80077be:	6960      	ldr	r0, [r4, #20]
 80077c0:	47a8      	blx	r5
 80077c2:	2320      	movs	r3, #32
 80077c4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80077c8:	f001 fbf2 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80077cc:	f000 f910 	bl	80079f0 <_dbg_check_lock_from_isr>
      vtp = ch.vtlist.next;
 80077d0:	4b20      	ldr	r3, [pc, #128]	; (8007854 <chSysTimerHandlerI+0x124>)
 80077d2:	6a1c      	ldr	r4, [r3, #32]
    while (vtp->delta <= nowdelta);
 80077d4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80077d8:	4599      	cmp	r9, r3
 80077da:	bf08      	it	eq
 80077dc:	4590      	cmpeq	r8, r2
 80077de:	d3af      	bcc.n	8007740 <chSysTimerHandlerI+0x10>
      ch.vtlist.lasttime += vtp->delta;
 80077e0:	68a2      	ldr	r2, [r4, #8]
 80077e2:	491c      	ldr	r1, [pc, #112]	; (8007854 <chSysTimerHandlerI+0x124>)
 80077e4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80077e6:	4413      	add	r3, r2
 80077e8:	630b      	str	r3, [r1, #48]	; 0x30
      nowdelta -= vtp->delta;
 80077ea:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80077ee:	ebb8 0802 	subs.w	r8, r8, r2
 80077f2:	eb69 0903 	sbc.w	r9, r9, r3
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80077f6:	6822      	ldr	r2, [r4, #0]
 80077f8:	f101 0320 	add.w	r3, r1, #32
 80077fc:	6053      	str	r3, [r2, #4]
      ch.vtlist.next = vtp->next;
 80077fe:	6822      	ldr	r2, [r4, #0]
 8007800:	620a      	str	r2, [r1, #32]
      fn = vtp->func;
 8007802:	6925      	ldr	r5, [r4, #16]
      vtp->func = NULL;
 8007804:	2200      	movs	r2, #0
 8007806:	6122      	str	r2, [r4, #16]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8007808:	6a0a      	ldr	r2, [r1, #32]
 800780a:	429a      	cmp	r2, r3
 800780c:	d1d0      	bne.n	80077b0 <chSysTimerHandlerI+0x80>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 800780e:	f7f8 fe9f 	bl	8000550 <stStopAlarm>
 8007812:	e7cd      	b.n	80077b0 <chSysTimerHandlerI+0x80>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8007814:	f04f 0802 	mov.w	r8, #2
 8007818:	f04f 0900 	mov.w	r9, #0
  return systime + (systime_t)interval;
 800781c:	eb01 0408 	add.w	r4, r1, r8
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8007820:	4620      	mov	r0, r4
 8007822:	f7f8 fe9d 	bl	8000560 <stSetAlarm>
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
 8007826:	4b0b      	ldr	r3, [pc, #44]	; (8007854 <chSysTimerHandlerI+0x124>)
 8007828:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800782a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8007830:	1a5b      	subs	r3, r3, r1
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8007832:	f1b9 0f01 	cmp.w	r9, #1
 8007836:	bf08      	it	eq
 8007838:	f1b8 0f00 	cmpeq.w	r8, #0
 800783c:	d204      	bcs.n	8007848 <chSysTimerHandlerI+0x118>
  return (sysinterval_t)((systime_t)(end - start));
 800783e:	1a61      	subs	r1, r4, r1
 8007840:	428b      	cmp	r3, r1
 8007842:	d804      	bhi.n	800784e <chSysTimerHandlerI+0x11e>
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
 8007844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8007848:	4803      	ldr	r0, [pc, #12]	; (8007858 <chSysTimerHandlerI+0x128>)
 800784a:	f7ff ff11 	bl	8007670 <chSysHalt>
 800784e:	4803      	ldr	r0, [pc, #12]	; (800785c <chSysTimerHandlerI+0x12c>)
 8007850:	f7ff ff0e 	bl	8007670 <chSysHalt>
 8007854:	20004f68 	.word	0x20004f68
 8007858:	08015008 	.word	0x08015008
 800785c:	08015014 	.word	0x08015014

08007860 <chSysGetStatusAndLockX>:
 * @return              The previous system status, the encoding of this
 *                      status word is architecture-dependent and opaque.
 *
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {
 8007860:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007862:	f3ef 8411 	mrs	r4, BASEPRI

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8007866:	b95c      	cbnz	r4, 8007880 <chSysGetStatusAndLockX+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007868:	f3ef 8305 	mrs	r3, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 800786c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 8007870:	b943      	cbnz	r3, 8007884 <chSysGetStatusAndLockX+0x24>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007872:	2320      	movs	r3, #32
 8007874:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8007878:	f001 fb8a 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800787c:	f000 f888 	bl	8007990 <_dbg_check_lock>
    else {
      chSysLock();
    }
  }
  return sts;
}
 8007880:	4620      	mov	r0, r4
 8007882:	bd10      	pop	{r4, pc}
 8007884:	2320      	movs	r3, #32
 8007886:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800788a:	f001 fb91 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800788e:	f000 f8af 	bl	80079f0 <_dbg_check_lock_from_isr>
 8007892:	e7f5      	b.n	8007880 <chSysGetStatusAndLockX+0x20>
 8007894:	f3af 8000 	nop.w
 8007898:	f3af 8000 	nop.w
 800789c:	f3af 8000 	nop.w

080078a0 <chSysRestoreStatusX>:
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
 80078a0:	bb18      	cbnz	r0, 80078ea <chSysRestoreStatusX+0x4a>
void chSysRestoreStatusX(syssts_t sts) {
 80078a2:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078a4:	f3ef 8305 	mrs	r3, IPSR
 80078a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 80078ac:	b993      	cbnz	r3, 80078d4 <chSysRestoreStatusX+0x34>
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 80078ae:	f000 fda7 	bl	8008400 <chSchRescheduleS>
  _dbg_check_unlock();
 80078b2:	f000 f885 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80078b6:	f001 fb73 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80078ba:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <chSysRestoreStatusX+0x4c>)
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d004      	beq.n	80078cc <chSysRestoreStatusX+0x2c>
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	6899      	ldr	r1, [r3, #8]
 80078c6:	6893      	ldr	r3, [r2, #8]
 80078c8:	4299      	cmp	r1, r3
 80078ca:	d30b      	bcc.n	80078e4 <chSysRestoreStatusX+0x44>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80078cc:	2300      	movs	r3, #0
 80078ce:	f383 8811 	msr	BASEPRI, r3
      chSysUnlock();
    }
  }
}
 80078d2:	bd08      	pop	{r3, pc}
  _dbg_check_unlock_from_isr();
 80078d4:	f000 f8a4 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80078d8:	f001 fb72 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 80078dc:	2300      	movs	r3, #0
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	e7f6      	b.n	80078d2 <chSysRestoreStatusX+0x32>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80078e4:	4802      	ldr	r0, [pc, #8]	; (80078f0 <chSysRestoreStatusX+0x50>)
 80078e6:	f7ff fec3 	bl	8007670 <chSysHalt>
 80078ea:	4770      	bx	lr
 80078ec:	20004f68 	.word	0x20004f68
 80078f0:	08015020 	.word	0x08015020
 80078f4:	f3af 8000 	nop.w
 80078f8:	f3af 8000 	nop.w
 80078fc:	f3af 8000 	nop.w

08007900 <chSysIsCounterWithinX>:
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)(((rtcnt_t)cnt - (rtcnt_t)start) <
 8007900:	1a40      	subs	r0, r0, r1
                ((rtcnt_t)end - (rtcnt_t)start));
 8007902:	1a52      	subs	r2, r2, r1
}
 8007904:	4290      	cmp	r0, r2
 8007906:	bf2c      	ite	cs
 8007908:	2000      	movcs	r0, #0
 800790a:	2001      	movcc	r0, #1
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop

08007910 <chSysPolledDelayX>:
 *
 * @param[in] cycles    number of cycles
 *
 * @xclass
 */
void chSysPolledDelayX(rtcnt_t cycles) {
 8007910:	b538      	push	{r3, r4, r5, lr}
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8007912:	4b06      	ldr	r3, [pc, #24]	; (800792c <chSysPolledDelayX+0x1c>)
 8007914:	685c      	ldr	r4, [r3, #4]
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;
 8007916:	1905      	adds	r5, r0, r4
 8007918:	4b04      	ldr	r3, [pc, #16]	; (800792c <chSysPolledDelayX+0x1c>)
 800791a:	6858      	ldr	r0, [r3, #4]

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 800791c:	462a      	mov	r2, r5
 800791e:	4621      	mov	r1, r4
 8007920:	f7ff ffee 	bl	8007900 <chSysIsCounterWithinX>
 8007924:	2800      	cmp	r0, #0
 8007926:	d1f7      	bne.n	8007918 <chSysPolledDelayX+0x8>
  }
}
 8007928:	bd38      	pop	{r3, r4, r5, pc}
 800792a:	bf00      	nop
 800792c:	e0001000 	.word	0xe0001000

08007930 <_dbg_check_disable>:
/**
 * @brief   Guard code for @p chSysDisable().
 *
 * @notapi
 */
void _dbg_check_disable(void) {
 8007930:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007932:	4b05      	ldr	r3, [pc, #20]	; (8007948 <_dbg_check_disable+0x18>)
 8007934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007936:	b913      	cbnz	r3, 800793e <_dbg_check_disable+0xe>
 8007938:	4b03      	ldr	r3, [pc, #12]	; (8007948 <_dbg_check_disable+0x18>)
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	b113      	cbz	r3, 8007944 <_dbg_check_disable+0x14>
    chSysHalt("SV#1");
 800793e:	4803      	ldr	r0, [pc, #12]	; (800794c <_dbg_check_disable+0x1c>)
 8007940:	f7ff fe96 	bl	8007670 <chSysHalt>
  }
}
 8007944:	bd08      	pop	{r3, pc}
 8007946:	bf00      	nop
 8007948:	20004f68 	.word	0x20004f68
 800794c:	08015bfc 	.word	0x08015bfc

08007950 <_dbg_check_suspend>:
/**
 * @brief   Guard code for @p chSysSuspend().
 *
 * @notapi
 */
void _dbg_check_suspend(void) {
 8007950:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007952:	4b05      	ldr	r3, [pc, #20]	; (8007968 <_dbg_check_suspend+0x18>)
 8007954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007956:	b913      	cbnz	r3, 800795e <_dbg_check_suspend+0xe>
 8007958:	4b03      	ldr	r3, [pc, #12]	; (8007968 <_dbg_check_suspend+0x18>)
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	b113      	cbz	r3, 8007964 <_dbg_check_suspend+0x14>
    chSysHalt("SV#2");
 800795e:	4803      	ldr	r0, [pc, #12]	; (800796c <_dbg_check_suspend+0x1c>)
 8007960:	f7ff fe86 	bl	8007670 <chSysHalt>
  }
}
 8007964:	bd08      	pop	{r3, pc}
 8007966:	bf00      	nop
 8007968:	20004f68 	.word	0x20004f68
 800796c:	08015c04 	.word	0x08015c04

08007970 <_dbg_check_enable>:
/**
 * @brief   Guard code for @p chSysEnable().
 *
 * @notapi
 */
void _dbg_check_enable(void) {
 8007970:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007972:	4b05      	ldr	r3, [pc, #20]	; (8007988 <_dbg_check_enable+0x18>)
 8007974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007976:	b913      	cbnz	r3, 800797e <_dbg_check_enable+0xe>
 8007978:	4b03      	ldr	r3, [pc, #12]	; (8007988 <_dbg_check_enable+0x18>)
 800797a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797c:	b113      	cbz	r3, 8007984 <_dbg_check_enable+0x14>
    chSysHalt("SV#3");
 800797e:	4803      	ldr	r0, [pc, #12]	; (800798c <_dbg_check_enable+0x1c>)
 8007980:	f7ff fe76 	bl	8007670 <chSysHalt>
  }
}
 8007984:	bd08      	pop	{r3, pc}
 8007986:	bf00      	nop
 8007988:	20004f68 	.word	0x20004f68
 800798c:	08015c0c 	.word	0x08015c0c

08007990 <_dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void _dbg_check_lock(void) {
 8007990:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007992:	4b06      	ldr	r3, [pc, #24]	; (80079ac <_dbg_check_lock+0x1c>)
 8007994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007996:	b913      	cbnz	r3, 800799e <_dbg_check_lock+0xe>
 8007998:	4b04      	ldr	r3, [pc, #16]	; (80079ac <_dbg_check_lock+0x1c>)
 800799a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799c:	b113      	cbz	r3, 80079a4 <_dbg_check_lock+0x14>
    chSysHalt("SV#4");
 800799e:	4804      	ldr	r0, [pc, #16]	; (80079b0 <_dbg_check_lock+0x20>)
 80079a0:	f7ff fe66 	bl	8007670 <chSysHalt>
  }
  _dbg_enter_lock();
 80079a4:	4b01      	ldr	r3, [pc, #4]	; (80079ac <_dbg_check_lock+0x1c>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80079aa:	bd08      	pop	{r3, pc}
 80079ac:	20004f68 	.word	0x20004f68
 80079b0:	08015c14 	.word	0x08015c14
 80079b4:	f3af 8000 	nop.w
 80079b8:	f3af 8000 	nop.w
 80079bc:	f3af 8000 	nop.w

080079c0 <_dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void _dbg_check_unlock(void) {
 80079c0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80079c2:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <_dbg_check_unlock+0x20>)
 80079c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c6:	b91b      	cbnz	r3, 80079d0 <_dbg_check_unlock+0x10>
 80079c8:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <_dbg_check_unlock+0x20>)
 80079ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	dc02      	bgt.n	80079d6 <_dbg_check_unlock+0x16>
    chSysHalt("SV#5");
 80079d0:	4804      	ldr	r0, [pc, #16]	; (80079e4 <_dbg_check_unlock+0x24>)
 80079d2:	f7ff fe4d 	bl	8007670 <chSysHalt>
  }
  _dbg_leave_lock();
 80079d6:	4b02      	ldr	r3, [pc, #8]	; (80079e0 <_dbg_check_unlock+0x20>)
 80079d8:	2200      	movs	r2, #0
 80079da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80079dc:	bd08      	pop	{r3, pc}
 80079de:	bf00      	nop
 80079e0:	20004f68 	.word	0x20004f68
 80079e4:	08015c1c 	.word	0x08015c1c
 80079e8:	f3af 8000 	nop.w
 80079ec:	f3af 8000 	nop.w

080079f0 <_dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {
 80079f0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80079f2:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <_dbg_check_lock_from_isr+0x20>)
 80079f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	dd02      	ble.n	8007a00 <_dbg_check_lock_from_isr+0x10>
 80079fa:	4b05      	ldr	r3, [pc, #20]	; (8007a10 <_dbg_check_lock_from_isr+0x20>)
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	b113      	cbz	r3, 8007a06 <_dbg_check_lock_from_isr+0x16>
    chSysHalt("SV#6");
 8007a00:	4804      	ldr	r0, [pc, #16]	; (8007a14 <_dbg_check_lock_from_isr+0x24>)
 8007a02:	f7ff fe35 	bl	8007670 <chSysHalt>
  }
  _dbg_enter_lock();
 8007a06:	4b02      	ldr	r3, [pc, #8]	; (8007a10 <_dbg_check_lock_from_isr+0x20>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007a0c:	bd08      	pop	{r3, pc}
 8007a0e:	bf00      	nop
 8007a10:	20004f68 	.word	0x20004f68
 8007a14:	08015c24 	.word	0x08015c24
 8007a18:	f3af 8000 	nop.w
 8007a1c:	f3af 8000 	nop.w

08007a20 <_dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {
 8007a20:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8007a22:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <_dbg_check_unlock_from_isr+0x20>)
 8007a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	dd03      	ble.n	8007a32 <_dbg_check_unlock_from_isr+0x12>
 8007a2a:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <_dbg_check_unlock_from_isr+0x20>)
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	dc02      	bgt.n	8007a38 <_dbg_check_unlock_from_isr+0x18>
    chSysHalt("SV#7");
 8007a32:	4804      	ldr	r0, [pc, #16]	; (8007a44 <_dbg_check_unlock_from_isr+0x24>)
 8007a34:	f7ff fe1c 	bl	8007670 <chSysHalt>
  }
  _dbg_leave_lock();
 8007a38:	4b01      	ldr	r3, [pc, #4]	; (8007a40 <_dbg_check_unlock_from_isr+0x20>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007a3e:	bd08      	pop	{r3, pc}
 8007a40:	20004f68 	.word	0x20004f68
 8007a44:	08015c2c 	.word	0x08015c2c
 8007a48:	f3af 8000 	nop.w
 8007a4c:	f3af 8000 	nop.w

08007a50 <_dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void _dbg_check_enter_isr(void) {
 8007a50:	b508      	push	{r3, lr}
 8007a52:	2320      	movs	r3, #32
 8007a54:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007a58:	4b08      	ldr	r3, [pc, #32]	; (8007a7c <_dbg_check_enter_isr+0x2c>)
 8007a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	db02      	blt.n	8007a66 <_dbg_check_enter_isr+0x16>
 8007a60:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <_dbg_check_enter_isr+0x2c>)
 8007a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a64:	b113      	cbz	r3, 8007a6c <_dbg_check_enter_isr+0x1c>
    chSysHalt("SV#8");
 8007a66:	4806      	ldr	r0, [pc, #24]	; (8007a80 <_dbg_check_enter_isr+0x30>)
 8007a68:	f7ff fe02 	bl	8007670 <chSysHalt>
  }
  ch.dbg.isr_cnt++;
 8007a6c:	4a03      	ldr	r2, [pc, #12]	; (8007a7c <_dbg_check_enter_isr+0x2c>)
 8007a6e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007a70:	3301      	adds	r3, #1
 8007a72:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007a74:	2300      	movs	r3, #0
 8007a76:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 8007a7a:	bd08      	pop	{r3, pc}
 8007a7c:	20004f68 	.word	0x20004f68
 8007a80:	08015c34 	.word	0x08015c34
 8007a84:	f3af 8000 	nop.w
 8007a88:	f3af 8000 	nop.w
 8007a8c:	f3af 8000 	nop.w

08007a90 <_dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void _dbg_check_leave_isr(void) {
 8007a90:	b508      	push	{r3, lr}
 8007a92:	2320      	movs	r3, #32
 8007a94:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007a98:	4b08      	ldr	r3, [pc, #32]	; (8007abc <_dbg_check_leave_isr+0x2c>)
 8007a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	dd02      	ble.n	8007aa6 <_dbg_check_leave_isr+0x16>
 8007aa0:	4b06      	ldr	r3, [pc, #24]	; (8007abc <_dbg_check_leave_isr+0x2c>)
 8007aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa4:	b113      	cbz	r3, 8007aac <_dbg_check_leave_isr+0x1c>
    chSysHalt("SV#9");
 8007aa6:	4806      	ldr	r0, [pc, #24]	; (8007ac0 <_dbg_check_leave_isr+0x30>)
 8007aa8:	f7ff fde2 	bl	8007670 <chSysHalt>
  }
  ch.dbg.isr_cnt--;
 8007aac:	4a03      	ldr	r2, [pc, #12]	; (8007abc <_dbg_check_leave_isr+0x2c>)
 8007aae:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 8007aba:	bd08      	pop	{r3, pc}
 8007abc:	20004f68 	.word	0x20004f68
 8007ac0:	08015c3c 	.word	0x08015c3c
 8007ac4:	f3af 8000 	nop.w
 8007ac8:	f3af 8000 	nop.w
 8007acc:	f3af 8000 	nop.w

08007ad0 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
 8007ad0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8007ad2:	4b06      	ldr	r3, [pc, #24]	; (8007aec <chDbgCheckClassI+0x1c>)
 8007ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	db03      	blt.n	8007ae2 <chDbgCheckClassI+0x12>
 8007ada:	4b04      	ldr	r3, [pc, #16]	; (8007aec <chDbgCheckClassI+0x1c>)
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	dc02      	bgt.n	8007ae8 <chDbgCheckClassI+0x18>
    chSysHalt("SV#10");
 8007ae2:	4803      	ldr	r0, [pc, #12]	; (8007af0 <chDbgCheckClassI+0x20>)
 8007ae4:	f7ff fdc4 	bl	8007670 <chSysHalt>
  }
}
 8007ae8:	bd08      	pop	{r3, pc}
 8007aea:	bf00      	nop
 8007aec:	20004f68 	.word	0x20004f68
 8007af0:	08015c44 	.word	0x08015c44
 8007af4:	f3af 8000 	nop.w
 8007af8:	f3af 8000 	nop.w
 8007afc:	f3af 8000 	nop.w

08007b00 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8007b00:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8007b02:	4b05      	ldr	r3, [pc, #20]	; (8007b18 <chDbgCheckClassS+0x18>)
 8007b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b06:	b91b      	cbnz	r3, 8007b10 <chDbgCheckClassS+0x10>
 8007b08:	4b03      	ldr	r3, [pc, #12]	; (8007b18 <chDbgCheckClassS+0x18>)
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dc02      	bgt.n	8007b16 <chDbgCheckClassS+0x16>
    chSysHalt("SV#11");
 8007b10:	4802      	ldr	r0, [pc, #8]	; (8007b1c <chDbgCheckClassS+0x1c>)
 8007b12:	f7ff fdad 	bl	8007670 <chSysHalt>
  }
}
 8007b16:	bd08      	pop	{r3, pc}
 8007b18:	20004f68 	.word	0x20004f68
 8007b1c:	08015c4c 	.word	0x08015c4c

08007b20 <trace_next>:
 *
 * @notapi
 */
static NOINLINE void trace_next(void) {

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8007b20:	4b0c      	ldr	r3, [pc, #48]	; (8007b54 <trace_next+0x34>)
 8007b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007b28:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007b2a:	6051      	str	r1, [r2, #4]
 8007b2c:	4a0a      	ldr	r2, [pc, #40]	; (8007b58 <trace_next+0x38>)
 8007b2e:	6850      	ldr	r0, [r2, #4]
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8007b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b32:	6811      	ldr	r1, [r2, #0]
 8007b34:	f360 211f 	bfi	r1, r0, #8, #24
 8007b38:	6011      	str	r1, [r2, #0]
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 8007b3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b3c:	3210      	adds	r2, #16
 8007b3e:	649a      	str	r2, [r3, #72]	; 0x48
 8007b40:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d304      	bcc.n	8007b52 <trace_next+0x32>
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 8007b48:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8007b4c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007b50:	649a      	str	r2, [r3, #72]	; 0x48
  }
}
 8007b52:	4770      	bx	lr
 8007b54:	20004f68 	.word	0x20004f68
 8007b58:	e0001000 	.word	0xe0001000
 8007b5c:	f3af 8000 	nop.w

08007b60 <_trace_init>:
 * @note    Internal use only.
 */
void _trace_init(void) {
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 8007b60:	4b0d      	ldr	r3, [pc, #52]	; (8007b98 <_trace_init+0x38>)
 8007b62:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8007b66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
 8007b6a:	2280      	movs	r2, #128	; 0x80
 8007b6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8007b70:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007b74:	649a      	str	r2, [r3, #72]	; 0x48
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8007b76:	2300      	movs	r3, #0
 8007b78:	e00a      	b.n	8007b90 <_trace_init+0x30>
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 8007b7a:	1c5a      	adds	r2, r3, #1
 8007b7c:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <_trace_init+0x38>)
 8007b7e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007b82:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 8007b86:	f36f 0102 	bfc	r1, #0, #3
 8007b8a:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8007b8e:	4613      	mov	r3, r2
 8007b90:	2b7f      	cmp	r3, #127	; 0x7f
 8007b92:	d9f2      	bls.n	8007b7a <_trace_init+0x1a>
  }
}
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	20004f68 	.word	0x20004f68
 8007b9c:	f3af 8000 	nop.w

08007ba0 <_trace_switch>:
 */
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 8007ba0:	4b0f      	ldr	r3, [pc, #60]	; (8007be0 <_trace_switch+0x40>)
 8007ba2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ba6:	f013 0f01 	tst.w	r3, #1
 8007baa:	d000      	beq.n	8007bae <_trace_switch+0xe>
 8007bac:	4770      	bx	lr
void _trace_switch(thread_t *ntp, thread_t *otp) {
 8007bae:	b510      	push	{r4, lr}
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8007bb0:	4b0b      	ldr	r3, [pc, #44]	; (8007be0 <_trace_switch+0x40>)
 8007bb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bb4:	7810      	ldrb	r0, [r2, #0]
 8007bb6:	2401      	movs	r4, #1
 8007bb8:	f364 0002 	bfi	r0, r4, #0, #3
 8007bbc:	7010      	strb	r0, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
 8007bbe:	f891 4020 	ldrb.w	r4, [r1, #32]
 8007bc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bc4:	7810      	ldrb	r0, [r2, #0]
 8007bc6:	f364 00c7 	bfi	r0, r4, #3, #5
 8007bca:	7010      	strb	r0, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 8007bcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bce:	6998      	ldr	r0, [r3, #24]
 8007bd0:	6090      	str	r0, [r2, #8]
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8007bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8007bd6:	60da      	str	r2, [r3, #12]
    trace_next();
 8007bd8:	f7ff ffa2 	bl	8007b20 <trace_next>
  }
}
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	bf00      	nop
 8007be0:	20004f68 	.word	0x20004f68
 8007be4:	f3af 8000 	nop.w
 8007be8:	f3af 8000 	nop.w
 8007bec:	f3af 8000 	nop.w

08007bf0 <_trace_isr_enter>:
 *
 * @notapi
 */
void _trace_isr_enter(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8007bf0:	4b0f      	ldr	r3, [pc, #60]	; (8007c30 <_trace_isr_enter+0x40>)
 8007bf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007bf6:	f013 0f02 	tst.w	r3, #2
 8007bfa:	d000      	beq.n	8007bfe <_trace_isr_enter+0xe>
 8007bfc:	4770      	bx	lr
void _trace_isr_enter(const char *isr) {
 8007bfe:	b510      	push	{r4, lr}
 8007c00:	2320      	movs	r3, #32
 8007c02:	f383 8811 	msr	BASEPRI, r3
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8007c06:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <_trace_isr_enter+0x40>)
 8007c08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c0a:	7811      	ldrb	r1, [r2, #0]
 8007c0c:	2402      	movs	r4, #2
 8007c0e:	f364 0102 	bfi	r1, r4, #0, #3
 8007c12:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
 8007c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c16:	7811      	ldrb	r1, [r2, #0]
 8007c18:	f36f 01c7 	bfc	r1, #3, #5
 8007c1c:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8007c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c20:	6098      	str	r0, [r3, #8]
    trace_next();
 8007c22:	f7ff ff7d 	bl	8007b20 <trace_next>
 8007c26:	2300      	movs	r3, #0
 8007c28:	f383 8811 	msr	BASEPRI, r3
    port_unlock_from_isr();
  }
}
 8007c2c:	bd10      	pop	{r4, pc}
 8007c2e:	bf00      	nop
 8007c30:	20004f68 	.word	0x20004f68
 8007c34:	f3af 8000 	nop.w
 8007c38:	f3af 8000 	nop.w
 8007c3c:	f3af 8000 	nop.w

08007c40 <_trace_isr_leave>:
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8007c40:	4b0f      	ldr	r3, [pc, #60]	; (8007c80 <_trace_isr_leave+0x40>)
 8007c42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c46:	f013 0f02 	tst.w	r3, #2
 8007c4a:	d000      	beq.n	8007c4e <_trace_isr_leave+0xe>
 8007c4c:	4770      	bx	lr
void _trace_isr_leave(const char *isr) {
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	2320      	movs	r3, #32
 8007c52:	f383 8811 	msr	BASEPRI, r3
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8007c56:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <_trace_isr_leave+0x40>)
 8007c58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c5a:	7811      	ldrb	r1, [r2, #0]
 8007c5c:	2403      	movs	r4, #3
 8007c5e:	f364 0102 	bfi	r1, r4, #0, #3
 8007c62:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
 8007c64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c66:	7811      	ldrb	r1, [r2, #0]
 8007c68:	f36f 01c7 	bfc	r1, #3, #5
 8007c6c:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8007c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c70:	6098      	str	r0, [r3, #8]
    trace_next();
 8007c72:	f7ff ff55 	bl	8007b20 <trace_next>
 8007c76:	2300      	movs	r3, #0
 8007c78:	f383 8811 	msr	BASEPRI, r3
    port_unlock_from_isr();
  }
}
 8007c7c:	bd10      	pop	{r4, pc}
 8007c7e:	bf00      	nop
 8007c80:	20004f68 	.word	0x20004f68
 8007c84:	f3af 8000 	nop.w
 8007c88:	f3af 8000 	nop.w
 8007c8c:	f3af 8000 	nop.w

08007c90 <_trace_halt>:
 *
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
 8007c90:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <_trace_halt+0x34>)
 8007c92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c96:	f013 0f04 	tst.w	r3, #4
 8007c9a:	d000      	beq.n	8007c9e <_trace_halt+0xe>
 8007c9c:	4770      	bx	lr
void _trace_halt(const char *reason) {
 8007c9e:	b510      	push	{r4, lr}
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 8007ca0:	4b08      	ldr	r3, [pc, #32]	; (8007cc4 <_trace_halt+0x34>)
 8007ca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ca4:	7811      	ldrb	r1, [r2, #0]
 8007ca6:	2404      	movs	r4, #4
 8007ca8:	f364 0102 	bfi	r1, r4, #0, #3
 8007cac:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->state         = 0;
 8007cae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cb0:	7811      	ldrb	r1, [r2, #0]
 8007cb2:	f36f 01c7 	bfc	r1, #3, #5
 8007cb6:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
 8007cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cba:	6098      	str	r0, [r3, #8]
    trace_next();
 8007cbc:	f7ff ff30 	bl	8007b20 <trace_next>
  }
}
 8007cc0:	bd10      	pop	{r4, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20004f68 	.word	0x20004f68
 8007cc8:	f3af 8000 	nop.w
 8007ccc:	f3af 8000 	nop.w

08007cd0 <chDbgWriteTraceI>:
 * @param[in] up1       user parameter 1
 * @param[in] up2       user parameter 2
 *
 * @iclass
 */
void chDbgWriteTraceI(void *up1, void *up2) {
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	460c      	mov	r4, r1

  chDbgCheckClassI();
 8007cd6:	f7ff fefb 	bl	8007ad0 <chDbgCheckClassI>

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_USER) == 0U) {
 8007cda:	4b0d      	ldr	r3, [pc, #52]	; (8007d10 <chDbgWriteTraceI+0x40>)
 8007cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ce0:	f013 0f08 	tst.w	r3, #8
 8007ce4:	d000      	beq.n	8007ce8 <chDbgWriteTraceI+0x18>
    ch.dbg.trace_buffer.ptr->state      = 0;
    ch.dbg.trace_buffer.ptr->u.user.up1 = up1;
    ch.dbg.trace_buffer.ptr->u.user.up2 = up2;
    trace_next();
  }
}
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
    ch.dbg.trace_buffer.ptr->type       = CH_TRACE_TYPE_USER;
 8007ce8:	4b09      	ldr	r3, [pc, #36]	; (8007d10 <chDbgWriteTraceI+0x40>)
 8007cea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cec:	7811      	ldrb	r1, [r2, #0]
 8007cee:	2005      	movs	r0, #5
 8007cf0:	f360 0102 	bfi	r1, r0, #0, #3
 8007cf4:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->state      = 0;
 8007cf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cf8:	7811      	ldrb	r1, [r2, #0]
 8007cfa:	f36f 01c7 	bfc	r1, #3, #5
 8007cfe:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.user.up1 = up1;
 8007d00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d02:	6095      	str	r5, [r2, #8]
    ch.dbg.trace_buffer.ptr->u.user.up2 = up2;
 8007d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d06:	60dc      	str	r4, [r3, #12]
    trace_next();
 8007d08:	f7ff ff0a 	bl	8007b20 <trace_next>
}
 8007d0c:	e7eb      	b.n	8007ce6 <chDbgWriteTraceI+0x16>
 8007d0e:	bf00      	nop
 8007d10:	20004f68 	.word	0x20004f68
 8007d14:	f3af 8000 	nop.w
 8007d18:	f3af 8000 	nop.w
 8007d1c:	f3af 8000 	nop.w

08007d20 <chDbgWriteTrace>:
 * @param[in] up1       user parameter 1
 * @param[in] up2       user parameter 2
 *
 * @api
 */
void chDbgWriteTrace(void *up1, void *up2) {
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	4604      	mov	r4, r0
 8007d24:	460d      	mov	r5, r1
 8007d26:	2320      	movs	r3, #32
 8007d28:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8007d2c:	f001 f930 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8007d30:	f7ff fe2e 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chDbgWriteTraceI(up1, up2);
 8007d34:	4629      	mov	r1, r5
 8007d36:	4620      	mov	r0, r4
 8007d38:	f7ff ffca 	bl	8007cd0 <chDbgWriteTraceI>
  _dbg_check_unlock();
 8007d3c:	f7ff fe40 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8007d40:	f001 f92e 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007d44:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <chDbgWriteTrace+0x48>)
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d004      	beq.n	8007d56 <chDbgWriteTrace+0x36>
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	6899      	ldr	r1, [r3, #8]
 8007d50:	6893      	ldr	r3, [r2, #8]
 8007d52:	4299      	cmp	r1, r3
 8007d54:	d303      	bcc.n	8007d5e <chDbgWriteTrace+0x3e>
 8007d56:	2300      	movs	r3, #0
 8007d58:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8007d5c:	bd38      	pop	{r3, r4, r5, pc}
 8007d5e:	4803      	ldr	r0, [pc, #12]	; (8007d6c <chDbgWriteTrace+0x4c>)
 8007d60:	f7ff fc86 	bl	8007670 <chSysHalt>
 8007d64:	e7f7      	b.n	8007d56 <chDbgWriteTrace+0x36>
 8007d66:	bf00      	nop
 8007d68:	20004f68 	.word	0x20004f68
 8007d6c:	0801502c 	.word	0x0801502c

08007d70 <chDbgSuspendTraceI>:
 *
 * @param[in] mask      mask of the trace events to be suspended
 *
 * @iclass
 */
void chDbgSuspendTraceI(uint16_t mask) {
 8007d70:	b510      	push	{r4, lr}
 8007d72:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8007d74:	f7ff feac 	bl	8007ad0 <chDbgCheckClassI>

  ch.dbg.trace_buffer.suspended |= mask;
 8007d78:	4b03      	ldr	r3, [pc, #12]	; (8007d88 <chDbgSuspendTraceI+0x18>)
 8007d7a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8007d7e:	4314      	orrs	r4, r2
 8007d80:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
}
 8007d84:	bd10      	pop	{r4, pc}
 8007d86:	bf00      	nop
 8007d88:	20004f68 	.word	0x20004f68
 8007d8c:	f3af 8000 	nop.w

08007d90 <chDbgSuspendTrace>:
 *
 * @param[in] mask      mask of the trace events to be suspended
 *
 * @api
 */
void chDbgSuspendTrace(uint16_t mask) {
 8007d90:	b510      	push	{r4, lr}
 8007d92:	4604      	mov	r4, r0
 8007d94:	2320      	movs	r3, #32
 8007d96:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8007d9a:	f001 f8f9 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8007d9e:	f7ff fdf7 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chDbgSuspendTraceI(mask);
 8007da2:	4620      	mov	r0, r4
 8007da4:	f7ff ffe4 	bl	8007d70 <chDbgSuspendTraceI>
  _dbg_check_unlock();
 8007da8:	f7ff fe0a 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8007dac:	f001 f8f8 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007db0:	4b08      	ldr	r3, [pc, #32]	; (8007dd4 <chDbgSuspendTrace+0x44>)
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d004      	beq.n	8007dc2 <chDbgSuspendTrace+0x32>
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	6899      	ldr	r1, [r3, #8]
 8007dbc:	6893      	ldr	r3, [r2, #8]
 8007dbe:	4299      	cmp	r1, r3
 8007dc0:	d303      	bcc.n	8007dca <chDbgSuspendTrace+0x3a>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8007dc8:	bd10      	pop	{r4, pc}
 8007dca:	4803      	ldr	r0, [pc, #12]	; (8007dd8 <chDbgSuspendTrace+0x48>)
 8007dcc:	f7ff fc50 	bl	8007670 <chSysHalt>
 8007dd0:	e7f7      	b.n	8007dc2 <chDbgSuspendTrace+0x32>
 8007dd2:	bf00      	nop
 8007dd4:	20004f68 	.word	0x20004f68
 8007dd8:	0801502c 	.word	0x0801502c
 8007ddc:	f3af 8000 	nop.w

08007de0 <chDbgResumeTraceI>:
 *
 * @param[in] mask      mask of the trace events to be resumed
 *
 * @iclass
 */
void chDbgResumeTraceI(uint16_t mask) {
 8007de0:	b510      	push	{r4, lr}
 8007de2:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8007de4:	f7ff fe74 	bl	8007ad0 <chDbgCheckClassI>

  ch.dbg.trace_buffer.suspended &= ~mask;
 8007de8:	4b03      	ldr	r3, [pc, #12]	; (8007df8 <chDbgResumeTraceI+0x18>)
 8007dea:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
 8007dee:	ea20 0004 	bic.w	r0, r0, r4
 8007df2:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
}
 8007df6:	bd10      	pop	{r4, pc}
 8007df8:	20004f68 	.word	0x20004f68
 8007dfc:	f3af 8000 	nop.w

08007e00 <chDbgResumeTrace>:
 *
 * @param[in] mask      mask of the trace events to be resumed
 *
 * @api
 */
void chDbgResumeTrace(uint16_t mask) {
 8007e00:	b510      	push	{r4, lr}
 8007e02:	4604      	mov	r4, r0
 8007e04:	2320      	movs	r3, #32
 8007e06:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8007e0a:	f001 f8c1 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8007e0e:	f7ff fdbf 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chDbgResumeTraceI(mask);
 8007e12:	4620      	mov	r0, r4
 8007e14:	f7ff ffe4 	bl	8007de0 <chDbgResumeTraceI>
  _dbg_check_unlock();
 8007e18:	f7ff fdd2 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8007e1c:	f001 f8c0 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007e20:	4b08      	ldr	r3, [pc, #32]	; (8007e44 <chDbgResumeTrace+0x44>)
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d004      	beq.n	8007e32 <chDbgResumeTrace+0x32>
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	6899      	ldr	r1, [r3, #8]
 8007e2c:	6893      	ldr	r3, [r2, #8]
 8007e2e:	4299      	cmp	r1, r3
 8007e30:	d303      	bcc.n	8007e3a <chDbgResumeTrace+0x3a>
 8007e32:	2300      	movs	r3, #0
 8007e34:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8007e38:	bd10      	pop	{r4, pc}
 8007e3a:	4803      	ldr	r0, [pc, #12]	; (8007e48 <chDbgResumeTrace+0x48>)
 8007e3c:	f7ff fc18 	bl	8007670 <chSysHalt>
 8007e40:	e7f7      	b.n	8007e32 <chDbgResumeTrace+0x32>
 8007e42:	bf00      	nop
 8007e44:	20004f68 	.word	0x20004f68
 8007e48:	0801502c 	.word	0x0801502c
 8007e4c:	00000000 	.word	0x00000000

08007e50 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8007e50:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <_vt_init+0x1c>)
 8007e52:	f103 0220 	add.w	r2, r3, #32
 8007e56:	621a      	str	r2, [r3, #32]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8007e58:	625a      	str	r2, [r3, #36]	; 0x24
  ch.vtlist.delta = (sysinterval_t)-1;
 8007e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8007e62:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8007e66:	2200      	movs	r2, #0
 8007e68:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8007e6a:	4770      	bx	lr
 8007e6c:	20004f68 	.word	0x20004f68

08007e70 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 8007e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e74:	4605      	mov	r5, r0
 8007e76:	4616      	mov	r6, r2
 8007e78:	461f      	mov	r7, r3
 8007e7a:	9c08      	ldr	r4, [sp, #32]
  virtual_timer_t *p;
  sysinterval_t delta;

  chDbgCheckClassI();
 8007e7c:	f7ff fe28 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8007e80:	b11d      	cbz	r5, 8007e8a <chVTDoSetI+0x1a>
 8007e82:	b114      	cbz	r4, 8007e8a <chVTDoSetI+0x1a>
 8007e84:	ea56 0307 	orrs.w	r3, r6, r7
 8007e88:	d102      	bne.n	8007e90 <chVTDoSetI+0x20>
 8007e8a:	4841      	ldr	r0, [pc, #260]	; (8007f90 <chVTDoSetI+0x120>)
 8007e8c:	f7ff fbf0 	bl	8007670 <chSysHalt>

  vtp->par = par;
 8007e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e92:	616b      	str	r3, [r5, #20]
  vtp->func = vtfunc;
 8007e94:	612c      	str	r4, [r5, #16]
 8007e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8007e9c:	2f00      	cmp	r7, #0
 8007e9e:	bf08      	it	eq
 8007ea0:	2e02      	cmpeq	r6, #2
 8007ea2:	d318      	bcc.n	8007ed6 <chVTDoSetI+0x66>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8007ea4:	4b3b      	ldr	r3, [pc, #236]	; (8007f94 <chVTDoSetI+0x124>)
 8007ea6:	f853 4f20 	ldr.w	r4, [r3, #32]!
 8007eaa:	429c      	cmp	r4, r3
 8007eac:	d016      	beq.n	8007edc <chVTDoSetI+0x6c>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8007eae:	4b39      	ldr	r3, [pc, #228]	; (8007f94 <chVTDoSetI+0x124>)
 8007eb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
  return (sysinterval_t)((systime_t)(end - start));
 8007eb2:	1a52      	subs	r2, r2, r1
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	eb16 0802 	adds.w	r8, r6, r2
 8007eba:	eb47 0903 	adc.w	r9, r7, r3

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8007ebe:	4599      	cmp	r9, r3
 8007ec0:	bf08      	it	eq
 8007ec2:	4590      	cmpeq	r8, r2
 8007ec4:	d222      	bcs.n	8007f0c <chVTDoSetI+0x9c>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8007ec6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007eca:	ebb8 0802 	subs.w	r8, r8, r2
 8007ece:	eb69 0903 	sbc.w	r9, r9, r3
      p = p->next;
 8007ed2:	6824      	ldr	r4, [r4, #0]
 8007ed4:	e035      	b.n	8007f42 <chVTDoSetI+0xd2>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8007ed6:	2602      	movs	r6, #2
 8007ed8:	2700      	movs	r7, #0
 8007eda:	e7e3      	b.n	8007ea4 <chVTDoSetI+0x34>
      ch.vtlist.lasttime = now;
 8007edc:	4b2d      	ldr	r3, [pc, #180]	; (8007f94 <chVTDoSetI+0x124>)
 8007ede:	631a      	str	r2, [r3, #48]	; 0x30
      ch.vtlist.next = vtp;
 8007ee0:	621d      	str	r5, [r3, #32]
      ch.vtlist.prev = vtp;
 8007ee2:	625d      	str	r5, [r3, #36]	; 0x24
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8007ee4:	3320      	adds	r3, #32
 8007ee6:	602b      	str	r3, [r5, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8007ee8:	606b      	str	r3, [r5, #4]
      vtp->delta = delay;
 8007eea:	e9c5 6702 	strd	r6, r7, [r5, #8]
      if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 8007eee:	2f01      	cmp	r7, #1
 8007ef0:	bf08      	it	eq
 8007ef2:	2e00      	cmpeq	r6, #0
 8007ef4:	d307      	bcc.n	8007f06 <chVTDoSetI+0x96>
      port_timer_start_alarm(chTimeAddX(ch.vtlist.lasttime, delay));
 8007ef6:	3b20      	subs	r3, #32
 8007ef8:	6b18      	ldr	r0, [r3, #48]	; 0x30
        delay = (sysinterval_t)TIME_MAX_SYSTIME;
 8007efa:	f04f 36ff 	mov.w	r6, #4294967295
  stStartAlarm(time);
 8007efe:	4430      	add	r0, r6
 8007f00:	f7f8 fb0e 	bl	8000520 <stStartAlarm>
 8007f04:	e041      	b.n	8007f8a <chVTDoSetI+0x11a>
      port_timer_start_alarm(chTimeAddX(ch.vtlist.lasttime, delay));
 8007f06:	4b23      	ldr	r3, [pc, #140]	; (8007f94 <chVTDoSetI+0x124>)
 8007f08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f0a:	e7f8      	b.n	8007efe <chVTDoSetI+0x8e>
    }
    else if (delta < p->delta) {
 8007f0c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007f10:	4599      	cmp	r9, r3
 8007f12:	bf08      	it	eq
 8007f14:	4590      	cmpeq	r8, r2
 8007f16:	d214      	bcs.n	8007f42 <chVTDoSetI+0xd2>
      /* A small delay that will become the first element in the delta list
         and next deadline.*/
      deadline_delta = delta;
#if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
      /* The delta could be too large for the physical timer to handle.*/
      if (deadline_delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 8007f18:	f1b9 0f01 	cmp.w	r9, #1
 8007f1c:	bf08      	it	eq
 8007f1e:	f1b8 0f00 	cmpeq.w	r8, #0
 8007f22:	d305      	bcc.n	8007f30 <chVTDoSetI+0xc0>
        deadline_delta = (sysinterval_t)TIME_MAX_SYSTIME;
 8007f24:	f04f 30ff 	mov.w	r0, #4294967295
  stSetAlarm(time);
 8007f28:	4408      	add	r0, r1
 8007f2a:	f7f8 fb19 	bl	8000560 <stSetAlarm>
 8007f2e:	e008      	b.n	8007f42 <chVTDoSetI+0xd2>
      deadline_delta = delta;
 8007f30:	4640      	mov	r0, r8
 8007f32:	e7f9      	b.n	8007f28 <chVTDoSetI+0xb8>
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
 8007f34:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007f38:	ebb8 0802 	subs.w	r8, r8, r2
 8007f3c:	eb69 0903 	sbc.w	r9, r9, r3
    p = p->next;
 8007f40:	6824      	ldr	r4, [r4, #0]
  while (p->delta < delta) {
 8007f42:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007f46:	454b      	cmp	r3, r9
 8007f48:	bf08      	it	eq
 8007f4a:	4542      	cmpeq	r2, r8
 8007f4c:	d205      	bcs.n	8007f5a <chVTDoSetI+0xea>
    chDbgAssert(p != vtp, "timer already armed");
 8007f4e:	42ac      	cmp	r4, r5
 8007f50:	d1f0      	bne.n	8007f34 <chVTDoSetI+0xc4>
 8007f52:	480f      	ldr	r0, [pc, #60]	; (8007f90 <chVTDoSetI+0x120>)
 8007f54:	f7ff fb8c 	bl	8007670 <chSysHalt>
 8007f58:	e7ec      	b.n	8007f34 <chVTDoSetI+0xc4>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 8007f5a:	602c      	str	r4, [r5, #0]
  vtp->prev = vtp->next->prev;
 8007f5c:	6863      	ldr	r3, [r4, #4]
 8007f5e:	606b      	str	r3, [r5, #4]
  vtp->prev->next = vtp;
 8007f60:	601d      	str	r5, [r3, #0]
  p->prev = vtp;
 8007f62:	6065      	str	r5, [r4, #4]
  vtp->delta = delta;
 8007f64:	e9c5 8902 	strd	r8, r9, [r5, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8007f68:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007f6c:	ebb2 0208 	subs.w	r2, r2, r8
 8007f70:	eb63 0309 	sbc.w	r3, r3, r9
 8007f74:	4616      	mov	r6, r2
 8007f76:	461f      	mov	r7, r3
 8007f78:	e9c4 6702 	strd	r6, r7, [r4, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <chVTDoSetI+0x124>)
 8007f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f82:	f04f 31ff 	mov.w	r1, #4294967295
 8007f86:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
}
 8007f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f8e:	bf00      	nop
 8007f90:	08015038 	.word	0x08015038
 8007f94:	20004f68 	.word	0x20004f68
 8007f98:	f3af 8000 	nop.w
 8007f9c:	f3af 8000 	nop.w

08007fa0 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8007fa4:	f7ff fd94 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
 8007fa8:	b1dc      	cbz	r4, 8007fe2 <chVTDoResetI+0x42>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 8007faa:	6923      	ldr	r3, [r4, #16]
 8007fac:	b1eb      	cbz	r3, 8007fea <chVTDoResetI+0x4a>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8007fae:	4b32      	ldr	r3, [pc, #200]	; (8008078 <chVTDoResetI+0xd8>)
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	42a3      	cmp	r3, r4
 8007fb4:	d01d      	beq.n	8007ff2 <chVTDoResetI+0x52>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8007fb6:	6863      	ldr	r3, [r4, #4]
 8007fb8:	6822      	ldr	r2, [r4, #0]
 8007fba:	601a      	str	r2, [r3, #0]
    vtp->next->prev = vtp->prev;
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	6862      	ldr	r2, [r4, #4]
 8007fc0:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	6123      	str	r3, [r4, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	4a2c      	ldr	r2, [pc, #176]	; (800807c <chVTDoResetI+0xdc>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d008      	beq.n	8007fe0 <chVTDoResetI+0x40>
      vtp->next->delta += vtp->delta;
 8007fce:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
 8007fd2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007fd6:	1906      	adds	r6, r0, r4
 8007fd8:	eb41 0705 	adc.w	r7, r1, r5
 8007fdc:	e9c3 6702 	strd	r6, r7, [r3, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8007fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(vtp != NULL);
 8007fe2:	4827      	ldr	r0, [pc, #156]	; (8008080 <chVTDoResetI+0xe0>)
 8007fe4:	f7ff fb44 	bl	8007670 <chSysHalt>
 8007fe8:	e7df      	b.n	8007faa <chVTDoResetI+0xa>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 8007fea:	4825      	ldr	r0, [pc, #148]	; (8008080 <chVTDoResetI+0xe0>)
 8007fec:	f7ff fb40 	bl	8007670 <chSysHalt>
 8007ff0:	e7dd      	b.n	8007fae <chVTDoResetI+0xe>
  ch.vtlist.next = vtp->next;
 8007ff2:	6821      	ldr	r1, [r4, #0]
 8007ff4:	4a20      	ldr	r2, [pc, #128]	; (8008078 <chVTDoResetI+0xd8>)
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	f843 1f20 	str.w	r1, [r3, #32]!
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8007ffc:	604b      	str	r3, [r1, #4]
  vtp->func = NULL;
 8007ffe:	2100      	movs	r1, #0
 8008000:	6121      	str	r1, [r4, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8008002:	6a12      	ldr	r2, [r2, #32]
 8008004:	429a      	cmp	r2, r3
 8008006:	d024      	beq.n	8008052 <chVTDoResetI+0xb2>
  ch.vtlist.next->delta += vtp->delta;
 8008008:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
 800800c:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8008010:	1906      	adds	r6, r0, r4
 8008012:	eb41 0705 	adc.w	r7, r1, r5
 8008016:	e9c2 6702 	strd	r6, r7, [r2, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 800801a:	4917      	ldr	r1, [pc, #92]	; (8008078 <chVTDoResetI+0xd8>)
 800801c:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800801e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008024:	1b92      	subs	r2, r2, r6
 8008026:	2300      	movs	r3, #0
  if (nowdelta >= ch.vtlist.next->delta) {
 8008028:	6a09      	ldr	r1, [r1, #32]
 800802a:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
 800802e:	42ab      	cmp	r3, r5
 8008030:	bf08      	it	eq
 8008032:	42a2      	cmpeq	r2, r4
 8008034:	d2d4      	bcs.n	8007fe0 <chVTDoResetI+0x40>
  delta = ch.vtlist.next->delta - nowdelta;
 8008036:	1aa0      	subs	r0, r4, r2
 8008038:	eb65 0103 	sbc.w	r1, r5, r3
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800803c:	2900      	cmp	r1, #0
 800803e:	bf08      	it	eq
 8008040:	2802      	cmpeq	r0, #2
 8008042:	d309      	bcc.n	8008058 <chVTDoResetI+0xb8>
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 8008044:	2d01      	cmp	r5, #1
 8008046:	bf08      	it	eq
 8008048:	2c00      	cmpeq	r4, #0
 800804a:	d308      	bcc.n	800805e <chVTDoResetI+0xbe>
      delta = (sysinterval_t)TIME_MAX_SYSTIME;
 800804c:	f04f 34ff 	mov.w	r4, #4294967295
 8008050:	e009      	b.n	8008066 <chVTDoResetI+0xc6>
  stStopAlarm();
 8008052:	f7f8 fa7d 	bl	8000550 <stStopAlarm>
 8008056:	e7c3      	b.n	8007fe0 <chVTDoResetI+0x40>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8008058:	1c94      	adds	r4, r2, #2
 800805a:	f143 0500 	adc.w	r5, r3, #0
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 800805e:	2d01      	cmp	r5, #1
 8008060:	bf08      	it	eq
 8008062:	2c00      	cmpeq	r4, #0
 8008064:	d203      	bcs.n	800806e <chVTDoResetI+0xce>
  stSetAlarm(time);
 8008066:	1930      	adds	r0, r6, r4
 8008068:	f7f8 fa7a 	bl	8000560 <stSetAlarm>
 800806c:	e7b8      	b.n	8007fe0 <chVTDoResetI+0x40>
 800806e:	4805      	ldr	r0, [pc, #20]	; (8008084 <chVTDoResetI+0xe4>)
 8008070:	f7ff fafe 	bl	8007670 <chSysHalt>
 8008074:	e7f7      	b.n	8008066 <chVTDoResetI+0xc6>
 8008076:	bf00      	nop
 8008078:	20004f68 	.word	0x20004f68
 800807c:	20004f88 	.word	0x20004f88
 8008080:	08015044 	.word	0x08015044
 8008084:	08015054 	.word	0x08015054
	...

08008090 <_scheduler_init>:
  tqp->next = (thread_t *)tqp;
 8008090:	4b03      	ldr	r3, [pc, #12]	; (80080a0 <_scheduler_init+0x10>)
 8008092:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8008094:	605b      	str	r3, [r3, #4]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 8008096:	2200      	movs	r2, #0
 8008098:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 800809a:	611b      	str	r3, [r3, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 800809c:	615b      	str	r3, [r3, #20]
#endif
}
 800809e:	4770      	bx	lr
 80080a0:	20004f68 	.word	0x20004f68
 80080a4:	f3af 8000 	nop.w
 80080a8:	f3af 8000 	nop.w
 80080ac:	f3af 8000 	nop.w

080080b0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80080b0:	b510      	push	{r4, lr}
 80080b2:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 80080b4:	f7ff fd0c 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 80080b8:	b1bc      	cbz	r4, 80080ea <chSchReadyI+0x3a>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 80080ba:	f894 3020 	ldrb.w	r3, [r4, #32]
 80080be:	b10b      	cbz	r3, 80080c4 <chSchReadyI+0x14>
 80080c0:	2b0f      	cmp	r3, #15
 80080c2:	d102      	bne.n	80080ca <chSchReadyI+0x1a>
 80080c4:	480b      	ldr	r0, [pc, #44]	; (80080f4 <chSchReadyI+0x44>)
 80080c6:	f7ff fad3 	bl	8007670 <chSysHalt>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80080ca:	2300      	movs	r3, #0
 80080cc:	f884 3020 	strb.w	r3, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80080d0:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <chSchReadyI+0x48>)
  do {
    cp = cp->queue.next;
 80080d2:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80080d4:	6899      	ldr	r1, [r3, #8]
 80080d6:	68a2      	ldr	r2, [r4, #8]
 80080d8:	4291      	cmp	r1, r2
 80080da:	d2fa      	bcs.n	80080d2 <chSchReadyI+0x22>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80080dc:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 80080e2:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80080e4:	605c      	str	r4, [r3, #4]

  return tp;
}
 80080e6:	4620      	mov	r0, r4
 80080e8:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 80080ea:	4802      	ldr	r0, [pc, #8]	; (80080f4 <chSchReadyI+0x44>)
 80080ec:	f7ff fac0 	bl	8007670 <chSysHalt>
 80080f0:	e7e3      	b.n	80080ba <chSchReadyI+0xa>
 80080f2:	bf00      	nop
 80080f4:	08015060 	.word	0x08015060
 80080f8:	20004f68 	.word	0x20004f68
 80080fc:	f3af 8000 	nop.w

08008100 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4604      	mov	r4, r0
 8008104:	2320      	movs	r3, #32
 8008106:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800810a:	f000 ff51 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800810e:	f7ff fc6f 	bl	80079f0 <_dbg_check_lock_from_isr>
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8008112:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008116:	2b07      	cmp	r3, #7
 8008118:	d81d      	bhi.n	8008156 <wakeup+0x56>
 800811a:	e8df f003 	tbb	[pc, r3]
 800811e:	1c04      	.short	0x1c04
 8008120:	10160c1c 	.word	0x10160c1c
 8008124:	161c      	.short	0x161c
  _dbg_check_unlock_from_isr();
 8008126:	f7ff fc7b 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800812a:	f000 ff49 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 800812e:	2300      	movs	r3, #0
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	e01c      	b.n	8008170 <wakeup+0x70>
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8008136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
    break;
 800813c:	e00b      	b.n	8008156 <wakeup+0x56>
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800813e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8008140:	f7ff fcc6 	bl	8007ad0 <chDbgCheckClassI>

  sp->cnt++;
 8008144:	68ab      	ldr	r3, [r5, #8]
 8008146:	3301      	adds	r3, #1
 8008148:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800814a:	6863      	ldr	r3, [r4, #4]
 800814c:	6822      	ldr	r2, [r4, #0]
 800814e:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	6862      	ldr	r2, [r4, #4]
 8008154:	605a      	str	r2, [r3, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8008156:	f04f 33ff 	mov.w	r3, #4294967295
 800815a:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 800815c:	4620      	mov	r0, r4
 800815e:	f7ff ffa7 	bl	80080b0 <chSchReadyI>
  _dbg_check_unlock_from_isr();
 8008162:	f7ff fc5d 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8008166:	f000 ff2b 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 800816a:	2300      	movs	r3, #0
 800816c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlockFromISR();
}
 8008170:	bd38      	pop	{r3, r4, r5, pc}
 8008172:	bf00      	nop
 8008174:	f3af 8000 	nop.w
 8008178:	f3af 8000 	nop.w
 800817c:	f3af 8000 	nop.w

08008180 <chSchReadyAheadI>:
thread_t *chSchReadyAheadI(thread_t *tp) {
 8008180:	b510      	push	{r4, lr}
 8008182:	4604      	mov	r4, r0
  chDbgCheckClassI();
 8008184:	f7ff fca4 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8008188:	b1bc      	cbz	r4, 80081ba <chSchReadyAheadI+0x3a>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 800818a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800818e:	b10b      	cbz	r3, 8008194 <chSchReadyAheadI+0x14>
 8008190:	2b0f      	cmp	r3, #15
 8008192:	d102      	bne.n	800819a <chSchReadyAheadI+0x1a>
 8008194:	480b      	ldr	r0, [pc, #44]	; (80081c4 <chSchReadyAheadI+0x44>)
 8008196:	f7ff fa6b 	bl	8007670 <chSysHalt>
  tp->state = CH_STATE_READY;
 800819a:	2300      	movs	r3, #0
 800819c:	f884 3020 	strb.w	r3, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80081a0:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <chSchReadyAheadI+0x48>)
    cp = cp->queue.next;
 80081a2:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80081a4:	6899      	ldr	r1, [r3, #8]
 80081a6:	68a2      	ldr	r2, [r4, #8]
 80081a8:	4291      	cmp	r1, r2
 80081aa:	d8fa      	bhi.n	80081a2 <chSchReadyAheadI+0x22>
  tp->queue.next             = cp;
 80081ac:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 80081b2:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80081b4:	605c      	str	r4, [r3, #4]
}
 80081b6:	4620      	mov	r0, r4
 80081b8:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 80081ba:	4802      	ldr	r0, [pc, #8]	; (80081c4 <chSchReadyAheadI+0x44>)
 80081bc:	f7ff fa58 	bl	8007670 <chSysHalt>
 80081c0:	e7e3      	b.n	800818a <chSchReadyAheadI+0xa>
 80081c2:	bf00      	nop
 80081c4:	0801506c 	.word	0x0801506c
 80081c8:	20004f68 	.word	0x20004f68
 80081cc:	f3af 8000 	nop.w

080081d0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 80081d0:	b570      	push	{r4, r5, r6, lr}
 80081d2:	4606      	mov	r6, r0
  thread_t *otp = currp;
 80081d4:	4c12      	ldr	r4, [pc, #72]	; (8008220 <chSchGoSleepS+0x50>)
 80081d6:	69a5      	ldr	r5, [r4, #24]
  chDbgCheckClassS();
 80081d8:	f7ff fc92 	bl	8007b00 <chDbgCheckClassS>
  otp->state = newstate;
 80081dc:	f885 6020 	strb.w	r6, [r5, #32]
  thread_t *tp = tqp->next;
 80081e0:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 80081e2:	6803      	ldr	r3, [r0, #0]
 80081e4:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80081e6:	605c      	str	r4, [r3, #4]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80081e8:	61a0      	str	r0, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 80081ea:	2301      	movs	r3, #1
 80081ec:	f880 3020 	strb.w	r3, [r0, #32]
  chSysSwitch(currp, otp);
 80081f0:	4629      	mov	r1, r5
 80081f2:	f7ff fcd5 	bl	8007ba0 <_trace_switch>
 80081f6:	4629      	mov	r1, r5
 80081f8:	69a0      	ldr	r0, [r4, #24]
 80081fa:	f000 feb1 	bl	8008f60 <_stats_ctxswc>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80081fe:	f3ef 8309 	mrs	r3, PSP
 8008202:	3b24      	subs	r3, #36	; 0x24
 8008204:	69ea      	ldr	r2, [r5, #28]
 8008206:	4293      	cmp	r3, r2
 8008208:	d305      	bcc.n	8008216 <chSchGoSleepS+0x46>
 800820a:	4629      	mov	r1, r5
 800820c:	4b04      	ldr	r3, [pc, #16]	; (8008220 <chSchGoSleepS+0x50>)
 800820e:	6998      	ldr	r0, [r3, #24]
 8008210:	f7f8 f866 	bl	80002e0 <_port_switch>
}
 8008214:	bd70      	pop	{r4, r5, r6, pc}
  chSysSwitch(currp, otp);
 8008216:	4803      	ldr	r0, [pc, #12]	; (8008224 <chSchGoSleepS+0x54>)
 8008218:	f7ff fa2a 	bl	8007670 <chSysHalt>
 800821c:	e7f5      	b.n	800820a <chSchGoSleepS+0x3a>
 800821e:	bf00      	nop
 8008220:	20004f68 	.word	0x20004f68
 8008224:	08015c54 	.word	0x08015c54
 8008228:	f3af 8000 	nop.w
 800822c:	f3af 8000 	nop.w

08008230 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	4606      	mov	r6, r0
 8008236:	4614      	mov	r4, r2
 8008238:	461d      	mov	r5, r3

  chDbgCheckClassS();
 800823a:	f7ff fc61 	bl	8007b00 <chDbgCheckClassS>

  if (TIME_INFINITE != timeout) {
 800823e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008242:	bf08      	it	eq
 8008244:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8008248:	d018      	beq.n	800827c <chSchGoSleepTimeoutS+0x4c>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 800824a:	4b0e      	ldr	r3, [pc, #56]	; (8008284 <chSchGoSleepTimeoutS+0x54>)
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	4b0d      	ldr	r3, [pc, #52]	; (8008288 <chSchGoSleepTimeoutS+0x58>)
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	4622      	mov	r2, r4
 8008256:	462b      	mov	r3, r5
 8008258:	a802      	add	r0, sp, #8
 800825a:	f7ff fe09 	bl	8007e70 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800825e:	4630      	mov	r0, r6
 8008260:	f7ff ffb6 	bl	80081d0 <chSchGoSleepS>
  chDbgCheckClassI();
 8008264:	f7ff fc34 	bl	8007ad0 <chDbgCheckClassI>
  return (bool)(vtp->func != NULL);
 8008268:	9b06      	ldr	r3, [sp, #24]
    if (chVTIsArmedI(&vt)) {
 800826a:	b113      	cbz	r3, 8008272 <chSchGoSleepTimeoutS+0x42>
      chVTDoResetI(&vt);
 800826c:	a802      	add	r0, sp, #8
 800826e:	f7ff fe97 	bl	8007fa0 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 8008272:	4b04      	ldr	r3, [pc, #16]	; (8008284 <chSchGoSleepTimeoutS+0x54>)
 8008274:	699b      	ldr	r3, [r3, #24]
}
 8008276:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008278:	b008      	add	sp, #32
 800827a:	bd70      	pop	{r4, r5, r6, pc}
    chSchGoSleepS(newstate);
 800827c:	4630      	mov	r0, r6
 800827e:	f7ff ffa7 	bl	80081d0 <chSchGoSleepS>
 8008282:	e7f6      	b.n	8008272 <chSchGoSleepTimeoutS+0x42>
 8008284:	20004f68 	.word	0x20004f68
 8008288:	08008101 	.word	0x08008101
 800828c:	f3af 8000 	nop.w

08008290 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8008290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008292:	4604      	mov	r4, r0
 8008294:	460f      	mov	r7, r1
  thread_t *otp = currp;
 8008296:	4d1c      	ldr	r5, [pc, #112]	; (8008308 <chSchWakeupS+0x78>)
 8008298:	69ae      	ldr	r6, [r5, #24]

  chDbgCheckClassS();
 800829a:	f7ff fc31 	bl	8007b00 <chDbgCheckClassS>

  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800829e:	682b      	ldr	r3, [r5, #0]
 80082a0:	42ab      	cmp	r3, r5
 80082a2:	d004      	beq.n	80082ae <chSchWakeupS+0x1e>
 80082a4:	69aa      	ldr	r2, [r5, #24]
 80082a6:	6892      	ldr	r2, [r2, #8]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d320      	bcc.n	80082f0 <chSchWakeupS+0x60>
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 80082ae:	6267      	str	r7, [r4, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 80082b0:	68a2      	ldr	r2, [r4, #8]
 80082b2:	68b3      	ldr	r3, [r6, #8]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d91f      	bls.n	80082f8 <chSchWakeupS+0x68>
    (void) chSchReadyI(ntp);
  }
  else {
    otp = chSchReadyAheadI(otp);
 80082b8:	4630      	mov	r0, r6
 80082ba:	f7ff ff61 	bl	8008180 <chSchReadyAheadI>
 80082be:	4605      	mov	r5, r0
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 80082c0:	4b11      	ldr	r3, [pc, #68]	; (8008308 <chSchWakeupS+0x78>)
 80082c2:	619c      	str	r4, [r3, #24]
    ntp->state = CH_STATE_CURRENT;
 80082c4:	2301      	movs	r3, #1
 80082c6:	f884 3020 	strb.w	r3, [r4, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 80082ca:	4601      	mov	r1, r0
 80082cc:	4620      	mov	r0, r4
 80082ce:	f7ff fc67 	bl	8007ba0 <_trace_switch>
 80082d2:	4629      	mov	r1, r5
 80082d4:	4620      	mov	r0, r4
 80082d6:	f000 fe43 	bl	8008f60 <_stats_ctxswc>
 80082da:	f3ef 8309 	mrs	r3, PSP
 80082de:	3b24      	subs	r3, #36	; 0x24
 80082e0:	69ea      	ldr	r2, [r5, #28]
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d30c      	bcc.n	8008300 <chSchWakeupS+0x70>
 80082e6:	4629      	mov	r1, r5
 80082e8:	4620      	mov	r0, r4
 80082ea:	f7f7 fff9 	bl	80002e0 <_port_switch>
  }
}
 80082ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80082f0:	4806      	ldr	r0, [pc, #24]	; (800830c <chSchWakeupS+0x7c>)
 80082f2:	f7ff f9bd 	bl	8007670 <chSysHalt>
 80082f6:	e7da      	b.n	80082ae <chSchWakeupS+0x1e>
    (void) chSchReadyI(ntp);
 80082f8:	4620      	mov	r0, r4
 80082fa:	f7ff fed9 	bl	80080b0 <chSchReadyI>
 80082fe:	e7f6      	b.n	80082ee <chSchWakeupS+0x5e>
    chSysSwitch(ntp, otp);
 8008300:	4803      	ldr	r0, [pc, #12]	; (8008310 <chSchWakeupS+0x80>)
 8008302:	f7ff f9b5 	bl	8007670 <chSysHalt>
 8008306:	e7ee      	b.n	80082e6 <chSchWakeupS+0x56>
 8008308:	20004f68 	.word	0x20004f68
 800830c:	08015080 	.word	0x08015080
 8008310:	08015c54 	.word	0x08015c54
 8008314:	f3af 8000 	nop.w
 8008318:	f3af 8000 	nop.w
 800831c:	f3af 8000 	nop.w

08008320 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8008320:	4b04      	ldr	r3, [pc, #16]	; (8008334 <chSchIsPreemptionRequired+0x14>)
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	6890      	ldr	r0, [r2, #8]
  tprio_t p2 = currp->prio;
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	689b      	ldr	r3, [r3, #8]
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 800832a:	4298      	cmp	r0, r3
 800832c:	bf94      	ite	ls
 800832e:	2000      	movls	r0, #0
 8008330:	2001      	movhi	r0, #1
 8008332:	4770      	bx	lr
 8008334:	20004f68 	.word	0x20004f68
 8008338:	f3af 8000 	nop.w
 800833c:	f3af 8000 	nop.w

08008340 <chSchDoRescheduleBehind>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 8008340:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8008342:	4c12      	ldr	r4, [pc, #72]	; (800838c <chSchDoRescheduleBehind+0x4c>)
 8008344:	69a0      	ldr	r0, [r4, #24]
  thread_t *tp = tqp->next;
 8008346:	6823      	ldr	r3, [r4, #0]
  tqp->next             = tp->queue.next;
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800834c:	6054      	str	r4, [r2, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 800834e:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 8008350:	2201      	movs	r2, #1
 8008352:	f883 2020 	strb.w	r2, [r3, #32]
  /* It went behind peers so it gets a new time quantum.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);
 8008356:	f7ff feab 	bl	80080b0 <chSchReadyI>
 800835a:	4605      	mov	r5, r0

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800835c:	4601      	mov	r1, r0
 800835e:	69a0      	ldr	r0, [r4, #24]
 8008360:	f7ff fc1e 	bl	8007ba0 <_trace_switch>
 8008364:	4629      	mov	r1, r5
 8008366:	69a0      	ldr	r0, [r4, #24]
 8008368:	f000 fdfa 	bl	8008f60 <_stats_ctxswc>
 800836c:	f3ef 8309 	mrs	r3, PSP
 8008370:	3b24      	subs	r3, #36	; 0x24
 8008372:	69ea      	ldr	r2, [r5, #28]
 8008374:	4293      	cmp	r3, r2
 8008376:	d305      	bcc.n	8008384 <chSchDoRescheduleBehind+0x44>
 8008378:	4629      	mov	r1, r5
 800837a:	4b04      	ldr	r3, [pc, #16]	; (800838c <chSchDoRescheduleBehind+0x4c>)
 800837c:	6998      	ldr	r0, [r3, #24]
 800837e:	f7f7 ffaf 	bl	80002e0 <_port_switch>
}
 8008382:	bd38      	pop	{r3, r4, r5, pc}
  chSysSwitch(currp, otp);
 8008384:	4802      	ldr	r0, [pc, #8]	; (8008390 <chSchDoRescheduleBehind+0x50>)
 8008386:	f7ff f973 	bl	8007670 <chSysHalt>
 800838a:	e7f5      	b.n	8008378 <chSchDoRescheduleBehind+0x38>
 800838c:	20004f68 	.word	0x20004f68
 8008390:	08015c54 	.word	0x08015c54
 8008394:	f3af 8000 	nop.w
 8008398:	f3af 8000 	nop.w
 800839c:	f3af 8000 	nop.w

080083a0 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 80083a0:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 80083a2:	4c12      	ldr	r4, [pc, #72]	; (80083ec <chSchDoRescheduleAhead+0x4c>)
 80083a4:	69a0      	ldr	r0, [r4, #24]
  thread_t *tp = tqp->next;
 80083a6:	6823      	ldr	r3, [r4, #0]
  tqp->next             = tp->queue.next;
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80083ac:	6054      	str	r4, [r2, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 80083ae:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2020 	strb.w	r2, [r3, #32]
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 80083b6:	f7ff fee3 	bl	8008180 <chSchReadyAheadI>
 80083ba:	4605      	mov	r5, r0

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80083bc:	4601      	mov	r1, r0
 80083be:	69a0      	ldr	r0, [r4, #24]
 80083c0:	f7ff fbee 	bl	8007ba0 <_trace_switch>
 80083c4:	4629      	mov	r1, r5
 80083c6:	69a0      	ldr	r0, [r4, #24]
 80083c8:	f000 fdca 	bl	8008f60 <_stats_ctxswc>
 80083cc:	f3ef 8309 	mrs	r3, PSP
 80083d0:	3b24      	subs	r3, #36	; 0x24
 80083d2:	69ea      	ldr	r2, [r5, #28]
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d305      	bcc.n	80083e4 <chSchDoRescheduleAhead+0x44>
 80083d8:	4629      	mov	r1, r5
 80083da:	4b04      	ldr	r3, [pc, #16]	; (80083ec <chSchDoRescheduleAhead+0x4c>)
 80083dc:	6998      	ldr	r0, [r3, #24]
 80083de:	f7f7 ff7f 	bl	80002e0 <_port_switch>
}
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
  chSysSwitch(currp, otp);
 80083e4:	4802      	ldr	r0, [pc, #8]	; (80083f0 <chSchDoRescheduleAhead+0x50>)
 80083e6:	f7ff f943 	bl	8007670 <chSysHalt>
 80083ea:	e7f5      	b.n	80083d8 <chSchDoRescheduleAhead+0x38>
 80083ec:	20004f68 	.word	0x20004f68
 80083f0:	08015c54 	.word	0x08015c54
 80083f4:	f3af 8000 	nop.w
 80083f8:	f3af 8000 	nop.w
 80083fc:	f3af 8000 	nop.w

08008400 <chSchRescheduleS>:
void chSchRescheduleS(void) {
 8008400:	b508      	push	{r3, lr}
  chDbgCheckClassS();
 8008402:	f7ff fb7d 	bl	8007b00 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8008406:	f7ff fb63 	bl	8007ad0 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
 800840a:	4b05      	ldr	r3, [pc, #20]	; (8008420 <chSchRescheduleS+0x20>)
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	6892      	ldr	r2, [r2, #8]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	689b      	ldr	r3, [r3, #8]
  if (chSchIsRescRequiredI()) {
 8008414:	429a      	cmp	r2, r3
 8008416:	d800      	bhi.n	800841a <chSchRescheduleS+0x1a>
}
 8008418:	bd08      	pop	{r3, pc}
    chSchDoRescheduleAhead();
 800841a:	f7ff ffc1 	bl	80083a0 <chSchDoRescheduleAhead>
}
 800841e:	e7fb      	b.n	8008418 <chSchRescheduleS+0x18>
 8008420:	20004f68 	.word	0x20004f68
 8008424:	f3af 8000 	nop.w
 8008428:	f3af 8000 	nop.w
 800842c:	f3af 8000 	nop.w

08008430 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8008430:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8008432:	4c12      	ldr	r4, [pc, #72]	; (800847c <chSchDoReschedule+0x4c>)
 8008434:	69a0      	ldr	r0, [r4, #24]
  thread_t *tp = tqp->next;
 8008436:	6823      	ldr	r3, [r4, #0]
  tqp->next             = tp->queue.next;
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800843c:	6054      	str	r4, [r2, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 800843e:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2020 	strb.w	r2, [r3, #32]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 8008446:	f7ff fe9b 	bl	8008180 <chSchReadyAheadI>
 800844a:	4605      	mov	r5, r0
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800844c:	4601      	mov	r1, r0
 800844e:	69a0      	ldr	r0, [r4, #24]
 8008450:	f7ff fba6 	bl	8007ba0 <_trace_switch>
 8008454:	4629      	mov	r1, r5
 8008456:	69a0      	ldr	r0, [r4, #24]
 8008458:	f000 fd82 	bl	8008f60 <_stats_ctxswc>
 800845c:	f3ef 8309 	mrs	r3, PSP
 8008460:	3b24      	subs	r3, #36	; 0x24
 8008462:	69ea      	ldr	r2, [r5, #28]
 8008464:	4293      	cmp	r3, r2
 8008466:	d305      	bcc.n	8008474 <chSchDoReschedule+0x44>
 8008468:	4629      	mov	r1, r5
 800846a:	4b04      	ldr	r3, [pc, #16]	; (800847c <chSchDoReschedule+0x4c>)
 800846c:	6998      	ldr	r0, [r3, #24]
 800846e:	f7f7 ff37 	bl	80002e0 <_port_switch>
}
 8008472:	bd38      	pop	{r3, r4, r5, pc}
  chSysSwitch(currp, otp);
 8008474:	4802      	ldr	r0, [pc, #8]	; (8008480 <chSchDoReschedule+0x50>)
 8008476:	f7ff f8fb 	bl	8007670 <chSysHalt>
 800847a:	e7f5      	b.n	8008468 <chSchDoReschedule+0x38>
 800847c:	20004f68 	.word	0x20004f68
 8008480:	08015c54 	.word	0x08015c54
	...

08008490 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 8008490:	b510      	push	{r4, lr}
 8008492:	4604      	mov	r4, r0

  tp->prio      = prio;
 8008494:	6082      	str	r2, [r0, #8]
  tp->state     = CH_STATE_WTSTART;
 8008496:	2302      	movs	r3, #2
 8008498:	f880 3020 	strb.w	r3, [r0, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 800849c:	2300      	movs	r3, #0
 800849e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 80084a2:	63c2      	str	r2, [r0, #60]	; 0x3c
  tp->mtxlist   = NULL;
 80084a4:	6383      	str	r3, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 80084a6:	6343      	str	r3, [r0, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80084a8:	2301      	movs	r3, #1
 80084aa:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  tp->name      = name;
 80084ae:	6181      	str	r1, [r0, #24]
  REG_INSERT(tp);
 80084b0:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <_thread_init+0x44>)
 80084b2:	6103      	str	r3, [r0, #16]
 80084b4:	695a      	ldr	r2, [r3, #20]
 80084b6:	6142      	str	r2, [r0, #20]
 80084b8:	6110      	str	r0, [r2, #16]
 80084ba:	6158      	str	r0, [r3, #20]
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 80084bc:	f100 0328 	add.w	r3, r0, #40	; 0x28
  tlp->next = (thread_t *)tlp;
 80084c0:	6283      	str	r3, [r0, #40]	; 0x28
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 80084c2:	f100 032c 	add.w	r3, r0, #44	; 0x2c
  tqp->next = (thread_t *)tqp;
 80084c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 80084c8:	6303      	str	r3, [r0, #48]	; 0x30
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
 80084ca:	3048      	adds	r0, #72	; 0x48
 80084cc:	f000 fca8 	bl	8008e20 <chTMObjectInit>
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
}
 80084d0:	4620      	mov	r0, r4
 80084d2:	bd10      	pop	{r4, pc}
 80084d4:	20004f68 	.word	0x20004f68
 80084d8:	f3af 8000 	nop.w
 80084dc:	f3af 8000 	nop.w

080084e0 <_thread_memfill>:
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80084e0:	e001      	b.n	80084e6 <_thread_memfill+0x6>
    *startp++ = v;
 80084e2:	7002      	strb	r2, [r0, #0]
 80084e4:	3001      	adds	r0, #1
  while (startp < endp) {
 80084e6:	4288      	cmp	r0, r1
 80084e8:	d3fb      	bcc.n	80084e2 <_thread_memfill+0x2>
  }
}
 80084ea:	4770      	bx	lr
 80084ec:	f3af 8000 	nop.w

080084f0 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80084f0:	b510      	push	{r4, lr}
 80084f2:	4604      	mov	r4, r0
  thread_t *tp;

  chDbgCheckClassI();
 80084f4:	f7ff faec 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(tdp != NULL);
 80084f8:	b374      	cbz	r4, 8008558 <chThdCreateSuspendedI+0x68>
  chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 80084fa:	6863      	ldr	r3, [r4, #4]
 80084fc:	f013 0f07 	tst.w	r3, #7
 8008500:	d108      	bne.n	8008514 <chThdCreateSuspendedI+0x24>
 8008502:	68a2      	ldr	r2, [r4, #8]
 8008504:	f012 0f07 	tst.w	r2, #7
 8008508:	d104      	bne.n	8008514 <chThdCreateSuspendedI+0x24>
 800850a:	4293      	cmp	r3, r2
 800850c:	d202      	bcs.n	8008514 <chThdCreateSuspendedI+0x24>
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	2be7      	cmp	r3, #231	; 0xe7
 8008512:	d802      	bhi.n	800851a <chThdCreateSuspendedI+0x2a>
 8008514:	4812      	ldr	r0, [pc, #72]	; (8008560 <chThdCreateSuspendedI+0x70>)
 8008516:	f7ff f8ab 	bl	8007670 <chSysHalt>
             MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
             (tdp->wend > tdp->wbase) &&
             (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
 800851a:	68e3      	ldr	r3, [r4, #12]
 800851c:	2bff      	cmp	r3, #255	; 0xff
 800851e:	d801      	bhi.n	8008524 <chThdCreateSuspendedI+0x34>
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	b913      	cbnz	r3, 800852a <chThdCreateSuspendedI+0x3a>
 8008524:	480e      	ldr	r0, [pc, #56]	; (8008560 <chThdCreateSuspendedI+0x70>)
 8008526:	f7ff f8a3 	bl	8007670 <chSysHalt>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 800852a:	68a0      	ldr	r0, [r4, #8]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 800852c:	6863      	ldr	r3, [r4, #4]
 800852e:	f840 3c44 	str.w	r3, [r0, #-68]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8008532:	f1a0 0384 	sub.w	r3, r0, #132	; 0x84
 8008536:	f840 3c54 	str.w	r3, [r0, #-84]
 800853a:	6922      	ldr	r2, [r4, #16]
 800853c:	f840 2c84 	str.w	r2, [r0, #-132]
 8008540:	6962      	ldr	r2, [r4, #20]
 8008542:	f840 2c80 	str.w	r2, [r0, #-128]
 8008546:	4a07      	ldr	r2, [pc, #28]	; (8008564 <chThdCreateSuspendedI+0x74>)
 8008548:	f840 2c64 	str.w	r2, [r0, #-100]

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 800854c:	68e2      	ldr	r2, [r4, #12]
 800854e:	6821      	ldr	r1, [r4, #0]
 8008550:	3860      	subs	r0, #96	; 0x60
 8008552:	f7ff ff9d 	bl	8008490 <_thread_init>
}
 8008556:	bd10      	pop	{r4, pc}
  chDbgCheck(tdp != NULL);
 8008558:	4801      	ldr	r0, [pc, #4]	; (8008560 <chThdCreateSuspendedI+0x70>)
 800855a:	f7ff f889 	bl	8007670 <chSysHalt>
 800855e:	e7cc      	b.n	80084fa <chThdCreateSuspendedI+0xa>
 8008560:	08015090 	.word	0x08015090
 8008564:	080002f1 	.word	0x080002f1
 8008568:	f3af 8000 	nop.w
 800856c:	f3af 8000 	nop.w

08008570 <chThdCreateSuspended>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp) {
 8008570:	b510      	push	{r4, lr}
 8008572:	4604      	mov	r4, r0
  thread_t *tp;

#if CH_CFG_USE_REGISTRY == TRUE
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 8008574:	6840      	ldr	r0, [r0, #4]
 8008576:	f000 fdbb 	bl	80090f0 <chRegFindThreadByWorkingArea>
 800857a:	b110      	cbz	r0, 8008582 <chThdCreateSuspended+0x12>
 800857c:	4814      	ldr	r0, [pc, #80]	; (80085d0 <chThdCreateSuspended+0x60>)
 800857e:	f7ff f877 	bl	8007670 <chSysHalt>
              "working area in use");
#endif

#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)tdp->wbase,
 8008582:	2255      	movs	r2, #85	; 0x55
 8008584:	68a1      	ldr	r1, [r4, #8]
 8008586:	6860      	ldr	r0, [r4, #4]
 8008588:	f7ff ffaa 	bl	80084e0 <_thread_memfill>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800858c:	2320      	movs	r3, #32
 800858e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008592:	f000 fcfd 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008596:	f7ff f9fb 	bl	8007990 <_dbg_check_lock>
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
 800859a:	4620      	mov	r0, r4
 800859c:	f7ff ffa8 	bl	80084f0 <chThdCreateSuspendedI>
 80085a0:	4604      	mov	r4, r0
  _dbg_check_unlock();
 80085a2:	f7ff fa0d 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80085a6:	f000 fcfb 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80085aa:	4b0a      	ldr	r3, [pc, #40]	; (80085d4 <chThdCreateSuspended+0x64>)
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d004      	beq.n	80085bc <chThdCreateSuspended+0x4c>
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	6899      	ldr	r1, [r3, #8]
 80085b6:	6893      	ldr	r3, [r2, #8]
 80085b8:	4299      	cmp	r1, r3
 80085ba:	d304      	bcc.n	80085c6 <chThdCreateSuspended+0x56>
 80085bc:	2300      	movs	r3, #0
 80085be:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 80085c2:	4620      	mov	r0, r4
 80085c4:	bd10      	pop	{r4, pc}
 80085c6:	4804      	ldr	r0, [pc, #16]	; (80085d8 <chThdCreateSuspended+0x68>)
 80085c8:	f7ff f852 	bl	8007670 <chSysHalt>
 80085cc:	e7f6      	b.n	80085bc <chThdCreateSuspended+0x4c>
 80085ce:	bf00      	nop
 80085d0:	080150a8 	.word	0x080150a8
 80085d4:	20004f68 	.word	0x20004f68
 80085d8:	080150c0 	.word	0x080150c0
 80085dc:	f3af 8000 	nop.w

080085e0 <chThdCreateI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 80085e0:	b508      	push	{r3, lr}

  return chSchReadyI(chThdCreateSuspendedI(tdp));
 80085e2:	f7ff ff85 	bl	80084f0 <chThdCreateSuspendedI>
 80085e6:	f7ff fd63 	bl	80080b0 <chSchReadyI>
}
 80085ea:	bd08      	pop	{r3, pc}
 80085ec:	f3af 8000 	nop.w

080085f0 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 80085f0:	b510      	push	{r4, lr}
 80085f2:	4604      	mov	r4, r0
  thread_t *tp;

#if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
    ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 80085f4:	6840      	ldr	r0, [r0, #4]
 80085f6:	f000 fd7b 	bl	80090f0 <chRegFindThreadByWorkingArea>
 80085fa:	b110      	cbz	r0, 8008602 <chThdCreate+0x12>
 80085fc:	4815      	ldr	r0, [pc, #84]	; (8008654 <chThdCreate+0x64>)
 80085fe:	f7ff f837 	bl	8007670 <chSysHalt>
              "working area in use");
#endif

#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)tdp->wbase,
 8008602:	2255      	movs	r2, #85	; 0x55
 8008604:	68a1      	ldr	r1, [r4, #8]
 8008606:	6860      	ldr	r0, [r4, #4]
 8008608:	f7ff ff6a 	bl	80084e0 <_thread_memfill>
 800860c:	2320      	movs	r3, #32
 800860e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008612:	f000 fcbd 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008616:	f7ff f9bb 	bl	8007990 <_dbg_check_lock>
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
 800861a:	4620      	mov	r0, r4
 800861c:	f7ff ff68 	bl	80084f0 <chThdCreateSuspendedI>
 8008620:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8008622:	2100      	movs	r1, #0
 8008624:	f7ff fe34 	bl	8008290 <chSchWakeupS>
  _dbg_check_unlock();
 8008628:	f7ff f9ca 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800862c:	f000 fcb8 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008630:	4b09      	ldr	r3, [pc, #36]	; (8008658 <chThdCreate+0x68>)
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	429a      	cmp	r2, r3
 8008636:	d004      	beq.n	8008642 <chThdCreate+0x52>
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	6899      	ldr	r1, [r3, #8]
 800863c:	6893      	ldr	r3, [r2, #8]
 800863e:	4299      	cmp	r1, r3
 8008640:	d304      	bcc.n	800864c <chThdCreate+0x5c>
 8008642:	2300      	movs	r3, #0
 8008644:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8008648:	4620      	mov	r0, r4
 800864a:	bd10      	pop	{r4, pc}
 800864c:	4803      	ldr	r0, [pc, #12]	; (800865c <chThdCreate+0x6c>)
 800864e:	f7ff f80f 	bl	8007670 <chSysHalt>
 8008652:	e7f6      	b.n	8008642 <chThdCreate+0x52>
 8008654:	080150cc 	.word	0x080150cc
 8008658:	20004f68 	.word	0x20004f68
 800865c:	080150c0 	.word	0x080150c0

08008660 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8008660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008662:	460c      	mov	r4, r1
 8008664:	4616      	mov	r6, r2
 8008666:	461f      	mov	r7, r3
  thread_t *tp;

  chDbgCheck((wsp != NULL) &&
 8008668:	4605      	mov	r5, r0
 800866a:	b150      	cbz	r0, 8008682 <chThdCreateStatic+0x22>
 800866c:	f010 0f07 	tst.w	r0, #7
 8008670:	d107      	bne.n	8008682 <chThdCreateStatic+0x22>
 8008672:	29e7      	cmp	r1, #231	; 0xe7
 8008674:	d905      	bls.n	8008682 <chThdCreateStatic+0x22>
 8008676:	f011 0f07 	tst.w	r1, #7
 800867a:	d102      	bne.n	8008682 <chThdCreateStatic+0x22>
 800867c:	2aff      	cmp	r2, #255	; 0xff
 800867e:	d800      	bhi.n	8008682 <chThdCreateStatic+0x22>
 8008680:	b913      	cbnz	r3, 8008688 <chThdCreateStatic+0x28>
 8008682:	4821      	ldr	r0, [pc, #132]	; (8008708 <chThdCreateStatic+0xa8>)
 8008684:	f7fe fff4 	bl	8007670 <chSysHalt>
             MEM_IS_ALIGNED(size, PORT_STACK_ALIGN) &&
             (prio <= HIGHPRIO) && (pf != NULL));

#if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
    ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
  chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 8008688:	4628      	mov	r0, r5
 800868a:	f000 fd31 	bl	80090f0 <chRegFindThreadByWorkingArea>
 800868e:	b110      	cbz	r0, 8008696 <chThdCreateStatic+0x36>
 8008690:	481d      	ldr	r0, [pc, #116]	; (8008708 <chThdCreateStatic+0xa8>)
 8008692:	f7fe ffed 	bl	8007670 <chSysHalt>
              "working area in use");
#endif

#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 8008696:	2255      	movs	r2, #85	; 0x55
 8008698:	1929      	adds	r1, r5, r4
 800869a:	4628      	mov	r0, r5
 800869c:	f7ff ff20 	bl	80084e0 <_thread_memfill>
 80086a0:	2320      	movs	r3, #32
 80086a2:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80086a6:	f000 fc73 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80086aa:	f7ff f971 	bl	8007990 <_dbg_check_lock>
  chSysLock();

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 80086ae:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
 80086b2:	4428      	add	r0, r5
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 80086b4:	61c5      	str	r5, [r0, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80086b6:	f1a0 0324 	sub.w	r3, r0, #36	; 0x24
 80086ba:	60c3      	str	r3, [r0, #12]
 80086bc:	f840 7c24 	str.w	r7, [r0, #-36]
 80086c0:	9a06      	ldr	r2, [sp, #24]
 80086c2:	f840 2c20 	str.w	r2, [r0, #-32]
 80086c6:	4a11      	ldr	r2, [pc, #68]	; (800870c <chThdCreateStatic+0xac>)
 80086c8:	f840 2c04 	str.w	r2, [r0, #-4]

  tp = _thread_init(tp, "noname", prio);
 80086cc:	4632      	mov	r2, r6
 80086ce:	4910      	ldr	r1, [pc, #64]	; (8008710 <chThdCreateStatic+0xb0>)
 80086d0:	f7ff fede 	bl	8008490 <_thread_init>
 80086d4:	4604      	mov	r4, r0

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 80086d6:	2100      	movs	r1, #0
 80086d8:	f7ff fdda 	bl	8008290 <chSchWakeupS>
  _dbg_check_unlock();
 80086dc:	f7ff f970 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80086e0:	f000 fc5e 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80086e4:	4b0b      	ldr	r3, [pc, #44]	; (8008714 <chThdCreateStatic+0xb4>)
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d004      	beq.n	80086f6 <chThdCreateStatic+0x96>
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	6899      	ldr	r1, [r3, #8]
 80086f0:	6893      	ldr	r3, [r2, #8]
 80086f2:	4299      	cmp	r1, r3
 80086f4:	d304      	bcc.n	8008700 <chThdCreateStatic+0xa0>
 80086f6:	2300      	movs	r3, #0
 80086f8:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 80086fc:	4620      	mov	r0, r4
 80086fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008700:	4805      	ldr	r0, [pc, #20]	; (8008718 <chThdCreateStatic+0xb8>)
 8008702:	f7fe ffb5 	bl	8007670 <chSysHalt>
 8008706:	e7f6      	b.n	80086f6 <chThdCreateStatic+0x96>
 8008708:	080150d8 	.word	0x080150d8
 800870c:	080002f1 	.word	0x080002f1
 8008710:	08015c64 	.word	0x08015c64
 8008714:	20004f68 	.word	0x20004f68
 8008718:	080150c0 	.word	0x080150c0
 800871c:	f3af 8000 	nop.w

08008720 <chThdStart>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdStart(thread_t *tp) {
 8008720:	b510      	push	{r4, lr}
 8008722:	4604      	mov	r4, r0
 8008724:	2320      	movs	r3, #32
 8008726:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800872a:	f000 fc31 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800872e:	f7ff f92f 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 8008732:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d002      	beq.n	8008740 <chThdStart+0x20>
 800873a:	480e      	ldr	r0, [pc, #56]	; (8008774 <chThdStart+0x54>)
 800873c:	f7fe ff98 	bl	8007670 <chSysHalt>
  chSchWakeupS(tp, MSG_OK);
 8008740:	2100      	movs	r1, #0
 8008742:	4620      	mov	r0, r4
 8008744:	f7ff fda4 	bl	8008290 <chSchWakeupS>
  _dbg_check_unlock();
 8008748:	f7ff f93a 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800874c:	f000 fc28 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008750:	4b09      	ldr	r3, [pc, #36]	; (8008778 <chThdStart+0x58>)
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	429a      	cmp	r2, r3
 8008756:	d004      	beq.n	8008762 <chThdStart+0x42>
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	6899      	ldr	r1, [r3, #8]
 800875c:	6893      	ldr	r3, [r2, #8]
 800875e:	4299      	cmp	r1, r3
 8008760:	d304      	bcc.n	800876c <chThdStart+0x4c>
 8008762:	2300      	movs	r3, #0
 8008764:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8008768:	4620      	mov	r0, r4
 800876a:	bd10      	pop	{r4, pc}
 800876c:	4803      	ldr	r0, [pc, #12]	; (800877c <chThdStart+0x5c>)
 800876e:	f7fe ff7f 	bl	8007670 <chSysHalt>
 8008772:	e7f6      	b.n	8008762 <chThdStart+0x42>
 8008774:	080150ec 	.word	0x080150ec
 8008778:	20004f68 	.word	0x20004f68
 800877c:	080150c0 	.word	0x080150c0

08008780 <chThdAddRef>:
 * @return              The same thread pointer passed as parameter
 *                      representing the new reference.
 *
 * @api
 */
thread_t *chThdAddRef(thread_t *tp) {
 8008780:	b510      	push	{r4, lr}
 8008782:	4604      	mov	r4, r0
 8008784:	2320      	movs	r3, #32
 8008786:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800878a:	f000 fc01 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800878e:	f7ff f8ff 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(tp->refs < (trefs_t)255, "too many references");
 8008792:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8008796:	2bff      	cmp	r3, #255	; 0xff
 8008798:	d016      	beq.n	80087c8 <chThdAddRef+0x48>
  tp->refs++;
 800879a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800879e:	3301      	adds	r3, #1
 80087a0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _dbg_check_unlock();
 80087a4:	f7ff f90c 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80087a8:	f000 fbfa 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80087ac:	4b0a      	ldr	r3, [pc, #40]	; (80087d8 <chThdAddRef+0x58>)
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d004      	beq.n	80087be <chThdAddRef+0x3e>
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	6899      	ldr	r1, [r3, #8]
 80087b8:	6893      	ldr	r3, [r2, #8]
 80087ba:	4299      	cmp	r1, r3
 80087bc:	d308      	bcc.n	80087d0 <chThdAddRef+0x50>
 80087be:	2300      	movs	r3, #0
 80087c0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 80087c4:	4620      	mov	r0, r4
 80087c6:	bd10      	pop	{r4, pc}
  chDbgAssert(tp->refs < (trefs_t)255, "too many references");
 80087c8:	4804      	ldr	r0, [pc, #16]	; (80087dc <chThdAddRef+0x5c>)
 80087ca:	f7fe ff51 	bl	8007670 <chSysHalt>
 80087ce:	e7e4      	b.n	800879a <chThdAddRef+0x1a>
 80087d0:	4803      	ldr	r0, [pc, #12]	; (80087e0 <chThdAddRef+0x60>)
 80087d2:	f7fe ff4d 	bl	8007670 <chSysHalt>
 80087d6:	e7f2      	b.n	80087be <chThdAddRef+0x3e>
 80087d8:	20004f68 	.word	0x20004f68
 80087dc:	080150f8 	.word	0x080150f8
 80087e0:	080150c0 	.word	0x080150c0
 80087e4:	f3af 8000 	nop.w
 80087e8:	f3af 8000 	nop.w
 80087ec:	f3af 8000 	nop.w

080087f0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 80087f0:	b510      	push	{r4, lr}
 80087f2:	4604      	mov	r4, r0
 80087f4:	2320      	movs	r3, #32
 80087f6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80087fa:	f000 fbc9 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80087fe:	f7ff f8c7 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8008802:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8008806:	b1d3      	cbz	r3, 800883e <chThdRelease+0x4e>
  tp->refs--;
 8008808:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800880c:	3b01      	subs	r3, #1
 800880e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8008812:	6a23      	ldr	r3, [r4, #32]
 8008814:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008818:	2b0f      	cmp	r3, #15
 800881a:	d014      	beq.n	8008846 <chThdRelease+0x56>
  _dbg_check_unlock();
 800881c:	f7ff f8d0 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008820:	f000 fbbe 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008824:	4b1f      	ldr	r3, [pc, #124]	; (80088a4 <chThdRelease+0xb4>)
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d004      	beq.n	8008836 <chThdRelease+0x46>
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	6899      	ldr	r1, [r3, #8]
 8008830:	6893      	ldr	r3, [r2, #8]
 8008832:	4299      	cmp	r1, r3
 8008834:	d332      	bcc.n	800889c <chThdRelease+0xac>
 8008836:	2300      	movs	r3, #0
 8008838:	f383 8811 	msr	BASEPRI, r3
    }
#endif /* CH_CFG_USE_DYNAMIC == TRUE */
    return;
  }
  chSysUnlock();
}
 800883c:	bd10      	pop	{r4, pc}
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 800883e:	481a      	ldr	r0, [pc, #104]	; (80088a8 <chThdRelease+0xb8>)
 8008840:	f7fe ff16 	bl	8007670 <chSysHalt>
 8008844:	e7e0      	b.n	8008808 <chThdRelease+0x18>
    REG_REMOVE(tp);
 8008846:	6963      	ldr	r3, [r4, #20]
 8008848:	6922      	ldr	r2, [r4, #16]
 800884a:	611a      	str	r2, [r3, #16]
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	6962      	ldr	r2, [r4, #20]
 8008850:	615a      	str	r2, [r3, #20]
  _dbg_check_unlock();
 8008852:	f7ff f8b5 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008856:	f000 fba3 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800885a:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <chThdRelease+0xb4>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	429a      	cmp	r2, r3
 8008860:	d004      	beq.n	800886c <chThdRelease+0x7c>
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	6899      	ldr	r1, [r3, #8]
 8008866:	6893      	ldr	r3, [r2, #8]
 8008868:	4299      	cmp	r1, r3
 800886a:	d30f      	bcc.n	800888c <chThdRelease+0x9c>
 800886c:	2300      	movs	r3, #0
 800886e:	f383 8811 	msr	BASEPRI, r3
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8008872:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	2b01      	cmp	r3, #1
 800887c:	d00a      	beq.n	8008894 <chThdRelease+0xa4>
 800887e:	2b02      	cmp	r3, #2
 8008880:	d1dc      	bne.n	800883c <chThdRelease+0x4c>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8008882:	69e1      	ldr	r1, [r4, #28]
 8008884:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008886:	f002 fbb3 	bl	800aff0 <chPoolFree>
      break;
 800888a:	e7d7      	b.n	800883c <chThdRelease+0x4c>
 800888c:	4807      	ldr	r0, [pc, #28]	; (80088ac <chThdRelease+0xbc>)
 800888e:	f7fe feef 	bl	8007670 <chSysHalt>
 8008892:	e7eb      	b.n	800886c <chThdRelease+0x7c>
      chHeapFree(chThdGetWorkingAreaX(tp));
 8008894:	69e0      	ldr	r0, [r4, #28]
 8008896:	f002 faa3 	bl	800ade0 <chHeapFree>
      break;
 800889a:	e7cf      	b.n	800883c <chThdRelease+0x4c>
 800889c:	4803      	ldr	r0, [pc, #12]	; (80088ac <chThdRelease+0xbc>)
 800889e:	f7fe fee7 	bl	8007670 <chSysHalt>
 80088a2:	e7c8      	b.n	8008836 <chThdRelease+0x46>
 80088a4:	20004f68 	.word	0x20004f68
 80088a8:	08015104 	.word	0x08015104
 80088ac:	080150c0 	.word	0x080150c0

080088b0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80088b0:	b510      	push	{r4, lr}
  thread_t *tp = currp;
 80088b2:	4b11      	ldr	r3, [pc, #68]	; (80088f8 <chThdExitS+0x48>)
 80088b4:	699c      	ldr	r4, [r3, #24]

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 80088b6:	6260      	str	r0, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 80088b8:	e003      	b.n	80088c2 <chThdExitS+0x12>
  tlp->next = tp->queue.next;
 80088ba:	6803      	ldr	r3, [r0, #0]
 80088bc:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 80088be:	f7ff fbf7 	bl	80080b0 <chSchReadyI>
  while (list_notempty(&tp->waiting)) {
 80088c2:	f104 0328 	add.w	r3, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
 80088c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80088c8:	4283      	cmp	r3, r0
 80088ca:	d1f6      	bne.n	80088ba <chThdExitS+0xa>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 80088cc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80088d0:	b953      	cbnz	r3, 80088e8 <chThdExitS+0x38>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 80088d2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  if ((tp->refs == (trefs_t)0) &&
 80088d6:	f013 0f03 	tst.w	r3, #3
 80088da:	d105      	bne.n	80088e8 <chThdExitS+0x38>
    REG_REMOVE(tp);
 80088dc:	6963      	ldr	r3, [r4, #20]
 80088de:	6922      	ldr	r2, [r4, #16]
 80088e0:	611a      	str	r2, [r3, #16]
 80088e2:	6923      	ldr	r3, [r4, #16]
 80088e4:	6962      	ldr	r2, [r4, #20]
 80088e6:	615a      	str	r2, [r3, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 80088e8:	200f      	movs	r0, #15
 80088ea:	f7ff fc71 	bl	80081d0 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
 80088ee:	4803      	ldr	r0, [pc, #12]	; (80088fc <chThdExitS+0x4c>)
 80088f0:	f7fe febe 	bl	8007670 <chSysHalt>
}
 80088f4:	bd10      	pop	{r4, pc}
 80088f6:	bf00      	nop
 80088f8:	20004f68 	.word	0x20004f68
 80088fc:	08015114 	.word	0x08015114

08008900 <chThdExit>:
void chThdExit(msg_t msg) {
 8008900:	b510      	push	{r4, lr}
 8008902:	4604      	mov	r4, r0
 8008904:	2320      	movs	r3, #32
 8008906:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800890a:	f000 fb41 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800890e:	f7ff f83f 	bl	8007990 <_dbg_check_lock>
  chThdExitS(msg);
 8008912:	4620      	mov	r0, r4
 8008914:	f7ff ffcc 	bl	80088b0 <chThdExitS>
}
 8008918:	bd10      	pop	{r4, pc}
 800891a:	bf00      	nop
 800891c:	f3af 8000 	nop.w

08008920 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8008920:	b538      	push	{r3, r4, r5, lr}
  msg_t msg;

  chDbgCheck(tp != NULL);
 8008922:	4604      	mov	r4, r0
 8008924:	b378      	cbz	r0, 8008986 <chThdWait+0x66>
 8008926:	2320      	movs	r3, #32
 8008928:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800892c:	f000 fb30 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008930:	f7ff f82e 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
 8008934:	4b1c      	ldr	r3, [pc, #112]	; (80089a8 <chThdWait+0x88>)
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	42a3      	cmp	r3, r4
 800893a:	d028      	beq.n	800898e <chThdWait+0x6e>
#if CH_CFG_USE_REGISTRY == TRUE
  chDbgAssert(tp->refs > (trefs_t)0, "no references");
 800893c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8008940:	b34b      	cbz	r3, 8008996 <chThdWait+0x76>
#endif

  if (tp->state != CH_STATE_FINAL) {
 8008942:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008946:	2b0f      	cmp	r3, #15
 8008948:	d007      	beq.n	800895a <chThdWait+0x3a>
    list_insert(currp, &tp->waiting);
 800894a:	4b17      	ldr	r3, [pc, #92]	; (80089a8 <chThdWait+0x88>)
 800894c:	699b      	ldr	r3, [r3, #24]
  tp->queue.next = tlp->next;
 800894e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008950:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 8008952:	62a3      	str	r3, [r4, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTEXIT);
 8008954:	2009      	movs	r0, #9
 8008956:	f7ff fc3b 	bl	80081d0 <chSchGoSleepS>
  }
  msg = tp->u.exitcode;
 800895a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  _dbg_check_unlock();
 800895c:	f7ff f830 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008960:	f000 fb1e 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008964:	4b10      	ldr	r3, [pc, #64]	; (80089a8 <chThdWait+0x88>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	429a      	cmp	r2, r3
 800896a:	d004      	beq.n	8008976 <chThdWait+0x56>
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	6899      	ldr	r1, [r3, #8]
 8008970:	6893      	ldr	r3, [r2, #8]
 8008972:	4299      	cmp	r1, r3
 8008974:	d313      	bcc.n	800899e <chThdWait+0x7e>
 8008976:	2300      	movs	r3, #0
 8008978:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_REGISTRY == TRUE
  /* Releasing a reference to the thread.*/
  chThdRelease(tp);
 800897c:	4620      	mov	r0, r4
 800897e:	f7ff ff37 	bl	80087f0 <chThdRelease>
#endif

  return msg;
}
 8008982:	4628      	mov	r0, r5
 8008984:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(tp != NULL);
 8008986:	4809      	ldr	r0, [pc, #36]	; (80089ac <chThdWait+0x8c>)
 8008988:	f7fe fe72 	bl	8007670 <chSysHalt>
 800898c:	e7cb      	b.n	8008926 <chThdWait+0x6>
  chDbgAssert(tp != currp, "waiting self");
 800898e:	4807      	ldr	r0, [pc, #28]	; (80089ac <chThdWait+0x8c>)
 8008990:	f7fe fe6e 	bl	8007670 <chSysHalt>
 8008994:	e7d2      	b.n	800893c <chThdWait+0x1c>
  chDbgAssert(tp->refs > (trefs_t)0, "no references");
 8008996:	4805      	ldr	r0, [pc, #20]	; (80089ac <chThdWait+0x8c>)
 8008998:	f7fe fe6a 	bl	8007670 <chSysHalt>
 800899c:	e7d1      	b.n	8008942 <chThdWait+0x22>
 800899e:	4804      	ldr	r0, [pc, #16]	; (80089b0 <chThdWait+0x90>)
 80089a0:	f7fe fe66 	bl	8007670 <chSysHalt>
 80089a4:	e7e7      	b.n	8008976 <chThdWait+0x56>
 80089a6:	bf00      	nop
 80089a8:	20004f68 	.word	0x20004f68
 80089ac:	08015120 	.word	0x08015120
 80089b0:	080150c0 	.word	0x080150c0
 80089b4:	f3af 8000 	nop.w
 80089b8:	f3af 8000 	nop.w
 80089bc:	f3af 8000 	nop.w

080089c0 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	4604      	mov	r4, r0
  tprio_t oldprio;

  chDbgCheck(newprio <= HIGHPRIO);
 80089c4:	28ff      	cmp	r0, #255	; 0xff
 80089c6:	d825      	bhi.n	8008a14 <chThdSetPriority+0x54>
 80089c8:	2320      	movs	r3, #32
 80089ca:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80089ce:	f000 fadf 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80089d2:	f7fe ffdd 	bl	8007990 <_dbg_check_lock>

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->realprio;
 80089d6:	4b13      	ldr	r3, [pc, #76]	; (8008a24 <chThdSetPriority+0x64>)
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 80089dc:	689a      	ldr	r2, [r3, #8]
 80089de:	42b2      	cmp	r2, r6
 80089e0:	d001      	beq.n	80089e6 <chThdSetPriority+0x26>
 80089e2:	42a2      	cmp	r2, r4
 80089e4:	d200      	bcs.n	80089e8 <chThdSetPriority+0x28>
    currp->prio = newprio;
 80089e6:	609c      	str	r4, [r3, #8]
  }
  currp->realprio = newprio;
 80089e8:	4d0e      	ldr	r5, [pc, #56]	; (8008a24 <chThdSetPriority+0x64>)
 80089ea:	69ab      	ldr	r3, [r5, #24]
 80089ec:	63dc      	str	r4, [r3, #60]	; 0x3c
#else
  oldprio = currp->prio;
  currp->prio = newprio;
#endif
  chSchRescheduleS();
 80089ee:	f7ff fd07 	bl	8008400 <chSchRescheduleS>
  _dbg_check_unlock();
 80089f2:	f7fe ffe5 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80089f6:	f000 fad3 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80089fa:	682b      	ldr	r3, [r5, #0]
 80089fc:	42ab      	cmp	r3, r5
 80089fe:	d004      	beq.n	8008a0a <chThdSetPriority+0x4a>
 8008a00:	69aa      	ldr	r2, [r5, #24]
 8008a02:	6892      	ldr	r2, [r2, #8]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d308      	bcc.n	8008a1c <chThdSetPriority+0x5c>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 8008a10:	4630      	mov	r0, r6
 8008a12:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(newprio <= HIGHPRIO);
 8008a14:	4804      	ldr	r0, [pc, #16]	; (8008a28 <chThdSetPriority+0x68>)
 8008a16:	f7fe fe2b 	bl	8007670 <chSysHalt>
 8008a1a:	e7d5      	b.n	80089c8 <chThdSetPriority+0x8>
 8008a1c:	4803      	ldr	r0, [pc, #12]	; (8008a2c <chThdSetPriority+0x6c>)
 8008a1e:	f7fe fe27 	bl	8007670 <chSysHalt>
 8008a22:	e7f2      	b.n	8008a0a <chThdSetPriority+0x4a>
 8008a24:	20004f68 	.word	0x20004f68
 8008a28:	0801512c 	.word	0x0801512c
 8008a2c:	080150c0 	.word	0x080150c0

08008a30 <chThdTerminate>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdTerminate(thread_t *tp) {
 8008a30:	b510      	push	{r4, lr}
 8008a32:	4604      	mov	r4, r0
 8008a34:	2320      	movs	r3, #32
 8008a36:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008a3a:	f000 faa9 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008a3e:	f7fe ffa7 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 8008a42:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8008a46:	f043 0304 	orr.w	r3, r3, #4
 8008a4a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  _dbg_check_unlock();
 8008a4e:	f7fe ffb7 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008a52:	f000 faa5 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008a56:	4b08      	ldr	r3, [pc, #32]	; (8008a78 <chThdTerminate+0x48>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d004      	beq.n	8008a68 <chThdTerminate+0x38>
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	6899      	ldr	r1, [r3, #8]
 8008a62:	6893      	ldr	r3, [r2, #8]
 8008a64:	4299      	cmp	r1, r3
 8008a66:	d303      	bcc.n	8008a70 <chThdTerminate+0x40>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8008a6e:	bd10      	pop	{r4, pc}
 8008a70:	4802      	ldr	r0, [pc, #8]	; (8008a7c <chThdTerminate+0x4c>)
 8008a72:	f7fe fdfd 	bl	8007670 <chSysHalt>
 8008a76:	e7f7      	b.n	8008a68 <chThdTerminate+0x38>
 8008a78:	20004f68 	.word	0x20004f68
 8008a7c:	080150c0 	.word	0x080150c0

08008a80 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4604      	mov	r4, r0
 8008a84:	460d      	mov	r5, r1
 8008a86:	2320      	movs	r3, #32
 8008a88:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008a8c:	f000 fa80 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008a90:	f7fe ff7e 	bl	8007990 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);
 8008a94:	ea54 0305 	orrs.w	r3, r4, r5
 8008a98:	d015      	beq.n	8008ac6 <chThdSleep+0x46>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8008a9a:	4622      	mov	r2, r4
 8008a9c:	462b      	mov	r3, r5
 8008a9e:	2008      	movs	r0, #8
 8008aa0:	f7ff fbc6 	bl	8008230 <chSchGoSleepTimeoutS>
  _dbg_check_unlock();
 8008aa4:	f7fe ff8c 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008aa8:	f000 fa7a 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008aac:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <chThdSleep+0x58>)
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d004      	beq.n	8008abe <chThdSleep+0x3e>
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	6899      	ldr	r1, [r3, #8]
 8008ab8:	6893      	ldr	r3, [r2, #8]
 8008aba:	4299      	cmp	r1, r3
 8008abc:	d307      	bcc.n	8008ace <chThdSleep+0x4e>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 8008ac4:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8008ac6:	4805      	ldr	r0, [pc, #20]	; (8008adc <chThdSleep+0x5c>)
 8008ac8:	f7fe fdd2 	bl	8007670 <chSysHalt>
 8008acc:	e7e5      	b.n	8008a9a <chThdSleep+0x1a>
 8008ace:	4804      	ldr	r0, [pc, #16]	; (8008ae0 <chThdSleep+0x60>)
 8008ad0:	f7fe fdce 	bl	8007670 <chSysHalt>
 8008ad4:	e7f3      	b.n	8008abe <chThdSleep+0x3e>
 8008ad6:	bf00      	nop
 8008ad8:	20004f68 	.word	0x20004f68
 8008adc:	08015140 	.word	0x08015140
 8008ae0:	080150c0 	.word	0x080150c0
 8008ae4:	f3af 8000 	nop.w
 8008ae8:	f3af 8000 	nop.w
 8008aec:	f3af 8000 	nop.w

08008af0 <chThdSleepUntil>:
 *
 * @param[in] time      absolute system time
 *
 * @api
 */
void chThdSleepUntil(systime_t time) {
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4604      	mov	r4, r0
 8008af4:	2320      	movs	r3, #32
 8008af6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008afa:	f000 fa49 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008afe:	f7fe ff47 	bl	8007990 <_dbg_check_lock>
 8008b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8008b08:	1ae4      	subs	r4, r4, r3
 8008b0a:	2500      	movs	r5, #0
  sysinterval_t interval;

  chSysLock();
  interval = chTimeDiffX(chVTGetSystemTimeX(), time);
  if (interval > (sysinterval_t)0) {
 8008b0c:	ea54 0305 	orrs.w	r3, r4, r5
 8008b10:	d110      	bne.n	8008b34 <chThdSleepUntil+0x44>
  _dbg_check_unlock();
 8008b12:	f7fe ff55 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008b16:	f000 fa43 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008b1a:	4b0e      	ldr	r3, [pc, #56]	; (8008b54 <chThdSleepUntil+0x64>)
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d004      	beq.n	8008b2c <chThdSleepUntil+0x3c>
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	6899      	ldr	r1, [r3, #8]
 8008b26:	6893      	ldr	r3, [r2, #8]
 8008b28:	4299      	cmp	r1, r3
 8008b2a:	d30e      	bcc.n	8008b4a <chThdSleepUntil+0x5a>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f383 8811 	msr	BASEPRI, r3
    chThdSleepS(interval);
  }
  chSysUnlock();
}
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	d005      	beq.n	8008b42 <chThdSleepUntil+0x52>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8008b36:	4622      	mov	r2, r4
 8008b38:	462b      	mov	r3, r5
 8008b3a:	2008      	movs	r0, #8
 8008b3c:	f7ff fb78 	bl	8008230 <chSchGoSleepTimeoutS>
 8008b40:	e7e7      	b.n	8008b12 <chThdSleepUntil+0x22>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8008b42:	4805      	ldr	r0, [pc, #20]	; (8008b58 <chThdSleepUntil+0x68>)
 8008b44:	f7fe fd94 	bl	8007670 <chSysHalt>
 8008b48:	e7f5      	b.n	8008b36 <chThdSleepUntil+0x46>
 8008b4a:	4804      	ldr	r0, [pc, #16]	; (8008b5c <chThdSleepUntil+0x6c>)
 8008b4c:	f7fe fd90 	bl	8007670 <chSysHalt>
 8008b50:	e7ec      	b.n	8008b2c <chThdSleepUntil+0x3c>
 8008b52:	bf00      	nop
 8008b54:	20004f68 	.word	0x20004f68
 8008b58:	08015140 	.word	0x08015140
 8008b5c:	080150c0 	.word	0x080150c0

08008b60 <chThdSleepUntilWindowed>:
 * @param[in] next      absolute system time of the next deadline
 * @return              the @p next parameter
 *
 * @api
 */
systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next) {
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	4604      	mov	r4, r0
 8008b64:	460e      	mov	r6, r1
 8008b66:	2320      	movs	r3, #32
 8008b68:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008b6c:	f000 fa10 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008b70:	f7fe ff0e 	bl	8007990 <_dbg_check_lock>
 8008b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8008b7a:	1b1a      	subs	r2, r3, r4
                (systime_t)((systime_t)end - (systime_t)start));
 8008b7c:	1b34      	subs	r4, r6, r4
  systime_t time;

  chSysLock();
  time = chVTGetSystemTimeX();
  if (chTimeIsInRangeX(time, prev, next)) {
 8008b7e:	4294      	cmp	r4, r2
 8008b80:	d811      	bhi.n	8008ba6 <chThdSleepUntilWindowed+0x46>
  _dbg_check_unlock();
 8008b82:	f7fe ff1d 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008b86:	f000 fa0b 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008b8a:	4b10      	ldr	r3, [pc, #64]	; (8008bcc <chThdSleepUntilWindowed+0x6c>)
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d004      	beq.n	8008b9c <chThdSleepUntilWindowed+0x3c>
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	6899      	ldr	r1, [r3, #8]
 8008b96:	6893      	ldr	r3, [r2, #8]
 8008b98:	4299      	cmp	r1, r3
 8008b9a:	d313      	bcc.n	8008bc4 <chThdSleepUntilWindowed+0x64>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f383 8811 	msr	BASEPRI, r3
    chThdSleepS(chTimeDiffX(time, next));
  }
  chSysUnlock();

  return next;
}
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	bd70      	pop	{r4, r5, r6, pc}
  return (sysinterval_t)((systime_t)(end - start));
 8008ba6:	1af4      	subs	r4, r6, r3
 8008ba8:	2500      	movs	r5, #0
 8008baa:	ea54 0305 	orrs.w	r3, r4, r5
 8008bae:	d005      	beq.n	8008bbc <chThdSleepUntilWindowed+0x5c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8008bb0:	4622      	mov	r2, r4
 8008bb2:	462b      	mov	r3, r5
 8008bb4:	2008      	movs	r0, #8
 8008bb6:	f7ff fb3b 	bl	8008230 <chSchGoSleepTimeoutS>
 8008bba:	e7e2      	b.n	8008b82 <chThdSleepUntilWindowed+0x22>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8008bbc:	4804      	ldr	r0, [pc, #16]	; (8008bd0 <chThdSleepUntilWindowed+0x70>)
 8008bbe:	f7fe fd57 	bl	8007670 <chSysHalt>
 8008bc2:	e7f5      	b.n	8008bb0 <chThdSleepUntilWindowed+0x50>
 8008bc4:	4803      	ldr	r0, [pc, #12]	; (8008bd4 <chThdSleepUntilWindowed+0x74>)
 8008bc6:	f7fe fd53 	bl	8007670 <chSysHalt>
 8008bca:	e7e7      	b.n	8008b9c <chThdSleepUntilWindowed+0x3c>
 8008bcc:	20004f68 	.word	0x20004f68
 8008bd0:	08015140 	.word	0x08015140
 8008bd4:	080150c0 	.word	0x080150c0
 8008bd8:	f3af 8000 	nop.w
 8008bdc:	f3af 8000 	nop.w

08008be0 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8008be0:	b508      	push	{r3, lr}
 8008be2:	2320      	movs	r3, #32
 8008be4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008be8:	f000 f9d2 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008bec:	f7fe fed0 	bl	8007990 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();
 8008bf0:	f7fe ff86 	bl	8007b00 <chDbgCheckClassS>
  chDbgCheckClassS();
 8008bf4:	f7fe ff84 	bl	8007b00 <chDbgCheckClassS>
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8008bf8:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <chThdYield+0x58>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	6892      	ldr	r2, [r2, #8]
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	689b      	ldr	r3, [r3, #8]

  if (chSchCanYieldS()) {
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d210      	bcs.n	8008c28 <chThdYield+0x48>
  _dbg_check_unlock();
 8008c06:	f7fe fedb 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008c0a:	f000 f9c9 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008c0e:	4b0a      	ldr	r3, [pc, #40]	; (8008c38 <chThdYield+0x58>)
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d004      	beq.n	8008c20 <chThdYield+0x40>
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	6899      	ldr	r1, [r3, #8]
 8008c1a:	6893      	ldr	r3, [r2, #8]
 8008c1c:	4299      	cmp	r1, r3
 8008c1e:	d306      	bcc.n	8008c2e <chThdYield+0x4e>
 8008c20:	2300      	movs	r3, #0
 8008c22:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chSchDoYieldS();
  chSysUnlock();
}
 8008c26:	bd08      	pop	{r3, pc}
    chSchDoRescheduleBehind();
 8008c28:	f7ff fb8a 	bl	8008340 <chSchDoRescheduleBehind>
 8008c2c:	e7eb      	b.n	8008c06 <chThdYield+0x26>
 8008c2e:	4803      	ldr	r0, [pc, #12]	; (8008c3c <chThdYield+0x5c>)
 8008c30:	f7fe fd1e 	bl	8007670 <chSysHalt>
 8008c34:	e7f4      	b.n	8008c20 <chThdYield+0x40>
 8008c36:	bf00      	nop
 8008c38:	20004f68 	.word	0x20004f68
 8008c3c:	080150c0 	.word	0x080150c0

08008c40 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4604      	mov	r4, r0
  return ch.rlist.current;
 8008c44:	4b07      	ldr	r3, [pc, #28]	; (8008c64 <chThdSuspendS+0x24>)
 8008c46:	699d      	ldr	r5, [r3, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 8008c48:	6803      	ldr	r3, [r0, #0]
 8008c4a:	b113      	cbz	r3, 8008c52 <chThdSuspendS+0x12>
 8008c4c:	4806      	ldr	r0, [pc, #24]	; (8008c68 <chThdSuspendS+0x28>)
 8008c4e:	f7fe fd0f 	bl	8007670 <chSysHalt>

  *trp = tp;
 8008c52:	6025      	str	r5, [r4, #0]
  tp->u.wttrp = trp;
 8008c54:	626c      	str	r4, [r5, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8008c56:	2003      	movs	r0, #3
 8008c58:	f7ff faba 	bl	80081d0 <chSchGoSleepS>
 8008c5c:	4b01      	ldr	r3, [pc, #4]	; (8008c64 <chThdSuspendS+0x24>)
 8008c5e:	699b      	ldr	r3, [r3, #24]

  return chThdGetSelfX()->u.rdymsg;
}
 8008c60:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	20004f68 	.word	0x20004f68
 8008c68:	0801514c 	.word	0x0801514c
 8008c6c:	f3af 8000 	nop.w

08008c70 <chThdSuspendTimeoutS>:
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	4604      	mov	r4, r0
 8008c74:	4616      	mov	r6, r2
 8008c76:	461f      	mov	r7, r3
 8008c78:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <chThdSuspendTimeoutS+0x34>)
 8008c7a:	699d      	ldr	r5, [r3, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 8008c7c:	6803      	ldr	r3, [r0, #0]
 8008c7e:	b113      	cbz	r3, 8008c86 <chThdSuspendTimeoutS+0x16>
 8008c80:	4809      	ldr	r0, [pc, #36]	; (8008ca8 <chThdSuspendTimeoutS+0x38>)
 8008c82:	f7fe fcf5 	bl	8007670 <chSysHalt>

  if (TIME_IMMEDIATE == timeout) {
 8008c86:	ea56 0307 	orrs.w	r3, r6, r7
 8008c8a:	d007      	beq.n	8008c9c <chThdSuspendTimeoutS+0x2c>
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8008c8c:	6025      	str	r5, [r4, #0]
  tp->u.wttrp = trp;
 8008c8e:	626c      	str	r4, [r5, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8008c90:	4632      	mov	r2, r6
 8008c92:	463b      	mov	r3, r7
 8008c94:	2003      	movs	r0, #3
 8008c96:	f7ff facb 	bl	8008230 <chSchGoSleepTimeoutS>
}
 8008c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return MSG_TIMEOUT;
 8008c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca0:	e7fb      	b.n	8008c9a <chThdSuspendTimeoutS+0x2a>
 8008ca2:	bf00      	nop
 8008ca4:	20004f68 	.word	0x20004f68
 8008ca8:	0801515c 	.word	0x0801515c
 8008cac:	f3af 8000 	nop.w

08008cb0 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8008cb0:	b570      	push	{r4, r5, r6, lr}

  if (*trp != NULL) {
 8008cb2:	6804      	ldr	r4, [r0, #0]
 8008cb4:	b15c      	cbz	r4, 8008cce <chThdResumeI+0x1e>
 8008cb6:	460e      	mov	r6, r1
 8008cb8:	4605      	mov	r5, r0
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8008cba:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d106      	bne.n	8008cd0 <chThdResumeI+0x20>

    *trp = NULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	602b      	str	r3, [r5, #0]
    tp->u.rdymsg = msg;
 8008cc6:	6266      	str	r6, [r4, #36]	; 0x24
    (void) chSchReadyI(tp);
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f7ff f9f1 	bl	80080b0 <chSchReadyI>
  }
}
 8008cce:	bd70      	pop	{r4, r5, r6, pc}
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8008cd0:	4801      	ldr	r0, [pc, #4]	; (8008cd8 <chThdResumeI+0x28>)
 8008cd2:	f7fe fccd 	bl	8007670 <chSysHalt>
 8008cd6:	e7f4      	b.n	8008cc2 <chThdResumeI+0x12>
 8008cd8:	08015174 	.word	0x08015174
 8008cdc:	f3af 8000 	nop.w

08008ce0 <chThdResumeS>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeS(thread_reference_t *trp, msg_t msg) {
 8008ce0:	b570      	push	{r4, r5, r6, lr}

  if (*trp != NULL) {
 8008ce2:	6805      	ldr	r5, [r0, #0]
 8008ce4:	b15d      	cbz	r5, 8008cfe <chThdResumeS+0x1e>
 8008ce6:	460e      	mov	r6, r1
 8008ce8:	4604      	mov	r4, r0
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8008cea:	f895 3020 	ldrb.w	r3, [r5, #32]
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d106      	bne.n	8008d00 <chThdResumeS+0x20>

    *trp = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	6023      	str	r3, [r4, #0]
    chSchWakeupS(tp, msg);
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	f7ff fac9 	bl	8008290 <chSchWakeupS>
  }
}
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8008d00:	4801      	ldr	r0, [pc, #4]	; (8008d08 <chThdResumeS+0x28>)
 8008d02:	f7fe fcb5 	bl	8007670 <chSysHalt>
 8008d06:	e7f4      	b.n	8008cf2 <chThdResumeS+0x12>
 8008d08:	08015184 	.word	0x08015184
 8008d0c:	f3af 8000 	nop.w

08008d10 <chThdResume>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @api
 */
void chThdResume(thread_reference_t *trp, msg_t msg) {
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4604      	mov	r4, r0
 8008d14:	460d      	mov	r5, r1
 8008d16:	2320      	movs	r3, #32
 8008d18:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008d1c:	f000 f938 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008d20:	f7fe fe36 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chThdResumeS(trp, msg);
 8008d24:	4629      	mov	r1, r5
 8008d26:	4620      	mov	r0, r4
 8008d28:	f7ff ffda 	bl	8008ce0 <chThdResumeS>
  _dbg_check_unlock();
 8008d2c:	f7fe fe48 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008d30:	f000 f936 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008d34:	4b08      	ldr	r3, [pc, #32]	; (8008d58 <chThdResume+0x48>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d004      	beq.n	8008d46 <chThdResume+0x36>
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	6899      	ldr	r1, [r3, #8]
 8008d40:	6893      	ldr	r3, [r2, #8]
 8008d42:	4299      	cmp	r1, r3
 8008d44:	d303      	bcc.n	8008d4e <chThdResume+0x3e>
 8008d46:	2300      	movs	r3, #0
 8008d48:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8008d4c:	bd38      	pop	{r3, r4, r5, pc}
 8008d4e:	4803      	ldr	r0, [pc, #12]	; (8008d5c <chThdResume+0x4c>)
 8008d50:	f7fe fc8e 	bl	8007670 <chSysHalt>
 8008d54:	e7f7      	b.n	8008d46 <chThdResume+0x36>
 8008d56:	bf00      	nop
 8008d58:	20004f68 	.word	0x20004f68
 8008d5c:	080150c0 	.word	0x080150c0

08008d60 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8008d60:	ea52 0103 	orrs.w	r1, r2, r3
 8008d64:	d00b      	beq.n	8008d7e <chThdEnqueueTimeoutS+0x1e>
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8008d66:	b510      	push	{r4, lr}
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8008d68:	4906      	ldr	r1, [pc, #24]	; (8008d84 <chThdEnqueueTimeoutS+0x24>)
 8008d6a:	6989      	ldr	r1, [r1, #24]
  tp->queue.next             = (thread_t *)tqp;
 8008d6c:	6008      	str	r0, [r1, #0]
  tp->queue.prev             = tqp->prev;
 8008d6e:	6844      	ldr	r4, [r0, #4]
 8008d70:	604c      	str	r4, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8008d72:	6021      	str	r1, [r4, #0]
  tqp->prev                  = tp;
 8008d74:	6041      	str	r1, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8008d76:	2004      	movs	r0, #4
 8008d78:	f7ff fa5a 	bl	8008230 <chSchGoSleepTimeoutS>
}
 8008d7c:	bd10      	pop	{r4, pc}
    return MSG_TIMEOUT;
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008d82:	4770      	bx	lr
 8008d84:	20004f68 	.word	0x20004f68
 8008d88:	f3af 8000 	nop.w
 8008d8c:	f3af 8000 	nop.w

08008d90 <chThdDequeueNextI>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008d90:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8008d92:	4298      	cmp	r0, r3
 8008d94:	d017      	beq.n	8008dc6 <chThdDequeueNextI+0x36>
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8008d96:	b570      	push	{r4, r5, r6, lr}
 8008d98:	460e      	mov	r6, r1
 8008d9a:	4604      	mov	r4, r0
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  thread_t *tp;

  chDbgAssert(queue_notempty(tqp), "empty queue");
 8008d9c:	d00f      	beq.n	8008dbe <chThdDequeueNextI+0x2e>
  thread_t *tp = tqp->next;
 8008d9e:	6825      	ldr	r5, [r4, #0]
  tqp->next             = tp->queue.next;
 8008da0:	682b      	ldr	r3, [r5, #0]
 8008da2:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008da4:	605c      	str	r4, [r3, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8008da6:	f895 3020 	ldrb.w	r3, [r5, #32]
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	d002      	beq.n	8008db4 <chThdDequeueNextI+0x24>
 8008dae:	4806      	ldr	r0, [pc, #24]	; (8008dc8 <chThdDequeueNextI+0x38>)
 8008db0:	f7fe fc5e 	bl	8007670 <chSysHalt>

  tp->u.rdymsg = msg;
 8008db4:	626e      	str	r6, [r5, #36]	; 0x24
  (void) chSchReadyI(tp);
 8008db6:	4628      	mov	r0, r5
 8008db8:	f7ff f97a 	bl	80080b0 <chSchReadyI>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8008dbc:	bd70      	pop	{r4, r5, r6, pc}
  chDbgAssert(queue_notempty(tqp), "empty queue");
 8008dbe:	4802      	ldr	r0, [pc, #8]	; (8008dc8 <chThdDequeueNextI+0x38>)
 8008dc0:	f7fe fc56 	bl	8007670 <chSysHalt>
 8008dc4:	e7eb      	b.n	8008d9e <chThdDequeueNextI+0xe>
 8008dc6:	4770      	bx	lr
 8008dc8:	08015194 	.word	0x08015194
 8008dcc:	f3af 8000 	nop.w

08008dd0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	460e      	mov	r6, r1

  while (queue_notempty(tqp)) {
 8008dd6:	e007      	b.n	8008de8 <chThdDequeueAllI+0x18>
 8008dd8:	480d      	ldr	r0, [pc, #52]	; (8008e10 <chThdDequeueAllI+0x40>)
 8008dda:	f7fe fc49 	bl	8007670 <chSysHalt>
 8008dde:	e009      	b.n	8008df4 <chThdDequeueAllI+0x24>
  tp->u.rdymsg = msg;
 8008de0:	626e      	str	r6, [r5, #36]	; 0x24
  (void) chSchReadyI(tp);
 8008de2:	4628      	mov	r0, r5
 8008de4:	f7ff f964 	bl	80080b0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	429c      	cmp	r4, r3
 8008dec:	d00e      	beq.n	8008e0c <chThdDequeueAllI+0x3c>
 8008dee:	6823      	ldr	r3, [r4, #0]
  chDbgAssert(queue_notempty(tqp), "empty queue");
 8008df0:	429c      	cmp	r4, r3
 8008df2:	d0f1      	beq.n	8008dd8 <chThdDequeueAllI+0x8>
  thread_t *tp = tqp->next;
 8008df4:	6825      	ldr	r5, [r4, #0]
  tqp->next             = tp->queue.next;
 8008df6:	682b      	ldr	r3, [r5, #0]
 8008df8:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008dfa:	605c      	str	r4, [r3, #4]
  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8008dfc:	f895 3020 	ldrb.w	r3, [r5, #32]
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d0ed      	beq.n	8008de0 <chThdDequeueAllI+0x10>
 8008e04:	4802      	ldr	r0, [pc, #8]	; (8008e10 <chThdDequeueAllI+0x40>)
 8008e06:	f7fe fc33 	bl	8007670 <chSysHalt>
 8008e0a:	e7e9      	b.n	8008de0 <chThdDequeueAllI+0x10>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8008e0c:	bd70      	pop	{r4, r5, r6, pc}
 8008e0e:	bf00      	nop
 8008e10:	08015194 	.word	0x08015194
	...

08008e20 <chTMObjectInit>:
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8008e20:	f04f 33ff 	mov.w	r3, #4294967295
 8008e24:	6003      	str	r3, [r0, #0]
  tmp->worst      = (rtcnt_t)0;
 8008e26:	2300      	movs	r3, #0
 8008e28:	6043      	str	r3, [r0, #4]
  tmp->last       = (rtcnt_t)0;
 8008e2a:	6083      	str	r3, [r0, #8]
  tmp->n          = (ucnt_t)0;
 8008e2c:	60c3      	str	r3, [r0, #12]
  tmp->cumulative = (rttime_t)0;
 8008e2e:	2200      	movs	r2, #0
 8008e30:	2300      	movs	r3, #0
 8008e32:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
 8008e36:	4770      	bx	lr
 8008e38:	f3af 8000 	nop.w
 8008e3c:	f3af 8000 	nop.w

08008e40 <chTMStartMeasurementX>:
 8008e40:	4b01      	ldr	r3, [pc, #4]	; (8008e48 <chTMStartMeasurementX+0x8>)
 8008e42:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8008e44:	6083      	str	r3, [r0, #8]
}
 8008e46:	4770      	bx	lr
 8008e48:	e0001000 	.word	0xe0001000
 8008e4c:	f3af 8000 	nop.w

08008e50 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8008e50:	b430      	push	{r4, r5}
 8008e52:	4b0e      	ldr	r3, [pc, #56]	; (8008e8c <chTMStopMeasurementX+0x3c>)
 8008e54:	685b      	ldr	r3, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8008e56:	4a0e      	ldr	r2, [pc, #56]	; (8008e90 <chTMStopMeasurementX+0x40>)
 8008e58:	f8d2 18b0 	ldr.w	r1, [r2, #2224]	; 0x8b0
  tmp->n++;
 8008e5c:	68c2      	ldr	r2, [r0, #12]
 8008e5e:	3201      	adds	r2, #1
 8008e60:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8008e62:	6882      	ldr	r2, [r0, #8]
 8008e64:	1a9b      	subs	r3, r3, r2
 8008e66:	1a5b      	subs	r3, r3, r1
 8008e68:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8008e6a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8008e6e:	18e1      	adds	r1, r4, r3
 8008e70:	f145 0200 	adc.w	r2, r5, #0
 8008e74:	e9c0 1204 	strd	r1, r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8008e78:	6842      	ldr	r2, [r0, #4]
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d900      	bls.n	8008e80 <chTMStopMeasurementX+0x30>
    tmp->worst = tmp->last;
 8008e7e:	6043      	str	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8008e80:	6802      	ldr	r2, [r0, #0]
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d200      	bcs.n	8008e88 <chTMStopMeasurementX+0x38>
    tmp->best = tmp->last;
 8008e86:	6003      	str	r3, [r0, #0]
}
 8008e88:	bc30      	pop	{r4, r5}
 8008e8a:	4770      	bx	lr
 8008e8c:	e0001000 	.word	0xe0001000
 8008e90:	20004f68 	.word	0x20004f68
 8008e94:	f3af 8000 	nop.w
 8008e98:	f3af 8000 	nop.w
 8008e9c:	f3af 8000 	nop.w

08008ea0 <_tm_init>:
void _tm_init(void) {
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	b086      	sub	sp, #24
  ch.tm.offset = (rtcnt_t)0;
 8008ea4:	4c08      	ldr	r4, [pc, #32]	; (8008ec8 <_tm_init+0x28>)
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	f8c4 38b0 	str.w	r3, [r4, #2224]	; 0x8b0
  chTMObjectInit(&tm);
 8008eac:	4668      	mov	r0, sp
 8008eae:	f7ff ffb7 	bl	8008e20 <chTMObjectInit>
  chTMStartMeasurementX(&tm);
 8008eb2:	4668      	mov	r0, sp
 8008eb4:	f7ff ffc4 	bl	8008e40 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8008eb8:	4668      	mov	r0, sp
 8008eba:	f7ff ffc9 	bl	8008e50 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8008ebe:	9b02      	ldr	r3, [sp, #8]
 8008ec0:	f8c4 38b0 	str.w	r3, [r4, #2224]	; 0x8b0
}
 8008ec4:	b006      	add	sp, #24
 8008ec6:	bd10      	pop	{r4, pc}
 8008ec8:	20004f68 	.word	0x20004f68
 8008ecc:	f3af 8000 	nop.w

08008ed0 <chTMChainMeasurementToX>:
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8008ed0:	b430      	push	{r4, r5}
 8008ed2:	4b0d      	ldr	r3, [pc, #52]	; (8008f08 <chTMChainMeasurementToX+0x38>)
 8008ed4:	685b      	ldr	r3, [r3, #4]

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8008ed6:	608b      	str	r3, [r1, #8]
  tmp->n++;
 8008ed8:	68c2      	ldr	r2, [r0, #12]
 8008eda:	3201      	adds	r2, #1
 8008edc:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8008ede:	6882      	ldr	r2, [r0, #8]
 8008ee0:	1a9b      	subs	r3, r3, r2
 8008ee2:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8008ee4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8008ee8:	18e1      	adds	r1, r4, r3
 8008eea:	f145 0200 	adc.w	r2, r5, #0
 8008eee:	e9c0 1204 	strd	r1, r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8008ef2:	6842      	ldr	r2, [r0, #4]
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d900      	bls.n	8008efa <chTMChainMeasurementToX+0x2a>
    tmp->worst = tmp->last;
 8008ef8:	6043      	str	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8008efa:	6802      	ldr	r2, [r0, #0]
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d200      	bcs.n	8008f02 <chTMChainMeasurementToX+0x32>
    tmp->best = tmp->last;
 8008f00:	6003      	str	r3, [r0, #0]

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 8008f02:	bc30      	pop	{r4, r5}
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	e0001000 	.word	0xe0001000
 8008f0c:	00000000 	.word	0x00000000

08008f10 <_stats_init>:
/**
 * @brief   Initializes the statistics module.
 *
 * @init
 */
void _stats_init(void) {
 8008f10:	b510      	push	{r4, lr}

  ch.kernel_stats.n_irq = (ucnt_t)0;
 8008f12:	4c07      	ldr	r4, [pc, #28]	; (8008f30 <_stats_init+0x20>)
 8008f14:	2300      	movs	r3, #0
 8008f16:	f8c4 38b8 	str.w	r3, [r4, #2232]	; 0x8b8
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 8008f1a:	f8c4 38bc 	str.w	r3, [r4, #2236]	; 0x8bc
  chTMObjectInit(&ch.kernel_stats.m_crit_thd);
 8008f1e:	f504 600c 	add.w	r0, r4, #2240	; 0x8c0
 8008f22:	f7ff ff7d 	bl	8008e20 <chTMObjectInit>
  chTMObjectInit(&ch.kernel_stats.m_crit_isr);
 8008f26:	f604 00d8 	addw	r0, r4, #2264	; 0x8d8
 8008f2a:	f7ff ff79 	bl	8008e20 <chTMObjectInit>
}
 8008f2e:	bd10      	pop	{r4, pc}
 8008f30:	20004f68 	.word	0x20004f68
 8008f34:	f3af 8000 	nop.w
 8008f38:	f3af 8000 	nop.w
 8008f3c:	f3af 8000 	nop.w

08008f40 <_stats_increase_irq>:
 8008f40:	2320      	movs	r3, #32
 8008f42:	f383 8811 	msr	BASEPRI, r3
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  port_lock_from_isr();
  ch.kernel_stats.n_irq++;
 8008f46:	4a05      	ldr	r2, [pc, #20]	; (8008f5c <_stats_increase_irq+0x1c>)
 8008f48:	f8d2 38b8 	ldr.w	r3, [r2, #2232]	; 0x8b8
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	f8c2 38b8 	str.w	r3, [r2, #2232]	; 0x8b8
 8008f52:	2300      	movs	r3, #0
 8008f54:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20004f68 	.word	0x20004f68

08008f60 <_stats_ctxswc>:
 * @brief   Updates context switch related statistics.
 *
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {
 8008f60:	b508      	push	{r3, lr}

  ch.kernel_stats.n_ctxswc++;
 8008f62:	4a07      	ldr	r2, [pc, #28]	; (8008f80 <_stats_ctxswc+0x20>)
 8008f64:	f8d2 38bc 	ldr.w	r3, [r2, #2236]	; 0x8bc
 8008f68:	3301      	adds	r3, #1
 8008f6a:	f8c2 38bc 	str.w	r3, [r2, #2236]	; 0x8bc
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8008f6e:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8008f72:	f100 0148 	add.w	r1, r0, #72	; 0x48
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7ff ffaa 	bl	8008ed0 <chTMChainMeasurementToX>
}
 8008f7c:	bd08      	pop	{r3, pc}
 8008f7e:	bf00      	nop
 8008f80:	20004f68 	.word	0x20004f68
 8008f84:	f3af 8000 	nop.w
 8008f88:	f3af 8000 	nop.w
 8008f8c:	f3af 8000 	nop.w

08008f90 <_stats_start_measure_crit_thd>:

/**
 * @brief   Starts the measurement of a thread critical zone.
 */
void _stats_start_measure_crit_thd(void) {
 8008f90:	b508      	push	{r3, lr}

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8008f92:	4802      	ldr	r0, [pc, #8]	; (8008f9c <_stats_start_measure_crit_thd+0xc>)
 8008f94:	f7ff ff54 	bl	8008e40 <chTMStartMeasurementX>
}
 8008f98:	bd08      	pop	{r3, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20005828 	.word	0x20005828

08008fa0 <_stats_stop_measure_crit_thd>:

/**
 * @brief   Stops the measurement of a thread critical zone.
 */
void _stats_stop_measure_crit_thd(void) {
 8008fa0:	b508      	push	{r3, lr}

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 8008fa2:	4802      	ldr	r0, [pc, #8]	; (8008fac <_stats_stop_measure_crit_thd+0xc>)
 8008fa4:	f7ff ff54 	bl	8008e50 <chTMStopMeasurementX>
}
 8008fa8:	bd08      	pop	{r3, pc}
 8008faa:	bf00      	nop
 8008fac:	20005828 	.word	0x20005828

08008fb0 <_stats_start_measure_crit_isr>:

/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {
 8008fb0:	b508      	push	{r3, lr}

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 8008fb2:	4802      	ldr	r0, [pc, #8]	; (8008fbc <_stats_start_measure_crit_isr+0xc>)
 8008fb4:	f7ff ff44 	bl	8008e40 <chTMStartMeasurementX>
}
 8008fb8:	bd08      	pop	{r3, pc}
 8008fba:	bf00      	nop
 8008fbc:	20005840 	.word	0x20005840

08008fc0 <_stats_stop_measure_crit_isr>:

/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {
 8008fc0:	b508      	push	{r3, lr}

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 8008fc2:	4802      	ldr	r0, [pc, #8]	; (8008fcc <_stats_stop_measure_crit_isr+0xc>)
 8008fc4:	f7ff ff44 	bl	8008e50 <chTMStopMeasurementX>
}
 8008fc8:	bd08      	pop	{r3, pc}
 8008fca:	bf00      	nop
 8008fcc:	20005840 	.word	0x20005840

08008fd0 <chRegFirstThread>:
 *
 * @return              A reference to the most ancient thread.
 *
 * @api
 */
thread_t *chRegFirstThread(void) {
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	2320      	movs	r3, #32
 8008fd4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8008fd8:	f7ff ffda 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8008fdc:	f7fe fcd8 	bl	8007990 <_dbg_check_lock>
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 8008fe0:	4d0d      	ldr	r5, [pc, #52]	; (8009018 <chRegFirstThread+0x48>)
 8008fe2:	692c      	ldr	r4, [r5, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 8008fe4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8008fe8:	3301      	adds	r3, #1
 8008fea:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _dbg_check_unlock();
 8008fee:	f7fe fce7 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8008ff2:	f7ff ffd5 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008ff6:	682b      	ldr	r3, [r5, #0]
 8008ff8:	42ab      	cmp	r3, r5
 8008ffa:	d004      	beq.n	8009006 <chRegFirstThread+0x36>
 8008ffc:	69aa      	ldr	r2, [r5, #24]
 8008ffe:	6892      	ldr	r2, [r2, #8]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	429a      	cmp	r2, r3
 8009004:	d304      	bcc.n	8009010 <chRegFirstThread+0x40>
 8009006:	2300      	movs	r3, #0
 8009008:	f383 8811 	msr	BASEPRI, r3
#endif
  chSysUnlock();

  return tp;
}
 800900c:	4620      	mov	r0, r4
 800900e:	bd38      	pop	{r3, r4, r5, pc}
 8009010:	4802      	ldr	r0, [pc, #8]	; (800901c <chRegFirstThread+0x4c>)
 8009012:	f7fe fb2d 	bl	8007670 <chSysHalt>
 8009016:	e7f6      	b.n	8009006 <chRegFirstThread+0x36>
 8009018:	20004f68 	.word	0x20004f68
 800901c:	080151a8 	.word	0x080151a8

08009020 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4605      	mov	r5, r0
 8009024:	2320      	movs	r3, #32
 8009026:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800902a:	f7ff ffb1 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800902e:	f7fe fcaf 	bl	8007990 <_dbg_check_lock>
  thread_t *ntp;

  chSysLock();
  ntp = tp->newer;
 8009032:	692c      	ldr	r4, [r5, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8009034:	4b15      	ldr	r3, [pc, #84]	; (800908c <chRegNextThread+0x6c>)
 8009036:	429c      	cmp	r4, r3
 8009038:	d021      	beq.n	800907e <chRegNextThread+0x5e>
  /*lint -restore*/
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 800903a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800903e:	2bff      	cmp	r3, #255	; 0xff
 8009040:	d019      	beq.n	8009076 <chRegNextThread+0x56>
    ntp->refs++;
 8009042:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8009046:	3301      	adds	r3, #1
 8009048:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _dbg_check_unlock();
 800904c:	f7fe fcb8 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009050:	f7ff ffa6 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009054:	4b0d      	ldr	r3, [pc, #52]	; (800908c <chRegNextThread+0x6c>)
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	429a      	cmp	r2, r3
 800905a:	d004      	beq.n	8009066 <chRegNextThread+0x46>
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	6899      	ldr	r1, [r3, #8]
 8009060:	6893      	ldr	r3, [r2, #8]
 8009062:	4299      	cmp	r1, r3
 8009064:	d30d      	bcc.n	8009082 <chRegNextThread+0x62>
 8009066:	2300      	movs	r3, #0
 8009068:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 800906c:	4628      	mov	r0, r5
 800906e:	f7ff fbbf 	bl	80087f0 <chThdRelease>
#endif

  return ntp;
}
 8009072:	4620      	mov	r0, r4
 8009074:	bd38      	pop	{r3, r4, r5, pc}
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8009076:	4806      	ldr	r0, [pc, #24]	; (8009090 <chRegNextThread+0x70>)
 8009078:	f7fe fafa 	bl	8007670 <chSysHalt>
 800907c:	e7e1      	b.n	8009042 <chRegNextThread+0x22>
    ntp = NULL;
 800907e:	2400      	movs	r4, #0
 8009080:	e7e4      	b.n	800904c <chRegNextThread+0x2c>
 8009082:	4804      	ldr	r0, [pc, #16]	; (8009094 <chRegNextThread+0x74>)
 8009084:	f7fe faf4 	bl	8007670 <chSysHalt>
 8009088:	e7ed      	b.n	8009066 <chRegNextThread+0x46>
 800908a:	bf00      	nop
 800908c:	20004f68 	.word	0x20004f68
 8009090:	080151b4 	.word	0x080151b4
 8009094:	080151a8 	.word	0x080151a8
 8009098:	f3af 8000 	nop.w
 800909c:	f3af 8000 	nop.w

080090a0 <chRegFindThreadByName>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByName(const char *name) {
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4605      	mov	r5, r0
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
 80090a4:	f7ff ff94 	bl	8008fd0 <chRegFirstThread>
 80090a8:	4604      	mov	r4, r0
  do {
    if (strcmp(chRegGetThreadNameX(ctp), name) == 0) {
 80090aa:	4629      	mov	r1, r5
 80090ac:	69a0      	ldr	r0, [r4, #24]
 80090ae:	f00a fc4b 	bl	8013948 <strcmp>
 80090b2:	b128      	cbz	r0, 80090c0 <chRegFindThreadByName+0x20>
      return ctp;
    }
    ctp = chRegNextThread(ctp);
 80090b4:	4620      	mov	r0, r4
 80090b6:	f7ff ffb3 	bl	8009020 <chRegNextThread>
  } while (ctp != NULL);
 80090ba:	4604      	mov	r4, r0
 80090bc:	2800      	cmp	r0, #0
 80090be:	d1f4      	bne.n	80090aa <chRegFindThreadByName+0xa>

  return NULL;
}
 80090c0:	4620      	mov	r0, r4
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	f3af 8000 	nop.w
 80090c8:	f3af 8000 	nop.w
 80090cc:	f3af 8000 	nop.w

080090d0 <chRegFindThreadByPointer>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByPointer(thread_t *tp) {
 80090d0:	b510      	push	{r4, lr}
 80090d2:	4604      	mov	r4, r0
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
 80090d4:	f7ff ff7c 	bl	8008fd0 <chRegFirstThread>
 80090d8:	4603      	mov	r3, r0
  do {
    if (ctp == tp) {
 80090da:	42a3      	cmp	r3, r4
 80090dc:	d005      	beq.n	80090ea <chRegFindThreadByPointer+0x1a>
      return ctp;
    }
    ctp = chRegNextThread(ctp);
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff ff9e 	bl	8009020 <chRegNextThread>
  } while (ctp != NULL);
 80090e4:	4603      	mov	r3, r0
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d1f7      	bne.n	80090da <chRegFindThreadByPointer+0xa>

  return NULL;
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	bd10      	pop	{r4, pc}
 80090ee:	bf00      	nop

080090f0 <chRegFindThreadByWorkingArea>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa) {
 80090f0:	b510      	push	{r4, lr}
 80090f2:	4604      	mov	r4, r0
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
 80090f4:	f7ff ff6c 	bl	8008fd0 <chRegFirstThread>
 80090f8:	4603      	mov	r3, r0
  return tp->wabase;
 80090fa:	69da      	ldr	r2, [r3, #28]
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 80090fc:	42a2      	cmp	r2, r4
 80090fe:	d005      	beq.n	800910c <chRegFindThreadByWorkingArea+0x1c>
      return ctp;
    }
    ctp = chRegNextThread(ctp);
 8009100:	4618      	mov	r0, r3
 8009102:	f7ff ff8d 	bl	8009020 <chRegNextThread>
  } while (ctp != NULL);
 8009106:	4603      	mov	r3, r0
 8009108:	2800      	cmp	r0, #0
 800910a:	d1f6      	bne.n	80090fa <chRegFindThreadByWorkingArea+0xa>

  return NULL;
}
 800910c:	4618      	mov	r0, r3
 800910e:	bd10      	pop	{r4, pc}

08009110 <chSemObjectInit>:
 * @param[in] n         initial value of the semaphore counter. Must be
 *                      non-negative.
 *
 * @init
 */
void chSemObjectInit(semaphore_t *sp, cnt_t n) {
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	460d      	mov	r5, r1

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
 8009114:	4604      	mov	r4, r0
 8009116:	b108      	cbz	r0, 800911c <chSemObjectInit+0xc>
 8009118:	2900      	cmp	r1, #0
 800911a:	da02      	bge.n	8009122 <chSemObjectInit+0x12>
 800911c:	4803      	ldr	r0, [pc, #12]	; (800912c <chSemObjectInit+0x1c>)
 800911e:	f7fe faa7 	bl	8007670 <chSysHalt>
  tqp->next = (thread_t *)tqp;
 8009122:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
 8009124:	6064      	str	r4, [r4, #4]

  queue_init(&sp->queue);
  sp->cnt = n;
 8009126:	60a5      	str	r5, [r4, #8]
}
 8009128:	bd38      	pop	{r3, r4, r5, pc}
 800912a:	bf00      	nop
 800912c:	080151dc 	.word	0x080151dc

08009130 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	4604      	mov	r4, r0
 8009134:	460e      	mov	r6, r1
  cnt_t cnt;

  chDbgCheckClassI();
 8009136:	f7fe fccb 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
 800913a:	b194      	cbz	r4, 8009162 <chSemResetI+0x32>
 800913c:	2e00      	cmp	r6, #0
 800913e:	db10      	blt.n	8009162 <chSemResetI+0x32>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 8009140:	68a3      	ldr	r3, [r4, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	db02      	blt.n	800914c <chSemResetI+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8009146:	6822      	ldr	r2, [r4, #0]
 8009148:	4294      	cmp	r4, r2
 800914a:	d007      	beq.n	800915c <chSemResetI+0x2c>
 800914c:	2b00      	cmp	r3, #0
 800914e:	da02      	bge.n	8009156 <chSemResetI+0x26>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8009150:	6823      	ldr	r3, [r4, #0]
 8009152:	429c      	cmp	r4, r3
 8009154:	d102      	bne.n	800915c <chSemResetI+0x2c>
 8009156:	480b      	ldr	r0, [pc, #44]	; (8009184 <chSemResetI+0x54>)
 8009158:	f7fe fa8a 	bl	8007670 <chSysHalt>
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  cnt = sp->cnt;
 800915c:	68a5      	ldr	r5, [r4, #8]
  sp->cnt = n;
 800915e:	60a6      	str	r6, [r4, #8]
  while (++cnt <= (cnt_t)0) {
 8009160:	e00c      	b.n	800917c <chSemResetI+0x4c>
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
 8009162:	4808      	ldr	r0, [pc, #32]	; (8009184 <chSemResetI+0x54>)
 8009164:	f7fe fa84 	bl	8007670 <chSysHalt>
 8009168:	e7ea      	b.n	8009140 <chSemResetI+0x10>
  thread_t *tp = tqp->prev;
 800916a:	6860      	ldr	r0, [r4, #4]
  tqp->prev             = tp->queue.prev;
 800916c:	6843      	ldr	r3, [r0, #4]
 800916e:	6063      	str	r3, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 8009170:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8009172:	f7fe ff9d 	bl	80080b0 <chSchReadyI>
 8009176:	f06f 0301 	mvn.w	r3, #1
 800917a:	6243      	str	r3, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 800917c:	3501      	adds	r5, #1
 800917e:	2d00      	cmp	r5, #0
 8009180:	ddf3      	ble.n	800916a <chSemResetI+0x3a>
  }
}
 8009182:	bd70      	pop	{r4, r5, r6, pc}
 8009184:	080151ec 	.word	0x080151ec
 8009188:	f3af 8000 	nop.w
 800918c:	f3af 8000 	nop.w

08009190 <chSemReset>:
void chSemReset(semaphore_t *sp, cnt_t n) {
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	4604      	mov	r4, r0
 8009194:	460d      	mov	r5, r1
 8009196:	2320      	movs	r3, #32
 8009198:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800919c:	f7ff fef8 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80091a0:	f7fe fbf6 	bl	8007990 <_dbg_check_lock>
  chSemResetI(sp, n);
 80091a4:	4629      	mov	r1, r5
 80091a6:	4620      	mov	r0, r4
 80091a8:	f7ff ffc2 	bl	8009130 <chSemResetI>
  chSchRescheduleS();
 80091ac:	f7ff f928 	bl	8008400 <chSchRescheduleS>
  _dbg_check_unlock();
 80091b0:	f7fe fc06 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80091b4:	f7ff fef4 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80091b8:	4b08      	ldr	r3, [pc, #32]	; (80091dc <chSemReset+0x4c>)
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d004      	beq.n	80091ca <chSemReset+0x3a>
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	6899      	ldr	r1, [r3, #8]
 80091c4:	6893      	ldr	r3, [r2, #8]
 80091c6:	4299      	cmp	r1, r3
 80091c8:	d303      	bcc.n	80091d2 <chSemReset+0x42>
 80091ca:	2300      	movs	r3, #0
 80091cc:	f383 8811 	msr	BASEPRI, r3
}
 80091d0:	bd38      	pop	{r3, r4, r5, pc}
 80091d2:	4803      	ldr	r0, [pc, #12]	; (80091e0 <chSemReset+0x50>)
 80091d4:	f7fe fa4c 	bl	8007670 <chSysHalt>
 80091d8:	e7f7      	b.n	80091ca <chSemReset+0x3a>
 80091da:	bf00      	nop
 80091dc:	20004f68 	.word	0x20004f68
 80091e0:	080151f8 	.word	0x080151f8
 80091e4:	f3af 8000 	nop.w
 80091e8:	f3af 8000 	nop.w
 80091ec:	f3af 8000 	nop.w

080091f0 <chSemWaitS>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @sclass
 */
msg_t chSemWaitS(semaphore_t *sp) {
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4604      	mov	r4, r0

  chDbgCheckClassS();
 80091f4:	f7fe fc84 	bl	8007b00 <chDbgCheckClassS>
  chDbgCheck(sp != NULL);
 80091f8:	b1a4      	cbz	r4, 8009224 <chSemWaitS+0x34>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 80091fa:	68a3      	ldr	r3, [r4, #8]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	db02      	blt.n	8009206 <chSemWaitS+0x16>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8009200:	6822      	ldr	r2, [r4, #0]
 8009202:	4294      	cmp	r4, r2
 8009204:	d007      	beq.n	8009216 <chSemWaitS+0x26>
 8009206:	2b00      	cmp	r3, #0
 8009208:	da02      	bge.n	8009210 <chSemWaitS+0x20>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	429c      	cmp	r4, r3
 800920e:	d102      	bne.n	8009216 <chSemWaitS+0x26>
 8009210:	480d      	ldr	r0, [pc, #52]	; (8009248 <chSemWaitS+0x58>)
 8009212:	f7fe fa2d 	bl	8007670 <chSysHalt>
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 8009216:	68a3      	ldr	r3, [r4, #8]
 8009218:	3b01      	subs	r3, #1
 800921a:	60a3      	str	r3, [r4, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	db05      	blt.n	800922c <chSemWaitS+0x3c>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->u.rdymsg;
  }

  return MSG_OK;
 8009220:	2000      	movs	r0, #0
}
 8009222:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(sp != NULL);
 8009224:	4808      	ldr	r0, [pc, #32]	; (8009248 <chSemWaitS+0x58>)
 8009226:	f7fe fa23 	bl	8007670 <chSysHalt>
 800922a:	e7e6      	b.n	80091fa <chSemWaitS+0xa>
    currp->u.wtsemp = sp;
 800922c:	4d07      	ldr	r5, [pc, #28]	; (800924c <chSemWaitS+0x5c>)
 800922e:	69ab      	ldr	r3, [r5, #24]
 8009230:	625c      	str	r4, [r3, #36]	; 0x24
  tp->queue.next             = (thread_t *)tqp;
 8009232:	601c      	str	r4, [r3, #0]
  tp->queue.prev             = tqp->prev;
 8009234:	6862      	ldr	r2, [r4, #4]
 8009236:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8009238:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 800923a:	6063      	str	r3, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 800923c:	2005      	movs	r0, #5
 800923e:	f7fe ffc7 	bl	80081d0 <chSchGoSleepS>
    return currp->u.rdymsg;
 8009242:	69ab      	ldr	r3, [r5, #24]
 8009244:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009246:	e7ec      	b.n	8009222 <chSemWaitS+0x32>
 8009248:	08015204 	.word	0x08015204
 800924c:	20004f68 	.word	0x20004f68

08009250 <chSemWait>:
msg_t chSemWait(semaphore_t *sp) {
 8009250:	b510      	push	{r4, lr}
 8009252:	4604      	mov	r4, r0
 8009254:	2320      	movs	r3, #32
 8009256:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800925a:	f7ff fe99 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800925e:	f7fe fb97 	bl	8007990 <_dbg_check_lock>
  msg = chSemWaitS(sp);
 8009262:	4620      	mov	r0, r4
 8009264:	f7ff ffc4 	bl	80091f0 <chSemWaitS>
 8009268:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800926a:	f7fe fba9 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800926e:	f7ff fe97 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009272:	4b09      	ldr	r3, [pc, #36]	; (8009298 <chSemWait+0x48>)
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	429a      	cmp	r2, r3
 8009278:	d004      	beq.n	8009284 <chSemWait+0x34>
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	6899      	ldr	r1, [r3, #8]
 800927e:	6893      	ldr	r3, [r2, #8]
 8009280:	4299      	cmp	r1, r3
 8009282:	d304      	bcc.n	800928e <chSemWait+0x3e>
 8009284:	2300      	movs	r3, #0
 8009286:	f383 8811 	msr	BASEPRI, r3
}
 800928a:	4620      	mov	r0, r4
 800928c:	bd10      	pop	{r4, pc}
 800928e:	4803      	ldr	r0, [pc, #12]	; (800929c <chSemWait+0x4c>)
 8009290:	f7fe f9ee 	bl	8007670 <chSysHalt>
 8009294:	e7f6      	b.n	8009284 <chSemWait+0x34>
 8009296:	bf00      	nop
 8009298:	20004f68 	.word	0x20004f68
 800929c:	080151f8 	.word	0x080151f8

080092a0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout) {
 80092a0:	b5d0      	push	{r4, r6, r7, lr}
 80092a2:	4604      	mov	r4, r0
 80092a4:	4616      	mov	r6, r2
 80092a6:	461f      	mov	r7, r3

  chDbgCheckClassS();
 80092a8:	f7fe fc2a 	bl	8007b00 <chDbgCheckClassS>
  chDbgCheck(sp != NULL);
 80092ac:	b1a4      	cbz	r4, 80092d8 <chSemWaitTimeoutS+0x38>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	db02      	blt.n	80092ba <chSemWaitTimeoutS+0x1a>
  return (bool)(tqp->next == (const thread_t *)tqp);
 80092b4:	6822      	ldr	r2, [r4, #0]
 80092b6:	4294      	cmp	r4, r2
 80092b8:	d007      	beq.n	80092ca <chSemWaitTimeoutS+0x2a>
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	da02      	bge.n	80092c4 <chSemWaitTimeoutS+0x24>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	429c      	cmp	r4, r3
 80092c2:	d102      	bne.n	80092ca <chSemWaitTimeoutS+0x2a>
 80092c4:	4811      	ldr	r0, [pc, #68]	; (800930c <chSemWaitTimeoutS+0x6c>)
 80092c6:	f7fe f9d3 	bl	8007670 <chSysHalt>
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 80092ca:	68a2      	ldr	r2, [r4, #8]
 80092cc:	1e53      	subs	r3, r2, #1
 80092ce:	60a3      	str	r3, [r4, #8]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	db05      	blt.n	80092e0 <chSemWaitTimeoutS+0x40>
    sem_insert(currp, &sp->queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
  }

  return MSG_OK;
 80092d4:	2000      	movs	r0, #0
}
 80092d6:	bdd0      	pop	{r4, r6, r7, pc}
  chDbgCheck(sp != NULL);
 80092d8:	480c      	ldr	r0, [pc, #48]	; (800930c <chSemWaitTimeoutS+0x6c>)
 80092da:	f7fe f9c9 	bl	8007670 <chSysHalt>
 80092de:	e7e6      	b.n	80092ae <chSemWaitTimeoutS+0xe>
    if (TIME_IMMEDIATE == timeout) {
 80092e0:	ea56 0307 	orrs.w	r3, r6, r7
 80092e4:	d00d      	beq.n	8009302 <chSemWaitTimeoutS+0x62>
    currp->u.wtsemp = sp;
 80092e6:	4b0a      	ldr	r3, [pc, #40]	; (8009310 <chSemWaitTimeoutS+0x70>)
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	625c      	str	r4, [r3, #36]	; 0x24
  tp->queue.next             = (thread_t *)tqp;
 80092ec:	601c      	str	r4, [r3, #0]
  tp->queue.prev             = tqp->prev;
 80092ee:	6862      	ldr	r2, [r4, #4]
 80092f0:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80092f2:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 80092f4:	6063      	str	r3, [r4, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 80092f6:	4632      	mov	r2, r6
 80092f8:	463b      	mov	r3, r7
 80092fa:	2005      	movs	r0, #5
 80092fc:	f7fe ff98 	bl	8008230 <chSchGoSleepTimeoutS>
 8009300:	e7e9      	b.n	80092d6 <chSemWaitTimeoutS+0x36>
      sp->cnt++;
 8009302:	60a2      	str	r2, [r4, #8]
      return MSG_TIMEOUT;
 8009304:	f04f 30ff 	mov.w	r0, #4294967295
 8009308:	e7e5      	b.n	80092d6 <chSemWaitTimeoutS+0x36>
 800930a:	bf00      	nop
 800930c:	08015210 	.word	0x08015210
 8009310:	20004f68 	.word	0x20004f68
 8009314:	f3af 8000 	nop.w
 8009318:	f3af 8000 	nop.w
 800931c:	f3af 8000 	nop.w

08009320 <chSemWaitTimeout>:
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 8009320:	b5d0      	push	{r4, r6, r7, lr}
 8009322:	4604      	mov	r4, r0
 8009324:	4616      	mov	r6, r2
 8009326:	461f      	mov	r7, r3
 8009328:	2320      	movs	r3, #32
 800932a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800932e:	f7ff fe2f 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009332:	f7fe fb2d 	bl	8007990 <_dbg_check_lock>
  msg = chSemWaitTimeoutS(sp, timeout);
 8009336:	4632      	mov	r2, r6
 8009338:	463b      	mov	r3, r7
 800933a:	4620      	mov	r0, r4
 800933c:	f7ff ffb0 	bl	80092a0 <chSemWaitTimeoutS>
 8009340:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8009342:	f7fe fb3d 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009346:	f7ff fe2b 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800934a:	4b09      	ldr	r3, [pc, #36]	; (8009370 <chSemWaitTimeout+0x50>)
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	429a      	cmp	r2, r3
 8009350:	d004      	beq.n	800935c <chSemWaitTimeout+0x3c>
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	6899      	ldr	r1, [r3, #8]
 8009356:	6893      	ldr	r3, [r2, #8]
 8009358:	4299      	cmp	r1, r3
 800935a:	d304      	bcc.n	8009366 <chSemWaitTimeout+0x46>
 800935c:	2300      	movs	r3, #0
 800935e:	f383 8811 	msr	BASEPRI, r3
}
 8009362:	4620      	mov	r0, r4
 8009364:	bdd0      	pop	{r4, r6, r7, pc}
 8009366:	4803      	ldr	r0, [pc, #12]	; (8009374 <chSemWaitTimeout+0x54>)
 8009368:	f7fe f982 	bl	8007670 <chSysHalt>
 800936c:	e7f6      	b.n	800935c <chSemWaitTimeout+0x3c>
 800936e:	bf00      	nop
 8009370:	20004f68 	.word	0x20004f68
 8009374:	080151f8 	.word	0x080151f8
 8009378:	f3af 8000 	nop.w
 800937c:	f3af 8000 	nop.w

08009380 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8009380:	b510      	push	{r4, lr}

  chDbgCheck(sp != NULL);
 8009382:	4604      	mov	r4, r0
 8009384:	b350      	cbz	r0, 80093dc <chSemSignal+0x5c>
 8009386:	2320      	movs	r3, #32
 8009388:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800938c:	f7ff fe00 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009390:	f7fe fafe 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 8009394:	68a3      	ldr	r3, [r4, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	db02      	blt.n	80093a0 <chSemSignal+0x20>
  return (bool)(tqp->next == (const thread_t *)tqp);
 800939a:	6822      	ldr	r2, [r4, #0]
 800939c:	4294      	cmp	r4, r2
 800939e:	d007      	beq.n	80093b0 <chSemSignal+0x30>
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	da02      	bge.n	80093aa <chSemSignal+0x2a>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	429c      	cmp	r4, r3
 80093a8:	d102      	bne.n	80093b0 <chSemSignal+0x30>
 80093aa:	4814      	ldr	r0, [pc, #80]	; (80093fc <chSemSignal+0x7c>)
 80093ac:	f7fe f960 	bl	8007670 <chSysHalt>
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");
  if (++sp->cnt <= (cnt_t)0) {
 80093b0:	68a3      	ldr	r3, [r4, #8]
 80093b2:	3301      	adds	r3, #1
 80093b4:	60a3      	str	r3, [r4, #8]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	dd14      	ble.n	80093e4 <chSemSignal+0x64>
  _dbg_check_unlock();
 80093ba:	f7fe fb01 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80093be:	f7ff fdef 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80093c2:	4b0f      	ldr	r3, [pc, #60]	; (8009400 <chSemSignal+0x80>)
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d004      	beq.n	80093d4 <chSemSignal+0x54>
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	6899      	ldr	r1, [r3, #8]
 80093ce:	6893      	ldr	r3, [r2, #8]
 80093d0:	4299      	cmp	r1, r3
 80093d2:	d30f      	bcc.n	80093f4 <chSemSignal+0x74>
 80093d4:	2300      	movs	r3, #0
 80093d6:	f383 8811 	msr	BASEPRI, r3
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
  }
  chSysUnlock();
}
 80093da:	bd10      	pop	{r4, pc}
  chDbgCheck(sp != NULL);
 80093dc:	4807      	ldr	r0, [pc, #28]	; (80093fc <chSemSignal+0x7c>)
 80093de:	f7fe f947 	bl	8007670 <chSysHalt>
 80093e2:	e7d0      	b.n	8009386 <chSemSignal+0x6>
  thread_t *tp = tqp->next;
 80093e4:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 80093e6:	6803      	ldr	r3, [r0, #0]
 80093e8:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80093ea:	605c      	str	r4, [r3, #4]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 80093ec:	2100      	movs	r1, #0
 80093ee:	f7fe ff4f 	bl	8008290 <chSchWakeupS>
 80093f2:	e7e2      	b.n	80093ba <chSemSignal+0x3a>
 80093f4:	4803      	ldr	r0, [pc, #12]	; (8009404 <chSemSignal+0x84>)
 80093f6:	f7fe f93b 	bl	8007670 <chSysHalt>
 80093fa:	e7eb      	b.n	80093d4 <chSemSignal+0x54>
 80093fc:	08015224 	.word	0x08015224
 8009400:	20004f68 	.word	0x20004f68
 8009404:	080151f8 	.word	0x080151f8
 8009408:	f3af 8000 	nop.w
 800940c:	f3af 8000 	nop.w

08009410 <chSemSignalI>:
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8009410:	b510      	push	{r4, lr}
 8009412:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8009414:	f7fe fb5c 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(sp != NULL);
 8009418:	b19c      	cbz	r4, 8009442 <chSemSignalI+0x32>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 800941a:	68a3      	ldr	r3, [r4, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	db02      	blt.n	8009426 <chSemSignalI+0x16>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8009420:	6822      	ldr	r2, [r4, #0]
 8009422:	4294      	cmp	r4, r2
 8009424:	d007      	beq.n	8009436 <chSemSignalI+0x26>
 8009426:	2b00      	cmp	r3, #0
 8009428:	da02      	bge.n	8009430 <chSemSignalI+0x20>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	429c      	cmp	r4, r3
 800942e:	d102      	bne.n	8009436 <chSemSignalI+0x26>
 8009430:	480a      	ldr	r0, [pc, #40]	; (800945c <chSemSignalI+0x4c>)
 8009432:	f7fe f91d 	bl	8007670 <chSysHalt>
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8009436:	68a3      	ldr	r3, [r4, #8]
 8009438:	3301      	adds	r3, #1
 800943a:	60a3      	str	r3, [r4, #8]
 800943c:	2b00      	cmp	r3, #0
 800943e:	dd04      	ble.n	800944a <chSemSignalI+0x3a>
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 8009440:	bd10      	pop	{r4, pc}
  chDbgCheck(sp != NULL);
 8009442:	4806      	ldr	r0, [pc, #24]	; (800945c <chSemSignalI+0x4c>)
 8009444:	f7fe f914 	bl	8007670 <chSysHalt>
 8009448:	e7e7      	b.n	800941a <chSemSignalI+0xa>
  thread_t *tp = tqp->next;
 800944a:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 800944c:	6803      	ldr	r3, [r0, #0]
 800944e:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009450:	605c      	str	r4, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8009456:	f7fe fe2b 	bl	80080b0 <chSchReadyI>
}
 800945a:	e7f1      	b.n	8009440 <chSemSignalI+0x30>
 800945c:	08015230 	.word	0x08015230

08009460 <chSemAddCounterI>:
 * @param[in] n         value to be added to the semaphore counter. The value
 *                      must be positive.
 *
 * @iclass
 */
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	4604      	mov	r4, r0
 8009464:	460d      	mov	r5, r1

  chDbgCheckClassI();
 8009466:	f7fe fb33 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
 800946a:	b184      	cbz	r4, 800948e <chSemAddCounterI+0x2e>
 800946c:	2d00      	cmp	r5, #0
 800946e:	dd0e      	ble.n	800948e <chSemAddCounterI+0x2e>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 8009470:	68a3      	ldr	r3, [r4, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	db02      	blt.n	800947c <chSemAddCounterI+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8009476:	6822      	ldr	r2, [r4, #0]
 8009478:	4294      	cmp	r4, r2
 800947a:	d00d      	beq.n	8009498 <chSemAddCounterI+0x38>
 800947c:	2b00      	cmp	r3, #0
 800947e:	da02      	bge.n	8009486 <chSemAddCounterI+0x26>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	429c      	cmp	r4, r3
 8009484:	d108      	bne.n	8009498 <chSemAddCounterI+0x38>
 8009486:	480d      	ldr	r0, [pc, #52]	; (80094bc <chSemAddCounterI+0x5c>)
 8009488:	f7fe f8f2 	bl	8007670 <chSysHalt>
 800948c:	e004      	b.n	8009498 <chSemAddCounterI+0x38>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
 800948e:	480b      	ldr	r0, [pc, #44]	; (80094bc <chSemAddCounterI+0x5c>)
 8009490:	f7fe f8ee 	bl	8007670 <chSysHalt>
 8009494:	e7ec      	b.n	8009470 <chSemAddCounterI+0x10>

  while (n > (cnt_t)0) {
    if (++sp->cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
    }
    n--;
 8009496:	3d01      	subs	r5, #1
  while (n > (cnt_t)0) {
 8009498:	2d00      	cmp	r5, #0
 800949a:	dd0d      	ble.n	80094b8 <chSemAddCounterI+0x58>
    if (++sp->cnt <= (cnt_t)0) {
 800949c:	68a3      	ldr	r3, [r4, #8]
 800949e:	3301      	adds	r3, #1
 80094a0:	60a3      	str	r3, [r4, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	dcf7      	bgt.n	8009496 <chSemAddCounterI+0x36>
  thread_t *tp = tqp->next;
 80094a6:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 80094a8:	6803      	ldr	r3, [r0, #0]
 80094aa:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80094ac:	605c      	str	r4, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 80094ae:	f7fe fdff 	bl	80080b0 <chSchReadyI>
 80094b2:	2300      	movs	r3, #0
 80094b4:	6243      	str	r3, [r0, #36]	; 0x24
 80094b6:	e7ee      	b.n	8009496 <chSemAddCounterI+0x36>
  }
}
 80094b8:	bd38      	pop	{r3, r4, r5, pc}
 80094ba:	bf00      	nop
 80094bc:	08015240 	.word	0x08015240

080094c0 <chSemSignalWait>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	460c      	mov	r4, r1
  msg_t msg;

  chDbgCheck((sps != NULL) && (spw != NULL));
 80094c4:	4605      	mov	r5, r0
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d043      	beq.n	8009552 <chSemSignalWait+0x92>
 80094ca:	2900      	cmp	r1, #0
 80094cc:	d041      	beq.n	8009552 <chSemSignalWait+0x92>
 80094ce:	2320      	movs	r3, #32
 80094d0:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80094d4:	f7ff fd5c 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80094d8:	f7fe fa5a 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(((sps->cnt >= (cnt_t)0) && queue_isempty(&sps->queue)) ||
 80094dc:	68ab      	ldr	r3, [r5, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	db02      	blt.n	80094e8 <chSemSignalWait+0x28>
  return (bool)(tqp->next == (const thread_t *)tqp);
 80094e2:	682a      	ldr	r2, [r5, #0]
 80094e4:	4295      	cmp	r5, r2
 80094e6:	d007      	beq.n	80094f8 <chSemSignalWait+0x38>
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	da02      	bge.n	80094f2 <chSemSignalWait+0x32>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	429d      	cmp	r5, r3
 80094f0:	d102      	bne.n	80094f8 <chSemSignalWait+0x38>
 80094f2:	4827      	ldr	r0, [pc, #156]	; (8009590 <chSemSignalWait+0xd0>)
 80094f4:	f7fe f8bc 	bl	8007670 <chSysHalt>
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
 80094f8:	68a3      	ldr	r3, [r4, #8]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	db02      	blt.n	8009504 <chSemSignalWait+0x44>
  return (bool)(tqp->next == (const thread_t *)tqp);
 80094fe:	6822      	ldr	r2, [r4, #0]
 8009500:	4294      	cmp	r4, r2
 8009502:	d007      	beq.n	8009514 <chSemSignalWait+0x54>
 8009504:	2b00      	cmp	r3, #0
 8009506:	da02      	bge.n	800950e <chSemSignalWait+0x4e>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	429c      	cmp	r4, r3
 800950c:	d102      	bne.n	8009514 <chSemSignalWait+0x54>
 800950e:	4820      	ldr	r0, [pc, #128]	; (8009590 <chSemSignalWait+0xd0>)
 8009510:	f7fe f8ae 	bl	8007670 <chSysHalt>
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 8009514:	68ab      	ldr	r3, [r5, #8]
 8009516:	3301      	adds	r3, #1
 8009518:	60ab      	str	r3, [r5, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	dd1d      	ble.n	800955a <chSemSignalWait+0x9a>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 800951e:	68a3      	ldr	r3, [r4, #8]
 8009520:	3b01      	subs	r3, #1
 8009522:	60a3      	str	r3, [r4, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	db21      	blt.n	800956c <chSemSignalWait+0xac>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8009528:	f7fe ff6a 	bl	8008400 <chSchRescheduleS>
    msg = MSG_OK;
 800952c:	2400      	movs	r4, #0
  _dbg_check_unlock();
 800952e:	f7fe fa47 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009532:	f7ff fd35 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009536:	4b17      	ldr	r3, [pc, #92]	; (8009594 <chSemSignalWait+0xd4>)
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	429a      	cmp	r2, r3
 800953c:	d004      	beq.n	8009548 <chSemSignalWait+0x88>
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	6899      	ldr	r1, [r3, #8]
 8009542:	6893      	ldr	r3, [r2, #8]
 8009544:	4299      	cmp	r1, r3
 8009546:	d31e      	bcc.n	8009586 <chSemSignalWait+0xc6>
 8009548:	2300      	movs	r3, #0
 800954a:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 800954e:	4620      	mov	r0, r4
 8009550:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck((sps != NULL) && (spw != NULL));
 8009552:	480f      	ldr	r0, [pc, #60]	; (8009590 <chSemSignalWait+0xd0>)
 8009554:	f7fe f88c 	bl	8007670 <chSysHalt>
 8009558:	e7b9      	b.n	80094ce <chSemSignalWait+0xe>
  thread_t *tp = tqp->next;
 800955a:	6828      	ldr	r0, [r5, #0]
  tqp->next             = tp->queue.next;
 800955c:	6803      	ldr	r3, [r0, #0]
 800955e:	602b      	str	r3, [r5, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009560:	605d      	str	r5, [r3, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 8009562:	f7fe fda5 	bl	80080b0 <chSchReadyI>
 8009566:	2300      	movs	r3, #0
 8009568:	6243      	str	r3, [r0, #36]	; 0x24
 800956a:	e7d8      	b.n	800951e <chSemSignalWait+0x5e>
    thread_t *ctp = currp;
 800956c:	4b09      	ldr	r3, [pc, #36]	; (8009594 <chSemSignalWait+0xd4>)
 800956e:	699d      	ldr	r5, [r3, #24]
  tp->queue.next             = (thread_t *)tqp;
 8009570:	602c      	str	r4, [r5, #0]
  tp->queue.prev             = tqp->prev;
 8009572:	6863      	ldr	r3, [r4, #4]
 8009574:	606b      	str	r3, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8009576:	601d      	str	r5, [r3, #0]
  tqp->prev                  = tp;
 8009578:	6065      	str	r5, [r4, #4]
    ctp->u.wtsemp = spw;
 800957a:	626c      	str	r4, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTSEM);
 800957c:	2005      	movs	r0, #5
 800957e:	f7fe fe27 	bl	80081d0 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 8009582:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8009584:	e7d3      	b.n	800952e <chSemSignalWait+0x6e>
 8009586:	4804      	ldr	r0, [pc, #16]	; (8009598 <chSemSignalWait+0xd8>)
 8009588:	f7fe f872 	bl	8007670 <chSysHalt>
 800958c:	e7dc      	b.n	8009548 <chSemSignalWait+0x88>
 800958e:	bf00      	nop
 8009590:	08015254 	.word	0x08015254
 8009594:	20004f68 	.word	0x20004f68
 8009598:	080151f8 	.word	0x080151f8
 800959c:	00000000 	.word	0x00000000

080095a0 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 80095a0:	b510      	push	{r4, lr}

  chDbgCheck(mp != NULL);
 80095a2:	4604      	mov	r4, r0
 80095a4:	b120      	cbz	r0, 80095b0 <chMtxObjectInit+0x10>
  tqp->next = (thread_t *)tqp;
 80095a6:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
 80095a8:	6064      	str	r4, [r4, #4]

  queue_init(&mp->queue);
  mp->owner = NULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	60a3      	str	r3, [r4, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 80095ae:	bd10      	pop	{r4, pc}
  chDbgCheck(mp != NULL);
 80095b0:	4801      	ldr	r0, [pc, #4]	; (80095b8 <chMtxObjectInit+0x18>)
 80095b2:	f7fe f85d 	bl	8007670 <chSysHalt>
 80095b6:	e7f6      	b.n	80095a6 <chMtxObjectInit+0x6>
 80095b8:	08015264 	.word	0x08015264
 80095bc:	f3af 8000 	nop.w

080095c0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	4605      	mov	r5, r0
  thread_t *ctp = currp;
 80095c4:	4b3a      	ldr	r3, [pc, #232]	; (80096b0 <chMtxLockS+0xf0>)
 80095c6:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
 80095c8:	f7fe fa9a 	bl	8007b00 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 80095cc:	2d00      	cmp	r5, #0
 80095ce:	d02e      	beq.n	800962e <chMtxLockS+0x6e>

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 80095d0:	68a8      	ldr	r0, [r5, #8]
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d067      	beq.n	80096a6 <chMtxLockS+0xe6>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 80095d6:	6882      	ldr	r2, [r0, #8]
 80095d8:	68a3      	ldr	r3, [r4, #8]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d208      	bcs.n	80095f0 <chMtxLockS+0x30>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;
 80095de:	6083      	str	r3, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 80095e0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80095e4:	2b06      	cmp	r3, #6
 80095e6:	d026      	beq.n	8009636 <chMtxLockS+0x76>
 80095e8:	2b07      	cmp	r3, #7
 80095ea:	d03b      	beq.n	8009664 <chMtxLockS+0xa4>
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d04e      	beq.n	800968e <chMtxLockS+0xce>
        }
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
 80095f0:	4628      	mov	r0, r5
  thread_t *cp = (thread_t *)tqp;
 80095f2:	462b      	mov	r3, r5
    cp = cp->queue.next;
 80095f4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80095f6:	4298      	cmp	r0, r3
 80095f8:	d003      	beq.n	8009602 <chMtxLockS+0x42>
 80095fa:	6899      	ldr	r1, [r3, #8]
 80095fc:	68a2      	ldr	r2, [r4, #8]
 80095fe:	4291      	cmp	r1, r2
 8009600:	d2f8      	bcs.n	80095f4 <chMtxLockS+0x34>
  tp->queue.next             = cp;
 8009602:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8009608:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 800960a:	605c      	str	r4, [r3, #4]
      ctp->u.wtmtxp = mp;
 800960c:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 800960e:	2006      	movs	r0, #6
 8009610:	f7fe fdde 	bl	80081d0 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == ctp, "not owner");
 8009614:	68ab      	ldr	r3, [r5, #8]
 8009616:	42a3      	cmp	r3, r4
 8009618:	d002      	beq.n	8009620 <chMtxLockS+0x60>
 800961a:	4826      	ldr	r0, [pc, #152]	; (80096b4 <chMtxLockS+0xf4>)
 800961c:	f7fe f828 	bl	8007670 <chSysHalt>
      chDbgAssert(ctp->mtxlist == mp, "not owned");
 8009620:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009622:	42ab      	cmp	r3, r5
 8009624:	d002      	beq.n	800962c <chMtxLockS+0x6c>
 8009626:	4823      	ldr	r0, [pc, #140]	; (80096b4 <chMtxLockS+0xf4>)
 8009628:	f7fe f822 	bl	8007670 <chSysHalt>
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
  }
}
 800962c:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mp != NULL);
 800962e:	4821      	ldr	r0, [pc, #132]	; (80096b4 <chMtxLockS+0xf4>)
 8009630:	f7fe f81e 	bl	8007670 <chSysHalt>
 8009634:	e7cc      	b.n	80095d0 <chMtxLockS+0x10>
  tp->queue.prev->queue.next = tp->queue.next;
 8009636:	6843      	ldr	r3, [r0, #4]
 8009638:	6802      	ldr	r2, [r0, #0]
 800963a:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800963c:	6803      	ldr	r3, [r0, #0]
 800963e:	6842      	ldr	r2, [r0, #4]
 8009640:	605a      	str	r2, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8009642:	6a46      	ldr	r6, [r0, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8009644:	4633      	mov	r3, r6
    cp = cp->queue.next;
 8009646:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8009648:	429e      	cmp	r6, r3
 800964a:	d003      	beq.n	8009654 <chMtxLockS+0x94>
 800964c:	6899      	ldr	r1, [r3, #8]
 800964e:	6882      	ldr	r2, [r0, #8]
 8009650:	4291      	cmp	r1, r2
 8009652:	d2f8      	bcs.n	8009646 <chMtxLockS+0x86>
  tp->queue.next             = cp;
 8009654:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 800965a:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800965c:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 800965e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009660:	6898      	ldr	r0, [r3, #8]
          continue;
 8009662:	e7b8      	b.n	80095d6 <chMtxLockS+0x16>
  tp->queue.prev->queue.next = tp->queue.next;
 8009664:	6843      	ldr	r3, [r0, #4]
 8009666:	6802      	ldr	r2, [r0, #0]
 8009668:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800966a:	6803      	ldr	r3, [r0, #0]
 800966c:	6842      	ldr	r2, [r0, #4]
 800966e:	605a      	str	r2, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8009670:	6a46      	ldr	r6, [r0, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8009672:	4633      	mov	r3, r6
    cp = cp->queue.next;
 8009674:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8009676:	429e      	cmp	r6, r3
 8009678:	d003      	beq.n	8009682 <chMtxLockS+0xc2>
 800967a:	6899      	ldr	r1, [r3, #8]
 800967c:	6882      	ldr	r2, [r0, #8]
 800967e:	4291      	cmp	r1, r2
 8009680:	d2f8      	bcs.n	8009674 <chMtxLockS+0xb4>
  tp->queue.next             = cp;
 8009682:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8009688:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800968a:	6058      	str	r0, [r3, #4]
 800968c:	e7b0      	b.n	80095f0 <chMtxLockS+0x30>
          tp->state = CH_STATE_CURRENT;
 800968e:	2301      	movs	r3, #1
 8009690:	f880 3020 	strb.w	r3, [r0, #32]
  tp->queue.prev->queue.next = tp->queue.next;
 8009694:	6843      	ldr	r3, [r0, #4]
 8009696:	6802      	ldr	r2, [r0, #0]
 8009698:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800969a:	6803      	ldr	r3, [r0, #0]
 800969c:	6842      	ldr	r2, [r0, #4]
 800969e:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 80096a0:	f7fe fd06 	bl	80080b0 <chSchReadyI>
          break;
 80096a4:	e7a4      	b.n	80095f0 <chMtxLockS+0x30>
    mp->owner = ctp;
 80096a6:	60ac      	str	r4, [r5, #8]
    mp->next = ctp->mtxlist;
 80096a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096aa:	60eb      	str	r3, [r5, #12]
    ctp->mtxlist = mp;
 80096ac:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80096ae:	e7bd      	b.n	800962c <chMtxLockS+0x6c>
 80096b0:	20004f68 	.word	0x20004f68
 80096b4:	08015274 	.word	0x08015274
 80096b8:	f3af 8000 	nop.w
 80096bc:	f3af 8000 	nop.w

080096c0 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 80096c0:	b510      	push	{r4, lr}
 80096c2:	4604      	mov	r4, r0
 80096c4:	2320      	movs	r3, #32
 80096c6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80096ca:	f7ff fc61 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80096ce:	f7fe f95f 	bl	8007990 <_dbg_check_lock>
  chMtxLockS(mp);
 80096d2:	4620      	mov	r0, r4
 80096d4:	f7ff ff74 	bl	80095c0 <chMtxLockS>
  _dbg_check_unlock();
 80096d8:	f7fe f972 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80096dc:	f7ff fc60 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80096e0:	4b08      	ldr	r3, [pc, #32]	; (8009704 <chMtxLock+0x44>)
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d004      	beq.n	80096f2 <chMtxLock+0x32>
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	6899      	ldr	r1, [r3, #8]
 80096ec:	6893      	ldr	r3, [r2, #8]
 80096ee:	4299      	cmp	r1, r3
 80096f0:	d303      	bcc.n	80096fa <chMtxLock+0x3a>
 80096f2:	2300      	movs	r3, #0
 80096f4:	f383 8811 	msr	BASEPRI, r3
}
 80096f8:	bd10      	pop	{r4, pc}
 80096fa:	4803      	ldr	r0, [pc, #12]	; (8009708 <chMtxLock+0x48>)
 80096fc:	f7fd ffb8 	bl	8007670 <chSysHalt>
 8009700:	e7f7      	b.n	80096f2 <chMtxLock+0x32>
 8009702:	bf00      	nop
 8009704:	20004f68 	.word	0x20004f68
 8009708:	08015280 	.word	0x08015280
 800970c:	f3af 8000 	nop.w

08009710 <chMtxTryLockS>:
 * @retval true         if the mutex has been successfully acquired
 * @retval false        if the lock attempt failed.
 *
 * @sclass
 */
bool chMtxTryLockS(mutex_t *mp) {
 8009710:	b510      	push	{r4, lr}
 8009712:	4604      	mov	r4, r0

  chDbgCheckClassS();
 8009714:	f7fe f9f4 	bl	8007b00 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 8009718:	b11c      	cbz	r4, 8009722 <chMtxTryLockS+0x12>

  if (mp->owner != NULL) {
 800971a:	68a3      	ldr	r3, [r4, #8]
 800971c:	b12b      	cbz	r3, 800972a <chMtxTryLockS+0x1a>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 800971e:	2000      	movs	r0, #0
#endif
  mp->owner = currp;
  mp->next = currp->mtxlist;
  currp->mtxlist = mp;
  return true;
}
 8009720:	bd10      	pop	{r4, pc}
  chDbgCheck(mp != NULL);
 8009722:	4807      	ldr	r0, [pc, #28]	; (8009740 <chMtxTryLockS+0x30>)
 8009724:	f7fd ffa4 	bl	8007670 <chSysHalt>
 8009728:	e7f7      	b.n	800971a <chMtxTryLockS+0xa>
  mp->owner = currp;
 800972a:	4b06      	ldr	r3, [pc, #24]	; (8009744 <chMtxTryLockS+0x34>)
 800972c:	699a      	ldr	r2, [r3, #24]
 800972e:	60a2      	str	r2, [r4, #8]
  mp->next = currp->mtxlist;
 8009730:	699a      	ldr	r2, [r3, #24]
 8009732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009734:	60e2      	str	r2, [r4, #12]
  currp->mtxlist = mp;
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	639c      	str	r4, [r3, #56]	; 0x38
  return true;
 800973a:	2001      	movs	r0, #1
 800973c:	e7f0      	b.n	8009720 <chMtxTryLockS+0x10>
 800973e:	bf00      	nop
 8009740:	0801528c 	.word	0x0801528c
 8009744:	20004f68 	.word	0x20004f68
 8009748:	f3af 8000 	nop.w
 800974c:	f3af 8000 	nop.w

08009750 <chMtxTryLock>:
bool chMtxTryLock(mutex_t *mp) {
 8009750:	b510      	push	{r4, lr}
 8009752:	4604      	mov	r4, r0
 8009754:	2320      	movs	r3, #32
 8009756:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800975a:	f7ff fc19 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800975e:	f7fe f917 	bl	8007990 <_dbg_check_lock>
  b = chMtxTryLockS(mp);
 8009762:	4620      	mov	r0, r4
 8009764:	f7ff ffd4 	bl	8009710 <chMtxTryLockS>
 8009768:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800976a:	f7fe f929 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800976e:	f7ff fc17 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009772:	4b09      	ldr	r3, [pc, #36]	; (8009798 <chMtxTryLock+0x48>)
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d004      	beq.n	8009784 <chMtxTryLock+0x34>
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	6899      	ldr	r1, [r3, #8]
 800977e:	6893      	ldr	r3, [r2, #8]
 8009780:	4299      	cmp	r1, r3
 8009782:	d304      	bcc.n	800978e <chMtxTryLock+0x3e>
 8009784:	2300      	movs	r3, #0
 8009786:	f383 8811 	msr	BASEPRI, r3
}
 800978a:	4620      	mov	r0, r4
 800978c:	bd10      	pop	{r4, pc}
 800978e:	4803      	ldr	r0, [pc, #12]	; (800979c <chMtxTryLock+0x4c>)
 8009790:	f7fd ff6e 	bl	8007670 <chSysHalt>
 8009794:	e7f6      	b.n	8009784 <chMtxTryLock+0x34>
 8009796:	bf00      	nop
 8009798:	20004f68 	.word	0x20004f68
 800979c:	08015280 	.word	0x08015280

080097a0 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 80097a2:	4b2e      	ldr	r3, [pc, #184]	; (800985c <chMtxUnlock+0xbc>)
 80097a4:	699e      	ldr	r6, [r3, #24]
  mutex_t *lmp;

  chDbgCheck(mp != NULL);
 80097a6:	4605      	mov	r5, r0
 80097a8:	b1f8      	cbz	r0, 80097ea <chMtxUnlock+0x4a>
 80097aa:	2320      	movs	r3, #32
 80097ac:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80097b0:	f7ff fbee 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80097b4:	f7fe f8ec 	bl	8007990 <_dbg_check_lock>

  chSysLock();

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 80097b8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80097ba:	b1d3      	cbz	r3, 80097f2 <chMtxUnlock+0x52>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 80097bc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	42b3      	cmp	r3, r6
 80097c2:	d002      	beq.n	80097ca <chMtxUnlock+0x2a>
 80097c4:	4826      	ldr	r0, [pc, #152]	; (8009860 <chMtxUnlock+0xc0>)
 80097c6:	f7fd ff53 	bl	8007670 <chSysHalt>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 80097ca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80097cc:	42ab      	cmp	r3, r5
 80097ce:	d002      	beq.n	80097d6 <chMtxUnlock+0x36>
 80097d0:	4823      	ldr	r0, [pc, #140]	; (8009860 <chMtxUnlock+0xc0>)
 80097d2:	f7fd ff4d 	bl	8007670 <chSysHalt>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 80097d6:	68eb      	ldr	r3, [r5, #12]
 80097d8:	63b3      	str	r3, [r6, #56]	; 0x38
 *
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 80097da:	f7fe f991 	bl	8007b00 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80097de:	682b      	ldr	r3, [r5, #0]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80097e0:	429d      	cmp	r5, r3
 80097e2:	d034      	beq.n	800984e <chMtxUnlock+0xae>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 80097e4:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
      lmp = ctp->mtxlist;
 80097e6:	6bb4      	ldr	r4, [r6, #56]	; 0x38
      while (lmp != NULL) {
 80097e8:	e008      	b.n	80097fc <chMtxUnlock+0x5c>
  chDbgCheck(mp != NULL);
 80097ea:	481d      	ldr	r0, [pc, #116]	; (8009860 <chMtxUnlock+0xc0>)
 80097ec:	f7fd ff40 	bl	8007670 <chSysHalt>
 80097f0:	e7db      	b.n	80097aa <chMtxUnlock+0xa>
  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 80097f2:	481b      	ldr	r0, [pc, #108]	; (8009860 <chMtxUnlock+0xc0>)
 80097f4:	f7fd ff3c 	bl	8007670 <chSysHalt>
 80097f8:	e7e0      	b.n	80097bc <chMtxUnlock+0x1c>
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 80097fa:	68e4      	ldr	r4, [r4, #12]
      while (lmp != NULL) {
 80097fc:	b14c      	cbz	r4, 8009812 <chMtxUnlock+0x72>
 80097fe:	f7fe f97f 	bl	8007b00 <chDbgCheckClassS>
 8009802:	6823      	ldr	r3, [r4, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 8009804:	429c      	cmp	r4, r3
 8009806:	d0f8      	beq.n	80097fa <chMtxUnlock+0x5a>
            (lmp->queue.next->prio > newprio)) {
 8009808:	689b      	ldr	r3, [r3, #8]
        if (chMtxQueueNotEmptyS(lmp) &&
 800980a:	42bb      	cmp	r3, r7
 800980c:	d9f5      	bls.n	80097fa <chMtxUnlock+0x5a>
          newprio = lmp->queue.next->prio;
 800980e:	461f      	mov	r7, r3
 8009810:	e7f3      	b.n	80097fa <chMtxUnlock+0x5a>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 8009812:	60b7      	str	r7, [r6, #8]
  thread_t *tp = tqp->next;
 8009814:	6828      	ldr	r0, [r5, #0]
  tqp->next             = tp->queue.next;
 8009816:	6803      	ldr	r3, [r0, #0]
 8009818:	602b      	str	r3, [r5, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800981a:	605d      	str	r5, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
 800981c:	60a8      	str	r0, [r5, #8]
      mp->next = tp->mtxlist;
 800981e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009820:	60eb      	str	r3, [r5, #12]
      tp->mtxlist = mp;
 8009822:	6385      	str	r5, [r0, #56]	; 0x38

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8009824:	f7fe fc44 	bl	80080b0 <chSchReadyI>
      chSchRescheduleS();
 8009828:	f7fe fdea 	bl	8008400 <chSchRescheduleS>
  _dbg_check_unlock();
 800982c:	f7fe f8c8 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009830:	f7ff fbb6 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009834:	4b09      	ldr	r3, [pc, #36]	; (800985c <chMtxUnlock+0xbc>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	429a      	cmp	r2, r3
 800983a:	d004      	beq.n	8009846 <chMtxUnlock+0xa6>
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	6899      	ldr	r1, [r3, #8]
 8009840:	6893      	ldr	r3, [r2, #8]
 8009842:	4299      	cmp	r1, r3
 8009844:	d306      	bcc.n	8009854 <chMtxUnlock+0xb4>
 8009846:	2300      	movs	r3, #0
 8009848:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 800984c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      mp->owner = NULL;
 800984e:	2300      	movs	r3, #0
 8009850:	60ab      	str	r3, [r5, #8]
 8009852:	e7eb      	b.n	800982c <chMtxUnlock+0x8c>
 8009854:	4803      	ldr	r0, [pc, #12]	; (8009864 <chMtxUnlock+0xc4>)
 8009856:	f7fd ff0b 	bl	8007670 <chSysHalt>
 800985a:	e7f4      	b.n	8009846 <chMtxUnlock+0xa6>
 800985c:	20004f68 	.word	0x20004f68
 8009860:	0801529c 	.word	0x0801529c
 8009864:	08015280 	.word	0x08015280
 8009868:	f3af 8000 	nop.w
 800986c:	f3af 8000 	nop.w

08009870 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8009870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009872:	4605      	mov	r5, r0
  thread_t *ctp = currp;
 8009874:	4b20      	ldr	r3, [pc, #128]	; (80098f8 <chMtxUnlockS+0x88>)
 8009876:	699e      	ldr	r6, [r3, #24]
  mutex_t *lmp;

  chDbgCheckClassS();
 8009878:	f7fe f942 	bl	8007b00 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 800987c:	b1c5      	cbz	r5, 80098b0 <chMtxUnlockS+0x40>

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 800987e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8009880:	b1d3      	cbz	r3, 80098b8 <chMtxUnlockS+0x48>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 8009882:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	42b3      	cmp	r3, r6
 8009888:	d002      	beq.n	8009890 <chMtxUnlockS+0x20>
 800988a:	481c      	ldr	r0, [pc, #112]	; (80098fc <chMtxUnlockS+0x8c>)
 800988c:	f7fd fef0 	bl	8007670 <chSysHalt>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 8009890:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8009892:	42ab      	cmp	r3, r5
 8009894:	d002      	beq.n	800989c <chMtxUnlockS+0x2c>
 8009896:	4819      	ldr	r0, [pc, #100]	; (80098fc <chMtxUnlockS+0x8c>)
 8009898:	f7fd feea 	bl	8007670 <chSysHalt>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 800989c:	68eb      	ldr	r3, [r5, #12]
 800989e:	63b3      	str	r3, [r6, #56]	; 0x38
 80098a0:	f7fe f92e 	bl	8007b00 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80098a4:	682b      	ldr	r3, [r5, #0]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80098a6:	429d      	cmp	r5, r3
 80098a8:	d022      	beq.n	80098f0 <chMtxUnlockS+0x80>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 80098aa:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
      lmp = ctp->mtxlist;
 80098ac:	6bb4      	ldr	r4, [r6, #56]	; 0x38
      while (lmp != NULL) {
 80098ae:	e008      	b.n	80098c2 <chMtxUnlockS+0x52>
  chDbgCheck(mp != NULL);
 80098b0:	4812      	ldr	r0, [pc, #72]	; (80098fc <chMtxUnlockS+0x8c>)
 80098b2:	f7fd fedd 	bl	8007670 <chSysHalt>
 80098b6:	e7e2      	b.n	800987e <chMtxUnlockS+0xe>
  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 80098b8:	4810      	ldr	r0, [pc, #64]	; (80098fc <chMtxUnlockS+0x8c>)
 80098ba:	f7fd fed9 	bl	8007670 <chSysHalt>
 80098be:	e7e0      	b.n	8009882 <chMtxUnlockS+0x12>
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 80098c0:	68e4      	ldr	r4, [r4, #12]
      while (lmp != NULL) {
 80098c2:	b14c      	cbz	r4, 80098d8 <chMtxUnlockS+0x68>
 80098c4:	f7fe f91c 	bl	8007b00 <chDbgCheckClassS>
 80098c8:	6823      	ldr	r3, [r4, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 80098ca:	429c      	cmp	r4, r3
 80098cc:	d0f8      	beq.n	80098c0 <chMtxUnlockS+0x50>
            (lmp->queue.next->prio > newprio)) {
 80098ce:	689b      	ldr	r3, [r3, #8]
        if (chMtxQueueNotEmptyS(lmp) &&
 80098d0:	42bb      	cmp	r3, r7
 80098d2:	d9f5      	bls.n	80098c0 <chMtxUnlockS+0x50>
          newprio = lmp->queue.next->prio;
 80098d4:	461f      	mov	r7, r3
 80098d6:	e7f3      	b.n	80098c0 <chMtxUnlockS+0x50>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 80098d8:	60b7      	str	r7, [r6, #8]
  thread_t *tp = tqp->next;
 80098da:	6828      	ldr	r0, [r5, #0]
  tqp->next             = tp->queue.next;
 80098dc:	6803      	ldr	r3, [r0, #0]
 80098de:	602b      	str	r3, [r5, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80098e0:	605d      	str	r5, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
 80098e2:	60a8      	str	r0, [r5, #8]
      mp->next = tp->mtxlist;
 80098e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80098e6:	60eb      	str	r3, [r5, #12]
      tp->mtxlist = mp;
 80098e8:	6385      	str	r5, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 80098ea:	f7fe fbe1 	bl	80080b0 <chSchReadyI>
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 80098ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      mp->owner = NULL;
 80098f0:	2300      	movs	r3, #0
 80098f2:	60ab      	str	r3, [r5, #8]
}
 80098f4:	e7fb      	b.n	80098ee <chMtxUnlockS+0x7e>
 80098f6:	bf00      	nop
 80098f8:	20004f68 	.word	0x20004f68
 80098fc:	080152a8 	.word	0x080152a8

08009900 <chMtxUnlockAllS>:
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @sclass
 */
void chMtxUnlockAllS(void) {
 8009900:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8009902:	4b10      	ldr	r3, [pc, #64]	; (8009944 <chMtxUnlockAllS+0x44>)
 8009904:	699d      	ldr	r5, [r3, #24]

  if (ctp->mtxlist != NULL) {
 8009906:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009908:	b923      	cbnz	r3, 8009914 <chMtxUnlockAllS+0x14>
 800990a:	e019      	b.n	8009940 <chMtxUnlockAllS+0x40>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 800990c:	2300      	movs	r3, #0
 800990e:	60a3      	str	r3, [r4, #8]
      }
    } while (ctp->mtxlist != NULL);
 8009910:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009912:	b18b      	cbz	r3, 8009938 <chMtxUnlockAllS+0x38>
      mutex_t *mp = ctp->mtxlist;
 8009914:	6bac      	ldr	r4, [r5, #56]	; 0x38
      ctp->mtxlist = mp->next;
 8009916:	68e3      	ldr	r3, [r4, #12]
 8009918:	63ab      	str	r3, [r5, #56]	; 0x38
 800991a:	f7fe f8f1 	bl	8007b00 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800991e:	6820      	ldr	r0, [r4, #0]
      if (chMtxQueueNotEmptyS(mp)) {
 8009920:	4284      	cmp	r4, r0
 8009922:	d0f3      	beq.n	800990c <chMtxUnlockAllS+0xc>
  tqp->next             = tp->queue.next;
 8009924:	6803      	ldr	r3, [r0, #0]
 8009926:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009928:	605c      	str	r4, [r3, #4]
        mp->owner   = tp;
 800992a:	60a0      	str	r0, [r4, #8]
        mp->next    = tp->mtxlist;
 800992c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800992e:	60e3      	str	r3, [r4, #12]
        tp->mtxlist = mp;
 8009930:	6384      	str	r4, [r0, #56]	; 0x38
        (void) chSchReadyI(tp);
 8009932:	f7fe fbbd 	bl	80080b0 <chSchReadyI>
 8009936:	e7eb      	b.n	8009910 <chMtxUnlockAllS+0x10>
    ctp->prio = ctp->realprio;
 8009938:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800993a:	60ab      	str	r3, [r5, #8]
    chSchRescheduleS();
 800993c:	f7fe fd60 	bl	8008400 <chSchRescheduleS>
  }
}
 8009940:	bd38      	pop	{r3, r4, r5, pc}
 8009942:	bf00      	nop
 8009944:	20004f68 	.word	0x20004f68
 8009948:	f3af 8000 	nop.w
 800994c:	f3af 8000 	nop.w

08009950 <chMtxUnlockAll>:
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8009950:	b508      	push	{r3, lr}
 8009952:	2320      	movs	r3, #32
 8009954:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009958:	f7ff fb1a 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800995c:	f7fe f818 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chMtxUnlockAllS();
 8009960:	f7ff ffce 	bl	8009900 <chMtxUnlockAllS>
  _dbg_check_unlock();
 8009964:	f7fe f82c 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009968:	f7ff fb1a 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800996c:	4b08      	ldr	r3, [pc, #32]	; (8009990 <chMtxUnlockAll+0x40>)
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	429a      	cmp	r2, r3
 8009972:	d004      	beq.n	800997e <chMtxUnlockAll+0x2e>
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	6899      	ldr	r1, [r3, #8]
 8009978:	6893      	ldr	r3, [r2, #8]
 800997a:	4299      	cmp	r1, r3
 800997c:	d303      	bcc.n	8009986 <chMtxUnlockAll+0x36>
 800997e:	2300      	movs	r3, #0
 8009980:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8009984:	bd08      	pop	{r3, pc}
 8009986:	4803      	ldr	r0, [pc, #12]	; (8009994 <chMtxUnlockAll+0x44>)
 8009988:	f7fd fe72 	bl	8007670 <chSysHalt>
 800998c:	e7f7      	b.n	800997e <chMtxUnlockAll+0x2e>
 800998e:	bf00      	nop
 8009990:	20004f68 	.word	0x20004f68
 8009994:	08015280 	.word	0x08015280
	...

080099a0 <chCondObjectInit>:
 *
 * @param[out] cp       pointer to a @p condition_variable_t structure
 *
 * @init
 */
void chCondObjectInit(condition_variable_t *cp) {
 80099a0:	b510      	push	{r4, lr}

  chDbgCheck(cp != NULL);
 80099a2:	4604      	mov	r4, r0
 80099a4:	b110      	cbz	r0, 80099ac <chCondObjectInit+0xc>
  tqp->next = (thread_t *)tqp;
 80099a6:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
 80099a8:	6064      	str	r4, [r4, #4]

  queue_init(&cp->queue);
}
 80099aa:	bd10      	pop	{r4, pc}
  chDbgCheck(cp != NULL);
 80099ac:	4801      	ldr	r0, [pc, #4]	; (80099b4 <chCondObjectInit+0x14>)
 80099ae:	f7fd fe5f 	bl	8007670 <chSysHalt>
 80099b2:	e7f8      	b.n	80099a6 <chCondObjectInit+0x6>
 80099b4:	080152b8 	.word	0x080152b8
 80099b8:	f3af 8000 	nop.w
 80099bc:	f3af 8000 	nop.w

080099c0 <chCondSignal>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 80099c0:	b510      	push	{r4, lr}

  chDbgCheck(cp != NULL);
 80099c2:	4604      	mov	r4, r0
 80099c4:	b300      	cbz	r0, 8009a08 <chCondSignal+0x48>
 80099c6:	2320      	movs	r3, #32
 80099c8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80099cc:	f7ff fae0 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80099d0:	f7fd ffde 	bl	8007990 <_dbg_check_lock>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80099d4:	6820      	ldr	r0, [r4, #0]

  chSysLock();
  if (queue_notempty(&cp->queue)) {
 80099d6:	4284      	cmp	r4, r0
 80099d8:	d005      	beq.n	80099e6 <chCondSignal+0x26>
  tqp->next             = tp->queue.next;
 80099da:	6803      	ldr	r3, [r0, #0]
 80099dc:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80099de:	605c      	str	r4, [r3, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 80099e0:	2100      	movs	r1, #0
 80099e2:	f7fe fc55 	bl	8008290 <chSchWakeupS>
  _dbg_check_unlock();
 80099e6:	f7fd ffeb 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80099ea:	f7ff fad9 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80099ee:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <chCondSignal+0x58>)
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d004      	beq.n	8009a00 <chCondSignal+0x40>
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	6899      	ldr	r1, [r3, #8]
 80099fa:	6893      	ldr	r3, [r2, #8]
 80099fc:	4299      	cmp	r1, r3
 80099fe:	d307      	bcc.n	8009a10 <chCondSignal+0x50>
 8009a00:	2300      	movs	r3, #0
 8009a02:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();
}
 8009a06:	bd10      	pop	{r4, pc}
  chDbgCheck(cp != NULL);
 8009a08:	4804      	ldr	r0, [pc, #16]	; (8009a1c <chCondSignal+0x5c>)
 8009a0a:	f7fd fe31 	bl	8007670 <chSysHalt>
 8009a0e:	e7da      	b.n	80099c6 <chCondSignal+0x6>
 8009a10:	4803      	ldr	r0, [pc, #12]	; (8009a20 <chCondSignal+0x60>)
 8009a12:	f7fd fe2d 	bl	8007670 <chSysHalt>
 8009a16:	e7f3      	b.n	8009a00 <chCondSignal+0x40>
 8009a18:	20004f68 	.word	0x20004f68
 8009a1c:	080152cc 	.word	0x080152cc
 8009a20:	080152dc 	.word	0x080152dc
 8009a24:	f3af 8000 	nop.w
 8009a28:	f3af 8000 	nop.w
 8009a2c:	f3af 8000 	nop.w

08009a30 <chCondSignalI>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 8009a30:	b510      	push	{r4, lr}
 8009a32:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8009a34:	f7fe f84c 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(cp != NULL);
 8009a38:	b154      	cbz	r4, 8009a50 <chCondSignalI+0x20>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8009a3a:	6820      	ldr	r0, [r4, #0]

  if (queue_notempty(&cp->queue)) {
 8009a3c:	4284      	cmp	r4, r0
 8009a3e:	d006      	beq.n	8009a4e <chCondSignalI+0x1e>
  tqp->next             = tp->queue.next;
 8009a40:	6803      	ldr	r3, [r0, #0]
 8009a42:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009a44:	605c      	str	r4, [r3, #4]
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8009a4a:	f7fe fb31 	bl	80080b0 <chSchReadyI>
  }
}
 8009a4e:	bd10      	pop	{r4, pc}
  chDbgCheck(cp != NULL);
 8009a50:	4801      	ldr	r0, [pc, #4]	; (8009a58 <chCondSignalI+0x28>)
 8009a52:	f7fd fe0d 	bl	8007670 <chSysHalt>
 8009a56:	e7f0      	b.n	8009a3a <chCondSignalI+0xa>
 8009a58:	080152e8 	.word	0x080152e8
 8009a5c:	f3af 8000 	nop.w

08009a60 <chCondBroadcastI>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondBroadcastI(condition_variable_t *cp) {
 8009a60:	b510      	push	{r4, lr}
 8009a62:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8009a64:	f7fe f834 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(cp != NULL);
 8009a68:	b95c      	cbnz	r4, 8009a82 <chCondBroadcastI+0x22>
 8009a6a:	4808      	ldr	r0, [pc, #32]	; (8009a8c <chCondBroadcastI+0x2c>)
 8009a6c:	f7fd fe00 	bl	8007670 <chSysHalt>
 8009a70:	e007      	b.n	8009a82 <chCondBroadcastI+0x22>
  tqp->next             = tp->queue.next;
 8009a72:	6803      	ldr	r3, [r0, #0]
 8009a74:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009a76:	605c      	str	r4, [r3, #4]

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8009a78:	f7fe fb1a 	bl	80080b0 <chSchReadyI>
 8009a7c:	f06f 0301 	mvn.w	r3, #1
 8009a80:	6243      	str	r3, [r0, #36]	; 0x24
  return (bool)(tqp->next != (const thread_t *)tqp);
 8009a82:	6820      	ldr	r0, [r4, #0]
  while (queue_notempty(&cp->queue)) {
 8009a84:	4284      	cmp	r4, r0
 8009a86:	d1f4      	bne.n	8009a72 <chCondBroadcastI+0x12>
  }
}
 8009a88:	bd10      	pop	{r4, pc}
 8009a8a:	bf00      	nop
 8009a8c:	080152f8 	.word	0x080152f8

08009a90 <chCondBroadcast>:
void chCondBroadcast(condition_variable_t *cp) {
 8009a90:	b510      	push	{r4, lr}
 8009a92:	4604      	mov	r4, r0
 8009a94:	2320      	movs	r3, #32
 8009a96:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009a9a:	f7ff fa79 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009a9e:	f7fd ff77 	bl	8007990 <_dbg_check_lock>
  chCondBroadcastI(cp);
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f7ff ffdc 	bl	8009a60 <chCondBroadcastI>
  chSchRescheduleS();
 8009aa8:	f7fe fcaa 	bl	8008400 <chSchRescheduleS>
  _dbg_check_unlock();
 8009aac:	f7fd ff88 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009ab0:	f7ff fa76 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009ab4:	4b08      	ldr	r3, [pc, #32]	; (8009ad8 <chCondBroadcast+0x48>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d004      	beq.n	8009ac6 <chCondBroadcast+0x36>
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	6899      	ldr	r1, [r3, #8]
 8009ac0:	6893      	ldr	r3, [r2, #8]
 8009ac2:	4299      	cmp	r1, r3
 8009ac4:	d303      	bcc.n	8009ace <chCondBroadcast+0x3e>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f383 8811 	msr	BASEPRI, r3
}
 8009acc:	bd10      	pop	{r4, pc}
 8009ace:	4803      	ldr	r0, [pc, #12]	; (8009adc <chCondBroadcast+0x4c>)
 8009ad0:	f7fd fdce 	bl	8007670 <chSysHalt>
 8009ad4:	e7f7      	b.n	8009ac6 <chCondBroadcast+0x36>
 8009ad6:	bf00      	nop
 8009ad8:	20004f68 	.word	0x20004f68
 8009adc:	080152dc 	.word	0x080152dc

08009ae0 <chCondWaitS>:
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
 8009ae0:	b570      	push	{r4, r5, r6, lr}
 8009ae2:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8009ae4:	4b14      	ldr	r3, [pc, #80]	; (8009b38 <chCondWaitS+0x58>)
 8009ae6:	699d      	ldr	r5, [r3, #24]
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8009ae8:	6bae      	ldr	r6, [r5, #56]	; 0x38
  mutex_t *mp = chMtxGetNextMutexX();
  msg_t msg;

  chDbgCheckClassS();
 8009aea:	f7fe f809 	bl	8007b00 <chDbgCheckClassS>
  chDbgCheck(cp != NULL);
 8009aee:	b1d4      	cbz	r4, 8009b26 <chCondWaitS+0x46>
  chDbgAssert(mp != NULL, "not owning a mutex");
 8009af0:	b1ee      	cbz	r6, 8009b2e <chCondWaitS+0x4e>

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7ff febc 	bl	8009870 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->u.wtobjp = cp;
 8009af8:	626c      	str	r4, [r5, #36]	; 0x24
  queue_prio_insert(ctp, &cp->queue);
 8009afa:	4621      	mov	r1, r4
    cp = cp->queue.next;
 8009afc:	6824      	ldr	r4, [r4, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8009afe:	42a1      	cmp	r1, r4
 8009b00:	d003      	beq.n	8009b0a <chCondWaitS+0x2a>
 8009b02:	68a2      	ldr	r2, [r4, #8]
 8009b04:	68ab      	ldr	r3, [r5, #8]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d2f8      	bcs.n	8009afc <chCondWaitS+0x1c>
  tp->queue.next             = cp;
 8009b0a:	602c      	str	r4, [r5, #0]
  tp->queue.prev             = cp->queue.prev;
 8009b0c:	6863      	ldr	r3, [r4, #4]
 8009b0e:	606b      	str	r3, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8009b10:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 8009b12:	6065      	str	r5, [r4, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 8009b14:	2007      	movs	r0, #7
 8009b16:	f7fe fb5b 	bl	80081d0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 8009b1a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  chMtxLockS(mp);
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f7ff fd4f 	bl	80095c0 <chMtxLockS>

  return msg;
}
 8009b22:	4620      	mov	r0, r4
 8009b24:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(cp != NULL);
 8009b26:	4805      	ldr	r0, [pc, #20]	; (8009b3c <chCondWaitS+0x5c>)
 8009b28:	f7fd fda2 	bl	8007670 <chSysHalt>
 8009b2c:	e7e0      	b.n	8009af0 <chCondWaitS+0x10>
  chDbgAssert(mp != NULL, "not owning a mutex");
 8009b2e:	4803      	ldr	r0, [pc, #12]	; (8009b3c <chCondWaitS+0x5c>)
 8009b30:	f7fd fd9e 	bl	8007670 <chSysHalt>
 8009b34:	e7dd      	b.n	8009af2 <chCondWaitS+0x12>
 8009b36:	bf00      	nop
 8009b38:	20004f68 	.word	0x20004f68
 8009b3c:	0801530c 	.word	0x0801530c

08009b40 <chCondWait>:
msg_t chCondWait(condition_variable_t *cp) {
 8009b40:	b510      	push	{r4, lr}
 8009b42:	4604      	mov	r4, r0
 8009b44:	2320      	movs	r3, #32
 8009b46:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009b4a:	f7ff fa21 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009b4e:	f7fd ff1f 	bl	8007990 <_dbg_check_lock>
  msg = chCondWaitS(cp);
 8009b52:	4620      	mov	r0, r4
 8009b54:	f7ff ffc4 	bl	8009ae0 <chCondWaitS>
 8009b58:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8009b5a:	f7fd ff31 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009b5e:	f7ff fa1f 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009b62:	4b09      	ldr	r3, [pc, #36]	; (8009b88 <chCondWait+0x48>)
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d004      	beq.n	8009b74 <chCondWait+0x34>
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	6899      	ldr	r1, [r3, #8]
 8009b6e:	6893      	ldr	r3, [r2, #8]
 8009b70:	4299      	cmp	r1, r3
 8009b72:	d304      	bcc.n	8009b7e <chCondWait+0x3e>
 8009b74:	2300      	movs	r3, #0
 8009b76:	f383 8811 	msr	BASEPRI, r3
}
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	bd10      	pop	{r4, pc}
 8009b7e:	4803      	ldr	r0, [pc, #12]	; (8009b8c <chCondWait+0x4c>)
 8009b80:	f7fd fd76 	bl	8007670 <chSysHalt>
 8009b84:	e7f6      	b.n	8009b74 <chCondWait+0x34>
 8009b86:	bf00      	nop
 8009b88:	20004f68 	.word	0x20004f68
 8009b8c:	080152dc 	.word	0x080152dc

08009b90 <chCondWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chCondWaitTimeoutS(condition_variable_t *cp, sysinterval_t timeout) {
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	4604      	mov	r4, r0
 8009b94:	4616      	mov	r6, r2
 8009b96:	461f      	mov	r7, r3
  return ch.rlist.current;
 8009b98:	4b18      	ldr	r3, [pc, #96]	; (8009bfc <chCondWaitTimeoutS+0x6c>)
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  mutex_t *mp = chMtxGetNextMutexX();
  msg_t msg;

  chDbgCheckClassS();
 8009b9e:	f7fd ffaf 	bl	8007b00 <chDbgCheckClassS>
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
 8009ba2:	b114      	cbz	r4, 8009baa <chCondWaitTimeoutS+0x1a>
 8009ba4:	ea56 0307 	orrs.w	r3, r6, r7
 8009ba8:	d102      	bne.n	8009bb0 <chCondWaitTimeoutS+0x20>
 8009baa:	4815      	ldr	r0, [pc, #84]	; (8009c00 <chCondWaitTimeoutS+0x70>)
 8009bac:	f7fd fd60 	bl	8007670 <chSysHalt>
  chDbgAssert(mp != NULL, "not owning a mutex");
 8009bb0:	b305      	cbz	r5, 8009bf4 <chCondWaitTimeoutS+0x64>

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	f7ff fe5c 	bl	8009870 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8009bb8:	4b10      	ldr	r3, [pc, #64]	; (8009bfc <chCondWaitTimeoutS+0x6c>)
 8009bba:	6999      	ldr	r1, [r3, #24]
 8009bbc:	624c      	str	r4, [r1, #36]	; 0x24
  queue_prio_insert(currp, &cp->queue);
 8009bbe:	46a4      	mov	ip, r4
    cp = cp->queue.next;
 8009bc0:	6824      	ldr	r4, [r4, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8009bc2:	45a4      	cmp	ip, r4
 8009bc4:	d003      	beq.n	8009bce <chCondWaitTimeoutS+0x3e>
 8009bc6:	68a2      	ldr	r2, [r4, #8]
 8009bc8:	688b      	ldr	r3, [r1, #8]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d2f8      	bcs.n	8009bc0 <chCondWaitTimeoutS+0x30>
  tp->queue.next             = cp;
 8009bce:	600c      	str	r4, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8009bd0:	6863      	ldr	r3, [r4, #4]
 8009bd2:	604b      	str	r3, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8009bd4:	6019      	str	r1, [r3, #0]
  cp->queue.prev             = tp;
 8009bd6:	6061      	str	r1, [r4, #4]
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
 8009bd8:	4632      	mov	r2, r6
 8009bda:	463b      	mov	r3, r7
 8009bdc:	2007      	movs	r0, #7
 8009bde:	f7fe fb27 	bl	8008230 <chSchGoSleepTimeoutS>
 8009be2:	4604      	mov	r4, r0
  if (msg != MSG_TIMEOUT) {
 8009be4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009be8:	d002      	beq.n	8009bf0 <chCondWaitTimeoutS+0x60>
    chMtxLockS(mp);
 8009bea:	4628      	mov	r0, r5
 8009bec:	f7ff fce8 	bl	80095c0 <chMtxLockS>
  }

  return msg;
}
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgAssert(mp != NULL, "not owning a mutex");
 8009bf4:	4802      	ldr	r0, [pc, #8]	; (8009c00 <chCondWaitTimeoutS+0x70>)
 8009bf6:	f7fd fd3b 	bl	8007670 <chSysHalt>
 8009bfa:	e7da      	b.n	8009bb2 <chCondWaitTimeoutS+0x22>
 8009bfc:	20004f68 	.word	0x20004f68
 8009c00:	08015318 	.word	0x08015318
 8009c04:	f3af 8000 	nop.w
 8009c08:	f3af 8000 	nop.w
 8009c0c:	f3af 8000 	nop.w

08009c10 <chCondWaitTimeout>:
msg_t chCondWaitTimeout(condition_variable_t *cp, sysinterval_t timeout) {
 8009c10:	b5d0      	push	{r4, r6, r7, lr}
 8009c12:	4604      	mov	r4, r0
 8009c14:	4616      	mov	r6, r2
 8009c16:	461f      	mov	r7, r3
 8009c18:	2320      	movs	r3, #32
 8009c1a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009c1e:	f7ff f9b7 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009c22:	f7fd feb5 	bl	8007990 <_dbg_check_lock>
  msg = chCondWaitTimeoutS(cp, timeout);
 8009c26:	4632      	mov	r2, r6
 8009c28:	463b      	mov	r3, r7
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f7ff ffb0 	bl	8009b90 <chCondWaitTimeoutS>
 8009c30:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8009c32:	f7fd fec5 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009c36:	f7ff f9b3 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009c3a:	4b09      	ldr	r3, [pc, #36]	; (8009c60 <chCondWaitTimeout+0x50>)
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d004      	beq.n	8009c4c <chCondWaitTimeout+0x3c>
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	6899      	ldr	r1, [r3, #8]
 8009c46:	6893      	ldr	r3, [r2, #8]
 8009c48:	4299      	cmp	r1, r3
 8009c4a:	d304      	bcc.n	8009c56 <chCondWaitTimeout+0x46>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f383 8811 	msr	BASEPRI, r3
}
 8009c52:	4620      	mov	r0, r4
 8009c54:	bdd0      	pop	{r4, r6, r7, pc}
 8009c56:	4803      	ldr	r0, [pc, #12]	; (8009c64 <chCondWaitTimeout+0x54>)
 8009c58:	f7fd fd0a 	bl	8007670 <chSysHalt>
 8009c5c:	e7f6      	b.n	8009c4c <chCondWaitTimeout+0x3c>
 8009c5e:	bf00      	nop
 8009c60:	20004f68 	.word	0x20004f68
 8009c64:	080152dc 	.word	0x080152dc
	...

08009c70 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 8009c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c72:	460c      	mov	r4, r1
 8009c74:	4617      	mov	r7, r2
 8009c76:	461e      	mov	r6, r3

  chDbgCheck((esp != NULL) && (elp != NULL));
 8009c78:	4605      	mov	r5, r0
 8009c7a:	b308      	cbz	r0, 8009cc0 <chEvtRegisterMaskWithFlags+0x50>
 8009c7c:	b301      	cbz	r1, 8009cc0 <chEvtRegisterMaskWithFlags+0x50>
 8009c7e:	2320      	movs	r3, #32
 8009c80:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009c84:	f7ff f984 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009c88:	f7fd fe82 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  elp->next     = esp->next;
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	6023      	str	r3, [r4, #0]
  esp->next     = elp;
 8009c90:	602c      	str	r4, [r5, #0]
  elp->listener = currp;
 8009c92:	4d0f      	ldr	r5, [pc, #60]	; (8009cd0 <chEvtRegisterMaskWithFlags+0x60>)
 8009c94:	69ab      	ldr	r3, [r5, #24]
 8009c96:	6063      	str	r3, [r4, #4]
  elp->events   = events;
 8009c98:	60a7      	str	r7, [r4, #8]
  elp->flags    = (eventflags_t)0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60e3      	str	r3, [r4, #12]
  elp->wflags   = wflags;
 8009c9e:	6126      	str	r6, [r4, #16]
  _dbg_check_unlock();
 8009ca0:	f7fd fe8e 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009ca4:	f7ff f97c 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	42ab      	cmp	r3, r5
 8009cac:	d004      	beq.n	8009cb8 <chEvtRegisterMaskWithFlags+0x48>
 8009cae:	69aa      	ldr	r2, [r5, #24]
 8009cb0:	6892      	ldr	r2, [r2, #8]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d307      	bcc.n	8009cc8 <chEvtRegisterMaskWithFlags+0x58>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8009cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck((esp != NULL) && (elp != NULL));
 8009cc0:	4804      	ldr	r0, [pc, #16]	; (8009cd4 <chEvtRegisterMaskWithFlags+0x64>)
 8009cc2:	f7fd fcd5 	bl	8007670 <chSysHalt>
 8009cc6:	e7da      	b.n	8009c7e <chEvtRegisterMaskWithFlags+0xe>
 8009cc8:	4803      	ldr	r0, [pc, #12]	; (8009cd8 <chEvtRegisterMaskWithFlags+0x68>)
 8009cca:	f7fd fcd1 	bl	8007670 <chSysHalt>
 8009cce:	e7f3      	b.n	8009cb8 <chEvtRegisterMaskWithFlags+0x48>
 8009cd0:	20004f68 	.word	0x20004f68
 8009cd4:	0801532c 	.word	0x0801532c
 8009cd8:	08015348 	.word	0x08015348
 8009cdc:	f3af 8000 	nop.w

08009ce0 <chEvtUnregister>:
 * @param[in] esp       pointer to the  @p event_source_t structure
 * @param[in] elp       pointer to the @p event_listener_t structure
 *
 * @api
 */
void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	460d      	mov	r5, r1
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	b178      	cbz	r0, 8009d08 <chEvtUnregister+0x28>
 8009ce8:	b171      	cbz	r1, 8009d08 <chEvtUnregister+0x28>
 8009cea:	2320      	movs	r3, #32
 8009cec:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009cf0:	f7ff f94e 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009cf4:	f7fd fe4c 	bl	8007990 <_dbg_check_lock>

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8009cf8:	4622      	mov	r2, r4
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
 8009cfa:	6813      	ldr	r3, [r2, #0]
 8009cfc:	42a3      	cmp	r3, r4
 8009cfe:	d009      	beq.n	8009d14 <chEvtUnregister+0x34>
  /*lint -restore*/
    if (p->next == elp) {
 8009d00:	42ab      	cmp	r3, r5
 8009d02:	d005      	beq.n	8009d10 <chEvtUnregister+0x30>
      p->next = elp->next;
      break;
    }
    p = p->next;
 8009d04:	461a      	mov	r2, r3
 8009d06:	e7f8      	b.n	8009cfa <chEvtUnregister+0x1a>
  chDbgCheck((esp != NULL) && (elp != NULL));
 8009d08:	480d      	ldr	r0, [pc, #52]	; (8009d40 <chEvtUnregister+0x60>)
 8009d0a:	f7fd fcb1 	bl	8007670 <chSysHalt>
 8009d0e:	e7ec      	b.n	8009cea <chEvtUnregister+0xa>
      p->next = elp->next;
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	6013      	str	r3, [r2, #0]
  _dbg_check_unlock();
 8009d14:	f7fd fe54 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009d18:	f7ff f942 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009d1c:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <chEvtUnregister+0x64>)
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d004      	beq.n	8009d2e <chEvtUnregister+0x4e>
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	6899      	ldr	r1, [r3, #8]
 8009d28:	6893      	ldr	r3, [r2, #8]
 8009d2a:	4299      	cmp	r1, r3
 8009d2c:	d303      	bcc.n	8009d36 <chEvtUnregister+0x56>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();
}
 8009d34:	bd38      	pop	{r3, r4, r5, pc}
 8009d36:	4804      	ldr	r0, [pc, #16]	; (8009d48 <chEvtUnregister+0x68>)
 8009d38:	f7fd fc9a 	bl	8007670 <chSysHalt>
 8009d3c:	e7f7      	b.n	8009d2e <chEvtUnregister+0x4e>
 8009d3e:	bf00      	nop
 8009d40:	08015354 	.word	0x08015354
 8009d44:	20004f68 	.word	0x20004f68
 8009d48:	08015348 	.word	0x08015348
 8009d4c:	f3af 8000 	nop.w

08009d50 <chEvtGetAndClearEventsI>:
 * @iclass
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
 8009d50:	4b03      	ldr	r3, [pc, #12]	; (8009d60 <chEvtGetAndClearEventsI+0x10>)
 8009d52:	699a      	ldr	r2, [r3, #24]
 8009d54:	6b53      	ldr	r3, [r2, #52]	; 0x34
  currp->epending &= ~events;
 8009d56:	ea23 0100 	bic.w	r1, r3, r0
 8009d5a:	6351      	str	r1, [r2, #52]	; 0x34

  return m;
}
 8009d5c:	4018      	ands	r0, r3
 8009d5e:	4770      	bx	lr
 8009d60:	20004f68 	.word	0x20004f68
 8009d64:	f3af 8000 	nop.w
 8009d68:	f3af 8000 	nop.w
 8009d6c:	f3af 8000 	nop.w

08009d70 <chEvtGetAndClearEvents>:
 * @param[in] events    the events to be cleared
 * @return              The mask of pending events that were cleared.
 *
 * @api
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
 8009d70:	b510      	push	{r4, lr}
 8009d72:	4604      	mov	r4, r0
 8009d74:	2320      	movs	r3, #32
 8009d76:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009d7a:	f7ff f909 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009d7e:	f7fd fe07 	bl	8007990 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = chEvtGetAndClearEventsI(events);
 8009d82:	4620      	mov	r0, r4
 8009d84:	f7ff ffe4 	bl	8009d50 <chEvtGetAndClearEventsI>
 8009d88:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8009d8a:	f7fd fe19 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009d8e:	f7ff f907 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009d92:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <chEvtGetAndClearEvents+0x48>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d004      	beq.n	8009da4 <chEvtGetAndClearEvents+0x34>
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	6899      	ldr	r1, [r3, #8]
 8009d9e:	6893      	ldr	r3, [r2, #8]
 8009da0:	4299      	cmp	r1, r3
 8009da2:	d304      	bcc.n	8009dae <chEvtGetAndClearEvents+0x3e>
 8009da4:	2300      	movs	r3, #0
 8009da6:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8009daa:	4620      	mov	r0, r4
 8009dac:	bd10      	pop	{r4, pc}
 8009dae:	4803      	ldr	r0, [pc, #12]	; (8009dbc <chEvtGetAndClearEvents+0x4c>)
 8009db0:	f7fd fc5e 	bl	8007670 <chSysHalt>
 8009db4:	e7f6      	b.n	8009da4 <chEvtGetAndClearEvents+0x34>
 8009db6:	bf00      	nop
 8009db8:	20004f68 	.word	0x20004f68
 8009dbc:	08015348 	.word	0x08015348

08009dc0 <chEvtAddEvents>:
 * @param[in] events    the events to be added
 * @return              The mask of currently pending events.
 *
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	2320      	movs	r3, #32
 8009dc6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009dca:	f7ff f8e1 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009dce:	f7fd fddf 	bl	8007990 <_dbg_check_lock>
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8009dd2:	4d0d      	ldr	r5, [pc, #52]	; (8009e08 <chEvtAddEvents+0x48>)
 8009dd4:	69ab      	ldr	r3, [r5, #24]
 8009dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dd8:	4314      	orrs	r4, r2
 8009dda:	635c      	str	r4, [r3, #52]	; 0x34
  _dbg_check_unlock();
 8009ddc:	f7fd fdf0 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009de0:	f7ff f8de 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009de4:	682b      	ldr	r3, [r5, #0]
 8009de6:	42ab      	cmp	r3, r5
 8009de8:	d004      	beq.n	8009df4 <chEvtAddEvents+0x34>
 8009dea:	69aa      	ldr	r2, [r5, #24]
 8009dec:	6892      	ldr	r2, [r2, #8]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d304      	bcc.n	8009dfe <chEvtAddEvents+0x3e>
 8009df4:	2300      	movs	r3, #0
 8009df6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  newevt = chEvtAddEventsI(events);
  chSysUnlock();

  return newevt;
}
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	bd38      	pop	{r3, r4, r5, pc}
 8009dfe:	4803      	ldr	r0, [pc, #12]	; (8009e0c <chEvtAddEvents+0x4c>)
 8009e00:	f7fd fc36 	bl	8007670 <chSysHalt>
 8009e04:	e7f6      	b.n	8009df4 <chEvtAddEvents+0x34>
 8009e06:	bf00      	nop
 8009e08:	20004f68 	.word	0x20004f68
 8009e0c:	08015348 	.word	0x08015348

08009e10 <chEvtGetAndClearFlags>:
 * @return              The flags added to the listener by the associated
 *                      event source.
 *
 * @api
 */
eventflags_t chEvtGetAndClearFlags(event_listener_t *elp) {
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4604      	mov	r4, r0
 8009e14:	2320      	movs	r3, #32
 8009e16:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009e1a:	f7ff f8b9 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009e1e:	f7fd fdb7 	bl	8007990 <_dbg_check_lock>
  eventflags_t flags;

  chSysLock();
  flags = elp->flags;
 8009e22:	68e5      	ldr	r5, [r4, #12]
  elp->flags = (eventflags_t)0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	60e3      	str	r3, [r4, #12]
  _dbg_check_unlock();
 8009e28:	f7fd fdca 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009e2c:	f7ff f8b8 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009e30:	4b09      	ldr	r3, [pc, #36]	; (8009e58 <chEvtGetAndClearFlags+0x48>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d004      	beq.n	8009e42 <chEvtGetAndClearFlags+0x32>
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	6899      	ldr	r1, [r3, #8]
 8009e3c:	6893      	ldr	r3, [r2, #8]
 8009e3e:	4299      	cmp	r1, r3
 8009e40:	d305      	bcc.n	8009e4e <chEvtGetAndClearFlags+0x3e>
 8009e42:	2300      	movs	r3, #0
 8009e44:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return flags & elp->wflags;
 8009e48:	6920      	ldr	r0, [r4, #16]
}
 8009e4a:	4028      	ands	r0, r5
 8009e4c:	bd38      	pop	{r3, r4, r5, pc}
 8009e4e:	4803      	ldr	r0, [pc, #12]	; (8009e5c <chEvtGetAndClearFlags+0x4c>)
 8009e50:	f7fd fc0e 	bl	8007670 <chSysHalt>
 8009e54:	e7f5      	b.n	8009e42 <chEvtGetAndClearFlags+0x32>
 8009e56:	bf00      	nop
 8009e58:	20004f68 	.word	0x20004f68
 8009e5c:	08015348 	.word	0x08015348

08009e60 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4604      	mov	r4, r0
 8009e64:	460d      	mov	r5, r1

  chDbgCheckClassI();
 8009e66:	f7fd fe33 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8009e6a:	b14c      	cbz	r4, 8009e80 <chEvtSignalI+0x20>

  tp->epending |= events;
 8009e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e6e:	4329      	orrs	r1, r5
 8009e70:	6361      	str	r1, [r4, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8009e72:	f894 3020 	ldrb.w	r3, [r4, #32]
 8009e76:	2b0a      	cmp	r3, #10
 8009e78:	d006      	beq.n	8009e88 <chEvtSignalI+0x28>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8009e7a:	2b0b      	cmp	r3, #11
 8009e7c:	d00d      	beq.n	8009e9a <chEvtSignalI+0x3a>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(tp != NULL);
 8009e80:	4808      	ldr	r0, [pc, #32]	; (8009ea4 <chEvtSignalI+0x44>)
 8009e82:	f7fd fbf5 	bl	8007670 <chSysHalt>
 8009e86:	e7f1      	b.n	8009e6c <chEvtSignalI+0xc>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8009e88:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8009e8a:	4211      	tst	r1, r2
 8009e8c:	d0f5      	beq.n	8009e7a <chEvtSignalI+0x1a>
    tp->u.rdymsg = MSG_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(tp);
 8009e92:	4620      	mov	r0, r4
 8009e94:	f7fe f90c 	bl	80080b0 <chSchReadyI>
}
 8009e98:	e7f1      	b.n	8009e7e <chEvtSignalI+0x1e>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8009e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8009e9c:	438b      	bics	r3, r1
 8009e9e:	d1ee      	bne.n	8009e7e <chEvtSignalI+0x1e>
 8009ea0:	e7f5      	b.n	8009e8e <chEvtSignalI+0x2e>
 8009ea2:	bf00      	nop
 8009ea4:	08015364 	.word	0x08015364
 8009ea8:	f3af 8000 	nop.w
 8009eac:	f3af 8000 	nop.w

08009eb0 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8009eb0:	b570      	push	{r4, r5, r6, lr}
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	460d      	mov	r5, r1
  chDbgCheckClassI();
 8009eb6:	f7fd fe0b 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 8009eba:	b10e      	cbz	r6, 8009ec0 <chEvtBroadcastFlagsI+0x10>
  elp = esp->next;
 8009ebc:	6834      	ldr	r4, [r6, #0]
  while (elp != (event_listener_t *)esp) {
 8009ebe:	e008      	b.n	8009ed2 <chEvtBroadcastFlagsI+0x22>
  chDbgCheck(esp != NULL);
 8009ec0:	480a      	ldr	r0, [pc, #40]	; (8009eec <chEvtBroadcastFlagsI+0x3c>)
 8009ec2:	f7fd fbd5 	bl	8007670 <chSysHalt>
 8009ec6:	e7f9      	b.n	8009ebc <chEvtBroadcastFlagsI+0xc>
      chEvtSignalI(elp->listener, elp->events);
 8009ec8:	68a1      	ldr	r1, [r4, #8]
 8009eca:	6860      	ldr	r0, [r4, #4]
 8009ecc:	f7ff ffc8 	bl	8009e60 <chEvtSignalI>
    elp = elp->next;
 8009ed0:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8009ed2:	42b4      	cmp	r4, r6
 8009ed4:	d008      	beq.n	8009ee8 <chEvtBroadcastFlagsI+0x38>
    elp->flags |= flags;
 8009ed6:	68e3      	ldr	r3, [r4, #12]
 8009ed8:	432b      	orrs	r3, r5
 8009eda:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8009edc:	2d00      	cmp	r5, #0
 8009ede:	d0f3      	beq.n	8009ec8 <chEvtBroadcastFlagsI+0x18>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8009ee0:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8009ee2:	422b      	tst	r3, r5
 8009ee4:	d0f4      	beq.n	8009ed0 <chEvtBroadcastFlagsI+0x20>
 8009ee6:	e7ef      	b.n	8009ec8 <chEvtBroadcastFlagsI+0x18>
}
 8009ee8:	bd70      	pop	{r4, r5, r6, pc}
 8009eea:	bf00      	nop
 8009eec:	08015374 	.word	0x08015374

08009ef0 <chEvtSignal>:
void chEvtSignal(thread_t *tp, eventmask_t events) {
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	460d      	mov	r5, r1
  chDbgCheck(tp != NULL);
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	b1e8      	cbz	r0, 8009f34 <chEvtSignal+0x44>
 8009ef8:	2320      	movs	r3, #32
 8009efa:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009efe:	f7ff f847 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009f02:	f7fd fd45 	bl	8007990 <_dbg_check_lock>
  chEvtSignalI(tp, events);
 8009f06:	4629      	mov	r1, r5
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f7ff ffa9 	bl	8009e60 <chEvtSignalI>
  chSchRescheduleS();
 8009f0e:	f7fe fa77 	bl	8008400 <chSchRescheduleS>
  _dbg_check_unlock();
 8009f12:	f7fd fd55 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009f16:	f7ff f843 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009f1a:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <chEvtSignal+0x54>)
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d004      	beq.n	8009f2c <chEvtSignal+0x3c>
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	6899      	ldr	r1, [r3, #8]
 8009f26:	6893      	ldr	r3, [r2, #8]
 8009f28:	4299      	cmp	r1, r3
 8009f2a:	d307      	bcc.n	8009f3c <chEvtSignal+0x4c>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f383 8811 	msr	BASEPRI, r3
}
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(tp != NULL);
 8009f34:	4804      	ldr	r0, [pc, #16]	; (8009f48 <chEvtSignal+0x58>)
 8009f36:	f7fd fb9b 	bl	8007670 <chSysHalt>
 8009f3a:	e7dd      	b.n	8009ef8 <chEvtSignal+0x8>
 8009f3c:	4803      	ldr	r0, [pc, #12]	; (8009f4c <chEvtSignal+0x5c>)
 8009f3e:	f7fd fb97 	bl	8007670 <chSysHalt>
 8009f42:	e7f3      	b.n	8009f2c <chEvtSignal+0x3c>
 8009f44:	20004f68 	.word	0x20004f68
 8009f48:	0801538c 	.word	0x0801538c
 8009f4c:	08015348 	.word	0x08015348

08009f50 <chEvtBroadcastFlags>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	4604      	mov	r4, r0
 8009f54:	460d      	mov	r5, r1
 8009f56:	2320      	movs	r3, #32
 8009f58:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009f5c:	f7ff f818 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009f60:	f7fd fd16 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8009f64:	4629      	mov	r1, r5
 8009f66:	4620      	mov	r0, r4
 8009f68:	f7ff ffa2 	bl	8009eb0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8009f6c:	f7fe fa48 	bl	8008400 <chSchRescheduleS>
  _dbg_check_unlock();
 8009f70:	f7fd fd26 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009f74:	f7ff f814 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009f78:	4b08      	ldr	r3, [pc, #32]	; (8009f9c <chEvtBroadcastFlags+0x4c>)
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d004      	beq.n	8009f8a <chEvtBroadcastFlags+0x3a>
 8009f80:	699b      	ldr	r3, [r3, #24]
 8009f82:	6899      	ldr	r1, [r3, #8]
 8009f84:	6893      	ldr	r3, [r2, #8]
 8009f86:	4299      	cmp	r1, r3
 8009f88:	d303      	bcc.n	8009f92 <chEvtBroadcastFlags+0x42>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8009f90:	bd38      	pop	{r3, r4, r5, pc}
 8009f92:	4803      	ldr	r0, [pc, #12]	; (8009fa0 <chEvtBroadcastFlags+0x50>)
 8009f94:	f7fd fb6c 	bl	8007670 <chSysHalt>
 8009f98:	e7f7      	b.n	8009f8a <chEvtBroadcastFlags+0x3a>
 8009f9a:	bf00      	nop
 8009f9c:	20004f68 	.word	0x20004f68
 8009fa0:	08015348 	.word	0x08015348
 8009fa4:	f3af 8000 	nop.w
 8009fa8:	f3af 8000 	nop.w
 8009fac:	f3af 8000 	nop.w

08009fb0 <chEvtGetAndClearFlagsI>:
 * @iclass
 */
eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp) {
  eventflags_t flags;

  flags = elp->flags;
 8009fb0:	68c3      	ldr	r3, [r0, #12]
  elp->flags = (eventflags_t)0;
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	60c2      	str	r2, [r0, #12]

  return flags & elp->wflags;
 8009fb6:	6900      	ldr	r0, [r0, #16]
}
 8009fb8:	4018      	ands	r0, r3
 8009fba:	4770      	bx	lr
 8009fbc:	f3af 8000 	nop.w

08009fc0 <chEvtDispatch>:
 * @param[in] handlers  an array of @p evhandler_t. The array must have size
 *                      equal to the number of bits in eventmask_t.
 *
 * @api
 */
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 8009fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc4:	460d      	mov	r5, r1
  eventid_t eid;

  chDbgCheck(handlers != NULL);
 8009fc6:	4607      	mov	r7, r0
 8009fc8:	b108      	cbz	r0, 8009fce <chEvtDispatch+0xe>
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 8009fca:	2400      	movs	r4, #0
 8009fcc:	e00c      	b.n	8009fe8 <chEvtDispatch+0x28>
  chDbgCheck(handlers != NULL);
 8009fce:	4810      	ldr	r0, [pc, #64]	; (800a010 <chEvtDispatch+0x50>)
 8009fd0:	f7fd fb4e 	bl	8007670 <chSysHalt>
 8009fd4:	e7f9      	b.n	8009fca <chEvtDispatch+0xa>

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	40b3      	lsls	r3, r6
 8009fda:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 8009fde:	f857 3008 	ldr.w	r3, [r7, r8]
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4798      	blx	r3
    }
    eid++;
 8009fe6:	3401      	adds	r4, #1
  while (events != (eventmask_t)0) {
 8009fe8:	b17d      	cbz	r5, 800a00a <chEvtDispatch+0x4a>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8009fea:	4626      	mov	r6, r4
 8009fec:	fa25 f304 	lsr.w	r3, r5, r4
 8009ff0:	f013 0f01 	tst.w	r3, #1
 8009ff4:	d0f7      	beq.n	8009fe6 <chEvtDispatch+0x26>
      chDbgAssert(handlers[eid] != NULL, "null handler");
 8009ff6:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8009ffa:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1e9      	bne.n	8009fd6 <chEvtDispatch+0x16>
 800a002:	4803      	ldr	r0, [pc, #12]	; (800a010 <chEvtDispatch+0x50>)
 800a004:	f7fd fb34 	bl	8007670 <chSysHalt>
 800a008:	e7e5      	b.n	8009fd6 <chEvtDispatch+0x16>
  }
}
 800a00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a00e:	bf00      	nop
 800a010:	08015398 	.word	0x08015398
 800a014:	f3af 8000 	nop.w
 800a018:	f3af 8000 	nop.w
 800a01c:	f3af 8000 	nop.w

0800a020 <chEvtWaitOne>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 800a024:	4b17      	ldr	r3, [pc, #92]	; (800a084 <chEvtWaitOne+0x64>)
 800a026:	699d      	ldr	r5, [r3, #24]
 800a028:	2320      	movs	r3, #32
 800a02a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a02e:	f7fe ffaf 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a032:	f7fd fcad 	bl	8007990 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800a036:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800a038:	4023      	ands	r3, r4
 800a03a:	d017      	beq.n	800a06c <chEvtWaitOne+0x4c>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 800a03c:	425c      	negs	r4, r3
 800a03e:	401c      	ands	r4, r3
  ctp->epending &= ~m;
 800a040:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a042:	ea23 0304 	bic.w	r3, r3, r4
 800a046:	636b      	str	r3, [r5, #52]	; 0x34
  _dbg_check_unlock();
 800a048:	f7fd fcba 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a04c:	f7fe ffa8 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a050:	4b0c      	ldr	r3, [pc, #48]	; (800a084 <chEvtWaitOne+0x64>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	429a      	cmp	r2, r3
 800a056:	d004      	beq.n	800a062 <chEvtWaitOne+0x42>
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	6899      	ldr	r1, [r3, #8]
 800a05c:	6893      	ldr	r3, [r2, #8]
 800a05e:	4299      	cmp	r1, r3
 800a060:	d30b      	bcc.n	800a07a <chEvtWaitOne+0x5a>
 800a062:	2300      	movs	r3, #0
 800a064:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800a068:	4620      	mov	r0, r4
 800a06a:	bd38      	pop	{r3, r4, r5, pc}
    ctp->u.ewmask = events;
 800a06c:	626c      	str	r4, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800a06e:	200a      	movs	r0, #10
 800a070:	f7fe f8ae 	bl	80081d0 <chSchGoSleepS>
    m = ctp->epending & events;
 800a074:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a076:	4023      	ands	r3, r4
 800a078:	e7e0      	b.n	800a03c <chEvtWaitOne+0x1c>
 800a07a:	4803      	ldr	r0, [pc, #12]	; (800a088 <chEvtWaitOne+0x68>)
 800a07c:	f7fd faf8 	bl	8007670 <chSysHalt>
 800a080:	e7ef      	b.n	800a062 <chEvtWaitOne+0x42>
 800a082:	bf00      	nop
 800a084:	20004f68 	.word	0x20004f68
 800a088:	08015348 	.word	0x08015348
 800a08c:	f3af 8000 	nop.w

0800a090 <chEvtWaitAny>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	4606      	mov	r6, r0
  thread_t *ctp = currp;
 800a094:	4b16      	ldr	r3, [pc, #88]	; (800a0f0 <chEvtWaitAny+0x60>)
 800a096:	699d      	ldr	r5, [r3, #24]
 800a098:	2320      	movs	r3, #32
 800a09a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a09e:	f7fe ff77 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a0a2:	f7fd fc75 	bl	8007990 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800a0a6:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800a0a8:	4034      	ands	r4, r6
 800a0aa:	d015      	beq.n	800a0d8 <chEvtWaitAny+0x48>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 800a0ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a0ae:	ea23 0304 	bic.w	r3, r3, r4
 800a0b2:	636b      	str	r3, [r5, #52]	; 0x34
  _dbg_check_unlock();
 800a0b4:	f7fd fc84 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a0b8:	f7fe ff72 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a0bc:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <chEvtWaitAny+0x60>)
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d004      	beq.n	800a0ce <chEvtWaitAny+0x3e>
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	6899      	ldr	r1, [r3, #8]
 800a0c8:	6893      	ldr	r3, [r2, #8]
 800a0ca:	4299      	cmp	r1, r3
 800a0cc:	d30b      	bcc.n	800a0e6 <chEvtWaitAny+0x56>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
    ctp->u.ewmask = events;
 800a0d8:	626e      	str	r6, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800a0da:	200a      	movs	r0, #10
 800a0dc:	f7fe f878 	bl	80081d0 <chSchGoSleepS>
    m = ctp->epending & events;
 800a0e0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800a0e2:	4034      	ands	r4, r6
 800a0e4:	e7e2      	b.n	800a0ac <chEvtWaitAny+0x1c>
 800a0e6:	4803      	ldr	r0, [pc, #12]	; (800a0f4 <chEvtWaitAny+0x64>)
 800a0e8:	f7fd fac2 	bl	8007670 <chSysHalt>
 800a0ec:	e7ef      	b.n	800a0ce <chEvtWaitAny+0x3e>
 800a0ee:	bf00      	nop
 800a0f0:	20004f68 	.word	0x20004f68
 800a0f4:	08015348 	.word	0x08015348
 800a0f8:	f3af 8000 	nop.w
 800a0fc:	f3af 8000 	nop.w

0800a100 <chEvtWaitAll>:
 *                      for, @p ALL_EVENTS requires all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 800a104:	4b15      	ldr	r3, [pc, #84]	; (800a15c <chEvtWaitAll+0x5c>)
 800a106:	699d      	ldr	r5, [r3, #24]
 800a108:	2320      	movs	r3, #32
 800a10a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a10e:	f7fe ff3f 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a112:	f7fd fc3d 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  if ((ctp->epending & events) != events) {
 800a116:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a118:	ea34 0303 	bics.w	r3, r4, r3
 800a11c:	d003      	beq.n	800a126 <chEvtWaitAll+0x26>
    ctp->u.ewmask = events;
 800a11e:	626c      	str	r4, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800a120:	200b      	movs	r0, #11
 800a122:	f7fe f855 	bl	80081d0 <chSchGoSleepS>
  }
  ctp->epending &= ~events;
 800a126:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a128:	ea23 0304 	bic.w	r3, r3, r4
 800a12c:	636b      	str	r3, [r5, #52]	; 0x34
  _dbg_check_unlock();
 800a12e:	f7fd fc47 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a132:	f7fe ff35 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a136:	4b09      	ldr	r3, [pc, #36]	; (800a15c <chEvtWaitAll+0x5c>)
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d004      	beq.n	800a148 <chEvtWaitAll+0x48>
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	6899      	ldr	r1, [r3, #8]
 800a142:	6893      	ldr	r3, [r2, #8]
 800a144:	4299      	cmp	r1, r3
 800a146:	d304      	bcc.n	800a152 <chEvtWaitAll+0x52>
 800a148:	2300      	movs	r3, #0
 800a14a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 800a14e:	4620      	mov	r0, r4
 800a150:	bd38      	pop	{r3, r4, r5, pc}
 800a152:	4803      	ldr	r0, [pc, #12]	; (800a160 <chEvtWaitAll+0x60>)
 800a154:	f7fd fa8c 	bl	8007670 <chSysHalt>
 800a158:	e7f6      	b.n	800a148 <chEvtWaitAll+0x48>
 800a15a:	bf00      	nop
 800a15c:	20004f68 	.word	0x20004f68
 800a160:	08015348 	.word	0x08015348
 800a164:	f3af 8000 	nop.w
 800a168:	f3af 8000 	nop.w
 800a16c:	f3af 8000 	nop.w

0800a170 <chEvtWaitOneTimeout>:
 * @return              The mask of the lowest event id served and cleared.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 800a170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a174:	4605      	mov	r5, r0
 800a176:	4616      	mov	r6, r2
 800a178:	461f      	mov	r7, r3
  thread_t *ctp = currp;
 800a17a:	4b33      	ldr	r3, [pc, #204]	; (800a248 <chEvtWaitOneTimeout+0xd8>)
 800a17c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800a180:	2320      	movs	r3, #32
 800a182:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a186:	f7fe ff03 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a18a:	f7fd fc01 	bl	8007990 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800a18e:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800a192:	402c      	ands	r4, r5
 800a194:	d10e      	bne.n	800a1b4 <chEvtWaitOneTimeout+0x44>
    if (TIME_IMMEDIATE == timeout) {
 800a196:	ea56 0307 	orrs.w	r3, r6, r7
 800a19a:	d026      	beq.n	800a1ea <chEvtWaitOneTimeout+0x7a>
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 800a19c:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 800a1a0:	4632      	mov	r2, r6
 800a1a2:	463b      	mov	r3, r7
 800a1a4:	200a      	movs	r0, #10
 800a1a6:	f7fe f843 	bl	8008230 <chSchGoSleepTimeoutS>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	db32      	blt.n	800a214 <chEvtWaitOneTimeout+0xa4>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
 800a1ae:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 800a1b2:	402c      	ands	r4, r5
  }
  m ^= m & (m - (eventmask_t)1);
 800a1b4:	4263      	negs	r3, r4
 800a1b6:	401c      	ands	r4, r3
  ctp->epending &= ~m;
 800a1b8:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800a1bc:	ea23 0304 	bic.w	r3, r3, r4
 800a1c0:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  _dbg_check_unlock();
 800a1c4:	f7fd fbfc 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a1c8:	f7fe feea 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a1cc:	4b1e      	ldr	r3, [pc, #120]	; (800a248 <chEvtWaitOneTimeout+0xd8>)
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d004      	beq.n	800a1de <chEvtWaitOneTimeout+0x6e>
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	6899      	ldr	r1, [r3, #8]
 800a1d8:	6893      	ldr	r3, [r2, #8]
 800a1da:	4299      	cmp	r1, r3
 800a1dc:	d32f      	bcc.n	800a23e <chEvtWaitOneTimeout+0xce>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  _dbg_check_unlock();
 800a1ea:	f7fd fbe9 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a1ee:	f7fe fed7 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a1f2:	4b15      	ldr	r3, [pc, #84]	; (800a248 <chEvtWaitOneTimeout+0xd8>)
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d004      	beq.n	800a204 <chEvtWaitOneTimeout+0x94>
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	6899      	ldr	r1, [r3, #8]
 800a1fe:	6893      	ldr	r3, [r2, #8]
 800a200:	4299      	cmp	r1, r3
 800a202:	d303      	bcc.n	800a20c <chEvtWaitOneTimeout+0x9c>
 800a204:	2300      	movs	r3, #0
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	e7eb      	b.n	800a1e4 <chEvtWaitOneTimeout+0x74>
 800a20c:	480f      	ldr	r0, [pc, #60]	; (800a24c <chEvtWaitOneTimeout+0xdc>)
 800a20e:	f7fd fa2f 	bl	8007670 <chSysHalt>
 800a212:	e7f7      	b.n	800a204 <chEvtWaitOneTimeout+0x94>
  _dbg_check_unlock();
 800a214:	f7fd fbd4 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a218:	f7fe fec2 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <chEvtWaitOneTimeout+0xd8>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	429a      	cmp	r2, r3
 800a222:	d004      	beq.n	800a22e <chEvtWaitOneTimeout+0xbe>
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	6899      	ldr	r1, [r3, #8]
 800a228:	6893      	ldr	r3, [r2, #8]
 800a22a:	4299      	cmp	r1, r3
 800a22c:	d303      	bcc.n	800a236 <chEvtWaitOneTimeout+0xc6>
 800a22e:	2300      	movs	r3, #0
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	e7d6      	b.n	800a1e4 <chEvtWaitOneTimeout+0x74>
 800a236:	4805      	ldr	r0, [pc, #20]	; (800a24c <chEvtWaitOneTimeout+0xdc>)
 800a238:	f7fd fa1a 	bl	8007670 <chSysHalt>
 800a23c:	e7f7      	b.n	800a22e <chEvtWaitOneTimeout+0xbe>
 800a23e:	4803      	ldr	r0, [pc, #12]	; (800a24c <chEvtWaitOneTimeout+0xdc>)
 800a240:	f7fd fa16 	bl	8007670 <chSysHalt>
 800a244:	e7cb      	b.n	800a1de <chEvtWaitOneTimeout+0x6e>
 800a246:	bf00      	nop
 800a248:	20004f68 	.word	0x20004f68
 800a24c:	08015348 	.word	0x08015348

0800a250 <chEvtWaitAnyTimeout>:
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
 800a250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a254:	4604      	mov	r4, r0
 800a256:	4616      	mov	r6, r2
 800a258:	461f      	mov	r7, r3
  thread_t *ctp = currp;
 800a25a:	4b33      	ldr	r3, [pc, #204]	; (800a328 <chEvtWaitAnyTimeout+0xd8>)
 800a25c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800a260:	2320      	movs	r3, #32
 800a262:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a266:	f7fe fe93 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a26a:	f7fd fb91 	bl	8007990 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800a26e:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800a272:	ea10 0504 	ands.w	r5, r0, r4
 800a276:	d10f      	bne.n	800a298 <chEvtWaitAnyTimeout+0x48>
    if (TIME_IMMEDIATE == timeout) {
 800a278:	ea56 0307 	orrs.w	r3, r6, r7
 800a27c:	d025      	beq.n	800a2ca <chEvtWaitAnyTimeout+0x7a>
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 800a27e:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 800a282:	4632      	mov	r2, r6
 800a284:	463b      	mov	r3, r7
 800a286:	200a      	movs	r0, #10
 800a288:	f7fd ffd2 	bl	8008230 <chSchGoSleepTimeoutS>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	db31      	blt.n	800a2f4 <chEvtWaitAnyTimeout+0xa4>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
 800a290:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 800a294:	ea00 0504 	and.w	r5, r0, r4
  }
  ctp->epending &= ~m;
 800a298:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800a29c:	ea23 0305 	bic.w	r3, r3, r5
 800a2a0:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  _dbg_check_unlock();
 800a2a4:	f7fd fb8c 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a2a8:	f7fe fe7a 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a2ac:	4b1e      	ldr	r3, [pc, #120]	; (800a328 <chEvtWaitAnyTimeout+0xd8>)
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d004      	beq.n	800a2be <chEvtWaitAnyTimeout+0x6e>
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	6899      	ldr	r1, [r3, #8]
 800a2b8:	6893      	ldr	r3, [r2, #8]
 800a2ba:	4299      	cmp	r1, r3
 800a2bc:	d32f      	bcc.n	800a31e <chEvtWaitAnyTimeout+0xce>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  _dbg_check_unlock();
 800a2ca:	f7fd fb79 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a2ce:	f7fe fe67 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a2d2:	4b15      	ldr	r3, [pc, #84]	; (800a328 <chEvtWaitAnyTimeout+0xd8>)
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d004      	beq.n	800a2e4 <chEvtWaitAnyTimeout+0x94>
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	6899      	ldr	r1, [r3, #8]
 800a2de:	6893      	ldr	r3, [r2, #8]
 800a2e0:	4299      	cmp	r1, r3
 800a2e2:	d303      	bcc.n	800a2ec <chEvtWaitAnyTimeout+0x9c>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	e7eb      	b.n	800a2c4 <chEvtWaitAnyTimeout+0x74>
 800a2ec:	480f      	ldr	r0, [pc, #60]	; (800a32c <chEvtWaitAnyTimeout+0xdc>)
 800a2ee:	f7fd f9bf 	bl	8007670 <chSysHalt>
 800a2f2:	e7f7      	b.n	800a2e4 <chEvtWaitAnyTimeout+0x94>
  _dbg_check_unlock();
 800a2f4:	f7fd fb64 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a2f8:	f7fe fe52 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <chEvtWaitAnyTimeout+0xd8>)
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	429a      	cmp	r2, r3
 800a302:	d004      	beq.n	800a30e <chEvtWaitAnyTimeout+0xbe>
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	6899      	ldr	r1, [r3, #8]
 800a308:	6893      	ldr	r3, [r2, #8]
 800a30a:	4299      	cmp	r1, r3
 800a30c:	d303      	bcc.n	800a316 <chEvtWaitAnyTimeout+0xc6>
 800a30e:	2300      	movs	r3, #0
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	e7d6      	b.n	800a2c4 <chEvtWaitAnyTimeout+0x74>
 800a316:	4805      	ldr	r0, [pc, #20]	; (800a32c <chEvtWaitAnyTimeout+0xdc>)
 800a318:	f7fd f9aa 	bl	8007670 <chSysHalt>
 800a31c:	e7f7      	b.n	800a30e <chEvtWaitAnyTimeout+0xbe>
 800a31e:	4803      	ldr	r0, [pc, #12]	; (800a32c <chEvtWaitAnyTimeout+0xdc>)
 800a320:	f7fd f9a6 	bl	8007670 <chSysHalt>
 800a324:	e7cb      	b.n	800a2be <chEvtWaitAnyTimeout+0x6e>
 800a326:	bf00      	nop
 800a328:	20004f68 	.word	0x20004f68
 800a32c:	08015348 	.word	0x08015348

0800a330 <chEvtWaitAllTimeout>:
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
 800a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a332:	4604      	mov	r4, r0
 800a334:	4616      	mov	r6, r2
 800a336:	461f      	mov	r7, r3
  thread_t *ctp = currp;
 800a338:	4b2d      	ldr	r3, [pc, #180]	; (800a3f0 <chEvtWaitAllTimeout+0xc0>)
 800a33a:	699d      	ldr	r5, [r3, #24]
 800a33c:	2320      	movs	r3, #32
 800a33e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a342:	f7fe fe25 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a346:	f7fd fb23 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  if ((ctp->epending & events) != events) {
 800a34a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a34c:	ea34 0303 	bics.w	r3, r4, r3
 800a350:	d00a      	beq.n	800a368 <chEvtWaitAllTimeout+0x38>
    if (TIME_IMMEDIATE == timeout) {
 800a352:	ea56 0307 	orrs.w	r3, r6, r7
 800a356:	d01d      	beq.n	800a394 <chEvtWaitAllTimeout+0x64>
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 800a358:	626c      	str	r4, [r5, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 800a35a:	4632      	mov	r2, r6
 800a35c:	463b      	mov	r3, r7
 800a35e:	200b      	movs	r0, #11
 800a360:	f7fd ff66 	bl	8008230 <chSchGoSleepTimeoutS>
 800a364:	2800      	cmp	r0, #0
 800a366:	db2a      	blt.n	800a3be <chEvtWaitAllTimeout+0x8e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 800a368:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a36a:	ea23 0304 	bic.w	r3, r3, r4
 800a36e:	636b      	str	r3, [r5, #52]	; 0x34
  _dbg_check_unlock();
 800a370:	f7fd fb26 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a374:	f7fe fe14 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a378:	4b1d      	ldr	r3, [pc, #116]	; (800a3f0 <chEvtWaitAllTimeout+0xc0>)
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d004      	beq.n	800a38a <chEvtWaitAllTimeout+0x5a>
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	6899      	ldr	r1, [r3, #8]
 800a384:	6893      	ldr	r3, [r2, #8]
 800a386:	4299      	cmp	r1, r3
 800a388:	d32e      	bcc.n	800a3e8 <chEvtWaitAllTimeout+0xb8>
 800a38a:	2300      	movs	r3, #0
 800a38c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
 800a390:	4620      	mov	r0, r4
}
 800a392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  _dbg_check_unlock();
 800a394:	f7fd fb14 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a398:	f7fe fe02 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a39c:	4b14      	ldr	r3, [pc, #80]	; (800a3f0 <chEvtWaitAllTimeout+0xc0>)
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d004      	beq.n	800a3ae <chEvtWaitAllTimeout+0x7e>
 800a3a4:	699b      	ldr	r3, [r3, #24]
 800a3a6:	6899      	ldr	r1, [r3, #8]
 800a3a8:	6893      	ldr	r3, [r2, #8]
 800a3aa:	4299      	cmp	r1, r3
 800a3ac:	d303      	bcc.n	800a3b6 <chEvtWaitAllTimeout+0x86>
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	f380 8811 	msr	BASEPRI, r0
 800a3b4:	e7ed      	b.n	800a392 <chEvtWaitAllTimeout+0x62>
 800a3b6:	480f      	ldr	r0, [pc, #60]	; (800a3f4 <chEvtWaitAllTimeout+0xc4>)
 800a3b8:	f7fd f95a 	bl	8007670 <chSysHalt>
 800a3bc:	e7f7      	b.n	800a3ae <chEvtWaitAllTimeout+0x7e>
  _dbg_check_unlock();
 800a3be:	f7fd faff 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a3c2:	f7fe fded 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a3c6:	4b0a      	ldr	r3, [pc, #40]	; (800a3f0 <chEvtWaitAllTimeout+0xc0>)
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d004      	beq.n	800a3d8 <chEvtWaitAllTimeout+0xa8>
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	6899      	ldr	r1, [r3, #8]
 800a3d2:	6893      	ldr	r3, [r2, #8]
 800a3d4:	4299      	cmp	r1, r3
 800a3d6:	d303      	bcc.n	800a3e0 <chEvtWaitAllTimeout+0xb0>
 800a3d8:	2000      	movs	r0, #0
 800a3da:	f380 8811 	msr	BASEPRI, r0
 800a3de:	e7d8      	b.n	800a392 <chEvtWaitAllTimeout+0x62>
 800a3e0:	4804      	ldr	r0, [pc, #16]	; (800a3f4 <chEvtWaitAllTimeout+0xc4>)
 800a3e2:	f7fd f945 	bl	8007670 <chSysHalt>
 800a3e6:	e7f7      	b.n	800a3d8 <chEvtWaitAllTimeout+0xa8>
 800a3e8:	4802      	ldr	r0, [pc, #8]	; (800a3f4 <chEvtWaitAllTimeout+0xc4>)
 800a3ea:	f7fd f941 	bl	8007670 <chSysHalt>
 800a3ee:	e7cc      	b.n	800a38a <chEvtWaitAllTimeout+0x5a>
 800a3f0:	20004f68 	.word	0x20004f68
 800a3f4:	08015348 	.word	0x08015348
	...

0800a400 <chMsgSend>:
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	460e      	mov	r6, r1
  thread_t *ctp = currp;
 800a404:	4b1c      	ldr	r3, [pc, #112]	; (800a478 <chMsgSend+0x78>)
 800a406:	699c      	ldr	r4, [r3, #24]

  chDbgCheck(tp != NULL);
 800a408:	4605      	mov	r5, r0
 800a40a:	b340      	cbz	r0, 800a45e <chMsgSend+0x5e>
 800a40c:	2320      	movs	r3, #32
 800a40e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a412:	f7fe fdbd 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a416:	f7fd fabb 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  ctp->u.sentmsg = msg;
 800a41a:	6266      	str	r6, [r4, #36]	; 0x24
  msg_insert(ctp, &tp->msgqueue);
 800a41c:	f105 032c 	add.w	r3, r5, #44	; 0x2c
  tp->queue.next             = (thread_t *)tqp;
 800a420:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = tqp->prev;
 800a422:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a424:	6063      	str	r3, [r4, #4]
  tp->queue.prev->queue.next = tp;
 800a426:	601c      	str	r4, [r3, #0]
  tqp->prev                  = tp;
 800a428:	632c      	str	r4, [r5, #48]	; 0x30
  if (tp->state == CH_STATE_WTMSG) {
 800a42a:	f895 3020 	ldrb.w	r3, [r5, #32]
 800a42e:	2b0e      	cmp	r3, #14
 800a430:	d019      	beq.n	800a466 <chMsgSend+0x66>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 800a432:	200c      	movs	r0, #12
 800a434:	f7fd fecc 	bl	80081d0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 800a438:	6a64      	ldr	r4, [r4, #36]	; 0x24
  _dbg_check_unlock();
 800a43a:	f7fd fac1 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a43e:	f7fe fdaf 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a442:	4b0d      	ldr	r3, [pc, #52]	; (800a478 <chMsgSend+0x78>)
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	429a      	cmp	r2, r3
 800a448:	d004      	beq.n	800a454 <chMsgSend+0x54>
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	6899      	ldr	r1, [r3, #8]
 800a44e:	6893      	ldr	r3, [r2, #8]
 800a450:	4299      	cmp	r1, r3
 800a452:	d30c      	bcc.n	800a46e <chMsgSend+0x6e>
 800a454:	2300      	movs	r3, #0
 800a456:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 800a45a:	4620      	mov	r0, r4
 800a45c:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(tp != NULL);
 800a45e:	4807      	ldr	r0, [pc, #28]	; (800a47c <chMsgSend+0x7c>)
 800a460:	f7fd f906 	bl	8007670 <chSysHalt>
 800a464:	e7d2      	b.n	800a40c <chMsgSend+0xc>
    (void) chSchReadyI(tp);
 800a466:	4628      	mov	r0, r5
 800a468:	f7fd fe22 	bl	80080b0 <chSchReadyI>
 800a46c:	e7e1      	b.n	800a432 <chMsgSend+0x32>
 800a46e:	4804      	ldr	r0, [pc, #16]	; (800a480 <chMsgSend+0x80>)
 800a470:	f7fd f8fe 	bl	8007670 <chSysHalt>
 800a474:	e7ee      	b.n	800a454 <chMsgSend+0x54>
 800a476:	bf00      	nop
 800a478:	20004f68 	.word	0x20004f68
 800a47c:	080153a8 	.word	0x080153a8
 800a480:	080153b4 	.word	0x080153b4
 800a484:	f3af 8000 	nop.w
 800a488:	f3af 8000 	nop.w
 800a48c:	f3af 8000 	nop.w

0800a490 <chMsgWait>:
 *
 * @return              A pointer to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	2320      	movs	r3, #32
 800a494:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a498:	f7fe fd7a 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a49c:	f7fd fa78 	bl	8007990 <_dbg_check_lock>
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 800a4a0:	4b16      	ldr	r3, [pc, #88]	; (800a4fc <chMsgWait+0x6c>)
 800a4a2:	699c      	ldr	r4, [r3, #24]
 *
 * @iclass
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();
 800a4a4:	f7fd fb14 	bl	8007ad0 <chDbgCheckClassI>

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 800a4a8:	4623      	mov	r3, r4
 800a4aa:	f853 2f2c 	ldr.w	r2, [r3, #44]!
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d01b      	beq.n	800a4ea <chMsgWait+0x5a>
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
 800a4b2:	4d12      	ldr	r5, [pc, #72]	; (800a4fc <chMsgWait+0x6c>)
 800a4b4:	69ab      	ldr	r3, [r5, #24]
 800a4b6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
  thread_t *tp = tqp->next;
 800a4ba:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  tqp->next             = tp->queue.next;
 800a4bc:	6822      	ldr	r2, [r4, #0]
 800a4be:	62da      	str	r2, [r3, #44]	; 0x2c
  tqp->next->queue.prev = (thread_t *)tqp;
 800a4c0:	6051      	str	r1, [r2, #4]
  tp->state = CH_STATE_SNDMSG;
 800a4c2:	230d      	movs	r3, #13
 800a4c4:	f884 3020 	strb.w	r3, [r4, #32]
  _dbg_check_unlock();
 800a4c8:	f7fd fa7a 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a4cc:	f7fe fd68 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	42ab      	cmp	r3, r5
 800a4d4:	d004      	beq.n	800a4e0 <chMsgWait+0x50>
 800a4d6:	69aa      	ldr	r2, [r5, #24]
 800a4d8:	6892      	ldr	r2, [r2, #8]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d308      	bcc.n	800a4f2 <chMsgWait+0x62>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	bd38      	pop	{r3, r4, r5, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 800a4ea:	200e      	movs	r0, #14
 800a4ec:	f7fd fe70 	bl	80081d0 <chSchGoSleepS>
 800a4f0:	e7df      	b.n	800a4b2 <chMsgWait+0x22>
 800a4f2:	4803      	ldr	r0, [pc, #12]	; (800a500 <chMsgWait+0x70>)
 800a4f4:	f7fd f8bc 	bl	8007670 <chSysHalt>
 800a4f8:	e7f2      	b.n	800a4e0 <chMsgWait+0x50>
 800a4fa:	bf00      	nop
 800a4fc:	20004f68 	.word	0x20004f68
 800a500:	080153b4 	.word	0x080153b4
 800a504:	f3af 8000 	nop.w
 800a508:	f3af 8000 	nop.w
 800a50c:	f3af 8000 	nop.w

0800a510 <chMsgRelease>:
 * @param[in] tp        pointer to the thread
 * @param[in] msg       message to be returned to the sender
 *
 * @api
 */
void chMsgRelease(thread_t *tp, msg_t msg) {
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4604      	mov	r4, r0
 800a514:	460d      	mov	r5, r1
 800a516:	2320      	movs	r3, #32
 800a518:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a51c:	f7fe fd38 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a520:	f7fd fa36 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");
 800a524:	f894 3020 	ldrb.w	r3, [r4, #32]
 800a528:	2b0d      	cmp	r3, #13
 800a52a:	d002      	beq.n	800a532 <chMsgRelease+0x22>
 800a52c:	480e      	ldr	r0, [pc, #56]	; (800a568 <chMsgRelease+0x58>)
 800a52e:	f7fd f89f 	bl	8007670 <chSysHalt>
 *
 * @sclass
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();
 800a532:	f7fd fae5 	bl	8007b00 <chDbgCheckClassS>

  chSchWakeupS(tp, msg);
 800a536:	4629      	mov	r1, r5
 800a538:	4620      	mov	r0, r4
 800a53a:	f7fd fea9 	bl	8008290 <chSchWakeupS>
  _dbg_check_unlock();
 800a53e:	f7fd fa3f 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a542:	f7fe fd2d 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a546:	4b09      	ldr	r3, [pc, #36]	; (800a56c <chMsgRelease+0x5c>)
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d004      	beq.n	800a558 <chMsgRelease+0x48>
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	6899      	ldr	r1, [r3, #8]
 800a552:	6893      	ldr	r3, [r2, #8]
 800a554:	4299      	cmp	r1, r3
 800a556:	d303      	bcc.n	800a560 <chMsgRelease+0x50>
 800a558:	2300      	movs	r3, #0
 800a55a:	f383 8811 	msr	BASEPRI, r3
  chMsgReleaseS(tp, msg);
  chSysUnlock();
}
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	4803      	ldr	r0, [pc, #12]	; (800a570 <chMsgRelease+0x60>)
 800a562:	f7fd f885 	bl	8007670 <chSysHalt>
 800a566:	e7f7      	b.n	800a558 <chMsgRelease+0x48>
 800a568:	080153c0 	.word	0x080153c0
 800a56c:	20004f68 	.word	0x20004f68
 800a570:	080153b4 	.word	0x080153b4
	...

0800a580 <chThdCreateFromHeap>:
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
 800a580:	b570      	push	{r4, r5, r6, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	460c      	mov	r4, r1
 800a586:	4616      	mov	r6, r2
 800a588:	461d      	mov	r5, r3
  thread_t *tp;
  void *wsp;

  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800a58a:	2208      	movs	r2, #8
 800a58c:	f000 fb98 	bl	800acc0 <chHeapAllocAligned>
  if (wsp == NULL) {
 800a590:	2800      	cmp	r0, #0
 800a592:	d033      	beq.n	800a5fc <chThdCreateFromHeap+0x7c>
    return NULL;
  }

  thread_descriptor_t td = {
 800a594:	9600      	str	r6, [sp, #0]
 800a596:	9001      	str	r0, [sp, #4]
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 800a598:	1901      	adds	r1, r0, r4
  thread_descriptor_t td = {
 800a59a:	9102      	str	r1, [sp, #8]
 800a59c:	9503      	str	r5, [sp, #12]
 800a59e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5a0:	9204      	str	r2, [sp, #16]
 800a5a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5a4:	9205      	str	r2, [sp, #20]
    pf,
    arg
  };

#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 800a5a6:	2255      	movs	r2, #85	; 0x55
 800a5a8:	f7fd ff9a 	bl	80084e0 <_thread_memfill>
 800a5ac:	2320      	movs	r3, #32
 800a5ae:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a5b2:	f7fe fced 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a5b6:	f7fd f9eb 	bl	8007990 <_dbg_check_lock>
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800a5ba:	4668      	mov	r0, sp
 800a5bc:	f7fd ff98 	bl	80084f0 <chThdCreateSuspendedI>
 800a5c0:	4604      	mov	r4, r0
  tp->flags = CH_FLAG_MODE_HEAP;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	f7fd fe61 	bl	8008290 <chSchWakeupS>
  _dbg_check_unlock();
 800a5ce:	f7fd f9f7 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a5d2:	f7fe fce5 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a5d6:	4b0a      	ldr	r3, [pc, #40]	; (800a600 <chThdCreateFromHeap+0x80>)
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d004      	beq.n	800a5e8 <chThdCreateFromHeap+0x68>
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	6899      	ldr	r1, [r3, #8]
 800a5e2:	6893      	ldr	r3, [r2, #8]
 800a5e4:	4299      	cmp	r1, r3
 800a5e6:	d305      	bcc.n	800a5f4 <chThdCreateFromHeap+0x74>
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	b006      	add	sp, #24
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	4803      	ldr	r0, [pc, #12]	; (800a604 <chThdCreateFromHeap+0x84>)
 800a5f6:	f7fd f83b 	bl	8007670 <chSysHalt>
 800a5fa:	e7f5      	b.n	800a5e8 <chThdCreateFromHeap+0x68>
    return NULL;
 800a5fc:	2400      	movs	r4, #0
 800a5fe:	e7f6      	b.n	800a5ee <chThdCreateFromHeap+0x6e>
 800a600:	20004f68 	.word	0x20004f68
 800a604:	080153d0 	.word	0x080153d0
 800a608:	f3af 8000 	nop.w
 800a60c:	f3af 8000 	nop.w

0800a610 <chThdCreateFromMemoryPool>:
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
                                    tprio_t prio, tfunc_t pf, void *arg) {
 800a610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a612:	b087      	sub	sp, #28
 800a614:	460f      	mov	r7, r1
 800a616:	4616      	mov	r6, r2
 800a618:	461d      	mov	r5, r3
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);
 800a61a:	4604      	mov	r4, r0
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d035      	beq.n	800a68c <chThdCreateFromMemoryPool+0x7c>

  wsp = chPoolAlloc(mp);
 800a620:	4620      	mov	r0, r4
 800a622:	f000 fca5 	bl	800af70 <chPoolAlloc>
  if (wsp == NULL) {
 800a626:	2800      	cmp	r0, #0
 800a628:	d038      	beq.n	800a69c <chThdCreateFromMemoryPool+0x8c>
    return NULL;
  }

  thread_descriptor_t td = {
 800a62a:	9700      	str	r7, [sp, #0]
 800a62c:	9001      	str	r0, [sp, #4]
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 800a62e:	6861      	ldr	r1, [r4, #4]
 800a630:	4401      	add	r1, r0
  thread_descriptor_t td = {
 800a632:	9102      	str	r1, [sp, #8]
 800a634:	9603      	str	r6, [sp, #12]
 800a636:	9504      	str	r5, [sp, #16]
 800a638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a63a:	9205      	str	r2, [sp, #20]
    pf,
    arg
  };

#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 800a63c:	2255      	movs	r2, #85	; 0x55
 800a63e:	f7fd ff4f 	bl	80084e0 <_thread_memfill>
 800a642:	2320      	movs	r3, #32
 800a644:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a648:	f7fe fca2 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a64c:	f7fd f9a0 	bl	8007990 <_dbg_check_lock>
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800a650:	4668      	mov	r0, sp
 800a652:	f7fd ff4d 	bl	80084f0 <chThdCreateSuspendedI>
 800a656:	4605      	mov	r5, r0
  tp->flags = CH_FLAG_MODE_MPOOL;
 800a658:	2302      	movs	r3, #2
 800a65a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 800a65e:	6404      	str	r4, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 800a660:	2100      	movs	r1, #0
 800a662:	f7fd fe15 	bl	8008290 <chSchWakeupS>
  _dbg_check_unlock();
 800a666:	f7fd f9ab 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a66a:	f7fe fc99 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a66e:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <chThdCreateFromMemoryPool+0x90>)
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	429a      	cmp	r2, r3
 800a674:	d004      	beq.n	800a680 <chThdCreateFromMemoryPool+0x70>
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	6899      	ldr	r1, [r3, #8]
 800a67a:	6893      	ldr	r3, [r2, #8]
 800a67c:	4299      	cmp	r1, r3
 800a67e:	d309      	bcc.n	800a694 <chThdCreateFromMemoryPool+0x84>
 800a680:	2300      	movs	r3, #0
 800a682:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 800a686:	4628      	mov	r0, r5
 800a688:	b007      	add	sp, #28
 800a68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  chDbgCheck(mp != NULL);
 800a68c:	4805      	ldr	r0, [pc, #20]	; (800a6a4 <chThdCreateFromMemoryPool+0x94>)
 800a68e:	f7fc ffef 	bl	8007670 <chSysHalt>
 800a692:	e7c5      	b.n	800a620 <chThdCreateFromMemoryPool+0x10>
 800a694:	4804      	ldr	r0, [pc, #16]	; (800a6a8 <chThdCreateFromMemoryPool+0x98>)
 800a696:	f7fc ffeb 	bl	8007670 <chSysHalt>
 800a69a:	e7f1      	b.n	800a680 <chThdCreateFromMemoryPool+0x70>
    return NULL;
 800a69c:	2500      	movs	r5, #0
 800a69e:	e7f2      	b.n	800a686 <chThdCreateFromMemoryPool+0x76>
 800a6a0:	20004f68 	.word	0x20004f68
 800a6a4:	080153dc 	.word	0x080153dc
 800a6a8:	080153d0 	.word	0x080153d0
 800a6ac:	00000000 	.word	0x00000000

0800a6b0 <chMBObjectInit>:
 * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
 * @param[in] n         number of elements in the buffer array
 *
 * @init
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	460d      	mov	r5, r1
 800a6b4:	4616      	mov	r6, r2

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	b108      	cbz	r0, 800a6be <chMBObjectInit+0xe>
 800a6ba:	b101      	cbz	r1, 800a6be <chMBObjectInit+0xe>
 800a6bc:	b912      	cbnz	r2, 800a6c4 <chMBObjectInit+0x14>
 800a6be:	480a      	ldr	r0, [pc, #40]	; (800a6e8 <chMBObjectInit+0x38>)
 800a6c0:	f7fc ffd6 	bl	8007670 <chSysHalt>

  mbp->buffer = buf;
 800a6c4:	6025      	str	r5, [r4, #0]
  mbp->rdptr  = buf;
 800a6c6:	60e5      	str	r5, [r4, #12]
  mbp->wrptr  = buf;
 800a6c8:	60a5      	str	r5, [r4, #8]
  mbp->top    = &buf[n];
 800a6ca:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 800a6ce:	6065      	str	r5, [r4, #4]
  mbp->cnt    = (size_t)0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	6123      	str	r3, [r4, #16]
  mbp->reset  = false;
 800a6d4:	7523      	strb	r3, [r4, #20]
  chThdQueueObjectInit(&mbp->qw);
 800a6d6:	f104 0318 	add.w	r3, r4, #24
  tqp->next = (thread_t *)tqp;
 800a6da:	61a3      	str	r3, [r4, #24]
  tqp->prev = (thread_t *)tqp;
 800a6dc:	61e3      	str	r3, [r4, #28]
  chThdQueueObjectInit(&mbp->qr);
 800a6de:	f104 0320 	add.w	r3, r4, #32
  tqp->next = (thread_t *)tqp;
 800a6e2:	6223      	str	r3, [r4, #32]
  tqp->prev = (thread_t *)tqp;
 800a6e4:	6263      	str	r3, [r4, #36]	; 0x24
}
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}
 800a6e8:	080153f8 	.word	0x080153f8
 800a6ec:	f3af 8000 	nop.w

0800a6f0 <chMBResetI>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBResetI(mailbox_t *mbp) {
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	4604      	mov	r4, r0

  chDbgCheckClassI();
 800a6f4:	f7fd f9ec 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(mbp != NULL);
 800a6f8:	b19c      	cbz	r4, 800a722 <chMBResetI+0x32>

  mbp->wrptr = mbp->buffer;
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	60a3      	str	r3, [r4, #8]
  mbp->rdptr = mbp->buffer;
 800a6fe:	60e3      	str	r3, [r4, #12]
  mbp->cnt   = (size_t)0;
 800a700:	2300      	movs	r3, #0
 800a702:	6123      	str	r3, [r4, #16]
  mbp->reset = true;
 800a704:	2301      	movs	r3, #1
 800a706:	7523      	strb	r3, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 800a708:	f06f 0101 	mvn.w	r1, #1
 800a70c:	f104 0018 	add.w	r0, r4, #24
 800a710:	f7fe fb5e 	bl	8008dd0 <chThdDequeueAllI>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 800a714:	f06f 0101 	mvn.w	r1, #1
 800a718:	f104 0020 	add.w	r0, r4, #32
 800a71c:	f7fe fb58 	bl	8008dd0 <chThdDequeueAllI>
}
 800a720:	bd10      	pop	{r4, pc}
  chDbgCheck(mbp != NULL);
 800a722:	4802      	ldr	r0, [pc, #8]	; (800a72c <chMBResetI+0x3c>)
 800a724:	f7fc ffa4 	bl	8007670 <chSysHalt>
 800a728:	e7e7      	b.n	800a6fa <chMBResetI+0xa>
 800a72a:	bf00      	nop
 800a72c:	08015408 	.word	0x08015408

0800a730 <chMBReset>:
void chMBReset(mailbox_t *mbp) {
 800a730:	b510      	push	{r4, lr}
 800a732:	4604      	mov	r4, r0
 800a734:	2320      	movs	r3, #32
 800a736:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a73a:	f7fe fc29 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a73e:	f7fd f927 	bl	8007990 <_dbg_check_lock>
  chMBResetI(mbp);
 800a742:	4620      	mov	r0, r4
 800a744:	f7ff ffd4 	bl	800a6f0 <chMBResetI>
  chSchRescheduleS();
 800a748:	f7fd fe5a 	bl	8008400 <chSchRescheduleS>
  _dbg_check_unlock();
 800a74c:	f7fd f938 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a750:	f7fe fc26 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a754:	4b08      	ldr	r3, [pc, #32]	; (800a778 <chMBReset+0x48>)
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d004      	beq.n	800a766 <chMBReset+0x36>
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	6899      	ldr	r1, [r3, #8]
 800a760:	6893      	ldr	r3, [r2, #8]
 800a762:	4299      	cmp	r1, r3
 800a764:	d303      	bcc.n	800a76e <chMBReset+0x3e>
 800a766:	2300      	movs	r3, #0
 800a768:	f383 8811 	msr	BASEPRI, r3
}
 800a76c:	bd10      	pop	{r4, pc}
 800a76e:	4803      	ldr	r0, [pc, #12]	; (800a77c <chMBReset+0x4c>)
 800a770:	f7fc ff7e 	bl	8007670 <chSysHalt>
 800a774:	e7f7      	b.n	800a766 <chMBReset+0x36>
 800a776:	bf00      	nop
 800a778:	20004f68 	.word	0x20004f68
 800a77c:	08015414 	.word	0x08015414

0800a780 <chMBPostTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800a780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a784:	4605      	mov	r5, r0
 800a786:	4688      	mov	r8, r1
 800a788:	4616      	mov	r6, r2
 800a78a:	461f      	mov	r7, r3
  msg_t rdymsg;

  chDbgCheckClassS();
 800a78c:	f7fd f9b8 	bl	8007b00 <chDbgCheckClassS>
  chDbgCheck(mbp != NULL);
 800a790:	b1b5      	cbz	r5, 800a7c0 <chMBPostTimeoutS+0x40>

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 800a792:	7d2b      	ldrb	r3, [r5, #20]
 800a794:	bb7b      	cbnz	r3, 800a7f6 <chMBPostTimeoutS+0x76>
 *
 * @iclass
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();
 800a796:	f7fd f99b 	bl	8007ad0 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800a79a:	686c      	ldr	r4, [r5, #4]
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	1ae4      	subs	r4, r4, r3
 800a7a0:	10a4      	asrs	r4, r4, #2
  chDbgCheckClassI();
 800a7a2:	f7fd f995 	bl	8007ad0 <chDbgCheckClassI>
  return mbp->cnt;
 800a7a6:	692b      	ldr	r3, [r5, #16]
      return MSG_RESET;
    }

    /* Is there a free message slot in queue? if so then post.*/
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a7a8:	429c      	cmp	r4, r3
 800a7aa:	d10d      	bne.n	800a7c8 <chMBPostTimeoutS+0x48>

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800a7ac:	4632      	mov	r2, r6
 800a7ae:	463b      	mov	r3, r7
 800a7b0:	f105 0018 	add.w	r0, r5, #24
 800a7b4:	f7fe fad4 	bl	8008d60 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d0e9      	beq.n	800a792 <chMBPostTimeoutS+0x12>
 800a7be:	e01c      	b.n	800a7fa <chMBPostTimeoutS+0x7a>
  chDbgCheck(mbp != NULL);
 800a7c0:	480f      	ldr	r0, [pc, #60]	; (800a800 <chMBPostTimeoutS+0x80>)
 800a7c2:	f7fc ff55 	bl	8007670 <chSysHalt>
 800a7c6:	e7e4      	b.n	800a792 <chMBPostTimeoutS+0x12>
      *mbp->wrptr++ = msg;
 800a7c8:	68ab      	ldr	r3, [r5, #8]
 800a7ca:	1d1a      	adds	r2, r3, #4
 800a7cc:	60aa      	str	r2, [r5, #8]
 800a7ce:	f8c3 8000 	str.w	r8, [r3]
      if (mbp->wrptr >= mbp->top) {
 800a7d2:	68aa      	ldr	r2, [r5, #8]
 800a7d4:	686b      	ldr	r3, [r5, #4]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d301      	bcc.n	800a7de <chMBPostTimeoutS+0x5e>
        mbp->wrptr = mbp->buffer;
 800a7da:	682b      	ldr	r3, [r5, #0]
 800a7dc:	60ab      	str	r3, [r5, #8]
      mbp->cnt++;
 800a7de:	692b      	ldr	r3, [r5, #16]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	612b      	str	r3, [r5, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	f105 0020 	add.w	r0, r5, #32
 800a7ea:	f7fe fad1 	bl	8008d90 <chThdDequeueNextI>
      chSchRescheduleS();
 800a7ee:	f7fd fe07 	bl	8008400 <chSchRescheduleS>
      return MSG_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e001      	b.n	800a7fa <chMBPostTimeoutS+0x7a>
      return MSG_RESET;
 800a7f6:	f06f 0301 	mvn.w	r3, #1

  return rdymsg;
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a800:	08015420 	.word	0x08015420
 800a804:	f3af 8000 	nop.w
 800a808:	f3af 8000 	nop.w
 800a80c:	f3af 8000 	nop.w

0800a810 <chMBPostTimeout>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a812:	4604      	mov	r4, r0
 800a814:	460d      	mov	r5, r1
 800a816:	4616      	mov	r6, r2
 800a818:	461f      	mov	r7, r3
 800a81a:	2320      	movs	r3, #32
 800a81c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a820:	f7fe fbb6 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a824:	f7fd f8b4 	bl	8007990 <_dbg_check_lock>
  rdymsg = chMBPostTimeoutS(mbp, msg, timeout);
 800a828:	4632      	mov	r2, r6
 800a82a:	463b      	mov	r3, r7
 800a82c:	4629      	mov	r1, r5
 800a82e:	4620      	mov	r0, r4
 800a830:	f7ff ffa6 	bl	800a780 <chMBPostTimeoutS>
 800a834:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800a836:	f7fd f8c3 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a83a:	f7fe fbb1 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a83e:	4b09      	ldr	r3, [pc, #36]	; (800a864 <chMBPostTimeout+0x54>)
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	429a      	cmp	r2, r3
 800a844:	d004      	beq.n	800a850 <chMBPostTimeout+0x40>
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	6899      	ldr	r1, [r3, #8]
 800a84a:	6893      	ldr	r3, [r2, #8]
 800a84c:	4299      	cmp	r1, r3
 800a84e:	d304      	bcc.n	800a85a <chMBPostTimeout+0x4a>
 800a850:	2300      	movs	r3, #0
 800a852:	f383 8811 	msr	BASEPRI, r3
}
 800a856:	4620      	mov	r0, r4
 800a858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a85a:	4803      	ldr	r0, [pc, #12]	; (800a868 <chMBPostTimeout+0x58>)
 800a85c:	f7fc ff08 	bl	8007670 <chSysHalt>
 800a860:	e7f6      	b.n	800a850 <chMBPostTimeout+0x40>
 800a862:	bf00      	nop
 800a864:	20004f68 	.word	0x20004f68
 800a868:	08015414 	.word	0x08015414
 800a86c:	f3af 8000 	nop.w

0800a870 <chMBPostI>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 800a870:	b570      	push	{r4, r5, r6, lr}
 800a872:	4604      	mov	r4, r0
 800a874:	460e      	mov	r6, r1

  chDbgCheckClassI();
 800a876:	f7fd f92b 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(mbp != NULL);
 800a87a:	b304      	cbz	r4, 800a8be <chMBPostI+0x4e>

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 800a87c:	7d23      	ldrb	r3, [r4, #20]
 800a87e:	bb13      	cbnz	r3, 800a8c6 <chMBPostI+0x56>
  chDbgCheckClassI();
 800a880:	f7fd f926 	bl	8007ad0 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800a884:	6865      	ldr	r5, [r4, #4]
 800a886:	6823      	ldr	r3, [r4, #0]
 800a888:	1aed      	subs	r5, r5, r3
 800a88a:	10ad      	asrs	r5, r5, #2
  chDbgCheckClassI();
 800a88c:	f7fd f920 	bl	8007ad0 <chDbgCheckClassI>
  return mbp->cnt;
 800a890:	6923      	ldr	r3, [r4, #16]
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a892:	429d      	cmp	r5, r3
 800a894:	d01a      	beq.n	800a8cc <chMBPostI+0x5c>
    *mbp->wrptr++ = msg;
 800a896:	68a3      	ldr	r3, [r4, #8]
 800a898:	1d1a      	adds	r2, r3, #4
 800a89a:	60a2      	str	r2, [r4, #8]
 800a89c:	601e      	str	r6, [r3, #0]
    if (mbp->wrptr >= mbp->top) {
 800a89e:	68a2      	ldr	r2, [r4, #8]
 800a8a0:	6863      	ldr	r3, [r4, #4]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d301      	bcc.n	800a8aa <chMBPostI+0x3a>
      mbp->wrptr = mbp->buffer;
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	60a3      	str	r3, [r4, #8]
    }
    mbp->cnt++;
 800a8aa:	6923      	ldr	r3, [r4, #16]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	6123      	str	r3, [r4, #16]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	f104 0020 	add.w	r0, r4, #32
 800a8b6:	f7fe fa6b 	bl	8008d90 <chThdDequeueNextI>

    return MSG_OK;
 800a8ba:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 800a8bc:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);
 800a8be:	4805      	ldr	r0, [pc, #20]	; (800a8d4 <chMBPostI+0x64>)
 800a8c0:	f7fc fed6 	bl	8007670 <chSysHalt>
 800a8c4:	e7da      	b.n	800a87c <chMBPostI+0xc>
    return MSG_RESET;
 800a8c6:	f06f 0001 	mvn.w	r0, #1
 800a8ca:	e7f7      	b.n	800a8bc <chMBPostI+0x4c>
  return MSG_TIMEOUT;
 800a8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d0:	e7f4      	b.n	800a8bc <chMBPostI+0x4c>
 800a8d2:	bf00      	nop
 800a8d4:	08015434 	.word	0x08015434
 800a8d8:	f3af 8000 	nop.w
 800a8dc:	f3af 8000 	nop.w

0800a8e0 <chMBPostAheadTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBPostAheadTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800a8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	4688      	mov	r8, r1
 800a8e8:	4616      	mov	r6, r2
 800a8ea:	461f      	mov	r7, r3
  msg_t rdymsg;

  chDbgCheckClassS();
 800a8ec:	f7fd f908 	bl	8007b00 <chDbgCheckClassS>
  chDbgCheck(mbp != NULL);
 800a8f0:	b1b5      	cbz	r5, 800a920 <chMBPostAheadTimeoutS+0x40>

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 800a8f2:	7d2b      	ldrb	r3, [r5, #20]
 800a8f4:	bb83      	cbnz	r3, 800a958 <chMBPostAheadTimeoutS+0x78>
  chDbgCheckClassI();
 800a8f6:	f7fd f8eb 	bl	8007ad0 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800a8fa:	686c      	ldr	r4, [r5, #4]
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	1ae4      	subs	r4, r4, r3
 800a900:	10a4      	asrs	r4, r4, #2
  chDbgCheckClassI();
 800a902:	f7fd f8e5 	bl	8007ad0 <chDbgCheckClassI>
  return mbp->cnt;
 800a906:	692b      	ldr	r3, [r5, #16]
      return MSG_RESET;
    }

    /* Is there a free message slot in queue? if so then post.*/
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a908:	429c      	cmp	r4, r3
 800a90a:	d10d      	bne.n	800a928 <chMBPostAheadTimeoutS+0x48>

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800a90c:	4632      	mov	r2, r6
 800a90e:	463b      	mov	r3, r7
 800a910:	f105 0018 	add.w	r0, r5, #24
 800a914:	f7fe fa24 	bl	8008d60 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800a918:	4603      	mov	r3, r0
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d0e9      	beq.n	800a8f2 <chMBPostAheadTimeoutS+0x12>
 800a91e:	e01d      	b.n	800a95c <chMBPostAheadTimeoutS+0x7c>
  chDbgCheck(mbp != NULL);
 800a920:	4810      	ldr	r0, [pc, #64]	; (800a964 <chMBPostAheadTimeoutS+0x84>)
 800a922:	f7fc fea5 	bl	8007670 <chSysHalt>
 800a926:	e7e4      	b.n	800a8f2 <chMBPostAheadTimeoutS+0x12>
      if (--mbp->rdptr < mbp->buffer) {
 800a928:	68eb      	ldr	r3, [r5, #12]
 800a92a:	3b04      	subs	r3, #4
 800a92c:	60eb      	str	r3, [r5, #12]
 800a92e:	682a      	ldr	r2, [r5, #0]
 800a930:	4293      	cmp	r3, r2
 800a932:	d202      	bcs.n	800a93a <chMBPostAheadTimeoutS+0x5a>
        mbp->rdptr = mbp->top - 1;
 800a934:	686b      	ldr	r3, [r5, #4]
 800a936:	3b04      	subs	r3, #4
 800a938:	60eb      	str	r3, [r5, #12]
      *mbp->rdptr = msg;
 800a93a:	68eb      	ldr	r3, [r5, #12]
 800a93c:	f8c3 8000 	str.w	r8, [r3]
      mbp->cnt++;
 800a940:	692b      	ldr	r3, [r5, #16]
 800a942:	3301      	adds	r3, #1
 800a944:	612b      	str	r3, [r5, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 800a946:	2100      	movs	r1, #0
 800a948:	f105 0020 	add.w	r0, r5, #32
 800a94c:	f7fe fa20 	bl	8008d90 <chThdDequeueNextI>
      chSchRescheduleS();
 800a950:	f7fd fd56 	bl	8008400 <chSchRescheduleS>
      return MSG_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	e001      	b.n	800a95c <chMBPostAheadTimeoutS+0x7c>
      return MSG_RESET;
 800a958:	f06f 0301 	mvn.w	r3, #1

  return rdymsg;
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a962:	bf00      	nop
 800a964:	08015440 	.word	0x08015440
 800a968:	f3af 8000 	nop.w
 800a96c:	f3af 8000 	nop.w

0800a970 <chMBPostAheadTimeout>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a972:	4604      	mov	r4, r0
 800a974:	460d      	mov	r5, r1
 800a976:	4616      	mov	r6, r2
 800a978:	461f      	mov	r7, r3
 800a97a:	2320      	movs	r3, #32
 800a97c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a980:	f7fe fb06 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a984:	f7fd f804 	bl	8007990 <_dbg_check_lock>
  rdymsg = chMBPostAheadTimeoutS(mbp, msg, timeout);
 800a988:	4632      	mov	r2, r6
 800a98a:	463b      	mov	r3, r7
 800a98c:	4629      	mov	r1, r5
 800a98e:	4620      	mov	r0, r4
 800a990:	f7ff ffa6 	bl	800a8e0 <chMBPostAheadTimeoutS>
 800a994:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800a996:	f7fd f813 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a99a:	f7fe fb01 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a99e:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <chMBPostAheadTimeout+0x54>)
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d004      	beq.n	800a9b0 <chMBPostAheadTimeout+0x40>
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	6899      	ldr	r1, [r3, #8]
 800a9aa:	6893      	ldr	r3, [r2, #8]
 800a9ac:	4299      	cmp	r1, r3
 800a9ae:	d304      	bcc.n	800a9ba <chMBPostAheadTimeout+0x4a>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f383 8811 	msr	BASEPRI, r3
}
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ba:	4803      	ldr	r0, [pc, #12]	; (800a9c8 <chMBPostAheadTimeout+0x58>)
 800a9bc:	f7fc fe58 	bl	8007670 <chSysHalt>
 800a9c0:	e7f6      	b.n	800a9b0 <chMBPostAheadTimeout+0x40>
 800a9c2:	bf00      	nop
 800a9c4:	20004f68 	.word	0x20004f68
 800a9c8:	08015414 	.word	0x08015414
 800a9cc:	f3af 8000 	nop.w

0800a9d0 <chMBPostAheadI>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 800a9d0:	b570      	push	{r4, r5, r6, lr}
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	460e      	mov	r6, r1

  chDbgCheckClassI();
 800a9d6:	f7fd f87b 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(mbp != NULL);
 800a9da:	b30c      	cbz	r4, 800aa20 <chMBPostAheadI+0x50>

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 800a9dc:	7d23      	ldrb	r3, [r4, #20]
 800a9de:	bb1b      	cbnz	r3, 800aa28 <chMBPostAheadI+0x58>
  chDbgCheckClassI();
 800a9e0:	f7fd f876 	bl	8007ad0 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800a9e4:	6865      	ldr	r5, [r4, #4]
 800a9e6:	6823      	ldr	r3, [r4, #0]
 800a9e8:	1aed      	subs	r5, r5, r3
 800a9ea:	10ad      	asrs	r5, r5, #2
  chDbgCheckClassI();
 800a9ec:	f7fd f870 	bl	8007ad0 <chDbgCheckClassI>
  return mbp->cnt;
 800a9f0:	6923      	ldr	r3, [r4, #16]
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a9f2:	429d      	cmp	r5, r3
 800a9f4:	d01b      	beq.n	800aa2e <chMBPostAheadI+0x5e>
    if (--mbp->rdptr < mbp->buffer) {
 800a9f6:	68e3      	ldr	r3, [r4, #12]
 800a9f8:	3b04      	subs	r3, #4
 800a9fa:	60e3      	str	r3, [r4, #12]
 800a9fc:	6822      	ldr	r2, [r4, #0]
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d202      	bcs.n	800aa08 <chMBPostAheadI+0x38>
      mbp->rdptr = mbp->top - 1;
 800aa02:	6863      	ldr	r3, [r4, #4]
 800aa04:	3b04      	subs	r3, #4
 800aa06:	60e3      	str	r3, [r4, #12]
    }
    *mbp->rdptr = msg;
 800aa08:	68e3      	ldr	r3, [r4, #12]
 800aa0a:	601e      	str	r6, [r3, #0]
    mbp->cnt++;
 800aa0c:	6923      	ldr	r3, [r4, #16]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	6123      	str	r3, [r4, #16]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800aa12:	2100      	movs	r1, #0
 800aa14:	f104 0020 	add.w	r0, r4, #32
 800aa18:	f7fe f9ba 	bl	8008d90 <chThdDequeueNextI>

    return MSG_OK;
 800aa1c:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 800aa1e:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);
 800aa20:	4804      	ldr	r0, [pc, #16]	; (800aa34 <chMBPostAheadI+0x64>)
 800aa22:	f7fc fe25 	bl	8007670 <chSysHalt>
 800aa26:	e7d9      	b.n	800a9dc <chMBPostAheadI+0xc>
    return MSG_RESET;
 800aa28:	f06f 0001 	mvn.w	r0, #1
 800aa2c:	e7f7      	b.n	800aa1e <chMBPostAheadI+0x4e>
  return MSG_TIMEOUT;
 800aa2e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa32:	e7f4      	b.n	800aa1e <chMBPostAheadI+0x4e>
 800aa34:	08015458 	.word	0x08015458
 800aa38:	f3af 8000 	nop.w
 800aa3c:	f3af 8000 	nop.w

0800aa40 <chMBFetchTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 800aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa42:	4604      	mov	r4, r0
 800aa44:	460d      	mov	r5, r1
 800aa46:	4616      	mov	r6, r2
 800aa48:	461f      	mov	r7, r3
  msg_t rdymsg;

  chDbgCheckClassS();
 800aa4a:	f7fd f859 	bl	8007b00 <chDbgCheckClassS>
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 800aa4e:	b184      	cbz	r4, 800aa72 <chMBFetchTimeoutS+0x32>
 800aa50:	b17d      	cbz	r5, 800aa72 <chMBFetchTimeoutS+0x32>

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 800aa52:	7d23      	ldrb	r3, [r4, #20]
 800aa54:	bb43      	cbnz	r3, 800aaa8 <chMBFetchTimeoutS+0x68>
  chDbgCheckClassI();
 800aa56:	f7fd f83b 	bl	8007ad0 <chDbgCheckClassI>
  return mbp->cnt;
 800aa5a:	6923      	ldr	r3, [r4, #16]
      return MSG_RESET;
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800aa5c:	b96b      	cbnz	r3, 800aa7a <chMBFetchTimeoutS+0x3a>

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800aa5e:	4632      	mov	r2, r6
 800aa60:	463b      	mov	r3, r7
 800aa62:	f104 0020 	add.w	r0, r4, #32
 800aa66:	f7fe f97b 	bl	8008d60 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d0f0      	beq.n	800aa52 <chMBFetchTimeoutS+0x12>
 800aa70:	e01c      	b.n	800aaac <chMBFetchTimeoutS+0x6c>
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 800aa72:	480f      	ldr	r0, [pc, #60]	; (800aab0 <chMBFetchTimeoutS+0x70>)
 800aa74:	f7fc fdfc 	bl	8007670 <chSysHalt>
 800aa78:	e7eb      	b.n	800aa52 <chMBFetchTimeoutS+0x12>
      *msgp = *mbp->rdptr++;
 800aa7a:	68e3      	ldr	r3, [r4, #12]
 800aa7c:	1d1a      	adds	r2, r3, #4
 800aa7e:	60e2      	str	r2, [r4, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	602b      	str	r3, [r5, #0]
      if (mbp->rdptr >= mbp->top) {
 800aa84:	68e2      	ldr	r2, [r4, #12]
 800aa86:	6863      	ldr	r3, [r4, #4]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d301      	bcc.n	800aa90 <chMBFetchTimeoutS+0x50>
        mbp->rdptr = mbp->buffer;
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	60e3      	str	r3, [r4, #12]
      mbp->cnt--;
 800aa90:	6923      	ldr	r3, [r4, #16]
 800aa92:	3b01      	subs	r3, #1
 800aa94:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 800aa96:	2100      	movs	r1, #0
 800aa98:	f104 0018 	add.w	r0, r4, #24
 800aa9c:	f7fe f978 	bl	8008d90 <chThdDequeueNextI>
      chSchRescheduleS();
 800aaa0:	f7fd fcae 	bl	8008400 <chSchRescheduleS>
      return MSG_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e001      	b.n	800aaac <chMBFetchTimeoutS+0x6c>
      return MSG_RESET;
 800aaa8:	f06f 0301 	mvn.w	r3, #1

  return rdymsg;
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aab0:	08015468 	.word	0x08015468
 800aab4:	f3af 8000 	nop.w
 800aab8:	f3af 8000 	nop.w
 800aabc:	f3af 8000 	nop.w

0800aac0 <chMBFetchTimeout>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 800aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac2:	4604      	mov	r4, r0
 800aac4:	460d      	mov	r5, r1
 800aac6:	4616      	mov	r6, r2
 800aac8:	461f      	mov	r7, r3
 800aaca:	2320      	movs	r3, #32
 800aacc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800aad0:	f7fe fa5e 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800aad4:	f7fc ff5c 	bl	8007990 <_dbg_check_lock>
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 800aad8:	4632      	mov	r2, r6
 800aada:	463b      	mov	r3, r7
 800aadc:	4629      	mov	r1, r5
 800aade:	4620      	mov	r0, r4
 800aae0:	f7ff ffae 	bl	800aa40 <chMBFetchTimeoutS>
 800aae4:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800aae6:	f7fc ff6b 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800aaea:	f7fe fa59 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800aaee:	4b09      	ldr	r3, [pc, #36]	; (800ab14 <chMBFetchTimeout+0x54>)
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d004      	beq.n	800ab00 <chMBFetchTimeout+0x40>
 800aaf6:	699b      	ldr	r3, [r3, #24]
 800aaf8:	6899      	ldr	r1, [r3, #8]
 800aafa:	6893      	ldr	r3, [r2, #8]
 800aafc:	4299      	cmp	r1, r3
 800aafe:	d304      	bcc.n	800ab0a <chMBFetchTimeout+0x4a>
 800ab00:	2300      	movs	r3, #0
 800ab02:	f383 8811 	msr	BASEPRI, r3
}
 800ab06:	4620      	mov	r0, r4
 800ab08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab0a:	4803      	ldr	r0, [pc, #12]	; (800ab18 <chMBFetchTimeout+0x58>)
 800ab0c:	f7fc fdb0 	bl	8007670 <chSysHalt>
 800ab10:	e7f6      	b.n	800ab00 <chMBFetchTimeout+0x40>
 800ab12:	bf00      	nop
 800ab14:	20004f68 	.word	0x20004f68
 800ab18:	08015414 	.word	0x08015414
 800ab1c:	f3af 8000 	nop.w

0800ab20 <chMBFetchI>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4604      	mov	r4, r0
 800ab24:	460d      	mov	r5, r1

  chDbgCheckClassI();
 800ab26:	f7fc ffd3 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 800ab2a:	b1dc      	cbz	r4, 800ab64 <chMBFetchI+0x44>
 800ab2c:	b1d5      	cbz	r5, 800ab64 <chMBFetchI+0x44>

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 800ab2e:	7d23      	ldrb	r3, [r4, #20]
 800ab30:	b9e3      	cbnz	r3, 800ab6c <chMBFetchI+0x4c>
  chDbgCheckClassI();
 800ab32:	f7fc ffcd 	bl	8007ad0 <chDbgCheckClassI>
  return mbp->cnt;
 800ab36:	6923      	ldr	r3, [r4, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800ab38:	b1db      	cbz	r3, 800ab72 <chMBFetchI+0x52>
    *msgp = *mbp->rdptr++;
 800ab3a:	68e3      	ldr	r3, [r4, #12]
 800ab3c:	1d1a      	adds	r2, r3, #4
 800ab3e:	60e2      	str	r2, [r4, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	602b      	str	r3, [r5, #0]
    if (mbp->rdptr >= mbp->top) {
 800ab44:	68e2      	ldr	r2, [r4, #12]
 800ab46:	6863      	ldr	r3, [r4, #4]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d301      	bcc.n	800ab50 <chMBFetchI+0x30>
      mbp->rdptr = mbp->buffer;
 800ab4c:	6823      	ldr	r3, [r4, #0]
 800ab4e:	60e3      	str	r3, [r4, #12]
    }
    mbp->cnt--;
 800ab50:	6923      	ldr	r3, [r4, #16]
 800ab52:	3b01      	subs	r3, #1
 800ab54:	6123      	str	r3, [r4, #16]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 800ab56:	2100      	movs	r1, #0
 800ab58:	f104 0018 	add.w	r0, r4, #24
 800ab5c:	f7fe f918 	bl	8008d90 <chThdDequeueNextI>

    return MSG_OK;
 800ab60:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 800ab64:	4804      	ldr	r0, [pc, #16]	; (800ab78 <chMBFetchI+0x58>)
 800ab66:	f7fc fd83 	bl	8007670 <chSysHalt>
 800ab6a:	e7e0      	b.n	800ab2e <chMBFetchI+0xe>
    return MSG_RESET;
 800ab6c:	f06f 0001 	mvn.w	r0, #1
 800ab70:	e7f7      	b.n	800ab62 <chMBFetchI+0x42>
  return MSG_TIMEOUT;
 800ab72:	f04f 30ff 	mov.w	r0, #4294967295
 800ab76:	e7f4      	b.n	800ab62 <chMBFetchI+0x42>
 800ab78:	0801547c 	.word	0x0801547c
 800ab7c:	00000000 	.word	0x00000000

0800ab80 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 800ab80:	4b02      	ldr	r3, [pc, #8]	; (800ab8c <_core_init+0xc>)
 800ab82:	4a03      	ldr	r2, [pc, #12]	; (800ab90 <_core_init+0x10>)
 800ab84:	601a      	str	r2, [r3, #0]
  ch_memcore.endmem  = __heap_end__;
 800ab86:	4a03      	ldr	r2, [pc, #12]	; (800ab94 <_core_init+0x14>)
 800ab88:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.nextmem = &static_heap[0];
  ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 800ab8a:	4770      	bx	lr
 800ab8c:	20005858 	.word	0x20005858
 800ab90:	20010098 	.word	0x20010098
 800ab94:	20020000 	.word	0x20020000
 800ab98:	f3af 8000 	nop.w
 800ab9c:	f3af 8000 	nop.w

0800aba0 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	4604      	mov	r4, r0
 800aba4:	460e      	mov	r6, r1
 800aba6:	4615      	mov	r5, r2
  uint8_t *p, *next;

  chDbgCheckClassI();
 800aba8:	f7fc ff92 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800abac:	b116      	cbz	r6, 800abb4 <chCoreAllocAlignedWithOffsetI+0x14>
 800abae:	1e73      	subs	r3, r6, #1
 800abb0:	4233      	tst	r3, r6
 800abb2:	d002      	beq.n	800abba <chCoreAllocAlignedWithOffsetI+0x1a>
 800abb4:	480c      	ldr	r0, [pc, #48]	; (800abe8 <chCoreAllocAlignedWithOffsetI+0x48>)
 800abb6:	f7fc fd5b 	bl	8007670 <chSysHalt>

  size = MEM_ALIGN_NEXT(size, align);
 800abba:	1933      	adds	r3, r6, r4
 800abbc:	3b01      	subs	r3, #1
 800abbe:	4272      	negs	r2, r6
 800abc0:	4013      	ands	r3, r2
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800abc2:	490a      	ldr	r1, [pc, #40]	; (800abec <chCoreAllocAlignedWithOffsetI+0x4c>)
 800abc4:	680c      	ldr	r4, [r1, #0]
 800abc6:	1960      	adds	r0, r4, r5
 800abc8:	4430      	add	r0, r6
 800abca:	3801      	subs	r0, #1
 800abcc:	4010      	ands	r0, r2
  next = p + size;
 800abce:	4403      	add	r3, r0

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800abd0:	684a      	ldr	r2, [r1, #4]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d303      	bcc.n	800abde <chCoreAllocAlignedWithOffsetI+0x3e>
 800abd6:	429c      	cmp	r4, r3
 800abd8:	d803      	bhi.n	800abe2 <chCoreAllocAlignedWithOffsetI+0x42>
    return NULL;
  }

  ch_memcore.nextmem = next;
 800abda:	600b      	str	r3, [r1, #0]

  return p;
}
 800abdc:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800abde:	2000      	movs	r0, #0
 800abe0:	e7fc      	b.n	800abdc <chCoreAllocAlignedWithOffsetI+0x3c>
 800abe2:	2000      	movs	r0, #0
 800abe4:	e7fa      	b.n	800abdc <chCoreAllocAlignedWithOffsetI+0x3c>
 800abe6:	bf00      	nop
 800abe8:	08015488 	.word	0x08015488
 800abec:	20005858 	.word	0x20005858

0800abf0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	4604      	mov	r4, r0
 800abf4:	460d      	mov	r5, r1
 800abf6:	4616      	mov	r6, r2
 800abf8:	2320      	movs	r3, #32
 800abfa:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800abfe:	f7fe f9c7 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800ac02:	f7fc fec5 	bl	8007990 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 800ac06:	4632      	mov	r2, r6
 800ac08:	4629      	mov	r1, r5
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f7ff ffc8 	bl	800aba0 <chCoreAllocAlignedWithOffsetI>
 800ac10:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800ac12:	f7fc fed5 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800ac16:	f7fe f9c3 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800ac1a:	4b09      	ldr	r3, [pc, #36]	; (800ac40 <chCoreAllocAlignedWithOffset+0x50>)
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d004      	beq.n	800ac2c <chCoreAllocAlignedWithOffset+0x3c>
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	6899      	ldr	r1, [r3, #8]
 800ac26:	6893      	ldr	r3, [r2, #8]
 800ac28:	4299      	cmp	r1, r3
 800ac2a:	d304      	bcc.n	800ac36 <chCoreAllocAlignedWithOffset+0x46>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 800ac32:	4620      	mov	r0, r4
 800ac34:	bd70      	pop	{r4, r5, r6, pc}
 800ac36:	4803      	ldr	r0, [pc, #12]	; (800ac44 <chCoreAllocAlignedWithOffset+0x54>)
 800ac38:	f7fc fd1a 	bl	8007670 <chSysHalt>
 800ac3c:	e7f6      	b.n	800ac2c <chCoreAllocAlignedWithOffset+0x3c>
 800ac3e:	bf00      	nop
 800ac40:	20004f68 	.word	0x20004f68
 800ac44:	080154a8 	.word	0x080154a8
 800ac48:	f3af 8000 	nop.w
 800ac4c:	f3af 8000 	nop.w

0800ac50 <chCoreGetStatusX>:
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.endmem - ch_memcore.nextmem);
 800ac50:	4b02      	ldr	r3, [pc, #8]	; (800ac5c <chCoreGetStatusX+0xc>)
 800ac52:	6858      	ldr	r0, [r3, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
  /*lint -restore*/
}
 800ac56:	1ac0      	subs	r0, r0, r3
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	20005858 	.word	0x20005858

0800ac60 <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
 800ac60:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
 800ac62:	4805      	ldr	r0, [pc, #20]	; (800ac78 <_heap_init+0x18>)
 800ac64:	4b05      	ldr	r3, [pc, #20]	; (800ac7c <_heap_init+0x1c>)
 800ac66:	6003      	str	r3, [r0, #0]
  H_NEXT(&default_heap.header) = NULL;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	6043      	str	r3, [r0, #4]
  H_PAGES(&default_heap.header) = 0;
 800ac6c:	6083      	str	r3, [r0, #8]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 800ac6e:	300c      	adds	r0, #12
 800ac70:	f7fe fc96 	bl	80095a0 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 800ac74:	bd08      	pop	{r3, pc}
 800ac76:	bf00      	nop
 800ac78:	200022a4 	.word	0x200022a4
 800ac7c:	0800abf1 	.word	0x0800abf1

0800ac80 <chHeapObjectInit>:
 * @param[in] buf       heap buffer base
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
 800ac80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac82:	460f      	mov	r7, r1
 800ac84:	4614      	mov	r4, r2
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 800ac86:	1dcd      	adds	r5, r1, #7
 800ac88:	f025 0507 	bic.w	r5, r5, #7

  chDbgCheck((heapp != NULL) && (size > 0U));
 800ac8c:	4606      	mov	r6, r0
 800ac8e:	b100      	cbz	r0, 800ac92 <chHeapObjectInit+0x12>
 800ac90:	b912      	cbnz	r2, 800ac98 <chHeapObjectInit+0x18>
 800ac92:	4809      	ldr	r0, [pc, #36]	; (800acb8 <chHeapObjectInit+0x38>)
 800ac94:	f7fc fcec 	bl	8007670 <chSysHalt>

  /* Adjusting the size in case the initial block was not correctly
     aligned.*/
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800ac98:	1bef      	subs	r7, r5, r7
 800ac9a:	1be4      	subs	r4, r4, r7
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	6033      	str	r3, [r6, #0]
  H_NEXT(&heapp->header) = hp;
 800aca0:	6075      	str	r5, [r6, #4]
  H_PAGES(&heapp->header) = 0;
 800aca2:	60b3      	str	r3, [r6, #8]
  H_NEXT(hp) = NULL;
 800aca4:	602b      	str	r3, [r5, #0]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800aca6:	3c08      	subs	r4, #8
 800aca8:	08e4      	lsrs	r4, r4, #3
 800acaa:	606c      	str	r4, [r5, #4]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&heapp->mtx);
 800acac:	f106 000c 	add.w	r0, r6, #12
 800acb0:	f7fe fc76 	bl	80095a0 <chMtxObjectInit>
#else
  chSemObjectInit(&heapp->sem, (cnt_t)1);
#endif
}
 800acb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb6:	bf00      	nop
 800acb8:	080154b4 	.word	0x080154b4
 800acbc:	f3af 8000 	nop.w

0800acc0 <chHeapAllocAligned>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 800acc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc4:	4606      	mov	r6, r0
 800acc6:	4614      	mov	r4, r2
  heap_header_t *qp, *hp, *ahp;
  size_t pages;

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));
 800acc8:	4688      	mov	r8, r1
 800acca:	b119      	cbz	r1, 800acd4 <chHeapAllocAligned+0x14>
 800accc:	b112      	cbz	r2, 800acd4 <chHeapAllocAligned+0x14>
 800acce:	1e53      	subs	r3, r2, #1
 800acd0:	4213      	tst	r3, r2
 800acd2:	d002      	beq.n	800acda <chHeapAllocAligned+0x1a>
 800acd4:	483e      	ldr	r0, [pc, #248]	; (800add0 <chHeapAllocAligned+0x110>)
 800acd6:	f7fc fccb 	bl	8007670 <chSysHalt>

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
 800acda:	b16e      	cbz	r6, 800acf8 <chHeapAllocAligned+0x38>
    heapp = &default_heap;
  }

  /* Minimum alignment is constrained by the heap header structure size.*/
  if (align < CH_HEAP_ALIGNMENT) {
 800acdc:	2c07      	cmp	r4, #7
 800acde:	d800      	bhi.n	800ace2 <chHeapAllocAligned+0x22>
    align = CH_HEAP_ALIGNMENT;
 800ace0:	2408      	movs	r4, #8
  }

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800ace2:	f108 0507 	add.w	r5, r8, #7
 800ace6:	08ed      	lsrs	r5, r5, #3

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 800ace8:	f106 070c 	add.w	r7, r6, #12
 800acec:	4638      	mov	r0, r7
 800acee:	f7fe fce7 	bl	80096c0 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 800acf2:	f106 0c04 	add.w	ip, r6, #4
  while (H_NEXT(qp) != NULL) {
 800acf6:	e037      	b.n	800ad68 <chHeapAllocAligned+0xa8>
    heapp = &default_heap;
 800acf8:	4e36      	ldr	r6, [pc, #216]	; (800add4 <chHeapAllocAligned+0x114>)
 800acfa:	e7ef      	b.n	800acdc <chHeapAllocAligned+0x1c>

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
      /* The block is large enough to contain a correctly aligned area
         of sufficient size.*/

      if (ahp > hp) {
 800acfc:	4299      	cmp	r1, r3
 800acfe:	d211      	bcs.n	800ad24 <chHeapAllocAligned+0x64>
        /* The block is not properly aligned, must split it.*/
        size_t bpages;

        bpages = NPAGES(H_LIMIT(hp), H_BLOCK(ahp));
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800ad00:	eba3 030e 	sub.w	r3, r3, lr
 800ad04:	10db      	asrs	r3, r3, #3
 800ad06:	604b      	str	r3, [r1, #4]
        if (bpages > pages) {
 800ad08:	42aa      	cmp	r2, r5
 800ad0a:	d91f      	bls.n	800ad4c <chHeapAllocAligned+0x8c>
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          /* Creating the excess block.*/
          fp = H_BLOCK(ahp) + pages;
 800ad0c:	1c68      	adds	r0, r5, #1
 800ad0e:	eb09 02c0 	add.w	r2, r9, r0, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 800ad12:	ebaa 0305 	sub.w	r3, sl, r5
 800ad16:	3b01      	subs	r3, #1
 800ad18:	6053      	str	r3, [r2, #4]

          /* Linking the excess block.*/
          H_NEXT(fp) = H_NEXT(hp);
 800ad1a:	680b      	ldr	r3, [r1, #0]
 800ad1c:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
          H_NEXT(hp) = fp;
 800ad20:	600a      	str	r2, [r1, #0]
 800ad22:	e013      	b.n	800ad4c <chHeapAllocAligned+0x8c>
        hp = ahp;
      }
      else {
        /* The block is already properly aligned.*/

        if (H_PAGES(hp) == pages) {
 800ad24:	42a8      	cmp	r0, r5
 800ad26:	d019      	beq.n	800ad5c <chHeapAllocAligned+0x9c>
        }
        else {
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
 800ad28:	3501      	adds	r5, #1
 800ad2a:	eb01 02c5 	add.w	r2, r1, r5, lsl #3
          H_NEXT(fp) = H_NEXT(hp);
 800ad2e:	680b      	ldr	r3, [r1, #0]
 800ad30:	f841 3035 	str.w	r3, [r1, r5, lsl #3]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 800ad34:	684b      	ldr	r3, [r1, #4]
 800ad36:	3301      	adds	r3, #1
 800ad38:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ad3c:	f102 0008 	add.w	r0, r2, #8
 800ad40:	1a1b      	subs	r3, r3, r0
 800ad42:	10db      	asrs	r3, r3, #3
 800ad44:	6053      	str	r3, [r2, #4]
          H_NEXT(qp) = fp;
 800ad46:	f8cc 2000 	str.w	r2, [ip]
    hp = H_NEXT(qp);
 800ad4a:	4689      	mov	r9, r1
        }
      }

      /* Setting in the block owner heap and size.*/
      H_SIZE(hp) = size;
 800ad4c:	f8c9 8004 	str.w	r8, [r9, #4]
      H_HEAP(hp) = heapp;
 800ad50:	f849 6b08 	str.w	r6, [r9], #8

      /* Releasing heap mutex/semaphore.*/
      H_UNLOCK(heapp);
 800ad54:	4638      	mov	r0, r7
 800ad56:	f7fe fd23 	bl	80097a0 <chMtxUnlock>

      /*lint -save -e9087 [11.3] Safe cast.*/
      return (void *)H_BLOCK(hp);
 800ad5a:	e030      	b.n	800adbe <chHeapAllocAligned+0xfe>
          H_NEXT(qp) = H_NEXT(hp);
 800ad5c:	680b      	ldr	r3, [r1, #0]
 800ad5e:	f8cc 3000 	str.w	r3, [ip]
    hp = H_NEXT(qp);
 800ad62:	4689      	mov	r9, r1
 800ad64:	e7f2      	b.n	800ad4c <chHeapAllocAligned+0x8c>
 800ad66:	468c      	mov	ip, r1
  while (H_NEXT(qp) != NULL) {
 800ad68:	f8dc 1000 	ldr.w	r1, [ip]
 800ad6c:	b1c1      	cbz	r1, 800ada0 <chHeapAllocAligned+0xe0>
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800ad6e:	f101 0e08 	add.w	lr, r1, #8
 800ad72:	eb0e 0304 	add.w	r3, lr, r4
 800ad76:	3b01      	subs	r3, #1
 800ad78:	4262      	negs	r2, r4
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	3b08      	subs	r3, #8
 800ad7e:	4699      	mov	r9, r3
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800ad80:	6848      	ldr	r0, [r1, #4]
 800ad82:	1c42      	adds	r2, r0, #1
 800ad84:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d9ec      	bls.n	800ad66 <chHeapAllocAligned+0xa6>
 800ad8c:	f103 0a08 	add.w	sl, r3, #8
 800ad90:	eba2 020a 	sub.w	r2, r2, sl
 800ad94:	10d2      	asrs	r2, r2, #3
 800ad96:	4692      	mov	sl, r2
 800ad98:	42aa      	cmp	r2, r5
 800ad9a:	d2af      	bcs.n	800acfc <chHeapAllocAligned+0x3c>
 800ad9c:	468c      	mov	ip, r1
 800ad9e:	e7e3      	b.n	800ad68 <chHeapAllocAligned+0xa8>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 800ada0:	4638      	mov	r0, r7
 800ada2:	f7fe fcfd 	bl	80097a0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 800ada6:	6833      	ldr	r3, [r6, #0]
 800ada8:	b163      	cbz	r3, 800adc4 <chHeapAllocAligned+0x104>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 800adaa:	2208      	movs	r2, #8
 800adac:	4621      	mov	r1, r4
 800adae:	00e8      	lsls	r0, r5, #3
 800adb0:	4798      	blx	r3
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 800adb2:	4681      	mov	r9, r0
 800adb4:	b148      	cbz	r0, 800adca <chHeapAllocAligned+0x10a>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
 800adb6:	f840 6c08 	str.w	r6, [r0, #-8]
      H_SIZE(hp) = size;
 800adba:	f840 8c04 	str.w	r8, [r0, #-4]
      /*lint -restore*/
    }
  }

  return NULL;
}
 800adbe:	4648      	mov	r0, r9
 800adc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return NULL;
 800adc4:	f04f 0900 	mov.w	r9, #0
 800adc8:	e7f9      	b.n	800adbe <chHeapAllocAligned+0xfe>
 800adca:	f04f 0900 	mov.w	r9, #0
 800adce:	e7f6      	b.n	800adbe <chHeapAllocAligned+0xfe>
 800add0:	080154c8 	.word	0x080154c8
 800add4:	200022a4 	.word	0x200022a4
 800add8:	f3af 8000 	nop.w
 800addc:	f3af 8000 	nop.w

0800ade0 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 800ade0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 800ade4:	4607      	mov	r7, r0
 800ade6:	b110      	cbz	r0, 800adee <chHeapFree+0xe>
 800ade8:	f010 0f07 	tst.w	r0, #7
 800adec:	d002      	beq.n	800adf4 <chHeapFree+0x14>
 800adee:	4829      	ldr	r0, [pc, #164]	; (800ae94 <chHeapFree+0xb4>)
 800adf0:	f7fc fc3e 	bl	8007670 <chSysHalt>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
 800adf4:	f1a7 0508 	sub.w	r5, r7, #8
  /*lint -restore*/
  heapp = H_HEAP(hp);
 800adf8:	f857 2c08 	ldr.w	r2, [r7, #-8]
  qp = &heapp->header;
 800adfc:	1d16      	adds	r6, r2, #4

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800adfe:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800ae02:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800ae04:	08db      	lsrs	r3, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800ae06:	f847 3c04 	str.w	r3, [r7, #-4]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 800ae0a:	f102 080c 	add.w	r8, r2, #12
 800ae0e:	4640      	mov	r0, r8
 800ae10:	f7fe fc56 	bl	80096c0 <chMtxLock>
  qp = &heapp->header;
 800ae14:	4634      	mov	r4, r6
 800ae16:	e008      	b.n	800ae2a <chHeapFree+0x4a>

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 800ae18:	42b4      	cmp	r4, r6
 800ae1a:	d001      	beq.n	800ae20 <chHeapFree+0x40>
 800ae1c:	42ac      	cmp	r4, r5
 800ae1e:	d203      	bcs.n	800ae28 <chHeapFree+0x48>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800ae20:	6823      	ldr	r3, [r4, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 800ae22:	b173      	cbz	r3, 800ae42 <chHeapFree+0x62>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800ae24:	42ab      	cmp	r3, r5
 800ae26:	d80c      	bhi.n	800ae42 <chHeapFree+0x62>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 800ae28:	6824      	ldr	r4, [r4, #0]
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 800ae2a:	42ac      	cmp	r4, r5
 800ae2c:	d8f4      	bhi.n	800ae18 <chHeapFree+0x38>
 800ae2e:	6863      	ldr	r3, [r4, #4]
 800ae30:	3301      	adds	r3, #1
 800ae32:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800ae36:	42ab      	cmp	r3, r5
 800ae38:	d9ee      	bls.n	800ae18 <chHeapFree+0x38>
 800ae3a:	4816      	ldr	r0, [pc, #88]	; (800ae94 <chHeapFree+0xb4>)
 800ae3c:	f7fc fc18 	bl	8007670 <chSysHalt>
 800ae40:	e7ea      	b.n	800ae18 <chHeapFree+0x38>
      H_NEXT(hp) = H_NEXT(qp);
 800ae42:	f847 3c08 	str.w	r3, [r7, #-8]
      H_NEXT(qp) = hp;
 800ae46:	6025      	str	r5, [r4, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800ae48:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ae4c:	1c53      	adds	r3, r2, #1
 800ae4e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800ae52:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800ae56:	428b      	cmp	r3, r1
 800ae58:	d00a      	beq.n	800ae70 <chHeapFree+0x90>
      if ((H_LIMIT(qp) == hp)) {
 800ae5a:	6862      	ldr	r2, [r4, #4]
 800ae5c:	1c53      	adds	r3, r2, #1
 800ae5e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800ae62:	42ab      	cmp	r3, r5
 800ae64:	d00d      	beq.n	800ae82 <chHeapFree+0xa2>
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 800ae66:	4640      	mov	r0, r8
 800ae68:	f7fe fc9a 	bl	80097a0 <chMtxUnlock>

  return;
}
 800ae6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 800ae70:	684b      	ldr	r3, [r1, #4]
 800ae72:	441a      	add	r2, r3
 800ae74:	3201      	adds	r2, #1
 800ae76:	f847 2c04 	str.w	r2, [r7, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800ae7a:	680b      	ldr	r3, [r1, #0]
 800ae7c:	f847 3c08 	str.w	r3, [r7, #-8]
 800ae80:	e7eb      	b.n	800ae5a <chHeapFree+0x7a>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 800ae82:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800ae86:	441a      	add	r2, r3
 800ae88:	3201      	adds	r2, #1
 800ae8a:	6062      	str	r2, [r4, #4]
        H_NEXT(qp) = H_NEXT(hp);
 800ae8c:	f857 3c08 	ldr.w	r3, [r7, #-8]
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	e7e8      	b.n	800ae66 <chHeapFree+0x86>
 800ae94:	080154dc 	.word	0x080154dc
 800ae98:	f3af 8000 	nop.w
 800ae9c:	f3af 8000 	nop.w

0800aea0 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 800aea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea2:	460f      	mov	r7, r1
 800aea4:	4616      	mov	r6, r2
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
 800aea6:	4604      	mov	r4, r0
 800aea8:	b188      	cbz	r0, 800aece <chHeapStatus+0x2e>
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 800aeaa:	f104 050c 	add.w	r5, r4, #12
 800aeae:	4628      	mov	r0, r5
 800aeb0:	f7fe fc06 	bl	80096c0 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
 800aeb4:	1d20      	adds	r0, r4, #4
  lpages = 0U;
 800aeb6:	2100      	movs	r1, #0
  tpages = 0U;
 800aeb8:	460a      	mov	r2, r1
  n = 0U;
 800aeba:	460c      	mov	r4, r1
  while (H_NEXT(qp) != NULL) {
 800aebc:	6800      	ldr	r0, [r0, #0]
 800aebe:	b140      	cbz	r0, 800aed2 <chHeapStatus+0x32>
    size_t pages = H_PAGES(H_NEXT(qp));
 800aec0:	6843      	ldr	r3, [r0, #4]

    /* Updating counters.*/
    n++;
 800aec2:	3401      	adds	r4, #1
    tpages += pages;
 800aec4:	441a      	add	r2, r3
    if (pages > lpages) {
 800aec6:	4299      	cmp	r1, r3
 800aec8:	d2f8      	bcs.n	800aebc <chHeapStatus+0x1c>
      lpages = pages;
 800aeca:	4619      	mov	r1, r3
 800aecc:	e7f6      	b.n	800aebc <chHeapStatus+0x1c>
    heapp = &default_heap;
 800aece:	4c06      	ldr	r4, [pc, #24]	; (800aee8 <chHeapStatus+0x48>)
 800aed0:	e7eb      	b.n	800aeaa <chHeapStatus+0xa>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 800aed2:	b10f      	cbz	r7, 800aed8 <chHeapStatus+0x38>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800aed4:	00d2      	lsls	r2, r2, #3
 800aed6:	603a      	str	r2, [r7, #0]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 800aed8:	b10e      	cbz	r6, 800aede <chHeapStatus+0x3e>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 800aeda:	00c9      	lsls	r1, r1, #3
 800aedc:	6031      	str	r1, [r6, #0]
  }
  H_UNLOCK(heapp);
 800aede:	4628      	mov	r0, r5
 800aee0:	f7fe fc5e 	bl	80097a0 <chMtxUnlock>

  return n;
}
 800aee4:	4620      	mov	r0, r4
 800aee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aee8:	200022a4 	.word	0x200022a4
 800aeec:	00000000 	.word	0x00000000

0800aef0 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	460d      	mov	r5, r1
 800aef4:	4616      	mov	r6, r2
 800aef6:	461f      	mov	r7, r3

  chDbgCheck((mp != NULL) &&
 800aef8:	4604      	mov	r4, r0
 800aefa:	b138      	cbz	r0, 800af0c <chPoolObjectInitAligned+0x1c>
 800aefc:	2903      	cmp	r1, #3
 800aefe:	d905      	bls.n	800af0c <chPoolObjectInitAligned+0x1c>
 800af00:	2a03      	cmp	r2, #3
 800af02:	d903      	bls.n	800af0c <chPoolObjectInitAligned+0x1c>
 800af04:	b112      	cbz	r2, 800af0c <chPoolObjectInitAligned+0x1c>
 800af06:	1e53      	subs	r3, r2, #1
 800af08:	4213      	tst	r3, r2
 800af0a:	d002      	beq.n	800af12 <chPoolObjectInitAligned+0x22>
 800af0c:	4804      	ldr	r0, [pc, #16]	; (800af20 <chPoolObjectInitAligned+0x30>)
 800af0e:	f7fc fbaf 	bl	8007670 <chSysHalt>
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 800af12:	2300      	movs	r3, #0
 800af14:	6023      	str	r3, [r4, #0]
  mp->object_size = size;
 800af16:	6065      	str	r5, [r4, #4]
  mp->align = align;
 800af18:	60a6      	str	r6, [r4, #8]
  mp->provider = provider;
 800af1a:	60e7      	str	r7, [r4, #12]
}
 800af1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af1e:	bf00      	nop
 800af20:	080154e8 	.word	0x080154e8
 800af24:	f3af 8000 	nop.w
 800af28:	f3af 8000 	nop.w
 800af2c:	f3af 8000 	nop.w

0800af30 <chPoolAllocI>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @iclass
 */
void *chPoolAllocI(memory_pool_t *mp) {
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	4604      	mov	r4, r0
  void *objp;

  chDbgCheckClassI();
 800af34:	f7fc fdcc 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck(mp != NULL);
 800af38:	b12c      	cbz	r4, 800af46 <chPoolAllocI+0x16>

  objp = mp->next;
 800af3a:	6825      	ldr	r5, [r4, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 800af3c:	b13d      	cbz	r5, 800af4e <chPoolAllocI+0x1e>
    mp->next = mp->next->next;
 800af3e:	682b      	ldr	r3, [r5, #0]
 800af40:	6023      	str	r3, [r4, #0]
                "returned object not aligned");
  }
  /*lint -restore*/

  return objp;
}
 800af42:	4628      	mov	r0, r5
 800af44:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(mp != NULL);
 800af46:	4809      	ldr	r0, [pc, #36]	; (800af6c <chPoolAllocI+0x3c>)
 800af48:	f7fc fb92 	bl	8007670 <chSysHalt>
 800af4c:	e7f5      	b.n	800af3a <chPoolAllocI+0xa>
  else if (mp->provider != NULL) {
 800af4e:	68e3      	ldr	r3, [r4, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d0f6      	beq.n	800af42 <chPoolAllocI+0x12>
    objp = mp->provider(mp->object_size, mp->align);
 800af54:	68a1      	ldr	r1, [r4, #8]
 800af56:	6860      	ldr	r0, [r4, #4]
 800af58:	4798      	blx	r3
 800af5a:	4605      	mov	r5, r0
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 800af5c:	68a3      	ldr	r3, [r4, #8]
 800af5e:	3b01      	subs	r3, #1
 800af60:	4218      	tst	r0, r3
 800af62:	d0ee      	beq.n	800af42 <chPoolAllocI+0x12>
 800af64:	4801      	ldr	r0, [pc, #4]	; (800af6c <chPoolAllocI+0x3c>)
 800af66:	f7fc fb83 	bl	8007670 <chSysHalt>
  return objp;
 800af6a:	e7ea      	b.n	800af42 <chPoolAllocI+0x12>
 800af6c:	08015500 	.word	0x08015500

0800af70 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 800af70:	b510      	push	{r4, lr}
 800af72:	4604      	mov	r4, r0
 800af74:	2320      	movs	r3, #32
 800af76:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800af7a:	f7fe f809 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800af7e:	f7fc fd07 	bl	8007990 <_dbg_check_lock>
  void *objp;

  chSysLock();
  objp = chPoolAllocI(mp);
 800af82:	4620      	mov	r0, r4
 800af84:	f7ff ffd4 	bl	800af30 <chPoolAllocI>
 800af88:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800af8a:	f7fc fd19 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800af8e:	f7fe f807 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800af92:	4b09      	ldr	r3, [pc, #36]	; (800afb8 <chPoolAlloc+0x48>)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	429a      	cmp	r2, r3
 800af98:	d004      	beq.n	800afa4 <chPoolAlloc+0x34>
 800af9a:	699b      	ldr	r3, [r3, #24]
 800af9c:	6899      	ldr	r1, [r3, #8]
 800af9e:	6893      	ldr	r3, [r2, #8]
 800afa0:	4299      	cmp	r1, r3
 800afa2:	d304      	bcc.n	800afae <chPoolAlloc+0x3e>
 800afa4:	2300      	movs	r3, #0
 800afa6:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return objp;
}
 800afaa:	4620      	mov	r0, r4
 800afac:	bd10      	pop	{r4, pc}
 800afae:	4803      	ldr	r0, [pc, #12]	; (800afbc <chPoolAlloc+0x4c>)
 800afb0:	f7fc fb5e 	bl	8007670 <chSysHalt>
 800afb4:	e7f6      	b.n	800afa4 <chPoolAlloc+0x34>
 800afb6:	bf00      	nop
 800afb8:	20004f68 	.word	0x20004f68
 800afbc:	08015510 	.word	0x08015510

0800afc0 <chPoolFreeI>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4604      	mov	r4, r0
 800afc4:	460d      	mov	r5, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
 800afc6:	f7fc fd83 	bl	8007ad0 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) &&
 800afca:	b124      	cbz	r4, 800afd6 <chPoolFreeI+0x16>
 800afcc:	b11d      	cbz	r5, 800afd6 <chPoolFreeI+0x16>
 800afce:	68a3      	ldr	r3, [r4, #8]
 800afd0:	3b01      	subs	r3, #1
 800afd2:	421d      	tst	r5, r3
 800afd4:	d002      	beq.n	800afdc <chPoolFreeI+0x1c>
 800afd6:	4803      	ldr	r0, [pc, #12]	; (800afe4 <chPoolFreeI+0x24>)
 800afd8:	f7fc fb4a 	bl	8007670 <chSysHalt>
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	602b      	str	r3, [r5, #0]
  mp->next = php;
 800afe0:	6025      	str	r5, [r4, #0]
}
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	0801551c 	.word	0x0801551c
 800afe8:	f3af 8000 	nop.w
 800afec:	f3af 8000 	nop.w

0800aff0 <chPoolFree>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chPoolFree(memory_pool_t *mp, void *objp) {
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	4604      	mov	r4, r0
 800aff4:	460d      	mov	r5, r1
 800aff6:	2320      	movs	r3, #32
 800aff8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800affc:	f7fd ffc8 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800b000:	f7fc fcc6 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chPoolFreeI(mp, objp);
 800b004:	4629      	mov	r1, r5
 800b006:	4620      	mov	r0, r4
 800b008:	f7ff ffda 	bl	800afc0 <chPoolFreeI>
  _dbg_check_unlock();
 800b00c:	f7fc fcd8 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800b010:	f7fd ffc6 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800b014:	4b08      	ldr	r3, [pc, #32]	; (800b038 <chPoolFree+0x48>)
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d004      	beq.n	800b026 <chPoolFree+0x36>
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	6899      	ldr	r1, [r3, #8]
 800b020:	6893      	ldr	r3, [r2, #8]
 800b022:	4299      	cmp	r1, r3
 800b024:	d303      	bcc.n	800b02e <chPoolFree+0x3e>
 800b026:	2300      	movs	r3, #0
 800b028:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 800b02c:	bd38      	pop	{r3, r4, r5, pc}
 800b02e:	4803      	ldr	r0, [pc, #12]	; (800b03c <chPoolFree+0x4c>)
 800b030:	f7fc fb1e 	bl	8007670 <chSysHalt>
 800b034:	e7f7      	b.n	800b026 <chPoolFree+0x36>
 800b036:	bf00      	nop
 800b038:	20004f68 	.word	0x20004f68
 800b03c:	08015510 	.word	0x08015510

0800b040 <chPoolLoadArray>:
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	460d      	mov	r5, r1
 800b044:	4614      	mov	r4, r2
  chDbgCheck((mp != NULL) && (n != 0U));
 800b046:	4606      	mov	r6, r0
 800b048:	b100      	cbz	r0, 800b04c <chPoolLoadArray+0xc>
 800b04a:	b952      	cbnz	r2, 800b062 <chPoolLoadArray+0x22>
 800b04c:	4806      	ldr	r0, [pc, #24]	; (800b068 <chPoolLoadArray+0x28>)
 800b04e:	f7fc fb0f 	bl	8007670 <chSysHalt>
 800b052:	e006      	b.n	800b062 <chPoolLoadArray+0x22>
 *
 * @api
 */
static inline void chPoolAdd(memory_pool_t *mp, void *objp) {

  chPoolFree(mp, objp);
 800b054:	4629      	mov	r1, r5
 800b056:	4630      	mov	r0, r6
 800b058:	f7ff ffca 	bl	800aff0 <chPoolFree>
    p = (void *)(((uint8_t *)p) + mp->object_size);
 800b05c:	6873      	ldr	r3, [r6, #4]
 800b05e:	441d      	add	r5, r3
    n--;
 800b060:	3c01      	subs	r4, #1
  while (n != 0U) {
 800b062:	2c00      	cmp	r4, #0
 800b064:	d1f6      	bne.n	800b054 <chPoolLoadArray+0x14>
}
 800b066:	bd70      	pop	{r4, r5, r6, pc}
 800b068:	08015528 	.word	0x08015528
 800b06c:	f3af 8000 	nop.w

0800b070 <chGuardedPoolObjectInitAligned>:
 *
 * @init
 */
void chGuardedPoolObjectInitAligned(guarded_memory_pool_t *gmp,
                                    size_t size,
                                    unsigned align) {
 800b070:	b510      	push	{r4, lr}
 800b072:	4604      	mov	r4, r0

  chPoolObjectInitAligned(&gmp->pool, size, align, NULL);
 800b074:	2300      	movs	r3, #0
 800b076:	300c      	adds	r0, #12
 800b078:	f7ff ff3a 	bl	800aef0 <chPoolObjectInitAligned>
  chSemObjectInit(&gmp->sem, (cnt_t)0);
 800b07c:	2100      	movs	r1, #0
 800b07e:	4620      	mov	r0, r4
 800b080:	f7fe f846 	bl	8009110 <chSemObjectInit>
}
 800b084:	bd10      	pop	{r4, pc}
 800b086:	bf00      	nop
 800b088:	f3af 8000 	nop.w
 800b08c:	f3af 8000 	nop.w

0800b090 <chGuardedPoolAllocTimeoutS>:
 * @retval NULL         if the operation timed out.
 *
 * @sclass
 */
void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
                                 sysinterval_t timeout) {
 800b090:	b510      	push	{r4, lr}
 800b092:	4604      	mov	r4, r0
  msg_t msg;

  msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 800b094:	f7fe f904 	bl	80092a0 <chSemWaitTimeoutS>
  if (msg != MSG_OK) {
 800b098:	b920      	cbnz	r0, 800b0a4 <chGuardedPoolAllocTimeoutS+0x14>
    return NULL;
  }

  return chPoolAllocI(&gmp->pool);
 800b09a:	f104 000c 	add.w	r0, r4, #12
 800b09e:	f7ff ff47 	bl	800af30 <chPoolAllocI>
}
 800b0a2:	bd10      	pop	{r4, pc}
    return NULL;
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	e7fc      	b.n	800b0a2 <chGuardedPoolAllocTimeoutS+0x12>
 800b0a8:	f3af 8000 	nop.w
 800b0ac:	f3af 8000 	nop.w

0800b0b0 <chGuardedPoolAllocTimeout>:
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
                                sysinterval_t timeout) {
 800b0b0:	b5d0      	push	{r4, r6, r7, lr}
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	4616      	mov	r6, r2
 800b0b6:	461f      	mov	r7, r3
 800b0b8:	2320      	movs	r3, #32
 800b0ba:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800b0be:	f7fd ff67 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800b0c2:	f7fc fc65 	bl	8007990 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
 800b0c6:	4632      	mov	r2, r6
 800b0c8:	463b      	mov	r3, r7
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f7ff ffe0 	bl	800b090 <chGuardedPoolAllocTimeoutS>
 800b0d0:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800b0d2:	f7fc fc75 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800b0d6:	f7fd ff63 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800b0da:	4b09      	ldr	r3, [pc, #36]	; (800b100 <chGuardedPoolAllocTimeout+0x50>)
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d004      	beq.n	800b0ec <chGuardedPoolAllocTimeout+0x3c>
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	6899      	ldr	r1, [r3, #8]
 800b0e6:	6893      	ldr	r3, [r2, #8]
 800b0e8:	4299      	cmp	r1, r3
 800b0ea:	d304      	bcc.n	800b0f6 <chGuardedPoolAllocTimeout+0x46>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	bdd0      	pop	{r4, r6, r7, pc}
 800b0f6:	4803      	ldr	r0, [pc, #12]	; (800b104 <chGuardedPoolAllocTimeout+0x54>)
 800b0f8:	f7fc faba 	bl	8007670 <chSysHalt>
 800b0fc:	e7f6      	b.n	800b0ec <chGuardedPoolAllocTimeout+0x3c>
 800b0fe:	bf00      	nop
 800b100:	20004f68 	.word	0x20004f68
 800b104:	08015510 	.word	0x08015510
 800b108:	f3af 8000 	nop.w
 800b10c:	f3af 8000 	nop.w

0800b110 <chGuardedPoolFree>:
 * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	4604      	mov	r4, r0
 800b114:	460d      	mov	r5, r1
 800b116:	2320      	movs	r3, #32
 800b118:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800b11c:	f7fd ff38 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800b120:	f7fc fc36 	bl	8007990 <_dbg_check_lock>
 *
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
 800b124:	4629      	mov	r1, r5
 800b126:	f104 000c 	add.w	r0, r4, #12
 800b12a:	f7ff ff49 	bl	800afc0 <chPoolFreeI>
  chSemSignalI(&gmp->sem);
 800b12e:	4620      	mov	r0, r4
 800b130:	f7fe f96e 	bl	8009410 <chSemSignalI>

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 800b134:	f7fd f964 	bl	8008400 <chSchRescheduleS>
  _dbg_check_unlock();
 800b138:	f7fc fc42 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800b13c:	f7fd ff30 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800b140:	4b08      	ldr	r3, [pc, #32]	; (800b164 <chGuardedPoolFree+0x54>)
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d004      	beq.n	800b152 <chGuardedPoolFree+0x42>
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	6899      	ldr	r1, [r3, #8]
 800b14c:	6893      	ldr	r3, [r2, #8]
 800b14e:	4299      	cmp	r1, r3
 800b150:	d303      	bcc.n	800b15a <chGuardedPoolFree+0x4a>
 800b152:	2300      	movs	r3, #0
 800b154:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 800b158:	bd38      	pop	{r3, r4, r5, pc}
 800b15a:	4803      	ldr	r0, [pc, #12]	; (800b168 <chGuardedPoolFree+0x58>)
 800b15c:	f7fc fa88 	bl	8007670 <chSysHalt>
 800b160:	e7f7      	b.n	800b152 <chGuardedPoolFree+0x42>
 800b162:	bf00      	nop
 800b164:	20004f68 	.word	0x20004f68
 800b168:	08015510 	.word	0x08015510
 800b16c:	f3af 8000 	nop.w

0800b170 <chGuardedPoolLoadArray>:
void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 800b170:	b570      	push	{r4, r5, r6, lr}
 800b172:	460d      	mov	r5, r1
 800b174:	4614      	mov	r4, r2
  chDbgCheck((gmp != NULL) && (n != 0U));
 800b176:	4606      	mov	r6, r0
 800b178:	b100      	cbz	r0, 800b17c <chGuardedPoolLoadArray+0xc>
 800b17a:	b952      	cbnz	r2, 800b192 <chGuardedPoolLoadArray+0x22>
 800b17c:	4806      	ldr	r0, [pc, #24]	; (800b198 <chGuardedPoolLoadArray+0x28>)
 800b17e:	f7fc fa77 	bl	8007670 <chSysHalt>
 800b182:	e006      	b.n	800b192 <chGuardedPoolLoadArray+0x22>
 *
 * @api
 */
static inline void chGuardedPoolAdd(guarded_memory_pool_t *gmp, void *objp) {

  chGuardedPoolFree(gmp, objp);
 800b184:	4629      	mov	r1, r5
 800b186:	4630      	mov	r0, r6
 800b188:	f7ff ffc2 	bl	800b110 <chGuardedPoolFree>
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800b18c:	6933      	ldr	r3, [r6, #16]
 800b18e:	441d      	add	r5, r3
    n--;
 800b190:	3c01      	subs	r4, #1
  while (n != 0U) {
 800b192:	2c00      	cmp	r4, #0
 800b194:	d1f6      	bne.n	800b184 <chGuardedPoolLoadArray+0x14>
}
 800b196:	bd70      	pop	{r4, r5, r6, pc}
 800b198:	08015538 	.word	0x08015538
 800b19c:	00000000 	.word	0x00000000

0800b1a0 <pipe_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t pipe_write(pipe_t *pp, const uint8_t *bp, size_t n) {
 800b1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	4688      	mov	r8, r1
 800b1a8:	4691      	mov	r9, r2
  size_t s1, s2;

  PC_LOCK(pp);
 800b1aa:	f100 0720 	add.w	r7, r0, #32
 800b1ae:	4638      	mov	r0, r7
 800b1b0:	f7fe fa86 	bl	80096c0 <chMtxLock>
 */
static inline size_t chPipeGetSize(const pipe_t *pp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(pp->top - pp->buffer);
 800b1b4:	686e      	ldr	r6, [r5, #4]
 800b1b6:	682c      	ldr	r4, [r5, #0]
 800b1b8:	1b34      	subs	r4, r6, r4
 *
 * @api
 */
static inline size_t chPipeGetUsedCount(const pipe_t *pp) {

  return pp->cnt;
 800b1ba:	692b      	ldr	r3, [r5, #16]
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 800b1bc:	1ae4      	subs	r4, r4, r3

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > chPipeGetFreeCount(pp)) {
 800b1be:	45a1      	cmp	r9, r4
 800b1c0:	d800      	bhi.n	800b1c4 <pipe_write+0x24>
 800b1c2:	464c      	mov	r4, r9
    n = chPipeGetFreeCount(pp);
  }
  pp->cnt += n;
 800b1c4:	4423      	add	r3, r4
 800b1c6:	612b      	str	r3, [r5, #16]

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(pp->top - pp->wrptr);
 800b1c8:	68a8      	ldr	r0, [r5, #8]
 800b1ca:	1a36      	subs	r6, r6, r0
  /*lint -restore*/

  if (n < s1) {
 800b1cc:	42b4      	cmp	r4, r6
 800b1ce:	d30d      	bcc.n	800b1ec <pipe_write+0x4c>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
    pp->wrptr += n;
  }
  else if (n > s1) {
 800b1d0:	42b4      	cmp	r4, r6
 800b1d2:	d813      	bhi.n	800b1fc <pipe_write+0x5c>
    s2 = n - s1;
    memcpy((void *)pp->buffer, (const void *)bp, s2);
    pp->wrptr = pp->buffer + s2;
  }
  else { /* n == s1 */
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	4641      	mov	r1, r8
 800b1d8:	f008 fb0a 	bl	80137f0 <memcpy>
    pp->wrptr = pp->buffer;
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	60ab      	str	r3, [r5, #8]
  }

  PC_UNLOCK(pp);
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	f7fe fadd 	bl	80097a0 <chMtxUnlock>

  return n;
}
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800b1ec:	4622      	mov	r2, r4
 800b1ee:	4641      	mov	r1, r8
 800b1f0:	f008 fafe 	bl	80137f0 <memcpy>
    pp->wrptr += n;
 800b1f4:	68ab      	ldr	r3, [r5, #8]
 800b1f6:	4423      	add	r3, r4
 800b1f8:	60ab      	str	r3, [r5, #8]
 800b1fa:	e7f1      	b.n	800b1e0 <pipe_write+0x40>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 800b1fc:	4632      	mov	r2, r6
 800b1fe:	4641      	mov	r1, r8
 800b200:	f008 faf6 	bl	80137f0 <memcpy>
    s2 = n - s1;
 800b204:	eba4 0906 	sub.w	r9, r4, r6
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 800b208:	464a      	mov	r2, r9
 800b20a:	eb08 0106 	add.w	r1, r8, r6
 800b20e:	6828      	ldr	r0, [r5, #0]
 800b210:	f008 faee 	bl	80137f0 <memcpy>
    pp->wrptr = pp->buffer + s2;
 800b214:	682a      	ldr	r2, [r5, #0]
 800b216:	444a      	add	r2, r9
 800b218:	60aa      	str	r2, [r5, #8]
 800b21a:	e7e1      	b.n	800b1e0 <pipe_write+0x40>
 800b21c:	f3af 8000 	nop.w

0800b220 <pipe_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t pipe_read(pipe_t *pp, uint8_t *bp, size_t n) {
 800b220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b224:	4605      	mov	r5, r0
 800b226:	4688      	mov	r8, r1
 800b228:	4614      	mov	r4, r2
  size_t s1, s2;

  PC_LOCK(pp);
 800b22a:	f100 0720 	add.w	r7, r0, #32
 800b22e:	4638      	mov	r0, r7
 800b230:	f7fe fa46 	bl	80096c0 <chMtxLock>
  return pp->cnt;
 800b234:	692b      	ldr	r3, [r5, #16]

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > chPipeGetUsedCount(pp)) {
 800b236:	429c      	cmp	r4, r3
 800b238:	d900      	bls.n	800b23c <pipe_read+0x1c>
    n = chPipeGetUsedCount(pp);
 800b23a:	461c      	mov	r4, r3
  }
  pp->cnt -= n;
 800b23c:	1b1b      	subs	r3, r3, r4
 800b23e:	612b      	str	r3, [r5, #16]

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(pp->top - pp->rdptr);
 800b240:	686e      	ldr	r6, [r5, #4]
 800b242:	68e9      	ldr	r1, [r5, #12]
 800b244:	1a76      	subs	r6, r6, r1
  /*lint -restore*/

  if (n < s1) {
 800b246:	42b4      	cmp	r4, r6
 800b248:	d30d      	bcc.n	800b266 <pipe_read+0x46>
    memcpy((void *)bp, (void *)pp->rdptr, n);
    pp->rdptr += n;
  }
  else if (n > s1) {
 800b24a:	42b4      	cmp	r4, r6
 800b24c:	d813      	bhi.n	800b276 <pipe_read+0x56>
    s2 = n - s1;
    memcpy((void *)bp, (void *)pp->buffer, s2);
    pp->rdptr = pp->buffer + s2;
  }
  else { /* n == s1 */
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800b24e:	4622      	mov	r2, r4
 800b250:	4640      	mov	r0, r8
 800b252:	f008 facd 	bl	80137f0 <memcpy>
    pp->rdptr = pp->buffer;
 800b256:	682b      	ldr	r3, [r5, #0]
 800b258:	60eb      	str	r3, [r5, #12]
  }

  PC_UNLOCK(pp);
 800b25a:	4638      	mov	r0, r7
 800b25c:	f7fe faa0 	bl	80097a0 <chMtxUnlock>

  return n;
}
 800b260:	4620      	mov	r0, r4
 800b262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800b266:	4622      	mov	r2, r4
 800b268:	4640      	mov	r0, r8
 800b26a:	f008 fac1 	bl	80137f0 <memcpy>
    pp->rdptr += n;
 800b26e:	68eb      	ldr	r3, [r5, #12]
 800b270:	4423      	add	r3, r4
 800b272:	60eb      	str	r3, [r5, #12]
 800b274:	e7f1      	b.n	800b25a <pipe_read+0x3a>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800b276:	4632      	mov	r2, r6
 800b278:	4640      	mov	r0, r8
 800b27a:	f008 fab9 	bl	80137f0 <memcpy>
    s2 = n - s1;
 800b27e:	eba4 0906 	sub.w	r9, r4, r6
    memcpy((void *)bp, (void *)pp->buffer, s2);
 800b282:	464a      	mov	r2, r9
 800b284:	6829      	ldr	r1, [r5, #0]
 800b286:	eb08 0006 	add.w	r0, r8, r6
 800b28a:	f008 fab1 	bl	80137f0 <memcpy>
    pp->rdptr = pp->buffer + s2;
 800b28e:	682a      	ldr	r2, [r5, #0]
 800b290:	444a      	add	r2, r9
 800b292:	60ea      	str	r2, [r5, #12]
 800b294:	e7e1      	b.n	800b25a <pipe_read+0x3a>
 800b296:	bf00      	nop
 800b298:	f3af 8000 	nop.w
 800b29c:	f3af 8000 	nop.w

0800b2a0 <chPipeObjectInit>:
 * @param[in] buf       pointer to the pipe buffer as an array of @p uint8_t
 * @param[in] n         number of elements in the buffer array
 *
 * @init
 */
void chPipeObjectInit(pipe_t *pp, uint8_t *buf, size_t n) {
 800b2a0:	b570      	push	{r4, r5, r6, lr}
 800b2a2:	460d      	mov	r5, r1
 800b2a4:	4616      	mov	r6, r2

  chDbgCheck((pp != NULL) && (buf != NULL) && (n > (size_t)0));
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	b108      	cbz	r0, 800b2ae <chPipeObjectInit+0xe>
 800b2aa:	b101      	cbz	r1, 800b2ae <chPipeObjectInit+0xe>
 800b2ac:	b912      	cbnz	r2, 800b2b4 <chPipeObjectInit+0x14>
 800b2ae:	480d      	ldr	r0, [pc, #52]	; (800b2e4 <chPipeObjectInit+0x44>)
 800b2b0:	f7fc f9de 	bl	8007670 <chSysHalt>

  pp->buffer = buf;
 800b2b4:	6025      	str	r5, [r4, #0]
  pp->rdptr  = buf;
 800b2b6:	60e5      	str	r5, [r4, #12]
  pp->wrptr  = buf;
 800b2b8:	60a5      	str	r5, [r4, #8]
  pp->top    = &buf[n];
 800b2ba:	4435      	add	r5, r6
 800b2bc:	6065      	str	r5, [r4, #4]
  pp->cnt    = (size_t)0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	6123      	str	r3, [r4, #16]
  pp->reset  = false;
 800b2c2:	7523      	strb	r3, [r4, #20]
  pp->wtr    = NULL;
 800b2c4:	61a3      	str	r3, [r4, #24]
  pp->rtr    = NULL;
 800b2c6:	61e3      	str	r3, [r4, #28]
  PC_INIT(pp);
 800b2c8:	f104 0020 	add.w	r0, r4, #32
 800b2cc:	f7fe f968 	bl	80095a0 <chMtxObjectInit>
  PW_INIT(pp);
 800b2d0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800b2d4:	f7fe f964 	bl	80095a0 <chMtxObjectInit>
  PR_INIT(pp);
 800b2d8:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b2dc:	f7fe f960 	bl	80095a0 <chMtxObjectInit>
}
 800b2e0:	bd70      	pop	{r4, r5, r6, pc}
 800b2e2:	bf00      	nop
 800b2e4:	08015550 	.word	0x08015550
 800b2e8:	f3af 8000 	nop.w
 800b2ec:	f3af 8000 	nop.w

0800b2f0 <chPipeReset>:
 *
 * @param[in] pp        the pointer to an initialized @p pipe_t object
 *
 * @api
 */
void chPipeReset(pipe_t *pp) {
 800b2f0:	b538      	push	{r3, r4, r5, lr}

  chDbgCheck(pp != NULL);
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	b3a0      	cbz	r0, 800b360 <chPipeReset+0x70>

  PC_LOCK(pp);
 800b2f6:	f104 0520 	add.w	r5, r4, #32
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	f7fe f9e0 	bl	80096c0 <chMtxLock>

  pp->wrptr = pp->buffer;
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	60a3      	str	r3, [r4, #8]
  pp->rdptr = pp->buffer;
 800b304:	60e3      	str	r3, [r4, #12]
  pp->cnt   = (size_t)0;
 800b306:	2300      	movs	r3, #0
 800b308:	6123      	str	r3, [r4, #16]
  pp->reset = true;
 800b30a:	2301      	movs	r3, #1
 800b30c:	7523      	strb	r3, [r4, #20]
 800b30e:	2320      	movs	r3, #32
 800b310:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800b314:	f7fd fe3c 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800b318:	f7fc fb3a 	bl	8007990 <_dbg_check_lock>

  chSysLock();
  chThdResumeI(&pp->wtr, MSG_RESET);
 800b31c:	f06f 0101 	mvn.w	r1, #1
 800b320:	f104 0018 	add.w	r0, r4, #24
 800b324:	f7fd fcc4 	bl	8008cb0 <chThdResumeI>
  chThdResumeI(&pp->rtr, MSG_RESET);
 800b328:	f06f 0101 	mvn.w	r1, #1
 800b32c:	f104 001c 	add.w	r0, r4, #28
 800b330:	f7fd fcbe 	bl	8008cb0 <chThdResumeI>
  chSchRescheduleS();
 800b334:	f7fd f864 	bl	8008400 <chSchRescheduleS>
  _dbg_check_unlock();
 800b338:	f7fc fb42 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800b33c:	f7fd fe30 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800b340:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <chPipeReset+0x80>)
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	429a      	cmp	r2, r3
 800b346:	d004      	beq.n	800b352 <chPipeReset+0x62>
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	6899      	ldr	r1, [r3, #8]
 800b34c:	6893      	ldr	r3, [r2, #8]
 800b34e:	4299      	cmp	r1, r3
 800b350:	d30a      	bcc.n	800b368 <chPipeReset+0x78>
 800b352:	2300      	movs	r3, #0
 800b354:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  PC_UNLOCK(pp);
 800b358:	4628      	mov	r0, r5
 800b35a:	f7fe fa21 	bl	80097a0 <chMtxUnlock>
}
 800b35e:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(pp != NULL);
 800b360:	4804      	ldr	r0, [pc, #16]	; (800b374 <chPipeReset+0x84>)
 800b362:	f7fc f985 	bl	8007670 <chSysHalt>
 800b366:	e7c6      	b.n	800b2f6 <chPipeReset+0x6>
 800b368:	4803      	ldr	r0, [pc, #12]	; (800b378 <chPipeReset+0x88>)
 800b36a:	f7fc f981 	bl	8007670 <chSysHalt>
 800b36e:	e7f0      	b.n	800b352 <chPipeReset+0x62>
 800b370:	20004f68 	.word	0x20004f68
 800b374:	08015564 	.word	0x08015564
 800b378:	08015570 	.word	0x08015570
 800b37c:	f3af 8000 	nop.w

0800b380 <chPipeWriteTimeout>:
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
                          size_t n, sysinterval_t timeout) {
 800b380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b384:	4605      	mov	r5, r0
 800b386:	460e      	mov	r6, r1
  size_t max = n;

  chDbgCheck(n > 0U);
 800b388:	4617      	mov	r7, r2
 800b38a:	b122      	cbz	r2, 800b396 <chPipeWriteTimeout+0x16>

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 800b38c:	7d2b      	ldrb	r3, [r5, #20]
 800b38e:	b133      	cbz	r3, 800b39e <chPipeWriteTimeout+0x1e>
    return (size_t)0;
 800b390:	2000      	movs	r0, #0
  }

  PW_UNLOCK(pp);

  return max - n;
}
 800b392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck(n > 0U);
 800b396:	4822      	ldr	r0, [pc, #136]	; (800b420 <chPipeWriteTimeout+0xa0>)
 800b398:	f7fc f96a 	bl	8007670 <chSysHalt>
 800b39c:	e7f6      	b.n	800b38c <chPipeWriteTimeout+0xc>
  PW_LOCK(pp);
 800b39e:	f105 0830 	add.w	r8, r5, #48	; 0x30
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	f7fe f98c 	bl	80096c0 <chMtxLock>
  while (n > 0U) {
 800b3a8:	463c      	mov	r4, r7
 800b3aa:	e00a      	b.n	800b3c2 <chPipeWriteTimeout+0x42>
 800b3ac:	481d      	ldr	r0, [pc, #116]	; (800b424 <chPipeWriteTimeout+0xa4>)
 800b3ae:	f7fc f95f 	bl	8007670 <chSysHalt>
 800b3b2:	e029      	b.n	800b408 <chPipeWriteTimeout+0x88>
      n  -= done;
 800b3b4:	1a24      	subs	r4, r4, r0
      bp += done;
 800b3b6:	4406      	add	r6, r0
      chThdResume(&pp->rtr, MSG_OK);
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	f105 001c 	add.w	r0, r5, #28
 800b3be:	f7fd fca7 	bl	8008d10 <chThdResume>
  while (n > 0U) {
 800b3c2:	b33c      	cbz	r4, 800b414 <chPipeWriteTimeout+0x94>
    done = pipe_write(pp, bp, n);
 800b3c4:	4622      	mov	r2, r4
 800b3c6:	4631      	mov	r1, r6
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f7ff fee9 	bl	800b1a0 <pipe_write>
    if (done == (size_t)0) {
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d1f0      	bne.n	800b3b4 <chPipeWriteTimeout+0x34>
 800b3d2:	2320      	movs	r3, #32
 800b3d4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800b3d8:	f7fd fdda 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800b3dc:	f7fc fad8 	bl	8007990 <_dbg_check_lock>
      msg = chThdSuspendTimeoutS(&pp->wtr, timeout);
 800b3e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b3e4:	f105 0018 	add.w	r0, r5, #24
 800b3e8:	f7fd fc42 	bl	8008c70 <chThdSuspendTimeoutS>
 800b3ec:	4681      	mov	r9, r0
  _dbg_check_unlock();
 800b3ee:	f7fc fae7 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800b3f2:	f7fd fdd5 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800b3f6:	4b0c      	ldr	r3, [pc, #48]	; (800b428 <chPipeWriteTimeout+0xa8>)
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d004      	beq.n	800b408 <chPipeWriteTimeout+0x88>
 800b3fe:	699b      	ldr	r3, [r3, #24]
 800b400:	6899      	ldr	r1, [r3, #8]
 800b402:	6893      	ldr	r3, [r2, #8]
 800b404:	4299      	cmp	r1, r3
 800b406:	d3d1      	bcc.n	800b3ac <chPipeWriteTimeout+0x2c>
 800b408:	2300      	movs	r3, #0
 800b40a:	f383 8811 	msr	BASEPRI, r3
      if (msg != MSG_OK) {
 800b40e:	f1b9 0f00 	cmp.w	r9, #0
 800b412:	d0d6      	beq.n	800b3c2 <chPipeWriteTimeout+0x42>
  PW_UNLOCK(pp);
 800b414:	4640      	mov	r0, r8
 800b416:	f7fe f9c3 	bl	80097a0 <chMtxUnlock>
  return max - n;
 800b41a:	1b38      	subs	r0, r7, r4
 800b41c:	e7b9      	b.n	800b392 <chPipeWriteTimeout+0x12>
 800b41e:	bf00      	nop
 800b420:	0801557c 	.word	0x0801557c
 800b424:	08015570 	.word	0x08015570
 800b428:	20004f68 	.word	0x20004f68
 800b42c:	f3af 8000 	nop.w

0800b430 <chPipeReadTimeout>:
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
                         size_t n, sysinterval_t timeout) {
 800b430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b434:	4605      	mov	r5, r0
 800b436:	460e      	mov	r6, r1
  size_t max = n;

  chDbgCheck(n > 0U);
 800b438:	4617      	mov	r7, r2
 800b43a:	b122      	cbz	r2, 800b446 <chPipeReadTimeout+0x16>

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 800b43c:	7d2b      	ldrb	r3, [r5, #20]
 800b43e:	b133      	cbz	r3, 800b44e <chPipeReadTimeout+0x1e>
    return (size_t)0;
 800b440:	2000      	movs	r0, #0
  }

  PR_UNLOCK(pp);

  return max - n;
}
 800b442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck(n > 0U);
 800b446:	4822      	ldr	r0, [pc, #136]	; (800b4d0 <chPipeReadTimeout+0xa0>)
 800b448:	f7fc f912 	bl	8007670 <chSysHalt>
 800b44c:	e7f6      	b.n	800b43c <chPipeReadTimeout+0xc>
  PR_LOCK(pp);
 800b44e:	f105 0840 	add.w	r8, r5, #64	; 0x40
 800b452:	4640      	mov	r0, r8
 800b454:	f7fe f934 	bl	80096c0 <chMtxLock>
  while (n > 0U) {
 800b458:	463c      	mov	r4, r7
 800b45a:	e00a      	b.n	800b472 <chPipeReadTimeout+0x42>
 800b45c:	481d      	ldr	r0, [pc, #116]	; (800b4d4 <chPipeReadTimeout+0xa4>)
 800b45e:	f7fc f907 	bl	8007670 <chSysHalt>
 800b462:	e029      	b.n	800b4b8 <chPipeReadTimeout+0x88>
      n  -= done;
 800b464:	1a24      	subs	r4, r4, r0
      bp += done;
 800b466:	4406      	add	r6, r0
      chThdResume(&pp->wtr, MSG_OK);
 800b468:	2100      	movs	r1, #0
 800b46a:	f105 0018 	add.w	r0, r5, #24
 800b46e:	f7fd fc4f 	bl	8008d10 <chThdResume>
  while (n > 0U) {
 800b472:	b33c      	cbz	r4, 800b4c4 <chPipeReadTimeout+0x94>
    done = pipe_read(pp, bp, n);
 800b474:	4622      	mov	r2, r4
 800b476:	4631      	mov	r1, r6
 800b478:	4628      	mov	r0, r5
 800b47a:	f7ff fed1 	bl	800b220 <pipe_read>
    if (done == (size_t)0) {
 800b47e:	2800      	cmp	r0, #0
 800b480:	d1f0      	bne.n	800b464 <chPipeReadTimeout+0x34>
 800b482:	2320      	movs	r3, #32
 800b484:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800b488:	f7fd fd82 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800b48c:	f7fc fa80 	bl	8007990 <_dbg_check_lock>
      msg = chThdSuspendTimeoutS(&pp->rtr, timeout);
 800b490:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b494:	f105 001c 	add.w	r0, r5, #28
 800b498:	f7fd fbea 	bl	8008c70 <chThdSuspendTimeoutS>
 800b49c:	4681      	mov	r9, r0
  _dbg_check_unlock();
 800b49e:	f7fc fa8f 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800b4a2:	f7fd fd7d 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <chPipeReadTimeout+0xa8>)
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d004      	beq.n	800b4b8 <chPipeReadTimeout+0x88>
 800b4ae:	699b      	ldr	r3, [r3, #24]
 800b4b0:	6899      	ldr	r1, [r3, #8]
 800b4b2:	6893      	ldr	r3, [r2, #8]
 800b4b4:	4299      	cmp	r1, r3
 800b4b6:	d3d1      	bcc.n	800b45c <chPipeReadTimeout+0x2c>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f383 8811 	msr	BASEPRI, r3
      if (msg != MSG_OK) {
 800b4be:	f1b9 0f00 	cmp.w	r9, #0
 800b4c2:	d0d6      	beq.n	800b472 <chPipeReadTimeout+0x42>
  PR_UNLOCK(pp);
 800b4c4:	4640      	mov	r0, r8
 800b4c6:	f7fe f96b 	bl	80097a0 <chMtxUnlock>
  return max - n;
 800b4ca:	1b38      	subs	r0, r7, r4
 800b4cc:	e7b9      	b.n	800b442 <chPipeReadTimeout+0x12>
 800b4ce:	bf00      	nop
 800b4d0:	08015590 	.word	0x08015590
 800b4d4:	08015570 	.word	0x08015570
 800b4d8:	20004f68 	.word	0x20004f68
 800b4dc:	00000000 	.word	0x00000000

0800b4e0 <dyn_list_unlink>:
  return NULL;
}

static dyn_element_t *dyn_list_unlink(dyn_element_t *element,
                                      dyn_list_t *dlp) {
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800b4e0:	460a      	mov	r2, r1

  /* Scanning the list.*/
  while (prev->next != (dyn_element_t *)dlp) {
 800b4e2:	6813      	ldr	r3, [r2, #0]
 800b4e4:	428b      	cmp	r3, r1
 800b4e6:	d006      	beq.n	800b4f6 <dyn_list_unlink+0x16>
    if (prev->next == element) {
 800b4e8:	4283      	cmp	r3, r0
 800b4ea:	d001      	beq.n	800b4f0 <dyn_list_unlink+0x10>
      prev->next = element->next;
      return element;
    }

    /* Next element in the list.*/
    prev = prev->next;
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	e7f8      	b.n	800b4e2 <dyn_list_unlink+0x2>
      prev->next = element->next;
 800b4f0:	6803      	ldr	r3, [r0, #0]
 800b4f2:	6013      	str	r3, [r2, #0]
      return element;
 800b4f4:	4770      	bx	lr
  }

  return NULL;
 800b4f6:	2000      	movs	r0, #0
}
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	f3af 8000 	nop.w

0800b500 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 800b500:	b508      	push	{r3, lr}

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 800b502:	2200      	movs	r2, #0
 800b504:	f7ff fb4c 	bl	800aba0 <chCoreAllocAlignedWithOffsetI>
}
 800b508:	bd08      	pop	{r3, pc}
 800b50a:	bf00      	nop
 800b50c:	f3af 8000 	nop.w

0800b510 <dyn_list_find>:
static dyn_element_t *dyn_list_find(const char *name, dyn_list_t *dlp) {
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	4606      	mov	r6, r0
 800b514:	460d      	mov	r5, r1
  dyn_element_t *p = dlp->next;
 800b516:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 800b518:	42ac      	cmp	r4, r5
 800b51a:	d007      	beq.n	800b52c <dyn_list_find+0x1c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b51c:	2208      	movs	r2, #8
 800b51e:	4631      	mov	r1, r6
 800b520:	18a0      	adds	r0, r4, r2
 800b522:	f008 fd37 	bl	8013f94 <strncmp>
 800b526:	b110      	cbz	r0, 800b52e <dyn_list_find+0x1e>
    p = p->next;
 800b528:	6824      	ldr	r4, [r4, #0]
 800b52a:	e7f5      	b.n	800b518 <dyn_list_find+0x8>
  return NULL;
 800b52c:	2400      	movs	r4, #0
}
 800b52e:	4620      	mov	r0, r4
 800b530:	bd70      	pop	{r4, r5, r6, pc}
 800b532:	bf00      	nop
 800b534:	f3af 8000 	nop.w
 800b538:	f3af 8000 	nop.w
 800b53c:	f3af 8000 	nop.w

0800b540 <dyn_create_object_pool>:
#endif /* CH_FACTORY_REQUIRES_HEAP */

#if CH_FACTORY_REQUIRES_POOLS || defined(__DOXYGEN__)
static dyn_element_t *dyn_create_object_pool(const char *name,
                                             dyn_list_t *dlp,
                                             memory_pool_t *mp) {
 800b540:	b570      	push	{r4, r5, r6, lr}
 800b542:	460d      	mov	r5, r1
 800b544:	4614      	mov	r4, r2
  dyn_element_t *dep;

  chDbgCheck(name != NULL);
 800b546:	4606      	mov	r6, r0
 800b548:	b1a8      	cbz	r0, 800b576 <dyn_create_object_pool+0x36>

  /* Checking if an object object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
 800b54a:	4629      	mov	r1, r5
 800b54c:	4630      	mov	r0, r6
 800b54e:	f7ff ffdf 	bl	800b510 <dyn_list_find>
  if (dep != NULL) {
 800b552:	b9a0      	cbnz	r0, 800b57e <dyn_create_object_pool+0x3e>
    return NULL;
  }

  /* Allocating space for the new object.*/
  dep = (dyn_element_t *)chPoolAlloc(mp);
 800b554:	4620      	mov	r0, r4
 800b556:	f7ff fd0b 	bl	800af70 <chPoolAlloc>
  if (dep == NULL) {
 800b55a:	4604      	mov	r4, r0
 800b55c:	b148      	cbz	r0, 800b572 <dyn_create_object_pool+0x32>
  }

  /* Initializing object list element.*/
  /*lint -save -e668 [] Lint is confused by the above chDbgCheck() and
    incorrectly assumes that strncpy() could receive a NULL pointer.*/
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 800b55e:	2208      	movs	r2, #8
 800b560:	4631      	mov	r1, r6
 800b562:	4410      	add	r0, r2
 800b564:	f008 fd62 	bl	801402c <strncpy>
  /*lint -restore*/
  dep->refs = (ucnt_t)1;
 800b568:	2301      	movs	r3, #1
 800b56a:	6063      	str	r3, [r4, #4]
  dep->next = dlp->next;
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	6023      	str	r3, [r4, #0]

  /* Updating factory list.*/
  dlp->next = (dyn_element_t *)dep;
 800b570:	602c      	str	r4, [r5, #0]

  return dep;
}
 800b572:	4620      	mov	r0, r4
 800b574:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(name != NULL);
 800b576:	4803      	ldr	r0, [pc, #12]	; (800b584 <dyn_create_object_pool+0x44>)
 800b578:	f7fc f87a 	bl	8007670 <chSysHalt>
 800b57c:	e7e5      	b.n	800b54a <dyn_create_object_pool+0xa>
    return NULL;
 800b57e:	2400      	movs	r4, #0
 800b580:	e7f7      	b.n	800b572 <dyn_create_object_pool+0x32>
 800b582:	bf00      	nop
 800b584:	080155a4 	.word	0x080155a4
 800b588:	f3af 8000 	nop.w
 800b58c:	f3af 8000 	nop.w

0800b590 <dyn_find_object>:
    chPoolFree(mp, (void *)dep);
  }
}
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	460d      	mov	r5, r1
  dyn_element_t *dep;

  chDbgCheck(name != NULL);
 800b594:	4604      	mov	r4, r0
 800b596:	b150      	cbz	r0, 800b5ae <dyn_find_object+0x1e>

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
 800b598:	4629      	mov	r1, r5
 800b59a:	4620      	mov	r0, r4
 800b59c:	f7ff ffb8 	bl	800b510 <dyn_list_find>
  if (dep != NULL) {
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	b110      	cbz	r0, 800b5aa <dyn_find_object+0x1a>
    /* Increasing references counter.*/
    dep->refs++;
 800b5a4:	6842      	ldr	r2, [r0, #4]
 800b5a6:	3201      	adds	r2, #1
 800b5a8:	6042      	str	r2, [r0, #4]
  }

  return dep;
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(name != NULL);
 800b5ae:	4802      	ldr	r0, [pc, #8]	; (800b5b8 <dyn_find_object+0x28>)
 800b5b0:	f7fc f85e 	bl	8007670 <chSysHalt>
 800b5b4:	e7f0      	b.n	800b598 <dyn_find_object+0x8>
 800b5b6:	bf00      	nop
 800b5b8:	080155bc 	.word	0x080155bc
 800b5bc:	f3af 8000 	nop.w

0800b5c0 <dyn_release_object_pool>:
                                    memory_pool_t *mp) {
 800b5c0:	b570      	push	{r4, r5, r6, lr}
 800b5c2:	460e      	mov	r6, r1
 800b5c4:	4615      	mov	r5, r2
  chDbgCheck(dep != NULL);
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	b130      	cbz	r0, 800b5d8 <dyn_release_object_pool+0x18>
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");
 800b5ca:	6863      	ldr	r3, [r4, #4]
 800b5cc:	b143      	cbz	r3, 800b5e0 <dyn_release_object_pool+0x20>
  dep->refs--;
 800b5ce:	6863      	ldr	r3, [r4, #4]
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800b5d4:	b143      	cbz	r3, 800b5e8 <dyn_release_object_pool+0x28>
}
 800b5d6:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(dep != NULL);
 800b5d8:	4808      	ldr	r0, [pc, #32]	; (800b5fc <dyn_release_object_pool+0x3c>)
 800b5da:	f7fc f849 	bl	8007670 <chSysHalt>
 800b5de:	e7f4      	b.n	800b5ca <dyn_release_object_pool+0xa>
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");
 800b5e0:	4806      	ldr	r0, [pc, #24]	; (800b5fc <dyn_release_object_pool+0x3c>)
 800b5e2:	f7fc f845 	bl	8007670 <chSysHalt>
 800b5e6:	e7f2      	b.n	800b5ce <dyn_release_object_pool+0xe>
    dep = dyn_list_unlink(dep, dlp);
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f7ff ff78 	bl	800b4e0 <dyn_list_unlink>
    chPoolFree(mp, (void *)dep);
 800b5f0:	4601      	mov	r1, r0
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f7ff fcfc 	bl	800aff0 <chPoolFree>
}
 800b5f8:	e7ed      	b.n	800b5d6 <dyn_release_object_pool+0x16>
 800b5fa:	bf00      	nop
 800b5fc:	080155cc 	.word	0x080155cc

0800b600 <dyn_create_object_heap>:
                                             size_t size) {
 800b600:	b570      	push	{r4, r5, r6, lr}
 800b602:	460d      	mov	r5, r1
 800b604:	4614      	mov	r4, r2
  chDbgCheck(name != NULL);
 800b606:	4606      	mov	r6, r0
 800b608:	b1b0      	cbz	r0, 800b638 <dyn_create_object_heap+0x38>
  dep = dyn_list_find(name, dlp);
 800b60a:	4629      	mov	r1, r5
 800b60c:	4630      	mov	r0, r6
 800b60e:	f7ff ff7f 	bl	800b510 <dyn_list_find>
  if (dep != NULL) {
 800b612:	b9a8      	cbnz	r0, 800b640 <dyn_create_object_heap+0x40>
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 800b614:	2208      	movs	r2, #8
 800b616:	4621      	mov	r1, r4
 800b618:	f7ff fb52 	bl	800acc0 <chHeapAllocAligned>
  if (dep == NULL) {
 800b61c:	4604      	mov	r4, r0
 800b61e:	b148      	cbz	r0, 800b634 <dyn_create_object_heap+0x34>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 800b620:	2208      	movs	r2, #8
 800b622:	4631      	mov	r1, r6
 800b624:	4410      	add	r0, r2
 800b626:	f008 fd01 	bl	801402c <strncpy>
  dep->refs = (ucnt_t)1;
 800b62a:	2301      	movs	r3, #1
 800b62c:	6063      	str	r3, [r4, #4]
  dep->next = dlp->next;
 800b62e:	682b      	ldr	r3, [r5, #0]
 800b630:	6023      	str	r3, [r4, #0]
  dlp->next = dep;
 800b632:	602c      	str	r4, [r5, #0]
}
 800b634:	4620      	mov	r0, r4
 800b636:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(name != NULL);
 800b638:	4802      	ldr	r0, [pc, #8]	; (800b644 <dyn_create_object_heap+0x44>)
 800b63a:	f7fc f819 	bl	8007670 <chSysHalt>
 800b63e:	e7e4      	b.n	800b60a <dyn_create_object_heap+0xa>
    return NULL;
 800b640:	2400      	movs	r4, #0
 800b642:	e7f7      	b.n	800b634 <dyn_create_object_heap+0x34>
 800b644:	080155e4 	.word	0x080155e4
 800b648:	f3af 8000 	nop.w
 800b64c:	f3af 8000 	nop.w

0800b650 <dyn_release_object_heap>:
                                    dyn_list_t *dlp) {
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	460d      	mov	r5, r1
  chDbgCheck(dep != NULL);
 800b654:	4604      	mov	r4, r0
 800b656:	b130      	cbz	r0, 800b666 <dyn_release_object_heap+0x16>
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");
 800b658:	6863      	ldr	r3, [r4, #4]
 800b65a:	b143      	cbz	r3, 800b66e <dyn_release_object_heap+0x1e>
  dep->refs--;
 800b65c:	6863      	ldr	r3, [r4, #4]
 800b65e:	3b01      	subs	r3, #1
 800b660:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800b662:	b143      	cbz	r3, 800b676 <dyn_release_object_heap+0x26>
}
 800b664:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(dep != NULL);
 800b666:	4807      	ldr	r0, [pc, #28]	; (800b684 <dyn_release_object_heap+0x34>)
 800b668:	f7fc f802 	bl	8007670 <chSysHalt>
 800b66c:	e7f4      	b.n	800b658 <dyn_release_object_heap+0x8>
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");
 800b66e:	4805      	ldr	r0, [pc, #20]	; (800b684 <dyn_release_object_heap+0x34>)
 800b670:	f7fb fffe 	bl	8007670 <chSysHalt>
 800b674:	e7f2      	b.n	800b65c <dyn_release_object_heap+0xc>
    dep = dyn_list_unlink(dep, dlp);
 800b676:	4629      	mov	r1, r5
 800b678:	4620      	mov	r0, r4
 800b67a:	f7ff ff31 	bl	800b4e0 <dyn_list_unlink>
    chHeapFree((void *)dep);
 800b67e:	f7ff fbaf 	bl	800ade0 <chHeapFree>
}
 800b682:	e7ef      	b.n	800b664 <dyn_release_object_heap+0x14>
 800b684:	080155fc 	.word	0x080155fc
 800b688:	f3af 8000 	nop.w
 800b68c:	f3af 8000 	nop.w

0800b690 <_factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void _factory_init(void) {
 800b690:	b538      	push	{r3, r4, r5, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 800b692:	4c12      	ldr	r4, [pc, #72]	; (800b6dc <_factory_init+0x4c>)
 800b694:	4620      	mov	r0, r4
 800b696:	f7fd ff83 	bl	80095a0 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 800b69a:	f104 0310 	add.w	r3, r4, #16
 800b69e:	6123      	str	r3, [r4, #16]
  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 800b6a0:	4d0f      	ldr	r5, [pc, #60]	; (800b6e0 <_factory_init+0x50>)
 800b6a2:	462b      	mov	r3, r5
 800b6a4:	2204      	movs	r2, #4
 800b6a6:	2114      	movs	r1, #20
 800b6a8:	1860      	adds	r0, r4, r1
 800b6aa:	f7ff fc21 	bl	800aef0 <chPoolObjectInitAligned>
 800b6ae:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800b6b2:	6263      	str	r3, [r4, #36]	; 0x24
 800b6b4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800b6b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6ba:	462b      	mov	r3, r5
 800b6bc:	2204      	movs	r2, #4
 800b6be:	211c      	movs	r1, #28
 800b6c0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800b6c4:	f7ff fc14 	bl	800aef0 <chPoolObjectInitAligned>
 800b6c8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800b6cc:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b6ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b6d2:	6423      	str	r3, [r4, #64]	; 0x40
 800b6d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6d8:	6463      	str	r3, [r4, #68]	; 0x44
  dyn_list_init(&ch_factory.fifo_list);
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
#endif
}
 800b6da:	bd38      	pop	{r3, r4, r5, pc}
 800b6dc:	20005860 	.word	0x20005860
 800b6e0:	0800b501 	.word	0x0800b501
 800b6e4:	f3af 8000 	nop.w
 800b6e8:	f3af 8000 	nop.w
 800b6ec:	f3af 8000 	nop.w

0800b6f0 <chFactoryRegisterObject>:
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
                                             void *objp) {
 800b6f0:	b570      	push	{r4, r5, r6, lr}
 800b6f2:	4605      	mov	r5, r0
 800b6f4:	460e      	mov	r6, r1
  registered_object_t *rop;

  F_LOCK();
 800b6f6:	4c09      	ldr	r4, [pc, #36]	; (800b71c <chFactoryRegisterObject+0x2c>)
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f7fd ffe1 	bl	80096c0 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 800b6fe:	f104 0214 	add.w	r2, r4, #20
 800b702:	f104 0110 	add.w	r1, r4, #16
 800b706:	4628      	mov	r0, r5
 800b708:	f7ff ff1a 	bl	800b540 <dyn_create_object_pool>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 800b70c:	4604      	mov	r4, r0
 800b70e:	b100      	cbz	r0, 800b712 <chFactoryRegisterObject+0x22>
    /* Initializing registered object data.*/
    rop->objp = objp;
 800b710:	6106      	str	r6, [r0, #16]
  }

  F_UNLOCK();
 800b712:	4802      	ldr	r0, [pc, #8]	; (800b71c <chFactoryRegisterObject+0x2c>)
 800b714:	f7fe f844 	bl	80097a0 <chMtxUnlock>

  return rop;
}
 800b718:	4620      	mov	r0, r4
 800b71a:	bd70      	pop	{r4, r5, r6, pc}
 800b71c:	20005860 	.word	0x20005860

0800b720 <chFactoryFindObject>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4605      	mov	r5, r0
  registered_object_t *rop;

  F_LOCK();
 800b724:	4c07      	ldr	r4, [pc, #28]	; (800b744 <chFactoryFindObject+0x24>)
 800b726:	4620      	mov	r0, r4
 800b728:	f7fd ffca 	bl	80096c0 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 800b72c:	f104 0110 	add.w	r1, r4, #16
 800b730:	4628      	mov	r0, r5
 800b732:	f7ff ff2d 	bl	800b590 <dyn_find_object>
 800b736:	4605      	mov	r5, r0

  F_UNLOCK();
 800b738:	4620      	mov	r0, r4
 800b73a:	f7fe f831 	bl	80097a0 <chMtxUnlock>

  return rop;
}
 800b73e:	4628      	mov	r0, r5
 800b740:	bd38      	pop	{r3, r4, r5, pc}
 800b742:	bf00      	nop
 800b744:	20005860 	.word	0x20005860
 800b748:	f3af 8000 	nop.w
 800b74c:	f3af 8000 	nop.w

0800b750 <chFactoryFindObjectByPointer>:
 * @retval NULL         if a registered object with the specified pointer
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObjectByPointer(void *objp) {
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	4605      	mov	r5, r0
  registered_object_t *rop = (registered_object_t *)ch_factory.obj_list.next;
 800b754:	480c      	ldr	r0, [pc, #48]	; (800b788 <chFactoryFindObjectByPointer+0x38>)
 800b756:	6904      	ldr	r4, [r0, #16]

  F_LOCK();
 800b758:	f7fd ffb2 	bl	80096c0 <chMtxLock>

  while ((void *)rop != (void *)&ch_factory.obj_list) {
 800b75c:	4b0b      	ldr	r3, [pc, #44]	; (800b78c <chFactoryFindObjectByPointer+0x3c>)
 800b75e:	429c      	cmp	r4, r3
 800b760:	d00b      	beq.n	800b77a <chFactoryFindObjectByPointer+0x2a>
    if (rop->objp == objp) {
 800b762:	6923      	ldr	r3, [r4, #16]
 800b764:	42ab      	cmp	r3, r5
 800b766:	d001      	beq.n	800b76c <chFactoryFindObjectByPointer+0x1c>

      F_UNLOCK();

      return rop;
    }
    rop = (registered_object_t *)rop->element.next;
 800b768:	6824      	ldr	r4, [r4, #0]
 800b76a:	e7f7      	b.n	800b75c <chFactoryFindObjectByPointer+0xc>
      rop->element.refs++;
 800b76c:	6863      	ldr	r3, [r4, #4]
 800b76e:	3301      	adds	r3, #1
 800b770:	6063      	str	r3, [r4, #4]
      F_UNLOCK();
 800b772:	4805      	ldr	r0, [pc, #20]	; (800b788 <chFactoryFindObjectByPointer+0x38>)
 800b774:	f7fe f814 	bl	80097a0 <chMtxUnlock>
      return rop;
 800b778:	e004      	b.n	800b784 <chFactoryFindObjectByPointer+0x34>
  }

  F_UNLOCK();
 800b77a:	f1a3 0010 	sub.w	r0, r3, #16
 800b77e:	f7fe f80f 	bl	80097a0 <chMtxUnlock>

  return NULL;
 800b782:	2400      	movs	r4, #0
}
 800b784:	4620      	mov	r0, r4
 800b786:	bd38      	pop	{r3, r4, r5, pc}
 800b788:	20005860 	.word	0x20005860
 800b78c:	20005870 	.word	0x20005870

0800b790 <chFactoryReleaseObject>:
 *
 * @param[in] rop       registered object reference
 *
 * @api
 */
void chFactoryReleaseObject(registered_object_t *rop){
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	4605      	mov	r5, r0

  F_LOCK();
 800b794:	4c07      	ldr	r4, [pc, #28]	; (800b7b4 <chFactoryReleaseObject+0x24>)
 800b796:	4620      	mov	r0, r4
 800b798:	f7fd ff92 	bl	80096c0 <chMtxLock>

  dyn_release_object_pool(&rop->element,
 800b79c:	f104 0214 	add.w	r2, r4, #20
 800b7a0:	f104 0110 	add.w	r1, r4, #16
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	f7ff ff0b 	bl	800b5c0 <dyn_release_object_pool>
                          &ch_factory.obj_list,
                          &ch_factory.obj_pool);

  F_UNLOCK();
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f7fd fff8 	bl	80097a0 <chMtxUnlock>
}
 800b7b0:	bd38      	pop	{r3, r4, r5, pc}
 800b7b2:	bf00      	nop
 800b7b4:	20005860 	.word	0x20005860
 800b7b8:	f3af 8000 	nop.w
 800b7bc:	f3af 8000 	nop.w

0800b7c0 <chFactoryCreateBuffer>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 800b7c0:	b570      	push	{r4, r5, r6, lr}
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	460d      	mov	r5, r1
  dyn_buffer_t *dbp;

  F_LOCK();
 800b7c6:	4c0b      	ldr	r4, [pc, #44]	; (800b7f4 <chFactoryCreateBuffer+0x34>)
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f7fd ff79 	bl	80096c0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800b7ce:	462a      	mov	r2, r5
 800b7d0:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	f7ff ff13 	bl	800b600 <dyn_create_object_heap>
                                               &ch_factory.buf_list,
                                               size);
  if (dbp != NULL) {
 800b7da:	4604      	mov	r4, r0
 800b7dc:	b120      	cbz	r0, 800b7e8 <chFactoryCreateBuffer+0x28>
    /* Initializing buffer object data.*/
    memset((void *)dbp->buffer, 0, size);
 800b7de:	462a      	mov	r2, r5
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	3010      	adds	r0, #16
 800b7e4:	f008 fa9a 	bl	8013d1c <memset>
  }

  F_UNLOCK();
 800b7e8:	4802      	ldr	r0, [pc, #8]	; (800b7f4 <chFactoryCreateBuffer+0x34>)
 800b7ea:	f7fd ffd9 	bl	80097a0 <chMtxUnlock>

  return dbp;
}
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	bd70      	pop	{r4, r5, r6, pc}
 800b7f2:	bf00      	nop
 800b7f4:	20005860 	.word	0x20005860
 800b7f8:	f3af 8000 	nop.w
 800b7fc:	f3af 8000 	nop.w

0800b800 <chFactoryFindBuffer>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	4605      	mov	r5, r0
  dyn_buffer_t *dbp;

  F_LOCK();
 800b804:	4c07      	ldr	r4, [pc, #28]	; (800b824 <chFactoryFindBuffer+0x24>)
 800b806:	4620      	mov	r0, r4
 800b808:	f7fd ff5a 	bl	80096c0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 800b80c:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800b810:	4628      	mov	r0, r5
 800b812:	f7ff febd 	bl	800b590 <dyn_find_object>
 800b816:	4605      	mov	r5, r0

  F_UNLOCK();
 800b818:	4620      	mov	r0, r4
 800b81a:	f7fd ffc1 	bl	80097a0 <chMtxUnlock>

  return dbp;
}
 800b81e:	4628      	mov	r0, r5
 800b820:	bd38      	pop	{r3, r4, r5, pc}
 800b822:	bf00      	nop
 800b824:	20005860 	.word	0x20005860
 800b828:	f3af 8000 	nop.w
 800b82c:	f3af 8000 	nop.w

0800b830 <chFactoryReleaseBuffer>:
 *
 * @param[in] dbp       dynamic buffer object reference
 *
 * @api
 */
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4605      	mov	r5, r0

  F_LOCK();
 800b834:	4c06      	ldr	r4, [pc, #24]	; (800b850 <chFactoryReleaseBuffer+0x20>)
 800b836:	4620      	mov	r0, r4
 800b838:	f7fd ff42 	bl	80096c0 <chMtxLock>

  dyn_release_object_heap(&dbp->element, &ch_factory.buf_list);
 800b83c:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800b840:	4628      	mov	r0, r5
 800b842:	f7ff ff05 	bl	800b650 <dyn_release_object_heap>

  F_UNLOCK();
 800b846:	4620      	mov	r0, r4
 800b848:	f7fd ffaa 	bl	80097a0 <chMtxUnlock>
}
 800b84c:	bd38      	pop	{r3, r4, r5, pc}
 800b84e:	bf00      	nop
 800b850:	20005860 	.word	0x20005860
 800b854:	f3af 8000 	nop.w
 800b858:	f3af 8000 	nop.w
 800b85c:	f3af 8000 	nop.w

0800b860 <chFactoryCreateSemaphore>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 800b860:	b570      	push	{r4, r5, r6, lr}
 800b862:	4605      	mov	r5, r0
 800b864:	460e      	mov	r6, r1
  dyn_semaphore_t *dsp;

  F_LOCK();
 800b866:	4c0b      	ldr	r4, [pc, #44]	; (800b894 <chFactoryCreateSemaphore+0x34>)
 800b868:	4620      	mov	r0, r4
 800b86a:	f7fd ff29 	bl	80096c0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 800b86e:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 800b872:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800b876:	4628      	mov	r0, r5
 800b878:	f7ff fe62 	bl	800b540 <dyn_create_object_pool>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 800b87c:	4604      	mov	r4, r0
 800b87e:	b118      	cbz	r0, 800b888 <chFactoryCreateSemaphore+0x28>
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 800b880:	4631      	mov	r1, r6
 800b882:	3010      	adds	r0, #16
 800b884:	f7fd fc44 	bl	8009110 <chSemObjectInit>
  }

  F_UNLOCK();
 800b888:	4802      	ldr	r0, [pc, #8]	; (800b894 <chFactoryCreateSemaphore+0x34>)
 800b88a:	f7fd ff89 	bl	80097a0 <chMtxUnlock>

  return dsp;
}
 800b88e:	4620      	mov	r0, r4
 800b890:	bd70      	pop	{r4, r5, r6, pc}
 800b892:	bf00      	nop
 800b894:	20005860 	.word	0x20005860
 800b898:	f3af 8000 	nop.w
 800b89c:	f3af 8000 	nop.w

0800b8a0 <chFactoryFindSemaphore>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	4605      	mov	r5, r0
  dyn_semaphore_t *dsp;

  F_LOCK();
 800b8a4:	4c07      	ldr	r4, [pc, #28]	; (800b8c4 <chFactoryFindSemaphore+0x24>)
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f7fd ff0a 	bl	80096c0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 800b8ac:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f7ff fe6d 	bl	800b590 <dyn_find_object>
 800b8b6:	4605      	mov	r5, r0

  F_UNLOCK();
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f7fd ff71 	bl	80097a0 <chMtxUnlock>

  return dsp;
}
 800b8be:	4628      	mov	r0, r5
 800b8c0:	bd38      	pop	{r3, r4, r5, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20005860 	.word	0x20005860
 800b8c8:	f3af 8000 	nop.w
 800b8cc:	f3af 8000 	nop.w

0800b8d0 <chFactoryReleaseSemaphore>:
 *
 * @param[in] dsp       dynamic semaphore object reference
 *
 * @api
 */
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 800b8d0:	b538      	push	{r3, r4, r5, lr}
 800b8d2:	4605      	mov	r5, r0

  F_LOCK();
 800b8d4:	4c07      	ldr	r4, [pc, #28]	; (800b8f4 <chFactoryReleaseSemaphore+0x24>)
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f7fd fef2 	bl	80096c0 <chMtxLock>

  dyn_release_object_pool(&dsp->element,
 800b8dc:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 800b8e0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	f7ff fe6b 	bl	800b5c0 <dyn_release_object_pool>
                          &ch_factory.sem_list,
                          &ch_factory.sem_pool);

  F_UNLOCK();
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f7fd ff58 	bl	80097a0 <chMtxUnlock>
}
 800b8f0:	bd38      	pop	{r3, r4, r5, pc}
 800b8f2:	bf00      	nop
 800b8f4:	20005860 	.word	0x20005860
 800b8f8:	f3af 8000 	nop.w
 800b8fc:	f3af 8000 	nop.w

0800b900 <chFactoryCreateMailbox>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 800b900:	b570      	push	{r4, r5, r6, lr}
 800b902:	4606      	mov	r6, r0
 800b904:	460d      	mov	r5, r1
  dyn_mailbox_t *dmp;

  F_LOCK();
 800b906:	4c0c      	ldr	r4, [pc, #48]	; (800b938 <chFactoryCreateMailbox+0x38>)
 800b908:	4620      	mov	r0, r4
 800b90a:	f7fd fed9 	bl	80096c0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 800b90e:	f105 020e 	add.w	r2, r5, #14
 800b912:	0092      	lsls	r2, r2, #2
 800b914:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800b918:	4630      	mov	r0, r6
 800b91a:	f7ff fe71 	bl	800b600 <dyn_create_object_heap>
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
                                                (n * sizeof (msg_t)));
  if (dmp != NULL) {
 800b91e:	4604      	mov	r4, r0
 800b920:	b128      	cbz	r0, 800b92e <chFactoryCreateMailbox+0x2e>
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, dmp->msgbuf, n);
 800b922:	462a      	mov	r2, r5
 800b924:	f100 0138 	add.w	r1, r0, #56	; 0x38
 800b928:	3010      	adds	r0, #16
 800b92a:	f7fe fec1 	bl	800a6b0 <chMBObjectInit>
  }

  F_UNLOCK();
 800b92e:	4802      	ldr	r0, [pc, #8]	; (800b938 <chFactoryCreateMailbox+0x38>)
 800b930:	f7fd ff36 	bl	80097a0 <chMtxUnlock>

  return dmp;
}
 800b934:	4620      	mov	r0, r4
 800b936:	bd70      	pop	{r4, r5, r6, pc}
 800b938:	20005860 	.word	0x20005860
 800b93c:	f3af 8000 	nop.w

0800b940 <chFactoryFindMailbox>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4605      	mov	r5, r0
  dyn_mailbox_t *dmp;

  F_LOCK();
 800b944:	4c07      	ldr	r4, [pc, #28]	; (800b964 <chFactoryFindMailbox+0x24>)
 800b946:	4620      	mov	r0, r4
 800b948:	f7fd feba 	bl	80096c0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 800b94c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800b950:	4628      	mov	r0, r5
 800b952:	f7ff fe1d 	bl	800b590 <dyn_find_object>
 800b956:	4605      	mov	r5, r0

  F_UNLOCK();
 800b958:	4620      	mov	r0, r4
 800b95a:	f7fd ff21 	bl	80097a0 <chMtxUnlock>

  return dmp;
}
 800b95e:	4628      	mov	r0, r5
 800b960:	bd38      	pop	{r3, r4, r5, pc}
 800b962:	bf00      	nop
 800b964:	20005860 	.word	0x20005860
 800b968:	f3af 8000 	nop.w
 800b96c:	f3af 8000 	nop.w

0800b970 <chFactoryReleaseMailbox>:
 *
 * @param[in] dmp       dynamic mailbox object reference
 *
 * @api
 */
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	4605      	mov	r5, r0

  F_LOCK();
 800b974:	4c06      	ldr	r4, [pc, #24]	; (800b990 <chFactoryReleaseMailbox+0x20>)
 800b976:	4620      	mov	r0, r4
 800b978:	f7fd fea2 	bl	80096c0 <chMtxLock>

  dyn_release_object_heap(&dmp->element, &ch_factory.mbx_list);
 800b97c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800b980:	4628      	mov	r0, r5
 800b982:	f7ff fe65 	bl	800b650 <dyn_release_object_heap>

  F_UNLOCK();
 800b986:	4620      	mov	r0, r4
 800b988:	f7fd ff0a 	bl	80097a0 <chMtxUnlock>
}
 800b98c:	bd38      	pop	{r3, r4, r5, pc}
 800b98e:	bf00      	nop
 800b990:	20005860 	.word	0x20005860
 800b994:	f3af 8000 	nop.w
 800b998:	f3af 8000 	nop.w
 800b99c:	f3af 8000 	nop.w

0800b9a0 <chFactoryCreateObjectsFIFO>:
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
 800b9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a4:	4607      	mov	r7, r0
 800b9a6:	460d      	mov	r5, r1
 800b9a8:	4614      	mov	r4, r2
 800b9aa:	4698      	mov	r8, r3
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 800b9ac:	4e1c      	ldr	r6, [pc, #112]	; (800ba20 <chFactoryCreateObjectsFIFO+0x80>)
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	f7fd fe86 	bl	80096c0 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
                                                      &ch_factory.fifo_list,
                                                      sizeof (dyn_objects_fifo_t) +
 800b9b4:	f104 0215 	add.w	r2, r4, #21
                                                      (objn * sizeof (msg_t)) +
                                                      (objn * objsize));
 800b9b8:	fb05 f304 	mul.w	r3, r5, r4
  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 800b9bc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b9c0:	f106 0140 	add.w	r1, r6, #64	; 0x40
 800b9c4:	4638      	mov	r0, r7
 800b9c6:	f7ff fe1b 	bl	800b600 <dyn_create_object_heap>
  if (dofp != NULL) {
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	b310      	cbz	r0, 800ba14 <chFactoryCreateObjectsFIFO+0x74>
    /* Initializing mailbox object data.*/
    chFifoObjectInitAligned(&dofp->fifo, objsize, objn, objalign,
 800b9ce:	f100 0910 	add.w	r9, r0, #16
                            (void *)&dofp->msgbuf[objn], dofp->msgbuf);
 800b9d2:	f104 0714 	add.w	r7, r4, #20
 800b9d6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800b9da:	3704      	adds	r7, #4
 800b9dc:	f100 0a54 	add.w	sl, r0, #84	; 0x54
 */
static inline void chFifoObjectInitAligned(objects_fifo_t *ofp, size_t objsize,
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));
 800b9e0:	4545      	cmp	r5, r8
 800b9e2:	d304      	bcc.n	800b9ee <chFactoryCreateObjectsFIFO+0x4e>
 800b9e4:	fbb5 f3f8 	udiv	r3, r5, r8
 800b9e8:	fb08 5313 	mls	r3, r8, r3, r5
 800b9ec:	b113      	cbz	r3, 800b9f4 <chFactoryCreateObjectsFIFO+0x54>
 800b9ee:	480d      	ldr	r0, [pc, #52]	; (800ba24 <chFactoryCreateObjectsFIFO+0x84>)
 800b9f0:	f7fb fe3e 	bl	8007670 <chSysHalt>

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 800b9f4:	4642      	mov	r2, r8
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4648      	mov	r0, r9
 800b9fa:	f7ff fb39 	bl	800b070 <chGuardedPoolObjectInitAligned>
  chGuardedPoolLoadArray(&ofp->free, objbuf, objn);
 800b9fe:	4622      	mov	r2, r4
 800ba00:	4639      	mov	r1, r7
 800ba02:	4648      	mov	r0, r9
 800ba04:	f7ff fbb4 	bl	800b170 <chGuardedPoolLoadArray>
  chMBObjectInit(&ofp->mbx, msgbuf, objn);
 800ba08:	4622      	mov	r2, r4
 800ba0a:	4651      	mov	r1, sl
 800ba0c:	f109 001c 	add.w	r0, r9, #28
 800ba10:	f7fe fe4e 	bl	800a6b0 <chMBObjectInit>
  }

  F_UNLOCK();
 800ba14:	4802      	ldr	r0, [pc, #8]	; (800ba20 <chFactoryCreateObjectsFIFO+0x80>)
 800ba16:	f7fd fec3 	bl	80097a0 <chMtxUnlock>

  return dofp;
}
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba20:	20005860 	.word	0x20005860
 800ba24:	08015614 	.word	0x08015614
 800ba28:	f3af 8000 	nop.w
 800ba2c:	f3af 8000 	nop.w

0800ba30 <chFactoryFindObjectsFIFO>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	4605      	mov	r5, r0
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 800ba34:	4c07      	ldr	r4, [pc, #28]	; (800ba54 <chFactoryFindObjectsFIFO+0x24>)
 800ba36:	4620      	mov	r0, r4
 800ba38:	f7fd fe42 	bl	80096c0 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 800ba3c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800ba40:	4628      	mov	r0, r5
 800ba42:	f7ff fda5 	bl	800b590 <dyn_find_object>
 800ba46:	4605      	mov	r5, r0

  F_UNLOCK();
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f7fd fea9 	bl	80097a0 <chMtxUnlock>

  return dofp;
}
 800ba4e:	4628      	mov	r0, r5
 800ba50:	bd38      	pop	{r3, r4, r5, pc}
 800ba52:	bf00      	nop
 800ba54:	20005860 	.word	0x20005860
 800ba58:	f3af 8000 	nop.w
 800ba5c:	f3af 8000 	nop.w

0800ba60 <chFactoryReleaseObjectsFIFO>:
 *
 * @param[in] dofp      dynamic "objects FIFO" object reference
 *
 * @api
 */
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 800ba60:	b538      	push	{r3, r4, r5, lr}
 800ba62:	4605      	mov	r5, r0

  F_LOCK();
 800ba64:	4c06      	ldr	r4, [pc, #24]	; (800ba80 <chFactoryReleaseObjectsFIFO+0x20>)
 800ba66:	4620      	mov	r0, r4
 800ba68:	f7fd fe2a 	bl	80096c0 <chMtxLock>

  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);
 800ba6c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800ba70:	4628      	mov	r0, r5
 800ba72:	f7ff fded 	bl	800b650 <dyn_release_object_heap>

  F_UNLOCK();
 800ba76:	4620      	mov	r0, r4
 800ba78:	f7fd fe92 	bl	80097a0 <chMtxUnlock>
}
 800ba7c:	bd38      	pop	{r3, r4, r5, pc}
 800ba7e:	bf00      	nop
 800ba80:	20005860 	.word	0x20005860
 800ba84:	f3af 8000 	nop.w
 800ba88:	f3af 8000 	nop.w
 800ba8c:	f3af 8000 	nop.w

0800ba90 <chFactoryCreatePipe>:
 *                      allocated or a dynamic pipe object with
 *                      the same name exists.
 *
 * @api
 */
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 800ba90:	b570      	push	{r4, r5, r6, lr}
 800ba92:	4606      	mov	r6, r0
 800ba94:	460d      	mov	r5, r1
  dyn_pipe_t *dpp;

  F_LOCK();
 800ba96:	4c0c      	ldr	r4, [pc, #48]	; (800bac8 <chFactoryCreatePipe+0x38>)
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f7fd fe11 	bl	80096c0 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 800ba9e:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800baa2:	f104 0144 	add.w	r1, r4, #68	; 0x44
 800baa6:	4630      	mov	r0, r6
 800baa8:	f7ff fdaa 	bl	800b600 <dyn_create_object_heap>
                                             &ch_factory.pipe_list,
                                             sizeof (dyn_pipe_t) + size);
  if (dpp != NULL) {
 800baac:	4604      	mov	r4, r0
 800baae:	b128      	cbz	r0, 800babc <chFactoryCreatePipe+0x2c>
    /* Initializing mailbox object data.*/
    chPipeObjectInit(&dpp->pipe, dpp->buffer, size);
 800bab0:	462a      	mov	r2, r5
 800bab2:	f100 0160 	add.w	r1, r0, #96	; 0x60
 800bab6:	3010      	adds	r0, #16
 800bab8:	f7ff fbf2 	bl	800b2a0 <chPipeObjectInit>
  }

  F_UNLOCK();
 800babc:	4802      	ldr	r0, [pc, #8]	; (800bac8 <chFactoryCreatePipe+0x38>)
 800babe:	f7fd fe6f 	bl	80097a0 <chMtxUnlock>

  return dpp;
}
 800bac2:	4620      	mov	r0, r4
 800bac4:	bd70      	pop	{r4, r5, r6, pc}
 800bac6:	bf00      	nop
 800bac8:	20005860 	.word	0x20005860
 800bacc:	f3af 8000 	nop.w

0800bad0 <chFactoryFindPipe>:
 * @retval NULL         if a dynamic pipe object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4605      	mov	r5, r0
  dyn_pipe_t *dpp;

  F_LOCK();
 800bad4:	4c07      	ldr	r4, [pc, #28]	; (800baf4 <chFactoryFindPipe+0x24>)
 800bad6:	4620      	mov	r0, r4
 800bad8:	f7fd fdf2 	bl	80096c0 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_find_object(name, &ch_factory.pipe_list);
 800badc:	f104 0144 	add.w	r1, r4, #68	; 0x44
 800bae0:	4628      	mov	r0, r5
 800bae2:	f7ff fd55 	bl	800b590 <dyn_find_object>
 800bae6:	4605      	mov	r5, r0

  F_UNLOCK();
 800bae8:	4620      	mov	r0, r4
 800baea:	f7fd fe59 	bl	80097a0 <chMtxUnlock>

  return dpp;
}
 800baee:	4628      	mov	r0, r5
 800baf0:	bd38      	pop	{r3, r4, r5, pc}
 800baf2:	bf00      	nop
 800baf4:	20005860 	.word	0x20005860
 800baf8:	f3af 8000 	nop.w
 800bafc:	f3af 8000 	nop.w

0800bb00 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4605      	mov	r5, r0

  F_LOCK();
 800bb04:	4c06      	ldr	r4, [pc, #24]	; (800bb20 <chFactoryReleasePipe+0x20>)
 800bb06:	4620      	mov	r0, r4
 800bb08:	f7fd fdda 	bl	80096c0 <chMtxLock>

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);
 800bb0c:	f104 0144 	add.w	r1, r4, #68	; 0x44
 800bb10:	4628      	mov	r0, r5
 800bb12:	f7ff fd9d 	bl	800b650 <dyn_release_object_heap>

  F_UNLOCK();
 800bb16:	4620      	mov	r0, r4
 800bb18:	f7fd fe42 	bl	80097a0 <chMtxUnlock>
}
 800bb1c:	bd38      	pop	{r3, r4, r5, pc}
 800bb1e:	bf00      	nop
 800bb20:	20005860 	.word	0x20005860
	...

0800bb30 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800bb30:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800bb34:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800bb36:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	f3af 8000 	nop.w
 800bb48:	f3af 8000 	nop.w
 800bb4c:	f3af 8000 	nop.w

0800bb50 <_port_irq_epilogue>:
 800bb50:	2320      	movs	r3, #32
 800bb52:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800bb56:	4b0f      	ldr	r3, [pc, #60]	; (800bb94 <_port_irq_epilogue+0x44>)
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800bb5e:	d103      	bne.n	800bb68 <_port_irq_epilogue+0x18>
 800bb60:	2300      	movs	r3, #0
 800bb62:	f383 8811 	msr	BASEPRI, r3
 800bb66:	4770      	bx	lr
void _port_irq_epilogue(void) {
 800bb68:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800bb6a:	f3ef 8409 	mrs	r4, PSP
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 800bb6e:	f1a4 0320 	sub.w	r3, r4, #32

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800bb72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb76:	f844 2c04 	str.w	r2, [r4, #-4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800bb7a:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800bb7e:	f7fc fbcf 	bl	8008320 <chSchIsPreemptionRequired>
 800bb82:	b118      	cbz	r0, 800bb8c <_port_irq_epilogue+0x3c>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800bb84:	4b04      	ldr	r3, [pc, #16]	; (800bb98 <_port_irq_epilogue+0x48>)
 800bb86:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 800bb8a:	bd10      	pop	{r4, pc}
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800bb8c:	4b03      	ldr	r3, [pc, #12]	; (800bb9c <_port_irq_epilogue+0x4c>)
 800bb8e:	f844 3c08 	str.w	r3, [r4, #-8]
 800bb92:	e7fa      	b.n	800bb8a <_port_irq_epilogue+0x3a>
 800bb94:	e000ed00 	.word	0xe000ed00
 800bb98:	08000309 	.word	0x08000309
 800bb9c:	0800031c 	.word	0x0800031c

0800bba0 <long_to_string_with_divisor>:
BaseSequentialStream* myChp = &SD6;

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 800bba0:	b4f0      	push	{r4, r5, r6, r7}
  int i;
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
 800bba2:	461e      	mov	r6, r3
 800bba4:	b903      	cbnz	r3, 800bba8 <long_to_string_with_divisor+0x8>
    ll = num;
 800bba6:	460e      	mov	r6, r1
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800bba8:	f100 050b 	add.w	r5, r0, #11
 800bbac:	462b      	mov	r3, r5
 800bbae:	e006      	b.n	800bbbe <long_to_string_with_divisor+0x1e>
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800bbb0:	f803 4d01 	strb.w	r4, [r3, #-1]!
    l /= radix;
 800bbb4:	fbb7 f1f2 	udiv	r1, r7, r2
  } while ((ll /= radix) != 0);
 800bbb8:	fbb6 f6f2 	udiv	r6, r6, r2
 800bbbc:	b15e      	cbz	r6, 800bbd6 <long_to_string_with_divisor+0x36>
    i = (int)(l % radix);
 800bbbe:	460f      	mov	r7, r1
 800bbc0:	fbb1 f4f2 	udiv	r4, r1, r2
 800bbc4:	fb02 1114 	mls	r1, r2, r4, r1
    i += '0';
 800bbc8:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9')
 800bbcc:	2c39      	cmp	r4, #57	; 0x39
 800bbce:	ddef      	ble.n	800bbb0 <long_to_string_with_divisor+0x10>
      i += 'A' - '0' - 10;
 800bbd0:	f101 0437 	add.w	r4, r1, #55	; 0x37
 800bbd4:	e7ec      	b.n	800bbb0 <long_to_string_with_divisor+0x10>

  i = (int)(p + MAX_FILLER - q);
 800bbd6:	1aea      	subs	r2, r5, r3
  do
    *p++ = *q++;
 800bbd8:	1c41      	adds	r1, r0, #1
 800bbda:	781c      	ldrb	r4, [r3, #0]
 800bbdc:	7004      	strb	r4, [r0, #0]
 800bbde:	4608      	mov	r0, r1
 800bbe0:	3301      	adds	r3, #1
  while (--i);
 800bbe2:	3a01      	subs	r2, #1
 800bbe4:	d1f8      	bne.n	800bbd8 <long_to_string_with_divisor+0x38>

  return p;
}
 800bbe6:	bcf0      	pop	{r4, r5, r6, r7}
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	f3af 8000 	nop.w

0800bbf0 <ch_ltoa>:

static char *ch_ltoa(char *p, long num, unsigned radix) {
 800bbf0:	b508      	push	{r3, lr}

  return long_to_string_with_divisor(p, num, radix, 0);
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	f7ff ffd4 	bl	800bba0 <long_to_string_with_divisor>
}
 800bbf8:	bd08      	pop	{r3, pc}
 800bbfa:	bf00      	nop
 800bbfc:	f3af 8000 	nop.w

0800bc00 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 800bc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc04:	b087      	sub	sp, #28
 800bc06:	4607      	mov	r7, r0
 800bc08:	460d      	mov	r5, r1
 800bc0a:	9201      	str	r2, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800bc0c:	2600      	movs	r6, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 800bc0e:	f105 0a01 	add.w	sl, r5, #1
 800bc12:	7829      	ldrb	r1, [r5, #0]
    if (c == 0)
 800bc14:	2900      	cmp	r1, #0
 800bc16:	f000 8123 	beq.w	800be60 <chvprintf+0x260>
      return n;
    if (c != '%') {
 800bc1a:	2925      	cmp	r1, #37	; 0x25
 800bc1c:	d006      	beq.n	800bc2c <chvprintf+0x2c>
      streamPut(chp, (uint8_t)c);
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	4638      	mov	r0, r7
 800bc24:	4798      	blx	r3
      n++;
 800bc26:	3601      	adds	r6, #1
    c = *fmt++;
 800bc28:	4655      	mov	r5, sl
      continue;
 800bc2a:	e7f0      	b.n	800bc0e <chvprintf+0xe>
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 800bc2c:	786b      	ldrb	r3, [r5, #1]
 800bc2e:	2b2d      	cmp	r3, #45	; 0x2d
 800bc30:	d009      	beq.n	800bc46 <chvprintf+0x46>
    left_align = FALSE;
 800bc32:	f04f 0900 	mov.w	r9, #0
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 800bc36:	f89a 3000 	ldrb.w	r3, [sl]
 800bc3a:	2b30      	cmp	r3, #48	; 0x30
 800bc3c:	d008      	beq.n	800bc50 <chvprintf+0x50>
    filler = ' ';
 800bc3e:	f04f 0820 	mov.w	r8, #32
      fmt++;
      filler = '0';
    }
    width = 0;
 800bc42:	2400      	movs	r4, #0
 800bc44:	e00e      	b.n	800bc64 <chvprintf+0x64>
      fmt++;
 800bc46:	f105 0a02 	add.w	sl, r5, #2
      left_align = TRUE;
 800bc4a:	f04f 0901 	mov.w	r9, #1
 800bc4e:	e7f2      	b.n	800bc36 <chvprintf+0x36>
      fmt++;
 800bc50:	f10a 0a01 	add.w	sl, sl, #1
      filler = '0';
 800bc54:	f04f 0830 	mov.w	r8, #48	; 0x30
 800bc58:	e7f3      	b.n	800bc42 <chvprintf+0x42>
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 800bc5a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800bc5e:	0062      	lsls	r2, r4, #1
 800bc60:	18d4      	adds	r4, r2, r3
      c = *fmt++;
 800bc62:	46aa      	mov	sl, r5
 800bc64:	f10a 0501 	add.w	r5, sl, #1
 800bc68:	f89a 2000 	ldrb.w	r2, [sl]
      if (c >= '0' && c <= '9')
 800bc6c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	2b09      	cmp	r3, #9
 800bc74:	d9f1      	bls.n	800bc5a <chvprintf+0x5a>
      else if (c == '*')
 800bc76:	2a2a      	cmp	r2, #42	; 0x2a
 800bc78:	d104      	bne.n	800bc84 <chvprintf+0x84>
        c = va_arg(ap, int);
 800bc7a:	9b01      	ldr	r3, [sp, #4]
 800bc7c:	1d1a      	adds	r2, r3, #4
 800bc7e:	9201      	str	r2, [sp, #4]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	e7ea      	b.n	800bc5a <chvprintf+0x5a>
    }
    precision = 0;
    if (c == '.') {
 800bc84:	2a2e      	cmp	r2, #46	; 0x2e
 800bc86:	d02d      	beq.n	800bce4 <chvprintf+0xe4>
    precision = 0;
 800bc88:	2300      	movs	r3, #0
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800bc8a:	2a6c      	cmp	r2, #108	; 0x6c
 800bc8c:	d041      	beq.n	800bd12 <chvprintf+0x112>
 800bc8e:	2a4c      	cmp	r2, #76	; 0x4c
 800bc90:	d03f      	beq.n	800bd12 <chvprintf+0x112>
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
 800bc92:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800bc96:	b2c9      	uxtb	r1, r1
 800bc98:	2919      	cmp	r1, #25
 800bc9a:	bf8c      	ite	hi
 800bc9c:	2100      	movhi	r1, #0
 800bc9e:	2101      	movls	r1, #1

    /* Command decoding.*/
    switch (c) {
 800bca0:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 800bca4:	2834      	cmp	r0, #52	; 0x34
 800bca6:	f200 80aa 	bhi.w	800bdfe <chvprintf+0x1fe>
 800bcaa:	e8df f000 	tbb	[pc, r0]
 800bcae:	a863      	.short	0xa863
 800bcb0:	63a8a8a8 	.word	0x63a8a8a8
 800bcb4:	a8a8a8a8 	.word	0xa8a8a8a8
 800bcb8:	a8a87da8 	.word	0xa8a87da8
 800bcbc:	7fa8a8a8 	.word	0x7fa8a8a8
 800bcc0:	a83aa8a8 	.word	0xa83aa8a8
 800bcc4:	a8a8a8a8 	.word	0xa8a8a8a8
 800bcc8:	a8a8a8a8 	.word	0xa8a8a8a8
 800bccc:	a8633ca8 	.word	0xa8633ca8
 800bcd0:	63a8a8a8 	.word	0x63a8a8a8
 800bcd4:	a8a8a8a8 	.word	0xa8a8a8a8
 800bcd8:	a8a87da8 	.word	0xa8a87da8
 800bcdc:	7fa849a8 	.word	0x7fa849a8
 800bce0:	a8a8      	.short	0xa8a8
 800bce2:	3a          	.byte	0x3a
 800bce3:	00          	.byte	0x00
    precision = 0;
 800bce4:	2300      	movs	r3, #0
 800bce6:	e004      	b.n	800bcf2 <chvprintf+0xf2>
        precision *= 10;
 800bce8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bcec:	005a      	lsls	r2, r3, #1
        precision += c;
 800bcee:	188b      	adds	r3, r1, r2
        c = *fmt++;
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	1c68      	adds	r0, r5, #1
 800bcf4:	782a      	ldrb	r2, [r5, #0]
        if (c >= '0' && c <= '9')
 800bcf6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bcfa:	b2c9      	uxtb	r1, r1
 800bcfc:	2909      	cmp	r1, #9
 800bcfe:	d9f3      	bls.n	800bce8 <chvprintf+0xe8>
        else if (c == '*')
 800bd00:	2a2a      	cmp	r2, #42	; 0x2a
 800bd02:	d104      	bne.n	800bd0e <chvprintf+0x10e>
          c = va_arg(ap, int);
 800bd04:	9a01      	ldr	r2, [sp, #4]
 800bd06:	1d11      	adds	r1, r2, #4
 800bd08:	9101      	str	r1, [sp, #4]
 800bd0a:	7811      	ldrb	r1, [r2, #0]
 800bd0c:	e7ec      	b.n	800bce8 <chvprintf+0xe8>
        c = *fmt++;
 800bd0e:	4605      	mov	r5, r0
 800bd10:	e7bb      	b.n	800bc8a <chvprintf+0x8a>
      if (*fmt)
 800bd12:	7829      	ldrb	r1, [r5, #0]
 800bd14:	b119      	cbz	r1, 800bd1e <chvprintf+0x11e>
        c = *fmt++;
 800bd16:	3501      	adds	r5, #1
 800bd18:	460a      	mov	r2, r1
      is_long = TRUE;
 800bd1a:	2101      	movs	r1, #1
 800bd1c:	e7c0      	b.n	800bca0 <chvprintf+0xa0>
 800bd1e:	2101      	movs	r1, #1
 800bd20:	e7be      	b.n	800bca0 <chvprintf+0xa0>
      p = ftoa(p, f, precision);
      break;
#endif
    case 'X':
    case 'x':
      c = 16;
 800bd22:	2210      	movs	r2, #16
 800bd24:	e043      	b.n	800bdae <chvprintf+0x1ae>
      *p++ = va_arg(ap, int);
 800bd26:	9b01      	ldr	r3, [sp, #4]
 800bd28:	1d1a      	adds	r2, r3, #4
 800bd2a:	9201      	str	r2, [sp, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f10d 0a18 	add.w	sl, sp, #24
 800bd32:	f80a 3d0c 	strb.w	r3, [sl, #-12]!
      filler = ' ';
 800bd36:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
 800bd3a:	f10d 000d 	add.w	r0, sp, #13
      break;
 800bd3e:	e040      	b.n	800bdc2 <chvprintf+0x1c2>
      if ((s = va_arg(ap, char *)) == 0)
 800bd40:	9a01      	ldr	r2, [sp, #4]
 800bd42:	1d11      	adds	r1, r2, #4
 800bd44:	9101      	str	r1, [sp, #4]
 800bd46:	f8d2 a000 	ldr.w	sl, [r2]
 800bd4a:	f1ba 0f00 	cmp.w	sl, #0
 800bd4e:	d002      	beq.n	800bd56 <chvprintf+0x156>
      if (precision == 0)
 800bd50:	b16b      	cbz	r3, 800bd6e <chvprintf+0x16e>
        precision = 32767;
 800bd52:	4650      	mov	r0, sl
 800bd54:	e003      	b.n	800bd5e <chvprintf+0x15e>
        s = "(null)";
 800bd56:	f8df a110 	ldr.w	sl, [pc, #272]	; 800be68 <chvprintf+0x268>
 800bd5a:	e7f9      	b.n	800bd50 <chvprintf+0x150>
      for (p = s; *p && (--precision >= 0); p++)
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	7802      	ldrb	r2, [r0, #0]
 800bd60:	2a00      	cmp	r2, #0
 800bd62:	d053      	beq.n	800be0c <chvprintf+0x20c>
 800bd64:	3b01      	subs	r3, #1
 800bd66:	d5f9      	bpl.n	800bd5c <chvprintf+0x15c>
      filler = ' ';
 800bd68:	f04f 0820 	mov.w	r8, #32
 800bd6c:	e029      	b.n	800bdc2 <chvprintf+0x1c2>
        precision = 32767;
 800bd6e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800bd72:	e7ee      	b.n	800bd52 <chvprintf+0x152>
      if (is_long)
 800bd74:	b161      	cbz	r1, 800bd90 <chvprintf+0x190>
        l = va_arg(ap, long);
 800bd76:	9b01      	ldr	r3, [sp, #4]
 800bd78:	1d1a      	adds	r2, r3, #4
 800bd7a:	9201      	str	r2, [sp, #4]
 800bd7c:	6819      	ldr	r1, [r3, #0]
      if (l < 0) {
 800bd7e:	2900      	cmp	r1, #0
 800bd80:	db0b      	blt.n	800bd9a <chvprintf+0x19a>
    p = tmpbuf;
 800bd82:	a803      	add	r0, sp, #12
      p = ch_ltoa(p, l, 10);
 800bd84:	220a      	movs	r2, #10
 800bd86:	f7ff ff33 	bl	800bbf0 <ch_ltoa>
    s = tmpbuf;
 800bd8a:	f10d 0a0c 	add.w	sl, sp, #12
      break;
 800bd8e:	e018      	b.n	800bdc2 <chvprintf+0x1c2>
        l = va_arg(ap, int);
 800bd90:	9b01      	ldr	r3, [sp, #4]
 800bd92:	1d1a      	adds	r2, r3, #4
 800bd94:	9201      	str	r2, [sp, #4]
 800bd96:	6819      	ldr	r1, [r3, #0]
 800bd98:	e7f1      	b.n	800bd7e <chvprintf+0x17e>
        *p++ = '-';
 800bd9a:	232d      	movs	r3, #45	; 0x2d
 800bd9c:	f88d 300c 	strb.w	r3, [sp, #12]
        l = -l;
 800bda0:	4249      	negs	r1, r1
        *p++ = '-';
 800bda2:	f10d 000d 	add.w	r0, sp, #13
 800bda6:	e7ed      	b.n	800bd84 <chvprintf+0x184>
    case 'u':
      c = 10;
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
 800bda8:	2208      	movs	r2, #8
 800bdaa:	e000      	b.n	800bdae <chvprintf+0x1ae>
      c = 10;
 800bdac:	220a      	movs	r2, #10
unsigned_common:
      if (is_long)
 800bdae:	b309      	cbz	r1, 800bdf4 <chvprintf+0x1f4>
        l = va_arg(ap, unsigned long);
 800bdb0:	9b01      	ldr	r3, [sp, #4]
 800bdb2:	1d19      	adds	r1, r3, #4
 800bdb4:	9101      	str	r1, [sp, #4]
 800bdb6:	6819      	ldr	r1, [r3, #0]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
 800bdb8:	a803      	add	r0, sp, #12
 800bdba:	f7ff ff19 	bl	800bbf0 <ch_ltoa>
    s = tmpbuf;
 800bdbe:	f10d 0a0c 	add.w	sl, sp, #12
      break;
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
 800bdc2:	eba0 0b0a 	sub.w	fp, r0, sl
    if ((width -= i) < 0)
 800bdc6:	ebb4 040b 	subs.w	r4, r4, fp
 800bdca:	d422      	bmi.n	800be12 <chvprintf+0x212>
      width = 0;
    if (left_align == FALSE)
 800bdcc:	f1b9 0f00 	cmp.w	r9, #0
 800bdd0:	d100      	bne.n	800bdd4 <chvprintf+0x1d4>
      width = -width;
 800bdd2:	4264      	negs	r4, r4
    if (width < 0) {
 800bdd4:	2c00      	cmp	r4, #0
 800bdd6:	db1e      	blt.n	800be16 <chvprintf+0x216>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800bdd8:	f1bb 0b01 	subs.w	fp, fp, #1
 800bddc:	d435      	bmi.n	800be4a <chvprintf+0x24a>
      streamPut(chp, (uint8_t)*s++);
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	f10a 0901 	add.w	r9, sl, #1
 800bde6:	f89a 1000 	ldrb.w	r1, [sl]
 800bdea:	4638      	mov	r0, r7
 800bdec:	4798      	blx	r3
      n++;
 800bdee:	3601      	adds	r6, #1
      streamPut(chp, (uint8_t)*s++);
 800bdf0:	46ca      	mov	sl, r9
 800bdf2:	e7f1      	b.n	800bdd8 <chvprintf+0x1d8>
        l = va_arg(ap, unsigned int);
 800bdf4:	9b01      	ldr	r3, [sp, #4]
 800bdf6:	1d19      	adds	r1, r3, #4
 800bdf8:	9101      	str	r1, [sp, #4]
 800bdfa:	6819      	ldr	r1, [r3, #0]
 800bdfc:	e7dc      	b.n	800bdb8 <chvprintf+0x1b8>
      *p++ = c;
 800bdfe:	f10d 0a18 	add.w	sl, sp, #24
 800be02:	f80a 2d0c 	strb.w	r2, [sl, #-12]!
 800be06:	f10d 000d 	add.w	r0, sp, #13
      break;
 800be0a:	e7da      	b.n	800bdc2 <chvprintf+0x1c2>
      filler = ' ';
 800be0c:	f04f 0820 	mov.w	r8, #32
 800be10:	e7d7      	b.n	800bdc2 <chvprintf+0x1c2>
      width = 0;
 800be12:	2400      	movs	r4, #0
 800be14:	e7da      	b.n	800bdcc <chvprintf+0x1cc>
      if (*s == '-' && filler == '0') {
 800be16:	f89a 1000 	ldrb.w	r1, [sl]
 800be1a:	292d      	cmp	r1, #45	; 0x2d
 800be1c:	d008      	beq.n	800be30 <chvprintf+0x230>
        streamPut(chp, (uint8_t)filler);
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	4641      	mov	r1, r8
 800be24:	4638      	mov	r0, r7
 800be26:	4798      	blx	r3
        n++;
 800be28:	3601      	adds	r6, #1
      } while (++width != 0);
 800be2a:	3401      	adds	r4, #1
 800be2c:	d1f7      	bne.n	800be1e <chvprintf+0x21e>
 800be2e:	e7d3      	b.n	800bdd8 <chvprintf+0x1d8>
      if (*s == '-' && filler == '0') {
 800be30:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 800be34:	d1f3      	bne.n	800be1e <chvprintf+0x21e>
        streamPut(chp, (uint8_t)*s++);
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	f10a 0a01 	add.w	sl, sl, #1
 800be3e:	4638      	mov	r0, r7
 800be40:	4798      	blx	r3
        n++;
 800be42:	3601      	adds	r6, #1
        i--;
 800be44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be48:	e7e9      	b.n	800be1e <chvprintf+0x21e>
    }

    while (width) {
 800be4a:	2c00      	cmp	r4, #0
 800be4c:	f43f aedf 	beq.w	800bc0e <chvprintf+0xe>
      streamPut(chp, (uint8_t)filler);
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	4641      	mov	r1, r8
 800be56:	4638      	mov	r0, r7
 800be58:	4798      	blx	r3
      n++;
 800be5a:	3601      	adds	r6, #1
      width--;
 800be5c:	3c01      	subs	r4, #1
 800be5e:	e7f4      	b.n	800be4a <chvprintf+0x24a>
    }
  }
}
 800be60:	4630      	mov	r0, r6
 800be62:	b007      	add	sp, #28
 800be64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be68:	08015c6c 	.word	0x08015c6c
 800be6c:	f3af 8000 	nop.w

0800be70 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 800be70:	b40e      	push	{r1, r2, r3}
 800be72:	b500      	push	{lr}
 800be74:	b082      	sub	sp, #8
 800be76:	aa03      	add	r2, sp, #12
 800be78:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800be7c:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 800be7e:	f7ff febf 	bl	800bc00 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 800be82:	b002      	add	sp, #8
 800be84:	f85d eb04 	ldr.w	lr, [sp], #4
 800be88:	b003      	add	sp, #12
 800be8a:	4770      	bx	lr
 800be8c:	f3af 8000 	nop.w

0800be90 <myPrintf>:

/*
 * Customized printf without BaseSequentionalStream object
 */
int myPrintf(const char *fmt, ...) {
 800be90:	b40f      	push	{r0, r1, r2, r3}
 800be92:	b500      	push	{lr}
 800be94:	b083      	sub	sp, #12
 800be96:	aa04      	add	r2, sp, #16
 800be98:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800be9c:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(myChp, fmt, ap);
 800be9e:	4b04      	ldr	r3, [pc, #16]	; (800beb0 <myPrintf+0x20>)
 800bea0:	6818      	ldr	r0, [r3, #0]
 800bea2:	f7ff fead 	bl	800bc00 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 800bea6:	b003      	add	sp, #12
 800bea8:	f85d eb04 	ldr.w	lr, [sp], #4
 800beac:	b004      	add	sp, #16
 800beae:	4770      	bx	lr
 800beb0:	20001a20 	.word	0x20001a20
 800beb4:	f3af 8000 	nop.w
 800beb8:	f3af 8000 	nop.w
 800bebc:	f3af 8000 	nop.w

0800bec0 <chvsnprintf>:
 *                      terminating NUL byte) that would have been
 *                      stored in @p str if there was room.
 *
 * @api
 */
int chvsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
 800bec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bec2:	b087      	sub	sp, #28
 800bec4:	4605      	mov	r5, r0
 800bec6:	4616      	mov	r6, r2
 800bec8:	461f      	mov	r7, r3
  MemoryStream ms;
  BaseSequentialStream *chp;
  size_t size_wo_nul;
  int retval;

  if (size > 0)
 800beca:	460c      	mov	r4, r1
 800becc:	b189      	cbz	r1, 800bef2 <chvsnprintf+0x32>
    size_wo_nul = size - 1;
 800bece:	1e4a      	subs	r2, r1, #1
  else
    size_wo_nul = 0;

  /* Memory stream object to be used as a string writer, reserving one
     byte for the final zero.*/
  msObjectInit(&ms, (uint8_t *)str, size_wo_nul, 0);
 800bed0:	2300      	movs	r3, #0
 800bed2:	4629      	mov	r1, r5
 800bed4:	a801      	add	r0, sp, #4
 800bed6:	f000 f873 	bl	800bfc0 <msObjectInit>

  /* Performing the print operation using the common code.*/
  chp = (BaseSequentialStream *)(void *)&ms;
  retval = chvprintf(chp, fmt, ap);
 800beda:	463a      	mov	r2, r7
 800bedc:	4631      	mov	r1, r6
 800bede:	a801      	add	r0, sp, #4
 800bee0:	f7ff fe8e 	bl	800bc00 <chvprintf>

  /* Terminate with a zero, unless size==0.*/
  if (ms.eos < size) {
 800bee4:	9b04      	ldr	r3, [sp, #16]
 800bee6:	42a3      	cmp	r3, r4
 800bee8:	d201      	bcs.n	800beee <chvsnprintf+0x2e>
    str[ms.eos] = 0;
 800beea:	2200      	movs	r2, #0
 800beec:	54ea      	strb	r2, [r5, r3]
  }

  /* Return number of bytes that would have been written.*/
  return retval;
}
 800beee:	b007      	add	sp, #28
 800bef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_wo_nul = 0;
 800bef2:	460a      	mov	r2, r1
 800bef4:	e7ec      	b.n	800bed0 <chvsnprintf+0x10>
 800bef6:	bf00      	nop
 800bef8:	f3af 8000 	nop.w
 800befc:	f3af 8000 	nop.w

0800bf00 <chsnprintf>:
int chsnprintf(char *str, size_t size, const char *fmt, ...) {
 800bf00:	b40c      	push	{r2, r3}
 800bf02:	b500      	push	{lr}
 800bf04:	b083      	sub	sp, #12
 800bf06:	ab04      	add	r3, sp, #16
 800bf08:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 800bf0c:	9301      	str	r3, [sp, #4]
  retval = chvsnprintf(str, size, fmt, ap);
 800bf0e:	f7ff ffd7 	bl	800bec0 <chvsnprintf>
}
 800bf12:	b003      	add	sp, #12
 800bf14:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf18:	b002      	add	sp, #8
 800bf1a:	4770      	bx	lr
 800bf1c:	0000      	movs	r0, r0
	...

0800bf20 <_put>:
}

static msg_t _put(void *ip, uint8_t b) {
  MemoryStream *msp = ip;

  if (msp->size - msp->eos <= 0)
 800bf20:	6882      	ldr	r2, [r0, #8]
 800bf22:	68c3      	ldr	r3, [r0, #12]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d006      	beq.n	800bf36 <_put+0x16>
    return MSG_RESET;
  *(msp->buffer + msp->eos) = b;
 800bf28:	6842      	ldr	r2, [r0, #4]
 800bf2a:	54d1      	strb	r1, [r2, r3]
  msp->eos += 1;
 800bf2c:	68c3      	ldr	r3, [r0, #12]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	60c3      	str	r3, [r0, #12]
  return MSG_OK;
 800bf32:	2000      	movs	r0, #0
 800bf34:	4770      	bx	lr
    return MSG_RESET;
 800bf36:	f06f 0001 	mvn.w	r0, #1
}
 800bf3a:	4770      	bx	lr
 800bf3c:	f3af 8000 	nop.w

0800bf40 <_get>:

static msg_t _get(void *ip) {
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
 800bf40:	68c2      	ldr	r2, [r0, #12]
 800bf42:	6903      	ldr	r3, [r0, #16]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d005      	beq.n	800bf54 <_get+0x14>
    return MSG_RESET;
  b = *(msp->buffer + msp->offset);
 800bf48:	6842      	ldr	r2, [r0, #4]
 800bf4a:	5cd2      	ldrb	r2, [r2, r3]
  msp->offset += 1;
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	6103      	str	r3, [r0, #16]
  return b;
 800bf50:	4610      	mov	r0, r2
 800bf52:	4770      	bx	lr
    return MSG_RESET;
 800bf54:	f06f 0001 	mvn.w	r0, #1
}
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	f3af 8000 	nop.w

0800bf60 <_reads>:
static size_t _reads(void *ip, uint8_t *bp, size_t n) {
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4605      	mov	r5, r0
 800bf64:	4608      	mov	r0, r1
  if (msp->eos - msp->offset < n)
 800bf66:	68ec      	ldr	r4, [r5, #12]
 800bf68:	692b      	ldr	r3, [r5, #16]
 800bf6a:	1ae4      	subs	r4, r4, r3
 800bf6c:	4294      	cmp	r4, r2
 800bf6e:	d209      	bcs.n	800bf84 <_reads+0x24>
  memcpy(bp, msp->buffer + msp->offset, n);
 800bf70:	6869      	ldr	r1, [r5, #4]
 800bf72:	4622      	mov	r2, r4
 800bf74:	4419      	add	r1, r3
 800bf76:	f007 fc3b 	bl	80137f0 <memcpy>
  msp->offset += n;
 800bf7a:	692b      	ldr	r3, [r5, #16]
 800bf7c:	4423      	add	r3, r4
 800bf7e:	612b      	str	r3, [r5, #16]
}
 800bf80:	4620      	mov	r0, r4
 800bf82:	bd38      	pop	{r3, r4, r5, pc}
  if (msp->eos - msp->offset < n)
 800bf84:	4614      	mov	r4, r2
 800bf86:	e7f3      	b.n	800bf70 <_reads+0x10>
 800bf88:	f3af 8000 	nop.w
 800bf8c:	f3af 8000 	nop.w

0800bf90 <_writes>:
static size_t _writes(void *ip, const uint8_t *bp, size_t n) {
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	4605      	mov	r5, r0
  if (msp->size - msp->eos < n)
 800bf94:	6884      	ldr	r4, [r0, #8]
 800bf96:	68c3      	ldr	r3, [r0, #12]
 800bf98:	1ae4      	subs	r4, r4, r3
 800bf9a:	4294      	cmp	r4, r2
 800bf9c:	d209      	bcs.n	800bfb2 <_writes+0x22>
  memcpy(msp->buffer + msp->eos, bp, n);
 800bf9e:	6868      	ldr	r0, [r5, #4]
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	4418      	add	r0, r3
 800bfa4:	f007 fc24 	bl	80137f0 <memcpy>
  msp->eos += n;
 800bfa8:	68eb      	ldr	r3, [r5, #12]
 800bfaa:	4423      	add	r3, r4
 800bfac:	60eb      	str	r3, [r5, #12]
}
 800bfae:	4620      	mov	r0, r4
 800bfb0:	bd38      	pop	{r3, r4, r5, pc}
  if (msp->size - msp->eos < n)
 800bfb2:	4614      	mov	r4, r2
 800bfb4:	e7f3      	b.n	800bf9e <_writes+0xe>
 800bfb6:	bf00      	nop
 800bfb8:	f3af 8000 	nop.w
 800bfbc:	f3af 8000 	nop.w

0800bfc0 <msObjectInit>:
 * @param[in] eos       initial End Of Stream offset. Normally you need to
 *                      put this to zero for RAM buffers or equal to @p size
 *                      for ROM streams.
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {
 800bfc0:	b410      	push	{r4}

  msp->vmt    = &vmt;
 800bfc2:	4c04      	ldr	r4, [pc, #16]	; (800bfd4 <msObjectInit+0x14>)
 800bfc4:	6004      	str	r4, [r0, #0]
  msp->buffer = buffer;
 800bfc6:	6041      	str	r1, [r0, #4]
  msp->size   = size;
 800bfc8:	6082      	str	r2, [r0, #8]
  msp->eos    = eos;
 800bfca:	60c3      	str	r3, [r0, #12]
  msp->offset = 0;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	6103      	str	r3, [r0, #16]
}
 800bfd0:	bc10      	pop	{r4}
 800bfd2:	4770      	bx	lr
 800bfd4:	0801562c 	.word	0x0801562c
	...

0800bfe0 <writes>:

  (void)ip;
  (void)bp;

  return n;
}
 800bfe0:	4610      	mov	r0, r2
 800bfe2:	4770      	bx	lr
 800bfe4:	f3af 8000 	nop.w
 800bfe8:	f3af 8000 	nop.w
 800bfec:	f3af 8000 	nop.w

0800bff0 <reads>:
  (void)ip;
  (void)bp;
  (void)n;

  return 0;
}
 800bff0:	2000      	movs	r0, #0
 800bff2:	4770      	bx	lr
 800bff4:	f3af 8000 	nop.w
 800bff8:	f3af 8000 	nop.w
 800bffc:	f3af 8000 	nop.w

0800c000 <put>:

  (void)ip;
  (void)b;

  return MSG_OK;
}
 800c000:	2000      	movs	r0, #0
 800c002:	4770      	bx	lr
 800c004:	f3af 8000 	nop.w
 800c008:	f3af 8000 	nop.w
 800c00c:	f3af 8000 	nop.w

0800c010 <get>:
static msg_t get(void *ip) {

  (void)ip;

  return 4;
}
 800c010:	2004      	movs	r0, #4
 800c012:	4770      	bx	lr
 800c014:	f3af 8000 	nop.w
 800c018:	f3af 8000 	nop.w
 800c01c:	f3af 8000 	nop.w

0800c020 <nullObjectInit>:
 *
 * @param[out] nsp      pointer to the @p NullStream object to be initialized
 */
void nullObjectInit(NullStream *nsp) {

  nsp->vmt = &vmt;
 800c020:	4b01      	ldr	r3, [pc, #4]	; (800c028 <nullObjectInit+0x8>)
 800c022:	6003      	str	r3, [r0, #0]
}
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	08015640 	.word	0x08015640
 800c02c:	00000000 	.word	0x00000000

0800c030 <list_commands>:
  }

  return *p != '\0' ? p : NULL;
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	4605      	mov	r5, r0
 800c034:	460c      	mov	r4, r1

  while (scp->sc_name != NULL) {
 800c036:	e004      	b.n	800c042 <list_commands+0x12>
    chprintf(chp, "%s ", scp->sc_name);
 800c038:	4904      	ldr	r1, [pc, #16]	; (800c04c <list_commands+0x1c>)
 800c03a:	4628      	mov	r0, r5
 800c03c:	f7ff ff18 	bl	800be70 <chprintf>
    scp++;
 800c040:	3408      	adds	r4, #8
  while (scp->sc_name != NULL) {
 800c042:	6822      	ldr	r2, [r4, #0]
 800c044:	2a00      	cmp	r2, #0
 800c046:	d1f7      	bne.n	800c038 <list_commands+0x8>
  }
}
 800c048:	bd38      	pop	{r3, r4, r5, pc}
 800c04a:	bf00      	nop
 800c04c:	08015c74 	.word	0x08015c74

0800c050 <cmdexec>:

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {
 800c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c052:	4604      	mov	r4, r0
 800c054:	460e      	mov	r6, r1
 800c056:	4615      	mov	r5, r2
 800c058:	461f      	mov	r7, r3

  while (scp->sc_name != NULL) {
 800c05a:	6820      	ldr	r0, [r4, #0]
 800c05c:	b160      	cbz	r0, 800c078 <cmdexec+0x28>
    if (strcmp(scp->sc_name, name) == 0) {
 800c05e:	4629      	mov	r1, r5
 800c060:	f007 fc72 	bl	8013948 <strcmp>
 800c064:	b108      	cbz	r0, 800c06a <cmdexec+0x1a>
      scp->sc_function(chp, argc, argv);
      return false;
    }
    scp++;
 800c066:	3408      	adds	r4, #8
 800c068:	e7f7      	b.n	800c05a <cmdexec+0xa>
      scp->sc_function(chp, argc, argv);
 800c06a:	6863      	ldr	r3, [r4, #4]
 800c06c:	9a06      	ldr	r2, [sp, #24]
 800c06e:	4639      	mov	r1, r7
 800c070:	4630      	mov	r0, r6
 800c072:	4798      	blx	r3
      return false;
 800c074:	2000      	movs	r0, #0
 800c076:	e000      	b.n	800c07a <cmdexec+0x2a>
  }
  return true;
 800c078:	2001      	movs	r0, #1
}
 800c07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c07c:	f3af 8000 	nop.w

0800c080 <parse_arguments>:
static char *parse_arguments(char *str, char **saveptr) {
 800c080:	b538      	push	{r3, r4, r5, lr}
  if (str != NULL)
 800c082:	b100      	cbz	r0, 800c086 <parse_arguments+0x6>
    *saveptr = str;
 800c084:	6008      	str	r0, [r1, #0]
  p = *saveptr;
 800c086:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 800c088:	b1ac      	cbz	r4, 800c0b6 <parse_arguments+0x36>
 800c08a:	460d      	mov	r5, r1
  p += strspn(p, " \t");
 800c08c:	490f      	ldr	r1, [pc, #60]	; (800c0cc <parse_arguments+0x4c>)
 800c08e:	4620      	mov	r0, r4
 800c090:	f008 f820 	bl	80140d4 <strspn>
 800c094:	4404      	add	r4, r0
  if (*p == '"') {
 800c096:	7823      	ldrb	r3, [r4, #0]
 800c098:	2b22      	cmp	r3, #34	; 0x22
 800c09a:	d00e      	beq.n	800c0ba <parse_arguments+0x3a>
    *saveptr = strpbrk(p, " \t");
 800c09c:	490b      	ldr	r1, [pc, #44]	; (800c0cc <parse_arguments+0x4c>)
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f007 fff6 	bl	8014090 <strpbrk>
 800c0a4:	6028      	str	r0, [r5, #0]
  if (*saveptr != NULL) {
 800c0a6:	682b      	ldr	r3, [r5, #0]
 800c0a8:	b11b      	cbz	r3, 800c0b2 <parse_arguments+0x32>
    *(*saveptr)++ = '\0';
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	602a      	str	r2, [r5, #0]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	701a      	strb	r2, [r3, #0]
  return *p != '\0' ? p : NULL;
 800c0b2:	7823      	ldrb	r3, [r4, #0]
 800c0b4:	b143      	cbz	r3, 800c0c8 <parse_arguments+0x48>
}
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	bd38      	pop	{r3, r4, r5, pc}
    p++;
 800c0ba:	3401      	adds	r4, #1
    *saveptr = strpbrk(p, "\"");
 800c0bc:	2122      	movs	r1, #34	; 0x22
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f007 fe96 	bl	8013df0 <strchr>
 800c0c4:	6028      	str	r0, [r5, #0]
 800c0c6:	e7ee      	b.n	800c0a6 <parse_arguments+0x26>
  return *p != '\0' ? p : NULL;
 800c0c8:	2400      	movs	r4, #0
 800c0ca:	e7f4      	b.n	800c0b6 <parse_arguments+0x36>
 800c0cc:	08015c78 	.word	0x08015c78

0800c0d0 <shellInit>:
  esp->next = (event_listener_t *)esp;
 800c0d0:	4b01      	ldr	r3, [pc, #4]	; (800c0d8 <shellInit+0x8>)
 800c0d2:	601b      	str	r3, [r3, #0]
void shellInit(void) {

#if !defined(_CHIBIOS_NIL_)
  chEvtObjectInit(&shell_terminated);
#endif
}
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	200058a8 	.word	0x200058a8
 800c0dc:	f3af 8000 	nop.w

0800c0e0 <shellExit>:
 *
 * @param[in] msg       shell exit code
 *
 * @api
 */
void shellExit(msg_t msg) {
 800c0e0:	b510      	push	{r4, lr}
 800c0e2:	4604      	mov	r4, r0
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800c0e4:	2320      	movs	r3, #32
 800c0e6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800c0ea:	f7fc ff51 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800c0ee:	f7fb fc4f 	bl	8007990 <_dbg_check_lock>
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	4803      	ldr	r0, [pc, #12]	; (800c104 <shellExit+0x24>)
 800c0f6:	f7fd fedb 	bl	8009eb0 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f7fc fbd8 	bl	80088b0 <chThdExitS>
}
 800c100:	bd10      	pop	{r4, pc}
 800c102:	bf00      	nop
 800c104:	200058a8 	.word	0x200058a8
 800c108:	f3af 8000 	nop.w
 800c10c:	f3af 8000 	nop.w

0800c110 <shellGetLine>:
 * @retval true         the channel was reset or CTRL-D pressed.
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(ShellConfig *scfg, char *line, unsigned size, ShellHistory *shp) {
 800c110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c112:	b083      	sub	sp, #12
 800c114:	460e      	mov	r6, r1
 800c116:	4617      	mov	r7, r2
  char *p = line;
  BaseSequentialStream *chp = scfg->sc_channel;
 800c118:	6804      	ldr	r4, [r0, #0]
  char *p = line;
 800c11a:	460d      	mov	r5, r1
 800c11c:	e027      	b.n	800c16e <shellGetLine+0x5e>
      continue;
    }
#endif
#if (SHELL_CMD_EXIT_ENABLED == TRUE) && !defined(_CHIBIOS_NIL_)
    if (c == 4) {
      chprintf(chp, "^D");
 800c11e:	4922      	ldr	r1, [pc, #136]	; (800c1a8 <shellGetLine+0x98>)
 800c120:	4620      	mov	r0, r4
 800c122:	f7ff fea5 	bl	800be70 <chprintf>
      return true;
 800c126:	2001      	movs	r0, #1
 800c128:	e03b      	b.n	800c1a2 <shellGetLine+0x92>
    }
#endif
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 800c12a:	42b5      	cmp	r5, r6
 800c12c:	d01f      	beq.n	800c16e <shellGetLine+0x5e>
        streamPut(chp, 0x08);
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	2108      	movs	r1, #8
 800c134:	4620      	mov	r0, r4
 800c136:	4798      	blx	r3
        streamPut(chp, 0x20);
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	2120      	movs	r1, #32
 800c13e:	4620      	mov	r0, r4
 800c140:	4798      	blx	r3
        streamPut(chp, 0x08);
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	2108      	movs	r1, #8
 800c148:	4620      	mov	r0, r4
 800c14a:	4798      	blx	r3
        p--;
 800c14c:	3d01      	subs	r5, #1
      }
      continue;
 800c14e:	e00e      	b.n	800c16e <shellGetLine+0x5e>
    }
    if (c == '\r') {
      chprintf(chp, SHELL_NEWLINE_STR);
 800c150:	4916      	ldr	r1, [pc, #88]	; (800c1ac <shellGetLine+0x9c>)
 800c152:	4620      	mov	r0, r4
 800c154:	f7ff fe8c 	bl	800be70 <chprintf>
#if SHELL_USE_HISTORY == TRUE
      save_history(shp, line, p - line);
#endif
      *p = 0;
 800c158:	2000      	movs	r0, #0
 800c15a:	7028      	strb	r0, [r5, #0]
      return false;
 800c15c:	e021      	b.n	800c1a2 <shellGetLine+0x92>
    }
#endif
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
      streamPut(chp, c);
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	4620      	mov	r0, r4
 800c164:	4798      	blx	r3
      *p++ = (char)c;
 800c166:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c16a:	702b      	strb	r3, [r5, #0]
 800c16c:	3501      	adds	r5, #1
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 800c16e:	6823      	ldr	r3, [r4, #0]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	2201      	movs	r2, #1
 800c174:	f10d 0107 	add.w	r1, sp, #7
 800c178:	4620      	mov	r0, r4
 800c17a:	4798      	blx	r3
 800c17c:	b180      	cbz	r0, 800c1a0 <shellGetLine+0x90>
    if (c == 4) {
 800c17e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c182:	2904      	cmp	r1, #4
 800c184:	d0cb      	beq.n	800c11e <shellGetLine+0xe>
    if ((c == 8) || (c == 127)) {
 800c186:	2908      	cmp	r1, #8
 800c188:	d0cf      	beq.n	800c12a <shellGetLine+0x1a>
 800c18a:	297f      	cmp	r1, #127	; 0x7f
 800c18c:	d0cd      	beq.n	800c12a <shellGetLine+0x1a>
    if (c == '\r') {
 800c18e:	290d      	cmp	r1, #13
 800c190:	d0de      	beq.n	800c150 <shellGetLine+0x40>
    if (c < 0x20)
 800c192:	291f      	cmp	r1, #31
 800c194:	d9eb      	bls.n	800c16e <shellGetLine+0x5e>
    if (p < line + size - 1) {
 800c196:	1e7b      	subs	r3, r7, #1
 800c198:	4433      	add	r3, r6
 800c19a:	42ab      	cmp	r3, r5
 800c19c:	d8df      	bhi.n	800c15e <shellGetLine+0x4e>
 800c19e:	e7e6      	b.n	800c16e <shellGetLine+0x5e>
      return true;
 800c1a0:	2001      	movs	r0, #1
    }
  }
}
 800c1a2:	b003      	add	sp, #12
 800c1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	08015c7c 	.word	0x08015c7c
 800c1ac:	0801619c 	.word	0x0801619c

0800c1b0 <shellThread>:
THD_FUNCTION(shellThread, p) {
 800c1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b4:	b098      	sub	sp, #96	; 0x60
 800c1b6:	4606      	mov	r6, r0
  BaseSequentialStream *chp = scfg->sc_channel;
 800c1b8:	6805      	ldr	r5, [r0, #0]
  const ShellCommand *scp = scfg->sc_commands;
 800c1ba:	6847      	ldr	r7, [r0, #4]
  chprintf(chp, SHELL_NEWLINE_STR);
 800c1bc:	4947      	ldr	r1, [pc, #284]	; (800c2dc <shellThread+0x12c>)
 800c1be:	4628      	mov	r0, r5
 800c1c0:	f7ff fe56 	bl	800be70 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 800c1c4:	4946      	ldr	r1, [pc, #280]	; (800c2e0 <shellThread+0x130>)
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	f7ff fe52 	bl	800be70 <chprintf>
  while (!chThdShouldTerminateX()) {
 800c1cc:	e017      	b.n	800c1fe <shellThread+0x4e>
      chprintf(chp, SHELL_NEWLINE_STR);
 800c1ce:	4943      	ldr	r1, [pc, #268]	; (800c2dc <shellThread+0x12c>)
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	f7ff fe4d 	bl	800be70 <chprintf>
      chprintf(chp, "logout");
 800c1d6:	4943      	ldr	r1, [pc, #268]	; (800c2e4 <shellThread+0x134>)
 800c1d8:	4628      	mov	r0, r5
 800c1da:	f7ff fe49 	bl	800be70 <chprintf>
  shellExit(MSG_OK);
 800c1de:	2000      	movs	r0, #0
 800c1e0:	f7ff ff7e 	bl	800c0e0 <shellExit>
}
 800c1e4:	b018      	add	sp, #96	; 0x60
 800c1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 800c1ea:	493f      	ldr	r1, [pc, #252]	; (800c2e8 <shellThread+0x138>)
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	f7ff fe3f 	bl	800be70 <chprintf>
    args[n] = NULL;
 800c1f2:	ab18      	add	r3, sp, #96	; 0x60
 800c1f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f844 3c58 	str.w	r3, [r4, #-88]
 800c1fe:	4b3b      	ldr	r3, [pc, #236]	; (800c2ec <shellThread+0x13c>)
 800c200:	699b      	ldr	r3, [r3, #24]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 800c202:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  while (!chThdShouldTerminateX()) {
 800c206:	f013 0f04 	tst.w	r3, #4
 800c20a:	d1e8      	bne.n	800c1de <shellThread+0x2e>
    chprintf(chp, SHELL_PROMPT_STR);
 800c20c:	4938      	ldr	r1, [pc, #224]	; (800c2f0 <shellThread+0x140>)
 800c20e:	4628      	mov	r0, r5
 800c210:	f7ff fe2e 	bl	800be70 <chprintf>
    if (shellGetLine(scfg, line, sizeof(line), shp)) {
 800c214:	2300      	movs	r3, #0
 800c216:	2240      	movs	r2, #64	; 0x40
 800c218:	a907      	add	r1, sp, #28
 800c21a:	4630      	mov	r0, r6
 800c21c:	f7ff ff78 	bl	800c110 <shellGetLine>
 800c220:	2800      	cmp	r0, #0
 800c222:	d1d4      	bne.n	800c1ce <shellThread+0x1e>
    lp = parse_arguments(line, &tokp);
 800c224:	a917      	add	r1, sp, #92	; 0x5c
 800c226:	a807      	add	r0, sp, #28
 800c228:	f7ff ff2a 	bl	800c080 <parse_arguments>
 800c22c:	4680      	mov	r8, r0
    n = 0;
 800c22e:	2400      	movs	r4, #0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800c230:	a917      	add	r1, sp, #92	; 0x5c
 800c232:	2000      	movs	r0, #0
 800c234:	f7ff ff24 	bl	800c080 <parse_arguments>
 800c238:	4603      	mov	r3, r0
 800c23a:	b140      	cbz	r0, 800c24e <shellThread+0x9e>
      if (n >= SHELL_MAX_ARGUMENTS) {
 800c23c:	2c03      	cmp	r4, #3
 800c23e:	dcd4      	bgt.n	800c1ea <shellThread+0x3a>
      args[n++] = lp;
 800c240:	aa18      	add	r2, sp, #96	; 0x60
 800c242:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c246:	f842 3c58 	str.w	r3, [r2, #-88]
 800c24a:	3401      	adds	r4, #1
 800c24c:	e7f0      	b.n	800c230 <shellThread+0x80>
    args[n] = NULL;
 800c24e:	2200      	movs	r2, #0
 800c250:	ab18      	add	r3, sp, #96	; 0x60
 800c252:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c256:	f843 2c58 	str.w	r2, [r3, #-88]
    if (cmd != NULL) {
 800c25a:	f1b8 0f00 	cmp.w	r8, #0
 800c25e:	d0ce      	beq.n	800c1fe <shellThread+0x4e>
      if (strcmp(cmd, "help") == 0) {
 800c260:	4924      	ldr	r1, [pc, #144]	; (800c2f4 <shellThread+0x144>)
 800c262:	4640      	mov	r0, r8
 800c264:	f007 fb70 	bl	8013948 <strcmp>
 800c268:	b9c8      	cbnz	r0, 800c29e <shellThread+0xee>
        if (n > 0) {
 800c26a:	2c00      	cmp	r4, #0
 800c26c:	dc11      	bgt.n	800c292 <shellThread+0xe2>
        chprintf(chp, "Commands: help ");
 800c26e:	4922      	ldr	r1, [pc, #136]	; (800c2f8 <shellThread+0x148>)
 800c270:	4628      	mov	r0, r5
 800c272:	f7ff fdfd 	bl	800be70 <chprintf>
        list_commands(chp, shell_local_commands);
 800c276:	4921      	ldr	r1, [pc, #132]	; (800c2fc <shellThread+0x14c>)
 800c278:	4628      	mov	r0, r5
 800c27a:	f7ff fed9 	bl	800c030 <list_commands>
        if (scp != NULL)
 800c27e:	b11f      	cbz	r7, 800c288 <shellThread+0xd8>
          list_commands(chp, scp);
 800c280:	4639      	mov	r1, r7
 800c282:	4628      	mov	r0, r5
 800c284:	f7ff fed4 	bl	800c030 <list_commands>
        chprintf(chp, SHELL_NEWLINE_STR);
 800c288:	4914      	ldr	r1, [pc, #80]	; (800c2dc <shellThread+0x12c>)
 800c28a:	4628      	mov	r0, r5
 800c28c:	f7ff fdf0 	bl	800be70 <chprintf>
 800c290:	e7b5      	b.n	800c1fe <shellThread+0x4e>
          shellUsage(chp, "help");
 800c292:	4a18      	ldr	r2, [pc, #96]	; (800c2f4 <shellThread+0x144>)
 800c294:	491a      	ldr	r1, [pc, #104]	; (800c300 <shellThread+0x150>)
 800c296:	4628      	mov	r0, r5
 800c298:	f7ff fdea 	bl	800be70 <chprintf>
          continue;
 800c29c:	e7af      	b.n	800c1fe <shellThread+0x4e>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 800c29e:	ab02      	add	r3, sp, #8
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	4623      	mov	r3, r4
 800c2a4:	4642      	mov	r2, r8
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	4814      	ldr	r0, [pc, #80]	; (800c2fc <shellThread+0x14c>)
 800c2aa:	f7ff fed1 	bl	800c050 <cmdexec>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d0a5      	beq.n	800c1fe <shellThread+0x4e>
 800c2b2:	b14f      	cbz	r7, 800c2c8 <shellThread+0x118>
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
 800c2b4:	ab02      	add	r3, sp, #8
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	4623      	mov	r3, r4
 800c2ba:	4642      	mov	r2, r8
 800c2bc:	4629      	mov	r1, r5
 800c2be:	4638      	mov	r0, r7
 800c2c0:	f7ff fec6 	bl	800c050 <cmdexec>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d09a      	beq.n	800c1fe <shellThread+0x4e>
        chprintf(chp, "%s", cmd);
 800c2c8:	4642      	mov	r2, r8
 800c2ca:	490e      	ldr	r1, [pc, #56]	; (800c304 <shellThread+0x154>)
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	f7ff fdcf 	bl	800be70 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 800c2d2:	490d      	ldr	r1, [pc, #52]	; (800c308 <shellThread+0x158>)
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	f7ff fdcb 	bl	800be70 <chprintf>
 800c2da:	e790      	b.n	800c1fe <shellThread+0x4e>
 800c2dc:	0801619c 	.word	0x0801619c
 800c2e0:	08015c80 	.word	0x08015c80
 800c2e4:	08015c9c 	.word	0x08015c9c
 800c2e8:	08015ca4 	.word	0x08015ca4
 800c2ec:	20004f68 	.word	0x20004f68
 800c2f0:	08015c94 	.word	0x08015c94
 800c2f4:	08015cbc 	.word	0x08015cbc
 800c2f8:	08015cd0 	.word	0x08015cd0
 800c2fc:	080156a0 	.word	0x080156a0
 800c300:	08015cc4 	.word	0x08015cc4
 800c304:	08015ce0 	.word	0x08015ce0
 800c308:	08015ce4 	.word	0x08015ce4
 800c30c:	00000000 	.word	0x00000000

0800c310 <cmd_echo>:
#endif
}
#endif

#if (SHELL_CMD_ECHO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_echo(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c310:	b508      	push	{r3, lr}

  (void)argv;
  if (argc != 1) {
 800c312:	2901      	cmp	r1, #1
 800c314:	d004      	beq.n	800c320 <cmd_echo+0x10>
    shellUsage(chp, "echo \"message\"");
 800c316:	4a05      	ldr	r2, [pc, #20]	; (800c32c <cmd_echo+0x1c>)
 800c318:	4905      	ldr	r1, [pc, #20]	; (800c330 <cmd_echo+0x20>)
 800c31a:	f7ff fda9 	bl	800be70 <chprintf>
    return;
  }
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
}
 800c31e:	bd08      	pop	{r3, pc}
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 800c320:	6812      	ldr	r2, [r2, #0]
 800c322:	4904      	ldr	r1, [pc, #16]	; (800c334 <cmd_echo+0x24>)
 800c324:	f7ff fda4 	bl	800be70 <chprintf>
 800c328:	e7f9      	b.n	800c31e <cmd_echo+0xe>
 800c32a:	bf00      	nop
 800c32c:	08015cec 	.word	0x08015cec
 800c330:	08015cc4 	.word	0x08015cc4
 800c334:	08015cfc 	.word	0x08015cfc
 800c338:	f3af 8000 	nop.w
 800c33c:	f3af 8000 	nop.w

0800c340 <cmd_info>:
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c340:	b510      	push	{r4, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	4604      	mov	r4, r0
  if (argc > 0) {
 800c346:	2900      	cmp	r1, #0
 800c348:	dd05      	ble.n	800c356 <cmd_info+0x16>
    shellUsage(chp, "info");
 800c34a:	4a18      	ldr	r2, [pc, #96]	; (800c3ac <cmd_info+0x6c>)
 800c34c:	4918      	ldr	r1, [pc, #96]	; (800c3b0 <cmd_info+0x70>)
 800c34e:	f7ff fd8f 	bl	800be70 <chprintf>
}
 800c352:	b002      	add	sp, #8
 800c354:	bd10      	pop	{r4, pc}
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 800c356:	4a17      	ldr	r2, [pc, #92]	; (800c3b4 <cmd_info+0x74>)
 800c358:	4917      	ldr	r1, [pc, #92]	; (800c3b8 <cmd_info+0x78>)
 800c35a:	f7ff fd89 	bl	800be70 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 800c35e:	4a17      	ldr	r2, [pc, #92]	; (800c3bc <cmd_info+0x7c>)
 800c360:	4917      	ldr	r1, [pc, #92]	; (800c3c0 <cmd_info+0x80>)
 800c362:	4620      	mov	r0, r4
 800c364:	f7ff fd84 	bl	800be70 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 800c368:	4a16      	ldr	r2, [pc, #88]	; (800c3c4 <cmd_info+0x84>)
 800c36a:	4917      	ldr	r1, [pc, #92]	; (800c3c8 <cmd_info+0x88>)
 800c36c:	4620      	mov	r0, r4
 800c36e:	f7ff fd7f 	bl	800be70 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 800c372:	4a16      	ldr	r2, [pc, #88]	; (800c3cc <cmd_info+0x8c>)
 800c374:	4916      	ldr	r1, [pc, #88]	; (800c3d0 <cmd_info+0x90>)
 800c376:	4620      	mov	r0, r4
 800c378:	f7ff fd7a 	bl	800be70 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 800c37c:	4a15      	ldr	r2, [pc, #84]	; (800c3d4 <cmd_info+0x94>)
 800c37e:	4916      	ldr	r1, [pc, #88]	; (800c3d8 <cmd_info+0x98>)
 800c380:	4620      	mov	r0, r4
 800c382:	f7ff fd75 	bl	800be70 <chprintf>
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 800c386:	4a15      	ldr	r2, [pc, #84]	; (800c3dc <cmd_info+0x9c>)
 800c388:	4915      	ldr	r1, [pc, #84]	; (800c3e0 <cmd_info+0xa0>)
 800c38a:	4620      	mov	r0, r4
 800c38c:	f7ff fd70 	bl	800be70 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 800c390:	4a14      	ldr	r2, [pc, #80]	; (800c3e4 <cmd_info+0xa4>)
 800c392:	4915      	ldr	r1, [pc, #84]	; (800c3e8 <cmd_info+0xa8>)
 800c394:	4620      	mov	r0, r4
 800c396:	f7ff fd6b 	bl	800be70 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 800c39a:	4b14      	ldr	r3, [pc, #80]	; (800c3ec <cmd_info+0xac>)
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	4b14      	ldr	r3, [pc, #80]	; (800c3f0 <cmd_info+0xb0>)
 800c3a0:	4a14      	ldr	r2, [pc, #80]	; (800c3f4 <cmd_info+0xb4>)
 800c3a2:	4915      	ldr	r1, [pc, #84]	; (800c3f8 <cmd_info+0xb8>)
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f7ff fd63 	bl	800be70 <chprintf>
 800c3aa:	e7d2      	b.n	800c352 <cmd_info+0x12>
 800c3ac:	08015d04 	.word	0x08015d04
 800c3b0:	08015cc4 	.word	0x08015cc4
 800c3b4:	08015d0c 	.word	0x08015d0c
 800c3b8:	08015d14 	.word	0x08015d14
 800c3bc:	08015d28 	.word	0x08015d28
 800c3c0:	08015d70 	.word	0x08015d70
 800c3c4:	08015d84 	.word	0x08015d84
 800c3c8:	08015d90 	.word	0x08015d90
 800c3cc:	08015da4 	.word	0x08015da4
 800c3d0:	08015db0 	.word	0x08015db0
 800c3d4:	08015dc4 	.word	0x08015dc4
 800c3d8:	08015ddc 	.word	0x08015ddc
 800c3dc:	08015df0 	.word	0x08015df0
 800c3e0:	08015e1c 	.word	0x08015e1c
 800c3e4:	08015e30 	.word	0x08015e30
 800c3e8:	08015e44 	.word	0x08015e44
 800c3ec:	08015e80 	.word	0x08015e80
 800c3f0:	08015e58 	.word	0x08015e58
 800c3f4:	08015e5c 	.word	0x08015e5c
 800c3f8:	08015e68 	.word	0x08015e68
 800c3fc:	f3af 8000 	nop.w

0800c400 <cmd_threads>:
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
}
#endif

#if (SHELL_CMD_THREADS_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c404:	b086      	sub	sp, #24
 800c406:	4680      	mov	r8, r0
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 800c408:	2900      	cmp	r1, #0
 800c40a:	dd06      	ble.n	800c41a <cmd_threads+0x1a>
    shellUsage(chp, "threads");
 800c40c:	4a16      	ldr	r2, [pc, #88]	; (800c468 <cmd_threads+0x68>)
 800c40e:	4917      	ldr	r1, [pc, #92]	; (800c46c <cmd_threads+0x6c>)
 800c410:	f7ff fd2e 	bl	800be70 <chprintf>
             stklimit, (uint32_t)tp->ctx.sp, (uint32_t)tp,
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
             tp->name == NULL ? "" : tp->name);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}
 800c414:	b006      	add	sp, #24
 800c416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 800c41a:	4915      	ldr	r1, [pc, #84]	; (800c470 <cmd_threads+0x70>)
 800c41c:	f7ff fd28 	bl	800be70 <chprintf>
  tp = chRegFirstThread();
 800c420:	f7fc fdd6 	bl	8008fd0 <chRegFirstThread>
 800c424:	4604      	mov	r4, r0
 800c426:	e00e      	b.n	800c446 <cmd_threads+0x46>
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800c428:	9004      	str	r0, [sp, #16]
 800c42a:	9603      	str	r6, [sp, #12]
 800c42c:	9702      	str	r7, [sp, #8]
 800c42e:	9101      	str	r1, [sp, #4]
 800c430:	9500      	str	r5, [sp, #0]
 800c432:	4910      	ldr	r1, [pc, #64]	; (800c474 <cmd_threads+0x74>)
 800c434:	4640      	mov	r0, r8
 800c436:	f7ff fd1b 	bl	800be70 <chprintf>
    tp = chRegNextThread(tp);
 800c43a:	4620      	mov	r0, r4
 800c43c:	f7fc fdf0 	bl	8009020 <chRegNextThread>
  } while (tp != NULL);
 800c440:	4604      	mov	r4, r0
 800c442:	2800      	cmp	r0, #0
 800c444:	d0e6      	beq.n	800c414 <cmd_threads+0x14>
    uint32_t stklimit = (uint32_t)tp->wabase;
 800c446:	69e2      	ldr	r2, [r4, #28]
             stklimit, (uint32_t)tp->ctx.sp, (uint32_t)tp,
 800c448:	68e3      	ldr	r3, [r4, #12]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800c44a:	4625      	mov	r5, r4
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 800c44c:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800c450:	3901      	subs	r1, #1
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 800c452:	68a7      	ldr	r7, [r4, #8]
 800c454:	f894 c020 	ldrb.w	ip, [r4, #32]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800c458:	4807      	ldr	r0, [pc, #28]	; (800c478 <cmd_threads+0x78>)
 800c45a:	f850 602c 	ldr.w	r6, [r0, ip, lsl #2]
             tp->name == NULL ? "" : tp->name);
 800c45e:	69a0      	ldr	r0, [r4, #24]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 800c460:	2800      	cmp	r0, #0
 800c462:	d1e1      	bne.n	800c428 <cmd_threads+0x28>
 800c464:	4805      	ldr	r0, [pc, #20]	; (800c47c <cmd_threads+0x7c>)
 800c466:	e7df      	b.n	800c428 <cmd_threads+0x28>
 800c468:	08015e8c 	.word	0x08015e8c
 800c46c:	08015cc4 	.word	0x08015cc4
 800c470:	08015e94 	.word	0x08015e94
 800c474:	08015ed4 	.word	0x08015ed4
 800c478:	08015654 	.word	0x08015654
 800c47c:	08015ce8 	.word	0x08015ce8

0800c480 <cmd_mem>:
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c480:	b530      	push	{r4, r5, lr}
 800c482:	b083      	sub	sp, #12
 800c484:	4604      	mov	r4, r0
  if (argc > 0) {
 800c486:	2900      	cmp	r1, #0
 800c488:	dd05      	ble.n	800c496 <cmd_mem+0x16>
    shellUsage(chp, "mem");
 800c48a:	4a11      	ldr	r2, [pc, #68]	; (800c4d0 <cmd_mem+0x50>)
 800c48c:	4911      	ldr	r1, [pc, #68]	; (800c4d4 <cmd_mem+0x54>)
 800c48e:	f7ff fcef 	bl	800be70 <chprintf>
}
 800c492:	b003      	add	sp, #12
 800c494:	bd30      	pop	{r4, r5, pc}
  n = chHeapStatus(NULL, &total, &largest);
 800c496:	466a      	mov	r2, sp
 800c498:	a901      	add	r1, sp, #4
 800c49a:	2000      	movs	r0, #0
 800c49c:	f7fe fd00 	bl	800aea0 <chHeapStatus>
 800c4a0:	4605      	mov	r5, r0
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 800c4a2:	f7fe fbd5 	bl	800ac50 <chCoreGetStatusX>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	490b      	ldr	r1, [pc, #44]	; (800c4d8 <cmd_mem+0x58>)
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f7ff fce0 	bl	800be70 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 800c4b0:	462a      	mov	r2, r5
 800c4b2:	490a      	ldr	r1, [pc, #40]	; (800c4dc <cmd_mem+0x5c>)
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f7ff fcdb 	bl	800be70 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 800c4ba:	9a01      	ldr	r2, [sp, #4]
 800c4bc:	4908      	ldr	r1, [pc, #32]	; (800c4e0 <cmd_mem+0x60>)
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f7ff fcd6 	bl	800be70 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 800c4c4:	9a00      	ldr	r2, [sp, #0]
 800c4c6:	4907      	ldr	r1, [pc, #28]	; (800c4e4 <cmd_mem+0x64>)
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	f7ff fcd1 	bl	800be70 <chprintf>
 800c4ce:	e7e0      	b.n	800c492 <cmd_mem+0x12>
 800c4d0:	08015efc 	.word	0x08015efc
 800c4d4:	08015cc4 	.word	0x08015cc4
 800c4d8:	08015f00 	.word	0x08015f00
 800c4dc:	08015f20 	.word	0x08015f20
 800c4e0:	08015f38 	.word	0x08015f38
 800c4e4:	08015f58 	.word	0x08015f58
 800c4e8:	f3af 8000 	nop.w
 800c4ec:	f3af 8000 	nop.w

0800c4f0 <cmd_systime>:
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	4604      	mov	r4, r0
  if (argc > 0) {
 800c4f4:	2900      	cmp	r1, #0
 800c4f6:	dd04      	ble.n	800c502 <cmd_systime+0x12>
    shellUsage(chp, "systime");
 800c4f8:	4a14      	ldr	r2, [pc, #80]	; (800c54c <cmd_systime+0x5c>)
 800c4fa:	4915      	ldr	r1, [pc, #84]	; (800c550 <cmd_systime+0x60>)
 800c4fc:	f7ff fcb8 	bl	800be70 <chprintf>
}
 800c500:	bd38      	pop	{r3, r4, r5, pc}
 800c502:	2320      	movs	r3, #32
 800c504:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800c508:	f7fc fd42 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800c50c:	f7fb fa40 	bl	8007990 <_dbg_check_lock>
 800c510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c514:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  _dbg_check_unlock();
 800c516:	f7fb fa53 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800c51a:	f7fc fd41 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800c51e:	4b0d      	ldr	r3, [pc, #52]	; (800c554 <cmd_systime+0x64>)
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	429a      	cmp	r2, r3
 800c524:	d004      	beq.n	800c530 <cmd_systime+0x40>
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	6899      	ldr	r1, [r3, #8]
 800c52a:	6893      	ldr	r3, [r2, #8]
 800c52c:	4299      	cmp	r1, r3
 800c52e:	d308      	bcc.n	800c542 <cmd_systime+0x52>
 800c530:	2300      	movs	r3, #0
 800c532:	f383 8811 	msr	BASEPRI, r3
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 800c536:	462a      	mov	r2, r5
 800c538:	4907      	ldr	r1, [pc, #28]	; (800c558 <cmd_systime+0x68>)
 800c53a:	4620      	mov	r0, r4
 800c53c:	f7ff fc98 	bl	800be70 <chprintf>
 800c540:	e7de      	b.n	800c500 <cmd_systime+0x10>
 800c542:	4806      	ldr	r0, [pc, #24]	; (800c55c <cmd_systime+0x6c>)
 800c544:	f7fb f894 	bl	8007670 <chSysHalt>
 800c548:	e7f2      	b.n	800c530 <cmd_systime+0x40>
 800c54a:	bf00      	nop
 800c54c:	08015f78 	.word	0x08015f78
 800c550:	08015cc4 	.word	0x08015cc4
 800c554:	20004f68 	.word	0x20004f68
 800c558:	08015f80 	.word	0x08015f80
 800c55c:	08015694 	.word	0x08015694

0800c560 <cmd_exit>:
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c560:	b508      	push	{r3, lr}
  if (argc > 0) {
 800c562:	2900      	cmp	r1, #0
 800c564:	dd04      	ble.n	800c570 <cmd_exit+0x10>
    shellUsage(chp, "exit");
 800c566:	4a04      	ldr	r2, [pc, #16]	; (800c578 <cmd_exit+0x18>)
 800c568:	4904      	ldr	r1, [pc, #16]	; (800c57c <cmd_exit+0x1c>)
 800c56a:	f7ff fc81 	bl	800be70 <chprintf>
}
 800c56e:	bd08      	pop	{r3, pc}
  shellExit(MSG_OK);
 800c570:	2000      	movs	r0, #0
 800c572:	f7ff fdb5 	bl	800c0e0 <shellExit>
 800c576:	e7fa      	b.n	800c56e <cmd_exit+0xe>
 800c578:	08015f88 	.word	0x08015f88
 800c57c:	08015cc4 	.word	0x08015cc4

0800c580 <disk_initialize>:
/* Inidialize a Drive                                                    */

DSTATUS disk_initialize (
    BYTE pdrv         /* Physical drive number (0..) */
)
{
 800c580:	b510      	push	{r4, lr}
  DSTATUS stat;

  switch (pdrv) {
 800c582:	b968      	cbnz	r0, 800c5a0 <disk_initialize+0x20>
    return stat;
#else
  case SDC:
    stat = 0;
    /* It is initialized externally, just reads the status.*/
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800c584:	4b08      	ldr	r3, [pc, #32]	; (800c5a8 <disk_initialize+0x28>)
 800c586:	791b      	ldrb	r3, [r3, #4]
 800c588:	2b05      	cmp	r3, #5
 800c58a:	d007      	beq.n	800c59c <disk_initialize+0x1c>
      stat |= STA_NOINIT;
 800c58c:	2401      	movs	r4, #1
    if (sdcIsWriteProtected(&FATFS_HAL_DEVICE))
 800c58e:	4806      	ldr	r0, [pc, #24]	; (800c5a8 <disk_initialize+0x28>)
 800c590:	f7f3 ff96 	bl	80004c0 <sdc_lld_is_write_protected>
 800c594:	b128      	cbz	r0, 800c5a2 <disk_initialize+0x22>
      stat |=  STA_PROTECT;
 800c596:	f044 0404 	orr.w	r4, r4, #4
 800c59a:	e002      	b.n	800c5a2 <disk_initialize+0x22>
    stat = 0;
 800c59c:	2400      	movs	r4, #0
 800c59e:	e7f6      	b.n	800c58e <disk_initialize+0xe>
    return stat;
#endif
  }
  return STA_NOINIT;
 800c5a0:	2401      	movs	r4, #1
}
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	bd10      	pop	{r4, pc}
 800c5a6:	bf00      	nop
 800c5a8:	200046fc 	.word	0x200046fc
 800c5ac:	f3af 8000 	nop.w

0800c5b0 <disk_status>:
/* Return Disk Status                                                    */

DSTATUS disk_status (
    BYTE pdrv         /* Physical drive number (0..) */
)
{
 800c5b0:	b510      	push	{r4, lr}
  DSTATUS stat;

  switch (pdrv) {
 800c5b2:	b968      	cbnz	r0, 800c5d0 <disk_status+0x20>
    return stat;
#else
  case SDC:
    stat = 0;
    /* It is initialized externally, just reads the status.*/
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800c5b4:	4b08      	ldr	r3, [pc, #32]	; (800c5d8 <disk_status+0x28>)
 800c5b6:	791b      	ldrb	r3, [r3, #4]
 800c5b8:	2b05      	cmp	r3, #5
 800c5ba:	d007      	beq.n	800c5cc <disk_status+0x1c>
      stat |= STA_NOINIT;
 800c5bc:	2401      	movs	r4, #1
    if (sdcIsWriteProtected(&FATFS_HAL_DEVICE))
 800c5be:	4806      	ldr	r0, [pc, #24]	; (800c5d8 <disk_status+0x28>)
 800c5c0:	f7f3 ff7e 	bl	80004c0 <sdc_lld_is_write_protected>
 800c5c4:	b128      	cbz	r0, 800c5d2 <disk_status+0x22>
      stat |= STA_PROTECT;
 800c5c6:	f044 0404 	orr.w	r4, r4, #4
 800c5ca:	e002      	b.n	800c5d2 <disk_status+0x22>
    stat = 0;
 800c5cc:	2400      	movs	r4, #0
 800c5ce:	e7f6      	b.n	800c5be <disk_status+0xe>
    return stat;
#endif
  }
  return STA_NOINIT;
 800c5d0:	2401      	movs	r4, #1
}
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	bd10      	pop	{r4, pc}
 800c5d6:	bf00      	nop
 800c5d8:	200046fc 	.word	0x200046fc
 800c5dc:	f3af 8000 	nop.w

0800c5e0 <disk_read>:
    BYTE *buff,       /* Data buffer to store read data */
    DWORD sector,     /* Sector address (LBA) */
    UINT count        /* Number of sectors to read (1..255) */
)
{
  switch (pdrv) {
 800c5e0:	b988      	cbnz	r0, 800c606 <disk_read+0x26>
    if (mmcStopSequentialRead(&FATFS_HAL_DEVICE))
        return RES_ERROR;
    return RES_OK;
#else
  case SDC:
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800c5e2:	480a      	ldr	r0, [pc, #40]	; (800c60c <disk_read+0x2c>)
 800c5e4:	7900      	ldrb	r0, [r0, #4]
 800c5e6:	2805      	cmp	r0, #5
 800c5e8:	d001      	beq.n	800c5ee <disk_read+0xe>
      return RES_NOTRDY;
 800c5ea:	2003      	movs	r0, #3
      return RES_ERROR;
    return RES_OK;
#endif
  }
  return RES_PARERR;
}
 800c5ec:	4770      	bx	lr
{
 800c5ee:	b508      	push	{r3, lr}
 800c5f0:	4610      	mov	r0, r2
 800c5f2:	460a      	mov	r2, r1
    if (sdcRead(&FATFS_HAL_DEVICE, sector, buff, count))
 800c5f4:	4601      	mov	r1, r0
 800c5f6:	4805      	ldr	r0, [pc, #20]	; (800c60c <disk_read+0x2c>)
 800c5f8:	f7f6 faea 	bl	8002bd0 <sdcRead>
 800c5fc:	b908      	cbnz	r0, 800c602 <disk_read+0x22>
    return RES_OK;
 800c5fe:	2000      	movs	r0, #0
}
 800c600:	bd08      	pop	{r3, pc}
      return RES_ERROR;
 800c602:	2001      	movs	r0, #1
 800c604:	e7fc      	b.n	800c600 <disk_read+0x20>
  return RES_PARERR;
 800c606:	2004      	movs	r0, #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	200046fc 	.word	0x200046fc

0800c610 <disk_write>:
    const BYTE *buff, /* Data to be written */
    DWORD sector,     /* Sector address (LBA) */
    UINT count        /* Number of sectors to write (1..255) */
)
{
  switch (pdrv) {
 800c610:	b988      	cbnz	r0, 800c636 <disk_write+0x26>
    if (mmcStopSequentialWrite(&FATFS_HAL_DEVICE))
        return RES_ERROR;
    return RES_OK;
#else
  case SDC:
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800c612:	480a      	ldr	r0, [pc, #40]	; (800c63c <disk_write+0x2c>)
 800c614:	7900      	ldrb	r0, [r0, #4]
 800c616:	2805      	cmp	r0, #5
 800c618:	d001      	beq.n	800c61e <disk_write+0xe>
      return RES_NOTRDY;
 800c61a:	2003      	movs	r0, #3
      return RES_ERROR;
    return RES_OK;
#endif
  }
  return RES_PARERR;
}
 800c61c:	4770      	bx	lr
{
 800c61e:	b508      	push	{r3, lr}
 800c620:	4610      	mov	r0, r2
 800c622:	460a      	mov	r2, r1
    if (sdcWrite(&FATFS_HAL_DEVICE, sector, buff, count))
 800c624:	4601      	mov	r1, r0
 800c626:	4805      	ldr	r0, [pc, #20]	; (800c63c <disk_write+0x2c>)
 800c628:	f7f6 fb02 	bl	8002c30 <sdcWrite>
 800c62c:	b908      	cbnz	r0, 800c632 <disk_write+0x22>
    return RES_OK;
 800c62e:	2000      	movs	r0, #0
}
 800c630:	bd08      	pop	{r3, pc}
      return RES_ERROR;
 800c632:	2001      	movs	r0, #1
 800c634:	e7fc      	b.n	800c630 <disk_write+0x20>
  return RES_PARERR;
 800c636:	2004      	movs	r0, #4
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	200046fc 	.word	0x200046fc

0800c640 <disk_ioctl>:
    void *buff        /* Buffer to send/receive control data */
)
{
  (void)buff;

  switch (pdrv) {
 800c640:	b990      	cbnz	r0, 800c668 <disk_ioctl+0x28>
    default:
        return RES_PARERR;
    }
#else
  case SDC:
    switch (cmd) {
 800c642:	2901      	cmp	r1, #1
 800c644:	d006      	beq.n	800c654 <disk_ioctl+0x14>
 800c646:	b119      	cbz	r1, 800c650 <disk_ioctl+0x10>
 800c648:	2903      	cmp	r1, #3
 800c64a:	d008      	beq.n	800c65e <disk_ioctl+0x1e>
    case CTRL_TRIM:
        sdcErase(&FATFS_HAL_DEVICE, *((DWORD *)buff), *((DWORD *)buff + 1));
        return RES_OK;
#endif
    default:
        return RES_PARERR;
 800c64c:	2004      	movs	r0, #4
    }
#endif
  }
  return RES_PARERR;
}
 800c64e:	4770      	bx	lr
        return RES_OK;
 800c650:	2000      	movs	r0, #0
 800c652:	4770      	bx	lr
        *((DWORD *)buff) = mmcsdGetCardCapacity(&FATFS_HAL_DEVICE);
 800c654:	4b05      	ldr	r3, [pc, #20]	; (800c66c <disk_ioctl+0x2c>)
 800c656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c658:	6013      	str	r3, [r2, #0]
        return RES_OK;
 800c65a:	2000      	movs	r0, #0
 800c65c:	4770      	bx	lr
        *((DWORD *)buff) = 256; /* 512b blocks in one erase block */
 800c65e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c662:	6013      	str	r3, [r2, #0]
        return RES_OK;
 800c664:	2000      	movs	r0, #0
 800c666:	4770      	bx	lr
  return RES_PARERR;
 800c668:	2004      	movs	r0, #4
 800c66a:	4770      	bx	lr
 800c66c:	200046fc 	.word	0x200046fc

0800c670 <get_fattime>:

DWORD get_fattime(void) {
 800c670:	b500      	push	{lr}
 800c672:	b083      	sub	sp, #12
#if HAL_USE_RTC
    RTCDateTime timespec;

    rtcGetTime(&RTCD1, &timespec);
 800c674:	4669      	mov	r1, sp
 800c676:	4804      	ldr	r0, [pc, #16]	; (800c688 <get_fattime+0x18>)
 800c678:	f7f5 fec2 	bl	8002400 <rtcGetTime>
    return rtcConvertDateTimeToFAT(&timespec);
 800c67c:	4668      	mov	r0, sp
 800c67e:	f7f5 ff97 	bl	80025b0 <rtcConvertDateTimeToFAT>
#else
    return ((uint32_t)0 | (1 << 16)) | (1 << 21); /* wrong but valid time */
#endif
}
 800c682:	b003      	add	sp, #12
 800c684:	f85d fb04 	ldr.w	pc, [sp], #4
 800c688:	200046c0 	.word	0x200046c0
 800c68c:	00000000 	.word	0x00000000

0800c690 <ff_memalloc>:

#if FF_USE_LFN == 3	/* LFN with a working buffer on the heap */
/*------------------------------------------------------------------------*/
/* Allocate a memory block                                                */
/*------------------------------------------------------------------------*/
void *ff_memalloc(UINT size) {
 800c690:	b508      	push	{r3, lr}
 800c692:	2208      	movs	r2, #8
 800c694:	4601      	mov	r1, r0
 800c696:	2000      	movs	r0, #0
 800c698:	f7fe fb12 	bl	800acc0 <chHeapAllocAligned>

  return chHeapAlloc(NULL, size);
}
 800c69c:	bd08      	pop	{r3, pc}
 800c69e:	bf00      	nop

0800c6a0 <ff_memfree>:

/*------------------------------------------------------------------------*/
/* Free a memory block                                                    */
/*------------------------------------------------------------------------*/
void ff_memfree(void *mblock) {
 800c6a0:	b508      	push	{r3, lr}

  chHeapFree(mblock);
 800c6a2:	f7fe fb9d 	bl	800ade0 <chHeapFree>
}
 800c6a6:	bd08      	pop	{r3, pc}
	...

0800c6b0 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 800c6b0:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 800c6b2:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800c6b4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	f3af 8000 	nop.w

0800c6c0 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800c6c0:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 800c6c2:	7883      	ldrb	r3, [r0, #2]
 800c6c4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 800c6c8:	7843      	ldrb	r3, [r0, #1]
 800c6ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800c6ce:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800c6d0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	f3af 8000 	nop.w
 800c6dc:	f3af 8000 	nop.w

0800c6e0 <ld_qword>:

#if FF_FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800c6e0:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
	QWORD rv;

	rv = ptr[7];
 800c6e4:	79c2      	ldrb	r2, [r0, #7]
	rv = rv << 8 | ptr[6];
 800c6e6:	2500      	movs	r5, #0
 800c6e8:	0214      	lsls	r4, r2, #8
 800c6ea:	7982      	ldrb	r2, [r0, #6]
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	ea44 0b02 	orr.w	fp, r4, r2
 800c6f2:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[5];
 800c6f6:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800c6fa:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 800c6fe:	ea4f 220b 	mov.w	r2, fp, lsl #8
 800c702:	7944      	ldrb	r4, [r0, #5]
 800c704:	2500      	movs	r5, #0
 800c706:	ea44 0b02 	orr.w	fp, r4, r2
 800c70a:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[4];
 800c70e:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800c712:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 800c716:	ea4f 220b 	mov.w	r2, fp, lsl #8
 800c71a:	7904      	ldrb	r4, [r0, #4]
 800c71c:	2500      	movs	r5, #0
 800c71e:	ea44 0b02 	orr.w	fp, r4, r2
 800c722:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[3];
 800c726:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800c72a:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 800c72e:	ea4f 220b 	mov.w	r2, fp, lsl #8
 800c732:	78c4      	ldrb	r4, [r0, #3]
 800c734:	2500      	movs	r5, #0
 800c736:	ea44 0b02 	orr.w	fp, r4, r2
 800c73a:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[2];
 800c73e:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800c742:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 800c746:	ea4f 220b 	mov.w	r2, fp, lsl #8
 800c74a:	7884      	ldrb	r4, [r0, #2]
 800c74c:	2500      	movs	r5, #0
 800c74e:	ea44 0602 	orr.w	r6, r4, r2
 800c752:	ea45 0703 	orr.w	r7, r5, r3
	rv = rv << 8 | ptr[1];
 800c756:	ea4f 2c07 	mov.w	ip, r7, lsl #8
 800c75a:	ea4c 6c16 	orr.w	ip, ip, r6, lsr #24
 800c75e:	ea4f 2b06 	mov.w	fp, r6, lsl #8
 800c762:	7844      	ldrb	r4, [r0, #1]
 800c764:	2500      	movs	r5, #0
 800c766:	ea4b 0204 	orr.w	r2, fp, r4
 800c76a:	ea4c 0305 	orr.w	r3, ip, r5
	rv = rv << 8 | ptr[0];
 800c76e:	021d      	lsls	r5, r3, #8
 800c770:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800c774:	0214      	lsls	r4, r2, #8
 800c776:	7802      	ldrb	r2, [r0, #0]
 800c778:	2300      	movs	r3, #0
	return rv;
}
 800c77a:	ea42 0004 	orr.w	r0, r2, r4
 800c77e:	ea43 0105 	orr.w	r1, r3, r5
 800c782:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 800c786:	4770      	bx	lr
 800c788:	f3af 8000 	nop.w
 800c78c:	f3af 8000 	nop.w

0800c790 <st_word>:

#if !FF_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800c790:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 800c792:	0a09      	lsrs	r1, r1, #8
 800c794:	7041      	strb	r1, [r0, #1]
}
 800c796:	4770      	bx	lr
 800c798:	f3af 8000 	nop.w
 800c79c:	f3af 8000 	nop.w

0800c7a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800c7a0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7a2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800c7a6:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7a8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800c7ac:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800c7ae:	0e09      	lsrs	r1, r1, #24
 800c7b0:	70c1      	strb	r1, [r0, #3]
}
 800c7b2:	4770      	bx	lr
 800c7b4:	f3af 8000 	nop.w
 800c7b8:	f3af 8000 	nop.w
 800c7bc:	f3af 8000 	nop.w

0800c7c0 <st_qword>:

#if FF_FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800c7c0:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7c2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c7c6:	7041      	strb	r1, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7c8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800c7cc:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7ce:	0e12      	lsrs	r2, r2, #24
 800c7d0:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7d2:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7d4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c7d8:	7142      	strb	r2, [r0, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7da:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c7de:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
 800c7e0:	0e1b      	lsrs	r3, r3, #24
 800c7e2:	71c3      	strb	r3, [r0, #7]
}
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	f3af 8000 	nop.w
 800c7ec:	f3af 8000 	nop.w

0800c7f0 <mem_cpy>:
void mem_cpy (void* dst, const void* src, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	b12a      	cbz	r2, 800c800 <mem_cpy+0x10>
		do {
			*d++ = *s++;
 800c7f4:	780a      	ldrb	r2, [r1, #0]
 800c7f6:	7002      	strb	r2, [r0, #0]
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	3101      	adds	r1, #1
		} while (--cnt);
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	d1f9      	bne.n	800c7f4 <mem_cpy+0x4>
	}
}
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	f3af 8000 	nop.w
 800c808:	f3af 8000 	nop.w
 800c80c:	f3af 8000 	nop.w

0800c810 <mem_set>:
void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800c810:	7001      	strb	r1, [r0, #0]
 800c812:	3001      	adds	r0, #1
	} while (--cnt);
 800c814:	3a01      	subs	r2, #1
 800c816:	d1fb      	bne.n	800c810 <mem_set>
}
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	f3af 8000 	nop.w

0800c820 <mem_cmp>:


/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 800c820:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800c822:	1c45      	adds	r5, r0, #1
 800c824:	7803      	ldrb	r3, [r0, #0]
 800c826:	7808      	ldrb	r0, [r1, #0]
 800c828:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 800c82a:	3a01      	subs	r2, #1
 800c82c:	d004      	beq.n	800c838 <mem_cmp+0x18>
 800c82e:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
 800c830:	4628      	mov	r0, r5
 800c832:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
 800c834:	2b00      	cmp	r3, #0
 800c836:	d0f4      	beq.n	800c822 <mem_cmp+0x2>

	return r;
}
 800c838:	4618      	mov	r0, r3
 800c83a:	bc30      	pop	{r4, r5}
 800c83c:	4770      	bx	lr
 800c83e:	bf00      	nop

0800c840 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
 800c840:	e000      	b.n	800c844 <chk_chr+0x4>
 800c842:	3001      	adds	r0, #1
 800c844:	7803      	ldrb	r3, [r0, #0]
 800c846:	b10b      	cbz	r3, 800c84c <chk_chr+0xc>
 800c848:	428b      	cmp	r3, r1
 800c84a:	d1fa      	bne.n	800c842 <chk_chr+0x2>
	return *str;
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	4770      	bx	lr

0800c850 <dbc_1st>:
	}
#else					/* SBCS fixed code page */
	if (c) return 0;	/* Always false */
#endif
	return 0;
}
 800c850:	2000      	movs	r0, #0
 800c852:	4770      	bx	lr
 800c854:	f3af 8000 	nop.w
 800c858:	f3af 8000 	nop.w
 800c85c:	f3af 8000 	nop.w

0800c860 <dbc_2nd>:
	}
#else					/* SBCS fixed code page */
	if (c) return 0;	/* Always false */
#endif
	return 0;
}
 800c860:	2000      	movs	r0, #0
 800c862:	4770      	bx	lr
 800c864:	f3af 8000 	nop.w
 800c868:	f3af 8000 	nop.w
 800c86c:	f3af 8000 	nop.w

0800c870 <clst2sect>:
DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
 800c870:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c872:	69c3      	ldr	r3, [r0, #28]
 800c874:	3b02      	subs	r3, #2
 800c876:	428b      	cmp	r3, r1
 800c878:	d904      	bls.n	800c884 <clst2sect+0x14>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 800c87a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c87c:	8940      	ldrh	r0, [r0, #10]
 800c87e:	fb01 3000 	mla	r0, r1, r0, r3
 800c882:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c884:	2000      	movs	r0, #0
}
 800c886:	4770      	bx	lr
 800c888:	f3af 8000 	nop.w
 800c88c:	f3af 8000 	nop.w

0800c890 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c890:	b510      	push	{r4, lr}
 800c892:	4619      	mov	r1, r3
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c894:	6803      	ldr	r3, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c896:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800c898:	3404      	adds	r4, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c89a:	0a50      	lsrs	r0, r2, #9
 800c89c:	895a      	ldrh	r2, [r3, #10]
 800c89e:	2300      	movs	r3, #0
 800c8a0:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
 800c8a4:	0a49      	lsrs	r1, r1, #9
 800c8a6:	f006 fe23 	bl	80134f0 <__aeabi_uldivmod>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c8aa:	6823      	ldr	r3, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c8ac:	b133      	cbz	r3, 800c8bc <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 800c8ae:	4298      	cmp	r0, r3
 800c8b0:	d302      	bcc.n	800c8b8 <clmt_clust+0x28>
		cl -= ncl; tbl++;		/* Next fragment */
 800c8b2:	1ac0      	subs	r0, r0, r3
 800c8b4:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c8b6:	e7f8      	b.n	800c8aa <clmt_clust+0x1a>
	}
	return cl + *tbl;	/* Return the cluster number */
 800c8b8:	6863      	ldr	r3, [r4, #4]
 800c8ba:	4403      	add	r3, r0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	bd10      	pop	{r4, pc}

0800c8c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c8c6:	f101 001a 	add.w	r0, r1, #26
 800c8ca:	f7ff fef1 	bl	800c6b0 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 800c8ce:	7833      	ldrb	r3, [r6, #0]
 800c8d0:	2b03      	cmp	r3, #3
 800c8d2:	d000      	beq.n	800c8d6 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800c8d4:	bd70      	pop	{r4, r5, r6, pc}
 800c8d6:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c8d8:	f105 0014 	add.w	r0, r5, #20
 800c8dc:	f7ff fee8 	bl	800c6b0 <ld_word>
 800c8e0:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800c8e4:	e7f6      	b.n	800c8d4 <ld_clust+0x14>
 800c8e6:	bf00      	nop
 800c8e8:	f3af 8000 	nop.w
 800c8ec:	f3af 8000 	nop.w

0800c8f0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c8f0:	b570      	push	{r4, r5, r6, lr}
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	460c      	mov	r4, r1
 800c8f6:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c8f8:	b291      	uxth	r1, r2
 800c8fa:	f104 001a 	add.w	r0, r4, #26
 800c8fe:	f7ff ff47 	bl	800c790 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c902:	7833      	ldrb	r3, [r6, #0]
 800c904:	2b03      	cmp	r3, #3
 800c906:	d000      	beq.n	800c90a <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 800c908:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c90a:	0c29      	lsrs	r1, r5, #16
 800c90c:	f104 0014 	add.w	r0, r4, #20
 800c910:	f7ff ff3e 	bl	800c790 <st_word>
}
 800c914:	e7f8      	b.n	800c908 <st_clust+0x18>
 800c916:	bf00      	nop
 800c918:	f3af 8000 	nop.w
 800c91c:	f3af 8000 	nop.w

0800c920 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c924:	4607      	mov	r7, r0
 800c926:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c928:	f101 001a 	add.w	r0, r1, #26
 800c92c:	f7ff fec0 	bl	800c6b0 <ld_word>
 800c930:	bb60      	cbnz	r0, 800c98c <pick_lfn+0x6c>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c932:	7835      	ldrb	r5, [r6, #0]
 800c934:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 800c938:	3d01      	subs	r5, #1
 800c93a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800c93e:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c942:	f04f 0801 	mov.w	r8, #1
 800c946:	2400      	movs	r4, #0
 800c948:	e004      	b.n	800c954 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c94a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c94e:	4298      	cmp	r0, r3
 800c950:	d121      	bne.n	800c996 <pick_lfn+0x76>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c952:	3401      	adds	r4, #1
 800c954:	2c0c      	cmp	r4, #12
 800c956:	d80e      	bhi.n	800c976 <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c958:	4b12      	ldr	r3, [pc, #72]	; (800c9a4 <pick_lfn+0x84>)
 800c95a:	5d18      	ldrb	r0, [r3, r4]
 800c95c:	4430      	add	r0, r6
 800c95e:	f7ff fea7 	bl	800c6b0 <ld_word>
		if (wc) {
 800c962:	f1b8 0f00 	cmp.w	r8, #0
 800c966:	d0f0      	beq.n	800c94a <pick_lfn+0x2a>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
 800c968:	2dfe      	cmp	r5, #254	; 0xfe
 800c96a:	d812      	bhi.n	800c992 <pick_lfn+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c96c:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 800c970:	4680      	mov	r8, r0
 800c972:	3501      	adds	r5, #1
 800c974:	e7ed      	b.n	800c952 <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c976:	7833      	ldrb	r3, [r6, #0]
 800c978:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c97c:	d00d      	beq.n	800c99a <pick_lfn+0x7a>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
 800c97e:	2dfe      	cmp	r5, #254	; 0xfe
 800c980:	d80d      	bhi.n	800c99e <pick_lfn+0x7e>
		lfnbuf[i] = 0;
 800c982:	2300      	movs	r3, #0
 800c984:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 800c988:	2001      	movs	r0, #1
 800c98a:	e000      	b.n	800c98e <pick_lfn+0x6e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c98c:	2000      	movs	r0, #0
}
 800c98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
 800c992:	2000      	movs	r0, #0
 800c994:	e7fb      	b.n	800c98e <pick_lfn+0x6e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c996:	2000      	movs	r0, #0
 800c998:	e7f9      	b.n	800c98e <pick_lfn+0x6e>
	return 1;		/* The part of LFN is valid */
 800c99a:	2001      	movs	r0, #1
 800c99c:	e7f7      	b.n	800c98e <pick_lfn+0x6e>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e7f5      	b.n	800c98e <pick_lfn+0x6e>
 800c9a2:	bf00      	nop
 800c9a4:	080156d8 	.word	0x080156d8
 800c9a8:	f3af 8000 	nop.w
 800c9ac:	f3af 8000 	nop.w

0800c9b0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9b4:	4680      	mov	r8, r0
 800c9b6:	460f      	mov	r7, r1
 800c9b8:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c9ba:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c9bc:	230f      	movs	r3, #15
 800c9be:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 800c9c0:	2400      	movs	r4, #0
 800c9c2:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 800c9c4:	4621      	mov	r1, r4
 800c9c6:	f107 001a 	add.w	r0, r7, #26
 800c9ca:	f7ff fee1 	bl	800c790 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c9ce:	f109 36ff 	add.w	r6, r9, #4294967295
 800c9d2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800c9d6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 800c9da:	4625      	mov	r5, r4
 800c9dc:	e002      	b.n	800c9e4 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 800c9de:	3401      	adds	r4, #1
 800c9e0:	2c0c      	cmp	r4, #12
 800c9e2:	d811      	bhi.n	800ca08 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c9e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c9e8:	429d      	cmp	r5, r3
 800c9ea:	d002      	beq.n	800c9f2 <put_lfn+0x42>
 800c9ec:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 800c9f0:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c9f2:	4b0c      	ldr	r3, [pc, #48]	; (800ca24 <put_lfn+0x74>)
 800c9f4:	5d18      	ldrb	r0, [r3, r4]
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	4438      	add	r0, r7
 800c9fa:	f7ff fec9 	bl	800c790 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c9fe:	2d00      	cmp	r5, #0
 800ca00:	d1ed      	bne.n	800c9de <put_lfn+0x2e>
 800ca02:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800ca06:	e7ea      	b.n	800c9de <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ca08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca0c:	429d      	cmp	r5, r3
 800ca0e:	d002      	beq.n	800ca16 <put_lfn+0x66>
 800ca10:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 800ca14:	b90b      	cbnz	r3, 800ca1a <put_lfn+0x6a>
 800ca16:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ca1a:	f887 9000 	strb.w	r9, [r7]
}
 800ca1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca22:	bf00      	nop
 800ca24:	080156d8 	.word	0x080156d8
 800ca28:	f3af 8000 	nop.w
 800ca2c:	f3af 8000 	nop.w

0800ca30 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ca30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca32:	b083      	sub	sp, #12
 800ca34:	4607      	mov	r7, r0
 800ca36:	4615      	mov	r5, r2
 800ca38:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ca3a:	220b      	movs	r2, #11
 800ca3c:	f7ff fed8 	bl	800c7f0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ca40:	2c05      	cmp	r4, #5
 800ca42:	d811      	bhi.n	800ca68 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 800ca44:	2607      	movs	r6, #7
 800ca46:	e01d      	b.n	800ca84 <gen_numname+0x54>
 800ca48:	3201      	adds	r2, #1
 800ca4a:	2a0f      	cmp	r2, #15
 800ca4c:	d80c      	bhi.n	800ca68 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 800ca4e:	f003 0101 	and.w	r1, r3, #1
 800ca52:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
 800ca56:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ca58:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800ca5c:	d0f4      	beq.n	800ca48 <gen_numname+0x18>
 800ca5e:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 800ca62:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 800ca66:	e7ef      	b.n	800ca48 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 800ca68:	882b      	ldrh	r3, [r5, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d0ea      	beq.n	800ca44 <gen_numname+0x14>
			wc = *lfn++;
 800ca6e:	3502      	adds	r5, #2
			for (i = 0; i < 16; i++) {
 800ca70:	2200      	movs	r2, #0
 800ca72:	e7ea      	b.n	800ca4a <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 800ca74:	1e75      	subs	r5, r6, #1
 800ca76:	aa02      	add	r2, sp, #8
 800ca78:	4432      	add	r2, r6
 800ca7a:	f802 3c08 	strb.w	r3, [r2, #-8]
		seq /= 16;
	} while (seq);
 800ca7e:	0924      	lsrs	r4, r4, #4
 800ca80:	d009      	beq.n	800ca96 <gen_numname+0x66>
		ns[i--] = c;
 800ca82:	462e      	mov	r6, r5
		c = (BYTE)((seq % 16) + '0');
 800ca84:	f004 020f 	and.w	r2, r4, #15
 800ca88:	f102 0330 	add.w	r3, r2, #48	; 0x30
		if (c > '9') c += 7;
 800ca8c:	2b39      	cmp	r3, #57	; 0x39
 800ca8e:	d9f1      	bls.n	800ca74 <gen_numname+0x44>
 800ca90:	f102 0337 	add.w	r3, r2, #55	; 0x37
 800ca94:	e7ee      	b.n	800ca74 <gen_numname+0x44>
	ns[i] = '~';
 800ca96:	227e      	movs	r2, #126	; 0x7e
 800ca98:	ab02      	add	r3, sp, #8
 800ca9a:	442b      	add	r3, r5
 800ca9c:	f803 2c08 	strb.w	r2, [r3, #-8]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800caa0:	e000      	b.n	800caa4 <gen_numname+0x74>
 800caa2:	3401      	adds	r4, #1
 800caa4:	42ac      	cmp	r4, r5
 800caa6:	d211      	bcs.n	800cacc <gen_numname+0x9c>
 800caa8:	5d38      	ldrb	r0, [r7, r4]
 800caaa:	2820      	cmp	r0, #32
 800caac:	d00e      	beq.n	800cacc <gen_numname+0x9c>
		if (dbc_1st(dst[j])) {
 800caae:	f7ff fecf 	bl	800c850 <dbc_1st>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	d0f5      	beq.n	800caa2 <gen_numname+0x72>
			if (j == i - 1) break;
 800cab6:	1eb3      	subs	r3, r6, #2
 800cab8:	42a3      	cmp	r3, r4
 800caba:	d007      	beq.n	800cacc <gen_numname+0x9c>
			j++;
 800cabc:	3401      	adds	r4, #1
 800cabe:	e7f0      	b.n	800caa2 <gen_numname+0x72>
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cac0:	2220      	movs	r2, #32
 800cac2:	1c63      	adds	r3, r4, #1
 800cac4:	553a      	strb	r2, [r7, r4]
	} while (j < 8);
 800cac6:	2b07      	cmp	r3, #7
 800cac8:	d808      	bhi.n	800cadc <gen_numname+0xac>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800caca:	461c      	mov	r4, r3
 800cacc:	2d07      	cmp	r5, #7
 800cace:	d8f7      	bhi.n	800cac0 <gen_numname+0x90>
 800cad0:	ab02      	add	r3, sp, #8
 800cad2:	442b      	add	r3, r5
 800cad4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800cad8:	3501      	adds	r5, #1
 800cada:	e7f2      	b.n	800cac2 <gen_numname+0x92>
}
 800cadc:	b003      	add	sp, #12
 800cade:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cae0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cae0:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 800cae2:	220b      	movs	r2, #11
	BYTE sum = 0;
 800cae4:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cae6:	01c3      	lsls	r3, r0, #7
 800cae8:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800caec:	7808      	ldrb	r0, [r1, #0]
 800caee:	fa50 f383 	uxtab	r3, r0, r3
 800caf2:	b2d8      	uxtb	r0, r3
 800caf4:	3101      	adds	r1, #1
	} while (--n);
 800caf6:	3a01      	subs	r2, #1
 800caf8:	d1f5      	bne.n	800cae6 <sum_sfn+0x6>
	return sum;
}
 800cafa:	4770      	bx	lr
 800cafc:	f3af 8000 	nop.w

0800cb00 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800cb00:	b430      	push	{r4, r5}
 800cb02:	4605      	mov	r5, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800cb04:	7841      	ldrb	r1, [r0, #1]
 800cb06:	3101      	adds	r1, #1
 800cb08:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	e001      	b.n	800cb14 <xdir_sum+0x14>
		if (i == XDIR_SetSum) {	/* Skip sum field */
			i++;
 800cb10:	3301      	adds	r3, #1
	for (i = sum = 0; i < szblk; i++) {
 800cb12:	3301      	adds	r3, #1
 800cb14:	428b      	cmp	r3, r1
 800cb16:	d209      	bcs.n	800cb2c <xdir_sum+0x2c>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	d0f9      	beq.n	800cb10 <xdir_sum+0x10>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800cb1c:	0842      	lsrs	r2, r0, #1
 800cb1e:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
 800cb22:	5cec      	ldrb	r4, [r5, r3]
 800cb24:	fa14 f282 	uxtah	r2, r4, r2
 800cb28:	b290      	uxth	r0, r2
 800cb2a:	e7f2      	b.n	800cb12 <xdir_sum+0x12>
		}
	}
	return sum;
}
 800cb2c:	bc30      	pop	{r4, r5}
 800cb2e:	4770      	bx	lr

0800cb30 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cb30:	6801      	ldr	r1, [r0, #0]
 800cb32:	b109      	cbz	r1, 800cb38 <get_ldnumber+0x8>
		for (tt = *path; (UINT)*tt >= (FF_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find a colon in the path */
 800cb34:	460a      	mov	r2, r1
 800cb36:	e003      	b.n	800cb40 <get_ldnumber+0x10>
	int vol = -1;
 800cb38:	f04f 33ff 	mov.w	r3, #4294967295
 800cb3c:	e008      	b.n	800cb50 <get_ldnumber+0x20>
		for (tt = *path; (UINT)*tt >= (FF_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find a colon in the path */
 800cb3e:	3201      	adds	r2, #1
 800cb40:	7813      	ldrb	r3, [r2, #0]
 800cb42:	2b1f      	cmp	r3, #31
 800cb44:	d901      	bls.n	800cb4a <get_ldnumber+0x1a>
 800cb46:	2b3a      	cmp	r3, #58	; 0x3a
 800cb48:	d1f9      	bne.n	800cb3e <get_ldnumber+0xe>
		if (*tt == ':') {	/* If a colon is exist in the path name */
 800cb4a:	2b3a      	cmp	r3, #58	; 0x3a
 800cb4c:	d002      	beq.n	800cb54 <get_ldnumber+0x24>
#endif
		} else {	/* No volume id and use default drive */
#if FF_FS_RPATH != 0 && FF_VOLUMES >= 2
			vol = CurrVol;	/* Current drive */
#else
			vol = 0;		/* Drive 0 */
 800cb4e:	2300      	movs	r3, #0
#endif
		}
	}
	return vol;
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	4770      	bx	lr
{
 800cb54:	b410      	push	{r4}
			i = *tp++;
 800cb56:	1c4c      	adds	r4, r1, #1
 800cb58:	780b      	ldrb	r3, [r1, #0]
			if (IsDigit(i) && tp == tt) {	/* Is there a numeric drive id + colon? */
 800cb5a:	3b30      	subs	r3, #48	; 0x30
 800cb5c:	2b09      	cmp	r3, #9
 800cb5e:	d807      	bhi.n	800cb70 <get_ldnumber+0x40>
 800cb60:	42a2      	cmp	r2, r4
 800cb62:	d108      	bne.n	800cb76 <get_ldnumber+0x46>
				if ((i -= '0') < FF_VOLUMES) {	/* If drive id is found, get the value and strip it */
 800cb64:	b953      	cbnz	r3, 800cb7c <get_ldnumber+0x4c>
					*path = ++tt;
 800cb66:	3201      	adds	r2, #1
 800cb68:	6002      	str	r2, [r0, #0]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	bc10      	pop	{r4}
 800cb6e:	4770      	bx	lr
	int vol = -1;
 800cb70:	f04f 33ff 	mov.w	r3, #4294967295
 800cb74:	e7f9      	b.n	800cb6a <get_ldnumber+0x3a>
 800cb76:	f04f 33ff 	mov.w	r3, #4294967295
 800cb7a:	e7f6      	b.n	800cb6a <get_ldnumber+0x3a>
 800cb7c:	f04f 33ff 	mov.w	r3, #4294967295
	return vol;
 800cb80:	e7f3      	b.n	800cb6a <get_ldnumber+0x3a>
 800cb82:	bf00      	nop
 800cb84:	f3af 8000 	nop.w
 800cb88:	f3af 8000 	nop.w
 800cb8c:	f3af 8000 	nop.w

0800cb90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,	/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs		/* Pointer to pointer to the owner filesystem object to return */
)
{
 800cb90:	b538      	push	{r3, r4, r5, lr}
 800cb92:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cb94:	b1a8      	cbz	r0, 800cbc2 <validate+0x32>
 800cb96:	4604      	mov	r4, r0
 800cb98:	6803      	ldr	r3, [r0, #0]
 800cb9a:	b1ab      	cbz	r3, 800cbc8 <validate+0x38>
 800cb9c:	781a      	ldrb	r2, [r3, #0]
 800cb9e:	b1aa      	cbz	r2, 800cbcc <validate+0x3c>
 800cba0:	8881      	ldrh	r1, [r0, #4]
 800cba2:	88da      	ldrh	r2, [r3, #6]
 800cba4:	4291      	cmp	r1, r2
 800cba6:	d003      	beq.n	800cbb0 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800cba8:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cbaa:	2300      	movs	r3, #0
 800cbac:	602b      	str	r3, [r5, #0]
	return res;
}
 800cbae:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cbb0:	7858      	ldrb	r0, [r3, #1]
 800cbb2:	f7ff fcfd 	bl	800c5b0 <disk_status>
 800cbb6:	f010 0f01 	tst.w	r0, #1
 800cbba:	d10a      	bne.n	800cbd2 <validate+0x42>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cbbc:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	e7f4      	b.n	800cbac <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800cbc2:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	e7f1      	b.n	800cbac <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800cbc8:	2009      	movs	r0, #9
 800cbca:	e7ef      	b.n	800cbac <validate+0x1c>
 800cbcc:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cbce:	2300      	movs	r3, #0
 800cbd0:	e7ec      	b.n	800cbac <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800cbd2:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	e7e9      	b.n	800cbac <validate+0x1c>
 800cbd8:	f3af 8000 	nop.w
 800cbdc:	f3af 8000 	nop.w

0800cbe0 <sync_window>:
{
 800cbe0:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty */
 800cbe2:	78c3      	ldrb	r3, [r0, #3]
 800cbe4:	b90b      	cbnz	r3, 800cbea <sync_window+0xa>
	FRESULT res = FR_OK;
 800cbe6:	2000      	movs	r0, #0
}
 800cbe8:	bd38      	pop	{r3, r4, r5, pc}
 800cbea:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 800cbec:	f100 0538 	add.w	r5, r0, #56	; 0x38
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cbf4:	4629      	mov	r1, r5
 800cbf6:	7840      	ldrb	r0, [r0, #1]
 800cbf8:	f7ff fd0a 	bl	800c610 <disk_write>
 800cbfc:	b9a0      	cbnz	r0, 800cc28 <sync_window+0x48>
			fs->wflag = 0;	/* Clear window dirty flag */
 800cbfe:	2300      	movs	r3, #0
 800cc00:	70e3      	strb	r3, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800cc02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cc06:	1acb      	subs	r3, r1, r3
 800cc08:	6a22      	ldr	r2, [r4, #32]
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d20e      	bcs.n	800cc2c <sync_window+0x4c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800cc0e:	78a3      	ldrb	r3, [r4, #2]
 800cc10:	2b02      	cmp	r3, #2
 800cc12:	d001      	beq.n	800cc18 <sync_window+0x38>
	FRESULT res = FR_OK;
 800cc14:	2000      	movs	r0, #0
 800cc16:	e7e7      	b.n	800cbe8 <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800cc18:	2301      	movs	r3, #1
 800cc1a:	440a      	add	r2, r1
 800cc1c:	4629      	mov	r1, r5
 800cc1e:	7860      	ldrb	r0, [r4, #1]
 800cc20:	f7ff fcf6 	bl	800c610 <disk_write>
	FRESULT res = FR_OK;
 800cc24:	2000      	movs	r0, #0
 800cc26:	e7df      	b.n	800cbe8 <sync_window+0x8>
			res = FR_DISK_ERR;
 800cc28:	2001      	movs	r0, #1
 800cc2a:	e7dd      	b.n	800cbe8 <sync_window+0x8>
	FRESULT res = FR_OK;
 800cc2c:	2000      	movs	r0, #0
 800cc2e:	e7db      	b.n	800cbe8 <sync_window+0x8>

0800cc30 <move_window>:
{
 800cc30:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cc32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cc34:	428b      	cmp	r3, r1
 800cc36:	d012      	beq.n	800cc5e <move_window+0x2e>
 800cc38:	4604      	mov	r4, r0
 800cc3a:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800cc3c:	f7ff ffd0 	bl	800cbe0 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cc40:	4606      	mov	r6, r0
 800cc42:	b968      	cbnz	r0, 800cc60 <move_window+0x30>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 800cc44:	2301      	movs	r3, #1
 800cc46:	462a      	mov	r2, r5
 800cc48:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800cc4c:	7860      	ldrb	r0, [r4, #1]
 800cc4e:	f7ff fcc7 	bl	800c5e0 <disk_read>
 800cc52:	b110      	cbz	r0, 800cc5a <move_window+0x2a>
				res = FR_DISK_ERR;
 800cc54:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 800cc56:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800cc5a:	6365      	str	r5, [r4, #52]	; 0x34
 800cc5c:	e000      	b.n	800cc60 <move_window+0x30>
	FRESULT res = FR_OK;
 800cc5e:	2600      	movs	r6, #0
}
 800cc60:	4630      	mov	r0, r6
 800cc62:	bd70      	pop	{r4, r5, r6, pc}
 800cc64:	f3af 8000 	nop.w
 800cc68:	f3af 8000 	nop.w
 800cc6c:	f3af 8000 	nop.w

0800cc70 <check_fs>:
{
 800cc70:	b510      	push	{r4, lr}
 800cc72:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cc74:	2300      	movs	r3, #0
 800cc76:	70c3      	strb	r3, [r0, #3]
 800cc78:	f04f 33ff 	mov.w	r3, #4294967295
 800cc7c:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cc7e:	f7ff ffd7 	bl	800cc30 <move_window>
 800cc82:	bb40      	cbnz	r0, 800ccd6 <check_fs+0x66>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cc84:	f204 2036 	addw	r0, r4, #566	; 0x236
 800cc88:	f7ff fd12 	bl	800c6b0 <ld_word>
 800cc8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cc90:	4298      	cmp	r0, r3
 800cc92:	d122      	bne.n	800ccda <check_fs+0x6a>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 800cc94:	220b      	movs	r2, #11
 800cc96:	4915      	ldr	r1, [pc, #84]	; (800ccec <check_fs+0x7c>)
 800cc98:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800cc9c:	f7ff fdc0 	bl	800c820 <mem_cmp>
 800cca0:	b1e8      	cbz	r0, 800ccde <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {	/* Valid JumpBoot code? */
 800cca2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800cca6:	2be9      	cmp	r3, #233	; 0xe9
 800cca8:	d005      	beq.n	800ccb6 <check_fs+0x46>
 800ccaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ccac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800ccb0:	4a0f      	ldr	r2, [pc, #60]	; (800ccf0 <check_fs+0x80>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d115      	bne.n	800cce2 <check_fs+0x72>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 800ccb6:	2203      	movs	r2, #3
 800ccb8:	490e      	ldr	r1, [pc, #56]	; (800ccf4 <check_fs+0x84>)
 800ccba:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 800ccbe:	f7ff fdaf 	bl	800c820 <mem_cmp>
 800ccc2:	b180      	cbz	r0, 800cce6 <check_fs+0x76>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 800ccc4:	2205      	movs	r2, #5
 800ccc6:	490c      	ldr	r1, [pc, #48]	; (800ccf8 <check_fs+0x88>)
 800ccc8:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 800cccc:	f7ff fda8 	bl	800c820 <mem_cmp>
 800ccd0:	b120      	cbz	r0, 800ccdc <check_fs+0x6c>
	return 2;	/* Valid BS but not FAT */
 800ccd2:	2002      	movs	r0, #2
 800ccd4:	e002      	b.n	800ccdc <check_fs+0x6c>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ccd6:	2004      	movs	r0, #4
 800ccd8:	e000      	b.n	800ccdc <check_fs+0x6c>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ccda:	2003      	movs	r0, #3
}
 800ccdc:	bd10      	pop	{r4, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 800ccde:	2001      	movs	r0, #1
 800cce0:	e7fc      	b.n	800ccdc <check_fs+0x6c>
	return 2;	/* Valid BS but not FAT */
 800cce2:	2002      	movs	r0, #2
 800cce4:	e7fa      	b.n	800ccdc <check_fs+0x6c>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 800cce6:	2000      	movs	r0, #0
 800cce8:	e7f8      	b.n	800ccdc <check_fs+0x6c>
 800ccea:	bf00      	nop
 800ccec:	08016024 	.word	0x08016024
 800ccf0:	009000eb 	.word	0x009000eb
 800ccf4:	08016030 	.word	0x08016030
 800ccf8:	08016034 	.word	0x08016034
 800ccfc:	f3af 8000 	nop.w

0800cd00 <find_volume>:
{
 800cd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd04:	b084      	sub	sp, #16
 800cd06:	460f      	mov	r7, r1
 800cd08:	4616      	mov	r6, r2
	*rfs = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800cd0e:	f7ff ff0f 	bl	800cb30 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd12:	1e05      	subs	r5, r0, #0
 800cd14:	f2c0 81e5 	blt.w	800d0e2 <find_volume+0x3e2>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800cd18:	4bcd      	ldr	r3, [pc, #820]	; (800d050 <find_volume+0x350>)
 800cd1a:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800cd1e:	2c00      	cmp	r4, #0
 800cd20:	f000 81e3 	beq.w	800d0ea <find_volume+0x3ea>
	*rfs = fs;							/* Return pointer to the filesystem object */
 800cd24:	603c      	str	r4, [r7, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cd26:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800cd2a:	7823      	ldrb	r3, [r4, #0]
 800cd2c:	b173      	cbz	r3, 800cd4c <find_volume+0x4c>
		stat = disk_status(fs->pdrv);
 800cd2e:	7860      	ldrb	r0, [r4, #1]
 800cd30:	f7ff fc3e 	bl	800c5b0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cd34:	f010 0f01 	tst.w	r0, #1
 800cd38:	d108      	bne.n	800cd4c <find_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cd3a:	2e00      	cmp	r6, #0
 800cd3c:	f000 81d7 	beq.w	800d0ee <find_volume+0x3ee>
 800cd40:	f010 0f04 	tst.w	r0, #4
 800cd44:	f040 81d5 	bne.w	800d0f2 <find_volume+0x3f2>
			return FR_OK;				/* The filesystem object is valid */
 800cd48:	2000      	movs	r0, #0
 800cd4a:	e1cb      	b.n	800d0e4 <find_volume+0x3e4>
	fs->fs_type = 0;					/* Clear the filesystem object */
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cd50:	b2e8      	uxtb	r0, r5
 800cd52:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 800cd54:	f7ff fc14 	bl	800c580 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cd58:	f010 0f01 	tst.w	r0, #1
 800cd5c:	f040 81cb 	bne.w	800d0f6 <find_volume+0x3f6>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cd60:	b11e      	cbz	r6, 800cd6a <find_volume+0x6a>
 800cd62:	f010 0f04 	tst.w	r0, #4
 800cd66:	f040 81c8 	bne.w	800d0fa <find_volume+0x3fa>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f7ff ff7f 	bl	800cc70 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cd72:	2802      	cmp	r0, #2
 800cd74:	f000 808c 	beq.w	800ce90 <find_volume+0x190>
	bsect = 0;
 800cd78:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cd7a:	2804      	cmp	r0, #4
 800cd7c:	f000 81bf 	beq.w	800d0fe <find_volume+0x3fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cd80:	2801      	cmp	r0, #1
 800cd82:	f200 81be 	bhi.w	800d102 <find_volume+0x402>
	if (fmt == 1) {
 800cd86:	f000 810b 	beq.w	800cfa0 <find_volume+0x2a0>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cd8a:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800cd8e:	f7ff fc8f 	bl	800c6b0 <ld_word>
 800cd92:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800cd96:	f040 81ca 	bne.w	800d12e <find_volume+0x42e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cd9a:	f104 004e 	add.w	r0, r4, #78	; 0x4e
 800cd9e:	f7ff fc87 	bl	800c6b0 <ld_word>
 800cda2:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cda4:	b920      	cbnz	r0, 800cdb0 <find_volume+0xb0>
 800cda6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cdaa:	f7ff fc89 	bl	800c6c0 <ld_dword>
 800cdae:	4607      	mov	r7, r0
		fs->fsize = fasize;
 800cdb0:	6227      	str	r7, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cdb2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800cdb6:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cdb8:	1e53      	subs	r3, r2, #1
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	f200 81b8 	bhi.w	800d132 <find_volume+0x432>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cdc2:	fb07 f502 	mul.w	r5, r7, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cdc6:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 800cdca:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cdce:	f1b8 0f00 	cmp.w	r8, #0
 800cdd2:	f000 81b0 	beq.w	800d136 <find_volume+0x436>
 800cdd6:	f108 33ff 	add.w	r3, r8, #4294967295
 800cdda:	ea18 0f03 	tst.w	r8, r3
 800cdde:	f040 81ac 	bne.w	800d13a <find_volume+0x43a>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cde2:	f104 0049 	add.w	r0, r4, #73	; 0x49
 800cde6:	f7ff fc63 	bl	800c6b0 <ld_word>
 800cdea:	4682      	mov	sl, r0
 800cdec:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cdee:	f010 0f0f 	tst.w	r0, #15
 800cdf2:	f040 81a4 	bne.w	800d13e <find_volume+0x43e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cdf6:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 800cdfa:	f7ff fc59 	bl	800c6b0 <ld_word>
 800cdfe:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ce00:	b920      	cbnz	r0, 800ce0c <find_volume+0x10c>
 800ce02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce06:	f7ff fc5b 	bl	800c6c0 <ld_dword>
 800ce0a:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ce0c:	f104 0046 	add.w	r0, r4, #70	; 0x46
 800ce10:	f7ff fc4e 	bl	800c6b0 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ce14:	4601      	mov	r1, r0
 800ce16:	2800      	cmp	r0, #0
 800ce18:	f000 8193 	beq.w	800d142 <find_volume+0x442>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ce1c:	1942      	adds	r2, r0, r5
 800ce1e:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ce22:	4591      	cmp	r9, r2
 800ce24:	f0c0 818f 	bcc.w	800d146 <find_volume+0x446>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ce28:	eba9 0302 	sub.w	r3, r9, r2
 800ce2c:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f000 818a 	beq.w	800d14a <find_volume+0x44a>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800ce36:	4887      	ldr	r0, [pc, #540]	; (800d054 <find_volume+0x354>)
 800ce38:	4283      	cmp	r3, r0
 800ce3a:	f240 80d0 	bls.w	800cfde <find_volume+0x2de>
		fmt = 0;
 800ce3e:	f04f 0900 	mov.w	r9, #0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ce42:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800ce46:	4283      	cmp	r3, r0
 800ce48:	d801      	bhi.n	800ce4e <find_volume+0x14e>
 800ce4a:	f04f 0902 	mov.w	r9, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ce4e:	f640 70f5 	movw	r0, #4085	; 0xff5
 800ce52:	4283      	cmp	r3, r0
 800ce54:	f240 80c6 	bls.w	800cfe4 <find_volume+0x2e4>
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800ce58:	f1b9 0f00 	cmp.w	r9, #0
 800ce5c:	f040 80c4 	bne.w	800cfe8 <find_volume+0x2e8>
 800ce60:	200d      	movs	r0, #13
 800ce62:	e13f      	b.n	800d0e4 <find_volume+0x3e4>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ce64:	2000      	movs	r0, #0
 800ce66:	ab04      	add	r3, sp, #16
 800ce68:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800ce6c:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ce70:	3501      	adds	r5, #1
 800ce72:	2d03      	cmp	r5, #3
 800ce74:	d80e      	bhi.n	800ce94 <find_volume+0x194>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ce76:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800ce7a:	012b      	lsls	r3, r5, #4
 800ce7c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ce80:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ce82:	7903      	ldrb	r3, [r0, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d0ed      	beq.n	800ce64 <find_volume+0x164>
 800ce88:	3008      	adds	r0, #8
 800ce8a:	f7ff fc19 	bl	800c6c0 <ld_dword>
 800ce8e:	e7ea      	b.n	800ce66 <find_volume+0x166>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ce90:	2500      	movs	r5, #0
 800ce92:	e7ee      	b.n	800ce72 <find_volume+0x172>
 800ce94:	2500      	movs	r5, #0
 800ce96:	e00a      	b.n	800ceae <find_volume+0x1ae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ce98:	4631      	mov	r1, r6
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f7ff fee8 	bl	800cc70 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cea0:	2801      	cmp	r0, #1
 800cea2:	f67f af6a 	bls.w	800cd7a <find_volume+0x7a>
 800cea6:	3501      	adds	r5, #1
 800cea8:	2d03      	cmp	r5, #3
 800ceaa:	f63f af66 	bhi.w	800cd7a <find_volume+0x7a>
			bsect = br[i];
 800ceae:	ab04      	add	r3, sp, #16
 800ceb0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800ceb4:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ceb8:	2e00      	cmp	r6, #0
 800ceba:	d1ed      	bne.n	800ce98 <find_volume+0x198>
 800cebc:	2003      	movs	r0, #3
 800cebe:	e7f2      	b.n	800cea6 <find_volume+0x1a6>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800cec0:	3301      	adds	r3, #1
 800cec2:	2b3f      	cmp	r3, #63	; 0x3f
 800cec4:	d804      	bhi.n	800ced0 <find_volume+0x1d0>
 800cec6:	18e2      	adds	r2, r4, r3
 800cec8:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800cecc:	2a00      	cmp	r2, #0
 800cece:	d0f7      	beq.n	800cec0 <find_volume+0x1c0>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ced0:	2b3f      	cmp	r3, #63	; 0x3f
 800ced2:	f240 8118 	bls.w	800d106 <find_volume+0x406>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800ced6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 800ceda:	f7ff fbe9 	bl	800c6b0 <ld_word>
 800cede:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800cee2:	f040 8112 	bne.w	800d10a <find_volume+0x40a>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800cee6:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 800ceea:	2b09      	cmp	r3, #9
 800ceec:	f040 810f 	bne.w	800d10e <find_volume+0x40e>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800cef0:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800cef4:	f7ff fbf4 	bl	800c6e0 <ld_qword>
 800cef8:	eb10 0806 	adds.w	r8, r0, r6
 800cefc:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800cf00:	f1b9 0f01 	cmp.w	r9, #1
 800cf04:	bf08      	it	eq
 800cf06:	f1b8 0f00 	cmpeq.w	r8, #0
 800cf0a:	f080 8102 	bcs.w	800d112 <find_volume+0x412>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800cf0e:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800cf12:	f7ff fbd5 	bl	800c6c0 <ld_dword>
 800cf16:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800cf18:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 800cf1c:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	f040 80f9 	bne.w	800d116 <find_volume+0x416>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800cf24:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800cf28:	2501      	movs	r5, #1
 800cf2a:	409d      	lsls	r5, r3
 800cf2c:	b2ad      	uxth	r5, r5
 800cf2e:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800cf30:	2d00      	cmp	r5, #0
 800cf32:	f000 80f2 	beq.w	800d11a <find_volume+0x41a>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800cf36:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800cf3a:	f7ff fbc1 	bl	800c6c0 <ld_dword>
 800cf3e:	4682      	mov	sl, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800cf40:	4b45      	ldr	r3, [pc, #276]	; (800d058 <find_volume+0x358>)
 800cf42:	4298      	cmp	r0, r3
 800cf44:	f200 80eb 	bhi.w	800d11e <find_volume+0x41e>
		fs->n_fatent = nclst + 2;
 800cf48:	1c83      	adds	r3, r0, #2
 800cf4a:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
 800cf4c:	6266      	str	r6, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800cf4e:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800cf52:	f7ff fbb5 	bl	800c6c0 <ld_dword>
 800cf56:	1987      	adds	r7, r0, r6
 800cf58:	6327      	str	r7, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800cf5a:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800cf5e:	f7ff fbaf 	bl	800c6c0 <ld_dword>
 800cf62:	4430      	add	r0, r6
 800cf64:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800cf66:	fb0a f205 	mul.w	r2, sl, r5
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	19d2      	adds	r2, r2, r7
 800cf6e:	f141 0300 	adc.w	r3, r1, #0
 800cf72:	4599      	cmp	r9, r3
 800cf74:	bf08      	it	eq
 800cf76:	4590      	cmpeq	r8, r2
 800cf78:	f0c0 80d3 	bcc.w	800d122 <find_volume+0x422>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800cf7c:	f104 0098 	add.w	r0, r4, #152	; 0x98
 800cf80:	f7ff fb9e 	bl	800c6c0 <ld_dword>
 800cf84:	4601      	mov	r1, r0
 800cf86:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f7ff fc71 	bl	800c870 <clst2sect>
 800cf8e:	4601      	mov	r1, r0
 800cf90:	4620      	mov	r0, r4
 800cf92:	f7ff fe4d 	bl	800cc30 <move_window>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	f040 80c5 	bne.w	800d126 <find_volume+0x426>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800cf9c:	2500      	movs	r5, #0
 800cf9e:	e002      	b.n	800cfa6 <find_volume+0x2a6>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800cfa0:	230b      	movs	r3, #11
 800cfa2:	e78e      	b.n	800cec2 <find_volume+0x1c2>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800cfa4:	3520      	adds	r5, #32
 800cfa6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800cfaa:	d20d      	bcs.n	800cfc8 <find_volume+0x2c8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800cfac:	1963      	adds	r3, r4, r5
 800cfae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cfb2:	2b81      	cmp	r3, #129	; 0x81
 800cfb4:	d1f6      	bne.n	800cfa4 <find_volume+0x2a4>
 800cfb6:	f104 0338 	add.w	r3, r4, #56	; 0x38
 800cfba:	f105 0014 	add.w	r0, r5, #20
 800cfbe:	4418      	add	r0, r3
 800cfc0:	f7ff fb7e 	bl	800c6c0 <ld_dword>
 800cfc4:	2802      	cmp	r0, #2
 800cfc6:	d1ed      	bne.n	800cfa4 <find_volume+0x2a4>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800cfc8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800cfcc:	f000 80ad 	beq.w	800d12a <find_volume+0x42a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cfd0:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd4:	61a3      	str	r3, [r4, #24]
 800cfd6:	6163      	str	r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
 800cfd8:	f04f 0904 	mov.w	r9, #4
 800cfdc:	e02e      	b.n	800d03c <find_volume+0x33c>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800cfde:	f04f 0903 	mov.w	r9, #3
 800cfe2:	e72e      	b.n	800ce42 <find_volume+0x142>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cfe4:	f04f 0901 	mov.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cfe8:	f103 0802 	add.w	r8, r3, #2
 800cfec:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800cff0:	6266      	str	r6, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cff2:	198b      	adds	r3, r1, r6
 800cff4:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800cff6:	4432      	add	r2, r6
 800cff8:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800cffa:	f1b9 0f03 	cmp.w	r9, #3
 800cffe:	d02d      	beq.n	800d05c <find_volume+0x35c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d000:	f1ba 0f00 	cmp.w	sl, #0
 800d004:	f000 80a7 	beq.w	800d156 <find_volume+0x456>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d008:	442b      	add	r3, r5
 800d00a:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d00c:	f1b9 0f02 	cmp.w	r9, #2
 800d010:	d035      	beq.n	800d07e <find_volume+0x37e>
 800d012:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800d016:	f008 0301 	and.w	r3, r8, #1
 800d01a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d01e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d022:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
 800d026:	f0c0 8098 	bcc.w	800d15a <find_volume+0x45a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d02a:	f04f 33ff 	mov.w	r3, #4294967295
 800d02e:	61a3      	str	r3, [r4, #24]
 800d030:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
 800d032:	2380      	movs	r3, #128	; 0x80
 800d034:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800d036:	f1b9 0f03 	cmp.w	r9, #3
 800d03a:	d023      	beq.n	800d084 <find_volume+0x384>
	fs->fs_type = fmt;		/* FAT sub-type */
 800d03c:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
 800d040:	4a03      	ldr	r2, [pc, #12]	; (800d050 <find_volume+0x350>)
 800d042:	8893      	ldrh	r3, [r2, #4]
 800d044:	3301      	adds	r3, #1
 800d046:	b29b      	uxth	r3, r3
 800d048:	8093      	strh	r3, [r2, #4]
 800d04a:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 800d04c:	2000      	movs	r0, #0
 800d04e:	e049      	b.n	800d0e4 <find_volume+0x3e4>
 800d050:	200022c0 	.word	0x200022c0
 800d054:	0ffffff5 	.word	0x0ffffff5
 800d058:	7ffffffd 	.word	0x7ffffffd
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d05c:	f104 0062 	add.w	r0, r4, #98	; 0x62
 800d060:	f7ff fb26 	bl	800c6b0 <ld_word>
 800d064:	2800      	cmp	r0, #0
 800d066:	d172      	bne.n	800d14e <find_volume+0x44e>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d068:	f1ba 0f00 	cmp.w	sl, #0
 800d06c:	d171      	bne.n	800d152 <find_volume+0x452>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d06e:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800d072:	f7ff fb25 	bl	800c6c0 <ld_dword>
 800d076:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d078:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800d07c:	e7cf      	b.n	800d01e <find_volume+0x31e>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d07e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800d082:	e7cc      	b.n	800d01e <find_volume+0x31e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d084:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d088:	f7ff fb12 	bl	800c6b0 <ld_word>
 800d08c:	2801      	cmp	r0, #1
 800d08e:	d1d5      	bne.n	800d03c <find_volume+0x33c>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d090:	1c71      	adds	r1, r6, #1
 800d092:	4620      	mov	r0, r4
 800d094:	f7ff fdcc 	bl	800cc30 <move_window>
 800d098:	2800      	cmp	r0, #0
 800d09a:	d1cf      	bne.n	800d03c <find_volume+0x33c>
			fs->fsi_flag = 0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800d0a0:	f204 2036 	addw	r0, r4, #566	; 0x236
 800d0a4:	f7ff fb04 	bl	800c6b0 <ld_word>
 800d0a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d0ac:	4298      	cmp	r0, r3
 800d0ae:	d1c5      	bne.n	800d03c <find_volume+0x33c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d0b0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800d0b4:	f7ff fb04 	bl	800c6c0 <ld_dword>
 800d0b8:	4b29      	ldr	r3, [pc, #164]	; (800d160 <find_volume+0x460>)
 800d0ba:	4298      	cmp	r0, r3
 800d0bc:	d1be      	bne.n	800d03c <find_volume+0x33c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d0be:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800d0c2:	f7ff fafd 	bl	800c6c0 <ld_dword>
 800d0c6:	4b27      	ldr	r3, [pc, #156]	; (800d164 <find_volume+0x464>)
 800d0c8:	4298      	cmp	r0, r3
 800d0ca:	d1b7      	bne.n	800d03c <find_volume+0x33c>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d0cc:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800d0d0:	f7ff faf6 	bl	800c6c0 <ld_dword>
 800d0d4:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d0d6:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800d0da:	f7ff faf1 	bl	800c6c0 <ld_dword>
 800d0de:	6160      	str	r0, [r4, #20]
 800d0e0:	e7ac      	b.n	800d03c <find_volume+0x33c>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d0e2:	200b      	movs	r0, #11
}
 800d0e4:	b004      	add	sp, #16
 800d0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800d0ea:	200c      	movs	r0, #12
 800d0ec:	e7fa      	b.n	800d0e4 <find_volume+0x3e4>
			return FR_OK;				/* The filesystem object is valid */
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	e7f8      	b.n	800d0e4 <find_volume+0x3e4>
				return FR_WRITE_PROTECTED;
 800d0f2:	200a      	movs	r0, #10
 800d0f4:	e7f6      	b.n	800d0e4 <find_volume+0x3e4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d0f6:	2003      	movs	r0, #3
 800d0f8:	e7f4      	b.n	800d0e4 <find_volume+0x3e4>
		return FR_WRITE_PROTECTED;
 800d0fa:	200a      	movs	r0, #10
 800d0fc:	e7f2      	b.n	800d0e4 <find_volume+0x3e4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d0fe:	2001      	movs	r0, #1
 800d100:	e7f0      	b.n	800d0e4 <find_volume+0x3e4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d102:	200d      	movs	r0, #13
 800d104:	e7ee      	b.n	800d0e4 <find_volume+0x3e4>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800d106:	200d      	movs	r0, #13
 800d108:	e7ec      	b.n	800d0e4 <find_volume+0x3e4>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800d10a:	200d      	movs	r0, #13
 800d10c:	e7ea      	b.n	800d0e4 <find_volume+0x3e4>
			return FR_NO_FILESYSTEM;
 800d10e:	200d      	movs	r0, #13
 800d110:	e7e8      	b.n	800d0e4 <find_volume+0x3e4>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d112:	200d      	movs	r0, #13
 800d114:	e7e6      	b.n	800d0e4 <find_volume+0x3e4>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d116:	200d      	movs	r0, #13
 800d118:	e7e4      	b.n	800d0e4 <find_volume+0x3e4>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d11a:	200d      	movs	r0, #13
 800d11c:	e7e2      	b.n	800d0e4 <find_volume+0x3e4>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d11e:	200d      	movs	r0, #13
 800d120:	e7e0      	b.n	800d0e4 <find_volume+0x3e4>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d122:	200d      	movs	r0, #13
 800d124:	e7de      	b.n	800d0e4 <find_volume+0x3e4>
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d126:	2001      	movs	r0, #1
 800d128:	e7dc      	b.n	800d0e4 <find_volume+0x3e4>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d12a:	200d      	movs	r0, #13
 800d12c:	e7da      	b.n	800d0e4 <find_volume+0x3e4>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d12e:	200d      	movs	r0, #13
 800d130:	e7d8      	b.n	800d0e4 <find_volume+0x3e4>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d132:	200d      	movs	r0, #13
 800d134:	e7d6      	b.n	800d0e4 <find_volume+0x3e4>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d136:	200d      	movs	r0, #13
 800d138:	e7d4      	b.n	800d0e4 <find_volume+0x3e4>
 800d13a:	200d      	movs	r0, #13
 800d13c:	e7d2      	b.n	800d0e4 <find_volume+0x3e4>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d13e:	200d      	movs	r0, #13
 800d140:	e7d0      	b.n	800d0e4 <find_volume+0x3e4>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d142:	200d      	movs	r0, #13
 800d144:	e7ce      	b.n	800d0e4 <find_volume+0x3e4>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d146:	200d      	movs	r0, #13
 800d148:	e7cc      	b.n	800d0e4 <find_volume+0x3e4>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d14a:	200d      	movs	r0, #13
 800d14c:	e7ca      	b.n	800d0e4 <find_volume+0x3e4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d14e:	200d      	movs	r0, #13
 800d150:	e7c8      	b.n	800d0e4 <find_volume+0x3e4>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d152:	200d      	movs	r0, #13
 800d154:	e7c6      	b.n	800d0e4 <find_volume+0x3e4>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d156:	200d      	movs	r0, #13
 800d158:	e7c4      	b.n	800d0e4 <find_volume+0x3e4>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d15a:	200d      	movs	r0, #13
 800d15c:	e7c2      	b.n	800d0e4 <find_volume+0x3e4>
 800d15e:	bf00      	nop
 800d160:	41615252 	.word	0x41615252
 800d164:	61417272 	.word	0x61417272
 800d168:	f3af 8000 	nop.w
 800d16c:	f3af 8000 	nop.w

0800d170 <find_bitmap>:
{
 800d170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d174:	4605      	mov	r5, r0
 800d176:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800d178:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 800d17a:	69c3      	ldr	r3, [r0, #28]
 800d17c:	3b02      	subs	r3, #2
 800d17e:	42bb      	cmp	r3, r7
 800d180:	d800      	bhi.n	800d184 <find_bitmap+0x14>
 800d182:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
 800d184:	46b8      	mov	r8, r7
 800d186:	463c      	mov	r4, r7
 800d188:	2600      	movs	r6, #0
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d18a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800d18c:	eb01 3114 	add.w	r1, r1, r4, lsr #12
 800d190:	4628      	mov	r0, r5
 800d192:	f7ff fd4d 	bl	800cc30 <move_window>
 800d196:	bb40      	cbnz	r0, 800d1ea <find_bitmap+0x7a>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800d198:	f3c4 00c8 	ubfx	r0, r4, #3, #9
 800d19c:	f004 0207 	and.w	r2, r4, #7
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	4093      	lsls	r3, r2
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	e009      	b.n	800d1bc <find_bitmap+0x4c>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800d1a8:	46a0      	mov	r8, r4
 800d1aa:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
 800d1ac:	42a7      	cmp	r7, r4
 800d1ae:	d01f      	beq.n	800d1f0 <find_bitmap+0x80>
			} while (bm);
 800d1b0:	b923      	cbnz	r3, 800d1bc <find_bitmap+0x4c>
		} while (++i < SS(fs));
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800d1b8:	d2e7      	bcs.n	800d18a <find_bitmap+0x1a>
			bm = 1;
 800d1ba:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800d1bc:	182a      	adds	r2, r5, r0
 800d1be:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800d1c2:	401a      	ands	r2, r3
 800d1c4:	005b      	lsls	r3, r3, #1
 800d1c6:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800d1c8:	3401      	adds	r4, #1
 800d1ca:	69e9      	ldr	r1, [r5, #28]
 800d1cc:	3902      	subs	r1, #2
 800d1ce:	42a1      	cmp	r1, r4
 800d1d0:	d803      	bhi.n	800d1da <find_bitmap+0x6a>
					val = 0; bm = 0; i = SS(fs);
 800d1d2:	2400      	movs	r4, #0
 800d1d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d1d8:	4623      	mov	r3, r4
				if (!bv) {	/* Is it a free cluster? */
 800d1da:	2a00      	cmp	r2, #0
 800d1dc:	d1e4      	bne.n	800d1a8 <find_bitmap+0x38>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800d1de:	3601      	adds	r6, #1
 800d1e0:	454e      	cmp	r6, r9
 800d1e2:	d1e3      	bne.n	800d1ac <find_bitmap+0x3c>
 800d1e4:	f108 0002 	add.w	r0, r8, #2
 800d1e8:	e003      	b.n	800d1f2 <find_bitmap+0x82>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ee:	e000      	b.n	800d1f2 <find_bitmap+0x82>
				if (val == clst) return 0;	/* All cluster scanned? */
 800d1f0:	2000      	movs	r0, #0
}
 800d1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1f6:	bf00      	nop
 800d1f8:	f3af 8000 	nop.w
 800d1fc:	f3af 8000 	nop.w

0800d200 <change_bitmap>:
{
 800d200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d204:	4606      	mov	r6, r0
 800d206:	4617      	mov	r7, r2
 800d208:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800d20a:	1e8c      	subs	r4, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800d20c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800d20e:	eb01 3114 	add.w	r1, r1, r4, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800d212:	f3c4 05c8 	ubfx	r5, r4, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800d216:	f004 0407 	and.w	r4, r4, #7
 800d21a:	2301      	movs	r3, #1
 800d21c:	fa03 f404 	lsl.w	r4, r3, r4
 800d220:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d222:	f101 0901 	add.w	r9, r1, #1
 800d226:	4630      	mov	r0, r6
 800d228:	f7ff fd02 	bl	800cc30 <move_window>
 800d22c:	4601      	mov	r1, r0
 800d22e:	b110      	cbz	r0, 800d236 <change_bitmap+0x36>
 800d230:	2101      	movs	r1, #1
 800d232:	e01e      	b.n	800d272 <change_bitmap+0x72>
			bm = 1;
 800d234:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800d236:	1973      	adds	r3, r6, r5
 800d238:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d23c:	4223      	tst	r3, r4
 800d23e:	bf14      	ite	ne
 800d240:	2201      	movne	r2, #1
 800d242:	2200      	moveq	r2, #0
 800d244:	4542      	cmp	r2, r8
 800d246:	d013      	beq.n	800d270 <change_bitmap+0x70>
				fs->win[i] ^= bm;	/* Flip the bit */
 800d248:	1972      	adds	r2, r6, r5
 800d24a:	4063      	eors	r3, r4
 800d24c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				fs->wflag = 1;
 800d250:	2301      	movs	r3, #1
 800d252:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800d254:	3f01      	subs	r7, #1
 800d256:	d00c      	beq.n	800d272 <change_bitmap+0x72>
			} while (bm <<= 1);		/* Next bit */
 800d258:	409c      	lsls	r4, r3
 800d25a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800d25e:	d1ea      	bne.n	800d236 <change_bitmap+0x36>
		} while (++i < SS(fs));		/* Next byte */
 800d260:	441d      	add	r5, r3
			bm = 1;
 800d262:	461c      	mov	r4, r3
		} while (++i < SS(fs));		/* Next byte */
 800d264:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d268:	d3e4      	bcc.n	800d234 <change_bitmap+0x34>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d26a:	4649      	mov	r1, r9
		i = 0;
 800d26c:	2500      	movs	r5, #0
 800d26e:	e7d8      	b.n	800d222 <change_bitmap+0x22>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800d270:	2102      	movs	r1, #2
}
 800d272:	4608      	mov	r0, r1
 800d274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d278:	f3af 8000 	nop.w
 800d27c:	f3af 8000 	nop.w

0800d280 <put_fat>:
{
 800d280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d284:	2901      	cmp	r1, #1
 800d286:	f240 8082 	bls.w	800d38e <put_fat+0x10e>
 800d28a:	4605      	mov	r5, r0
 800d28c:	460c      	mov	r4, r1
 800d28e:	4617      	mov	r7, r2
 800d290:	69c3      	ldr	r3, [r0, #28]
 800d292:	428b      	cmp	r3, r1
 800d294:	d97d      	bls.n	800d392 <put_fat+0x112>
		switch (fs->fs_type) {
 800d296:	7803      	ldrb	r3, [r0, #0]
 800d298:	3b01      	subs	r3, #1
 800d29a:	2b03      	cmp	r3, #3
 800d29c:	d87d      	bhi.n	800d39a <put_fat+0x11a>
 800d29e:	e8df f003 	tbb	[pc, r3]
 800d2a2:	4002      	.short	0x4002
 800d2a4:	5353      	.short	0x5353
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800d2a6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d2aa:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d2ac:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800d2b0:	f7ff fcbe 	bl	800cc30 <move_window>
			if (res != FR_OK) break;
 800d2b4:	4606      	mov	r6, r0
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d16c      	bne.n	800d394 <put_fat+0x114>
			p = fs->win + bc++ % SS(fs);
 800d2ba:	f105 0a38 	add.w	sl, r5, #56	; 0x38
 800d2be:	f108 0901 	add.w	r9, r8, #1
 800d2c2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 800d2c6:	f014 0401 	ands.w	r4, r4, #1
 800d2ca:	d01f      	beq.n	800d30c <put_fat+0x8c>
 800d2cc:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 800d2d0:	f003 030f 	and.w	r3, r3, #15
 800d2d4:	013a      	lsls	r2, r7, #4
 800d2d6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d2e6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800d2e8:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	f7ff fc9f 	bl	800cc30 <move_window>
			if (res != FR_OK) break;
 800d2f2:	4606      	mov	r6, r0
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d14d      	bne.n	800d394 <put_fat+0x114>
			p = fs->win + bc % SS(fs);
 800d2f8:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 800d2fc:	b144      	cbz	r4, 800d310 <put_fat+0x90>
 800d2fe:	f3c7 1707 	ubfx	r7, r7, #4, #8
 800d302:	f80a 7009 	strb.w	r7, [sl, r9]
			fs->wflag = 1;
 800d306:	2301      	movs	r3, #1
 800d308:	70eb      	strb	r3, [r5, #3]
			break;
 800d30a:	e043      	b.n	800d394 <put_fat+0x114>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 800d30c:	b2fb      	uxtb	r3, r7
 800d30e:	e7e6      	b.n	800d2de <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 800d310:	f91a 3009 	ldrsb.w	r3, [sl, r9]
 800d314:	f023 030f 	bic.w	r3, r3, #15
 800d318:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800d31c:	431f      	orrs	r7, r3
 800d31e:	b2ff      	uxtb	r7, r7
 800d320:	e7ef      	b.n	800d302 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d322:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d324:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d328:	f7ff fc82 	bl	800cc30 <move_window>
			if (res != FR_OK) break;
 800d32c:	4606      	mov	r6, r0
 800d32e:	bb88      	cbnz	r0, 800d394 <put_fat+0x114>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800d330:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800d334:	0064      	lsls	r4, r4, #1
 800d336:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800d33a:	b2b9      	uxth	r1, r7
 800d33c:	4420      	add	r0, r4
 800d33e:	f7ff fa27 	bl	800c790 <st_word>
			fs->wflag = 1;
 800d342:	2301      	movs	r3, #1
 800d344:	70eb      	strb	r3, [r5, #3]
			break;
 800d346:	e025      	b.n	800d394 <put_fat+0x114>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d348:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d34a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d34e:	f7ff fc6f 	bl	800cc30 <move_window>
			if (res != FR_OK) break;
 800d352:	4606      	mov	r6, r0
 800d354:	b9f0      	cbnz	r0, 800d394 <put_fat+0x114>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d356:	782b      	ldrb	r3, [r5, #0]
 800d358:	2b04      	cmp	r3, #4
 800d35a:	d00c      	beq.n	800d376 <put_fat+0xf6>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d35c:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800d360:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800d364:	00a3      	lsls	r3, r4, #2
 800d366:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d36a:	4418      	add	r0, r3
 800d36c:	f7ff f9a8 	bl	800c6c0 <ld_dword>
 800d370:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 800d374:	4307      	orrs	r7, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d376:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800d37a:	00a4      	lsls	r4, r4, #2
 800d37c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800d380:	4639      	mov	r1, r7
 800d382:	4420      	add	r0, r4
 800d384:	f7ff fa0c 	bl	800c7a0 <st_dword>
			fs->wflag = 1;
 800d388:	2301      	movs	r3, #1
 800d38a:	70eb      	strb	r3, [r5, #3]
			break;
 800d38c:	e002      	b.n	800d394 <put_fat+0x114>
	FRESULT res = FR_INT_ERR;
 800d38e:	2602      	movs	r6, #2
 800d390:	e000      	b.n	800d394 <put_fat+0x114>
 800d392:	2602      	movs	r6, #2
}
 800d394:	4630      	mov	r0, r6
 800d396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
 800d39a:	2602      	movs	r6, #2
 800d39c:	e7fa      	b.n	800d394 <put_fat+0x114>
 800d39e:	bf00      	nop

0800d3a0 <fill_last_frag>:
{
 800d3a0:	b570      	push	{r4, r5, r6, lr}
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	460d      	mov	r5, r1
 800d3a6:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d3a8:	e007      	b.n	800d3ba <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d3aa:	4632      	mov	r2, r6
 800d3ac:	f7ff ff68 	bl	800d280 <put_fat>
		if (res != FR_OK) return res;
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	b958      	cbnz	r0, 800d3cc <fill_last_frag+0x2c>
		obj->n_frag--;
 800d3b4:	69e3      	ldr	r3, [r4, #28]
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d3ba:	69e3      	ldr	r3, [r4, #28]
 800d3bc:	b133      	cbz	r3, 800d3cc <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d3be:	6820      	ldr	r0, [r4, #0]
 800d3c0:	1aea      	subs	r2, r5, r3
 800d3c2:	1c51      	adds	r1, r2, #1
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d9f0      	bls.n	800d3aa <fill_last_frag+0xa>
 800d3c8:	3202      	adds	r2, #2
 800d3ca:	e7ef      	b.n	800d3ac <fill_last_frag+0xc>
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	bd70      	pop	{r4, r5, r6, pc}

0800d3d0 <fill_first_frag>:
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800d3d0:	79c3      	ldrb	r3, [r0, #7]
 800d3d2:	2b03      	cmp	r3, #3
 800d3d4:	d002      	beq.n	800d3dc <fill_first_frag+0xc>
	return FR_OK;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	4770      	bx	lr
{
 800d3dc:	b570      	push	{r4, r5, r6, lr}
 800d3de:	4606      	mov	r6, r0
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d3e0:	6881      	ldr	r1, [r0, #8]
 800d3e2:	6984      	ldr	r4, [r0, #24]
 800d3e4:	b14c      	cbz	r4, 800d3fa <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
 800d3e6:	1c4d      	adds	r5, r1, #1
 800d3e8:	462a      	mov	r2, r5
 800d3ea:	6830      	ldr	r0, [r6, #0]
 800d3ec:	f7ff ff48 	bl	800d280 <put_fat>
			if (res != FR_OK) return res;
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	b920      	cbnz	r0, 800d3fe <fill_first_frag+0x2e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d3f4:	3c01      	subs	r4, #1
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	e7f4      	b.n	800d3e4 <fill_first_frag+0x14>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	71f3      	strb	r3, [r6, #7]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	bd70      	pop	{r4, r5, r6, pc}
 800d402:	bf00      	nop
 800d404:	f3af 8000 	nop.w
 800d408:	f3af 8000 	nop.w
 800d40c:	f3af 8000 	nop.w

0800d410 <get_fat>:
{
 800d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800d412:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d414:	2901      	cmp	r1, #1
 800d416:	f240 808e 	bls.w	800d536 <get_fat+0x126>
 800d41a:	69eb      	ldr	r3, [r5, #28]
 800d41c:	428b      	cmp	r3, r1
 800d41e:	f240 808c 	bls.w	800d53a <get_fat+0x12a>
 800d422:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 800d424:	782b      	ldrb	r3, [r5, #0]
 800d426:	3b01      	subs	r3, #1
 800d428:	2b03      	cmp	r3, #3
 800d42a:	f200 8088 	bhi.w	800d53e <get_fat+0x12e>
 800d42e:	e8df f003 	tbb	[pc, r3]
 800d432:	2902      	.short	0x2902
 800d434:	4d3a      	.short	0x4d3a
			bc = (UINT)clst; bc += bc / 2;
 800d436:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d43a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800d43c:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800d440:	4628      	mov	r0, r5
 800d442:	f7ff fbf5 	bl	800cc30 <move_window>
 800d446:	2800      	cmp	r0, #0
 800d448:	d17b      	bne.n	800d542 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800d44a:	1c77      	adds	r7, r6, #1
 800d44c:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800d450:	442e      	add	r6, r5
 800d452:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d456:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800d458:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800d45c:	4628      	mov	r0, r5
 800d45e:	f7ff fbe7 	bl	800cc30 <move_window>
 800d462:	2800      	cmp	r0, #0
 800d464:	d170      	bne.n	800d548 <get_fat+0x138>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800d466:	f3c7 0308 	ubfx	r3, r7, #0, #9
 800d46a:	442b      	add	r3, r5
 800d46c:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800d470:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800d474:	f014 0f01 	tst.w	r4, #1
 800d478:	d001      	beq.n	800d47e <get_fat+0x6e>
 800d47a:	0900      	lsrs	r0, r0, #4
 800d47c:	e05c      	b.n	800d538 <get_fat+0x128>
 800d47e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800d482:	e059      	b.n	800d538 <get_fat+0x128>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d484:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800d486:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d48a:	4628      	mov	r0, r5
 800d48c:	f7ff fbd0 	bl	800cc30 <move_window>
 800d490:	2800      	cmp	r0, #0
 800d492:	d15c      	bne.n	800d54e <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800d494:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800d498:	0064      	lsls	r4, r4, #1
 800d49a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800d49e:	4420      	add	r0, r4
 800d4a0:	f7ff f906 	bl	800c6b0 <ld_word>
			break;
 800d4a4:	e048      	b.n	800d538 <get_fat+0x128>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4a6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800d4a8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	f7ff fbbf 	bl	800cc30 <move_window>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d14e      	bne.n	800d554 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800d4b6:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800d4ba:	00a4      	lsls	r4, r4, #2
 800d4bc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800d4c0:	4420      	add	r0, r4
 800d4c2:	f7ff f8fd 	bl	800c6c0 <ld_dword>
 800d4c6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800d4ca:	e035      	b.n	800d538 <get_fat+0x128>
			if (obj->objsize != 0) {
 800d4cc:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800d4d0:	ea52 0103 	orrs.w	r1, r2, r3
 800d4d4:	d041      	beq.n	800d55a <get_fat+0x14a>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800d4d6:	6881      	ldr	r1, [r0, #8]
 800d4d8:	1a61      	subs	r1, r4, r1
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800d4da:	f112 36ff 	adds.w	r6, r2, #4294967295
 800d4de:	f143 37ff 	adc.w	r7, r3, #4294967295
 800d4e2:	0a72      	lsrs	r2, r6, #9
 800d4e4:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
 800d4e8:	896b      	ldrh	r3, [r5, #10]
 800d4ea:	fbb2 f2f3 	udiv	r2, r2, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800d4ee:	79c3      	ldrb	r3, [r0, #7]
 800d4f0:	2b02      	cmp	r3, #2
 800d4f2:	d016      	beq.n	800d522 <get_fat+0x112>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800d4f4:	2b03      	cmp	r3, #3
 800d4f6:	d019      	beq.n	800d52c <get_fat+0x11c>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d033      	beq.n	800d564 <get_fat+0x154>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800d4fc:	69c3      	ldr	r3, [r0, #28]
 800d4fe:	bb9b      	cbnz	r3, 800d568 <get_fat+0x158>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d500:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800d502:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d506:	4628      	mov	r0, r5
 800d508:	f7ff fb92 	bl	800cc30 <move_window>
 800d50c:	bb78      	cbnz	r0, 800d56e <get_fat+0x15e>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800d50e:	3538      	adds	r5, #56	; 0x38
 800d510:	00a0      	lsls	r0, r4, #2
 800d512:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
 800d516:	4428      	add	r0, r5
 800d518:	f7ff f8d2 	bl	800c6c0 <ld_dword>
 800d51c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d520:	e00a      	b.n	800d538 <get_fat+0x128>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800d522:	4291      	cmp	r1, r2
 800d524:	d8e6      	bhi.n	800d4f4 <get_fat+0xe4>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800d526:	d01a      	beq.n	800d55e <get_fat+0x14e>
 800d528:	1c60      	adds	r0, r4, #1
 800d52a:	e005      	b.n	800d538 <get_fat+0x128>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800d52c:	6982      	ldr	r2, [r0, #24]
 800d52e:	428a      	cmp	r2, r1
 800d530:	d9e2      	bls.n	800d4f8 <get_fat+0xe8>
					val = clst + 1; 	/* Generate the value */
 800d532:	1c60      	adds	r0, r4, #1
					break;
 800d534:	e000      	b.n	800d538 <get_fat+0x128>
		val = 1;	/* Internal error */
 800d536:	2001      	movs	r0, #1
}
 800d538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800d53a:	2001      	movs	r0, #1
 800d53c:	e7fc      	b.n	800d538 <get_fat+0x128>
			val = 1;	/* Internal error */
 800d53e:	2001      	movs	r0, #1
 800d540:	e7fa      	b.n	800d538 <get_fat+0x128>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d542:	f04f 30ff 	mov.w	r0, #4294967295
 800d546:	e7f7      	b.n	800d538 <get_fat+0x128>
 800d548:	f04f 30ff 	mov.w	r0, #4294967295
 800d54c:	e7f4      	b.n	800d538 <get_fat+0x128>
 800d54e:	f04f 30ff 	mov.w	r0, #4294967295
 800d552:	e7f1      	b.n	800d538 <get_fat+0x128>
 800d554:	f04f 30ff 	mov.w	r0, #4294967295
 800d558:	e7ee      	b.n	800d538 <get_fat+0x128>
			val = 1;	/* Internal error */
 800d55a:	2001      	movs	r0, #1
 800d55c:	e7ec      	b.n	800d538 <get_fat+0x128>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800d55e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d562:	e7e9      	b.n	800d538 <get_fat+0x128>
			val = 1;	/* Internal error */
 800d564:	2001      	movs	r0, #1
 800d566:	e7e7      	b.n	800d538 <get_fat+0x128>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800d568:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d56c:	e7e4      	b.n	800d538 <get_fat+0x128>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d56e:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 800d572:	e7e1      	b.n	800d538 <get_fat+0x128>
 800d574:	f3af 8000 	nop.w
 800d578:	f3af 8000 	nop.w
 800d57c:	f3af 8000 	nop.w

0800d580 <dir_sdi>:
{
 800d580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d584:	4606      	mov	r6, r0
 800d586:	460d      	mov	r5, r1
	FATFS *fs = dp->obj.fs;
 800d588:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d58a:	783b      	ldrb	r3, [r7, #0]
 800d58c:	2b04      	cmp	r3, #4
 800d58e:	d023      	beq.n	800d5d8 <dir_sdi+0x58>
 800d590:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d594:	42ab      	cmp	r3, r5
 800d596:	d93e      	bls.n	800d616 <dir_sdi+0x96>
 800d598:	f015 0f1f 	tst.w	r5, #31
 800d59c:	d13e      	bne.n	800d61c <dir_sdi+0x9c>
	dp->dptr = ofs;				/* Set current offset */
 800d59e:	6335      	str	r5, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d5a0:	68b4      	ldr	r4, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d5a2:	b92c      	cbnz	r4, 800d5b0 <dir_sdi+0x30>
 800d5a4:	783b      	ldrb	r3, [r7, #0]
 800d5a6:	2b02      	cmp	r3, #2
 800d5a8:	d902      	bls.n	800d5b0 <dir_sdi+0x30>
		clst = fs->dirbase;
 800d5aa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	71f3      	strb	r3, [r6, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800d5b0:	b9ac      	cbnz	r4, 800d5de <dir_sdi+0x5e>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800d5b2:	893b      	ldrh	r3, [r7, #8]
 800d5b4:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800d5b8:	d932      	bls.n	800d620 <dir_sdi+0xa0>
		dp->sect = fs->dirbase;
 800d5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5bc:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 800d5be:	6374      	str	r4, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 800d5c0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800d5c2:	b3ab      	cbz	r3, 800d630 <dir_sdi+0xb0>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d5c4:	eb03 2355 	add.w	r3, r3, r5, lsr #9
 800d5c8:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d5ca:	3738      	adds	r7, #56	; 0x38
 800d5cc:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800d5d0:	443d      	add	r5, r7
 800d5d2:	63f5      	str	r5, [r6, #60]	; 0x3c
	return FR_OK;
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	e01f      	b.n	800d618 <dir_sdi+0x98>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d5d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d5dc:	e7da      	b.n	800d594 <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d5de:	f8b7 800a 	ldrh.w	r8, [r7, #10]
 800d5e2:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800d5e6:	4545      	cmp	r5, r8
 800d5e8:	d30f      	bcc.n	800d60a <dir_sdi+0x8a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d5ea:	4621      	mov	r1, r4
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	f7ff ff0f 	bl	800d410 <get_fat>
 800d5f2:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d5f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d5f8:	d014      	beq.n	800d624 <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d5fa:	2801      	cmp	r0, #1
 800d5fc:	d914      	bls.n	800d628 <dir_sdi+0xa8>
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	4283      	cmp	r3, r0
 800d602:	d913      	bls.n	800d62c <dir_sdi+0xac>
			ofs -= csz;
 800d604:	eba5 0508 	sub.w	r5, r5, r8
 800d608:	e7ed      	b.n	800d5e6 <dir_sdi+0x66>
		dp->sect = clst2sect(fs, clst);
 800d60a:	4621      	mov	r1, r4
 800d60c:	4638      	mov	r0, r7
 800d60e:	f7ff f92f 	bl	800c870 <clst2sect>
 800d612:	63b0      	str	r0, [r6, #56]	; 0x38
 800d614:	e7d3      	b.n	800d5be <dir_sdi+0x3e>
		return FR_INT_ERR;
 800d616:	2002      	movs	r0, #2
}
 800d618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 800d61c:	2002      	movs	r0, #2
 800d61e:	e7fb      	b.n	800d618 <dir_sdi+0x98>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800d620:	2002      	movs	r0, #2
 800d622:	e7f9      	b.n	800d618 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d624:	2001      	movs	r0, #1
 800d626:	e7f7      	b.n	800d618 <dir_sdi+0x98>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d628:	2002      	movs	r0, #2
 800d62a:	e7f5      	b.n	800d618 <dir_sdi+0x98>
 800d62c:	2002      	movs	r0, #2
 800d62e:	e7f3      	b.n	800d618 <dir_sdi+0x98>
	if (dp->sect == 0) return FR_INT_ERR;
 800d630:	2002      	movs	r0, #2
 800d632:	e7f1      	b.n	800d618 <dir_sdi+0x98>
 800d634:	f3af 8000 	nop.w
 800d638:	f3af 8000 	nop.w
 800d63c:	f3af 8000 	nop.w

0800d640 <create_chain>:
{
 800d640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d644:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800d646:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800d648:	4689      	mov	r9, r1
 800d64a:	b931      	cbnz	r1, 800d65a <create_chain+0x1a>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800d64c:	697e      	ldr	r6, [r7, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d64e:	b1a6      	cbz	r6, 800d67a <create_chain+0x3a>
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	42b3      	cmp	r3, r6
 800d654:	d812      	bhi.n	800d67c <create_chain+0x3c>
 800d656:	2601      	movs	r6, #1
 800d658:	e010      	b.n	800d67c <create_chain+0x3c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d65a:	f7ff fed9 	bl	800d410 <get_fat>
 800d65e:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Test for insanity */
 800d660:	2801      	cmp	r0, #1
 800d662:	f240 80c6 	bls.w	800d7f2 <create_chain+0x1b2>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800d666:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d66a:	f000 80c3 	beq.w	800d7f4 <create_chain+0x1b4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d66e:	69fb      	ldr	r3, [r7, #28]
 800d670:	4283      	cmp	r3, r0
 800d672:	f200 80bf 	bhi.w	800d7f4 <create_chain+0x1b4>
		scl = clst;							/* Cluster to start to find */
 800d676:	464e      	mov	r6, r9
 800d678:	e000      	b.n	800d67c <create_chain+0x3c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d67a:	2601      	movs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800d67c:	69bd      	ldr	r5, [r7, #24]
 800d67e:	2d00      	cmp	r5, #0
 800d680:	f000 80b8 	beq.w	800d7f4 <create_chain+0x1b4>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d684:	783b      	ldrb	r3, [r7, #0]
 800d686:	2b04      	cmp	r3, #4
 800d688:	d003      	beq.n	800d692 <create_chain+0x52>
		if (scl == clst) {						/* Stretching an existing chain? */
 800d68a:	454e      	cmp	r6, r9
 800d68c:	d055      	beq.n	800d73a <create_chain+0xfa>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800d68e:	4634      	mov	r4, r6
 800d690:	e095      	b.n	800d7be <create_chain+0x17e>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800d692:	2201      	movs	r2, #1
 800d694:	4631      	mov	r1, r6
 800d696:	4638      	mov	r0, r7
 800d698:	f7ff fd6a 	bl	800d170 <find_bitmap>
 800d69c:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800d69e:	1e43      	subs	r3, r0, #1
 800d6a0:	f113 0f03 	cmn.w	r3, #3
 800d6a4:	f200 80a6 	bhi.w	800d7f4 <create_chain+0x1b4>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	4601      	mov	r1, r0
 800d6ae:	4638      	mov	r0, r7
 800d6b0:	f7ff fda6 	bl	800d200 <change_bitmap>
 800d6b4:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
 800d6b6:	2802      	cmp	r0, #2
 800d6b8:	f000 809f 	beq.w	800d7fa <create_chain+0x1ba>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800d6bc:	2801      	cmp	r0, #1
 800d6be:	f000 809e 	beq.w	800d7fe <create_chain+0x1be>
		if (clst == 0) {							/* Is it a new chain? */
 800d6c2:	f1b9 0f00 	cmp.w	r9, #0
 800d6c6:	d11e      	bne.n	800d706 <create_chain+0xc6>
			obj->stat = 2;							/* Set status 'contiguous' */
 800d6c8:	2202      	movs	r2, #2
 800d6ca:	f888 2007 	strb.w	r2, [r8, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800d6ce:	f898 2007 	ldrb.w	r2, [r8, #7]
 800d6d2:	2a02      	cmp	r2, #2
 800d6d4:	f000 8082 	beq.w	800d7dc <create_chain+0x19c>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800d6d8:	f109 0201 	add.w	r2, r9, #1
 800d6dc:	42aa      	cmp	r2, r5
 800d6de:	d022      	beq.n	800d726 <create_chain+0xe6>
				if (obj->n_frag == 0) obj->n_frag = 1;
 800d6e0:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800d6e4:	b913      	cbnz	r3, 800d6ec <create_chain+0xac>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	f8c8 301c 	str.w	r3, [r8, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800d6ec:	462a      	mov	r2, r5
 800d6ee:	4649      	mov	r1, r9
 800d6f0:	4640      	mov	r0, r8
 800d6f2:	f7ff fe55 	bl	800d3a0 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	d171      	bne.n	800d7e0 <create_chain+0x1a0>
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800d702:	462c      	mov	r4, r5
 800d704:	e03e      	b.n	800d784 <create_chain+0x144>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800d706:	f898 2007 	ldrb.w	r2, [r8, #7]
 800d70a:	2a02      	cmp	r2, #2
 800d70c:	d1df      	bne.n	800d6ce <create_chain+0x8e>
 800d70e:	1c72      	adds	r2, r6, #1
 800d710:	42aa      	cmp	r2, r5
 800d712:	d0dc      	beq.n	800d6ce <create_chain+0x8e>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800d714:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800d718:	1ab2      	subs	r2, r6, r2
 800d71a:	f8c8 2018 	str.w	r2, [r8, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800d71e:	2203      	movs	r2, #3
 800d720:	f888 2007 	strb.w	r2, [r8, #7]
 800d724:	e7d3      	b.n	800d6ce <create_chain+0x8e>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800d726:	f8d8 201c 	ldr.w	r2, [r8, #28]
 800d72a:	b122      	cbz	r2, 800d736 <create_chain+0xf6>
 800d72c:	3201      	adds	r2, #1
 800d72e:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800d732:	462c      	mov	r4, r5
 800d734:	e026      	b.n	800d784 <create_chain+0x144>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800d736:	2202      	movs	r2, #2
 800d738:	e7f9      	b.n	800d72e <create_chain+0xee>
			ncl = scl + 1;						/* Test if next cluster is free */
 800d73a:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	42a3      	cmp	r3, r4
 800d740:	d800      	bhi.n	800d744 <create_chain+0x104>
 800d742:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800d744:	4621      	mov	r1, r4
 800d746:	4640      	mov	r0, r8
 800d748:	f7ff fe62 	bl	800d410 <get_fat>
 800d74c:	4605      	mov	r5, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800d74e:	2801      	cmp	r0, #1
 800d750:	d050      	beq.n	800d7f4 <create_chain+0x1b4>
 800d752:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d756:	d04d      	beq.n	800d7f4 <create_chain+0x1b4>
			if (cs != 0) {						/* Not free? */
 800d758:	b138      	cbz	r0, 800d76a <create_chain+0x12a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800d75a:	697b      	ldr	r3, [r7, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d996      	bls.n	800d68e <create_chain+0x4e>
 800d760:	69fa      	ldr	r2, [r7, #28]
 800d762:	429a      	cmp	r2, r3
 800d764:	d993      	bls.n	800d68e <create_chain+0x4e>
 800d766:	461e      	mov	r6, r3
 800d768:	e791      	b.n	800d68e <create_chain+0x4e>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800d76a:	2c00      	cmp	r4, #0
 800d76c:	d08f      	beq.n	800d68e <create_chain+0x4e>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800d76e:	f04f 32ff 	mov.w	r2, #4294967295
 800d772:	4621      	mov	r1, r4
 800d774:	4638      	mov	r0, r7
 800d776:	f7ff fd83 	bl	800d280 <put_fat>
		if (res == FR_OK && clst != 0) {
 800d77a:	4603      	mov	r3, r0
 800d77c:	b910      	cbnz	r0, 800d784 <create_chain+0x144>
 800d77e:	f1b9 0f00 	cmp.w	r9, #0
 800d782:	d124      	bne.n	800d7ce <create_chain+0x18e>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d784:	bb73      	cbnz	r3, 800d7e4 <create_chain+0x1a4>
		fs->last_clst = ncl;
 800d786:	617c      	str	r4, [r7, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d788:	69ba      	ldr	r2, [r7, #24]
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	3b02      	subs	r3, #2
 800d78e:	429a      	cmp	r2, r3
 800d790:	d801      	bhi.n	800d796 <create_chain+0x156>
 800d792:	3a01      	subs	r2, #1
 800d794:	61ba      	str	r2, [r7, #24]
		fs->fsi_flag |= 1;
 800d796:	793b      	ldrb	r3, [r7, #4]
 800d798:	f043 0301 	orr.w	r3, r3, #1
 800d79c:	713b      	strb	r3, [r7, #4]
 800d79e:	4625      	mov	r5, r4
 800d7a0:	e028      	b.n	800d7f4 <create_chain+0x1b4>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d7a2:	4621      	mov	r1, r4
 800d7a4:	4640      	mov	r0, r8
 800d7a6:	f7ff fe33 	bl	800d410 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
 800d7aa:	4605      	mov	r5, r0
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d0de      	beq.n	800d76e <create_chain+0x12e>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800d7b0:	2801      	cmp	r0, #1
 800d7b2:	d01f      	beq.n	800d7f4 <create_chain+0x1b4>
 800d7b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d7b8:	d01c      	beq.n	800d7f4 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800d7ba:	42b4      	cmp	r4, r6
 800d7bc:	d024      	beq.n	800d808 <create_chain+0x1c8>
				ncl++;							/* Next cluster */
 800d7be:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	42a3      	cmp	r3, r4
 800d7c4:	d8ed      	bhi.n	800d7a2 <create_chain+0x162>
					if (ncl > scl) return 0;	/* No free cluster found? */
 800d7c6:	2e01      	cmp	r6, #1
 800d7c8:	d91c      	bls.n	800d804 <create_chain+0x1c4>
					ncl = 2;
 800d7ca:	2402      	movs	r4, #2
 800d7cc:	e7e9      	b.n	800d7a2 <create_chain+0x162>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800d7ce:	4622      	mov	r2, r4
 800d7d0:	4649      	mov	r1, r9
 800d7d2:	4638      	mov	r0, r7
 800d7d4:	f7ff fd54 	bl	800d280 <put_fat>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	e7d3      	b.n	800d784 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800d7dc:	462c      	mov	r4, r5
 800d7de:	e7d1      	b.n	800d784 <create_chain+0x144>
 800d7e0:	462c      	mov	r4, r5
 800d7e2:	e7cf      	b.n	800d784 <create_chain+0x144>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d001      	beq.n	800d7ec <create_chain+0x1ac>
 800d7e8:	2501      	movs	r5, #1
 800d7ea:	e003      	b.n	800d7f4 <create_chain+0x1b4>
 800d7ec:	f04f 35ff 	mov.w	r5, #4294967295
 800d7f0:	e000      	b.n	800d7f4 <create_chain+0x1b4>
		if (cs < 2) return 1;				/* Test for insanity */
 800d7f2:	2501      	movs	r5, #1
}
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (res == FR_INT_ERR) return 1;
 800d7fa:	2501      	movs	r5, #1
 800d7fc:	e7fa      	b.n	800d7f4 <create_chain+0x1b4>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800d7fe:	f04f 35ff 	mov.w	r5, #4294967295
 800d802:	e7f7      	b.n	800d7f4 <create_chain+0x1b4>
					if (ncl > scl) return 0;	/* No free cluster found? */
 800d804:	2500      	movs	r5, #0
 800d806:	e7f5      	b.n	800d7f4 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800d808:	2500      	movs	r5, #0
 800d80a:	e7f3      	b.n	800d7f4 <create_chain+0x1b4>
 800d80c:	f3af 8000 	nop.w

0800d810 <remove_chain>:
{
 800d810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 800d814:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d816:	2901      	cmp	r1, #1
 800d818:	f240 8087 	bls.w	800d92a <remove_chain+0x11a>
 800d81c:	4607      	mov	r7, r0
 800d81e:	460e      	mov	r6, r1
 800d820:	4691      	mov	r9, r2
 800d822:	69e3      	ldr	r3, [r4, #28]
 800d824:	428b      	cmp	r3, r1
 800d826:	f240 8082 	bls.w	800d92e <remove_chain+0x11e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d82a:	b172      	cbz	r2, 800d84a <remove_chain+0x3a>
 800d82c:	7823      	ldrb	r3, [r4, #0]
 800d82e:	2b04      	cmp	r3, #4
 800d830:	d102      	bne.n	800d838 <remove_chain+0x28>
 800d832:	79c3      	ldrb	r3, [r0, #7]
 800d834:	2b02      	cmp	r3, #2
 800d836:	d008      	beq.n	800d84a <remove_chain+0x3a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d838:	f04f 32ff 	mov.w	r2, #4294967295
 800d83c:	4649      	mov	r1, r9
 800d83e:	4620      	mov	r0, r4
 800d840:	f7ff fd1e 	bl	800d280 <put_fat>
		if (res != FR_OK) return res;
 800d844:	4603      	mov	r3, r0
 800d846:	2800      	cmp	r0, #0
 800d848:	d172      	bne.n	800d930 <remove_chain+0x120>
{
 800d84a:	46b0      	mov	r8, r6
 800d84c:	e012      	b.n	800d874 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d84e:	2200      	movs	r2, #0
 800d850:	4631      	mov	r1, r6
 800d852:	4620      	mov	r0, r4
 800d854:	f7ff fd14 	bl	800d280 <put_fat>
			if (res != FR_OK) return res;
 800d858:	4603      	mov	r3, r0
 800d85a:	b1c8      	cbz	r0, 800d890 <remove_chain+0x80>
 800d85c:	e068      	b.n	800d930 <remove_chain+0x120>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800d85e:	1c73      	adds	r3, r6, #1
 800d860:	42ab      	cmp	r3, r5
 800d862:	d003      	beq.n	800d86c <remove_chain+0x5c>
			if (fs->fs_type == FS_EXFAT) {
 800d864:	7823      	ldrb	r3, [r4, #0]
 800d866:	2b04      	cmp	r3, #4
 800d868:	d01e      	beq.n	800d8a8 <remove_chain+0x98>
			scl = ecl = nxt;
 800d86a:	46a8      	mov	r8, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d86c:	69e3      	ldr	r3, [r4, #28]
		clst = nxt;					/* Next cluster */
 800d86e:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d870:	42ab      	cmp	r3, r5
 800d872:	d925      	bls.n	800d8c0 <remove_chain+0xb0>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d874:	4631      	mov	r1, r6
 800d876:	4638      	mov	r0, r7
 800d878:	f7ff fdca 	bl	800d410 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800d87c:	4605      	mov	r5, r0
 800d87e:	b1f8      	cbz	r0, 800d8c0 <remove_chain+0xb0>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d880:	2801      	cmp	r0, #1
 800d882:	d058      	beq.n	800d936 <remove_chain+0x126>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d884:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d888:	d057      	beq.n	800d93a <remove_chain+0x12a>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d88a:	7823      	ldrb	r3, [r4, #0]
 800d88c:	2b04      	cmp	r3, #4
 800d88e:	d1de      	bne.n	800d84e <remove_chain+0x3e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d890:	69a2      	ldr	r2, [r4, #24]
 800d892:	69e3      	ldr	r3, [r4, #28]
 800d894:	3b02      	subs	r3, #2
 800d896:	429a      	cmp	r2, r3
 800d898:	d2e1      	bcs.n	800d85e <remove_chain+0x4e>
			fs->free_clst++;
 800d89a:	3201      	adds	r2, #1
 800d89c:	61a2      	str	r2, [r4, #24]
			fs->fsi_flag |= 1;
 800d89e:	7923      	ldrb	r3, [r4, #4]
 800d8a0:	f043 0301 	orr.w	r3, r3, #1
 800d8a4:	7123      	strb	r3, [r4, #4]
 800d8a6:	e7da      	b.n	800d85e <remove_chain+0x4e>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800d8a8:	eba6 0208 	sub.w	r2, r6, r8
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	3201      	adds	r2, #1
 800d8b0:	4641      	mov	r1, r8
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f7ff fca4 	bl	800d200 <change_bitmap>
				if (res != FR_OK) return res;
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	bbc8      	cbnz	r0, 800d930 <remove_chain+0x120>
			scl = ecl = nxt;
 800d8bc:	46a8      	mov	r8, r5
 800d8be:	e7d5      	b.n	800d86c <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
 800d8c0:	7823      	ldrb	r3, [r4, #0]
 800d8c2:	2b04      	cmp	r3, #4
 800d8c4:	d001      	beq.n	800d8ca <remove_chain+0xba>
	return FR_OK;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	e032      	b.n	800d930 <remove_chain+0x120>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 800d8ca:	f1b9 0f00 	cmp.w	r9, #0
 800d8ce:	d012      	beq.n	800d8f6 <remove_chain+0xe6>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 800d8d0:	79fb      	ldrb	r3, [r7, #7]
 800d8d2:	b9db      	cbnz	r3, 800d90c <remove_chain+0xfc>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800d8d4:	68bc      	ldr	r4, [r7, #8]
				while (clst != pclst) {
 800d8d6:	454c      	cmp	r4, r9
 800d8d8:	d010      	beq.n	800d8fc <remove_chain+0xec>
					nxt = get_fat(obj, clst);
 800d8da:	4621      	mov	r1, r4
 800d8dc:	4638      	mov	r0, r7
 800d8de:	f7ff fd97 	bl	800d410 <get_fat>
					if (nxt < 2) return FR_INT_ERR;
 800d8e2:	2801      	cmp	r0, #1
 800d8e4:	d92b      	bls.n	800d93e <remove_chain+0x12e>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800d8e6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d8ea:	d02a      	beq.n	800d942 <remove_chain+0x132>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800d8ec:	1c63      	adds	r3, r4, #1
 800d8ee:	4283      	cmp	r3, r0
 800d8f0:	d104      	bne.n	800d8fc <remove_chain+0xec>
					clst++;
 800d8f2:	461c      	mov	r4, r3
 800d8f4:	e7ef      	b.n	800d8d6 <remove_chain+0xc6>
			obj->stat = 0;		/* Change the chain status 'initial' */
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	71fb      	strb	r3, [r7, #7]
 800d8fa:	e019      	b.n	800d930 <remove_chain+0x120>
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 800d8fc:	454c      	cmp	r4, r9
 800d8fe:	d001      	beq.n	800d904 <remove_chain+0xf4>
	return FR_OK;
 800d900:	2300      	movs	r3, #0
 800d902:	e015      	b.n	800d930 <remove_chain+0x120>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 800d904:	2302      	movs	r3, #2
 800d906:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
 800d908:	2300      	movs	r3, #0
 800d90a:	e011      	b.n	800d930 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 800d90c:	2b03      	cmp	r3, #3
 800d90e:	d001      	beq.n	800d914 <remove_chain+0x104>
	return FR_OK;
 800d910:	2300      	movs	r3, #0
 800d912:	e00d      	b.n	800d930 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	454b      	cmp	r3, r9
 800d918:	d815      	bhi.n	800d946 <remove_chain+0x136>
 800d91a:	69ba      	ldr	r2, [r7, #24]
 800d91c:	4413      	add	r3, r2
 800d91e:	454b      	cmp	r3, r9
 800d920:	d313      	bcc.n	800d94a <remove_chain+0x13a>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 800d922:	2302      	movs	r3, #2
 800d924:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
 800d926:	2300      	movs	r3, #0
 800d928:	e002      	b.n	800d930 <remove_chain+0x120>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d92a:	2302      	movs	r3, #2
 800d92c:	e000      	b.n	800d930 <remove_chain+0x120>
 800d92e:	2302      	movs	r3, #2
}
 800d930:	4618      	mov	r0, r3
 800d932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d936:	2302      	movs	r3, #2
 800d938:	e7fa      	b.n	800d930 <remove_chain+0x120>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d93a:	2301      	movs	r3, #1
 800d93c:	e7f8      	b.n	800d930 <remove_chain+0x120>
					if (nxt < 2) return FR_INT_ERR;
 800d93e:	2302      	movs	r3, #2
 800d940:	e7f6      	b.n	800d930 <remove_chain+0x120>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800d942:	2301      	movs	r3, #1
 800d944:	e7f4      	b.n	800d930 <remove_chain+0x120>
	return FR_OK;
 800d946:	2300      	movs	r3, #0
 800d948:	e7f2      	b.n	800d930 <remove_chain+0x120>
 800d94a:	2300      	movs	r3, #0
 800d94c:	e7f0      	b.n	800d930 <remove_chain+0x120>
 800d94e:	bf00      	nop

0800d950 <dir_clear>:
{
 800d950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d954:	4606      	mov	r6, r0
 800d956:	460c      	mov	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d958:	f7ff f942 	bl	800cbe0 <sync_window>
 800d95c:	b110      	cbz	r0, 800d964 <dir_clear+0x14>
 800d95e:	2001      	movs	r0, #1
}
 800d960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800d964:	4621      	mov	r1, r4
 800d966:	4630      	mov	r0, r6
 800d968:	f7fe ff82 	bl	800c870 <clst2sect>
 800d96c:	4680      	mov	r8, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 800d96e:	6370      	str	r0, [r6, #52]	; 0x34
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
 800d970:	f106 0938 	add.w	r9, r6, #56	; 0x38
 800d974:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d978:	2100      	movs	r1, #0
 800d97a:	4648      	mov	r0, r9
 800d97c:	f7fe ff48 	bl	800c810 <mem_set>
	for (szb = ((DWORD)fs->csize * SS(fs) >= 0x8000) ? 0x8000 : fs->csize * SS(fs); szb > SS(fs) && !(ibuf = ff_memalloc(szb)); szb /= 2) ;
 800d980:	8974      	ldrh	r4, [r6, #10]
 800d982:	0264      	lsls	r4, r4, #9
 800d984:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800d988:	d303      	bcc.n	800d992 <dir_clear+0x42>
 800d98a:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800d98e:	e000      	b.n	800d992 <dir_clear+0x42>
 800d990:	0864      	lsrs	r4, r4, #1
 800d992:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800d996:	d905      	bls.n	800d9a4 <dir_clear+0x54>
 800d998:	4620      	mov	r0, r4
 800d99a:	f7fe fe79 	bl	800c690 <ff_memalloc>
 800d99e:	4607      	mov	r7, r0
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	d0f5      	beq.n	800d990 <dir_clear+0x40>
	if (szb > SS(fs)) {		/* Buffer allocated? */
 800d9a4:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800d9a8:	d801      	bhi.n	800d9ae <dir_clear+0x5e>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800d9aa:	2500      	movs	r5, #0
 800d9ac:	e01d      	b.n	800d9ea <dir_clear+0x9a>
		mem_set(ibuf, 0, szb);
 800d9ae:	4622      	mov	r2, r4
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	4638      	mov	r0, r7
 800d9b4:	f7fe ff2c 	bl	800c810 <mem_set>
		szb /= SS(fs);		/* Bytes -> Sectors */
 800d9b8:	0a64      	lsrs	r4, r4, #9
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800d9ba:	2500      	movs	r5, #0
 800d9bc:	e000      	b.n	800d9c0 <dir_clear+0x70>
 800d9be:	4425      	add	r5, r4
 800d9c0:	8973      	ldrh	r3, [r6, #10]
 800d9c2:	42ab      	cmp	r3, r5
 800d9c4:	d908      	bls.n	800d9d8 <dir_clear+0x88>
 800d9c6:	4623      	mov	r3, r4
 800d9c8:	eb05 0208 	add.w	r2, r5, r8
 800d9cc:	4639      	mov	r1, r7
 800d9ce:	7870      	ldrb	r0, [r6, #1]
 800d9d0:	f7fe fe1e 	bl	800c610 <disk_write>
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d0f2      	beq.n	800d9be <dir_clear+0x6e>
		ff_memfree(ibuf);
 800d9d8:	4638      	mov	r0, r7
 800d9da:	f7fe fe61 	bl	800c6a0 <ff_memfree>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800d9de:	8970      	ldrh	r0, [r6, #10]
 800d9e0:	1b40      	subs	r0, r0, r5
 800d9e2:	bf18      	it	ne
 800d9e4:	2001      	movne	r0, #1
 800d9e6:	e7bb      	b.n	800d960 <dir_clear+0x10>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800d9e8:	3501      	adds	r5, #1
 800d9ea:	8973      	ldrh	r3, [r6, #10]
 800d9ec:	42ab      	cmp	r3, r5
 800d9ee:	d9f6      	bls.n	800d9de <dir_clear+0x8e>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	eb05 0208 	add.w	r2, r5, r8
 800d9f6:	4649      	mov	r1, r9
 800d9f8:	7870      	ldrb	r0, [r6, #1]
 800d9fa:	f7fe fe09 	bl	800c610 <disk_write>
 800d9fe:	2800      	cmp	r0, #0
 800da00:	d0f2      	beq.n	800d9e8 <dir_clear+0x98>
 800da02:	e7ec      	b.n	800d9de <dir_clear+0x8e>
 800da04:	f3af 8000 	nop.w
 800da08:	f3af 8000 	nop.w
 800da0c:	f3af 8000 	nop.w

0800da10 <dir_next>:
{
 800da10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 800da14:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da16:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da18:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d056      	beq.n	800dacc <dir_next+0xbc>
 800da1e:	3520      	adds	r5, #32
 800da20:	7832      	ldrb	r2, [r6, #0]
 800da22:	2a04      	cmp	r2, #4
 800da24:	d018      	beq.n	800da58 <dir_next+0x48>
 800da26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800da2a:	42aa      	cmp	r2, r5
 800da2c:	d950      	bls.n	800dad0 <dir_next+0xc0>
 800da2e:	4688      	mov	r8, r1
 800da30:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800da32:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800da36:	b93f      	cbnz	r7, 800da48 <dir_next+0x38>
		dp->sect++;				/* Next sector */
 800da38:	3301      	adds	r3, #1
 800da3a:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800da3c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800da3e:	b991      	cbnz	r1, 800da66 <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800da40:	8933      	ldrh	r3, [r6, #8]
 800da42:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800da46:	d90a      	bls.n	800da5e <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
 800da48:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800da4a:	f106 0338 	add.w	r3, r6, #56	; 0x38
 800da4e:	443b      	add	r3, r7
 800da50:	63e3      	str	r3, [r4, #60]	; 0x3c
	return FR_OK;
 800da52:	2000      	movs	r0, #0
}
 800da54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da5c:	e7e5      	b.n	800da2a <dir_next+0x1a>
				dp->sect = 0; return FR_NO_FILE;
 800da5e:	2300      	movs	r3, #0
 800da60:	6383      	str	r3, [r0, #56]	; 0x38
 800da62:	2004      	movs	r0, #4
 800da64:	e7f6      	b.n	800da54 <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800da66:	8973      	ldrh	r3, [r6, #10]
 800da68:	3b01      	subs	r3, #1
 800da6a:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800da6e:	d1eb      	bne.n	800da48 <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800da70:	f7ff fcce 	bl	800d410 <get_fat>
 800da74:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800da76:	2801      	cmp	r0, #1
 800da78:	d92c      	bls.n	800dad4 <dir_next+0xc4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800da7a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800da7e:	d02b      	beq.n	800dad8 <dir_next+0xc8>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800da80:	69f3      	ldr	r3, [r6, #28]
 800da82:	4283      	cmp	r3, r0
 800da84:	d816      	bhi.n	800dab4 <dir_next+0xa4>
					if (!stretch) {								/* If no stretch, report EOT */
 800da86:	f1b8 0f00 	cmp.w	r8, #0
 800da8a:	d01b      	beq.n	800dac4 <dir_next+0xb4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800da8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da8e:	4620      	mov	r0, r4
 800da90:	f7ff fdd6 	bl	800d640 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800da94:	4681      	mov	r9, r0
 800da96:	b308      	cbz	r0, 800dadc <dir_next+0xcc>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800da98:	2801      	cmp	r0, #1
 800da9a:	d021      	beq.n	800dae0 <dir_next+0xd0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800da9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800daa0:	d020      	beq.n	800dae4 <dir_next+0xd4>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800daa2:	4601      	mov	r1, r0
 800daa4:	4630      	mov	r0, r6
 800daa6:	f7ff ff53 	bl	800d950 <dir_clear>
 800daaa:	b9e8      	cbnz	r0, 800dae8 <dir_next+0xd8>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800daac:	79e3      	ldrb	r3, [r4, #7]
 800daae:	f043 0304 	orr.w	r3, r3, #4
 800dab2:	71e3      	strb	r3, [r4, #7]
				dp->clust = clst;		/* Initialize data for new cluster */
 800dab4:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
 800dab8:	4649      	mov	r1, r9
 800daba:	4630      	mov	r0, r6
 800dabc:	f7fe fed8 	bl	800c870 <clst2sect>
 800dac0:	63a0      	str	r0, [r4, #56]	; 0x38
 800dac2:	e7c1      	b.n	800da48 <dir_next+0x38>
						dp->sect = 0; return FR_NO_FILE;
 800dac4:	2300      	movs	r3, #0
 800dac6:	63a3      	str	r3, [r4, #56]	; 0x38
 800dac8:	2004      	movs	r0, #4
 800daca:	e7c3      	b.n	800da54 <dir_next+0x44>
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dacc:	2004      	movs	r0, #4
 800dace:	e7c1      	b.n	800da54 <dir_next+0x44>
 800dad0:	2004      	movs	r0, #4
 800dad2:	e7bf      	b.n	800da54 <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800dad4:	2002      	movs	r0, #2
 800dad6:	e7bd      	b.n	800da54 <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dad8:	2001      	movs	r0, #1
 800dada:	e7bb      	b.n	800da54 <dir_next+0x44>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dadc:	2007      	movs	r0, #7
 800dade:	e7b9      	b.n	800da54 <dir_next+0x44>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dae0:	2002      	movs	r0, #2
 800dae2:	e7b7      	b.n	800da54 <dir_next+0x44>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dae4:	2001      	movs	r0, #1
 800dae6:	e7b5      	b.n	800da54 <dir_next+0x44>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800dae8:	2001      	movs	r0, #1
 800daea:	e7b3      	b.n	800da54 <dir_next+0x44>
 800daec:	f3af 8000 	nop.w

0800daf0 <load_xdir>:
{
 800daf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daf4:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800daf6:	6800      	ldr	r0, [r0, #0]
 800daf8:	6906      	ldr	r6, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
 800dafa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dafc:	f7ff f898 	bl	800cc30 <move_window>
	if (res != FR_OK) return res;
 800db00:	4605      	mov	r5, r0
 800db02:	b920      	cbnz	r0, 800db0e <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;	/* Invalid order */
 800db04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800db06:	780b      	ldrb	r3, [r1, #0]
 800db08:	2b85      	cmp	r3, #133	; 0x85
 800db0a:	d003      	beq.n	800db14 <load_xdir+0x24>
 800db0c:	2502      	movs	r5, #2
}
 800db0e:	4628      	mov	r0, r5
 800db10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800db14:	2220      	movs	r2, #32
 800db16:	4630      	mov	r0, r6
 800db18:	f7fe fe6a 	bl	800c7f0 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800db1c:	7877      	ldrb	r7, [r6, #1]
 800db1e:	3701      	adds	r7, #1
 800db20:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800db22:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
 800db26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db2a:	d855      	bhi.n	800dbd8 <load_xdir+0xe8>
	res = dir_next(dp, 0);
 800db2c:	2100      	movs	r1, #0
 800db2e:	4620      	mov	r0, r4
 800db30:	f7ff ff6e 	bl	800da10 <dir_next>
 800db34:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800db36:	2804      	cmp	r0, #4
 800db38:	d050      	beq.n	800dbdc <load_xdir+0xec>
	if (res != FR_OK) return res;
 800db3a:	2800      	cmp	r0, #0
 800db3c:	d1e7      	bne.n	800db0e <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
 800db3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800db40:	6820      	ldr	r0, [r4, #0]
 800db42:	f7ff f875 	bl	800cc30 <move_window>
	if (res != FR_OK) return res;
 800db46:	4605      	mov	r5, r0
 800db48:	2800      	cmp	r0, #0
 800db4a:	d1e0      	bne.n	800db0e <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;	/* Invalid order */
 800db4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800db4e:	780b      	ldrb	r3, [r1, #0]
 800db50:	2bc0      	cmp	r3, #192	; 0xc0
 800db52:	d001      	beq.n	800db58 <load_xdir+0x68>
 800db54:	2502      	movs	r5, #2
 800db56:	e7da      	b.n	800db0e <load_xdir+0x1e>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800db58:	2220      	movs	r2, #32
 800db5a:	18b0      	adds	r0, r6, r2
 800db5c:	f7fe fe48 	bl	800c7f0 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800db60:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800db64:	332c      	adds	r3, #44	; 0x2c
 800db66:	4a21      	ldr	r2, [pc, #132]	; (800dbec <load_xdir+0xfc>)
 800db68:	fba2 2303 	umull	r2, r3, r2, r3
 800db6c:	08db      	lsrs	r3, r3, #3
 800db6e:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
 800db72:	d335      	bcc.n	800dbe0 <load_xdir+0xf0>
	i = 2 * SZDIRE;	/* C1 offset to load */
 800db74:	f04f 0840 	mov.w	r8, #64	; 0x40
 800db78:	e003      	b.n	800db82 <load_xdir+0x92>
	} while ((i += SZDIRE) < sz_ent);
 800db7a:	f108 0820 	add.w	r8, r8, #32
 800db7e:	4547      	cmp	r7, r8
 800db80:	d91c      	bls.n	800dbbc <load_xdir+0xcc>
		res = dir_next(dp, 0);
 800db82:	2100      	movs	r1, #0
 800db84:	4620      	mov	r0, r4
 800db86:	f7ff ff43 	bl	800da10 <dir_next>
 800db8a:	4605      	mov	r5, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800db8c:	2804      	cmp	r0, #4
 800db8e:	d029      	beq.n	800dbe4 <load_xdir+0xf4>
		if (res != FR_OK) return res;
 800db90:	2800      	cmp	r0, #0
 800db92:	d1bc      	bne.n	800db0e <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
 800db94:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800db96:	6820      	ldr	r0, [r4, #0]
 800db98:	f7ff f84a 	bl	800cc30 <move_window>
		if (res != FR_OK) return res;
 800db9c:	4605      	mov	r5, r0
 800db9e:	2800      	cmp	r0, #0
 800dba0:	d1b5      	bne.n	800db0e <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
 800dba2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dba4:	780b      	ldrb	r3, [r1, #0]
 800dba6:	2bc1      	cmp	r3, #193	; 0xc1
 800dba8:	d11e      	bne.n	800dbe8 <load_xdir+0xf8>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800dbaa:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 800dbae:	d2e4      	bcs.n	800db7a <load_xdir+0x8a>
 800dbb0:	2220      	movs	r2, #32
 800dbb2:	eb06 0008 	add.w	r0, r6, r8
 800dbb6:	f7fe fe1b 	bl	800c7f0 <mem_cpy>
 800dbba:	e7de      	b.n	800db7a <load_xdir+0x8a>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 800dbbc:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 800dbc0:	d8a5      	bhi.n	800db0e <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	f7fe ff9c 	bl	800cb00 <xdir_sum>
 800dbc8:	4604      	mov	r4, r0
 800dbca:	1cb0      	adds	r0, r6, #2
 800dbcc:	f7fe fd70 	bl	800c6b0 <ld_word>
 800dbd0:	4284      	cmp	r4, r0
 800dbd2:	d09c      	beq.n	800db0e <load_xdir+0x1e>
 800dbd4:	2502      	movs	r5, #2
 800dbd6:	e79a      	b.n	800db0e <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800dbd8:	2502      	movs	r5, #2
 800dbda:	e798      	b.n	800db0e <load_xdir+0x1e>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800dbdc:	2502      	movs	r5, #2
 800dbde:	e796      	b.n	800db0e <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800dbe0:	2502      	movs	r5, #2
 800dbe2:	e794      	b.n	800db0e <load_xdir+0x1e>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800dbe4:	2502      	movs	r5, #2
 800dbe6:	e792      	b.n	800db0e <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
 800dbe8:	2502      	movs	r5, #2
 800dbea:	e790      	b.n	800db0e <load_xdir+0x1e>
 800dbec:	88888889 	.word	0x88888889

0800dbf0 <load_obj_xdir>:
{
 800dbf0:	b510      	push	{r4, lr}
 800dbf2:	4604      	mov	r4, r0
	dp->obj.fs = obj->fs;
 800dbf4:	680b      	ldr	r3, [r1, #0]
 800dbf6:	6003      	str	r3, [r0, #0]
	dp->obj.sclust = obj->c_scl;
 800dbf8:	6a0b      	ldr	r3, [r1, #32]
 800dbfa:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800dbfc:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 800dc00:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800dc02:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800dc04:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc08:	2200      	movs	r2, #0
 800dc0a:	6103      	str	r3, [r0, #16]
 800dc0c:	6142      	str	r2, [r0, #20]
	dp->obj.n_frag = 0;
 800dc0e:	61c2      	str	r2, [r0, #28]
	dp->blk_ofs = obj->c_ofs;
 800dc10:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800dc12:	64c1      	str	r1, [r0, #76]	; 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800dc14:	f7ff fcb4 	bl	800d580 <dir_sdi>
	if (res == FR_OK) {
 800dc18:	4603      	mov	r3, r0
 800dc1a:	b108      	cbz	r0, 800dc20 <load_obj_xdir+0x30>
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	bd10      	pop	{r4, pc}
		res = load_xdir(dp);		/* Load the object's entry block */
 800dc20:	4620      	mov	r0, r4
 800dc22:	f7ff ff65 	bl	800daf0 <load_xdir>
 800dc26:	4603      	mov	r3, r0
 800dc28:	e7f8      	b.n	800dc1c <load_obj_xdir+0x2c>
 800dc2a:	bf00      	nop
 800dc2c:	f3af 8000 	nop.w

0800dc30 <dir_read>:
{
 800dc30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc34:	4604      	mov	r4, r0
 800dc36:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 800dc38:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 800dc3a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800dc3e:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
 800dc40:	2504      	movs	r5, #4
	while (dp->sect) {
 800dc42:	e008      	b.n	800dc56 <dir_read+0x26>
				if (c == 0x85) {		/* Start of the file entry block? */
 800dc44:	2b85      	cmp	r3, #133	; 0x85
 800dc46:	d028      	beq.n	800dc9a <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
 800dc48:	2100      	movs	r1, #0
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f7ff fee0 	bl	800da10 <dir_next>
		if (res != FR_OK) break;
 800dc50:	4605      	mov	r5, r0
 800dc52:	2800      	cmp	r0, #0
 800dc54:	d15b      	bne.n	800dd0e <dir_read+0xde>
	while (dp->sect) {
 800dc56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dc58:	2900      	cmp	r1, #0
 800dc5a:	d058      	beq.n	800dd0e <dir_read+0xde>
		res = move_window(fs, dp->sect);
 800dc5c:	4630      	mov	r0, r6
 800dc5e:	f7fe ffe7 	bl	800cc30 <move_window>
		if (res != FR_OK) break;
 800dc62:	4605      	mov	r5, r0
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d152      	bne.n	800dd0e <dir_read+0xde>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800dc68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dc6a:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d04d      	beq.n	800dd0c <dir_read+0xdc>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800dc70:	7832      	ldrb	r2, [r6, #0]
 800dc72:	2a04      	cmp	r2, #4
 800dc74:	d0e6      	beq.n	800dc44 <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800dc76:	7aca      	ldrb	r2, [r1, #11]
 800dc78:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800dc7c:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800dc7e:	2be5      	cmp	r3, #229	; 0xe5
 800dc80:	d03e      	beq.n	800dd00 <dir_read+0xd0>
 800dc82:	2b2e      	cmp	r3, #46	; 0x2e
 800dc84:	d03e      	beq.n	800dd04 <dir_read+0xd4>
 800dc86:	f022 0020 	bic.w	r0, r2, #32
 800dc8a:	2808      	cmp	r0, #8
 800dc8c:	bf14      	ite	ne
 800dc8e:	2000      	movne	r0, #0
 800dc90:	2001      	moveq	r0, #1
 800dc92:	4540      	cmp	r0, r8
 800dc94:	d00e      	beq.n	800dcb4 <dir_read+0x84>
				ord = 0xFF;
 800dc96:	27ff      	movs	r7, #255	; 0xff
 800dc98:	e7d6      	b.n	800dc48 <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800dc9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dc9c:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f7ff ff26 	bl	800daf0 <load_xdir>
					if (res == FR_OK) {
 800dca4:	4605      	mov	r5, r0
 800dca6:	bb90      	cbnz	r0, 800dd0e <dir_read+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800dca8:	6933      	ldr	r3, [r6, #16]
 800dcaa:	791b      	ldrb	r3, [r3, #4]
 800dcac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcb0:	71a3      	strb	r3, [r4, #6]
 800dcb2:	e02c      	b.n	800dd0e <dir_read+0xde>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800dcb4:	2a0f      	cmp	r2, #15
 800dcb6:	d119      	bne.n	800dcec <dir_read+0xbc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800dcb8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800dcbc:	d006      	beq.n	800dccc <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
 800dcbe:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800dcc2:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800dcc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800dcc8:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
 800dcca:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dccc:	42bb      	cmp	r3, r7
 800dcce:	d001      	beq.n	800dcd4 <dir_read+0xa4>
 800dcd0:	27ff      	movs	r7, #255	; 0xff
 800dcd2:	e7b9      	b.n	800dc48 <dir_read+0x18>
 800dcd4:	7b4b      	ldrb	r3, [r1, #13]
 800dcd6:	454b      	cmp	r3, r9
 800dcd8:	d001      	beq.n	800dcde <dir_read+0xae>
 800dcda:	27ff      	movs	r7, #255	; 0xff
 800dcdc:	e7b4      	b.n	800dc48 <dir_read+0x18>
 800dcde:	68f0      	ldr	r0, [r6, #12]
 800dce0:	f7fe fe1e 	bl	800c920 <pick_lfn>
 800dce4:	b180      	cbz	r0, 800dd08 <dir_read+0xd8>
 800dce6:	3f01      	subs	r7, #1
 800dce8:	b2ff      	uxtb	r7, r7
 800dcea:	e7ad      	b.n	800dc48 <dir_read+0x18>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800dcec:	b927      	cbnz	r7, 800dcf8 <dir_read+0xc8>
 800dcee:	4608      	mov	r0, r1
 800dcf0:	f7fe fef6 	bl	800cae0 <sum_sfn>
 800dcf4:	4548      	cmp	r0, r9
 800dcf6:	d00a      	beq.n	800dd0e <dir_read+0xde>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800dcf8:	f04f 33ff 	mov.w	r3, #4294967295
 800dcfc:	64e3      	str	r3, [r4, #76]	; 0x4c
 800dcfe:	e006      	b.n	800dd0e <dir_read+0xde>
				ord = 0xFF;
 800dd00:	27ff      	movs	r7, #255	; 0xff
 800dd02:	e7a1      	b.n	800dc48 <dir_read+0x18>
 800dd04:	27ff      	movs	r7, #255	; 0xff
 800dd06:	e79f      	b.n	800dc48 <dir_read+0x18>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dd08:	27ff      	movs	r7, #255	; 0xff
 800dd0a:	e79d      	b.n	800dc48 <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800dd0c:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800dd0e:	b10d      	cbz	r5, 800dd14 <dir_read+0xe4>
 800dd10:	2300      	movs	r3, #0
 800dd12:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800dd14:	4628      	mov	r0, r5
 800dd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd1a:	bf00      	nop
 800dd1c:	f3af 8000 	nop.w

0800dd20 <dir_alloc>:
{
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	4604      	mov	r4, r0
 800dd24:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 800dd26:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800dd28:	2100      	movs	r1, #0
 800dd2a:	f7ff fc29 	bl	800d580 <dir_sdi>
	if (res == FR_OK) {
 800dd2e:	4602      	mov	r2, r0
 800dd30:	bb30      	cbnz	r0, 800dd80 <dir_alloc+0x60>
		n = 0;
 800dd32:	2500      	movs	r5, #0
 800dd34:	e00e      	b.n	800dd54 <dir_alloc+0x34>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800dd36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dd38:	f993 3000 	ldrsb.w	r3, [r3]
 800dd3c:	43db      	mvns	r3, r3
 800dd3e:	0fdb      	lsrs	r3, r3, #31
 800dd40:	b1e3      	cbz	r3, 800dd7c <dir_alloc+0x5c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dd42:	3501      	adds	r5, #1
 800dd44:	42bd      	cmp	r5, r7
 800dd46:	d01b      	beq.n	800dd80 <dir_alloc+0x60>
			res = dir_next(dp, 1);
 800dd48:	2101      	movs	r1, #1
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f7ff fe60 	bl	800da10 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dd50:	4602      	mov	r2, r0
 800dd52:	b9a8      	cbnz	r0, 800dd80 <dir_alloc+0x60>
			res = move_window(fs, dp->sect);
 800dd54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dd56:	4630      	mov	r0, r6
 800dd58:	f7fe ff6a 	bl	800cc30 <move_window>
			if (res != FR_OK) break;
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	b978      	cbnz	r0, 800dd80 <dir_alloc+0x60>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800dd60:	7833      	ldrb	r3, [r6, #0]
 800dd62:	2b04      	cmp	r3, #4
 800dd64:	d0e7      	beq.n	800dd36 <dir_alloc+0x16>
 800dd66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	2be5      	cmp	r3, #229	; 0xe5
 800dd6c:	d002      	beq.n	800dd74 <dir_alloc+0x54>
 800dd6e:	b91b      	cbnz	r3, 800dd78 <dir_alloc+0x58>
 800dd70:	2301      	movs	r3, #1
 800dd72:	e7e5      	b.n	800dd40 <dir_alloc+0x20>
 800dd74:	2301      	movs	r3, #1
 800dd76:	e7e3      	b.n	800dd40 <dir_alloc+0x20>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e7e1      	b.n	800dd40 <dir_alloc+0x20>
				n = 0;					/* Not a blank entry. Restart to search */
 800dd7c:	2500      	movs	r5, #0
 800dd7e:	e7e3      	b.n	800dd48 <dir_alloc+0x28>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dd80:	2a04      	cmp	r2, #4
 800dd82:	d001      	beq.n	800dd88 <dir_alloc+0x68>
}
 800dd84:	4610      	mov	r0, r2
 800dd86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dd88:	2207      	movs	r2, #7
 800dd8a:	e7fb      	b.n	800dd84 <dir_alloc+0x64>
 800dd8c:	f3af 8000 	nop.w

0800dd90 <store_xdir>:
{
 800dd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd92:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800dd94:	6803      	ldr	r3, [r0, #0]
 800dd96:	691e      	ldr	r6, [r3, #16]
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800dd98:	4630      	mov	r0, r6
 800dd9a:	f7fe feb1 	bl	800cb00 <xdir_sum>
 800dd9e:	4601      	mov	r1, r0
 800dda0:	1cb0      	adds	r0, r6, #2
 800dda2:	f7fe fcf5 	bl	800c790 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800dda6:	7877      	ldrb	r7, [r6, #1]
 800dda8:	3701      	adds	r7, #1
	res = dir_sdi(dp, dp->blk_ofs);
 800ddaa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ddac:	4620      	mov	r0, r4
 800ddae:	f7ff fbe7 	bl	800d580 <dir_sdi>
 800ddb2:	4605      	mov	r5, r0
	while (res == FR_OK) {
 800ddb4:	b9b5      	cbnz	r5, 800dde4 <store_xdir+0x54>
		res = move_window(dp->obj.fs, dp->sect);
 800ddb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ddb8:	6820      	ldr	r0, [r4, #0]
 800ddba:	f7fe ff39 	bl	800cc30 <move_window>
		if (res != FR_OK) break;
 800ddbe:	4605      	mov	r5, r0
 800ddc0:	b980      	cbnz	r0, 800dde4 <store_xdir+0x54>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800ddc2:	2220      	movs	r2, #32
 800ddc4:	4631      	mov	r1, r6
 800ddc6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ddc8:	f7fe fd12 	bl	800c7f0 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800ddcc:	6823      	ldr	r3, [r4, #0]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800ddd2:	3f01      	subs	r7, #1
 800ddd4:	d006      	beq.n	800dde4 <store_xdir+0x54>
		dirb += SZDIRE;
 800ddd6:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
 800ddd8:	2100      	movs	r1, #0
 800ddda:	4620      	mov	r0, r4
 800dddc:	f7ff fe18 	bl	800da10 <dir_next>
 800dde0:	4605      	mov	r5, r0
 800dde2:	e7e7      	b.n	800ddb4 <store_xdir+0x24>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800dde4:	2d02      	cmp	r5, #2
 800dde6:	bf28      	it	cs
 800dde8:	2502      	movcs	r5, #2
}
 800ddea:	b2e8      	uxtb	r0, r5
 800ddec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddee:	bf00      	nop

0800ddf0 <dir_remove>:
{
 800ddf0:	b570      	push	{r4, r5, r6, lr}
 800ddf2:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800ddf4:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 800ddf6:	6b06      	ldr	r6, [r0, #48]	; 0x30
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800ddf8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800ddfa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ddfe:	d014      	beq.n	800de2a <dir_remove+0x3a>
 800de00:	f7ff fbbe 	bl	800d580 <dir_sdi>
	if (res == FR_OK) {
 800de04:	4603      	mov	r3, r0
 800de06:	b180      	cbz	r0, 800de2a <dir_remove+0x3a>
 800de08:	e01e      	b.n	800de48 <dir_remove+0x58>
				dp->dir[XDIR_Type] &= 0x7F;
 800de0a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800de0c:	780a      	ldrb	r2, [r1, #0]
 800de0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800de12:	700a      	strb	r2, [r1, #0]
			fs->wflag = 1;
 800de14:	2201      	movs	r2, #1
 800de16:	70ea      	strb	r2, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800de18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800de1a:	42b2      	cmp	r2, r6
 800de1c:	d212      	bcs.n	800de44 <dir_remove+0x54>
			res = dir_next(dp, 0);	/* Next entry */
 800de1e:	2100      	movs	r1, #0
 800de20:	4620      	mov	r0, r4
 800de22:	f7ff fdf5 	bl	800da10 <dir_next>
		} while (res == FR_OK);
 800de26:	4603      	mov	r3, r0
 800de28:	b960      	cbnz	r0, 800de44 <dir_remove+0x54>
			res = move_window(fs, dp->sect);
 800de2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800de2c:	4628      	mov	r0, r5
 800de2e:	f7fe feff 	bl	800cc30 <move_window>
			if (res != FR_OK) break;
 800de32:	4603      	mov	r3, r0
 800de34:	b930      	cbnz	r0, 800de44 <dir_remove+0x54>
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800de36:	782a      	ldrb	r2, [r5, #0]
 800de38:	2a04      	cmp	r2, #4
 800de3a:	d0e6      	beq.n	800de0a <dir_remove+0x1a>
				dp->dir[DIR_Name] = DDEM;
 800de3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800de3e:	21e5      	movs	r1, #229	; 0xe5
 800de40:	7011      	strb	r1, [r2, #0]
 800de42:	e7e7      	b.n	800de14 <dir_remove+0x24>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800de44:	2b04      	cmp	r3, #4
 800de46:	d001      	beq.n	800de4c <dir_remove+0x5c>
}
 800de48:	4618      	mov	r0, r3
 800de4a:	bd70      	pop	{r4, r5, r6, pc}
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800de4c:	2302      	movs	r3, #2
 800de4e:	e7fb      	b.n	800de48 <dir_remove+0x58>

0800de50 <create_name>:
{
 800de50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de54:	b083      	sub	sp, #12
 800de56:	4680      	mov	r8, r0
 800de58:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800de5a:	f8d1 9000 	ldr.w	r9, [r1]
 800de5e:	6803      	ldr	r3, [r0, #0]
 800de60:	68dd      	ldr	r5, [r3, #12]
 800de62:	2400      	movs	r4, #0
 800de64:	4627      	mov	r7, r4
 800de66:	e014      	b.n	800de92 <create_name+0x42>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800de68:	f10b 0b01 	add.w	fp, fp, #1
 800de6c:	f819 300b 	ldrb.w	r3, [r9, fp]
 800de70:	2b2f      	cmp	r3, #47	; 0x2f
 800de72:	d0f9      	beq.n	800de68 <create_name+0x18>
 800de74:	2b5c      	cmp	r3, #92	; 0x5c
 800de76:	d0f7      	beq.n	800de68 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 800de78:	eb09 030b 	add.w	r3, r9, fp
 800de7c:	f8ca 3000 	str.w	r3, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800de80:	2e1f      	cmp	r6, #31
 800de82:	d837      	bhi.n	800def4 <create_name+0xa4>
 800de84:	2704      	movs	r7, #4
 800de86:	e038      	b.n	800defa <create_name+0xaa>
		w = p[si++];					/* Get a character */
 800de88:	465f      	mov	r7, fp
 800de8a:	e020      	b.n	800dece <create_name+0x7e>
		lfn[di++] = w;					/* Store the Unicode character */
 800de8c:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
 800de90:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 800de92:	f107 0b01 	add.w	fp, r7, #1
 800de96:	f819 0007 	ldrb.w	r0, [r9, r7]
 800de9a:	b286      	uxth	r6, r0
		if (w < ' ') break;				/* Break if end of the path name */
 800de9c:	2e1f      	cmp	r6, #31
 800de9e:	d9eb      	bls.n	800de78 <create_name+0x28>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dea0:	2e2f      	cmp	r6, #47	; 0x2f
 800dea2:	d0e3      	beq.n	800de6c <create_name+0x1c>
 800dea4:	2e5c      	cmp	r6, #92	; 0x5c
 800dea6:	d0e1      	beq.n	800de6c <create_name+0x1c>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800dea8:	2cfe      	cmp	r4, #254	; 0xfe
 800deaa:	f200 8107 	bhi.w	800e0bc <create_name+0x26c>
		if (dbc_1st((BYTE)w)) {			/* Check if it is a DBC 1st byte */
 800deae:	f7fe fccf 	bl	800c850 <dbc_1st>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d0e8      	beq.n	800de88 <create_name+0x38>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800deb6:	3702      	adds	r7, #2
 800deb8:	f819 000b 	ldrb.w	r0, [r9, fp]
			w = (w << 8) + b;			/* Create a DBC */
 800debc:	0236      	lsls	r6, r6, #8
 800debe:	b2b6      	uxth	r6, r6
 800dec0:	4406      	add	r6, r0
 800dec2:	b2b6      	uxth	r6, r6
			if (!dbc_2nd(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800dec4:	f7fe fccc 	bl	800c860 <dbc_2nd>
 800dec8:	2800      	cmp	r0, #0
 800deca:	f000 80f9 	beq.w	800e0c0 <create_name+0x270>
		w = ff_oem2uni(w, CODEPAGE);	/* Convert ANSI/OEM to Unicode */
 800dece:	f240 3152 	movw	r1, #850	; 0x352
 800ded2:	4630      	mov	r0, r6
 800ded4:	f002 f82c 	bl	800ff30 <ff_oem2uni>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ded8:	4606      	mov	r6, r0
 800deda:	2800      	cmp	r0, #0
 800dedc:	f000 80f2 	beq.w	800e0c4 <create_name+0x274>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800dee0:	287f      	cmp	r0, #127	; 0x7f
 800dee2:	d8d3      	bhi.n	800de8c <create_name+0x3c>
 800dee4:	4601      	mov	r1, r0
 800dee6:	4879      	ldr	r0, [pc, #484]	; (800e0cc <create_name+0x27c>)
 800dee8:	f7fe fcaa 	bl	800c840 <chk_chr>
 800deec:	2800      	cmp	r0, #0
 800deee:	d0cd      	beq.n	800de8c <create_name+0x3c>
 800def0:	2006      	movs	r0, #6
 800def2:	e085      	b.n	800e000 <create_name+0x1b0>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800def4:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800def6:	e000      	b.n	800defa <create_name+0xaa>
		di--;
 800def8:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800defa:	b144      	cbz	r4, 800df0e <create_name+0xbe>
		w = lfn[di - 1];
 800defc:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800df00:	3b01      	subs	r3, #1
 800df02:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 800df06:	2b20      	cmp	r3, #32
 800df08:	d0f6      	beq.n	800def8 <create_name+0xa8>
 800df0a:	2b2e      	cmp	r3, #46	; 0x2e
 800df0c:	d0f4      	beq.n	800def8 <create_name+0xa8>
	lfn[di] = 0;						/* LFN is created */
 800df0e:	2300      	movs	r3, #0
 800df10:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800df14:	2c00      	cmp	r4, #0
 800df16:	f000 80d7 	beq.w	800e0c8 <create_name+0x278>
	mem_set(dp->fn, ' ', 11);
 800df1a:	220b      	movs	r2, #11
 800df1c:	2120      	movs	r1, #32
 800df1e:	f108 0040 	add.w	r0, r8, #64	; 0x40
 800df22:	f7fe fc75 	bl	800c810 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800df26:	2300      	movs	r3, #0
 800df28:	e000      	b.n	800df2c <create_name+0xdc>
 800df2a:	3301      	adds	r3, #1
 800df2c:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800df30:	2a20      	cmp	r2, #32
 800df32:	d0fa      	beq.n	800df2a <create_name+0xda>
 800df34:	2a2e      	cmp	r2, #46	; 0x2e
 800df36:	d0f8      	beq.n	800df2a <create_name+0xda>
	if (si > 0) cf |= NS_LOSS | NS_LFN;
 800df38:	b11b      	cbz	r3, 800df42 <create_name+0xf2>
 800df3a:	f047 0703 	orr.w	r7, r7, #3
 800df3e:	e000      	b.n	800df42 <create_name+0xf2>
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800df40:	3c01      	subs	r4, #1
 800df42:	b164      	cbz	r4, 800df5e <create_name+0x10e>
 800df44:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 800df48:	3a01      	subs	r2, #1
 800df4a:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800df4e:	2a2e      	cmp	r2, #46	; 0x2e
 800df50:	d1f6      	bne.n	800df40 <create_name+0xf0>
 800df52:	f04f 0b08 	mov.w	fp, #8
 800df56:	2200      	movs	r2, #0
 800df58:	9201      	str	r2, [sp, #4]
 800df5a:	4692      	mov	sl, r2
 800df5c:	e00a      	b.n	800df74 <create_name+0x124>
 800df5e:	9401      	str	r4, [sp, #4]
 800df60:	f04f 0b08 	mov.w	fp, #8
 800df64:	f04f 0a00 	mov.w	sl, #0
 800df68:	e004      	b.n	800df74 <create_name+0x124>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800df6a:	454c      	cmp	r4, r9
 800df6c:	d00b      	beq.n	800df86 <create_name+0x136>
			cf |= NS_LOSS | NS_LFN;
 800df6e:	f047 0703 	orr.w	r7, r7, #3
		w = lfn[si++];					/* Get an LFN character */
 800df72:	464b      	mov	r3, r9
 800df74:	f103 0901 	add.w	r9, r3, #1
 800df78:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800df7c:	b316      	cbz	r6, 800dfc4 <create_name+0x174>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800df7e:	2e20      	cmp	r6, #32
 800df80:	d0f5      	beq.n	800df6e <create_name+0x11e>
 800df82:	2e2e      	cmp	r6, #46	; 0x2e
 800df84:	d0f1      	beq.n	800df6a <create_name+0x11a>
		if (i >= ni || si == di) {		/* Entered extension or end of SFN */
 800df86:	9b01      	ldr	r3, [sp, #4]
 800df88:	455b      	cmp	r3, fp
 800df8a:	d212      	bcs.n	800dfb2 <create_name+0x162>
 800df8c:	454c      	cmp	r4, r9
 800df8e:	d010      	beq.n	800dfb2 <create_name+0x162>
		if (w >= 0x80) {				/* Is this a non-ASCII character? */
 800df90:	2e7f      	cmp	r6, #127	; 0x7f
 800df92:	d845      	bhi.n	800e020 <create_name+0x1d0>
		if (w >= 0x100) {				/* Is this a DBC? */
 800df94:	2eff      	cmp	r6, #255	; 0xff
 800df96:	d95a      	bls.n	800e04e <create_name+0x1fe>
			if (i >= ni - 1) {			/* Field overflow? */
 800df98:	f10b 33ff 	add.w	r3, fp, #4294967295
 800df9c:	9a01      	ldr	r2, [sp, #4]
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d94f      	bls.n	800e042 <create_name+0x1f2>
			dp->fn[i++] = (BYTE)(w >> 8);	/* Put 1st byte */
 800dfa2:	9901      	ldr	r1, [sp, #4]
 800dfa4:	1c4b      	adds	r3, r1, #1
 800dfa6:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800dfaa:	4441      	add	r1, r8
 800dfac:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
 800dfb0:	e052      	b.n	800e058 <create_name+0x208>
			if (ni == 11) {				/* Extension fileld overflow? */
 800dfb2:	f1bb 0f0b 	cmp.w	fp, #11
 800dfb6:	d026      	beq.n	800e006 <create_name+0x1b6>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dfb8:	454c      	cmp	r4, r9
 800dfba:	d001      	beq.n	800dfc0 <create_name+0x170>
 800dfbc:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;			/* No extension */
 800dfc0:	454c      	cmp	r4, r9
 800dfc2:	d223      	bcs.n	800e00c <create_name+0x1bc>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dfc4:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
 800dfc8:	2be5      	cmp	r3, #229	; 0xe5
 800dfca:	d068      	beq.n	800e09e <create_name+0x24e>
	if (ni == 8) b <<= 2;
 800dfcc:	f1bb 0f08 	cmp.w	fp, #8
 800dfd0:	d069      	beq.n	800e0a6 <create_name+0x256>
 800dfd2:	f00a 030c 	and.w	r3, sl, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dfd6:	2b0c      	cmp	r3, #12
 800dfd8:	d003      	beq.n	800dfe2 <create_name+0x192>
 800dfda:	f00a 0203 	and.w	r2, sl, #3
 800dfde:	2a03      	cmp	r2, #3
 800dfe0:	d101      	bne.n	800dfe6 <create_name+0x196>
 800dfe2:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dfe6:	f017 0f02 	tst.w	r7, #2
 800dfea:	d106      	bne.n	800dffa <create_name+0x1aa>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dfec:	f00a 0a03 	and.w	sl, sl, #3
 800dff0:	f1ba 0f01 	cmp.w	sl, #1
 800dff4:	d05c      	beq.n	800e0b0 <create_name+0x260>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dff6:	2b04      	cmp	r3, #4
 800dff8:	d05d      	beq.n	800e0b6 <create_name+0x266>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dffa:	f888 704b 	strb.w	r7, [r8, #75]	; 0x4b
	return FR_OK;
 800dffe:	2000      	movs	r0, #0
}
 800e000:	b003      	add	sp, #12
 800e002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN;
 800e006:	f047 0703 	orr.w	r7, r7, #3
				break;
 800e00a:	e7db      	b.n	800dfc4 <create_name+0x174>
			b <<= 2; continue;
 800e00c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800e010:	fa5f fa8a 	uxtb.w	sl, sl
			si = di; i = 8; ni = 11;	/* Enter extension fileld */
 800e014:	4623      	mov	r3, r4
 800e016:	f04f 0b0b 	mov.w	fp, #11
 800e01a:	2208      	movs	r2, #8
 800e01c:	9201      	str	r2, [sp, #4]
			b <<= 2; continue;
 800e01e:	e7a9      	b.n	800df74 <create_name+0x124>
			cf |= NS_LFN;				/* Force to create LFN entry */
 800e020:	f047 0702 	orr.w	r7, r7, #2
			w = ff_uni2oem(w, CODEPAGE);	/* Unicode -> OEM code */
 800e024:	f240 3152 	movw	r1, #850	; 0x352
 800e028:	4630      	mov	r0, r6
 800e02a:	f001 ff61 	bl	800fef0 <ff_uni2oem>
 800e02e:	4606      	mov	r6, r0
			if (w & 0x80) w = ExCvt[w & 0x7F];	/* Convert extended character to upper (SBCS) */
 800e030:	f010 0f80 	tst.w	r0, #128	; 0x80
 800e034:	d0ae      	beq.n	800df94 <create_name+0x144>
 800e036:	f000 067f 	and.w	r6, r0, #127	; 0x7f
 800e03a:	4b25      	ldr	r3, [pc, #148]	; (800e0d0 <create_name+0x280>)
 800e03c:	4433      	add	r3, r6
 800e03e:	7c1e      	ldrb	r6, [r3, #16]
 800e040:	e7a8      	b.n	800df94 <create_name+0x144>
				cf |= NS_LOSS | NS_LFN;
 800e042:	f047 0703 	orr.w	r7, r7, #3
		w = lfn[si++];					/* Get an LFN character */
 800e046:	464b      	mov	r3, r9
				i = ni; continue;		/* Next field */
 800e048:	f8cd b004 	str.w	fp, [sp, #4]
 800e04c:	e792      	b.n	800df74 <create_name+0x124>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e04e:	b956      	cbnz	r6, 800e066 <create_name+0x216>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e050:	f047 0703 	orr.w	r7, r7, #3
 800e054:	9b01      	ldr	r3, [sp, #4]
 800e056:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800e058:	1c5a      	adds	r2, r3, #1
 800e05a:	9201      	str	r2, [sp, #4]
 800e05c:	4443      	add	r3, r8
 800e05e:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800e062:	464b      	mov	r3, r9
 800e064:	e786      	b.n	800df74 <create_name+0x124>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e066:	4631      	mov	r1, r6
 800e068:	481a      	ldr	r0, [pc, #104]	; (800e0d4 <create_name+0x284>)
 800e06a:	f7fe fbe9 	bl	800c840 <chk_chr>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d1ee      	bne.n	800e050 <create_name+0x200>
				if (IsUpper(w)) {		/* ASCII large capital */
 800e072:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 800e076:	b29b      	uxth	r3, r3
 800e078:	2b19      	cmp	r3, #25
 800e07a:	d803      	bhi.n	800e084 <create_name+0x234>
					b |= 2;
 800e07c:	f04a 0a02 	orr.w	sl, sl, #2
 800e080:	9b01      	ldr	r3, [sp, #4]
 800e082:	e7e9      	b.n	800e058 <create_name+0x208>
					if (IsLower(w)) {	/* ASCII small capital */
 800e084:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 800e088:	b29b      	uxth	r3, r3
 800e08a:	2b19      	cmp	r3, #25
 800e08c:	d805      	bhi.n	800e09a <create_name+0x24a>
						b |= 1; w -= 0x20;
 800e08e:	f04a 0a01 	orr.w	sl, sl, #1
 800e092:	3e20      	subs	r6, #32
 800e094:	b2b6      	uxth	r6, r6
 800e096:	9b01      	ldr	r3, [sp, #4]
 800e098:	e7de      	b.n	800e058 <create_name+0x208>
 800e09a:	9b01      	ldr	r3, [sp, #4]
 800e09c:	e7dc      	b.n	800e058 <create_name+0x208>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e09e:	2305      	movs	r3, #5
 800e0a0:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
 800e0a4:	e792      	b.n	800dfcc <create_name+0x17c>
	if (ni == 8) b <<= 2;
 800e0a6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800e0aa:	fa5f fa8a 	uxtb.w	sl, sl
 800e0ae:	e790      	b.n	800dfd2 <create_name+0x182>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e0b0:	f047 0710 	orr.w	r7, r7, #16
 800e0b4:	e79f      	b.n	800dff6 <create_name+0x1a6>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e0b6:	f047 0708 	orr.w	r7, r7, #8
 800e0ba:	e79e      	b.n	800dffa <create_name+0x1aa>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e0bc:	2006      	movs	r0, #6
 800e0be:	e79f      	b.n	800e000 <create_name+0x1b0>
			if (!dbc_2nd(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800e0c0:	2006      	movs	r0, #6
 800e0c2:	e79d      	b.n	800e000 <create_name+0x1b0>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e0c4:	2006      	movs	r0, #6
 800e0c6:	e79b      	b.n	800e000 <create_name+0x1b0>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e0c8:	2006      	movs	r0, #6
 800e0ca:	e799      	b.n	800e000 <create_name+0x1b0>
 800e0cc:	0801603c 	.word	0x0801603c
 800e0d0:	080156d8 	.word	0x080156d8
 800e0d4:	08016048 	.word	0x08016048
 800e0d8:	f3af 8000 	nop.w
 800e0dc:	f3af 8000 	nop.w

0800e0e0 <get_xdir_info>:
{
 800e0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e4:	4607      	mov	r7, r0
 800e0e6:	4688      	mov	r8, r1
	for (si = SZDIRE * 2, nc = di = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800e0e8:	2600      	movs	r6, #0
 800e0ea:	2540      	movs	r5, #64	; 0x40
 800e0ec:	4634      	mov	r4, r6
 800e0ee:	e008      	b.n	800e102 <get_xdir_info+0x22>
		if (w == 0 || di >= FF_MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800e0f0:	b1f8      	cbz	r0, 800e132 <get_xdir_info+0x52>
 800e0f2:	2cfe      	cmp	r4, #254	; 0xfe
 800e0f4:	d843      	bhi.n	800e17e <get_xdir_info+0x9e>
		fno->fname[di++] = (TCHAR)w;			/* Store the character */
 800e0f6:	eb08 0304 	add.w	r3, r8, r4
 800e0fa:	7698      	strb	r0, [r3, #26]
	for (si = SZDIRE * 2, nc = di = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800e0fc:	3502      	adds	r5, #2
 800e0fe:	3601      	adds	r6, #1
		fno->fname[di++] = (TCHAR)w;			/* Store the character */
 800e100:	3401      	adds	r4, #1
	for (si = SZDIRE * 2, nc = di = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800e102:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e106:	42b3      	cmp	r3, r6
 800e108:	d914      	bls.n	800e134 <get_xdir_info+0x54>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800e10a:	f015 0f1f 	tst.w	r5, #31
 800e10e:	d100      	bne.n	800e112 <get_xdir_info+0x32>
 800e110:	3502      	adds	r5, #2
		w = ld_word(dirb + si);					/* Get a character */
 800e112:	1978      	adds	r0, r7, r5
 800e114:	f7fe facc 	bl	800c6b0 <ld_word>
		w = ff_uni2oem(w, CODEPAGE);			/* Convert it to OEM code */
 800e118:	f240 3152 	movw	r1, #850	; 0x352
 800e11c:	f001 fee8 	bl	800fef0 <ff_uni2oem>
		if (w >= 0x100) {						/* Is it a double byte char? */
 800e120:	28ff      	cmp	r0, #255	; 0xff
 800e122:	d9e5      	bls.n	800e0f0 <get_xdir_info+0x10>
			fno->fname[di++] = (char)(w >> 8);	/* Store 1st byte of the DBC */
 800e124:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e128:	eb08 0204 	add.w	r2, r8, r4
 800e12c:	7693      	strb	r3, [r2, #26]
 800e12e:	3401      	adds	r4, #1
 800e130:	e7de      	b.n	800e0f0 <get_xdir_info+0x10>
		if (w == 0 || di >= FF_MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800e132:	2400      	movs	r4, #0
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800e134:	b924      	cbnz	r4, 800e140 <get_xdir_info+0x60>
 800e136:	eb08 0304 	add.w	r3, r8, r4
 800e13a:	223f      	movs	r2, #63	; 0x3f
 800e13c:	769a      	strb	r2, [r3, #26]
 800e13e:	3401      	adds	r4, #1
	fno->fname[di] = 0;						/* Terminate file name */
 800e140:	4444      	add	r4, r8
 800e142:	2300      	movs	r3, #0
 800e144:	76a3      	strb	r3, [r4, #26]
	fno->altname[0] = 0;					/* No SFN */
 800e146:	f888 300d 	strb.w	r3, [r8, #13]
	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
 800e14a:	793b      	ldrb	r3, [r7, #4]
 800e14c:	f888 300c 	strb.w	r3, [r8, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800e150:	f013 0f10 	tst.w	r3, #16
 800e154:	d115      	bne.n	800e182 <get_xdir_info+0xa2>
 800e156:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800e15a:	f7fe fac1 	bl	800c6e0 <ld_qword>
 800e15e:	e9c8 0100 	strd	r0, r1, [r8]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800e162:	f107 000c 	add.w	r0, r7, #12
 800e166:	f7fe faa3 	bl	800c6b0 <ld_word>
 800e16a:	f8a8 000a 	strh.w	r0, [r8, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800e16e:	f107 000e 	add.w	r0, r7, #14
 800e172:	f7fe fa9d 	bl	800c6b0 <ld_word>
 800e176:	f8a8 0008 	strh.w	r0, [r8, #8]
}
 800e17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (w == 0 || di >= FF_MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800e17e:	2400      	movs	r4, #0
 800e180:	e7d8      	b.n	800e134 <get_xdir_info+0x54>
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800e182:	2000      	movs	r0, #0
 800e184:	2100      	movs	r1, #0
 800e186:	e7ea      	b.n	800e15e <get_xdir_info+0x7e>
 800e188:	f3af 8000 	nop.w
 800e18c:	f3af 8000 	nop.w

0800e190 <get_fileinfo>:
{
 800e190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800e194:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;			/* Invaidate file info */
 800e198:	2300      	movs	r3, #0
 800e19a:	768b      	strb	r3, [r1, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800e19c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d07f      	beq.n	800e2a2 <get_fileinfo+0x112>
 800e1a2:	460c      	mov	r4, r1
 800e1a4:	4605      	mov	r5, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e1a6:	f898 3000 	ldrb.w	r3, [r8]
 800e1aa:	2b04      	cmp	r3, #4
 800e1ac:	d006      	beq.n	800e1bc <get_fileinfo+0x2c>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e1ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1b4:	d025      	beq.n	800e202 <get_fileinfo+0x72>
			i = j = 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	461e      	mov	r6, r3
 800e1ba:	e00a      	b.n	800e1d2 <get_fileinfo+0x42>
		get_xdir_info(fs->dirbuf, fno);
 800e1bc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e1c0:	f7ff ff8e 	bl	800e0e0 <get_xdir_info>
		return;
 800e1c4:	e06d      	b.n	800e2a2 <get_fileinfo+0x112>
				if (i >= FF_MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e1c6:	2efe      	cmp	r6, #254	; 0xfe
 800e1c8:	d81f      	bhi.n	800e20a <get_fileinfo+0x7a>
				fno->fname[i++] = (TCHAR)w;
 800e1ca:	19a2      	adds	r2, r4, r6
 800e1cc:	7693      	strb	r3, [r2, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e1ce:	463b      	mov	r3, r7
				fno->fname[i++] = (TCHAR)w;
 800e1d0:	3601      	adds	r6, #1
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e1d2:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800e1d6:	1c5f      	adds	r7, r3, #1
 800e1d8:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800e1dc:	b170      	cbz	r0, 800e1fc <get_fileinfo+0x6c>
				w = ff_uni2oem(w, CODEPAGE);	/* Unicode -> OEM */
 800e1de:	f240 3152 	movw	r1, #850	; 0x352
 800e1e2:	f001 fe85 	bl	800fef0 <ff_uni2oem>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	b138      	cbz	r0, 800e1fa <get_fileinfo+0x6a>
				if (w >= 0x100) {				/* Put 1st byte if it is a DBC */
 800e1ea:	28ff      	cmp	r0, #255	; 0xff
 800e1ec:	d9eb      	bls.n	800e1c6 <get_fileinfo+0x36>
					fno->fname[i++] = (char)(w >> 8);
 800e1ee:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800e1f2:	19a1      	adds	r1, r4, r6
 800e1f4:	768a      	strb	r2, [r1, #26]
 800e1f6:	3601      	adds	r6, #1
 800e1f8:	e7e5      	b.n	800e1c6 <get_fileinfo+0x36>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e1fa:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e1fc:	4426      	add	r6, r4
 800e1fe:	2300      	movs	r3, #0
 800e200:	76b3      	strb	r3, [r6, #26]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e202:	7ea6      	ldrb	r6, [r4, #26]
	i = j = 0;
 800e204:	2200      	movs	r2, #0
 800e206:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 800e208:	e012      	b.n	800e230 <get_fileinfo+0xa0>
				if (i >= FF_MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e20a:	2600      	movs	r6, #0
 800e20c:	e7f6      	b.n	800e1fc <get_fileinfo+0x6c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e20e:	23e5      	movs	r3, #229	; 0xe5
 800e210:	e017      	b.n	800e242 <get_fileinfo+0xb2>
			if (!lfv) fno->fname[j] = '.';
 800e212:	b916      	cbnz	r6, 800e21a <get_fileinfo+0x8a>
 800e214:	18a0      	adds	r0, r4, r2
 800e216:	272e      	movs	r7, #46	; 0x2e
 800e218:	7687      	strb	r7, [r0, #26]
			fno->altname[j++] = '.';
 800e21a:	18a0      	adds	r0, r4, r2
 800e21c:	272e      	movs	r7, #46	; 0x2e
 800e21e:	7347      	strb	r7, [r0, #13]
 800e220:	3201      	adds	r2, #1
 800e222:	e010      	b.n	800e246 <get_fileinfo+0xb6>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e224:	2010      	movs	r0, #16
 800e226:	e01c      	b.n	800e262 <get_fileinfo+0xd2>
			fno->fname[j] = c;
 800e228:	18a0      	adds	r0, r4, r2
 800e22a:	7683      	strb	r3, [r0, #26]
		j++;
 800e22c:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e22e:	460b      	mov	r3, r1
	while (i < 11) {		/* Copy name body and extension */
 800e230:	2b0a      	cmp	r3, #10
 800e232:	d81b      	bhi.n	800e26c <get_fileinfo+0xdc>
		c = (TCHAR)dp->dir[i++];
 800e234:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800e236:	1c59      	adds	r1, r3, #1
 800e238:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e23a:	2b20      	cmp	r3, #32
 800e23c:	d0f7      	beq.n	800e22e <get_fileinfo+0x9e>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e23e:	2b05      	cmp	r3, #5
 800e240:	d0e5      	beq.n	800e20e <get_fileinfo+0x7e>
		if (i == 9) {						/* Insert a . if extension is exist */
 800e242:	2909      	cmp	r1, #9
 800e244:	d0e5      	beq.n	800e212 <get_fileinfo+0x82>
		fno->altname[j] = c;
 800e246:	18a0      	adds	r0, r4, r2
 800e248:	7343      	strb	r3, [r0, #13]
		if (!lfv) {
 800e24a:	2e00      	cmp	r6, #0
 800e24c:	d1ee      	bne.n	800e22c <get_fileinfo+0x9c>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e24e:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 800e252:	b2c0      	uxtb	r0, r0
 800e254:	2819      	cmp	r0, #25
 800e256:	d8e7      	bhi.n	800e228 <get_fileinfo+0x98>
 800e258:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800e25a:	7b07      	ldrb	r7, [r0, #12]
 800e25c:	2908      	cmp	r1, #8
 800e25e:	d8e1      	bhi.n	800e224 <get_fileinfo+0x94>
 800e260:	2008      	movs	r0, #8
 800e262:	4207      	tst	r7, r0
 800e264:	d0e0      	beq.n	800e228 <get_fileinfo+0x98>
				c += 0x20;			/* To lower */
 800e266:	3320      	adds	r3, #32
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	e7dd      	b.n	800e228 <get_fileinfo+0x98>
	if (!lfv) {
 800e26c:	b936      	cbnz	r6, 800e27c <get_fileinfo+0xec>
		fno->fname[j] = 0;
 800e26e:	18a3      	adds	r3, r4, r2
 800e270:	2100      	movs	r1, #0
 800e272:	7699      	strb	r1, [r3, #26]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e274:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800e276:	7b1b      	ldrb	r3, [r3, #12]
 800e278:	b903      	cbnz	r3, 800e27c <get_fileinfo+0xec>
 800e27a:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e27c:	4422      	add	r2, r4
 800e27e:	2600      	movs	r6, #0
 800e280:	7356      	strb	r6, [r2, #13]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e282:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800e284:	7adb      	ldrb	r3, [r3, #11]
 800e286:	7323      	strb	r3, [r4, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e288:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800e28a:	301c      	adds	r0, #28
 800e28c:	f7fe fa18 	bl	800c6c0 <ld_dword>
 800e290:	6020      	str	r0, [r4, #0]
 800e292:	6066      	str	r6, [r4, #4]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e294:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800e296:	3016      	adds	r0, #22
 800e298:	f7fe fa12 	bl	800c6c0 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e29c:	8160      	strh	r0, [r4, #10]
 800e29e:	0c00      	lsrs	r0, r0, #16
 800e2a0:	8120      	strh	r0, [r4, #8]
}
 800e2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a6:	bf00      	nop
 800e2a8:	f3af 8000 	nop.w
 800e2ac:	f3af 8000 	nop.w

0800e2b0 <xname_sum>:
{
 800e2b0:	b538      	push	{r3, r4, r5, lr}
	WORD sum = 0;
 800e2b2:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
 800e2b4:	e011      	b.n	800e2da <xname_sum+0x2a>
		chr = ff_wtoupper(chr);		/* File name needs to be upper-case converted */
 800e2b6:	f001 fe53 	bl	800ff60 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800e2ba:	0863      	lsrs	r3, r4, #1
 800e2bc:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
 800e2c0:	b2c3      	uxtb	r3, r0
 800e2c2:	fa13 f484 	uxtah	r4, r3, r4
 800e2c6:	b2a3      	uxth	r3, r4
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800e2c8:	085c      	lsrs	r4, r3, #1
 800e2ca:	eb04 34c3 	add.w	r4, r4, r3, lsl #15
 800e2ce:	f3c0 200f 	ubfx	r0, r0, #8, #16
 800e2d2:	fa10 f484 	uxtah	r4, r0, r4
 800e2d6:	b2a4      	uxth	r4, r4
	while ((chr = *name++) != 0) {
 800e2d8:	4628      	mov	r0, r5
 800e2da:	1c85      	adds	r5, r0, #2
 800e2dc:	8800      	ldrh	r0, [r0, #0]
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	d1e9      	bne.n	800e2b6 <xname_sum+0x6>
}
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	bd38      	pop	{r3, r4, r5, pc}
 800e2e6:	bf00      	nop
 800e2e8:	f3af 8000 	nop.w
 800e2ec:	f3af 8000 	nop.w

0800e2f0 <create_xdir>:
{
 800e2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2f4:	4607      	mov	r7, r0
 800e2f6:	4688      	mov	r8, r1
	mem_set(dirb, 0, 2 * SZDIRE);
 800e2f8:	2240      	movs	r2, #64	; 0x40
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	f7fe fa88 	bl	800c810 <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = 0x85;
 800e300:	2385      	movs	r3, #133	; 0x85
 800e302:	703b      	strb	r3, [r7, #0]
	dirb[1 * SZDIRE + XDIR_Type] = 0xC0;
 800e304:	23c0      	movs	r3, #192	; 0xc0
 800e306:	f887 3020 	strb.w	r3, [r7, #32]
	nlen = nc1 = 0; chr = 1; i = SZDIRE * 2;
 800e30a:	2501      	movs	r5, #1
 800e30c:	2600      	movs	r6, #0
 800e30e:	46b1      	mov	r9, r6
 800e310:	2440      	movs	r4, #64	; 0x40
 800e312:	e017      	b.n	800e344 <create_xdir+0x54>
			st_word(dirb + i, chr); 		/* Store it */
 800e314:	4629      	mov	r1, r5
 800e316:	1938      	adds	r0, r7, r4
 800e318:	f7fe fa3a 	bl	800c790 <st_word>
			i += 2;
 800e31c:	3402      	adds	r4, #2
		} while (i % SZDIRE != 0);
 800e31e:	f014 0f1f 	tst.w	r4, #31
 800e322:	d008      	beq.n	800e336 <create_xdir+0x46>
			if (chr && (chr = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800e324:	2d00      	cmp	r5, #0
 800e326:	d0f5      	beq.n	800e314 <create_xdir+0x24>
 800e328:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 800e32c:	2d00      	cmp	r5, #0
 800e32e:	d0f1      	beq.n	800e314 <create_xdir+0x24>
 800e330:	3601      	adds	r6, #1
 800e332:	b2f6      	uxtb	r6, r6
 800e334:	e7ee      	b.n	800e314 <create_xdir+0x24>
		nc1++;
 800e336:	f109 0301 	add.w	r3, r9, #1
 800e33a:	b2db      	uxtb	r3, r3
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 800e33c:	f838 2016 	ldrh.w	r2, [r8, r6, lsl #1]
 800e340:	b13a      	cbz	r2, 800e352 <create_xdir+0x62>
		nc1++;
 800e342:	4699      	mov	r9, r3
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800e344:	1c63      	adds	r3, r4, #1
 800e346:	22c1      	movs	r2, #193	; 0xc1
 800e348:	553a      	strb	r2, [r7, r4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	54fa      	strb	r2, [r7, r3]
 800e34e:	3402      	adds	r4, #2
 800e350:	e7e8      	b.n	800e324 <create_xdir+0x34>
	dirb[XDIR_NumName] = nlen;		/* Set name length */
 800e352:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count */
 800e356:	f109 0902 	add.w	r9, r9, #2
 800e35a:	f887 9001 	strb.w	r9, [r7, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800e35e:	4640      	mov	r0, r8
 800e360:	f7ff ffa6 	bl	800e2b0 <xname_sum>
 800e364:	4601      	mov	r1, r0
 800e366:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e36a:	f7fe fa11 	bl	800c790 <st_word>
}
 800e36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e372:	bf00      	nop
 800e374:	f3af 8000 	nop.w
 800e378:	f3af 8000 	nop.w
 800e37c:	f3af 8000 	nop.w

0800e380 <cmp_lfn>:
{
 800e380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e384:	4681      	mov	r9, r0
 800e386:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e388:	f101 001a 	add.w	r0, r1, #26
 800e38c:	f7fe f990 	bl	800c6b0 <ld_word>
 800e390:	bbb8      	cbnz	r0, 800e402 <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e392:	783d      	ldrb	r5, [r7, #0]
 800e394:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800e398:	3d01      	subs	r5, #1
 800e39a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800e39e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e3a2:	f04f 0801 	mov.w	r8, #1
 800e3a6:	2400      	movs	r4, #0
 800e3a8:	e004      	b.n	800e3b4 <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e3aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3ae:	4298      	cmp	r0, r3
 800e3b0:	d12e      	bne.n	800e410 <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e3b2:	3401      	adds	r4, #1
 800e3b4:	2c0c      	cmp	r4, #12
 800e3b6:	d818      	bhi.n	800e3ea <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e3b8:	4b19      	ldr	r3, [pc, #100]	; (800e420 <cmp_lfn+0xa0>)
 800e3ba:	5d18      	ldrb	r0, [r3, r4]
 800e3bc:	4438      	add	r0, r7
 800e3be:	f7fe f977 	bl	800c6b0 <ld_word>
 800e3c2:	4606      	mov	r6, r0
		if (wc) {
 800e3c4:	f1b8 0f00 	cmp.w	r8, #0
 800e3c8:	d0ef      	beq.n	800e3aa <cmp_lfn+0x2a>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e3ca:	2dfe      	cmp	r5, #254	; 0xfe
 800e3cc:	d81c      	bhi.n	800e408 <cmp_lfn+0x88>
 800e3ce:	f001 fdc7 	bl	800ff60 <ff_wtoupper>
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	f105 0a01 	add.w	sl, r5, #1
 800e3d8:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
 800e3dc:	f001 fdc0 	bl	800ff60 <ff_wtoupper>
 800e3e0:	4580      	cmp	r8, r0
 800e3e2:	d113      	bne.n	800e40c <cmp_lfn+0x8c>
			wc = uc;
 800e3e4:	46b0      	mov	r8, r6
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e3e6:	4655      	mov	r5, sl
 800e3e8:	e7e3      	b.n	800e3b2 <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e3ea:	783b      	ldrb	r3, [r7, #0]
 800e3ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e3f0:	d010      	beq.n	800e414 <cmp_lfn+0x94>
 800e3f2:	f1b8 0f00 	cmp.w	r8, #0
 800e3f6:	d00f      	beq.n	800e418 <cmp_lfn+0x98>
 800e3f8:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
 800e3fc:	b973      	cbnz	r3, 800e41c <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
 800e3fe:	2001      	movs	r0, #1
 800e400:	e000      	b.n	800e404 <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e402:	2000      	movs	r0, #0
}
 800e404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
 800e408:	2000      	movs	r0, #0
 800e40a:	e7fb      	b.n	800e404 <cmp_lfn+0x84>
 800e40c:	2000      	movs	r0, #0
 800e40e:	e7f9      	b.n	800e404 <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e410:	2000      	movs	r0, #0
 800e412:	e7f7      	b.n	800e404 <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
 800e414:	2001      	movs	r0, #1
 800e416:	e7f5      	b.n	800e404 <cmp_lfn+0x84>
 800e418:	2001      	movs	r0, #1
 800e41a:	e7f3      	b.n	800e404 <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e41c:	2000      	movs	r0, #0
 800e41e:	e7f1      	b.n	800e404 <cmp_lfn+0x84>
 800e420:	080156d8 	.word	0x080156d8
 800e424:	f3af 8000 	nop.w
 800e428:	f3af 8000 	nop.w
 800e42c:	f3af 8000 	nop.w

0800e430 <dir_find>:
{
 800e430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e434:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800e436:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e438:	2100      	movs	r1, #0
 800e43a:	f7ff f8a1 	bl	800d580 <dir_sdi>
	if (res != FR_OK) return res;
 800e43e:	4680      	mov	r8, r0
 800e440:	2800      	cmp	r0, #0
 800e442:	f040 80a0 	bne.w	800e586 <dir_find+0x156>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e446:	783b      	ldrb	r3, [r7, #0]
 800e448:	2b04      	cmp	r3, #4
 800e44a:	d006      	beq.n	800e45a <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e44c:	f04f 33ff 	mov.w	r3, #4294967295
 800e450:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e452:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800e456:	464e      	mov	r6, r9
 800e458:	e042      	b.n	800e4e0 <dir_find+0xb0>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800e45a:	68f8      	ldr	r0, [r7, #12]
 800e45c:	f7ff ff28 	bl	800e2b0 <xname_sum>
 800e460:	4683      	mov	fp, r0
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e462:	e01e      	b.n	800e4a2 <dir_find+0x72>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e464:	6938      	ldr	r0, [r7, #16]
 800e466:	4430      	add	r0, r6
 800e468:	f7fe f922 	bl	800c6b0 <ld_word>
 800e46c:	f001 fd78 	bl	800ff60 <ff_wtoupper>
 800e470:	4682      	mov	sl, r0
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
 800e478:	f001 fd72 	bl	800ff60 <ff_wtoupper>
 800e47c:	4582      	cmp	sl, r0
 800e47e:	d10a      	bne.n	800e496 <dir_find+0x66>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e480:	3d01      	subs	r5, #1
 800e482:	b2ed      	uxtb	r5, r5
 800e484:	3602      	adds	r6, #2
 800e486:	f109 0901 	add.w	r9, r9, #1
 800e48a:	b125      	cbz	r5, 800e496 <dir_find+0x66>
				if ((di % SZDIRE) == 0) di += 2;
 800e48c:	f016 0f1f 	tst.w	r6, #31
 800e490:	d1e8      	bne.n	800e464 <dir_find+0x34>
 800e492:	3602      	adds	r6, #2
 800e494:	e7e6      	b.n	800e464 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e496:	b925      	cbnz	r5, 800e4a2 <dir_find+0x72>
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d071      	beq.n	800e586 <dir_find+0x156>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f7ff fbc3 	bl	800dc30 <dir_read>
 800e4aa:	4680      	mov	r8, r0
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	d16a      	bne.n	800e586 <dir_find+0x156>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800e4b0:	693d      	ldr	r5, [r7, #16]
 800e4b2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800e4b6:	f7fe f8fb 	bl	800c6b0 <ld_word>
 800e4ba:	4558      	cmp	r0, fp
 800e4bc:	d1f1      	bne.n	800e4a2 <dir_find+0x72>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e4be:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 800e4c2:	f04f 0900 	mov.w	r9, #0
 800e4c6:	2640      	movs	r6, #64	; 0x40
 800e4c8:	e7df      	b.n	800e48a <dir_find+0x5a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ce:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e4d0:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800e4d2:	2100      	movs	r1, #0
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f7ff fa9b 	bl	800da10 <dir_next>
	} while (res == FR_OK);
 800e4da:	4680      	mov	r8, r0
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	d152      	bne.n	800e586 <dir_find+0x156>
		res = move_window(fs, dp->sect);
 800e4e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e4e2:	4638      	mov	r0, r7
 800e4e4:	f7fe fba4 	bl	800cc30 <move_window>
		if (res != FR_OK) break;
 800e4e8:	4680      	mov	r8, r0
 800e4ea:	2800      	cmp	r0, #0
 800e4ec:	d14b      	bne.n	800e586 <dir_find+0x156>
		c = dp->dir[DIR_Name];
 800e4ee:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800e4f0:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d045      	beq.n	800e582 <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e4f6:	7ae9      	ldrb	r1, [r5, #11]
 800e4f8:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800e4fc:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e4fe:	2be5      	cmp	r3, #229	; 0xe5
 800e500:	d0e3      	beq.n	800e4ca <dir_find+0x9a>
 800e502:	f011 0f08 	tst.w	r1, #8
 800e506:	d001      	beq.n	800e50c <dir_find+0xdc>
 800e508:	2a0f      	cmp	r2, #15
 800e50a:	d1de      	bne.n	800e4ca <dir_find+0x9a>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e50c:	2a0f      	cmp	r2, #15
 800e50e:	d016      	beq.n	800e53e <dir_find+0x10e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e510:	b926      	cbnz	r6, 800e51c <dir_find+0xec>
 800e512:	4628      	mov	r0, r5
 800e514:	f7fe fae4 	bl	800cae0 <sum_sfn>
 800e518:	4548      	cmp	r0, r9
 800e51a:	d034      	beq.n	800e586 <dir_find+0x156>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e51c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800e520:	f013 0f01 	tst.w	r3, #1
 800e524:	d106      	bne.n	800e534 <dir_find+0x104>
 800e526:	220b      	movs	r2, #11
 800e528:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800e52c:	4628      	mov	r0, r5
 800e52e:	f7fe f977 	bl	800c820 <mem_cmp>
 800e532:	b340      	cbz	r0, 800e586 <dir_find+0x156>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e534:	f04f 33ff 	mov.w	r3, #4294967295
 800e538:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e53a:	26ff      	movs	r6, #255	; 0xff
 800e53c:	e7c9      	b.n	800e4d2 <dir_find+0xa2>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e53e:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 800e542:	f012 0f40 	tst.w	r2, #64	; 0x40
 800e546:	d1c4      	bne.n	800e4d2 <dir_find+0xa2>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e548:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e54c:	d006      	beq.n	800e55c <dir_find+0x12c>
						sum = dp->dir[LDIR_Chksum];
 800e54e:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e552:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e556:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e558:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e55a:	461e      	mov	r6, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e55c:	42b3      	cmp	r3, r6
 800e55e:	d001      	beq.n	800e564 <dir_find+0x134>
 800e560:	26ff      	movs	r6, #255	; 0xff
 800e562:	e7b6      	b.n	800e4d2 <dir_find+0xa2>
 800e564:	7b6b      	ldrb	r3, [r5, #13]
 800e566:	454b      	cmp	r3, r9
 800e568:	d001      	beq.n	800e56e <dir_find+0x13e>
 800e56a:	26ff      	movs	r6, #255	; 0xff
 800e56c:	e7b1      	b.n	800e4d2 <dir_find+0xa2>
 800e56e:	4629      	mov	r1, r5
 800e570:	68f8      	ldr	r0, [r7, #12]
 800e572:	f7ff ff05 	bl	800e380 <cmp_lfn>
 800e576:	b110      	cbz	r0, 800e57e <dir_find+0x14e>
 800e578:	3e01      	subs	r6, #1
 800e57a:	b2f6      	uxtb	r6, r6
 800e57c:	e7a9      	b.n	800e4d2 <dir_find+0xa2>
 800e57e:	26ff      	movs	r6, #255	; 0xff
 800e580:	e7a7      	b.n	800e4d2 <dir_find+0xa2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e582:	f04f 0804 	mov.w	r8, #4
}
 800e586:	4640      	mov	r0, r8
 800e588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e58c:	f3af 8000 	nop.w

0800e590 <follow_path>:
{
 800e590:	b530      	push	{r4, r5, lr}
 800e592:	b083      	sub	sp, #12
 800e594:	4604      	mov	r4, r0
 800e596:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
 800e598:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e59a:	e001      	b.n	800e5a0 <follow_path+0x10>
 800e59c:	3301      	adds	r3, #1
 800e59e:	9301      	str	r3, [sp, #4]
 800e5a0:	9b01      	ldr	r3, [sp, #4]
 800e5a2:	781a      	ldrb	r2, [r3, #0]
 800e5a4:	2a2f      	cmp	r2, #47	; 0x2f
 800e5a6:	d0f9      	beq.n	800e59c <follow_path+0xc>
 800e5a8:	2a5c      	cmp	r2, #92	; 0x5c
 800e5aa:	d0f7      	beq.n	800e59c <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from root directory */
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	60a2      	str	r2, [r4, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 800e5b0:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	2b1f      	cmp	r3, #31
 800e5b6:	d82c      	bhi.n	800e612 <follow_path+0x82>
		dp->fn[NSFLAG] = NS_NONAME;
 800e5b8:	2380      	movs	r3, #128	; 0x80
 800e5ba:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800e5be:	4611      	mov	r1, r2
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	f7fe ffdd 	bl	800d580 <dir_sdi>
 800e5c6:	4603      	mov	r3, r0
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	b003      	add	sp, #12
 800e5cc:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e5ce:	2804      	cmp	r0, #4
 800e5d0:	d1fa      	bne.n	800e5c8 <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e5d2:	f012 0f04 	tst.w	r2, #4
 800e5d6:	d1f7      	bne.n	800e5c8 <follow_path+0x38>
 800e5d8:	2305      	movs	r3, #5
 800e5da:	e7f5      	b.n	800e5c8 <follow_path+0x38>
				dp->obj.c_scl = dp->obj.sclust;
 800e5dc:	68a3      	ldr	r3, [r4, #8]
 800e5de:	6223      	str	r3, [r4, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800e5e0:	6923      	ldr	r3, [r4, #16]
 800e5e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e5e6:	79e2      	ldrb	r2, [r4, #7]
 800e5e8:	4313      	orrs	r3, r2
 800e5ea:	6263      	str	r3, [r4, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 800e5ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e5ee:	62a3      	str	r3, [r4, #40]	; 0x28
				dp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800e5f0:	6928      	ldr	r0, [r5, #16]
 800e5f2:	3034      	adds	r0, #52	; 0x34
 800e5f4:	f7fe f864 	bl	800c6c0 <ld_dword>
 800e5f8:	60a0      	str	r0, [r4, #8]
				dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e5fa:	692b      	ldr	r3, [r5, #16]
 800e5fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e600:	f003 0302 	and.w	r3, r3, #2
 800e604:	71e3      	strb	r3, [r4, #7]
				dp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e606:	6928      	ldr	r0, [r5, #16]
 800e608:	3038      	adds	r0, #56	; 0x38
 800e60a:	f7fe f869 	bl	800c6e0 <ld_qword>
 800e60e:	e9c4 0104 	strd	r0, r1, [r4, #16]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e612:	a901      	add	r1, sp, #4
 800e614:	4620      	mov	r0, r4
 800e616:	f7ff fc1b 	bl	800de50 <create_name>
			if (res != FR_OK) break;
 800e61a:	4603      	mov	r3, r0
 800e61c:	2800      	cmp	r0, #0
 800e61e:	d1d3      	bne.n	800e5c8 <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e620:	4620      	mov	r0, r4
 800e622:	f7ff ff05 	bl	800e430 <dir_find>
			ns = dp->fn[NSFLAG];
 800e626:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 800e62a:	4603      	mov	r3, r0
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d1ce      	bne.n	800e5ce <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e630:	f012 0f04 	tst.w	r2, #4
 800e634:	d1c8      	bne.n	800e5c8 <follow_path+0x38>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e636:	79a3      	ldrb	r3, [r4, #6]
 800e638:	f013 0f10 	tst.w	r3, #16
 800e63c:	d00d      	beq.n	800e65a <follow_path+0xca>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800e63e:	782b      	ldrb	r3, [r5, #0]
 800e640:	2b04      	cmp	r3, #4
 800e642:	d0cb      	beq.n	800e5dc <follow_path+0x4c>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e644:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800e648:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e64e:	4419      	add	r1, r3
 800e650:	4628      	mov	r0, r5
 800e652:	f7fe f935 	bl	800c8c0 <ld_clust>
 800e656:	60a0      	str	r0, [r4, #8]
 800e658:	e7db      	b.n	800e612 <follow_path+0x82>
				res = FR_NO_PATH; break;
 800e65a:	2305      	movs	r3, #5
 800e65c:	e7b4      	b.n	800e5c8 <follow_path+0x38>
 800e65e:	bf00      	nop

0800e660 <dir_register>:
{
 800e660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e664:	b099      	sub	sp, #100	; 0x64
	FATFS *fs = dp->obj.fs;
 800e666:	6805      	ldr	r5, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e668:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 800e66c:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800e670:	f040 80eb 	bne.w	800e84a <dir_register+0x1ea>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e674:	2400      	movs	r4, #0
 800e676:	e000      	b.n	800e67a <dir_register+0x1a>
 800e678:	3401      	adds	r4, #1
 800e67a:	68eb      	ldr	r3, [r5, #12]
 800e67c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d1f9      	bne.n	800e678 <dir_register+0x18>
 800e684:	4606      	mov	r6, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e686:	782b      	ldrb	r3, [r5, #0]
 800e688:	2b04      	cmp	r3, #4
 800e68a:	d022      	beq.n	800e6d2 <dir_register+0x72>
	mem_cpy(sn, dp->fn, 12);
 800e68c:	f100 0740 	add.w	r7, r0, #64	; 0x40
 800e690:	220c      	movs	r2, #12
 800e692:	4639      	mov	r1, r7
 800e694:	a815      	add	r0, sp, #84	; 0x54
 800e696:	f7fe f8ab 	bl	800c7f0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e69a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800e69e:	f013 0f01 	tst.w	r3, #1
 800e6a2:	d07a      	beq.n	800e79a <dir_register+0x13a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e6a4:	2340      	movs	r3, #64	; 0x40
 800e6a6:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800e6aa:	f04f 0801 	mov.w	r8, #1
 800e6ae:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 800e6b2:	d868      	bhi.n	800e786 <dir_register+0x126>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e6b4:	4643      	mov	r3, r8
 800e6b6:	68ea      	ldr	r2, [r5, #12]
 800e6b8:	a915      	add	r1, sp, #84	; 0x54
 800e6ba:	4638      	mov	r0, r7
 800e6bc:	f7fe f9b8 	bl	800ca30 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	f7ff feb5 	bl	800e430 <dir_find>
			if (res != FR_OK) break;
 800e6c6:	4681      	mov	r9, r0
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	d15c      	bne.n	800e786 <dir_register+0x126>
		for (n = 1; n < 100; n++) {
 800e6cc:	f108 0801 	add.w	r8, r8, #1
 800e6d0:	e7ed      	b.n	800e6ae <dir_register+0x4e>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800e6d2:	340e      	adds	r4, #14
 800e6d4:	4b62      	ldr	r3, [pc, #392]	; (800e860 <dir_register+0x200>)
 800e6d6:	fba3 3404 	umull	r3, r4, r3, r4
 800e6da:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800e6dc:	1ca1      	adds	r1, r4, #2
 800e6de:	f7ff fb1f 	bl	800dd20 <dir_alloc>
		if (res != FR_OK) return res;
 800e6e2:	4681      	mov	r9, r0
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	f040 80b2 	bne.w	800e84e <dir_register+0x1ee>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800e6ea:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800e6ec:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 800e6f0:	3401      	adds	r4, #1
 800e6f2:	eba3 1444 	sub.w	r4, r3, r4, lsl #5
 800e6f6:	64f4      	str	r4, [r6, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched? */
 800e6f8:	79f3      	ldrb	r3, [r6, #7]
 800e6fa:	f013 0f04 	tst.w	r3, #4
 800e6fe:	d013      	beq.n	800e728 <dir_register+0xc8>
			dp->obj.stat &= ~4;
 800e700:	f023 0304 	bic.w	r3, r3, #4
 800e704:	71f3      	strb	r3, [r6, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 800e706:	4630      	mov	r0, r6
 800e708:	f7fe fe62 	bl	800d3d0 <fill_first_frag>
			if (res != FR_OK) return res;
 800e70c:	b108      	cbz	r0, 800e712 <dir_register+0xb2>
 800e70e:	4681      	mov	r9, r0
 800e710:	e09d      	b.n	800e84e <dir_register+0x1ee>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 800e712:	f04f 32ff 	mov.w	r2, #4294967295
 800e716:	6b71      	ldr	r1, [r6, #52]	; 0x34
 800e718:	4630      	mov	r0, r6
 800e71a:	f7fe fe41 	bl	800d3a0 <fill_last_frag>
			if (res != FR_OK) return res;
 800e71e:	2800      	cmp	r0, #0
 800e720:	f040 8099 	bne.w	800e856 <dir_register+0x1f6>
			if (dp->obj.sclust != 0) {		/* Is it a sub directory? */
 800e724:	68b3      	ldr	r3, [r6, #8]
 800e726:	b923      	cbnz	r3, 800e732 <dir_register+0xd2>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800e728:	68e9      	ldr	r1, [r5, #12]
 800e72a:	6928      	ldr	r0, [r5, #16]
 800e72c:	f7ff fde0 	bl	800e2f0 <create_xdir>
		return FR_OK;
 800e730:	e08d      	b.n	800e84e <dir_register+0x1ee>
				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 800e732:	4631      	mov	r1, r6
 800e734:	4668      	mov	r0, sp
 800e736:	f7ff fa5b 	bl	800dbf0 <load_obj_xdir>
				if (res != FR_OK) return res;
 800e73a:	4603      	mov	r3, r0
 800e73c:	b108      	cbz	r0, 800e742 <dir_register+0xe2>
 800e73e:	4699      	mov	r9, r3
 800e740:	e085      	b.n	800e84e <dir_register+0x1ee>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
 800e742:	8969      	ldrh	r1, [r5, #10]
 800e744:	0249      	lsls	r1, r1, #9
 800e746:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800e74a:	1857      	adds	r7, r2, r1
 800e74c:	f143 0800 	adc.w	r8, r3, #0
 800e750:	e9c6 7804 	strd	r7, r8, [r6, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);	/* Update the allocation status */
 800e754:	6928      	ldr	r0, [r5, #16]
 800e756:	463a      	mov	r2, r7
 800e758:	4643      	mov	r3, r8
 800e75a:	3038      	adds	r0, #56	; 0x38
 800e75c:	f7fe f830 	bl	800c7c0 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800e760:	6928      	ldr	r0, [r5, #16]
 800e762:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800e766:	3028      	adds	r0, #40	; 0x28
 800e768:	f7fe f82a 	bl	800c7c0 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800e76c:	79f3      	ldrb	r3, [r6, #7]
 800e76e:	692a      	ldr	r2, [r5, #16]
 800e770:	f043 0301 	orr.w	r3, r3, #1
 800e774:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
 800e778:	4668      	mov	r0, sp
 800e77a:	f7ff fb09 	bl	800dd90 <store_xdir>
				if (res != FR_OK) return res;
 800e77e:	4603      	mov	r3, r0
 800e780:	2800      	cmp	r0, #0
 800e782:	d0d1      	beq.n	800e728 <dir_register+0xc8>
 800e784:	e7db      	b.n	800e73e <dir_register+0xde>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e786:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 800e78a:	d066      	beq.n	800e85a <dir_register+0x1fa>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e78c:	f1b9 0f04 	cmp.w	r9, #4
 800e790:	d15d      	bne.n	800e84e <dir_register+0x1ee>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e792:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800e796:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e79a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800e79e:	f013 0f02 	tst.w	r3, #2
 800e7a2:	d02a      	beq.n	800e7fa <dir_register+0x19a>
 800e7a4:	340c      	adds	r4, #12
 800e7a6:	4b2f      	ldr	r3, [pc, #188]	; (800e864 <dir_register+0x204>)
 800e7a8:	fba3 3404 	umull	r3, r4, r3, r4
 800e7ac:	08a4      	lsrs	r4, r4, #2
 800e7ae:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e7b0:	4621      	mov	r1, r4
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	f7ff fab4 	bl	800dd20 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e7b8:	4681      	mov	r9, r0
 800e7ba:	b908      	cbnz	r0, 800e7c0 <dir_register+0x160>
 800e7bc:	3c01      	subs	r4, #1
 800e7be:	d11e      	bne.n	800e7fe <dir_register+0x19e>
	if (res == FR_OK) {
 800e7c0:	f1b9 0f00 	cmp.w	r9, #0
 800e7c4:	d143      	bne.n	800e84e <dir_register+0x1ee>
		res = move_window(fs, dp->sect);
 800e7c6:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	f7fe fa31 	bl	800cc30 <move_window>
		if (res == FR_OK) {
 800e7ce:	4681      	mov	r9, r0
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	d13c      	bne.n	800e84e <dir_register+0x1ee>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e7d4:	2220      	movs	r2, #32
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800e7da:	f7fe f819 	bl	800c810 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e7de:	220b      	movs	r2, #11
 800e7e0:	4639      	mov	r1, r7
 800e7e2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800e7e4:	f7fe f804 	bl	800c7f0 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e7e8:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
 800e7ec:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800e7ee:	f003 0318 	and.w	r3, r3, #24
 800e7f2:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	70eb      	strb	r3, [r5, #3]
 800e7f8:	e029      	b.n	800e84e <dir_register+0x1ee>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e7fa:	2401      	movs	r4, #1
 800e7fc:	e7d8      	b.n	800e7b0 <dir_register+0x150>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e7fe:	6b31      	ldr	r1, [r6, #48]	; 0x30
 800e800:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 800e804:	4630      	mov	r0, r6
 800e806:	f7fe febb 	bl	800d580 <dir_sdi>
		if (res == FR_OK) {
 800e80a:	4681      	mov	r9, r0
 800e80c:	2800      	cmp	r0, #0
 800e80e:	d1d7      	bne.n	800e7c0 <dir_register+0x160>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e810:	4638      	mov	r0, r7
 800e812:	f7fe f965 	bl	800cae0 <sum_sfn>
 800e816:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 800e818:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800e81a:	4628      	mov	r0, r5
 800e81c:	f7fe fa08 	bl	800cc30 <move_window>
				if (res != FR_OK) break;
 800e820:	4681      	mov	r9, r0
 800e822:	2800      	cmp	r0, #0
 800e824:	d1cc      	bne.n	800e7c0 <dir_register+0x160>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e826:	4643      	mov	r3, r8
 800e828:	b2e2      	uxtb	r2, r4
 800e82a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 800e82c:	68e8      	ldr	r0, [r5, #12]
 800e82e:	f7fe f8bf 	bl	800c9b0 <put_lfn>
				fs->wflag = 1;
 800e832:	2301      	movs	r3, #1
 800e834:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e836:	2100      	movs	r1, #0
 800e838:	4630      	mov	r0, r6
 800e83a:	f7ff f8e9 	bl	800da10 <dir_next>
			} while (res == FR_OK && --nent);
 800e83e:	4681      	mov	r9, r0
 800e840:	2800      	cmp	r0, #0
 800e842:	d1bd      	bne.n	800e7c0 <dir_register+0x160>
 800e844:	3c01      	subs	r4, #1
 800e846:	d1e7      	bne.n	800e818 <dir_register+0x1b8>
 800e848:	e7ba      	b.n	800e7c0 <dir_register+0x160>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e84a:	f04f 0906 	mov.w	r9, #6
}
 800e84e:	4648      	mov	r0, r9
 800e850:	b019      	add	sp, #100	; 0x64
 800e852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (res != FR_OK) return res;
 800e856:	4681      	mov	r9, r0
 800e858:	e7f9      	b.n	800e84e <dir_register+0x1ee>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e85a:	f04f 0907 	mov.w	r9, #7
 800e85e:	e7f6      	b.n	800e84e <dir_register+0x1ee>
 800e860:	88888889 	.word	0x88888889
 800e864:	4ec4ec4f 	.word	0x4ec4ec4f
 800e868:	f3af 8000 	nop.w
 800e86c:	f3af 8000 	nop.w

0800e870 <sync_fs>:
{
 800e870:	b570      	push	{r4, r5, r6, lr}
 800e872:	4604      	mov	r4, r0
	res = sync_window(fs);
 800e874:	f7fe f9b4 	bl	800cbe0 <sync_window>
	if (res == FR_OK) {
 800e878:	4605      	mov	r5, r0
 800e87a:	b948      	cbnz	r0, 800e890 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800e87c:	7823      	ldrb	r3, [r4, #0]
 800e87e:	2b03      	cmp	r3, #3
 800e880:	d008      	beq.n	800e894 <sync_fs+0x24>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e882:	2200      	movs	r2, #0
 800e884:	4611      	mov	r1, r2
 800e886:	7860      	ldrb	r0, [r4, #1]
 800e888:	f7fd feda 	bl	800c640 <disk_ioctl>
 800e88c:	b100      	cbz	r0, 800e890 <sync_fs+0x20>
 800e88e:	2501      	movs	r5, #1
}
 800e890:	4628      	mov	r0, r5
 800e892:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800e894:	7923      	ldrb	r3, [r4, #4]
 800e896:	2b01      	cmp	r3, #1
 800e898:	d1f3      	bne.n	800e882 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800e89a:	f104 0638 	add.w	r6, r4, #56	; 0x38
 800e89e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	4630      	mov	r0, r6
 800e8a6:	f7fd ffb3 	bl	800c810 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e8aa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e8ae:	f204 2036 	addw	r0, r4, #566	; 0x236
 800e8b2:	f7fd ff6d 	bl	800c790 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e8b6:	490f      	ldr	r1, [pc, #60]	; (800e8f4 <sync_fs+0x84>)
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	f7fd ff71 	bl	800c7a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e8be:	490e      	ldr	r1, [pc, #56]	; (800e8f8 <sync_fs+0x88>)
 800e8c0:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800e8c4:	f7fd ff6c 	bl	800c7a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e8c8:	69a1      	ldr	r1, [r4, #24]
 800e8ca:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800e8ce:	f7fd ff67 	bl	800c7a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e8d2:	6961      	ldr	r1, [r4, #20]
 800e8d4:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800e8d8:	f7fd ff62 	bl	800c7a0 <st_dword>
			fs->winsect = fs->volbase + 1;
 800e8dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e8de:	3201      	adds	r2, #1
 800e8e0:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	4631      	mov	r1, r6
 800e8e6:	7860      	ldrb	r0, [r4, #1]
 800e8e8:	f7fd fe92 	bl	800c610 <disk_write>
			fs->fsi_flag = 0;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	7123      	strb	r3, [r4, #4]
 800e8f0:	e7c7      	b.n	800e882 <sync_fs+0x12>
 800e8f2:	bf00      	nop
 800e8f4:	41615252 	.word	0x41615252
 800e8f8:	61417272 	.word	0x61417272
 800e8fc:	f3af 8000 	nop.w

0800e900 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e900:	b510      	push	{r4, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	9001      	str	r0, [sp, #4]
 800e906:	9100      	str	r1, [sp, #0]
 800e908:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e90a:	a804      	add	r0, sp, #16
 800e90c:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e910:	f7fe f90e 	bl	800cb30 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800e914:	2800      	cmp	r0, #0
 800e916:	db17      	blt.n	800e948 <f_mount+0x48>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e918:	4b0c      	ldr	r3, [pc, #48]	; (800e94c <f_mount+0x4c>)
 800e91a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
 800e91e:	b10b      	cbz	r3, 800e924 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e920:	2200      	movs	r2, #0
 800e922:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e924:	9b01      	ldr	r3, [sp, #4]
 800e926:	b10b      	cbz	r3, 800e92c <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
 800e928:	2200      	movs	r2, #0
 800e92a:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e92c:	4b07      	ldr	r3, [pc, #28]	; (800e94c <f_mount+0x4c>)
 800e92e:	9a01      	ldr	r2, [sp, #4]
 800e930:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 800e934:	b914      	cbnz	r4, 800e93c <f_mount+0x3c>
 800e936:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800e938:	b004      	add	sp, #16
 800e93a:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e93c:	2200      	movs	r2, #0
 800e93e:	a901      	add	r1, sp, #4
 800e940:	4668      	mov	r0, sp
 800e942:	f7fe f9dd 	bl	800cd00 <find_volume>
	LEAVE_FF(fs, res);
 800e946:	e7f7      	b.n	800e938 <f_mount+0x38>
	if (vol < 0) return FR_INVALID_DRIVE;
 800e948:	200b      	movs	r0, #11
 800e94a:	e7f5      	b.n	800e938 <f_mount+0x38>
 800e94c:	200022c0 	.word	0x200022c0

0800e950 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e954:	b099      	sub	sp, #100	; 0x64
 800e956:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e958:	2800      	cmp	r0, #0
 800e95a:	f000 8183 	beq.w	800ec64 <f_open+0x314>
 800e95e:	4604      	mov	r4, r0
 800e960:	4616      	mov	r6, r2

	/* Get logical drive */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e962:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800e966:	463a      	mov	r2, r7
 800e968:	a903      	add	r1, sp, #12
 800e96a:	a801      	add	r0, sp, #4
 800e96c:	f7fe f9c8 	bl	800cd00 <find_volume>
	if (res == FR_OK) {
 800e970:	4605      	mov	r5, r0
 800e972:	b130      	cbz	r0, 800e982 <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e974:	b10d      	cbz	r5, 800e97a <f_open+0x2a>
 800e976:	2300      	movs	r3, #0
 800e978:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800e97a:	4628      	mov	r0, r5
 800e97c:	b019      	add	sp, #100	; 0x64
 800e97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 800e982:	9b03      	ldr	r3, [sp, #12]
 800e984:	9304      	str	r3, [sp, #16]
		INIT_NAMBUF(fs);
 800e986:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800e98a:	f7fd fe81 	bl	800c690 <ff_memalloc>
 800e98e:	4682      	mov	sl, r0
 800e990:	2800      	cmp	r0, #0
 800e992:	f000 8169 	beq.w	800ec68 <f_open+0x318>
 800e996:	9b03      	ldr	r3, [sp, #12]
 800e998:	60d8      	str	r0, [r3, #12]
 800e99a:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800e99e:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e9a0:	9901      	ldr	r1, [sp, #4]
 800e9a2:	a804      	add	r0, sp, #16
 800e9a4:	f7ff fdf4 	bl	800e590 <follow_path>
		if (res == FR_OK) {
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	b918      	cbnz	r0, 800e9b4 <f_open+0x64>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e9ac:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	db47      	blt.n	800ea44 <f_open+0xf4>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e9b4:	f016 0f1c 	tst.w	r6, #28
 800e9b8:	f000 809c 	beq.w	800eaf4 <f_open+0x1a4>
			if (res != FR_OK) {					/* No file, create new */
 800e9bc:	2d00      	cmp	r5, #0
 800e9be:	d048      	beq.n	800ea52 <f_open+0x102>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e9c0:	2d04      	cmp	r5, #4
 800e9c2:	d041      	beq.n	800ea48 <f_open+0xf8>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e9c4:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800e9c8:	2d00      	cmp	r5, #0
 800e9ca:	f040 80a2 	bne.w	800eb12 <f_open+0x1c2>
 800e9ce:	f017 0f08 	tst.w	r7, #8
 800e9d2:	f000 809e 	beq.w	800eb12 <f_open+0x1c2>
				if (fs->fs_type == FS_EXFAT) {
 800e9d6:	9803      	ldr	r0, [sp, #12]
 800e9d8:	7803      	ldrb	r3, [r0, #0]
 800e9da:	2b04      	cmp	r3, #4
 800e9dc:	d043      	beq.n	800ea66 <f_open+0x116>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800e9de:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800e9e0:	4631      	mov	r1, r6
 800e9e2:	f7fd ff6d 	bl	800c8c0 <ld_clust>
 800e9e6:	4680      	mov	r8, r0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 800e9e8:	f7fd fe42 	bl	800c670 <get_fattime>
 800e9ec:	4601      	mov	r1, r0
 800e9ee:	f106 000e 	add.w	r0, r6, #14
 800e9f2:	f7fd fed5 	bl	800c7a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e9f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e9f8:	2220      	movs	r2, #32
 800e9fa:	72da      	strb	r2, [r3, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ea00:	9803      	ldr	r0, [sp, #12]
 800ea02:	f7fd ff75 	bl	800c8f0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ea06:	2100      	movs	r1, #0
 800ea08:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ea0a:	301c      	adds	r0, #28
 800ea0c:	f7fd fec8 	bl	800c7a0 <st_dword>
					fs->wflag = 1;
 800ea10:	9b03      	ldr	r3, [sp, #12]
 800ea12:	2201      	movs	r2, #1
 800ea14:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800ea16:	f1b8 0f00 	cmp.w	r8, #0
 800ea1a:	d07a      	beq.n	800eb12 <f_open+0x1c2>
						dw = fs->winsect;
 800ea1c:	9b03      	ldr	r3, [sp, #12]
 800ea1e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 800ea20:	2200      	movs	r2, #0
 800ea22:	4641      	mov	r1, r8
 800ea24:	a804      	add	r0, sp, #16
 800ea26:	f7fe fef3 	bl	800d810 <remove_chain>
						if (res == FR_OK) {
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	d170      	bne.n	800eb12 <f_open+0x1c2>
							res = move_window(fs, dw);
 800ea30:	4631      	mov	r1, r6
 800ea32:	9803      	ldr	r0, [sp, #12]
 800ea34:	f7fe f8fc 	bl	800cc30 <move_window>
 800ea38:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ea3a:	f108 33ff 	add.w	r3, r8, #4294967295
 800ea3e:	9a03      	ldr	r2, [sp, #12]
 800ea40:	6153      	str	r3, [r2, #20]
 800ea42:	e066      	b.n	800eb12 <f_open+0x1c2>
				res = FR_INVALID_NAME;
 800ea44:	2506      	movs	r5, #6
 800ea46:	e7b5      	b.n	800e9b4 <f_open+0x64>
					res = dir_register(&dj);
 800ea48:	a804      	add	r0, sp, #16
 800ea4a:	f7ff fe09 	bl	800e660 <dir_register>
 800ea4e:	4605      	mov	r5, r0
 800ea50:	e7b8      	b.n	800e9c4 <f_open+0x74>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ea52:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800ea56:	f013 0f11 	tst.w	r3, #17
 800ea5a:	d159      	bne.n	800eb10 <f_open+0x1c0>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ea5c:	f016 0f04 	tst.w	r6, #4
 800ea60:	d0b2      	beq.n	800e9c8 <f_open+0x78>
 800ea62:	2508      	movs	r5, #8
 800ea64:	e055      	b.n	800eb12 <f_open+0x1c2>
					fp->obj.fs = fs;
 800ea66:	6020      	str	r0, [r4, #0]
					fp->obj.sclust = cl = ld_dword(fs->dirbuf + XDIR_FstClus);
 800ea68:	9d03      	ldr	r5, [sp, #12]
 800ea6a:	6928      	ldr	r0, [r5, #16]
 800ea6c:	3034      	adds	r0, #52	; 0x34
 800ea6e:	f7fd fe27 	bl	800c6c0 <ld_dword>
 800ea72:	4680      	mov	r8, r0
 800ea74:	60a0      	str	r0, [r4, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ea76:	6928      	ldr	r0, [r5, #16]
 800ea78:	3038      	adds	r0, #56	; 0x38
 800ea7a:	f7fd fe31 	bl	800c6e0 <ld_qword>
 800ea7e:	e9c4 0104 	strd	r0, r1, [r4, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ea82:	692b      	ldr	r3, [r5, #16]
 800ea84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ea88:	f003 0302 	and.w	r3, r3, #2
 800ea8c:	71e3      	strb	r3, [r4, #7]
					fp->obj.n_frag = 0;
 800ea8e:	2600      	movs	r6, #0
 800ea90:	61e6      	str	r6, [r4, #28]
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
 800ea92:	6928      	ldr	r0, [r5, #16]
 800ea94:	221e      	movs	r2, #30
 800ea96:	4631      	mov	r1, r6
 800ea98:	3002      	adds	r0, #2
 800ea9a:	f7fd feb9 	bl	800c810 <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 800ea9e:	9b03      	ldr	r3, [sp, #12]
 800eaa0:	6918      	ldr	r0, [r3, #16]
 800eaa2:	221a      	movs	r2, #26
 800eaa4:	4631      	mov	r1, r6
 800eaa6:	3026      	adds	r0, #38	; 0x26
 800eaa8:	f7fd feb2 	bl	800c810 <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 800eaac:	9b03      	ldr	r3, [sp, #12]
 800eaae:	691a      	ldr	r2, [r3, #16]
 800eab0:	2120      	movs	r1, #32
 800eab2:	7111      	strb	r1, [r2, #4]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 800eab4:	691d      	ldr	r5, [r3, #16]
 800eab6:	f7fd fddb 	bl	800c670 <get_fattime>
 800eaba:	4601      	mov	r1, r0
 800eabc:	f105 0008 	add.w	r0, r5, #8
 800eac0:	f7fd fe6e 	bl	800c7a0 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800eac4:	9b03      	ldr	r3, [sp, #12]
 800eac6:	691b      	ldr	r3, [r3, #16]
 800eac8:	2201      	movs	r2, #1
 800eaca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
 800eace:	a804      	add	r0, sp, #16
 800ead0:	f7ff f95e 	bl	800dd90 <store_xdir>
					if (res == FR_OK && cl != 0) {		/* Remove the cluster chain if exist */
 800ead4:	4605      	mov	r5, r0
 800ead6:	b9e0      	cbnz	r0, 800eb12 <f_open+0x1c2>
 800ead8:	f1b8 0f00 	cmp.w	r8, #0
 800eadc:	d019      	beq.n	800eb12 <f_open+0x1c2>
						res = remove_chain(&fp->obj, cl, 0);
 800eade:	4632      	mov	r2, r6
 800eae0:	4641      	mov	r1, r8
 800eae2:	4620      	mov	r0, r4
 800eae4:	f7fe fe94 	bl	800d810 <remove_chain>
 800eae8:	4605      	mov	r5, r0
						fs->last_clst = cl - 1;			/* Reuse the cluster hole */
 800eaea:	f108 33ff 	add.w	r3, r8, #4294967295
 800eaee:	9a03      	ldr	r2, [sp, #12]
 800eaf0:	6153      	str	r3, [r2, #20]
 800eaf2:	e00e      	b.n	800eb12 <f_open+0x1c2>
			if (res == FR_OK) {					/* Is the object exsiting? */
 800eaf4:	b96d      	cbnz	r5, 800eb12 <f_open+0x1c2>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800eaf6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800eafa:	f013 0f10 	tst.w	r3, #16
 800eafe:	d150      	bne.n	800eba2 <f_open+0x252>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800eb00:	f016 0f02 	tst.w	r6, #2
 800eb04:	d005      	beq.n	800eb12 <f_open+0x1c2>
 800eb06:	f013 0f01 	tst.w	r3, #1
 800eb0a:	d002      	beq.n	800eb12 <f_open+0x1c2>
						res = FR_DENIED;
 800eb0c:	2507      	movs	r5, #7
 800eb0e:	e00b      	b.n	800eb28 <f_open+0x1d8>
					res = FR_DENIED;
 800eb10:	2507      	movs	r5, #7
		if (res == FR_OK) {
 800eb12:	b94d      	cbnz	r5, 800eb28 <f_open+0x1d8>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800eb14:	f017 0f08 	tst.w	r7, #8
 800eb18:	d001      	beq.n	800eb1e <f_open+0x1ce>
 800eb1a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800eb1e:	9b03      	ldr	r3, [sp, #12]
 800eb20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb22:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800eb24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb26:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (res == FR_OK) {
 800eb28:	2d00      	cmp	r5, #0
 800eb2a:	f040 8088 	bne.w	800ec3e <f_open+0x2ee>
			if (fs->fs_type == FS_EXFAT) {
 800eb2e:	9e03      	ldr	r6, [sp, #12]
 800eb30:	7833      	ldrb	r3, [r6, #0]
 800eb32:	2b04      	cmp	r3, #4
 800eb34:	d037      	beq.n	800eba6 <f_open+0x256>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800eb36:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800eb3a:	4641      	mov	r1, r8
 800eb3c:	4630      	mov	r0, r6
 800eb3e:	f7fd febf 	bl	800c8c0 <ld_clust>
 800eb42:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800eb44:	f108 001c 	add.w	r0, r8, #28
 800eb48:	f7fd fdba 	bl	800c6c0 <ld_dword>
 800eb4c:	6120      	str	r0, [r4, #16]
 800eb4e:	2300      	movs	r3, #0
 800eb50:	6163      	str	r3, [r4, #20]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800eb52:	2100      	movs	r1, #0
 800eb54:	6521      	str	r1, [r4, #80]	; 0x50
			fp->obj.fs = fs;	 	/* Validate the file object */
 800eb56:	9b03      	ldr	r3, [sp, #12]
 800eb58:	6023      	str	r3, [r4, #0]
			fp->obj.id = fs->id;
 800eb5a:	88db      	ldrh	r3, [r3, #6]
 800eb5c:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800eb5e:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800eb62:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800eb66:	6461      	str	r1, [r4, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800eb68:	2200      	movs	r2, #0
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
 800eb70:	f104 0354 	add.w	r3, r4, #84	; 0x54
 800eb74:	9300      	str	r3, [sp, #0]
 800eb76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fd fe48 	bl	800c810 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800eb80:	f017 0f20 	tst.w	r7, #32
 800eb84:	d05b      	beq.n	800ec3e <f_open+0x2ee>
 800eb86:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
 800eb8a:	ea56 0307 	orrs.w	r3, r6, r7
 800eb8e:	d056      	beq.n	800ec3e <f_open+0x2ee>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800eb90:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800eb94:	9b03      	ldr	r3, [sp, #12]
 800eb96:	f8b3 b00a 	ldrh.w	fp, [r3, #10]
 800eb9a:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800eb9e:	68a1      	ldr	r1, [r4, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eba0:	e027      	b.n	800ebf2 <f_open+0x2a2>
					res = FR_NO_FILE;
 800eba2:	2504      	movs	r5, #4
 800eba4:	e7c0      	b.n	800eb28 <f_open+0x1d8>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800eba6:	9b06      	ldr	r3, [sp, #24]
 800eba8:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800ebaa:	9b08      	ldr	r3, [sp, #32]
 800ebac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ebb0:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800ebb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ebba:	62a3      	str	r3, [r4, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800ebbc:	6930      	ldr	r0, [r6, #16]
 800ebbe:	3034      	adds	r0, #52	; 0x34
 800ebc0:	f7fd fd7e 	bl	800c6c0 <ld_dword>
 800ebc4:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ebc6:	6930      	ldr	r0, [r6, #16]
 800ebc8:	3038      	adds	r0, #56	; 0x38
 800ebca:	f7fd fd89 	bl	800c6e0 <ld_qword>
 800ebce:	e9c4 0104 	strd	r0, r1, [r4, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ebd2:	6933      	ldr	r3, [r6, #16]
 800ebd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ebd8:	f003 0302 	and.w	r3, r3, #2
 800ebdc:	71e3      	strb	r3, [r4, #7]
				fp->obj.n_frag = 0;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	61e3      	str	r3, [r4, #28]
 800ebe2:	e7b6      	b.n	800eb52 <f_open+0x202>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ebe4:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ebe8:	d013      	beq.n	800ec12 <f_open+0x2c2>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ebea:	ebb6 0608 	subs.w	r6, r6, r8
 800ebee:	eb67 0709 	sbc.w	r7, r7, r9
 800ebf2:	b985      	cbnz	r5, 800ec16 <f_open+0x2c6>
 800ebf4:	46d8      	mov	r8, fp
 800ebf6:	f04f 0900 	mov.w	r9, #0
 800ebfa:	45b9      	cmp	r9, r7
 800ebfc:	bf08      	it	eq
 800ebfe:	45b3      	cmpeq	fp, r6
 800ec00:	d209      	bcs.n	800ec16 <f_open+0x2c6>
					clst = get_fat(&fp->obj, clst);
 800ec02:	4620      	mov	r0, r4
 800ec04:	f7fe fc04 	bl	800d410 <get_fat>
 800ec08:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800ec0a:	2801      	cmp	r0, #1
 800ec0c:	d8ea      	bhi.n	800ebe4 <f_open+0x294>
 800ec0e:	2502      	movs	r5, #2
 800ec10:	e7e8      	b.n	800ebe4 <f_open+0x294>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ec12:	2501      	movs	r5, #1
 800ec14:	e7e9      	b.n	800ebea <f_open+0x29a>
				fp->clust = clst;
 800ec16:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ec18:	b98d      	cbnz	r5, 800ec3e <f_open+0x2ee>
 800ec1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ec1e:	2300      	movs	r3, #0
 800ec20:	ea02 0806 	and.w	r8, r2, r6
 800ec24:	ea03 0907 	and.w	r9, r3, r7
 800ec28:	ea58 0309 	orrs.w	r3, r8, r9
 800ec2c:	d007      	beq.n	800ec3e <f_open+0x2ee>
					if ((sc = clst2sect(fs, clst)) == 0) {
 800ec2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ec32:	4640      	mov	r0, r8
 800ec34:	f7fd fe1c 	bl	800c870 <clst2sect>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	b920      	cbnz	r0, 800ec46 <f_open+0x2f6>
						res = FR_INT_ERR;
 800ec3c:	2502      	movs	r5, #2
		FREE_NAMBUF();
 800ec3e:	4650      	mov	r0, sl
 800ec40:	f7fd fd2e 	bl	800c6a0 <ff_memfree>
 800ec44:	e696      	b.n	800e974 <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ec46:	0a73      	lsrs	r3, r6, #9
 800ec48:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
 800ec4c:	441a      	add	r2, r3
 800ec4e:	6462      	str	r2, [r4, #68]	; 0x44
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ec50:	2301      	movs	r3, #1
 800ec52:	9900      	ldr	r1, [sp, #0]
 800ec54:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ec58:	f7fd fcc2 	bl	800c5e0 <disk_read>
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d0ee      	beq.n	800ec3e <f_open+0x2ee>
 800ec60:	2501      	movs	r5, #1
 800ec62:	e7ec      	b.n	800ec3e <f_open+0x2ee>
	if (!fp) return FR_INVALID_OBJECT;
 800ec64:	2509      	movs	r5, #9
 800ec66:	e688      	b.n	800e97a <f_open+0x2a>
		INIT_NAMBUF(fs);
 800ec68:	2511      	movs	r5, #17
 800ec6a:	e686      	b.n	800e97a <f_open+0x2a>
 800ec6c:	f3af 8000 	nop.w

0800ec70 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ec70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec74:	b085      	sub	sp, #20
 800ec76:	4604      	mov	r4, r0
 800ec78:	460f      	mov	r7, r1
 800ec7a:	4615      	mov	r5, r2
 800ec7c:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800ec7e:	2300      	movs	r3, #0
 800ec80:	6033      	str	r3, [r6, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ec82:	9000      	str	r0, [sp, #0]
 800ec84:	a903      	add	r1, sp, #12
 800ec86:	f7fd ff83 	bl	800cb90 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ec8a:	4680      	mov	r8, r0
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	f040 80be 	bne.w	800ee0e <f_read+0x19e>
 800ec92:	f894 8031 	ldrb.w	r8, [r4, #49]	; 0x31
 800ec96:	f1b8 0f00 	cmp.w	r8, #0
 800ec9a:	f040 80b8 	bne.w	800ee0e <f_read+0x19e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ec9e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800eca2:	f013 0f01 	tst.w	r3, #1
 800eca6:	f000 80cf 	beq.w	800ee48 <f_read+0x1d8>
	remain = fp->obj.objsize - fp->fptr;
 800ecaa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800ecae:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800ecb2:	1a12      	subs	r2, r2, r0
 800ecb4:	eb63 0301 	sbc.w	r3, r3, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ecb8:	2100      	movs	r1, #0
 800ecba:	428b      	cmp	r3, r1
 800ecbc:	bf08      	it	eq
 800ecbe:	42aa      	cmpeq	r2, r5
 800ecc0:	d260      	bcs.n	800ed84 <f_read+0x114>
 800ecc2:	4615      	mov	r5, r2
 800ecc4:	e05e      	b.n	800ed84 <f_read+0x114>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
 800ecc6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ecc8:	b119      	cbz	r1, 800ecd2 <f_read+0x62>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ecca:	4620      	mov	r0, r4
 800eccc:	f7fd fde0 	bl	800c890 <clmt_clust>
 800ecd0:	e074      	b.n	800edbc <f_read+0x14c>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ecd2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ecd4:	9800      	ldr	r0, [sp, #0]
 800ecd6:	f7fe fb9b 	bl	800d410 <get_fat>
 800ecda:	e06f      	b.n	800edbc <f_read+0x14c>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ecdc:	f04f 0802 	mov.w	r8, #2
 800ece0:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800ece4:	e093      	b.n	800ee0e <f_read+0x19e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ece6:	f04f 0801 	mov.w	r8, #1
 800ecea:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800ecee:	e08e      	b.n	800ee0e <f_read+0x19e>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800ecf0:	f04f 0802 	mov.w	r8, #2
 800ecf4:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800ecf8:	e089      	b.n	800ee0e <f_read+0x19e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ecfa:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	db02      	blt.n	800ed08 <f_read+0x98>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ed02:	ea4f 294b 	mov.w	r9, fp, lsl #9
				continue;
 800ed06:	e02f      	b.n	800ed68 <f_read+0xf8>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ed08:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ed0a:	eba0 000a 	sub.w	r0, r0, sl
 800ed0e:	4558      	cmp	r0, fp
 800ed10:	d2f7      	bcs.n	800ed02 <f_read+0x92>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ed12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed16:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800ed1a:	eb07 2040 	add.w	r0, r7, r0, lsl #9
 800ed1e:	f7fd fd67 	bl	800c7f0 <mem_cpy>
 800ed22:	e7ee      	b.n	800ed02 <f_read+0x92>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ed24:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ed26:	4552      	cmp	r2, sl
 800ed28:	d00d      	beq.n	800ed46 <f_read+0xd6>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ed2a:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	db71      	blt.n	800ee16 <f_read+0x1a6>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ed32:	2301      	movs	r3, #1
 800ed34:	4652      	mov	r2, sl
 800ed36:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800ed3a:	9803      	ldr	r0, [sp, #12]
 800ed3c:	7840      	ldrb	r0, [r0, #1]
 800ed3e:	f7fd fc4f 	bl	800c5e0 <disk_read>
 800ed42:	2800      	cmp	r0, #0
 800ed44:	d17b      	bne.n	800ee3e <f_read+0x1ce>
			}
#endif
			fp->sect = sect;
 800ed46:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ed4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed50:	f5c3 7900 	rsb	r9, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ed54:	454d      	cmp	r5, r9
 800ed56:	d200      	bcs.n	800ed5a <f_read+0xea>
 800ed58:	46a9      	mov	r9, r5
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ed5a:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800ed5e:	464a      	mov	r2, r9
 800ed60:	4419      	add	r1, r3
 800ed62:	4638      	mov	r0, r7
 800ed64:	f7fd fd44 	bl	800c7f0 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 800ed68:	eba5 0509 	sub.w	r5, r5, r9
 800ed6c:	6833      	ldr	r3, [r6, #0]
 800ed6e:	444b      	add	r3, r9
 800ed70:	6033      	str	r3, [r6, #0]
 800ed72:	444f      	add	r7, r9
 800ed74:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800ed78:	eb12 0009 	adds.w	r0, r2, r9
 800ed7c:	f143 0100 	adc.w	r1, r3, #0
 800ed80:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
	for ( ;  btr;								/* Repeat until all data read */
 800ed84:	2d00      	cmp	r5, #0
 800ed86:	d042      	beq.n	800ee0e <f_read+0x19e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ed88:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800ed8c:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ed90:	2100      	movs	r1, #0
 800ed92:	ea00 0902 	and.w	r9, r0, r2
 800ed96:	ea01 0a03 	and.w	sl, r1, r3
 800ed9a:	ea59 010a 	orrs.w	r1, r9, sl
 800ed9e:	d1d4      	bne.n	800ed4a <f_read+0xda>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eda0:	ea4f 2952 	mov.w	r9, r2, lsr #9
 800eda4:	ea49 59c3 	orr.w	r9, r9, r3, lsl #23
 800eda8:	9903      	ldr	r1, [sp, #12]
 800edaa:	8949      	ldrh	r1, [r1, #10]
 800edac:	3901      	subs	r1, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800edae:	ea19 0901 	ands.w	r9, r9, r1
 800edb2:	d109      	bne.n	800edc8 <f_read+0x158>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800edb4:	ea52 0103 	orrs.w	r1, r2, r3
 800edb8:	d185      	bne.n	800ecc6 <f_read+0x56>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800edba:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800edbc:	2801      	cmp	r0, #1
 800edbe:	d98d      	bls.n	800ecdc <f_read+0x6c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800edc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800edc4:	d08f      	beq.n	800ece6 <f_read+0x76>
				fp->clust = clst;				/* Update current cluster */
 800edc6:	6420      	str	r0, [r4, #64]	; 0x40
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800edc8:	9b03      	ldr	r3, [sp, #12]
 800edca:	9301      	str	r3, [sp, #4]
 800edcc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fd fd4e 	bl	800c870 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800edd4:	4682      	mov	sl, r0
 800edd6:	2800      	cmp	r0, #0
 800edd8:	d08a      	beq.n	800ecf0 <f_read+0x80>
			sect += csect;
 800edda:	44ca      	add	sl, r9
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800eddc:	ea5f 2b55 	movs.w	fp, r5, lsr #9
 800ede0:	d0a0      	beq.n	800ed24 <f_read+0xb4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ede2:	eb09 030b 	add.w	r3, r9, fp
 800ede6:	9a01      	ldr	r2, [sp, #4]
 800ede8:	8952      	ldrh	r2, [r2, #10]
 800edea:	4293      	cmp	r3, r2
 800edec:	d901      	bls.n	800edf2 <f_read+0x182>
					cc = fs->csize - csect;
 800edee:	eba2 0b09 	sub.w	fp, r2, r9
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800edf2:	465b      	mov	r3, fp
 800edf4:	4652      	mov	r2, sl
 800edf6:	4639      	mov	r1, r7
 800edf8:	9801      	ldr	r0, [sp, #4]
 800edfa:	7840      	ldrb	r0, [r0, #1]
 800edfc:	f7fd fbf0 	bl	800c5e0 <disk_read>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	f43f af7a 	beq.w	800ecfa <f_read+0x8a>
 800ee06:	f04f 0801 	mov.w	r8, #1
 800ee0a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800ee0e:	4640      	mov	r0, r8
 800ee10:	b005      	add	sp, #20
 800ee12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee16:	2301      	movs	r3, #1
 800ee18:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800ee1c:	9801      	ldr	r0, [sp, #4]
 800ee1e:	7840      	ldrb	r0, [r0, #1]
 800ee20:	f7fd fbf6 	bl	800c610 <disk_write>
 800ee24:	b930      	cbnz	r0, 800ee34 <f_read+0x1c4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ee26:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ee2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee2e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800ee32:	e77e      	b.n	800ed32 <f_read+0xc2>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee34:	f04f 0801 	mov.w	r8, #1
 800ee38:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800ee3c:	e7e7      	b.n	800ee0e <f_read+0x19e>
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ee3e:	f04f 0801 	mov.w	r8, #1
 800ee42:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800ee46:	e7e2      	b.n	800ee0e <f_read+0x19e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ee48:	f04f 0807 	mov.w	r8, #7
 800ee4c:	e7df      	b.n	800ee0e <f_read+0x19e>
 800ee4e:	bf00      	nop

0800ee50 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee54:	b085      	sub	sp, #20
 800ee56:	4604      	mov	r4, r0
 800ee58:	460e      	mov	r6, r1
 800ee5a:	4615      	mov	r5, r2
 800ee5c:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800ee5e:	2300      	movs	r3, #0
 800ee60:	603b      	str	r3, [r7, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ee62:	9000      	str	r0, [sp, #0]
 800ee64:	a903      	add	r1, sp, #12
 800ee66:	f7fd fe93 	bl	800cb90 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ee6a:	4680      	mov	r8, r0
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	d14c      	bne.n	800ef0a <f_write+0xba>
 800ee70:	f894 8031 	ldrb.w	r8, [r4, #49]	; 0x31
 800ee74:	f1b8 0f00 	cmp.w	r8, #0
 800ee78:	d147      	bne.n	800ef0a <f_write+0xba>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ee7a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ee7e:	f013 0f02 	tst.w	r3, #2
 800ee82:	f000 80ff 	beq.w	800f084 <f_write+0x234>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ee86:	9b03      	ldr	r3, [sp, #12]
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	2b04      	cmp	r3, #4
 800ee8c:	f000 80bf 	beq.w	800f00e <f_write+0x1be>
 800ee90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee92:	42eb      	cmn	r3, r5
 800ee94:	f0c0 80bb 	bcc.w	800f00e <f_write+0x1be>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ee98:	43dd      	mvns	r5, r3
 800ee9a:	e0b8      	b.n	800f00e <f_write+0x1be>
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
					}
				} else {					/* On the middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
 800ee9c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ee9e:	2900      	cmp	r1, #0
 800eea0:	d037      	beq.n	800ef12 <f_write+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eea2:	4620      	mov	r0, r4
 800eea4:	f7fd fcf4 	bl	800c890 <clmt_clust>
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	f000 80e4 	beq.w	800f076 <f_write+0x226>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eeae:	2801      	cmp	r0, #1
 800eeb0:	d034      	beq.n	800ef1c <f_write+0xcc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eeb2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eeb6:	d036      	beq.n	800ef26 <f_write+0xd6>
				fp->clust = clst;			/* Update current cluster */
 800eeb8:	6420      	str	r0, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800eeba:	68a3      	ldr	r3, [r4, #8]
 800eebc:	b903      	cbnz	r3, 800eec0 <f_write+0x70>
 800eebe:	60a0      	str	r0, [r4, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800eec0:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	db33      	blt.n	800ef30 <f_write+0xe0>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800eec8:	9b03      	ldr	r3, [sp, #12]
 800eeca:	9301      	str	r3, [sp, #4]
 800eecc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eece:	4618      	mov	r0, r3
 800eed0:	f7fd fcce 	bl	800c870 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800eed4:	4681      	mov	r9, r0
 800eed6:	2800      	cmp	r0, #0
 800eed8:	d03f      	beq.n	800ef5a <f_write+0x10a>
			sect += csect;
 800eeda:	44d9      	add	r9, fp
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800eedc:	ea5f 2a55 	movs.w	sl, r5, lsr #9
 800eee0:	d057      	beq.n	800ef92 <f_write+0x142>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eee2:	eb0b 030a 	add.w	r3, fp, sl
 800eee6:	9a01      	ldr	r2, [sp, #4]
 800eee8:	8952      	ldrh	r2, [r2, #10]
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d901      	bls.n	800eef2 <f_write+0xa2>
					cc = fs->csize - csect;
 800eeee:	eba2 0a0b 	sub.w	sl, r2, fp
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eef2:	4653      	mov	r3, sl
 800eef4:	464a      	mov	r2, r9
 800eef6:	4631      	mov	r1, r6
 800eef8:	9801      	ldr	r0, [sp, #4]
 800eefa:	7840      	ldrb	r0, [r0, #1]
 800eefc:	f7fd fb88 	bl	800c610 <disk_write>
 800ef00:	b380      	cbz	r0, 800ef64 <f_write+0x114>
 800ef02:	f04f 0801 	mov.w	r8, #1
 800ef06:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800ef0a:	4640      	mov	r0, r8
 800ef0c:	b005      	add	sp, #20
 800ef0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ef12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ef14:	9800      	ldr	r0, [sp, #0]
 800ef16:	f7fe fb93 	bl	800d640 <create_chain>
 800ef1a:	e7c5      	b.n	800eea8 <f_write+0x58>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ef1c:	f04f 0802 	mov.w	r8, #2
 800ef20:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800ef24:	e7f1      	b.n	800ef0a <f_write+0xba>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef26:	f04f 0801 	mov.w	r8, #1
 800ef2a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800ef2e:	e7ec      	b.n	800ef0a <f_write+0xba>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef30:	2301      	movs	r3, #1
 800ef32:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ef34:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800ef38:	9803      	ldr	r0, [sp, #12]
 800ef3a:	7840      	ldrb	r0, [r0, #1]
 800ef3c:	f7fd fb68 	bl	800c610 <disk_write>
 800ef40:	b930      	cbnz	r0, 800ef50 <f_write+0x100>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef42:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ef46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef4a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800ef4e:	e7bb      	b.n	800eec8 <f_write+0x78>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef50:	f04f 0801 	mov.w	r8, #1
 800ef54:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800ef58:	e7d7      	b.n	800ef0a <f_write+0xba>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800ef5a:	f04f 0802 	mov.w	r8, #2
 800ef5e:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800ef62:	e7d2      	b.n	800ef0a <f_write+0xba>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ef64:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ef66:	eba1 0109 	sub.w	r1, r1, r9
 800ef6a:	4551      	cmp	r1, sl
 800ef6c:	d302      	bcc.n	800ef74 <f_write+0x124>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ef6e:	ea4f 294a 	mov.w	r9, sl, lsl #9
				continue;
 800ef72:	e030      	b.n	800efd6 <f_write+0x186>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ef74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef78:	eb06 2141 	add.w	r1, r6, r1, lsl #9
 800ef7c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800ef80:	f7fd fc36 	bl	800c7f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ef84:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ef88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef8c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800ef90:	e7ed      	b.n	800ef6e <f_write+0x11e>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ef92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef94:	454b      	cmp	r3, r9
 800ef96:	d007      	beq.n	800efa8 <f_write+0x158>
				fp->fptr < fp->obj.objsize &&
 800ef98:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800ef9c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800efa0:	4299      	cmp	r1, r3
 800efa2:	bf08      	it	eq
 800efa4:	4290      	cmpeq	r0, r2
 800efa6:	d357      	bcc.n	800f058 <f_write+0x208>
			fp->sect = sect;
 800efa8:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800efac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efb2:	f5c3 7900 	rsb	r9, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800efb6:	454d      	cmp	r5, r9
 800efb8:	d200      	bcs.n	800efbc <f_write+0x16c>
 800efba:	46a9      	mov	r9, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800efbc:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800efc0:	464a      	mov	r2, r9
 800efc2:	4631      	mov	r1, r6
 800efc4:	4418      	add	r0, r3
 800efc6:	f7fd fc13 	bl	800c7f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800efca:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800efce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800efd2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 800efd6:	eba5 0509 	sub.w	r5, r5, r9
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	444b      	add	r3, r9
 800efde:	603b      	str	r3, [r7, #0]
 800efe0:	444e      	add	r6, r9
 800efe2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800efe6:	eb12 0a09 	adds.w	sl, r2, r9
 800efea:	f143 0b00 	adc.w	fp, r3, #0
 800efee:	e9c4 ab0e 	strd	sl, fp, [r4, #56]	; 0x38
 800eff2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800eff6:	46d6      	mov	lr, sl
 800eff8:	46dc      	mov	ip, fp
 800effa:	458b      	cmp	fp, r1
 800effc:	bf08      	it	eq
 800effe:	4582      	cmpeq	sl, r0
 800f000:	d201      	bcs.n	800f006 <f_write+0x1b6>
 800f002:	4686      	mov	lr, r0
 800f004:	468c      	mov	ip, r1
 800f006:	f8c4 e010 	str.w	lr, [r4, #16]
 800f00a:	f8c4 c014 	str.w	ip, [r4, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800f00e:	b395      	cbz	r5, 800f076 <f_write+0x226>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f010:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800f014:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f018:	2100      	movs	r1, #0
 800f01a:	ea00 0902 	and.w	r9, r0, r2
 800f01e:	ea01 0a03 	and.w	sl, r1, r3
 800f022:	ea59 010a 	orrs.w	r1, r9, sl
 800f026:	d1c1      	bne.n	800efac <f_write+0x15c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f028:	ea4f 2b52 	mov.w	fp, r2, lsr #9
 800f02c:	ea4b 5bc3 	orr.w	fp, fp, r3, lsl #23
 800f030:	9903      	ldr	r1, [sp, #12]
 800f032:	8949      	ldrh	r1, [r1, #10]
 800f034:	3901      	subs	r1, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800f036:	ea1b 0b01 	ands.w	fp, fp, r1
 800f03a:	f47f af41 	bne.w	800eec0 <f_write+0x70>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f03e:	ea52 0103 	orrs.w	r1, r2, r3
 800f042:	f47f af2b 	bne.w	800ee9c <f_write+0x4c>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f046:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800f048:	2800      	cmp	r0, #0
 800f04a:	f47f af2d 	bne.w	800eea8 <f_write+0x58>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f04e:	2100      	movs	r1, #0
 800f050:	9800      	ldr	r0, [sp, #0]
 800f052:	f7fe faf5 	bl	800d640 <create_chain>
 800f056:	e727      	b.n	800eea8 <f_write+0x58>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800f058:	2301      	movs	r3, #1
 800f05a:	464a      	mov	r2, r9
 800f05c:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800f060:	9801      	ldr	r0, [sp, #4]
 800f062:	7840      	ldrb	r0, [r0, #1]
 800f064:	f7fd fabc 	bl	800c5e0 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800f068:	2800      	cmp	r0, #0
 800f06a:	d09d      	beq.n	800efa8 <f_write+0x158>
					ABORT(fs, FR_DISK_ERR);
 800f06c:	f04f 0801 	mov.w	r8, #1
 800f070:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800f074:	e749      	b.n	800ef0a <f_write+0xba>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f076:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f07a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f07e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	LEAVE_FF(fs, FR_OK);
 800f082:	e742      	b.n	800ef0a <f_write+0xba>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f084:	f04f 0807 	mov.w	r8, #7
 800f088:	e73f      	b.n	800ef0a <f_write+0xba>
 800f08a:	bf00      	nop
 800f08c:	f3af 8000 	nop.w

0800f090 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f092:	b097      	sub	sp, #92	; 0x5c
 800f094:	4604      	mov	r4, r0
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f096:	a915      	add	r1, sp, #84	; 0x54
 800f098:	f7fd fd7a 	bl	800cb90 <validate>
	if (res == FR_OK) {
 800f09c:	4605      	mov	r5, r0
 800f09e:	b9a0      	cbnz	r0, 800f0ca <f_sync+0x3a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f0a0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f0a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f0a8:	d00f      	beq.n	800f0ca <f_sync+0x3a>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f0aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f0ae:	d10f      	bne.n	800f0d0 <f_sync+0x40>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f0b0:	f7fd fade 	bl	800c670 <get_fattime>
 800f0b4:	4606      	mov	r6, r0
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f0b6:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f0b8:	7803      	ldrb	r3, [r0, #0]
 800f0ba:	2b04      	cmp	r3, #4
 800f0bc:	d01a      	beq.n	800f0f4 <f_sync+0x64>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f0be:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f0c0:	f7fd fdb6 	bl	800cc30 <move_window>
				if (res == FR_OK) {
 800f0c4:	4605      	mov	r5, r0
 800f0c6:	2800      	cmp	r0, #0
 800f0c8:	d078      	beq.n	800f1bc <f_sync+0x12c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800f0ca:	4628      	mov	r0, r5
 800f0cc:	b017      	add	sp, #92	; 0x5c
 800f0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f0d4:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800f0d8:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f0da:	7840      	ldrb	r0, [r0, #1]
 800f0dc:	f7fd fa98 	bl	800c610 <disk_write>
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	f040 8092 	bne.w	800f20a <f_sync+0x17a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f0e6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f0ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0ee:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f0f2:	e7dd      	b.n	800f0b0 <f_sync+0x20>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f7fe f96b 	bl	800d3d0 <fill_first_frag>
				if (res == FR_OK) {
 800f0fa:	4605      	mov	r5, r0
 800f0fc:	b1b0      	cbz	r0, 800f12c <f_sync+0x9c>
				if (res == FR_OK) {
 800f0fe:	2d00      	cmp	r5, #0
 800f100:	d1e3      	bne.n	800f0ca <f_sync+0x3a>
					INIT_NAMBUF(fs);
 800f102:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800f106:	f7fd fac3 	bl	800c690 <ff_memalloc>
 800f10a:	4607      	mov	r7, r0
 800f10c:	b1b0      	cbz	r0, 800f13c <f_sync+0xac>
 800f10e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f110:	60d8      	str	r0, [r3, #12]
 800f112:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800f116:	611a      	str	r2, [r3, #16]
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 800f118:	4621      	mov	r1, r4
 800f11a:	4668      	mov	r0, sp
 800f11c:	f7fe fd68 	bl	800dbf0 <load_obj_xdir>
					if (res == FR_OK) {
 800f120:	4605      	mov	r5, r0
 800f122:	b168      	cbz	r0, 800f140 <f_sync+0xb0>
					FREE_NAMBUF();
 800f124:	4638      	mov	r0, r7
 800f126:	f7fd fabb 	bl	800c6a0 <ff_memfree>
 800f12a:	e7ce      	b.n	800f0ca <f_sync+0x3a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f12c:	f04f 32ff 	mov.w	r2, #4294967295
 800f130:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f132:	4620      	mov	r0, r4
 800f134:	f7fe f934 	bl	800d3a0 <fill_last_frag>
 800f138:	4605      	mov	r5, r0
 800f13a:	e7e0      	b.n	800f0fe <f_sync+0x6e>
					INIT_NAMBUF(fs);
 800f13c:	2511      	movs	r5, #17
 800f13e:	e7c4      	b.n	800f0ca <f_sync+0x3a>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 800f140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f142:	6919      	ldr	r1, [r3, #16]
 800f144:	790a      	ldrb	r2, [r1, #4]
 800f146:	f042 0220 	orr.w	r2, r2, #32
 800f14a:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 800f14c:	79e2      	ldrb	r2, [r4, #7]
 800f14e:	6919      	ldr	r1, [r3, #16]
 800f150:	f042 0201 	orr.w	r2, r2, #1
 800f154:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800f158:	6918      	ldr	r0, [r3, #16]
 800f15a:	68a1      	ldr	r1, [r4, #8]
 800f15c:	3034      	adds	r0, #52	; 0x34
 800f15e:	f7fd fb1f 	bl	800c7a0 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800f162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f164:	6918      	ldr	r0, [r3, #16]
 800f166:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800f16a:	3038      	adds	r0, #56	; 0x38
 800f16c:	f7fd fb28 	bl	800c7c0 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800f170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f172:	6918      	ldr	r0, [r3, #16]
 800f174:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800f178:	3028      	adds	r0, #40	; 0x28
 800f17a:	f7fd fb21 	bl	800c7c0 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800f17e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f180:	6918      	ldr	r0, [r3, #16]
 800f182:	4631      	mov	r1, r6
 800f184:	300c      	adds	r0, #12
 800f186:	f7fd fb0b 	bl	800c7a0 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800f18a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f18c:	691a      	ldr	r2, [r3, #16]
 800f18e:	2100      	movs	r1, #0
 800f190:	7551      	strb	r1, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800f192:	6918      	ldr	r0, [r3, #16]
 800f194:	3010      	adds	r0, #16
 800f196:	f7fd fb03 	bl	800c7a0 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800f19a:	4668      	mov	r0, sp
 800f19c:	f7fe fdf8 	bl	800dd90 <store_xdir>
						if (res == FR_OK) {
 800f1a0:	4605      	mov	r5, r0
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d1be      	bne.n	800f124 <f_sync+0x94>
							res = sync_fs(fs);
 800f1a6:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f1a8:	f7ff fb62 	bl	800e870 <sync_fs>
 800f1ac:	4605      	mov	r5, r0
							fp->flag &= (BYTE)~FA_MODIFIED;
 800f1ae:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f1b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1b6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f1ba:	e7b3      	b.n	800f124 <f_sync+0x94>
					dir = fp->dir_ptr;
 800f1bc:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800f1be:	7aeb      	ldrb	r3, [r5, #11]
 800f1c0:	f043 0320 	orr.w	r3, r3, #32
 800f1c4:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800f1c6:	68a2      	ldr	r2, [r4, #8]
 800f1c8:	4629      	mov	r1, r5
 800f1ca:	6820      	ldr	r0, [r4, #0]
 800f1cc:	f7fd fb90 	bl	800c8f0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f1d0:	6921      	ldr	r1, [r4, #16]
 800f1d2:	f105 001c 	add.w	r0, r5, #28
 800f1d6:	f7fd fae3 	bl	800c7a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f1da:	4631      	mov	r1, r6
 800f1dc:	f105 0016 	add.w	r0, r5, #22
 800f1e0:	f7fd fade 	bl	800c7a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	f105 0012 	add.w	r0, r5, #18
 800f1ea:	f7fd fad1 	bl	800c790 <st_word>
					fs->wflag = 1;
 800f1ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f1f4:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f1f6:	f7ff fb3b 	bl	800e870 <sync_fs>
 800f1fa:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f1fc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f204:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f208:	e75f      	b.n	800f0ca <f_sync+0x3a>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f20a:	2501      	movs	r5, #1
 800f20c:	e75d      	b.n	800f0ca <f_sync+0x3a>
 800f20e:	bf00      	nop

0800f210 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f210:	b510      	push	{r4, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f216:	f7ff ff3b 	bl	800f090 <f_sync>
	if (res == FR_OK)
 800f21a:	4603      	mov	r3, r0
 800f21c:	b110      	cbz	r0, 800f224 <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800f21e:	4618      	mov	r0, r3
 800f220:	b002      	add	sp, #8
 800f222:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f224:	a901      	add	r1, sp, #4
 800f226:	4620      	mov	r0, r4
 800f228:	f7fd fcb2 	bl	800cb90 <validate>
		if (res == FR_OK) {
 800f22c:	4603      	mov	r3, r0
 800f22e:	2800      	cmp	r0, #0
 800f230:	d1f5      	bne.n	800f21e <f_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
 800f232:	2200      	movs	r2, #0
 800f234:	6022      	str	r2, [r4, #0]
 800f236:	e7f2      	b.n	800f21e <f_close+0xe>
 800f238:	f3af 8000 	nop.w
 800f23c:	f3af 8000 	nop.w

0800f240 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f244:	b087      	sub	sp, #28
 800f246:	4604      	mov	r4, r0
 800f248:	4616      	mov	r6, r2
 800f24a:	461f      	mov	r7, r3
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f24c:	9001      	str	r0, [sp, #4]
 800f24e:	a905      	add	r1, sp, #20
 800f250:	f7fd fc9e 	bl	800cb90 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f254:	4605      	mov	r5, r0
 800f256:	b908      	cbnz	r0, 800f25c <f_lseek+0x1c>
 800f258:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800f25c:	b91d      	cbnz	r5, 800f266 <f_lseek+0x26>
 800f25e:	9b05      	ldr	r3, [sp, #20]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	2b04      	cmp	r3, #4
 800f264:	d01e      	beq.n	800f2a4 <f_lseek+0x64>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f266:	b9cd      	cbnz	r5, 800f29c <f_lseek+0x5c>

#if FF_USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f268:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	f000 80b1 	beq.w	800f3d2 <f_lseek+0x192>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f270:	f1b7 3fff 	cmp.w	r7, #4294967295
 800f274:	bf08      	it	eq
 800f276:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 800f27a:	d01b      	beq.n	800f2b4 <f_lseek+0x74>
				*tbl = 0;		/* Terminate table */
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f27c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800f280:	4690      	mov	r8, r2
 800f282:	4699      	mov	r9, r3
 800f284:	42bb      	cmp	r3, r7
 800f286:	bf08      	it	eq
 800f288:	42b2      	cmpeq	r2, r6
 800f28a:	d301      	bcc.n	800f290 <f_lseek+0x50>
 800f28c:	46b0      	mov	r8, r6
 800f28e:	46b9      	mov	r9, r7
			fp->fptr = ofs;				/* Set file pointer */
 800f290:	4642      	mov	r2, r8
 800f292:	464b      	mov	r3, r9
 800f294:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			if (ofs > 0) {
 800f298:	4313      	orrs	r3, r2
 800f29a:	d14a      	bne.n	800f332 <f_lseek+0xf2>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800f29c:	4628      	mov	r0, r5
 800f29e:	b007      	add	sp, #28
 800f2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	f7fe f878 	bl	800d3a0 <fill_last_frag>
 800f2b0:	4605      	mov	r5, r0
 800f2b2:	e7d8      	b.n	800f266 <f_lseek+0x26>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f2b4:	f103 0b04 	add.w	fp, r3, #4
 800f2b8:	f8d3 a000 	ldr.w	sl, [r3]
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f2bc:	f8d4 9008 	ldr.w	r9, [r4, #8]
			if (cl != 0) {
 800f2c0:	f1b9 0f00 	cmp.w	r9, #0
 800f2c4:	d029      	beq.n	800f31a <f_lseek+0xda>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f2c6:	f04f 0802 	mov.w	r8, #2
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f2ca:	f108 0802 	add.w	r8, r8, #2
 800f2ce:	464e      	mov	r6, r9
 800f2d0:	2700      	movs	r7, #0
						pcl = cl; ncl++;
 800f2d2:	3701      	adds	r7, #1
						cl = get_fat(&fp->obj, cl);
 800f2d4:	4631      	mov	r1, r6
 800f2d6:	9801      	ldr	r0, [sp, #4]
 800f2d8:	f7fe f89a 	bl	800d410 <get_fat>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f2dc:	2801      	cmp	r0, #1
 800f2de:	d914      	bls.n	800f30a <f_lseek+0xca>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f2e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f2e4:	d015      	beq.n	800f312 <f_lseek+0xd2>
					} while (cl == pcl + 1);
 800f2e6:	1c73      	adds	r3, r6, #1
						cl = get_fat(&fp->obj, cl);
 800f2e8:	4606      	mov	r6, r0
					} while (cl == pcl + 1);
 800f2ea:	4283      	cmp	r3, r0
 800f2ec:	d0f1      	beq.n	800f2d2 <f_lseek+0x92>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f2ee:	45c2      	cmp	sl, r8
 800f2f0:	d305      	bcc.n	800f2fe <f_lseek+0xbe>
						*tbl++ = ncl; *tbl++ = tcl;
 800f2f2:	465b      	mov	r3, fp
 800f2f4:	f843 7b08 	str.w	r7, [r3], #8
 800f2f8:	f8cb 9004 	str.w	r9, [fp, #4]
 800f2fc:	469b      	mov	fp, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f2fe:	9b05      	ldr	r3, [sp, #20]
 800f300:	69db      	ldr	r3, [r3, #28]
 800f302:	4283      	cmp	r3, r0
 800f304:	d90b      	bls.n	800f31e <f_lseek+0xde>
						cl = get_fat(&fp->obj, cl);
 800f306:	4681      	mov	r9, r0
 800f308:	e7df      	b.n	800f2ca <f_lseek+0x8a>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f30a:	2502      	movs	r5, #2
 800f30c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f310:	e7c4      	b.n	800f29c <f_lseek+0x5c>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f312:	2501      	movs	r5, #1
 800f314:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f318:	e7c0      	b.n	800f29c <f_lseek+0x5c>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f31a:	f04f 0802 	mov.w	r8, #2
			*fp->cltbl = ulen;	/* Number of items used */
 800f31e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f320:	f8c3 8000 	str.w	r8, [r3]
			if (ulen <= tlen) {
 800f324:	45d0      	cmp	r8, sl
 800f326:	f200 817a 	bhi.w	800f61e <f_lseek+0x3de>
				*tbl = 0;		/* Terminate table */
 800f32a:	2300      	movs	r3, #0
 800f32c:	f8cb 3000 	str.w	r3, [fp]
 800f330:	e7b4      	b.n	800f29c <f_lseek+0x5c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f332:	f118 36ff 	adds.w	r6, r8, #4294967295
 800f336:	f149 37ff 	adc.w	r7, r9, #4294967295
 800f33a:	4632      	mov	r2, r6
 800f33c:	463b      	mov	r3, r7
 800f33e:	4620      	mov	r0, r4
 800f340:	f7fd faa6 	bl	800c890 <clmt_clust>
 800f344:	4601      	mov	r1, r0
 800f346:	6420      	str	r0, [r4, #64]	; 0x40
				dsc = clst2sect(fs, fp->clust);
 800f348:	f8dd a014 	ldr.w	sl, [sp, #20]
 800f34c:	4650      	mov	r0, sl
 800f34e:	f7fd fa8f 	bl	800c870 <clst2sect>
				if (dsc == 0) ABORT(fs, FR_INT_ERR);
 800f352:	b328      	cbz	r0, 800f3a0 <f_lseek+0x160>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f354:	0a73      	lsrs	r3, r6, #9
 800f356:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
 800f35a:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800f35e:	3a01      	subs	r2, #1
 800f360:	4013      	ands	r3, r2
 800f362:	181e      	adds	r6, r3, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f364:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f368:	2300      	movs	r3, #0
 800f36a:	ea08 0802 	and.w	r8, r8, r2
 800f36e:	ea09 0903 	and.w	r9, r9, r3
 800f372:	ea58 0309 	orrs.w	r3, r8, r9
 800f376:	d091      	beq.n	800f29c <f_lseek+0x5c>
 800f378:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f37a:	42b2      	cmp	r2, r6
 800f37c:	d08e      	beq.n	800f29c <f_lseek+0x5c>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f37e:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800f382:	2b00      	cmp	r3, #0
 800f384:	db10      	blt.n	800f3a8 <f_lseek+0x168>
					if (disk_read(fs->pdrv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f386:	2301      	movs	r3, #1
 800f388:	4632      	mov	r2, r6
 800f38a:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800f38e:	9805      	ldr	r0, [sp, #20]
 800f390:	7840      	ldrb	r0, [r0, #1]
 800f392:	f7fd f925 	bl	800c5e0 <disk_read>
 800f396:	b1d0      	cbz	r0, 800f3ce <f_lseek+0x18e>
 800f398:	2501      	movs	r5, #1
 800f39a:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f39e:	e77d      	b.n	800f29c <f_lseek+0x5c>
				if (dsc == 0) ABORT(fs, FR_INT_ERR);
 800f3a0:	2502      	movs	r5, #2
 800f3a2:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f3a6:	e779      	b.n	800f29c <f_lseek+0x5c>
						if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800f3ae:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800f3b2:	f7fd f92d 	bl	800c610 <disk_write>
 800f3b6:	b930      	cbnz	r0, 800f3c6 <f_lseek+0x186>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f3b8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f3bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3c0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f3c4:	e7df      	b.n	800f386 <f_lseek+0x146>
						if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f3c6:	2501      	movs	r5, #1
 800f3c8:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f3cc:	e766      	b.n	800f29c <f_lseek+0x5c>
					fp->sect = dsc;
 800f3ce:	6466      	str	r6, [r4, #68]	; 0x44
 800f3d0:	e764      	b.n	800f29c <f_lseek+0x5c>
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
 800f3d2:	9b05      	ldr	r3, [sp, #20]
 800f3d4:	781a      	ldrb	r2, [r3, #0]
 800f3d6:	2a04      	cmp	r2, #4
 800f3d8:	d006      	beq.n	800f3e8 <f_lseek+0x1a8>
 800f3da:	2f01      	cmp	r7, #1
 800f3dc:	bf08      	it	eq
 800f3de:	2e00      	cmpeq	r6, #0
 800f3e0:	d302      	bcc.n	800f3e8 <f_lseek+0x1a8>
 800f3e2:	f04f 36ff 	mov.w	r6, #4294967295
 800f3e6:	2700      	movs	r7, #0
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f3e8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800f3ec:	42b9      	cmp	r1, r7
 800f3ee:	bf08      	it	eq
 800f3f0:	42b0      	cmpeq	r0, r6
 800f3f2:	d206      	bcs.n	800f402 <f_lseek+0x1c2>
 800f3f4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800f3f8:	f012 0f02 	tst.w	r2, #2
 800f3fc:	d101      	bne.n	800f402 <f_lseek+0x1c2>
			ofs = fp->obj.objsize;
 800f3fe:	4606      	mov	r6, r0
 800f400:	460f      	mov	r7, r1
		ifptr = fp->fptr;
 800f402:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	; 0x38
		fp->fptr = nsect = 0;
 800f406:	2000      	movs	r0, #0
 800f408:	2100      	movs	r1, #0
 800f40a:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		if (ofs > 0) {
 800f40e:	ea56 0207 	orrs.w	r2, r6, r7
 800f412:	f000 80b9 	beq.w	800f588 <f_lseek+0x348>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f416:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
 800f41a:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
			if (ifptr > 0 &&
 800f41e:	ea58 0309 	orrs.w	r3, r8, r9
 800f422:	d02a      	beq.n	800f47a <f_lseek+0x23a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f424:	f04f 0b00 	mov.w	fp, #0
 800f428:	4652      	mov	r2, sl
 800f42a:	465b      	mov	r3, fp
 800f42c:	f116 30ff 	adds.w	r0, r6, #4294967295
 800f430:	f147 31ff 	adc.w	r1, r7, #4294967295
 800f434:	f004 f85c 	bl	80134f0 <__aeabi_uldivmod>
 800f438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f43c:	f118 32ff 	adds.w	r2, r8, #4294967295
 800f440:	f149 33ff 	adc.w	r3, r9, #4294967295
 800f444:	4690      	mov	r8, r2
 800f446:	4699      	mov	r9, r3
 800f448:	4652      	mov	r2, sl
 800f44a:	465b      	mov	r3, fp
 800f44c:	4640      	mov	r0, r8
 800f44e:	4649      	mov	r1, r9
 800f450:	f004 f84e 	bl	80134f0 <__aeabi_uldivmod>
			if (ifptr > 0 &&
 800f454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f458:	428b      	cmp	r3, r1
 800f45a:	bf08      	it	eq
 800f45c:	4282      	cmpeq	r2, r0
 800f45e:	d30c      	bcc.n	800f47a <f_lseek+0x23a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f460:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f464:	ea28 0803 	bic.w	r8, r8, r3
 800f468:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
				ofs -= fp->fptr;
 800f46c:	ebb6 0608 	subs.w	r6, r6, r8
 800f470:	eb67 0709 	sbc.w	r7, r7, r9
				clst = fp->clust;
 800f474:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
 800f478:	e006      	b.n	800f488 <f_lseek+0x248>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f47a:	f8d4 8008 	ldr.w	r8, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f47e:	f1b8 0f00 	cmp.w	r8, #0
 800f482:	d005      	beq.n	800f490 <f_lseek+0x250>
				fp->clust = clst;
 800f484:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
			if (clst != 0) {
 800f488:	f1b8 0f00 	cmp.w	r8, #0
 800f48c:	d127      	bne.n	800f4de <f_lseek+0x29e>
 800f48e:	e07d      	b.n	800f58c <f_lseek+0x34c>
					clst = create_chain(&fp->obj, 0);
 800f490:	2100      	movs	r1, #0
 800f492:	4620      	mov	r0, r4
 800f494:	f7fe f8d4 	bl	800d640 <create_chain>
 800f498:	4680      	mov	r8, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f49a:	2801      	cmp	r0, #1
 800f49c:	d004      	beq.n	800f4a8 <f_lseek+0x268>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f49e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f4a2:	d005      	beq.n	800f4b0 <f_lseek+0x270>
					fp->obj.sclust = clst;
 800f4a4:	60a0      	str	r0, [r4, #8]
 800f4a6:	e7ed      	b.n	800f484 <f_lseek+0x244>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f4a8:	2502      	movs	r5, #2
 800f4aa:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f4ae:	e6f5      	b.n	800f29c <f_lseek+0x5c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f4b0:	2501      	movs	r5, #1
 800f4b2:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f4b6:	e6f1      	b.n	800f29c <f_lseek+0x5c>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f4b8:	4641      	mov	r1, r8
 800f4ba:	9801      	ldr	r0, [sp, #4]
 800f4bc:	f7fe f8c0 	bl	800d640 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f4c0:	4680      	mov	r8, r0
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d03e      	beq.n	800f544 <f_lseek+0x304>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f4c6:	f1b8 3fff 	cmp.w	r8, #4294967295
 800f4ca:	d033      	beq.n	800f534 <f_lseek+0x2f4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f4cc:	f1b8 0f01 	cmp.w	r8, #1
 800f4d0:	d934      	bls.n	800f53c <f_lseek+0x2fc>
 800f4d2:	9b05      	ldr	r3, [sp, #20]
 800f4d4:	69db      	ldr	r3, [r3, #28]
 800f4d6:	4543      	cmp	r3, r8
 800f4d8:	d930      	bls.n	800f53c <f_lseek+0x2fc>
					fp->clust = clst;
 800f4da:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800f4de:	46d3      	mov	fp, sl
 800f4e0:	f04f 0c00 	mov.w	ip, #0
 800f4e4:	45bc      	cmp	ip, r7
 800f4e6:	bf08      	it	eq
 800f4e8:	45b2      	cmpeq	sl, r6
 800f4ea:	d22d      	bcs.n	800f548 <f_lseek+0x308>
					ofs -= bcs; fp->fptr += bcs;
 800f4ec:	ebb6 060b 	subs.w	r6, r6, fp
 800f4f0:	eb67 070c 	sbc.w	r7, r7, ip
 800f4f4:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800f4f8:	eb1b 0200 	adds.w	r2, fp, r0
 800f4fc:	eb4c 0301 	adc.w	r3, ip, r1
 800f500:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f504:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800f508:	f011 0f02 	tst.w	r1, #2
 800f50c:	d00c      	beq.n	800f528 <f_lseek+0x2e8>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800f50e:	e9d4 bc04 	ldrd	fp, ip, [r4, #16]
 800f512:	459c      	cmp	ip, r3
 800f514:	bf08      	it	eq
 800f516:	4593      	cmpeq	fp, r2
 800f518:	d2ce      	bcs.n	800f4b8 <f_lseek+0x278>
							fp->obj.objsize = fp->fptr;
 800f51a:	e9c4 2304 	strd	r2, r3, [r4, #16]
							fp->flag |= FA_MODIFIED;
 800f51e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800f522:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800f526:	e7c7      	b.n	800f4b8 <f_lseek+0x278>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f528:	4641      	mov	r1, r8
 800f52a:	9801      	ldr	r0, [sp, #4]
 800f52c:	f7fd ff70 	bl	800d410 <get_fat>
 800f530:	4680      	mov	r8, r0
 800f532:	e7c8      	b.n	800f4c6 <f_lseek+0x286>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f534:	2501      	movs	r5, #1
 800f536:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f53a:	e6af      	b.n	800f29c <f_lseek+0x5c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f53c:	2502      	movs	r5, #2
 800f53e:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f542:	e6ab      	b.n	800f29c <f_lseek+0x5c>
							ofs = 0; break;
 800f544:	2600      	movs	r6, #0
 800f546:	2700      	movs	r7, #0
				fp->fptr += ofs;
 800f548:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800f54c:	1990      	adds	r0, r2, r6
 800f54e:	eb43 0107 	adc.w	r1, r3, r7
 800f552:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
				if (ofs % SS(fs)) {
 800f556:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f55a:	2300      	movs	r3, #0
 800f55c:	ea02 0006 	and.w	r0, r2, r6
 800f560:	ea03 0107 	and.w	r1, r3, r7
 800f564:	ea50 0301 	orrs.w	r3, r0, r1
 800f568:	d03f      	beq.n	800f5ea <f_lseek+0x3aa>
					nsect = clst2sect(fs, clst);	/* Current sector */
 800f56a:	4641      	mov	r1, r8
 800f56c:	9805      	ldr	r0, [sp, #20]
 800f56e:	f7fd f97f 	bl	800c870 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 800f572:	b128      	cbz	r0, 800f580 <f_lseek+0x340>
					nsect += (DWORD)(ofs / SS(fs));
 800f574:	ea4f 2856 	mov.w	r8, r6, lsr #9
 800f578:	ea48 58c7 	orr.w	r8, r8, r7, lsl #23
 800f57c:	4480      	add	r8, r0
 800f57e:	e005      	b.n	800f58c <f_lseek+0x34c>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 800f580:	2502      	movs	r5, #2
 800f582:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f586:	e689      	b.n	800f29c <f_lseek+0x5c>
		fp->fptr = nsect = 0;
 800f588:	f04f 0800 	mov.w	r8, #0
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 800f58c:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
 800f590:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800f594:	42bb      	cmp	r3, r7
 800f596:	bf08      	it	eq
 800f598:	42b2      	cmpeq	r2, r6
 800f59a:	d207      	bcs.n	800f5ac <f_lseek+0x36c>
			fp->obj.objsize = fp->fptr;
 800f59c:	e9c4 6704 	strd	r6, r7, [r4, #16]
			fp->flag |= FA_MODIFIED;
 800f5a0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f5a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5a8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f5ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	ea06 0002 	and.w	r0, r6, r2
 800f5b6:	ea07 0103 	and.w	r1, r7, r3
 800f5ba:	ea50 0301 	orrs.w	r3, r0, r1
 800f5be:	f43f ae6d 	beq.w	800f29c <f_lseek+0x5c>
 800f5c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f5c4:	4542      	cmp	r2, r8
 800f5c6:	f43f ae69 	beq.w	800f29c <f_lseek+0x5c>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f5ca:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	db0e      	blt.n	800f5f0 <f_lseek+0x3b0>
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	4642      	mov	r2, r8
 800f5d6:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800f5da:	9805      	ldr	r0, [sp, #20]
 800f5dc:	7840      	ldrb	r0, [r0, #1]
 800f5de:	f7fc ffff 	bl	800c5e0 <disk_read>
 800f5e2:	b9c0      	cbnz	r0, 800f616 <f_lseek+0x3d6>
			fp->sect = nsect;
 800f5e4:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
 800f5e8:	e658      	b.n	800f29c <f_lseek+0x5c>
		fp->fptr = nsect = 0;
 800f5ea:	f04f 0800 	mov.w	r8, #0
 800f5ee:	e7cd      	b.n	800f58c <f_lseek+0x34c>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800f5f6:	9805      	ldr	r0, [sp, #20]
 800f5f8:	7840      	ldrb	r0, [r0, #1]
 800f5fa:	f7fd f809 	bl	800c610 <disk_write>
 800f5fe:	b930      	cbnz	r0, 800f60e <f_lseek+0x3ce>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f600:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f608:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f60c:	e7e1      	b.n	800f5d2 <f_lseek+0x392>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f60e:	2501      	movs	r5, #1
 800f610:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f614:	e642      	b.n	800f29c <f_lseek+0x5c>
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f616:	2501      	movs	r5, #1
 800f618:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800f61c:	e63e      	b.n	800f29c <f_lseek+0x5c>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f61e:	2511      	movs	r5, #17
 800f620:	e63c      	b.n	800f29c <f_lseek+0x5c>
 800f622:	bf00      	nop
 800f624:	f3af 8000 	nop.w
 800f628:	f3af 8000 	nop.w
 800f62c:	f3af 8000 	nop.w

0800f630 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f630:	b570      	push	{r4, r5, r6, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	9101      	str	r1, [sp, #4]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f636:	2800      	cmp	r0, #0
 800f638:	d05f      	beq.n	800f6fa <f_opendir+0xca>
 800f63a:	4604      	mov	r4, r0

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800f63c:	2200      	movs	r2, #0
 800f63e:	a903      	add	r1, sp, #12
 800f640:	a801      	add	r0, sp, #4
 800f642:	f7fd fb5d 	bl	800cd00 <find_volume>
	if (res == FR_OK) {
 800f646:	4605      	mov	r5, r0
 800f648:	b128      	cbz	r0, 800f656 <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 800f64a:	b10d      	cbz	r5, 800f650 <f_opendir+0x20>
 800f64c:	2300      	movs	r3, #0
 800f64e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800f650:	4628      	mov	r0, r5
 800f652:	b004      	add	sp, #16
 800f654:	bd70      	pop	{r4, r5, r6, pc}
		dp->obj.fs = fs;
 800f656:	9b03      	ldr	r3, [sp, #12]
 800f658:	6023      	str	r3, [r4, #0]
		INIT_NAMBUF(fs);
 800f65a:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800f65e:	f7fd f817 	bl	800c690 <ff_memalloc>
 800f662:	4606      	mov	r6, r0
 800f664:	2800      	cmp	r0, #0
 800f666:	d04a      	beq.n	800f6fe <f_opendir+0xce>
 800f668:	9b03      	ldr	r3, [sp, #12]
 800f66a:	60d8      	str	r0, [r3, #12]
 800f66c:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800f670:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f672:	9901      	ldr	r1, [sp, #4]
 800f674:	4620      	mov	r0, r4
 800f676:	f7fe ff8b 	bl	800e590 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800f67a:	4605      	mov	r5, r0
 800f67c:	b9c0      	cbnz	r0, 800f6b0 <f_opendir+0x80>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f67e:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
 800f682:	2b00      	cmp	r3, #0
 800f684:	db0c      	blt.n	800f6a0 <f_opendir+0x70>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 800f686:	79a3      	ldrb	r3, [r4, #6]
 800f688:	f013 0f10 	tst.w	r3, #16
 800f68c:	d033      	beq.n	800f6f6 <f_opendir+0xc6>
					if (fs->fs_type == FS_EXFAT) {
 800f68e:	9d03      	ldr	r5, [sp, #12]
 800f690:	782b      	ldrb	r3, [r5, #0]
 800f692:	2b04      	cmp	r3, #4
 800f694:	d013      	beq.n	800f6be <f_opendir+0x8e>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f696:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f698:	4628      	mov	r0, r5
 800f69a:	f7fd f911 	bl	800c8c0 <ld_clust>
 800f69e:	60a0      	str	r0, [r4, #8]
				dp->obj.id = fs->id;
 800f6a0:	9b03      	ldr	r3, [sp, #12]
 800f6a2:	88db      	ldrh	r3, [r3, #6]
 800f6a4:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f6a6:	2100      	movs	r1, #0
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	f7fd ff69 	bl	800d580 <dir_sdi>
 800f6ae:	4605      	mov	r5, r0
		FREE_NAMBUF();
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	f7fc fff5 	bl	800c6a0 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f6b6:	2d04      	cmp	r5, #4
 800f6b8:	d1c7      	bne.n	800f64a <f_opendir+0x1a>
 800f6ba:	2505      	movs	r5, #5
 800f6bc:	e7c6      	b.n	800f64c <f_opendir+0x1c>
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
 800f6be:	68a3      	ldr	r3, [r4, #8]
 800f6c0:	6223      	str	r3, [r4, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800f6c2:	6923      	ldr	r3, [r4, #16]
 800f6c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f6c8:	79e2      	ldrb	r2, [r4, #7]
 800f6ca:	4313      	orrs	r3, r2
 800f6cc:	6263      	str	r3, [r4, #36]	; 0x24
						dp->obj.c_ofs = dp->blk_ofs;
 800f6ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f6d0:	62a3      	str	r3, [r4, #40]	; 0x28
						dp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800f6d2:	6928      	ldr	r0, [r5, #16]
 800f6d4:	3034      	adds	r0, #52	; 0x34
 800f6d6:	f7fc fff3 	bl	800c6c0 <ld_dword>
 800f6da:	60a0      	str	r0, [r4, #8]
						dp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f6dc:	6928      	ldr	r0, [r5, #16]
 800f6de:	3038      	adds	r0, #56	; 0x38
 800f6e0:	f7fc fffe 	bl	800c6e0 <ld_qword>
 800f6e4:	e9c4 0104 	strd	r0, r1, [r4, #16]
						dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f6e8:	692b      	ldr	r3, [r5, #16]
 800f6ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f6ee:	f003 0302 	and.w	r3, r3, #2
 800f6f2:	71e3      	strb	r3, [r4, #7]
 800f6f4:	e7d4      	b.n	800f6a0 <f_opendir+0x70>
					res = FR_NO_PATH;
 800f6f6:	2505      	movs	r5, #5
 800f6f8:	e7da      	b.n	800f6b0 <f_opendir+0x80>
	if (!dp) return FR_INVALID_OBJECT;
 800f6fa:	2509      	movs	r5, #9
 800f6fc:	e7a8      	b.n	800f650 <f_opendir+0x20>
		INIT_NAMBUF(fs);
 800f6fe:	2511      	movs	r5, #17
 800f700:	e7a6      	b.n	800f650 <f_opendir+0x20>
 800f702:	bf00      	nop
 800f704:	f3af 8000 	nop.w
 800f708:	f3af 8000 	nop.w
 800f70c:	f3af 8000 	nop.w

0800f710 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f710:	b510      	push	{r4, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 800f716:	a901      	add	r1, sp, #4
 800f718:	f7fd fa3a 	bl	800cb90 <validate>
	if (res == FR_OK) {
 800f71c:	4603      	mov	r3, r0
 800f71e:	b908      	cbnz	r0, 800f724 <f_closedir+0x14>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
 800f720:	2200      	movs	r2, #0
 800f722:	6022      	str	r2, [r4, #0]
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 800f724:	4618      	mov	r0, r3
 800f726:	b002      	add	sp, #8
 800f728:	bd10      	pop	{r4, pc}
 800f72a:	bf00      	nop
 800f72c:	f3af 8000 	nop.w

0800f730 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f730:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f732:	b083      	sub	sp, #12
 800f734:	4605      	mov	r5, r0
 800f736:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f738:	a901      	add	r1, sp, #4
 800f73a:	f7fd fa29 	bl	800cb90 <validate>
	if (res == FR_OK) {
 800f73e:	4604      	mov	r4, r0
 800f740:	bb40      	cbnz	r0, 800f794 <f_readdir+0x64>
		if (!fno) {
 800f742:	b1ee      	cbz	r6, 800f780 <f_readdir+0x50>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
 800f744:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800f748:	f7fc ffa2 	bl	800c690 <ff_memalloc>
 800f74c:	4607      	mov	r7, r0
 800f74e:	b320      	cbz	r0, 800f79a <f_readdir+0x6a>
 800f750:	9b01      	ldr	r3, [sp, #4]
 800f752:	60d8      	str	r0, [r3, #12]
 800f754:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800f758:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800f75a:	2100      	movs	r1, #0
 800f75c:	4628      	mov	r0, r5
 800f75e:	f7fe fa67 	bl	800dc30 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f762:	2804      	cmp	r0, #4
 800f764:	d000      	beq.n	800f768 <f_readdir+0x38>
			if (res == FR_OK) {				/* A valid entry is found */
 800f766:	b988      	cbnz	r0, 800f78c <f_readdir+0x5c>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f768:	4631      	mov	r1, r6
 800f76a:	4628      	mov	r0, r5
 800f76c:	f7fe fd10 	bl	800e190 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f770:	2100      	movs	r1, #0
 800f772:	4628      	mov	r0, r5
 800f774:	f7fe f94c 	bl	800da10 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f778:	2804      	cmp	r0, #4
 800f77a:	d008      	beq.n	800f78e <f_readdir+0x5e>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f77c:	4604      	mov	r4, r0
 800f77e:	e006      	b.n	800f78e <f_readdir+0x5e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f780:	2100      	movs	r1, #0
 800f782:	4628      	mov	r0, r5
 800f784:	f7fd fefc 	bl	800d580 <dir_sdi>
 800f788:	4604      	mov	r4, r0
 800f78a:	e003      	b.n	800f794 <f_readdir+0x64>
			res = dir_read(dp, 0);			/* Read an item */
 800f78c:	4604      	mov	r4, r0
			}
			FREE_NAMBUF();
 800f78e:	4638      	mov	r0, r7
 800f790:	f7fc ff86 	bl	800c6a0 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
}
 800f794:	4620      	mov	r0, r4
 800f796:	b003      	add	sp, #12
 800f798:	bdf0      	pop	{r4, r5, r6, r7, pc}
			INIT_NAMBUF(fs);
 800f79a:	2411      	movs	r4, #17
 800f79c:	e7fa      	b.n	800f794 <f_readdir+0x64>
 800f79e:	bf00      	nop

0800f7a0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f7a0:	b570      	push	{r4, r5, r6, lr}
 800f7a2:	b096      	sub	sp, #88	; 0x58
 800f7a4:	9001      	str	r0, [sp, #4]
 800f7a6:	460e      	mov	r6, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	a902      	add	r1, sp, #8
 800f7ac:	a801      	add	r0, sp, #4
 800f7ae:	f7fd faa7 	bl	800cd00 <find_volume>
	if (res == FR_OK) {
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	b110      	cbz	r0, 800f7bc <f_stat+0x1c>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	b016      	add	sp, #88	; 0x58
 800f7ba:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(dj.obj.fs);
 800f7bc:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800f7c0:	f7fc ff66 	bl	800c690 <ff_memalloc>
 800f7c4:	4605      	mov	r5, r0
 800f7c6:	b1c8      	cbz	r0, 800f7fc <f_stat+0x5c>
 800f7c8:	9b02      	ldr	r3, [sp, #8]
 800f7ca:	60d8      	str	r0, [r3, #12]
 800f7cc:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800f7d0:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f7d2:	9901      	ldr	r1, [sp, #4]
 800f7d4:	a802      	add	r0, sp, #8
 800f7d6:	f7fe fedb 	bl	800e590 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 800f7da:	4604      	mov	r4, r0
 800f7dc:	b950      	cbnz	r0, 800f7f4 <f_stat+0x54>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800f7de:	f99d 3053 	ldrsb.w	r3, [sp, #83]	; 0x53
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	db05      	blt.n	800f7f2 <f_stat+0x52>
				if (fno) get_fileinfo(&dj, fno);
 800f7e6:	b12e      	cbz	r6, 800f7f4 <f_stat+0x54>
 800f7e8:	4631      	mov	r1, r6
 800f7ea:	a802      	add	r0, sp, #8
 800f7ec:	f7fe fcd0 	bl	800e190 <get_fileinfo>
 800f7f0:	e000      	b.n	800f7f4 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800f7f2:	2406      	movs	r4, #6
		FREE_NAMBUF();
 800f7f4:	4628      	mov	r0, r5
 800f7f6:	f7fc ff53 	bl	800c6a0 <ff_memfree>
 800f7fa:	e7dc      	b.n	800f7b6 <f_stat+0x16>
		INIT_NAMBUF(dj.obj.fs);
 800f7fc:	2411      	movs	r4, #17
 800f7fe:	e7da      	b.n	800f7b6 <f_stat+0x16>

0800f800 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
)
{
 800f800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f804:	b090      	sub	sp, #64	; 0x40
 800f806:	9001      	str	r0, [sp, #4]
 800f808:	460f      	mov	r7, r1
 800f80a:	4614      	mov	r4, r2
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800f80c:	2200      	movs	r2, #0
 800f80e:	a90f      	add	r1, sp, #60	; 0x3c
 800f810:	a801      	add	r0, sp, #4
 800f812:	f7fd fa75 	bl	800cd00 <find_volume>
	if (res == FR_OK) {
 800f816:	4606      	mov	r6, r0
 800f818:	2800      	cmp	r0, #0
 800f81a:	f040 8081 	bne.w	800f920 <f_getfree+0x120>
		*fatfs = fs;				/* Return ptr to the fs object */
 800f81e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f820:	6023      	str	r3, [r4, #0]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800f822:	699a      	ldr	r2, [r3, #24]
 800f824:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800f828:	f1a8 0402 	sub.w	r4, r8, #2
 800f82c:	42a2      	cmp	r2, r4
 800f82e:	d909      	bls.n	800f844 <f_getfree+0x44>
			*nclst = fs->free_clst;
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 800f830:	781a      	ldrb	r2, [r3, #0]
 800f832:	2a01      	cmp	r2, #1
 800f834:	d008      	beq.n	800f848 <f_getfree+0x48>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) nfree++;
				} while (++clst < fs->n_fatent);
			} else {
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
 800f836:	2a04      	cmp	r2, #4
 800f838:	d01c      	beq.n	800f874 <f_getfree+0x74>
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
 800f83a:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
					i = 0;					/* Offset in the sector */
 800f83e:	2400      	movs	r4, #0
			nfree = 0;
 800f840:	4625      	mov	r5, r4
 800f842:	e056      	b.n	800f8f2 <f_getfree+0xf2>
			*nclst = fs->free_clst;
 800f844:	603a      	str	r2, [r7, #0]
 800f846:	e06b      	b.n	800f920 <f_getfree+0x120>
				clst = 2; obj.fs = fs;
 800f848:	9302      	str	r3, [sp, #8]
 800f84a:	2402      	movs	r4, #2
			nfree = 0;
 800f84c:	2500      	movs	r5, #0
 800f84e:	e004      	b.n	800f85a <f_getfree+0x5a>
				} while (++clst < fs->n_fatent);
 800f850:	3401      	adds	r4, #1
 800f852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f854:	69db      	ldr	r3, [r3, #28]
 800f856:	42a3      	cmp	r3, r4
 800f858:	d95b      	bls.n	800f912 <f_getfree+0x112>
					stat = get_fat(&obj, clst);
 800f85a:	4621      	mov	r1, r4
 800f85c:	a802      	add	r0, sp, #8
 800f85e:	f7fd fdd7 	bl	800d410 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800f862:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f866:	d053      	beq.n	800f910 <f_getfree+0x110>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800f868:	2801      	cmp	r0, #1
 800f86a:	d05d      	beq.n	800f928 <f_getfree+0x128>
					if (stat == 0) nfree++;
 800f86c:	2800      	cmp	r0, #0
 800f86e:	d1ef      	bne.n	800f850 <f_getfree+0x50>
 800f870:	3501      	adds	r5, #1
 800f872:	e7ed      	b.n	800f850 <f_getfree+0x50>
					sect = fs->database;		/* Assuming bitmap starts at cluster 2 */
 800f874:	6b19      	ldr	r1, [r3, #48]	; 0x30
					i = 0;						/* Offset in the sector */
 800f876:	f04f 0800 	mov.w	r8, #0
			nfree = 0;
 800f87a:	4645      	mov	r5, r8
 800f87c:	e018      	b.n	800f8b0 <f_getfree+0xb0>
							res = move_window(fs, sect++);
 800f87e:	f101 0901 	add.w	r9, r1, #1
 800f882:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f884:	f7fd f9d4 	bl	800cc30 <move_window>
							if (res != FR_OK) break;
 800f888:	4606      	mov	r6, r0
 800f88a:	2800      	cmp	r0, #0
 800f88c:	d141      	bne.n	800f912 <f_getfree+0x112>
							res = move_window(fs, sect++);
 800f88e:	4649      	mov	r1, r9
 800f890:	e011      	b.n	800f8b6 <f_getfree+0xb6>
							bm >>= 1;
 800f892:	0852      	lsrs	r2, r2, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800f894:	3b01      	subs	r3, #1
 800f896:	3c01      	subs	r4, #1
 800f898:	b12b      	cbz	r3, 800f8a6 <f_getfree+0xa6>
 800f89a:	b124      	cbz	r4, 800f8a6 <f_getfree+0xa6>
							if (!(bm & 1)) nfree++;
 800f89c:	f012 0f01 	tst.w	r2, #1
 800f8a0:	d1f7      	bne.n	800f892 <f_getfree+0x92>
 800f8a2:	3501      	adds	r5, #1
 800f8a4:	e7f5      	b.n	800f892 <f_getfree+0x92>
						i = (i + 1) % SS(fs);
 800f8a6:	f108 0801 	add.w	r8, r8, #1
 800f8aa:	f3c8 0808 	ubfx	r8, r8, #0, #9
					} while (clst);
 800f8ae:	b384      	cbz	r4, 800f912 <f_getfree+0x112>
						if (i == 0) {
 800f8b0:	f1b8 0f00 	cmp.w	r8, #0
 800f8b4:	d0e3      	beq.n	800f87e <f_getfree+0x7e>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800f8b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8b8:	4443      	add	r3, r8
 800f8ba:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800f8be:	2308      	movs	r3, #8
 800f8c0:	e7ea      	b.n	800f898 <f_getfree+0x98>
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
							res = move_window(fs, sect++);
 800f8c2:	f109 0a01 	add.w	sl, r9, #1
 800f8c6:	4649      	mov	r1, r9
 800f8c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f8ca:	f7fd f9b1 	bl	800cc30 <move_window>
							if (res != FR_OK) break;
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	b9f8      	cbnz	r0, 800f912 <f_getfree+0x112>
							res = move_window(fs, sect++);
 800f8d2:	46d1      	mov	r9, sl
 800f8d4:	e00f      	b.n	800f8f6 <f_getfree+0xf6>
						}
						if (fs->fs_type == FS_FAT16) {
							if (ld_word(fs->win + i) == 0) nfree++;
 800f8d6:	3038      	adds	r0, #56	; 0x38
 800f8d8:	4420      	add	r0, r4
 800f8da:	f7fc fee9 	bl	800c6b0 <ld_word>
 800f8de:	b900      	cbnz	r0, 800f8e2 <f_getfree+0xe2>
 800f8e0:	3501      	adds	r5, #1
							i += 2;
 800f8e2:	3402      	adds	r4, #2
 800f8e4:	e000      	b.n	800f8e8 <f_getfree+0xe8>
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
							i += 4;
 800f8e6:	3404      	adds	r4, #4
						}
						i %= SS(fs);
 800f8e8:	f3c4 0408 	ubfx	r4, r4, #0, #9
					} while (--clst);
 800f8ec:	f1b8 0801 	subs.w	r8, r8, #1
 800f8f0:	d00f      	beq.n	800f912 <f_getfree+0x112>
						if (i == 0) {
 800f8f2:	2c00      	cmp	r4, #0
 800f8f4:	d0e5      	beq.n	800f8c2 <f_getfree+0xc2>
						if (fs->fs_type == FS_FAT16) {
 800f8f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f8f8:	7803      	ldrb	r3, [r0, #0]
 800f8fa:	2b02      	cmp	r3, #2
 800f8fc:	d0eb      	beq.n	800f8d6 <f_getfree+0xd6>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 800f8fe:	3038      	adds	r0, #56	; 0x38
 800f900:	4420      	add	r0, r4
 800f902:	f7fc fedd 	bl	800c6c0 <ld_dword>
 800f906:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 800f90a:	d1ec      	bne.n	800f8e6 <f_getfree+0xe6>
 800f90c:	3501      	adds	r5, #1
 800f90e:	e7ea      	b.n	800f8e6 <f_getfree+0xe6>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800f910:	2601      	movs	r6, #1
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800f912:	603d      	str	r5, [r7, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800f914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f916:	619d      	str	r5, [r3, #24]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 800f918:	791a      	ldrb	r2, [r3, #4]
 800f91a:	f042 0201 	orr.w	r2, r2, #1
 800f91e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
}
 800f920:	4630      	mov	r0, r6
 800f922:	b010      	add	sp, #64	; 0x40
 800f924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (stat == 1) { res = FR_INT_ERR; break; }
 800f928:	2602      	movs	r6, #2
 800f92a:	e7f2      	b.n	800f912 <f_getfree+0x112>
 800f92c:	f3af 8000 	nop.w

0800f930 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 800f930:	b530      	push	{r4, r5, lr}
 800f932:	b083      	sub	sp, #12
 800f934:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f936:	a901      	add	r1, sp, #4
 800f938:	f7fd f92a 	bl	800cb90 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 800f93c:	4604      	mov	r4, r0
 800f93e:	2800      	cmp	r0, #0
 800f940:	d15a      	bne.n	800f9f8 <f_truncate+0xc8>
 800f942:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
 800f946:	2c00      	cmp	r4, #0
 800f948:	d156      	bne.n	800f9f8 <f_truncate+0xc8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f94a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f94e:	f013 0f02 	tst.w	r3, #2
 800f952:	d050      	beq.n	800f9f6 <f_truncate+0xc6>

	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 800f954:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	; 0x38
 800f958:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f95c:	4299      	cmp	r1, r3
 800f95e:	bf08      	it	eq
 800f960:	4290      	cmpeq	r0, r2
 800f962:	d249      	bcs.n	800f9f8 <f_truncate+0xc8>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 800f964:	ea50 0301 	orrs.w	r3, r0, r1
 800f968:	d119      	bne.n	800f99e <f_truncate+0x6e>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800f96a:	2200      	movs	r2, #0
 800f96c:	68a9      	ldr	r1, [r5, #8]
 800f96e:	4628      	mov	r0, r5
 800f970:	f7fd ff4e 	bl	800d810 <remove_chain>
 800f974:	4604      	mov	r4, r0
			fp->obj.sclust = 0;
 800f976:	2300      	movs	r3, #0
 800f978:	60ab      	str	r3, [r5, #8]
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
 800f97a:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
 800f97e:	e9c5 2304 	strd	r2, r3, [r5, #16]
		fp->flag |= FA_MODIFIED;
 800f982:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f98a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
#if !FF_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 800f98e:	b914      	cbnz	r4, 800f996 <f_truncate+0x66>
 800f990:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f994:	d11d      	bne.n	800f9d2 <f_truncate+0xa2>
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
 800f996:	b37c      	cbz	r4, 800f9f8 <f_truncate+0xc8>
 800f998:	f885 4031 	strb.w	r4, [r5, #49]	; 0x31
 800f99c:	e02c      	b.n	800f9f8 <f_truncate+0xc8>
			ncl = get_fat(&fp->obj, fp->clust);
 800f99e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	f7fd fd35 	bl	800d410 <get_fat>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f9a6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f9aa:	d00e      	beq.n	800f9ca <f_truncate+0x9a>
			if (ncl == 1) res = FR_INT_ERR;
 800f9ac:	2801      	cmp	r0, #1
 800f9ae:	d00e      	beq.n	800f9ce <f_truncate+0x9e>
			if (res == FR_OK && ncl < fs->n_fatent) {
 800f9b0:	2c00      	cmp	r4, #0
 800f9b2:	d1e2      	bne.n	800f97a <f_truncate+0x4a>
 800f9b4:	9b01      	ldr	r3, [sp, #4]
 800f9b6:	69db      	ldr	r3, [r3, #28]
 800f9b8:	4283      	cmp	r3, r0
 800f9ba:	d9de      	bls.n	800f97a <f_truncate+0x4a>
				res = remove_chain(&fp->obj, ncl, fp->clust);
 800f9bc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800f9be:	4601      	mov	r1, r0
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	f7fd ff25 	bl	800d810 <remove_chain>
 800f9c6:	4604      	mov	r4, r0
 800f9c8:	e7d7      	b.n	800f97a <f_truncate+0x4a>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f9ca:	2401      	movs	r4, #1
 800f9cc:	e7ee      	b.n	800f9ac <f_truncate+0x7c>
			if (ncl == 1) res = FR_INT_ERR;
 800f9ce:	2402      	movs	r4, #2
 800f9d0:	e7d3      	b.n	800f97a <f_truncate+0x4a>
			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800f9d6:	f105 0154 	add.w	r1, r5, #84	; 0x54
 800f9da:	9801      	ldr	r0, [sp, #4]
 800f9dc:	7840      	ldrb	r0, [r0, #1]
 800f9de:	f7fc fe17 	bl	800c610 <disk_write>
 800f9e2:	b930      	cbnz	r0, 800f9f2 <f_truncate+0xc2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f9e4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f9e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9ec:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800f9f0:	e7d1      	b.n	800f996 <f_truncate+0x66>
				res = FR_DISK_ERR;
 800f9f2:	2401      	movs	r4, #1
 800f9f4:	e7d0      	b.n	800f998 <f_truncate+0x68>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f9f6:	2407      	movs	r4, #7
	}

	LEAVE_FF(fs, res);
}
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	b003      	add	sp, #12
 800f9fc:	bd30      	pop	{r4, r5, pc}
 800f9fe:	bf00      	nop

0800fa00 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800fa00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa04:	b0b9      	sub	sp, #228	; 0xe4
 800fa06:	9001      	str	r0, [sp, #4]
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800fa08:	2202      	movs	r2, #2
 800fa0a:	a90f      	add	r1, sp, #60	; 0x3c
 800fa0c:	a801      	add	r0, sp, #4
 800fa0e:	f7fd f977 	bl	800cd00 <find_volume>
	if (res == FR_OK) {
 800fa12:	4604      	mov	r4, r0
 800fa14:	b118      	cbz	r0, 800fa1e <f_unlink+0x1e>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 800fa16:	4620      	mov	r0, r4
 800fa18:	b039      	add	sp, #228	; 0xe4
 800fa1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800fa1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa20:	9324      	str	r3, [sp, #144]	; 0x90
		INIT_NAMBUF(fs);
 800fa22:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800fa26:	f7fc fe33 	bl	800c690 <ff_memalloc>
 800fa2a:	4605      	mov	r5, r0
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d079      	beq.n	800fb24 <f_unlink+0x124>
 800fa30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa32:	60d8      	str	r0, [r3, #12]
 800fa34:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800fa38:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 800fa3a:	9901      	ldr	r1, [sp, #4]
 800fa3c:	a824      	add	r0, sp, #144	; 0x90
 800fa3e:	f7fe fda7 	bl	800e590 <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
 800fa42:	4604      	mov	r4, r0
 800fa44:	2800      	cmp	r0, #0
 800fa46:	d157      	bne.n	800faf8 <f_unlink+0xf8>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800fa48:	f99d 30db 	ldrsb.w	r3, [sp, #219]	; 0xdb
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	db46      	blt.n	800fade <f_unlink+0xde>
				if (dj.obj.attr & AM_RDO) {
 800fa50:	f89d 7096 	ldrb.w	r7, [sp, #150]	; 0x96
 800fa54:	f017 0f01 	tst.w	r7, #1
 800fa58:	d152      	bne.n	800fb00 <f_unlink+0x100>
				obj.fs = fs;
 800fa5a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800fa5c:	9602      	str	r6, [sp, #8]
				if (fs->fs_type == FS_EXFAT) {
 800fa5e:	7833      	ldrb	r3, [r6, #0]
 800fa60:	2b04      	cmp	r3, #4
 800fa62:	d01d      	beq.n	800faa0 <f_unlink+0xa0>
					dclst = ld_clust(fs, dj.dir);
 800fa64:	9933      	ldr	r1, [sp, #204]	; 0xcc
 800fa66:	4630      	mov	r0, r6
 800fa68:	f7fc ff2a 	bl	800c8c0 <ld_clust>
 800fa6c:	4680      	mov	r8, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800fa6e:	f017 0f10 	tst.w	r7, #16
 800fa72:	d037      	beq.n	800fae4 <f_unlink+0xe4>
						sdj.obj.fs = fs;				/* Open the sub-directory */
 800fa74:	9610      	str	r6, [sp, #64]	; 0x40
						sdj.obj.sclust = dclst;
 800fa76:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
						if (fs->fs_type == FS_EXFAT) {
 800fa7a:	7833      	ldrb	r3, [r6, #0]
 800fa7c:	2b04      	cmp	r3, #4
 800fa7e:	d025      	beq.n	800facc <f_unlink+0xcc>
						res = dir_sdi(&sdj, 0);
 800fa80:	2100      	movs	r1, #0
 800fa82:	a810      	add	r0, sp, #64	; 0x40
 800fa84:	f7fd fd7c 	bl	800d580 <dir_sdi>
						if (res == FR_OK) {
 800fa88:	4604      	mov	r4, r0
 800fa8a:	bb58      	cbnz	r0, 800fae4 <f_unlink+0xe4>
							res = dir_read(&sdj, 0);			/* Read an item */
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	a810      	add	r0, sp, #64	; 0x40
 800fa90:	f7fe f8ce 	bl	800dc30 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800fa94:	4604      	mov	r4, r0
 800fa96:	2800      	cmp	r0, #0
 800fa98:	d036      	beq.n	800fb08 <f_unlink+0x108>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800fa9a:	2804      	cmp	r0, #4
 800fa9c:	d122      	bne.n	800fae4 <f_unlink+0xe4>
 800fa9e:	e022      	b.n	800fae6 <f_unlink+0xe6>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 800faa0:	f8d6 9010 	ldr.w	r9, [r6, #16]
 800faa4:	f109 0034 	add.w	r0, r9, #52	; 0x34
 800faa8:	f7fc fe0a 	bl	800c6c0 <ld_dword>
 800faac:	4680      	mov	r8, r0
 800faae:	9004      	str	r0, [sp, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800fab0:	f109 0038 	add.w	r0, r9, #56	; 0x38
 800fab4:	f7fc fe14 	bl	800c6e0 <ld_qword>
 800fab8:	e9cd 0106 	strd	r0, r1, [sp, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800fabc:	6933      	ldr	r3, [r6, #16]
 800fabe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800fac2:	f003 0302 	and.w	r3, r3, #2
 800fac6:	f88d 300f 	strb.w	r3, [sp, #15]
 800faca:	e7d0      	b.n	800fa6e <f_unlink+0x6e>
							sdj.obj.objsize = obj.objsize;
 800facc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fad0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
							sdj.obj.stat = obj.stat;
 800fad4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800fad8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 800fadc:	e7d0      	b.n	800fa80 <f_unlink+0x80>
	DWORD dclst = 0;
 800fade:	f04f 0800 	mov.w	r8, #0
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800fae2:	2406      	movs	r4, #6
			if (res == FR_OK) {
 800fae4:	b944      	cbnz	r4, 800faf8 <f_unlink+0xf8>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800fae6:	a824      	add	r0, sp, #144	; 0x90
 800fae8:	f7fe f982 	bl	800ddf0 <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800faec:	4604      	mov	r4, r0
 800faee:	b910      	cbnz	r0, 800faf6 <f_unlink+0xf6>
 800faf0:	f1b8 0f00 	cmp.w	r8, #0
 800faf4:	d10a      	bne.n	800fb0c <f_unlink+0x10c>
				if (res == FR_OK) res = sync_fs(fs);
 800faf6:	b184      	cbz	r4, 800fb1a <f_unlink+0x11a>
		FREE_NAMBUF();
 800faf8:	4628      	mov	r0, r5
 800fafa:	f7fc fdd1 	bl	800c6a0 <ff_memfree>
 800fafe:	e78a      	b.n	800fa16 <f_unlink+0x16>
	DWORD dclst = 0;
 800fb00:	f04f 0800 	mov.w	r8, #0
					res = FR_DENIED;		/* Cannot remove R/O object */
 800fb04:	2407      	movs	r4, #7
 800fb06:	e7ed      	b.n	800fae4 <f_unlink+0xe4>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800fb08:	2407      	movs	r4, #7
 800fb0a:	e7eb      	b.n	800fae4 <f_unlink+0xe4>
					res = remove_chain(&obj, dclst, 0);
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	4641      	mov	r1, r8
 800fb10:	a802      	add	r0, sp, #8
 800fb12:	f7fd fe7d 	bl	800d810 <remove_chain>
 800fb16:	4604      	mov	r4, r0
 800fb18:	e7ed      	b.n	800faf6 <f_unlink+0xf6>
				if (res == FR_OK) res = sync_fs(fs);
 800fb1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800fb1c:	f7fe fea8 	bl	800e870 <sync_fs>
 800fb20:	4604      	mov	r4, r0
 800fb22:	e7e9      	b.n	800faf8 <f_unlink+0xf8>
		INIT_NAMBUF(fs);
 800fb24:	2411      	movs	r4, #17
 800fb26:	e776      	b.n	800fa16 <f_unlink+0x16>
 800fb28:	f3af 8000 	nop.w
 800fb2c:	f3af 8000 	nop.w

0800fb30 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800fb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb34:	b099      	sub	sp, #100	; 0x64
 800fb36:	9001      	str	r0, [sp, #4]
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800fb38:	2202      	movs	r2, #2
 800fb3a:	a903      	add	r1, sp, #12
 800fb3c:	a801      	add	r0, sp, #4
 800fb3e:	f7fd f8df 	bl	800cd00 <find_volume>
	if (res == FR_OK) {
 800fb42:	4604      	mov	r4, r0
 800fb44:	b118      	cbz	r0, 800fb4e <f_mkdir+0x1e>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 800fb46:	4620      	mov	r0, r4
 800fb48:	b019      	add	sp, #100	; 0x64
 800fb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 800fb4e:	9b03      	ldr	r3, [sp, #12]
 800fb50:	9304      	str	r3, [sp, #16]
		INIT_NAMBUF(fs);
 800fb52:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800fb56:	f7fc fd9b 	bl	800c690 <ff_memalloc>
 800fb5a:	4605      	mov	r5, r0
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	f000 80be 	beq.w	800fcde <f_mkdir+0x1ae>
 800fb62:	9b03      	ldr	r3, [sp, #12]
 800fb64:	60d8      	str	r0, [r3, #12]
 800fb66:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800fb6a:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 800fb6c:	9901      	ldr	r1, [sp, #4]
 800fb6e:	a804      	add	r0, sp, #16
 800fb70:	f7fe fd0e 	bl	800e590 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800fb74:	2800      	cmp	r0, #0
 800fb76:	f000 80ad 	beq.w	800fcd4 <f_mkdir+0x1a4>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800fb7a:	2804      	cmp	r0, #4
 800fb7c:	d001      	beq.n	800fb82 <f_mkdir+0x52>
		res = follow_path(&dj, path);			/* Follow the file path */
 800fb7e:	4604      	mov	r4, r0
 800fb80:	e0a9      	b.n	800fcd6 <f_mkdir+0x1a6>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800fb82:	2100      	movs	r1, #0
 800fb84:	a804      	add	r0, sp, #16
 800fb86:	f7fd fd5b 	bl	800d640 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800fb8a:	9a03      	ldr	r2, [sp, #12]
 800fb8c:	8953      	ldrh	r3, [r2, #10]
 800fb8e:	025b      	lsls	r3, r3, #9
 800fb90:	9308      	str	r3, [sp, #32]
 800fb92:	2300      	movs	r3, #0
 800fb94:	9309      	str	r3, [sp, #36]	; 0x24
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800fb96:	4606      	mov	r6, r0
 800fb98:	b900      	cbnz	r0, 800fb9c <f_mkdir+0x6c>
 800fb9a:	2407      	movs	r4, #7
			if (dcl == 1) res = FR_INT_ERR;
 800fb9c:	2e01      	cmp	r6, #1
 800fb9e:	d029      	beq.n	800fbf4 <f_mkdir+0xc4>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fba0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800fba4:	d02d      	beq.n	800fc02 <f_mkdir+0xd2>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800fba6:	b33c      	cbz	r4, 800fbf8 <f_mkdir+0xc8>
			tm = GET_FATTIME();
 800fba8:	f7fc fd62 	bl	800c670 <get_fattime>
 800fbac:	4607      	mov	r7, r0
			if (res == FR_OK) {					/* Initialize the new directory table */
 800fbae:	b354      	cbz	r4, 800fc06 <f_mkdir+0xd6>
			if (res == FR_OK) {
 800fbb0:	2c00      	cmp	r4, #0
 800fbb2:	d05f      	beq.n	800fc74 <f_mkdir+0x144>
			if (res == FR_OK) {
 800fbb4:	2c00      	cmp	r4, #0
 800fbb6:	f040 8087 	bne.w	800fcc8 <f_mkdir+0x198>
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 800fbba:	9b03      	ldr	r3, [sp, #12]
 800fbbc:	781a      	ldrb	r2, [r3, #0]
 800fbbe:	2a04      	cmp	r2, #4
 800fbc0:	d05d      	beq.n	800fc7e <f_mkdir+0x14e>
					dir = dj.dir;
 800fbc2:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800fbc6:	4639      	mov	r1, r7
 800fbc8:	f108 0016 	add.w	r0, r8, #22
 800fbcc:	f7fc fde8 	bl	800c7a0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800fbd0:	4632      	mov	r2, r6
 800fbd2:	4641      	mov	r1, r8
 800fbd4:	9803      	ldr	r0, [sp, #12]
 800fbd6:	f7fc fe8b 	bl	800c8f0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800fbda:	2310      	movs	r3, #16
 800fbdc:	f888 300b 	strb.w	r3, [r8, #11]
					fs->wflag = 1;
 800fbe0:	9b03      	ldr	r3, [sp, #12]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	70da      	strb	r2, [r3, #3]
				if (res == FR_OK) {
 800fbe6:	2c00      	cmp	r4, #0
 800fbe8:	d175      	bne.n	800fcd6 <f_mkdir+0x1a6>
					res = sync_fs(fs);
 800fbea:	9803      	ldr	r0, [sp, #12]
 800fbec:	f7fe fe40 	bl	800e870 <sync_fs>
 800fbf0:	4604      	mov	r4, r0
 800fbf2:	e070      	b.n	800fcd6 <f_mkdir+0x1a6>
			if (dcl == 1) res = FR_INT_ERR;
 800fbf4:	2402      	movs	r4, #2
 800fbf6:	e7d3      	b.n	800fba0 <f_mkdir+0x70>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800fbf8:	4610      	mov	r0, r2
 800fbfa:	f7fc fff1 	bl	800cbe0 <sync_window>
 800fbfe:	4604      	mov	r4, r0
 800fc00:	e7d2      	b.n	800fba8 <f_mkdir+0x78>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fc02:	2401      	movs	r4, #1
 800fc04:	e7d0      	b.n	800fba8 <f_mkdir+0x78>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
 800fc06:	4631      	mov	r1, r6
 800fc08:	9803      	ldr	r0, [sp, #12]
 800fc0a:	f7fd fea1 	bl	800d950 <dir_clear>
				if (res == FR_OK && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT)) {	/* Create dot entries (FAT only) */
 800fc0e:	4604      	mov	r4, r0
 800fc10:	2800      	cmp	r0, #0
 800fc12:	d1cd      	bne.n	800fbb0 <f_mkdir+0x80>
 800fc14:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fc18:	f898 3000 	ldrb.w	r3, [r8]
 800fc1c:	2b04      	cmp	r3, #4
 800fc1e:	d0c7      	beq.n	800fbb0 <f_mkdir+0x80>
					dir = fs->win;
 800fc20:	f108 0938 	add.w	r9, r8, #56	; 0x38
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800fc24:	220b      	movs	r2, #11
 800fc26:	2120      	movs	r1, #32
 800fc28:	4648      	mov	r0, r9
 800fc2a:	f7fc fdf1 	bl	800c810 <mem_set>
					dir[DIR_Name] = '.';
 800fc2e:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
 800fc32:	f888 b038 	strb.w	fp, [r8, #56]	; 0x38
					dir[DIR_Attr] = AM_DIR;
 800fc36:	2310      	movs	r3, #16
 800fc38:	f888 3043 	strb.w	r3, [r8, #67]	; 0x43
					st_dword(dir + DIR_ModTime, tm);
 800fc3c:	4639      	mov	r1, r7
 800fc3e:	f108 004e 	add.w	r0, r8, #78	; 0x4e
 800fc42:	f7fc fdad 	bl	800c7a0 <st_dword>
					st_clust(fs, dir, dcl);
 800fc46:	4632      	mov	r2, r6
 800fc48:	4649      	mov	r1, r9
 800fc4a:	9803      	ldr	r0, [sp, #12]
 800fc4c:	f7fc fe50 	bl	800c8f0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); /* Create ".." entry */
 800fc50:	f108 0a58 	add.w	sl, r8, #88	; 0x58
 800fc54:	2220      	movs	r2, #32
 800fc56:	4649      	mov	r1, r9
 800fc58:	4650      	mov	r0, sl
 800fc5a:	f7fc fdc9 	bl	800c7f0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800fc5e:	f888 b059 	strb.w	fp, [r8, #89]	; 0x59
					st_clust(fs, dir + SZDIRE, pcl);
 800fc62:	9a06      	ldr	r2, [sp, #24]
 800fc64:	4651      	mov	r1, sl
 800fc66:	9803      	ldr	r0, [sp, #12]
 800fc68:	f7fc fe42 	bl	800c8f0 <st_clust>
					fs->wflag = 1;
 800fc6c:	9b03      	ldr	r3, [sp, #12]
 800fc6e:	2201      	movs	r2, #1
 800fc70:	70da      	strb	r2, [r3, #3]
 800fc72:	e79d      	b.n	800fbb0 <f_mkdir+0x80>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800fc74:	a804      	add	r0, sp, #16
 800fc76:	f7fe fcf3 	bl	800e660 <dir_register>
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	e79a      	b.n	800fbb4 <f_mkdir+0x84>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 800fc7e:	6918      	ldr	r0, [r3, #16]
 800fc80:	4639      	mov	r1, r7
 800fc82:	300c      	adds	r0, #12
 800fc84:	f7fc fd8c 	bl	800c7a0 <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 800fc88:	9b03      	ldr	r3, [sp, #12]
 800fc8a:	6918      	ldr	r0, [r3, #16]
 800fc8c:	4631      	mov	r1, r6
 800fc8e:	3034      	adds	r0, #52	; 0x34
 800fc90:	f7fc fd86 	bl	800c7a0 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 800fc94:	9b03      	ldr	r3, [sp, #12]
 800fc96:	6918      	ldr	r0, [r3, #16]
 800fc98:	9908      	ldr	r1, [sp, #32]
 800fc9a:	3038      	adds	r0, #56	; 0x38
 800fc9c:	f7fc fd80 	bl	800c7a0 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 800fca0:	9b03      	ldr	r3, [sp, #12]
 800fca2:	6918      	ldr	r0, [r3, #16]
 800fca4:	9908      	ldr	r1, [sp, #32]
 800fca6:	3028      	adds	r0, #40	; 0x28
 800fca8:	f7fc fd7a 	bl	800c7a0 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
 800fcac:	9b03      	ldr	r3, [sp, #12]
 800fcae:	691a      	ldr	r2, [r3, #16]
 800fcb0:	2103      	movs	r1, #3
 800fcb2:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 800fcb6:	691b      	ldr	r3, [r3, #16]
 800fcb8:	2210      	movs	r2, #16
 800fcba:	711a      	strb	r2, [r3, #4]
					res = store_xdir(&dj);
 800fcbc:	eb0d 0002 	add.w	r0, sp, r2
 800fcc0:	f7fe f866 	bl	800dd90 <store_xdir>
 800fcc4:	4604      	mov	r4, r0
 800fcc6:	e78e      	b.n	800fbe6 <f_mkdir+0xb6>
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800fcc8:	2200      	movs	r2, #0
 800fcca:	4631      	mov	r1, r6
 800fccc:	a804      	add	r0, sp, #16
 800fcce:	f7fd fd9f 	bl	800d810 <remove_chain>
 800fcd2:	e000      	b.n	800fcd6 <f_mkdir+0x1a6>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800fcd4:	2408      	movs	r4, #8
		FREE_NAMBUF();
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	f7fc fce2 	bl	800c6a0 <ff_memfree>
 800fcdc:	e733      	b.n	800fb46 <f_mkdir+0x16>
		INIT_NAMBUF(fs);
 800fcde:	2411      	movs	r4, #17
 800fce0:	e731      	b.n	800fb46 <f_mkdir+0x16>
 800fce2:	bf00      	nop
 800fce4:	f3af 8000 	nop.w
 800fce8:	f3af 8000 	nop.w
 800fcec:	f3af 8000 	nop.w

0800fcf0 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800fcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf4:	b0bc      	sub	sp, #240	; 0xf0
 800fcf6:	9001      	str	r0, [sp, #4]
 800fcf8:	a83c      	add	r0, sp, #240	; 0xf0
 800fcfa:	f840 1df0 	str.w	r1, [r0, #-240]!
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
 800fcfe:	f7fc ff17 	bl	800cb30 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800fd02:	2202      	movs	r2, #2
 800fd04:	a913      	add	r1, sp, #76	; 0x4c
 800fd06:	a801      	add	r0, sp, #4
 800fd08:	f7fc fffa 	bl	800cd00 <find_volume>
	if (res == FR_OK) {
 800fd0c:	4604      	mov	r4, r0
 800fd0e:	b118      	cbz	r0, 800fd18 <f_rename+0x28>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 800fd10:	4620      	mov	r0, r4
 800fd12:	b03c      	add	sp, #240	; 0xf0
 800fd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		djo.obj.fs = fs;
 800fd18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fd1a:	9328      	str	r3, [sp, #160]	; 0xa0
		INIT_NAMBUF(fs);
 800fd1c:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800fd20:	f7fc fcb6 	bl	800c690 <ff_memalloc>
 800fd24:	4605      	mov	r5, r0
 800fd26:	2800      	cmp	r0, #0
 800fd28:	f000 80de 	beq.w	800fee8 <f_rename+0x1f8>
 800fd2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fd2e:	60d8      	str	r0, [r3, #12]
 800fd30:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800fd34:	611a      	str	r2, [r3, #16]
		res = follow_path(&djo, path_old);		/* Check old object */
 800fd36:	9901      	ldr	r1, [sp, #4]
 800fd38:	a828      	add	r0, sp, #160	; 0xa0
 800fd3a:	f7fe fc29 	bl	800e590 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800fd3e:	4604      	mov	r4, r0
 800fd40:	b928      	cbnz	r0, 800fd4e <f_rename+0x5e>
 800fd42:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 800fd46:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800fd4a:	f040 80c8 	bne.w	800fede <f_rename+0x1ee>
		if (res == FR_OK) {						/* Object to be renamed is found */
 800fd4e:	2c00      	cmp	r4, #0
 800fd50:	f040 80c6 	bne.w	800fee0 <f_rename+0x1f0>
			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
 800fd54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fd56:	781a      	ldrb	r2, [r3, #0]
 800fd58:	2a04      	cmp	r2, #4
 800fd5a:	d017      	beq.n	800fd8c <f_rename+0x9c>
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
 800fd5c:	2220      	movs	r2, #32
 800fd5e:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800fd60:	a803      	add	r0, sp, #12
 800fd62:	f7fc fd45 	bl	800c7f0 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800fd66:	2250      	movs	r2, #80	; 0x50
 800fd68:	a928      	add	r1, sp, #160	; 0xa0
 800fd6a:	eb0d 0002 	add.w	r0, sp, r2
 800fd6e:	f7fc fd3f 	bl	800c7f0 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800fd72:	9900      	ldr	r1, [sp, #0]
 800fd74:	a814      	add	r0, sp, #80	; 0x50
 800fd76:	f7fe fc0b 	bl	800e590 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	d15b      	bne.n	800fe38 <f_rename+0x148>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800fd80:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fd82:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d051      	beq.n	800fe2c <f_rename+0x13c>
 800fd88:	2408      	movs	r4, #8
 800fd8a:	e057      	b.n	800fe3c <f_rename+0x14c>
				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
 800fd8c:	2240      	movs	r2, #64	; 0x40
 800fd8e:	6919      	ldr	r1, [r3, #16]
 800fd90:	a803      	add	r0, sp, #12
 800fd92:	f7fc fd2d 	bl	800c7f0 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof djo);
 800fd96:	2250      	movs	r2, #80	; 0x50
 800fd98:	a928      	add	r1, sp, #160	; 0xa0
 800fd9a:	eb0d 0002 	add.w	r0, sp, r2
 800fd9e:	f7fc fd27 	bl	800c7f0 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800fda2:	9900      	ldr	r1, [sp, #0]
 800fda4:	a814      	add	r0, sp, #80	; 0x50
 800fda6:	f7fe fbf3 	bl	800e590 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800fdaa:	4604      	mov	r4, r0
 800fdac:	b958      	cbnz	r0, 800fdc6 <f_rename+0xd6>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800fdae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fdb0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d001      	beq.n	800fdba <f_rename+0xca>
 800fdb6:	2408      	movs	r4, #8
 800fdb8:	e040      	b.n	800fe3c <f_rename+0x14c>
 800fdba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fdbc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d003      	beq.n	800fdca <f_rename+0xda>
 800fdc2:	2408      	movs	r4, #8
 800fdc4:	e03a      	b.n	800fe3c <f_rename+0x14c>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800fdc6:	2804      	cmp	r0, #4
 800fdc8:	d138      	bne.n	800fe3c <f_rename+0x14c>
					res = dir_register(&djn);			/* Register the new entry */
 800fdca:	a814      	add	r0, sp, #80	; 0x50
 800fdcc:	f7fe fc48 	bl	800e660 <dir_register>
					if (res == FR_OK) {
 800fdd0:	4604      	mov	r4, r0
 800fdd2:	2800      	cmp	r0, #0
 800fdd4:	d132      	bne.n	800fe3c <f_rename+0x14c>
						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
 800fdd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fdd8:	691c      	ldr	r4, [r3, #16]
 800fdda:	f894 8001 	ldrb.w	r8, [r4, #1]
 800fdde:	f894 7023 	ldrb.w	r7, [r4, #35]	; 0x23
						nh = ld_word(fs->dirbuf + XDIR_NameHash);
 800fde2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fde6:	f7fc fc63 	bl	800c6b0 <ld_word>
 800fdea:	4606      	mov	r6, r0
						mem_cpy(fs->dirbuf, buf, SZDIRE * 2);	/* Restore 85+C0 entry */
 800fdec:	2240      	movs	r2, #64	; 0x40
 800fdee:	a903      	add	r1, sp, #12
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	f7fc fcfd 	bl	800c7f0 <mem_cpy>
						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
 800fdf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fdf8:	691b      	ldr	r3, [r3, #16]
 800fdfa:	f883 8001 	strb.w	r8, [r3, #1]
 800fdfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe00:	691a      	ldr	r2, [r3, #16]
 800fe02:	f882 7023 	strb.w	r7, [r2, #35]	; 0x23
						st_word(fs->dirbuf + XDIR_NameHash, nh);
 800fe06:	6918      	ldr	r0, [r3, #16]
 800fe08:	4631      	mov	r1, r6
 800fe0a:	3024      	adds	r0, #36	; 0x24
 800fe0c:	f7fc fcc0 	bl	800c790 <st_word>
						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 800fe10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe12:	691a      	ldr	r2, [r3, #16]
 800fe14:	7913      	ldrb	r3, [r2, #4]
 800fe16:	f013 0f10 	tst.w	r3, #16
 800fe1a:	d102      	bne.n	800fe22 <f_rename+0x132>
 800fe1c:	f043 0320 	orr.w	r3, r3, #32
 800fe20:	7113      	strb	r3, [r2, #4]
						res = store_xdir(&djn);
 800fe22:	a814      	add	r0, sp, #80	; 0x50
 800fe24:	f7fd ffb4 	bl	800dd90 <store_xdir>
 800fe28:	4604      	mov	r4, r0
 800fe2a:	e007      	b.n	800fe3c <f_rename+0x14c>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800fe2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fe2e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d010      	beq.n	800fe56 <f_rename+0x166>
 800fe34:	2408      	movs	r4, #8
 800fe36:	e001      	b.n	800fe3c <f_rename+0x14c>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800fe38:	2804      	cmp	r0, #4
 800fe3a:	d00c      	beq.n	800fe56 <f_rename+0x166>
			if (res == FR_OK) {
 800fe3c:	2c00      	cmp	r4, #0
 800fe3e:	d14f      	bne.n	800fee0 <f_rename+0x1f0>
				res = dir_remove(&djo);		/* Remove old entry */
 800fe40:	a828      	add	r0, sp, #160	; 0xa0
 800fe42:	f7fd ffd5 	bl	800ddf0 <dir_remove>
				if (res == FR_OK) {
 800fe46:	4604      	mov	r4, r0
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	d149      	bne.n	800fee0 <f_rename+0x1f0>
					res = sync_fs(fs);
 800fe4c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800fe4e:	f7fe fd0f 	bl	800e870 <sync_fs>
 800fe52:	4604      	mov	r4, r0
 800fe54:	e044      	b.n	800fee0 <f_rename+0x1f0>
					res = dir_register(&djn);			/* Register the new entry */
 800fe56:	a814      	add	r0, sp, #80	; 0x50
 800fe58:	f7fe fc02 	bl	800e660 <dir_register>
					if (res == FR_OK) {
 800fe5c:	4604      	mov	r4, r0
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	d1ec      	bne.n	800fe3c <f_rename+0x14c>
						dir = djn.dir;					/* Copy directory entry of the object except name */
 800fe62:	9e23      	ldr	r6, [sp, #140]	; 0x8c
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
 800fe64:	2213      	movs	r2, #19
 800fe66:	f10d 0119 	add.w	r1, sp, #25
 800fe6a:	f106 000d 	add.w	r0, r6, #13
 800fe6e:	f7fc fcbf 	bl	800c7f0 <mem_cpy>
						dir[DIR_Attr] = buf[DIR_Attr];
 800fe72:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800fe76:	72f3      	strb	r3, [r6, #11]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 800fe78:	f013 0f10 	tst.w	r3, #16
 800fe7c:	d102      	bne.n	800fe84 <f_rename+0x194>
 800fe7e:	f043 0320 	orr.w	r3, r3, #32
 800fe82:	72f3      	strb	r3, [r6, #11]
						fs->wflag = 1;
 800fe84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe86:	2201      	movs	r2, #1
 800fe88:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800fe8a:	7af3      	ldrb	r3, [r6, #11]
 800fe8c:	f013 0f10 	tst.w	r3, #16
 800fe90:	d0d4      	beq.n	800fe3c <f_rename+0x14c>
 800fe92:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800fe94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d0d0      	beq.n	800fe3c <f_rename+0x14c>
							dw = clst2sect(fs, ld_clust(fs, dir));
 800fe9a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800fe9c:	4631      	mov	r1, r6
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f7fc fd0e 	bl	800c8c0 <ld_clust>
 800fea4:	4601      	mov	r1, r0
 800fea6:	4620      	mov	r0, r4
 800fea8:	f7fc fce2 	bl	800c870 <clst2sect>
							if (dw == 0) {
 800feac:	4601      	mov	r1, r0
 800feae:	b908      	cbnz	r0, 800feb4 <f_rename+0x1c4>
								res = FR_INT_ERR;
 800feb0:	2402      	movs	r4, #2
 800feb2:	e015      	b.n	800fee0 <f_rename+0x1f0>
								res = move_window(fs, dw);
 800feb4:	4620      	mov	r0, r4
 800feb6:	f7fc febb 	bl	800cc30 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800feba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800febc:	f103 0158 	add.w	r1, r3, #88	; 0x58
								if (res == FR_OK && dir[1] == '.') {
 800fec0:	4604      	mov	r4, r0
 800fec2:	2800      	cmp	r0, #0
 800fec4:	d1ba      	bne.n	800fe3c <f_rename+0x14c>
 800fec6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 800feca:	2a2e      	cmp	r2, #46	; 0x2e
 800fecc:	d1b6      	bne.n	800fe3c <f_rename+0x14c>
									st_clust(fs, dir, djn.obj.sclust);
 800fece:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7fc fd0d 	bl	800c8f0 <st_clust>
									fs->wflag = 1;
 800fed6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fed8:	2201      	movs	r2, #1
 800feda:	70da      	strb	r2, [r3, #3]
 800fedc:	e7ae      	b.n	800fe3c <f_rename+0x14c>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800fede:	2406      	movs	r4, #6
		FREE_NAMBUF();
 800fee0:	4628      	mov	r0, r5
 800fee2:	f7fc fbdd 	bl	800c6a0 <ff_memfree>
 800fee6:	e713      	b.n	800fd10 <f_rename+0x20>
		INIT_NAMBUF(fs);
 800fee8:	2411      	movs	r4, #17
 800feea:	e711      	b.n	800fd10 <f_rename+0x20>
 800feec:	0000      	movs	r0, r0
	...

0800fef0 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII char */
 800fef0:	287f      	cmp	r0, #127	; 0x7f
 800fef2:	d911      	bls.n	800ff18 <ff_uni2oem+0x28>
		c = uni;

	} else {			/* Non-ASCII char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 800fef4:	f240 3352 	movw	r3, #850	; 0x352
 800fef8:	4299      	cmp	r1, r3
 800fefa:	d00e      	beq.n	800ff1a <ff_uni2oem+0x2a>
	WCHAR c = 0;
 800fefc:	2000      	movs	r0, #0
 800fefe:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 800ff00:	3301      	adds	r3, #1
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	2b7f      	cmp	r3, #127	; 0x7f
 800ff06:	d804      	bhi.n	800ff12 <ff_uni2oem+0x22>
 800ff08:	4a05      	ldr	r2, [pc, #20]	; (800ff20 <ff_uni2oem+0x30>)
 800ff0a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ff0e:	4282      	cmp	r2, r0
 800ff10:	d1f6      	bne.n	800ff00 <ff_uni2oem+0x10>
			c = (c + 0x80) & 0xFF;
 800ff12:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800ff16:	b2c0      	uxtb	r0, r0
		}
	}
	return c;
}
 800ff18:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	e7f2      	b.n	800ff04 <ff_uni2oem+0x14>
 800ff1e:	bf00      	nop
 800ff20:	08015768 	.word	0x08015768
 800ff24:	f3af 8000 	nop.w
 800ff28:	f3af 8000 	nop.w
 800ff2c:	f3af 8000 	nop.w

0800ff30 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII char */
 800ff30:	287f      	cmp	r0, #127	; 0x7f
 800ff32:	d90f      	bls.n	800ff54 <ff_oem2uni+0x24>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 800ff34:	f240 3352 	movw	r3, #850	; 0x352
 800ff38:	4299      	cmp	r1, r3
 800ff3a:	d001      	beq.n	800ff40 <ff_oem2uni+0x10>
	WCHAR c = 0;
 800ff3c:	2000      	movs	r0, #0
 800ff3e:	4770      	bx	lr
			if (oem < 0x100) c = p[oem - 0x80];
 800ff40:	28ff      	cmp	r0, #255	; 0xff
 800ff42:	d806      	bhi.n	800ff52 <ff_oem2uni+0x22>
 800ff44:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ff48:	3880      	subs	r0, #128	; 0x80
 800ff4a:	4b03      	ldr	r3, [pc, #12]	; (800ff58 <ff_oem2uni+0x28>)
 800ff4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800ff50:	4770      	bx	lr
	WCHAR c = 0;
 800ff52:	2000      	movs	r0, #0
		}
	}
	return c;
}
 800ff54:	4770      	bx	lr
 800ff56:	bf00      	nop
 800ff58:	08015768 	.word	0x08015768
 800ff5c:	f3af 8000 	nop.w

0800ff60 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = uni < 0x1000 ? cvt1 : cvt2;
 800ff60:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800ff64:	d207      	bcs.n	800ff76 <ff_wtoupper+0x16>
 800ff66:	4b23      	ldr	r3, [pc, #140]	; (800fff4 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 800ff68:	881a      	ldrh	r2, [r3, #0]
		if (!bc || uni < bc) break;
 800ff6a:	2a00      	cmp	r2, #0
 800ff6c:	d040      	beq.n	800fff0 <ff_wtoupper+0x90>
 800ff6e:	4290      	cmp	r0, r2
 800ff70:	d33e      	bcc.n	800fff0 <ff_wtoupper+0x90>
{
 800ff72:	b4f0      	push	{r4, r5, r6, r7}
 800ff74:	e006      	b.n	800ff84 <ff_wtoupper+0x24>
	p = uni < 0x1000 ? cvt1 : cvt2;
 800ff76:	4b20      	ldr	r3, [pc, #128]	; (800fff8 <ff_wtoupper+0x98>)
 800ff78:	e7f6      	b.n	800ff68 <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ff7a:	462b      	mov	r3, r5
		bc = *p++;								/* Get block base */
 800ff7c:	881a      	ldrh	r2, [r3, #0]
		if (!bc || uni < bc) break;
 800ff7e:	b1ca      	cbz	r2, 800ffb4 <ff_wtoupper+0x54>
 800ff80:	4290      	cmp	r0, r2
 800ff82:	d317      	bcc.n	800ffb4 <ff_wtoupper+0x54>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ff84:	1d1d      	adds	r5, r3, #4
 800ff86:	885b      	ldrh	r3, [r3, #2]
 800ff88:	0a19      	lsrs	r1, r3, #8
 800ff8a:	b2db      	uxtb	r3, r3
		if (uni < bc + nc) {	/* In the block? */
 800ff8c:	189c      	adds	r4, r3, r2
 800ff8e:	42a0      	cmp	r0, r4
 800ff90:	db04      	blt.n	800ff9c <ff_wtoupper+0x3c>
			case 7: uni -= 80; break;				/* Shift -80 */
			case 8:	uni -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800ff92:	2900      	cmp	r1, #0
 800ff94:	d1f1      	bne.n	800ff7a <ff_wtoupper+0x1a>
 800ff96:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ff9a:	e7ef      	b.n	800ff7c <ff_wtoupper+0x1c>
			switch (cmd) {
 800ff9c:	2908      	cmp	r1, #8
 800ff9e:	d809      	bhi.n	800ffb4 <ff_wtoupper+0x54>
 800ffa0:	e8df f001 	tbb	[pc, r1]
 800ffa4:	13100a05 	.word	0x13100a05
 800ffa8:	1f1c1916 	.word	0x1f1c1916
 800ffac:	22          	.byte	0x22
 800ffad:	00          	.byte	0x00
			case 0:	uni = p[uni - bc]; break;		/* Table conversion */
 800ffae:	1a86      	subs	r6, r0, r2
 800ffb0:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
	}

	return uni;
}
 800ffb4:	bcf0      	pop	{r4, r5, r6, r7}
 800ffb6:	4770      	bx	lr
			case 1:	uni -= (uni - bc) & 1; break;	/* Case pairs */
 800ffb8:	1a82      	subs	r2, r0, r2
 800ffba:	f002 0301 	and.w	r3, r2, #1
 800ffbe:	1ac0      	subs	r0, r0, r3
 800ffc0:	b280      	uxth	r0, r0
 800ffc2:	e7f7      	b.n	800ffb4 <ff_wtoupper+0x54>
			case 2: uni -= 16; break;				/* Shift -16 */
 800ffc4:	3810      	subs	r0, #16
 800ffc6:	b280      	uxth	r0, r0
 800ffc8:	e7f4      	b.n	800ffb4 <ff_wtoupper+0x54>
			case 3:	uni -= 32; break;				/* Shift -32 */
 800ffca:	3820      	subs	r0, #32
 800ffcc:	b280      	uxth	r0, r0
 800ffce:	e7f1      	b.n	800ffb4 <ff_wtoupper+0x54>
			case 4:	uni -= 48; break;				/* Shift -48 */
 800ffd0:	3830      	subs	r0, #48	; 0x30
 800ffd2:	b280      	uxth	r0, r0
 800ffd4:	e7ee      	b.n	800ffb4 <ff_wtoupper+0x54>
			case 5:	uni -= 26; break;				/* Shift -26 */
 800ffd6:	381a      	subs	r0, #26
 800ffd8:	b280      	uxth	r0, r0
 800ffda:	e7eb      	b.n	800ffb4 <ff_wtoupper+0x54>
			case 6:	uni += 8; break;				/* Shift +8 */
 800ffdc:	3008      	adds	r0, #8
 800ffde:	b280      	uxth	r0, r0
 800ffe0:	e7e8      	b.n	800ffb4 <ff_wtoupper+0x54>
			case 7: uni -= 80; break;				/* Shift -80 */
 800ffe2:	3850      	subs	r0, #80	; 0x50
 800ffe4:	b280      	uxth	r0, r0
 800ffe6:	e7e5      	b.n	800ffb4 <ff_wtoupper+0x54>
			case 8:	uni -= 0x1C60; break;			/* Shift -0x1C60 */
 800ffe8:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800ffec:	b280      	uxth	r0, r0
 800ffee:	e7e1      	b.n	800ffb4 <ff_wtoupper+0x54>
}
 800fff0:	4770      	bx	lr
 800fff2:	bf00      	nop
 800fff4:	08015924 	.word	0x08015924
 800fff8:	08015868 	.word	0x08015868
 800fffc:	00000000 	.word	0x00000000

08010000 <_read_r>:
  return len;
#else
  (void)file;
  (void)ptr;
  (void)len;
  __errno_r(r) = EINVAL;
 8010000:	2316      	movs	r3, #22
 8010002:	6003      	str	r3, [r0, #0]
  return -1;
#endif
}
 8010004:	f04f 30ff 	mov.w	r0, #4294967295
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	f3af 8000 	nop.w

08010010 <_lseek_r>:
  (void)file;
  (void)ptr;
  (void)dir;

  return 0;
}
 8010010:	2000      	movs	r0, #0
 8010012:	4770      	bx	lr
 8010014:	f3af 8000 	nop.w
 8010018:	f3af 8000 	nop.w
 801001c:	f3af 8000 	nop.w

08010020 <_write_r>:
    return -1;
  }
  sdWrite(&STDOUT_SD, (uint8_t *)ptr, (size_t)len);
#endif
  return len;
}
 8010020:	4618      	mov	r0, r3
 8010022:	4770      	bx	lr
 8010024:	f3af 8000 	nop.w
 8010028:	f3af 8000 	nop.w
 801002c:	f3af 8000 	nop.w

08010030 <_close_r>:
{
  (void)r;
  (void)file;

  return 0;
}
 8010030:	2000      	movs	r0, #0
 8010032:	4770      	bx	lr
 8010034:	f3af 8000 	nop.w
 8010038:	f3af 8000 	nop.w
 801003c:	f3af 8000 	nop.w

08010040 <_sbrk_r>:

/***************************************************************************/

__attribute__((used))
caddr_t _sbrk_r(struct _reent *r, int incr)
{
 8010040:	b538      	push	{r3, r4, r5, lr}
 8010042:	4605      	mov	r5, r0
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr >= 0);
 8010044:	1e0c      	subs	r4, r1, #0
 8010046:	db08      	blt.n	801005a <_sbrk_r+0x1a>
 *
 * @api
 */
static inline void *chCoreAlloc(size_t size) {

  return chCoreAllocAlignedWithOffset(size, PORT_NATURAL_ALIGN, 0U);
 8010048:	2200      	movs	r2, #0
 801004a:	2104      	movs	r1, #4
 801004c:	4620      	mov	r0, r4
 801004e:	f7fa fdcf 	bl	800abf0 <chCoreAllocAlignedWithOffset>

  p = chCoreAlloc((size_t)incr);
  if (p == NULL) {
 8010052:	4603      	mov	r3, r0
 8010054:	b128      	cbz	r0, 8010062 <_sbrk_r+0x22>
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 8010056:	4618      	mov	r0, r3
 8010058:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(incr >= 0);
 801005a:	4804      	ldr	r0, [pc, #16]	; (801006c <_sbrk_r+0x2c>)
 801005c:	f7f7 fb08 	bl	8007670 <chSysHalt>
 8010060:	e7f2      	b.n	8010048 <_sbrk_r+0x8>
    __errno_r(r) = ENOMEM;
 8010062:	230c      	movs	r3, #12
 8010064:	602b      	str	r3, [r5, #0]
    return (caddr_t)-1;
 8010066:	f04f 33ff 	mov.w	r3, #4294967295
 801006a:	e7f4      	b.n	8010056 <_sbrk_r+0x16>
 801006c:	08015b18 	.word	0x08015b18

08010070 <_fstat_r>:

/***************************************************************************/

__attribute__((used))
int _fstat_r(struct _reent *r, int file, struct stat * st)
{
 8010070:	b510      	push	{r4, lr}
 8010072:	4614      	mov	r4, r2
  (void)r;
  (void)file;

  memset(st, 0, sizeof(*st));
 8010074:	2258      	movs	r2, #88	; 0x58
 8010076:	2100      	movs	r1, #0
 8010078:	4620      	mov	r0, r4
 801007a:	f003 fe4f 	bl	8013d1c <memset>
  st->st_mode = S_IFCHR;
 801007e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010082:	6063      	str	r3, [r4, #4]
  return 0;
}
 8010084:	2000      	movs	r0, #0
 8010086:	bd10      	pop	{r4, pc}
 8010088:	f3af 8000 	nop.w
 801008c:	f3af 8000 	nop.w

08010090 <_isatty_r>:
{
  (void)r;
  (void)fd;

  return 1;
}
 8010090:	2001      	movs	r0, #1
 8010092:	4770      	bx	lr
	...

080100a0 <gpt5cb>:
static void gpt5cb(GPTDriver *gptp) {

 (void)gptp;
// uint32_t cnt = GPTD5.tim->CNT;
 //s_index_flag = true;
 glbl_s_index++;
 80100a0:	4a02      	ldr	r2, [pc, #8]	; (80100ac <gpt5cb+0xc>)
 80100a2:	8813      	ldrh	r3, [r2, #0]
 80100a4:	3301      	adds	r3, #1
 80100a6:	b29b      	uxth	r3, r3
 80100a8:	8013      	strh	r3, [r2, #0]
 //glbl_s_index = glbl_last_s_index+1;
}
 80100aa:	4770      	bx	lr
 80100ac:	20001a24 	.word	0x20001a24

080100b0 <chSysUnlock>:
static inline void chSysUnlock(void) {
 80100b0:	b508      	push	{r3, lr}
  _dbg_check_unlock();
 80100b2:	f7f7 fc85 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80100b6:	f7f8 ff73 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80100ba:	4b08      	ldr	r3, [pc, #32]	; (80100dc <chSysUnlock+0x2c>)
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d004      	beq.n	80100cc <chSysUnlock+0x1c>
 80100c2:	699b      	ldr	r3, [r3, #24]
 80100c4:	6899      	ldr	r1, [r3, #8]
 80100c6:	6893      	ldr	r3, [r2, #8]
 80100c8:	4299      	cmp	r1, r3
 80100ca:	d303      	bcc.n	80100d4 <chSysUnlock+0x24>
 80100cc:	2300      	movs	r3, #0
 80100ce:	f383 8811 	msr	BASEPRI, r3
}
 80100d2:	bd08      	pop	{r3, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80100d4:	4802      	ldr	r0, [pc, #8]	; (80100e0 <chSysUnlock+0x30>)
 80100d6:	f7f7 facb 	bl	8007670 <chSysHalt>
 80100da:	e7f7      	b.n	80100cc <chSysUnlock+0x1c>
 80100dc:	20004f68 	.word	0x20004f68
 80100e0:	08015b20 	.word	0x08015b20
 80100e4:	f3af 8000 	nop.w
 80100e8:	f3af 8000 	nop.w
 80100ec:	f3af 8000 	nop.w

080100f0 <pps_thread>:

/*
 * Test PPS timing thread
 */
static THD_WORKING_AREA(wa_pps_thread, 512);
static THD_FUNCTION(pps_thread, arg) {
 80100f0:	b530      	push	{r4, r5, lr}
 80100f2:	b087      	sub	sp, #28
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80100f4:	4b35      	ldr	r3, [pc, #212]	; (80101cc <pps_thread+0xdc>)
 80100f6:	699b      	ldr	r3, [r3, #24]
 80100f8:	4a35      	ldr	r2, [pc, #212]	; (80101d0 <pps_thread+0xe0>)
 80100fa:	619a      	str	r2, [r3, #24]

  (void)arg;
  chRegSetThreadName("pps");

  gpt_last_target = TIM5_CLK;
 80100fc:	4d35      	ldr	r5, [pc, #212]	; (80101d4 <pps_thread+0xe4>)
 80100fe:	4b36      	ldr	r3, [pc, #216]	; (80101d8 <pps_thread+0xe8>)
 8010100:	601d      	str	r5, [r3, #0]
  gptStart(&GPTD5, &gpt5cfg);   //periodic timer to trigger Sindex events
 8010102:	4c36      	ldr	r4, [pc, #216]	; (80101dc <pps_thread+0xec>)
 8010104:	4936      	ldr	r1, [pc, #216]	; (80101e0 <pps_thread+0xf0>)
 8010106:	4620      	mov	r0, r4
 8010108:	f7f1 fd52 	bl	8001bb0 <gptStart>
  gptStartContinuous(&GPTD5, gpt_new_target);
 801010c:	4b35      	ldr	r3, [pc, #212]	; (80101e4 <pps_thread+0xf4>)
 801010e:	6859      	ldr	r1, [r3, #4]
 8010110:	4620      	mov	r0, r4
 8010112:	f7f1 fe1d 	bl	8001d50 <gptStartContinuous>
  GPTD5.tim->CR1 &= ~TIM_CR1_ARPE; //clear the auto reload preload enable bit so that updates to ARR are immediate
 8010116:	68e2      	ldr	r2, [r4, #12]
 8010118:	6813      	ldr	r3, [r2, #0]
 801011a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801011e:	6013      	str	r3, [r2, #0]
  //GPTD5.tim->CR1 &= ~TIM_CR1_URS;    //clear the update request source so that UG bit triggers an update event
  gpt_started = true;
 8010120:	2401      	movs	r4, #1
 8010122:	4b31      	ldr	r3, [pc, #196]	; (80101e8 <pps_thread+0xf8>)
 8010124:	701c      	strb	r4, [r3, #0]
 8010126:	2320      	movs	r3, #32
 8010128:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 801012c:	f7f8 ff30 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8010130:	f7f7 fc2e 	bl	8007990 <_dbg_check_lock>
  palEnableLineEvent( PPS_LINE, PAL_EVENT_MODE_RISING_EDGE );
 8010134:	4622      	mov	r2, r4
 8010136:	2100      	movs	r1, #0
 8010138:	482c      	ldr	r0, [pc, #176]	; (80101ec <pps_thread+0xfc>)
 801013a:	f7f4 ff79 	bl	8005030 <_pal_lld_enablepadevent>
  chSysUnlock();
 801013e:	f7ff ffb7 	bl	80100b0 <chSysUnlock>
  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8010142:	f04f 33ff 	mov.w	r3, #4294967295
 8010146:	2202      	movs	r2, #2
 8010148:	a901      	add	r1, sp, #4
 801014a:	4829      	ldr	r0, [pc, #164]	; (80101f0 <pps_thread+0x100>)
 801014c:	f7f9 fd90 	bl	8009c70 <chEvtRegisterMaskWithFlags>

  //palSetPadCallback(GPIOE, 0U, pps_cb, NULL);
  //register an event listener on the pps event
  event_listener_t ppsListener;
  chEvtRegister(&evtPPS, &ppsListener, EVENT_MASK(0));
  chprintf((BaseSequentialStream*)&SD6, "\npps timing thread\n");
 8010150:	4c28      	ldr	r4, [pc, #160]	; (80101f4 <pps_thread+0x104>)
 8010152:	4929      	ldr	r1, [pc, #164]	; (80101f8 <pps_thread+0x108>)
 8010154:	4620      	mov	r0, r4
 8010156:	f7fb fe8b 	bl	800be70 <chprintf>
  chprintf((BaseSequentialStream*)&SD6, "\n\r GPT clk is %d\n", TIM5_CLK);
 801015a:	462a      	mov	r2, r5
 801015c:	4927      	ldr	r1, [pc, #156]	; (80101fc <pps_thread+0x10c>)
 801015e:	4620      	mov	r0, r4
 8010160:	f7fb fe86 	bl	800be70 <chprintf>


  eventflags_t flags = chEvtGetAndClearFlags(&ppsListener);
 8010164:	a801      	add	r0, sp, #4
 8010166:	f7f9 fe53 	bl	8009e10 <chEvtGetAndClearFlags>
 801016a:	e008      	b.n	801017e <pps_thread+0x8e>
      }
      */

    }

    palSetLine(STATUS_LED_LINE);
 801016c:	4c1f      	ldr	r4, [pc, #124]	; (80101ec <pps_thread+0xfc>)
 801016e:	2508      	movs	r5, #8
 8010170:	8325      	strh	r5, [r4, #24]
    //chprintf((BaseSequentialStream*)&SD6, "\n\rPPS: gpt_new_target: %d\n", gpt_new_target);
    //chprintf((BaseSequentialStream*)&SD6, "PPS thread PPS\n\r");
    chThdSleepMilliseconds(100);
 8010172:	f242 7010 	movw	r0, #10000	; 0x2710
 8010176:	2100      	movs	r1, #0
 8010178:	f7f8 fc82 	bl	8008a80 <chThdSleep>
    palClearLine(STATUS_LED_LINE);
 801017c:	8365      	strh	r5, [r4, #26]
    if( chEvtWaitAnyTimeout(ALL_EVENTS, chTimeMS2I( 1500 ) ) )
 801017e:	4a20      	ldr	r2, [pc, #128]	; (8010200 <pps_thread+0x110>)
 8010180:	2300      	movs	r3, #0
 8010182:	f04f 30ff 	mov.w	r0, #4294967295
 8010186:	f7fa f863 	bl	800a250 <chEvtWaitAnyTimeout>
 801018a:	2800      	cmp	r0, #0
 801018c:	d0ee      	beq.n	801016c <pps_thread+0x7c>
      chprintf((BaseSequentialStream*)&SD6, "\n\rGPT cur target: %d\n", gptGetIntervalX(&GPTD5));
 801018e:	4b13      	ldr	r3, [pc, #76]	; (80101dc <pps_thread+0xec>)
 8010190:	68db      	ldr	r3, [r3, #12]
 8010192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010194:	4c17      	ldr	r4, [pc, #92]	; (80101f4 <pps_thread+0x104>)
 8010196:	3201      	adds	r2, #1
 8010198:	491a      	ldr	r1, [pc, #104]	; (8010204 <pps_thread+0x114>)
 801019a:	4620      	mov	r0, r4
 801019c:	f7fb fe68 	bl	800be70 <chprintf>
      chprintf((BaseSequentialStream*)&SD6, "\n\rGPT last target: %d\n", gpt_last_target);
 80101a0:	4b0d      	ldr	r3, [pc, #52]	; (80101d8 <pps_thread+0xe8>)
 80101a2:	681a      	ldr	r2, [r3, #0]
 80101a4:	4918      	ldr	r1, [pc, #96]	; (8010208 <pps_thread+0x118>)
 80101a6:	4620      	mov	r0, r4
 80101a8:	f7fb fe62 	bl	800be70 <chprintf>
      chprintf((BaseSequentialStream*)&SD6, "\n\rGPT last cnt: %d\n", gpt_cnt);
 80101ac:	4b17      	ldr	r3, [pc, #92]	; (801020c <pps_thread+0x11c>)
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	4917      	ldr	r1, [pc, #92]	; (8010210 <pps_thread+0x120>)
 80101b2:	4620      	mov	r0, r4
 80101b4:	f7fb fe5c 	bl	800be70 <chprintf>
      chprintf((BaseSequentialStream*)&SD6, "\n\rGPT last error: %d\n", gpt_error);
 80101b8:	4b0b      	ldr	r3, [pc, #44]	; (80101e8 <pps_thread+0xf8>)
 80101ba:	685a      	ldr	r2, [r3, #4]
 80101bc:	4915      	ldr	r1, [pc, #84]	; (8010214 <pps_thread+0x124>)
 80101be:	4620      	mov	r0, r4
 80101c0:	f7fb fe56 	bl	800be70 <chprintf>
      flags = chEvtGetAndClearFlags(&ppsListener); //clear flags
 80101c4:	a801      	add	r0, sp, #4
 80101c6:	f7f9 fe23 	bl	8009e10 <chEvtGetAndClearFlags>
 80101ca:	e7cf      	b.n	801016c <pps_thread+0x7c>
 80101cc:	20004f68 	.word	0x20004f68
 80101d0:	08016050 	.word	0x08016050
 80101d4:	0501bd00 	.word	0x0501bd00
 80101d8:	2000f52c 	.word	0x2000f52c
 80101dc:	20004748 	.word	0x20004748
 80101e0:	08015b2c 	.word	0x08015b2c
 80101e4:	20001a24 	.word	0x20001a24
 80101e8:	200022c8 	.word	0x200022c8
 80101ec:	40021000 	.word	0x40021000
 80101f0:	2000f910 	.word	0x2000f910
 80101f4:	20004c10 	.word	0x20004c10
 80101f8:	08016054 	.word	0x08016054
 80101fc:	08016068 	.word	0x08016068
 8010200:	000249f0 	.word	0x000249f0
 8010204:	0801607c 	.word	0x0801607c
 8010208:	08016094 	.word	0x08016094
 801020c:	2000fb38 	.word	0x2000fb38
 8010210:	080160ac 	.word	0x080160ac
 8010214:	080160c0 	.word	0x080160c0
 8010218:	f3af 8000 	nop.w
 801021c:	f3af 8000 	nop.w

08010220 <gps_thread>:
static THD_FUNCTION(gps_thread, arg) {
 8010220:	b510      	push	{r4, lr}
 8010222:	b096      	sub	sp, #88	; 0x58
 8010224:	4b5a      	ldr	r3, [pc, #360]	; (8010390 <gps_thread+0x170>)
 8010226:	699b      	ldr	r3, [r3, #24]
 8010228:	4a5a      	ldr	r2, [pc, #360]	; (8010394 <gps_thread+0x174>)
 801022a:	619a      	str	r2, [r3, #24]
   palSetPadMode(GPIOD, 8, PAL_MODE_ALTERNATE(7));
 801022c:	4c5a      	ldr	r4, [pc, #360]	; (8010398 <gps_thread+0x178>)
 801022e:	f240 3282 	movw	r2, #898	; 0x382
 8010232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010236:	4620      	mov	r0, r4
 8010238:	f7f4 fe82 	bl	8004f40 <_pal_lld_setgroupmode>
   palSetPadMode(GPIOD, 9, PAL_MODE_ALTERNATE(7));
 801023c:	f240 3282 	movw	r2, #898	; 0x382
 8010240:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010244:	4620      	mov	r0, r4
 8010246:	f7f4 fe7b 	bl	8004f40 <_pal_lld_setgroupmode>
   sdStart(&SD3, &gpsSerialcfg);
 801024a:	4c54      	ldr	r4, [pc, #336]	; (801039c <gps_thread+0x17c>)
 801024c:	4954      	ldr	r1, [pc, #336]	; (80103a0 <gps_thread+0x180>)
 801024e:	4620      	mov	r0, r4
 8010250:	f7f2 ff8e 	bl	8003170 <sdStart>
   gps_init();
 8010254:	f002 fb8c 	bl	8012970 <gps_init>
 8010258:	f04f 33ff 	mov.w	r3, #4294967295
 801025c:	2202      	movs	r2, #2
 801025e:	a90f      	add	r1, sp, #60	; 0x3c
 8010260:	1d20      	adds	r0, r4, #4
 8010262:	f7f9 fd05 	bl	8009c70 <chEvtRegisterMaskWithFlags>
 8010266:	f04f 33ff 	mov.w	r3, #4294967295
 801026a:	2202      	movs	r2, #2
 801026c:	a90a      	add	r1, sp, #40	; 0x28
 801026e:	484d      	ldr	r0, [pc, #308]	; (80103a4 <gps_thread+0x184>)
 8010270:	f7f9 fcfe 	bl	8009c70 <chEvtRegisterMaskWithFlags>
      chEvtWaitOne(EVENT_MASK(1));
 8010274:	2002      	movs	r0, #2
 8010276:	f7f9 fed3 	bl	800a020 <chEvtWaitOne>
      flags = chEvtGetAndClearFlags(&elGPSdata);
 801027a:	a80f      	add	r0, sp, #60	; 0x3c
 801027c:	f7f9 fdc8 	bl	8009e10 <chEvtGetAndClearFlags>
      if (flags & CHN_INPUT_AVAILABLE)
 8010280:	f010 0f04 	tst.w	r0, #4
 8010284:	d176      	bne.n	8010374 <gps_thread+0x154>
      flags = chEvtGetAndClearFlags(&gpsListener);
 8010286:	a80a      	add	r0, sp, #40	; 0x28
 8010288:	f7f9 fdc2 	bl	8009e10 <chEvtGetAndClearFlags>
      if( flags & GPS_NEW_RMC )
 801028c:	f010 0f01 	tst.w	r0, #1
 8010290:	d0f0      	beq.n	8010274 <gps_thread+0x54>
        if( gps_data.fix_status == 'A')
 8010292:	4b45      	ldr	r3, [pc, #276]	; (80103a8 <gps_thread+0x188>)
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	2b41      	cmp	r3, #65	; 0x41
 8010298:	d1ec      	bne.n	8010274 <gps_thread+0x54>
          tmpDateTime.year = (2000-1980)+( gps_data.utc_date[4]-'0' )*10 + ( gps_data.utc_date[5]-'0' ); //years since 1980
 801029a:	4b43      	ldr	r3, [pc, #268]	; (80103a8 <gps_thread+0x188>)
 801029c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80102a0:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80102a4:	3a30      	subs	r2, #48	; 0x30
 80102a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80102aa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80102ae:	3a1c      	subs	r2, #28
 80102b0:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
          tmpDateTime.month = ( gps_data.utc_date[2]-'0' )*10 + ( gps_data.utc_date[3]-'0' );
 80102b4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80102b8:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80102bc:	3a30      	subs	r2, #48	; 0x30
 80102be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80102c2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80102c6:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
 80102ca:	f362 0003 	bfi	r0, r2, #0, #4
          tmpDateTime.day = ( gps_data.utc_date[0]-'0' )*10 + ( gps_data.utc_date[1]-'0' );
 80102ce:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80102d2:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 80102d6:	3a30      	subs	r2, #48	; 0x30
 80102d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80102dc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80102e0:	3a30      	subs	r2, #48	; 0x30
 80102e2:	f89d 1052 	ldrb.w	r1, [sp, #82]	; 0x52
 80102e6:	f362 0104 	bfi	r1, r2, #0, #5
 80102ea:	f88d 1052 	strb.w	r1, [sp, #82]	; 0x52
          tmp_second = ( gps_data.utc_time[4]-'0' )*10 + ( gps_data.utc_time[5]-'0' );
 80102ee:	f893 4025 	ldrb.w	r4, [r3, #37]	; 0x25
 80102f2:	3c30      	subs	r4, #48	; 0x30
 80102f4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80102f8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80102fc:	3a30      	subs	r2, #48	; 0x30
 80102fe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          tmp_minute = ( gps_data.utc_time[2]-'0' )*10 + ( gps_data.utc_time[3]-'0' );
 8010302:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8010306:	3a30      	subs	r2, #48	; 0x30
 8010308:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801030c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8010310:	3a30      	subs	r2, #48	; 0x30
 8010312:	eb02 0241 	add.w	r2, r2, r1, lsl #1
          tmp_hour = ( gps_data.utc_time[0]-'0' )*10 + ( gps_data.utc_time[1]-'0' );
 8010316:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 801031a:	3930      	subs	r1, #48	; 0x30
 801031c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010320:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010324:	3b30      	subs	r3, #48	; 0x30
 8010326:	eb03 0341 	add.w	r3, r3, r1, lsl #1
          tmpDateTime.millisecond = 1000*((tmp_hour)*3600 + tmp_minute*60 + tmp_second); //millisecond since midnight
 801032a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 801032e:	0092      	lsls	r2, r2, #2
 8010330:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8010334:	fb01 2303 	mla	r3, r1, r3, r2
 8010338:	4423      	add	r3, r4
 801033a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 801033e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010342:	fb02 f303 	mul.w	r3, r2, r3
 8010346:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 801034a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801034c:	f363 021a 	bfi	r2, r3, #0, #27
 8010350:	9215      	str	r2, [sp, #84]	; 0x54
          tmpDateTime.dstflag = 0;
 8010352:	f36f 1004 	bfc	r0, #4, #1
 8010356:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
          rtcSetTime(&RTCD1, &tmpDateTime);
 801035a:	a914      	add	r1, sp, #80	; 0x50
 801035c:	4813      	ldr	r0, [pc, #76]	; (80103ac <gps_thread+0x18c>)
 801035e:	f7f2 f83f 	bl	80023e0 <rtcSetTime>
          rtcConvertDateTimeToStructTm(&tmpDateTime,&tmp_time,NULL);
 8010362:	2200      	movs	r2, #0
 8010364:	a901      	add	r1, sp, #4
 8010366:	a814      	add	r0, sp, #80	; 0x50
 8010368:	f7f2 f89a 	bl	80024a0 <rtcConvertDateTimeToStructTm>
 801036c:	e782      	b.n	8010274 <gps_thread+0x54>
         while (charbuf != Q_TIMEOUT);
 801036e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010372:	d088      	beq.n	8010286 <gps_thread+0x66>
            charbuf = chnGetTimeout(&SD3, TIME_IMMEDIATE);
 8010374:	4809      	ldr	r0, [pc, #36]	; (801039c <gps_thread+0x17c>)
 8010376:	6803      	ldr	r3, [r0, #0]
 8010378:	6999      	ldr	r1, [r3, #24]
 801037a:	2200      	movs	r2, #0
 801037c:	2300      	movs	r3, #0
 801037e:	4788      	blx	r1
 8010380:	4604      	mov	r4, r0
            if ( charbuf != Q_TIMEOUT )
 8010382:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010386:	d0f2      	beq.n	801036e <gps_thread+0x14e>
               GPSParseChar((char)charbuf);
 8010388:	b2c0      	uxtb	r0, r0
 801038a:	f002 fc11 	bl	8012bb0 <GPSParseChar>
 801038e:	e7ee      	b.n	801036e <gps_thread+0x14e>
 8010390:	20004f68 	.word	0x20004f68
 8010394:	080160d8 	.word	0x080160d8
 8010398:	40020c00 	.word	0x40020c00
 801039c:	200049b4 	.word	0x200049b4
 80103a0:	08015b3c 	.word	0x08015b3c
 80103a4:	2000fbd0 	.word	0x2000fbd0
 80103a8:	2000fa00 	.word	0x2000fa00
 80103ac:	200046c0 	.word	0x200046c0

080103b0 <blinker_thread>:
static THD_FUNCTION(blinker_thread, arg) {
 80103b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103b2:	b087      	sub	sp, #28
 80103b4:	4b41      	ldr	r3, [pc, #260]	; (80104bc <blinker_thread+0x10c>)
 80103b6:	699b      	ldr	r3, [r3, #24]
 80103b8:	4a41      	ldr	r2, [pc, #260]	; (80104c0 <blinker_thread+0x110>)
 80103ba:	619a      	str	r2, [r3, #24]
  palSetLineMode(STATUS_LED_LINE,PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);    //set status LED line mode
 80103bc:	4c41      	ldr	r4, [pc, #260]	; (80104c4 <blinker_thread+0x114>)
 80103be:	2219      	movs	r2, #25
 80103c0:	2108      	movs	r1, #8
 80103c2:	4620      	mov	r0, r4
 80103c4:	f7f4 fdbc 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetLineMode(PWR_CTL_LINE,PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);    //set status LED line mode
 80103c8:	2219      	movs	r2, #25
 80103ca:	2180      	movs	r1, #128	; 0x80
 80103cc:	4620      	mov	r0, r4
 80103ce:	f7f4 fdb7 	bl	8004f40 <_pal_lld_setgroupmode>
  palClearLine(PWR_CTL_LINE);
 80103d2:	2380      	movs	r3, #128	; 0x80
 80103d4:	8363      	strh	r3, [r4, #26]
  palClearLine(MCP_RST_LINE);
 80103d6:	2502      	movs	r5, #2
 80103d8:	8365      	strh	r5, [r4, #26]
  chThdSleepMilliseconds(1);
 80103da:	2064      	movs	r0, #100	; 0x64
 80103dc:	2100      	movs	r1, #0
 80103de:	f7f8 fb4f 	bl	8008a80 <chThdSleep>
  palSetLine(MCP_RST_LINE);
 80103e2:	8325      	strh	r5, [r4, #24]
  chThdSleepMilliseconds(1);
 80103e4:	2064      	movs	r0, #100	; 0x64
 80103e6:	2100      	movs	r1, #0
 80103e8:	f7f8 fb4a 	bl	8008a80 <chThdSleep>
  mcp23017_init(&mcp_cfg);
 80103ec:	4c36      	ldr	r4, [pc, #216]	; (80104c8 <blinker_thread+0x118>)
 80103ee:	4620      	mov	r0, r4
 80103f0:	f002 fc3e 	bl	8012c70 <mcp23017_init>
  mcp23017_pinModeAB(&mcp_cfg, 0x07, MCP23017_OUTPUT);
 80103f4:	2201      	movs	r2, #1
 80103f6:	2107      	movs	r1, #7
 80103f8:	4620      	mov	r0, r4
 80103fa:	f002 fcf1 	bl	8012de0 <mcp23017_pinModeAB>
 80103fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010402:	462a      	mov	r2, r5
 8010404:	a901      	add	r1, sp, #4
 8010406:	4831      	ldr	r0, [pc, #196]	; (80104cc <blinker_thread+0x11c>)
 8010408:	f7f9 fc32 	bl	8009c70 <chEvtRegisterMaskWithFlags>
  flags = chEvtGetAndClearFlags(&ppsListener); //clear flags
 801040c:	a801      	add	r0, sp, #4
 801040e:	f7f9 fcff 	bl	8009e10 <chEvtGetAndClearFlags>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RDY_LED_PIN_POS, rdy_led_state);
 8010412:	2300      	movs	r3, #0
 8010414:	462a      	mov	r2, r5
 8010416:	2107      	movs	r1, #7
 8010418:	4620      	mov	r0, r4
 801041a:	f002 fd21 	bl	8012e60 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, PPS_LED_PIN_POS, pps_led_state);
 801041e:	2300      	movs	r3, #0
 8010420:	2203      	movs	r2, #3
 8010422:	2107      	movs	r1, #7
 8010424:	4620      	mov	r0, r4
 8010426:	f002 fd1b 	bl	8012e60 <mcp23017_digitalWrite>
  bool pps_led_state = 0;
 801042a:	2700      	movs	r7, #0
  uint32_t rdy_blink_timebase = 500;
 801042c:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
  uint8_t cycle_cnt = 0;
 8010430:	463c      	mov	r4, r7
 8010432:	e017      	b.n	8010464 <blinker_thread+0xb4>
      flags = chEvtGetAndClearFlags(&ppsListener);  //clear flags
 8010434:	a801      	add	r0, sp, #4
 8010436:	f7f9 fceb 	bl	8009e10 <chEvtGetAndClearFlags>
      pps_led_state = !pps_led_state;               //toggle pps led if pps event
 801043a:	f087 0701 	eor.w	r7, r7, #1
 801043e:	e024      	b.n	801048a <blinker_thread+0xda>
      rdy_blink_timebase = 250;
 8010440:	26fa      	movs	r6, #250	; 0xfa
 8010442:	e02e      	b.n	80104a2 <blinker_thread+0xf2>
      rdy_led_state = 0;
 8010444:	2300      	movs	r3, #0
    mcp23017_digitalWrite(&mcp_cfg, 0x07, RDY_LED_PIN_POS, rdy_led_state);
 8010446:	4d20      	ldr	r5, [pc, #128]	; (80104c8 <blinker_thread+0x118>)
 8010448:	2202      	movs	r2, #2
 801044a:	2107      	movs	r1, #7
 801044c:	4628      	mov	r0, r5
 801044e:	f002 fd07 	bl	8012e60 <mcp23017_digitalWrite>
    mcp23017_digitalWrite(&mcp_cfg, 0x07, PPS_LED_PIN_POS, pps_led_state);
 8010452:	463b      	mov	r3, r7
 8010454:	2203      	movs	r2, #3
 8010456:	2107      	movs	r1, #7
 8010458:	4628      	mov	r0, r5
 801045a:	f002 fd01 	bl	8012e60 <mcp23017_digitalWrite>
    cycle_cnt = ++cycle_cnt%4;
 801045e:	3401      	adds	r4, #1
 8010460:	f004 0403 	and.w	r4, r4, #3
  ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 8010464:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010468:	2300      	movs	r3, #0
 801046a:	4d19      	ldr	r5, [pc, #100]	; (80104d0 <blinker_thread+0x120>)
 801046c:	f240 30e7 	movw	r0, #999	; 0x3e7
 8010470:	2100      	movs	r1, #0
 8010472:	fbe5 0106 	umlal	r0, r1, r5, r6
 8010476:	f003 f83b 	bl	80134f0 <__aeabi_uldivmod>
    if( chEvtWaitAnyTimeout(ALL_EVENTS, chTimeMS2I( rdy_blink_timebase ) ) )
 801047a:	4602      	mov	r2, r0
 801047c:	460b      	mov	r3, r1
 801047e:	f04f 30ff 	mov.w	r0, #4294967295
 8010482:	f7f9 fee5 	bl	800a250 <chEvtWaitAnyTimeout>
 8010486:	2800      	cmp	r0, #0
 8010488:	d1d4      	bne.n	8010434 <blinker_thread+0x84>
    if( node_state&STATE_ACTIVE )
 801048a:	4b12      	ldr	r3, [pc, #72]	; (80104d4 <blinker_thread+0x124>)
 801048c:	7a1b      	ldrb	r3, [r3, #8]
 801048e:	f013 0f08 	tst.w	r3, #8
 8010492:	d001      	beq.n	8010498 <blinker_thread+0xe8>
      rdy_blink_timebase = 500;
 8010494:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    if( logging_state == RECORDING )
 8010498:	4b0e      	ldr	r3, [pc, #56]	; (80104d4 <blinker_thread+0x124>)
 801049a:	7a5b      	ldrb	r3, [r3, #9]
 801049c:	b2db      	uxtb	r3, r3
 801049e:	2b04      	cmp	r3, #4
 80104a0:	d0ce      	beq.n	8010440 <blinker_thread+0x90>
    if( !( node_state&STATE_ACTIVE ) )
 80104a2:	4b0c      	ldr	r3, [pc, #48]	; (80104d4 <blinker_thread+0x124>)
 80104a4:	7a1b      	ldrb	r3, [r3, #8]
 80104a6:	f013 0f08 	tst.w	r3, #8
 80104aa:	d0cb      	beq.n	8010444 <blinker_thread+0x94>
    else if( cycle_cnt%2 == 0 )
 80104ac:	f014 0f01 	tst.w	r4, #1
 80104b0:	d101      	bne.n	80104b6 <blinker_thread+0x106>
      rdy_led_state = 1;
 80104b2:	2301      	movs	r3, #1
 80104b4:	e7c7      	b.n	8010446 <blinker_thread+0x96>
      rdy_led_state = 0;
 80104b6:	2300      	movs	r3, #0
 80104b8:	e7c5      	b.n	8010446 <blinker_thread+0x96>
 80104ba:	bf00      	nop
 80104bc:	20004f68 	.word	0x20004f68
 80104c0:	080160e0 	.word	0x080160e0
 80104c4:	40021000 	.word	0x40021000
 80104c8:	08015b48 	.word	0x08015b48
 80104cc:	2000f910 	.word	0x2000f910
 80104d0:	000186a0 	.word	0x000186a0
 80104d4:	200022c8 	.word	0x200022c8
 80104d8:	f3af 8000 	nop.w
 80104dc:	f3af 8000 	nop.w

080104e0 <write_config_eeprom>:
{
 80104e0:	b510      	push	{r4, lr}
  eeFS = I2CEepromFileOpen(&eeFile, &eeCfg, EepromFindDevice(EEPROM_DEV_24XX));
 80104e2:	2018      	movs	r0, #24
 80104e4:	f7f3 fb04 	bl	8003af0 <EepromFindDevice>
 80104e8:	4c0c      	ldr	r4, [pc, #48]	; (801051c <write_config_eeprom+0x3c>)
 80104ea:	4602      	mov	r2, r0
 80104ec:	490c      	ldr	r1, [pc, #48]	; (8010520 <write_config_eeprom+0x40>)
 80104ee:	f104 000c 	add.w	r0, r4, #12
 80104f2:	f7f3 fb0d 	bl	8003b10 <EepromFileOpen>
 80104f6:	61e0      	str	r0, [r4, #28]
  fileStreamSetPosition(eeFS, NODE_CFG_EEPROM_ADDR);//start at eeprom config offset
 80104f8:	6803      	ldr	r3, [r0, #0]
 80104fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104fc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8010500:	4798      	blx	r3
  fileStreamWrite(eeFS, &node_config, sizeof(node_config)); //write to config file
 8010502:	69e0      	ldr	r0, [r4, #28]
 8010504:	6803      	ldr	r3, [r0, #0]
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	2239      	movs	r2, #57	; 0x39
 801050a:	f104 0120 	add.w	r1, r4, #32
 801050e:	4798      	blx	r3
  fileStreamClose(eeFS);
 8010510:	69e0      	ldr	r0, [r4, #28]
 8010512:	6803      	ldr	r3, [r0, #0]
 8010514:	695b      	ldr	r3, [r3, #20]
 8010516:	4798      	blx	r3
}
 8010518:	bd10      	pop	{r4, pc}
 801051a:	bf00      	nop
 801051c:	200022c8 	.word	0x200022c8
 8010520:	20001a2c 	.word	0x20001a2c
 8010524:	f3af 8000 	nop.w
 8010528:	f3af 8000 	nop.w
 801052c:	f3af 8000 	nop.w

08010530 <read_config_eeprom>:
{
 8010530:	b510      	push	{r4, lr}
 8010532:	b09a      	sub	sp, #104	; 0x68
  eeFS = I2CEepromFileOpen(&eeFile, &eeCfg, EepromFindDevice(EEPROM_DEV_24XX));
 8010534:	2018      	movs	r0, #24
 8010536:	f7f3 fadb 	bl	8003af0 <EepromFindDevice>
 801053a:	4c13      	ldr	r4, [pc, #76]	; (8010588 <read_config_eeprom+0x58>)
 801053c:	4602      	mov	r2, r0
 801053e:	4913      	ldr	r1, [pc, #76]	; (801058c <read_config_eeprom+0x5c>)
 8010540:	f104 000c 	add.w	r0, r4, #12
 8010544:	f7f3 fae4 	bl	8003b10 <EepromFileOpen>
 8010548:	61e0      	str	r0, [r4, #28]
  fileStreamSetPosition(eeFS, NODE_CFG_EEPROM_ADDR);//start at eeprom config offse
 801054a:	6803      	ldr	r3, [r0, #0]
 801054c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801054e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8010552:	4798      	blx	r3
  fileStreamRead(eeFS, &node_config, sizeof(node_config)); //read in the config file
 8010554:	69e0      	ldr	r0, [r4, #28]
 8010556:	6803      	ldr	r3, [r0, #0]
 8010558:	689b      	ldr	r3, [r3, #8]
 801055a:	2239      	movs	r2, #57	; 0x39
 801055c:	f104 0120 	add.w	r1, r4, #32
 8010560:	4798      	blx	r3
  fileStreamSetPosition(eeFS, NODE_CFG_EEPROM_ADDR);//start at eeprom config offse
 8010562:	69e0      	ldr	r0, [r4, #28]
 8010564:	6803      	ldr	r3, [r0, #0]
 8010566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010568:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801056c:	4798      	blx	r3
  fileStreamRead(eeFS, tmpBuff, 100); //read in the config file
 801056e:	69e0      	ldr	r0, [r4, #28]
 8010570:	6803      	ldr	r3, [r0, #0]
 8010572:	689b      	ldr	r3, [r3, #8]
 8010574:	2264      	movs	r2, #100	; 0x64
 8010576:	a901      	add	r1, sp, #4
 8010578:	4798      	blx	r3
  fileStreamClose(eeFS);
 801057a:	69e0      	ldr	r0, [r4, #28]
 801057c:	6803      	ldr	r3, [r0, #0]
 801057e:	695b      	ldr	r3, [r3, #20]
 8010580:	4798      	blx	r3
}
 8010582:	b01a      	add	sp, #104	; 0x68
 8010584:	bd10      	pop	{r4, pc}
 8010586:	bf00      	nop
 8010588:	200022c8 	.word	0x200022c8
 801058c:	20001a2c 	.word	0x20001a2c

08010590 <default_config_eeprom>:
{
 8010590:	b510      	push	{r4, lr}
 8010592:	b090      	sub	sp, #64	; 0x40
  default_config.device_id[0] = 'A';
 8010594:	2341      	movs	r3, #65	; 0x41
 8010596:	f88d 3004 	strb.w	r3, [sp, #4]
  default_config.device_id[1] = 'A';
 801059a:	f88d 3005 	strb.w	r3, [sp, #5]
  default_config.device_id[2] = 'A';
 801059e:	f88d 3006 	strb.w	r3, [sp, #6]
  default_config.next_file = 0;
 80105a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80105a6:	2300      	movs	r3, #0
 80105a8:	f88d 3007 	strb.w	r3, [sp, #7]
 80105ac:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80105b0:	f88d 3008 	strb.w	r3, [sp, #8]
 80105b4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80105b8:	f88d 3009 	strb.w	r3, [sp, #9]
 80105bc:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80105c0:	f88d 300a 	strb.w	r3, [sp, #10]
  default_config.dev_input_type = INPUT_TYPE_V;
 80105c4:	2256      	movs	r2, #86	; 0x56
 80105c6:	f88d 2013 	strb.w	r2, [sp, #19]
  default_config.input_factor[0] = DEF_CONV_FACTOR;
 80105ca:	4a1a      	ldr	r2, [pc, #104]	; (8010634 <default_config_eeprom+0xa4>)
 80105cc:	9205      	str	r2, [sp, #20]
  default_config.input_factor[1] = DEF_CONV_FACTOR;
 80105ce:	9206      	str	r2, [sp, #24]
  default_config.bat_chem = TYPE_20AH_PANASONIC;
 80105d0:	2211      	movs	r2, #17
 80105d2:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
  default_config.adc_raw_offset = 0;
 80105d6:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80105da:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 80105de:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80105e2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80105e6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 80105ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105ee:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 80105f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  eeFS = I2CEepromFileOpen(&eeFile, &eeCfg, EepromFindDevice(EEPROM_DEV_24XX));
 80105f6:	2018      	movs	r0, #24
 80105f8:	f7f3 fa7a 	bl	8003af0 <EepromFindDevice>
 80105fc:	4c0e      	ldr	r4, [pc, #56]	; (8010638 <default_config_eeprom+0xa8>)
 80105fe:	4602      	mov	r2, r0
 8010600:	490e      	ldr	r1, [pc, #56]	; (801063c <default_config_eeprom+0xac>)
 8010602:	f104 000c 	add.w	r0, r4, #12
 8010606:	f7f3 fa83 	bl	8003b10 <EepromFileOpen>
 801060a:	61e0      	str	r0, [r4, #28]
  fileStreamSetPosition(eeFS, NODE_CFG_EEPROM_ADDR);//start at eeprom config offset
 801060c:	6803      	ldr	r3, [r0, #0]
 801060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010610:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8010614:	4798      	blx	r3
  fileStreamWrite(eeFS, &default_config, sizeof(default_config)); //read in the config file
 8010616:	69e0      	ldr	r0, [r4, #28]
 8010618:	6803      	ldr	r3, [r0, #0]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	2239      	movs	r2, #57	; 0x39
 801061e:	a901      	add	r1, sp, #4
 8010620:	4798      	blx	r3
  fileStreamClose(eeFS);
 8010622:	69e0      	ldr	r0, [r4, #28]
 8010624:	6803      	ldr	r3, [r0, #0]
 8010626:	695b      	ldr	r3, [r3, #20]
 8010628:	4798      	blx	r3
  read_config_eeprom();
 801062a:	f7ff ff81 	bl	8010530 <read_config_eeprom>
}
 801062e:	b010      	add	sp, #64	; 0x40
 8010630:	bd10      	pop	{r4, pc}
 8010632:	bf00      	nop
 8010634:	000d1f60 	.word	0x000d1f60
 8010638:	200022c8 	.word	0x200022c8
 801063c:	20001a2c 	.word	0x20001a2c

08010640 <setRelayState>:
{
 8010640:	b538      	push	{r3, r4, r5, lr}
 8010642:	4605      	mov	r5, r0
  switch ( new_relay_state  )
 8010644:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010648:	2b32      	cmp	r3, #50	; 0x32
 801064a:	d868      	bhi.n	801071e <setRelayState+0xde>
 801064c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010650:	0067010e 	.word	0x0067010e
 8010654:	0067009f 	.word	0x0067009f
 8010658:	00670067 	.word	0x00670067
 801065c:	00670067 	.word	0x00670067
 8010660:	00670067 	.word	0x00670067
 8010664:	00670067 	.word	0x00670067
 8010668:	00670067 	.word	0x00670067
 801066c:	006700bc 	.word	0x006700bc
 8010670:	00670067 	.word	0x00670067
 8010674:	003300d9 	.word	0x003300d9
 8010678:	00670067 	.word	0x00670067
 801067c:	00670067 	.word	0x00670067
 8010680:	00670067 	.word	0x00670067
 8010684:	00670067 	.word	0x00670067
 8010688:	00670067 	.word	0x00670067
 801068c:	00670067 	.word	0x00670067
 8010690:	00670067 	.word	0x00670067
 8010694:	00670067 	.word	0x00670067
 8010698:	00670067 	.word	0x00670067
 801069c:	00670067 	.word	0x00670067
 80106a0:	00670067 	.word	0x00670067
 80106a4:	00670067 	.word	0x00670067
 80106a8:	00670067 	.word	0x00670067
 80106ac:	00670067 	.word	0x00670067
 80106b0:	00670067 	.word	0x00670067
 80106b4:	0143      	.short	0x0143
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN1_POS, 0);
 80106b6:	4ca2      	ldr	r4, [pc, #648]	; (8010940 <setRelayState+0x300>)
 80106b8:	2300      	movs	r3, #0
 80106ba:	220e      	movs	r2, #14
 80106bc:	2107      	movs	r1, #7
 80106be:	4620      	mov	r0, r4
 80106c0:	f002 fbce 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN2_POS, 1);
 80106c4:	2301      	movs	r3, #1
 80106c6:	220f      	movs	r2, #15
 80106c8:	2107      	movs	r1, #7
 80106ca:	4620      	mov	r0, r4
 80106cc:	f002 fbc8 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN1_POS, 1);
 80106d0:	2301      	movs	r3, #1
 80106d2:	220b      	movs	r2, #11
 80106d4:	2107      	movs	r1, #7
 80106d6:	4620      	mov	r0, r4
 80106d8:	f002 fbc2 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN2_POS, 0);
 80106dc:	2300      	movs	r3, #0
 80106de:	220a      	movs	r2, #10
 80106e0:	2107      	movs	r1, #7
 80106e2:	4620      	mov	r0, r4
 80106e4:	f002 fbbc 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 0);
 80106e8:	2300      	movs	r3, #0
 80106ea:	2208      	movs	r2, #8
 80106ec:	2107      	movs	r1, #7
 80106ee:	4620      	mov	r0, r4
 80106f0:	f002 fbb6 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 1);
 80106f4:	2301      	movs	r3, #1
 80106f6:	2209      	movs	r2, #9
 80106f8:	2107      	movs	r1, #7
 80106fa:	4620      	mov	r0, r4
 80106fc:	f002 fbb0 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 0);
 8010700:	2300      	movs	r3, #0
 8010702:	2207      	movs	r2, #7
 8010704:	4611      	mov	r1, r2
 8010706:	4620      	mov	r0, r4
 8010708:	f002 fbaa 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 1);
 801070c:	2301      	movs	r3, #1
 801070e:	2206      	movs	r2, #6
 8010710:	2107      	movs	r1, #7
 8010712:	4620      	mov	r0, r4
 8010714:	f002 fba4 	bl	8012e60 <mcp23017_digitalWrite>
      relay_state = new_relay_state;
 8010718:	4b8a      	ldr	r3, [pc, #552]	; (8010944 <setRelayState+0x304>)
 801071a:	f883 5059 	strb.w	r5, [r3, #89]	; 0x59
  chThdSleepMilliseconds(20); //wait 20mS for relays to click over
 801071e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010722:	2100      	movs	r1, #0
 8010724:	f7f8 f9ac 	bl	8008a80 <chThdSleep>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN1_POS, 0);
 8010728:	4c85      	ldr	r4, [pc, #532]	; (8010940 <setRelayState+0x300>)
 801072a:	2300      	movs	r3, #0
 801072c:	220e      	movs	r2, #14
 801072e:	2107      	movs	r1, #7
 8010730:	4620      	mov	r0, r4
 8010732:	f002 fb95 	bl	8012e60 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN2_POS, 0);
 8010736:	2300      	movs	r3, #0
 8010738:	220f      	movs	r2, #15
 801073a:	2107      	movs	r1, #7
 801073c:	4620      	mov	r0, r4
 801073e:	f002 fb8f 	bl	8012e60 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN1_POS, 0);
 8010742:	2300      	movs	r3, #0
 8010744:	220b      	movs	r2, #11
 8010746:	2107      	movs	r1, #7
 8010748:	4620      	mov	r0, r4
 801074a:	f002 fb89 	bl	8012e60 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN2_POS, 0);
 801074e:	2300      	movs	r3, #0
 8010750:	220a      	movs	r2, #10
 8010752:	2107      	movs	r1, #7
 8010754:	4620      	mov	r0, r4
 8010756:	f002 fb83 	bl	8012e60 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 0);
 801075a:	2300      	movs	r3, #0
 801075c:	2208      	movs	r2, #8
 801075e:	2107      	movs	r1, #7
 8010760:	4620      	mov	r0, r4
 8010762:	f002 fb7d 	bl	8012e60 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 0);
 8010766:	2300      	movs	r3, #0
 8010768:	2209      	movs	r2, #9
 801076a:	2107      	movs	r1, #7
 801076c:	4620      	mov	r0, r4
 801076e:	f002 fb77 	bl	8012e60 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 0);
 8010772:	2300      	movs	r3, #0
 8010774:	2207      	movs	r2, #7
 8010776:	4611      	mov	r1, r2
 8010778:	4620      	mov	r0, r4
 801077a:	f002 fb71 	bl	8012e60 <mcp23017_digitalWrite>
  mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 0);
 801077e:	2300      	movs	r3, #0
 8010780:	2206      	movs	r2, #6
 8010782:	2107      	movs	r1, #7
 8010784:	4620      	mov	r0, r4
 8010786:	f002 fb6b 	bl	8012e60 <mcp23017_digitalWrite>
}
 801078a:	4628      	mov	r0, r5
 801078c:	bd38      	pop	{r3, r4, r5, pc}
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 1);
 801078e:	4c6c      	ldr	r4, [pc, #432]	; (8010940 <setRelayState+0x300>)
 8010790:	2301      	movs	r3, #1
 8010792:	2208      	movs	r2, #8
 8010794:	2107      	movs	r1, #7
 8010796:	4620      	mov	r0, r4
 8010798:	f002 fb62 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 0);
 801079c:	2300      	movs	r3, #0
 801079e:	2209      	movs	r2, #9
 80107a0:	2107      	movs	r1, #7
 80107a2:	4620      	mov	r0, r4
 80107a4:	f002 fb5c 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 1);
 80107a8:	2301      	movs	r3, #1
 80107aa:	2207      	movs	r2, #7
 80107ac:	4611      	mov	r1, r2
 80107ae:	4620      	mov	r0, r4
 80107b0:	f002 fb56 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 0);
 80107b4:	2300      	movs	r3, #0
 80107b6:	2206      	movs	r2, #6
 80107b8:	2107      	movs	r1, #7
 80107ba:	4620      	mov	r0, r4
 80107bc:	f002 fb50 	bl	8012e60 <mcp23017_digitalWrite>
      relay_state = new_relay_state;
 80107c0:	4b60      	ldr	r3, [pc, #384]	; (8010944 <setRelayState+0x304>)
 80107c2:	f883 5059 	strb.w	r5, [r3, #89]	; 0x59
      break;
 80107c6:	e7aa      	b.n	801071e <setRelayState+0xde>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 0);
 80107c8:	4c5d      	ldr	r4, [pc, #372]	; (8010940 <setRelayState+0x300>)
 80107ca:	2300      	movs	r3, #0
 80107cc:	2208      	movs	r2, #8
 80107ce:	2107      	movs	r1, #7
 80107d0:	4620      	mov	r0, r4
 80107d2:	f002 fb45 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 1);
 80107d6:	2301      	movs	r3, #1
 80107d8:	2209      	movs	r2, #9
 80107da:	2107      	movs	r1, #7
 80107dc:	4620      	mov	r0, r4
 80107de:	f002 fb3f 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 1);
 80107e2:	2301      	movs	r3, #1
 80107e4:	2207      	movs	r2, #7
 80107e6:	4611      	mov	r1, r2
 80107e8:	4620      	mov	r0, r4
 80107ea:	f002 fb39 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 0);
 80107ee:	2300      	movs	r3, #0
 80107f0:	2206      	movs	r2, #6
 80107f2:	2107      	movs	r1, #7
 80107f4:	4620      	mov	r0, r4
 80107f6:	f002 fb33 	bl	8012e60 <mcp23017_digitalWrite>
      relay_state = new_relay_state;
 80107fa:	4b52      	ldr	r3, [pc, #328]	; (8010944 <setRelayState+0x304>)
 80107fc:	f883 5059 	strb.w	r5, [r3, #89]	; 0x59
      break;
 8010800:	e78d      	b.n	801071e <setRelayState+0xde>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN1_POS, 1);
 8010802:	4c4f      	ldr	r4, [pc, #316]	; (8010940 <setRelayState+0x300>)
 8010804:	2301      	movs	r3, #1
 8010806:	220e      	movs	r2, #14
 8010808:	2107      	movs	r1, #7
 801080a:	4620      	mov	r0, r4
 801080c:	f002 fb28 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN2_POS, 0);
 8010810:	2300      	movs	r3, #0
 8010812:	220f      	movs	r2, #15
 8010814:	2107      	movs	r1, #7
 8010816:	4620      	mov	r0, r4
 8010818:	f002 fb22 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN1_POS, 0);
 801081c:	2300      	movs	r3, #0
 801081e:	220b      	movs	r2, #11
 8010820:	2107      	movs	r1, #7
 8010822:	4620      	mov	r0, r4
 8010824:	f002 fb1c 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN2_POS, 1);
 8010828:	2301      	movs	r3, #1
 801082a:	220a      	movs	r2, #10
 801082c:	2107      	movs	r1, #7
 801082e:	4620      	mov	r0, r4
 8010830:	f002 fb16 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 0);
 8010834:	2300      	movs	r3, #0
 8010836:	2208      	movs	r2, #8
 8010838:	2107      	movs	r1, #7
 801083a:	4620      	mov	r0, r4
 801083c:	f002 fb10 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 1);
 8010840:	2301      	movs	r3, #1
 8010842:	2209      	movs	r2, #9
 8010844:	2107      	movs	r1, #7
 8010846:	4620      	mov	r0, r4
 8010848:	f002 fb0a 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 0);
 801084c:	2300      	movs	r3, #0
 801084e:	2207      	movs	r2, #7
 8010850:	4611      	mov	r1, r2
 8010852:	4620      	mov	r0, r4
 8010854:	f002 fb04 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 1);
 8010858:	2301      	movs	r3, #1
 801085a:	2206      	movs	r2, #6
 801085c:	2107      	movs	r1, #7
 801085e:	4620      	mov	r0, r4
 8010860:	f002 fafe 	bl	8012e60 <mcp23017_digitalWrite>
      relay_state = new_relay_state;
 8010864:	4b37      	ldr	r3, [pc, #220]	; (8010944 <setRelayState+0x304>)
 8010866:	f883 5059 	strb.w	r5, [r3, #89]	; 0x59
      break;
 801086a:	e758      	b.n	801071e <setRelayState+0xde>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN1_POS, 0);
 801086c:	4c34      	ldr	r4, [pc, #208]	; (8010940 <setRelayState+0x300>)
 801086e:	2300      	movs	r3, #0
 8010870:	220e      	movs	r2, #14
 8010872:	2107      	movs	r1, #7
 8010874:	4620      	mov	r0, r4
 8010876:	f002 faf3 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN2_POS, 1);
 801087a:	2301      	movs	r3, #1
 801087c:	220f      	movs	r2, #15
 801087e:	2107      	movs	r1, #7
 8010880:	4620      	mov	r0, r4
 8010882:	f002 faed 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN1_POS, 0);
 8010886:	2300      	movs	r3, #0
 8010888:	220b      	movs	r2, #11
 801088a:	2107      	movs	r1, #7
 801088c:	4620      	mov	r0, r4
 801088e:	f002 fae7 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN2_POS, 1);
 8010892:	2301      	movs	r3, #1
 8010894:	220a      	movs	r2, #10
 8010896:	2107      	movs	r1, #7
 8010898:	4620      	mov	r0, r4
 801089a:	f002 fae1 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 0);
 801089e:	2300      	movs	r3, #0
 80108a0:	2208      	movs	r2, #8
 80108a2:	2107      	movs	r1, #7
 80108a4:	4620      	mov	r0, r4
 80108a6:	f002 fadb 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 1);
 80108aa:	2301      	movs	r3, #1
 80108ac:	2209      	movs	r2, #9
 80108ae:	2107      	movs	r1, #7
 80108b0:	4620      	mov	r0, r4
 80108b2:	f002 fad5 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 0);
 80108b6:	2300      	movs	r3, #0
 80108b8:	2207      	movs	r2, #7
 80108ba:	4611      	mov	r1, r2
 80108bc:	4620      	mov	r0, r4
 80108be:	f002 facf 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 1);
 80108c2:	2301      	movs	r3, #1
 80108c4:	2206      	movs	r2, #6
 80108c6:	2107      	movs	r1, #7
 80108c8:	4620      	mov	r0, r4
 80108ca:	f002 fac9 	bl	8012e60 <mcp23017_digitalWrite>
      relay_state = new_relay_state;
 80108ce:	4b1d      	ldr	r3, [pc, #116]	; (8010944 <setRelayState+0x304>)
 80108d0:	f883 5059 	strb.w	r5, [r3, #89]	; 0x59
      break;
 80108d4:	e723      	b.n	801071e <setRelayState+0xde>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN1_POS, 1);
 80108d6:	4c1a      	ldr	r4, [pc, #104]	; (8010940 <setRelayState+0x300>)
 80108d8:	2301      	movs	r3, #1
 80108da:	220e      	movs	r2, #14
 80108dc:	2107      	movs	r1, #7
 80108de:	4620      	mov	r0, r4
 80108e0:	f002 fabe 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY1_PIN2_POS, 0);
 80108e4:	2300      	movs	r3, #0
 80108e6:	220f      	movs	r2, #15
 80108e8:	2107      	movs	r1, #7
 80108ea:	4620      	mov	r0, r4
 80108ec:	f002 fab8 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN1_POS, 0);
 80108f0:	2300      	movs	r3, #0
 80108f2:	220b      	movs	r2, #11
 80108f4:	2107      	movs	r1, #7
 80108f6:	4620      	mov	r0, r4
 80108f8:	f002 fab2 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY2_PIN2_POS, 1);
 80108fc:	2301      	movs	r3, #1
 80108fe:	220a      	movs	r2, #10
 8010900:	2107      	movs	r1, #7
 8010902:	4620      	mov	r0, r4
 8010904:	f002 faac 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN1_POS, 0);
 8010908:	2300      	movs	r3, #0
 801090a:	2208      	movs	r2, #8
 801090c:	2107      	movs	r1, #7
 801090e:	4620      	mov	r0, r4
 8010910:	f002 faa6 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY3_PIN2_POS, 1);
 8010914:	2301      	movs	r3, #1
 8010916:	2209      	movs	r2, #9
 8010918:	2107      	movs	r1, #7
 801091a:	4620      	mov	r0, r4
 801091c:	f002 faa0 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN1_POS, 1);
 8010920:	2301      	movs	r3, #1
 8010922:	2207      	movs	r2, #7
 8010924:	4611      	mov	r1, r2
 8010926:	4620      	mov	r0, r4
 8010928:	f002 fa9a 	bl	8012e60 <mcp23017_digitalWrite>
      mcp23017_digitalWrite(&mcp_cfg, 0x07, RELAY4_PIN2_POS, 0);
 801092c:	2300      	movs	r3, #0
 801092e:	2206      	movs	r2, #6
 8010930:	2107      	movs	r1, #7
 8010932:	4620      	mov	r0, r4
 8010934:	f002 fa94 	bl	8012e60 <mcp23017_digitalWrite>
      relay_state = new_relay_state;
 8010938:	4b02      	ldr	r3, [pc, #8]	; (8010944 <setRelayState+0x304>)
 801093a:	f883 5059 	strb.w	r5, [r3, #89]	; 0x59
      break;
 801093e:	e6ee      	b.n	801071e <setRelayState+0xde>
 8010940:	08015b48 	.word	0x08015b48
 8010944:	200022c8 	.word	0x200022c8
 8010948:	f3af 8000 	nop.w
 801094c:	f3af 8000 	nop.w

08010950 <cmd_adc>:
void cmd_adc(BaseSequentialStream *chp) {
 8010950:	b508      	push	{r3, lr}
  if( logging_state == RECORDING )
 8010952:	4b09      	ldr	r3, [pc, #36]	; (8010978 <cmd_adc+0x28>)
 8010954:	7a5b      	ldrb	r3, [r3, #9]
 8010956:	b2db      	uxtb	r3, r3
 8010958:	2b04      	cmp	r3, #4
 801095a:	d006      	beq.n	801096a <cmd_adc+0x1a>
    logging_state = START_RECORDING;
 801095c:	4b06      	ldr	r3, [pc, #24]	; (8010978 <cmd_adc+0x28>)
 801095e:	2202      	movs	r2, #2
 8010960:	725a      	strb	r2, [r3, #9]
    chprintf(chp, "toggle adc start recording\r\n");
 8010962:	4906      	ldr	r1, [pc, #24]	; (801097c <cmd_adc+0x2c>)
 8010964:	f7fb fa84 	bl	800be70 <chprintf>
}
 8010968:	bd08      	pop	{r3, pc}
    logging_state = STOP_RECORDING;
 801096a:	4b03      	ldr	r3, [pc, #12]	; (8010978 <cmd_adc+0x28>)
 801096c:	2205      	movs	r2, #5
 801096e:	725a      	strb	r2, [r3, #9]
    chprintf(chp, "toggle adc stop recording\r\n");
 8010970:	4903      	ldr	r1, [pc, #12]	; (8010980 <cmd_adc+0x30>)
 8010972:	f7fb fa7d 	bl	800be70 <chprintf>
 8010976:	e7f7      	b.n	8010968 <cmd_adc+0x18>
 8010978:	200022c8 	.word	0x200022c8
 801097c:	08016104 	.word	0x08016104
 8010980:	080160e8 	.word	0x080160e8
 8010984:	f3af 8000 	nop.w
 8010988:	f3af 8000 	nop.w
 801098c:	f3af 8000 	nop.w

08010990 <xbee_setup>:
{
 8010990:	b538      	push	{r3, r4, r5, lr}
  palSetPadMode(GPIOD, 5, PAL_MODE_ALTERNATE(7));
 8010992:	4c0f      	ldr	r4, [pc, #60]	; (80109d0 <xbee_setup+0x40>)
 8010994:	f240 3282 	movw	r2, #898	; 0x382
 8010998:	2120      	movs	r1, #32
 801099a:	4620      	mov	r0, r4
 801099c:	f7f4 fad0 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOD, 6, PAL_MODE_ALTERNATE(7));
 80109a0:	f240 3282 	movw	r2, #898	; 0x382
 80109a4:	2140      	movs	r1, #64	; 0x40
 80109a6:	4620      	mov	r0, r4
 80109a8:	f7f4 faca 	bl	8004f40 <_pal_lld_setgroupmode>
  sdStart(&SD2, &xbeeSerialcfg);
 80109ac:	4c09      	ldr	r4, [pc, #36]	; (80109d4 <xbee_setup+0x44>)
 80109ae:	490a      	ldr	r1, [pc, #40]	; (80109d8 <xbee_setup+0x48>)
 80109b0:	4620      	mov	r0, r4
 80109b2:	f7f2 fbdd 	bl	8003170 <sdStart>
  chprintf((BaseSequentialStream*)&SD6, "\nxbee interface thread\n");
 80109b6:	4d09      	ldr	r5, [pc, #36]	; (80109dc <xbee_setup+0x4c>)
 80109b8:	4909      	ldr	r1, [pc, #36]	; (80109e0 <xbee_setup+0x50>)
 80109ba:	4628      	mov	r0, r5
 80109bc:	f7fb fa58 	bl	800be70 <chprintf>
  xbee_mbx = xbee_init( &SD2,&SD6 );
 80109c0:	4629      	mov	r1, r5
 80109c2:	4620      	mov	r0, r4
 80109c4:	f002 fb04 	bl	8012fd0 <xbee_init>
 80109c8:	4b06      	ldr	r3, [pc, #24]	; (80109e4 <xbee_setup+0x54>)
 80109ca:	6018      	str	r0, [r3, #0]
}
 80109cc:	bd38      	pop	{r3, r4, r5, pc}
 80109ce:	bf00      	nop
 80109d0:	40020c00 	.word	0x40020c00
 80109d4:	20004758 	.word	0x20004758
 80109d8:	08015b4c 	.word	0x08015b4c
 80109dc:	20004c10 	.word	0x20004c10
 80109e0:	08016124 	.word	0x08016124
 80109e4:	2000f9fc 	.word	0x2000f9fc
 80109e8:	f3af 8000 	nop.w
 80109ec:	f3af 8000 	nop.w

080109f0 <Vector58>:
  pr = EXTI->PR;
 80109f0:	4b30      	ldr	r3, [pc, #192]	; (8010ab4 <Vector58+0xc4>)
 80109f2:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & (1U << 0);
 80109f4:	6819      	ldr	r1, [r3, #0]
 80109f6:	f001 0101 	and.w	r1, r1, #1
 80109fa:	400a      	ands	r2, r1
  EXTI->PR = pr;
 80109fc:	615a      	str	r2, [r3, #20]
  glbl_pps_cnt++;
 80109fe:	4b2e      	ldr	r3, [pc, #184]	; (8010ab8 <Vector58+0xc8>)
 8010a00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a02:	3201      	adds	r2, #1
 8010a04:	65da      	str	r2, [r3, #92]	; 0x5c
  if( gpt_started && ( palReadPad(GPIOE, 0U) == PAL_HIGH ) )//filter out interference spikes
 8010a06:	781b      	ldrb	r3, [r3, #0]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d052      	beq.n	8010ab2 <Vector58+0xc2>
 8010a0c:	4b2b      	ldr	r3, [pc, #172]	; (8010abc <Vector58+0xcc>)
 8010a0e:	691b      	ldr	r3, [r3, #16]
 8010a10:	f013 0f01 	tst.w	r3, #1
 8010a14:	d04d      	beq.n	8010ab2 <Vector58+0xc2>
CH_FAST_IRQ_HANDLER(Vector58) {
 8010a16:	b410      	push	{r4}
    gpt_cnt = GPTD5.tim->CNT;
 8010a18:	4b29      	ldr	r3, [pc, #164]	; (8010ac0 <Vector58+0xd0>)
 8010a1a:	68da      	ldr	r2, [r3, #12]
 8010a1c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8010a1e:	4929      	ldr	r1, [pc, #164]	; (8010ac4 <Vector58+0xd4>)
 8010a20:	600b      	str	r3, [r1, #0]
    GPTD5.tim->CNT = 0;
 8010a22:	2100      	movs	r1, #0
 8010a24:	6251      	str	r1, [r2, #36]	; 0x24
    gpt_last_target = GPTD5.tim->ARR;
 8010a26:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8010a28:	4927      	ldr	r1, [pc, #156]	; (8010ac8 <Vector58+0xd8>)
 8010a2a:	6008      	str	r0, [r1, #0]
    if( gpt_cnt < gpt_last_target/10 )
 8010a2c:	4927      	ldr	r1, [pc, #156]	; (8010acc <Vector58+0xdc>)
 8010a2e:	fba1 4100 	umull	r4, r1, r1, r0
 8010a32:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8010a36:	d21e      	bcs.n	8010a76 <Vector58+0x86>
      gpt_error = gpt_cnt;
 8010a38:	491f      	ldr	r1, [pc, #124]	; (8010ab8 <Vector58+0xc8>)
 8010a3a:	604b      	str	r3, [r1, #4]
      if( GPTD5.tim->SR & TIM_SR_UIF )
 8010a3c:	6911      	ldr	r1, [r2, #16]
 8010a3e:	f011 0f01 	tst.w	r1, #1
 8010a42:	d00a      	beq.n	8010a5a <Vector58+0x6a>
        GPTD5.tim->ARR = (gpt_error/5 + 1) + gpt_last_target; //correct to ideal period
 8010a44:	4922      	ldr	r1, [pc, #136]	; (8010ad0 <Vector58+0xe0>)
 8010a46:	fb81 4103 	smull	r4, r1, r1, r3
 8010a4a:	17db      	asrs	r3, r3, #31
 8010a4c:	ebc3 0161 	rsb	r1, r3, r1, asr #1
 8010a50:	180b      	adds	r3, r1, r0
 8010a52:	3301      	adds	r3, #1
 8010a54:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8010a56:	bc10      	pop	{r4}
 8010a58:	4770      	bx	lr
        GPTD5.tim->ARR = (gpt_error/5 + 1) + gpt_last_target; //correct to ideal period
 8010a5a:	4c1d      	ldr	r4, [pc, #116]	; (8010ad0 <Vector58+0xe0>)
 8010a5c:	fb84 1403 	smull	r1, r4, r4, r3
 8010a60:	17d9      	asrs	r1, r3, #31
 8010a62:	ebc1 0164 	rsb	r1, r1, r4, asr #1
 8010a66:	180b      	adds	r3, r1, r0
 8010a68:	3301      	adds	r3, #1
 8010a6a:	62d3      	str	r3, [r2, #44]	; 0x2c
        GPTD5.tim->SR &= ~TIM_SR_UIF; //clear the update interrupt flag we just created by updating the ARR value
 8010a6c:	6913      	ldr	r3, [r2, #16]
 8010a6e:	f023 0301 	bic.w	r3, r3, #1
 8010a72:	6113      	str	r3, [r2, #16]
 8010a74:	e7ef      	b.n	8010a56 <Vector58+0x66>
    else if( gpt_cnt > 9*gpt_last_target/10 )
 8010a76:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8010a7a:	4c14      	ldr	r4, [pc, #80]	; (8010acc <Vector58+0xdc>)
 8010a7c:	fba4 4101 	umull	r4, r1, r4, r1
 8010a80:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8010a84:	d9e7      	bls.n	8010a56 <Vector58+0x66>
      gpt_error = ( gpt_last_target - gpt_cnt );
 8010a86:	1ac3      	subs	r3, r0, r3
 8010a88:	490b      	ldr	r1, [pc, #44]	; (8010ab8 <Vector58+0xc8>)
 8010a8a:	604b      	str	r3, [r1, #4]
      GPTD5.tim->ARR = gpt_last_target - (gpt_error/5 + 1); //correct to ideal period
 8010a8c:	4910      	ldr	r1, [pc, #64]	; (8010ad0 <Vector58+0xe0>)
 8010a8e:	fb81 4103 	smull	r4, r1, r1, r3
 8010a92:	17db      	asrs	r3, r3, #31
 8010a94:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 8010a98:	1ac3      	subs	r3, r0, r3
 8010a9a:	3b01      	subs	r3, #1
 8010a9c:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(!( GPTD5.tim->SR & TIM_SR_UIF ) )
 8010a9e:	6913      	ldr	r3, [r2, #16]
 8010aa0:	f013 0f01 	tst.w	r3, #1
 8010aa4:	d1d7      	bne.n	8010a56 <Vector58+0x66>
        glbl_s_index++; //generate an S-marker if there is no pending timer event
 8010aa6:	4a0b      	ldr	r2, [pc, #44]	; (8010ad4 <Vector58+0xe4>)
 8010aa8:	8813      	ldrh	r3, [r2, #0]
 8010aaa:	3301      	adds	r3, #1
 8010aac:	b29b      	uxth	r3, r3
 8010aae:	8013      	strh	r3, [r2, #0]
}
 8010ab0:	e7d1      	b.n	8010a56 <Vector58+0x66>
 8010ab2:	4770      	bx	lr
 8010ab4:	40013c00 	.word	0x40013c00
 8010ab8:	200022c8 	.word	0x200022c8
 8010abc:	40021000 	.word	0x40021000
 8010ac0:	20004748 	.word	0x20004748
 8010ac4:	2000fb38 	.word	0x2000fb38
 8010ac8:	2000f52c 	.word	0x2000f52c
 8010acc:	cccccccd 	.word	0xcccccccd
 8010ad0:	66666667 	.word	0x66666667
 8010ad4:	20001a24 	.word	0x20001a24
 8010ad8:	f3af 8000 	nop.w
 8010adc:	f3af 8000 	nop.w

08010ae0 <VectorE0>:
  //trigger PendSV exception
  //clear interrupt flag
  uint32_t pr;
  //save the current timestamp for later

  pr = EXTI->PR;
 8010ae0:	4b38      	ldr	r3, [pc, #224]	; (8010bc4 <VectorE0+0xe4>)
 8010ae2:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8010ae4:	6819      	ldr	r1, [r3, #0]
 8010ae6:	f401 417c 	and.w	r1, r1, #64512	; 0xfc00
 8010aea:	400a      	ands	r2, r1
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 8010aec:	615a      	str	r2, [r3, #20]
  tmp_data_value = 0;
 8010aee:	2300      	movs	r3, #0
 8010af0:	4a35      	ldr	r2, [pc, #212]	; (8010bc8 <VectorE0+0xe8>)
 8010af2:	6013      	str	r3, [r2, #0]
  byte_index = 0;
 8010af4:	4a35      	ldr	r2, [pc, #212]	; (8010bcc <VectorE0+0xec>)
 8010af6:	7013      	strb	r3, [r2, #0]
  SPID1.spi->DR = 0xFF; //write to DR to trigger spi exchange
 8010af8:	4b35      	ldr	r3, [pc, #212]	; (8010bd0 <VectorE0+0xf0>)
 8010afa:	69db      	ldr	r3, [r3, #28]
 8010afc:	22ff      	movs	r2, #255	; 0xff
 8010afe:	60da      	str	r2, [r3, #12]
  raw_sample_end = (raw_sample_end+1)%RAW_BUFFER_LENGTH;   //increment index
 8010b00:	4a34      	ldr	r2, [pc, #208]	; (8010bd4 <VectorE0+0xf4>)
 8010b02:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8010b04:	3101      	adds	r1, #1
 8010b06:	4b34      	ldr	r3, [pc, #208]	; (8010bd8 <VectorE0+0xf8>)
 8010b08:	fba3 0301 	umull	r0, r3, r3, r1
 8010b0c:	095b      	lsrs	r3, r3, #5
 8010b0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010b12:	00d8      	lsls	r0, r3, #3
 8010b14:	1a0b      	subs	r3, r1, r0
 8010b16:	6613      	str	r3, [r2, #96]	; 0x60
  raw_sample_buffer[raw_sample_end].gpt_cnt = GPTD5.tim->CNT; //log the counter value for this sample
 8010b18:	4b30      	ldr	r3, [pc, #192]	; (8010bdc <VectorE0+0xfc>)
 8010b1a:	68d9      	ldr	r1, [r3, #12]
 8010b1c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8010b1e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8010b20:	011b      	lsls	r3, r3, #4
 8010b22:	492f      	ldr	r1, [pc, #188]	; (8010be0 <VectorE0+0x100>)
 8010b24:	50c8      	str	r0, [r1, r3]
  //check for pps
  if( adc_last_pps_cnt != glbl_pps_cnt )
 8010b26:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8010b28:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8010b2a:	4299      	cmp	r1, r3
 8010b2c:	d033      	beq.n	8010b96 <VectorE0+0xb6>
  {
    if( glbl_pps_cnt != adc_last_pps_cnt +1 )
 8010b2e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8010b30:	3301      	adds	r3, #1
 8010b32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d003      	beq.n	8010b40 <VectorE0+0x60>
    {
      glbl_pps_cnt = adc_last_pps_cnt +1;
 8010b38:	4a26      	ldr	r2, [pc, #152]	; (8010bd4 <VectorE0+0xf4>)
 8010b3a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	65d3      	str	r3, [r2, #92]	; 0x5c
    }
    adc_last_pps_cnt = glbl_pps_cnt;
 8010b40:	4b24      	ldr	r3, [pc, #144]	; (8010bd4 <VectorE0+0xf4>)
 8010b42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010b44:	665a      	str	r2, [r3, #100]	; 0x64
    raw_sample_buffer[raw_sample_end].pps = true;
 8010b46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8010b48:	4b25      	ldr	r3, [pc, #148]	; (8010be0 <VectorE0+0x100>)
 8010b4a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8010b4e:	2201      	movs	r2, #1
 8010b50:	731a      	strb	r2, [r3, #12]
  {
    raw_sample_buffer[raw_sample_end].pps = false;
  }
  //check for glbl_s_index marker

  if( glbl_s_index != glbl_last_s_index )
 8010b52:	4b24      	ldr	r3, [pc, #144]	; (8010be4 <VectorE0+0x104>)
 8010b54:	881a      	ldrh	r2, [r3, #0]
 8010b56:	b292      	uxth	r2, r2
 8010b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d022      	beq.n	8010ba6 <VectorE0+0xc6>
    if( glbl_s_index != ( glbl_last_s_index + 1 ) )
    {
      glbl_s_index = glbl_last_s_index +1; //double s_index increment
    }
*/
    glbl_last_s_index = glbl_s_index;
 8010b60:	4b20      	ldr	r3, [pc, #128]	; (8010be4 <VectorE0+0x104>)
 8010b62:	881a      	ldrh	r2, [r3, #0]
 8010b64:	b292      	uxth	r2, r2
 8010b66:	851a      	strh	r2, [r3, #40]	; 0x28
    raw_sample_buffer[raw_sample_end].s_index = glbl_s_index;
 8010b68:	881a      	ldrh	r2, [r3, #0]
 8010b6a:	b292      	uxth	r2, r2
 8010b6c:	4b19      	ldr	r3, [pc, #100]	; (8010bd4 <VectorE0+0xf4>)
 8010b6e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8010b70:	4b1b      	ldr	r3, [pc, #108]	; (8010be0 <VectorE0+0x100>)
 8010b72:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010b76:	609a      	str	r2, [r3, #8]
  {
    raw_sample_buffer[raw_sample_end].s_index = 0;
  }
  //adc_last_s_index_flag = s_index_flag;
  //check for buffer over-run;
  if( raw_sample_start == ( ( raw_sample_end+1 )%RAW_BUFFER_LENGTH ) )
 8010b78:	4916      	ldr	r1, [pc, #88]	; (8010bd4 <VectorE0+0xf4>)
 8010b7a:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8010b7c:	3201      	adds	r2, #1
 8010b7e:	4b16      	ldr	r3, [pc, #88]	; (8010bd8 <VectorE0+0xf8>)
 8010b80:	fba3 0302 	umull	r0, r3, r3, r2
 8010b84:	095b      	lsrs	r3, r3, #5
 8010b86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010b8a:	00d8      	lsls	r0, r3, #3
 8010b8c:	1a13      	subs	r3, r2, r0
 8010b8e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 8010b90:	4293      	cmp	r3, r2
 8010b92:	d010      	beq.n	8010bb6 <VectorE0+0xd6>
  {
    raw_buff_overflow++;
  }
  //should also check to make sure we haven't run out of buffer

}
 8010b94:	4770      	bx	lr
    raw_sample_buffer[raw_sample_end].pps = false;
 8010b96:	4b0f      	ldr	r3, [pc, #60]	; (8010bd4 <VectorE0+0xf4>)
 8010b98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8010b9a:	4b11      	ldr	r3, [pc, #68]	; (8010be0 <VectorE0+0x100>)
 8010b9c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	731a      	strb	r2, [r3, #12]
 8010ba4:	e7d5      	b.n	8010b52 <VectorE0+0x72>
    raw_sample_buffer[raw_sample_end].s_index = 0;
 8010ba6:	4b0b      	ldr	r3, [pc, #44]	; (8010bd4 <VectorE0+0xf4>)
 8010ba8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8010baa:	4b0d      	ldr	r3, [pc, #52]	; (8010be0 <VectorE0+0x100>)
 8010bac:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	609a      	str	r2, [r3, #8]
 8010bb4:	e7e0      	b.n	8010b78 <VectorE0+0x98>
    raw_buff_overflow++;
 8010bb6:	f8b1 306c 	ldrh.w	r3, [r1, #108]	; 0x6c
 8010bba:	3301      	adds	r3, #1
 8010bbc:	b29b      	uxth	r3, r3
 8010bbe:	f8a1 306c 	strh.w	r3, [r1, #108]	; 0x6c
}
 8010bc2:	e7e7      	b.n	8010b94 <VectorE0+0xb4>
 8010bc4:	40013c00 	.word	0x40013c00
 8010bc8:	2000f90c 	.word	0x2000f90c
 8010bcc:	200058b0 	.word	0x200058b0
 8010bd0:	200046cc 	.word	0x200046cc
 8010bd4:	200022c8 	.word	0x200022c8
 8010bd8:	cccccccd 	.word	0xcccccccd
 8010bdc:	20004748 	.word	0x20004748
 8010be0:	2000f670 	.word	0x2000f670
 8010be4:	20001a24 	.word	0x20001a24
 8010be8:	f3af 8000 	nop.w
 8010bec:	f3af 8000 	nop.w

08010bf0 <PendSV_Handler>:
volatile int32_t raw_max_val = 0;
volatile int32_t raw_min_val = 0;


// low priority handler to use os calls
CH_IRQ_HANDLER(PendSV_Handler){//PendSVVector) {
 8010bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  CH_IRQ_PROLOGUE();
 8010bf4:	f7f8 f9a4 	bl	8008f40 <_stats_increase_irq>
 8010bf8:	480a      	ldr	r0, [pc, #40]	; (8010c24 <PendSV_Handler+0x34>)
 8010bfa:	f7f6 fff9 	bl	8007bf0 <_trace_isr_enter>
 8010bfe:	f7f6 ff27 	bl	8007a50 <_dbg_check_enter_isr>
//  palSetPad(GPIOB, 5U); /* drive SPI_MOSI high for debug */
  uint32_t gpt_interval_cnt = gptGetIntervalX(&GPTD5);
 8010c02:	4b09      	ldr	r3, [pc, #36]	; (8010c28 <PendSV_Handler+0x38>)
 8010c04:	68db      	ldr	r3, [r3, #12]
 8010c06:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8010c08:	3601      	adds	r6, #1
  //uint32_t time_cnt = GPTD5.tim->CNT;

  // loop through half of raw data buffer, apply FIR, subsample to new sample rate and write to output buffer
  uint8_t stop_index =  ( raw_sample_start + RAW_BUFFER_LENGTH/2 )%RAW_BUFFER_LENGTH;
 8010c0a:	4b08      	ldr	r3, [pc, #32]	; (8010c2c <PendSV_Handler+0x3c>)
 8010c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c0e:	3314      	adds	r3, #20
 8010c10:	4f07      	ldr	r7, [pc, #28]	; (8010c30 <PendSV_Handler+0x40>)
 8010c12:	fba7 2703 	umull	r2, r7, r7, r3
 8010c16:	097f      	lsrs	r7, r7, #5
 8010c18:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8010c1c:	00fa      	lsls	r2, r7, #3
 8010c1e:	1a9f      	subs	r7, r3, r2
  while( raw_sample_start != stop_index )
 8010c20:	e13d      	b.n	8010e9e <PendSV_Handler+0x2ae>
 8010c22:	bf00      	nop
 8010c24:	08015b58 	.word	0x08015b58
 8010c28:	20004748 	.word	0x20004748
 8010c2c:	200022c8 	.word	0x200022c8
 8010c30:	cccccccd 	.word	0xcccccccd
 //   uint16_t buff_index;
//    int64_t new_val;

    for( int i = 0; i < FIR_length; i++)
    {
      fir_adcValue += (int64_t)fir_adc_buffer[( fir_head_index + i ) % FIR_length ] * (int64_t)FIR_coeffs[ i ];
 8010c34:	1862      	adds	r2, r4, r1
 8010c36:	48c2      	ldr	r0, [pc, #776]	; (8010f40 <PendSV_Handler+0x350>)
 8010c38:	fb80 3002 	smull	r3, r0, r0, r2
 8010c3c:	17d3      	asrs	r3, r2, #31
 8010c3e:	ebc3 03e0 	rsb	r3, r3, r0, asr #3
 8010c42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010c46:	0098      	lsls	r0, r3, #2
 8010c48:	1a13      	subs	r3, r2, r0
 8010c4a:	4abe      	ldr	r2, [pc, #760]	; (8010f44 <PendSV_Handler+0x354>)
 8010c4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010c50:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8010c54:	4bbc      	ldr	r3, [pc, #752]	; (8010f48 <PendSV_Handler+0x358>)
 8010c56:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c5c:	ea4f 7be3 	mov.w	fp, r3, asr #31
 8010c60:	fb02 f00b 	mul.w	r0, r2, fp
 8010c64:	fb03 0009 	mla	r0, r3, r9, r0
 8010c68:	fba2 ab03 	umull	sl, fp, r2, r3
 8010c6c:	4483      	add	fp, r0
 8010c6e:	48b7      	ldr	r0, [pc, #732]	; (8010f4c <PendSV_Handler+0x35c>)
 8010c70:	e9d0 8900 	ldrd	r8, r9, [r0]
 8010c74:	eb1a 0208 	adds.w	r2, sl, r8
 8010c78:	eb4b 0309 	adc.w	r3, fp, r9
 8010c7c:	e9c0 2300 	strd	r2, r3, [r0]
    for( int i = 0; i < FIR_length; i++)
 8010c80:	3101      	adds	r1, #1
 8010c82:	2913      	cmp	r1, #19
 8010c84:	ddd6      	ble.n	8010c34 <PendSV_Handler+0x44>

    }

    //fir_adcValue = fir_adc_buffer[(fir_head_index + FIR_length/2)%FIR_length];//fir_adcValue/FIR_coeffs_sum;
    fir_adcValue = fir_adcValue/FIR_coeffs_sum;
 8010c86:	4db1      	ldr	r5, [pc, #708]	; (8010f4c <PendSV_Handler+0x35c>)
 8010c88:	4ab1      	ldr	r2, [pc, #708]	; (8010f50 <PendSV_Handler+0x360>)
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010c90:	f002 fbde 	bl	8013450 <__aeabi_ldivmod>
 8010c94:	e9c5 0100 	strd	r0, r1, [r5]

    //get the cnt value from the mid position of the fir buffer
    uint64_t new_cnt = fir_cnt_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 8010c98:	340a      	adds	r4, #10
 8010c9a:	4ba9      	ldr	r3, [pc, #676]	; (8010f40 <PendSV_Handler+0x350>)
 8010c9c:	fb83 2304 	smull	r2, r3, r3, r4
 8010ca0:	10db      	asrs	r3, r3, #3
 8010ca2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010ca6:	009a      	lsls	r2, r3, #2
 8010ca8:	1aa3      	subs	r3, r4, r2
 8010caa:	4aaa      	ldr	r2, [pc, #680]	; (8010f54 <PendSV_Handler+0x364>)
 8010cac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010cb0:	17e5      	asrs	r5, r4, #31

    //check for PPS
    if( fir_pps_buffer[(fir_head_index + FIR_length/2)%FIR_length] )
 8010cb2:	4aa9      	ldr	r2, [pc, #676]	; (8010f58 <PendSV_Handler+0x368>)
 8010cb4:	5cd3      	ldrb	r3, [r2, r3]
 8010cb6:	b3ab      	cbz	r3, 8010d24 <PendSV_Handler+0x134>
    {
      //write the PPS marker, make sure not to over-write an s-marker
      if( ( adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency ) % adcBuffer.bufferLength]&0xFF000000 ) == DATA_TYPE_SINDEX  )
 8010cb8:	4ba8      	ldr	r3, [pc, #672]	; (8010f5c <PendSV_Handler+0x36c>)
 8010cba:	699a      	ldr	r2, [r3, #24]
 8010cbc:	49a8      	ldr	r1, [pc, #672]	; (8010f60 <PendSV_Handler+0x370>)
 8010cbe:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8010cc0:	1811      	adds	r1, r2, r0
 8010cc2:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8010cc6:	fbb1 f2fc 	udiv	r2, r1, ip
 8010cca:	fb0c 1212 	mls	r2, ip, r2, r1
 8010cce:	3208      	adds	r2, #8
 8010cd0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010cda:	f1b3 4f03 	cmp.w	r3, #2197815296	; 0x83000000
 8010cde:	f000 8153 	beq.w	8010f88 <PendSV_Handler+0x398>
      {
        adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength] = DATA_TYPE_PPS;
      }
      else
      {
        adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency ) % adcBuffer.bufferLength] = DATA_TYPE_PPS;
 8010ce2:	4b9e      	ldr	r3, [pc, #632]	; (8010f5c <PendSV_Handler+0x36c>)
 8010ce4:	699a      	ldr	r2, [r3, #24]
 8010ce6:	4410      	add	r0, r2
 8010ce8:	6919      	ldr	r1, [r3, #16]
 8010cea:	fbb0 f2f1 	udiv	r2, r0, r1
 8010cee:	fb01 0012 	mls	r0, r1, r2, r0
 8010cf2:	f100 0208 	add.w	r2, r0, #8
 8010cf6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010cfa:	f04f 4202 	mov.w	r2, #2181038080	; 0x82000000
 8010cfe:	605a      	str	r2, [r3, #4]
 8010d00:	2320      	movs	r3, #32
 8010d02:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8010d06:	f7f8 f953 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8010d0a:	f7f6 fe71 	bl	80079f0 <_dbg_check_lock_from_isr>
      }


      chSysLockFromISR();
      chEvtBroadcastFlagsI(&evtPPS, EVT_NEW_PPS);    //fire off an event
 8010d0e:	2101      	movs	r1, #1
 8010d10:	4894      	ldr	r0, [pc, #592]	; (8010f64 <PendSV_Handler+0x374>)
 8010d12:	f7f9 f8cd 	bl	8009eb0 <chEvtBroadcastFlagsI>
  _dbg_check_unlock_from_isr();
 8010d16:	f7f6 fe83 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8010d1a:	f7f8 f951 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 8010d1e:	2300      	movs	r3, #0
 8010d20:	f383 8811 	msr	BASEPRI, r3
      chSysUnlockFromISR();
    }
    //check for SIndex
    if( fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length] != 0)
 8010d24:	4b90      	ldr	r3, [pc, #576]	; (8010f68 <PendSV_Handler+0x378>)
 8010d26:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8010d2a:	320a      	adds	r2, #10
 8010d2c:	4b84      	ldr	r3, [pc, #528]	; (8010f40 <PendSV_Handler+0x350>)
 8010d2e:	fb83 1302 	smull	r1, r3, r3, r2
 8010d32:	10db      	asrs	r3, r3, #3
 8010d34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010d38:	0099      	lsls	r1, r3, #2
 8010d3a:	1a53      	subs	r3, r2, r1
 8010d3c:	4a8b      	ldr	r2, [pc, #556]	; (8010f6c <PendSV_Handler+0x37c>)
 8010d3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010d42:	2a00      	cmp	r2, #0
 8010d44:	d063      	beq.n	8010e0e <PendSV_Handler+0x21e>
    {
      //write s marker, but skip any filled buffer (from previous PPS marker)

      if( adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency ) % adcBuffer.bufferLength] == DATA_TYPE_PPS  )
 8010d46:	4a85      	ldr	r2, [pc, #532]	; (8010f5c <PendSV_Handler+0x36c>)
 8010d48:	6991      	ldr	r1, [r2, #24]
 8010d4a:	4885      	ldr	r0, [pc, #532]	; (8010f60 <PendSV_Handler+0x370>)
 8010d4c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8010d4e:	eb01 0c00 	add.w	ip, r1, r0
 8010d52:	f8d2 e010 	ldr.w	lr, [r2, #16]
 8010d56:	fbbc f1fe 	udiv	r1, ip, lr
 8010d5a:	fb0e c111 	mls	r1, lr, r1, ip
 8010d5e:	3108      	adds	r1, #8
 8010d60:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010d64:	6852      	ldr	r2, [r2, #4]
 8010d66:	f1b2 4f02 	cmp.w	r2, #2181038080	; 0x82000000
 8010d6a:	f000 811d 	beq.w	8010fa8 <PendSV_Handler+0x3b8>
        else
        {
          adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength] = DATA_TYPE_SINDEX + fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
        }
      }
      else if( ( adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency ) % adcBuffer.bufferLength]&0xFF000000 ) == DATA_TYPE_SINDEX  )
 8010d6e:	4a7b      	ldr	r2, [pc, #492]	; (8010f5c <PendSV_Handler+0x36c>)
 8010d70:	6991      	ldr	r1, [r2, #24]
 8010d72:	eb00 0c01 	add.w	ip, r0, r1
 8010d76:	f8d2 e010 	ldr.w	lr, [r2, #16]
 8010d7a:	fbbc f1fe 	udiv	r1, ip, lr
 8010d7e:	fb0e c111 	mls	r1, lr, r1, ip
 8010d82:	3108      	adds	r1, #8
 8010d84:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010d88:	6852      	ldr	r2, [r2, #4]
 8010d8a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8010d8e:	f1b2 4f03 	cmp.w	r2, #2197815296	; 0x83000000
 8010d92:	f000 8144 	beq.w	801101e <PendSV_Handler+0x42e>
      {
        adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength] = DATA_TYPE_SINDEX + fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
      }
      else
      {
        adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency ) % adcBuffer.bufferLength] = DATA_TYPE_SINDEX + fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 8010d96:	4a75      	ldr	r2, [pc, #468]	; (8010f6c <PendSV_Handler+0x37c>)
 8010d98:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 8010d9c:	4a6f      	ldr	r2, [pc, #444]	; (8010f5c <PendSV_Handler+0x36c>)
 8010d9e:	6991      	ldr	r1, [r2, #24]
 8010da0:	4408      	add	r0, r1
 8010da2:	f8d2 e010 	ldr.w	lr, [r2, #16]
 8010da6:	fbb0 f1fe 	udiv	r1, r0, lr
 8010daa:	fb0e 0011 	mls	r0, lr, r1, r0
 8010dae:	f10c 4c03 	add.w	ip, ip, #2197815296	; 0x83000000
 8010db2:	f100 0108 	add.w	r1, r0, #8
 8010db6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010dba:	f8c2 c004 	str.w	ip, [r2, #4]
      }
      //sanity check for missed s markers
      if( fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length] != ( pendsv_last_s_index+1 ) )
 8010dbe:	4a6b      	ldr	r2, [pc, #428]	; (8010f6c <PendSV_Handler+0x37c>)
 8010dc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8010dc4:	4a68      	ldr	r2, [pc, #416]	; (8010f68 <PendSV_Handler+0x378>)
 8010dc6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8010dc8:	3201      	adds	r2, #1
 8010dca:	4291      	cmp	r1, r2
 8010dcc:	d003      	beq.n	8010dd6 <PendSV_Handler+0x1e6>
      {
        pendsv_skipped_s_index++;
 8010dce:	4966      	ldr	r1, [pc, #408]	; (8010f68 <PendSV_Handler+0x378>)
 8010dd0:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 8010dd2:	3201      	adds	r2, #1
 8010dd4:	67ca      	str	r2, [r1, #124]	; 0x7c
      }
      pendsv_last_s_index = fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 8010dd6:	4a65      	ldr	r2, [pc, #404]	; (8010f6c <PendSV_Handler+0x37c>)
 8010dd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010ddc:	4962      	ldr	r1, [pc, #392]	; (8010f68 <PendSV_Handler+0x378>)
 8010dde:	6788      	str	r0, [r1, #120]	; 0x78

      glbl_last_s_index = fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 8010de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	4a5e      	ldr	r2, [pc, #376]	; (8010f60 <PendSV_Handler+0x370>)
 8010de8:	8513      	strh	r3, [r2, #40]	; 0x28
 8010dea:	2320      	movs	r3, #32
 8010dec:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8010df0:	f7f8 f8de 	bl	8008fb0 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8010df4:	f7f6 fdfc 	bl	80079f0 <_dbg_check_lock_from_isr>
      //s_index_flag = false;

 //     adcBuffer_cnt[adcBuffer.SIndexPos ] = new_cnt;

      chSysLockFromISR();
      chEvtBroadcastFlagsI(&evtSindex, EVT_NEW_SINDEX);    //fire off an event
 8010df8:	2102      	movs	r1, #2
 8010dfa:	485d      	ldr	r0, [pc, #372]	; (8010f70 <PendSV_Handler+0x380>)
 8010dfc:	f7f9 f858 	bl	8009eb0 <chEvtBroadcastFlagsI>
  _dbg_check_unlock_from_isr();
 8010e00:	f7f6 fe0e 	bl	8007a20 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8010e04:	f7f8 f8dc 	bl	8008fc0 <_stats_stop_measure_crit_isr>
 8010e08:	2300      	movs	r3, #0
 8010e0a:	f383 8811 	msr	BASEPRI, r3
      chSysUnlockFromISR();
    }
    //allow new_cnt to go larger than a period to simplify the math
    if( new_cnt <= gpt_interval_cnt/38400 )
 8010e0e:	4a59      	ldr	r2, [pc, #356]	; (8010f74 <PendSV_Handler+0x384>)
 8010e10:	fba2 3206 	umull	r3, r2, r2, r6
 8010e14:	0b12      	lsrs	r2, r2, #12
 8010e16:	2300      	movs	r3, #0
 8010e18:	42ab      	cmp	r3, r5
 8010e1a:	bf08      	it	eq
 8010e1c:	42a2      	cmpeq	r2, r4
 8010e1e:	d306      	bcc.n	8010e2e <PendSV_Handler+0x23e>
    {
     cur_sample_num = 0; //if this is the very first ADC sample after counter reset, then reset sample num
 8010e20:	4b51      	ldr	r3, [pc, #324]	; (8010f68 <PendSV_Handler+0x378>)
 8010e22:	2200      	movs	r2, #0
 8010e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

     new_cnt += gpt_interval_cnt;
 8010e28:	19a4      	adds	r4, r4, r6
 8010e2a:	f145 0500 	adc.w	r5, r5, #0
    }
    //now calculate sub-sample value, linearly averaging 2 values to get the value for desired gpt_cnt
    uint64_t target_sample_cnt = ((uint64_t)(cur_sample_num)*(uint64_t)gpt_interval_cnt)/target_sps;
 8010e2e:	4b4e      	ldr	r3, [pc, #312]	; (8010f68 <PendSV_Handler+0x378>)
 8010e30:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8010e34:	46b0      	mov	r8, r6
 8010e36:	f04f 0900 	mov.w	r9, #0
 8010e3a:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8010e3e:	2300      	movs	r3, #0
 8010e40:	fba0 0106 	umull	r0, r1, r0, r6
 8010e44:	f002 fb54 	bl	80134f0 <__aeabi_uldivmod>


    //if we padded new_cnt, then need to pad target_sample_cnt also
    if( new_cnt >= gpt_interval_cnt )
 8010e48:	454d      	cmp	r5, r9
 8010e4a:	bf08      	it	eq
 8010e4c:	42b4      	cmpeq	r4, r6
 8010e4e:	d302      	bcc.n	8010e56 <PendSV_Handler+0x266>
    {
      target_sample_cnt += gpt_interval_cnt;
 8010e50:	1980      	adds	r0, r0, r6
 8010e52:	eb41 0109 	adc.w	r1, r1, r9
    }

    //calculate and save new value if valid
    if( new_cnt > target_sample_cnt )
 8010e56:	42a9      	cmp	r1, r5
 8010e58:	bf08      	it	eq
 8010e5a:	42a0      	cmpeq	r0, r4
 8010e5c:	d206      	bcs.n	8010e6c <PendSV_Handler+0x27c>
    //sampling at 19200, record all values
    //if(true)
      //record every other sample
    if( ( fir_head_index%2 ) == 0)
 8010e5e:	4b42      	ldr	r3, [pc, #264]	; (8010f68 <PendSV_Handler+0x378>)
 8010e60:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8010e64:	f013 0f01 	tst.w	r3, #1
 8010e68:	f000 80ed 	beq.w	8011046 <PendSV_Handler+0x456>

      }
      adcBuffer.freshData = TRUE;
      cur_sample_num++;
    }
    last_val = new_cnt; //fir_adcValue;
 8010e6c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8010f68 <PendSV_Handler+0x378>
 8010e70:	e9ca 4522 	strd	r4, r5, [sl, #136]	; 0x88
    last_cnt = new_cnt%gpt_interval_cnt;
 8010e74:	4642      	mov	r2, r8
 8010e76:	464b      	mov	r3, r9
 8010e78:	4620      	mov	r0, r4
 8010e7a:	4629      	mov	r1, r5
 8010e7c:	f002 fb38 	bl	80134f0 <__aeabi_uldivmod>
 8010e80:	e9ca 2324 	strd	r2, r3, [sl, #144]	; 0x90
    fir_head_index = ( fir_head_index + 1 ) % FIR_length;
 8010e84:	f8ba 206e 	ldrh.w	r2, [sl, #110]	; 0x6e
 8010e88:	3201      	adds	r2, #1
 8010e8a:	4b2d      	ldr	r3, [pc, #180]	; (8010f40 <PendSV_Handler+0x350>)
 8010e8c:	fb83 1302 	smull	r1, r3, r3, r2
 8010e90:	10db      	asrs	r3, r3, #3
 8010e92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010e96:	0099      	lsls	r1, r3, #2
 8010e98:	1a53      	subs	r3, r2, r1
 8010e9a:	f8aa 306e 	strh.w	r3, [sl, #110]	; 0x6e
  while( raw_sample_start != stop_index )
 8010e9e:	4b32      	ldr	r3, [pc, #200]	; (8010f68 <PendSV_Handler+0x378>)
 8010ea0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8010ea2:	b2fb      	uxtb	r3, r7
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	f000 812c 	beq.w	8011102 <PendSV_Handler+0x512>
    fir_adc_buffer[ fir_head_index ] = raw_sample_buffer[raw_sample_start].adc_value;
 8010eaa:	4a2f      	ldr	r2, [pc, #188]	; (8010f68 <PendSV_Handler+0x378>)
 8010eac:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8010eae:	f8b2 406e 	ldrh.w	r4, [r2, #110]	; 0x6e
 8010eb2:	4b31      	ldr	r3, [pc, #196]	; (8010f78 <PendSV_Handler+0x388>)
 8010eb4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8010eb8:	6848      	ldr	r0, [r1, #4]
 8010eba:	4922      	ldr	r1, [pc, #136]	; (8010f44 <PendSV_Handler+0x354>)
 8010ebc:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
    fir_cnt_buffer[ fir_head_index ] = raw_sample_buffer[raw_sample_start].gpt_cnt;
 8010ec0:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8010ec2:	0109      	lsls	r1, r1, #4
 8010ec4:	5858      	ldr	r0, [r3, r1]
 8010ec6:	4923      	ldr	r1, [pc, #140]	; (8010f54 <PendSV_Handler+0x364>)
 8010ec8:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
    fir_sindex_buffer[ fir_head_index ] = raw_sample_buffer[raw_sample_start].s_index;
 8010ecc:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8010ece:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8010ed2:	6888      	ldr	r0, [r1, #8]
 8010ed4:	4925      	ldr	r1, [pc, #148]	; (8010f6c <PendSV_Handler+0x37c>)
 8010ed6:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
    fir_pps_buffer[ fir_head_index ] = raw_sample_buffer[raw_sample_start].pps;
 8010eda:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8010edc:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8010ee0:	7b09      	ldrb	r1, [r1, #12]
 8010ee2:	b2c9      	uxtb	r1, r1
 8010ee4:	481c      	ldr	r0, [pc, #112]	; (8010f58 <PendSV_Handler+0x368>)
 8010ee6:	5501      	strb	r1, [r0, r4]
    if( raw_sample_buffer[raw_sample_start].adc_value < raw_min_val )
 8010ee8:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8010eea:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010eee:	6859      	ldr	r1, [r3, #4]
 8010ef0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8010ef2:	4299      	cmp	r1, r3
 8010ef4:	da05      	bge.n	8010f02 <PendSV_Handler+0x312>
      raw_min_val = raw_sample_buffer[raw_sample_start].adc_value;
 8010ef6:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8010ef8:	4b1f      	ldr	r3, [pc, #124]	; (8010f78 <PendSV_Handler+0x388>)
 8010efa:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010efe:	685b      	ldr	r3, [r3, #4]
 8010f00:	6713      	str	r3, [r2, #112]	; 0x70
    if( raw_sample_buffer[raw_sample_start].adc_value > raw_max_val )
 8010f02:	4a19      	ldr	r2, [pc, #100]	; (8010f68 <PendSV_Handler+0x378>)
 8010f04:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8010f06:	4b1c      	ldr	r3, [pc, #112]	; (8010f78 <PendSV_Handler+0x388>)
 8010f08:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010f0c:	6859      	ldr	r1, [r3, #4]
 8010f0e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8010f10:	4299      	cmp	r1, r3
 8010f12:	dd05      	ble.n	8010f20 <PendSV_Handler+0x330>
      raw_max_val = raw_sample_buffer[raw_sample_start].adc_value;
 8010f14:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8010f16:	4b18      	ldr	r3, [pc, #96]	; (8010f78 <PendSV_Handler+0x388>)
 8010f18:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	6753      	str	r3, [r2, #116]	; 0x74
    raw_sample_start = ( raw_sample_start+1 )%RAW_BUFFER_LENGTH;
 8010f20:	4911      	ldr	r1, [pc, #68]	; (8010f68 <PendSV_Handler+0x378>)
 8010f22:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 8010f24:	3201      	adds	r2, #1
 8010f26:	4b15      	ldr	r3, [pc, #84]	; (8010f7c <PendSV_Handler+0x38c>)
 8010f28:	fba3 0302 	umull	r0, r3, r3, r2
 8010f2c:	095b      	lsrs	r3, r3, #5
 8010f2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010f32:	00d8      	lsls	r0, r3, #3
 8010f34:	1a13      	subs	r3, r2, r0
 8010f36:	668b      	str	r3, [r1, #104]	; 0x68
    fir_adcValue = 0;
 8010f38:	4b04      	ldr	r3, [pc, #16]	; (8010f4c <PendSV_Handler+0x35c>)
 8010f3a:	2000      	movs	r0, #0
 8010f3c:	2100      	movs	r1, #0
 8010f3e:	e01f      	b.n	8010f80 <PendSV_Handler+0x390>
 8010f40:	66666667 	.word	0x66666667
 8010f44:	2000f594 	.word	0x2000f594
 8010f48:	08015b20 	.word	0x08015b20
 8010f4c:	2000fb40 	.word	0x2000fb40
 8010f50:	000f4c48 	.word	0x000f4c48
 8010f54:	2000fa58 	.word	0x2000fa58
 8010f58:	2000fc38 	.word	0x2000fc38
 8010f5c:	200058b8 	.word	0x200058b8
 8010f60:	20001a24 	.word	0x20001a24
 8010f64:	2000f910 	.word	0x2000f910
 8010f68:	200022c8 	.word	0x200022c8
 8010f6c:	2000fb48 	.word	0x2000fb48
 8010f70:	2000f904 	.word	0x2000f904
 8010f74:	1b4e81b5 	.word	0x1b4e81b5
 8010f78:	2000f670 	.word	0x2000f670
 8010f7c:	cccccccd 	.word	0xcccccccd
 8010f80:	e9c3 0100 	strd	r0, r1, [r3]
    for( int i = 0; i < FIR_length; i++)
 8010f84:	2100      	movs	r1, #0
 8010f86:	e67c      	b.n	8010c82 <PendSV_Handler+0x92>
        adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength] = DATA_TYPE_PPS;
 8010f88:	4a62      	ldr	r2, [pc, #392]	; (8011114 <PendSV_Handler+0x524>)
 8010f8a:	6993      	ldr	r3, [r2, #24]
 8010f8c:	4403      	add	r3, r0
 8010f8e:	3301      	adds	r3, #1
 8010f90:	6910      	ldr	r0, [r2, #16]
 8010f92:	fbb3 f1f0 	udiv	r1, r3, r0
 8010f96:	fb00 3311 	mls	r3, r0, r1, r3
 8010f9a:	3308      	adds	r3, #8
 8010f9c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010fa0:	f04f 4302 	mov.w	r3, #2181038080	; 0x82000000
 8010fa4:	6053      	str	r3, [r2, #4]
 8010fa6:	e6ab      	b.n	8010d00 <PendSV_Handler+0x110>
        if( ( adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength]&0xFF000000 ) == DATA_TYPE_SINDEX )
 8010fa8:	495a      	ldr	r1, [pc, #360]	; (8011114 <PendSV_Handler+0x524>)
 8010faa:	698a      	ldr	r2, [r1, #24]
 8010fac:	4402      	add	r2, r0
 8010fae:	3201      	adds	r2, #1
 8010fb0:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8010fb4:	fbb2 fcfe 	udiv	ip, r2, lr
 8010fb8:	fb0e 221c 	mls	r2, lr, ip, r2
 8010fbc:	3208      	adds	r2, #8
 8010fbe:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010fc2:	684a      	ldr	r2, [r1, #4]
 8010fc4:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8010fc8:	f1b2 4f03 	cmp.w	r2, #2197815296	; 0x83000000
 8010fcc:	d013      	beq.n	8010ff6 <PendSV_Handler+0x406>
          adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength] = DATA_TYPE_SINDEX + fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 8010fce:	4a52      	ldr	r2, [pc, #328]	; (8011118 <PendSV_Handler+0x528>)
 8010fd0:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 8010fd4:	494f      	ldr	r1, [pc, #316]	; (8011114 <PendSV_Handler+0x524>)
 8010fd6:	698a      	ldr	r2, [r1, #24]
 8010fd8:	4402      	add	r2, r0
 8010fda:	3201      	adds	r2, #1
 8010fdc:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8010fe0:	fbb2 f0fe 	udiv	r0, r2, lr
 8010fe4:	fb0e 2210 	mls	r2, lr, r0, r2
 8010fe8:	f10c 4003 	add.w	r0, ip, #2197815296	; 0x83000000
 8010fec:	3208      	adds	r2, #8
 8010fee:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010ff2:	6048      	str	r0, [r1, #4]
 8010ff4:	e6e3      	b.n	8010dbe <PendSV_Handler+0x1ce>
          adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 2 ) % adcBuffer.bufferLength] = DATA_TYPE_SINDEX + fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 8010ff6:	4a48      	ldr	r2, [pc, #288]	; (8011118 <PendSV_Handler+0x528>)
 8010ff8:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 8010ffc:	4945      	ldr	r1, [pc, #276]	; (8011114 <PendSV_Handler+0x524>)
 8010ffe:	698a      	ldr	r2, [r1, #24]
 8011000:	4402      	add	r2, r0
 8011002:	3202      	adds	r2, #2
 8011004:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8011008:	fbb2 f0fe 	udiv	r0, r2, lr
 801100c:	fb0e 2210 	mls	r2, lr, r0, r2
 8011010:	f10c 4003 	add.w	r0, ip, #2197815296	; 0x83000000
 8011014:	3208      	adds	r2, #8
 8011016:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801101a:	6048      	str	r0, [r1, #4]
 801101c:	e6cf      	b.n	8010dbe <PendSV_Handler+0x1ce>
        adcBuffer.dataBuffer[( adcBuffer.dataEndPos + adcLatency + 1 ) % adcBuffer.bufferLength] = DATA_TYPE_SINDEX + fir_sindex_buffer[(fir_head_index + FIR_length/2)%FIR_length];
 801101e:	4a3e      	ldr	r2, [pc, #248]	; (8011118 <PendSV_Handler+0x528>)
 8011020:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 8011024:	493b      	ldr	r1, [pc, #236]	; (8011114 <PendSV_Handler+0x524>)
 8011026:	698a      	ldr	r2, [r1, #24]
 8011028:	4402      	add	r2, r0
 801102a:	3201      	adds	r2, #1
 801102c:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8011030:	fbb2 f0fe 	udiv	r0, r2, lr
 8011034:	fb0e 2210 	mls	r2, lr, r0, r2
 8011038:	f10c 4003 	add.w	r0, ip, #2197815296	; 0x83000000
 801103c:	3208      	adds	r2, #8
 801103e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011042:	6048      	str	r0, [r1, #4]
 8011044:	e6bb      	b.n	8010dbe <PendSV_Handler+0x1ce>
      adcBuffer.dataBuffer[ adcBuffer.dataEndPos ] = (int32_t)fir_adcValue;//linear interp seems broken(int32_t)sub_adc_val;
 8011046:	4b35      	ldr	r3, [pc, #212]	; (801111c <PendSV_Handler+0x52c>)
 8011048:	e9d3 0100 	ldrd	r0, r1, [r3]
 801104c:	4b31      	ldr	r3, [pc, #196]	; (8011114 <PendSV_Handler+0x524>)
 801104e:	699a      	ldr	r2, [r3, #24]
 8011050:	3208      	adds	r2, #8
 8011052:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8011056:	6050      	str	r0, [r2, #4]
      adcBuffer.dataEndPos = (adcBuffer.dataEndPos+1)%adcBuffer.bufferLength;
 8011058:	699a      	ldr	r2, [r3, #24]
 801105a:	3201      	adds	r2, #1
 801105c:	6918      	ldr	r0, [r3, #16]
 801105e:	fb92 f1f0 	sdiv	r1, r2, r0
 8011062:	fb00 2211 	mls	r2, r0, r1, r2
 8011066:	619a      	str	r2, [r3, #24]
      while( ( adcBuffer.dataBuffer[ adcBuffer.dataEndPos ] != 0 ) && ( ( adcBuffer.dataEndPos+adcLatency+2 )%adcBuffer.bufferLength != adcBuffer.startPos ) )
 8011068:	e008      	b.n	801107c <PendSV_Handler+0x48c>
        adcBuffer.dataEndPos = (adcBuffer.dataEndPos+1)%adcBuffer.bufferLength;
 801106a:	4a2a      	ldr	r2, [pc, #168]	; (8011114 <PendSV_Handler+0x524>)
 801106c:	6993      	ldr	r3, [r2, #24]
 801106e:	3301      	adds	r3, #1
 8011070:	6910      	ldr	r0, [r2, #16]
 8011072:	fb93 f1f0 	sdiv	r1, r3, r0
 8011076:	fb00 3311 	mls	r3, r0, r1, r3
 801107a:	6193      	str	r3, [r2, #24]
      while( ( adcBuffer.dataBuffer[ adcBuffer.dataEndPos ] != 0 ) && ( ( adcBuffer.dataEndPos+adcLatency+2 )%adcBuffer.bufferLength != adcBuffer.startPos ) )
 801107c:	4b25      	ldr	r3, [pc, #148]	; (8011114 <PendSV_Handler+0x524>)
 801107e:	699a      	ldr	r2, [r3, #24]
 8011080:	3208      	adds	r2, #8
 8011082:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	b16b      	cbz	r3, 80110a6 <PendSV_Handler+0x4b6>
 801108a:	4922      	ldr	r1, [pc, #136]	; (8011114 <PendSV_Handler+0x524>)
 801108c:	698b      	ldr	r3, [r1, #24]
 801108e:	4a24      	ldr	r2, [pc, #144]	; (8011120 <PendSV_Handler+0x530>)
 8011090:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011092:	4413      	add	r3, r2
 8011094:	3302      	adds	r3, #2
 8011096:	6908      	ldr	r0, [r1, #16]
 8011098:	fbb3 f2f0 	udiv	r2, r3, r0
 801109c:	fb00 3312 	mls	r3, r0, r2, r3
 80110a0:	694a      	ldr	r2, [r1, #20]
 80110a2:	4293      	cmp	r3, r2
 80110a4:	d1e1      	bne.n	801106a <PendSV_Handler+0x47a>
      if( (adcBuffer.dataEndPos+adcLatency+2)%adcBuffer.bufferLength == adcBuffer.startPos  ) //test for full buffer, allow space for PPS
 80110a6:	491b      	ldr	r1, [pc, #108]	; (8011114 <PendSV_Handler+0x524>)
 80110a8:	698b      	ldr	r3, [r1, #24]
 80110aa:	4a1d      	ldr	r2, [pc, #116]	; (8011120 <PendSV_Handler+0x530>)
 80110ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80110ae:	4413      	add	r3, r2
 80110b0:	3302      	adds	r3, #2
 80110b2:	6908      	ldr	r0, [r1, #16]
 80110b4:	fbb3 f2f0 	udiv	r2, r3, r0
 80110b8:	fb00 3312 	mls	r3, r0, r2, r3
 80110bc:	694a      	ldr	r2, [r1, #20]
 80110be:	4293      	cmp	r3, r2
 80110c0:	d00b      	beq.n	80110da <PendSV_Handler+0x4ea>
      adcBuffer.freshData = TRUE;
 80110c2:	4a14      	ldr	r2, [pc, #80]	; (8011114 <PendSV_Handler+0x524>)
 80110c4:	f649 4364 	movw	r3, #40036	; 0x9c64
 80110c8:	2101      	movs	r1, #1
 80110ca:	54d1      	strb	r1, [r2, r3]
      cur_sample_num++;
 80110cc:	4a15      	ldr	r2, [pc, #84]	; (8011124 <PendSV_Handler+0x534>)
 80110ce:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80110d2:	440b      	add	r3, r1
 80110d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80110d8:	e6c8      	b.n	8010e6c <PendSV_Handler+0x27c>
        buffer_overflows++;
 80110da:	4a13      	ldr	r2, [pc, #76]	; (8011128 <PendSV_Handler+0x538>)
 80110dc:	6813      	ldr	r3, [r2, #0]
 80110de:	3301      	adds	r3, #1
 80110e0:	6013      	str	r3, [r2, #0]
        adcBuffer.dataBuffer[adcBuffer.startPos] = 0; //clear out the value for fresh data
 80110e2:	460b      	mov	r3, r1
 80110e4:	694a      	ldr	r2, [r1, #20]
 80110e6:	3208      	adds	r2, #8
 80110e8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80110ec:	2100      	movs	r1, #0
 80110ee:	6051      	str	r1, [r2, #4]
        adcBuffer.startPos = (adcBuffer.startPos+1)%adcBuffer.bufferLength; //increment startPos (new data over-rules old data)
 80110f0:	695a      	ldr	r2, [r3, #20]
 80110f2:	3201      	adds	r2, #1
 80110f4:	6918      	ldr	r0, [r3, #16]
 80110f6:	fb92 f1f0 	sdiv	r1, r2, r0
 80110fa:	fb00 2211 	mls	r2, r0, r1, r2
 80110fe:	615a      	str	r2, [r3, #20]
 8011100:	e7df      	b.n	80110c2 <PendSV_Handler+0x4d2>
  //measure how long we took processing the data
  //uint32_t end_time_cnt = GPTD5.tim->CNT;
  //time_cnt = end_time_cnt - time_cnt;
  //time_cnt = GPTD5.tim->CNT - time_cnt;
//  palClearPad(GPIOB, 5U); /* drive SPI_MOSI low */
  CH_IRQ_EPILOGUE();
 8011102:	f7f6 fcc5 	bl	8007a90 <_dbg_check_leave_isr>
 8011106:	4809      	ldr	r0, [pc, #36]	; (801112c <PendSV_Handler+0x53c>)
 8011108:	f7f6 fd9a 	bl	8007c40 <_trace_isr_leave>
 801110c:	f7fa fd20 	bl	800bb50 <_port_irq_epilogue>
}
 8011110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011114:	200058b8 	.word	0x200058b8
 8011118:	2000fb48 	.word	0x2000fb48
 801111c:	2000fb40 	.word	0x2000fb40
 8011120:	20001a24 	.word	0x20001a24
 8011124:	200022c8 	.word	0x200022c8
 8011128:	2000f8f4 	.word	0x2000f8f4
 801112c:	08015b58 	.word	0x08015b58

08011130 <VectorCC>:
 */
uint32_t tmp_data[4];
CH_FAST_IRQ_HANDLER(STM32_SPI1_HANDLER)
{
  //fast interrupt, don't use os calls
  tmp_data_value = ( tmp_data_value << 16 ) + (uint32_t)SPID1.spi->DR;
 8011130:	4a22      	ldr	r2, [pc, #136]	; (80111bc <VectorCC+0x8c>)
 8011132:	6811      	ldr	r1, [r2, #0]
 8011134:	4b22      	ldr	r3, [pc, #136]	; (80111c0 <VectorCC+0x90>)
 8011136:	69d8      	ldr	r0, [r3, #28]
 8011138:	68c3      	ldr	r3, [r0, #12]
 801113a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801113e:	6013      	str	r3, [r2, #0]
  if( byte_index++ >=1 )
 8011140:	4920      	ldr	r1, [pc, #128]	; (80111c4 <VectorCC+0x94>)
 8011142:	780b      	ldrb	r3, [r1, #0]
 8011144:	b2db      	uxtb	r3, r3
 8011146:	1c5a      	adds	r2, r3, #1
 8011148:	b2d2      	uxtb	r2, r2
 801114a:	700a      	strb	r2, [r1, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d031      	beq.n	80111b4 <VectorCC+0x84>
  {
    raw_sample_buffer[raw_sample_end].adc_value = tmp_data_value;//raw_sample_buffer[raw_sample_end].gpt_cnt;// tmp_data_value;
 8011150:	4a1d      	ldr	r2, [pc, #116]	; (80111c8 <VectorCC+0x98>)
 8011152:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8011154:	4b19      	ldr	r3, [pc, #100]	; (80111bc <VectorCC+0x8c>)
 8011156:	6819      	ldr	r1, [r3, #0]
 8011158:	4b1c      	ldr	r3, [pc, #112]	; (80111cc <VectorCC+0x9c>)
 801115a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801115e:	6059      	str	r1, [r3, #4]

    //trigger filter code when buffer is half full and full-full
    if( (raw_sample_end+1)%( RAW_BUFFER_LENGTH/2 ) == 0 )
 8011160:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8011162:	3201      	adds	r2, #1
 8011164:	4b1a      	ldr	r3, [pc, #104]	; (80111d0 <VectorCC+0xa0>)
 8011166:	fba3 1302 	umull	r1, r3, r3, r2
 801116a:	091b      	lsrs	r3, r3, #4
 801116c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011170:	0099      	lsls	r1, r3, #2
 8011172:	428a      	cmp	r2, r1
 8011174:	d110      	bne.n	8011198 <VectorCC+0x68>
    {
      SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8011176:	4a17      	ldr	r2, [pc, #92]	; (80111d4 <VectorCC+0xa4>)
 8011178:	6853      	ldr	r3, [r2, #4]
 801117a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801117e:	6053      	str	r3, [r2, #4]
      raw_sample_start = ( raw_sample_end + 1 + RAW_BUFFER_LENGTH/2 )%RAW_BUFFER_LENGTH; //hard set start to 0 or half
 8011180:	4911      	ldr	r1, [pc, #68]	; (80111c8 <VectorCC+0x98>)
 8011182:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8011184:	3215      	adds	r2, #21
 8011186:	4b12      	ldr	r3, [pc, #72]	; (80111d0 <VectorCC+0xa0>)
 8011188:	fba3 0302 	umull	r0, r3, r3, r2
 801118c:	095b      	lsrs	r3, r3, #5
 801118e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011192:	00d8      	lsls	r0, r3, #3
 8011194:	1a13      	subs	r3, r2, r0
 8011196:	668b      	str	r3, [r1, #104]	; 0x68
    }

    //check if drdy ahs already gone low, showing we took too long to read thedata
    if( palReadPad(GPIOE, 15U) == PAL_LOW ) //too slow
 8011198:	4b0f      	ldr	r3, [pc, #60]	; (80111d8 <VectorCC+0xa8>)
 801119a:	691b      	ldr	r3, [r3, #16]
 801119c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80111a0:	d10a      	bne.n	80111b8 <VectorCC+0x88>
    {
      //chprintf((BaseSequentialStream*)&SD6, "\nmissed adc read\n\r");
      missed_adc_flag = true;
 80111a2:	4b09      	ldr	r3, [pc, #36]	; (80111c8 <VectorCC+0x98>)
 80111a4:	2201      	movs	r2, #1
 80111a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      missed_sample_cnt++;
 80111aa:	4a0c      	ldr	r2, [pc, #48]	; (80111dc <VectorCC+0xac>)
 80111ac:	6813      	ldr	r3, [r2, #0]
 80111ae:	3301      	adds	r3, #1
 80111b0:	6013      	str	r3, [r2, #0]
 80111b2:	4770      	bx	lr
    }
  }
  else
  {
    SPID1.spi->DR = 0xFF; //write to DR to intiate another transfer
 80111b4:	23ff      	movs	r3, #255	; 0xff
 80111b6:	60c3      	str	r3, [r0, #12]
  }

}
 80111b8:	4770      	bx	lr
 80111ba:	bf00      	nop
 80111bc:	2000f90c 	.word	0x2000f90c
 80111c0:	200046cc 	.word	0x200046cc
 80111c4:	200058b0 	.word	0x200058b0
 80111c8:	200022c8 	.word	0x200022c8
 80111cc:	2000f670 	.word	0x2000f670
 80111d0:	cccccccd 	.word	0xcccccccd
 80111d4:	e000ed00 	.word	0xe000ed00
 80111d8:	40021000 	.word	0x40021000
 80111dc:	2000f520 	.word	0x2000f520

080111e0 <spi1_custom_start>:
/*
 * non dma spi config code
 */
void spi1_custom_start(SPIDriver *spip, const SPIConfig *config)
{
  spip->config = config;
 80111e0:	6041      	str	r1, [r0, #4]
  /* enable SPI1 clock */
  rccEnableSPI1(true);
 80111e2:	4b13      	ldr	r3, [pc, #76]	; (8011230 <spi1_custom_start+0x50>)
 80111e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80111ea:	645a      	str	r2, [r3, #68]	; 0x44
 80111ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80111ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80111f2:	665a      	str	r2, [r3, #100]	; 0x64
 80111f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  /* SPI setup and enable. Use same BR and POL settings as HAL config */
  spip->spi->CR1 &= ~( SPI_CR1_SPE ); //clear SPE and BIDIOE
 80111f6:	69c2      	ldr	r2, [r0, #28]
 80111f8:	6813      	ldr	r3, [r2, #0]
 80111fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111fe:	6013      	str	r3, [r2, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8011200:	6843      	ldr	r3, [r0, #4]
 8011202:	8a1b      	ldrh	r3, [r3, #16]
 8011204:	69c2      	ldr	r2, [r0, #28]
                    SPI_CR1_SSI | SPI_CR1_DFF;
 8011206:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 801120a:	f043 0304 	orr.w	r3, r3, #4
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 801120e:	6013      	str	r3, [r2, #0]
  spip->spi->CR2 &= ~( SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN ); //disable dma bufers
 8011210:	69c2      	ldr	r2, [r0, #28]
 8011212:	6853      	ldr	r3, [r2, #4]
 8011214:	f023 0303 	bic.w	r3, r3, #3
 8011218:	6053      	str	r3, [r2, #4]
  spip->spi->CR2 |= SPI_CR2_RXNEIE;   //enable rx interrupt
 801121a:	69c2      	ldr	r2, [r0, #28]
 801121c:	6853      	ldr	r3, [r2, #4]
 801121e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011222:	6053      	str	r3, [r2, #4]
  spip->spi->CR1 |= SPI_CR1_SPE; //clear SPE and BIDIOE
 8011224:	69c2      	ldr	r2, [r0, #28]
 8011226:	6813      	ldr	r3, [r2, #0]
 8011228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801122c:	6013      	str	r3, [r2, #0]

}
 801122e:	4770      	bx	lr
 8011230:	40023800 	.word	0x40023800
 8011234:	f3af 8000 	nop.w
 8011238:	f3af 8000 	nop.w
 801123c:	f3af 8000 	nop.w

08011240 <ads1282_init>:
#define CONFIG1_DISABLE_CHOP 0x00 //config1 value for chopper disabled
#define CONFIG1_ENABLE_CHOP 0x80 //config1 value for chopper enabled
#define CHOP_BIT 0x08 //chopper enable bit for PGA
char txbuf;
uint8_t ads1282_init()
{
 8011240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /*
   * start ADC spi interface
   */
  palSetPadMode(GPIOB, 5U, PAL_MODE_ALTERNATE(5)| PAL_STM32_OSPEED_HIGHEST); //SPI1_MOSI
 8011244:	4f4c      	ldr	r7, [pc, #304]	; (8011378 <ads1282_init+0x138>)
 8011246:	f240 229a 	movw	r2, #666	; 0x29a
 801124a:	2120      	movs	r1, #32
 801124c:	4638      	mov	r0, r7
 801124e:	f7f3 fe77 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 6U, PAL_MODE_ALTERNATE(5)| PAL_STM32_OSPEED_HIGHEST); //SPI1_MISO
 8011252:	4c4a      	ldr	r4, [pc, #296]	; (801137c <ads1282_init+0x13c>)
 8011254:	f240 229a 	movw	r2, #666	; 0x29a
 8011258:	2140      	movs	r1, #64	; 0x40
 801125a:	4620      	mov	r0, r4
 801125c:	f7f3 fe70 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 5U, PAL_MODE_ALTERNATE(5)| PAL_STM32_OSPEED_HIGHEST); //SPI1_CLK
 8011260:	f240 229a 	movw	r2, #666	; 0x29a
 8011264:	2120      	movs	r1, #32
 8011266:	4620      	mov	r0, r4
 8011268:	f7f3 fe6a 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 4U, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST); //CS
 801126c:	2219      	movs	r2, #25
 801126e:	2110      	movs	r1, #16
 8011270:	4620      	mov	r0, r4
 8011272:	f7f3 fe65 	bl	8004f40 <_pal_lld_setgroupmode>

  spiStart(&SPID1,  &ads1282ADC_spicfg);
 8011276:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8011390 <ads1282_init+0x150>
 801127a:	4d41      	ldr	r5, [pc, #260]	; (8011380 <ads1282_init+0x140>)
 801127c:	4649      	mov	r1, r9
 801127e:	4628      	mov	r0, r5
 8011280:	f7f2 f89e 	bl	80033c0 <spiStart>

  /*
   * write config values to adc registers
   */
  chThdSleepMilliseconds(1000);
 8011284:	483f      	ldr	r0, [pc, #252]	; (8011384 <ads1282_init+0x144>)
 8011286:	2100      	movs	r1, #0
 8011288:	f7f7 fbfa 	bl	8008a80 <chThdSleep>
  txbuf = 0x00; //wakeup
 801128c:	4c3e      	ldr	r4, [pc, #248]	; (8011388 <ads1282_init+0x148>)
 801128e:	f04f 0800 	mov.w	r8, #0
 8011292:	f884 8000 	strb.w	r8, [r4]
  spiSend(&SPID1, 1, &txbuf);
 8011296:	4622      	mov	r2, r4
 8011298:	2101      	movs	r1, #1
 801129a:	4628      	mov	r0, r5
 801129c:	f7f2 fb60 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 80112a0:	2064      	movs	r0, #100	; 0x64
 80112a2:	2100      	movs	r1, #0
 80112a4:	f7f7 fbec 	bl	8008a80 <chThdSleep>
  txbuf = 0x06; //reset
 80112a8:	2306      	movs	r3, #6
 80112aa:	7023      	strb	r3, [r4, #0]
  spiSend(&SPID1, 1, &txbuf);
 80112ac:	4622      	mov	r2, r4
 80112ae:	2101      	movs	r1, #1
 80112b0:	4628      	mov	r0, r5
 80112b2:	f7f2 fb55 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 80112b6:	2064      	movs	r0, #100	; 0x64
 80112b8:	2100      	movs	r1, #0
 80112ba:	f7f7 fbe1 	bl	8008a80 <chThdSleep>
  txbuf = SDATAC; //stop continous conversion
 80112be:	2311      	movs	r3, #17
 80112c0:	7023      	strb	r3, [r4, #0]
  spiSend(&SPID1, 1, &txbuf);
 80112c2:	4622      	mov	r2, r4
 80112c4:	2101      	movs	r1, #1
 80112c6:	4628      	mov	r0, r5
 80112c8:	f7f2 fb4a 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 80112cc:	2064      	movs	r0, #100	; 0x64
 80112ce:	2100      	movs	r1, #0
 80112d0:	f7f7 fbd6 	bl	8008a80 <chThdSleep>
  txbuf = WREG | CONFIG0_ADDR; //write to CONFIG0 address
 80112d4:	2341      	movs	r3, #65	; 0x41
 80112d6:	7023      	strb	r3, [r4, #0]
  spiSend(&SPID1, 1, &txbuf);
 80112d8:	4622      	mov	r2, r4
 80112da:	2101      	movs	r1, #1
 80112dc:	4628      	mov	r0, r5
 80112de:	f7f2 fb3f 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 80112e2:	2064      	movs	r0, #100	; 0x64
 80112e4:	2100      	movs	r1, #0
 80112e6:	f7f7 fbcb 	bl	8008a80 <chThdSleep>
  txbuf = 0x01; //write 2 bytes, CONFIG0 and CONFIG1
 80112ea:	2601      	movs	r6, #1
 80112ec:	7026      	strb	r6, [r4, #0]
  spiSend(&SPID1, 1, &txbuf);
 80112ee:	4622      	mov	r2, r4
 80112f0:	4631      	mov	r1, r6
 80112f2:	4628      	mov	r0, r5
 80112f4:	f7f2 fb34 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 80112f8:	2064      	movs	r0, #100	; 0x64
 80112fa:	2100      	movs	r1, #0
 80112fc:	f7f7 fbc0 	bl	8008a80 <chThdSleep>
  //txbuf = FILT_SINC | DR_16KSPS | 0x40; //config value to write
  txbuf = FILT_SINC | DR_32KSPS | 0x40; //config value to write
 8011300:	2351      	movs	r3, #81	; 0x51
 8011302:	7023      	strb	r3, [r4, #0]
  spiSend(&SPID1, 1, &txbuf);
 8011304:	4622      	mov	r2, r4
 8011306:	4631      	mov	r1, r6
 8011308:	4628      	mov	r0, r5
 801130a:	f7f2 fb29 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 801130e:	2064      	movs	r0, #100	; 0x64
 8011310:	2100      	movs	r1, #0
 8011312:	f7f7 fbb5 	bl	8008a80 <chThdSleep>
  txbuf = CONFIG1_DISABLE_CHOP; //config1 MUX 000, CHOP disabled PGA gain = 1
 8011316:	f884 8000 	strb.w	r8, [r4]
  spiSend(&SPID1, 1, &txbuf);
 801131a:	4622      	mov	r2, r4
 801131c:	4631      	mov	r1, r6
 801131e:	4628      	mov	r0, r5
 8011320:	f7f2 fb1e 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 8011324:	2064      	movs	r0, #100	; 0x64
 8011326:	2100      	movs	r1, #0
 8011328:	f7f7 fbaa 	bl	8008a80 <chThdSleep>
  txbuf = RDATAC; //enable continuous conversion
 801132c:	2310      	movs	r3, #16
 801132e:	7023      	strb	r3, [r4, #0]
  spiSend(&SPID1, 1, &txbuf);
 8011330:	4622      	mov	r2, r4
 8011332:	4631      	mov	r1, r6
 8011334:	4628      	mov	r0, r5
 8011336:	f7f2 fb13 	bl	8003960 <spiSend>
  chThdSleepMilliseconds(1);
 801133a:	2064      	movs	r0, #100	; 0x64
 801133c:	2100      	movs	r1, #0
 801133e:	f7f7 fb9f 	bl	8008a80 <chThdSleep>
  txbuf = 0x00; //wakeup
 8011342:	f884 8000 	strb.w	r8, [r4]
  spiSend(&SPID1, 1, &txbuf);
 8011346:	4622      	mov	r2, r4
 8011348:	4631      	mov	r1, r6
 801134a:	4628      	mov	r0, r5
 801134c:	f7f2 fb08 	bl	8003960 <spiSend>

  //configure MOSI as digital out, hold low to enable ADC
  palSetPadMode(GPIOB, 5U, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST); //SPI1_MOSI held low for now
 8011350:	2219      	movs	r2, #25
 8011352:	2120      	movs	r1, #32
 8011354:	4638      	mov	r0, r7
 8011356:	f7f3 fdf3 	bl	8004f40 <_pal_lld_setgroupmode>
  palClearPad(GPIOB, 5U); /* drive SPI_MOSI low for ADC */
 801135a:	2320      	movs	r3, #32
 801135c:	837b      	strh	r3, [r7, #26]
  enable_spi_cb = true;
 801135e:	4b0b      	ldr	r3, [pc, #44]	; (801138c <ads1282_init+0x14c>)
 8011360:	f883 6099 	strb.w	r6, [r3, #153]	; 0x99

  //disable current SPI config to disable DMA etc
  spiStop(&SPID1);
 8011364:	4628      	mov	r0, r5
 8011366:	f7f2 f86b 	bl	8003440 <spiStop>
  //re-config SPI
  spi1_custom_start(&SPID1, &ads1282ADC_spicfg);
 801136a:	4649      	mov	r1, r9
 801136c:	4628      	mov	r0, r5
 801136e:	f7ff ff37 	bl	80111e0 <spi1_custom_start>

  return true;

}
 8011372:	4630      	mov	r0, r6
 8011374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011378:	40020400 	.word	0x40020400
 801137c:	40020000 	.word	0x40020000
 8011380:	200046cc 	.word	0x200046cc
 8011384:	000186a0 	.word	0x000186a0
 8011388:	2000fbcc 	.word	0x2000fbcc
 801138c:	200022c8 	.word	0x200022c8
 8011390:	08015bb8 	.word	0x08015bb8
 8011394:	f3af 8000 	nop.w
 8011398:	f3af 8000 	nop.w
 801139c:	f3af 8000 	nop.w

080113a0 <init_adc>:

/*
 * ADC initialization thread
 */
char init_adc()
{
 80113a0:	b538      	push	{r3, r4, r5, lr}
  //bool last_pps = 0;
  //uint32_t adcLatency = 10; //latency between ADC data output and current time
  //uint32_t adcValue;

  /* init ADC interface */
  chMtxObjectInit( &adcBuffer.adcMutex );
 80113a2:	4c2c      	ldr	r4, [pc, #176]	; (8011454 <init_adc+0xb4>)
 80113a4:	4620      	mov	r0, r4
 80113a6:	f7f8 f8fb 	bl	80095a0 <chMtxObjectInit>
  ads1282_init();
 80113aa:	f7ff ff49 	bl	8011240 <ads1282_init>

  chprintf((BaseSequentialStream*)&SD6, "\n\rads1282 init\n");
 80113ae:	4d2a      	ldr	r5, [pc, #168]	; (8011458 <init_adc+0xb8>)
 80113b0:	492a      	ldr	r1, [pc, #168]	; (801145c <init_adc+0xbc>)
 80113b2:	4628      	mov	r0, r5
 80113b4:	f7fa fd5c 	bl	800be70 <chprintf>
  /* show info on system time */
  chprintf((BaseSequentialStream*)&SD6, "\n\r system resolution is %i ticks/second\n",TIME_MS2I(1000));
 80113b8:	4a29      	ldr	r2, [pc, #164]	; (8011460 <init_adc+0xc0>)
 80113ba:	2300      	movs	r3, #0
 80113bc:	4929      	ldr	r1, [pc, #164]	; (8011464 <init_adc+0xc4>)
 80113be:	4628      	mov	r0, r5
 80113c0:	f7fa fd56 	bl	800be70 <chprintf>
  //initialize the shared buffer
  chMtxLock( &adcBuffer.adcMutex );  //lock the mutex
 80113c4:	4620      	mov	r0, r4
 80113c6:	f7f8 f97b 	bl	80096c0 <chMtxLock>
  adcBuffer.bufferLength = ADC_BUFFER_LENGTH; //sizeof( adcBuffer.dataBuffer/sizeof(adcValue));
 80113ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80113ce:	6123      	str	r3, [r4, #16]
  adcBuffer.dataEndPos = 1;
 80113d0:	2301      	movs	r3, #1
 80113d2:	61a3      	str	r3, [r4, #24]
  adcBuffer.startPos = 0;
 80113d4:	2500      	movs	r5, #0
 80113d6:	6165      	str	r5, [r4, #20]
  adcBuffer.PPSPos = -1;
 80113d8:	f04f 32ff 	mov.w	r2, #4294967295
 80113dc:	61e2      	str	r2, [r4, #28]
  adcBuffer.SIndexPos = -1;
 80113de:	6222      	str	r2, [r4, #32]
  adcBuffer.freshData = TRUE;
 80113e0:	f649 4264 	movw	r2, #40036	; 0x9c64
 80113e4:	54a3      	strb	r3, [r4, r2]
  chMtxUnlock( &adcBuffer.adcMutex );  //lock the mutex
 80113e6:	4620      	mov	r0, r4
 80113e8:	f7f8 f9da 	bl	80097a0 <chMtxUnlock>

  missed_sample_cnt = 0;
 80113ec:	4b1e      	ldr	r3, [pc, #120]	; (8011468 <init_adc+0xc8>)
 80113ee:	601d      	str	r5, [r3, #0]
  buffer_overflows = 0;
 80113f0:	4b1e      	ldr	r3, [pc, #120]	; (801146c <init_adc+0xcc>)
 80113f2:	601d      	str	r5, [r3, #0]
  * Enable hardware interrupt events on falling edge of DRDY of ADC
  */
  // enable PendSVR interrupt

  //enable the vector and set priority
  nvicEnableVector(SPI1_IRQn, 0);
 80113f4:	4629      	mov	r1, r5
 80113f6:	2023      	movs	r0, #35	; 0x23
 80113f8:	f7f2 fe3a 	bl	8004070 <nvicEnableVector>
  //nvicSetSystemHandlerPriority(STM32_SPI1_HANDLER, 1); //PendSV_Handler HANDLER_PENDSV

  //enable PendSV for handling SPI data
  nvicEnableVector(PendSV_IRQn, 4);
 80113fc:	2104      	movs	r1, #4
 80113fe:	f06f 0001 	mvn.w	r0, #1
 8011402:	f7f2 fe35 	bl	8004070 <nvicEnableVector>
  nvicSetSystemHandlerPriority(HANDLER_PENDSV, 4); //PendSV_Handler HANDLER_PENDSV
 8011406:	2104      	movs	r1, #4
 8011408:	200a      	movs	r0, #10
 801140a:	f7f2 fe59 	bl	80040c0 <nvicSetSystemHandlerPriority>
 801140e:	2320      	movs	r3, #32
 8011410:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8011414:	f7f7 fdbc 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8011418:	f7f6 faba 	bl	8007990 <_dbg_check_lock>


  //already configured as an input in board.h
  palEnablePadEvent(GPIOE, 15U, PAL_EVENT_MODE_FALLING_EDGE);
 801141c:	2202      	movs	r2, #2
 801141e:	210f      	movs	r1, #15
 8011420:	4813      	ldr	r0, [pc, #76]	; (8011470 <init_adc+0xd0>)
 8011422:	f7f3 fe05 	bl	8005030 <_pal_lld_enablepadevent>
  _dbg_check_unlock();
 8011426:	f7f6 facb 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 801142a:	f7f7 fdb9 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 801142e:	4b11      	ldr	r3, [pc, #68]	; (8011474 <init_adc+0xd4>)
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	429a      	cmp	r2, r3
 8011434:	d004      	beq.n	8011440 <init_adc+0xa0>
 8011436:	699b      	ldr	r3, [r3, #24]
 8011438:	6899      	ldr	r1, [r3, #8]
 801143a:	6893      	ldr	r3, [r2, #8]
 801143c:	4299      	cmp	r1, r3
 801143e:	d304      	bcc.n	801144a <init_adc+0xaa>
 8011440:	2300      	movs	r3, #0
 8011442:	f383 8811 	msr	BASEPRI, r3
  /* Assigning a callback to ADC DRDY falling  edge event, passing no arguments.*/
  //palSetPadCallback(GPIOE, 15U, drdy_cb, NULL);

  return 1;

}
 8011446:	2001      	movs	r0, #1
 8011448:	bd38      	pop	{r3, r4, r5, pc}
 801144a:	480b      	ldr	r0, [pc, #44]	; (8011478 <init_adc+0xd8>)
 801144c:	f7f6 f910 	bl	8007670 <chSysHalt>
 8011450:	e7f6      	b.n	8011440 <init_adc+0xa0>
 8011452:	bf00      	nop
 8011454:	200058b8 	.word	0x200058b8
 8011458:	20004c10 	.word	0x20004c10
 801145c:	0801613c 	.word	0x0801613c
 8011460:	000186a0 	.word	0x000186a0
 8011464:	0801614c 	.word	0x0801614c
 8011468:	2000f520 	.word	0x2000f520
 801146c:	2000f8f4 	.word	0x2000f8f4
 8011470:	40021000 	.word	0x40021000
 8011474:	20004f68 	.word	0x20004f68
 8011478:	08015b20 	.word	0x08015b20
 801147c:	f3af 8000 	nop.w

08011480 <new_filename>:
/*
 * helper function to make the data file filename strin
 */
char data_filename[] = "00000000000"; //AAA00000.BIN";
char *new_filename()
{
 8011480:	b510      	push	{r4, lr}
 8011482:	b082      	sub	sp, #8
//  data_filename = "0000000000";
  char file_number_string[] = "000000";
 8011484:	4b19      	ldr	r3, [pc, #100]	; (80114ec <new_filename+0x6c>)
 8011486:	e893 0003 	ldmia.w	r3, {r0, r1}
 801148a:	9000      	str	r0, [sp, #0]
 801148c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011490:	0c09      	lsrs	r1, r1, #16
 8011492:	f88d 1006 	strb.w	r1, [sp, #6]
  //char node_id[] = "   ";
//  uint8_t file_num_length;

  memcpy( data_filename, node_config.device_id , 3); //copy device id to 1st 3 characters
 8011496:	4c16      	ldr	r4, [pc, #88]	; (80114f0 <new_filename+0x70>)
 8011498:	4a16      	ldr	r2, [pc, #88]	; (80114f4 <new_filename+0x74>)
 801149a:	6a13      	ldr	r3, [r2, #32]
 801149c:	8623      	strh	r3, [r4, #48]	; 0x30
 801149e:	0c1b      	lsrs	r3, r3, #16
 80114a0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  data_filename[3] = 0; //null terminate to make a string
 80114a4:	2300      	movs	r3, #0
 80114a6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  chsnprintf( file_number_string, 6, "%d",node_config.next_file++);
 80114aa:	f8d2 3023 	ldr.w	r3, [r2, #35]	; 0x23
 80114ae:	1c59      	adds	r1, r3, #1
 80114b0:	f8c2 1023 	str.w	r1, [r2, #35]	; 0x23
 80114b4:	4a10      	ldr	r2, [pc, #64]	; (80114f8 <new_filename+0x78>)
 80114b6:	2106      	movs	r1, #6
 80114b8:	4668      	mov	r0, sp
 80114ba:	f7fa fd21 	bl	800bf00 <chsnprintf>
  strcat(data_filename,file_number_string); //keep filename length constant. Pad with 0's
 80114be:	3430      	adds	r4, #48	; 0x30
 80114c0:	4669      	mov	r1, sp
 80114c2:	4620      	mov	r0, r4
 80114c4:	f002 fc74 	bl	8013db0 <strcat>
  strcat(data_filename,".BIN");
 80114c8:	4620      	mov	r0, r4
 80114ca:	f002 fbb9 	bl	8013c40 <strlen>
 80114ce:	4602      	mov	r2, r0
 80114d0:	1821      	adds	r1, r4, r0
 80114d2:	4b0a      	ldr	r3, [pc, #40]	; (80114fc <new_filename+0x7c>)
 80114d4:	6818      	ldr	r0, [r3, #0]
 80114d6:	50a0      	str	r0, [r4, r2]
 80114d8:	791b      	ldrb	r3, [r3, #4]
 80114da:	710b      	strb	r3, [r1, #4]

  chprintf((BaseSequentialStream*)&SD6, "\r\nnew data filename: %s \r\n", data_filename);
 80114dc:	4622      	mov	r2, r4
 80114de:	4908      	ldr	r1, [pc, #32]	; (8011500 <new_filename+0x80>)
 80114e0:	4808      	ldr	r0, [pc, #32]	; (8011504 <new_filename+0x84>)
 80114e2:	f7fa fcc5 	bl	800be70 <chprintf>

  return data_filename;
}
 80114e6:	4620      	mov	r0, r4
 80114e8:	b002      	add	sp, #8
 80114ea:	bd10      	pop	{r4, pc}
 80114ec:	080161a0 	.word	0x080161a0
 80114f0:	20001a24 	.word	0x20001a24
 80114f4:	200022c8 	.word	0x200022c8
 80114f8:	08016178 	.word	0x08016178
 80114fc:	0801617c 	.word	0x0801617c
 8011500:	08016184 	.word	0x08016184
 8011504:	20004c10 	.word	0x20004c10
 8011508:	f3af 8000 	nop.w
 801150c:	f3af 8000 	nop.w

08011510 <new_logfile>:
/*
 * helper function to open a new data file
 */

FRESULT new_logfile( BaseSequentialStream *chp, FIL *fp)
{
 8011510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011512:	4607      	mov	r7, r0
 8011514:	460e      	mov	r6, r1
//  uint32_t bytes_written;
//  uint8_t tries = 0;
//  FIL testFP;
  char *path;

  path = new_filename();
 8011516:	f7ff ffb3 	bl	8011480 <new_filename>
 801151a:	4605      	mov	r5, r0
  err = f_open (fp, path, (FA_CREATE_NEW | FA_WRITE) ); //open a new data file
 801151c:	2206      	movs	r2, #6
 801151e:	4601      	mov	r1, r0
 8011520:	4630      	mov	r0, r6
 8011522:	f7fd fa15 	bl	800e950 <f_open>
 8011526:	4604      	mov	r4, r0
  //test to see if the filename already exists
  while( err == FR_EXIST )
 8011528:	e008      	b.n	801153c <new_logfile+0x2c>
  {
    //try again. Note new_filename() auto-increments file number.
    path = new_filename();
 801152a:	f7ff ffa9 	bl	8011480 <new_filename>
 801152e:	4605      	mov	r5, r0
    err = f_open (fp, path, (FA_CREATE_NEW | FA_WRITE) ); //open a new data file
 8011530:	2206      	movs	r2, #6
 8011532:	4601      	mov	r1, r0
 8011534:	4630      	mov	r0, r6
 8011536:	f7fd fa0b 	bl	800e950 <f_open>
 801153a:	4604      	mov	r4, r0
  while( err == FR_EXIST )
 801153c:	2c08      	cmp	r4, #8
 801153e:	d0f4      	beq.n	801152a <new_logfile+0x1a>

  }

  if( err != FR_OK )
 8011540:	b994      	cbnz	r4, 8011568 <new_logfile+0x58>
    chsnprintf( message_buffer, MSG_BUFF_LENGTH, "File open error: %d", err ); //message to buffer
    msg_flag = true; //set message flag to trigger sending
  }
  else
  {
    chprintf(chp, "\r\nFile %s created\r\n", path );
 8011542:	462a      	mov	r2, r5
 8011544:	4910      	ldr	r1, [pc, #64]	; (8011588 <new_logfile+0x78>)
 8011546:	4638      	mov	r0, r7
 8011548:	f7fa fc92 	bl	800be70 <chprintf>
    chsnprintf( message_buffer, MSG_BUFF_LENGTH, "File %s created", path ); //message to buffer
 801154c:	462b      	mov	r3, r5
 801154e:	4a0f      	ldr	r2, [pc, #60]	; (801158c <new_logfile+0x7c>)
 8011550:	2164      	movs	r1, #100	; 0x64
 8011552:	480f      	ldr	r0, [pc, #60]	; (8011590 <new_logfile+0x80>)
 8011554:	f7fa fcd4 	bl	800bf00 <chsnprintf>
    msg_flag = true; //set message flag to trigger sending
 8011558:	4b0e      	ldr	r3, [pc, #56]	; (8011594 <new_logfile+0x84>)
 801155a:	2201      	movs	r2, #1
 801155c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    //save the updated file number to eeprom
    write_config_eeprom();
 8011560:	f7fe ffbe 	bl	80104e0 <write_config_eeprom>

  }
  return err;
}
 8011564:	4620      	mov	r0, r4
 8011566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chprintf(chp, "\r\nFile open error: %d\r\n", err);
 8011568:	4622      	mov	r2, r4
 801156a:	490b      	ldr	r1, [pc, #44]	; (8011598 <new_logfile+0x88>)
 801156c:	4638      	mov	r0, r7
 801156e:	f7fa fc7f 	bl	800be70 <chprintf>
    chsnprintf( message_buffer, MSG_BUFF_LENGTH, "File open error: %d", err ); //message to buffer
 8011572:	4623      	mov	r3, r4
 8011574:	4a09      	ldr	r2, [pc, #36]	; (801159c <new_logfile+0x8c>)
 8011576:	2164      	movs	r1, #100	; 0x64
 8011578:	4805      	ldr	r0, [pc, #20]	; (8011590 <new_logfile+0x80>)
 801157a:	f7fa fcc1 	bl	800bf00 <chsnprintf>
    msg_flag = true; //set message flag to trigger sending
 801157e:	4b05      	ldr	r3, [pc, #20]	; (8011594 <new_logfile+0x84>)
 8011580:	2201      	movs	r2, #1
 8011582:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8011586:	e7ed      	b.n	8011564 <new_logfile+0x54>
 8011588:	080161d4 	.word	0x080161d4
 801158c:	080161e8 	.word	0x080161e8
 8011590:	2000fbd4 	.word	0x2000fbd4
 8011594:	200022c8 	.word	0x200022c8
 8011598:	080161a8 	.word	0x080161a8
 801159c:	080161c0 	.word	0x080161c0

080115a0 <format_data>:

/*
 * helper function to format data to add to data buffer
 */
uint32_t format_data( char *tmp_buff, char *tmp_data, uint32_t num_bytes, uint32_t data_type )
{
 80115a0:	b538      	push	{r3, r4, r5, lr}
 80115a2:	4605      	mov	r5, r0
 80115a4:	4614      	mov	r4, r2
  uint32_t tmp_buff_end = 0;
  uint32_t data_end_marker = DATA_END;
  memcpy( tmp_buff, &data_type,4);
 80115a6:	f840 3b04 	str.w	r3, [r0], #4
  tmp_buff_end = 4;
  memcpy( tmp_buff + tmp_buff_end, tmp_data, num_bytes );
 80115aa:	f002 f921 	bl	80137f0 <memcpy>
  tmp_buff_end += num_bytes;
 80115ae:	1d20      	adds	r0, r4, #4
  while( tmp_buff_end%4 != 0 )
 80115b0:	e002      	b.n	80115b8 <format_data+0x18>
  {
    tmp_buff[tmp_buff_end++] = ' ';//pad with spaces to keep data alignment
 80115b2:	2320      	movs	r3, #32
 80115b4:	542b      	strb	r3, [r5, r0]
 80115b6:	3001      	adds	r0, #1
  while( tmp_buff_end%4 != 0 )
 80115b8:	f010 0f03 	tst.w	r0, #3
 80115bc:	d1f9      	bne.n	80115b2 <format_data+0x12>
  }
  memcpy( tmp_buff + tmp_buff_end, &data_end_marker, 4 ); //append data end marker
 80115be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80115c2:	502b      	str	r3, [r5, r0]
  tmp_buff_end += 4;
  return tmp_buff_end;
}
 80115c4:	3004      	adds	r0, #4
 80115c6:	bd38      	pop	{r3, r4, r5, pc}
 80115c8:	f3af 8000 	nop.w
 80115cc:	f3af 8000 	nop.w

080115d0 <set_pga>:
uint8_t set_pga(uint8_t new_pga_index)
{


  //high gain
  if( new_pga_index == 0 )
 80115d0:	b148      	cbz	r0, 80115e6 <set_pga+0x16>
    gain_setting = new_pga_index;
  }
  //low gain
  else
  {
    palSetLine(PGA_SIG_LINE); //drive high for low gain
 80115d2:	4a08      	ldr	r2, [pc, #32]	; (80115f4 <set_pga+0x24>)
 80115d4:	2104      	movs	r1, #4
 80115d6:	8311      	strh	r1, [r2, #24]
    gain_setting = new_pga_index;
 80115d8:	4a07      	ldr	r2, [pc, #28]	; (80115f8 <set_pga+0x28>)
 80115da:	f882 009b 	strb.w	r0, [r2, #155]	; 0x9b
  }

  return gain_setting;
 80115de:	4b06      	ldr	r3, [pc, #24]	; (80115f8 <set_pga+0x28>)
 80115e0:	f893 009b 	ldrb.w	r0, [r3, #155]	; 0x9b

}
 80115e4:	4770      	bx	lr
    palClearLine(PGA_SIG_LINE); //drive low for high gain
 80115e6:	4a03      	ldr	r2, [pc, #12]	; (80115f4 <set_pga+0x24>)
 80115e8:	2104      	movs	r1, #4
 80115ea:	8351      	strh	r1, [r2, #26]
    gain_setting = new_pga_index;
 80115ec:	4a02      	ldr	r2, [pc, #8]	; (80115f8 <set_pga+0x28>)
 80115ee:	f882 009b 	strb.w	r0, [r2, #155]	; 0x9b
 80115f2:	e7f4      	b.n	80115de <set_pga+0xe>
 80115f4:	40021000 	.word	0x40021000
 80115f8:	200022c8 	.word	0x200022c8
 80115fc:	f3af 8000 	nop.w

08011600 <logger_thread>:
#define LOW_GAIN 1
#define ADC_MAX_VAL 200000000 //2^30 //2^31/2 is max +/- range of 31 bit ADC
#define ADC_EXCESSIVE_LIMIT 1000000000 // - 2^27//approx 90% signal range

static THD_WORKING_AREA(wa_logger_thread, 2048);
static THD_FUNCTION(logger_thread, arg) {
 8011600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011604:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8011608:	4b93      	ldr	r3, [pc, #588]	; (8011858 <logger_thread+0x258>)
 801160a:	699b      	ldr	r3, [r3, #24]
 801160c:	4a93      	ldr	r2, [pc, #588]	; (801185c <logger_thread+0x25c>)
 801160e:	619a      	str	r2, [r3, #24]
  uint32_t bytes_written;
  uint32_t sps_count = 0;
  //uint32_t glbl_s_index = 0;
//  char *tmp_buff;

  palSetLineMode(PGA_SIG_LINE,PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8011610:	2219      	movs	r2, #25
 8011612:	2104      	movs	r1, #4
 8011614:	4892      	ldr	r0, [pc, #584]	; (8011860 <logger_thread+0x260>)
 8011616:	f7f3 fc93 	bl	8004f40 <_pal_lld_setgroupmode>
  set_pga(HIGH_GAIN);
 801161a:	2000      	movs	r0, #0
 801161c:	f7ff ffd8 	bl	80115d0 <set_pga>
  //palSetLine(PGA_SIG_LINE); //drive low for high gain

  FIL fp;
  //initialize SD card
  FRESULT err = sdcConnect(&SDCD1);
 8011620:	4890      	ldr	r0, [pc, #576]	; (8011864 <logger_thread+0x264>)
 8011622:	f7f1 fa15 	bl	8002a50 <sdcConnect>
 8011626:	4604      	mov	r4, r0
 8011628:	f04f 33ff 	mov.w	r3, #4294967295
 801162c:	2202      	movs	r2, #2
 801162e:	a907      	add	r1, sp, #28
 8011630:	488d      	ldr	r0, [pc, #564]	; (8011868 <logger_thread+0x268>)
 8011632:	f7f8 fb1d 	bl	8009c70 <chEvtRegisterMaskWithFlags>

//  int32_t adc_bin_to_mV = node_config.input_factor[1]/2;//430;//(uint32_t)(2^32)/(ADC_VREF_MV*1000);
  event_listener_t gpsListener;
  chEvtRegister(&evtGPS, &gpsListener, EVENT_MASK(0));

  if( err != FR_OK )
 8011636:	b364      	cbz	r4, 8011692 <logger_thread+0x92>
  {
    chprintf((BaseSequentialStream*)&SD6, "\r\nSDCD1 sdcConnect error: %x", err);
 8011638:	4622      	mov	r2, r4
 801163a:	498c      	ldr	r1, [pc, #560]	; (801186c <logger_thread+0x26c>)
 801163c:	488c      	ldr	r0, [pc, #560]	; (8011870 <logger_thread+0x270>)
 801163e:	f7fa fc17 	bl	800be70 <chprintf>
    chsnprintf( message_buffer, MSG_BUFF_LENGTH, "SDCD1 sdcConnect error: %x", err); //write error message to buffer
 8011642:	4623      	mov	r3, r4
 8011644:	4a8b      	ldr	r2, [pc, #556]	; (8011874 <logger_thread+0x274>)
 8011646:	2164      	movs	r1, #100	; 0x64
 8011648:	488b      	ldr	r0, [pc, #556]	; (8011878 <logger_thread+0x278>)
 801164a:	f7fa fc59 	bl	800bf00 <chsnprintf>
    msg_flag = true; //set message flag to trigger sending
 801164e:	4b8b      	ldr	r3, [pc, #556]	; (801187c <logger_thread+0x27c>)
 8011650:	2201      	movs	r2, #1
 8011652:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  else
  {
    chprintf((BaseSequentialStream*)&SD6, "\r\nSDCD1 sdc connected\r\n");

  }
  err = f_mount(&SDC_FS, "/", 1);
 8011656:	2201      	movs	r2, #1
 8011658:	4989      	ldr	r1, [pc, #548]	; (8011880 <logger_thread+0x280>)
 801165a:	488a      	ldr	r0, [pc, #552]	; (8011884 <logger_thread+0x284>)
 801165c:	f7fd f950 	bl	800e900 <f_mount>
  if( err != FR_OK )
 8011660:	4607      	mov	r7, r0
 8011662:	b1d8      	cbz	r0, 801169c <logger_thread+0x9c>
  {
    chprintf((BaseSequentialStream*)&SD6, "\r\nSD f_mount error: %x\r\n", err);
 8011664:	4602      	mov	r2, r0
 8011666:	4988      	ldr	r1, [pc, #544]	; (8011888 <logger_thread+0x288>)
 8011668:	4881      	ldr	r0, [pc, #516]	; (8011870 <logger_thread+0x270>)
 801166a:	f7fa fc01 	bl	800be70 <chprintf>
    chsnprintf( message_buffer, MSG_BUFF_LENGTH, "SD f_mount error: %x", err); //write error message to buffer
 801166e:	463b      	mov	r3, r7
 8011670:	4a86      	ldr	r2, [pc, #536]	; (801188c <logger_thread+0x28c>)
 8011672:	2164      	movs	r1, #100	; 0x64
 8011674:	4880      	ldr	r0, [pc, #512]	; (8011878 <logger_thread+0x278>)
 8011676:	f7fa fc43 	bl	800bf00 <chsnprintf>
    msg_flag = true; //set message flag to trigger sending
 801167a:	4b80      	ldr	r3, [pc, #512]	; (801187c <logger_thread+0x27c>)
 801167c:	2201      	movs	r2, #1
 801167e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
static THD_FUNCTION(logger_thread, arg) {
 8011682:	2500      	movs	r5, #0
 8011684:	9503      	str	r5, [sp, #12]
 8011686:	46a9      	mov	r9, r5
 8011688:	9505      	str	r5, [sp, #20]
 801168a:	9504      	str	r5, [sp, #16]
 801168c:	46ab      	mov	fp, r5
 801168e:	462e      	mov	r6, r5
 8011690:	e3ac      	b.n	8011dec <logger_thread+0x7ec>
    chprintf((BaseSequentialStream*)&SD6, "\r\nSDCD1 sdc connected\r\n");
 8011692:	497f      	ldr	r1, [pc, #508]	; (8011890 <logger_thread+0x290>)
 8011694:	4876      	ldr	r0, [pc, #472]	; (8011870 <logger_thread+0x270>)
 8011696:	f7fa fbeb 	bl	800be70 <chprintf>
 801169a:	e7dc      	b.n	8011656 <logger_thread+0x56>
  }
  else
  {

    chprintf((BaseSequentialStream*)&SD6, "\r\nSDCD1 mounted\r\n");
 801169c:	497d      	ldr	r1, [pc, #500]	; (8011894 <logger_thread+0x294>)
 801169e:	4874      	ldr	r0, [pc, #464]	; (8011870 <logger_thread+0x270>)
 80116a0:	f7fa fbe6 	bl	800be70 <chprintf>
 80116a4:	e7ed      	b.n	8011682 <logger_thread+0x82>
  while (true)
  {
    logger_pos = 0;
    if( missed_adc_flag )
    {
      chprintf((BaseSequentialStream*)&SD6, "\nmissed adc reading\n\r");
 80116a6:	4c72      	ldr	r4, [pc, #456]	; (8011870 <logger_thread+0x270>)
 80116a8:	497b      	ldr	r1, [pc, #492]	; (8011898 <logger_thread+0x298>)
 80116aa:	4620      	mov	r0, r4
 80116ac:	f7fa fbe0 	bl	800be70 <chprintf>
      chprintf((BaseSequentialStream*)&SD6, "Missed samples %d buffer overflows: %d\n\r",missed_sample_cnt,buffer_overflows);
 80116b0:	4b7a      	ldr	r3, [pc, #488]	; (801189c <logger_thread+0x29c>)
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	4b7a      	ldr	r3, [pc, #488]	; (80118a0 <logger_thread+0x2a0>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	497a      	ldr	r1, [pc, #488]	; (80118a4 <logger_thread+0x2a4>)
 80116ba:	4620      	mov	r0, r4
 80116bc:	f7fa fbd8 	bl	800be70 <chprintf>
      missed_adc_flag = false;
 80116c0:	4b6e      	ldr	r3, [pc, #440]	; (801187c <logger_thread+0x27c>)
 80116c2:	2200      	movs	r2, #0
 80116c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80116c8:	e399      	b.n	8011dfe <logger_thread+0x7fe>
    }
    if( raw_buff_overflow )
    {
      chprintf((BaseSequentialStream*)&SD6, "\nraw buffer overflowed %d times\n\r",raw_buff_overflow);
 80116ca:	4c6c      	ldr	r4, [pc, #432]	; (801187c <logger_thread+0x27c>)
 80116cc:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 80116d0:	4975      	ldr	r1, [pc, #468]	; (80118a8 <logger_thread+0x2a8>)
 80116d2:	4867      	ldr	r0, [pc, #412]	; (8011870 <logger_thread+0x270>)
 80116d4:	f7fa fbcc 	bl	800be70 <chprintf>
      sum_raw_buff_overflows+=raw_buff_overflow;
 80116d8:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
 80116dc:	9a05      	ldr	r2, [sp, #20]
 80116de:	441a      	add	r2, r3
 80116e0:	9205      	str	r2, [sp, #20]
      raw_buff_overflow = 0;
 80116e2:	2300      	movs	r3, #0
 80116e4:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 80116e8:	e390      	b.n	8011e0c <logger_thread+0x80c>
      {
        if( ( logging_state == WAIT_START_RECORDING ) || ( logging_state == RECORDING ) )
        {
          if( glbl_s_index < 30 )
          {
            set_pga(LOW_GAIN);
 80116ea:	2001      	movs	r0, #1
 80116ec:	f7ff ff70 	bl	80115d0 <set_pga>
            //add new gain setting to data file
            uint32_t tmp_val = DATA_TYPE_CONV;
            memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //conversion value flag
 80116f0:	f04f 4304 	mov.w	r3, #2214592512	; 0x84000000
 80116f4:	f84a 3006 	str.w	r3, [sl, r6]
            bufferEndPos += 4;
 80116f8:	1d32      	adds	r2, r6, #4
            tmp_val = node_config.input_factor[1]/2;
 80116fa:	4b60      	ldr	r3, [pc, #384]	; (801187c <logger_thread+0x27c>)
 80116fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116fe:	085b      	lsrs	r3, r3, #1
            memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //copy conversion factor
 8011700:	f84a 3002 	str.w	r3, [sl, r2]
            bufferEndPos += 4;
 8011704:	f106 0308 	add.w	r3, r6, #8
            tmp_val = DATA_END;
            memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //data end flag
 8011708:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801170c:	f84a 2003 	str.w	r2, [sl, r3]
            bufferEndPos += 4;
 8011710:	360c      	adds	r6, #12
 8011712:	e3ad      	b.n	8011e70 <logger_thread+0x870>
          }
        }
        else
        {
          //if not recording, then can change gain without doing anything else
          set_pga(LOW_GAIN);
 8011714:	2001      	movs	r0, #1
 8011716:	f7ff ff5b 	bl	80115d0 <set_pga>
 801171a:	e3a9      	b.n	8011e70 <logger_thread+0x870>
        }
      }
      //send message if updated
      else
      {
        chsnprintf( message_buffer, MSG_BUFF_LENGTH, "Changed PGA To Low Gain"); //write error message to buffer
 801171c:	4a63      	ldr	r2, [pc, #396]	; (80118ac <logger_thread+0x2ac>)
 801171e:	2164      	movs	r1, #100	; 0x64
 8011720:	4855      	ldr	r0, [pc, #340]	; (8011878 <logger_thread+0x278>)
 8011722:	f7fa fbed 	bl	800bf00 <chsnprintf>
        msg_flag = true; //set message flag to trigger sending
 8011726:	4b55      	ldr	r3, [pc, #340]	; (801187c <logger_thread+0x27c>)
 8011728:	2201      	movs	r2, #1
 801172a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
        chThdSleepMicroseconds(200); //wait 200uS for the signal to settle after PGA change
 801172e:	2014      	movs	r0, #20
 8011730:	2100      	movs	r1, #0
 8011732:	f7f7 f9a5 	bl	8008a80 <chThdSleep>
      }
      raw_max_val = 0;
 8011736:	4b51      	ldr	r3, [pc, #324]	; (801187c <logger_thread+0x27c>)
 8011738:	2200      	movs	r2, #0
 801173a:	675a      	str	r2, [r3, #116]	; 0x74
      raw_min_val = 0;
 801173c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    if( logging_state == START_RECORDING ) //need to wait until the start of a new period
 801173e:	4b4f      	ldr	r3, [pc, #316]	; (801187c <logger_thread+0x27c>)
 8011740:	7a5b      	ldrb	r3, [r3, #9]
 8011742:	b2db      	uxtb	r3, r3
 8011744:	2b02      	cmp	r3, #2
 8011746:	d008      	beq.n	801175a <logger_thread+0x15a>
        chprintf((BaseSequentialStream*)&SD6, "\nfile open failed:  %d\n\r", err);
        chsnprintf( message_buffer, MSG_BUFF_LENGTH, "file open failed:  %d", err); //write error message to buffer
        msg_flag = true; //set message flag to trigger sending
      }
    }
    else if( logging_state == STOP_RECORDING )
 8011748:	4b4c      	ldr	r3, [pc, #304]	; (801187c <logger_thread+0x27c>)
 801174a:	7a5b      	ldrb	r3, [r3, #9]
 801174c:	b2db      	uxtb	r3, r3
 801174e:	2b05      	cmp	r3, #5
 8011750:	d064      	beq.n	801181c <logger_thread+0x21c>
 8011752:	f8cd b008 	str.w	fp, [sp, #8]
 8011756:	464c      	mov	r4, r9
 8011758:	e1cb      	b.n	8011af2 <logger_thread+0x4f2>
      FRESULT err = new_logfile((BaseSequentialStream*)&SD6, &fp);
 801175a:	a90c      	add	r1, sp, #48	; 0x30
 801175c:	4844      	ldr	r0, [pc, #272]	; (8011870 <logger_thread+0x270>)
 801175e:	f7ff fed7 	bl	8011510 <new_logfile>
      glbl_s_index = 1;
 8011762:	4b53      	ldr	r3, [pc, #332]	; (80118b0 <logger_thread+0x2b0>)
 8011764:	2201      	movs	r2, #1
 8011766:	801a      	strh	r2, [r3, #0]
      glbl_last_s_index = 1;
 8011768:	851a      	strh	r2, [r3, #40]	; 0x28
      raw_min_val = 0;
 801176a:	4b44      	ldr	r3, [pc, #272]	; (801187c <logger_thread+0x27c>)
 801176c:	2200      	movs	r2, #0
 801176e:	671a      	str	r2, [r3, #112]	; 0x70
      raw_max_val = 0;
 8011770:	675a      	str	r2, [r3, #116]	; 0x74
      if( err == FR_OK )//file created successfully
 8011772:	4604      	mov	r4, r0
 8011774:	2800      	cmp	r0, #0
 8011776:	d13a      	bne.n	80117ee <logger_thread+0x1ee>
        uint32_t tmp_val = node_config.input_factor[gain_setting]/2;
 8011778:	f893 209b 	ldrb.w	r2, [r3, #155]	; 0x9b
 801177c:	3204      	adds	r2, #4
 801177e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8011782:	6a12      	ldr	r2, [r2, #32]
 8011784:	0852      	lsrs	r2, r2, #1
        memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //copy conversion factor
 8011786:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
        memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //conversion value flag
 801178a:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 801178e:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
        tmp_val = node_config.input_factor[gain_setting]/2;
 8011792:	f893 209b 	ldrb.w	r2, [r3, #155]	; 0x9b
 8011796:	3204      	adds	r2, #4
 8011798:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801179c:	6a12      	ldr	r2, [r2, #32]
 801179e:	0852      	lsrs	r2, r2, #1
        memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //copy conversion factor
 80117a0:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
        memcpy(curFile_buffer+bufferEndPos,&tmp_val,4);  //data end flag
 80117a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80117a8:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
        adcBuffer.startPos = adcBuffer.dataEndPos; //reset buffer
 80117ac:	4b41      	ldr	r3, [pc, #260]	; (80118b4 <logger_thread+0x2b4>)
 80117ae:	699a      	ldr	r2, [r3, #24]
 80117b0:	615a      	str	r2, [r3, #20]
        for( i=0;i< adcBuffer.bufferLength;i++)
 80117b2:	2100      	movs	r1, #0
 80117b4:	4b3f      	ldr	r3, [pc, #252]	; (80118b4 <logger_thread+0x2b4>)
 80117b6:	691b      	ldr	r3, [r3, #16]
 80117b8:	428b      	cmp	r3, r1
 80117ba:	d908      	bls.n	80117ce <logger_thread+0x1ce>
          adcBuffer.dataBuffer[i] = 0;
 80117bc:	f101 0208 	add.w	r2, r1, #8
 80117c0:	4b3c      	ldr	r3, [pc, #240]	; (80118b4 <logger_thread+0x2b4>)
 80117c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80117c6:	2200      	movs	r2, #0
 80117c8:	605a      	str	r2, [r3, #4]
        for( i=0;i< adcBuffer.bufferLength;i++)
 80117ca:	3101      	adds	r1, #1
 80117cc:	e7f2      	b.n	80117b4 <logger_thread+0x1b4>
        adcBuffer.freshData = false;
 80117ce:	2300      	movs	r3, #0
 80117d0:	4938      	ldr	r1, [pc, #224]	; (80118b4 <logger_thread+0x2b4>)
 80117d2:	f649 4264 	movw	r2, #40036	; 0x9c64
 80117d6:	548b      	strb	r3, [r1, r2]
        logging_state = WAIT_START_RECORDING; //waiting for start of new second
 80117d8:	4a28      	ldr	r2, [pc, #160]	; (801187c <logger_thread+0x27c>)
 80117da:	2103      	movs	r1, #3
 80117dc:	7251      	strb	r1, [r2, #9]
      sps_count = 0;
 80117de:	461d      	mov	r5, r3
      sum_buffer_overflows = 0;
 80117e0:	9304      	str	r3, [sp, #16]
        curFile_buffer = file_buffer1; //init the buffer pointer
 80117e2:	f502 7a47 	add.w	sl, r2, #796	; 0x31c
        bufferEndPos += 4;
 80117e6:	2610      	movs	r6, #16
 80117e8:	9302      	str	r3, [sp, #8]
 80117ea:	464c      	mov	r4, r9
 80117ec:	e181      	b.n	8011af2 <logger_thread+0x4f2>
        logging_state = READY; //couldn't open the file, so can't record.
 80117ee:	4d23      	ldr	r5, [pc, #140]	; (801187c <logger_thread+0x27c>)
 80117f0:	f04f 0801 	mov.w	r8, #1
 80117f4:	f885 8009 	strb.w	r8, [r5, #9]
        chprintf((BaseSequentialStream*)&SD6, "\nfile open failed:  %d\n\r", err);
 80117f8:	4602      	mov	r2, r0
 80117fa:	492f      	ldr	r1, [pc, #188]	; (80118b8 <logger_thread+0x2b8>)
 80117fc:	481c      	ldr	r0, [pc, #112]	; (8011870 <logger_thread+0x270>)
 80117fe:	f7fa fb37 	bl	800be70 <chprintf>
        chsnprintf( message_buffer, MSG_BUFF_LENGTH, "file open failed:  %d", err); //write error message to buffer
 8011802:	4623      	mov	r3, r4
 8011804:	4a2d      	ldr	r2, [pc, #180]	; (80118bc <logger_thread+0x2bc>)
 8011806:	2164      	movs	r1, #100	; 0x64
 8011808:	481b      	ldr	r0, [pc, #108]	; (8011878 <logger_thread+0x278>)
 801180a:	f7fa fb79 	bl	800bf00 <chsnprintf>
        msg_flag = true; //set message flag to trigger sending
 801180e:	f885 809a 	strb.w	r8, [r5, #154]	; 0x9a
      sps_count = 0;
 8011812:	2500      	movs	r5, #0
      sum_buffer_overflows = 0;
 8011814:	9504      	str	r5, [sp, #16]
 8011816:	9502      	str	r5, [sp, #8]
 8011818:	464c      	mov	r4, r9
 801181a:	e16a      	b.n	8011af2 <logger_thread+0x4f2>
    {
      chprintf((BaseSequentialStream*)&SD6, "\nClose the File\n\r");
 801181c:	4928      	ldr	r1, [pc, #160]	; (80118c0 <logger_thread+0x2c0>)
 801181e:	4814      	ldr	r0, [pc, #80]	; (8011870 <logger_thread+0x270>)
 8011820:	f7fa fb26 	bl	800be70 <chprintf>
      //if there is data in the buffer, write it before closing
      if( bufferEndPos > 0 )
 8011824:	b94e      	cbnz	r6, 801183a <logger_thread+0x23a>
      {
        err = f_write(&fp, curFile_buffer, bufferEndPos, &bytes_written);
      }
      f_close(&fp); //close datafile
 8011826:	a80c      	add	r0, sp, #48	; 0x30
 8011828:	f7fd fcf2 	bl	800f210 <f_close>
      logging_state = READY;
 801182c:	4b13      	ldr	r3, [pc, #76]	; (801187c <logger_thread+0x27c>)
 801182e:	2201      	movs	r2, #1
 8011830:	725a      	strb	r2, [r3, #9]
 8011832:	f8cd b008 	str.w	fp, [sp, #8]
 8011836:	464c      	mov	r4, r9
 8011838:	e15b      	b.n	8011af2 <logger_thread+0x4f2>
        err = f_write(&fp, curFile_buffer, bufferEndPos, &bytes_written);
 801183a:	aba3      	add	r3, sp, #652	; 0x28c
 801183c:	4632      	mov	r2, r6
 801183e:	4651      	mov	r1, sl
 8011840:	a80c      	add	r0, sp, #48	; 0x30
 8011842:	f7fd fb05 	bl	800ee50 <f_write>
 8011846:	4607      	mov	r7, r0
 8011848:	e7ed      	b.n	8011826 <logger_thread+0x226>
      adcBuffer.dataBuffer[ adcBuffer.startPos ] = 0;

      buff_free_size = adcBuffer.startPos-adcBuffer.dataEndPos;
      if( buff_free_size <= 0 )
      {
        buff_free_size+=adcBuffer.bufferLength;
 801184a:	4a1a      	ldr	r2, [pc, #104]	; (80118b4 <logger_thread+0x2b4>)
 801184c:	6912      	ldr	r2, [r2, #16]
 801184e:	4413      	add	r3, r2
 8011850:	4a0a      	ldr	r2, [pc, #40]	; (801187c <logger_thread+0x27c>)
 8011852:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
 8011856:	e169      	b.n	8011b2c <logger_thread+0x52c>
 8011858:	20004f68 	.word	0x20004f68
 801185c:	080161f8 	.word	0x080161f8
 8011860:	40021000 	.word	0x40021000
 8011864:	200046fc 	.word	0x200046fc
 8011868:	2000fbd0 	.word	0x2000fbd0
 801186c:	08016200 	.word	0x08016200
 8011870:	20004c10 	.word	0x20004c10
 8011874:	08016220 	.word	0x08016220
 8011878:	2000fbd4 	.word	0x2000fbd4
 801187c:	200022c8 	.word	0x200022c8
 8011880:	08016254 	.word	0x08016254
 8011884:	20002864 	.word	0x20002864
 8011888:	08016258 	.word	0x08016258
 801188c:	08016274 	.word	0x08016274
 8011890:	0801623c 	.word	0x0801623c
 8011894:	0801628c 	.word	0x0801628c
 8011898:	080162a0 	.word	0x080162a0
 801189c:	2000f520 	.word	0x2000f520
 80118a0:	2000f8f4 	.word	0x2000f8f4
 80118a4:	080162b8 	.word	0x080162b8
 80118a8:	080162e4 	.word	0x080162e4
 80118ac:	08016324 	.word	0x08016324
 80118b0:	20001a24 	.word	0x20001a24
 80118b4:	200058b8 	.word	0x200058b8
 80118b8:	0801633c 	.word	0x0801633c
 80118bc:	08016358 	.word	0x08016358
 80118c0:	08016370 	.word	0x08016370

//      chMtxLock(&adcBuffer.adcMutex);  //lock the mutex
      adcBuffer.startPos = ( adcBuffer.startPos + 1 ) % adcBuffer.bufferLength;
      if( adcBuffer.startPos == adcBuffer.dataEndPos )
      {
        adcBuffer.freshData = FALSE;
 80118c4:	4aae      	ldr	r2, [pc, #696]	; (8011b80 <logger_thread+0x580>)
 80118c6:	f649 4364 	movw	r3, #40036	; 0x9c64
 80118ca:	2100      	movs	r1, #0
 80118cc:	54d1      	strb	r1, [r2, r3]
        if( logging_state == RECORDING )
 80118ce:	4bad      	ldr	r3, [pc, #692]	; (8011b84 <logger_thread+0x584>)
 80118d0:	7a5b      	ldrb	r3, [r3, #9]
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	2b04      	cmp	r3, #4
 80118d6:	f040 813b 	bne.w	8011b50 <logger_thread+0x550>
        {

          logger_pos = 1;
 80118da:	4baa      	ldr	r3, [pc, #680]	; (8011b84 <logger_thread+0x584>)
 80118dc:	2201      	movs	r2, #1
 80118de:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
 80118e2:	2320      	movs	r3, #32
 80118e4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80118e8:	f7f7 fb52 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80118ec:	f7f6 f850 	bl	8007990 <_dbg_check_lock>
 80118f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80118f4:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
  _dbg_check_unlock();
 80118f8:	f7f6 f862 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80118fc:	f7f7 fb50 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8011900:	4ba1      	ldr	r3, [pc, #644]	; (8011b88 <logger_thread+0x588>)
 8011902:	681a      	ldr	r2, [r3, #0]
 8011904:	429a      	cmp	r2, r3
 8011906:	d004      	beq.n	8011912 <logger_thread+0x312>
 8011908:	699b      	ldr	r3, [r3, #24]
 801190a:	6899      	ldr	r1, [r3, #8]
 801190c:	6893      	ldr	r3, [r2, #8]
 801190e:	4299      	cmp	r1, r3
 8011910:	d365      	bcc.n	80119de <logger_thread+0x3de>
 8011912:	2300      	movs	r3, #0
 8011914:	f383 8811 	msr	BASEPRI, r3
          write_time_mS = chVTGetSystemTime();
          if( sync_timer > 2 )//sync every 2s, but only if caught up processing the data buffer
 8011918:	2c02      	cmp	r4, #2
 801191a:	d864      	bhi.n	80119e6 <logger_thread+0x3e6>
 801191c:	2320      	movs	r3, #32
 801191e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8011922:	f7f7 fb35 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8011926:	f7f6 f833 	bl	8007990 <_dbg_check_lock>
 801192a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801192e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8011930:	f7f6 f846 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8011934:	f7f7 fb34 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8011938:	4b93      	ldr	r3, [pc, #588]	; (8011b88 <logger_thread+0x588>)
 801193a:	681a      	ldr	r2, [r3, #0]
 801193c:	429a      	cmp	r2, r3
 801193e:	d004      	beq.n	801194a <logger_thread+0x34a>
 8011940:	699b      	ldr	r3, [r3, #24]
 8011942:	6899      	ldr	r1, [r3, #8]
 8011944:	6893      	ldr	r3, [r2, #8]
 8011946:	4299      	cmp	r1, r3
 8011948:	d352      	bcc.n	80119f0 <logger_thread+0x3f0>
 801194a:	2300      	movs	r3, #0
 801194c:	f383 8811 	msr	BASEPRI, r3
  return (sysinterval_t)((systime_t)(end - start));
 8011950:	eba4 0409 	sub.w	r4, r4, r9
 8011954:	4622      	mov	r2, r4
 8011956:	2300      	movs	r3, #0
            err = f_sync (&fp);   //flush changes every second

          write_time_mS = chTimeDiffX(write_time_mS, chVTGetSystemTime());
          sync_timer = 0;
          if( TIME_I2MS(write_time_mS) > 10 ) //print out if takes more than 10mS to write
 8011958:	0160      	lsls	r0, r4, #5
 801195a:	0ee1      	lsrs	r1, r4, #27
 801195c:	1b00      	subs	r0, r0, r4
 801195e:	eb61 0103 	sbc.w	r1, r1, r3
 8011962:	008c      	lsls	r4, r1, #2
 8011964:	ea44 7490 	orr.w	r4, r4, r0, lsr #30
 8011968:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 801196c:	eb1c 0002 	adds.w	r0, ip, r2
 8011970:	eb44 0103 	adc.w	r1, r4, r3
 8011974:	00cb      	lsls	r3, r1, #3
 8011976:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801197a:	00c2      	lsls	r2, r0, #3
 801197c:	4610      	mov	r0, r2
 801197e:	4619      	mov	r1, r3
 8011980:	4a82      	ldr	r2, [pc, #520]	; (8011b8c <logger_thread+0x58c>)
 8011982:	2300      	movs	r3, #0
 8011984:	f8df b234 	ldr.w	fp, [pc, #564]	; 8011bbc <logger_thread+0x5bc>
 8011988:	f04f 0c00 	mov.w	ip, #0
 801198c:	eb1b 0b00 	adds.w	fp, fp, r0
 8011990:	eb4c 0c01 	adc.w	ip, ip, r1
 8011994:	4658      	mov	r0, fp
 8011996:	4661      	mov	r1, ip
 8011998:	f001 fdaa 	bl	80134f0 <__aeabi_uldivmod>
 801199c:	4604      	mov	r4, r0
 801199e:	280a      	cmp	r0, #10
 80119a0:	d82a      	bhi.n	80119f8 <logger_thread+0x3f8>
            chprintf((BaseSequentialStream*)&SD6, "\n\r f_sync took %d mS\n\r",TIME_I2MS(write_time_mS));
          if( TIME_I2MS(write_time_mS) > max_latency )
 80119a2:	4b78      	ldr	r3, [pc, #480]	; (8011b84 <logger_thread+0x584>)
 80119a4:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 80119a8:	429c      	cmp	r4, r3
 80119aa:	d902      	bls.n	80119b2 <logger_thread+0x3b2>
            max_latency = TIME_I2MS(write_time_mS);
 80119ac:	4b75      	ldr	r3, [pc, #468]	; (8011b84 <logger_thread+0x584>)
 80119ae:	f8c3 47e0 	str.w	r4, [r3, #2016]	; 0x7e0

          if( buffer_overflows )
 80119b2:	4b77      	ldr	r3, [pc, #476]	; (8011b90 <logger_thread+0x590>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	bb2b      	cbnz	r3, 8011a04 <logger_thread+0x404>
          {
            chprintf((BaseSequentialStream*)&SD6, "Buffer Overflow: %d\n\r",buffer_overflows);
            sum_buffer_overflows += buffer_overflows;
            buffer_overflows = 0;
          }
          buff_free_size = adcBuffer.startPos-adcBuffer.dataEndPos;
 80119b8:	4a71      	ldr	r2, [pc, #452]	; (8011b80 <logger_thread+0x580>)
 80119ba:	6953      	ldr	r3, [r2, #20]
 80119bc:	6992      	ldr	r2, [r2, #24]
 80119be:	1a9b      	subs	r3, r3, r2
 80119c0:	4a70      	ldr	r2, [pc, #448]	; (8011b84 <logger_thread+0x584>)
 80119c2:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
          if( buff_free_size <= 0 )
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	dd29      	ble.n	8011a1e <logger_thread+0x41e>
          {
            buff_free_size+=adcBuffer.bufferLength;
          }
          data_end_pos = adcBuffer.dataEndPos;
 80119ca:	4b6d      	ldr	r3, [pc, #436]	; (8011b80 <logger_thread+0x580>)
 80119cc:	699a      	ldr	r2, [r3, #24]
 80119ce:	4b6d      	ldr	r3, [pc, #436]	; (8011b84 <logger_thread+0x584>)
 80119d0:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc

          logger_pos = 2;
 80119d4:	2202      	movs	r2, #2
 80119d6:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
          sync_timer = 0;
 80119da:	2400      	movs	r4, #0
 80119dc:	e0b8      	b.n	8011b50 <logger_thread+0x550>
 80119de:	486d      	ldr	r0, [pc, #436]	; (8011b94 <logger_thread+0x594>)
 80119e0:	f7f5 fe46 	bl	8007670 <chSysHalt>
 80119e4:	e795      	b.n	8011912 <logger_thread+0x312>
            err = f_sync (&fp);   //flush changes every second
 80119e6:	a80c      	add	r0, sp, #48	; 0x30
 80119e8:	f7fd fb52 	bl	800f090 <f_sync>
 80119ec:	4607      	mov	r7, r0
 80119ee:	e795      	b.n	801191c <logger_thread+0x31c>
 80119f0:	4868      	ldr	r0, [pc, #416]	; (8011b94 <logger_thread+0x594>)
 80119f2:	f7f5 fe3d 	bl	8007670 <chSysHalt>
 80119f6:	e7a8      	b.n	801194a <logger_thread+0x34a>
            chprintf((BaseSequentialStream*)&SD6, "\n\r f_sync took %d mS\n\r",TIME_I2MS(write_time_mS));
 80119f8:	4602      	mov	r2, r0
 80119fa:	4967      	ldr	r1, [pc, #412]	; (8011b98 <logger_thread+0x598>)
 80119fc:	4867      	ldr	r0, [pc, #412]	; (8011b9c <logger_thread+0x59c>)
 80119fe:	f7fa fa37 	bl	800be70 <chprintf>
 8011a02:	e7ce      	b.n	80119a2 <logger_thread+0x3a2>
            chprintf((BaseSequentialStream*)&SD6, "Buffer Overflow: %d\n\r",buffer_overflows);
 8011a04:	4c62      	ldr	r4, [pc, #392]	; (8011b90 <logger_thread+0x590>)
 8011a06:	6822      	ldr	r2, [r4, #0]
 8011a08:	4965      	ldr	r1, [pc, #404]	; (8011ba0 <logger_thread+0x5a0>)
 8011a0a:	4864      	ldr	r0, [pc, #400]	; (8011b9c <logger_thread+0x59c>)
 8011a0c:	f7fa fa30 	bl	800be70 <chprintf>
            sum_buffer_overflows += buffer_overflows;
 8011a10:	6823      	ldr	r3, [r4, #0]
 8011a12:	9a04      	ldr	r2, [sp, #16]
 8011a14:	441a      	add	r2, r3
 8011a16:	9204      	str	r2, [sp, #16]
            buffer_overflows = 0;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	6023      	str	r3, [r4, #0]
 8011a1c:	e7cc      	b.n	80119b8 <logger_thread+0x3b8>
            buff_free_size+=adcBuffer.bufferLength;
 8011a1e:	4a58      	ldr	r2, [pc, #352]	; (8011b80 <logger_thread+0x580>)
 8011a20:	6912      	ldr	r2, [r2, #16]
 8011a22:	4413      	add	r3, r2
 8011a24:	4a57      	ldr	r2, [pc, #348]	; (8011b84 <logger_thread+0x584>)
 8011a26:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
 8011a2a:	e7ce      	b.n	80119ca <logger_thread+0x3ca>
        {

          chprintf((BaseSequentialStream*)&SD6, "S Marker Bug, duplicate sample %d\n\r",glbl_s_index);
        }
        */
        if( logging_state == WAIT_START_RECORDING )
 8011a2c:	4b55      	ldr	r3, [pc, #340]	; (8011b84 <logger_thread+0x584>)
 8011a2e:	7a5b      	ldrb	r3, [r3, #9]
 8011a30:	b2db      	uxtb	r3, r3
 8011a32:	2b03      	cmp	r3, #3
 8011a34:	d00d      	beq.n	8011a52 <logger_thread+0x452>
        {
          logging_state = RECORDING;
        }
        if( logging_state == RECORDING )
 8011a36:	4b53      	ldr	r3, [pc, #332]	; (8011b84 <logger_thread+0x584>)
 8011a38:	7a5b      	ldrb	r3, [r3, #9]
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	2b04      	cmp	r3, #4
 8011a3e:	d00c      	beq.n	8011a5a <logger_thread+0x45a>
          memcpy(curFile_buffer+bufferEndPos,&tmpADCSample,4);  //copy Sindex marker to buffer
          bufferEndPos += 4;
          sync_timer++;
        }
        //debug check for missed s_index
        if( ( tmpADCSample & 0xFFFFFF ) != last_s_index+1)
 8011a40:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
 8011a44:	9a03      	ldr	r2, [sp, #12]
 8011a46:	1c53      	adds	r3, r2, #1
 8011a48:	4598      	cmp	r8, r3
 8011a4a:	d10b      	bne.n	8011a64 <logger_thread+0x464>
          chprintf((BaseSequentialStream*)&SD6, "Missed S index %d, %d\n\r", ( tmpADCSample & 0xFFFFFF ),last_s_index);
        last_s_index = ( tmpADCSample & 0xFFFFFF );
 8011a4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a50:	e036      	b.n	8011ac0 <logger_thread+0x4c0>
          logging_state = RECORDING;
 8011a52:	4b4c      	ldr	r3, [pc, #304]	; (8011b84 <logger_thread+0x584>)
 8011a54:	2104      	movs	r1, #4
 8011a56:	7259      	strb	r1, [r3, #9]
 8011a58:	e7ed      	b.n	8011a36 <logger_thread+0x436>
          memcpy(curFile_buffer+bufferEndPos,&tmpADCSample,4);  //copy Sindex marker to buffer
 8011a5a:	f84a 2006 	str.w	r2, [sl, r6]
          bufferEndPos += 4;
 8011a5e:	3604      	adds	r6, #4
          sync_timer++;
 8011a60:	3401      	adds	r4, #1
 8011a62:	e7ed      	b.n	8011a40 <logger_thread+0x440>
          chprintf((BaseSequentialStream*)&SD6, "Missed S index %d, %d\n\r", ( tmpADCSample & 0xFFFFFF ),last_s_index);
 8011a64:	4613      	mov	r3, r2
 8011a66:	4642      	mov	r2, r8
 8011a68:	494e      	ldr	r1, [pc, #312]	; (8011ba4 <logger_thread+0x5a4>)
 8011a6a:	484c      	ldr	r0, [pc, #304]	; (8011b9c <logger_thread+0x59c>)
 8011a6c:	f7fa fa00 	bl	800be70 <chprintf>
        last_s_index = ( tmpADCSample & 0xFFFFFF );
 8011a70:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a74:	e024      	b.n	8011ac0 <logger_thread+0x4c0>
        {

          chprintf((BaseSequentialStream*)&SD6, "PPS Bug, duplicate sample %d\n\r",glbl_s_index);
        }
        */
        if( logging_state == RECORDING )
 8011a76:	4b43      	ldr	r3, [pc, #268]	; (8011b84 <logger_thread+0x584>)
 8011a78:	7a5b      	ldrb	r3, [r3, #9]
 8011a7a:	b2db      	uxtb	r3, r3
 8011a7c:	2b04      	cmp	r3, #4
 8011a7e:	d07b      	beq.n	8011b78 <logger_thread+0x578>

          //err = f_write(&fp, string_buffer, strlen(string_buffer), &bytes_written);
          //err = f_printf(&fp, "PPS SPS = %d\r\n",sps_count);
        }
//#ifdef DEBUG_ADC
        chprintf((BaseSequentialStream*)&SD6, "PPS %d samples for glbl_s_index %d\n\r",sps_count,glbl_s_index);
 8011a80:	4b49      	ldr	r3, [pc, #292]	; (8011ba8 <logger_thread+0x5a8>)
 8011a82:	881b      	ldrh	r3, [r3, #0]
 8011a84:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8011b9c <logger_thread+0x59c>
 8011a88:	462a      	mov	r2, r5
 8011a8a:	4948      	ldr	r1, [pc, #288]	; (8011bac <logger_thread+0x5ac>)
 8011a8c:	4640      	mov	r0, r8
 8011a8e:	f7fa f9ef 	bl	800be70 <chprintf>
        chprintf((BaseSequentialStream*)&SD6, "Max file latency: %dmS\n\r",max_latency);
 8011a92:	4b3c      	ldr	r3, [pc, #240]	; (8011b84 <logger_thread+0x584>)
 8011a94:	f8d3 27e0 	ldr.w	r2, [r3, #2016]	; 0x7e0
 8011a98:	4945      	ldr	r1, [pc, #276]	; (8011bb0 <logger_thread+0x5b0>)
 8011a9a:	4640      	mov	r0, r8
 8011a9c:	f7fa f9e8 	bl	800be70 <chprintf>
        chprintf((BaseSequentialStream*)&SD6, "Missed samples %d, raw overflows: %d, overflows: %d\n\r",sum_missed_sample_cnt,sum_raw_buff_overflows,sum_buffer_overflows);
 8011aa0:	9b04      	ldr	r3, [sp, #16]
 8011aa2:	9300      	str	r3, [sp, #0]
 8011aa4:	9b05      	ldr	r3, [sp, #20]
 8011aa6:	9d02      	ldr	r5, [sp, #8]
 8011aa8:	462a      	mov	r2, r5
 8011aaa:	4942      	ldr	r1, [pc, #264]	; (8011bb4 <logger_thread+0x5b4>)
 8011aac:	4640      	mov	r0, r8
 8011aae:	f7fa f9df 	bl	800be70 <chprintf>
//#endif

        sum_missed_sample_cnt += missed_sample_cnt;
 8011ab2:	4b41      	ldr	r3, [pc, #260]	; (8011bb8 <logger_thread+0x5b8>)
 8011ab4:	681a      	ldr	r2, [r3, #0]
 8011ab6:	4629      	mov	r1, r5
 8011ab8:	4411      	add	r1, r2
 8011aba:	9102      	str	r1, [sp, #8]
        missed_sample_cnt = 0;
 8011abc:	2500      	movs	r5, #0
 8011abe:	601d      	str	r5, [r3, #0]
        }

      }


      logger_pos = 4;
 8011ac0:	4b30      	ldr	r3, [pc, #192]	; (8011b84 <logger_thread+0x584>)
 8011ac2:	2204      	movs	r2, #4
 8011ac4:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
      //check for any new gps events
      eventflags_t flags = chEvtGetAndClearFlags(&gpsListener);
 8011ac8:	a807      	add	r0, sp, #28
 8011aca:	f7f8 f9a1 	bl	8009e10 <chEvtGetAndClearFlags>
      if( flags )
 8011ace:	4680      	mov	r8, r0
 8011ad0:	b130      	cbz	r0, 8011ae0 <logger_thread+0x4e0>
      {
        if( flags & GPS_NEW_RMC )
 8011ad2:	f010 0f01 	tst.w	r0, #1
 8011ad6:	d173      	bne.n	8011bc0 <logger_thread+0x5c0>
            uint32_t str_buf_len = format_data( string_buffer, global_GPRMC, strlen( global_GPRMC ), DATA_GPS_START );
            memcpy( curFile_buffer + bufferEndPos, string_buffer, str_buf_len );  //copy gps string to data buffer
            bufferEndPos += str_buf_len;
          }
        }
        if( flags & GPS_NEW_GGA )
 8011ad8:	f018 0f02 	tst.w	r8, #2
 8011adc:	f040 808f 	bne.w	8011bfe <logger_thread+0x5fe>
            bufferEndPos += str_buf_len;
          }
        }
      }

      if( logging_state == RECORDING )
 8011ae0:	4b28      	ldr	r3, [pc, #160]	; (8011b84 <logger_thread+0x584>)
 8011ae2:	7a5b      	ldrb	r3, [r3, #9]
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	2b04      	cmp	r3, #4
 8011ae8:	f000 80ab 	beq.w	8011c42 <logger_thread+0x642>
          }
          data_end_pos = adcBuffer.dataEndPos;
        }

      }
      if( err != FR_OK )
 8011aec:	2f00      	cmp	r7, #0
 8011aee:	f040 815f 	bne.w	8011db0 <logger_thread+0x7b0>
    while( adcBuffer.freshData == TRUE )
 8011af2:	4a23      	ldr	r2, [pc, #140]	; (8011b80 <logger_thread+0x580>)
 8011af4:	f649 4364 	movw	r3, #40036	; 0x9c64
 8011af8:	5cd3      	ldrb	r3, [r2, r3]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	f000 816b 	beq.w	8011dd6 <logger_thread+0x7d6>
      tmpADCSample = adcBuffer.dataBuffer[ adcBuffer.startPos ];
 8011b00:	4b1f      	ldr	r3, [pc, #124]	; (8011b80 <logger_thread+0x580>)
 8011b02:	695a      	ldr	r2, [r3, #20]
 8011b04:	3208      	adds	r2, #8
 8011b06:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8011b0a:	f8d2 8004 	ldr.w	r8, [r2, #4]
      adcBuffer.dataBuffer[ adcBuffer.startPos ] = 0;
 8011b0e:	695a      	ldr	r2, [r3, #20]
 8011b10:	3208      	adds	r2, #8
 8011b12:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8011b16:	2100      	movs	r1, #0
 8011b18:	6051      	str	r1, [r2, #4]
      buff_free_size = adcBuffer.startPos-adcBuffer.dataEndPos;
 8011b1a:	695a      	ldr	r2, [r3, #20]
 8011b1c:	699b      	ldr	r3, [r3, #24]
 8011b1e:	1ad3      	subs	r3, r2, r3
 8011b20:	4a18      	ldr	r2, [pc, #96]	; (8011b84 <logger_thread+0x584>)
 8011b22:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
      if( buff_free_size <= 0 )
 8011b26:	428b      	cmp	r3, r1
 8011b28:	f77f ae8f 	ble.w	801184a <logger_thread+0x24a>
      data_end_pos = adcBuffer.dataEndPos;
 8011b2c:	4b14      	ldr	r3, [pc, #80]	; (8011b80 <logger_thread+0x580>)
 8011b2e:	6999      	ldr	r1, [r3, #24]
 8011b30:	4a14      	ldr	r2, [pc, #80]	; (8011b84 <logger_thread+0x584>)
 8011b32:	f8c2 17dc 	str.w	r1, [r2, #2012]	; 0x7dc
      adcBuffer.startPos = ( adcBuffer.startPos + 1 ) % adcBuffer.bufferLength;
 8011b36:	695a      	ldr	r2, [r3, #20]
 8011b38:	3201      	adds	r2, #1
 8011b3a:	6918      	ldr	r0, [r3, #16]
 8011b3c:	fb92 f1f0 	sdiv	r1, r2, r0
 8011b40:	fb00 2211 	mls	r2, r0, r1, r2
 8011b44:	615a      	str	r2, [r3, #20]
      if( adcBuffer.startPos == adcBuffer.dataEndPos )
 8011b46:	695a      	ldr	r2, [r3, #20]
 8011b48:	699b      	ldr	r3, [r3, #24]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	f43f aeba 	beq.w	80118c4 <logger_thread+0x2c4>
      if( ( tmpADCSample & 0xFF000000 ) == DATA_TYPE_SINDEX )
 8011b50:	4642      	mov	r2, r8
 8011b52:	f008 437f 	and.w	r3, r8, #4278190080	; 0xff000000
 8011b56:	f1b3 4f03 	cmp.w	r3, #2197815296	; 0x83000000
 8011b5a:	f43f af67 	beq.w	8011a2c <logger_thread+0x42c>
      else if( tmpADCSample == DATA_TYPE_PPS )
 8011b5e:	f1b8 4f02 	cmp.w	r8, #2181038080	; 0x82000000
 8011b62:	d088      	beq.n	8011a76 <logger_thread+0x476>
        sps_count++;
 8011b64:	3501      	adds	r5, #1
        if( logging_state == RECORDING )
 8011b66:	4b07      	ldr	r3, [pc, #28]	; (8011b84 <logger_thread+0x584>)
 8011b68:	7a5b      	ldrb	r3, [r3, #9]
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	2b04      	cmp	r3, #4
 8011b6e:	d1a7      	bne.n	8011ac0 <logger_thread+0x4c0>
          memcpy(curFile_buffer+bufferEndPos,&tmpADCSample,4);  //write raw data
 8011b70:	f84a 8006 	str.w	r8, [sl, r6]
          bufferEndPos += 4;
 8011b74:	3604      	adds	r6, #4
 8011b76:	e7a3      	b.n	8011ac0 <logger_thread+0x4c0>
          memcpy(curFile_buffer+bufferEndPos,&tmpADCSample,4);  //copy PPS marker to buffer
 8011b78:	f84a 8006 	str.w	r8, [sl, r6]
          bufferEndPos += 4;
 8011b7c:	3604      	adds	r6, #4
 8011b7e:	e77f      	b.n	8011a80 <logger_thread+0x480>
 8011b80:	200058b8 	.word	0x200058b8
 8011b84:	200022c8 	.word	0x200022c8
 8011b88:	20004f68 	.word	0x20004f68
 8011b8c:	000186a0 	.word	0x000186a0
 8011b90:	2000f8f4 	.word	0x2000f8f4
 8011b94:	08015b20 	.word	0x08015b20
 8011b98:	08016384 	.word	0x08016384
 8011b9c:	20004c10 	.word	0x20004c10
 8011ba0:	0801639c 	.word	0x0801639c
 8011ba4:	080163b4 	.word	0x080163b4
 8011ba8:	20001a24 	.word	0x20001a24
 8011bac:	080163cc 	.word	0x080163cc
 8011bb0:	080163f4 	.word	0x080163f4
 8011bb4:	08016410 	.word	0x08016410
 8011bb8:	2000f520 	.word	0x2000f520
 8011bbc:	0001869f 	.word	0x0001869f
          chprintf((BaseSequentialStream*)&SD6, "\n\r %s\n\r",global_GPRMC);
 8011bc0:	4abb      	ldr	r2, [pc, #748]	; (8011eb0 <logger_thread+0x8b0>)
 8011bc2:	49bc      	ldr	r1, [pc, #752]	; (8011eb4 <logger_thread+0x8b4>)
 8011bc4:	48bc      	ldr	r0, [pc, #752]	; (8011eb8 <logger_thread+0x8b8>)
 8011bc6:	f7fa f953 	bl	800be70 <chprintf>
          if( logging_state == RECORDING )
 8011bca:	4bbc      	ldr	r3, [pc, #752]	; (8011ebc <logger_thread+0x8bc>)
 8011bcc:	7a5b      	ldrb	r3, [r3, #9]
 8011bce:	b2db      	uxtb	r3, r3
 8011bd0:	2b04      	cmp	r3, #4
 8011bd2:	d181      	bne.n	8011ad8 <logger_thread+0x4d8>
            uint32_t str_buf_len = format_data( string_buffer, global_GPRMC, strlen( global_GPRMC ), DATA_GPS_START );
 8011bd4:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 8011eb0 <logger_thread+0x8b0>
 8011bd8:	4648      	mov	r0, r9
 8011bda:	f002 f831 	bl	8013c40 <strlen>
 8011bde:	f04f 4301 	mov.w	r3, #2164260864	; 0x81000000
 8011be2:	4602      	mov	r2, r0
 8011be4:	4649      	mov	r1, r9
 8011be6:	48b6      	ldr	r0, [pc, #728]	; (8011ec0 <logger_thread+0x8c0>)
 8011be8:	f7ff fcda 	bl	80115a0 <format_data>
 8011bec:	4681      	mov	r9, r0
            memcpy( curFile_buffer + bufferEndPos, string_buffer, str_buf_len );  //copy gps string to data buffer
 8011bee:	4602      	mov	r2, r0
 8011bf0:	49b3      	ldr	r1, [pc, #716]	; (8011ec0 <logger_thread+0x8c0>)
 8011bf2:	eb0a 0006 	add.w	r0, sl, r6
 8011bf6:	f001 fdfb 	bl	80137f0 <memcpy>
            bufferEndPos += str_buf_len;
 8011bfa:	444e      	add	r6, r9
 8011bfc:	e76c      	b.n	8011ad8 <logger_thread+0x4d8>
          chprintf((BaseSequentialStream*)&SD6, "\n\r %s\n\r",global_GPGGA);
 8011bfe:	4ab1      	ldr	r2, [pc, #708]	; (8011ec4 <logger_thread+0x8c4>)
 8011c00:	49ac      	ldr	r1, [pc, #688]	; (8011eb4 <logger_thread+0x8b4>)
 8011c02:	48ad      	ldr	r0, [pc, #692]	; (8011eb8 <logger_thread+0x8b8>)
 8011c04:	f7fa f934 	bl	800be70 <chprintf>
          if( logging_state == RECORDING )
 8011c08:	4bac      	ldr	r3, [pc, #688]	; (8011ebc <logger_thread+0x8bc>)
 8011c0a:	7a5b      	ldrb	r3, [r3, #9]
 8011c0c:	b2db      	uxtb	r3, r3
 8011c0e:	2b04      	cmp	r3, #4
 8011c10:	f47f af66 	bne.w	8011ae0 <logger_thread+0x4e0>
            uint32_t str_buf_len = format_data( string_buffer, global_GPGGA, strlen( global_GPGGA ), DATA_GPS_START );
 8011c14:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8011ec4 <logger_thread+0x8c4>
 8011c18:	4640      	mov	r0, r8
 8011c1a:	f002 f811 	bl	8013c40 <strlen>
 8011c1e:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8011ec0 <logger_thread+0x8c0>
 8011c22:	f04f 4301 	mov.w	r3, #2164260864	; 0x81000000
 8011c26:	4602      	mov	r2, r0
 8011c28:	4641      	mov	r1, r8
 8011c2a:	4648      	mov	r0, r9
 8011c2c:	f7ff fcb8 	bl	80115a0 <format_data>
 8011c30:	4680      	mov	r8, r0
            memcpy( curFile_buffer + bufferEndPos, string_buffer, str_buf_len );  //copy gps string to data buffer
 8011c32:	4602      	mov	r2, r0
 8011c34:	4649      	mov	r1, r9
 8011c36:	eb0a 0006 	add.w	r0, sl, r6
 8011c3a:	f001 fdd9 	bl	80137f0 <memcpy>
            bufferEndPos += str_buf_len;
 8011c3e:	4446      	add	r6, r8
 8011c40:	e74e      	b.n	8011ae0 <logger_thread+0x4e0>
        if( bufferEndPos >= ( FILE_BUFFER_LENGTH - STRING_BUFFER_LENGTH ))
 8011c42:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8011c46:	f4ff af51 	bcc.w	8011aec <logger_thread+0x4ec>
 8011c4a:	2320      	movs	r3, #32
 8011c4c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8011c50:	f7f7 f99e 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8011c54:	f7f5 fe9c 	bl	8007990 <_dbg_check_lock>
 8011c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011c5c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8011c60:	f7f5 feae 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8011c64:	f7f7 f99c 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8011c68:	4b97      	ldr	r3, [pc, #604]	; (8011ec8 <logger_thread+0x8c8>)
 8011c6a:	681a      	ldr	r2, [r3, #0]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d004      	beq.n	8011c7a <logger_thread+0x67a>
 8011c70:	699b      	ldr	r3, [r3, #24]
 8011c72:	6899      	ldr	r1, [r3, #8]
 8011c74:	6893      	ldr	r3, [r2, #8]
 8011c76:	4299      	cmp	r1, r3
 8011c78:	d36d      	bcc.n	8011d56 <logger_thread+0x756>
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	f383 8811 	msr	BASEPRI, r3
          logger_pos = 5;
 8011c80:	4b8e      	ldr	r3, [pc, #568]	; (8011ebc <logger_thread+0x8bc>)
 8011c82:	2205      	movs	r2, #5
 8011c84:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
          err = f_write(&fp, curFile_buffer, bufferEndPos, &bytes_written);
 8011c88:	aba3      	add	r3, sp, #652	; 0x28c
 8011c8a:	4632      	mov	r2, r6
 8011c8c:	4651      	mov	r1, sl
 8011c8e:	a80c      	add	r0, sp, #48	; 0x30
 8011c90:	f7fd f8de 	bl	800ee50 <f_write>
 8011c94:	4607      	mov	r7, r0
 8011c96:	2320      	movs	r3, #32
 8011c98:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8011c9c:	f7f7 f978 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8011ca0:	f7f5 fe76 	bl	8007990 <_dbg_check_lock>
 8011ca4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011ca8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8011caa:	f7f5 fe89 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8011cae:	f7f7 f977 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8011cb2:	4b85      	ldr	r3, [pc, #532]	; (8011ec8 <logger_thread+0x8c8>)
 8011cb4:	681a      	ldr	r2, [r3, #0]
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d004      	beq.n	8011cc4 <logger_thread+0x6c4>
 8011cba:	699b      	ldr	r3, [r3, #24]
 8011cbc:	6899      	ldr	r1, [r3, #8]
 8011cbe:	6893      	ldr	r3, [r2, #8]
 8011cc0:	4299      	cmp	r1, r3
 8011cc2:	d34c      	bcc.n	8011d5e <logger_thread+0x75e>
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	f383 8811 	msr	BASEPRI, r3
 8011cca:	eba6 0608 	sub.w	r6, r6, r8
 8011cce:	4632      	mov	r2, r6
 8011cd0:	2300      	movs	r3, #0
          if( TIME_I2MS(write_time_mS) > 10 ) //print out if takes more than 10mS to write
 8011cd2:	0170      	lsls	r0, r6, #5
 8011cd4:	0ef1      	lsrs	r1, r6, #27
 8011cd6:	1b80      	subs	r0, r0, r6
 8011cd8:	eb61 0103 	sbc.w	r1, r1, r3
 8011cdc:	008e      	lsls	r6, r1, #2
 8011cde:	ea46 7690 	orr.w	r6, r6, r0, lsr #30
 8011ce2:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 8011ce6:	eb1c 0b02 	adds.w	fp, ip, r2
 8011cea:	eb46 0c03 	adc.w	ip, r6, r3
 8011cee:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8011cf2:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8011cf6:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8011cfa:	4693      	mov	fp, r2
 8011cfc:	469c      	mov	ip, r3
 8011cfe:	4a73      	ldr	r2, [pc, #460]	; (8011ecc <logger_thread+0x8cc>)
 8011d00:	2300      	movs	r3, #0
 8011d02:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8011ef8 <logger_thread+0x8f8>
 8011d06:	f04f 0900 	mov.w	r9, #0
 8011d0a:	eb1b 0008 	adds.w	r0, fp, r8
 8011d0e:	eb4c 0109 	adc.w	r1, ip, r9
 8011d12:	f001 fbed 	bl	80134f0 <__aeabi_uldivmod>
 8011d16:	4606      	mov	r6, r0
 8011d18:	280a      	cmp	r0, #10
 8011d1a:	d824      	bhi.n	8011d66 <logger_thread+0x766>
          if( buffer_overflows )
 8011d1c:	4b6c      	ldr	r3, [pc, #432]	; (8011ed0 <logger_thread+0x8d0>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	bb7b      	cbnz	r3, 8011d82 <logger_thread+0x782>
          logger_pos = 6;
 8011d22:	4b66      	ldr	r3, [pc, #408]	; (8011ebc <logger_thread+0x8bc>)
 8011d24:	2206      	movs	r2, #6
 8011d26:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
          if( curFile_buffer == file_buffer1 )
 8011d2a:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8011d2e:	459a      	cmp	sl, r3
 8011d30:	d034      	beq.n	8011d9c <logger_thread+0x79c>
            curFile_buffer = file_buffer1;
 8011d32:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8011efc <logger_thread+0x8fc>
          buff_free_size = adcBuffer.startPos-adcBuffer.dataEndPos;
 8011d36:	4a67      	ldr	r2, [pc, #412]	; (8011ed4 <logger_thread+0x8d4>)
 8011d38:	6953      	ldr	r3, [r2, #20]
 8011d3a:	6992      	ldr	r2, [r2, #24]
 8011d3c:	1a9b      	subs	r3, r3, r2
 8011d3e:	4a5f      	ldr	r2, [pc, #380]	; (8011ebc <logger_thread+0x8bc>)
 8011d40:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
          if( buff_free_size <= 0 )
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	dd2c      	ble.n	8011da2 <logger_thread+0x7a2>
          data_end_pos = adcBuffer.dataEndPos;
 8011d48:	4b62      	ldr	r3, [pc, #392]	; (8011ed4 <logger_thread+0x8d4>)
 8011d4a:	699a      	ldr	r2, [r3, #24]
 8011d4c:	4b5b      	ldr	r3, [pc, #364]	; (8011ebc <logger_thread+0x8bc>)
 8011d4e:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
          bufferEndPos = 0;
 8011d52:	2600      	movs	r6, #0
 8011d54:	e6ca      	b.n	8011aec <logger_thread+0x4ec>
 8011d56:	4860      	ldr	r0, [pc, #384]	; (8011ed8 <logger_thread+0x8d8>)
 8011d58:	f7f5 fc8a 	bl	8007670 <chSysHalt>
 8011d5c:	e78d      	b.n	8011c7a <logger_thread+0x67a>
 8011d5e:	485e      	ldr	r0, [pc, #376]	; (8011ed8 <logger_thread+0x8d8>)
 8011d60:	f7f5 fc86 	bl	8007670 <chSysHalt>
 8011d64:	e7ae      	b.n	8011cc4 <logger_thread+0x6c4>
            chprintf((BaseSequentialStream*)&SD6, "\n\r f_write took %d mS\n\r",TIME_I2MS(write_time_mS));
 8011d66:	4602      	mov	r2, r0
 8011d68:	495c      	ldr	r1, [pc, #368]	; (8011edc <logger_thread+0x8dc>)
 8011d6a:	4853      	ldr	r0, [pc, #332]	; (8011eb8 <logger_thread+0x8b8>)
 8011d6c:	f7fa f880 	bl	800be70 <chprintf>
            if( TIME_I2MS(write_time_mS) > max_latency )
 8011d70:	4b52      	ldr	r3, [pc, #328]	; (8011ebc <logger_thread+0x8bc>)
 8011d72:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 8011d76:	429e      	cmp	r6, r3
 8011d78:	d9d0      	bls.n	8011d1c <logger_thread+0x71c>
              max_latency = TIME_I2MS(write_time_mS);
 8011d7a:	4b50      	ldr	r3, [pc, #320]	; (8011ebc <logger_thread+0x8bc>)
 8011d7c:	f8c3 67e0 	str.w	r6, [r3, #2016]	; 0x7e0
 8011d80:	e7cc      	b.n	8011d1c <logger_thread+0x71c>
            chprintf((BaseSequentialStream*)&SD6, "Buffer Overflow: %d\n\r",buffer_overflows);
 8011d82:	4e53      	ldr	r6, [pc, #332]	; (8011ed0 <logger_thread+0x8d0>)
 8011d84:	6832      	ldr	r2, [r6, #0]
 8011d86:	4956      	ldr	r1, [pc, #344]	; (8011ee0 <logger_thread+0x8e0>)
 8011d88:	484b      	ldr	r0, [pc, #300]	; (8011eb8 <logger_thread+0x8b8>)
 8011d8a:	f7fa f871 	bl	800be70 <chprintf>
            sum_buffer_overflows += buffer_overflows;
 8011d8e:	6833      	ldr	r3, [r6, #0]
 8011d90:	9a04      	ldr	r2, [sp, #16]
 8011d92:	441a      	add	r2, r3
 8011d94:	9204      	str	r2, [sp, #16]
            buffer_overflows = 0;
 8011d96:	2300      	movs	r3, #0
 8011d98:	6033      	str	r3, [r6, #0]
 8011d9a:	e7c2      	b.n	8011d22 <logger_thread+0x722>
            curFile_buffer = file_buffer2;
 8011d9c:	f5a3 7a20 	sub.w	sl, r3, #640	; 0x280
 8011da0:	e7c9      	b.n	8011d36 <logger_thread+0x736>
            buff_free_size+=adcBuffer.bufferLength;
 8011da2:	4a4c      	ldr	r2, [pc, #304]	; (8011ed4 <logger_thread+0x8d4>)
 8011da4:	6912      	ldr	r2, [r2, #16]
 8011da6:	4413      	add	r3, r2
 8011da8:	4a44      	ldr	r2, [pc, #272]	; (8011ebc <logger_thread+0x8bc>)
 8011daa:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
 8011dae:	e7cb      	b.n	8011d48 <logger_thread+0x748>
      {
        chprintf((BaseSequentialStream*)&SD6, "\nfile recording failed:  %d\n\r", err);
 8011db0:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8011f00 <logger_thread+0x900>
 8011db4:	463a      	mov	r2, r7
 8011db6:	4641      	mov	r1, r8
 8011db8:	483f      	ldr	r0, [pc, #252]	; (8011eb8 <logger_thread+0x8b8>)
 8011dba:	f7fa f859 	bl	800be70 <chprintf>
        chsnprintf( message_buffer, MSG_BUFF_LENGTH, "\nfile recording failed:  %d\n\r", err); //write error message to buffer
 8011dbe:	463b      	mov	r3, r7
 8011dc0:	4642      	mov	r2, r8
 8011dc2:	2164      	movs	r1, #100	; 0x64
 8011dc4:	4847      	ldr	r0, [pc, #284]	; (8011ee4 <logger_thread+0x8e4>)
 8011dc6:	f7fa f89b 	bl	800bf00 <chsnprintf>
        msg_flag = true; //set message flag to trigger sending
 8011dca:	4b3c      	ldr	r3, [pc, #240]	; (8011ebc <logger_thread+0x8bc>)
 8011dcc:	2201      	movs	r2, #1
 8011dce:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
        logging_state = READY; //show we are no longer recording. Can't close file because there was an error with the card
 8011dd2:	725a      	strb	r2, [r3, #9]
 8011dd4:	e68d      	b.n	8011af2 <logger_thread+0x4f2>
 8011dd6:	f8dd b008 	ldr.w	fp, [sp, #8]
 8011dda:	46a1      	mov	r9, r4
      }

    }
    //sleep to allow some time for fresh data
    logger_pos = 7;
 8011ddc:	4b37      	ldr	r3, [pc, #220]	; (8011ebc <logger_thread+0x8bc>)
 8011dde:	2207      	movs	r2, #7
 8011de0:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
    chThdSleepMicroseconds(200);
 8011de4:	2014      	movs	r0, #20
 8011de6:	2100      	movs	r1, #0
 8011de8:	f7f6 fe4a 	bl	8008a80 <chThdSleep>
    logger_pos = 0;
 8011dec:	4b33      	ldr	r3, [pc, #204]	; (8011ebc <logger_thread+0x8bc>)
 8011dee:	2200      	movs	r2, #0
 8011df0:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
    if( missed_adc_flag )
 8011df4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	f47f ac54 	bne.w	80116a6 <logger_thread+0xa6>
    if( raw_buff_overflow )
 8011dfe:	4b2f      	ldr	r3, [pc, #188]	; (8011ebc <logger_thread+0x8bc>)
 8011e00:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	f47f ac5f 	bne.w	80116ca <logger_thread+0xca>
    if( ( ( abs(raw_min_val) > (ADC_EXCESSIVE_LIMIT/5) ) || (raw_max_val > (ADC_EXCESSIVE_LIMIT/5)) ) && ( logging_state >= READY ))
 8011e0c:	4b2b      	ldr	r3, [pc, #172]	; (8011ebc <logger_thread+0x8bc>)
 8011e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	bfb8      	it	lt
 8011e14:	425b      	neglt	r3, r3
 8011e16:	4a34      	ldr	r2, [pc, #208]	; (8011ee8 <logger_thread+0x8e8>)
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	dc05      	bgt.n	8011e28 <logger_thread+0x828>
 8011e1c:	4b27      	ldr	r3, [pc, #156]	; (8011ebc <logger_thread+0x8bc>)
 8011e1e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8011e20:	4b31      	ldr	r3, [pc, #196]	; (8011ee8 <logger_thread+0x8e8>)
 8011e22:	429a      	cmp	r2, r3
 8011e24:	f77f ac8b 	ble.w	801173e <logger_thread+0x13e>
 8011e28:	4b24      	ldr	r3, [pc, #144]	; (8011ebc <logger_thread+0x8bc>)
 8011e2a:	7a5b      	ldrb	r3, [r3, #9]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	f43f ac86 	beq.w	801173e <logger_thread+0x13e>
      uint8_t tmp_gain_setting = gain_setting;
 8011e32:	4b22      	ldr	r3, [pc, #136]	; (8011ebc <logger_thread+0x8bc>)
 8011e34:	f893 409b 	ldrb.w	r4, [r3, #155]	; 0x9b
 8011e38:	b2e4      	uxtb	r4, r4
      if( auto_gain_flag && ( gain_setting != LOW_GAIN ))
 8011e3a:	4b2c      	ldr	r3, [pc, #176]	; (8011eec <logger_thread+0x8ec>)
 8011e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011e40:	b1b3      	cbz	r3, 8011e70 <logger_thread+0x870>
 8011e42:	4b1e      	ldr	r3, [pc, #120]	; (8011ebc <logger_thread+0x8bc>)
 8011e44:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011e48:	b2db      	uxtb	r3, r3
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d010      	beq.n	8011e70 <logger_thread+0x870>
        if( ( logging_state == WAIT_START_RECORDING ) || ( logging_state == RECORDING ) )
 8011e4e:	4b1b      	ldr	r3, [pc, #108]	; (8011ebc <logger_thread+0x8bc>)
 8011e50:	7a5b      	ldrb	r3, [r3, #9]
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	2b03      	cmp	r3, #3
 8011e56:	d005      	beq.n	8011e64 <logger_thread+0x864>
 8011e58:	4b18      	ldr	r3, [pc, #96]	; (8011ebc <logger_thread+0x8bc>)
 8011e5a:	7a5b      	ldrb	r3, [r3, #9]
 8011e5c:	b2db      	uxtb	r3, r3
 8011e5e:	2b04      	cmp	r3, #4
 8011e60:	f47f ac58 	bne.w	8011714 <logger_thread+0x114>
          if( glbl_s_index < 30 )
 8011e64:	4b21      	ldr	r3, [pc, #132]	; (8011eec <logger_thread+0x8ec>)
 8011e66:	881b      	ldrh	r3, [r3, #0]
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	2b1d      	cmp	r3, #29
 8011e6c:	f67f ac3d 	bls.w	80116ea <logger_thread+0xea>
      if( gain_setting == tmp_gain_setting )
 8011e70:	4b12      	ldr	r3, [pc, #72]	; (8011ebc <logger_thread+0x8bc>)
 8011e72:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011e76:	b2db      	uxtb	r3, r3
 8011e78:	42a3      	cmp	r3, r4
 8011e7a:	f47f ac4f 	bne.w	801171c <logger_thread+0x11c>
        if( ( abs(raw_min_val) > (ADC_EXCESSIVE_LIMIT) ) || (raw_max_val > (ADC_EXCESSIVE_LIMIT) ) )
 8011e7e:	4b0f      	ldr	r3, [pc, #60]	; (8011ebc <logger_thread+0x8bc>)
 8011e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	bfb8      	it	lt
 8011e86:	425b      	neglt	r3, r3
 8011e88:	4a19      	ldr	r2, [pc, #100]	; (8011ef0 <logger_thread+0x8f0>)
 8011e8a:	4293      	cmp	r3, r2
 8011e8c:	dc05      	bgt.n	8011e9a <logger_thread+0x89a>
 8011e8e:	4b0b      	ldr	r3, [pc, #44]	; (8011ebc <logger_thread+0x8bc>)
 8011e90:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8011e92:	4b17      	ldr	r3, [pc, #92]	; (8011ef0 <logger_thread+0x8f0>)
 8011e94:	429a      	cmp	r2, r3
 8011e96:	f77f ac4e 	ble.w	8011736 <logger_thread+0x136>
          chsnprintf( message_buffer, MSG_BUFF_LENGTH, "Excessive Input Voltage!!"); //write error message to buffer
 8011e9a:	4a16      	ldr	r2, [pc, #88]	; (8011ef4 <logger_thread+0x8f4>)
 8011e9c:	2164      	movs	r1, #100	; 0x64
 8011e9e:	4811      	ldr	r0, [pc, #68]	; (8011ee4 <logger_thread+0x8e4>)
 8011ea0:	f7fa f82e 	bl	800bf00 <chsnprintf>
          msg_flag = true; //set message flag to trigger sending
 8011ea4:	4b05      	ldr	r3, [pc, #20]	; (8011ebc <logger_thread+0x8bc>)
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8011eac:	e443      	b.n	8011736 <logger_thread+0x136>
 8011eae:	bf00      	nop
 8011eb0:	2000f530 	.word	0x2000f530
 8011eb4:	08016448 	.word	0x08016448
 8011eb8:	20004c10 	.word	0x20004c10
 8011ebc:	200022c8 	.word	0x200022c8
 8011ec0:	20002aac 	.word	0x20002aac
 8011ec4:	2000f998 	.word	0x2000f998
 8011ec8:	20004f68 	.word	0x20004f68
 8011ecc:	000186a0 	.word	0x000186a0
 8011ed0:	2000f8f4 	.word	0x2000f8f4
 8011ed4:	200058b8 	.word	0x200058b8
 8011ed8:	08015b20 	.word	0x08015b20
 8011edc:	08016450 	.word	0x08016450
 8011ee0:	0801639c 	.word	0x0801639c
 8011ee4:	2000fbd4 	.word	0x2000fbd4
 8011ee8:	0bebc200 	.word	0x0bebc200
 8011eec:	20001a24 	.word	0x20001a24
 8011ef0:	3b9aca00 	.word	0x3b9aca00
 8011ef4:	08016308 	.word	0x08016308
 8011ef8:	0001869f 	.word	0x0001869f
 8011efc:	200025e4 	.word	0x200025e4
 8011f00:	08016468 	.word	0x08016468
 8011f04:	f3af 8000 	nop.w
 8011f08:	f3af 8000 	nop.w
 8011f0c:	f3af 8000 	nop.w

08011f10 <check_node_state>:
/* helper function to verify/update node state
 *
 */
char check_node_state(char new_state)
{
  char new_node_state = node_state;
 8011f10:	4b05      	ldr	r3, [pc, #20]	; (8011f28 <check_node_state+0x18>)
 8011f12:	7a1b      	ldrb	r3, [r3, #8]
 8011f14:	b2db      	uxtb	r3, r3
  // currently the only thing that can be set is read/active
  if( new_state&STATE_ACTIVE )
 8011f16:	f010 0f08 	tst.w	r0, #8
 8011f1a:	d102      	bne.n	8011f22 <check_node_state+0x12>
  {
    new_node_state |= STATE_ACTIVE;
  }
  else
  {
    new_node_state &= ~STATE_ACTIVE;
 8011f1c:	f003 00f7 	and.w	r0, r3, #247	; 0xf7
  }
  return new_node_state;

}
 8011f20:	4770      	bx	lr
    new_node_state |= STATE_ACTIVE;
 8011f22:	f043 0008 	orr.w	r0, r3, #8
 8011f26:	4770      	bx	lr
 8011f28:	200022c8 	.word	0x200022c8
 8011f2c:	f3af 8000 	nop.w

08011f30 <check_valid_relay>:
 * helper function to verify the new relay state is valid (eg don't allow non ready nodes to set to analog)
 */
bool check_valid_relay(char new_relay_state )
{
  //not valid to set analog relay if node isn't active
  if( new_relay_state == RELAY_STATE_ADC && !( node_state&STATE_ACTIVE ) )
 8011f30:	2841      	cmp	r0, #65	; 0x41
 8011f32:	d001      	beq.n	8011f38 <check_valid_relay+0x8>
  {
    return 0;
  }
  return 1;
 8011f34:	2001      	movs	r0, #1
 8011f36:	4770      	bx	lr
  if( new_relay_state == RELAY_STATE_ADC && !( node_state&STATE_ACTIVE ) )
 8011f38:	4b04      	ldr	r3, [pc, #16]	; (8011f4c <check_valid_relay+0x1c>)
 8011f3a:	7a1b      	ldrb	r3, [r3, #8]
 8011f3c:	f013 0f08 	tst.w	r3, #8
 8011f40:	d001      	beq.n	8011f46 <check_valid_relay+0x16>
  return 1;
 8011f42:	2001      	movs	r0, #1
 8011f44:	4770      	bx	lr
    return 0;
 8011f46:	2000      	movs	r0, #0
}
 8011f48:	4770      	bx	lr
 8011f4a:	bf00      	nop
 8011f4c:	200022c8 	.word	0x200022c8

08011f50 <run_cmd>:
 * run_cmd can also be used to send info initiated internally (eg relay change or state change messages)
 */
#define SEND_REPLY 0
#define NO_REPLY -1
msg_t run_cmd(volatile xbee_packet *cmd_packet, xbee_mailbox_t *mbx )
{
 8011f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f54:	b084      	sub	sp, #16
 8011f56:	4606      	mov	r6, r0
 8011f58:	460d      	mov	r5, r1
  xbee_packet *resp_packet;
  msg_t msg = chMBFetchTimeout(&mbx->tx_free_packets, (msg_t *)&resp_packet,TIME_IMMEDIATE);
 8011f5a:	f101 08a0 	add.w	r8, r1, #160	; 0xa0
 8011f5e:	2200      	movs	r2, #0
 8011f60:	2300      	movs	r3, #0
 8011f62:	a903      	add	r1, sp, #12
 8011f64:	4640      	mov	r0, r8
 8011f66:	f7f8 fdab 	bl	800aac0 <chMBFetchTimeout>
  if( msg != MSG_OK)
 8011f6a:	4607      	mov	r7, r0
 8011f6c:	2800      	cmp	r0, #0
 8011f6e:	d13d      	bne.n	8011fec <run_cmd+0x9c>
  {
    chprintf((BaseSequentialStream*)&SD6, "\n\rxbee response mailbox failure\n\r");
    return msg;
  }

  memcpy(resp_packet,cmd_packet,sizeof(xbee_packet)); //copy the address etc.
 8011f70:	225e      	movs	r2, #94	; 0x5e
 8011f72:	4631      	mov	r1, r6
 8011f74:	9803      	ldr	r0, [sp, #12]
 8011f76:	f001 fc3b 	bl	80137f0 <memcpy>
  resp_packet->data_length = 0; //reset data buffer
 8011f7a:	9c03      	ldr	r4, [sp, #12]
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	81a3      	strh	r3, [r4, #12]

  switch ( cmd_packet->data[0] )
 8011f80:	7bb3      	ldrb	r3, [r6, #14]
 8011f82:	3b45      	subs	r3, #69	; 0x45
 8011f84:	2b2e      	cmp	r3, #46	; 0x2e
 8011f86:	f200 8281 	bhi.w	801248c <run_cmd+0x53c>
 8011f8a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011f8e:	01c1      	.short	0x01c1
 8011f90:	027f027f 	.word	0x027f027f
 8011f94:	016e027f 	.word	0x016e027f
 8011f98:	027f027f 	.word	0x027f027f
 8011f9c:	027f027f 	.word	0x027f027f
 8011fa0:	027f027f 	.word	0x027f027f
 8011fa4:	027f027f 	.word	0x027f027f
 8011fa8:	01a6027f 	.word	0x01a6027f
 8011fac:	027f027f 	.word	0x027f027f
 8011fb0:	027f027f 	.word	0x027f027f
 8011fb4:	01ed027f 	.word	0x01ed027f
 8011fb8:	027f027f 	.word	0x027f027f
 8011fbc:	027f027f 	.word	0x027f027f
 8011fc0:	027f027f 	.word	0x027f027f
 8011fc4:	027f027f 	.word	0x027f027f
 8011fc8:	027f027f 	.word	0x027f027f
 8011fcc:	027f027f 	.word	0x027f027f
 8011fd0:	027f027f 	.word	0x027f027f
 8011fd4:	0064027f 	.word	0x0064027f
 8011fd8:	027f027f 	.word	0x027f027f
 8011fdc:	026501f5 	.word	0x026501f5
 8011fe0:	027f0239 	.word	0x027f0239
 8011fe4:	027f027f 	.word	0x027f027f
 8011fe8:	0037027f 	.word	0x0037027f
    chprintf((BaseSequentialStream*)&SD6, "\n\rxbee response mailbox failure\n\r");
 8011fec:	49cd      	ldr	r1, [pc, #820]	; (8012324 <run_cmd+0x3d4>)
 8011fee:	48ce      	ldr	r0, [pc, #824]	; (8012328 <run_cmd+0x3d8>)
 8011ff0:	f7f9 ff3e 	bl	800be70 <chprintf>
      break;
  }

 (void)chMBPostTimeout(&xbee_mbx->tx_free_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //if not needed, return to pool
  return NO_REPLY; //don't send response packet
}
 8011ff4:	4638      	mov	r0, r7
 8011ff6:	b004      	add	sp, #16
 8011ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if( cmd_packet->data_length > 1 )
 8011ffc:	89b3      	ldrh	r3, [r6, #12]
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	2b01      	cmp	r3, #1
 8012002:	d81c      	bhi.n	801203e <run_cmd+0xee>
        resp_packet->data[1] = 0;//null terminate to make like a string
 8012004:	2300      	movs	r3, #0
 8012006:	73e3      	strb	r3, [r4, #15]
        chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 6, "%02X",node_state);
 8012008:	f104 000e 	add.w	r0, r4, #14
 801200c:	f001 fe18 	bl	8013c40 <strlen>
 8012010:	4bc6      	ldr	r3, [pc, #792]	; (801232c <run_cmd+0x3dc>)
 8012012:	7a1b      	ldrb	r3, [r3, #8]
 8012014:	3008      	adds	r0, #8
 8012016:	4420      	add	r0, r4
 8012018:	4ac5      	ldr	r2, [pc, #788]	; (8012330 <run_cmd+0x3e0>)
 801201a:	2106      	movs	r1, #6
 801201c:	4408      	add	r0, r1
 801201e:	f7f9 ff6f 	bl	800bf00 <chsnprintf>
        resp_packet->data_length = strlen(resp_packet->data);
 8012022:	9c03      	ldr	r4, [sp, #12]
 8012024:	f104 000e 	add.w	r0, r4, #14
 8012028:	f001 fe0a 	bl	8013c40 <strlen>
 801202c:	81a0      	strh	r0, [r4, #12]
        (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 801202e:	2200      	movs	r2, #0
 8012030:	2300      	movs	r3, #0
 8012032:	4621      	mov	r1, r4
 8012034:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8012038:	f7f8 fbea 	bl	800a810 <chMBPostTimeout>
        return SEND_REPLY; //flag that the packet needs to be sent
 801203c:	e7da      	b.n	8011ff4 <run_cmd+0xa4>
        node_state = check_node_state( strtoul(&cmd_packet->data[1], NULL, 16) );
 801203e:	2210      	movs	r2, #16
 8012040:	2100      	movs	r1, #0
 8012042:	f106 000f 	add.w	r0, r6, #15
 8012046:	f002 f927 	bl	8014298 <strtoul>
 801204a:	b2c0      	uxtb	r0, r0
 801204c:	f7ff ff60 	bl	8011f10 <check_node_state>
 8012050:	4bb6      	ldr	r3, [pc, #728]	; (801232c <run_cmd+0x3dc>)
 8012052:	7218      	strb	r0, [r3, #8]
      break;
 8012054:	e21a      	b.n	801248c <run_cmd+0x53c>
      resp_packet->data[1] = ';';
 8012056:	233b      	movs	r3, #59	; 0x3b
 8012058:	73e3      	strb	r3, [r4, #15]
      resp_packet->data[2] = READ_INFO;
 801205a:	2349      	movs	r3, #73	; 0x49
 801205c:	7423      	strb	r3, [r4, #16]
      resp_packet->data[3] = node_config.device_id[0];  //node id
 801205e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 801232c <run_cmd+0x3dc>
 8012062:	f899 3020 	ldrb.w	r3, [r9, #32]
 8012066:	7463      	strb	r3, [r4, #17]
      resp_packet->data[4] = node_config.device_id[1];
 8012068:	f899 3021 	ldrb.w	r3, [r9, #33]	; 0x21
 801206c:	74a3      	strb	r3, [r4, #18]
      resp_packet->data[5] = 0;//node_config.device_id[2];
 801206e:	2300      	movs	r3, #0
 8012070:	74e3      	strb	r3, [r4, #19]
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, "%s%s",HW_TYPE,HW_VERSION); //HW data
 8012072:	f104 000e 	add.w	r0, r4, #14
 8012076:	f001 fde3 	bl	8013c40 <strlen>
 801207a:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8012360 <run_cmd+0x410>
 801207e:	3008      	adds	r0, #8
 8012080:	4420      	add	r0, r4
 8012082:	4bac      	ldr	r3, [pc, #688]	; (8012334 <run_cmd+0x3e4>)
 8012084:	9300      	str	r3, [sp, #0]
 8012086:	4bac      	ldr	r3, [pc, #688]	; (8012338 <run_cmd+0x3e8>)
 8012088:	4652      	mov	r2, sl
 801208a:	2164      	movs	r1, #100	; 0x64
 801208c:	3006      	adds	r0, #6
 801208e:	f7f9 ff37 	bl	800bf00 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, "%s%s",FW_TYPE,FW_VERSION); //FW data
 8012092:	9c03      	ldr	r4, [sp, #12]
 8012094:	f104 000e 	add.w	r0, r4, #14
 8012098:	f001 fdd2 	bl	8013c40 <strlen>
 801209c:	3008      	adds	r0, #8
 801209e:	4420      	add	r0, r4
 80120a0:	4ba6      	ldr	r3, [pc, #664]	; (801233c <run_cmd+0x3ec>)
 80120a2:	9300      	str	r3, [sp, #0]
 80120a4:	4ba6      	ldr	r3, [pc, #664]	; (8012340 <run_cmd+0x3f0>)
 80120a6:	4652      	mov	r2, sl
 80120a8:	2164      	movs	r1, #100	; 0x64
 80120aa:	3006      	adds	r0, #6
 80120ac:	f7f9 ff28 	bl	800bf00 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%c",INPUT_TYPE_CMD,node_config.dev_input_type); //input type
 80120b0:	9c03      	ldr	r4, [sp, #12]
 80120b2:	f104 000e 	add.w	r0, r4, #14
 80120b6:	f001 fdc3 	bl	8013c40 <strlen>
 80120ba:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
 80120be:	3008      	adds	r0, #8
 80120c0:	4420      	add	r0, r4
 80120c2:	9300      	str	r3, [sp, #0]
 80120c4:	2355      	movs	r3, #85	; 0x55
 80120c6:	4a9f      	ldr	r2, [pc, #636]	; (8012344 <run_cmd+0x3f4>)
 80120c8:	2164      	movs	r1, #100	; 0x64
 80120ca:	3006      	adds	r0, #6
 80120cc:	f7f9 ff18 	bl	800bf00 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%d",REC_RATE_CMD,target_sps); //recording rate
 80120d0:	9c03      	ldr	r4, [sp, #12]
 80120d2:	f104 000e 	add.w	r0, r4, #14
 80120d6:	f001 fdb3 	bl	8013c40 <strlen>
 80120da:	3008      	adds	r0, #8
 80120dc:	4420      	add	r0, r4
 80120de:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80120e2:	9300      	str	r3, [sp, #0]
 80120e4:	2366      	movs	r3, #102	; 0x66
 80120e6:	4a98      	ldr	r2, [pc, #608]	; (8012348 <run_cmd+0x3f8>)
 80120e8:	2164      	movs	r1, #100	; 0x64
 80120ea:	3006      	adds	r0, #6
 80120ec:	f7f9 ff08 	bl	800bf00 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%i",TIMEBASE_CMD,2000); //timebase
 80120f0:	9c03      	ldr	r4, [sp, #12]
 80120f2:	f104 000e 	add.w	r0, r4, #14
 80120f6:	f001 fda3 	bl	8013c40 <strlen>
 80120fa:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8012358 <run_cmd+0x408>
 80120fe:	3008      	adds	r0, #8
 8012100:	4420      	add	r0, r4
 8012102:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8012106:	9300      	str	r3, [sp, #0]
 8012108:	2354      	movs	r3, #84	; 0x54
 801210a:	4652      	mov	r2, sl
 801210c:	2164      	movs	r1, #100	; 0x64
 801210e:	3006      	adds	r0, #6
 8012110:	f7f9 fef6 	bl	800bf00 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%i",READ_BAT_CMD,battery_soc); //battery level
 8012114:	9c03      	ldr	r4, [sp, #12]
 8012116:	f104 000e 	add.w	r0, r4, #14
 801211a:	f001 fd91 	bl	8013c40 <strlen>
 801211e:	f899 3864 	ldrb.w	r3, [r9, #2148]	; 0x864
 8012122:	3008      	adds	r0, #8
 8012124:	4420      	add	r0, r4
 8012126:	9300      	str	r3, [sp, #0]
 8012128:	2362      	movs	r3, #98	; 0x62
 801212a:	4652      	mov	r2, sl
 801212c:	2164      	movs	r1, #100	; 0x64
 801212e:	3006      	adds	r0, #6
 8012130:	f7f9 fee6 	bl	800bf00 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%s,%c,",READ_GPS,gps_data.lat,gps_data.lat_NS); //gps lat
 8012134:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012138:	f109 000e 	add.w	r0, r9, #14
 801213c:	f001 fd80 	bl	8013c40 <strlen>
 8012140:	4c82      	ldr	r4, [pc, #520]	; (801234c <run_cmd+0x3fc>)
 8012142:	7b63      	ldrb	r3, [r4, #13]
 8012144:	3008      	adds	r0, #8
 8012146:	4448      	add	r0, r9
 8012148:	9301      	str	r3, [sp, #4]
 801214a:	1c63      	adds	r3, r4, #1
 801214c:	9300      	str	r3, [sp, #0]
 801214e:	2347      	movs	r3, #71	; 0x47
 8012150:	4a7f      	ldr	r2, [pc, #508]	; (8012350 <run_cmd+0x400>)
 8012152:	2164      	movs	r1, #100	; 0x64
 8012154:	3006      	adds	r0, #6
 8012156:	f7f9 fed3 	bl	800bf00 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, "%s,%c,%s",gps_data.lon,gps_data.lon_EW,gps_data.elev); //gps lon and elev
 801215a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801215e:	f109 000e 	add.w	r0, r9, #14
 8012162:	f001 fd6d 	bl	8013c40 <strlen>
 8012166:	7ea3      	ldrb	r3, [r4, #26]
 8012168:	3008      	adds	r0, #8
 801216a:	4448      	add	r0, r9
 801216c:	f104 021b 	add.w	r2, r4, #27
 8012170:	9201      	str	r2, [sp, #4]
 8012172:	9300      	str	r3, [sp, #0]
 8012174:	f104 030e 	add.w	r3, r4, #14
 8012178:	4a76      	ldr	r2, [pc, #472]	; (8012354 <run_cmd+0x404>)
 801217a:	2164      	movs	r1, #100	; 0x64
 801217c:	3006      	adds	r0, #6
 801217e:	f7f9 febf 	bl	800bf00 <chsnprintf>
      resp_packet->data_length = strlen(resp_packet->data);
 8012182:	ac04      	add	r4, sp, #16
 8012184:	f854 9d04 	ldr.w	r9, [r4, #-4]!
 8012188:	f109 000e 	add.w	r0, r9, #14
 801218c:	f001 fd58 	bl	8013c40 <strlen>
 8012190:	f8a9 000c 	strh.w	r0, [r9, #12]
      (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response  msg_t msg = chMBFetchTimeout(&mbx->tx_free_packets, (msg_t *)&resp_packet,TIME_IMMEDIATE);
 8012194:	3578      	adds	r5, #120	; 0x78
 8012196:	2200      	movs	r2, #0
 8012198:	2300      	movs	r3, #0
 801219a:	4649      	mov	r1, r9
 801219c:	4628      	mov	r0, r5
 801219e:	f7f8 fb37 	bl	800a810 <chMBPostTimeout>
      msg_t msg = chMBFetchTimeout(&mbx->tx_free_packets, (msg_t *)&resp_packet,TIME_IMMEDIATE); //grab a new packet
 80121a2:	2200      	movs	r2, #0
 80121a4:	2300      	movs	r3, #0
 80121a6:	4621      	mov	r1, r4
 80121a8:	4640      	mov	r0, r8
 80121aa:	f7f8 fc89 	bl	800aac0 <chMBFetchTimeout>
      if( msg != MSG_OK)
 80121ae:	4680      	mov	r8, r0
 80121b0:	b120      	cbz	r0, 80121bc <run_cmd+0x26c>
        chprintf((BaseSequentialStream*)&SD6, "\n\rxbee response mailbox failure\n\r");
 80121b2:	495c      	ldr	r1, [pc, #368]	; (8012324 <run_cmd+0x3d4>)
 80121b4:	485c      	ldr	r0, [pc, #368]	; (8012328 <run_cmd+0x3d8>)
 80121b6:	f7f9 fe5b 	bl	800be70 <chprintf>
        return SEND_REPLY; //still need to send the first packet
 80121ba:	e71b      	b.n	8011ff4 <run_cmd+0xa4>
      memcpy(resp_packet,cmd_packet,sizeof(xbee_packet)); //copy the address etc.
 80121bc:	225e      	movs	r2, #94	; 0x5e
 80121be:	4631      	mov	r1, r6
 80121c0:	9803      	ldr	r0, [sp, #12]
 80121c2:	f001 fb15 	bl	80137f0 <memcpy>
      resp_packet->data_length = 0; //reset data buffer
 80121c6:	9c03      	ldr	r4, [sp, #12]
 80121c8:	2300      	movs	r3, #0
 80121ca:	81a3      	strh	r3, [r4, #12]
      resp_packet->data[1] = 0; //null terminate to make it a string
 80121cc:	73e3      	strb	r3, [r4, #15]
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%i",LINE_CMD,node_config.node_line); //node line
 80121ce:	f104 000e 	add.w	r0, r4, #14
 80121d2:	f001 fd35 	bl	8013c40 <strlen>
 80121d6:	4e55      	ldr	r6, [pc, #340]	; (801232c <run_cmd+0x3dc>)
 80121d8:	f8d6 3051 	ldr.w	r3, [r6, #81]	; 0x51
 80121dc:	4f5e      	ldr	r7, [pc, #376]	; (8012358 <run_cmd+0x408>)
 80121de:	3008      	adds	r0, #8
 80121e0:	4420      	add	r0, r4
 80121e2:	9300      	str	r3, [sp, #0]
 80121e4:	236c      	movs	r3, #108	; 0x6c
 80121e6:	463a      	mov	r2, r7
 80121e8:	2164      	movs	r1, #100	; 0x64
 80121ea:	3006      	adds	r0, #6
 80121ec:	f7f9 fe88 	bl	800bf00 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%i",STATION_CMD,node_config.node_station); //node station
 80121f0:	9c03      	ldr	r4, [sp, #12]
 80121f2:	f104 000e 	add.w	r0, r4, #14
 80121f6:	f001 fd23 	bl	8013c40 <strlen>
 80121fa:	f8d6 3055 	ldr.w	r3, [r6, #85]	; 0x55
 80121fe:	3008      	adds	r0, #8
 8012200:	4420      	add	r0, r4
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	236e      	movs	r3, #110	; 0x6e
 8012206:	463a      	mov	r2, r7
 8012208:	2164      	movs	r1, #100	; 0x64
 801220a:	3006      	adds	r0, #6
 801220c:	f7f9 fe78 	bl	800bf00 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%02X",READ_STATUS_CMD,node_state); //status
 8012210:	9c03      	ldr	r4, [sp, #12]
 8012212:	f104 000e 	add.w	r0, r4, #14
 8012216:	f001 fd13 	bl	8013c40 <strlen>
 801221a:	7a33      	ldrb	r3, [r6, #8]
 801221c:	3008      	adds	r0, #8
 801221e:	4420      	add	r0, r4
 8012220:	9300      	str	r3, [sp, #0]
 8012222:	2373      	movs	r3, #115	; 0x73
 8012224:	4a4d      	ldr	r2, [pc, #308]	; (801235c <run_cmd+0x40c>)
 8012226:	2164      	movs	r1, #100	; 0x64
 8012228:	3006      	adds	r0, #6
 801222a:	f7f9 fe69 	bl	800bf00 <chsnprintf>
      chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%c%c",RELAY_CMD,relay_state); //recording rate
 801222e:	9c03      	ldr	r4, [sp, #12]
 8012230:	f104 000e 	add.w	r0, r4, #14
 8012234:	f001 fd04 	bl	8013c40 <strlen>
 8012238:	f896 3059 	ldrb.w	r3, [r6, #89]	; 0x59
 801223c:	3008      	adds	r0, #8
 801223e:	4420      	add	r0, r4
 8012240:	9300      	str	r3, [sp, #0]
 8012242:	2359      	movs	r3, #89	; 0x59
 8012244:	4a3f      	ldr	r2, [pc, #252]	; (8012344 <run_cmd+0x3f4>)
 8012246:	2164      	movs	r1, #100	; 0x64
 8012248:	3006      	adds	r0, #6
 801224a:	f7f9 fe59 	bl	800bf00 <chsnprintf>
      resp_packet->data_length = strlen(resp_packet->data);
 801224e:	9c03      	ldr	r4, [sp, #12]
 8012250:	f104 000e 	add.w	r0, r4, #14
 8012254:	f001 fcf4 	bl	8013c40 <strlen>
 8012258:	81a0      	strh	r0, [r4, #12]
      (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 801225a:	2200      	movs	r2, #0
 801225c:	2300      	movs	r3, #0
 801225e:	4621      	mov	r1, r4
 8012260:	4628      	mov	r0, r5
 8012262:	f7f8 fad5 	bl	800a810 <chMBPostTimeout>
      return SEND_REPLY; //flag that the packet needs to be sent
 8012266:	4647      	mov	r7, r8
 8012268:	e6c4      	b.n	8011ff4 <run_cmd+0xa4>
      resp_packet->data[1] = ';';
 801226a:	233b      	movs	r3, #59	; 0x3b
 801226c:	73e3      	strb	r3, [r4, #15]
      resp_packet->data[2] = READ_INFO;
 801226e:	2349      	movs	r3, #73	; 0x49
 8012270:	7423      	strb	r3, [r4, #16]
      resp_packet->data[3] = node_config.device_id[0];  //node id
 8012272:	4b2e      	ldr	r3, [pc, #184]	; (801232c <run_cmd+0x3dc>)
 8012274:	f893 2020 	ldrb.w	r2, [r3, #32]
 8012278:	7462      	strb	r2, [r4, #17]
      resp_packet->data[4] = node_config.device_id[1];
 801227a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801227e:	74a2      	strb	r2, [r4, #18]
      resp_packet->data[5] = node_config.device_id[2];
 8012280:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012284:	74e3      	strb	r3, [r4, #19]
      resp_packet->data[6] = 0;
 8012286:	2300      	movs	r3, #0
 8012288:	7523      	strb	r3, [r4, #20]
      chsnprintf( resp_packet->data[strlen(resp_packet)], 100, "%s%s",HW_TYPE,HW_VERSION); //HW data
 801228a:	4620      	mov	r0, r4
 801228c:	f001 fcd8 	bl	8013c40 <strlen>
 8012290:	4420      	add	r0, r4
 8012292:	7b80      	ldrb	r0, [r0, #14]
 8012294:	4e32      	ldr	r6, [pc, #200]	; (8012360 <run_cmd+0x410>)
 8012296:	4b27      	ldr	r3, [pc, #156]	; (8012334 <run_cmd+0x3e4>)
 8012298:	9300      	str	r3, [sp, #0]
 801229a:	4b27      	ldr	r3, [pc, #156]	; (8012338 <run_cmd+0x3e8>)
 801229c:	4632      	mov	r2, r6
 801229e:	2164      	movs	r1, #100	; 0x64
 80122a0:	f7f9 fe2e 	bl	800bf00 <chsnprintf>
      chsnprintf( resp_packet->data[strlen(resp_packet)], 100, "%s%s",FW_TYPE,FW_VERSION); //FW data
 80122a4:	9c03      	ldr	r4, [sp, #12]
 80122a6:	4620      	mov	r0, r4
 80122a8:	f001 fcca 	bl	8013c40 <strlen>
 80122ac:	4420      	add	r0, r4
 80122ae:	7b80      	ldrb	r0, [r0, #14]
 80122b0:	4b22      	ldr	r3, [pc, #136]	; (801233c <run_cmd+0x3ec>)
 80122b2:	9300      	str	r3, [sp, #0]
 80122b4:	4b22      	ldr	r3, [pc, #136]	; (8012340 <run_cmd+0x3f0>)
 80122b6:	4632      	mov	r2, r6
 80122b8:	2164      	movs	r1, #100	; 0x64
 80122ba:	f7f9 fe21 	bl	800bf00 <chsnprintf>
      resp_packet->data_length = strlen(resp_packet->data);
 80122be:	9c03      	ldr	r4, [sp, #12]
 80122c0:	f104 000e 	add.w	r0, r4, #14
 80122c4:	f001 fcbc 	bl	8013c40 <strlen>
 80122c8:	81a0      	strh	r0, [r4, #12]
      (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 80122ca:	2200      	movs	r2, #0
 80122cc:	2300      	movs	r3, #0
 80122ce:	4621      	mov	r1, r4
 80122d0:	f105 0078 	add.w	r0, r5, #120	; 0x78
 80122d4:	f7f8 fa9c 	bl	800a810 <chMBPostTimeout>
      return SEND_REPLY; //flag that the packet needs to be sent
 80122d8:	e68c      	b.n	8011ff4 <run_cmd+0xa4>
       if( cmd_packet->data_length >= 12 ) //6char for endTIme, 6char for memVal
 80122da:	89b3      	ldrh	r3, [r6, #12]
 80122dc:	b29b      	uxth	r3, r3
 80122de:	2b0b      	cmp	r3, #11
 80122e0:	f240 80d4 	bls.w	801248c <run_cmd+0x53c>
         if( ( node_state & STATE_ACTIVE ) && ( logging_state == READY ) )
 80122e4:	4b11      	ldr	r3, [pc, #68]	; (801232c <run_cmd+0x3dc>)
 80122e6:	7a1b      	ldrb	r3, [r3, #8]
 80122e8:	f013 0f08 	tst.w	r3, #8
 80122ec:	f000 80ce 	beq.w	801248c <run_cmd+0x53c>
 80122f0:	4b0e      	ldr	r3, [pc, #56]	; (801232c <run_cmd+0x3dc>)
 80122f2:	7a5b      	ldrb	r3, [r3, #9]
 80122f4:	b2db      	uxtb	r3, r3
 80122f6:	2b01      	cmp	r3, #1
 80122f8:	f040 80c8 	bne.w	801248c <run_cmd+0x53c>
           memcpy(mem_value,6+cmd_packet->data,6); //copy the address etc.
 80122fc:	4b19      	ldr	r3, [pc, #100]	; (8012364 <run_cmd+0x414>)
 80122fe:	f856 2f14 	ldr.w	r2, [r6, #20]!
 8012302:	601a      	str	r2, [r3, #0]
 8012304:	88b2      	ldrh	r2, [r6, #4]
 8012306:	809a      	strh	r2, [r3, #4]
           logging_state = START_RECORDING;
 8012308:	4b08      	ldr	r3, [pc, #32]	; (801232c <run_cmd+0x3dc>)
 801230a:	2202      	movs	r2, #2
 801230c:	725a      	strb	r2, [r3, #9]
 801230e:	e0bd      	b.n	801248c <run_cmd+0x53c>
       if( logging_state >= START_RECORDING )
 8012310:	4b06      	ldr	r3, [pc, #24]	; (801232c <run_cmd+0x3dc>)
 8012312:	7a5b      	ldrb	r3, [r3, #9]
 8012314:	b2db      	uxtb	r3, r3
 8012316:	2b01      	cmp	r3, #1
 8012318:	f240 80b8 	bls.w	801248c <run_cmd+0x53c>
         logging_state = STOP_RECORDING;
 801231c:	4b03      	ldr	r3, [pc, #12]	; (801232c <run_cmd+0x3dc>)
 801231e:	2205      	movs	r2, #5
 8012320:	725a      	strb	r2, [r3, #9]
 8012322:	e0b3      	b.n	801248c <run_cmd+0x53c>
 8012324:	08016488 	.word	0x08016488
 8012328:	20004c10 	.word	0x20004c10
 801232c:	200022c8 	.word	0x200022c8
 8012330:	080164ac 	.word	0x080164ac
 8012334:	080164c0 	.word	0x080164c0
 8012338:	080164b4 	.word	0x080164b4
 801233c:	080164d0 	.word	0x080164d0
 8012340:	080164c8 	.word	0x080164c8
 8012344:	080164d8 	.word	0x080164d8
 8012348:	080164e0 	.word	0x080164e0
 801234c:	2000fa00 	.word	0x2000fa00
 8012350:	080164f0 	.word	0x080164f0
 8012354:	080164fc 	.word	0x080164fc
 8012358:	080164e8 	.word	0x080164e8
 801235c:	08016508 	.word	0x08016508
 8012360:	080164b8 	.word	0x080164b8
 8012364:	2000fb30 	.word	0x2000fb30
      if( cmd_packet->data_length > 1 )//check if cmd has argument
 8012368:	89b3      	ldrh	r3, [r6, #12]
 801236a:	b29b      	uxth	r3, r3
 801236c:	2b01      	cmp	r3, #1
 801236e:	d92a      	bls.n	80123c6 <run_cmd+0x476>
        if( check_valid_relay(cmd_packet->data[1]) )
 8012370:	7bf0      	ldrb	r0, [r6, #15]
 8012372:	f7ff fddd 	bl	8011f30 <check_valid_relay>
 8012376:	bb10      	cbnz	r0, 80123be <run_cmd+0x46e>
       if( cmd_packet->data_length > 1 )
 8012378:	89b3      	ldrh	r3, [r6, #12]
 801237a:	b29b      	uxth	r3, r3
 801237c:	2b01      	cmp	r3, #1
 801237e:	d835      	bhi.n	80123ec <run_cmd+0x49c>
         resp_packet->data[1] = 0;//null terminate to make like a string
 8012380:	9c03      	ldr	r4, [sp, #12]
 8012382:	2300      	movs	r3, #0
 8012384:	73e3      	strb	r3, [r4, #15]
         chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%i",node_config.node_line); //node line
 8012386:	f104 000e 	add.w	r0, r4, #14
 801238a:	f001 fc59 	bl	8013c40 <strlen>
 801238e:	4b45      	ldr	r3, [pc, #276]	; (80124a4 <run_cmd+0x554>)
 8012390:	f8d3 3051 	ldr.w	r3, [r3, #81]	; 0x51
 8012394:	3008      	adds	r0, #8
 8012396:	4420      	add	r0, r4
 8012398:	4a43      	ldr	r2, [pc, #268]	; (80124a8 <run_cmd+0x558>)
 801239a:	2164      	movs	r1, #100	; 0x64
 801239c:	3006      	adds	r0, #6
 801239e:	f7f9 fdaf 	bl	800bf00 <chsnprintf>
         resp_packet->data_length = strlen(resp_packet->data);
 80123a2:	9c03      	ldr	r4, [sp, #12]
 80123a4:	f104 000e 	add.w	r0, r4, #14
 80123a8:	f001 fc4a 	bl	8013c40 <strlen>
 80123ac:	81a0      	strh	r0, [r4, #12]
         (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 80123ae:	2200      	movs	r2, #0
 80123b0:	2300      	movs	r3, #0
 80123b2:	4621      	mov	r1, r4
 80123b4:	f105 0078 	add.w	r0, r5, #120	; 0x78
 80123b8:	f7f8 fa2a 	bl	800a810 <chMBPostTimeout>
         return SEND_REPLY; //flag that the packet needs to be sent
 80123bc:	e61a      	b.n	8011ff4 <run_cmd+0xa4>
          setRelayState( cmd_packet->data[1] );
 80123be:	7bf0      	ldrb	r0, [r6, #15]
 80123c0:	f7fe f93e 	bl	8010640 <setRelayState>
 80123c4:	e7d8      	b.n	8012378 <run_cmd+0x428>
        resp_packet->data[1] = relay_state;
 80123c6:	4b37      	ldr	r3, [pc, #220]	; (80124a4 <run_cmd+0x554>)
 80123c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80123cc:	73e3      	strb	r3, [r4, #15]
        resp_packet->data[2] = 0;
 80123ce:	2300      	movs	r3, #0
 80123d0:	7423      	strb	r3, [r4, #16]
        resp_packet->data_length = strlen(resp_packet->data);
 80123d2:	f104 000e 	add.w	r0, r4, #14
 80123d6:	f001 fc33 	bl	8013c40 <strlen>
 80123da:	81a0      	strh	r0, [r4, #12]
        (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 80123dc:	2200      	movs	r2, #0
 80123de:	2300      	movs	r3, #0
 80123e0:	4621      	mov	r1, r4
 80123e2:	f105 0078 	add.w	r0, r5, #120	; 0x78
 80123e6:	f7f8 fa13 	bl	800a810 <chMBPostTimeout>
        return SEND_REPLY; //flag that the packet needs to be sent
 80123ea:	e603      	b.n	8011ff4 <run_cmd+0xa4>
         node_config.node_line = strtoul(&cmd_packet->data[1], NULL, 10);
 80123ec:	220a      	movs	r2, #10
 80123ee:	2100      	movs	r1, #0
 80123f0:	f106 000f 	add.w	r0, r6, #15
 80123f4:	f001 ff50 	bl	8014298 <strtoul>
 80123f8:	4b2a      	ldr	r3, [pc, #168]	; (80124a4 <run_cmd+0x554>)
 80123fa:	f8c3 0051 	str.w	r0, [r3, #81]	; 0x51
       break;
 80123fe:	e045      	b.n	801248c <run_cmd+0x53c>
       if( cmd_packet->data_length > 1 )
 8012400:	89b3      	ldrh	r3, [r6, #12]
 8012402:	b29b      	uxth	r3, r3
 8012404:	2b01      	cmp	r3, #1
 8012406:	d81d      	bhi.n	8012444 <run_cmd+0x4f4>
         resp_packet->data[1] = 0;//null terminate to make like a string
 8012408:	2300      	movs	r3, #0
 801240a:	73e3      	strb	r3, [r4, #15]
         chsnprintf( &resp_packet->data[strlen(resp_packet->data)], 100, ";%i",node_config.node_station); //node station
 801240c:	f104 000e 	add.w	r0, r4, #14
 8012410:	f001 fc16 	bl	8013c40 <strlen>
 8012414:	4b23      	ldr	r3, [pc, #140]	; (80124a4 <run_cmd+0x554>)
 8012416:	f8d3 3055 	ldr.w	r3, [r3, #85]	; 0x55
 801241a:	3008      	adds	r0, #8
 801241c:	4420      	add	r0, r4
 801241e:	4a22      	ldr	r2, [pc, #136]	; (80124a8 <run_cmd+0x558>)
 8012420:	2164      	movs	r1, #100	; 0x64
 8012422:	3006      	adds	r0, #6
 8012424:	f7f9 fd6c 	bl	800bf00 <chsnprintf>
         resp_packet->data_length = strlen(resp_packet->data);
 8012428:	9c03      	ldr	r4, [sp, #12]
 801242a:	f104 000e 	add.w	r0, r4, #14
 801242e:	f001 fc07 	bl	8013c40 <strlen>
 8012432:	81a0      	strh	r0, [r4, #12]
         (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 8012434:	2200      	movs	r2, #0
 8012436:	2300      	movs	r3, #0
 8012438:	4621      	mov	r1, r4
 801243a:	f105 0078 	add.w	r0, r5, #120	; 0x78
 801243e:	f7f8 f9e7 	bl	800a810 <chMBPostTimeout>
         return SEND_REPLY; //flag that the packet needs to be sent
 8012442:	e5d7      	b.n	8011ff4 <run_cmd+0xa4>
         node_config.node_station = strtoul(&cmd_packet->data[1], NULL, 10);
 8012444:	220a      	movs	r2, #10
 8012446:	2100      	movs	r1, #0
 8012448:	f106 000f 	add.w	r0, r6, #15
 801244c:	f001 ff24 	bl	8014298 <strtoul>
 8012450:	4b14      	ldr	r3, [pc, #80]	; (80124a4 <run_cmd+0x554>)
 8012452:	f8c3 0055 	str.w	r0, [r3, #85]	; 0x55
       break;
 8012456:	e019      	b.n	801248c <run_cmd+0x53c>
      resp_packet->data[1] = '0'; //null terminate
 8012458:	2330      	movs	r3, #48	; 0x30
 801245a:	73e3      	strb	r3, [r4, #15]
      chsnprintf( &resp_packet->data[strlen(resp_packet)], 100, "%s",message_buffer); //append message buffer contents
 801245c:	4620      	mov	r0, r4
 801245e:	f001 fbef 	bl	8013c40 <strlen>
 8012462:	3008      	adds	r0, #8
 8012464:	4420      	add	r0, r4
 8012466:	4b11      	ldr	r3, [pc, #68]	; (80124ac <run_cmd+0x55c>)
 8012468:	4a11      	ldr	r2, [pc, #68]	; (80124b0 <run_cmd+0x560>)
 801246a:	2164      	movs	r1, #100	; 0x64
 801246c:	3006      	adds	r0, #6
 801246e:	f7f9 fd47 	bl	800bf00 <chsnprintf>
      resp_packet->data_length = strlen(resp_packet->data);
 8012472:	9c03      	ldr	r4, [sp, #12]
 8012474:	f104 000e 	add.w	r0, r4, #14
 8012478:	f001 fbe2 	bl	8013c40 <strlen>
 801247c:	81a0      	strh	r0, [r4, #12]
      (void)chMBPostTimeout(&mbx->tx_filled_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //post the response
 801247e:	2200      	movs	r2, #0
 8012480:	2300      	movs	r3, #0
 8012482:	4621      	mov	r1, r4
 8012484:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8012488:	f7f8 f9c2 	bl	800a810 <chMBPostTimeout>
 (void)chMBPostTimeout(&xbee_mbx->tx_free_packets, (msg_t)resp_packet,TIME_IMMEDIATE); //if not needed, return to pool
 801248c:	4b09      	ldr	r3, [pc, #36]	; (80124b4 <run_cmd+0x564>)
 801248e:	6818      	ldr	r0, [r3, #0]
 8012490:	2200      	movs	r2, #0
 8012492:	2300      	movs	r3, #0
 8012494:	9903      	ldr	r1, [sp, #12]
 8012496:	30a0      	adds	r0, #160	; 0xa0
 8012498:	f7f8 f9ba 	bl	800a810 <chMBPostTimeout>
  return NO_REPLY; //don't send response packet
 801249c:	f04f 37ff 	mov.w	r7, #4294967295
 80124a0:	e5a8      	b.n	8011ff4 <run_cmd+0xa4>
 80124a2:	bf00      	nop
 80124a4:	200022c8 	.word	0x200022c8
 80124a8:	08016510 	.word	0x08016510
 80124ac:	2000fbd4 	.word	0x2000fbd4
 80124b0:	08015ce0 	.word	0x08015ce0
 80124b4:	2000f9fc 	.word	0x2000f9fc
 80124b8:	f3af 8000 	nop.w
 80124bc:	f3af 8000 	nop.w

080124c0 <button_hw_init>:
}

//configure buttons as inputs

void button_hw_init()
{
 80124c0:	b510      	push	{r4, lr}
  palSetLineMode(RDY_BTN_LINE,PAL_MODE_INPUT_PULLUP | PAL_STM32_OSPEED_HIGHEST);    //set status LED line mode
 80124c2:	4c06      	ldr	r4, [pc, #24]	; (80124dc <button_hw_init+0x1c>)
 80124c4:	2238      	movs	r2, #56	; 0x38
 80124c6:	2110      	movs	r1, #16
 80124c8:	4620      	mov	r0, r4
 80124ca:	f7f2 fd39 	bl	8004f40 <_pal_lld_setgroupmode>
  palSetLineMode(PWR_BTN_LINE,PAL_MODE_INPUT_PULLUP | PAL_STM32_OSPEED_HIGHEST);    //set status LED line mode
 80124ce:	2238      	movs	r2, #56	; 0x38
 80124d0:	2120      	movs	r1, #32
 80124d2:	4620      	mov	r0, r4
 80124d4:	f7f2 fd34 	bl	8004f40 <_pal_lld_setgroupmode>

}
 80124d8:	bd10      	pop	{r4, pc}
 80124da:	bf00      	nop
 80124dc:	40021000 	.word	0x40021000

080124e0 <read_buttons>:
//static THD_FUNCTION(button_thread, arg)

uint32_t rdy_btn_cnt = 0;
uint32_t pwr_btn_cnt = 0;
void read_buttons()//THD_FUNCTION(button_thread, arg)
{
 80124e0:	b508      	push	{r3, lr}


//  while (true)
//  {
    //read button states, update logger state
  if( !palReadLine ( RDY_BTN_LINE ) )
 80124e2:	4b2f      	ldr	r3, [pc, #188]	; (80125a0 <read_buttons+0xc0>)
 80124e4:	691b      	ldr	r3, [r3, #16]
 80124e6:	f013 0f10 	tst.w	r3, #16
 80124ea:	d123      	bne.n	8012534 <read_buttons+0x54>
  {
    rdy_btn_cnt++;
 80124ec:	4a2d      	ldr	r2, [pc, #180]	; (80125a4 <read_buttons+0xc4>)
 80124ee:	f8d2 3868 	ldr.w	r3, [r2, #2152]	; 0x868
 80124f2:	3301      	adds	r3, #1
 80124f4:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868

    if( rdy_btn_cnt >= HOLD_CNT )
 80124f8:	2b31      	cmp	r3, #49	; 0x31
 80124fa:	d806      	bhi.n	801250a <read_buttons+0x2a>
    {
      rdy_btn_state = LONG_HOLD;
      rdy_btn_cnt = HOLD_CNT;
      chprintf((BaseSequentialStream*)&SD6, "\nRDY button long hold\n\r");
    }
    else if( rdy_btn_cnt == PRESS_CNT )
 80124fc:	2b02      	cmp	r3, #2
 80124fe:	d010      	beq.n	8012522 <read_buttons+0x42>
      rdy_btn_state = PRESSED;//should broadcast an event
      chprintf((BaseSequentialStream*)&SD6, "\nRDY button pressed\n\r");
    }
    else
    {
      rdy_btn_state = 0;
 8012500:	4b28      	ldr	r3, [pc, #160]	; (80125a4 <read_buttons+0xc4>)
 8012502:	2200      	movs	r2, #0
 8012504:	f883 286c 	strb.w	r2, [r3, #2156]	; 0x86c
 8012508:	e01a      	b.n	8012540 <read_buttons+0x60>
      rdy_btn_state = LONG_HOLD;
 801250a:	4613      	mov	r3, r2
 801250c:	2202      	movs	r2, #2
 801250e:	f883 286c 	strb.w	r2, [r3, #2156]	; 0x86c
      rdy_btn_cnt = HOLD_CNT;
 8012512:	2232      	movs	r2, #50	; 0x32
 8012514:	f8c3 2868 	str.w	r2, [r3, #2152]	; 0x868
      chprintf((BaseSequentialStream*)&SD6, "\nRDY button long hold\n\r");
 8012518:	4923      	ldr	r1, [pc, #140]	; (80125a8 <read_buttons+0xc8>)
 801251a:	4824      	ldr	r0, [pc, #144]	; (80125ac <read_buttons+0xcc>)
 801251c:	f7f9 fca8 	bl	800be70 <chprintf>
 8012520:	e00e      	b.n	8012540 <read_buttons+0x60>
      rdy_btn_state = PRESSED;//should broadcast an event
 8012522:	4b20      	ldr	r3, [pc, #128]	; (80125a4 <read_buttons+0xc4>)
 8012524:	2201      	movs	r2, #1
 8012526:	f883 286c 	strb.w	r2, [r3, #2156]	; 0x86c
      chprintf((BaseSequentialStream*)&SD6, "\nRDY button pressed\n\r");
 801252a:	4921      	ldr	r1, [pc, #132]	; (80125b0 <read_buttons+0xd0>)
 801252c:	481f      	ldr	r0, [pc, #124]	; (80125ac <read_buttons+0xcc>)
 801252e:	f7f9 fc9f 	bl	800be70 <chprintf>
 8012532:	e005      	b.n	8012540 <read_buttons+0x60>
    }

  }
  else
  {
    rdy_btn_cnt = 0;
 8012534:	4b1b      	ldr	r3, [pc, #108]	; (80125a4 <read_buttons+0xc4>)
 8012536:	2200      	movs	r2, #0
 8012538:	f8c3 2868 	str.w	r2, [r3, #2152]	; 0x868
    rdy_btn_state = 0;
 801253c:	f883 286c 	strb.w	r2, [r3, #2156]	; 0x86c
  }
  if( !palReadLine ( PWR_BTN_LINE ) )
 8012540:	4b17      	ldr	r3, [pc, #92]	; (80125a0 <read_buttons+0xc0>)
 8012542:	691b      	ldr	r3, [r3, #16]
 8012544:	f013 0f20 	tst.w	r3, #32
 8012548:	d123      	bne.n	8012592 <read_buttons+0xb2>
  {
    pwr_btn_cnt++;
 801254a:	4a16      	ldr	r2, [pc, #88]	; (80125a4 <read_buttons+0xc4>)
 801254c:	f8d2 3870 	ldr.w	r3, [r2, #2160]	; 0x870
 8012550:	3301      	adds	r3, #1
 8012552:	f8c2 3870 	str.w	r3, [r2, #2160]	; 0x870

    if( pwr_btn_cnt >= HOLD_CNT )
 8012556:	2b31      	cmp	r3, #49	; 0x31
 8012558:	d806      	bhi.n	8012568 <read_buttons+0x88>
    {
      pwr_btn_state = LONG_HOLD;
      pwr_btn_cnt = HOLD_CNT;
      chprintf((BaseSequentialStream*)&SD6, "\nPWR button hold\n\r");
    }
    else if( pwr_btn_cnt >= PRESS_CNT )
 801255a:	2b01      	cmp	r3, #1
 801255c:	d810      	bhi.n	8012580 <read_buttons+0xa0>
      pwr_btn_state = PRESSED; //should broadcast an event
      chprintf((BaseSequentialStream*)&SD6, "\nPWR button pressed\n\r");
    }
    else
    {
      pwr_btn_state = 0;
 801255e:	4b11      	ldr	r3, [pc, #68]	; (80125a4 <read_buttons+0xc4>)
 8012560:	2200      	movs	r2, #0
 8012562:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
 8012566:	e01a      	b.n	801259e <read_buttons+0xbe>
      pwr_btn_state = LONG_HOLD;
 8012568:	4613      	mov	r3, r2
 801256a:	2202      	movs	r2, #2
 801256c:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
      pwr_btn_cnt = HOLD_CNT;
 8012570:	2232      	movs	r2, #50	; 0x32
 8012572:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870
      chprintf((BaseSequentialStream*)&SD6, "\nPWR button hold\n\r");
 8012576:	490f      	ldr	r1, [pc, #60]	; (80125b4 <read_buttons+0xd4>)
 8012578:	480c      	ldr	r0, [pc, #48]	; (80125ac <read_buttons+0xcc>)
 801257a:	f7f9 fc79 	bl	800be70 <chprintf>
 801257e:	e00e      	b.n	801259e <read_buttons+0xbe>
      pwr_btn_state = PRESSED; //should broadcast an event
 8012580:	4b08      	ldr	r3, [pc, #32]	; (80125a4 <read_buttons+0xc4>)
 8012582:	2201      	movs	r2, #1
 8012584:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
      chprintf((BaseSequentialStream*)&SD6, "\nPWR button pressed\n\r");
 8012588:	490b      	ldr	r1, [pc, #44]	; (80125b8 <read_buttons+0xd8>)
 801258a:	4808      	ldr	r0, [pc, #32]	; (80125ac <read_buttons+0xcc>)
 801258c:	f7f9 fc70 	bl	800be70 <chprintf>
 8012590:	e005      	b.n	801259e <read_buttons+0xbe>
    }
  }
  else
  {
    pwr_btn_cnt = 0;
 8012592:	4b04      	ldr	r3, [pc, #16]	; (80125a4 <read_buttons+0xc4>)
 8012594:	2200      	movs	r2, #0
 8012596:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870
    pwr_btn_state = 0;
 801259a:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
    */


//    chThdSleepMilliseconds(20);
//  }
}
 801259e:	bd08      	pop	{r3, pc}
 80125a0:	40021000 	.word	0x40021000
 80125a4:	200022c8 	.word	0x200022c8
 80125a8:	08016514 	.word	0x08016514
 80125ac:	20004c10 	.word	0x20004c10
 80125b0:	0801652c 	.word	0x0801652c
 80125b4:	08016544 	.word	0x08016544
 80125b8:	08016558 	.word	0x08016558
 80125bc:	f3af 8000 	nop.w

080125c0 <ctl_thread>:
{
 80125c0:	b570      	push	{r4, r5, r6, lr}
 80125c2:	b082      	sub	sp, #8
  chprintf((BaseSequentialStream*)&SD6, "\nctl thread started\n\r");
 80125c4:	498c      	ldr	r1, [pc, #560]	; (80127f8 <ctl_thread+0x238>)
 80125c6:	488d      	ldr	r0, [pc, #564]	; (80127fc <ctl_thread+0x23c>)
 80125c8:	f7f9 fc52 	bl	800be70 <chprintf>
  button_hw_init();
 80125cc:	f7ff ff78 	bl	80124c0 <button_hw_init>
  xbee_setup();
 80125d0:	f7fe f9de 	bl	8010990 <xbee_setup>
  relay_state = setRelayState( RELAY_STATE_OPEN );
 80125d4:	204f      	movs	r0, #79	; 0x4f
 80125d6:	f7fe f833 	bl	8010640 <setRelayState>
 80125da:	4b89      	ldr	r3, [pc, #548]	; (8012800 <ctl_thread+0x240>)
 80125dc:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
  last_relay_state = relay_state;
 80125e0:	f893 5059 	ldrb.w	r5, [r3, #89]	; 0x59
 80125e4:	b2ed      	uxtb	r5, r5
 80125e6:	e086      	b.n	80126f6 <ctl_thread+0x136>
      chprintf((BaseSequentialStream*)&SD6, "\n\rxbee message received\n\r");
 80125e8:	4e84      	ldr	r6, [pc, #528]	; (80127fc <ctl_thread+0x23c>)
 80125ea:	4986      	ldr	r1, [pc, #536]	; (8012804 <ctl_thread+0x244>)
 80125ec:	4630      	mov	r0, r6
 80125ee:	f7f9 fc3f 	bl	800be70 <chprintf>
      chprintf((BaseSequentialStream*)&SD6, "\n\rcmd: %c\n\r",xbee_cmd->data[0]);
 80125f2:	9b01      	ldr	r3, [sp, #4]
 80125f4:	7b9a      	ldrb	r2, [r3, #14]
 80125f6:	4984      	ldr	r1, [pc, #528]	; (8012808 <ctl_thread+0x248>)
 80125f8:	4630      	mov	r0, r6
 80125fa:	f7f9 fc39 	bl	800be70 <chprintf>
      memcpy(&tx_packet,xbee_cmd,sizeof(xbee_packet)); //save a copy to keep address etc
 80125fe:	9e01      	ldr	r6, [sp, #4]
 8012600:	225e      	movs	r2, #94	; 0x5e
 8012602:	4631      	mov	r1, r6
 8012604:	4881      	ldr	r0, [pc, #516]	; (801280c <ctl_thread+0x24c>)
 8012606:	f001 f8f3 	bl	80137f0 <memcpy>
      if( run_cmd(xbee_cmd, xbee_mbx) == SEND_REPLY )
 801260a:	4b81      	ldr	r3, [pc, #516]	; (8012810 <ctl_thread+0x250>)
 801260c:	6819      	ldr	r1, [r3, #0]
 801260e:	4630      	mov	r0, r6
 8012610:	f7ff fc9e 	bl	8011f50 <run_cmd>
 8012614:	b140      	cbz	r0, 8012628 <ctl_thread+0x68>
      (void)chMBPostTimeout(&xbee_mbx->rx_free_packets, (msg_t)xbee_cmd,TIME_IMMEDIATE);    //free the run packet
 8012616:	4b7e      	ldr	r3, [pc, #504]	; (8012810 <ctl_thread+0x250>)
 8012618:	6818      	ldr	r0, [r3, #0]
 801261a:	2200      	movs	r2, #0
 801261c:	2300      	movs	r3, #0
 801261e:	9901      	ldr	r1, [sp, #4]
 8012620:	3028      	adds	r0, #40	; 0x28
 8012622:	f7f8 f8f5 	bl	800a810 <chMBPostTimeout>
 8012626:	e072      	b.n	801270e <ctl_thread+0x14e>
        xbee_send_packet();//send response packet(s) if needed
 8012628:	f000 fd22 	bl	8013070 <xbee_send_packet>
 801262c:	e7f3      	b.n	8012616 <ctl_thread+0x56>
      if( !( node_state&STATE_ACTIVE ) )
 801262e:	4b74      	ldr	r3, [pc, #464]	; (8012800 <ctl_thread+0x240>)
 8012630:	7a1b      	ldrb	r3, [r3, #8]
 8012632:	f013 0f08 	tst.w	r3, #8
 8012636:	d105      	bne.n	8012644 <ctl_thread+0x84>
        node_state |= STATE_ACTIVE;
 8012638:	4a71      	ldr	r2, [pc, #452]	; (8012800 <ctl_thread+0x240>)
 801263a:	7a13      	ldrb	r3, [r2, #8]
 801263c:	f043 0308 	orr.w	r3, r3, #8
 8012640:	7213      	strb	r3, [r2, #8]
 8012642:	e06c      	b.n	801271e <ctl_thread+0x15e>
      else if( node_state&STATE_ACTIVE )
 8012644:	4b6e      	ldr	r3, [pc, #440]	; (8012800 <ctl_thread+0x240>)
 8012646:	7a1b      	ldrb	r3, [r3, #8]
 8012648:	f013 0f08 	tst.w	r3, #8
 801264c:	d067      	beq.n	801271e <ctl_thread+0x15e>
        node_state &= ~STATE_ACTIVE;
 801264e:	4a6c      	ldr	r2, [pc, #432]	; (8012800 <ctl_thread+0x240>)
 8012650:	7a13      	ldrb	r3, [r2, #8]
 8012652:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8012656:	7213      	strb	r3, [r2, #8]
 8012658:	e061      	b.n	801271e <ctl_thread+0x15e>
      if( logging_state == READY )
 801265a:	4b69      	ldr	r3, [pc, #420]	; (8012800 <ctl_thread+0x240>)
 801265c:	7a5b      	ldrb	r3, [r3, #9]
 801265e:	b2db      	uxtb	r3, r3
 8012660:	2b01      	cmp	r3, #1
 8012662:	d162      	bne.n	801272a <ctl_thread+0x16a>
        relay_state = setRelayState( RELAY_STATE_ADC );
 8012664:	2041      	movs	r0, #65	; 0x41
 8012666:	f7fd ffeb 	bl	8010640 <setRelayState>
 801266a:	4b65      	ldr	r3, [pc, #404]	; (8012800 <ctl_thread+0x240>)
 801266c:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
        logging_state = START_RECORDING;
 8012670:	2202      	movs	r2, #2
 8012672:	725a      	strb	r2, [r3, #9]
 8012674:	e059      	b.n	801272a <ctl_thread+0x16a>
      node_state &= ~STATE_PPS_SYNC;
 8012676:	4a62      	ldr	r2, [pc, #392]	; (8012800 <ctl_thread+0x240>)
 8012678:	7a13      	ldrb	r3, [r2, #8]
 801267a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801267e:	7213      	strb	r3, [r2, #8]
 8012680:	e05d      	b.n	801273e <ctl_thread+0x17e>
      node_state |= STATE_RECORDING;
 8012682:	4a5f      	ldr	r2, [pc, #380]	; (8012800 <ctl_thread+0x240>)
 8012684:	7a13      	ldrb	r3, [r2, #8]
 8012686:	f043 0310 	orr.w	r3, r3, #16
 801268a:	7213      	strb	r3, [r2, #8]
 801268c:	e061      	b.n	8012752 <ctl_thread+0x192>
          relay_state = setRelayState( RELAY_STATE_OPEN );
 801268e:	204f      	movs	r0, #79	; 0x4f
 8012690:	f7fd ffd6 	bl	8010640 <setRelayState>
 8012694:	4b5a      	ldr	r3, [pc, #360]	; (8012800 <ctl_thread+0x240>)
 8012696:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
          if( logging_state == RECORDING )
 801269a:	7a5b      	ldrb	r3, [r3, #9]
 801269c:	b2db      	uxtb	r3, r3
 801269e:	2b04      	cmp	r3, #4
 80126a0:	f000 8083 	beq.w	80127aa <ctl_thread+0x1ea>
            logging_state = NOT_READY;
 80126a4:	4b56      	ldr	r3, [pc, #344]	; (8012800 <ctl_thread+0x240>)
 80126a6:	2200      	movs	r2, #0
 80126a8:	725a      	strb	r2, [r3, #9]
          mcp23017_digitalWrite(&mcp_cfg, 0x07, SW_5VS_PIN_POS, 0); //turn off power to input circuit
 80126aa:	2300      	movs	r3, #0
 80126ac:	220c      	movs	r2, #12
 80126ae:	2107      	movs	r1, #7
 80126b0:	4858      	ldr	r0, [pc, #352]	; (8012814 <ctl_thread+0x254>)
 80126b2:	f000 fbd5 	bl	8012e60 <mcp23017_digitalWrite>
      tx_packet.data[0] = READ_STATUS_CMD;
 80126b6:	4855      	ldr	r0, [pc, #340]	; (801280c <ctl_thread+0x24c>)
 80126b8:	2373      	movs	r3, #115	; 0x73
 80126ba:	7383      	strb	r3, [r0, #14]
      tx_packet.data[1] = 0;
 80126bc:	2300      	movs	r3, #0
 80126be:	73c3      	strb	r3, [r0, #15]
      tx_packet.data_length = 1;
 80126c0:	2301      	movs	r3, #1
 80126c2:	8183      	strh	r3, [r0, #12]
      run_cmd( &tx_packet, xbee_mbx );
 80126c4:	4b52      	ldr	r3, [pc, #328]	; (8012810 <ctl_thread+0x250>)
 80126c6:	6819      	ldr	r1, [r3, #0]
 80126c8:	f7ff fc42 	bl	8011f50 <run_cmd>
      xbee_send_packet();
 80126cc:	f000 fcd0 	bl	8013070 <xbee_send_packet>
      last_node_state = node_state;
 80126d0:	4b4b      	ldr	r3, [pc, #300]	; (8012800 <ctl_thread+0x240>)
 80126d2:	7a1c      	ldrb	r4, [r3, #8]
 80126d4:	b2e4      	uxtb	r4, r4
    if( last_relay_state != relay_state )
 80126d6:	4b4a      	ldr	r3, [pc, #296]	; (8012800 <ctl_thread+0x240>)
 80126d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80126dc:	b2db      	uxtb	r3, r3
 80126de:	42ab      	cmp	r3, r5
 80126e0:	d167      	bne.n	80127b2 <ctl_thread+0x1f2>
    if( msg_flag )
 80126e2:	4b47      	ldr	r3, [pc, #284]	; (8012800 <ctl_thread+0x240>)
 80126e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d174      	bne.n	80127d6 <ctl_thread+0x216>
    chThdSleepMilliseconds(20);
 80126ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80126f0:	2100      	movs	r1, #0
 80126f2:	f7f6 f9c5 	bl	8008a80 <chThdSleep>
    xbee_com_parse();   //process any new received data from xbee
 80126f6:	f000 fdcb 	bl	8013290 <xbee_com_parse>
    msg_t msg = chMBFetchTimeout(&xbee_mbx->rx_filled_packets, (msg_t *)&xbee_cmd,TIME_IMMEDIATE);
 80126fa:	2200      	movs	r2, #0
 80126fc:	2300      	movs	r3, #0
 80126fe:	a901      	add	r1, sp, #4
 8012700:	4843      	ldr	r0, [pc, #268]	; (8012810 <ctl_thread+0x250>)
 8012702:	6800      	ldr	r0, [r0, #0]
 8012704:	f7f8 f9dc 	bl	800aac0 <chMBFetchTimeout>
    if( msg == MSG_OK )
 8012708:	2800      	cmp	r0, #0
 801270a:	f43f af6d 	beq.w	80125e8 <ctl_thread+0x28>
    read_buttons();
 801270e:	f7ff fee7 	bl	80124e0 <read_buttons>
    if( rdy_btn_state == PRESSED )
 8012712:	4b3b      	ldr	r3, [pc, #236]	; (8012800 <ctl_thread+0x240>)
 8012714:	f893 386c 	ldrb.w	r3, [r3, #2156]	; 0x86c
 8012718:	b2db      	uxtb	r3, r3
 801271a:	2b01      	cmp	r3, #1
 801271c:	d087      	beq.n	801262e <ctl_thread+0x6e>
    if( rdy_btn_state == LONG_HOLD )
 801271e:	4b38      	ldr	r3, [pc, #224]	; (8012800 <ctl_thread+0x240>)
 8012720:	f893 386c 	ldrb.w	r3, [r3, #2156]	; 0x86c
 8012724:	b2db      	uxtb	r3, r3
 8012726:	2b02      	cmp	r3, #2
 8012728:	d097      	beq.n	801265a <ctl_thread+0x9a>
    if( pps_lock )
 801272a:	4b35      	ldr	r3, [pc, #212]	; (8012800 <ctl_thread+0x240>)
 801272c:	f893 3875 	ldrb.w	r3, [r3, #2165]	; 0x875
 8012730:	2b00      	cmp	r3, #0
 8012732:	d0a0      	beq.n	8012676 <ctl_thread+0xb6>
      node_state |= STATE_PPS_SYNC;
 8012734:	4a32      	ldr	r2, [pc, #200]	; (8012800 <ctl_thread+0x240>)
 8012736:	7a13      	ldrb	r3, [r2, #8]
 8012738:	f043 0301 	orr.w	r3, r3, #1
 801273c:	7213      	strb	r3, [r2, #8]
    if( logging_state == RECORDING )
 801273e:	4b30      	ldr	r3, [pc, #192]	; (8012800 <ctl_thread+0x240>)
 8012740:	7a5b      	ldrb	r3, [r3, #9]
 8012742:	b2db      	uxtb	r3, r3
 8012744:	2b04      	cmp	r3, #4
 8012746:	d09c      	beq.n	8012682 <ctl_thread+0xc2>
      node_state &= ~STATE_RECORDING;
 8012748:	4a2d      	ldr	r2, [pc, #180]	; (8012800 <ctl_thread+0x240>)
 801274a:	7a13      	ldrb	r3, [r2, #8]
 801274c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8012750:	7213      	strb	r3, [r2, #8]
    if( last_node_state != node_state)
 8012752:	4b2b      	ldr	r3, [pc, #172]	; (8012800 <ctl_thread+0x240>)
 8012754:	7a1b      	ldrb	r3, [r3, #8]
 8012756:	b2db      	uxtb	r3, r3
 8012758:	42a3      	cmp	r3, r4
 801275a:	d0bc      	beq.n	80126d6 <ctl_thread+0x116>
      if( ( last_node_state^node_state ) & STATE_ACTIVE ) //if active status changed, then may need to switch relay
 801275c:	4b28      	ldr	r3, [pc, #160]	; (8012800 <ctl_thread+0x240>)
 801275e:	7a1b      	ldrb	r3, [r3, #8]
 8012760:	405c      	eors	r4, r3
 8012762:	f014 0f08 	tst.w	r4, #8
 8012766:	d0a6      	beq.n	80126b6 <ctl_thread+0xf6>
        if( node_state & STATE_ACTIVE )//if now enabled, need to be in analog relay
 8012768:	4b25      	ldr	r3, [pc, #148]	; (8012800 <ctl_thread+0x240>)
 801276a:	7a1b      	ldrb	r3, [r3, #8]
 801276c:	f013 0f08 	tst.w	r3, #8
 8012770:	d08d      	beq.n	801268e <ctl_thread+0xce>
          relay_state = setRelayState( RELAY_STATE_ADC );
 8012772:	2041      	movs	r0, #65	; 0x41
 8012774:	f7fd ff64 	bl	8010640 <setRelayState>
 8012778:	4c21      	ldr	r4, [pc, #132]	; (8012800 <ctl_thread+0x240>)
 801277a:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
          mcp23017_digitalWrite(&mcp_cfg, 0x07, SW_5VS_PIN_POS, 1); //turn on power to input circuit
 801277e:	2301      	movs	r3, #1
 8012780:	220c      	movs	r2, #12
 8012782:	2107      	movs	r1, #7
 8012784:	4823      	ldr	r0, [pc, #140]	; (8012814 <ctl_thread+0x254>)
 8012786:	f000 fb6b 	bl	8012e60 <mcp23017_digitalWrite>
          set_pga(HIGH_GAIN); //always start with high gain
 801278a:	2000      	movs	r0, #0
 801278c:	f7fe ff20 	bl	80115d0 <set_pga>
          raw_min_val = 0;  //reset min/max
 8012790:	2600      	movs	r6, #0
 8012792:	6726      	str	r6, [r4, #112]	; 0x70
          raw_max_val = 0;
 8012794:	6766      	str	r6, [r4, #116]	; 0x74
          chThdSleepMilliseconds(20);
 8012796:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801279a:	2100      	movs	r1, #0
 801279c:	f7f6 f970 	bl	8008a80 <chThdSleep>
          raw_min_val = 0;  //reset min/max
 80127a0:	6726      	str	r6, [r4, #112]	; 0x70
          raw_max_val = 0;
 80127a2:	6766      	str	r6, [r4, #116]	; 0x74
          logging_state = READY;
 80127a4:	2301      	movs	r3, #1
 80127a6:	7263      	strb	r3, [r4, #9]
 80127a8:	e785      	b.n	80126b6 <ctl_thread+0xf6>
            logging_state = STOP_RECORDING;
 80127aa:	4b15      	ldr	r3, [pc, #84]	; (8012800 <ctl_thread+0x240>)
 80127ac:	2205      	movs	r2, #5
 80127ae:	725a      	strb	r2, [r3, #9]
 80127b0:	e77b      	b.n	80126aa <ctl_thread+0xea>
      tx_packet.data[0] = RELAY_CMD;
 80127b2:	4816      	ldr	r0, [pc, #88]	; (801280c <ctl_thread+0x24c>)
 80127b4:	2359      	movs	r3, #89	; 0x59
 80127b6:	7383      	strb	r3, [r0, #14]
      tx_packet.data[1] = 0;
 80127b8:	2300      	movs	r3, #0
 80127ba:	73c3      	strb	r3, [r0, #15]
      tx_packet.data_length = 1;
 80127bc:	2301      	movs	r3, #1
 80127be:	8183      	strh	r3, [r0, #12]
      run_cmd( &tx_packet, xbee_mbx );
 80127c0:	4b13      	ldr	r3, [pc, #76]	; (8012810 <ctl_thread+0x250>)
 80127c2:	6819      	ldr	r1, [r3, #0]
 80127c4:	f7ff fbc4 	bl	8011f50 <run_cmd>
      xbee_send_packet();
 80127c8:	f000 fc52 	bl	8013070 <xbee_send_packet>
      last_relay_state = relay_state;
 80127cc:	4b0c      	ldr	r3, [pc, #48]	; (8012800 <ctl_thread+0x240>)
 80127ce:	f893 5059 	ldrb.w	r5, [r3, #89]	; 0x59
 80127d2:	b2ed      	uxtb	r5, r5
 80127d4:	e785      	b.n	80126e2 <ctl_thread+0x122>
      tx_packet.data[0] = MSG_CMD;
 80127d6:	480d      	ldr	r0, [pc, #52]	; (801280c <ctl_thread+0x24c>)
 80127d8:	236d      	movs	r3, #109	; 0x6d
 80127da:	7383      	strb	r3, [r0, #14]
      tx_packet.data[1] = 0;
 80127dc:	2600      	movs	r6, #0
 80127de:	73c6      	strb	r6, [r0, #15]
      tx_packet.data_length = 1;
 80127e0:	2301      	movs	r3, #1
 80127e2:	8183      	strh	r3, [r0, #12]
      run_cmd( &tx_packet, xbee_mbx );
 80127e4:	4b0a      	ldr	r3, [pc, #40]	; (8012810 <ctl_thread+0x250>)
 80127e6:	6819      	ldr	r1, [r3, #0]
 80127e8:	f7ff fbb2 	bl	8011f50 <run_cmd>
      xbee_send_packet();
 80127ec:	f000 fc40 	bl	8013070 <xbee_send_packet>
      msg_flag = false;
 80127f0:	4b03      	ldr	r3, [pc, #12]	; (8012800 <ctl_thread+0x240>)
 80127f2:	f883 609a 	strb.w	r6, [r3, #154]	; 0x9a
 80127f6:	e779      	b.n	80126ec <ctl_thread+0x12c>
 80127f8:	08016570 	.word	0x08016570
 80127fc:	20004c10 	.word	0x20004c10
 8012800:	200022c8 	.word	0x200022c8
 8012804:	08016588 	.word	0x08016588
 8012808:	080165a4 	.word	0x080165a4
 801280c:	2000fad0 	.word	0x2000fad0
 8012810:	2000f9fc 	.word	0x2000f9fc
 8012814:	08015b48 	.word	0x08015b48
 8012818:	f3af 8000 	nop.w
 801281c:	f3af 8000 	nop.w

08012820 <init_i2c>:
/*
 * configure i2c
 */

void init_i2c(void)
{
 8012820:	b510      	push	{r4, lr}
  /* Configuring I2C SCK and I2C SDA related GPIOs .*/
   /* should be already done from board.h */
   palSetLineMode(LINE_I2C1_SCL, PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_OPENDRAIN);
 8012822:	4c10      	ldr	r4, [pc, #64]	; (8012864 <init_i2c+0x44>)
 8012824:	f240 221e 	movw	r2, #542	; 0x21e
 8012828:	f44f 7180 	mov.w	r1, #256	; 0x100
 801282c:	4620      	mov	r0, r4
 801282e:	f7f2 fb87 	bl	8004f40 <_pal_lld_setgroupmode>
   palSetLineMode(LINE_I2C1_SDA, PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_OPENDRAIN);
 8012832:	f240 221e 	movw	r2, #542	; 0x21e
 8012836:	f44f 7100 	mov.w	r1, #512	; 0x200
 801283a:	4620      	mov	r0, r4
 801283c:	f7f2 fb80 	bl	8004f40 <_pal_lld_setgroupmode>
   palSetLineMode(MCP_RST_LINE,PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);    //set status LED line mode
 8012840:	2219      	movs	r2, #25
 8012842:	2102      	movs	r1, #2
 8012844:	4808      	ldr	r0, [pc, #32]	; (8012868 <init_i2c+0x48>)
 8012846:	f7f2 fb7b 	bl	8004f40 <_pal_lld_setgroupmode>
//#if HTS221_SHARED_I2C
  i2cAcquireBus(&I2CD1);
 801284a:	4c08      	ldr	r4, [pc, #32]	; (801286c <init_i2c+0x4c>)
 801284c:	4620      	mov	r0, r4
 801284e:	f7ef fcaf 	bl	80021b0 <i2cAcquireBus>
//#endif /* HTS221_SHARED_I2C */
  /* Intializing the I2C. */
  i2cStart(&I2CD1, &eeprom_i2ccfg);
 8012852:	4907      	ldr	r1, [pc, #28]	; (8012870 <init_i2c+0x50>)
 8012854:	4620      	mov	r0, r4
 8012856:	f7ef fb63 	bl	8001f20 <i2cStart>

//#if HTS221_SHARED_I2C
    i2cReleaseBus(&I2CD1);
 801285a:	4620      	mov	r0, r4
 801285c:	f7ef fcb8 	bl	80021d0 <i2cReleaseBus>
//#endif /* HTS221_SHARED_I2C */
}
 8012860:	bd10      	pop	{r4, pc}
 8012862:	bf00      	nop
 8012864:	40020400 	.word	0x40020400
 8012868:	40021000 	.word	0x40021000
 801286c:	20004688 	.word	0x20004688
 8012870:	20001a64 	.word	0x20001a64
 8012874:	f3af 8000 	nop.w
 8012878:	f3af 8000 	nop.w
 801287c:	f3af 8000 	nop.w

08012880 <main>:

/*
 * Application entry point.
 */
int main(void) {
 8012880:	b500      	push	{lr}
 8012882:	b083      	sub	sp, #12
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
 8012884:	f7ed fe2c 	bl	80004e0 <halInit>
  chSysInit();
 8012888:	f7f4 fe9a 	bl	80075c0 <chSysInit>
  rtcSetTime(&RTCD1, &tmpDateTime);
*/
  /*
   * Shell manager initialization.
   */
  shellInit();
 801288c:	f7f9 fc20 	bl	800c0d0 <shellInit>

  /*
   * Activates the serial driver 6 using the driver default configuration.
   */
  sdStart(&SD6, NULL);
 8012890:	2100      	movs	r1, #0
 8012892:	4828      	ldr	r0, [pc, #160]	; (8012934 <main+0xb4>)
 8012894:	f7f0 fc6c 	bl	8003170 <sdStart>

  /*
   * Initializes the SDIO drivers.
   */
  sdcStart(&SDCD1, &sdccfg);
 8012898:	4927      	ldr	r1, [pc, #156]	; (8012938 <main+0xb8>)
 801289a:	4828      	ldr	r0, [pc, #160]	; (801293c <main+0xbc>)
 801289c:	f7f0 fab0 	bl	8002e00 <sdcStart>

  /*
   * make sure gpio are configured properly for i2c use
   */
  init_i2c();
 80128a0:	f7ff ffbe 	bl	8012820 <init_i2c>
  esp->next = (event_listener_t *)esp;
 80128a4:	4b26      	ldr	r3, [pc, #152]	; (8012940 <main+0xc0>)
 80128a6:	601b      	str	r3, [r3, #0]
 80128a8:	4b26      	ldr	r3, [pc, #152]	; (8012944 <main+0xc4>)
 80128aa:	601b      	str	r3, [r3, #0]
  chEvtObjectInit( &evtSindex );

  /*
   * load the node config data
   */
  read_config_eeprom(); //load node config
 80128ac:	f7fd fe40 	bl	8010530 <read_config_eeprom>
  if( !( '0' <= node_config.device_id[0] <= 'Z') )
 80128b0:	4b25      	ldr	r3, [pc, #148]	; (8012948 <main+0xc8>)
 80128b2:	f893 2020 	ldrb.w	r2, [r3, #32]
  {
    //node_config.device_id[0] = '0';
    default_config_eeprom();    //save default config.
  }

  if( node_config.device_id[0] == 0x00 )
 80128b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128ba:	b91b      	cbnz	r3, 80128c4 <main+0x44>
    node_config.device_id[0] = 'a';
 80128bc:	4b22      	ldr	r3, [pc, #136]	; (8012948 <main+0xc8>)
 80128be:	2261      	movs	r2, #97	; 0x61
 80128c0:	f883 2020 	strb.w	r2, [r3, #32]
   */
    //chThdCreateStatic(wa_button_thread, sizeof(wa_button_thread), NORMALPRIO, button_thread, NULL);
  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(wa_blinker_thread, sizeof(wa_blinker_thread), NORMALPRIO, blinker_thread, NULL);
 80128c4:	4d20      	ldr	r5, [pc, #128]	; (8012948 <main+0xc8>)
 80128c6:	2400      	movs	r4, #0
 80128c8:	9400      	str	r4, [sp, #0]
 80128ca:	4b20      	ldr	r3, [pc, #128]	; (801294c <main+0xcc>)
 80128cc:	2280      	movs	r2, #128	; 0x80
 80128ce:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 80128d2:	f605 0078 	addw	r0, r5, #2168	; 0x878
 80128d6:	f7f5 fec3 	bl	8008660 <chThdCreateStatic>
  /*
   * Creates the gps thread.
   */
  chThdCreateStatic(wa_gps_thread, sizeof(wa_gps_thread), NORMALPRIO, gps_thread, NULL);
 80128da:	9400      	str	r4, [sp, #0]
 80128dc:	4b1c      	ldr	r3, [pc, #112]	; (8012950 <main+0xd0>)
 80128de:	2280      	movs	r2, #128	; 0x80
 80128e0:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 80128e4:	f505 6036 	add.w	r0, r5, #2912	; 0xb60
 80128e8:	f7f5 feba 	bl	8008660 <chThdCreateStatic>
  /*
   * Creates the adc thread.
   */
  init_adc(); //init adc interface and callbacks
 80128ec:	f7fe fd58 	bl	80113a0 <init_adc>
  //chThdCreateStatic(wa_xbee_thread, sizeof(wa_xbee_thread), NORMALPRIO, xbee_thread, NULL);

  /*
   * Creates the PPS timing thread.
   */
  chThdCreateStatic(wa_pps_thread, sizeof(wa_pps_thread), HIGHPRIO-2, pps_thread, NULL);
 80128f0:	9400      	str	r4, [sp, #0]
 80128f2:	4b18      	ldr	r3, [pc, #96]	; (8012954 <main+0xd4>)
 80128f4:	22fd      	movs	r2, #253	; 0xfd
 80128f6:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 80128fa:	f605 6048 	addw	r0, r5, #3656	; 0xe48
 80128fe:	f7f5 feaf 	bl	8008660 <chThdCreateStatic>

  /*
   * Creates the logger thread.
   */
  chThdCreateStatic(wa_logger_thread, sizeof(wa_logger_thread), HIGHPRIO-1, logger_thread, NULL);
 8012902:	4d15      	ldr	r5, [pc, #84]	; (8012958 <main+0xd8>)
 8012904:	9400      	str	r4, [sp, #0]
 8012906:	4b15      	ldr	r3, [pc, #84]	; (801295c <main+0xdc>)
 8012908:	22fe      	movs	r2, #254	; 0xfe
 801290a:	f640 01e8 	movw	r1, #2280	; 0x8e8
 801290e:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8012912:	f7f5 fea5 	bl	8008660 <chThdCreateStatic>
  /*
   * Creates the node ctl thread.
   */
  chThdCreateStatic(wa_ctl_thread, sizeof(wa_ctl_thread), NORMALPRIO, ctl_thread, NULL);
 8012916:	9400      	str	r4, [sp, #0]
 8012918:	4b11      	ldr	r3, [pc, #68]	; (8012960 <main+0xe0>)
 801291a:	2280      	movs	r2, #128	; 0x80
 801291c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8012920:	f505 6012 	add.w	r0, r5, #2336	; 0x920
 8012924:	f7f5 fe9c 	bl	8008660 <chThdCreateStatic>
//                                            shellThread, (void *)&shell_cfg1);
//    chThdWait(shelltp);               //Waiting termination.
//*/


    chThdSleepMilliseconds(1000);
 8012928:	480e      	ldr	r0, [pc, #56]	; (8012964 <main+0xe4>)
 801292a:	2100      	movs	r1, #0
 801292c:	f7f6 f8a8 	bl	8008a80 <chThdSleep>
 8012930:	e7fa      	b.n	8012928 <main+0xa8>
 8012932:	bf00      	nop
 8012934:	20004c10 	.word	0x20004c10
 8012938:	08015bcc 	.word	0x08015bcc
 801293c:	200046fc 	.word	0x200046fc
 8012940:	2000f910 	.word	0x2000f910
 8012944:	2000f904 	.word	0x2000f904
 8012948:	200022c8 	.word	0x200022c8
 801294c:	080103b1 	.word	0x080103b1
 8012950:	08010221 	.word	0x08010221
 8012954:	080100f1 	.word	0x080100f1
 8012958:	200033c0 	.word	0x200033c0
 801295c:	08011601 	.word	0x08011601
 8012960:	080125c1 	.word	0x080125c1
 8012964:	000186a0 	.word	0x000186a0
	...

08012970 <gps_init>:
  return result;

}

void gps_init(void)
{
 8012970:	b508      	push	{r3, lr}
  chMtxObjectInit( &gpsMutex );    //init gps data sharing mutex
 8012972:	4803      	ldr	r0, [pc, #12]	; (8012980 <gps_init+0x10>)
 8012974:	f7f6 fe14 	bl	80095a0 <chMtxObjectInit>
 8012978:	4b02      	ldr	r3, [pc, #8]	; (8012984 <gps_init+0x14>)
 801297a:	601b      	str	r3, [r3, #0]
  chEvtObjectInit( &evtGPS );
}
 801297c:	bd08      	pop	{r3, pc}
 801297e:	bf00      	nop
 8012980:	2000fc58 	.word	0x2000fc58
 8012984:	2000fbd0 	.word	0x2000fbd0
 8012988:	f3af 8000 	nop.w
 801298c:	f3af 8000 	nop.w

08012990 <gps_parse_sentence>:

/*
 * identify NMEA sentence type and call appropriate parser
 */
char gps_parse_sentence()
{
 8012990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012992:	b083      	sub	sp, #12
  char result;
  const char type_rmc[] = "RMC";
 8012994:	4b4b      	ldr	r3, [pc, #300]	; (8012ac4 <gps_parse_sentence+0x134>)
 8012996:	9301      	str	r3, [sp, #4]
  const char type_gga[] = "GGA";
 8012998:	f5a3 3301 	sub.w	r3, r3, #132096	; 0x20400
 801299c:	f2a3 230b 	subw	r3, r3, #523	; 0x20b
 80129a0:	9300      	str	r3, [sp, #0]
  chprintf((BaseSequentialStream*)&SD6, "\n\rGPS type: ");
  streamWrite((BaseSequentialStream*)&SD6, &tmp_GPS_buffer[3], 3 );
  chprintf((BaseSequentialStream*)&SD6, "\n\r");
#endif

  if( strncmp(&tmp_GPS_buffer[3],type_rmc,3) == 0 ) //$GPRMC test
 80129a2:	2203      	movs	r2, #3
 80129a4:	a901      	add	r1, sp, #4
 80129a6:	4848      	ldr	r0, [pc, #288]	; (8012ac8 <gps_parse_sentence+0x138>)
 80129a8:	f001 faf4 	bl	8013f94 <strncmp>
 80129ac:	b148      	cbz	r0, 80129c2 <gps_parse_sentence+0x32>
#ifdef GPS_debug
    chprintf((BaseSequentialStream*)&SD6, "\n\r saved RMC sentence: %s \n\r",local_GPRMC);
#endif
    result = E_OK;
  }
  else if( strncmp(&tmp_GPS_buffer[3],type_gga,3) == 0 ) //$GPGGA test
 80129ae:	2203      	movs	r2, #3
 80129b0:	4669      	mov	r1, sp
 80129b2:	4845      	ldr	r0, [pc, #276]	; (8012ac8 <gps_parse_sentence+0x138>)
 80129b4:	f001 faee 	bl	8013f94 <strncmp>
 80129b8:	2800      	cmp	r0, #0
 80129ba:	d06a      	beq.n	8012a92 <gps_parse_sentence+0x102>
#endif
    result = E_OK;
  }
  return result;

}
 80129bc:	2000      	movs	r0, #0
 80129be:	b003      	add	sp, #12
 80129c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    strncpy(local_GPRMC,tmp_GPS_buffer,tmp_buffer_index);
 80129c2:	4f42      	ldr	r7, [pc, #264]	; (8012acc <gps_parse_sentence+0x13c>)
 80129c4:	4e42      	ldr	r6, [pc, #264]	; (8012ad0 <gps_parse_sentence+0x140>)
 80129c6:	4c43      	ldr	r4, [pc, #268]	; (8012ad4 <gps_parse_sentence+0x144>)
 80129c8:	883a      	ldrh	r2, [r7, #0]
 80129ca:	4631      	mov	r1, r6
 80129cc:	4620      	mov	r0, r4
 80129ce:	f001 fb2d 	bl	801402c <strncpy>
    chMtxLock( &gpsMutex );
 80129d2:	4d41      	ldr	r5, [pc, #260]	; (8012ad8 <gps_parse_sentence+0x148>)
 80129d4:	4628      	mov	r0, r5
 80129d6:	f7f6 fe73 	bl	80096c0 <chMtxLock>
    strncpy(global_GPRMC,tmp_GPS_buffer,tmp_buffer_index);
 80129da:	883a      	ldrh	r2, [r7, #0]
 80129dc:	4631      	mov	r1, r6
 80129de:	483f      	ldr	r0, [pc, #252]	; (8012adc <gps_parse_sentence+0x14c>)
 80129e0:	f001 fb24 	bl	801402c <strncpy>
    chMtxUnlock( &gpsMutex );
 80129e4:	4628      	mov	r0, r5
 80129e6:	f7f6 fedb 	bl	80097a0 <chMtxUnlock>
    chEvtBroadcastFlags(&evtGPS, GPS_NEW_RMC);    //parse some of the data
 80129ea:	2101      	movs	r1, #1
 80129ec:	483c      	ldr	r0, [pc, #240]	; (8012ae0 <gps_parse_sentence+0x150>)
 80129ee:	f7f7 faaf 	bl	8009f50 <chEvtBroadcastFlags>
    cur_field_pos = strchr(local_GPRMC,',')+1;  //strchr returns position of the ",", so add 1 to get to first pos of next field
 80129f2:	212c      	movs	r1, #44	; 0x2c
 80129f4:	4620      	mov	r0, r4
 80129f6:	f001 f9fb 	bl	8013df0 <strchr>
 80129fa:	1c45      	adds	r5, r0, #1
    uint8_t field_index = 1;
 80129fc:	2401      	movs	r4, #1
    while( field_index < 10 )
 80129fe:	e00f      	b.n	8012a20 <gps_parse_sentence+0x90>
        gps_data.fix_status = cur_field_pos[0];
 8012a00:	782b      	ldrb	r3, [r5, #0]
 8012a02:	4a38      	ldr	r2, [pc, #224]	; (8012ae4 <gps_parse_sentence+0x154>)
 8012a04:	7013      	strb	r3, [r2, #0]
        if( gps_data.fix_status == 'A' )
 8012a06:	2b41      	cmp	r3, #65	; 0x41
 8012a08:	d022      	beq.n	8012a50 <gps_parse_sentence+0xc0>
          gps_data.gps_fix = false;
 8012a0a:	4b36      	ldr	r3, [pc, #216]	; (8012ae4 <gps_parse_sentence+0x154>)
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      cur_field_pos = strchr(last_field_pos,',')+1; //strchr returns position of the ",", so add 1 to get to first pos of next field
 8012a12:	212c      	movs	r1, #44	; 0x2c
 8012a14:	4628      	mov	r0, r5
 8012a16:	f001 f9eb 	bl	8013df0 <strchr>
 8012a1a:	1c45      	adds	r5, r0, #1
      field_index++;
 8012a1c:	3401      	adds	r4, #1
 8012a1e:	b2e4      	uxtb	r4, r4
    while( field_index < 10 )
 8012a20:	2c09      	cmp	r4, #9
 8012a22:	d8cb      	bhi.n	80129bc <gps_parse_sentence+0x2c>
      if( field_index == RMC_STAT_POS )
 8012a24:	2c02      	cmp	r4, #2
 8012a26:	d0eb      	beq.n	8012a00 <gps_parse_sentence+0x70>
      else if( gps_data.fix_status == 'A' )
 8012a28:	4b2e      	ldr	r3, [pc, #184]	; (8012ae4 <gps_parse_sentence+0x154>)
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	2b41      	cmp	r3, #65	; 0x41
 8012a2e:	d1f0      	bne.n	8012a12 <gps_parse_sentence+0x82>
        if( field_index == RMC_TIME_POS )
 8012a30:	2c01      	cmp	r4, #1
 8012a32:	d012      	beq.n	8012a5a <gps_parse_sentence+0xca>
        else if( field_index == RMC_DATE_POS )
 8012a34:	2c09      	cmp	r4, #9
 8012a36:	d016      	beq.n	8012a66 <gps_parse_sentence+0xd6>
        else if( field_index == RMC_LAT_POS )
 8012a38:	2c03      	cmp	r4, #3
 8012a3a:	d01a      	beq.n	8012a72 <gps_parse_sentence+0xe2>
        else if( field_index == RMC_LON_POS )
 8012a3c:	2c05      	cmp	r4, #5
 8012a3e:	d01e      	beq.n	8012a7e <gps_parse_sentence+0xee>
        else if( field_index == RMC_NS_POS )
 8012a40:	2c04      	cmp	r4, #4
 8012a42:	d022      	beq.n	8012a8a <gps_parse_sentence+0xfa>
        else if( field_index == RMC_EW_POS )
 8012a44:	2c06      	cmp	r4, #6
 8012a46:	d1e4      	bne.n	8012a12 <gps_parse_sentence+0x82>
          gps_data.lon_EW = cur_field_pos[0];
 8012a48:	782a      	ldrb	r2, [r5, #0]
 8012a4a:	4b26      	ldr	r3, [pc, #152]	; (8012ae4 <gps_parse_sentence+0x154>)
 8012a4c:	769a      	strb	r2, [r3, #26]
 8012a4e:	e7e0      	b.n	8012a12 <gps_parse_sentence+0x82>
          gps_data.gps_fix = true;
 8012a50:	4613      	mov	r3, r2
 8012a52:	2201      	movs	r2, #1
 8012a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a58:	e7db      	b.n	8012a12 <gps_parse_sentence+0x82>
          strncpy(gps_data.utc_time,cur_field_pos,9);
 8012a5a:	2209      	movs	r2, #9
 8012a5c:	4629      	mov	r1, r5
 8012a5e:	4822      	ldr	r0, [pc, #136]	; (8012ae8 <gps_parse_sentence+0x158>)
 8012a60:	f001 fae4 	bl	801402c <strncpy>
 8012a64:	e7d5      	b.n	8012a12 <gps_parse_sentence+0x82>
          strncpy(gps_data.utc_date,cur_field_pos,6);
 8012a66:	2206      	movs	r2, #6
 8012a68:	4629      	mov	r1, r5
 8012a6a:	4820      	ldr	r0, [pc, #128]	; (8012aec <gps_parse_sentence+0x15c>)
 8012a6c:	f001 fade 	bl	801402c <strncpy>
 8012a70:	e7cf      	b.n	8012a12 <gps_parse_sentence+0x82>
          strncpy(gps_data.lat,cur_field_pos,10);
 8012a72:	220a      	movs	r2, #10
 8012a74:	4629      	mov	r1, r5
 8012a76:	481e      	ldr	r0, [pc, #120]	; (8012af0 <gps_parse_sentence+0x160>)
 8012a78:	f001 fad8 	bl	801402c <strncpy>
 8012a7c:	e7c9      	b.n	8012a12 <gps_parse_sentence+0x82>
          strncpy(gps_data.lon,cur_field_pos,10);
 8012a7e:	220a      	movs	r2, #10
 8012a80:	4629      	mov	r1, r5
 8012a82:	481c      	ldr	r0, [pc, #112]	; (8012af4 <gps_parse_sentence+0x164>)
 8012a84:	f001 fad2 	bl	801402c <strncpy>
 8012a88:	e7c3      	b.n	8012a12 <gps_parse_sentence+0x82>
          gps_data.lat_NS = cur_field_pos[0];
 8012a8a:	782a      	ldrb	r2, [r5, #0]
 8012a8c:	4b15      	ldr	r3, [pc, #84]	; (8012ae4 <gps_parse_sentence+0x154>)
 8012a8e:	735a      	strb	r2, [r3, #13]
 8012a90:	e7bf      	b.n	8012a12 <gps_parse_sentence+0x82>
    strncpy(local_GPGGA,tmp_GPS_buffer,tmp_buffer_index);
 8012a92:	4e0e      	ldr	r6, [pc, #56]	; (8012acc <gps_parse_sentence+0x13c>)
 8012a94:	4d0e      	ldr	r5, [pc, #56]	; (8012ad0 <gps_parse_sentence+0x140>)
 8012a96:	8832      	ldrh	r2, [r6, #0]
 8012a98:	4629      	mov	r1, r5
 8012a9a:	4817      	ldr	r0, [pc, #92]	; (8012af8 <gps_parse_sentence+0x168>)
 8012a9c:	f001 fac6 	bl	801402c <strncpy>
    chMtxLock( &gpsMutex );
 8012aa0:	4c0d      	ldr	r4, [pc, #52]	; (8012ad8 <gps_parse_sentence+0x148>)
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	f7f6 fe0c 	bl	80096c0 <chMtxLock>
    strncpy(global_GPGGA,tmp_GPS_buffer,tmp_buffer_index);
 8012aa8:	8832      	ldrh	r2, [r6, #0]
 8012aaa:	4629      	mov	r1, r5
 8012aac:	4813      	ldr	r0, [pc, #76]	; (8012afc <gps_parse_sentence+0x16c>)
 8012aae:	f001 fabd 	bl	801402c <strncpy>
    chMtxUnlock( &gpsMutex );
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	f7f6 fe74 	bl	80097a0 <chMtxUnlock>
    chEvtBroadcastFlags(&evtGPS, GPS_NEW_GGA);
 8012ab8:	2102      	movs	r1, #2
 8012aba:	4809      	ldr	r0, [pc, #36]	; (8012ae0 <gps_parse_sentence+0x150>)
 8012abc:	f7f7 fa48 	bl	8009f50 <chEvtBroadcastFlags>
 8012ac0:	e77c      	b.n	80129bc <gps_parse_sentence+0x2c>
 8012ac2:	bf00      	nop
 8012ac4:	00434d52 	.word	0x00434d52
 8012ac8:	2000f60f 	.word	0x2000f60f
 8012acc:	200040da 	.word	0x200040da
 8012ad0:	2000f60c 	.word	0x2000f60c
 8012ad4:	2000fccc 	.word	0x2000fccc
 8012ad8:	2000fc58 	.word	0x2000fc58
 8012adc:	2000f530 	.word	0x2000f530
 8012ae0:	2000fbd0 	.word	0x2000fbd0
 8012ae4:	2000fa00 	.word	0x2000fa00
 8012ae8:	2000fa21 	.word	0x2000fa21
 8012aec:	2000fa2a 	.word	0x2000fa2a
 8012af0:	2000fa01 	.word	0x2000fa01
 8012af4:	2000fa0e 	.word	0x2000fa0e
 8012af8:	2000fc68 	.word	0x2000fc68
 8012afc:	2000f998 	.word	0x2000f998

08012b00 <hex_to_int>:
//0,1,2..,9,A,B,C,D,E,F

uint8_t hex_to_int(char ch)
{
    int num=0;
    if(ch>='0' && ch<='9')
 8012b00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012b04:	b2db      	uxtb	r3, r3
 8012b06:	2b09      	cmp	r3, #9
 8012b08:	d917      	bls.n	8012b3a <hex_to_int+0x3a>
    {
        num=ch-0x30;
    }
    else
    {
        switch(ch)
 8012b0a:	3841      	subs	r0, #65	; 0x41
 8012b0c:	2825      	cmp	r0, #37	; 0x25
 8012b0e:	d821      	bhi.n	8012b54 <hex_to_int+0x54>
 8012b10:	e8df f000 	tbb	[pc, r0]
 8012b14:	1a182216 	.word	0x1a182216
 8012b18:	20201e1c 	.word	0x20201e1c
 8012b1c:	20202020 	.word	0x20202020
 8012b20:	20202020 	.word	0x20202020
 8012b24:	20202020 	.word	0x20202020
 8012b28:	20202020 	.word	0x20202020
 8012b2c:	20202020 	.word	0x20202020
 8012b30:	20202020 	.word	0x20202020
 8012b34:	1a182216 	.word	0x1a182216
 8012b38:	1e1c      	.short	0x1e1c
        num=ch-0x30;
 8012b3a:	3830      	subs	r0, #48	; 0x30
            case 'F': case 'f': num=15; break;
            default: num=0;
        }
    }
    return num;
}
 8012b3c:	b2c0      	uxtb	r0, r0
 8012b3e:	4770      	bx	lr
            case 'A': case 'a': num=10; break;
 8012b40:	200a      	movs	r0, #10
 8012b42:	e7fb      	b.n	8012b3c <hex_to_int+0x3c>
            case 'C': case 'c': num=12; break;
 8012b44:	200c      	movs	r0, #12
 8012b46:	e7f9      	b.n	8012b3c <hex_to_int+0x3c>
            case 'D': case 'd': num=13; break;
 8012b48:	200d      	movs	r0, #13
 8012b4a:	e7f7      	b.n	8012b3c <hex_to_int+0x3c>
            case 'E': case 'e': num=14; break;
 8012b4c:	200e      	movs	r0, #14
 8012b4e:	e7f5      	b.n	8012b3c <hex_to_int+0x3c>
            case 'F': case 'f': num=15; break;
 8012b50:	200f      	movs	r0, #15
 8012b52:	e7f3      	b.n	8012b3c <hex_to_int+0x3c>
            default: num=0;
 8012b54:	2000      	movs	r0, #0
 8012b56:	e7f1      	b.n	8012b3c <hex_to_int+0x3c>
            case 'B': case 'b': num=11; break;
 8012b58:	200b      	movs	r0, #11
 8012b5a:	e7ef      	b.n	8012b3c <hex_to_int+0x3c>
 8012b5c:	f3af 8000 	nop.w

08012b60 <gps_test_checksum>:
{
 8012b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  char checksum = 0;
 8012b62:	2400      	movs	r4, #0
  for(i=1;i<tmp_buffer_index-4;i++ )
 8012b64:	2301      	movs	r3, #1
 8012b66:	e004      	b.n	8012b72 <gps_test_checksum+0x12>
     checksum = checksum^tmp_GPS_buffer[i];
 8012b68:	4a0e      	ldr	r2, [pc, #56]	; (8012ba4 <gps_test_checksum+0x44>)
 8012b6a:	5cd2      	ldrb	r2, [r2, r3]
 8012b6c:	4054      	eors	r4, r2
  for(i=1;i<tmp_buffer_index-4;i++ )
 8012b6e:	3301      	adds	r3, #1
 8012b70:	b2db      	uxtb	r3, r3
 8012b72:	461d      	mov	r5, r3
 8012b74:	4a0c      	ldr	r2, [pc, #48]	; (8012ba8 <gps_test_checksum+0x48>)
 8012b76:	8812      	ldrh	r2, [r2, #0]
 8012b78:	3a04      	subs	r2, #4
 8012b7a:	4293      	cmp	r3, r2
 8012b7c:	dbf4      	blt.n	8012b68 <gps_test_checksum+0x8>
  checksum_val = ( hex_to_int( (char)tmp_GPS_buffer[i+1] ) << 4 ) + hex_to_int( (char)tmp_GPS_buffer[i+2] );
 8012b7e:	3301      	adds	r3, #1
 8012b80:	4f08      	ldr	r7, [pc, #32]	; (8012ba4 <gps_test_checksum+0x44>)
 8012b82:	5cf8      	ldrb	r0, [r7, r3]
 8012b84:	f7ff ffbc 	bl	8012b00 <hex_to_int>
 8012b88:	0100      	lsls	r0, r0, #4
 8012b8a:	b2c6      	uxtb	r6, r0
 8012b8c:	3502      	adds	r5, #2
 8012b8e:	5d78      	ldrb	r0, [r7, r5]
 8012b90:	f7ff ffb6 	bl	8012b00 <hex_to_int>
 8012b94:	4430      	add	r0, r6
 8012b96:	b2c0      	uxtb	r0, r0
  if( checksum_val == checksum )
 8012b98:	4284      	cmp	r4, r0
 8012b9a:	d101      	bne.n	8012ba0 <gps_test_checksum+0x40>
    return E_OK;
 8012b9c:	2000      	movs	r0, #0
}
 8012b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return E_CHKSUM_ERROR;
 8012ba0:	2004      	movs	r0, #4
 8012ba2:	e7fc      	b.n	8012b9e <gps_test_checksum+0x3e>
 8012ba4:	2000f60c 	.word	0x2000f60c
 8012ba8:	200040da 	.word	0x200040da
 8012bac:	f3af 8000 	nop.w

08012bb0 <GPSParseChar>:
char GPSParseChar(char c){
 8012bb0:	b510      	push	{r4, lr}
  tmp_GPS_buffer[tmp_buffer_index] = c; //save the received char to the buffer
 8012bb2:	491c      	ldr	r1, [pc, #112]	; (8012c24 <GPSParseChar+0x74>)
 8012bb4:	880b      	ldrh	r3, [r1, #0]
 8012bb6:	4a1c      	ldr	r2, [pc, #112]	; (8012c28 <GPSParseChar+0x78>)
 8012bb8:	54d0      	strb	r0, [r2, r3]
  tmp_GPS_buffer[++tmp_buffer_index] = 0; //null terminate buffer to make a valid string
 8012bba:	3301      	adds	r3, #1
 8012bbc:	b29b      	uxth	r3, r3
 8012bbe:	800b      	strh	r3, [r1, #0]
 8012bc0:	2100      	movs	r1, #0
 8012bc2:	54d1      	strb	r1, [r2, r3]
  if( tmp_buffer_index > ( MAX_NMEA_LENGTH-1 ) )
 8012bc4:	2b63      	cmp	r3, #99	; 0x63
 8012bc6:	d807      	bhi.n	8012bd8 <GPSParseChar+0x28>
  switch(c){
 8012bc8:	280d      	cmp	r0, #13
 8012bca:	d017      	beq.n	8012bfc <GPSParseChar+0x4c>
 8012bcc:	2824      	cmp	r0, #36	; 0x24
 8012bce:	d008      	beq.n	8012be2 <GPSParseChar+0x32>
 8012bd0:	280a      	cmp	r0, #10
 8012bd2:	d013      	beq.n	8012bfc <GPSParseChar+0x4c>
  char result = E_OK;
 8012bd4:	2400      	movs	r4, #0
 8012bd6:	e002      	b.n	8012bde <GPSParseChar+0x2e>
    tmp_buffer_index = 0;
 8012bd8:	4b12      	ldr	r3, [pc, #72]	; (8012c24 <GPSParseChar+0x74>)
 8012bda:	8019      	strh	r1, [r3, #0]
    return result;
 8012bdc:	2403      	movs	r4, #3
}
 8012bde:	4620      	mov	r0, r4
 8012be0:	bd10      	pop	{r4, pc}
      if( tmp_buffer_index != 1 )
 8012be2:	2b01      	cmp	r3, #1
 8012be4:	d101      	bne.n	8012bea <GPSParseChar+0x3a>
  char result = E_OK;
 8012be6:	2400      	movs	r4, #0
 8012be8:	e7f9      	b.n	8012bde <GPSParseChar+0x2e>
        tmp_GPS_buffer[tmp_buffer_index++] = c;
 8012bea:	4b0e      	ldr	r3, [pc, #56]	; (8012c24 <GPSParseChar+0x74>)
 8012bec:	2201      	movs	r2, #1
 8012bee:	801a      	strh	r2, [r3, #0]
 8012bf0:	4b0d      	ldr	r3, [pc, #52]	; (8012c28 <GPSParseChar+0x78>)
 8012bf2:	7018      	strb	r0, [r3, #0]
        tmp_GPS_buffer[tmp_buffer_index] = 0; //null terminate
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	705a      	strb	r2, [r3, #1]
        return result;
 8012bf8:	2406      	movs	r4, #6
 8012bfa:	e7f0      	b.n	8012bde <GPSParseChar+0x2e>
      if( tmp_buffer_index > 1 )
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d804      	bhi.n	8012c0a <GPSParseChar+0x5a>
  char result = E_OK;
 8012c00:	2400      	movs	r4, #0
      tmp_buffer_index = 0; //end of sentence, reset the buffer index.
 8012c02:	4b08      	ldr	r3, [pc, #32]	; (8012c24 <GPSParseChar+0x74>)
 8012c04:	2200      	movs	r2, #0
 8012c06:	801a      	strh	r2, [r3, #0]
      break;
 8012c08:	e7e9      	b.n	8012bde <GPSParseChar+0x2e>
        tmp_GPS_buffer[tmp_buffer_index-1] = 0; //null terminate
 8012c0a:	3b01      	subs	r3, #1
 8012c0c:	4a06      	ldr	r2, [pc, #24]	; (8012c28 <GPSParseChar+0x78>)
 8012c0e:	2100      	movs	r1, #0
 8012c10:	54d1      	strb	r1, [r2, r3]
        result = gps_test_checksum();
 8012c12:	f7ff ffa5 	bl	8012b60 <gps_test_checksum>
        if( result == E_OK )
 8012c16:	4604      	mov	r4, r0
 8012c18:	2800      	cmp	r0, #0
 8012c1a:	d1e0      	bne.n	8012bde <GPSParseChar+0x2e>
          gps_parse_sentence();
 8012c1c:	f7ff feb8 	bl	8012990 <gps_parse_sentence>
 8012c20:	e7ef      	b.n	8012c02 <GPSParseChar+0x52>
 8012c22:	bf00      	nop
 8012c24:	200040da 	.word	0x200040da
 8012c28:	2000f60c 	.word	0x2000f60c
 8012c2c:	00000000 	.word	0x00000000

08012c30 <mcp23017_regForPin>:

/**
 * Register address, port dependent, for a given PIN
 */
static uint8_t mcp23017_regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr) {
  return(pin<8) ?portAaddr:portBaddr;
 8012c30:	2807      	cmp	r0, #7
 8012c32:	d901      	bls.n	8012c38 <mcp23017_regForPin+0x8>
}
 8012c34:	4610      	mov	r0, r2
 8012c36:	4770      	bx	lr
  return(pin<8) ?portAaddr:portBaddr;
 8012c38:	460a      	mov	r2, r1
 8012c3a:	e7fb      	b.n	8012c34 <mcp23017_regForPin+0x4>
 8012c3c:	f3af 8000 	nop.w

08012c40 <mcp23017_bitForPin>:
/**
 * Bit number associated to a give Pin
 */
static uint8_t mcp23017_bitForPin(uint8_t pin) {
  return pin%8;
}
 8012c40:	f000 0007 	and.w	r0, r0, #7
 8012c44:	4770      	bx	lr
 8012c46:	bf00      	nop
 8012c48:	f3af 8000 	nop.w
 8012c4c:	f3af 8000 	nop.w

08012c50 <mcp23017_bitWrite>:
/**
 * returns a copy of the 'value' byte with the 'bitNumber' bit 0 or 1 depending on 'setValue'
 */
static uint8_t mcp23017_bitWrite(uint8_t value, uint8_t bitNumber, uint8_t setValue) {
  setValue = setValue&1;
  if (setValue) {
 8012c50:	f012 0f01 	tst.w	r2, #1
 8012c54:	d105      	bne.n	8012c62 <mcp23017_bitWrite+0x12>
    // raise the bit
    return value | 1<<bitNumber;
  } else {
    // lower the bit
    return value & ~(1<<bitNumber);
 8012c56:	2301      	movs	r3, #1
 8012c58:	fa03 f101 	lsl.w	r1, r3, r1
 8012c5c:	ea20 0001 	bic.w	r0, r0, r1
  }
}
 8012c60:	4770      	bx	lr
    return value | 1<<bitNumber;
 8012c62:	2301      	movs	r3, #1
 8012c64:	fa03 f101 	lsl.w	r1, r3, r1
 8012c68:	4308      	orrs	r0, r1
 8012c6a:	b2c0      	uxtb	r0, r0
 8012c6c:	4770      	bx	lr
 8012c6e:	bf00      	nop

08012c70 <mcp23017_init>:
bool mcp23017_init(MCP23017_config *self) {
 8012c70:	b510      	push	{r4, lr}
 8012c72:	4604      	mov	r4, r0
    i2cAcquireBus(self->i2cp);
 8012c74:	6800      	ldr	r0, [r0, #0]
 8012c76:	f7ef fa9b 	bl	80021b0 <i2cAcquireBus>
    i2cStart(self->i2cp, &mcp23017_i2ccfg);
 8012c7a:	4904      	ldr	r1, [pc, #16]	; (8012c8c <mcp23017_init+0x1c>)
 8012c7c:	6820      	ldr	r0, [r4, #0]
 8012c7e:	f7ef f94f 	bl	8001f20 <i2cStart>
      i2cReleaseBus(self->i2cp);
 8012c82:	6820      	ldr	r0, [r4, #0]
 8012c84:	f7ef faa4 	bl	80021d0 <i2cReleaseBus>
}
 8012c88:	2001      	movs	r0, #1
 8012c8a:	bd10      	pop	{r4, pc}
 8012c8c:	20001a70 	.word	0x20001a70

08012c90 <mcp23017_readRegister>:
bool mcp23017_readRegister(MCP23017_config *self, uint8_t deviceAddr, uint8_t regAddr, uint8_t *regValue) {
 8012c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c94:	b086      	sub	sp, #24
 8012c96:	4605      	mov	r5, r0
 8012c98:	4698      	mov	r8, r3
  deviceAddr &= 0x7;
 8012c9a:	f001 0107 	and.w	r1, r1, #7
  deviceAddr |= MCP23017_ADDRESS;
 8012c9e:	f041 0620 	orr.w	r6, r1, #32
  txbuf[0] = regAddr;
 8012ca2:	af06      	add	r7, sp, #24
 8012ca4:	f807 2d04 	strb.w	r2, [r7, #-4]!
  i2cAcquireBus(self->i2cp);
 8012ca8:	6800      	ldr	r0, [r0, #0]
 8012caa:	f7ef fa81 	bl	80021b0 <i2cAcquireBus>
  result = i2cMasterTransmitTimeout(self->i2cp, deviceAddr, txbuf, 1,rxbuf, 1, TIME_INFINITE);
 8012cae:	f04f 32ff 	mov.w	r2, #4294967295
 8012cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8012cb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012cba:	2401      	movs	r4, #1
 8012cbc:	9401      	str	r4, [sp, #4]
 8012cbe:	ab04      	add	r3, sp, #16
 8012cc0:	9300      	str	r3, [sp, #0]
 8012cc2:	4623      	mov	r3, r4
 8012cc4:	463a      	mov	r2, r7
 8012cc6:	4631      	mov	r1, r6
 8012cc8:	6828      	ldr	r0, [r5, #0]
 8012cca:	f7ef f9b9 	bl	8002040 <i2cMasterTransmitTimeout>
  i2cReleaseBus(self->i2cp);
 8012cce:	6828      	ldr	r0, [r5, #0]
 8012cd0:	f7ef fa7e 	bl	80021d0 <i2cReleaseBus>
  *regValue = rxbuf[0];
 8012cd4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8012cd8:	f888 3000 	strb.w	r3, [r8]
}
 8012cdc:	4620      	mov	r0, r4
 8012cde:	b006      	add	sp, #24
 8012ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ce4:	f3af 8000 	nop.w
 8012ce8:	f3af 8000 	nop.w
 8012cec:	f3af 8000 	nop.w

08012cf0 <mcp23017_digitalRead>:
bool mcp23017_digitalRead(MCP23017_config *self, uint8_t deviceAddr, uint8_t pin, bool* data) {
 8012cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012cf4:	b083      	sub	sp, #12
 8012cf6:	4680      	mov	r8, r0
 8012cf8:	4689      	mov	r9, r1
 8012cfa:	4615      	mov	r5, r2
 8012cfc:	461e      	mov	r6, r3
  uint8_t bit=mcp23017_bitForPin(pin);
 8012cfe:	4610      	mov	r0, r2
 8012d00:	f7ff ff9e 	bl	8012c40 <mcp23017_bitForPin>
 8012d04:	4607      	mov	r7, r0
  uint8_t regValue = 0;
 8012d06:	ac02      	add	r4, sp, #8
 8012d08:	2300      	movs	r3, #0
 8012d0a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  uint8_t regAddr=mcp23017_regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
 8012d0e:	2213      	movs	r2, #19
 8012d10:	2112      	movs	r1, #18
 8012d12:	4628      	mov	r0, r5
 8012d14:	f7ff ff8c 	bl	8012c30 <mcp23017_regForPin>
  bool rv =mcp23017_readRegister(self, deviceAddr, regAddr, &regValue);
 8012d18:	4623      	mov	r3, r4
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	4649      	mov	r1, r9
 8012d1e:	4640      	mov	r0, r8
 8012d20:	f7ff ffb6 	bl	8012c90 <mcp23017_readRegister>
  *data = (regValue >> bit) & 0x1;
 8012d24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d28:	413b      	asrs	r3, r7
 8012d2a:	f003 0301 	and.w	r3, r3, #1
 8012d2e:	7033      	strb	r3, [r6, #0]
}
 8012d30:	b003      	add	sp, #12
 8012d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d36:	bf00      	nop
 8012d38:	f3af 8000 	nop.w
 8012d3c:	f3af 8000 	nop.w

08012d40 <mcp23017_digitalReadA>:
bool mcp23017_digitalReadA(MCP23017_config *self, uint8_t deviceAddr, uint8_t* data) {
 8012d40:	b508      	push	{r3, lr}
  return mcp23017_readRegister(self, deviceAddr, MCP23017_GPIOA, data);
 8012d42:	4613      	mov	r3, r2
 8012d44:	2212      	movs	r2, #18
 8012d46:	f7ff ffa3 	bl	8012c90 <mcp23017_readRegister>
}
 8012d4a:	bd08      	pop	{r3, pc}
 8012d4c:	f3af 8000 	nop.w

08012d50 <mcp23017_digitalReadB>:
bool mcp23017_digitalReadB(MCP23017_config *self, uint8_t deviceAddr, uint8_t* data) {
 8012d50:	b508      	push	{r3, lr}
  return mcp23017_readRegister(self, deviceAddr, MCP23017_GPIOB, data);
 8012d52:	4613      	mov	r3, r2
 8012d54:	2213      	movs	r2, #19
 8012d56:	f7ff ff9b 	bl	8012c90 <mcp23017_readRegister>
}
 8012d5a:	bd08      	pop	{r3, pc}
 8012d5c:	f3af 8000 	nop.w

08012d60 <mcp23017_writeRegister>:
bool mcp23017_writeRegister(MCP23017_config *self, uint8_t deviceAddr, uint8_t regAddr, uint8_t regValue) {
 8012d60:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8012d64:	b086      	sub	sp, #24
 8012d66:	4605      	mov	r5, r0
 8012d68:	461e      	mov	r6, r3
  deviceAddr &= 0x7;
 8012d6a:	f001 0407 	and.w	r4, r1, #7
  deviceAddr |= MCP23017_ADDRESS;
 8012d6e:	f044 0420 	orr.w	r4, r4, #32
  txbuf[0] = regAddr;
 8012d72:	f88d 2014 	strb.w	r2, [sp, #20]
  txbuf[1] = regValue;
 8012d76:	f88d 3015 	strb.w	r3, [sp, #21]
  i2cAcquireBus(self->i2cp);
 8012d7a:	6800      	ldr	r0, [r0, #0]
 8012d7c:	f7ef fa18 	bl	80021b0 <i2cAcquireBus>
  result = i2cMasterTransmitTimeout(self->i2cp, deviceAddr, txbuf, 2, NULL, 0, TIME_INFINITE);
 8012d80:	b2a4      	uxth	r4, r4
 8012d82:	f04f 38ff 	mov.w	r8, #4294967295
 8012d86:	f04f 39ff 	mov.w	r9, #4294967295
 8012d8a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012d8e:	2300      	movs	r3, #0
 8012d90:	9301      	str	r3, [sp, #4]
 8012d92:	9300      	str	r3, [sp, #0]
 8012d94:	2302      	movs	r3, #2
 8012d96:	aa05      	add	r2, sp, #20
 8012d98:	4621      	mov	r1, r4
 8012d9a:	6828      	ldr	r0, [r5, #0]
 8012d9c:	f7ef f950 	bl	8002040 <i2cMasterTransmitTimeout>
  result = i2cMasterTransmitTimeout(self->i2cp, deviceAddr, txbuf, 1,&newRegValue, 1, TIME_INFINITE);
 8012da0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012da4:	2301      	movs	r3, #1
 8012da6:	9301      	str	r3, [sp, #4]
 8012da8:	f10d 0213 	add.w	r2, sp, #19
 8012dac:	9200      	str	r2, [sp, #0]
 8012dae:	aa05      	add	r2, sp, #20
 8012db0:	4621      	mov	r1, r4
 8012db2:	6828      	ldr	r0, [r5, #0]
 8012db4:	f7ef f944 	bl	8002040 <i2cMasterTransmitTimeout>
  i2cReleaseBus(self->i2cp);
 8012db8:	6828      	ldr	r0, [r5, #0]
 8012dba:	f7ef fa09 	bl	80021d0 <i2cReleaseBus>
  if( newRegValue != regValue )
 8012dbe:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8012dc2:	42b3      	cmp	r3, r6
 8012dc4:	d003      	beq.n	8012dce <mcp23017_writeRegister+0x6e>
    return false;
 8012dc6:	2000      	movs	r0, #0
}
 8012dc8:	b006      	add	sp, #24
 8012dca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    return rv;
 8012dce:	2001      	movs	r0, #1
 8012dd0:	e7fa      	b.n	8012dc8 <mcp23017_writeRegister+0x68>
 8012dd2:	bf00      	nop
 8012dd4:	f3af 8000 	nop.w
 8012dd8:	f3af 8000 	nop.w
 8012ddc:	f3af 8000 	nop.w

08012de0 <mcp23017_pinModeAB>:
bool mcp23017_pinModeAB(MCP23017_config *self, uint8_t deviceAddr, MCP23017_PinMode pinmode) {
 8012de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012de2:	4605      	mov	r5, r0
 8012de4:	460e      	mov	r6, r1
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRA, (pinmode==MCP23017_INPUT)?0xff:0x00);
 8012de6:	b1f2      	cbz	r2, 8012e26 <mcp23017_pinModeAB+0x46>
 8012de8:	2700      	movs	r7, #0
 8012dea:	463b      	mov	r3, r7
 8012dec:	2200      	movs	r2, #0
 8012dee:	4631      	mov	r1, r6
 8012df0:	4628      	mov	r0, r5
 8012df2:	f7ff ffb5 	bl	8012d60 <mcp23017_writeRegister>
 8012df6:	4604      	mov	r4, r0
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IPOLA, 0x00);
 8012df8:	2300      	movs	r3, #0
 8012dfa:	2202      	movs	r2, #2
 8012dfc:	4631      	mov	r1, r6
 8012dfe:	4628      	mov	r0, r5
 8012e00:	f7ff ffae 	bl	8012d60 <mcp23017_writeRegister>
 8012e04:	4004      	ands	r4, r0
 8012e06:	b2e4      	uxtb	r4, r4
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRB, (pinmode==MCP23017_INPUT)?0xff:0x00);
 8012e08:	463b      	mov	r3, r7
 8012e0a:	2201      	movs	r2, #1
 8012e0c:	4631      	mov	r1, r6
 8012e0e:	4628      	mov	r0, r5
 8012e10:	f7ff ffa6 	bl	8012d60 <mcp23017_writeRegister>
 8012e14:	4004      	ands	r4, r0
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IPOLB, 0x00);
 8012e16:	2300      	movs	r3, #0
 8012e18:	2203      	movs	r2, #3
 8012e1a:	4631      	mov	r1, r6
 8012e1c:	4628      	mov	r0, r5
 8012e1e:	f7ff ff9f 	bl	8012d60 <mcp23017_writeRegister>
}
 8012e22:	4020      	ands	r0, r4
 8012e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRA, (pinmode==MCP23017_INPUT)?0xff:0x00);
 8012e26:	27ff      	movs	r7, #255	; 0xff
 8012e28:	e7df      	b.n	8012dea <mcp23017_pinModeAB+0xa>
 8012e2a:	bf00      	nop
 8012e2c:	f3af 8000 	nop.w

08012e30 <mcp23017_digitalWriteAB>:
bool mcp23017_digitalWriteAB(MCP23017_config *self, uint8_t deviceAddr, uint16_t data) {
 8012e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e32:	4606      	mov	r6, r0
 8012e34:	460f      	mov	r7, r1
 8012e36:	4615      	mov	r5, r2
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_GPIOA, data);
 8012e38:	b2d3      	uxtb	r3, r2
 8012e3a:	2212      	movs	r2, #18
 8012e3c:	f7ff ff90 	bl	8012d60 <mcp23017_writeRegister>
 8012e40:	4604      	mov	r4, r0
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_GPIOB, data>>8);
 8012e42:	0a2b      	lsrs	r3, r5, #8
 8012e44:	2213      	movs	r2, #19
 8012e46:	4639      	mov	r1, r7
 8012e48:	4630      	mov	r0, r6
 8012e4a:	f7ff ff89 	bl	8012d60 <mcp23017_writeRegister>
  return rv;
 8012e4e:	4020      	ands	r0, r4
}
 8012e50:	b2c0      	uxtb	r0, r0
 8012e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e54:	f3af 8000 	nop.w
 8012e58:	f3af 8000 	nop.w
 8012e5c:	f3af 8000 	nop.w

08012e60 <mcp23017_digitalWrite>:
bool mcp23017_digitalWrite(const MCP23017_config *self, uint8_t deviceAddr, uint8_t pin, bool data) {
 8012e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e64:	b083      	sub	sp, #12
 8012e66:	4606      	mov	r6, r0
 8012e68:	460f      	mov	r7, r1
 8012e6a:	4615      	mov	r5, r2
 8012e6c:	4699      	mov	r9, r3
  uint8_t bit=mcp23017_bitForPin(pin);
 8012e6e:	4610      	mov	r0, r2
 8012e70:	f7ff fee6 	bl	8012c40 <mcp23017_bitForPin>
 8012e74:	4680      	mov	r8, r0
  uint8_t regAddr=mcp23017_regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
 8012e76:	2215      	movs	r2, #21
 8012e78:	2114      	movs	r1, #20
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	f7ff fed8 	bl	8012c30 <mcp23017_regForPin>
  rv &= mcp23017_readRegister(self, deviceAddr, regAddr, &gpio);
 8012e80:	f10d 0307 	add.w	r3, sp, #7
 8012e84:	4602      	mov	r2, r0
 8012e86:	4639      	mov	r1, r7
 8012e88:	4630      	mov	r0, r6
 8012e8a:	f7ff ff01 	bl	8012c90 <mcp23017_readRegister>
 8012e8e:	4604      	mov	r4, r0
  gpio = mcp23017_bitWrite(gpio,bit,data);
 8012e90:	464a      	mov	r2, r9
 8012e92:	4641      	mov	r1, r8
 8012e94:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012e98:	f7ff feda 	bl	8012c50 <mcp23017_bitWrite>
 8012e9c:	4680      	mov	r8, r0
 8012e9e:	f88d 0007 	strb.w	r0, [sp, #7]
  regAddr=mcp23017_regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
 8012ea2:	2213      	movs	r2, #19
 8012ea4:	2112      	movs	r1, #18
 8012ea6:	4628      	mov	r0, r5
 8012ea8:	f7ff fec2 	bl	8012c30 <mcp23017_regForPin>
  rv &= mcp23017_writeRegister(self, deviceAddr, regAddr,gpio);
 8012eac:	4643      	mov	r3, r8
 8012eae:	4602      	mov	r2, r0
 8012eb0:	4639      	mov	r1, r7
 8012eb2:	4630      	mov	r0, r6
 8012eb4:	f7ff ff54 	bl	8012d60 <mcp23017_writeRegister>
  return rv;
 8012eb8:	4020      	ands	r0, r4
}
 8012eba:	b2c0      	uxtb	r0, r0
 8012ebc:	b003      	add	sp, #12
 8012ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ec2:	bf00      	nop
 8012ec4:	f3af 8000 	nop.w
 8012ec8:	f3af 8000 	nop.w
 8012ecc:	f3af 8000 	nop.w

08012ed0 <mcp23017_updateRegisterBit>:
static bool mcp23017_updateRegisterBit(MCP23017_config *self, uint8_t deviceAddr, uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
 8012ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ed4:	b083      	sub	sp, #12
 8012ed6:	4605      	mov	r5, r0
 8012ed8:	460e      	mov	r6, r1
 8012eda:	4614      	mov	r4, r2
 8012edc:	4699      	mov	r9, r3
  uint8_t regAddr=mcp23017_regForPin(pin, portAaddr, portBaddr);
 8012ede:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8012ee2:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	f7ff fea2 	bl	8012c30 <mcp23017_regForPin>
 8012eec:	4607      	mov	r7, r0
  uint8_t bit=mcp23017_bitForPin(pin);
 8012eee:	4620      	mov	r0, r4
 8012ef0:	f7ff fea6 	bl	8012c40 <mcp23017_bitForPin>
 8012ef4:	4680      	mov	r8, r0
  rv &= mcp23017_readRegister(self, deviceAddr, regAddr, &regValue);
 8012ef6:	f10d 0307 	add.w	r3, sp, #7
 8012efa:	463a      	mov	r2, r7
 8012efc:	4631      	mov	r1, r6
 8012efe:	4628      	mov	r0, r5
 8012f00:	f7ff fec6 	bl	8012c90 <mcp23017_readRegister>
 8012f04:	4604      	mov	r4, r0
  regValue = mcp23017_bitWrite(regValue, bit, pValue);
 8012f06:	464a      	mov	r2, r9
 8012f08:	4641      	mov	r1, r8
 8012f0a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012f0e:	f7ff fe9f 	bl	8012c50 <mcp23017_bitWrite>
 8012f12:	4603      	mov	r3, r0
 8012f14:	f88d 0007 	strb.w	r0, [sp, #7]
  rv &= mcp23017_writeRegister(self, deviceAddr, regAddr, regValue);
 8012f18:	463a      	mov	r2, r7
 8012f1a:	4631      	mov	r1, r6
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	f7ff ff1f 	bl	8012d60 <mcp23017_writeRegister>
  return rv;
 8012f22:	4020      	ands	r0, r4
}
 8012f24:	b2c0      	uxtb	r0, r0
 8012f26:	b003      	add	sp, #12
 8012f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f2c:	f3af 8000 	nop.w

08012f30 <mcp23017_pinMode>:
bool mcp23017_pinMode(MCP23017_config *self, uint8_t deviceAddr, uint8_t pin, MCP23017_PinMode pinmode) {
 8012f30:	b510      	push	{r4, lr}
 8012f32:	b082      	sub	sp, #8
  return mcp23017_updateRegisterBit(self, deviceAddr, pin,(pinmode==MCP23017_INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
 8012f34:	2401      	movs	r4, #1
 8012f36:	9401      	str	r4, [sp, #4]
 8012f38:	2400      	movs	r4, #0
 8012f3a:	9400      	str	r4, [sp, #0]
 8012f3c:	fab3 f383 	clz	r3, r3
 8012f40:	095b      	lsrs	r3, r3, #5
 8012f42:	f7ff ffc5 	bl	8012ed0 <mcp23017_updateRegisterBit>
}
 8012f46:	b002      	add	sp, #8
 8012f48:	bd10      	pop	{r4, pc}
 8012f4a:	bf00      	nop
 8012f4c:	f3af 8000 	nop.w

08012f50 <mcp23017_pinModeA>:
bool mcp23017_pinModeA(MCP23017_config *self, uint8_t deviceAddr, MCP23017_PinMode pinmode){
 8012f50:	b570      	push	{r4, r5, r6, lr}
 8012f52:	4605      	mov	r5, r0
 8012f54:	460e      	mov	r6, r1
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRA, (pinmode==MCP23017_INPUT)?0xff:0x00);
 8012f56:	b17a      	cbz	r2, 8012f78 <mcp23017_pinModeA+0x28>
 8012f58:	2300      	movs	r3, #0
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	4631      	mov	r1, r6
 8012f5e:	4628      	mov	r0, r5
 8012f60:	f7ff fefe 	bl	8012d60 <mcp23017_writeRegister>
 8012f64:	4604      	mov	r4, r0
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IPOLA, 0x00);
 8012f66:	2300      	movs	r3, #0
 8012f68:	2202      	movs	r2, #2
 8012f6a:	4631      	mov	r1, r6
 8012f6c:	4628      	mov	r0, r5
 8012f6e:	f7ff fef7 	bl	8012d60 <mcp23017_writeRegister>
  return rv;
 8012f72:	4020      	ands	r0, r4
}
 8012f74:	b2c0      	uxtb	r0, r0
 8012f76:	bd70      	pop	{r4, r5, r6, pc}
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRA, (pinmode==MCP23017_INPUT)?0xff:0x00);
 8012f78:	23ff      	movs	r3, #255	; 0xff
 8012f7a:	e7ee      	b.n	8012f5a <mcp23017_pinModeA+0xa>
 8012f7c:	f3af 8000 	nop.w

08012f80 <mcp23017_digitalWriteA>:
bool mcp23017_digitalWriteA(MCP23017_config *self, uint8_t deviceAddr, uint8_t data) {
 8012f80:	b508      	push	{r3, lr}
  return mcp23017_writeRegister(self, deviceAddr, MCP23017_GPIOA, data);
 8012f82:	4613      	mov	r3, r2
 8012f84:	2212      	movs	r2, #18
 8012f86:	f7ff feeb 	bl	8012d60 <mcp23017_writeRegister>
}
 8012f8a:	bd08      	pop	{r3, pc}
 8012f8c:	f3af 8000 	nop.w

08012f90 <mcp23017_pinModeB>:
bool mcp23017_pinModeB(MCP23017_config *self, uint8_t deviceAddr, MCP23017_PinMode pinmode){
 8012f90:	b570      	push	{r4, r5, r6, lr}
 8012f92:	4605      	mov	r5, r0
 8012f94:	460e      	mov	r6, r1
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRB, (pinmode==MCP23017_INPUT)?0xff:0x00);
 8012f96:	b17a      	cbz	r2, 8012fb8 <mcp23017_pinModeB+0x28>
 8012f98:	2300      	movs	r3, #0
 8012f9a:	2201      	movs	r2, #1
 8012f9c:	4631      	mov	r1, r6
 8012f9e:	4628      	mov	r0, r5
 8012fa0:	f7ff fede 	bl	8012d60 <mcp23017_writeRegister>
 8012fa4:	4604      	mov	r4, r0
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IPOLB, 0x00);
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	2203      	movs	r2, #3
 8012faa:	4631      	mov	r1, r6
 8012fac:	4628      	mov	r0, r5
 8012fae:	f7ff fed7 	bl	8012d60 <mcp23017_writeRegister>
  return rv;
 8012fb2:	4020      	ands	r0, r4
}
 8012fb4:	b2c0      	uxtb	r0, r0
 8012fb6:	bd70      	pop	{r4, r5, r6, pc}
  rv &= mcp23017_writeRegister(self, deviceAddr, MCP23017_IODIRB, (pinmode==MCP23017_INPUT)?0xff:0x00);
 8012fb8:	23ff      	movs	r3, #255	; 0xff
 8012fba:	e7ee      	b.n	8012f9a <mcp23017_pinModeB+0xa>
 8012fbc:	f3af 8000 	nop.w

08012fc0 <mcp23017_digitalWriteB>:
bool mcp23017_digitalWriteB(MCP23017_config *self, uint8_t deviceAddr, uint8_t data) {
 8012fc0:	b508      	push	{r3, lr}
  return mcp23017_writeRegister(self, deviceAddr, MCP23017_GPIOB, data);
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	2213      	movs	r2, #19
 8012fc6:	f7ff fecb 	bl	8012d60 <mcp23017_writeRegister>
}
 8012fca:	bd08      	pop	{r3, pc}
 8012fcc:	0000      	movs	r0, r0
	...

08012fd0 <xbee_init>:

/*
 * initialize mailbox etc
 */
xbee_mailbox_t* xbee_init(SerialDriver* xbee_stream_val,SerialDriver* debug_stream_val )
{
 8012fd0:	b510      	push	{r4, lr}
  //setup serial streams
  xbee_stream = xbee_stream_val;
 8012fd2:	4b22      	ldr	r3, [pc, #136]	; (801305c <xbee_init+0x8c>)
 8012fd4:	6018      	str	r0, [r3, #0]
  debug_stream = debug_stream_val;
 8012fd6:	4b22      	ldr	r3, [pc, #136]	; (8013060 <xbee_init+0x90>)
 8012fd8:	6019      	str	r1, [r3, #0]


  /* Creating rx the mailboxes.*/
  chMBObjectInit(&xbee_mailbox.rx_filled_packets, xbee_mailbox.rx_filled_packet_queue, NUM_PACKET_BUFFERS);
 8012fda:	4c22      	ldr	r4, [pc, #136]	; (8013064 <xbee_init+0x94>)
 8012fdc:	2205      	movs	r2, #5
 8012fde:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8012fe2:	4620      	mov	r0, r4
 8012fe4:	f7f7 fb64 	bl	800a6b0 <chMBObjectInit>
  chMBObjectInit(&xbee_mailbox.rx_free_packets, xbee_mailbox.rx_free_packet_queue,NUM_PACKET_BUFFERS);
 8012fe8:	2205      	movs	r2, #5
 8012fea:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8012fee:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012ff2:	f7f7 fb5d 	bl	800a6b0 <chMBObjectInit>

  /* Pre-filling the free buffers pool with the available buffers*/
  uint32_t i;
  for (i = 0; i < NUM_PACKET_BUFFERS; i++)
 8012ff6:	2400      	movs	r4, #0
 8012ff8:	e00b      	b.n	8013012 <xbee_init+0x42>
  {
    (void)chMBPostTimeout(&xbee_mailbox.rx_free_packets, (msg_t)&xbee_mailbox.rx_packet_buffers[i],TIME_IMMEDIATE);
 8012ffa:	481a      	ldr	r0, [pc, #104]	; (8013064 <xbee_init+0x94>)
 8012ffc:	215e      	movs	r1, #94	; 0x5e
 8012ffe:	fb01 f104 	mul.w	r1, r1, r4
 8013002:	31f0      	adds	r1, #240	; 0xf0
 8013004:	2200      	movs	r2, #0
 8013006:	2300      	movs	r3, #0
 8013008:	4401      	add	r1, r0
 801300a:	3028      	adds	r0, #40	; 0x28
 801300c:	f7f7 fc00 	bl	800a810 <chMBPostTimeout>
  for (i = 0; i < NUM_PACKET_BUFFERS; i++)
 8013010:	3401      	adds	r4, #1
 8013012:	2c04      	cmp	r4, #4
 8013014:	d9f1      	bls.n	8012ffa <xbee_init+0x2a>
  }

  /* Creating tx the mailboxes.*/
  chMBObjectInit(&xbee_mailbox.tx_filled_packets, xbee_mailbox.tx_filled_packet_queue, NUM_PACKET_BUFFERS);
 8013016:	4c13      	ldr	r4, [pc, #76]	; (8013064 <xbee_init+0x94>)
 8013018:	2205      	movs	r2, #5
 801301a:	f104 01dc 	add.w	r1, r4, #220	; 0xdc
 801301e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8013022:	f7f7 fb45 	bl	800a6b0 <chMBObjectInit>
  chMBObjectInit(&xbee_mailbox.tx_free_packets, xbee_mailbox.tx_free_packet_queue,NUM_PACKET_BUFFERS);
 8013026:	2205      	movs	r2, #5
 8013028:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 801302c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 8013030:	f7f7 fb3e 	bl	800a6b0 <chMBObjectInit>

  /* Pre-filling the free buffers pool with the available buffers*/
  for (i = 0; i < NUM_PACKET_BUFFERS; i++)
 8013034:	2400      	movs	r4, #0
 8013036:	e00d      	b.n	8013054 <xbee_init+0x84>
  {
    (void)chMBPostTimeout(&xbee_mailbox.tx_free_packets, (msg_t)&xbee_mailbox.tx_packet_buffers[i],TIME_IMMEDIATE);
 8013038:	480a      	ldr	r0, [pc, #40]	; (8013064 <xbee_init+0x94>)
 801303a:	215e      	movs	r1, #94	; 0x5e
 801303c:	fb01 f104 	mul.w	r1, r1, r4
 8013040:	f501 7130 	add.w	r1, r1, #704	; 0x2c0
 8013044:	4401      	add	r1, r0
 8013046:	2200      	movs	r2, #0
 8013048:	2300      	movs	r3, #0
 801304a:	3106      	adds	r1, #6
 801304c:	30a0      	adds	r0, #160	; 0xa0
 801304e:	f7f7 fbdf 	bl	800a810 <chMBPostTimeout>
  for (i = 0; i < NUM_PACKET_BUFFERS; i++)
 8013052:	3401      	adds	r4, #1
 8013054:	2c04      	cmp	r4, #4
 8013056:	d9ef      	bls.n	8013038 <xbee_init+0x68>
  }
  return &xbee_mailbox;

}
 8013058:	4802      	ldr	r0, [pc, #8]	; (8013064 <xbee_init+0x94>)
 801305a:	bd10      	pop	{r4, pc}
 801305c:	2000f528 	.word	0x2000f528
 8013060:	2000f8fc 	.word	0x2000f8fc
 8013064:	200040dc 	.word	0x200040dc
 8013068:	f3af 8000 	nop.w
 801306c:	f3af 8000 	nop.w

08013070 <xbee_send_packet>:

/*
 * sends a packet to xbee
 */
void xbee_send_packet()
{
 8013070:	b530      	push	{r4, r5, lr}
 8013072:	b085      	sub	sp, #20
  xbee_packet *tx_packet;
//  char checksum = 0;

  //check for new packets to transmit
  while(chMBFetchTimeout(&xbee_mailbox.tx_filled_packets, (msg_t *)&tx_packet, TIME_IMMEDIATE) == MSG_OK)
 8013074:	e022      	b.n	80130bc <xbee_send_packet+0x4c>
          //chprintf( debug_stream, "\n\rsource address: 0x%08X, 0x%08X\n\r", (uint32_t)*(xbee_com_buffer+FRAME_SRC_ADDR_OFFSET_H),(uint32_t)*(&xbee_com_buffer[FRAME_SRC_ADDR_OFFSET_H]));
//#endif
    if( tx_packet->type == RX_FRAME )
    {
      //this is a response to a cmd, set packet type to TX
      tx_packet->type = TX_FRAME;
 8013076:	2210      	movs	r2, #16
 8013078:	709a      	strb	r2, [r3, #2]
 801307a:	e032      	b.n	80130e2 <xbee_send_packet+0x72>
    //calculate checksum
    uint8_t i,checksum;
    checksum = 0;
    for(i = FRAME_TYPE_OFFSET; i < FRAME_TYPE_OFFSET + tx_packet->packet_length; i++)
    {
      checksum += xbee_tx_buffer[i];
 801307c:	492f      	ldr	r1, [pc, #188]	; (801313c <xbee_send_packet+0xcc>)
 801307e:	5cc9      	ldrb	r1, [r1, r3]
 8013080:	440a      	add	r2, r1
 8013082:	b2d2      	uxtb	r2, r2
    for(i = FRAME_TYPE_OFFSET; i < FRAME_TYPE_OFFSET + tx_packet->packet_length; i++)
 8013084:	3301      	adds	r3, #1
 8013086:	b2db      	uxtb	r3, r3
 8013088:	8829      	ldrh	r1, [r5, #0]
 801308a:	3103      	adds	r1, #3
 801308c:	428b      	cmp	r3, r1
 801308e:	dbf5      	blt.n	801307c <xbee_send_packet+0xc>
    }
    checksum = 0xFF-checksum;
 8013090:	43d2      	mvns	r2, r2
    xbee_tx_buffer[i] = checksum;
 8013092:	492a      	ldr	r1, [pc, #168]	; (801313c <xbee_send_packet+0xcc>)
 8013094:	54ca      	strb	r2, [r1, r3]


    msg_t result = sdWrite(xbee_stream,xbee_tx_buffer, tx_packet->packet_length+4);
 8013096:	4b2a      	ldr	r3, [pc, #168]	; (8013140 <xbee_send_packet+0xd0>)
 8013098:	6818      	ldr	r0, [r3, #0]
 801309a:	882a      	ldrh	r2, [r5, #0]
 801309c:	f04f 34ff 	mov.w	r4, #4294967295
 80130a0:	f04f 35ff 	mov.w	r5, #4294967295
 80130a4:	e9cd 4500 	strd	r4, r5, [sp]
 80130a8:	3204      	adds	r2, #4
 80130aa:	3030      	adds	r0, #48	; 0x30
 80130ac:	f7ee f9a8 	bl	8001400 <oqWriteTimeout>
#ifdef XBEE_debug
          chprintf( debug_stream, "\n\rxbee send failed\n\r");
          //chprintf( debug_stream, "\n\rsource address: 0x%08X, 0x%08X\n\r", (uint32_t)*(xbee_com_buffer+FRAME_SRC_ADDR_OFFSET_H),(uint32_t)*(&xbee_com_buffer[FRAME_SRC_ADDR_OFFSET_H]));
#endif
    }
    (void)chMBPostTimeout(&xbee_mailbox.tx_free_packets, (msg_t)tx_packet,TIME_IMMEDIATE);
 80130b0:	2200      	movs	r2, #0
 80130b2:	2300      	movs	r3, #0
 80130b4:	9903      	ldr	r1, [sp, #12]
 80130b6:	4823      	ldr	r0, [pc, #140]	; (8013144 <xbee_send_packet+0xd4>)
 80130b8:	f7f7 fbaa 	bl	800a810 <chMBPostTimeout>
  while(chMBFetchTimeout(&xbee_mailbox.tx_filled_packets, (msg_t *)&tx_packet, TIME_IMMEDIATE) == MSG_OK)
 80130bc:	2200      	movs	r2, #0
 80130be:	2300      	movs	r3, #0
 80130c0:	a903      	add	r1, sp, #12
 80130c2:	4821      	ldr	r0, [pc, #132]	; (8013148 <xbee_send_packet+0xd8>)
 80130c4:	f7f7 fcfc 	bl	800aac0 <chMBFetchTimeout>
 80130c8:	2800      	cmp	r0, #0
 80130ca:	d134      	bne.n	8013136 <xbee_send_packet+0xc6>
    chprintf( debug_stream, "\n\rXbee send data[] = %s\n\r",tx_packet->data);
 80130cc:	9a03      	ldr	r2, [sp, #12]
 80130ce:	320e      	adds	r2, #14
 80130d0:	491e      	ldr	r1, [pc, #120]	; (801314c <xbee_send_packet+0xdc>)
 80130d2:	4b1f      	ldr	r3, [pc, #124]	; (8013150 <xbee_send_packet+0xe0>)
 80130d4:	6818      	ldr	r0, [r3, #0]
 80130d6:	f7f8 fecb 	bl	800be70 <chprintf>
    if( tx_packet->type == RX_FRAME )
 80130da:	9b03      	ldr	r3, [sp, #12]
 80130dc:	789a      	ldrb	r2, [r3, #2]
 80130de:	2a90      	cmp	r2, #144	; 0x90
 80130e0:	d0c9      	beq.n	8013076 <xbee_send_packet+0x6>
    tx_packet->packet_length = tx_packet->data_length + TX_PACKET_OVERHEAD;
 80130e2:	9a03      	ldr	r2, [sp, #12]
 80130e4:	8993      	ldrh	r3, [r2, #12]
 80130e6:	330e      	adds	r3, #14
 80130e8:	8013      	strh	r3, [r2, #0]
    xbee_tx_buffer[0] = FRAME_START_BYTE;
 80130ea:	4814      	ldr	r0, [pc, #80]	; (801313c <xbee_send_packet+0xcc>)
 80130ec:	237e      	movs	r3, #126	; 0x7e
 80130ee:	7003      	strb	r3, [r0, #0]
    xbee_tx_buffer[FRAME_LENGTH_OFFSET_H] = tx_packet->packet_length >> 8;
 80130f0:	9d03      	ldr	r5, [sp, #12]
 80130f2:	882b      	ldrh	r3, [r5, #0]
 80130f4:	0a1b      	lsrs	r3, r3, #8
 80130f6:	7043      	strb	r3, [r0, #1]
    xbee_tx_buffer[FRAME_LENGTH_OFFSET_L] = (uint8_t)tx_packet->packet_length;
 80130f8:	782b      	ldrb	r3, [r5, #0]
 80130fa:	7083      	strb	r3, [r0, #2]
    xbee_tx_buffer[ FRAME_TYPE_OFFSET ] = tx_packet->type;
 80130fc:	78ab      	ldrb	r3, [r5, #2]
 80130fe:	70c3      	strb	r3, [r0, #3]
    xbee_tx_buffer[ FRAME_TX_ID_OFFSET ] = DEFAULT_FRAME_ID;
 8013100:	2301      	movs	r3, #1
 8013102:	7103      	strb	r3, [r0, #4]
    memcpy( &xbee_tx_buffer[ FRAME_TX_ADDR_OFFSET_H ], tx_packet->address_H, 4);
 8013104:	f8d5 3003 	ldr.w	r3, [r5, #3]
 8013108:	f8c0 3005 	str.w	r3, [r0, #5]
    memcpy( &xbee_tx_buffer[ FRAME_TX_ADDR_OFFSET_L ], tx_packet->address_L, 4);
 801310c:	f8d5 3007 	ldr.w	r3, [r5, #7]
 8013110:	f8c0 3009 	str.w	r3, [r0, #9]
    xbee_tx_buffer[ FRAME_TX_RES1_OFFSET ] = 0xFF; //reserved values
 8013114:	23ff      	movs	r3, #255	; 0xff
 8013116:	7343      	strb	r3, [r0, #13]
    xbee_tx_buffer[ FRAME_TX_RES2_OFFSET ] = 0xFE;
 8013118:	23fe      	movs	r3, #254	; 0xfe
 801311a:	7383      	strb	r3, [r0, #14]
    xbee_tx_buffer[ FRAME_TX_BCAST_OFFSET ] = TX_BCAST_RADIUS; //default
 801311c:	2400      	movs	r4, #0
 801311e:	73c4      	strb	r4, [r0, #15]
    xbee_tx_buffer[ FRAME_TX_OPPS_OFFSET ] = TX_OPPS; //digimesh, no ACK
 8013120:	23c1      	movs	r3, #193	; 0xc1
 8013122:	7403      	strb	r3, [r0, #16]
    memcpy( &xbee_tx_buffer[ FRAME_TX_DATA_OFFSET ], tx_packet->data, tx_packet->data_length );
 8013124:	89aa      	ldrh	r2, [r5, #12]
 8013126:	f105 010e 	add.w	r1, r5, #14
 801312a:	3011      	adds	r0, #17
 801312c:	f000 fb60 	bl	80137f0 <memcpy>
    checksum = 0;
 8013130:	4622      	mov	r2, r4
    for(i = FRAME_TYPE_OFFSET; i < FRAME_TYPE_OFFSET + tx_packet->packet_length; i++)
 8013132:	2303      	movs	r3, #3
 8013134:	e7a8      	b.n	8013088 <xbee_send_packet+0x18>
  }

}
 8013136:	b005      	add	sp, #20
 8013138:	bd30      	pop	{r4, r5, pc}
 801313a:	bf00      	nop
 801313c:	2000ff94 	.word	0x2000ff94
 8013140:	2000f528 	.word	0x2000f528
 8013144:	2000417c 	.word	0x2000417c
 8013148:	20004154 	.word	0x20004154
 801314c:	080165b0 	.word	0x080165b0
 8013150:	2000f8fc 	.word	0x2000f8fc
 8013154:	f3af 8000 	nop.w
 8013158:	f3af 8000 	nop.w
 801315c:	f3af 8000 	nop.w

08013160 <xbee_process_packet>:
/*
 * Processes valid xbee packets.
 * most packet will be ignored, command packets will be sent on
 */
uint8_t xbee_process_packet()
{
 8013160:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8013164:	b082      	sub	sp, #8
  // act based on the packet type

  switch ( new_packet.type  )
 8013166:	4b3e      	ldr	r3, [pc, #248]	; (8013260 <xbee_process_packet+0x100>)
 8013168:	789b      	ldrb	r3, [r3, #2]
 801316a:	2b8b      	cmp	r3, #139	; 0x8b
 801316c:	d072      	beq.n	8013254 <xbee_process_packet+0xf4>
 801316e:	2b90      	cmp	r3, #144	; 0x90
 8013170:	d003      	beq.n	801317a <xbee_process_packet+0x1a>
//#endif
      break;
  }
  return 0;

}
 8013172:	2000      	movs	r0, #0
 8013174:	b002      	add	sp, #8
 8013176:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 801317a:	2320      	movs	r3, #32
 801317c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8013180:	f7f5 ff06 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8013184:	f7f4 fc04 	bl	8007990 <_dbg_check_lock>
 8013188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801318c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  _dbg_check_unlock();
 801318e:	f7f4 fc17 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8013192:	f7f5 ff05 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8013196:	4b33      	ldr	r3, [pc, #204]	; (8013264 <xbee_process_packet+0x104>)
 8013198:	681a      	ldr	r2, [r3, #0]
 801319a:	429a      	cmp	r2, r3
 801319c:	d004      	beq.n	80131a8 <xbee_process_packet+0x48>
 801319e:	699b      	ldr	r3, [r3, #24]
 80131a0:	6899      	ldr	r1, [r3, #8]
 80131a2:	6893      	ldr	r3, [r2, #8]
 80131a4:	4299      	cmp	r1, r3
 80131a6:	d351      	bcc.n	801324c <xbee_process_packet+0xec>
 80131a8:	2500      	movs	r5, #0
 80131aa:	f385 8811 	msr	BASEPRI, r5
      lastXB_CMD_mS = TIME_I2MS( chVTGetSystemTime() );
 80131ae:	2700      	movs	r7, #0
 80131b0:	0160      	lsls	r0, r4, #5
 80131b2:	0ee1      	lsrs	r1, r4, #27
 80131b4:	1b00      	subs	r0, r0, r4
 80131b6:	eb61 0107 	sbc.w	r1, r1, r7
 80131ba:	008b      	lsls	r3, r1, #2
 80131bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80131c0:	0082      	lsls	r2, r0, #2
 80131c2:	eb12 0b04 	adds.w	fp, r2, r4
 80131c6:	eb43 0c07 	adc.w	ip, r3, r7
 80131ca:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80131ce:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80131d2:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80131d6:	4693      	mov	fp, r2
 80131d8:	469c      	mov	ip, r3
 80131da:	4a23      	ldr	r2, [pc, #140]	; (8013268 <xbee_process_packet+0x108>)
 80131dc:	2300      	movs	r3, #0
 80131de:	4e23      	ldr	r6, [pc, #140]	; (801326c <xbee_process_packet+0x10c>)
 80131e0:	2700      	movs	r7, #0
 80131e2:	eb1b 0006 	adds.w	r0, fp, r6
 80131e6:	eb4c 0107 	adc.w	r1, ip, r7
 80131ea:	f000 f981 	bl	80134f0 <__aeabi_uldivmod>
 80131ee:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8013280 <xbee_process_packet+0x120>
 80131f2:	f8c8 049c 	str.w	r0, [r8, #1180]	; 0x49c
      new_packet.data_length = new_packet.packet_length - FRAME_LENGTH_OVERHEAD;
 80131f6:	4e1a      	ldr	r6, [pc, #104]	; (8013260 <xbee_process_packet+0x100>)
 80131f8:	8834      	ldrh	r4, [r6, #0]
 80131fa:	3c0c      	subs	r4, #12
 80131fc:	b2a4      	uxth	r4, r4
 80131fe:	81b4      	strh	r4, [r6, #12]
      memcpy(new_packet.data, &xbee_com_buffer[FRAME_RX_DATA_OFFSET],new_packet.data_length );
 8013200:	4f1b      	ldr	r7, [pc, #108]	; (8013270 <xbee_process_packet+0x110>)
 8013202:	4622      	mov	r2, r4
 8013204:	4639      	mov	r1, r7
 8013206:	f106 000e 	add.w	r0, r6, #14
 801320a:	f000 faf1 	bl	80137f0 <memcpy>
      new_packet.data[new_packet.data_length] = 0;//null terminate to make it a string
 801320e:	4434      	add	r4, r6
 8013210:	73a5      	strb	r5, [r4, #14]
      memcpy(new_packet.address_H, &xbee_com_buffer[FRAME_SRC_ADDR_OFFSET_H], 4);
 8013212:	f857 3c0b 	ldr.w	r3, [r7, #-11]
 8013216:	f8c6 3003 	str.w	r3, [r6, #3]
      memcpy(new_packet.address_L, &xbee_com_buffer[FRAME_SRC_ADDR_OFFSET_L], 4);
 801321a:	f857 3c07 	ldr.w	r3, [r7, #-7]
 801321e:	f8c6 3007 	str.w	r3, [r6, #7]
      if (chMBFetchTimeout(&xbee_mailbox.rx_free_packets, (msg_t *)&pbuf, TIME_IMMEDIATE) == MSG_OK)
 8013222:	2200      	movs	r2, #0
 8013224:	2300      	movs	r3, #0
 8013226:	a901      	add	r1, sp, #4
 8013228:	f108 0028 	add.w	r0, r8, #40	; 0x28
 801322c:	f7f7 fc48 	bl	800aac0 <chMBFetchTimeout>
 8013230:	2800      	cmp	r0, #0
 8013232:	d19e      	bne.n	8013172 <xbee_process_packet+0x12>
        memcpy(pbuf,&new_packet,sizeof(new_packet)); //copy new packet contents to message buffer
 8013234:	225e      	movs	r2, #94	; 0x5e
 8013236:	4631      	mov	r1, r6
 8013238:	9801      	ldr	r0, [sp, #4]
 801323a:	f000 fad9 	bl	80137f0 <memcpy>
        (void)chMBPostTimeout(&xbee_mailbox.rx_filled_packets, (msg_t)pbuf,TIME_IMMEDIATE);
 801323e:	2200      	movs	r2, #0
 8013240:	2300      	movs	r3, #0
 8013242:	9901      	ldr	r1, [sp, #4]
 8013244:	4640      	mov	r0, r8
 8013246:	f7f7 fae3 	bl	800a810 <chMBPostTimeout>
 801324a:	e792      	b.n	8013172 <xbee_process_packet+0x12>
 801324c:	4809      	ldr	r0, [pc, #36]	; (8013274 <xbee_process_packet+0x114>)
 801324e:	f7f4 fa0f 	bl	8007670 <chSysHalt>
 8013252:	e7a9      	b.n	80131a8 <xbee_process_packet+0x48>
      chprintf( debug_stream, "\n\rxbee TX status packet received\n\r");
 8013254:	4908      	ldr	r1, [pc, #32]	; (8013278 <xbee_process_packet+0x118>)
 8013256:	4b09      	ldr	r3, [pc, #36]	; (801327c <xbee_process_packet+0x11c>)
 8013258:	6818      	ldr	r0, [r3, #0]
 801325a:	f7f8 fe09 	bl	800be70 <chprintf>
      break;
 801325e:	e788      	b.n	8013172 <xbee_process_packet+0x12>
 8013260:	2000fe34 	.word	0x2000fe34
 8013264:	20004f68 	.word	0x20004f68
 8013268:	000186a0 	.word	0x000186a0
 801326c:	0001869f 	.word	0x0001869f
 8013270:	2000fd43 	.word	0x2000fd43
 8013274:	08015bdc 	.word	0x08015bdc
 8013278:	080165cc 	.word	0x080165cc
 801327c:	2000f8fc 	.word	0x2000f8fc
 8013280:	200040dc 	.word	0x200040dc
 8013284:	f3af 8000 	nop.w
 8013288:	f3af 8000 	nop.w
 801328c:	f3af 8000 	nop.w

08013290 <xbee_com_parse>:
{
 8013290:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  readByte = sdGetTimeout(xbee_stream, TIME_IMMEDIATE);
 8013294:	4b63      	ldr	r3, [pc, #396]	; (8013424 <xbee_com_parse+0x194>)
 8013296:	6818      	ldr	r0, [r3, #0]
 8013298:	2200      	movs	r2, #0
 801329a:	2300      	movs	r3, #0
 801329c:	300c      	adds	r0, #12
 801329e:	f7ed feff 	bl	80010a0 <iqGetTimeout>
 80132a2:	4604      	mov	r4, r0
  while(readByte != MSG_TIMEOUT)
 80132a4:	e02b      	b.n	80132fe <xbee_com_parse+0x6e>
 80132a6:	4860      	ldr	r0, [pc, #384]	; (8013428 <xbee_com_parse+0x198>)
 80132a8:	f7f4 f9e2 	bl	8007670 <chSysHalt>
 80132ac:	e042      	b.n	8013334 <xbee_com_parse+0xa4>
      chprintf(debug_stream, "\n\rcorrupted xbee packet\n\r",(char)readByte);
 80132ae:	b2e2      	uxtb	r2, r4
 80132b0:	495e      	ldr	r1, [pc, #376]	; (801342c <xbee_com_parse+0x19c>)
 80132b2:	4b5f      	ldr	r3, [pc, #380]	; (8013430 <xbee_com_parse+0x1a0>)
 80132b4:	6818      	ldr	r0, [r3, #0]
 80132b6:	f7f8 fddb 	bl	800be70 <chprintf>
      buf_end_pos = 0;    //reset buffer
 80132ba:	4b5e      	ldr	r3, [pc, #376]	; (8013434 <xbee_com_parse+0x1a4>)
 80132bc:	2200      	movs	r2, #0
 80132be:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
 80132c2:	e066      	b.n	8013392 <xbee_com_parse+0x102>
      if( buf_end_pos != 0 )
 80132c4:	4b5b      	ldr	r3, [pc, #364]	; (8013434 <xbee_com_parse+0x1a4>)
 80132c6:	f8b3 34a4 	ldrh.w	r3, [r3, #1188]	; 0x4a4
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d16d      	bne.n	80133aa <xbee_com_parse+0x11a>
      buf_end_pos = 0; //reset buffer
 80132ce:	4b59      	ldr	r3, [pc, #356]	; (8013434 <xbee_com_parse+0x1a4>)
 80132d0:	2200      	movs	r2, #0
 80132d2:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
    xbee_com_buffer[buf_end_pos++] = newByte;
 80132d6:	4a57      	ldr	r2, [pc, #348]	; (8013434 <xbee_com_parse+0x1a4>)
 80132d8:	f8b2 14a4 	ldrh.w	r1, [r2, #1188]	; 0x4a4
 80132dc:	1c4b      	adds	r3, r1, #1
 80132de:	b29b      	uxth	r3, r3
 80132e0:	f8a2 34a4 	strh.w	r3, [r2, #1188]	; 0x4a4
 80132e4:	4a54      	ldr	r2, [pc, #336]	; (8013438 <xbee_com_parse+0x1a8>)
 80132e6:	5455      	strb	r5, [r2, r1]
    if( ( xbee_com_buffer[0] == FRAME_START_BYTE ) && ( buf_end_pos >= FRAME_MIN_PACKET_LENGTH ) )
 80132e8:	7812      	ldrb	r2, [r2, #0]
 80132ea:	2a7e      	cmp	r2, #126	; 0x7e
 80132ec:	d064      	beq.n	80133b8 <xbee_com_parse+0x128>
    readByte = sdGetTimeout(xbee_stream, chTimeUS2I( 15 )); //wait up to 15uS for next char.
 80132ee:	4b4d      	ldr	r3, [pc, #308]	; (8013424 <xbee_com_parse+0x194>)
 80132f0:	6818      	ldr	r0, [r3, #0]
 80132f2:	2202      	movs	r2, #2
 80132f4:	2300      	movs	r3, #0
 80132f6:	300c      	adds	r0, #12
 80132f8:	f7ed fed2 	bl	80010a0 <iqGetTimeout>
 80132fc:	4604      	mov	r4, r0
  while(readByte != MSG_TIMEOUT)
 80132fe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013302:	f000 808c 	beq.w	801341e <xbee_com_parse+0x18e>
 8013306:	2320      	movs	r3, #32
 8013308:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 801330c:	f7f5 fe40 	bl	8008f90 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8013310:	f7f4 fb3e 	bl	8007990 <_dbg_check_lock>
 8013314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013318:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  _dbg_check_unlock();
 801331a:	f7f4 fb51 	bl	80079c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 801331e:	f7f5 fe3f 	bl	8008fa0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8013322:	4b46      	ldr	r3, [pc, #280]	; (801343c <xbee_com_parse+0x1ac>)
 8013324:	681a      	ldr	r2, [r3, #0]
 8013326:	429a      	cmp	r2, r3
 8013328:	d004      	beq.n	8013334 <xbee_com_parse+0xa4>
 801332a:	699b      	ldr	r3, [r3, #24]
 801332c:	6899      	ldr	r1, [r3, #8]
 801332e:	6893      	ldr	r3, [r2, #8]
 8013330:	4299      	cmp	r1, r3
 8013332:	d3b8      	bcc.n	80132a6 <xbee_com_parse+0x16>
 8013334:	2300      	movs	r3, #0
 8013336:	f383 8811 	msr	BASEPRI, r3
    cur_mS = TIME_I2MS( chVTGetSystemTime() );
 801333a:	2700      	movs	r7, #0
 801333c:	0168      	lsls	r0, r5, #5
 801333e:	0ee9      	lsrs	r1, r5, #27
 8013340:	1b40      	subs	r0, r0, r5
 8013342:	eb61 0107 	sbc.w	r1, r1, r7
 8013346:	008b      	lsls	r3, r1, #2
 8013348:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801334c:	0082      	lsls	r2, r0, #2
 801334e:	eb12 0805 	adds.w	r8, r2, r5
 8013352:	eb43 0907 	adc.w	r9, r3, r7
 8013356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801335a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801335e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8013362:	4690      	mov	r8, r2
 8013364:	4699      	mov	r9, r3
 8013366:	4a36      	ldr	r2, [pc, #216]	; (8013440 <xbee_com_parse+0x1b0>)
 8013368:	2300      	movs	r3, #0
 801336a:	4e36      	ldr	r6, [pc, #216]	; (8013444 <xbee_com_parse+0x1b4>)
 801336c:	2700      	movs	r7, #0
 801336e:	eb18 0006 	adds.w	r0, r8, r6
 8013372:	eb49 0107 	adc.w	r1, r9, r7
 8013376:	f000 f8bb 	bl	80134f0 <__aeabi_uldivmod>
 801337a:	4605      	mov	r5, r0
    if( ( ( cur_mS - lastXB_RX_mS ) > XBEE_PKT_TIMEOUT_MS ) && ( buf_end_pos != 0 ) )
 801337c:	4b2d      	ldr	r3, [pc, #180]	; (8013434 <xbee_com_parse+0x1a4>)
 801337e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8013382:	1ac3      	subs	r3, r0, r3
 8013384:	2b64      	cmp	r3, #100	; 0x64
 8013386:	d904      	bls.n	8013392 <xbee_com_parse+0x102>
 8013388:	4b2a      	ldr	r3, [pc, #168]	; (8013434 <xbee_com_parse+0x1a4>)
 801338a:	f8b3 34a4 	ldrh.w	r3, [r3, #1188]	; 0x4a4
 801338e:	2b00      	cmp	r3, #0
 8013390:	d18d      	bne.n	80132ae <xbee_com_parse+0x1e>
    lastXB_RX_mS = cur_mS;
 8013392:	4b28      	ldr	r3, [pc, #160]	; (8013434 <xbee_com_parse+0x1a4>)
 8013394:	f8c3 54a0 	str.w	r5, [r3, #1184]	; 0x4a0
    newByte = (char)readByte;
 8013398:	b2e5      	uxtb	r5, r4
    if( ( newByte == FRAME_START_BYTE ) || ( buf_end_pos == XBEE_COM_BUF_SIZE ) )
 801339a:	2d7e      	cmp	r5, #126	; 0x7e
 801339c:	d092      	beq.n	80132c4 <xbee_com_parse+0x34>
 801339e:	f8b3 34a4 	ldrh.w	r3, [r3, #1188]	; 0x4a4
 80133a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80133a6:	d196      	bne.n	80132d6 <xbee_com_parse+0x46>
 80133a8:	e78c      	b.n	80132c4 <xbee_com_parse+0x34>
        chprintf(debug_stream, "\n\rcorrupted xbee packet\n\r",(char)readByte);
 80133aa:	b2e2      	uxtb	r2, r4
 80133ac:	491f      	ldr	r1, [pc, #124]	; (801342c <xbee_com_parse+0x19c>)
 80133ae:	4b20      	ldr	r3, [pc, #128]	; (8013430 <xbee_com_parse+0x1a0>)
 80133b0:	6818      	ldr	r0, [r3, #0]
 80133b2:	f7f8 fd5d 	bl	800be70 <chprintf>
 80133b6:	e78a      	b.n	80132ce <xbee_com_parse+0x3e>
    if( ( xbee_com_buffer[0] == FRAME_START_BYTE ) && ( buf_end_pos >= FRAME_MIN_PACKET_LENGTH ) )
 80133b8:	2b04      	cmp	r3, #4
 80133ba:	d998      	bls.n	80132ee <xbee_com_parse+0x5e>
      new_packet.packet_length = ( xbee_com_buffer[FRAME_LENGTH_OFFSET_H] << 8 ) + xbee_com_buffer[ FRAME_LENGTH_OFFSET_L ];
 80133bc:	491e      	ldr	r1, [pc, #120]	; (8013438 <xbee_com_parse+0x1a8>)
 80133be:	7848      	ldrb	r0, [r1, #1]
 80133c0:	788a      	ldrb	r2, [r1, #2]
 80133c2:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 80133c6:	b292      	uxth	r2, r2
 80133c8:	491f      	ldr	r1, [pc, #124]	; (8013448 <xbee_com_parse+0x1b8>)
 80133ca:	800a      	strh	r2, [r1, #0]
      if( buf_end_pos == ( new_packet.packet_length + FRAME_DATA_OFFSET + 1 ) )
 80133cc:	3204      	adds	r2, #4
 80133ce:	4293      	cmp	r3, r2
 80133d0:	d18d      	bne.n	80132ee <xbee_com_parse+0x5e>
        uint8_t xbee_checksum = 0;
 80133d2:	2500      	movs	r5, #0
        for(i=FRAME_DATA_OFFSET;i < ( buf_end_pos - 1 );i++)
 80133d4:	2403      	movs	r4, #3
 80133d6:	e00a      	b.n	80133ee <xbee_com_parse+0x15e>
          xbee_checksum += xbee_com_buffer[i];
 80133d8:	4b17      	ldr	r3, [pc, #92]	; (8013438 <xbee_com_parse+0x1a8>)
 80133da:	5d1a      	ldrb	r2, [r3, r4]
 80133dc:	4415      	add	r5, r2
 80133de:	b2ed      	uxtb	r5, r5
          chprintf( debug_stream, "0x%02X ", xbee_com_buffer[i]);
 80133e0:	491a      	ldr	r1, [pc, #104]	; (801344c <xbee_com_parse+0x1bc>)
 80133e2:	4b13      	ldr	r3, [pc, #76]	; (8013430 <xbee_com_parse+0x1a0>)
 80133e4:	6818      	ldr	r0, [r3, #0]
 80133e6:	f7f8 fd43 	bl	800be70 <chprintf>
        for(i=FRAME_DATA_OFFSET;i < ( buf_end_pos - 1 );i++)
 80133ea:	3401      	adds	r4, #1
 80133ec:	b2e4      	uxtb	r4, r4
 80133ee:	4b11      	ldr	r3, [pc, #68]	; (8013434 <xbee_com_parse+0x1a4>)
 80133f0:	f8b3 34a4 	ldrh.w	r3, [r3, #1188]	; 0x4a4
 80133f4:	3b01      	subs	r3, #1
 80133f6:	429c      	cmp	r4, r3
 80133f8:	dbee      	blt.n	80133d8 <xbee_com_parse+0x148>
        xbee_checksum = 0xFF - xbee_checksum;
 80133fa:	43ed      	mvns	r5, r5
 80133fc:	b2ed      	uxtb	r5, r5
        if( xbee_checksum == xbee_com_buffer[i])
 80133fe:	4b0e      	ldr	r3, [pc, #56]	; (8013438 <xbee_com_parse+0x1a8>)
 8013400:	5d1b      	ldrb	r3, [r3, r4]
 8013402:	42ab      	cmp	r3, r5
 8013404:	f47f af73 	bne.w	80132ee <xbee_com_parse+0x5e>
          new_packet.type = xbee_com_buffer[FRAME_TYPE_OFFSET];   //packet type
 8013408:	4b0b      	ldr	r3, [pc, #44]	; (8013438 <xbee_com_parse+0x1a8>)
 801340a:	78da      	ldrb	r2, [r3, #3]
 801340c:	4b0e      	ldr	r3, [pc, #56]	; (8013448 <xbee_com_parse+0x1b8>)
 801340e:	709a      	strb	r2, [r3, #2]
          xbee_process_packet();
 8013410:	f7ff fea6 	bl	8013160 <xbee_process_packet>
          buf_end_pos = 0; //reset buffer
 8013414:	4b07      	ldr	r3, [pc, #28]	; (8013434 <xbee_com_parse+0x1a4>)
 8013416:	2200      	movs	r2, #0
 8013418:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
 801341c:	e767      	b.n	80132ee <xbee_com_parse+0x5e>
}
 801341e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8013422:	bf00      	nop
 8013424:	2000f528 	.word	0x2000f528
 8013428:	08015bdc 	.word	0x08015bdc
 801342c:	080165f0 	.word	0x080165f0
 8013430:	2000f8fc 	.word	0x2000f8fc
 8013434:	200040dc 	.word	0x200040dc
 8013438:	2000fd34 	.word	0x2000fd34
 801343c:	20004f68 	.word	0x20004f68
 8013440:	000186a0 	.word	0x000186a0
 8013444:	0001869f 	.word	0x0001869f
 8013448:	2000fe34 	.word	0x2000fe34
 801344c:	0801660c 	.word	0x0801660c

08013450 <__aeabi_ldivmod>:
 8013450:	b97b      	cbnz	r3, 8013472 <__aeabi_ldivmod+0x22>
 8013452:	b972      	cbnz	r2, 8013472 <__aeabi_ldivmod+0x22>
 8013454:	2900      	cmp	r1, #0
 8013456:	bfbe      	ittt	lt
 8013458:	2000      	movlt	r0, #0
 801345a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 801345e:	e006      	blt.n	801346e <__aeabi_ldivmod+0x1e>
 8013460:	bf08      	it	eq
 8013462:	2800      	cmpeq	r0, #0
 8013464:	bf1c      	itt	ne
 8013466:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 801346a:	f04f 30ff 	movne.w	r0, #4294967295
 801346e:	f000 b9bd 	b.w	80137ec <__aeabi_idiv0>
 8013472:	f1ad 0c08 	sub.w	ip, sp, #8
 8013476:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 801347a:	2900      	cmp	r1, #0
 801347c:	db09      	blt.n	8013492 <__aeabi_ldivmod+0x42>
 801347e:	2b00      	cmp	r3, #0
 8013480:	db1a      	blt.n	80134b8 <__aeabi_ldivmod+0x68>
 8013482:	f000 f84d 	bl	8013520 <__udivmoddi4>
 8013486:	f8dd e004 	ldr.w	lr, [sp, #4]
 801348a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801348e:	b004      	add	sp, #16
 8013490:	4770      	bx	lr
 8013492:	4240      	negs	r0, r0
 8013494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8013498:	2b00      	cmp	r3, #0
 801349a:	db1b      	blt.n	80134d4 <__aeabi_ldivmod+0x84>
 801349c:	f000 f840 	bl	8013520 <__udivmoddi4>
 80134a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80134a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80134a8:	b004      	add	sp, #16
 80134aa:	4240      	negs	r0, r0
 80134ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80134b0:	4252      	negs	r2, r2
 80134b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80134b6:	4770      	bx	lr
 80134b8:	4252      	negs	r2, r2
 80134ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80134be:	f000 f82f 	bl	8013520 <__udivmoddi4>
 80134c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80134c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80134ca:	b004      	add	sp, #16
 80134cc:	4240      	negs	r0, r0
 80134ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80134d2:	4770      	bx	lr
 80134d4:	4252      	negs	r2, r2
 80134d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80134da:	f000 f821 	bl	8013520 <__udivmoddi4>
 80134de:	f8dd e004 	ldr.w	lr, [sp, #4]
 80134e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80134e6:	b004      	add	sp, #16
 80134e8:	4252      	negs	r2, r2
 80134ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80134ee:	4770      	bx	lr

080134f0 <__aeabi_uldivmod>:
 80134f0:	b953      	cbnz	r3, 8013508 <__aeabi_uldivmod+0x18>
 80134f2:	b94a      	cbnz	r2, 8013508 <__aeabi_uldivmod+0x18>
 80134f4:	2900      	cmp	r1, #0
 80134f6:	bf08      	it	eq
 80134f8:	2800      	cmpeq	r0, #0
 80134fa:	bf1c      	itt	ne
 80134fc:	f04f 31ff 	movne.w	r1, #4294967295
 8013500:	f04f 30ff 	movne.w	r0, #4294967295
 8013504:	f000 b972 	b.w	80137ec <__aeabi_idiv0>
 8013508:	f1ad 0c08 	sub.w	ip, sp, #8
 801350c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8013510:	f000 f806 	bl	8013520 <__udivmoddi4>
 8013514:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801351c:	b004      	add	sp, #16
 801351e:	4770      	bx	lr

08013520 <__udivmoddi4>:
 8013520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013524:	9e08      	ldr	r6, [sp, #32]
 8013526:	4604      	mov	r4, r0
 8013528:	4688      	mov	r8, r1
 801352a:	2b00      	cmp	r3, #0
 801352c:	d14b      	bne.n	80135c6 <__udivmoddi4+0xa6>
 801352e:	428a      	cmp	r2, r1
 8013530:	4615      	mov	r5, r2
 8013532:	d967      	bls.n	8013604 <__udivmoddi4+0xe4>
 8013534:	fab2 f282 	clz	r2, r2
 8013538:	b14a      	cbz	r2, 801354e <__udivmoddi4+0x2e>
 801353a:	f1c2 0720 	rsb	r7, r2, #32
 801353e:	fa01 f302 	lsl.w	r3, r1, r2
 8013542:	fa20 f707 	lsr.w	r7, r0, r7
 8013546:	4095      	lsls	r5, r2
 8013548:	ea47 0803 	orr.w	r8, r7, r3
 801354c:	4094      	lsls	r4, r2
 801354e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8013552:	0c23      	lsrs	r3, r4, #16
 8013554:	fbb8 f7fe 	udiv	r7, r8, lr
 8013558:	fa1f fc85 	uxth.w	ip, r5
 801355c:	fb0e 8817 	mls	r8, lr, r7, r8
 8013560:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8013564:	fb07 f10c 	mul.w	r1, r7, ip
 8013568:	4299      	cmp	r1, r3
 801356a:	d909      	bls.n	8013580 <__udivmoddi4+0x60>
 801356c:	18eb      	adds	r3, r5, r3
 801356e:	f107 30ff 	add.w	r0, r7, #4294967295
 8013572:	f080 811b 	bcs.w	80137ac <__udivmoddi4+0x28c>
 8013576:	4299      	cmp	r1, r3
 8013578:	f240 8118 	bls.w	80137ac <__udivmoddi4+0x28c>
 801357c:	3f02      	subs	r7, #2
 801357e:	442b      	add	r3, r5
 8013580:	1a5b      	subs	r3, r3, r1
 8013582:	b2a4      	uxth	r4, r4
 8013584:	fbb3 f0fe 	udiv	r0, r3, lr
 8013588:	fb0e 3310 	mls	r3, lr, r0, r3
 801358c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8013590:	fb00 fc0c 	mul.w	ip, r0, ip
 8013594:	45a4      	cmp	ip, r4
 8013596:	d909      	bls.n	80135ac <__udivmoddi4+0x8c>
 8013598:	192c      	adds	r4, r5, r4
 801359a:	f100 33ff 	add.w	r3, r0, #4294967295
 801359e:	f080 8107 	bcs.w	80137b0 <__udivmoddi4+0x290>
 80135a2:	45a4      	cmp	ip, r4
 80135a4:	f240 8104 	bls.w	80137b0 <__udivmoddi4+0x290>
 80135a8:	3802      	subs	r0, #2
 80135aa:	442c      	add	r4, r5
 80135ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80135b0:	eba4 040c 	sub.w	r4, r4, ip
 80135b4:	2700      	movs	r7, #0
 80135b6:	b11e      	cbz	r6, 80135c0 <__udivmoddi4+0xa0>
 80135b8:	40d4      	lsrs	r4, r2
 80135ba:	2300      	movs	r3, #0
 80135bc:	e9c6 4300 	strd	r4, r3, [r6]
 80135c0:	4639      	mov	r1, r7
 80135c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135c6:	428b      	cmp	r3, r1
 80135c8:	d909      	bls.n	80135de <__udivmoddi4+0xbe>
 80135ca:	2e00      	cmp	r6, #0
 80135cc:	f000 80eb 	beq.w	80137a6 <__udivmoddi4+0x286>
 80135d0:	2700      	movs	r7, #0
 80135d2:	e9c6 0100 	strd	r0, r1, [r6]
 80135d6:	4638      	mov	r0, r7
 80135d8:	4639      	mov	r1, r7
 80135da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135de:	fab3 f783 	clz	r7, r3
 80135e2:	2f00      	cmp	r7, #0
 80135e4:	d147      	bne.n	8013676 <__udivmoddi4+0x156>
 80135e6:	428b      	cmp	r3, r1
 80135e8:	d302      	bcc.n	80135f0 <__udivmoddi4+0xd0>
 80135ea:	4282      	cmp	r2, r0
 80135ec:	f200 80fa 	bhi.w	80137e4 <__udivmoddi4+0x2c4>
 80135f0:	1a84      	subs	r4, r0, r2
 80135f2:	eb61 0303 	sbc.w	r3, r1, r3
 80135f6:	2001      	movs	r0, #1
 80135f8:	4698      	mov	r8, r3
 80135fa:	2e00      	cmp	r6, #0
 80135fc:	d0e0      	beq.n	80135c0 <__udivmoddi4+0xa0>
 80135fe:	e9c6 4800 	strd	r4, r8, [r6]
 8013602:	e7dd      	b.n	80135c0 <__udivmoddi4+0xa0>
 8013604:	b902      	cbnz	r2, 8013608 <__udivmoddi4+0xe8>
 8013606:	deff      	udf	#255	; 0xff
 8013608:	fab2 f282 	clz	r2, r2
 801360c:	2a00      	cmp	r2, #0
 801360e:	f040 808f 	bne.w	8013730 <__udivmoddi4+0x210>
 8013612:	1b49      	subs	r1, r1, r5
 8013614:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8013618:	fa1f f885 	uxth.w	r8, r5
 801361c:	2701      	movs	r7, #1
 801361e:	fbb1 fcfe 	udiv	ip, r1, lr
 8013622:	0c23      	lsrs	r3, r4, #16
 8013624:	fb0e 111c 	mls	r1, lr, ip, r1
 8013628:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801362c:	fb08 f10c 	mul.w	r1, r8, ip
 8013630:	4299      	cmp	r1, r3
 8013632:	d907      	bls.n	8013644 <__udivmoddi4+0x124>
 8013634:	18eb      	adds	r3, r5, r3
 8013636:	f10c 30ff 	add.w	r0, ip, #4294967295
 801363a:	d202      	bcs.n	8013642 <__udivmoddi4+0x122>
 801363c:	4299      	cmp	r1, r3
 801363e:	f200 80cd 	bhi.w	80137dc <__udivmoddi4+0x2bc>
 8013642:	4684      	mov	ip, r0
 8013644:	1a59      	subs	r1, r3, r1
 8013646:	b2a3      	uxth	r3, r4
 8013648:	fbb1 f0fe 	udiv	r0, r1, lr
 801364c:	fb0e 1410 	mls	r4, lr, r0, r1
 8013650:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8013654:	fb08 f800 	mul.w	r8, r8, r0
 8013658:	45a0      	cmp	r8, r4
 801365a:	d907      	bls.n	801366c <__udivmoddi4+0x14c>
 801365c:	192c      	adds	r4, r5, r4
 801365e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013662:	d202      	bcs.n	801366a <__udivmoddi4+0x14a>
 8013664:	45a0      	cmp	r8, r4
 8013666:	f200 80b6 	bhi.w	80137d6 <__udivmoddi4+0x2b6>
 801366a:	4618      	mov	r0, r3
 801366c:	eba4 0408 	sub.w	r4, r4, r8
 8013670:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8013674:	e79f      	b.n	80135b6 <__udivmoddi4+0x96>
 8013676:	f1c7 0c20 	rsb	ip, r7, #32
 801367a:	40bb      	lsls	r3, r7
 801367c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8013680:	ea4e 0e03 	orr.w	lr, lr, r3
 8013684:	fa01 f407 	lsl.w	r4, r1, r7
 8013688:	fa20 f50c 	lsr.w	r5, r0, ip
 801368c:	fa21 f30c 	lsr.w	r3, r1, ip
 8013690:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8013694:	4325      	orrs	r5, r4
 8013696:	fbb3 f9f8 	udiv	r9, r3, r8
 801369a:	0c2c      	lsrs	r4, r5, #16
 801369c:	fb08 3319 	mls	r3, r8, r9, r3
 80136a0:	fa1f fa8e 	uxth.w	sl, lr
 80136a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80136a8:	fb09 f40a 	mul.w	r4, r9, sl
 80136ac:	429c      	cmp	r4, r3
 80136ae:	fa02 f207 	lsl.w	r2, r2, r7
 80136b2:	fa00 f107 	lsl.w	r1, r0, r7
 80136b6:	d90b      	bls.n	80136d0 <__udivmoddi4+0x1b0>
 80136b8:	eb1e 0303 	adds.w	r3, lr, r3
 80136bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80136c0:	f080 8087 	bcs.w	80137d2 <__udivmoddi4+0x2b2>
 80136c4:	429c      	cmp	r4, r3
 80136c6:	f240 8084 	bls.w	80137d2 <__udivmoddi4+0x2b2>
 80136ca:	f1a9 0902 	sub.w	r9, r9, #2
 80136ce:	4473      	add	r3, lr
 80136d0:	1b1b      	subs	r3, r3, r4
 80136d2:	b2ad      	uxth	r5, r5
 80136d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80136d8:	fb08 3310 	mls	r3, r8, r0, r3
 80136dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80136e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80136e4:	45a2      	cmp	sl, r4
 80136e6:	d908      	bls.n	80136fa <__udivmoddi4+0x1da>
 80136e8:	eb1e 0404 	adds.w	r4, lr, r4
 80136ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80136f0:	d26b      	bcs.n	80137ca <__udivmoddi4+0x2aa>
 80136f2:	45a2      	cmp	sl, r4
 80136f4:	d969      	bls.n	80137ca <__udivmoddi4+0x2aa>
 80136f6:	3802      	subs	r0, #2
 80136f8:	4474      	add	r4, lr
 80136fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80136fe:	fba0 8902 	umull	r8, r9, r0, r2
 8013702:	eba4 040a 	sub.w	r4, r4, sl
 8013706:	454c      	cmp	r4, r9
 8013708:	46c2      	mov	sl, r8
 801370a:	464b      	mov	r3, r9
 801370c:	d354      	bcc.n	80137b8 <__udivmoddi4+0x298>
 801370e:	d051      	beq.n	80137b4 <__udivmoddi4+0x294>
 8013710:	2e00      	cmp	r6, #0
 8013712:	d069      	beq.n	80137e8 <__udivmoddi4+0x2c8>
 8013714:	ebb1 050a 	subs.w	r5, r1, sl
 8013718:	eb64 0403 	sbc.w	r4, r4, r3
 801371c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8013720:	40fd      	lsrs	r5, r7
 8013722:	40fc      	lsrs	r4, r7
 8013724:	ea4c 0505 	orr.w	r5, ip, r5
 8013728:	e9c6 5400 	strd	r5, r4, [r6]
 801372c:	2700      	movs	r7, #0
 801372e:	e747      	b.n	80135c0 <__udivmoddi4+0xa0>
 8013730:	f1c2 0320 	rsb	r3, r2, #32
 8013734:	fa20 f703 	lsr.w	r7, r0, r3
 8013738:	4095      	lsls	r5, r2
 801373a:	fa01 f002 	lsl.w	r0, r1, r2
 801373e:	fa21 f303 	lsr.w	r3, r1, r3
 8013742:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8013746:	4338      	orrs	r0, r7
 8013748:	0c01      	lsrs	r1, r0, #16
 801374a:	fbb3 f7fe 	udiv	r7, r3, lr
 801374e:	fa1f f885 	uxth.w	r8, r5
 8013752:	fb0e 3317 	mls	r3, lr, r7, r3
 8013756:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801375a:	fb07 f308 	mul.w	r3, r7, r8
 801375e:	428b      	cmp	r3, r1
 8013760:	fa04 f402 	lsl.w	r4, r4, r2
 8013764:	d907      	bls.n	8013776 <__udivmoddi4+0x256>
 8013766:	1869      	adds	r1, r5, r1
 8013768:	f107 3cff 	add.w	ip, r7, #4294967295
 801376c:	d22f      	bcs.n	80137ce <__udivmoddi4+0x2ae>
 801376e:	428b      	cmp	r3, r1
 8013770:	d92d      	bls.n	80137ce <__udivmoddi4+0x2ae>
 8013772:	3f02      	subs	r7, #2
 8013774:	4429      	add	r1, r5
 8013776:	1acb      	subs	r3, r1, r3
 8013778:	b281      	uxth	r1, r0
 801377a:	fbb3 f0fe 	udiv	r0, r3, lr
 801377e:	fb0e 3310 	mls	r3, lr, r0, r3
 8013782:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8013786:	fb00 f308 	mul.w	r3, r0, r8
 801378a:	428b      	cmp	r3, r1
 801378c:	d907      	bls.n	801379e <__udivmoddi4+0x27e>
 801378e:	1869      	adds	r1, r5, r1
 8013790:	f100 3cff 	add.w	ip, r0, #4294967295
 8013794:	d217      	bcs.n	80137c6 <__udivmoddi4+0x2a6>
 8013796:	428b      	cmp	r3, r1
 8013798:	d915      	bls.n	80137c6 <__udivmoddi4+0x2a6>
 801379a:	3802      	subs	r0, #2
 801379c:	4429      	add	r1, r5
 801379e:	1ac9      	subs	r1, r1, r3
 80137a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80137a4:	e73b      	b.n	801361e <__udivmoddi4+0xfe>
 80137a6:	4637      	mov	r7, r6
 80137a8:	4630      	mov	r0, r6
 80137aa:	e709      	b.n	80135c0 <__udivmoddi4+0xa0>
 80137ac:	4607      	mov	r7, r0
 80137ae:	e6e7      	b.n	8013580 <__udivmoddi4+0x60>
 80137b0:	4618      	mov	r0, r3
 80137b2:	e6fb      	b.n	80135ac <__udivmoddi4+0x8c>
 80137b4:	4541      	cmp	r1, r8
 80137b6:	d2ab      	bcs.n	8013710 <__udivmoddi4+0x1f0>
 80137b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80137bc:	eb69 020e 	sbc.w	r2, r9, lr
 80137c0:	3801      	subs	r0, #1
 80137c2:	4613      	mov	r3, r2
 80137c4:	e7a4      	b.n	8013710 <__udivmoddi4+0x1f0>
 80137c6:	4660      	mov	r0, ip
 80137c8:	e7e9      	b.n	801379e <__udivmoddi4+0x27e>
 80137ca:	4618      	mov	r0, r3
 80137cc:	e795      	b.n	80136fa <__udivmoddi4+0x1da>
 80137ce:	4667      	mov	r7, ip
 80137d0:	e7d1      	b.n	8013776 <__udivmoddi4+0x256>
 80137d2:	4681      	mov	r9, r0
 80137d4:	e77c      	b.n	80136d0 <__udivmoddi4+0x1b0>
 80137d6:	3802      	subs	r0, #2
 80137d8:	442c      	add	r4, r5
 80137da:	e747      	b.n	801366c <__udivmoddi4+0x14c>
 80137dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80137e0:	442b      	add	r3, r5
 80137e2:	e72f      	b.n	8013644 <__udivmoddi4+0x124>
 80137e4:	4638      	mov	r0, r7
 80137e6:	e708      	b.n	80135fa <__udivmoddi4+0xda>
 80137e8:	4637      	mov	r7, r6
 80137ea:	e6e9      	b.n	80135c0 <__udivmoddi4+0xa0>

080137ec <__aeabi_idiv0>:
 80137ec:	4770      	bx	lr
 80137ee:	bf00      	nop

080137f0 <memcpy>:
 80137f0:	4684      	mov	ip, r0
 80137f2:	ea41 0300 	orr.w	r3, r1, r0
 80137f6:	f013 0303 	ands.w	r3, r3, #3
 80137fa:	d16d      	bne.n	80138d8 <memcpy+0xe8>
 80137fc:	3a40      	subs	r2, #64	; 0x40
 80137fe:	d341      	bcc.n	8013884 <memcpy+0x94>
 8013800:	f851 3b04 	ldr.w	r3, [r1], #4
 8013804:	f840 3b04 	str.w	r3, [r0], #4
 8013808:	f851 3b04 	ldr.w	r3, [r1], #4
 801380c:	f840 3b04 	str.w	r3, [r0], #4
 8013810:	f851 3b04 	ldr.w	r3, [r1], #4
 8013814:	f840 3b04 	str.w	r3, [r0], #4
 8013818:	f851 3b04 	ldr.w	r3, [r1], #4
 801381c:	f840 3b04 	str.w	r3, [r0], #4
 8013820:	f851 3b04 	ldr.w	r3, [r1], #4
 8013824:	f840 3b04 	str.w	r3, [r0], #4
 8013828:	f851 3b04 	ldr.w	r3, [r1], #4
 801382c:	f840 3b04 	str.w	r3, [r0], #4
 8013830:	f851 3b04 	ldr.w	r3, [r1], #4
 8013834:	f840 3b04 	str.w	r3, [r0], #4
 8013838:	f851 3b04 	ldr.w	r3, [r1], #4
 801383c:	f840 3b04 	str.w	r3, [r0], #4
 8013840:	f851 3b04 	ldr.w	r3, [r1], #4
 8013844:	f840 3b04 	str.w	r3, [r0], #4
 8013848:	f851 3b04 	ldr.w	r3, [r1], #4
 801384c:	f840 3b04 	str.w	r3, [r0], #4
 8013850:	f851 3b04 	ldr.w	r3, [r1], #4
 8013854:	f840 3b04 	str.w	r3, [r0], #4
 8013858:	f851 3b04 	ldr.w	r3, [r1], #4
 801385c:	f840 3b04 	str.w	r3, [r0], #4
 8013860:	f851 3b04 	ldr.w	r3, [r1], #4
 8013864:	f840 3b04 	str.w	r3, [r0], #4
 8013868:	f851 3b04 	ldr.w	r3, [r1], #4
 801386c:	f840 3b04 	str.w	r3, [r0], #4
 8013870:	f851 3b04 	ldr.w	r3, [r1], #4
 8013874:	f840 3b04 	str.w	r3, [r0], #4
 8013878:	f851 3b04 	ldr.w	r3, [r1], #4
 801387c:	f840 3b04 	str.w	r3, [r0], #4
 8013880:	3a40      	subs	r2, #64	; 0x40
 8013882:	d2bd      	bcs.n	8013800 <memcpy+0x10>
 8013884:	3230      	adds	r2, #48	; 0x30
 8013886:	d311      	bcc.n	80138ac <memcpy+0xbc>
 8013888:	f851 3b04 	ldr.w	r3, [r1], #4
 801388c:	f840 3b04 	str.w	r3, [r0], #4
 8013890:	f851 3b04 	ldr.w	r3, [r1], #4
 8013894:	f840 3b04 	str.w	r3, [r0], #4
 8013898:	f851 3b04 	ldr.w	r3, [r1], #4
 801389c:	f840 3b04 	str.w	r3, [r0], #4
 80138a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80138a4:	f840 3b04 	str.w	r3, [r0], #4
 80138a8:	3a10      	subs	r2, #16
 80138aa:	d2ed      	bcs.n	8013888 <memcpy+0x98>
 80138ac:	320c      	adds	r2, #12
 80138ae:	d305      	bcc.n	80138bc <memcpy+0xcc>
 80138b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80138b4:	f840 3b04 	str.w	r3, [r0], #4
 80138b8:	3a04      	subs	r2, #4
 80138ba:	d2f9      	bcs.n	80138b0 <memcpy+0xc0>
 80138bc:	3204      	adds	r2, #4
 80138be:	d008      	beq.n	80138d2 <memcpy+0xe2>
 80138c0:	07d2      	lsls	r2, r2, #31
 80138c2:	bf1c      	itt	ne
 80138c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80138c8:	f800 3b01 	strbne.w	r3, [r0], #1
 80138cc:	d301      	bcc.n	80138d2 <memcpy+0xe2>
 80138ce:	880b      	ldrh	r3, [r1, #0]
 80138d0:	8003      	strh	r3, [r0, #0]
 80138d2:	4660      	mov	r0, ip
 80138d4:	4770      	bx	lr
 80138d6:	bf00      	nop
 80138d8:	2a08      	cmp	r2, #8
 80138da:	d313      	bcc.n	8013904 <memcpy+0x114>
 80138dc:	078b      	lsls	r3, r1, #30
 80138de:	d08d      	beq.n	80137fc <memcpy+0xc>
 80138e0:	f010 0303 	ands.w	r3, r0, #3
 80138e4:	d08a      	beq.n	80137fc <memcpy+0xc>
 80138e6:	f1c3 0304 	rsb	r3, r3, #4
 80138ea:	1ad2      	subs	r2, r2, r3
 80138ec:	07db      	lsls	r3, r3, #31
 80138ee:	bf1c      	itt	ne
 80138f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80138f4:	f800 3b01 	strbne.w	r3, [r0], #1
 80138f8:	d380      	bcc.n	80137fc <memcpy+0xc>
 80138fa:	f831 3b02 	ldrh.w	r3, [r1], #2
 80138fe:	f820 3b02 	strh.w	r3, [r0], #2
 8013902:	e77b      	b.n	80137fc <memcpy+0xc>
 8013904:	3a04      	subs	r2, #4
 8013906:	d3d9      	bcc.n	80138bc <memcpy+0xcc>
 8013908:	3a01      	subs	r2, #1
 801390a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801390e:	f800 3b01 	strb.w	r3, [r0], #1
 8013912:	d2f9      	bcs.n	8013908 <memcpy+0x118>
 8013914:	780b      	ldrb	r3, [r1, #0]
 8013916:	7003      	strb	r3, [r0, #0]
 8013918:	784b      	ldrb	r3, [r1, #1]
 801391a:	7043      	strb	r3, [r0, #1]
 801391c:	788b      	ldrb	r3, [r1, #2]
 801391e:	7083      	strb	r3, [r0, #2]
 8013920:	4660      	mov	r0, ip
 8013922:	4770      	bx	lr
	...
 8013940:	eba2 0003 	sub.w	r0, r2, r3
 8013944:	4770      	bx	lr
 8013946:	bf00      	nop

08013948 <strcmp>:
 8013948:	7802      	ldrb	r2, [r0, #0]
 801394a:	780b      	ldrb	r3, [r1, #0]
 801394c:	2a01      	cmp	r2, #1
 801394e:	bf28      	it	cs
 8013950:	429a      	cmpcs	r2, r3
 8013952:	d1f5      	bne.n	8013940 <memcpy+0x150>
 8013954:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8013958:	ea40 0401 	orr.w	r4, r0, r1
 801395c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013960:	f06f 0c00 	mvn.w	ip, #0
 8013964:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8013968:	b312      	cbz	r2, 80139b0 <strcmp+0x68>
 801396a:	ea80 0401 	eor.w	r4, r0, r1
 801396e:	f014 0f07 	tst.w	r4, #7
 8013972:	d16a      	bne.n	8013a4a <strcmp+0x102>
 8013974:	f000 0407 	and.w	r4, r0, #7
 8013978:	f020 0007 	bic.w	r0, r0, #7
 801397c:	f004 0503 	and.w	r5, r4, #3
 8013980:	f021 0107 	bic.w	r1, r1, #7
 8013984:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8013988:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 801398c:	f014 0f04 	tst.w	r4, #4
 8013990:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8013994:	fa0c f405 	lsl.w	r4, ip, r5
 8013998:	ea62 0204 	orn	r2, r2, r4
 801399c:	ea66 0604 	orn	r6, r6, r4
 80139a0:	d00a      	beq.n	80139b8 <strcmp+0x70>
 80139a2:	ea63 0304 	orn	r3, r3, r4
 80139a6:	4662      	mov	r2, ip
 80139a8:	ea67 0704 	orn	r7, r7, r4
 80139ac:	4666      	mov	r6, ip
 80139ae:	e003      	b.n	80139b8 <strcmp+0x70>
 80139b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80139b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80139b8:	fa82 f54c 	uadd8	r5, r2, ip
 80139bc:	ea82 0406 	eor.w	r4, r2, r6
 80139c0:	faa4 f48c 	sel	r4, r4, ip
 80139c4:	bb6c      	cbnz	r4, 8013a22 <strcmp+0xda>
 80139c6:	fa83 f54c 	uadd8	r5, r3, ip
 80139ca:	ea83 0507 	eor.w	r5, r3, r7
 80139ce:	faa5 f58c 	sel	r5, r5, ip
 80139d2:	b995      	cbnz	r5, 80139fa <strcmp+0xb2>
 80139d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80139d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80139dc:	fa82 f54c 	uadd8	r5, r2, ip
 80139e0:	ea82 0406 	eor.w	r4, r2, r6
 80139e4:	faa4 f48c 	sel	r4, r4, ip
 80139e8:	fa83 f54c 	uadd8	r5, r3, ip
 80139ec:	ea83 0507 	eor.w	r5, r3, r7
 80139f0:	faa5 f58c 	sel	r5, r5, ip
 80139f4:	4325      	orrs	r5, r4
 80139f6:	d0db      	beq.n	80139b0 <strcmp+0x68>
 80139f8:	b99c      	cbnz	r4, 8013a22 <strcmp+0xda>
 80139fa:	ba2d      	rev	r5, r5
 80139fc:	fab5 f485 	clz	r4, r5
 8013a00:	f024 0407 	bic.w	r4, r4, #7
 8013a04:	fa27 f104 	lsr.w	r1, r7, r4
 8013a08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013a0c:	fa23 f304 	lsr.w	r3, r3, r4
 8013a10:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8013a14:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8013a18:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8013a1c:	eba0 0001 	sub.w	r0, r0, r1
 8013a20:	4770      	bx	lr
 8013a22:	ba24      	rev	r4, r4
 8013a24:	fab4 f484 	clz	r4, r4
 8013a28:	f024 0407 	bic.w	r4, r4, #7
 8013a2c:	fa26 f104 	lsr.w	r1, r6, r4
 8013a30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013a34:	fa22 f204 	lsr.w	r2, r2, r4
 8013a38:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8013a3c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8013a40:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8013a44:	eba0 0001 	sub.w	r0, r0, r1
 8013a48:	4770      	bx	lr
 8013a4a:	f014 0f03 	tst.w	r4, #3
 8013a4e:	d13c      	bne.n	8013aca <strcmp+0x182>
 8013a50:	f010 0403 	ands.w	r4, r0, #3
 8013a54:	d128      	bne.n	8013aa8 <strcmp+0x160>
 8013a56:	f850 2b08 	ldr.w	r2, [r0], #8
 8013a5a:	f851 3b08 	ldr.w	r3, [r1], #8
 8013a5e:	fa82 f54c 	uadd8	r5, r2, ip
 8013a62:	ea82 0503 	eor.w	r5, r2, r3
 8013a66:	faa5 f58c 	sel	r5, r5, ip
 8013a6a:	b95d      	cbnz	r5, 8013a84 <strcmp+0x13c>
 8013a6c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a74:	fa82 f54c 	uadd8	r5, r2, ip
 8013a78:	ea82 0503 	eor.w	r5, r2, r3
 8013a7c:	faa5 f58c 	sel	r5, r5, ip
 8013a80:	2d00      	cmp	r5, #0
 8013a82:	d0e8      	beq.n	8013a56 <strcmp+0x10e>
 8013a84:	ba2d      	rev	r5, r5
 8013a86:	fab5 f485 	clz	r4, r5
 8013a8a:	f024 0407 	bic.w	r4, r4, #7
 8013a8e:	fa23 f104 	lsr.w	r1, r3, r4
 8013a92:	fa22 f204 	lsr.w	r2, r2, r4
 8013a96:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8013a9a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8013a9e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8013aa2:	eba0 0001 	sub.w	r0, r0, r1
 8013aa6:	4770      	bx	lr
 8013aa8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8013aac:	f020 0003 	bic.w	r0, r0, #3
 8013ab0:	f850 2b08 	ldr.w	r2, [r0], #8
 8013ab4:	f021 0103 	bic.w	r1, r1, #3
 8013ab8:	f851 3b08 	ldr.w	r3, [r1], #8
 8013abc:	fa0c f404 	lsl.w	r4, ip, r4
 8013ac0:	ea62 0204 	orn	r2, r2, r4
 8013ac4:	ea63 0304 	orn	r3, r3, r4
 8013ac8:	e7c9      	b.n	8013a5e <strcmp+0x116>
 8013aca:	f010 0403 	ands.w	r4, r0, #3
 8013ace:	d01a      	beq.n	8013b06 <strcmp+0x1be>
 8013ad0:	eba1 0104 	sub.w	r1, r1, r4
 8013ad4:	f020 0003 	bic.w	r0, r0, #3
 8013ad8:	07e4      	lsls	r4, r4, #31
 8013ada:	f850 2b04 	ldr.w	r2, [r0], #4
 8013ade:	d006      	beq.n	8013aee <strcmp+0x1a6>
 8013ae0:	d20f      	bcs.n	8013b02 <strcmp+0x1ba>
 8013ae2:	788b      	ldrb	r3, [r1, #2]
 8013ae4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8013ae8:	1ae4      	subs	r4, r4, r3
 8013aea:	d106      	bne.n	8013afa <strcmp+0x1b2>
 8013aec:	b12b      	cbz	r3, 8013afa <strcmp+0x1b2>
 8013aee:	78cb      	ldrb	r3, [r1, #3]
 8013af0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8013af4:	1ae4      	subs	r4, r4, r3
 8013af6:	d100      	bne.n	8013afa <strcmp+0x1b2>
 8013af8:	b91b      	cbnz	r3, 8013b02 <strcmp+0x1ba>
 8013afa:	4620      	mov	r0, r4
 8013afc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8013b00:	4770      	bx	lr
 8013b02:	f101 0104 	add.w	r1, r1, #4
 8013b06:	f850 2b04 	ldr.w	r2, [r0], #4
 8013b0a:	07cc      	lsls	r4, r1, #31
 8013b0c:	f021 0103 	bic.w	r1, r1, #3
 8013b10:	f851 3b04 	ldr.w	r3, [r1], #4
 8013b14:	d848      	bhi.n	8013ba8 <strcmp+0x260>
 8013b16:	d224      	bcs.n	8013b62 <strcmp+0x21a>
 8013b18:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8013b1c:	fa82 f54c 	uadd8	r5, r2, ip
 8013b20:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8013b24:	faa5 f58c 	sel	r5, r5, ip
 8013b28:	d10a      	bne.n	8013b40 <strcmp+0x1f8>
 8013b2a:	b965      	cbnz	r5, 8013b46 <strcmp+0x1fe>
 8013b2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8013b30:	ea84 0402 	eor.w	r4, r4, r2
 8013b34:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8013b38:	d10e      	bne.n	8013b58 <strcmp+0x210>
 8013b3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8013b3e:	e7eb      	b.n	8013b18 <strcmp+0x1d0>
 8013b40:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8013b44:	e055      	b.n	8013bf2 <strcmp+0x2aa>
 8013b46:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8013b4a:	d14d      	bne.n	8013be8 <strcmp+0x2a0>
 8013b4c:	7808      	ldrb	r0, [r1, #0]
 8013b4e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8013b52:	f1c0 0000 	rsb	r0, r0, #0
 8013b56:	4770      	bx	lr
 8013b58:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8013b5c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8013b60:	e047      	b.n	8013bf2 <strcmp+0x2aa>
 8013b62:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8013b66:	fa82 f54c 	uadd8	r5, r2, ip
 8013b6a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8013b6e:	faa5 f58c 	sel	r5, r5, ip
 8013b72:	d10a      	bne.n	8013b8a <strcmp+0x242>
 8013b74:	b965      	cbnz	r5, 8013b90 <strcmp+0x248>
 8013b76:	f851 3b04 	ldr.w	r3, [r1], #4
 8013b7a:	ea84 0402 	eor.w	r4, r4, r2
 8013b7e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8013b82:	d10c      	bne.n	8013b9e <strcmp+0x256>
 8013b84:	f850 2b04 	ldr.w	r2, [r0], #4
 8013b88:	e7eb      	b.n	8013b62 <strcmp+0x21a>
 8013b8a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8013b8e:	e030      	b.n	8013bf2 <strcmp+0x2aa>
 8013b90:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8013b94:	d128      	bne.n	8013be8 <strcmp+0x2a0>
 8013b96:	880b      	ldrh	r3, [r1, #0]
 8013b98:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8013b9c:	e029      	b.n	8013bf2 <strcmp+0x2aa>
 8013b9e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8013ba2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8013ba6:	e024      	b.n	8013bf2 <strcmp+0x2aa>
 8013ba8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8013bac:	fa82 f54c 	uadd8	r5, r2, ip
 8013bb0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8013bb4:	faa5 f58c 	sel	r5, r5, ip
 8013bb8:	d10a      	bne.n	8013bd0 <strcmp+0x288>
 8013bba:	b965      	cbnz	r5, 8013bd6 <strcmp+0x28e>
 8013bbc:	f851 3b04 	ldr.w	r3, [r1], #4
 8013bc0:	ea84 0402 	eor.w	r4, r4, r2
 8013bc4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8013bc8:	d109      	bne.n	8013bde <strcmp+0x296>
 8013bca:	f850 2b04 	ldr.w	r2, [r0], #4
 8013bce:	e7eb      	b.n	8013ba8 <strcmp+0x260>
 8013bd0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8013bd4:	e00d      	b.n	8013bf2 <strcmp+0x2aa>
 8013bd6:	f015 0fff 	tst.w	r5, #255	; 0xff
 8013bda:	d105      	bne.n	8013be8 <strcmp+0x2a0>
 8013bdc:	680b      	ldr	r3, [r1, #0]
 8013bde:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8013be2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013be6:	e004      	b.n	8013bf2 <strcmp+0x2aa>
 8013be8:	f04f 0000 	mov.w	r0, #0
 8013bec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8013bf0:	4770      	bx	lr
 8013bf2:	ba12      	rev	r2, r2
 8013bf4:	ba1b      	rev	r3, r3
 8013bf6:	fa82 f44c 	uadd8	r4, r2, ip
 8013bfa:	ea82 0403 	eor.w	r4, r2, r3
 8013bfe:	faa4 f58c 	sel	r5, r4, ip
 8013c02:	fab5 f485 	clz	r4, r5
 8013c06:	fa02 f204 	lsl.w	r2, r2, r4
 8013c0a:	fa03 f304 	lsl.w	r3, r3, r4
 8013c0e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8013c12:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8013c16:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 8013c1a:	4770      	bx	lr
	...

08013c40 <strlen>:
 8013c40:	f890 f000 	pld	[r0]
 8013c44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8013c48:	f020 0107 	bic.w	r1, r0, #7
 8013c4c:	f06f 0c00 	mvn.w	ip, #0
 8013c50:	f010 0407 	ands.w	r4, r0, #7
 8013c54:	f891 f020 	pld	[r1, #32]
 8013c58:	f040 8049 	bne.w	8013cee <strlen+0xae>
 8013c5c:	f04f 0400 	mov.w	r4, #0
 8013c60:	f06f 0007 	mvn.w	r0, #7
 8013c64:	e9d1 2300 	ldrd	r2, r3, [r1]
 8013c68:	f891 f040 	pld	[r1, #64]	; 0x40
 8013c6c:	f100 0008 	add.w	r0, r0, #8
 8013c70:	fa82 f24c 	uadd8	r2, r2, ip
 8013c74:	faa4 f28c 	sel	r2, r4, ip
 8013c78:	fa83 f34c 	uadd8	r3, r3, ip
 8013c7c:	faa2 f38c 	sel	r3, r2, ip
 8013c80:	bb4b      	cbnz	r3, 8013cd6 <strlen+0x96>
 8013c82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8013c86:	fa82 f24c 	uadd8	r2, r2, ip
 8013c8a:	f100 0008 	add.w	r0, r0, #8
 8013c8e:	faa4 f28c 	sel	r2, r4, ip
 8013c92:	fa83 f34c 	uadd8	r3, r3, ip
 8013c96:	faa2 f38c 	sel	r3, r2, ip
 8013c9a:	b9e3      	cbnz	r3, 8013cd6 <strlen+0x96>
 8013c9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8013ca0:	fa82 f24c 	uadd8	r2, r2, ip
 8013ca4:	f100 0008 	add.w	r0, r0, #8
 8013ca8:	faa4 f28c 	sel	r2, r4, ip
 8013cac:	fa83 f34c 	uadd8	r3, r3, ip
 8013cb0:	faa2 f38c 	sel	r3, r2, ip
 8013cb4:	b97b      	cbnz	r3, 8013cd6 <strlen+0x96>
 8013cb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8013cba:	f101 0120 	add.w	r1, r1, #32
 8013cbe:	fa82 f24c 	uadd8	r2, r2, ip
 8013cc2:	f100 0008 	add.w	r0, r0, #8
 8013cc6:	faa4 f28c 	sel	r2, r4, ip
 8013cca:	fa83 f34c 	uadd8	r3, r3, ip
 8013cce:	faa2 f38c 	sel	r3, r2, ip
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d0c6      	beq.n	8013c64 <strlen+0x24>
 8013cd6:	2a00      	cmp	r2, #0
 8013cd8:	bf04      	itt	eq
 8013cda:	3004      	addeq	r0, #4
 8013cdc:	461a      	moveq	r2, r3
 8013cde:	ba12      	rev	r2, r2
 8013ce0:	fab2 f282 	clz	r2, r2
 8013ce4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8013ce8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8013cec:	4770      	bx	lr
 8013cee:	e9d1 2300 	ldrd	r2, r3, [r1]
 8013cf2:	f004 0503 	and.w	r5, r4, #3
 8013cf6:	f1c4 0000 	rsb	r0, r4, #0
 8013cfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8013cfe:	f014 0f04 	tst.w	r4, #4
 8013d02:	f891 f040 	pld	[r1, #64]	; 0x40
 8013d06:	fa0c f505 	lsl.w	r5, ip, r5
 8013d0a:	ea62 0205 	orn	r2, r2, r5
 8013d0e:	bf1c      	itt	ne
 8013d10:	ea63 0305 	ornne	r3, r3, r5
 8013d14:	4662      	movne	r2, ip
 8013d16:	f04f 0400 	mov.w	r4, #0
 8013d1a:	e7a9      	b.n	8013c70 <strlen+0x30>

08013d1c <memset>:
 8013d1c:	b4f0      	push	{r4, r5, r6, r7}
 8013d1e:	0786      	lsls	r6, r0, #30
 8013d20:	d043      	beq.n	8013daa <memset+0x8e>
 8013d22:	1e54      	subs	r4, r2, #1
 8013d24:	2a00      	cmp	r2, #0
 8013d26:	d03e      	beq.n	8013da6 <memset+0x8a>
 8013d28:	b2ca      	uxtb	r2, r1
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	e002      	b.n	8013d34 <memset+0x18>
 8013d2e:	f114 34ff 	adds.w	r4, r4, #4294967295
 8013d32:	d338      	bcc.n	8013da6 <memset+0x8a>
 8013d34:	f803 2b01 	strb.w	r2, [r3], #1
 8013d38:	079d      	lsls	r5, r3, #30
 8013d3a:	d1f8      	bne.n	8013d2e <memset+0x12>
 8013d3c:	2c03      	cmp	r4, #3
 8013d3e:	d92b      	bls.n	8013d98 <memset+0x7c>
 8013d40:	b2cd      	uxtb	r5, r1
 8013d42:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8013d46:	2c0f      	cmp	r4, #15
 8013d48:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8013d4c:	d916      	bls.n	8013d7c <memset+0x60>
 8013d4e:	f1a4 0710 	sub.w	r7, r4, #16
 8013d52:	093f      	lsrs	r7, r7, #4
 8013d54:	f103 0620 	add.w	r6, r3, #32
 8013d58:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8013d5c:	f103 0210 	add.w	r2, r3, #16
 8013d60:	e942 5504 	strd	r5, r5, [r2, #-16]
 8013d64:	e942 5502 	strd	r5, r5, [r2, #-8]
 8013d68:	3210      	adds	r2, #16
 8013d6a:	42b2      	cmp	r2, r6
 8013d6c:	d1f8      	bne.n	8013d60 <memset+0x44>
 8013d6e:	f004 040f 	and.w	r4, r4, #15
 8013d72:	3701      	adds	r7, #1
 8013d74:	2c03      	cmp	r4, #3
 8013d76:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8013d7a:	d90d      	bls.n	8013d98 <memset+0x7c>
 8013d7c:	461e      	mov	r6, r3
 8013d7e:	4622      	mov	r2, r4
 8013d80:	3a04      	subs	r2, #4
 8013d82:	2a03      	cmp	r2, #3
 8013d84:	f846 5b04 	str.w	r5, [r6], #4
 8013d88:	d8fa      	bhi.n	8013d80 <memset+0x64>
 8013d8a:	1f22      	subs	r2, r4, #4
 8013d8c:	f022 0203 	bic.w	r2, r2, #3
 8013d90:	3204      	adds	r2, #4
 8013d92:	4413      	add	r3, r2
 8013d94:	f004 0403 	and.w	r4, r4, #3
 8013d98:	b12c      	cbz	r4, 8013da6 <memset+0x8a>
 8013d9a:	b2c9      	uxtb	r1, r1
 8013d9c:	441c      	add	r4, r3
 8013d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8013da2:	429c      	cmp	r4, r3
 8013da4:	d1fb      	bne.n	8013d9e <memset+0x82>
 8013da6:	bcf0      	pop	{r4, r5, r6, r7}
 8013da8:	4770      	bx	lr
 8013daa:	4614      	mov	r4, r2
 8013dac:	4603      	mov	r3, r0
 8013dae:	e7c5      	b.n	8013d3c <memset+0x20>

08013db0 <strcat>:
 8013db0:	0783      	lsls	r3, r0, #30
 8013db2:	b510      	push	{r4, lr}
 8013db4:	4604      	mov	r4, r0
 8013db6:	d110      	bne.n	8013dda <strcat+0x2a>
 8013db8:	6802      	ldr	r2, [r0, #0]
 8013dba:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8013dbe:	ea23 0302 	bic.w	r3, r3, r2
 8013dc2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8013dc6:	d108      	bne.n	8013dda <strcat+0x2a>
 8013dc8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8013dcc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8013dd0:	ea23 0302 	bic.w	r3, r3, r2
 8013dd4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8013dd8:	d0f6      	beq.n	8013dc8 <strcat+0x18>
 8013dda:	7803      	ldrb	r3, [r0, #0]
 8013ddc:	b11b      	cbz	r3, 8013de6 <strcat+0x36>
 8013dde:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d1fb      	bne.n	8013dde <strcat+0x2e>
 8013de6:	f000 f877 	bl	8013ed8 <strcpy>
 8013dea:	4620      	mov	r0, r4
 8013dec:	bd10      	pop	{r4, pc}
 8013dee:	bf00      	nop

08013df0 <strchr>:
 8013df0:	b2c9      	uxtb	r1, r1
 8013df2:	f000 0303 	and.w	r3, r0, #3
 8013df6:	2900      	cmp	r1, #0
 8013df8:	d043      	beq.n	8013e82 <strchr+0x92>
 8013dfa:	b17b      	cbz	r3, 8013e1c <strchr+0x2c>
 8013dfc:	7803      	ldrb	r3, [r0, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d067      	beq.n	8013ed2 <strchr+0xe2>
 8013e02:	4299      	cmp	r1, r3
 8013e04:	d03c      	beq.n	8013e80 <strchr+0x90>
 8013e06:	1c43      	adds	r3, r0, #1
 8013e08:	e005      	b.n	8013e16 <strchr+0x26>
 8013e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e0e:	2a00      	cmp	r2, #0
 8013e10:	d05d      	beq.n	8013ece <strchr+0xde>
 8013e12:	428a      	cmp	r2, r1
 8013e14:	d034      	beq.n	8013e80 <strchr+0x90>
 8013e16:	079a      	lsls	r2, r3, #30
 8013e18:	4618      	mov	r0, r3
 8013e1a:	d1f6      	bne.n	8013e0a <strchr+0x1a>
 8013e1c:	b470      	push	{r4, r5, r6}
 8013e1e:	6804      	ldr	r4, [r0, #0]
 8013e20:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8013e24:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8013e28:	ea86 0504 	eor.w	r5, r6, r4
 8013e2c:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 8013e30:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8013e34:	ea23 0305 	bic.w	r3, r3, r5
 8013e38:	ea22 0204 	bic.w	r2, r2, r4
 8013e3c:	4313      	orrs	r3, r2
 8013e3e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8013e42:	d10f      	bne.n	8013e64 <strchr+0x74>
 8013e44:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8013e48:	ea84 0506 	eor.w	r5, r4, r6
 8013e4c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8013e50:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 8013e54:	ea22 0205 	bic.w	r2, r2, r5
 8013e58:	ea23 0304 	bic.w	r3, r3, r4
 8013e5c:	4313      	orrs	r3, r2
 8013e5e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8013e62:	d0ef      	beq.n	8013e44 <strchr+0x54>
 8013e64:	7803      	ldrb	r3, [r0, #0]
 8013e66:	b143      	cbz	r3, 8013e7a <strchr+0x8a>
 8013e68:	4299      	cmp	r1, r3
 8013e6a:	d102      	bne.n	8013e72 <strchr+0x82>
 8013e6c:	e006      	b.n	8013e7c <strchr+0x8c>
 8013e6e:	428b      	cmp	r3, r1
 8013e70:	d004      	beq.n	8013e7c <strchr+0x8c>
 8013e72:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d1f9      	bne.n	8013e6e <strchr+0x7e>
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	bc70      	pop	{r4, r5, r6}
 8013e7e:	4770      	bx	lr
 8013e80:	4770      	bx	lr
 8013e82:	b15b      	cbz	r3, 8013e9c <strchr+0xac>
 8013e84:	7803      	ldrb	r3, [r0, #0]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d0fa      	beq.n	8013e80 <strchr+0x90>
 8013e8a:	1c43      	adds	r3, r0, #1
 8013e8c:	e003      	b.n	8013e96 <strchr+0xa6>
 8013e8e:	7802      	ldrb	r2, [r0, #0]
 8013e90:	3301      	adds	r3, #1
 8013e92:	2a00      	cmp	r2, #0
 8013e94:	d0f4      	beq.n	8013e80 <strchr+0x90>
 8013e96:	0799      	lsls	r1, r3, #30
 8013e98:	4618      	mov	r0, r3
 8013e9a:	d1f8      	bne.n	8013e8e <strchr+0x9e>
 8013e9c:	6802      	ldr	r2, [r0, #0]
 8013e9e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8013ea2:	ea23 0302 	bic.w	r3, r3, r2
 8013ea6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8013eaa:	d108      	bne.n	8013ebe <strchr+0xce>
 8013eac:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8013eb0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8013eb4:	ea23 0302 	bic.w	r3, r3, r2
 8013eb8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8013ebc:	d0f6      	beq.n	8013eac <strchr+0xbc>
 8013ebe:	7803      	ldrb	r3, [r0, #0]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d0dd      	beq.n	8013e80 <strchr+0x90>
 8013ec4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d1fb      	bne.n	8013ec4 <strchr+0xd4>
 8013ecc:	4770      	bx	lr
 8013ece:	4610      	mov	r0, r2
 8013ed0:	4770      	bx	lr
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	4770      	bx	lr
 8013ed6:	bf00      	nop

08013ed8 <strcpy>:
 8013ed8:	ea80 0201 	eor.w	r2, r0, r1
 8013edc:	4684      	mov	ip, r0
 8013ede:	f012 0f03 	tst.w	r2, #3
 8013ee2:	d14f      	bne.n	8013f84 <strcpy+0xac>
 8013ee4:	f011 0f03 	tst.w	r1, #3
 8013ee8:	d132      	bne.n	8013f50 <strcpy+0x78>
 8013eea:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8013eee:	f011 0f04 	tst.w	r1, #4
 8013ef2:	f851 3b04 	ldr.w	r3, [r1], #4
 8013ef6:	d00b      	beq.n	8013f10 <strcpy+0x38>
 8013ef8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8013efc:	439a      	bics	r2, r3
 8013efe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8013f02:	bf04      	itt	eq
 8013f04:	f84c 3b04 	streq.w	r3, [ip], #4
 8013f08:	f851 3b04 	ldreq.w	r3, [r1], #4
 8013f0c:	d116      	bne.n	8013f3c <strcpy+0x64>
 8013f0e:	bf00      	nop
 8013f10:	f851 4b04 	ldr.w	r4, [r1], #4
 8013f14:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8013f18:	439a      	bics	r2, r3
 8013f1a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8013f1e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8013f22:	d10b      	bne.n	8013f3c <strcpy+0x64>
 8013f24:	f84c 3b04 	str.w	r3, [ip], #4
 8013f28:	43a2      	bics	r2, r4
 8013f2a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8013f2e:	bf04      	itt	eq
 8013f30:	f851 3b04 	ldreq.w	r3, [r1], #4
 8013f34:	f84c 4b04 	streq.w	r4, [ip], #4
 8013f38:	d0ea      	beq.n	8013f10 <strcpy+0x38>
 8013f3a:	4623      	mov	r3, r4
 8013f3c:	f80c 3b01 	strb.w	r3, [ip], #1
 8013f40:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013f44:	ea4f 2333 	mov.w	r3, r3, ror #8
 8013f48:	d1f8      	bne.n	8013f3c <strcpy+0x64>
 8013f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f4e:	4770      	bx	lr
 8013f50:	f011 0f01 	tst.w	r1, #1
 8013f54:	d006      	beq.n	8013f64 <strcpy+0x8c>
 8013f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f5a:	f80c 2b01 	strb.w	r2, [ip], #1
 8013f5e:	2a00      	cmp	r2, #0
 8013f60:	bf08      	it	eq
 8013f62:	4770      	bxeq	lr
 8013f64:	f011 0f02 	tst.w	r1, #2
 8013f68:	d0bf      	beq.n	8013eea <strcpy+0x12>
 8013f6a:	f831 2b02 	ldrh.w	r2, [r1], #2
 8013f6e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8013f72:	bf16      	itet	ne
 8013f74:	f82c 2b02 	strhne.w	r2, [ip], #2
 8013f78:	f88c 2000 	strbeq.w	r2, [ip]
 8013f7c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8013f80:	d1b3      	bne.n	8013eea <strcpy+0x12>
 8013f82:	4770      	bx	lr
 8013f84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f88:	f80c 2b01 	strb.w	r2, [ip], #1
 8013f8c:	2a00      	cmp	r2, #0
 8013f8e:	d1f9      	bne.n	8013f84 <strcpy+0xac>
 8013f90:	4770      	bx	lr
 8013f92:	bf00      	nop

08013f94 <strncmp>:
 8013f94:	2a00      	cmp	r2, #0
 8013f96:	d041      	beq.n	801401c <strncmp+0x88>
 8013f98:	ea40 0301 	orr.w	r3, r0, r1
 8013f9c:	f013 0303 	ands.w	r3, r3, #3
 8013fa0:	b4f0      	push	{r4, r5, r6, r7}
 8013fa2:	d125      	bne.n	8013ff0 <strncmp+0x5c>
 8013fa4:	2a03      	cmp	r2, #3
 8013fa6:	d923      	bls.n	8013ff0 <strncmp+0x5c>
 8013fa8:	6804      	ldr	r4, [r0, #0]
 8013faa:	680d      	ldr	r5, [r1, #0]
 8013fac:	42ac      	cmp	r4, r5
 8013fae:	d11f      	bne.n	8013ff0 <strncmp+0x5c>
 8013fb0:	3a04      	subs	r2, #4
 8013fb2:	d035      	beq.n	8014020 <strncmp+0x8c>
 8013fb4:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8013fb8:	ea25 0404 	bic.w	r4, r5, r4
 8013fbc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8013fc0:	d131      	bne.n	8014026 <strncmp+0x92>
 8013fc2:	1d07      	adds	r7, r0, #4
 8013fc4:	1d0d      	adds	r5, r1, #4
 8013fc6:	e00d      	b.n	8013fe4 <strncmp+0x50>
 8013fc8:	f857 3b04 	ldr.w	r3, [r7], #4
 8013fcc:	680e      	ldr	r6, [r1, #0]
 8013fce:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8013fd2:	42b3      	cmp	r3, r6
 8013fd4:	ea24 0403 	bic.w	r4, r4, r3
 8013fd8:	d10a      	bne.n	8013ff0 <strncmp+0x5c>
 8013fda:	3a04      	subs	r2, #4
 8013fdc:	d020      	beq.n	8014020 <strncmp+0x8c>
 8013fde:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8013fe2:	d11d      	bne.n	8014020 <strncmp+0x8c>
 8013fe4:	2a03      	cmp	r2, #3
 8013fe6:	4629      	mov	r1, r5
 8013fe8:	4638      	mov	r0, r7
 8013fea:	f105 0504 	add.w	r5, r5, #4
 8013fee:	d8eb      	bhi.n	8013fc8 <strncmp+0x34>
 8013ff0:	7803      	ldrb	r3, [r0, #0]
 8013ff2:	780c      	ldrb	r4, [r1, #0]
 8013ff4:	429c      	cmp	r4, r3
 8013ff6:	f102 32ff 	add.w	r2, r2, #4294967295
 8013ffa:	d10c      	bne.n	8014016 <strncmp+0x82>
 8013ffc:	b182      	cbz	r2, 8014020 <strncmp+0x8c>
 8013ffe:	b914      	cbnz	r4, 8014006 <strncmp+0x72>
 8014000:	e00e      	b.n	8014020 <strncmp+0x8c>
 8014002:	b16a      	cbz	r2, 8014020 <strncmp+0x8c>
 8014004:	b17b      	cbz	r3, 8014026 <strncmp+0x92>
 8014006:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801400a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801400e:	42a3      	cmp	r3, r4
 8014010:	f102 32ff 	add.w	r2, r2, #4294967295
 8014014:	d0f5      	beq.n	8014002 <strncmp+0x6e>
 8014016:	1b18      	subs	r0, r3, r4
 8014018:	bcf0      	pop	{r4, r5, r6, r7}
 801401a:	4770      	bx	lr
 801401c:	4610      	mov	r0, r2
 801401e:	4770      	bx	lr
 8014020:	2000      	movs	r0, #0
 8014022:	bcf0      	pop	{r4, r5, r6, r7}
 8014024:	4770      	bx	lr
 8014026:	4618      	mov	r0, r3
 8014028:	e7f6      	b.n	8014018 <strncmp+0x84>
 801402a:	bf00      	nop

0801402c <strncpy>:
 801402c:	ea40 0301 	orr.w	r3, r0, r1
 8014030:	079b      	lsls	r3, r3, #30
 8014032:	b470      	push	{r4, r5, r6}
 8014034:	d12a      	bne.n	801408c <strncpy+0x60>
 8014036:	2a03      	cmp	r2, #3
 8014038:	d928      	bls.n	801408c <strncpy+0x60>
 801403a:	460c      	mov	r4, r1
 801403c:	4603      	mov	r3, r0
 801403e:	4621      	mov	r1, r4
 8014040:	f854 6b04 	ldr.w	r6, [r4], #4
 8014044:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 8014048:	ea25 0506 	bic.w	r5, r5, r6
 801404c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8014050:	d106      	bne.n	8014060 <strncpy+0x34>
 8014052:	3a04      	subs	r2, #4
 8014054:	2a03      	cmp	r2, #3
 8014056:	f843 6b04 	str.w	r6, [r3], #4
 801405a:	4621      	mov	r1, r4
 801405c:	d8ef      	bhi.n	801403e <strncpy+0x12>
 801405e:	b19a      	cbz	r2, 8014088 <strncpy+0x5c>
 8014060:	780c      	ldrb	r4, [r1, #0]
 8014062:	701c      	strb	r4, [r3, #0]
 8014064:	3a01      	subs	r2, #1
 8014066:	3301      	adds	r3, #1
 8014068:	b13c      	cbz	r4, 801407a <strncpy+0x4e>
 801406a:	b16a      	cbz	r2, 8014088 <strncpy+0x5c>
 801406c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014070:	f803 4b01 	strb.w	r4, [r3], #1
 8014074:	3a01      	subs	r2, #1
 8014076:	2c00      	cmp	r4, #0
 8014078:	d1f7      	bne.n	801406a <strncpy+0x3e>
 801407a:	b12a      	cbz	r2, 8014088 <strncpy+0x5c>
 801407c:	441a      	add	r2, r3
 801407e:	2100      	movs	r1, #0
 8014080:	f803 1b01 	strb.w	r1, [r3], #1
 8014084:	4293      	cmp	r3, r2
 8014086:	d1fb      	bne.n	8014080 <strncpy+0x54>
 8014088:	bc70      	pop	{r4, r5, r6}
 801408a:	4770      	bx	lr
 801408c:	4603      	mov	r3, r0
 801408e:	e7e6      	b.n	801405e <strncpy+0x32>

08014090 <strpbrk>:
 8014090:	b430      	push	{r4, r5}
 8014092:	7804      	ldrb	r4, [r0, #0]
 8014094:	b1dc      	cbz	r4, 80140ce <strpbrk+0x3e>
 8014096:	780d      	ldrb	r5, [r1, #0]
 8014098:	b19d      	cbz	r5, 80140c2 <strpbrk+0x32>
 801409a:	42ac      	cmp	r4, r5
 801409c:	d00f      	beq.n	80140be <strpbrk+0x2e>
 801409e:	460a      	mov	r2, r1
 80140a0:	e001      	b.n	80140a6 <strpbrk+0x16>
 80140a2:	429c      	cmp	r4, r3
 80140a4:	d00b      	beq.n	80140be <strpbrk+0x2e>
 80140a6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d1f9      	bne.n	80140a2 <strpbrk+0x12>
 80140ae:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80140b2:	2c00      	cmp	r4, #0
 80140b4:	d1f0      	bne.n	8014098 <strpbrk+0x8>
 80140b6:	7813      	ldrb	r3, [r2, #0]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	bf08      	it	eq
 80140bc:	2000      	moveq	r0, #0
 80140be:	bc30      	pop	{r4, r5}
 80140c0:	4770      	bx	lr
 80140c2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80140c6:	460a      	mov	r2, r1
 80140c8:	2c00      	cmp	r4, #0
 80140ca:	d1e5      	bne.n	8014098 <strpbrk+0x8>
 80140cc:	e7f3      	b.n	80140b6 <strpbrk+0x26>
 80140ce:	4620      	mov	r0, r4
 80140d0:	e7f5      	b.n	80140be <strpbrk+0x2e>
 80140d2:	bf00      	nop

080140d4 <strspn>:
 80140d4:	b470      	push	{r4, r5, r6}
 80140d6:	7804      	ldrb	r4, [r0, #0]
 80140d8:	b1a4      	cbz	r4, 8014104 <strspn+0x30>
 80140da:	780d      	ldrb	r5, [r1, #0]
 80140dc:	4606      	mov	r6, r0
 80140de:	b14d      	cbz	r5, 80140f4 <strspn+0x20>
 80140e0:	42a5      	cmp	r5, r4
 80140e2:	d00a      	beq.n	80140fa <strspn+0x26>
 80140e4:	460a      	mov	r2, r1
 80140e6:	e001      	b.n	80140ec <strspn+0x18>
 80140e8:	42a3      	cmp	r3, r4
 80140ea:	d006      	beq.n	80140fa <strspn+0x26>
 80140ec:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d1f9      	bne.n	80140e8 <strspn+0x14>
 80140f4:	1b80      	subs	r0, r0, r6
 80140f6:	bc70      	pop	{r4, r5, r6}
 80140f8:	4770      	bx	lr
 80140fa:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80140fe:	2c00      	cmp	r4, #0
 8014100:	d1ed      	bne.n	80140de <strspn+0xa>
 8014102:	e7f7      	b.n	80140f4 <strspn+0x20>
 8014104:	4620      	mov	r0, r4
 8014106:	e7f6      	b.n	80140f6 <strspn+0x22>

08014108 <_strtoul_l.isra.0>:
 8014108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801410c:	460d      	mov	r5, r1
 801410e:	4607      	mov	r7, r0
 8014110:	4616      	mov	r6, r2
 8014112:	4698      	mov	r8, r3
 8014114:	468a      	mov	sl, r1
 8014116:	e000      	b.n	801411a <_strtoul_l.isra.0+0x12>
 8014118:	46a2      	mov	sl, r4
 801411a:	4654      	mov	r4, sl
 801411c:	9808      	ldr	r0, [sp, #32]
 801411e:	f814 9b01 	ldrb.w	r9, [r4], #1
 8014122:	f000 f8fd 	bl	8014320 <__locale_ctype_ptr_l>
 8014126:	4448      	add	r0, r9
 8014128:	7840      	ldrb	r0, [r0, #1]
 801412a:	f010 0008 	ands.w	r0, r0, #8
 801412e:	d1f3      	bne.n	8014118 <_strtoul_l.isra.0+0x10>
 8014130:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 8014134:	d05c      	beq.n	80141f0 <_strtoul_l.isra.0+0xe8>
 8014136:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 801413a:	bf0a      	itet	eq
 801413c:	f89a 1001 	ldrbeq.w	r1, [sl, #1]
 8014140:	4649      	movne	r1, r9
 8014142:	f10a 0402 	addeq.w	r4, sl, #2
 8014146:	f1b8 0f00 	cmp.w	r8, #0
 801414a:	d00c      	beq.n	8014166 <_strtoul_l.isra.0+0x5e>
 801414c:	f1b8 0f10 	cmp.w	r8, #16
 8014150:	d054      	beq.n	80141fc <_strtoul_l.isra.0+0xf4>
 8014152:	f04f 3eff 	mov.w	lr, #4294967295
 8014156:	fbbe fef8 	udiv	lr, lr, r8
 801415a:	fb08 fa0e 	mul.w	sl, r8, lr
 801415e:	ea6f 0a0a 	mvn.w	sl, sl
 8014162:	46c1      	mov	r9, r8
 8014164:	e008      	b.n	8014178 <_strtoul_l.isra.0+0x70>
 8014166:	2930      	cmp	r1, #48	; 0x30
 8014168:	d050      	beq.n	801420c <_strtoul_l.isra.0+0x104>
 801416a:	f04f 080a 	mov.w	r8, #10
 801416e:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8014250 <_strtoul_l.isra.0+0x148>
 8014172:	46c1      	mov	r9, r8
 8014174:	f04f 0a05 	mov.w	sl, #5
 8014178:	2300      	movs	r3, #0
 801417a:	469c      	mov	ip, r3
 801417c:	e007      	b.n	801418e <_strtoul_l.isra.0+0x86>
 801417e:	45f4      	cmp	ip, lr
 8014180:	d813      	bhi.n	80141aa <_strtoul_l.isra.0+0xa2>
 8014182:	d028      	beq.n	80141d6 <_strtoul_l.isra.0+0xce>
 8014184:	fb09 2c0c 	mla	ip, r9, ip, r2
 8014188:	2301      	movs	r3, #1
 801418a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801418e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014192:	2a09      	cmp	r2, #9
 8014194:	d905      	bls.n	80141a2 <_strtoul_l.isra.0+0x9a>
 8014196:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 801419a:	2a19      	cmp	r2, #25
 801419c:	d808      	bhi.n	80141b0 <_strtoul_l.isra.0+0xa8>
 801419e:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
 80141a2:	4590      	cmp	r8, r2
 80141a4:	dd0c      	ble.n	80141c0 <_strtoul_l.isra.0+0xb8>
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	dae9      	bge.n	801417e <_strtoul_l.isra.0+0x76>
 80141aa:	f04f 33ff 	mov.w	r3, #4294967295
 80141ae:	e7ec      	b.n	801418a <_strtoul_l.isra.0+0x82>
 80141b0:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 80141b4:	2a19      	cmp	r2, #25
 80141b6:	d803      	bhi.n	80141c0 <_strtoul_l.isra.0+0xb8>
 80141b8:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
 80141bc:	4590      	cmp	r8, r2
 80141be:	dcf2      	bgt.n	80141a6 <_strtoul_l.isra.0+0x9e>
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	db0d      	blt.n	80141e0 <_strtoul_l.isra.0+0xd8>
 80141c4:	b108      	cbz	r0, 80141ca <_strtoul_l.isra.0+0xc2>
 80141c6:	f1cc 0c00 	rsb	ip, ip, #0
 80141ca:	b10e      	cbz	r6, 80141d0 <_strtoul_l.isra.0+0xc8>
 80141cc:	b973      	cbnz	r3, 80141ec <_strtoul_l.isra.0+0xe4>
 80141ce:	6035      	str	r5, [r6, #0]
 80141d0:	4660      	mov	r0, ip
 80141d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141d6:	4552      	cmp	r2, sl
 80141d8:	ddd4      	ble.n	8014184 <_strtoul_l.isra.0+0x7c>
 80141da:	f04f 33ff 	mov.w	r3, #4294967295
 80141de:	e7d4      	b.n	801418a <_strtoul_l.isra.0+0x82>
 80141e0:	2322      	movs	r3, #34	; 0x22
 80141e2:	603b      	str	r3, [r7, #0]
 80141e4:	f04f 3cff 	mov.w	ip, #4294967295
 80141e8:	2e00      	cmp	r6, #0
 80141ea:	d0f1      	beq.n	80141d0 <_strtoul_l.isra.0+0xc8>
 80141ec:	1e65      	subs	r5, r4, #1
 80141ee:	e7ee      	b.n	80141ce <_strtoul_l.isra.0+0xc6>
 80141f0:	f10a 0402 	add.w	r4, sl, #2
 80141f4:	f89a 1001 	ldrb.w	r1, [sl, #1]
 80141f8:	2001      	movs	r0, #1
 80141fa:	e7a4      	b.n	8014146 <_strtoul_l.isra.0+0x3e>
 80141fc:	2930      	cmp	r1, #48	; 0x30
 80141fe:	d012      	beq.n	8014226 <_strtoul_l.isra.0+0x11e>
 8014200:	f04f 0a0f 	mov.w	sl, #15
 8014204:	f06f 4e70 	mvn.w	lr, #4026531840	; 0xf0000000
 8014208:	46c1      	mov	r9, r8
 801420a:	e7b5      	b.n	8014178 <_strtoul_l.isra.0+0x70>
 801420c:	7823      	ldrb	r3, [r4, #0]
 801420e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014212:	2b58      	cmp	r3, #88	; 0x58
 8014214:	d00c      	beq.n	8014230 <_strtoul_l.isra.0+0x128>
 8014216:	f04f 0808 	mov.w	r8, #8
 801421a:	46c1      	mov	r9, r8
 801421c:	f04f 0a07 	mov.w	sl, #7
 8014220:	f06f 4e60 	mvn.w	lr, #3758096384	; 0xe0000000
 8014224:	e7a8      	b.n	8014178 <_strtoul_l.isra.0+0x70>
 8014226:	7823      	ldrb	r3, [r4, #0]
 8014228:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801422c:	2b58      	cmp	r3, #88	; 0x58
 801422e:	d109      	bne.n	8014244 <_strtoul_l.isra.0+0x13c>
 8014230:	f04f 0910 	mov.w	r9, #16
 8014234:	7861      	ldrb	r1, [r4, #1]
 8014236:	46c8      	mov	r8, r9
 8014238:	f04f 0a0f 	mov.w	sl, #15
 801423c:	3402      	adds	r4, #2
 801423e:	f06f 4e70 	mvn.w	lr, #4026531840	; 0xf0000000
 8014242:	e799      	b.n	8014178 <_strtoul_l.isra.0+0x70>
 8014244:	46c1      	mov	r9, r8
 8014246:	f06f 4e70 	mvn.w	lr, #4026531840	; 0xf0000000
 801424a:	f04f 0a0f 	mov.w	sl, #15
 801424e:	e793      	b.n	8014178 <_strtoul_l.isra.0+0x70>
 8014250:	19999999 	.word	0x19999999

08014254 <_strtoul_r>:
 8014254:	b530      	push	{r4, r5, lr}
 8014256:	4c06      	ldr	r4, [pc, #24]	; (8014270 <_strtoul_r+0x1c>)
 8014258:	4d06      	ldr	r5, [pc, #24]	; (8014274 <_strtoul_r+0x20>)
 801425a:	6824      	ldr	r4, [r4, #0]
 801425c:	6b64      	ldr	r4, [r4, #52]	; 0x34
 801425e:	b083      	sub	sp, #12
 8014260:	2c00      	cmp	r4, #0
 8014262:	bf08      	it	eq
 8014264:	462c      	moveq	r4, r5
 8014266:	9400      	str	r4, [sp, #0]
 8014268:	f7ff ff4e 	bl	8014108 <_strtoul_l.isra.0>
 801426c:	b003      	add	sp, #12
 801426e:	bd30      	pop	{r4, r5, pc}
 8014270:	20001a7c 	.word	0x20001a7c
 8014274:	20001ea8 	.word	0x20001ea8

08014278 <strtoul_l>:
 8014278:	b510      	push	{r4, lr}
 801427a:	b082      	sub	sp, #8
 801427c:	4c05      	ldr	r4, [pc, #20]	; (8014294 <strtoul_l+0x1c>)
 801427e:	9300      	str	r3, [sp, #0]
 8014280:	6824      	ldr	r4, [r4, #0]
 8014282:	4613      	mov	r3, r2
 8014284:	460a      	mov	r2, r1
 8014286:	4601      	mov	r1, r0
 8014288:	4620      	mov	r0, r4
 801428a:	f7ff ff3d 	bl	8014108 <_strtoul_l.isra.0>
 801428e:	b002      	add	sp, #8
 8014290:	bd10      	pop	{r4, pc}
 8014292:	bf00      	nop
 8014294:	20001a7c 	.word	0x20001a7c

08014298 <strtoul>:
 8014298:	b530      	push	{r4, r5, lr}
 801429a:	4c08      	ldr	r4, [pc, #32]	; (80142bc <strtoul+0x24>)
 801429c:	4b08      	ldr	r3, [pc, #32]	; (80142c0 <strtoul+0x28>)
 801429e:	6825      	ldr	r5, [r4, #0]
 80142a0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 80142a2:	b083      	sub	sp, #12
 80142a4:	2c00      	cmp	r4, #0
 80142a6:	bf08      	it	eq
 80142a8:	461c      	moveq	r4, r3
 80142aa:	9400      	str	r4, [sp, #0]
 80142ac:	4613      	mov	r3, r2
 80142ae:	460a      	mov	r2, r1
 80142b0:	4601      	mov	r1, r0
 80142b2:	4628      	mov	r0, r5
 80142b4:	f7ff ff28 	bl	8014108 <_strtoul_l.isra.0>
 80142b8:	b003      	add	sp, #12
 80142ba:	bd30      	pop	{r4, r5, pc}
 80142bc:	20001a7c 	.word	0x20001a7c
 80142c0:	20001ea8 	.word	0x20001ea8

080142c4 <_setlocale_r>:
 80142c4:	b1b2      	cbz	r2, 80142f4 <_setlocale_r+0x30>
 80142c6:	b510      	push	{r4, lr}
 80142c8:	490b      	ldr	r1, [pc, #44]	; (80142f8 <_setlocale_r+0x34>)
 80142ca:	4610      	mov	r0, r2
 80142cc:	4614      	mov	r4, r2
 80142ce:	f7ff fb3b 	bl	8013948 <strcmp>
 80142d2:	b908      	cbnz	r0, 80142d8 <_setlocale_r+0x14>
 80142d4:	4809      	ldr	r0, [pc, #36]	; (80142fc <_setlocale_r+0x38>)
 80142d6:	bd10      	pop	{r4, pc}
 80142d8:	4908      	ldr	r1, [pc, #32]	; (80142fc <_setlocale_r+0x38>)
 80142da:	4620      	mov	r0, r4
 80142dc:	f7ff fb34 	bl	8013948 <strcmp>
 80142e0:	2800      	cmp	r0, #0
 80142e2:	d0f7      	beq.n	80142d4 <_setlocale_r+0x10>
 80142e4:	4620      	mov	r0, r4
 80142e6:	4906      	ldr	r1, [pc, #24]	; (8014300 <_setlocale_r+0x3c>)
 80142e8:	f7ff fb2e 	bl	8013948 <strcmp>
 80142ec:	2800      	cmp	r0, #0
 80142ee:	d0f1      	beq.n	80142d4 <_setlocale_r+0x10>
 80142f0:	2000      	movs	r0, #0
 80142f2:	bd10      	pop	{r4, pc}
 80142f4:	4801      	ldr	r0, [pc, #4]	; (80142fc <_setlocale_r+0x38>)
 80142f6:	4770      	bx	lr
 80142f8:	0801661c 	.word	0x0801661c
 80142fc:	08016618 	.word	0x08016618
 8014300:	08015ce8 	.word	0x08015ce8

08014304 <__locale_mb_cur_max>:
 8014304:	4b04      	ldr	r3, [pc, #16]	; (8014318 <__locale_mb_cur_max+0x14>)
 8014306:	4a05      	ldr	r2, [pc, #20]	; (801431c <__locale_mb_cur_max+0x18>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801430c:	2b00      	cmp	r3, #0
 801430e:	bf08      	it	eq
 8014310:	4613      	moveq	r3, r2
 8014312:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8014316:	4770      	bx	lr
 8014318:	20001a7c 	.word	0x20001a7c
 801431c:	20001ea8 	.word	0x20001ea8

08014320 <__locale_ctype_ptr_l>:
 8014320:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8014324:	4770      	bx	lr
 8014326:	bf00      	nop

08014328 <__locale_ctype_ptr>:
 8014328:	4b04      	ldr	r3, [pc, #16]	; (801433c <__locale_ctype_ptr+0x14>)
 801432a:	4a05      	ldr	r2, [pc, #20]	; (8014340 <__locale_ctype_ptr+0x18>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014330:	2b00      	cmp	r3, #0
 8014332:	bf08      	it	eq
 8014334:	4613      	moveq	r3, r2
 8014336:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801433a:	4770      	bx	lr
 801433c:	20001a7c 	.word	0x20001a7c
 8014340:	20001ea8 	.word	0x20001ea8

08014344 <setlocale>:
 8014344:	4b02      	ldr	r3, [pc, #8]	; (8014350 <setlocale+0xc>)
 8014346:	460a      	mov	r2, r1
 8014348:	4601      	mov	r1, r0
 801434a:	6818      	ldr	r0, [r3, #0]
 801434c:	f7ff bfba 	b.w	80142c4 <_setlocale_r>
 8014350:	20001a7c 	.word	0x20001a7c

08014354 <_mbtowc_r>:
 8014354:	b430      	push	{r4, r5}
 8014356:	4c06      	ldr	r4, [pc, #24]	; (8014370 <_mbtowc_r+0x1c>)
 8014358:	4d06      	ldr	r5, [pc, #24]	; (8014374 <_mbtowc_r+0x20>)
 801435a:	6824      	ldr	r4, [r4, #0]
 801435c:	6b64      	ldr	r4, [r4, #52]	; 0x34
 801435e:	2c00      	cmp	r4, #0
 8014360:	bf08      	it	eq
 8014362:	462c      	moveq	r4, r5
 8014364:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8014368:	46a4      	mov	ip, r4
 801436a:	bc30      	pop	{r4, r5}
 801436c:	4760      	bx	ip
 801436e:	bf00      	nop
 8014370:	20001a7c 	.word	0x20001a7c
 8014374:	20001ea8 	.word	0x20001ea8

08014378 <__ascii_mbtowc>:
 8014378:	b082      	sub	sp, #8
 801437a:	b149      	cbz	r1, 8014390 <__ascii_mbtowc+0x18>
 801437c:	b15a      	cbz	r2, 8014396 <__ascii_mbtowc+0x1e>
 801437e:	b16b      	cbz	r3, 801439c <__ascii_mbtowc+0x24>
 8014380:	7813      	ldrb	r3, [r2, #0]
 8014382:	600b      	str	r3, [r1, #0]
 8014384:	7812      	ldrb	r2, [r2, #0]
 8014386:	1c10      	adds	r0, r2, #0
 8014388:	bf18      	it	ne
 801438a:	2001      	movne	r0, #1
 801438c:	b002      	add	sp, #8
 801438e:	4770      	bx	lr
 8014390:	a901      	add	r1, sp, #4
 8014392:	2a00      	cmp	r2, #0
 8014394:	d1f3      	bne.n	801437e <__ascii_mbtowc+0x6>
 8014396:	4610      	mov	r0, r2
 8014398:	b002      	add	sp, #8
 801439a:	4770      	bx	lr
 801439c:	f06f 0001 	mvn.w	r0, #1
 80143a0:	e7f4      	b.n	801438c <__ascii_mbtowc+0x14>
 80143a2:	bf00      	nop

080143a4 <_wctomb_r>:
 80143a4:	b430      	push	{r4, r5}
 80143a6:	4c06      	ldr	r4, [pc, #24]	; (80143c0 <_wctomb_r+0x1c>)
 80143a8:	4d06      	ldr	r5, [pc, #24]	; (80143c4 <_wctomb_r+0x20>)
 80143aa:	6824      	ldr	r4, [r4, #0]
 80143ac:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80143ae:	2c00      	cmp	r4, #0
 80143b0:	bf08      	it	eq
 80143b2:	462c      	moveq	r4, r5
 80143b4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80143b8:	46a4      	mov	ip, r4
 80143ba:	bc30      	pop	{r4, r5}
 80143bc:	4760      	bx	ip
 80143be:	bf00      	nop
 80143c0:	20001a7c 	.word	0x20001a7c
 80143c4:	20001ea8 	.word	0x20001ea8

080143c8 <__ascii_wctomb>:
 80143c8:	b121      	cbz	r1, 80143d4 <__ascii_wctomb+0xc>
 80143ca:	2aff      	cmp	r2, #255	; 0xff
 80143cc:	d804      	bhi.n	80143d8 <__ascii_wctomb+0x10>
 80143ce:	700a      	strb	r2, [r1, #0]
 80143d0:	2001      	movs	r0, #1
 80143d2:	4770      	bx	lr
 80143d4:	4608      	mov	r0, r1
 80143d6:	4770      	bx	lr
 80143d8:	238a      	movs	r3, #138	; 0x8a
 80143da:	6003      	str	r3, [r0, #0]
 80143dc:	f04f 30ff 	mov.w	r0, #4294967295
 80143e0:	4770      	bx	lr
 80143e2:	bf00      	nop
