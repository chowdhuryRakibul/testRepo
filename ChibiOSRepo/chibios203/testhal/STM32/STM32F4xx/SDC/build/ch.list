
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08001a41 	.word	0x08001a41
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	080049d1 	.word	0x080049d1
 8000070:	08004981 	.word	0x08004981
 8000074:	08004931 	.word	0x08004931
 8000078:	080048e1 	.word	0x080048e1
 800007c:	080048a1 	.word	0x080048a1
 8000080:	08004851 	.word	0x08004851
 8000084:	08004801 	.word	0x08004801
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	080043e1 	.word	0x080043e1
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	080043b1 	.word	0x080043b1
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	080047b1 	.word	0x080047b1
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080044e1 	.word	0x080044e1
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	08004771 	.word	0x08004771
 8000124:	08004721 	.word	0x08004721
 8000128:	080046d1 	.word	0x080046d1
 800012c:	08004681 	.word	0x08004681
 8000130:	08004641 	.word	0x08004641
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	080045f1 	.word	0x080045f1
 8000154:	080045a1 	.word	0x080045a1
 8000158:	08004551 	.word	0x08004551
 800015c:	08004381 	.word	0x08004381
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f004 fc4c 	bl	8004aa0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f003 ff6a 	bl	80040e0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f004 fbde 	bl	8004a10 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f004 fc1c 	bl	8004a90 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f002 f99a 	bl	80025a0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f004 bc00 	b.w	8004a80 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	08005a60 	.word	0x08005a60
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 80002a0:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 80002a4:	200058e8 	.word	0x200058e8
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:
        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:

         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
_port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      _port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002d0:	f001 fbf6 	bl	8001ac0 <_dbg_check_unlock>
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d4:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d6:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002da:	4628      	mov	r0, r5
                blx     r4
 80002dc:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002de:	2000      	movs	r0, #0
                bl      chThdExit
 80002e0:	f001 ffc6 	bl	8002270 <chThdExit>

080002e4 <_zombies>:
_zombies:       b       _zombies
 80002e4:	e7fe      	b.n	80002e4 <_zombies>

080002e6 <_port_switch_from_isr>:
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 80002e6:	f001 fc13 	bl	8001b10 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 80002ea:	f001 fbb9 	bl	8001a60 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002ee:	f001 fbe7 	bl	8001ac0 <_dbg_check_unlock>

080002f2 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002f2:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002f4:	e7fe      	b.n	80002f4 <_port_exit_from_isr+0x2>
	...

080002f8 <memcpy>:
 80002f8:	4684      	mov	ip, r0
 80002fa:	ea41 0300 	orr.w	r3, r1, r0
 80002fe:	f013 0303 	ands.w	r3, r3, #3
 8000302:	d16d      	bne.n	80003e0 <memcpy+0xe8>
 8000304:	3a40      	subs	r2, #64	; 0x40
 8000306:	d341      	bcc.n	800038c <memcpy+0x94>
 8000308:	f851 3b04 	ldr.w	r3, [r1], #4
 800030c:	f840 3b04 	str.w	r3, [r0], #4
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	f851 3b04 	ldr.w	r3, [r1], #4
 8000324:	f840 3b04 	str.w	r3, [r0], #4
 8000328:	f851 3b04 	ldr.w	r3, [r1], #4
 800032c:	f840 3b04 	str.w	r3, [r0], #4
 8000330:	f851 3b04 	ldr.w	r3, [r1], #4
 8000334:	f840 3b04 	str.w	r3, [r0], #4
 8000338:	f851 3b04 	ldr.w	r3, [r1], #4
 800033c:	f840 3b04 	str.w	r3, [r0], #4
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	f851 3b04 	ldr.w	r3, [r1], #4
 800034c:	f840 3b04 	str.w	r3, [r0], #4
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	f851 3b04 	ldr.w	r3, [r1], #4
 800035c:	f840 3b04 	str.w	r3, [r0], #4
 8000360:	f851 3b04 	ldr.w	r3, [r1], #4
 8000364:	f840 3b04 	str.w	r3, [r0], #4
 8000368:	f851 3b04 	ldr.w	r3, [r1], #4
 800036c:	f840 3b04 	str.w	r3, [r0], #4
 8000370:	f851 3b04 	ldr.w	r3, [r1], #4
 8000374:	f840 3b04 	str.w	r3, [r0], #4
 8000378:	f851 3b04 	ldr.w	r3, [r1], #4
 800037c:	f840 3b04 	str.w	r3, [r0], #4
 8000380:	f851 3b04 	ldr.w	r3, [r1], #4
 8000384:	f840 3b04 	str.w	r3, [r0], #4
 8000388:	3a40      	subs	r2, #64	; 0x40
 800038a:	d2bd      	bcs.n	8000308 <memcpy+0x10>
 800038c:	3230      	adds	r2, #48	; 0x30
 800038e:	d311      	bcc.n	80003b4 <memcpy+0xbc>
 8000390:	f851 3b04 	ldr.w	r3, [r1], #4
 8000394:	f840 3b04 	str.w	r3, [r0], #4
 8000398:	f851 3b04 	ldr.w	r3, [r1], #4
 800039c:	f840 3b04 	str.w	r3, [r0], #4
 80003a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a4:	f840 3b04 	str.w	r3, [r0], #4
 80003a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ac:	f840 3b04 	str.w	r3, [r0], #4
 80003b0:	3a10      	subs	r2, #16
 80003b2:	d2ed      	bcs.n	8000390 <memcpy+0x98>
 80003b4:	320c      	adds	r2, #12
 80003b6:	d305      	bcc.n	80003c4 <memcpy+0xcc>
 80003b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003bc:	f840 3b04 	str.w	r3, [r0], #4
 80003c0:	3a04      	subs	r2, #4
 80003c2:	d2f9      	bcs.n	80003b8 <memcpy+0xc0>
 80003c4:	3204      	adds	r2, #4
 80003c6:	d008      	beq.n	80003da <memcpy+0xe2>
 80003c8:	07d2      	lsls	r2, r2, #31
 80003ca:	bf1c      	itt	ne
 80003cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003d0:	f800 3b01 	strbne.w	r3, [r0], #1
 80003d4:	d301      	bcc.n	80003da <memcpy+0xe2>
 80003d6:	880b      	ldrh	r3, [r1, #0]
 80003d8:	8003      	strh	r3, [r0, #0]
 80003da:	4660      	mov	r0, ip
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	2a08      	cmp	r2, #8
 80003e2:	d313      	bcc.n	800040c <memcpy+0x114>
 80003e4:	078b      	lsls	r3, r1, #30
 80003e6:	d08d      	beq.n	8000304 <memcpy+0xc>
 80003e8:	f010 0303 	ands.w	r3, r0, #3
 80003ec:	d08a      	beq.n	8000304 <memcpy+0xc>
 80003ee:	f1c3 0304 	rsb	r3, r3, #4
 80003f2:	1ad2      	subs	r2, r2, r3
 80003f4:	07db      	lsls	r3, r3, #31
 80003f6:	bf1c      	itt	ne
 80003f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000400:	d380      	bcc.n	8000304 <memcpy+0xc>
 8000402:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000406:	f820 3b02 	strh.w	r3, [r0], #2
 800040a:	e77b      	b.n	8000304 <memcpy+0xc>
 800040c:	3a04      	subs	r2, #4
 800040e:	d3d9      	bcc.n	80003c4 <memcpy+0xcc>
 8000410:	3a01      	subs	r2, #1
 8000412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000416:	f800 3b01 	strb.w	r3, [r0], #1
 800041a:	d2f9      	bcs.n	8000410 <memcpy+0x118>
 800041c:	780b      	ldrb	r3, [r1, #0]
 800041e:	7003      	strb	r3, [r0, #0]
 8000420:	784b      	ldrb	r3, [r1, #1]
 8000422:	7043      	strb	r3, [r0, #1]
 8000424:	788b      	ldrb	r3, [r1, #2]
 8000426:	7083      	strb	r3, [r0, #2]
 8000428:	4660      	mov	r0, ip
 800042a:	4770      	bx	lr
	...
 8000440:	eba2 0003 	sub.w	r0, r2, r3
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <strcmp>:
 8000448:	7802      	ldrb	r2, [r0, #0]
 800044a:	780b      	ldrb	r3, [r1, #0]
 800044c:	2a01      	cmp	r2, #1
 800044e:	bf28      	it	cs
 8000450:	429a      	cmpcs	r2, r3
 8000452:	d1f5      	bne.n	8000440 <memcpy+0x148>
 8000454:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000458:	ea40 0401 	orr.w	r4, r0, r1
 800045c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000460:	f06f 0c00 	mvn.w	ip, #0
 8000464:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000468:	b312      	cbz	r2, 80004b0 <strcmp+0x68>
 800046a:	ea80 0401 	eor.w	r4, r0, r1
 800046e:	f014 0f07 	tst.w	r4, #7
 8000472:	d16a      	bne.n	800054a <strcmp+0x102>
 8000474:	f000 0407 	and.w	r4, r0, #7
 8000478:	f020 0007 	bic.w	r0, r0, #7
 800047c:	f004 0503 	and.w	r5, r4, #3
 8000480:	f021 0107 	bic.w	r1, r1, #7
 8000484:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000488:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800048c:	f014 0f04 	tst.w	r4, #4
 8000490:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000494:	fa0c f405 	lsl.w	r4, ip, r5
 8000498:	ea62 0204 	orn	r2, r2, r4
 800049c:	ea66 0604 	orn	r6, r6, r4
 80004a0:	d00a      	beq.n	80004b8 <strcmp+0x70>
 80004a2:	ea63 0304 	orn	r3, r3, r4
 80004a6:	4662      	mov	r2, ip
 80004a8:	ea67 0704 	orn	r7, r7, r4
 80004ac:	4666      	mov	r6, ip
 80004ae:	e003      	b.n	80004b8 <strcmp+0x70>
 80004b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80004b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80004b8:	fa82 f54c 	uadd8	r5, r2, ip
 80004bc:	ea82 0406 	eor.w	r4, r2, r6
 80004c0:	faa4 f48c 	sel	r4, r4, ip
 80004c4:	bb6c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004c6:	fa83 f54c 	uadd8	r5, r3, ip
 80004ca:	ea83 0507 	eor.w	r5, r3, r7
 80004ce:	faa5 f58c 	sel	r5, r5, ip
 80004d2:	b995      	cbnz	r5, 80004fa <strcmp+0xb2>
 80004d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80004d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80004dc:	fa82 f54c 	uadd8	r5, r2, ip
 80004e0:	ea82 0406 	eor.w	r4, r2, r6
 80004e4:	faa4 f48c 	sel	r4, r4, ip
 80004e8:	fa83 f54c 	uadd8	r5, r3, ip
 80004ec:	ea83 0507 	eor.w	r5, r3, r7
 80004f0:	faa5 f58c 	sel	r5, r5, ip
 80004f4:	4325      	orrs	r5, r4
 80004f6:	d0db      	beq.n	80004b0 <strcmp+0x68>
 80004f8:	b99c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004fa:	ba2d      	rev	r5, r5
 80004fc:	fab5 f485 	clz	r4, r5
 8000500:	f024 0407 	bic.w	r4, r4, #7
 8000504:	fa27 f104 	lsr.w	r1, r7, r4
 8000508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800050c:	fa23 f304 	lsr.w	r3, r3, r4
 8000510:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000514:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000518:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800051c:	eba0 0001 	sub.w	r0, r0, r1
 8000520:	4770      	bx	lr
 8000522:	ba24      	rev	r4, r4
 8000524:	fab4 f484 	clz	r4, r4
 8000528:	f024 0407 	bic.w	r4, r4, #7
 800052c:	fa26 f104 	lsr.w	r1, r6, r4
 8000530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000534:	fa22 f204 	lsr.w	r2, r2, r4
 8000538:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800053c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000540:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000544:	eba0 0001 	sub.w	r0, r0, r1
 8000548:	4770      	bx	lr
 800054a:	f014 0f03 	tst.w	r4, #3
 800054e:	d13c      	bne.n	80005ca <strcmp+0x182>
 8000550:	f010 0403 	ands.w	r4, r0, #3
 8000554:	d128      	bne.n	80005a8 <strcmp+0x160>
 8000556:	f850 2b08 	ldr.w	r2, [r0], #8
 800055a:	f851 3b08 	ldr.w	r3, [r1], #8
 800055e:	fa82 f54c 	uadd8	r5, r2, ip
 8000562:	ea82 0503 	eor.w	r5, r2, r3
 8000566:	faa5 f58c 	sel	r5, r5, ip
 800056a:	b95d      	cbnz	r5, 8000584 <strcmp+0x13c>
 800056c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000574:	fa82 f54c 	uadd8	r5, r2, ip
 8000578:	ea82 0503 	eor.w	r5, r2, r3
 800057c:	faa5 f58c 	sel	r5, r5, ip
 8000580:	2d00      	cmp	r5, #0
 8000582:	d0e8      	beq.n	8000556 <strcmp+0x10e>
 8000584:	ba2d      	rev	r5, r5
 8000586:	fab5 f485 	clz	r4, r5
 800058a:	f024 0407 	bic.w	r4, r4, #7
 800058e:	fa23 f104 	lsr.w	r1, r3, r4
 8000592:	fa22 f204 	lsr.w	r2, r2, r4
 8000596:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800059a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800059e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80005a2:	eba0 0001 	sub.w	r0, r0, r1
 80005a6:	4770      	bx	lr
 80005a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80005ac:	f020 0003 	bic.w	r0, r0, #3
 80005b0:	f850 2b08 	ldr.w	r2, [r0], #8
 80005b4:	f021 0103 	bic.w	r1, r1, #3
 80005b8:	f851 3b08 	ldr.w	r3, [r1], #8
 80005bc:	fa0c f404 	lsl.w	r4, ip, r4
 80005c0:	ea62 0204 	orn	r2, r2, r4
 80005c4:	ea63 0304 	orn	r3, r3, r4
 80005c8:	e7c9      	b.n	800055e <strcmp+0x116>
 80005ca:	f010 0403 	ands.w	r4, r0, #3
 80005ce:	d01a      	beq.n	8000606 <strcmp+0x1be>
 80005d0:	eba1 0104 	sub.w	r1, r1, r4
 80005d4:	f020 0003 	bic.w	r0, r0, #3
 80005d8:	07e4      	lsls	r4, r4, #31
 80005da:	f850 2b04 	ldr.w	r2, [r0], #4
 80005de:	d006      	beq.n	80005ee <strcmp+0x1a6>
 80005e0:	d20f      	bcs.n	8000602 <strcmp+0x1ba>
 80005e2:	788b      	ldrb	r3, [r1, #2]
 80005e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	d106      	bne.n	80005fa <strcmp+0x1b2>
 80005ec:	b12b      	cbz	r3, 80005fa <strcmp+0x1b2>
 80005ee:	78cb      	ldrb	r3, [r1, #3]
 80005f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80005f4:	1ae4      	subs	r4, r4, r3
 80005f6:	d100      	bne.n	80005fa <strcmp+0x1b2>
 80005f8:	b91b      	cbnz	r3, 8000602 <strcmp+0x1ba>
 80005fa:	4620      	mov	r0, r4
 80005fc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000600:	4770      	bx	lr
 8000602:	f101 0104 	add.w	r1, r1, #4
 8000606:	f850 2b04 	ldr.w	r2, [r0], #4
 800060a:	07cc      	lsls	r4, r1, #31
 800060c:	f021 0103 	bic.w	r1, r1, #3
 8000610:	f851 3b04 	ldr.w	r3, [r1], #4
 8000614:	d848      	bhi.n	80006a8 <strcmp+0x260>
 8000616:	d224      	bcs.n	8000662 <strcmp+0x21a>
 8000618:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800061c:	fa82 f54c 	uadd8	r5, r2, ip
 8000620:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000624:	faa5 f58c 	sel	r5, r5, ip
 8000628:	d10a      	bne.n	8000640 <strcmp+0x1f8>
 800062a:	b965      	cbnz	r5, 8000646 <strcmp+0x1fe>
 800062c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000630:	ea84 0402 	eor.w	r4, r4, r2
 8000634:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000638:	d10e      	bne.n	8000658 <strcmp+0x210>
 800063a:	f850 2b04 	ldr.w	r2, [r0], #4
 800063e:	e7eb      	b.n	8000618 <strcmp+0x1d0>
 8000640:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000644:	e055      	b.n	80006f2 <strcmp+0x2aa>
 8000646:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800064a:	d14d      	bne.n	80006e8 <strcmp+0x2a0>
 800064c:	7808      	ldrb	r0, [r1, #0]
 800064e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000652:	f1c0 0000 	rsb	r0, r0, #0
 8000656:	4770      	bx	lr
 8000658:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800065c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000660:	e047      	b.n	80006f2 <strcmp+0x2aa>
 8000662:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000666:	fa82 f54c 	uadd8	r5, r2, ip
 800066a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800066e:	faa5 f58c 	sel	r5, r5, ip
 8000672:	d10a      	bne.n	800068a <strcmp+0x242>
 8000674:	b965      	cbnz	r5, 8000690 <strcmp+0x248>
 8000676:	f851 3b04 	ldr.w	r3, [r1], #4
 800067a:	ea84 0402 	eor.w	r4, r4, r2
 800067e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000682:	d10c      	bne.n	800069e <strcmp+0x256>
 8000684:	f850 2b04 	ldr.w	r2, [r0], #4
 8000688:	e7eb      	b.n	8000662 <strcmp+0x21a>
 800068a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800068e:	e030      	b.n	80006f2 <strcmp+0x2aa>
 8000690:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000694:	d128      	bne.n	80006e8 <strcmp+0x2a0>
 8000696:	880b      	ldrh	r3, [r1, #0]
 8000698:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800069c:	e029      	b.n	80006f2 <strcmp+0x2aa>
 800069e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80006a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 80006a6:	e024      	b.n	80006f2 <strcmp+0x2aa>
 80006a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80006ac:	fa82 f54c 	uadd8	r5, r2, ip
 80006b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 80006b4:	faa5 f58c 	sel	r5, r5, ip
 80006b8:	d10a      	bne.n	80006d0 <strcmp+0x288>
 80006ba:	b965      	cbnz	r5, 80006d6 <strcmp+0x28e>
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	ea84 0402 	eor.w	r4, r4, r2
 80006c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80006c8:	d109      	bne.n	80006de <strcmp+0x296>
 80006ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80006ce:	e7eb      	b.n	80006a8 <strcmp+0x260>
 80006d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80006d4:	e00d      	b.n	80006f2 <strcmp+0x2aa>
 80006d6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80006da:	d105      	bne.n	80006e8 <strcmp+0x2a0>
 80006dc:	680b      	ldr	r3, [r1, #0]
 80006de:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80006e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006e6:	e004      	b.n	80006f2 <strcmp+0x2aa>
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006f0:	4770      	bx	lr
 80006f2:	ba12      	rev	r2, r2
 80006f4:	ba1b      	rev	r3, r3
 80006f6:	fa82 f44c 	uadd8	r4, r2, ip
 80006fa:	ea82 0403 	eor.w	r4, r2, r3
 80006fe:	faa4 f58c 	sel	r5, r4, ip
 8000702:	fab5 f485 	clz	r4, r5
 8000706:	fa02 f204 	lsl.w	r2, r2, r4
 800070a:	fa03 f304 	lsl.w	r3, r3, r4
 800070e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000712:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000716:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800071a:	4770      	bx	lr
 800071c:	0000      	movs	r0, r0
	...

08000720 <sdObjectInit.constprop.0>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000720:	b4f0      	push	{r4, r5, r6, r7}

  sdp->vmt = &vmt;
 8000722:	4603      	mov	r3, r0
 8000724:	4a12      	ldr	r2, [pc, #72]	; (8000770 <sdObjectInit.constprop.0+0x50>)
 8000726:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800072a:	2201      	movs	r2, #1
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800072c:	2500      	movs	r5, #0
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800072e:	2710      	movs	r7, #16
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000730:	f100 0674 	add.w	r6, r0, #116	; 0x74
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000734:	f100 040c 	add.w	r4, r0, #12
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000738:	6043      	str	r3, [r0, #4]
  oqp->q_notify  = onfy;
 800073a:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_top     = bp + size;
 800073c:	f100 0364 	add.w	r3, r0, #100	; 0x64
  sdp->state = SD_STOP;
 8000740:	7202      	strb	r2, [r0, #8]
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000742:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000746:	f100 0254 	add.w	r2, r0, #84	; 0x54
  iqp->q_counter = 0;
 800074a:	6145      	str	r5, [r0, #20]
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 800074c:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_notify  = infy;
 8000750:	6285      	str	r5, [r0, #40]	; 0x28
  oqp->q_counter = size;
 8000752:	6387      	str	r7, [r0, #56]	; 0x38
  oqp->q_top     = bp + size;
 8000754:	6406      	str	r6, [r0, #64]	; 0x40
  iqp->q_wrptr   = bp;
 8000756:	e9c0 2208 	strd	r2, r2, [r0, #32]
}
 800075a:	bcf0      	pop	{r4, r5, r6, r7}
  oqp->q_wrptr   = bp;
 800075c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8000760:	e9c0 110c 	strd	r1, r1, [r0, #48]	; 0x30
  iqp->q_link    = link;
 8000764:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_link    = link;
 8000766:	6500      	str	r0, [r0, #80]	; 0x50
  iqp->q_buffer  = bp;
 8000768:	6182      	str	r2, [r0, #24]
  iqp->q_top     = bp + size;
 800076a:	61c3      	str	r3, [r0, #28]
  oqp->q_buffer  = bp;
 800076c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800076e:	4770      	bx	lr
 8000770:	08005a38 	.word	0x08005a38
	...

08000780 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000780:	4a02      	ldr	r2, [pc, #8]	; (800078c <notify2+0xc>)
 8000782:	68d3      	ldr	r3, [r2, #12]
 8000784:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000788:	60d3      	str	r3, [r2, #12]
}
 800078a:	4770      	bx	lr
 800078c:	40004400 	.word	0x40004400

08000790 <notify6>:

#if STM32_SERIAL_USE_USART6 || defined(__DOXYGEN__)
static void notify6(io_queue_t *qp) {

  (void)qp;
  USART6->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000790:	4a02      	ldr	r2, [pc, #8]	; (800079c <notify6+0xc>)
 8000792:	68d3      	ldr	r3, [r2, #12]
 8000794:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000798:	60d3      	str	r3, [r2, #12]
}
 800079a:	4770      	bx	lr
 800079c:	40011400 	.word	0x40011400

080007a0 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80007a0:	2320      	movs	r3, #32
 80007a2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <_port_irq_epilogue+0x3c>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80007ae:	d102      	bne.n	80007b6 <_port_irq_epilogue+0x16>
 80007b0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80007b4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80007b6:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 80007ba:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80007bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007c0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80007c2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80007c6:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <_port_irq_epilogue+0x40>)
 80007c8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 80007ca:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 80007cc:	6889      	ldr	r1, [r1, #8]
 80007ce:	6892      	ldr	r2, [r2, #8]
 80007d0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 80007d2:	bf8c      	ite	hi
 80007d4:	4a03      	ldrhi	r2, [pc, #12]	; (80007e4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 80007d6:	4a04      	ldrls	r2, [pc, #16]	; (80007e8 <_port_irq_epilogue+0x48>)
 80007d8:	619a      	str	r2, [r3, #24]
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00
 80007e0:	20004b48 	.word	0x20004b48
 80007e4:	080002e7 	.word	0x080002e7
 80007e8:	080002f2 	.word	0x080002f2
 80007ec:	00000000 	.word	0x00000000

080007f0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <chTMStopMeasurementX+0x40>)
 80007f4:	6852      	ldr	r2, [r2, #4]
 80007f6:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
  tmp->last = (now - tmp->last) - offset;
 80007fa:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80007fc:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 80007fe:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 8000800:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8000804:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000806:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8000808:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 800080a:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 800080c:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800080e:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 8000810:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8000812:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000814:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000818:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 800081a:	bf88      	it	hi
 800081c:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800081e:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000820:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8000824:	bf38      	it	cc
 8000826:	6003      	strcc	r3, [r0, #0]
}
 8000828:	bc30      	pop	{r4, r5}
 800082a:	4770      	bx	lr
 800082c:	e0001000 	.word	0xe0001000
 8000830:	20004b48 	.word	0x20004b48
	...

08000840 <chTMStartMeasurementX>:
 8000840:	4b01      	ldr	r3, [pc, #4]	; (8000848 <chTMStartMeasurementX+0x8>)
 8000842:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8000844:	6083      	str	r3, [r0, #8]
}
 8000846:	4770      	bx	lr
 8000848:	e0001000 	.word	0xe0001000
 800084c:	00000000 	.word	0x00000000

08000850 <trace_next>:
/**
 * @brief   Writes a time stamp and increases the trace buffer pointer.
 *
 * @notapi
 */
NOINLINE static void trace_next(void) {
 8000850:	b410      	push	{r4}

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <trace_next+0x30>)
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <trace_next+0x34>)
 8000856:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000858:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 800085c:	6819      	ldr	r1, [r3, #0]
 800085e:	6a64      	ldr	r4, [r4, #36]	; 0x24
  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000860:	605c      	str	r4, [r3, #4]
 8000862:	6840      	ldr	r0, [r0, #4]
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8000864:	f360 211f 	bfi	r1, r0, #8, #24
 8000868:	f843 1b10 	str.w	r1, [r3], #16
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 800086c:	f502 6104 	add.w	r1, r2, #2112	; 0x840
 8000870:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 8000872:	bf28      	it	cs
 8000874:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
  }
}
 8000878:	bc10      	pop	{r4}
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 800087a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20004b48 	.word	0x20004b48
 8000884:	e0001000 	.word	0xe0001000
	...

08000890 <_trace_switch.part.0>:
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8000890:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000894:	4905      	ldr	r1, [pc, #20]	; (80008ac <_trace_switch.part.0+0x1c>)
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8000896:	6a40      	ldr	r0, [r0, #36]	; 0x24
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8000898:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 80008a2:	698b      	ldr	r3, [r1, #24]
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 80008a4:	e9c2 3002 	strd	r3, r0, [r2, #8]
    trace_next();
 80008a8:	f7ff bfd2 	b.w	8000850 <trace_next>
 80008ac:	20004b48 	.word	0x20004b48

080008b0 <_trace_isr_leave>:
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80008b0:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <_trace_isr_leave+0x28>)
 80008b2:	8f13      	ldrh	r3, [r2, #56]	; 0x38
void _trace_isr_leave(const char *isr) {
 80008b4:	b510      	push	{r4, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80008b6:	f013 0402 	ands.w	r4, r3, #2
 80008ba:	d000      	beq.n	80008be <_trace_isr_leave+0xe>
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
    trace_next();
    port_unlock_from_isr();
  }
}
 80008bc:	bd10      	pop	{r4, pc}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80008be:	2320      	movs	r3, #32
 80008c0:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 80008c4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80008c6:	2203      	movs	r2, #3
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 80008c8:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 80008ca:	701a      	strb	r2, [r3, #0]
    trace_next();
 80008cc:	f7ff ffc0 	bl	8000850 <trace_next>
 80008d0:	f384 8811 	msr	BASEPRI, r4
}
 80008d4:	bd10      	pop	{r4, pc}
 80008d6:	bf00      	nop
 80008d8:	20004b48 	.word	0x20004b48
 80008dc:	00000000 	.word	0x00000000

080008e0 <_trace_isr_enter>:
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80008e0:	4a09      	ldr	r2, [pc, #36]	; (8000908 <_trace_isr_enter+0x28>)
 80008e2:	8f13      	ldrh	r3, [r2, #56]	; 0x38
void _trace_isr_enter(const char *isr) {
 80008e4:	b510      	push	{r4, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80008e6:	f013 0402 	ands.w	r4, r3, #2
 80008ea:	d000      	beq.n	80008ee <_trace_isr_enter+0xe>
}
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	2320      	movs	r3, #32
 80008f0:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 80008f4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80008f6:	2202      	movs	r2, #2
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 80008f8:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 80008fa:	701a      	strb	r2, [r3, #0]
    trace_next();
 80008fc:	f7ff ffa8 	bl	8000850 <trace_next>
 8000900:	f384 8811 	msr	BASEPRI, r4
}
 8000904:	bd10      	pop	{r4, pc}
 8000906:	bf00      	nop
 8000908:	20004b48 	.word	0x20004b48
 800090c:	00000000 	.word	0x00000000

08000910 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8000910:	b508      	push	{r3, lr}
 8000912:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
 *
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
 8000916:	4d06      	ldr	r5, [pc, #24]	; (8000930 <chSysHalt+0x20>)
 8000918:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 800091a:	075b      	lsls	r3, r3, #29
 800091c:	d501      	bpl.n	8000922 <chSysHalt+0x12>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 800091e:	62ec      	str	r4, [r5, #44]	; 0x2c

  /* Halt hook code, usually empty.*/
  CH_CFG_SYSTEM_HALT_HOOK(reason);

  /* Harmless infinite loop.*/
  while (true) {
 8000920:	e7fe      	b.n	8000920 <chSysHalt+0x10>
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 8000922:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000924:	2204      	movs	r2, #4
    ch.dbg.trace_buffer.ptr->state         = 0;
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
 8000926:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 8000928:	701a      	strb	r2, [r3, #0]
    trace_next();
 800092a:	f7ff ff91 	bl	8000850 <trace_next>
 800092e:	e7f6      	b.n	800091e <chSysHalt+0xe>
 8000930:	20004b48 	.word	0x20004b48
	...

08000940 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8000940:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <chDbgCheckClassS+0x18>)
 8000944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000946:	b91a      	cbnz	r2, 8000950 <chDbgCheckClassS+0x10>
 8000948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094a:	2b00      	cmp	r3, #0
 800094c:	dd00      	ble.n	8000950 <chDbgCheckClassS+0x10>
    chSysHalt("SV#11");
  }
}
 800094e:	bd08      	pop	{r3, pc}
    chSysHalt("SV#11");
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <chDbgCheckClassS+0x1c>)
 8000952:	f7ff ffdd 	bl	8000910 <chSysHalt>
 8000956:	bf00      	nop
 8000958:	20004b48 	.word	0x20004b48
 800095c:	08004cdc 	.word	0x08004cdc

08000960 <chDbgCheckClassI>:
void chDbgCheckClassI(void) {
 8000960:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <chDbgCheckClassI+0x18>)
 8000964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000966:	2a00      	cmp	r2, #0
 8000968:	db03      	blt.n	8000972 <chDbgCheckClassI+0x12>
 800096a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096c:	2b00      	cmp	r3, #0
 800096e:	dd00      	ble.n	8000972 <chDbgCheckClassI+0x12>
}
 8000970:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8000972:	4802      	ldr	r0, [pc, #8]	; (800097c <chDbgCheckClassI+0x1c>)
 8000974:	f7ff ffcc 	bl	8000910 <chSysHalt>
 8000978:	20004b48 	.word	0x20004b48
 800097c:	08004ce4 	.word	0x08004ce4

08000980 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 8000980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000982:	460d      	mov	r5, r1
 8000984:	4604      	mov	r4, r0
 8000986:	4616      	mov	r6, r2
  uint8_t *p, *prev;

  chDbgCheckClassI();
 8000988:	f7ff ffea 	bl	8000960 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800098c:	b185      	cbz	r5, 80009b0 <chCoreAllocFromTopI+0x30>
 800098e:	1e6b      	subs	r3, r5, #1
 8000990:	ea13 0705 	ands.w	r7, r3, r5
 8000994:	d10c      	bne.n	80009b0 <chCoreAllocFromTopI+0x30>

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000996:	4909      	ldr	r1, [pc, #36]	; (80009bc <chCoreAllocFromTopI+0x3c>)
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000998:	e9d1 2300 	ldrd	r2, r3, [r1]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 800099c:	426d      	negs	r5, r5
 800099e:	1b18      	subs	r0, r3, r4
 80009a0:	4028      	ands	r0, r5
  prev = p - offset;
 80009a2:	1b86      	subs	r6, r0, r6
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80009a4:	42b2      	cmp	r2, r6
 80009a6:	d806      	bhi.n	80009b6 <chCoreAllocFromTopI+0x36>
 80009a8:	42b3      	cmp	r3, r6
 80009aa:	d304      	bcc.n	80009b6 <chCoreAllocFromTopI+0x36>
    return NULL;
  }

  ch_memcore.topmem = prev;
 80009ac:	604e      	str	r6, [r1, #4]

  return p;
}
 80009ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <chCoreAllocFromTopI+0x40>)
 80009b2:	f7ff ffad 	bl	8000910 <chSysHalt>
    return NULL;
 80009b6:	4638      	mov	r0, r7
}
 80009b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200054f0 	.word	0x200054f0
 80009c0:	08005510 	.word	0x08005510
	...

080009d0 <chCoreAllocAlignedI>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f7ff bfd5 	b.w	8000980 <chCoreAllocFromTopI>
 80009d6:	bf00      	nop
	...

080009e0 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e2:	4604      	mov	r4, r0
  thread_t *tp;

  chDbgCheckClassI();
 80009e4:	f7ff ffbc 	bl	8000960 <chDbgCheckClassI>
  chDbgCheck(tdp != NULL);
  chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 80009e8:	6860      	ldr	r0, [r4, #4]
 80009ea:	0743      	lsls	r3, r0, #29
 80009ec:	d103      	bne.n	80009f6 <chThdCreateSuspendedI+0x16>
 80009ee:	68a3      	ldr	r3, [r4, #8]
 80009f0:	f013 0507 	ands.w	r5, r3, #7
 80009f4:	d002      	beq.n	80009fc <chThdCreateSuspendedI+0x1c>
 80009f6:	4820      	ldr	r0, [pc, #128]	; (8000a78 <chThdCreateSuspendedI+0x98>)
 80009f8:	f7ff ff8a 	bl	8000910 <chSysHalt>
 80009fc:	4298      	cmp	r0, r3
 80009fe:	d2fa      	bcs.n	80009f6 <chThdCreateSuspendedI+0x16>
 8000a00:	1a1a      	subs	r2, r3, r0
 8000a02:	2ac7      	cmp	r2, #199	; 0xc7
 8000a04:	d9f7      	bls.n	80009f6 <chThdCreateSuspendedI+0x16>
             MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
             (tdp->wend > tdp->wbase) &&
             (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
 8000a06:	68e1      	ldr	r1, [r4, #12]
 8000a08:	29ff      	cmp	r1, #255	; 0xff
 8000a0a:	d8f4      	bhi.n	80009f6 <chThdCreateSuspendedI+0x16>
 8000a0c:	6926      	ldr	r6, [r4, #16]
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d0f1      	beq.n	80009f6 <chThdCreateSuspendedI+0x16>
  REG_INSERT(tp);
 8000a12:	4a1a      	ldr	r2, [pc, #104]	; (8000a7c <chThdCreateSuspendedI+0x9c>)
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8000a14:	f843 0c2c 	str.w	r0, [r3, #-44]
  tp->state     = CH_STATE_WTSTART;
 8000a18:	f04f 0c02 	mov.w	ip, #2
  tp->refs      = (trefs_t)1;
 8000a1c:	2701      	movs	r7, #1

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8000a1e:	6820      	ldr	r0, [r4, #0]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000a20:	f843 6c6c 	str.w	r6, [r3, #-108]
 8000a24:	6966      	ldr	r6, [r4, #20]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000a26:	f803 5c27 	strb.w	r5, [r3, #-39]
  tp->refs      = (trefs_t)1;
 8000a2a:	f803 7c26 	strb.w	r7, [r3, #-38]
  tp->state     = CH_STATE_WTSTART;
 8000a2e:	f803 cc28 	strb.w	ip, [r3, #-40]
  REG_INSERT(tp);
 8000a32:	f843 2c38 	str.w	r2, [r3, #-56]
 8000a36:	6954      	ldr	r4, [r2, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000a38:	f843 6c68 	str.w	r6, [r3, #-104]
  tp->epending  = (eventmask_t)0;
 8000a3c:	e943 5505 	strd	r5, r5, [r3, #-20]
  tp->name      = name;
 8000a40:	f843 0c30 	str.w	r0, [r3, #-48]
  tp->prio      = prio;
 8000a44:	f843 1c40 	str.w	r1, [r3, #-64]
  tp->realprio  = prio;
 8000a48:	f843 1c0c 	str.w	r1, [r3, #-12]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000a4c:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  queue_init(&tp->msgqueue);
 8000a50:	f1a3 011c 	sub.w	r1, r3, #28
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000a54:	4e0a      	ldr	r6, [pc, #40]	; (8000a80 <chThdCreateSuspendedI+0xa0>)
  REG_INSERT(tp);
 8000a56:	f843 4c34 	str.w	r4, [r3, #-52]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000a5a:	f1a3 076c 	sub.w	r7, r3, #108	; 0x6c
  list_init(&tp->waiting);
 8000a5e:	f1a3 0520 	sub.w	r5, r3, #32
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000a62:	f843 7c3c 	str.w	r7, [r3, #-60]
 8000a66:	f843 6c4c 	str.w	r6, [r3, #-76]
  REG_INSERT(tp);
 8000a6a:	6120      	str	r0, [r4, #16]
 8000a6c:	6150      	str	r0, [r2, #20]
  tqp->next = (thread_t *)tqp;
 8000a6e:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8000a72:	f843 1c18 	str.w	r1, [r3, #-24]
}
 8000a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a78:	080054f8 	.word	0x080054f8
 8000a7c:	20004b48 	.word	0x20004b48
 8000a80:	080002d1 	.word	0x080002d1
	...

08000a90 <chSchReadyAheadI>:
thread_t *chSchReadyAheadI(thread_t *tp) {
 8000a90:	b510      	push	{r4, lr}
 8000a92:	4604      	mov	r4, r0
  chDbgCheckClassI();
 8000a94:	f7ff ff64 	bl	8000960 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000a98:	b1a4      	cbz	r4, 8000ac4 <chSchReadyAheadI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8000a9a:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000a9e:	b18b      	cbz	r3, 8000ac4 <chSchReadyAheadI+0x34>
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d00f      	beq.n	8000ac4 <chSchReadyAheadI+0x34>
  tp->state = CH_STATE_READY;
 8000aa4:	2200      	movs	r2, #0
  } while (cp->prio > tp->prio);
 8000aa6:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <chSchReadyAheadI+0x3c>)
  tp->state = CH_STATE_READY;
 8000aaa:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 8000aae:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	428a      	cmp	r2, r1
 8000ab4:	d8fb      	bhi.n	8000aae <chSchReadyAheadI+0x1e>
  tp->queue.prev             = cp->queue.prev;
 8000ab6:	685a      	ldr	r2, [r3, #4]
}
 8000ab8:	4620      	mov	r0, r4
  tp->queue.prev             = cp->queue.prev;
 8000aba:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8000abe:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000ac0:	605c      	str	r4, [r3, #4]
}
 8000ac2:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <chSchReadyAheadI+0x40>)
 8000ac6:	f7ff ff23 	bl	8000910 <chSysHalt>
 8000aca:	bf00      	nop
 8000acc:	20004b48 	.word	0x20004b48
 8000ad0:	080054e4 	.word	0x080054e4
	...

08000ae0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	4604      	mov	r4, r0
  chDbgCheckClassI();
 8000ae4:	f7ff ff3c 	bl	8000960 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000ae8:	b1a4      	cbz	r4, 8000b14 <chSchReadyI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8000aea:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000aee:	b18b      	cbz	r3, 8000b14 <chSchReadyI+0x34>
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d00f      	beq.n	8000b14 <chSchReadyI+0x34>
  tp->state = CH_STATE_READY;
 8000af4:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8000af6:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <chSchReadyI+0x3c>)
  tp->state = CH_STATE_READY;
 8000afa:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 8000afe:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	428a      	cmp	r2, r1
 8000b04:	d2fb      	bcs.n	8000afe <chSchReadyI+0x1e>
  tp->queue.prev             = cp->queue.prev;
 8000b06:	685a      	ldr	r2, [r3, #4]
}
 8000b08:	4620      	mov	r0, r4
  tp->queue.prev             = cp->queue.prev;
 8000b0a:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8000b0e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000b10:	605c      	str	r4, [r3, #4]
}
 8000b12:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <chSchReadyI+0x40>)
 8000b16:	f7ff fefb 	bl	8000910 <chSysHalt>
 8000b1a:	bf00      	nop
 8000b1c:	20004b48 	.word	0x20004b48
 8000b20:	080054c0 	.word	0x080054c0
	...

08000b30 <chThdDequeueNextI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8000b30:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8000b32:	6803      	ldr	r3, [r0, #0]

  if (queue_notempty(tqp)) {
 8000b34:	4298      	cmp	r0, r3
 8000b36:	d010      	beq.n	8000b5a <chThdDequeueNextI.constprop.0+0x2a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	6002      	str	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000b3c:	6050      	str	r0, [r2, #4]

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8000b3e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000b42:	2a04      	cmp	r2, #4
 8000b44:	d106      	bne.n	8000b54 <chThdDequeueNextI.constprop.0+0x24>

  tp->u.rdymsg = msg;
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000b4a:	4618      	mov	r0, r3
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8000b4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000b50:	f7ff bfc6 	b.w	8000ae0 <chSchReadyI>
  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8000b54:	4801      	ldr	r0, [pc, #4]	; (8000b5c <chThdDequeueNextI.constprop.0+0x2c>)
 8000b56:	f7ff fedb 	bl	8000910 <chSysHalt>
 8000b5a:	bd08      	pop	{r3, pc}
 8000b5c:	08005464 	.word	0x08005464

08000b60 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b64:	4607      	mov	r7, r0
 8000b66:	460e      	mov	r6, r1
  event_listener_t *elp;

  chDbgCheckClassI();
 8000b68:	f7ff fefa 	bl	8000960 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000b6c:	683c      	ldr	r4, [r7, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000b6e:	42a7      	cmp	r7, r4
 8000b70:	d01a      	beq.n	8000ba8 <chEvtBroadcastFlagsI+0x48>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000b72:	f04f 0800 	mov.w	r8, #0
    elp->flags |= flags;
 8000b76:	68e3      	ldr	r3, [r4, #12]
 8000b78:	4333      	orrs	r3, r6
 8000b7a:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000b7c:	b116      	cbz	r6, 8000b84 <chEvtBroadcastFlagsI+0x24>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000b7e:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000b80:	421e      	tst	r6, r3
 8000b82:	d00e      	beq.n	8000ba2 <chEvtBroadcastFlagsI+0x42>
      chEvtSignalI(elp->listener, elp->events);
 8000b84:	e9d4 5901 	ldrd	r5, r9, [r4, #4]
  chDbgCheckClassI();
 8000b88:	f7ff feea 	bl	8000960 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000b8c:	b30d      	cbz	r5, 8000bd2 <chEvtBroadcastFlagsI+0x72>
  tp->epending |= events;
 8000b8e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000b90:	f895 2020 	ldrb.w	r2, [r5, #32]
  tp->epending |= events;
 8000b94:	ea49 0303 	orr.w	r3, r9, r3
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000b98:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000b9a:	636b      	str	r3, [r5, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000b9c:	d006      	beq.n	8000bac <chEvtBroadcastFlagsI+0x4c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000b9e:	2a0b      	cmp	r2, #11
 8000ba0:	d00d      	beq.n	8000bbe <chEvtBroadcastFlagsI+0x5e>
    elp = elp->next;
 8000ba2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d1e6      	bne.n	8000b76 <chEvtBroadcastFlagsI+0x16>
}
 8000ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000bac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000bae:	4213      	tst	r3, r2
 8000bb0:	d0f7      	beq.n	8000ba2 <chEvtBroadcastFlagsI+0x42>
    tp->u.rdymsg = MSG_OK;
 8000bb2:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000bb6:	4628      	mov	r0, r5
 8000bb8:	f7ff ff92 	bl	8000ae0 <chSchReadyI>
 8000bbc:	e7f1      	b.n	8000ba2 <chEvtBroadcastFlagsI+0x42>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000bbe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000bc0:	ea32 0303 	bics.w	r3, r2, r3
 8000bc4:	d1ed      	bne.n	8000ba2 <chEvtBroadcastFlagsI+0x42>
    tp->u.rdymsg = MSG_OK;
 8000bc6:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000bca:	4628      	mov	r0, r5
 8000bcc:	f7ff ff88 	bl	8000ae0 <chSchReadyI>
 8000bd0:	e7e7      	b.n	8000ba2 <chEvtBroadcastFlagsI+0x42>
  chDbgCheck(tp != NULL);
 8000bd2:	4801      	ldr	r0, [pc, #4]	; (8000bd8 <chEvtBroadcastFlagsI+0x78>)
 8000bd4:	f7ff fe9c 	bl	8000910 <chSysHalt>
 8000bd8:	08005578 	.word	0x08005578
 8000bdc:	00000000 	.word	0x00000000

08000be0 <_dbg_check_leave_isr>:
void _dbg_check_leave_isr(void) {
 8000be0:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000be2:	2320      	movs	r3, #32
 8000be4:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000be8:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <_dbg_check_leave_isr+0x24>)
 8000bea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	dd01      	ble.n	8000bf4 <_dbg_check_leave_isr+0x14>
 8000bf0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000bf2:	b111      	cbz	r1, 8000bfa <_dbg_check_leave_isr+0x1a>
    chSysHalt("SV#9");
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <_dbg_check_leave_isr+0x28>)
 8000bf6:	f7ff fe8b 	bl	8000910 <chSysHalt>
  ch.dbg.isr_cnt--;
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	f381 8811 	msr	BASEPRI, r1
}
 8000c02:	bd08      	pop	{r3, pc}
 8000c04:	20004b48 	.word	0x20004b48
 8000c08:	08004cec 	.word	0x08004cec
 8000c0c:	00000000 	.word	0x00000000

08000c10 <_dbg_check_enter_isr>:
void _dbg_check_enter_isr(void) {
 8000c10:	b508      	push	{r3, lr}
 8000c12:	2320      	movs	r3, #32
 8000c14:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000c18:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <_dbg_check_enter_isr+0x24>)
 8000c1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db01      	blt.n	8000c24 <_dbg_check_enter_isr+0x14>
 8000c20:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000c22:	b111      	cbz	r1, 8000c2a <_dbg_check_enter_isr+0x1a>
    chSysHalt("SV#8");
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <_dbg_check_enter_isr+0x28>)
 8000c26:	f7ff fe73 	bl	8000910 <chSysHalt>
  ch.dbg.isr_cnt++;
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	f381 8811 	msr	BASEPRI, r1
}
 8000c32:	bd08      	pop	{r3, pc}
 8000c34:	20004b48 	.word	0x20004b48
 8000c38:	08004cf4 	.word	0x08004cf4
 8000c3c:	00000000 	.word	0x00000000

08000c40 <_dbg_check_unlock_from_isr>:
void _dbg_check_unlock_from_isr(void) {
 8000c40:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <_dbg_check_unlock_from_isr+0x1c>)
 8000c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c46:	2a00      	cmp	r2, #0
 8000c48:	dd05      	ble.n	8000c56 <_dbg_check_unlock_from_isr+0x16>
 8000c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	dd02      	ble.n	8000c56 <_dbg_check_unlock_from_isr+0x16>
  _dbg_leave_lock();
 8000c50:	2200      	movs	r2, #0
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c54:	bd08      	pop	{r3, pc}
    chSysHalt("SV#7");
 8000c56:	4802      	ldr	r0, [pc, #8]	; (8000c60 <_dbg_check_unlock_from_isr+0x20>)
 8000c58:	f7ff fe5a 	bl	8000910 <chSysHalt>
 8000c5c:	20004b48 	.word	0x20004b48
 8000c60:	08004cfc 	.word	0x08004cfc
	...

08000c70 <_dbg_check_lock_from_isr>:
void _dbg_check_lock_from_isr(void) {
 8000c70:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <_dbg_check_lock_from_isr+0x1c>)
 8000c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	dd01      	ble.n	8000c7e <_dbg_check_lock_from_isr+0xe>
 8000c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c7c:	b112      	cbz	r2, 8000c84 <_dbg_check_lock_from_isr+0x14>
    chSysHalt("SV#6");
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <_dbg_check_lock_from_isr+0x20>)
 8000c80:	f7ff fe46 	bl	8000910 <chSysHalt>
  _dbg_enter_lock();
 8000c84:	2201      	movs	r2, #1
 8000c86:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c88:	bd08      	pop	{r3, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20004b48 	.word	0x20004b48
 8000c90:	08004d04 	.word	0x08004d04
	...

08000ca0 <wakeup>:
static void wakeup(void *p) {
 8000ca0:	b538      	push	{r3, r4, r5, lr}
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8000caa:	f7ff ffe1 	bl	8000c70 <_dbg_check_lock_from_isr>
  switch (tp->state) {
 8000cae:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000cb2:	2b07      	cmp	r3, #7
 8000cb4:	d80f      	bhi.n	8000cd6 <wakeup+0x36>
 8000cb6:	e8df f003 	tbb	[pc, r3]
 8000cba:	0e14      	.short	0x0e14
 8000cbc:	040a1a0e 	.word	0x040a1a0e
 8000cc0:	0a0e      	.short	0x0a0e
    chSemFastSignalI(tp->u.wtsemp);
 8000cc2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8000cc4:	f7ff fe4c 	bl	8000960 <chDbgCheckClassI>

  sp->cnt++;
 8000cc8:	68ab      	ldr	r3, [r5, #8]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000cce:	e9d4 3200 	ldrd	r3, r2, [r4]
 8000cd2:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000cd4:	605a      	str	r2, [r3, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f7ff feff 	bl	8000ae0 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000ce2:	f7ff ffad 	bl	8000c40 <_dbg_check_unlock_from_isr>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f383 8811 	msr	BASEPRI, r3
}
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
    *tp->u.wttrp = NULL;
 8000cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
    break;
 8000cf4:	e7ef      	b.n	8000cd6 <wakeup+0x36>
 8000cf6:	bf00      	nop
	...

08000d00 <_idle_thread>:
}
 8000d00:	e7fe      	b.n	8000d00 <_idle_thread>
 8000d02:	bf00      	nop
	...

08000d10 <sdc_lld_is_write_protected>:
bool sdc_lld_sync(SDCDriver *sdcp) {

  /* CHTODO: Implement.*/
  (void)sdcp;
  return HAL_SUCCESS;
}
 8000d10:	2000      	movs	r0, #0
 8000d12:	4770      	bx	lr
	...

08000d20 <sdc_lld_is_card_inserted>:
 * @brief   SDC card detection.
 */
bool sdc_lld_is_card_inserted(SDCDriver *sdcp) {
  static bool last_status = false;

  if (blkIsTransferring(sdcp))
 8000d20:	7903      	ldrb	r3, [r0, #4]
 8000d22:	1eda      	subs	r2, r3, #3
 8000d24:	2a01      	cmp	r2, #1
 8000d26:	d909      	bls.n	8000d3c <sdc_lld_is_card_inserted+0x1c>
 8000d28:	3b06      	subs	r3, #6
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d906      	bls.n	8000d3c <sdc_lld_is_card_inserted+0x1c>
    return last_status;
  return last_status = (bool)palReadPad(GPIOC, GPIOC_SD_D3);
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <sdc_lld_is_card_inserted+0x24>)
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <sdc_lld_is_card_inserted+0x28>)
 8000d32:	6910      	ldr	r0, [r2, #16]
 8000d34:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 8000d38:	7018      	strb	r0, [r3, #0]
}
 8000d3a:	4770      	bx	lr
    return last_status;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <sdc_lld_is_card_inserted+0x28>)
 8000d3e:	7818      	ldrb	r0, [r3, #0]
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40020800 	.word	0x40020800
 8000d48:	20005598 	.word	0x20005598
 8000d4c:	00000000 	.word	0x00000000

08000d50 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 8000d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8000d54:	6f46      	ldr	r6, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8000d56:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 8000d5a:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8000d5c:	05df      	lsls	r7, r3, #23
static void serve_interrupt(SerialDriver *sdp) {
 8000d5e:	4605      	mov	r5, r0
  uint16_t sr = u->SR;
 8000d60:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8000d62:	d475      	bmi.n	8000e50 <serve_interrupt+0x100>
 8000d64:	2320      	movs	r3, #32
 8000d66:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8000d6a:	f7ff ff81 	bl	8000c70 <_dbg_check_lock_from_isr>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000d6e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000d72:	d049      	beq.n	8000e08 <serve_interrupt+0xb8>
  chnAddFlagsI(sdp, sts);
 8000d74:	1d2f      	adds	r7, r5, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8000d76:	f105 090c 	add.w	r9, r5, #12
 8000d7a:	e008      	b.n	8000d8e <serve_interrupt+0x3e>
    if (sr & USART_SR_RXNE)
 8000d7c:	06a3      	lsls	r3, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000d7e:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000d82:	d41e      	bmi.n	8000dc2 <serve_interrupt+0x72>
    sr = u->SR;
 8000d84:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000d86:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8000d8a:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000d8c:	d03c      	beq.n	8000e08 <serve_interrupt+0xb8>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000d8e:	0720      	lsls	r0, r4, #28
 8000d90:	d0f4      	beq.n	8000d7c <serve_interrupt+0x2c>
    sts |= SD_OVERRUN_ERROR;
 8000d92:	f014 0f08 	tst.w	r4, #8
 8000d96:	bf0c      	ite	eq
 8000d98:	2100      	moveq	r1, #0
 8000d9a:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8000d9c:	07e2      	lsls	r2, r4, #31
    sts |= SD_PARITY_ERROR;
 8000d9e:	bf48      	it	mi
 8000da0:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8000da4:	07a3      	lsls	r3, r4, #30
    sts |= SD_FRAMING_ERROR;
 8000da6:	bf48      	it	mi
 8000da8:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8000dac:	0760      	lsls	r0, r4, #29
    sts |= SD_NOISE_ERROR;
 8000dae:	bf48      	it	mi
 8000db0:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000db4:	4638      	mov	r0, r7
 8000db6:	f7ff fed3 	bl	8000b60 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8000dba:	06a3      	lsls	r3, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000dbc:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000dc0:	d5e0      	bpl.n	8000d84 <serve_interrupt+0x34>
  osalDbgCheckClassI();
 8000dc2:	f7ff fdcd 	bl	8000960 <chDbgCheckClassI>
  if (iqIsEmptyI(&sdp->iqueue))
 8000dc6:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8000dc8:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8000dcc:	b36b      	cbz	r3, 8000e2a <serve_interrupt+0xda>
  osalDbgCheckClassI();
 8000dce:	f7ff fdc7 	bl	8000960 <chDbgCheckClassI>
  if (!iqIsFullI(iqp)) {
 8000dd2:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d031      	beq.n	8000e3e <serve_interrupt+0xee>
    iqp->q_counter++;
 8000dda:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8000ddc:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8000dde:	3201      	adds	r2, #1
 8000de0:	ea04 0a0a 	and.w	sl, r4, sl
 8000de4:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8000de6:	6229      	str	r1, [r5, #32]
 8000de8:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 8000dec:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d301      	bcc.n	8000df8 <serve_interrupt+0xa8>
      iqp->q_wrptr = iqp->q_buffer;
 8000df4:	69ab      	ldr	r3, [r5, #24]
 8000df6:	622b      	str	r3, [r5, #32]
  chThdDequeueNextI(tqp, msg);
 8000df8:	4648      	mov	r0, r9
 8000dfa:	f7ff fe99 	bl	8000b30 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 8000dfe:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000e00:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8000e04:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000e06:	d1c2      	bne.n	8000d8e <serve_interrupt+0x3e>
  _dbg_check_unlock_from_isr();
 8000e08:	f7ff ff1a 	bl	8000c40 <_dbg_check_unlock_from_isr>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000e12:	f018 0f80 	tst.w	r8, #128	; 0x80
 8000e16:	d001      	beq.n	8000e1c <serve_interrupt+0xcc>
 8000e18:	0621      	lsls	r1, r4, #24
 8000e1a:	d42c      	bmi.n	8000e76 <serve_interrupt+0x126>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8000e1c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8000e20:	d001      	beq.n	8000e26 <serve_interrupt+0xd6>
 8000e22:	0662      	lsls	r2, r4, #25
 8000e24:	d44b      	bmi.n	8000ebe <serve_interrupt+0x16e>
}
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chEvtBroadcastFlagsI(esp, flags);
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	f7ff fe97 	bl	8000b60 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
 8000e32:	f7ff fd95 	bl	8000960 <chDbgCheckClassI>
  if (!iqIsFullI(iqp)) {
 8000e36:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d1cd      	bne.n	8000dda <serve_interrupt+0x8a>
 8000e3e:	696a      	ldr	r2, [r5, #20]
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d0ca      	beq.n	8000dda <serve_interrupt+0x8a>
 8000e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e48:	4638      	mov	r0, r7
 8000e4a:	f7ff fe89 	bl	8000b60 <chEvtBroadcastFlagsI>
 8000e4e:	e799      	b.n	8000d84 <serve_interrupt+0x34>
 8000e50:	2320      	movs	r3, #32
 8000e52:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8000e56:	f7ff ff0b 	bl	8000c70 <_dbg_check_lock_from_isr>
 8000e5a:	1d28      	adds	r0, r5, #4
 8000e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e60:	f7ff fe7e 	bl	8000b60 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8000e64:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8000e68:	6033      	str	r3, [r6, #0]
  _dbg_check_unlock_from_isr();
 8000e6a:	f7ff fee9 	bl	8000c40 <_dbg_check_unlock_from_isr>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f383 8811 	msr	BASEPRI, r3
 8000e74:	e776      	b.n	8000d64 <serve_interrupt+0x14>
 8000e76:	2320      	movs	r3, #32
 8000e78:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8000e7c:	f7ff fef8 	bl	8000c70 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();
 8000e80:	f7ff fd6e 	bl	8000960 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8000e84:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d028      	beq.n	8000ede <serve_interrupt+0x18e>
    uint8_t b;

    oqp->q_counter++;
 8000e8c:	6baa      	ldr	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 8000e8e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8000e90:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 8000e92:	3201      	adds	r2, #1
 8000e94:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8000e96:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8000e98:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8000e9a:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000e9c:	d301      	bcc.n	8000ea2 <serve_interrupt+0x152>
      oqp->q_rdptr = oqp->q_buffer;
 8000e9e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000ea0:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8000ea2:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000ea6:	f7ff fe43 	bl	8000b30 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 8000eaa:	6077      	str	r7, [r6, #4]
  _dbg_check_unlock_from_isr();
 8000eac:	f7ff fec8 	bl	8000c40 <_dbg_check_unlock_from_isr>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8000eb6:	f018 0f40 	tst.w	r8, #64	; 0x40
 8000eba:	d0b4      	beq.n	8000e26 <serve_interrupt+0xd6>
 8000ebc:	e7b1      	b.n	8000e22 <serve_interrupt+0xd2>
 8000ebe:	2320      	movs	r3, #32
 8000ec0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8000ec4:	f7ff fed4 	bl	8000c70 <_dbg_check_lock_from_isr>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000ec8:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d013      	beq.n	8000ef8 <serve_interrupt+0x1a8>
  _dbg_check_unlock_from_isr();
 8000ed0:	f7ff feb6 	bl	8000c40 <_dbg_check_unlock_from_isr>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f383 8811 	msr	BASEPRI, r3
}
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!oqIsEmptyI(oqp)) {
 8000ede:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	d0d3      	beq.n	8000e8c <serve_interrupt+0x13c>
  chEvtBroadcastFlagsI(esp, flags);
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	1d28      	adds	r0, r5, #4
 8000ee8:	f7ff fe3a 	bl	8000b60 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8000eec:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000ef0:	ea08 0303 	and.w	r3, r8, r3
 8000ef4:	60f3      	str	r3, [r6, #12]
 8000ef6:	e7d9      	b.n	8000eac <serve_interrupt+0x15c>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000ef8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0e8      	beq.n	8000ed0 <serve_interrupt+0x180>
 8000efe:	1d28      	adds	r0, r5, #4
 8000f00:	2110      	movs	r1, #16
 8000f02:	f7ff fe2d 	bl	8000b60 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000f06:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000f0a:	ea08 0303 	and.w	r3, r8, r3
 8000f0e:	60f3      	str	r3, [r6, #12]
 8000f10:	e7de      	b.n	8000ed0 <serve_interrupt+0x180>
 8000f12:	bf00      	nop
	...

08000f20 <sdc_lld_collect_errors.isra.0>:
  if (sta & SDIO_STA_CCRCFAIL)
 8000f20:	f001 0301 	and.w	r3, r1, #1
  if (sta & SDIO_STA_DCRCFAIL)
 8000f24:	078a      	lsls	r2, r1, #30
    errors |= SDC_DATA_CRC_ERROR;
 8000f26:	bf48      	it	mi
 8000f28:	f043 0302 	orrmi.w	r3, r3, #2
  if (sta & SDIO_STA_CTIMEOUT)
 8000f2c:	074a      	lsls	r2, r1, #29
    errors |= SDC_COMMAND_TIMEOUT;
 8000f2e:	bf48      	it	mi
 8000f30:	f043 0308 	orrmi.w	r3, r3, #8
  if (sta & SDIO_STA_DTIMEOUT)
 8000f34:	070a      	lsls	r2, r1, #28
    errors |= SDC_DATA_TIMEOUT;
 8000f36:	bf48      	it	mi
 8000f38:	f043 0304 	orrmi.w	r3, r3, #4
  if (sta & SDIO_STA_TXUNDERR)
 8000f3c:	06ca      	lsls	r2, r1, #27
    errors |= SDC_TX_UNDERRUN;
 8000f3e:	bf48      	it	mi
 8000f40:	f043 0310 	orrmi.w	r3, r3, #16
  if (sta & SDIO_STA_RXOVERR)
 8000f44:	068a      	lsls	r2, r1, #26
    errors |= SDC_RX_OVERRUN;
 8000f46:	bf48      	it	mi
 8000f48:	f043 0320 	orrmi.w	r3, r3, #32
  if (sta & SDIO_STA_STBITERR)
 8000f4c:	058a      	lsls	r2, r1, #22
  sdcp->errors |= errors;
 8000f4e:	6802      	ldr	r2, [r0, #0]
    errors |= SDC_STARTBIT_ERROR;
 8000f50:	bf48      	it	mi
 8000f52:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
  sdcp->errors |= errors;
 8000f56:	4313      	orrs	r3, r2
 8000f58:	6003      	str	r3, [r0, #0]
}
 8000f5a:	4770      	bx	lr
 8000f5c:	0000      	movs	r0, r0
	...

08000f60 <sdc_lld_send_cmd_long_crc>:
                               uint32_t *resp) {
 8000f60:	b510      	push	{r4, lr}
  sdcp->sdio->ARG = arg;
 8000f62:	6c84      	ldr	r4, [r0, #72]	; 0x48
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 8000f64:	f441 6198 	orr.w	r1, r1, #1216	; 0x4c0
  sdcp->sdio->ARG = arg;
 8000f68:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 8000f6a:	60e1      	str	r1, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8000f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f6e:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8000f72:	d0fb      	beq.n	8000f6c <sdc_lld_send_cmd_long_crc+0xc>
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8000f74:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((sta & (STM32_SDIO_STA_ERROR_MASK)) != 0) {
 8000f76:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
 8000f7a:	d109      	bne.n	8000f90 <sdc_lld_send_cmd_long_crc+0x30>
  *resp++ = sdcp->sdio->RESP4;
 8000f7c:	6a21      	ldr	r1, [r4, #32]
 8000f7e:	6019      	str	r1, [r3, #0]
  *resp++ = sdcp->sdio->RESP3;
 8000f80:	69e1      	ldr	r1, [r4, #28]
 8000f82:	6059      	str	r1, [r3, #4]
  *resp++ = sdcp->sdio->RESP2;
 8000f84:	69a1      	ldr	r1, [r4, #24]
 8000f86:	6099      	str	r1, [r3, #8]
  *resp   = sdcp->sdio->RESP1;
 8000f88:	6961      	ldr	r1, [r4, #20]
 8000f8a:	60d9      	str	r1, [r3, #12]
  return HAL_SUCCESS;
 8000f8c:	4610      	mov	r0, r2
}
 8000f8e:	bd10      	pop	{r4, pc}
    sdc_lld_collect_errors(sdcp, sta);
 8000f90:	3034      	adds	r0, #52	; 0x34
 8000f92:	f7ff ffc5 	bl	8000f20 <sdc_lld_collect_errors.isra.0>
    return HAL_FAILED;
 8000f96:	2001      	movs	r0, #1
}
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <sdc_lld_send_cmd_short_crc>:
                                uint32_t *resp) {
 8000fa0:	b510      	push	{r4, lr}
  sdcp->sdio->ARG = arg;
 8000fa2:	6c84      	ldr	r4, [r0, #72]	; 0x48
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8000fa4:	f441 6188 	orr.w	r1, r1, #1088	; 0x440
  sdcp->sdio->ARG = arg;
 8000fa8:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8000faa:	60e1      	str	r1, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8000fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000fae:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8000fb2:	d0fb      	beq.n	8000fac <sdc_lld_send_cmd_short_crc+0xc>
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8000fb4:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8000fb6:	f011 0205 	ands.w	r2, r1, #5
 8000fba:	d103      	bne.n	8000fc4 <sdc_lld_send_cmd_short_crc+0x24>
  *resp = sdcp->sdio->RESP1;
 8000fbc:	6961      	ldr	r1, [r4, #20]
 8000fbe:	6019      	str	r1, [r3, #0]
  return HAL_SUCCESS;
 8000fc0:	4610      	mov	r0, r2
}
 8000fc2:	bd10      	pop	{r4, pc}
    sdc_lld_collect_errors(sdcp, sta);
 8000fc4:	3034      	adds	r0, #52	; 0x34
 8000fc6:	f7ff ffab 	bl	8000f20 <sdc_lld_collect_errors.isra.0>
    return HAL_FAILED;
 8000fca:	2001      	movs	r0, #1
}
 8000fcc:	bd10      	pop	{r4, pc}
 8000fce:	bf00      	nop

08000fd0 <sdc_lld_error_cleanup>:
                                  uint32_t *resp) {
 8000fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sta = sdcp->sdio->STA;
 8000fd4:	e9d0 3711 	ldrd	r3, r7, [r0, #68]	; 0x44
                                  uint32_t *resp) {
 8000fd8:	4606      	mov	r6, r0
  dmaStreamDisable(sdcp->dma);
 8000fda:	e9d3 5c00 	ldrd	r5, ip, [r3]
  dmaStreamClearInterrupt(sdcp->dma);
 8000fde:	7a58      	ldrb	r0, [r3, #9]
  uint32_t sta = sdcp->sdio->STA;
 8000fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  dmaStreamClearInterrupt(sdcp->dma);
 8000fe2:	243d      	movs	r4, #61	; 0x3d
 8000fe4:	fa04 f000 	lsl.w	r0, r4, r0
 8000fe8:	f8cc 0000 	str.w	r0, [ip]
  dmaStreamDisable(sdcp->dma);
 8000fec:	682c      	ldr	r4, [r5, #0]
 8000fee:	f024 041f 	bic.w	r4, r4, #31
                                  uint32_t *resp) {
 8000ff2:	4688      	mov	r8, r1
 8000ff4:	4691      	mov	r9, r2
  dmaStreamDisable(sdcp->dma);
 8000ff6:	602c      	str	r4, [r5, #0]
 8000ff8:	682c      	ldr	r4, [r5, #0]
 8000ffa:	f014 0401 	ands.w	r4, r4, #1
 8000ffe:	d1fb      	bne.n	8000ff8 <sdc_lld_error_cleanup+0x28>
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <sdc_lld_error_cleanup+0x60>)
  dmaStreamDisable(sdcp->dma);
 8001002:	f8cc 0000 	str.w	r0, [ip]
  sdc_lld_collect_errors(sdcp, sta);
 8001006:	4619      	mov	r1, r3
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8001008:	63ba      	str	r2, [r7, #56]	; 0x38
  sdc_lld_collect_errors(sdcp, sta);
 800100a:	f106 0034 	add.w	r0, r6, #52	; 0x34
  sdcp->sdio->MASK  = 0;
 800100e:	63fc      	str	r4, [r7, #60]	; 0x3c
  sdcp->sdio->DCTRL = 0;
 8001010:	62fc      	str	r4, [r7, #44]	; 0x2c
  sdc_lld_collect_errors(sdcp, sta);
 8001012:	f7ff ff85 	bl	8000f20 <sdc_lld_collect_errors.isra.0>
  if (n > 1)
 8001016:	f1b8 0f01 	cmp.w	r8, #1
 800101a:	d801      	bhi.n	8001020 <sdc_lld_error_cleanup+0x50>
}
 800101c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8001020:	464b      	mov	r3, r9
 8001022:	4622      	mov	r2, r4
 8001024:	4630      	mov	r0, r6
 8001026:	210c      	movs	r1, #12
}
 8001028:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 800102c:	f7ff bfb8 	b.w	8000fa0 <sdc_lld_send_cmd_short_crc>
 8001030:	00c007ff 	.word	0x00c007ff
	...

08001040 <_ctl>:
static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8001040:	b508      	push	{r3, lr}
  osalDbgCheck(sdp != NULL);
 8001042:	b130      	cbz	r0, 8001052 <_ctl+0x12>
  switch (operation) {
 8001044:	b129      	cbz	r1, 8001052 <_ctl+0x12>
 8001046:	2901      	cmp	r1, #1
 8001048:	d001      	beq.n	800104e <_ctl+0xe>
}
 800104a:	2000      	movs	r0, #0
 800104c:	bd08      	pop	{r3, pc}
    osalDbgCheck(arg == NULL);
 800104e:	2a00      	cmp	r2, #0
 8001050:	d0fb      	beq.n	800104a <_ctl+0xa>
    osalDbgAssert(false, "invalid CTL operation");
 8001052:	4801      	ldr	r0, [pc, #4]	; (8001058 <_ctl+0x18>)
 8001054:	f7ff fc5c 	bl	8000910 <chSysHalt>
 8001058:	08005690 	.word	0x08005690
 800105c:	00000000 	.word	0x00000000

08001060 <sdcGetInfo>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdcGetInfo(SDCDriver *sdcp, BlockDeviceInfo *bdip) {
 8001060:	b508      	push	{r3, lr}

  osalDbgCheck((sdcp != NULL) && (bdip != NULL));
 8001062:	b160      	cbz	r0, 800107e <sdcGetInfo+0x1e>
 8001064:	b159      	cbz	r1, 800107e <sdcGetInfo+0x1e>

  if (sdcp->state != BLK_READY) {
 8001066:	7903      	ldrb	r3, [r0, #4]
 8001068:	2b05      	cmp	r3, #5
 800106a:	d106      	bne.n	800107a <sdcGetInfo+0x1a>
    return HAL_FAILED;
  }

  bdip->blk_num = sdcp->capacity;
 800106c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800106e:	604b      	str	r3, [r1, #4]
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 8001070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001074:	600b      	str	r3, [r1, #0]

  return HAL_SUCCESS;
 8001076:	2000      	movs	r0, #0
}
 8001078:	bd08      	pop	{r3, pc}
    return HAL_FAILED;
 800107a:	2001      	movs	r0, #1
}
 800107c:	bd08      	pop	{r3, pc}
  osalDbgCheck((sdcp != NULL) && (bdip != NULL));
 800107e:	4801      	ldr	r0, [pc, #4]	; (8001084 <sdcGetInfo+0x24>)
 8001080:	f7ff fc46 	bl	8000910 <chSysHalt>
 8001084:	080057e8 	.word	0x080057e8
	...

08001090 <sdcSync>:
  osalDbgCheck(sdcp != NULL);
 8001090:	b120      	cbz	r0, 800109c <sdcSync+0xc>
  if (sdcp->state != BLK_READY) {
 8001092:	7900      	ldrb	r0, [r0, #4]
}
 8001094:	3805      	subs	r0, #5
 8001096:	bf18      	it	ne
 8001098:	2001      	movne	r0, #1
 800109a:	4770      	bx	lr
bool sdcSync(SDCDriver *sdcp) {
 800109c:	b508      	push	{r3, lr}
  osalDbgCheck(sdcp != NULL);
 800109e:	4801      	ldr	r0, [pc, #4]	; (80010a4 <sdcSync+0x14>)
 80010a0:	f7ff fc36 	bl	8000910 <chSysHalt>
 80010a4:	080057e0 	.word	0x080057e0
	...

080010b0 <_mmcsd_get_slice>:
                          uint32_t end,
                          uint32_t start) {
  unsigned startidx, endidx, startoff;
  uint32_t endmask;

  osalDbgCheck((end >= start) && ((end - start) < 32U));
 80010b0:	4291      	cmp	r1, r2
                          uint32_t start) {
 80010b2:	b538      	push	{r3, r4, r5, lr}
  osalDbgCheck((end >= start) && ((end - start) < 32U));
 80010b4:	d316      	bcc.n	80010e4 <_mmcsd_get_slice+0x34>
 80010b6:	1a8b      	subs	r3, r1, r2
 80010b8:	2b1f      	cmp	r3, #31
 80010ba:	d813      	bhi.n	80010e4 <_mmcsd_get_slice+0x34>

  startidx = start / 32U;
  startoff = start % 32U;
  endidx   = end / 32U;
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;
 80010bc:	f001 031f 	and.w	r3, r1, #31
 80010c0:	1c5c      	adds	r4, r3, #1
  endidx   = end / 32U;
 80010c2:	0949      	lsrs	r1, r1, #5
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;
 80010c4:	2301      	movs	r3, #1
 80010c6:	40a3      	lsls	r3, r4

  /* One or two pieces?*/
  if (startidx < endidx) {
 80010c8:	ebb1 1f52 	cmp.w	r1, r2, lsr #5
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;
 80010cc:	f103 33ff 	add.w	r3, r3, #4294967295
  startidx = start / 32U;
 80010d0:	ea4f 1552 	mov.w	r5, r2, lsr #5
  startoff = start % 32U;
 80010d4:	f002 041f 	and.w	r4, r2, #31
  if (startidx < endidx) {
 80010d8:	d807      	bhi.n	80010ea <_mmcsd_get_slice+0x3a>
    return (data[startidx] >> startoff) |               /* Two pieces case. */
           ((data[endidx] & endmask) << (32U - startoff));
  }
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 80010da:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80010de:	4018      	ands	r0, r3
 80010e0:	40e0      	lsrs	r0, r4
}
 80010e2:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck((end >= start) && ((end - start) < 32U));
 80010e4:	4807      	ldr	r0, [pc, #28]	; (8001104 <_mmcsd_get_slice+0x54>)
 80010e6:	f7ff fc13 	bl	8000910 <chSysHalt>
           ((data[endidx] & endmask) << (32U - startoff));
 80010ea:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 80010ee:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
           ((data[endidx] & endmask) << (32U - startoff));
 80010f2:	4013      	ands	r3, r2
 80010f4:	f1c4 0220 	rsb	r2, r4, #32
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 80010f8:	fa20 f404 	lsr.w	r4, r0, r4
           ((data[endidx] & endmask) << (32U - startoff));
 80010fc:	fa03 f002 	lsl.w	r0, r3, r2
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8001100:	4320      	orrs	r0, r4
}
 8001102:	bd38      	pop	{r3, r4, r5, pc}
 8001104:	08005604 	.word	0x08005604
	...

08001110 <_mmcsd_get_capacity>:
 * @return              The card capacity.
 * @retval 0            CSD format error
 *
 * @notapi
 */
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
 8001110:	b570      	push	{r4, r5, r6, lr}
  uint32_t a, b, c;

  osalDbgCheck(NULL != csd);

  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8001112:	227e      	movs	r2, #126	; 0x7e
 8001114:	217f      	movs	r1, #127	; 0x7f
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
 8001116:	4605      	mov	r5, r0
  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8001118:	f7ff ffca 	bl	80010b0 <_mmcsd_get_slice>
 800111c:	b158      	cbz	r0, 8001136 <_mmcsd_get_capacity+0x26>
 800111e:	2801      	cmp	r0, #1
 8001120:	d107      	bne.n	8001132 <_mmcsd_get_capacity+0x22>
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
  case 1:
    /* CSD version 2.0.*/
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
 8001122:	4628      	mov	r0, r5
 8001124:	2230      	movs	r2, #48	; 0x30
 8001126:	2145      	movs	r1, #69	; 0x45
 8001128:	f7ff ffc2 	bl	80010b0 <_mmcsd_get_slice>
 800112c:	3001      	adds	r0, #1
 800112e:	0280      	lsls	r0, r0, #10
  default:
    /* Reserved value detected.*/
    break;
  }
  return 0U;
}
 8001130:	bd70      	pop	{r4, r5, r6, pc}
  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8001132:	2000      	movs	r0, #0
}
 8001134:	bd70      	pop	{r4, r5, r6, pc}
    a = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_SLICE);
 8001136:	223e      	movs	r2, #62	; 0x3e
 8001138:	2149      	movs	r1, #73	; 0x49
 800113a:	4628      	mov	r0, r5
 800113c:	f7ff ffb8 	bl	80010b0 <_mmcsd_get_slice>
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 8001140:	222f      	movs	r2, #47	; 0x2f
    a = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_SLICE);
 8001142:	4604      	mov	r4, r0
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 8001144:	2131      	movs	r1, #49	; 0x31
 8001146:	4628      	mov	r0, r5
 8001148:	f7ff ffb2 	bl	80010b0 <_mmcsd_get_slice>
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
 800114c:	2250      	movs	r2, #80	; 0x50
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 800114e:	4606      	mov	r6, r0
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
 8001150:	2153      	movs	r1, #83	; 0x53
 8001152:	4628      	mov	r0, r5
 8001154:	f7ff ffac 	bl	80010b0 <_mmcsd_get_slice>
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
 8001158:	3602      	adds	r6, #2
 800115a:	3401      	adds	r4, #1
 800115c:	40b4      	lsls	r4, r6
 800115e:	3809      	subs	r0, #9
 8001160:	fa04 f000 	lsl.w	r0, r4, r0
}
 8001164:	bd70      	pop	{r4, r5, r6, pc}
 8001166:	bf00      	nop
	...

08001170 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8001170:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8001172:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001176:	68da      	ldr	r2, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8001178:	0792      	lsls	r2, r2, #30
 800117a:	d501      	bpl.n	8001180 <stSetAlarm+0x10>
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800117c:	6358      	str	r0, [r3, #52]	; 0x34

  st_lld_set_alarm(abstime);
}
 800117e:	bd08      	pop	{r3, pc}
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8001180:	4801      	ldr	r0, [pc, #4]	; (8001188 <stSetAlarm+0x18>)
 8001182:	f7ff fbc5 	bl	8000910 <chSysHalt>
 8001186:	bf00      	nop
 8001188:	08005624 	.word	0x08005624
 800118c:	00000000 	.word	0x00000000

08001190 <chSchWakeupS.constprop.0>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001190:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8001192:	4d20      	ldr	r5, [pc, #128]	; (8001214 <chSchWakeupS.constprop.0+0x84>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001194:	4604      	mov	r4, r0
  chDbgCheckClassS();
 8001196:	f7ff fbd3 	bl	8000940 <chDbgCheckClassS>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800119a:	682b      	ldr	r3, [r5, #0]
  thread_t *otp = currp;
 800119c:	69a8      	ldr	r0, [r5, #24]
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800119e:	42ab      	cmp	r3, r5
 80011a0:	d026      	beq.n	80011f0 <chSchWakeupS.constprop.0+0x60>
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	6883      	ldr	r3, [r0, #8]
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d31f      	bcc.n	80011ea <chSchWakeupS.constprop.0+0x5a>
  if (ntp->prio <= otp->prio) {
 80011aa:	68a2      	ldr	r2, [r4, #8]
  ntp->u.rdymsg = msg;
 80011ac:	2100      	movs	r1, #0
  if (ntp->prio <= otp->prio) {
 80011ae:	429a      	cmp	r2, r3
  ntp->u.rdymsg = msg;
 80011b0:	6261      	str	r1, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80011b2:	d915      	bls.n	80011e0 <chSchWakeupS.constprop.0+0x50>
    otp = chSchReadyAheadI(otp);
 80011b4:	f7ff fc6c 	bl	8000a90 <chSchReadyAheadI>
    ntp->state = CH_STATE_CURRENT;
 80011b8:	2301      	movs	r3, #1
 80011ba:	f884 3020 	strb.w	r3, [r4, #32]
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 80011be:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
    currp = ntp;
 80011c0:	61ac      	str	r4, [r5, #24]
 80011c2:	07db      	lsls	r3, r3, #31
    otp = chSchReadyAheadI(otp);
 80011c4:	4605      	mov	r5, r0
 80011c6:	d51a      	bpl.n	80011fe <chSchWakeupS.constprop.0+0x6e>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80011c8:	f3ef 8309 	mrs	r3, PSP
    chSysSwitch(ntp, otp);
 80011cc:	69ea      	ldr	r2, [r5, #28]
 80011ce:	3b24      	subs	r3, #36	; 0x24
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d81c      	bhi.n	800120e <chSchWakeupS.constprop.0+0x7e>
 80011d4:	4629      	mov	r1, r5
 80011d6:	4620      	mov	r0, r4
}
 80011d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chSysSwitch(ntp, otp);
 80011dc:	f7ff b870 	b.w	80002c0 <_port_switch>
    (void) chSchReadyI(ntp);
 80011e0:	4620      	mov	r0, r4
}
 80011e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    (void) chSchReadyI(ntp);
 80011e6:	f7ff bc7b 	b.w	8000ae0 <chSchReadyI>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80011ea:	480b      	ldr	r0, [pc, #44]	; (8001218 <chSchWakeupS.constprop.0+0x88>)
 80011ec:	f7ff fb90 	bl	8000910 <chSysHalt>
 80011f0:	6883      	ldr	r3, [r0, #8]
  if (ntp->prio <= otp->prio) {
 80011f2:	68a2      	ldr	r2, [r4, #8]
  ntp->u.rdymsg = msg;
 80011f4:	2100      	movs	r1, #0
  if (ntp->prio <= otp->prio) {
 80011f6:	429a      	cmp	r2, r3
  ntp->u.rdymsg = msg;
 80011f8:	6261      	str	r1, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80011fa:	d8db      	bhi.n	80011b4 <chSchWakeupS.constprop.0+0x24>
 80011fc:	e7f0      	b.n	80011e0 <chSchWakeupS.constprop.0+0x50>
 80011fe:	f7ff fb47 	bl	8000890 <_trace_switch.part.0>
 8001202:	f3ef 8309 	mrs	r3, PSP
    chSysSwitch(ntp, otp);
 8001206:	69ea      	ldr	r2, [r5, #28]
 8001208:	3b24      	subs	r3, #36	; 0x24
 800120a:	429a      	cmp	r2, r3
 800120c:	d9e2      	bls.n	80011d4 <chSchWakeupS.constprop.0+0x44>
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <chSchWakeupS.constprop.0+0x8c>)
 8001210:	f7ff fb7e 	bl	8000910 <chSysHalt>
 8001214:	20004b48 	.word	0x20004b48
 8001218:	08005568 	.word	0x08005568
 800121c:	08004d0c 	.word	0x08004d0c

08001220 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8001220:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 8001222:	4c15      	ldr	r4, [pc, #84]	; (8001278 <chSchGoSleepS+0x58>)
 8001224:	69a5      	ldr	r5, [r4, #24]
void chSchGoSleepS(tstate_t newstate) {
 8001226:	4606      	mov	r6, r0
  chDbgCheckClassS();
 8001228:	f7ff fb8a 	bl	8000940 <chDbgCheckClassS>
  thread_t *tp = tqp->next;
 800122c:	6823      	ldr	r3, [r4, #0]
  otp->state = newstate;
 800122e:	f885 6020 	strb.w	r6, [r5, #32]
  tqp->next             = tp->queue.next;
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	6022      	str	r2, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8001236:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8001238:	6054      	str	r4, [r2, #4]
 800123a:	f883 1020 	strb.w	r1, [r3, #32]
 800123e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001240:	61a3      	str	r3, [r4, #24]
 8001242:	07d3      	lsls	r3, r2, #31
 8001244:	d50b      	bpl.n	800125e <chSchGoSleepS+0x3e>
 8001246:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(currp, otp);
 800124a:	69ea      	ldr	r2, [r5, #28]
 800124c:	3b24      	subs	r3, #36	; 0x24
 800124e:	429a      	cmp	r2, r3
 8001250:	d80e      	bhi.n	8001270 <chSchGoSleepS+0x50>
 8001252:	69a0      	ldr	r0, [r4, #24]
 8001254:	4629      	mov	r1, r5
}
 8001256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(currp, otp);
 800125a:	f7ff b831 	b.w	80002c0 <_port_switch>
 800125e:	4628      	mov	r0, r5
 8001260:	f7ff fb16 	bl	8000890 <_trace_switch.part.0>
 8001264:	f3ef 8309 	mrs	r3, PSP
 8001268:	69ea      	ldr	r2, [r5, #28]
 800126a:	3b24      	subs	r3, #36	; 0x24
 800126c:	429a      	cmp	r2, r3
 800126e:	d9f0      	bls.n	8001252 <chSchGoSleepS+0x32>
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <chSchGoSleepS+0x5c>)
 8001272:	f7ff fb4d 	bl	8000910 <chSysHalt>
 8001276:	bf00      	nop
 8001278:	20004b48 	.word	0x20004b48
 800127c:	08004d0c 	.word	0x08004d0c

08001280 <chThdExitS>:
void chThdExitS(msg_t msg) {
 8001280:	b508      	push	{r3, lr}
  thread_t *tp = currp;
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <chThdExitS+0x44>)
 8001284:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8001286:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8001288:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 800128a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800128e:	42ab      	cmp	r3, r5
 8001290:	d007      	beq.n	80012a2 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fc22 	bl	8000ae0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800129c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800129e:	42ab      	cmp	r3, r5
 80012a0:	d1f7      	bne.n	8001292 <chThdExitS+0x12>
  if ((tp->refs == (trefs_t)0) &&
 80012a2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80012a6:	b93b      	cbnz	r3, 80012b8 <chThdExitS+0x38>
 80012a8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80012ac:	079b      	lsls	r3, r3, #30
 80012ae:	d103      	bne.n	80012b8 <chThdExitS+0x38>
    REG_REMOVE(tp);
 80012b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80012b4:	6113      	str	r3, [r2, #16]
 80012b6:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 80012b8:	200f      	movs	r0, #15
 80012ba:	f7ff ffb1 	bl	8001220 <chSchGoSleepS>
  chDbgAssert(false, "zombies apocalypse");
 80012be:	4802      	ldr	r0, [pc, #8]	; (80012c8 <chThdExitS+0x48>)
 80012c0:	f7ff fb26 	bl	8000910 <chSysHalt>
 80012c4:	20004b48 	.word	0x20004b48
 80012c8:	08005598 	.word	0x08005598
 80012cc:	00000000 	.word	0x00000000

080012d0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80012d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012d4:	460c      	mov	r4, r1
 80012d6:	b087      	sub	sp, #28
 80012d8:	4606      	mov	r6, r0
  chDbgCheckClassS();
 80012da:	f7ff fb31 	bl	8000940 <chDbgCheckClassS>
  if (TIME_INFINITE != timeout) {
 80012de:	1c63      	adds	r3, r4, #1
 80012e0:	d04e      	beq.n	8001380 <chSchGoSleepTimeoutS+0xb0>
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  sysinterval_t delta;

  chDbgCheckClassI();
 80012e2:	f7ff fb3d 	bl	8000960 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80012e6:	2c00      	cmp	r4, #0
 80012e8:	d047      	beq.n	800137a <chSchGoSleepTimeoutS+0xaa>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80012ea:	4f49      	ldr	r7, [pc, #292]	; (8001410 <chSchGoSleepTimeoutS+0x140>)

  vtp->par = par;
  vtp->func = vtfunc;
 80012ec:	4a49      	ldr	r2, [pc, #292]	; (8001414 <chSchGoSleepTimeoutS+0x144>)
  vtp->par = par;
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80012f2:	46b8      	mov	r8, r7
 80012f4:	2c02      	cmp	r4, #2
 80012f6:	f858 5f1c 	ldr.w	r5, [r8, #28]!
  return (systime_t)STM32_ST_TIM->CNT;
 80012fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012fe:	bf38      	it	cc
 8001300:	2402      	movcc	r4, #2
 8001302:	4545      	cmp	r5, r8
 8001304:	6a59      	ldr	r1, [r3, #36]	; 0x24
  vtp->func = vtfunc;
 8001306:	9204      	str	r2, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001308:	d069      	beq.n	80013de <chSchGoSleepTimeoutS+0x10e>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800130a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800130c:	1a09      	subs	r1, r1, r0
 800130e:	1864      	adds	r4, r4, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001310:	d23f      	bcs.n	8001392 <chSchGoSleepTimeoutS+0xc2>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8001312:	68ab      	ldr	r3, [r5, #8]
 8001314:	429c      	cmp	r4, r3
 8001316:	d35d      	bcc.n	80013d4 <chSchGoSleepTimeoutS+0x104>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8001318:	429c      	cmp	r4, r3
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");
 800131a:	f10d 0904 	add.w	r9, sp, #4
  while (p->delta < delta) {
 800131e:	d906      	bls.n	800132e <chSchGoSleepTimeoutS+0x5e>
    chDbgAssert(p != vtp, "timer already armed");
 8001320:	454d      	cmp	r5, r9
 8001322:	d02a      	beq.n	800137a <chSchGoSleepTimeoutS+0xaa>

    delta -= p->delta;
    p = p->next;
 8001324:	682d      	ldr	r5, [r5, #0]
    delta -= p->delta;
 8001326:	1ae4      	subs	r4, r4, r3
  while (p->delta < delta) {
 8001328:	68ab      	ldr	r3, [r5, #8]
 800132a:	429c      	cmp	r4, r3
 800132c:	d8f8      	bhi.n	8001320 <chSchGoSleepTimeoutS+0x50>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 800132e:	686b      	ldr	r3, [r5, #4]
 8001330:	e9cd 5301 	strd	r5, r3, [sp, #4]
  vtp->prev->next = vtp;
 8001334:	f8c3 9000 	str.w	r9, [r3]
  p->prev = vtp;
 8001338:	f8c5 9004 	str.w	r9, [r5, #4]
  vtp->delta = delta;
 800133c:	9403      	str	r4, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 800133e:	68ab      	ldr	r3, [r5, #8]
 8001340:	1b1c      	subs	r4, r3, r4

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
  p->delta -= delta;
 8001346:	60ac      	str	r4, [r5, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    chSchGoSleepS(newstate);
 800134a:	4630      	mov	r0, r6
 800134c:	f7ff ff68 	bl	8001220 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8001350:	f7ff fb06 	bl	8000960 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8001354:	9b04      	ldr	r3, [sp, #16]
 8001356:	b1bb      	cbz	r3, 8001388 <chSchGoSleepTimeoutS+0xb8>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8001358:	f7ff fb02 	bl	8000960 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	454b      	cmp	r3, r9
 8001360:	d01c      	beq.n	800139c <chSchGoSleepTimeoutS+0xcc>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001362:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8001366:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8001368:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800136a:	4543      	cmp	r3, r8
    vtp->next->prev = vtp->prev;
 800136c:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800136e:	d00b      	beq.n	8001388 <chSchGoSleepTimeoutS+0xb8>
      vtp->next->delta += vtp->delta;
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	9903      	ldr	r1, [sp, #12]
 8001374:	440a      	add	r2, r1
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	e006      	b.n	8001388 <chSchGoSleepTimeoutS+0xb8>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 800137a:	4827      	ldr	r0, [pc, #156]	; (8001418 <chSchGoSleepTimeoutS+0x148>)
 800137c:	f7ff fac8 	bl	8000910 <chSysHalt>
    chSchGoSleepS(newstate);
 8001380:	4630      	mov	r0, r6
 8001382:	f7ff ff4d 	bl	8001220 <chSchGoSleepS>
 8001386:	4f22      	ldr	r7, [pc, #136]	; (8001410 <chSchGoSleepTimeoutS+0x140>)
  return currp->u.rdymsg;
 8001388:	69bb      	ldr	r3, [r7, #24]
}
 800138a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800138c:	b007      	add	sp, #28
 800138e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      delta -= p->delta;
 8001392:	68aa      	ldr	r2, [r5, #8]
      p = p->next;
 8001394:	682d      	ldr	r5, [r5, #0]
      delta -= p->delta;
 8001396:	1aa4      	subs	r4, r4, r2
 8001398:	68ab      	ldr	r3, [r5, #8]
 800139a:	e7bd      	b.n	8001318 <chSchGoSleepTimeoutS+0x48>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 800139c:	9b01      	ldr	r3, [sp, #4]
 800139e:	61fb      	str	r3, [r7, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 80013a0:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80013a2:	4543      	cmp	r3, r8
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80013a4:	f8c3 8004 	str.w	r8, [r3, #4]
  vtp->func = NULL;
 80013a8:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80013aa:	d02d      	beq.n	8001408 <chSchGoSleepTimeoutS+0x138>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	9903      	ldr	r1, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80013b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 80013b2:	440a      	add	r2, r1
 80013b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80013bc:	1a19      	subs	r1, r3, r0

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80013be:	428a      	cmp	r2, r1
 80013c0:	d9e2      	bls.n	8001388 <chSchGoSleepTimeoutS+0xb8>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 80013c2:	1ac3      	subs	r3, r0, r3
 80013c4:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80013c6:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80013c8:	bf98      	it	ls
 80013ca:	1c8a      	addls	r2, r1, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 80013cc:	4410      	add	r0, r2
 80013ce:	f7ff fecf 	bl	8001170 <stSetAlarm>
 80013d2:	e7d9      	b.n	8001388 <chSchGoSleepTimeoutS+0xb8>
 80013d4:	4420      	add	r0, r4
 80013d6:	f7ff fecb 	bl	8001170 <stSetAlarm>
 80013da:	68ab      	ldr	r3, [r5, #8]
 80013dc:	e79c      	b.n	8001318 <chSchGoSleepTimeoutS+0x48>
      ch.vtlist.lasttime = now;
 80013de:	62b9      	str	r1, [r7, #40]	; 0x28
      vtp->delta = delay;
 80013e0:	9403      	str	r4, [sp, #12]
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 80013e2:	68da      	ldr	r2, [r3, #12]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 80013e4:	9501      	str	r5, [sp, #4]
      ch.vtlist.next = vtp;
 80013e6:	f10d 0904 	add.w	r9, sp, #4
  osalDbgAssert(stIsAlarmActive() == false, "already active");
 80013ea:	f012 0202 	ands.w	r2, r2, #2
      ch.vtlist.prev = vtp;
 80013ee:	e9c7 9907 	strd	r9, r9, [r7, #28]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80013f2:	9502      	str	r5, [sp, #8]
 80013f4:	d105      	bne.n	8001402 <chSchGoSleepTimeoutS+0x132>
  return systime + (systime_t)interval;
 80013f6:	440c      	add	r4, r1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80013f8:	2102      	movs	r1, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80013fa:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80013fc:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80013fe:	60d9      	str	r1, [r3, #12]
 8001400:	e7a3      	b.n	800134a <chSchGoSleepTimeoutS+0x7a>
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <chSchGoSleepTimeoutS+0x14c>)
 8001404:	f7ff fa84 	bl	8000910 <chSysHalt>
  STM32_ST_TIM->DIER = 0U;
 8001408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800140c:	60da      	str	r2, [r3, #12]
    return;
 800140e:	e7bb      	b.n	8001388 <chSchGoSleepTimeoutS+0xb8>
 8001410:	20004b48 	.word	0x20004b48
 8001414:	08000ca1 	.word	0x08000ca1
 8001418:	080054cc 	.word	0x080054cc
 800141c:	080055f4 	.word	0x080055f4

08001420 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8001420:	b161      	cbz	r1, 800143c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8001424:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8001426:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8001428:	6844      	ldr	r4, [r0, #4]
 800142a:	4603      	mov	r3, r0
 800142c:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001430:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8001432:	6022      	str	r2, [r4, #0]
}
 8001434:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8001436:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001438:	f7ff bf4a 	b.w	80012d0 <chSchGoSleepTimeoutS>
}
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20004b48 	.word	0x20004b48
	...

08001450 <parse_arguments>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static char *parse_arguments(char *str, char **saveptr) {
 8001450:	b570      	push	{r4, r5, r6, lr}
 8001452:	460d      	mov	r5, r1
  char *p;

  if (str != NULL)
 8001454:	b1b8      	cbz	r0, 8001486 <parse_arguments+0x36>
 8001456:	4604      	mov	r4, r0
    *saveptr = str;
 8001458:	6028      	str	r0, [r5, #0]
  if (!p) {
    return NULL;
  }

  /* Skipping white space.*/
  p += strspn(p, " \t");
 800145a:	4912      	ldr	r1, [pc, #72]	; (80014a4 <parse_arguments+0x54>)
 800145c:	4620      	mov	r0, r4
 800145e:	f003 fc25 	bl	8004cac <strspn>

  if (*p == '"') {
 8001462:	5c21      	ldrb	r1, [r4, r0]
 8001464:	2922      	cmp	r1, #34	; 0x22
  p += strspn(p, " \t");
 8001466:	eb04 0600 	add.w	r6, r4, r0
  if (*p == '"') {
 800146a:	d012      	beq.n	8001492 <parse_arguments+0x42>
    p++;
    *saveptr = strpbrk(p, "\"");
  }
  else {
    /* The delimiter is white space.*/
    *saveptr = strpbrk(p, " \t");
 800146c:	490d      	ldr	r1, [pc, #52]	; (80014a4 <parse_arguments+0x54>)
 800146e:	4630      	mov	r0, r6
 8001470:	f003 fc00 	bl	8004c74 <strpbrk>
  }

  /* Replacing the delimiter with a zero.*/
  if (*saveptr != NULL) {
 8001474:	b198      	cbz	r0, 800149e <parse_arguments+0x4e>
    *(*saveptr)++ = '\0';
 8001476:	1c42      	adds	r2, r0, #1
 8001478:	2300      	movs	r3, #0
 800147a:	602a      	str	r2, [r5, #0]
 800147c:	7003      	strb	r3, [r0, #0]
  }

  return *p != '\0' ? p : NULL;
 800147e:	7833      	ldrb	r3, [r6, #0]
 8001480:	b123      	cbz	r3, 800148c <parse_arguments+0x3c>
}
 8001482:	4630      	mov	r0, r6
 8001484:	bd70      	pop	{r4, r5, r6, pc}
  p = *saveptr;
 8001486:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8001488:	2c00      	cmp	r4, #0
 800148a:	d1e6      	bne.n	800145a <parse_arguments+0xa>
    return NULL;
 800148c:	2600      	movs	r6, #0
}
 800148e:	4630      	mov	r0, r6
 8001490:	bd70      	pop	{r4, r5, r6, pc}
    p++;
 8001492:	3601      	adds	r6, #1
    *saveptr = strpbrk(p, "\"");
 8001494:	4630      	mov	r0, r6
 8001496:	f003 fb85 	bl	8004ba4 <strchr>
  if (*saveptr != NULL) {
 800149a:	2800      	cmp	r0, #0
 800149c:	d1eb      	bne.n	8001476 <parse_arguments+0x26>
 800149e:	6028      	str	r0, [r5, #0]
 80014a0:	e7ed      	b.n	800147e <parse_arguments+0x2e>
 80014a2:	bf00      	nop
 80014a4:	08004d1c 	.word	0x08004d1c
	...

080014b0 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80014b0:	b40e      	push	{r1, r2, r3}
 80014b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	ab0f      	add	r3, sp, #60	; 0x3c
 80014ba:	f853 4b04 	ldr.w	r4, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80014be:	9302      	str	r3, [sp, #8]
    c = *fmt++;
 80014c0:	4625      	mov	r5, r4
 80014c2:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 80014c6:	2900      	cmp	r1, #0
 80014c8:	f000 823b 	beq.w	8001942 <chprintf+0x492>
 80014cc:	4607      	mov	r7, r0
 80014ce:	4699      	mov	r9, r3
  int n = 0;
 80014d0:	f04f 0800 	mov.w	r8, #0
 80014d4:	e00c      	b.n	80014f0 <chprintf+0x40>
      streamPut(chp, (uint8_t)c);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	4638      	mov	r0, r7
 80014da:	68db      	ldr	r3, [r3, #12]
      n++;
 80014dc:	f108 0801 	add.w	r8, r8, #1
 80014e0:	462c      	mov	r4, r5
      streamPut(chp, (uint8_t)c);
 80014e2:	4798      	blx	r3
    c = *fmt++;
 80014e4:	4625      	mov	r5, r4
 80014e6:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 80014ea:	2900      	cmp	r1, #0
 80014ec:	f000 80be 	beq.w	800166c <chprintf+0x1bc>
    if (c != '%') {
 80014f0:	2925      	cmp	r1, #37	; 0x25
 80014f2:	d1f0      	bne.n	80014d6 <chprintf+0x26>
    if (*fmt == '-') {
 80014f4:	7863      	ldrb	r3, [r4, #1]
 80014f6:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 80014f8:	bf04      	itt	eq
 80014fa:	1ca5      	addeq	r5, r4, #2
      left_align = true;
 80014fc:	2001      	moveq	r0, #1
    if (*fmt == '+') {
 80014fe:	782b      	ldrb	r3, [r5, #0]
    left_align = false;
 8001500:	bf18      	it	ne
 8001502:	2000      	movne	r0, #0
    if (*fmt == '+') {
 8001504:	2b2b      	cmp	r3, #43	; 0x2b
 8001506:	bf03      	ittte	eq
 8001508:	786b      	ldrbeq	r3, [r5, #1]
      do_sign = true;
 800150a:	f04f 0e01 	moveq.w	lr, #1
      fmt++;
 800150e:	4475      	addeq	r5, lr
    do_sign = false;
 8001510:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '0') {
 8001514:	2b30      	cmp	r3, #48	; 0x30
      filler = '0';
 8001516:	bf05      	ittet	eq
 8001518:	461e      	moveq	r6, r3
      fmt++;
 800151a:	786b      	ldrbeq	r3, [r5, #1]
    filler = ' ';
 800151c:	2620      	movne	r6, #32
      fmt++;
 800151e:	3501      	addeq	r5, #1
    if ( *fmt == '*') {
 8001520:	2b2a      	cmp	r3, #42	; 0x2a
 8001522:	f040 80ac 	bne.w	800167e <chprintf+0x1ce>
      width = va_arg(ap, int);
 8001526:	f859 1b04 	ldr.w	r1, [r9], #4
      c = *fmt++;
 800152a:	786b      	ldrb	r3, [r5, #1]
 800152c:	1cac      	adds	r4, r5, #2
    if (c == '.') {
 800152e:	2b2e      	cmp	r3, #46	; 0x2e
 8001530:	f000 8130 	beq.w	8001794 <chprintf+0x2e4>
    precision = 0;
 8001534:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 8001536:	f003 05df 	and.w	r5, r3, #223	; 0xdf
 800153a:	2d4c      	cmp	r5, #76	; 0x4c
 800153c:	f000 80b2 	beq.w	80016a4 <chprintf+0x1f4>
      is_long = (c >= 'A') && (c <= 'Z');
 8001540:	f1a3 0c44 	sub.w	ip, r3, #68	; 0x44
    switch (c) {
 8001544:	f1bc 0f34 	cmp.w	ip, #52	; 0x34
 8001548:	f200 8198 	bhi.w	800187c <chprintf+0x3cc>
 800154c:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8001550:	0196015e 	.word	0x0196015e
 8001554:	01960196 	.word	0x01960196
 8001558:	015e0196 	.word	0x015e0196
 800155c:	01960196 	.word	0x01960196
 8001560:	01960196 	.word	0x01960196
 8001564:	019a0196 	.word	0x019a0196
 8001568:	01960035 	.word	0x01960035
 800156c:	01960196 	.word	0x01960196
 8001570:	00940196 	.word	0x00940196
 8001574:	01960196 	.word	0x01960196
 8001578:	01960035 	.word	0x01960035
 800157c:	01960196 	.word	0x01960196
 8001580:	01960196 	.word	0x01960196
 8001584:	01960196 	.word	0x01960196
 8001588:	01960196 	.word	0x01960196
 800158c:	014d0196 	.word	0x014d0196
 8001590:	0196015e 	.word	0x0196015e
 8001594:	01960196 	.word	0x01960196
 8001598:	015e0196 	.word	0x015e0196
 800159c:	01960196 	.word	0x01960196
 80015a0:	01960196 	.word	0x01960196
 80015a4:	019a0196 	.word	0x019a0196
 80015a8:	01960035 	.word	0x01960035
 80015ac:	012d0196 	.word	0x012d0196
 80015b0:	00940196 	.word	0x00940196
 80015b4:	01960196 	.word	0x01960196
 80015b8:	0035      	.short	0x0035
      if (c == 0) {
 80015ba:	f04f 0e10 	mov.w	lr, #16
        l = va_arg(ap, unsigned int);
 80015be:	f859 5b04 	ldr.w	r5, [r9], #4
  q = p + MAX_FILLER;
 80015c2:	f10d 0317 	add.w	r3, sp, #23
 80015c6:	e000      	b.n	80015ca <chprintf+0x11a>
  } while ((ll /= radix) != 0);
 80015c8:	4663      	mov	r3, ip
    i = (int)(l % radix);
 80015ca:	46aa      	mov	sl, r5
 80015cc:	fbb5 f5fe 	udiv	r5, r5, lr
 80015d0:	fb0e ab15 	mls	fp, lr, r5, sl
    i += '0';
 80015d4:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    if (i > '9') {
 80015d8:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 80015da:	bfc8      	it	gt
 80015dc:	f10b 0237 	addgt.w	r2, fp, #55	; 0x37
    *--q = i;
 80015e0:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 80015e2:	45f2      	cmp	sl, lr
    *--q = i;
 80015e4:	f103 3cff 	add.w	ip, r3, #4294967295
 80015e8:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 80015ec:	d2ec      	bcs.n	80015c8 <chprintf+0x118>
  i = (int)(p + MAX_FILLER - q);
 80015ee:	f10d 0a0c 	add.w	sl, sp, #12
 80015f2:	f10d 0517 	add.w	r5, sp, #23
 80015f6:	eba5 050c 	sub.w	r5, r5, ip
 80015fa:	46d6      	mov	lr, sl
 80015fc:	f10d 0c17 	add.w	ip, sp, #23
 8001600:	e001      	b.n	8001606 <chprintf+0x156>
 8001602:	f813 2b01 	ldrb.w	r2, [r3], #1
    *p++ = *q++;
 8001606:	f80e 2b01 	strb.w	r2, [lr], #1
  while (--i);
 800160a:	4563      	cmp	r3, ip
 800160c:	d1f9      	bne.n	8001602 <chprintf+0x152>
 800160e:	1b49      	subs	r1, r1, r5
 8001610:	3d01      	subs	r5, #1
    if ((width -= i) < 0) {
 8001612:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8001616:	b920      	cbnz	r0, 8001622 <chprintf+0x172>
    if (width < 0) {
 8001618:	2900      	cmp	r1, #0
      width = -width;
 800161a:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 800161e:	f300 8145 	bgt.w	80018ac <chprintf+0x3fc>
    while (--i >= 0) {
 8001622:	2d00      	cmp	r5, #0
 8001624:	db0f      	blt.n	8001646 <chprintf+0x196>
 8001626:	1c6b      	adds	r3, r5, #1
 8001628:	4453      	add	r3, sl
 800162a:	9401      	str	r4, [sp, #4]
 800162c:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)*s++);
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8001634:	68d2      	ldr	r2, [r2, #12]
 8001636:	4638      	mov	r0, r7
 8001638:	4790      	blx	r2
    while (--i >= 0) {
 800163a:	45a2      	cmp	sl, r4
 800163c:	d1f7      	bne.n	800162e <chprintf+0x17e>
 800163e:	f108 0801 	add.w	r8, r8, #1
 8001642:	9c01      	ldr	r4, [sp, #4]
 8001644:	44a8      	add	r8, r5
    while (width) {
 8001646:	f1bb 0f00 	cmp.w	fp, #0
 800164a:	f43f af4b 	beq.w	80014e4 <chprintf+0x34>
 800164e:	465d      	mov	r5, fp
      streamPut(chp, (uint8_t)filler);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	4631      	mov	r1, r6
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	4638      	mov	r0, r7
 8001658:	4798      	blx	r3
    while (width) {
 800165a:	3d01      	subs	r5, #1
 800165c:	d1f8      	bne.n	8001650 <chprintf+0x1a0>
    c = *fmt++;
 800165e:	4625      	mov	r5, r4
 8001660:	44d8      	add	r8, fp
 8001662:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8001666:	2900      	cmp	r1, #0
 8001668:	f47f af42 	bne.w	80014f0 <chprintf+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 800166c:	4640      	mov	r0, r8
 800166e:	b006      	add	sp, #24
 8001670:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001674:	b003      	add	sp, #12
 8001676:	4770      	bx	lr
      if (c == 0) {
 8001678:	f04f 0e0a 	mov.w	lr, #10
 800167c:	e79f      	b.n	80015be <chprintf+0x10e>
        c = *fmt++;
 800167e:	1c6c      	adds	r4, r5, #1
        if (c == 0) {
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f3      	beq.n	800166c <chprintf+0x1bc>
      width = 0;
 8001684:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 8001686:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 800168e:	eb01 0581 	add.w	r5, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 8001692:	f63f af4c 	bhi.w	800152e <chprintf+0x7e>
        c = *fmt++;
 8001696:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 800169a:	eb02 0145 	add.w	r1, r2, r5, lsl #1
        if (c == 0) {
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f1      	bne.n	8001686 <chprintf+0x1d6>
 80016a2:	e7e3      	b.n	800166c <chprintf+0x1bc>
      c = *fmt++;
 80016a4:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == 0) {
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0df      	beq.n	800166c <chprintf+0x1bc>
    switch (c) {
 80016ac:	f1a3 0544 	sub.w	r5, r3, #68	; 0x44
 80016b0:	2d34      	cmp	r5, #52	; 0x34
 80016b2:	f200 80e3 	bhi.w	800187c <chprintf+0x3cc>
 80016b6:	f20f 0c08 	addw	ip, pc, #8
 80016ba:	f85c f025 	ldr.w	pc, [ip, r5, lsl #2]
 80016be:	bf00      	nop
 80016c0:	0800180d 	.word	0x0800180d
 80016c4:	0800187d 	.word	0x0800187d
 80016c8:	0800187d 	.word	0x0800187d
 80016cc:	0800187d 	.word	0x0800187d
 80016d0:	0800187d 	.word	0x0800187d
 80016d4:	0800180d 	.word	0x0800180d
 80016d8:	0800187d 	.word	0x0800187d
 80016dc:	0800187d 	.word	0x0800187d
 80016e0:	0800187d 	.word	0x0800187d
 80016e4:	0800187d 	.word	0x0800187d
 80016e8:	0800187d 	.word	0x0800187d
 80016ec:	08001885 	.word	0x08001885
 80016f0:	080015bb 	.word	0x080015bb
 80016f4:	0800187d 	.word	0x0800187d
 80016f8:	0800187d 	.word	0x0800187d
 80016fc:	0800187d 	.word	0x0800187d
 8001700:	0800187d 	.word	0x0800187d
 8001704:	08001679 	.word	0x08001679
 8001708:	0800187d 	.word	0x0800187d
 800170c:	0800187d 	.word	0x0800187d
 8001710:	080015bb 	.word	0x080015bb
 8001714:	0800187d 	.word	0x0800187d
 8001718:	0800187d 	.word	0x0800187d
 800171c:	0800187d 	.word	0x0800187d
 8001720:	0800187d 	.word	0x0800187d
 8001724:	0800187d 	.word	0x0800187d
 8001728:	0800187d 	.word	0x0800187d
 800172c:	0800187d 	.word	0x0800187d
 8001730:	0800187d 	.word	0x0800187d
 8001734:	0800187d 	.word	0x0800187d
 8001738:	0800187d 	.word	0x0800187d
 800173c:	080017eb 	.word	0x080017eb
 8001740:	0800180d 	.word	0x0800180d
 8001744:	0800187d 	.word	0x0800187d
 8001748:	0800187d 	.word	0x0800187d
 800174c:	0800187d 	.word	0x0800187d
 8001750:	0800187d 	.word	0x0800187d
 8001754:	0800180d 	.word	0x0800180d
 8001758:	0800187d 	.word	0x0800187d
 800175c:	0800187d 	.word	0x0800187d
 8001760:	0800187d 	.word	0x0800187d
 8001764:	0800187d 	.word	0x0800187d
 8001768:	0800187d 	.word	0x0800187d
 800176c:	08001885 	.word	0x08001885
 8001770:	080015bb 	.word	0x080015bb
 8001774:	0800187d 	.word	0x0800187d
 8001778:	0800187d 	.word	0x0800187d
 800177c:	080017ab 	.word	0x080017ab
 8001780:	0800187d 	.word	0x0800187d
 8001784:	08001679 	.word	0x08001679
 8001788:	0800187d 	.word	0x0800187d
 800178c:	0800187d 	.word	0x0800187d
 8001790:	080015bb 	.word	0x080015bb
      c = *fmt++;
 8001794:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8001796:	2b00      	cmp	r3, #0
 8001798:	f43f af68 	beq.w	800166c <chprintf+0x1bc>
      if (c == '*') {
 800179c:	2b2a      	cmp	r3, #42	; 0x2a
 800179e:	d174      	bne.n	800188a <chprintf+0x3da>
        c = *fmt++;
 80017a0:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 80017a2:	f859 2b04 	ldr.w	r2, [r9], #4
        c = *fmt++;
 80017a6:	3402      	adds	r4, #2
 80017a8:	e6c5      	b.n	8001536 <chprintf+0x86>
      if ((s = va_arg(ap, char *)) == 0) {
 80017aa:	f859 ab04 	ldr.w	sl, [r9], #4
 80017ae:	f1ba 0f00 	cmp.w	sl, #0
 80017b2:	f000 80bc 	beq.w	800192e <chprintf+0x47e>
 80017b6:	f89a 3000 	ldrb.w	r3, [sl]
      if (precision == 0) {
 80017ba:	2a00      	cmp	r2, #0
 80017bc:	f040 80aa 	bne.w	8001914 <chprintf+0x464>
      for (p = s; *p && (--precision >= 0); p++)
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80ab 	beq.w	800191c <chprintf+0x46c>
 80017c6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80017ca:	4655      	mov	r5, sl
 80017cc:	e001      	b.n	80017d2 <chprintf+0x322>
 80017ce:	42d3      	cmn	r3, r2
 80017d0:	d405      	bmi.n	80017de <chprintf+0x32e>
 80017d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80017d6:	ebaa 0305 	sub.w	r3, sl, r5
 80017da:	2e00      	cmp	r6, #0
 80017dc:	d1f7      	bne.n	80017ce <chprintf+0x31e>
 80017de:	eba5 050a 	sub.w	r5, r5, sl
 80017e2:	1b49      	subs	r1, r1, r5
      filler = ' ';
 80017e4:	2620      	movs	r6, #32
 80017e6:	3d01      	subs	r5, #1
 80017e8:	e713      	b.n	8001612 <chprintf+0x162>
      *p++ = va_arg(ap, int);
 80017ea:	f859 3b04 	ldr.w	r3, [r9], #4
 80017ee:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 80017f2:	3901      	subs	r1, #1
      filler = ' ';
 80017f4:	2620      	movs	r6, #32
    if ((width -= i) < 0) {
 80017f6:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 80017fa:	b918      	cbnz	r0, 8001804 <chprintf+0x354>
    if (width < 0) {
 80017fc:	2900      	cmp	r1, #0
      width = -width;
 80017fe:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8001802:	dc72      	bgt.n	80018ea <chprintf+0x43a>
    if (left_align == false) {
 8001804:	2500      	movs	r5, #0
 8001806:	f10d 0a0c 	add.w	sl, sp, #12
 800180a:	e70c      	b.n	8001626 <chprintf+0x176>
        l = va_arg(ap, int);
 800180c:	f859 cb04 	ldr.w	ip, [r9], #4
      if (l < 0) {
 8001810:	f1bc 0f00 	cmp.w	ip, #0
 8001814:	db5f      	blt.n	80018d6 <chprintf+0x426>
        if (do_sign) {
 8001816:	f1be 0f00 	cmp.w	lr, #0
 800181a:	f000 808e 	beq.w	800193a <chprintf+0x48a>
          *p++ = '+';
 800181e:	232b      	movs	r3, #43	; 0x2b
 8001820:	f88d 300c 	strb.w	r3, [sp, #12]
 8001824:	f10d 050d 	add.w	r5, sp, #13
 8001828:	f10d 0a0c 	add.w	sl, sp, #12
  q = p + MAX_FILLER;
 800182c:	f105 030b 	add.w	r3, r5, #11
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	461a      	mov	r2, r3
    i = (int)(l % radix);
 8001834:	4b47      	ldr	r3, [pc, #284]	; (8001954 <chprintf+0x4a4>)
 8001836:	fba3 e30c 	umull	lr, r3, r3, ip
 800183a:	08db      	lsrs	r3, r3, #3
 800183c:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8001840:	469e      	mov	lr, r3
 8001842:	ebac 034b 	sub.w	r3, ip, fp, lsl #1
    i += '0';
 8001846:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 8001848:	46e3      	mov	fp, ip
    *--q = i;
 800184a:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 800184c:	f1bb 0f09 	cmp.w	fp, #9
    *--q = i;
 8001850:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8001854:	46f4      	mov	ip, lr
  } while ((ll /= radix) != 0);
 8001856:	dced      	bgt.n	8001834 <chprintf+0x384>
 8001858:	469e      	mov	lr, r3
  i = (int)(p + MAX_FILLER - q);
 800185a:	9b01      	ldr	r3, [sp, #4]
 800185c:	eba3 0c02 	sub.w	ip, r3, r2
 8001860:	44ac      	add	ip, r5
 8001862:	4673      	mov	r3, lr
 8001864:	e001      	b.n	800186a <chprintf+0x3ba>
 8001866:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 800186a:	f805 3b01 	strb.w	r3, [r5], #1
  while (--i);
 800186e:	4565      	cmp	r5, ip
 8001870:	d1f9      	bne.n	8001866 <chprintf+0x3b6>
 8001872:	eba5 050a 	sub.w	r5, r5, sl
 8001876:	1b49      	subs	r1, r1, r5
 8001878:	3d01      	subs	r5, #1
 800187a:	e6ca      	b.n	8001612 <chprintf+0x162>
      *p++ = c;
 800187c:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8001880:	3901      	subs	r1, #1
 8001882:	e7b8      	b.n	80017f6 <chprintf+0x346>
      if (c == 0) {
 8001884:	f04f 0e08 	mov.w	lr, #8
 8001888:	e699      	b.n	80015be <chprintf+0x10e>
      c = *fmt++;
 800188a:	3401      	adds	r4, #1
    precision = 0;
 800188c:	2200      	movs	r2, #0
        while (c >= '0' && c <= '9') {
 800188e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8001892:	b2ed      	uxtb	r5, r5
 8001894:	2d09      	cmp	r5, #9
          precision = precision * 10 + c;
 8001896:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 800189a:	f63f ae4c 	bhi.w	8001536 <chprintf+0x86>
          c = *fmt++;
 800189e:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 80018a2:	eb05 024c 	add.w	r2, r5, ip, lsl #1
          if (c == 0) {
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f1      	bne.n	800188e <chprintf+0x3de>
 80018aa:	e6df      	b.n	800166c <chprintf+0x1bc>
      width = -width;
 80018ac:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 80018b0:	f89a 1000 	ldrb.w	r1, [sl]
 80018b4:	292d      	cmp	r1, #45	; 0x2d
 80018b6:	d021      	beq.n	80018fc <chprintf+0x44c>
        streamPut(chp, (uint8_t)filler);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	4631      	mov	r1, r6
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	4638      	mov	r0, r7
 80018c0:	4798      	blx	r3
      } while (++width != 0);
 80018c2:	f11b 0b01 	adds.w	fp, fp, #1
 80018c6:	d1f7      	bne.n	80018b8 <chprintf+0x408>
 80018c8:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 80018ca:	2d00      	cmp	r5, #0
 80018cc:	eba8 0803 	sub.w	r8, r8, r3
 80018d0:	f6bf aea9 	bge.w	8001626 <chprintf+0x176>
 80018d4:	e606      	b.n	80014e4 <chprintf+0x34>
        *p++ = '-';
 80018d6:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80018d8:	f1cc 0c00 	rsb	ip, ip, #0
        *p++ = '-';
 80018dc:	f88d 300c 	strb.w	r3, [sp, #12]
 80018e0:	f10d 050d 	add.w	r5, sp, #13
 80018e4:	f10d 0a0c 	add.w	sl, sp, #12
 80018e8:	e7a0      	b.n	800182c <chprintf+0x37c>
      if (*s == '-' && filler == '0') {
 80018ea:	f89d 100c 	ldrb.w	r1, [sp, #12]
      width = -width;
 80018ee:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 80018f2:	292d      	cmp	r1, #45	; 0x2d
    if (width < 0) {
 80018f4:	f10d 0a0c 	add.w	sl, sp, #12
 80018f8:	4605      	mov	r5, r0
      if (*s == '-' && filler == '0') {
 80018fa:	d1dd      	bne.n	80018b8 <chprintf+0x408>
 80018fc:	2e30      	cmp	r6, #48	; 0x30
 80018fe:	d1db      	bne.n	80018b8 <chprintf+0x408>
        streamPut(chp, (uint8_t)*s++);
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	4638      	mov	r0, r7
 8001904:	68d2      	ldr	r2, [r2, #12]
 8001906:	4790      	blx	r2
 8001908:	f10a 0a01 	add.w	sl, sl, #1
        n++;
 800190c:	f108 0801 	add.w	r8, r8, #1
        i--;
 8001910:	3d01      	subs	r5, #1
 8001912:	e7d1      	b.n	80018b8 <chprintf+0x408>
      for (p = s; *p && (--precision >= 0); p++)
 8001914:	b113      	cbz	r3, 800191c <chprintf+0x46c>
 8001916:	3a01      	subs	r2, #1
 8001918:	f57f af57 	bpl.w	80017ca <chprintf+0x31a>
    if ((width -= i) < 0) {
 800191c:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8001920:	b918      	cbnz	r0, 800192a <chprintf+0x47a>
    if (width < 0) {
 8001922:	2900      	cmp	r1, #0
      width = -width;
 8001924:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8001928:	dc0d      	bgt.n	8001946 <chprintf+0x496>
    if (left_align == false) {
 800192a:	2620      	movs	r6, #32
 800192c:	e68b      	b.n	8001646 <chprintf+0x196>
        s = "(null)";
 800192e:	f8df a028 	ldr.w	sl, [pc, #40]	; 8001958 <chprintf+0x4a8>
      if (precision == 0) {
 8001932:	2a00      	cmp	r2, #0
 8001934:	f43f af47 	beq.w	80017c6 <chprintf+0x316>
 8001938:	e7ed      	b.n	8001916 <chprintf+0x466>
    p = tmpbuf;
 800193a:	f10d 0a0c 	add.w	sl, sp, #12
 800193e:	4655      	mov	r5, sl
 8001940:	e774      	b.n	800182c <chprintf+0x37c>
  int n = 0;
 8001942:	4688      	mov	r8, r1
  return formatted_bytes;
 8001944:	e692      	b.n	800166c <chprintf+0x1bc>
      width = -width;
 8001946:	f8cd b004 	str.w	fp, [sp, #4]
    if (width < 0) {
 800194a:	2620      	movs	r6, #32
 800194c:	f04f 35ff 	mov.w	r5, #4294967295
 8001950:	e7ae      	b.n	80018b0 <chprintf+0x400>
 8001952:	bf00      	nop
 8001954:	cccccccd 	.word	0xcccccccd
 8001958:	08004d20 	.word	0x08004d20
 800195c:	00000000 	.word	0x00000000

08001960 <cmd_echo>:

#if (SHELL_CMD_ECHO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_echo(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc != 1) {
 8001960:	2901      	cmp	r1, #1
 8001962:	d003      	beq.n	800196c <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 8001964:	4a03      	ldr	r2, [pc, #12]	; (8001974 <cmd_echo+0x14>)
 8001966:	4904      	ldr	r1, [pc, #16]	; (8001978 <cmd_echo+0x18>)
 8001968:	f7ff bda2 	b.w	80014b0 <chprintf>
    return;
  }
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	4903      	ldr	r1, [pc, #12]	; (800197c <cmd_echo+0x1c>)
 8001970:	f7ff bd9e 	b.w	80014b0 <chprintf>
 8001974:	08004d28 	.word	0x08004d28
 8001978:	08004d38 	.word	0x08004d38
 800197c:	08004d44 	.word	0x08004d44

08001980 <cmd_info>:
  if (argc > 0) {
 8001980:	2900      	cmp	r1, #0
 8001982:	dc2e      	bgt.n	80019e2 <cmd_info+0x62>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8001984:	b510      	push	{r4, lr}
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 8001986:	4a19      	ldr	r2, [pc, #100]	; (80019ec <cmd_info+0x6c>)
 8001988:	4919      	ldr	r1, [pc, #100]	; (80019f0 <cmd_info+0x70>)
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 800198a:	b082      	sub	sp, #8
 800198c:	4604      	mov	r4, r0
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 800198e:	f7ff fd8f 	bl	80014b0 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 8001992:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <cmd_info+0x74>)
 8001994:	4918      	ldr	r1, [pc, #96]	; (80019f8 <cmd_info+0x78>)
 8001996:	4620      	mov	r0, r4
 8001998:	f7ff fd8a 	bl	80014b0 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 800199c:	4a17      	ldr	r2, [pc, #92]	; (80019fc <cmd_info+0x7c>)
 800199e:	4918      	ldr	r1, [pc, #96]	; (8001a00 <cmd_info+0x80>)
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff fd85 	bl	80014b0 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 80019a6:	4a17      	ldr	r2, [pc, #92]	; (8001a04 <cmd_info+0x84>)
 80019a8:	4917      	ldr	r1, [pc, #92]	; (8001a08 <cmd_info+0x88>)
 80019aa:	4620      	mov	r0, r4
 80019ac:	f7ff fd80 	bl	80014b0 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 80019b0:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <cmd_info+0x8c>)
 80019b2:	4917      	ldr	r1, [pc, #92]	; (8001a10 <cmd_info+0x90>)
 80019b4:	4620      	mov	r0, r4
 80019b6:	f7ff fd7b 	bl	80014b0 <chprintf>
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 80019ba:	4a16      	ldr	r2, [pc, #88]	; (8001a14 <cmd_info+0x94>)
 80019bc:	4916      	ldr	r1, [pc, #88]	; (8001a18 <cmd_info+0x98>)
 80019be:	4620      	mov	r0, r4
 80019c0:	f7ff fd76 	bl	80014b0 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 80019c4:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <cmd_info+0x9c>)
 80019c6:	4916      	ldr	r1, [pc, #88]	; (8001a20 <cmd_info+0xa0>)
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff fd71 	bl	80014b0 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <cmd_info+0xa4>)
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <cmd_info+0xa8>)
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <cmd_info+0xac>)
 80019d6:	4916      	ldr	r1, [pc, #88]	; (8001a30 <cmd_info+0xb0>)
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff fd69 	bl	80014b0 <chprintf>
}
 80019de:	b002      	add	sp, #8
 80019e0:	bd10      	pop	{r4, pc}
    shellUsage(chp, "info");
 80019e2:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <cmd_info+0xb4>)
 80019e4:	4914      	ldr	r1, [pc, #80]	; (8001a38 <cmd_info+0xb8>)
 80019e6:	f7ff bd63 	b.w	80014b0 <chprintf>
 80019ea:	bf00      	nop
 80019ec:	08004d54 	.word	0x08004d54
 80019f0:	08004d5c 	.word	0x08004d5c
 80019f4:	08004d70 	.word	0x08004d70
 80019f8:	08004db0 	.word	0x08004db0
 80019fc:	08004dc4 	.word	0x08004dc4
 8001a00:	08004dd0 	.word	0x08004dd0
 8001a04:	08004de4 	.word	0x08004de4
 8001a08:	08004df0 	.word	0x08004df0
 8001a0c:	08004e04 	.word	0x08004e04
 8001a10:	08004e1c 	.word	0x08004e1c
 8001a14:	08004e30 	.word	0x08004e30
 8001a18:	08004e5c 	.word	0x08004e5c
 8001a1c:	08004e70 	.word	0x08004e70
 8001a20:	08004e84 	.word	0x08004e84
 8001a24:	08004ec0 	.word	0x08004ec0
 8001a28:	08004e9c 	.word	0x08004e9c
 8001a2c:	08004e98 	.word	0x08004e98
 8001a30:	08004ea8 	.word	0x08004ea8
 8001a34:	08004d4c 	.word	0x08004d4c
 8001a38:	08004d38 	.word	0x08004d38
 8001a3c:	00000000 	.word	0x00000000

08001a40 <SVC_Handler>:
 8001a40:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8001a44:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001a46:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f383 8811 	msr	BASEPRI, r3
}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
	...

08001a60 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8001a60:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8001a62:	4c13      	ldr	r4, [pc, #76]	; (8001ab0 <chSchDoReschedule+0x50>)
  thread_t *tp = tqp->next;
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	69a0      	ldr	r0, [r4, #24]
  tqp->next             = tp->queue.next;
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	6022      	str	r2, [r4, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001a6c:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8001a6e:	6054      	str	r4, [r2, #4]
 8001a70:	f883 1020 	strb.w	r1, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001a74:	61a3      	str	r3, [r4, #24]
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 8001a76:	f7ff f80b 	bl	8000a90 <chSchReadyAheadI>
 8001a7a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8001a7c:	07db      	lsls	r3, r3, #31
 8001a7e:	4605      	mov	r5, r0
 8001a80:	d50b      	bpl.n	8001a9a <chSchDoReschedule+0x3a>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001a82:	f3ef 8309 	mrs	r3, PSP

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001a86:	69ea      	ldr	r2, [r5, #28]
 8001a88:	3b24      	subs	r3, #36	; 0x24
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d80d      	bhi.n	8001aaa <chSchDoReschedule+0x4a>
 8001a8e:	69a0      	ldr	r0, [r4, #24]
 8001a90:	4629      	mov	r1, r5
}
 8001a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 8001a96:	f7fe bc13 	b.w	80002c0 <_port_switch>
 8001a9a:	f7fe fef9 	bl	8000890 <_trace_switch.part.0>
 8001a9e:	f3ef 8309 	mrs	r3, PSP
 8001aa2:	69ea      	ldr	r2, [r5, #28]
 8001aa4:	3b24      	subs	r3, #36	; 0x24
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d9f1      	bls.n	8001a8e <chSchDoReschedule+0x2e>
 8001aaa:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <chSchDoReschedule+0x54>)
 8001aac:	f7fe ff30 	bl	8000910 <chSysHalt>
 8001ab0:	20004b48 	.word	0x20004b48
 8001ab4:	08004d0c 	.word	0x08004d0c
	...

08001ac0 <_dbg_check_unlock>:
void _dbg_check_unlock(void) {
 8001ac0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <_dbg_check_unlock+0x18>)
 8001ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac6:	b922      	cbnz	r2, 8001ad2 <_dbg_check_unlock+0x12>
 8001ac8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aca:	2900      	cmp	r1, #0
 8001acc:	dd01      	ble.n	8001ad2 <_dbg_check_unlock+0x12>
  _dbg_leave_lock();
 8001ace:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ad0:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 8001ad2:	4802      	ldr	r0, [pc, #8]	; (8001adc <_dbg_check_unlock+0x1c>)
 8001ad4:	f7fe ff1c 	bl	8000910 <chSysHalt>
 8001ad8:	20004b48 	.word	0x20004b48
 8001adc:	08004ecc 	.word	0x08004ecc

08001ae0 <chSysUnlock.lto_priv.4>:
static inline void chSysUnlock(void) {
 8001ae0:	b508      	push	{r3, lr}
  _dbg_check_unlock();
 8001ae2:	f7ff ffed 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <chSysUnlock.lto_priv.4+0x28>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d004      	beq.n	8001af8 <chSysUnlock.lto_priv.4+0x18>
 8001aee:	6999      	ldr	r1, [r3, #24]
 8001af0:	6893      	ldr	r3, [r2, #8]
 8001af2:	688a      	ldr	r2, [r1, #8]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d303      	bcc.n	8001b00 <chSysUnlock.lto_priv.4+0x20>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001af8:	2300      	movs	r3, #0
 8001afa:	f383 8811 	msr	BASEPRI, r3
}
 8001afe:	bd08      	pop	{r3, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <chSysUnlock.lto_priv.4+0x2c>)
 8001b02:	f7fe ff05 	bl	8000910 <chSysHalt>
 8001b06:	bf00      	nop
 8001b08:	20004b48 	.word	0x20004b48
 8001b0c:	0800541c 	.word	0x0800541c

08001b10 <_dbg_check_lock>:
void _dbg_check_lock(void) {
 8001b10:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <_dbg_check_lock+0x18>)
 8001b14:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	d002      	beq.n	8001b22 <_dbg_check_lock+0x12>
    chSysHalt("SV#4");
 8001b1c:	4803      	ldr	r0, [pc, #12]	; (8001b2c <_dbg_check_lock+0x1c>)
 8001b1e:	f7fe fef7 	bl	8000910 <chSysHalt>
  _dbg_enter_lock();
 8001b22:	2201      	movs	r2, #1
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b26:	bd08      	pop	{r3, pc}
 8001b28:	20004b48 	.word	0x20004b48
 8001b2c:	08004ed4 	.word	0x08004ed4

08001b30 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	2320      	movs	r3, #32
 8001b34:	4604      	mov	r4, r0
 8001b36:	460d      	mov	r5, r1
 8001b38:	4616      	mov	r6, r2
 8001b3a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001b3e:	f7ff ffe7 	bl	8001b10 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
 8001b42:	4632      	mov	r2, r6
 8001b44:	4629      	mov	r1, r5
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7fe ff1a 	bl	8000980 <chCoreAllocFromTopI>
 8001b4c:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8001b4e:	f7ff ffb7 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <chCoreAllocFromTop+0x44>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d004      	beq.n	8001b64 <chCoreAllocFromTop+0x34>
 8001b5a:	6999      	ldr	r1, [r3, #24]
 8001b5c:	6893      	ldr	r3, [r2, #8]
 8001b5e:	688a      	ldr	r2, [r1, #8]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d304      	bcc.n	8001b6e <chCoreAllocFromTop+0x3e>
 8001b64:	2300      	movs	r3, #0
 8001b66:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	bd70      	pop	{r4, r5, r6, pc}
 8001b6e:	4802      	ldr	r0, [pc, #8]	; (8001b78 <chCoreAllocFromTop+0x48>)
 8001b70:	f7fe fece 	bl	8000910 <chSysHalt>
 8001b74:	20004b48 	.word	0x20004b48
 8001b78:	08005440 	.word	0x08005440
 8001b7c:	00000000 	.word	0x00000000

08001b80 <cmd_systime>:

#if (SHELL_CMD_SYSTIME_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8001b80:	2900      	cmp	r1, #0
 8001b82:	dc1e      	bgt.n	8001bc2 <cmd_systime+0x42>
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {
 8001b84:	b538      	push	{r3, r4, r5, lr}
 8001b86:	4604      	mov	r4, r0
 8001b88:	2320      	movs	r3, #32
 8001b8a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001b8e:	f7ff ffbf 	bl	8001b10 <_dbg_check_lock>
  return (systime_t)STM32_ST_TIM->CNT;
 8001b92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b96:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8001b98:	f7ff ff92 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <cmd_systime+0x50>)
 8001b9e:	6819      	ldr	r1, [r3, #0]
 8001ba0:	4299      	cmp	r1, r3
 8001ba2:	d004      	beq.n	8001bae <cmd_systime+0x2e>
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	688b      	ldr	r3, [r1, #8]
 8001ba8:	6892      	ldr	r2, [r2, #8]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d30d      	bcc.n	8001bca <cmd_systime+0x4a>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f383 8811 	msr	BASEPRI, r3
    shellUsage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 8001bb4:	4907      	ldr	r1, [pc, #28]	; (8001bd4 <cmd_systime+0x54>)
 8001bb6:	462a      	mov	r2, r5
 8001bb8:	4620      	mov	r0, r4
}
 8001bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 8001bbe:	f7ff bc77 	b.w	80014b0 <chprintf>
    shellUsage(chp, "systime");
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <cmd_systime+0x58>)
 8001bc4:	4905      	ldr	r1, [pc, #20]	; (8001bdc <cmd_systime+0x5c>)
 8001bc6:	f7ff bc73 	b.w	80014b0 <chprintf>
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <cmd_systime+0x60>)
 8001bcc:	f7fe fea0 	bl	8000910 <chSysHalt>
 8001bd0:	20004b48 	.word	0x20004b48
 8001bd4:	08004ee4 	.word	0x08004ee4
 8001bd8:	08004edc 	.word	0x08004edc
 8001bdc:	08004d38 	.word	0x08004d38
 8001be0:	080054a8 	.word	0x080054a8
	...

08001bf0 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 8001bf0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8001bf4:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8001e30 <shellThread+0x240>
  int n;
  ShellConfig *scfg = p;
  BaseSequentialStream *chp = scfg->sc_channel;
 8001bf8:	6807      	ldr	r7, [r0, #0]
 8001bfa:	f8d9 3018 	ldr.w	r3, [r9, #24]
  const ShellCommand *scp = scfg->sc_commands;
 8001bfe:	6841      	ldr	r1, [r0, #4]
 8001c00:	4a7c      	ldr	r2, [pc, #496]	; (8001df4 <shellThread+0x204>)
 8001c02:	619a      	str	r2, [r3, #24]
THD_FUNCTION(shellThread, p) {
 8001c04:	b09b      	sub	sp, #108	; 0x6c
 8001c06:	9000      	str	r0, [sp, #0]
  const ShellCommand *scp = scfg->sc_commands;
 8001c08:	9101      	str	r1, [sp, #4]
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 8001c0a:	4638      	mov	r0, r7
 8001c0c:	497a      	ldr	r1, [pc, #488]	; (8001df8 <shellThread+0x208>)
 8001c0e:	f7ff fc4f 	bl	80014b0 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 8001c12:	497a      	ldr	r1, [pc, #488]	; (8001dfc <shellThread+0x20c>)
 8001c14:	4638      	mov	r0, r7
 8001c16:	f7ff fc4b 	bl	80014b0 <chprintf>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8001c1a:	f8d9 3018 	ldr.w	r3, [r9, #24]
#if !defined(_CHIBIOS_NIL_)
  while (!chThdShouldTerminateX()) {
 8001c1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c22:	075a      	lsls	r2, r3, #29
 8001c24:	d479      	bmi.n	8001d1a <shellThread+0x12a>
#else
  while (true) {
#endif
    chprintf(chp, SHELL_PROMPT_STR);
 8001c26:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8001e34 <shellThread+0x244>
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, SHELL_NEWLINE_STR);
 8001c2a:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 8001df8 <shellThread+0x208>
 8001c2e:	ae0a      	add	r6, sp, #40	; 0x28
    chprintf(chp, SHELL_PROMPT_STR);
 8001c30:	4651      	mov	r1, sl
 8001c32:	4638      	mov	r0, r7
 8001c34:	f7ff fc3c 	bl	80014b0 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 8001c38:	9b00      	ldr	r3, [sp, #0]
 8001c3a:	681c      	ldr	r4, [r3, #0]
  char *p = line;
 8001c3c:	4635      	mov	r5, r6
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	2201      	movs	r2, #1
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f10d 010f 	add.w	r1, sp, #15
 8001c48:	4620      	mov	r0, r4
 8001c4a:	4798      	blx	r3
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d07b      	beq.n	8001d48 <shellThread+0x158>
    if (c == 4) {
 8001c50:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8001c54:	2904      	cmp	r1, #4
 8001c56:	d073      	beq.n	8001d40 <shellThread+0x150>
    if ((c == 8) || (c == 127)) {
 8001c58:	2908      	cmp	r1, #8
 8001c5a:	d012      	beq.n	8001c82 <shellThread+0x92>
 8001c5c:	297f      	cmp	r1, #127	; 0x7f
 8001c5e:	d010      	beq.n	8001c82 <shellThread+0x92>
    if (c == '\r') {
 8001c60:	290d      	cmp	r1, #13
 8001c62:	d021      	beq.n	8001ca8 <shellThread+0xb8>
        p = line + len;
      }
      continue;
    }
#endif
    if (c < 0x20)
 8001c64:	291f      	cmp	r1, #31
 8001c66:	d9ea      	bls.n	8001c3e <shellThread+0x4e>
      continue;
    if (p < line + size - 1) {
 8001c68:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8001c6c:	429d      	cmp	r5, r3
 8001c6e:	d2e6      	bcs.n	8001c3e <shellThread+0x4e>
      streamPut(chp, c);
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	4620      	mov	r0, r4
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	4798      	blx	r3
      *p++ = (char)c;
 8001c78:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001c7c:	f805 3b01 	strb.w	r3, [r5], #1
 8001c80:	e7dd      	b.n	8001c3e <shellThread+0x4e>
      if (p != line) {
 8001c82:	42b5      	cmp	r5, r6
 8001c84:	d0db      	beq.n	8001c3e <shellThread+0x4e>
        streamPut(chp, 0x08);
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	2108      	movs	r1, #8
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	4798      	blx	r3
        streamPut(chp, 0x20);
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	2120      	movs	r1, #32
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	4620      	mov	r0, r4
 8001c98:	4798      	blx	r3
        streamPut(chp, 0x08);
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	2108      	movs	r1, #8
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4620      	mov	r0, r4
        p--;
 8001ca2:	3d01      	subs	r5, #1
        streamPut(chp, 0x08);
 8001ca4:	4798      	blx	r3
 8001ca6:	e7ca      	b.n	8001c3e <shellThread+0x4e>
      chprintf(chp, SHELL_NEWLINE_STR);
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4659      	mov	r1, fp
      *p = 0;
 8001cac:	f04f 0800 	mov.w	r8, #0
      chprintf(chp, SHELL_NEWLINE_STR);
 8001cb0:	f7ff fbfe 	bl	80014b0 <chprintf>
      *p = 0;
 8001cb4:	f885 8000 	strb.w	r8, [r5]
    lp = parse_arguments(line, &tokp);
 8001cb8:	a904      	add	r1, sp, #16
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f7ff fbc8 	bl	8001450 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8001cc0:	a904      	add	r1, sp, #16
    lp = parse_arguments(line, &tokp);
 8001cc2:	4604      	mov	r4, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	ad05      	add	r5, sp, #20
 8001cc8:	f7ff fbc2 	bl	8001450 <parse_arguments>
 8001ccc:	b160      	cbz	r0, 8001ce8 <shellThread+0xf8>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8001cce:	f1b8 0f04 	cmp.w	r8, #4
 8001cd2:	d02e      	beq.n	8001d32 <shellThread+0x142>
      args[n++] = lp;
 8001cd4:	f845 0b04 	str.w	r0, [r5], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8001cd8:	a904      	add	r1, sp, #16
 8001cda:	2000      	movs	r0, #0
      args[n++] = lp;
 8001cdc:	f108 0801 	add.w	r8, r8, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8001ce0:	f7ff fbb6 	bl	8001450 <parse_arguments>
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	d1f2      	bne.n	8001cce <shellThread+0xde>
    args[n] = NULL;
 8001ce8:	ab1a      	add	r3, sp, #104	; 0x68
 8001cea:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 8001cee:	f842 0c54 	str.w	r0, [r2, #-84]
    if (cmd != NULL) {
 8001cf2:	b164      	cbz	r4, 8001d0e <shellThread+0x11e>
      if (strcmp(cmd, "help") == 0) {
 8001cf4:	4942      	ldr	r1, [pc, #264]	; (8001e00 <shellThread+0x210>)
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7fe fba6 	bl	8000448 <strcmp>
 8001cfc:	bb68      	cbnz	r0, 8001d5a <shellThread+0x16a>
        if (n > 0) {
 8001cfe:	f1b8 0f00 	cmp.w	r8, #0
 8001d02:	d03b      	beq.n	8001d7c <shellThread+0x18c>
          shellUsage(chp, "help");
 8001d04:	4a3e      	ldr	r2, [pc, #248]	; (8001e00 <shellThread+0x210>)
 8001d06:	493f      	ldr	r1, [pc, #252]	; (8001e04 <shellThread+0x214>)
 8001d08:	4638      	mov	r0, r7
 8001d0a:	f7ff fbd1 	bl	80014b0 <chprintf>
 8001d0e:	f8d9 3018 	ldr.w	r3, [r9, #24]
  while (!chThdShouldTerminateX()) {
 8001d12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d16:	075b      	lsls	r3, r3, #29
 8001d18:	d58a      	bpl.n	8001c30 <shellThread+0x40>
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001d20:	f7ff fef6 	bl	8001b10 <_dbg_check_lock>
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8001d24:	4838      	ldr	r0, [pc, #224]	; (8001e08 <shellThread+0x218>)
 8001d26:	2100      	movs	r1, #0
 8001d28:	f7fe ff1a 	bl	8000b60 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff faa7 	bl	8001280 <chThdExitS>
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 8001d32:	4936      	ldr	r1, [pc, #216]	; (8001e0c <shellThread+0x21c>)
 8001d34:	4638      	mov	r0, r7
 8001d36:	f7ff fbbb 	bl	80014b0 <chprintf>
    args[n] = NULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	9309      	str	r3, [sp, #36]	; 0x24
    if (cmd != NULL) {
 8001d3e:	e7e6      	b.n	8001d0e <shellThread+0x11e>
      chprintf(chp, "^D");
 8001d40:	4933      	ldr	r1, [pc, #204]	; (8001e10 <shellThread+0x220>)
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff fbb4 	bl	80014b0 <chprintf>
      chprintf(chp, SHELL_NEWLINE_STR);
 8001d48:	492b      	ldr	r1, [pc, #172]	; (8001df8 <shellThread+0x208>)
 8001d4a:	4638      	mov	r0, r7
 8001d4c:	f7ff fbb0 	bl	80014b0 <chprintf>
      chprintf(chp, "logout");
 8001d50:	4930      	ldr	r1, [pc, #192]	; (8001e14 <shellThread+0x224>)
 8001d52:	4638      	mov	r0, r7
 8001d54:	f7ff fbac 	bl	80014b0 <chprintf>
      break;
 8001d58:	e7df      	b.n	8001d1a <shellThread+0x12a>
 8001d5a:	4d2f      	ldr	r5, [pc, #188]	; (8001e18 <shellThread+0x228>)
  while (scp->sc_name != NULL) {
 8001d5c:	482f      	ldr	r0, [pc, #188]	; (8001e1c <shellThread+0x22c>)
 8001d5e:	e002      	b.n	8001d66 <shellThread+0x176>
 8001d60:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8001d64:	b300      	cbz	r0, 8001da8 <shellThread+0x1b8>
    if (strcmp(scp->sc_name, name) == 0) {
 8001d66:	4621      	mov	r1, r4
 8001d68:	f7fe fb6e 	bl	8000448 <strcmp>
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	d1f7      	bne.n	8001d60 <shellThread+0x170>
      scp->sc_function(chp, argc, argv);
 8001d70:	686c      	ldr	r4, [r5, #4]
 8001d72:	aa05      	add	r2, sp, #20
 8001d74:	4641      	mov	r1, r8
 8001d76:	4638      	mov	r0, r7
 8001d78:	47a0      	blx	r4
      return false;
 8001d7a:	e7c8      	b.n	8001d0e <shellThread+0x11e>
        chprintf(chp, "Commands: help ");
 8001d7c:	4928      	ldr	r1, [pc, #160]	; (8001e20 <shellThread+0x230>)
 8001d7e:	4c26      	ldr	r4, [pc, #152]	; (8001e18 <shellThread+0x228>)
    chprintf(chp, "%s ", scp->sc_name);
 8001d80:	4d28      	ldr	r5, [pc, #160]	; (8001e24 <shellThread+0x234>)
        chprintf(chp, "Commands: help ");
 8001d82:	4638      	mov	r0, r7
 8001d84:	f7ff fb94 	bl	80014b0 <chprintf>
  while (scp->sc_name != NULL) {
 8001d88:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <shellThread+0x22c>)
    chprintf(chp, "%s ", scp->sc_name);
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	4638      	mov	r0, r7
 8001d8e:	f7ff fb8f 	bl	80014b0 <chprintf>
  while (scp->sc_name != NULL) {
 8001d92:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8001d96:	2a00      	cmp	r2, #0
 8001d98:	d1f7      	bne.n	8001d8a <shellThread+0x19a>
        if (scp != NULL)
 8001d9a:	9c01      	ldr	r4, [sp, #4]
 8001d9c:	b9e4      	cbnz	r4, 8001dd8 <shellThread+0x1e8>
        chprintf(chp, SHELL_NEWLINE_STR);
 8001d9e:	4659      	mov	r1, fp
 8001da0:	4638      	mov	r0, r7
 8001da2:	f7ff fb85 	bl	80014b0 <chprintf>
 8001da6:	e7b2      	b.n	8001d0e <shellThread+0x11e>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 8001da8:	9d01      	ldr	r5, [sp, #4]
 8001daa:	b15d      	cbz	r5, 8001dc4 <shellThread+0x1d4>
  while (scp->sc_name != NULL) {
 8001dac:	6828      	ldr	r0, [r5, #0]
 8001dae:	b918      	cbnz	r0, 8001db8 <shellThread+0x1c8>
 8001db0:	e008      	b.n	8001dc4 <shellThread+0x1d4>
 8001db2:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8001db6:	b128      	cbz	r0, 8001dc4 <shellThread+0x1d4>
    if (strcmp(scp->sc_name, name) == 0) {
 8001db8:	4621      	mov	r1, r4
 8001dba:	f7fe fb45 	bl	8000448 <strcmp>
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d1f7      	bne.n	8001db2 <shellThread+0x1c2>
 8001dc2:	e7d5      	b.n	8001d70 <shellThread+0x180>
        chprintf(chp, "%s", cmd);
 8001dc4:	4918      	ldr	r1, [pc, #96]	; (8001e28 <shellThread+0x238>)
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	4638      	mov	r0, r7
 8001dca:	f7ff fb71 	bl	80014b0 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8001dce:	4917      	ldr	r1, [pc, #92]	; (8001e2c <shellThread+0x23c>)
 8001dd0:	4638      	mov	r0, r7
 8001dd2:	f7ff fb6d 	bl	80014b0 <chprintf>
 8001dd6:	e79a      	b.n	8001d0e <shellThread+0x11e>
  while (scp->sc_name != NULL) {
 8001dd8:	6822      	ldr	r2, [r4, #0]
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	d0df      	beq.n	8001d9e <shellThread+0x1ae>
    chprintf(chp, "%s ", scp->sc_name);
 8001dde:	4d11      	ldr	r5, [pc, #68]	; (8001e24 <shellThread+0x234>)
 8001de0:	4629      	mov	r1, r5
 8001de2:	4638      	mov	r0, r7
 8001de4:	f7ff fb64 	bl	80014b0 <chprintf>
  while (scp->sc_name != NULL) {
 8001de8:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8001dec:	2a00      	cmp	r2, #0
 8001dee:	d1f7      	bne.n	8001de0 <shellThread+0x1f0>
 8001df0:	e7d5      	b.n	8001d9e <shellThread+0x1ae>
 8001df2:	bf00      	nop
 8001df4:	08004ef4 	.word	0x08004ef4
 8001df8:	080050ac 	.word	0x080050ac
 8001dfc:	08004efc 	.word	0x08004efc
 8001e00:	08004f3c 	.word	0x08004f3c
 8001e04:	08004d38 	.word	0x08004d38
 8001e08:	2000559c 	.word	0x2000559c
 8001e0c:	08004f24 	.word	0x08004f24
 8001e10:	08004f18 	.word	0x08004f18
 8001e14:	08004f1c 	.word	0x08004f1c
 8001e18:	080059c0 	.word	0x080059c0
 8001e1c:	08004eec 	.word	0x08004eec
 8001e20:	08004f44 	.word	0x08004f44
 8001e24:	08004f54 	.word	0x08004f54
 8001e28:	08004f58 	.word	0x08004f58
 8001e2c:	08004f5c 	.word	0x08004f5c
 8001e30:	20004b48 	.word	0x20004b48
 8001e34:	08004f10 	.word	0x08004f10
	...

08001e40 <cmd_exit>:
  if (argc > 0) {
 8001e40:	2900      	cmp	r1, #0
 8001e42:	dc0c      	bgt.n	8001e5e <cmd_exit+0x1e>
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 8001e44:	b508      	push	{r3, lr}
 8001e46:	2320      	movs	r3, #32
 8001e48:	f383 8811 	msr	BASEPRI, r3
 8001e4c:	f7ff fe60 	bl	8001b10 <_dbg_check_lock>
 8001e50:	4805      	ldr	r0, [pc, #20]	; (8001e68 <cmd_exit+0x28>)
 8001e52:	2100      	movs	r1, #0
 8001e54:	f7fe fe84 	bl	8000b60 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff fa11 	bl	8001280 <chThdExitS>
    shellUsage(chp, "exit");
 8001e5e:	4a03      	ldr	r2, [pc, #12]	; (8001e6c <cmd_exit+0x2c>)
 8001e60:	4903      	ldr	r1, [pc, #12]	; (8001e70 <cmd_exit+0x30>)
 8001e62:	f7ff bb25 	b.w	80014b0 <chprintf>
 8001e66:	bf00      	nop
 8001e68:	2000559c 	.word	0x2000559c
 8001e6c:	08004eec 	.word	0x08004eec
 8001e70:	08004d38 	.word	0x08004d38
	...

08001e80 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  thread_t *ctp = currp;
 8001e84:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001f48 <chMtxUnlock+0xc8>
void chMtxUnlock(mutex_t *mp) {
 8001e88:	4605      	mov	r5, r0
  thread_t *ctp = currp;
 8001e8a:	f8d8 7018 	ldr.w	r7, [r8, #24]
 8001e8e:	2320      	movs	r3, #32
 8001e90:	f383 8811 	msr	BASEPRI, r3
 8001e94:	f7ff fe3c 	bl	8001b10 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8001e98:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8001e9a:	b116      	cbz	r6, 8001ea2 <chMtxUnlock+0x22>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 8001e9c:	68b3      	ldr	r3, [r6, #8]
 8001e9e:	42bb      	cmp	r3, r7
 8001ea0:	d002      	beq.n	8001ea8 <chMtxUnlock+0x28>
  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8001ea2:	4827      	ldr	r0, [pc, #156]	; (8001f40 <chMtxUnlock+0xc0>)
 8001ea4:	f7fe fd34 	bl	8000910 <chSysHalt>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 8001ea8:	42ae      	cmp	r6, r5
 8001eaa:	d1fa      	bne.n	8001ea2 <chMtxUnlock+0x22>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8001eac:	68ec      	ldr	r4, [r5, #12]
 8001eae:	63bc      	str	r4, [r7, #56]	; 0x38
 *
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 8001eb0:	f7fe fd46 	bl	8000940 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001eb4:	f8d5 9000 	ldr.w	r9, [r5]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001eb8:	454d      	cmp	r5, r9
 8001eba:	d038      	beq.n	8001f2e <chMtxUnlock+0xae>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8001ebc:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8001ebe:	b15c      	cbz	r4, 8001ed8 <chMtxUnlock+0x58>
 8001ec0:	f7fe fd3e 	bl	8000940 <chDbgCheckClassS>
 8001ec4:	6823      	ldr	r3, [r4, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001ec6:	429c      	cmp	r4, r3
 8001ec8:	d003      	beq.n	8001ed2 <chMtxUnlock+0x52>
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	429e      	cmp	r6, r3
 8001ece:	bf38      	it	cc
 8001ed0:	461e      	movcc	r6, r3
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8001ed2:	68e4      	ldr	r4, [r4, #12]
      while (lmp != NULL) {
 8001ed4:	2c00      	cmp	r4, #0
 8001ed6:	d1f3      	bne.n	8001ec0 <chMtxUnlock+0x40>
  tqp->next             = tp->queue.next;
 8001ed8:	f8d9 3000 	ldr.w	r3, [r9]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8001edc:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
      ctp->prio = newprio;
 8001ee0:	60be      	str	r6, [r7, #8]

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001ee2:	4648      	mov	r0, r9
 8001ee4:	602b      	str	r3, [r5, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001ee6:	605d      	str	r5, [r3, #4]
      mp->next = tp->mtxlist;
 8001ee8:	e9c5 9202 	strd	r9, r2, [r5, #8]
      tp->mtxlist = mp;
 8001eec:	f8c9 5038 	str.w	r5, [r9, #56]	; 0x38
      (void) chSchReadyI(tp);
 8001ef0:	f7fe fdf6 	bl	8000ae0 <chSchReadyI>
  chDbgCheckClassS();
 8001ef4:	f7fe fd24 	bl	8000940 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8001ef8:	f7fe fd32 	bl	8000960 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
 8001efc:	f8d8 2000 	ldr.w	r2, [r8]
 8001f00:	f8d8 3018 	ldr.w	r3, [r8, #24]
  if (chSchIsRescRequiredI()) {
 8001f04:	6892      	ldr	r2, [r2, #8]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d816      	bhi.n	8001f3a <chMtxUnlock+0xba>
  _dbg_check_unlock();
 8001f0c:	f7ff fdd8 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001f10:	f8d8 3000 	ldr.w	r3, [r8]
 8001f14:	4543      	cmp	r3, r8
 8001f16:	d005      	beq.n	8001f24 <chMtxUnlock+0xa4>
 8001f18:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	6892      	ldr	r2, [r2, #8]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d307      	bcc.n	8001f34 <chMtxUnlock+0xb4>
 8001f24:	2300      	movs	r3, #0
 8001f26:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 8001f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      mp->owner = NULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60b3      	str	r3, [r6, #8]
 8001f32:	e7eb      	b.n	8001f0c <chMtxUnlock+0x8c>
 8001f34:	4803      	ldr	r0, [pc, #12]	; (8001f44 <chMtxUnlock+0xc4>)
 8001f36:	f7fe fceb 	bl	8000910 <chSysHalt>
    chSchDoRescheduleAhead();
 8001f3a:	f7ff fd91 	bl	8001a60 <chSchDoReschedule>
 8001f3e:	e7e5      	b.n	8001f0c <chMtxUnlock+0x8c>
 8001f40:	08005548 	.word	0x08005548
 8001f44:	08005428 	.word	0x08005428
 8001f48:	20004b48 	.word	0x20004b48
 8001f4c:	00000000 	.word	0x00000000

08001f50 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 8001f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f52:	4604      	mov	r4, r0
 8001f54:	2320      	movs	r3, #32
 8001f56:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001f5a:	f7ff fdd9 	bl	8001b10 <_dbg_check_lock>
  thread_t *ctp = currp;
 8001f5e:	4e3c      	ldr	r6, [pc, #240]	; (8002050 <chMtxLock+0x100>)
  chDbgCheckClassS();
 8001f60:	f7fe fcee 	bl	8000940 <chDbgCheckClassS>
  if (mp->owner != NULL) {
 8001f64:	68a0      	ldr	r0, [r4, #8]
  thread_t *ctp = currp;
 8001f66:	69b5      	ldr	r5, [r6, #24]
  if (mp->owner != NULL) {
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	d034      	beq.n	8001fd6 <chMtxLock+0x86>
      while (tp->prio < ctp->prio) {
 8001f6c:	68aa      	ldr	r2, [r5, #8]
 8001f6e:	6883      	ldr	r3, [r0, #8]
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d207      	bcs.n	8001f84 <chMtxLock+0x34>
        switch (tp->state) {
 8001f74:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8001f78:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d050      	beq.n	8002020 <chMtxLock+0xd0>
 8001f7e:	2b07      	cmp	r3, #7
 8001f80:	d038      	beq.n	8001ff4 <chMtxLock+0xa4>
 8001f82:	b36b      	cbz	r3, 8001fe0 <chMtxLock+0x90>
  thread_t *cp = (thread_t *)tqp;
 8001f84:	4623      	mov	r3, r4
 8001f86:	e003      	b.n	8001f90 <chMtxLock+0x40>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001f88:	6899      	ldr	r1, [r3, #8]
 8001f8a:	68aa      	ldr	r2, [r5, #8]
 8001f8c:	4291      	cmp	r1, r2
 8001f8e:	d302      	bcc.n	8001f96 <chMtxLock+0x46>
    cp = cp->queue.next;
 8001f90:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001f92:	429c      	cmp	r4, r3
 8001f94:	d1f8      	bne.n	8001f88 <chMtxLock+0x38>
  tp->queue.prev             = cp->queue.prev;
 8001f96:	685a      	ldr	r2, [r3, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 8001f98:	2006      	movs	r0, #6
 8001f9a:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 8001f9e:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8001fa0:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 8001fa2:	626c      	str	r4, [r5, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8001fa4:	f7ff f93c 	bl	8001220 <chSchGoSleepS>
      chDbgAssert(mp->owner == ctp, "not owner");
 8001fa8:	68a3      	ldr	r3, [r4, #8]
 8001faa:	429d      	cmp	r5, r3
 8001fac:	d002      	beq.n	8001fb4 <chMtxLock+0x64>
 8001fae:	4829      	ldr	r0, [pc, #164]	; (8002054 <chMtxLock+0x104>)
 8001fb0:	f7fe fcae 	bl	8000910 <chSysHalt>
      chDbgAssert(ctp->mtxlist == mp, "not owned");
 8001fb4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001fb6:	429c      	cmp	r4, r3
 8001fb8:	d1f9      	bne.n	8001fae <chMtxLock+0x5e>
  _dbg_check_unlock();
 8001fba:	f7ff fd81 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001fbe:	6833      	ldr	r3, [r6, #0]
 8001fc0:	42b3      	cmp	r3, r6
 8001fc2:	d004      	beq.n	8001fce <chMtxLock+0x7e>
 8001fc4:	69b2      	ldr	r2, [r6, #24]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	6892      	ldr	r2, [r2, #8]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d325      	bcc.n	800201a <chMtxLock+0xca>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f383 8811 	msr	BASEPRI, r3
}
 8001fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    mp->next = ctp->mtxlist;
 8001fd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001fd8:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 8001fdc:	63ac      	str	r4, [r5, #56]	; 0x38
 8001fde:	e7ec      	b.n	8001fba <chMtxLock+0x6a>
  tp->queue.prev->queue.next = tp->queue.next;
 8001fe0:	e9d0 3200 	ldrd	r3, r2, [r0]
          tp->state = CH_STATE_CURRENT;
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	f880 1020 	strb.w	r1, [r0, #32]
 8001fea:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001fec:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8001fee:	f7fe fd77 	bl	8000ae0 <chSchReadyI>
          break;
 8001ff2:	e7c7      	b.n	8001f84 <chMtxLock+0x34>
  tp->queue.prev->queue.next = tp->queue.next;
 8001ff4:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8001ff8:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8001ffa:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001ffc:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 8001ffe:	463b      	mov	r3, r7
 8002000:	e002      	b.n	8002008 <chMtxLock+0xb8>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002002:	6899      	ldr	r1, [r3, #8]
 8002004:	4291      	cmp	r1, r2
 8002006:	d302      	bcc.n	800200e <chMtxLock+0xbe>
    cp = cp->queue.next;
 8002008:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800200a:	429f      	cmp	r7, r3
 800200c:	d1f9      	bne.n	8002002 <chMtxLock+0xb2>
  tp->queue.prev             = cp->queue.prev;
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8002014:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8002016:	6058      	str	r0, [r3, #4]
 8002018:	e7b4      	b.n	8001f84 <chMtxLock+0x34>
 800201a:	480f      	ldr	r0, [pc, #60]	; (8002058 <chMtxLock+0x108>)
 800201c:	f7fe fc78 	bl	8000910 <chSysHalt>
  tp->queue.prev->queue.next = tp->queue.next;
 8002020:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8002024:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8002026:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8002028:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 800202a:	463b      	mov	r3, r7
 800202c:	e002      	b.n	8002034 <chMtxLock+0xe4>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800202e:	6899      	ldr	r1, [r3, #8]
 8002030:	4291      	cmp	r1, r2
 8002032:	d302      	bcc.n	800203a <chMtxLock+0xea>
    cp = cp->queue.next;
 8002034:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002036:	429f      	cmp	r7, r3
 8002038:	d1f9      	bne.n	800202e <chMtxLock+0xde>
  tp->queue.prev             = cp->queue.prev;
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8002040:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8002042:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8002044:	68b8      	ldr	r0, [r7, #8]
      while (tp->prio < ctp->prio) {
 8002046:	68aa      	ldr	r2, [r5, #8]
 8002048:	6883      	ldr	r3, [r0, #8]
 800204a:	429a      	cmp	r2, r3
 800204c:	d892      	bhi.n	8001f74 <chMtxLock+0x24>
 800204e:	e799      	b.n	8001f84 <chMtxLock+0x34>
 8002050:	20004b48 	.word	0x20004b48
 8002054:	080054d8 	.word	0x080054d8
 8002058:	08005428 	.word	0x08005428
 800205c:	00000000 	.word	0x00000000

08002060 <cmd_mem>:
#if (SHELL_CMD_MEM_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
  size_t n, total, largest;

  (void)argv;
  if (argc > 0) {
 8002060:	2900      	cmp	r1, #0
 8002062:	dc33      	bgt.n	80020cc <cmd_mem+0x6c>
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 8002066:	4c1d      	ldr	r4, [pc, #116]	; (80020dc <cmd_mem+0x7c>)
 8002068:	4605      	mov	r5, r0
 800206a:	f104 000c 	add.w	r0, r4, #12
 800206e:	f7ff ff6f 	bl	8001f50 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8002072:	6863      	ldr	r3, [r4, #4]
 8002074:	b373      	cbz	r3, 80020d4 <cmd_mem+0x74>
  lpages = 0U;
 8002076:	2400      	movs	r4, #0
  tpages = 0U;
 8002078:	4622      	mov	r2, r4
  n = 0U;
 800207a:	4627      	mov	r7, r4
  while (H_NEXT(qp) != NULL) {
 800207c:	e9d3 3100 	ldrd	r3, r1, [r3]
 8002080:	428c      	cmp	r4, r1
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 8002082:	f107 0701 	add.w	r7, r7, #1
    tpages += pages;
 8002086:	440a      	add	r2, r1
 8002088:	bf38      	it	cc
 800208a:	460c      	movcc	r4, r1
  while (H_NEXT(qp) != NULL) {
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f5      	bne.n	800207c <cmd_mem+0x1c>
 8002090:	00d6      	lsls	r6, r2, #3
 8002092:	00e4      	lsls	r4, r4, #3

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
    *largestp = lpages * CH_HEAP_ALIGNMENT;
  }
  H_UNLOCK(heapp);
 8002094:	4812      	ldr	r0, [pc, #72]	; (80020e0 <cmd_mem+0x80>)
 8002096:	f7ff fef3 	bl	8001e80 <chMtxUnlock>
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <cmd_mem+0x84>)
    shellUsage(chp, "mem");
    return;
  }
  n = chHeapStatus(NULL, &total, &largest);
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 800209c:	4912      	ldr	r1, [pc, #72]	; (80020e8 <cmd_mem+0x88>)
 800209e:	e9d3 3200 	ldrd	r3, r2, [r3]
 80020a2:	4628      	mov	r0, r5
 80020a4:	1ad2      	subs	r2, r2, r3
 80020a6:	f7ff fa03 	bl	80014b0 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 80020aa:	463a      	mov	r2, r7
 80020ac:	490f      	ldr	r1, [pc, #60]	; (80020ec <cmd_mem+0x8c>)
 80020ae:	4628      	mov	r0, r5
 80020b0:	f7ff f9fe 	bl	80014b0 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 80020b4:	4632      	mov	r2, r6
 80020b6:	490e      	ldr	r1, [pc, #56]	; (80020f0 <cmd_mem+0x90>)
 80020b8:	4628      	mov	r0, r5
 80020ba:	f7ff f9f9 	bl	80014b0 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 80020be:	4622      	mov	r2, r4
 80020c0:	4628      	mov	r0, r5
 80020c2:	490c      	ldr	r1, [pc, #48]	; (80020f4 <cmd_mem+0x94>)
}
 80020c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 80020c8:	f7ff b9f2 	b.w	80014b0 <chprintf>
    shellUsage(chp, "mem");
 80020cc:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <cmd_mem+0x98>)
 80020ce:	490b      	ldr	r1, [pc, #44]	; (80020fc <cmd_mem+0x9c>)
 80020d0:	f7ff b9ee 	b.w	80014b0 <chprintf>
  while (H_NEXT(qp) != NULL) {
 80020d4:	461c      	mov	r4, r3
 80020d6:	461e      	mov	r6, r3
  n = 0U;
 80020d8:	461f      	mov	r7, r3
 80020da:	e7db      	b.n	8002094 <cmd_mem+0x34>
 80020dc:	200054f8 	.word	0x200054f8
 80020e0:	20005504 	.word	0x20005504
 80020e4:	200054f0 	.word	0x200054f0
 80020e8:	08004f68 	.word	0x08004f68
 80020ec:	08004f88 	.word	0x08004f88
 80020f0:	08004fa0 	.word	0x08004fa0
 80020f4:	08004fc0 	.word	0x08004fc0
 80020f8:	08004f64 	.word	0x08004f64
 80020fc:	08004d38 	.word	0x08004d38

08002100 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8002100:	b510      	push	{r4, lr}
 8002102:	2320      	movs	r3, #32
 8002104:	4604      	mov	r4, r0
 8002106:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800210a:	f7ff fd01 	bl	8001b10 <_dbg_check_lock>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800210e:	4621      	mov	r1, r4
 8002110:	2008      	movs	r0, #8
 8002112:	f7ff f8dd 	bl	80012d0 <chSchGoSleepTimeoutS>
  _dbg_check_unlock();
 8002116:	f7ff fcd3 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <chThdSleep+0x3c>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d004      	beq.n	800212c <chThdSleep+0x2c>
 8002122:	6999      	ldr	r1, [r3, #24]
 8002124:	6893      	ldr	r3, [r2, #8]
 8002126:	688a      	ldr	r2, [r1, #8]
 8002128:	429a      	cmp	r2, r3
 800212a:	d303      	bcc.n	8002134 <chThdSleep+0x34>
 800212c:	2300      	movs	r3, #0
 800212e:	f383 8811 	msr	BASEPRI, r3
}
 8002132:	bd10      	pop	{r4, pc}
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <chThdSleep+0x40>)
 8002136:	f7fe fbeb 	bl	8000910 <chSysHalt>
 800213a:	bf00      	nop
 800213c:	20004b48 	.word	0x20004b48
 8002140:	0800541c 	.word	0x0800541c
	...

08002150 <Thread1>:

/*
 * LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8002150:	b508      	push	{r3, lr}
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <Thread1+0x28>)
 8002154:	4a09      	ldr	r2, [pc, #36]	; (800217c <Thread1+0x2c>)
 8002156:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOC, GPIOC_LED);
 8002158:	4c09      	ldr	r4, [pc, #36]	; (8002180 <Thread1+0x30>)
 800215a:	619a      	str	r2, [r3, #24]
 800215c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8002160:	462e      	mov	r6, r5
 8002162:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(500);
 8002164:	f241 3088 	movw	r0, #5000	; 0x1388
 8002168:	f7ff ffca 	bl	8002100 <chThdSleep>
    palClearPad(GPIOC, GPIOC_LED);
 800216c:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(500);
 800216e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002172:	f7ff ffc5 	bl	8002100 <chThdSleep>
  while (true) {
 8002176:	e7f4      	b.n	8002162 <Thread1+0x12>
 8002178:	20004b48 	.word	0x20004b48
 800217c:	08004fe0 	.word	0x08004fe0
 8002180:	40020800 	.word	0x40020800
	...

08002190 <_sdc_wait_for_transfer_state>:
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
 8002190:	b570      	push	{r4, r5, r6, lr}
        MMCSD_R1_ERROR(resp[0])) {
 8002192:	4e10      	ldr	r6, [pc, #64]	; (80021d4 <_sdc_wait_for_transfer_state+0x44>)
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
 8002194:	b082      	sub	sp, #8
 8002196:	4604      	mov	r4, r0
 8002198:	e003      	b.n	80021a2 <_sdc_wait_for_transfer_state+0x12>
    switch (MMCSD_R1_STS(resp[0])) {
 800219a:	2d02      	cmp	r5, #2
 800219c:	d816      	bhi.n	80021cc <_sdc_wait_for_transfer_state+0x3c>
  chThdSleep(delay);
 800219e:	f7ff ffaf 	bl	8002100 <chThdSleep>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
 80021a2:	ab01      	add	r3, sp, #4
 80021a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80021a6:	210d      	movs	r1, #13
 80021a8:	4620      	mov	r0, r4
 80021aa:	f7fe fef9 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 80021ae:	4603      	mov	r3, r0
 80021b0:	200a      	movs	r0, #10
 80021b2:	b943      	cbnz	r3, 80021c6 <_sdc_wait_for_transfer_state+0x36>
        MMCSD_R1_ERROR(resp[0])) {
 80021b4:	9a01      	ldr	r2, [sp, #4]
    switch (MMCSD_R1_STS(resp[0])) {
 80021b6:	f3c2 2143 	ubfx	r1, r2, #9, #4
                                   sdcp->rca, resp) ||
 80021ba:	4232      	tst	r2, r6
    switch (MMCSD_R1_STS(resp[0])) {
 80021bc:	f1a1 0505 	sub.w	r5, r1, #5
                                   sdcp->rca, resp) ||
 80021c0:	d104      	bne.n	80021cc <_sdc_wait_for_transfer_state+0x3c>
    switch (MMCSD_R1_STS(resp[0])) {
 80021c2:	2904      	cmp	r1, #4
 80021c4:	d1e9      	bne.n	800219a <_sdc_wait_for_transfer_state+0xa>
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	b002      	add	sp, #8
 80021ca:	bd70      	pop	{r4, r5, r6, pc}
    switch (MMCSD_R1_STS(resp[0])) {
 80021cc:	2301      	movs	r3, #1
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	b002      	add	sp, #8
 80021d2:	bd70      	pop	{r4, r5, r6, pc}
 80021d4:	fdffe008 	.word	0xfdffe008
	...

080021e0 <sdcErase.constprop.0>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdcErase(SDCDriver *sdcp, uint32_t startblk, uint32_t endblk) {
 80021e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t resp[1];

  osalDbgCheck((sdcp != NULL));
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 80021e2:	4c20      	ldr	r4, [pc, #128]	; (8002264 <sdcErase.constprop.0+0x84>)
 80021e4:	7923      	ldrb	r3, [r4, #4]
 80021e6:	2b05      	cmp	r3, #5
bool sdcErase(SDCDriver *sdcp, uint32_t startblk, uint32_t endblk) {
 80021e8:	b082      	sub	sp, #8
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 80021ea:	d113      	bne.n	8002214 <sdcErase.constprop.0+0x34>

  /* Erase operation in progress.*/
  sdcp->state = BLK_WRITING;

  /* Handling command differences between HC and normal cards.*/
  if ((sdcp->cardmode & SDC_MODE_HIGH_CAPACITY) != 0U) {
 80021ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021ee:	06db      	lsls	r3, r3, #27
 80021f0:	4605      	mov	r5, r0
  sdcp->state = BLK_WRITING;
 80021f2:	f04f 0207 	mov.w	r2, #7
    startblk *= MMCSD_BLOCK_SIZE;
 80021f6:	bf48      	it	mi
 80021f8:	0245      	lslmi	r5, r0, #9
    endblk *= MMCSD_BLOCK_SIZE;
  }

  if (_sdc_wait_for_transfer_state(sdcp)) {
 80021fa:	481a      	ldr	r0, [pc, #104]	; (8002264 <sdcErase.constprop.0+0x84>)
  sdcp->state = BLK_WRITING;
 80021fc:	7122      	strb	r2, [r4, #4]
 80021fe:	460e      	mov	r6, r1
    endblk *= MMCSD_BLOCK_SIZE;
 8002200:	bf48      	it	mi
 8002202:	024e      	lslmi	r6, r1, #9
  if (_sdc_wait_for_transfer_state(sdcp)) {
 8002204:	f7ff ffc4 	bl	8002190 <_sdc_wait_for_transfer_state>
 8002208:	b138      	cbz	r0, 800221a <sdcErase.constprop.0+0x3a>
  sdcp->state = BLK_READY;
  return HAL_SUCCESS;

failed:
  sdcp->state = BLK_READY;
  return HAL_FAILED;
 800220a:	2001      	movs	r0, #1
 800220c:	2305      	movs	r3, #5
 800220e:	7123      	strb	r3, [r4, #4]
}
 8002210:	b002      	add	sp, #8
 8002212:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002214:	4814      	ldr	r0, [pc, #80]	; (8002268 <sdcErase.constprop.0+0x88>)
 8002216:	f7fe fb7b 	bl	8000910 <chSysHalt>
  if ((sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_ERASE_RW_BLK_START,
 800221a:	4812      	ldr	r0, [pc, #72]	; (8002264 <sdcErase.constprop.0+0x84>)
 800221c:	462a      	mov	r2, r5
 800221e:	ab01      	add	r3, sp, #4
 8002220:	2120      	movs	r1, #32
 8002222:	f7fe febd 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 8002226:	2800      	cmp	r0, #0
 8002228:	d1ef      	bne.n	800220a <sdcErase.constprop.0+0x2a>
      MMCSD_R1_ERROR(resp[0])) {
 800222a:	9b01      	ldr	r3, [sp, #4]
 800222c:	4d0f      	ldr	r5, [pc, #60]	; (800226c <sdcErase.constprop.0+0x8c>)
                                  startblk, resp) != HAL_SUCCESS) ||
 800222e:	422b      	tst	r3, r5
 8002230:	d1eb      	bne.n	800220a <sdcErase.constprop.0+0x2a>
  if ((sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_ERASE_RW_BLK_END,
 8002232:	480c      	ldr	r0, [pc, #48]	; (8002264 <sdcErase.constprop.0+0x84>)
 8002234:	4632      	mov	r2, r6
 8002236:	ab01      	add	r3, sp, #4
 8002238:	2121      	movs	r1, #33	; 0x21
 800223a:	f7fe feb1 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 800223e:	2800      	cmp	r0, #0
 8002240:	d1e3      	bne.n	800220a <sdcErase.constprop.0+0x2a>
      MMCSD_R1_ERROR(resp[0])) {
 8002242:	9a01      	ldr	r2, [sp, #4]
                                  endblk, resp) != HAL_SUCCESS) ||
 8002244:	402a      	ands	r2, r5
 8002246:	d1e0      	bne.n	800220a <sdcErase.constprop.0+0x2a>
  if ((sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_ERASE,
 8002248:	4806      	ldr	r0, [pc, #24]	; (8002264 <sdcErase.constprop.0+0x84>)
 800224a:	ab01      	add	r3, sp, #4
 800224c:	2126      	movs	r1, #38	; 0x26
 800224e:	f7fe fea7 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 8002252:	2800      	cmp	r0, #0
 8002254:	d1d9      	bne.n	800220a <sdcErase.constprop.0+0x2a>
      MMCSD_R1_ERROR(resp[0])) {
 8002256:	9b01      	ldr	r3, [sp, #4]
                                  0, resp) != HAL_SUCCESS) ||
 8002258:	422b      	tst	r3, r5
 800225a:	d1d6      	bne.n	800220a <sdcErase.constprop.0+0x2a>
  if (_sdc_wait_for_transfer_state(sdcp)) {
 800225c:	4801      	ldr	r0, [pc, #4]	; (8002264 <sdcErase.constprop.0+0x84>)
 800225e:	f7ff ff97 	bl	8002190 <_sdc_wait_for_transfer_state>
 8002262:	e7d3      	b.n	800220c <sdcErase.constprop.0+0x2c>
 8002264:	200008f8 	.word	0x200008f8
 8002268:	080057f4 	.word	0x080057f4
 800226c:	fdffe008 	.word	0xfdffe008

08002270 <chThdExit>:
void chThdExit(msg_t msg) {
 8002270:	b508      	push	{r3, lr}
 8002272:	4604      	mov	r4, r0
 8002274:	2320      	movs	r3, #32
 8002276:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800227a:	f7ff fc49 	bl	8001b10 <_dbg_check_lock>
  chThdExitS(msg);
 800227e:	4620      	mov	r0, r4
 8002280:	f7fe fffe 	bl	8001280 <chThdExitS>
	...

08002290 <chThdRelease>:
void chThdRelease(thread_t *tp) {
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	2320      	movs	r3, #32
 8002294:	4604      	mov	r4, r0
 8002296:	f383 8811 	msr	BASEPRI, r3
 800229a:	f7ff fc39 	bl	8001b10 <_dbg_check_lock>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 800229e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80022a2:	b1b3      	cbz	r3, 80022d2 <chThdRelease+0x42>
  tp->refs--;
 80022a4:	3b01      	subs	r3, #1
 80022a6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80022aa:	6a23      	ldr	r3, [r4, #32]
 80022ac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d014      	beq.n	80022de <chThdRelease+0x4e>
  _dbg_check_unlock();
 80022b4:	f7ff fc04 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80022b8:	4b4e      	ldr	r3, [pc, #312]	; (80023f4 <chThdRelease+0x164>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d004      	beq.n	80022ca <chThdRelease+0x3a>
 80022c0:	6999      	ldr	r1, [r3, #24]
 80022c2:	6893      	ldr	r3, [r2, #8]
 80022c4:	688a      	ldr	r2, [r1, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d306      	bcc.n	80022d8 <chThdRelease+0x48>
 80022ca:	2300      	movs	r3, #0
 80022cc:	f383 8811 	msr	BASEPRI, r3
}
 80022d0:	bd70      	pop	{r4, r5, r6, pc}
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 80022d2:	4849      	ldr	r0, [pc, #292]	; (80023f8 <chThdRelease+0x168>)
 80022d4:	f7fe fb1c 	bl	8000910 <chSysHalt>
 80022d8:	4848      	ldr	r0, [pc, #288]	; (80023fc <chThdRelease+0x16c>)
 80022da:	f7fe fb19 	bl	8000910 <chSysHalt>
    REG_REMOVE(tp);
 80022de:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80022e2:	611a      	str	r2, [r3, #16]
 80022e4:	6922      	ldr	r2, [r4, #16]
 80022e6:	4d43      	ldr	r5, [pc, #268]	; (80023f4 <chThdRelease+0x164>)
 80022e8:	6153      	str	r3, [r2, #20]
  _dbg_check_unlock();
 80022ea:	f7ff fbe9 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80022ee:	682b      	ldr	r3, [r5, #0]
 80022f0:	42ab      	cmp	r3, r5
 80022f2:	d004      	beq.n	80022fe <chThdRelease+0x6e>
 80022f4:	69aa      	ldr	r2, [r5, #24]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	6892      	ldr	r2, [r2, #8]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3ec      	bcc.n	80022d8 <chThdRelease+0x48>
 80022fe:	2300      	movs	r3, #0
 8002300:	f383 8811 	msr	BASEPRI, r3
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8002304:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b01      	cmp	r3, #1
 800230e:	d023      	beq.n	8002358 <chThdRelease+0xc8>
 8002310:	2b02      	cmp	r3, #2
 8002312:	d1dd      	bne.n	80022d0 <chThdRelease+0x40>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8002314:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8002316:	69e4      	ldr	r4, [r4, #28]
 8002318:	2320      	movs	r3, #32
 800231a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800231e:	f7ff fbf7 	bl	8001b10 <_dbg_check_lock>
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  struct pool_header *php = objp;

  chDbgCheckClassI();
 8002322:	f7fe fb1d 	bl	8000960 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) &&
 8002326:	b1a6      	cbz	r6, 8002352 <chThdRelease+0xc2>
 8002328:	b19c      	cbz	r4, 8002352 <chThdRelease+0xc2>
 800232a:	68b3      	ldr	r3, [r6, #8]
 800232c:	3b01      	subs	r3, #1
 800232e:	421c      	tst	r4, r3
 8002330:	d10f      	bne.n	8002352 <chThdRelease+0xc2>
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8002332:	6833      	ldr	r3, [r6, #0]
 8002334:	6023      	str	r3, [r4, #0]
  mp->next = php;
 8002336:	6034      	str	r4, [r6, #0]
  _dbg_check_unlock();
 8002338:	f7ff fbc2 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	42ab      	cmp	r3, r5
 8002340:	d0c3      	beq.n	80022ca <chThdRelease+0x3a>
 8002342:	69aa      	ldr	r2, [r5, #24]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	6892      	ldr	r2, [r2, #8]
 8002348:	429a      	cmp	r2, r3
 800234a:	d2be      	bcs.n	80022ca <chThdRelease+0x3a>
 800234c:	482c      	ldr	r0, [pc, #176]	; (8002400 <chThdRelease+0x170>)
 800234e:	f7fe fadf 	bl	8000910 <chSysHalt>
  chDbgCheck((mp != NULL) &&
 8002352:	482c      	ldr	r0, [pc, #176]	; (8002404 <chThdRelease+0x174>)
 8002354:	f7fe fadc 	bl	8000910 <chSysHalt>
      chHeapFree(chThdGetWorkingAreaX(tp));
 8002358:	69e4      	ldr	r4, [r4, #28]
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 800235a:	b3cc      	cbz	r4, 80023d0 <chThdRelease+0x140>
 800235c:	0763      	lsls	r3, r4, #29
 800235e:	d137      	bne.n	80023d0 <chThdRelease+0x140>
  heapp = H_HEAP(hp);
 8002360:	e954 5302 	ldrd	r5, r3, [r4, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8002364:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8002366:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 8002368:	f105 060c 	add.w	r6, r5, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800236c:	f844 3c04 	str.w	r3, [r4, #-4]
  qp = &heapp->header;
 8002370:	3504      	adds	r5, #4
  H_LOCK(heapp);
 8002372:	4630      	mov	r0, r6
 8002374:	f7ff fdec 	bl	8001f50 <chMtxLock>
  hp = (heap_header_t *)p - 1U;
 8002378:	f1a4 0108 	sub.w	r1, r4, #8
  qp = &heapp->header;
 800237c:	462b      	mov	r3, r5
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 800237e:	4299      	cmp	r1, r3
 8002380:	d305      	bcc.n	800238e <chThdRelease+0xfe>
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	3201      	adds	r2, #1
 8002386:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800238a:	4291      	cmp	r1, r2
 800238c:	d320      	bcc.n	80023d0 <chThdRelease+0x140>
    if (((qp == &heapp->header) || (hp > qp)) &&
 800238e:	429d      	cmp	r5, r3
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8002390:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8002392:	d001      	beq.n	8002398 <chThdRelease+0x108>
 8002394:	4299      	cmp	r1, r3
 8002396:	d919      	bls.n	80023cc <chThdRelease+0x13c>
 8002398:	b10a      	cbz	r2, 800239e <chThdRelease+0x10e>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800239a:	4291      	cmp	r1, r2
 800239c:	d216      	bcs.n	80023cc <chThdRelease+0x13c>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800239e:	f854 0c04 	ldr.w	r0, [r4, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 80023a2:	f844 2c08 	str.w	r2, [r4, #-8]
      H_NEXT(qp) = hp;
 80023a6:	6019      	str	r1, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80023a8:	1c42      	adds	r2, r0, #1
 80023aa:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80023ae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80023b2:	42a8      	cmp	r0, r5
 80023b4:	d016      	beq.n	80023e4 <chThdRelease+0x154>
      if ((H_LIMIT(qp) == hp)) {
 80023b6:	6858      	ldr	r0, [r3, #4]
 80023b8:	1c42      	adds	r2, r0, #1
 80023ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80023be:	4291      	cmp	r1, r2
 80023c0:	d009      	beq.n	80023d6 <chThdRelease+0x146>
  H_UNLOCK(heapp);
 80023c2:	4630      	mov	r0, r6
}
 80023c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80023c8:	f7ff bd5a 	b.w	8001e80 <chMtxUnlock>
    qp = H_NEXT(qp);
 80023cc:	4613      	mov	r3, r2
 80023ce:	e7d6      	b.n	800237e <chThdRelease+0xee>
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 80023d0:	480d      	ldr	r0, [pc, #52]	; (8002408 <chThdRelease+0x178>)
 80023d2:	f7fe fa9d 	bl	8000910 <chSysHalt>
        H_NEXT(qp) = H_NEXT(hp);
 80023d6:	e954 1202 	ldrd	r1, r2, [r4, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80023da:	3201      	adds	r2, #1
 80023dc:	4410      	add	r0, r2
        H_NEXT(qp) = H_NEXT(hp);
 80023de:	6019      	str	r1, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80023e0:	6058      	str	r0, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 80023e2:	e7ee      	b.n	80023c2 <chThdRelease+0x132>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80023e4:	e9d0 0500 	ldrd	r0, r5, [r0]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80023e8:	442a      	add	r2, r5
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80023ea:	f844 0c08 	str.w	r0, [r4, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80023ee:	f844 2c04 	str.w	r2, [r4, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80023f2:	e7e0      	b.n	80023b6 <chThdRelease+0x126>
 80023f4:	20004b48 	.word	0x20004b48
 80023f8:	08005588 	.word	0x08005588
 80023fc:	0800541c 	.word	0x0800541c
 8002400:	0800544c 	.word	0x0800544c
 8002404:	08005530 	.word	0x08005530
 8002408:	0800553c 	.word	0x0800553c
 800240c:	00000000 	.word	0x00000000

08002410 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 8002410:	b570      	push	{r4, r5, r6, lr}
 8002412:	2320      	movs	r3, #32
 8002414:	4604      	mov	r4, r0
 8002416:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800241a:	f7ff fb79 	bl	8001b10 <_dbg_check_lock>
  thread_t *ntp;

  chSysLock();
  ntp = tp->newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 800241e:	4e12      	ldr	r6, [pc, #72]	; (8002468 <chRegNextThread+0x58>)
  ntp = tp->newer;
 8002420:	6925      	ldr	r5, [r4, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 8002422:	42b5      	cmp	r5, r6
 8002424:	d01e      	beq.n	8002464 <chRegNextThread+0x54>
  /*lint -restore*/
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8002426:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800242a:	2bff      	cmp	r3, #255	; 0xff
 800242c:	d017      	beq.n	800245e <chRegNextThread+0x4e>
    ntp->refs++;
 800242e:	3301      	adds	r3, #1
 8002430:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
  _dbg_check_unlock();
 8002434:	f7ff fb44 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002438:	6833      	ldr	r3, [r6, #0]
 800243a:	42b3      	cmp	r3, r6
 800243c:	d004      	beq.n	8002448 <chRegNextThread+0x38>
 800243e:	69b2      	ldr	r2, [r6, #24]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	6892      	ldr	r2, [r2, #8]
 8002444:	429a      	cmp	r2, r3
 8002446:	d307      	bcc.n	8002458 <chRegNextThread+0x48>
 8002448:	2300      	movs	r3, #0
 800244a:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 800244e:	4620      	mov	r0, r4
 8002450:	f7ff ff1e 	bl	8002290 <chThdRelease>
#endif

  return ntp;
}
 8002454:	4628      	mov	r0, r5
 8002456:	bd70      	pop	{r4, r5, r6, pc}
 8002458:	4804      	ldr	r0, [pc, #16]	; (800246c <chRegNextThread+0x5c>)
 800245a:	f7fe fa59 	bl	8000910 <chSysHalt>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 800245e:	4804      	ldr	r0, [pc, #16]	; (8002470 <chRegNextThread+0x60>)
 8002460:	f7fe fa56 	bl	8000910 <chSysHalt>
    ntp = NULL;
 8002464:	2500      	movs	r5, #0
 8002466:	e7e5      	b.n	8002434 <chRegNextThread+0x24>
 8002468:	20004b48 	.word	0x20004b48
 800246c:	0800549c 	.word	0x0800549c
 8002470:	080055d8 	.word	0x080055d8
	...

08002480 <cmd_threads>:
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8002480:	2900      	cmp	r1, #0
 8002482:	dc45      	bgt.n	8002510 <cmd_threads+0x90>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    shellUsage(chp, "threads");
    return;
  }
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8002488:	4925      	ldr	r1, [pc, #148]	; (8002520 <cmd_threads+0xa0>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800248a:	b086      	sub	sp, #24
 800248c:	4607      	mov	r7, r0
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 800248e:	f7ff f80f 	bl	80014b0 <chprintf>
 8002492:	2320      	movs	r3, #32
 8002494:	f383 8811 	msr	BASEPRI, r3
  tp = ch.rlist.newer;
 8002498:	4d22      	ldr	r5, [pc, #136]	; (8002524 <cmd_threads+0xa4>)
  _dbg_check_lock();
 800249a:	f7ff fb39 	bl	8001b10 <_dbg_check_lock>
 800249e:	692c      	ldr	r4, [r5, #16]
  tp->refs++;
 80024a0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80024a4:	3301      	adds	r3, #1
 80024a6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _dbg_check_unlock();
 80024aa:	f7ff fb09 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80024ae:	682b      	ldr	r3, [r5, #0]
 80024b0:	42ab      	cmp	r3, r5
 80024b2:	d004      	beq.n	80024be <cmd_threads+0x3e>
 80024b4:	69aa      	ldr	r2, [r5, #24]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	6892      	ldr	r2, [r2, #8]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d32c      	bcc.n	8002518 <cmd_threads+0x98>
 80024be:	2300      	movs	r3, #0
 80024c0:	f383 8811 	msr	BASEPRI, r3
  return tp;
 80024c4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8002534 <cmd_threads+0xb4>
#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
    uint32_t stklimit = (uint32_t)tp->wabase;
#else
    uint32_t stklimit = 0U;
#endif
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80024c8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8002538 <cmd_threads+0xb8>
 80024cc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800253c <cmd_threads+0xbc>
             stklimit, (uint32_t)tp->ctx.sp, (uint32_t)tp,
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 80024d0:	f894 1020 	ldrb.w	r1, [r4, #32]
 80024d4:	f894 6022 	ldrb.w	r6, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80024d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 80024dc:	68a0      	ldr	r0, [r4, #8]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80024de:	68e3      	ldr	r3, [r4, #12]
    uint32_t stklimit = (uint32_t)tp->wabase;
 80024e0:	e9d4 5206 	ldrd	r5, r2, [r4, #24]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80024e4:	3e01      	subs	r6, #1
 80024e6:	2d00      	cmp	r5, #0
 80024e8:	bf08      	it	eq
 80024ea:	4645      	moveq	r5, r8
 80024ec:	e9cd 1503 	strd	r1, r5, [sp, #12]
 80024f0:	9002      	str	r0, [sp, #8]
 80024f2:	9400      	str	r4, [sp, #0]
 80024f4:	4651      	mov	r1, sl
 80024f6:	9601      	str	r6, [sp, #4]
 80024f8:	4638      	mov	r0, r7
 80024fa:	f7fe ffd9 	bl	80014b0 <chprintf>
             tp->name == NULL ? "" : tp->name);
    tp = chRegNextThread(tp);
 80024fe:	4620      	mov	r0, r4
 8002500:	f7ff ff86 	bl	8002410 <chRegNextThread>
  } while (tp != NULL);
 8002504:	4604      	mov	r4, r0
 8002506:	2800      	cmp	r0, #0
 8002508:	d1e2      	bne.n	80024d0 <cmd_threads+0x50>
}
 800250a:	b006      	add	sp, #24
 800250c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    shellUsage(chp, "threads");
 8002510:	4a05      	ldr	r2, [pc, #20]	; (8002528 <cmd_threads+0xa8>)
 8002512:	4906      	ldr	r1, [pc, #24]	; (800252c <cmd_threads+0xac>)
 8002514:	f7fe bfcc 	b.w	80014b0 <chprintf>
 8002518:	4805      	ldr	r0, [pc, #20]	; (8002530 <cmd_threads+0xb0>)
 800251a:	f7fe f9f9 	bl	8000910 <chSysHalt>
 800251e:	bf00      	nop
 8002520:	08004ff0 	.word	0x08004ff0
 8002524:	20004b48 	.word	0x20004b48
 8002528:	08004fe8 	.word	0x08004fe8
 800252c:	08004d38 	.word	0x08004d38
 8002530:	0800549c 	.word	0x0800549c
 8002534:	080059f8 	.word	0x080059f8
 8002538:	08005118 	.word	0x08005118
 800253c:	08005030 	.word	0x08005030

08002540 <chRegFindThreadByWorkingArea>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa) {
 8002540:	b530      	push	{r4, r5, lr}
 8002542:	2320      	movs	r3, #32
 8002544:	b083      	sub	sp, #12
 8002546:	4604      	mov	r4, r0
 8002548:	f383 8811 	msr	BASEPRI, r3
  tp = ch.rlist.newer;
 800254c:	4d11      	ldr	r5, [pc, #68]	; (8002594 <chRegFindThreadByWorkingArea+0x54>)
  _dbg_check_lock();
 800254e:	f7ff fadf 	bl	8001b10 <_dbg_check_lock>
 8002552:	6928      	ldr	r0, [r5, #16]
  tp->refs++;
 8002554:	9001      	str	r0, [sp, #4]
 8002556:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800255a:	3301      	adds	r3, #1
 800255c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  _dbg_check_unlock();
 8002560:	f7ff faae 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002564:	682b      	ldr	r3, [r5, #0]
 8002566:	9801      	ldr	r0, [sp, #4]
 8002568:	42ab      	cmp	r3, r5
 800256a:	d004      	beq.n	8002576 <chRegFindThreadByWorkingArea+0x36>
 800256c:	69aa      	ldr	r2, [r5, #24]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	6892      	ldr	r2, [r2, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	d30b      	bcc.n	800258e <chRegFindThreadByWorkingArea+0x4e>
 8002576:	2300      	movs	r3, #0
 8002578:	f383 8811 	msr	BASEPRI, r3
  return tp;
 800257c:	e002      	b.n	8002584 <chRegFindThreadByWorkingArea+0x44>
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
      return ctp;
    }
    ctp = chRegNextThread(ctp);
 800257e:	f7ff ff47 	bl	8002410 <chRegNextThread>
  } while (ctp != NULL);
 8002582:	b110      	cbz	r0, 800258a <chRegFindThreadByWorkingArea+0x4a>
    if (chThdGetWorkingAreaX(ctp) == wa) {
 8002584:	69c3      	ldr	r3, [r0, #28]
 8002586:	429c      	cmp	r4, r3
 8002588:	d1f9      	bne.n	800257e <chRegFindThreadByWorkingArea+0x3e>

  return NULL;
}
 800258a:	b003      	add	sp, #12
 800258c:	bd30      	pop	{r4, r5, pc}
 800258e:	4802      	ldr	r0, [pc, #8]	; (8002598 <chRegFindThreadByWorkingArea+0x58>)
 8002590:	f7fe f9be 	bl	8000910 <chSysHalt>
 8002594:	20004b48 	.word	0x20004b48
 8002598:	0800549c 	.word	0x0800549c
 800259c:	00000000 	.word	0x00000000

080025a0 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <main+0x98>)
  PWR->CR |= PWR_CR_DBP;
 80025a2:	4826      	ldr	r0, [pc, #152]	; (800263c <main+0x9c>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 80025aa:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
};

/*
 * Application entry point.
 */
int main(void) {
 80025ae:	b580      	push	{r7, lr}
 80025b0:	611a      	str	r2, [r3, #16]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b8:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 80025ba:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80025be:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	615c      	str	r4, [r3, #20]
 80025c4:	2200      	movs	r2, #0
 80025c6:	6959      	ldr	r1, [r3, #20]
 80025c8:	615a      	str	r2, [r3, #20]
 80025ca:	6959      	ldr	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80025cc:	6a19      	ldr	r1, [r3, #32]
 80025ce:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 80025d2:	6219      	str	r1, [r3, #32]
 80025d4:	6a19      	ldr	r1, [r3, #32]
 80025d6:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80025da:	6219      	str	r1, [r3, #32]
 80025dc:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 80025de:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025e0:	625c      	str	r4, [r3, #36]	; 0x24
 80025e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
 80025e6:	6a59      	ldr	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 80025e8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025ea:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80025ee:	6419      	str	r1, [r3, #64]	; 0x40
 80025f0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80025f2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80025f6:	6619      	str	r1, [r3, #96]	; 0x60
 80025f8:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 80025fa:	6801      	ldr	r1, [r0, #0]
 80025fc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002600:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8002602:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002604:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002608:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800260c:	b086      	sub	sp, #24
 800260e:	d003      	beq.n	8002618 <main+0x78>
    RCC->BDCR = RCC_BDCR_BDRST;
 8002610:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002614:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8002616:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8002618:	4c08      	ldr	r4, [pc, #32]	; (800263c <main+0x9c>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma.allocated_mask = 0U;
 800261a:	4909      	ldr	r1, [pc, #36]	; (8002640 <main+0xa0>)
 800261c:	6863      	ldr	r3, [r4, #4]
 800261e:	4a09      	ldr	r2, [pc, #36]	; (8002644 <main+0xa4>)
 8002620:	4d09      	ldr	r5, [pc, #36]	; (8002648 <main+0xa8>)
 8002622:	2000      	movs	r0, #0
 8002624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002628:	6063      	str	r3, [r4, #4]
 800262a:	460f      	mov	r7, r1
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 800262c:	4603      	mov	r3, r0
  dma.allocated_mask = 0U;
 800262e:	6008      	str	r0, [r1, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002630:	f102 00c0 	add.w	r0, r2, #192	; 0xc0
 8002634:	e00c      	b.n	8002650 <main+0xb0>
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	40007000 	.word	0x40007000
 8002640:	20005514 	.word	0x20005514
 8002644:	0800580c 	.word	0x0800580c
 8002648:	40026010 	.word	0x40026010
 800264c:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002650:	602b      	str	r3, [r5, #0]
    dma.streams[i].func = NULL;
 8002652:	320c      	adds	r2, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002654:	4290      	cmp	r0, r2
    dma.streams[i].func = NULL;
 8002656:	604b      	str	r3, [r1, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002658:	f101 0108 	add.w	r1, r1, #8
 800265c:	d1f6      	bne.n	800264c <main+0xac>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800265e:	4da9      	ldr	r5, [pc, #676]	; (8002904 <main+0x364>)
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002660:	f8df c30c 	ldr.w	ip, [pc, #780]	; 8002970 <main+0x3d0>
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002664:	49a8      	ldr	r1, [pc, #672]	; (8002908 <main+0x368>)
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8002666:	48a9      	ldr	r0, [pc, #676]	; (800290c <main+0x36c>)
  sdObjectInit(&SD5, NULL, notify5);
  SD5.usart = UART5;
#endif

#if STM32_SERIAL_USE_USART6
  sdObjectInit(&SD6, NULL, notify6);
 8002668:	4ea9      	ldr	r6, [pc, #676]	; (8002910 <main+0x370>)
  sdcp->vmt      = &sdc_vmt;
 800266a:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8002974 <main+0x3d4>
 800266e:	2260      	movs	r2, #96	; 0x60
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002670:	f04f 39ff 	mov.w	r9, #4294967295
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002674:	2440      	movs	r4, #64	; 0x40
 8002676:	f8cc 9008 	str.w	r9, [ip, #8]
 800267a:	f04f 0a80 	mov.w	sl, #128	; 0x80
  DMA1->HIFCR = 0xFFFFFFFFU;
 800267e:	f8cc 900c 	str.w	r9, [ip, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002682:	f8c1 9008 	str.w	r9, [r1, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8002686:	f8c1 900c 	str.w	r9, [r1, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800268a:	f885 2306 	strb.w	r2, [r5, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800268e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002692:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002696:	602c      	str	r4, [r5, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002698:	f44f 7400 	mov.w	r4, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800269c:	f885 2307 	strb.w	r2, [r5, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026a0:	f8c5 a180 	str.w	sl, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80026a4:	f8c5 a000 	str.w	sl, [r5]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80026a8:	f885 2308 	strb.w	r2, [r5, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026ac:	f8c5 1180 	str.w	r1, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80026b0:	6029      	str	r1, [r5, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80026b2:	f885 2309 	strb.w	r2, [r5, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026b6:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80026ba:	602c      	str	r4, [r5, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80026c0:	f885 230a 	strb.w	r2, [r5, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026c4:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80026c8:	602c      	str	r4, [r5, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026ca:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80026ce:	f885 2317 	strb.w	r2, [r5, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026d2:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80026d6:	602c      	str	r4, [r5, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80026d8:	f885 2328 	strb.w	r2, [r5, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026dc:	f8c5 1184 	str.w	r1, [r5, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80026e0:	6069      	str	r1, [r5, #4]
  sdObjectInit(&SD2, NULL, notify2);
 80026e2:	498c      	ldr	r1, [pc, #560]	; (8002914 <main+0x374>)
  tqp->next = (thread_t *)tqp;
 80026e4:	4c8c      	ldr	r4, [pc, #560]	; (8002918 <main+0x378>)
 80026e6:	f7fe f81b 	bl	8000720 <sdObjectInit.constprop.0>
  SD2.usart = USART2;
 80026ea:	4a8c      	ldr	r2, [pc, #560]	; (800291c <main+0x37c>)
 80026ec:	6742      	str	r2, [r0, #116]	; 0x74
  sdObjectInit(&SD6, NULL, notify6);
 80026ee:	498c      	ldr	r1, [pc, #560]	; (8002920 <main+0x380>)
 80026f0:	4630      	mov	r0, r6
 80026f2:	f7fe f815 	bl	8000720 <sdObjectInit.constprop.0>
 80026f6:	498b      	ldr	r1, [pc, #556]	; (8002924 <main+0x384>)
 80026f8:	f8c8 1000 	str.w	r1, [r8]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80026fc:	4a8a      	ldr	r2, [pc, #552]	; (8002928 <main+0x388>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026fe:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002702:	2090      	movs	r0, #144	; 0x90
 8002704:	f885 0331 	strb.w	r0, [r5, #817]	; 0x331
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002708:	f8c5 1184 	str.w	r1, [r5, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800270c:	6069      	str	r1, [r5, #4]
 800270e:	6c11      	ldr	r1, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002710:	4886      	ldr	r0, [pc, #536]	; (800292c <main+0x38c>)
  sdcp->errors   = SDC_NO_ERROR;
 8002712:	2300      	movs	r3, #0
  ST_ENABLE_CLOCK();
 8002714:	f041 0101 	orr.w	r1, r1, #1
 8002718:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 800271c:	6411      	str	r1, [r2, #64]	; 0x40
 800271e:	6e11      	ldr	r1, [r2, #96]	; 0x60
  sdcp->config   = NULL;
 8002720:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 8002724:	f041 0101 	orr.w	r1, r1, #1
 8002728:	6611      	str	r1, [r2, #96]	; 0x60
 800272a:	6e12      	ldr	r2, [r2, #96]	; 0x60
  ST_ENABLE_STOP();
 800272c:	6882      	ldr	r2, [r0, #8]
  sdcp->capacity = 0;
 800272e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8002732:	f042 0201 	orr.w	r2, r2, #1
  SDCD1.thread = NULL;
 8002736:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
  SDCD1.dma    = NULL;
 800273a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 800273e:	6082      	str	r2, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002740:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002744:	f242 01cf 	movw	r1, #8399	; 0x20cf
 8002748:	6291      	str	r1, [r2, #40]	; 0x28
  SD6.usart = USART6;
 800274a:	4879      	ldr	r0, [pc, #484]	; (8002930 <main+0x390>)
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800274c:	f8c2 902c 	str.w	r9, [r2, #44]	; 0x2c
  sdcp->state    = BLK_STOP;
 8002750:	2101      	movs	r1, #1
 8002752:	f888 1004 	strb.w	r1, [r8, #4]
  STM32_ST_TIM->CCMR1  = 0;
 8002756:	6193      	str	r3, [r2, #24]
  tqp->prev = (thread_t *)tqp;
 8002758:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCR[0] = 0;
 800275a:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 800275c:	60d3      	str	r3, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 800275e:	6053      	str	r3, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002760:	6151      	str	r1, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002762:	6011      	str	r1, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002764:	f885 a31c 	strb.w	sl, [r5, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800276c:	6770      	str	r0, [r6, #116]	; 0x74
  SDCD1.sdio   = SDIO;
 800276e:	4971      	ldr	r1, [pc, #452]	; (8002934 <main+0x394>)
  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 8002770:	4871      	ldr	r0, [pc, #452]	; (8002938 <main+0x398>)
 8002772:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
 8002776:	f8c5 2180 	str.w	r2, [r5, #384]	; 0x180
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 800277a:	f104 0140 	add.w	r1, r4, #64	; 0x40
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800277e:	602a      	str	r2, [r5, #0]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8002780:	f104 021c 	add.w	r2, r4, #28
  tqp->next = (thread_t *)tqp;
 8002784:	6024      	str	r4, [r4, #0]
  ch.rlist.prio = NOPRIO;
 8002786:	60a3      	str	r3, [r4, #8]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8002788:	e9c4 4404 	strd	r4, r4, [r4, #16]
 800278c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8002790:	e9c4 2207 	strd	r2, r2, [r4, #28]
  ch.vtlist.delta = (sysinterval_t)-1;
 8002794:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  ch.vtlist.lasttime = (systime_t)0;
 8002798:	62a3      	str	r3, [r4, #40]	; 0x28
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 800279a:	3301      	adds	r3, #1
 800279c:	eb04 1203 	add.w	r2, r4, r3, lsl #4
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80027a0:	2b80      	cmp	r3, #128	; 0x80
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80027a2:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80027a6:	f36f 0102 	bfc	r1, #0, #3
 80027aa:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80027ae:	d1f4      	bne.n	800279a <main+0x1fa>
  default_heap.provider = chCoreAllocAlignedWithOffset;
 80027b0:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8002978 <main+0x3d8>
 80027b4:	4b61      	ldr	r3, [pc, #388]	; (800293c <main+0x39c>)
 80027b6:	4a62      	ldr	r2, [pc, #392]	; (8002940 <main+0x3a0>)
 80027b8:	f8c9 2000 	str.w	r2, [r9]
 80027bc:	f109 020c 	add.w	r2, r9, #12
  tqp->prev = (thread_t *)tqp;
 80027c0:	e9c9 2203 	strd	r2, r2, [r9, #12]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 80027c4:	f103 0210 	add.w	r2, r3, #16
 80027c8:	611a      	str	r2, [r3, #16]
  mp->object_size = size;
 80027ca:	2214      	movs	r2, #20
 80027cc:	619a      	str	r2, [r3, #24]
 80027ce:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24
 80027d4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
 80027da:	221c      	movs	r2, #28
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
 80027de:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80027e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80027e4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
 80027ea:	f103 0244 	add.w	r2, r3, #68	; 0x44
  mp->provider = provider;
 80027ee:	4855      	ldr	r0, [pc, #340]	; (8002944 <main+0x3a4>)
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44
  ch_memcore.basemem = __heap_base__;
 80027f2:	4955      	ldr	r1, [pc, #340]	; (8002948 <main+0x3a8>)
 80027f4:	6218      	str	r0, [r3, #32]
  H_NEXT(&default_heap.header) = NULL;
 80027f6:	2200      	movs	r2, #0
  mp->align = align;
 80027f8:	2504      	movs	r5, #4
  mp->owner = NULL;
 80027fa:	609a      	str	r2, [r3, #8]
  mp->next = NULL;
 80027fc:	615a      	str	r2, [r3, #20]
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
  mp->provider = provider;
 8002800:	6398      	str	r0, [r3, #56]	; 0x38
 8002802:	e9c3 3300 	strd	r3, r3, [r3]
  H_PAGES(&default_heap.header) = 0;
 8002806:	e9c9 2201 	strd	r2, r2, [r9, #4]
  ch.dbg.lock_cnt = (cnt_t)0;
 800280a:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  tmp->last       = (rtcnt_t)0;
 800280e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8002812:	f8c9 2014 	str.w	r2, [r9, #20]
  ch.tm.offset = (rtcnt_t)0;
 8002816:	f8c4 2884 	str.w	r2, [r4, #2180]	; 0x884
  tmp->n          = (ucnt_t)0;
 800281a:	9203      	str	r2, [sp, #12]
  mp->align = align;
 800281c:	61dd      	str	r5, [r3, #28]
 800281e:	4a4b      	ldr	r2, [pc, #300]	; (800294c <main+0x3ac>)
 8002820:	635d      	str	r5, [r3, #52]	; 0x34
  ch_memcore.topmem  = __heap_end__;
 8002822:	4b4b      	ldr	r3, [pc, #300]	; (8002950 <main+0x3b0>)
  ch_memcore.basemem = __heap_base__;
 8002824:	600a      	str	r2, [r1, #0]
  ch_memcore.topmem  = __heap_end__;
 8002826:	604b      	str	r3, [r1, #4]
  tmp->best       = (rtcnt_t)-1;
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
  tmp->cumulative = (rttime_t)0;
 800282c:	2200      	movs	r2, #0
 800282e:	2300      	movs	r3, #0
  tmp->best       = (rtcnt_t)-1;
 8002830:	9000      	str	r0, [sp, #0]
  tmp->cumulative = (rttime_t)0;
 8002832:	e9cd 2304 	strd	r2, r3, [sp, #16]
    chTMStartMeasurementX(&tm);
 8002836:	4668      	mov	r0, sp
 8002838:	f7fe f802 	bl	8000840 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800283c:	4668      	mov	r0, sp
 800283e:	f7fd ffd7 	bl	80007f0 <chTMStopMeasurementX>
  } while (i > 0U);
 8002842:	3d01      	subs	r5, #1
 8002844:	d1f7      	bne.n	8002836 <main+0x296>
  REG_INSERT(tp);
 8002846:	4b43      	ldr	r3, [pc, #268]	; (8002954 <main+0x3b4>)
  ch.tm.offset = tm.best;
 8002848:	9a00      	ldr	r2, [sp, #0]
 800284a:	6960      	ldr	r0, [r4, #20]
 800284c:	f8c4 2884 	str.w	r2, [r4, #2180]	; 0x884
  tp->name      = name;
 8002850:	f8df e128 	ldr.w	lr, [pc, #296]	; 800297c <main+0x3dc>
 8002854:	f8c4 e858 	str.w	lr, [r4, #2136]	; 0x858
  tp->prio      = prio;
 8002858:	2280      	movs	r2, #128	; 0x80
 800285a:	f8c4 2848 	str.w	r2, [r4, #2120]	; 0x848
  tp->realprio  = prio;
 800285e:	f8c4 287c 	str.w	r2, [r4, #2172]	; 0x87c
  tp->refs      = (trefs_t)1;
 8002862:	2101      	movs	r1, #1
  tqp->next = (thread_t *)tqp;
 8002864:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    currp->wabase = &__main_thread_stack_base__;
 8002868:	f8df c114 	ldr.w	ip, [pc, #276]	; 8002980 <main+0x3e0>
  tp->flags     = CH_FLAG_MODE_STATIC;
 800286c:	f884 5861 	strb.w	r5, [r4, #2145]	; 0x861
  tlp->next = (thread_t *)tlp;
 8002870:	f103 0e28 	add.w	lr, r3, #40	; 0x28
  tp->mtxlist   = NULL;
 8002874:	f8c4 5878 	str.w	r5, [r4, #2168]	; 0x878
  tp->epending  = (eventmask_t)0;
 8002878:	f8c4 5874 	str.w	r5, [r4, #2164]	; 0x874
  REG_INSERT(tp);
 800287c:	f8c4 4850 	str.w	r4, [r4, #2128]	; 0x850
 8002880:	f8c4 0854 	str.w	r0, [r4, #2132]	; 0x854
  tp->refs      = (trefs_t)1;
 8002884:	f884 1862 	strb.w	r1, [r4, #2146]	; 0x862
  REG_INSERT(tp);
 8002888:	6103      	str	r3, [r0, #16]
 800288a:	f8c4 c85c 	str.w	ip, [r4, #2140]	; 0x85c
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800288e:	e9c4 3305 	strd	r3, r3, [r4, #20]
  currp->state = CH_STATE_CURRENT;
 8002892:	f884 1860 	strb.w	r1, [r4, #2144]	; 0x860
 8002896:	f8c4 e868 	str.w	lr, [r4, #2152]	; 0x868
  tqp->next = (thread_t *)tqp;
 800289a:	f8c4 286c 	str.w	r2, [r4, #2156]	; 0x86c
  tqp->prev = (thread_t *)tqp;
 800289e:	f8c4 2870 	str.w	r2, [r4, #2160]	; 0x870
 80028a2:	f04f 0c20 	mov.w	ip, #32
 80028a6:	f38c 8811 	msr	BASEPRI, ip
  __ASM volatile ("cpsie i" : : : "memory");
 80028aa:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ac:	492a      	ldr	r1, [pc, #168]	; (8002958 <main+0x3b8>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80028ae:	4b2b      	ldr	r3, [pc, #172]	; (800295c <main+0x3bc>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b0:	68ca      	ldr	r2, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80028b2:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8002984 <main+0x3e4>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028b6:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 80028ba:	4002      	ands	r2, r0
  reg_value  =  (reg_value                                   |
 80028bc:	4313      	orrs	r3, r2
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80028be:	4a28      	ldr	r2, [pc, #160]	; (8002960 <main+0x3c0>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80028c0:	60cb      	str	r3, [r1, #12]
 80028c2:	68d3      	ldr	r3, [r2, #12]
 80028c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c8:	60d3      	str	r3, [r2, #12]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80028ca:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80028ce:	f8de 0000 	ldr.w	r0, [lr]
 80028d2:	f040 0001 	orr.w	r0, r0, #1
 80028d6:	f8ce 0000 	str.w	r0, [lr]
 80028da:	4313      	orrs	r3, r2
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028dc:	f04f 0010 	mov.w	r0, #16
 80028e0:	77c8      	strb	r0, [r1, #31]
 80028e2:	f881 c022 	strb.w	ip, [r1, #34]	; 0x22
 80028e6:	d002      	beq.n	80028ee <main+0x34e>
    chSysHalt("SV#3");
 80028e8:	481e      	ldr	r0, [pc, #120]	; (8002964 <main+0x3c4>)
 80028ea:	f7fe f811 	bl	8000910 <chSysHalt>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80028ee:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 80028f2:	b662      	cpsie	i
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 80028f4:	481c      	ldr	r0, [pc, #112]	; (8002968 <main+0x3c8>)
 80028f6:	f7ff fe23 	bl	8002540 <chRegFindThreadByWorkingArea>
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d044      	beq.n	8002988 <main+0x3e8>
 80028fe:	481b      	ldr	r0, [pc, #108]	; (800296c <main+0x3cc>)
 8002900:	f7fe f806 	bl	8000910 <chSysHalt>
 8002904:	e000e100 	.word	0xe000e100
 8002908:	40026400 	.word	0x40026400
 800290c:	20000800 	.word	0x20000800
 8002910:	2000087c 	.word	0x2000087c
 8002914:	08000781 	.word	0x08000781
 8002918:	20004b48 	.word	0x20004b48
 800291c:	40004400 	.word	0x40004400
 8002920:	08000791 	.word	0x08000791
 8002924:	08005990 	.word	0x08005990
 8002928:	40023800 	.word	0x40023800
 800292c:	e0042000 	.word	0xe0042000
 8002930:	40011400 	.word	0x40011400
 8002934:	40012c00 	.word	0x40012c00
 8002938:	0080fff0 	.word	0x0080fff0
 800293c:	200053d0 	.word	0x200053d0
 8002940:	08001b31 	.word	0x08001b31
 8002944:	080009d1 	.word	0x080009d1
 8002948:	200054f0 	.word	0x200054f0
 800294c:	200058e8 	.word	0x200058e8
 8002950:	20020000 	.word	0x20020000
 8002954:	20005388 	.word	0x20005388
 8002958:	e000ed00 	.word	0xe000ed00
 800295c:	05fa0300 	.word	0x05fa0300
 8002960:	e000edf0 	.word	0xe000edf0
 8002964:	08005058 	.word	0x08005058
 8002968:	20005418 	.word	0x20005418
 800296c:	08005524 	.word	0x08005524
 8002970:	40026000 	.word	0x40026000
 8002974:	200008f8 	.word	0x200008f8
 8002978:	200054f8 	.word	0x200054f8
 800297c:	080058c0 	.word	0x080058c0
 8002980:	20000400 	.word	0x20000400
 8002984:	e0001000 	.word	0xe0001000
 8002988:	4aad      	ldr	r2, [pc, #692]	; (8002c40 <main+0x6a0>)
 800298a:	23d8      	movs	r3, #216	; 0xd8
    *startp++ = v;
 800298c:	2155      	movs	r1, #85	; 0x55
  while (startp < endp) {
 800298e:	3b01      	subs	r3, #1
    *startp++ = v;
 8002990:	f802 1b01 	strb.w	r1, [r2], #1
  while (startp < endp) {
 8002994:	d1fb      	bne.n	800298e <main+0x3ee>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002996:	2520      	movs	r5, #32
 8002998:	f385 8811 	msr	BASEPRI, r5
  _dbg_check_lock();
 800299c:	f7ff f8b8 	bl	8001b10 <_dbg_check_lock>
  tp = chThdCreateSuspendedI(tdp);
 80029a0:	48a8      	ldr	r0, [pc, #672]	; (8002c44 <main+0x6a4>)
 80029a2:	f7fe f81d 	bl	80009e0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 80029a6:	f7fe fbf3 	bl	8001190 <chSchWakeupS.constprop.0>
  chSysUnlock();
 80029aa:	f7ff f899 	bl	8001ae0 <chSysUnlock.lto_priv.4>
  esp->next = (event_listener_t *)esp;
 80029ae:	4ba6      	ldr	r3, [pc, #664]	; (8002c48 <main+0x6a8>)
 80029b0:	601b      	str	r3, [r3, #0]
 80029b2:	f385 8811 	msr	BASEPRI, r5
 80029b6:	f7ff f8ab 	bl	8001b10 <_dbg_check_lock>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 80029ba:	7a33      	ldrb	r3, [r6, #8]
 80029bc:	1e5a      	subs	r2, r3, #1
 80029be:	2a01      	cmp	r2, #1
 80029c0:	f200 81d0 	bhi.w	8002d64 <main+0x7c4>
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d111      	bne.n	80029ec <main+0x44c>
      nvicEnableVector(STM32_UART5_NUMBER, STM32_SERIAL_UART5_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART6
    if (&SD6 == sdp) {
      rccEnableUSART6(true);
 80029c8:	4ba0      	ldr	r3, [pc, #640]	; (8002c4c <main+0x6ac>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80029ca:	4aa1      	ldr	r2, [pc, #644]	; (8002c50 <main+0x6b0>)
 80029cc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80029ce:	f041 0120 	orr.w	r1, r1, #32
 80029d2:	6459      	str	r1, [r3, #68]	; 0x44
 80029d4:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80029d6:	f041 0120 	orr.w	r1, r1, #32
 80029da:	6659      	str	r1, [r3, #100]	; 0x64
 80029dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029de:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80029e0:	2380      	movs	r3, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80029e2:	f882 1347 	strb.w	r1, [r2, #839]	; 0x347
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80029e6:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80029ea:	6093      	str	r3, [r2, #8]
  USART_TypeDef *u = sdp->usart;
 80029ec:	6f73      	ldr	r3, [r6, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80029ee:	4a99      	ldr	r2, [pc, #612]	; (8002c54 <main+0x6b4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	f000 81bd 	beq.w	8002d70 <main+0x7d0>
 80029f6:	4898      	ldr	r0, [pc, #608]	; (8002c58 <main+0x6b8>)
    fck = STM32_PCLK1 / config->speed;
 80029f8:	f640 028b 	movw	r2, #2187	; 0x88b
 80029fc:	f240 4145 	movw	r1, #1093	; 0x445
 8002a00:	4283      	cmp	r3, r0
 8002a02:	bf18      	it	ne
 8002a04:	460a      	movne	r2, r1
  u->BRR = fck;
 8002a06:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002a08:	2140      	movs	r1, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002a0a:	2201      	movs	r2, #1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002a0c:	6119      	str	r1, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002a0e:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002a10:	f242 112c 	movw	r1, #8492	; 0x212c
  u->SR = 0;
 8002a14:	2200      	movs	r2, #0
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002a16:	60d9      	str	r1, [r3, #12]
  u->SR = 0;
 8002a18:	601a      	str	r2, [r3, #0]
    sdp->rxmask = 0xFF;
 8002a1a:	21ff      	movs	r1, #255	; 0xff
  sdp->state = SD_READY;
 8002a1c:	2202      	movs	r2, #2
  (void)u->SR;  /* SR reset step 1.*/
 8002a1e:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8002a20:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8002a22:	f886 1078 	strb.w	r1, [r6, #120]	; 0x78
 8002a26:	7232      	strb	r2, [r6, #8]
  _dbg_check_unlock();
 8002a28:	f7ff f84a 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	42a3      	cmp	r3, r4
 8002a30:	d005      	beq.n	8002a3e <main+0x49e>
 8002a32:	69a2      	ldr	r2, [r4, #24]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	f0c0 8196 	bcc.w	8002d6a <main+0x7ca>
 8002a3e:	2500      	movs	r5, #0
 8002a40:	f385 8811 	msr	BASEPRI, r5
 8002a44:	2320      	movs	r3, #32
 8002a46:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8002a4a:	f7ff f861 	bl	8001b10 <_dbg_check_lock>
  osalDbgAssert((sdcp->state == BLK_STOP) || (sdcp->state == BLK_ACTIVE),
 8002a4e:	f898 3004 	ldrb.w	r3, [r8, #4]
 8002a52:	1e5a      	subs	r2, r3, #1
 8002a54:	2a01      	cmp	r2, #1
 8002a56:	d832      	bhi.n	8002abe <main+0x51e>
  sdcp->config = config;
 8002a58:	4980      	ldr	r1, [pc, #512]	; (8002c5c <main+0x6bc>)
  sdcp->dmamode |= STM32_DMA_CR_PFCTRL |
 8002a5a:	4a81      	ldr	r2, [pc, #516]	; (8002c60 <main+0x6c0>)
 8002a5c:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  if (sdcp->state == BLK_STOP) {
 8002a60:	2b01      	cmp	r3, #1
  sdcp->dmamode |= STM32_DMA_CR_PFCTRL |
 8002a62:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
  if (sdcp->state == BLK_STOP) {
 8002a66:	d01f      	beq.n	8002aa8 <main+0x508>
  sdcp->sdio->POWER  = 0;
 8002a68:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
  sdcp->sdio->CLKCR  = 0;
 8002a70:	605a      	str	r2, [r3, #4]
  sdcp->sdio->DCTRL  = 0;
 8002a72:	62da      	str	r2, [r3, #44]	; 0x2c
  sdcp->sdio->DTIMER = 0;
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24
  sdcp->state = BLK_ACTIVE;
 8002a76:	2302      	movs	r3, #2
 8002a78:	f888 3004 	strb.w	r3, [r8, #4]
  _dbg_check_unlock();
 8002a7c:	f7ff f820 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	42a3      	cmp	r3, r4
 8002a84:	d005      	beq.n	8002a92 <main+0x4f2>
 8002a86:	69a2      	ldr	r2, [r4, #24]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	6892      	ldr	r2, [r2, #8]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f0c0 8172 	bcc.w	8002d76 <main+0x7d6>
 8002a92:	2300      	movs	r3, #0
 8002a94:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 8002a98:	4d72      	ldr	r5, [pc, #456]	; (8002c64 <main+0x6c4>)
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	f7ff fd50 	bl	8002540 <chRegFindThreadByWorkingArea>
 8002aa0:	b180      	cbz	r0, 8002ac4 <main+0x524>
 8002aa2:	4871      	ldr	r0, [pc, #452]	; (8002c68 <main+0x6c8>)
 8002aa4:	f7fd ff34 	bl	8000910 <chSysHalt>
                                          uint32_t priority,
                                          stm32_dmaisr_t func,
                                          void *param) {
  uint32_t i, startid, endid;

  osalDbgCheckClassI();
 8002aa8:	f7fd ff5a 	bl	8000960 <chDbgCheckClassI>
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f413 6000 	ands.w	r0, r3, #2048	; 0x800
 8002ab2:	d066      	beq.n	8002b82 <main+0x5e2>
    osalDbgAssert(sdcp->dma != NULL, "unable to allocate stream");
 8002ab4:	486d      	ldr	r0, [pc, #436]	; (8002c6c <main+0x6cc>)
    sdcp->dma = dmaStreamAllocI(STM32_SDC_SDIO_DMA_STREAM,
 8002ab6:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
    osalDbgAssert(sdcp->dma != NULL, "unable to allocate stream");
 8002aba:	f7fd ff29 	bl	8000910 <chSysHalt>
  osalDbgAssert((sdcp->state == BLK_STOP) || (sdcp->state == BLK_ACTIVE),
 8002abe:	486c      	ldr	r0, [pc, #432]	; (8002c70 <main+0x6d0>)
 8002ac0:	f7fd ff26 	bl	8000910 <chSysHalt>
 8002ac4:	f44f 76a4 	mov.w	r6, #328	; 0x148
 8002ac8:	462b      	mov	r3, r5
    *startp++ = v;
 8002aca:	2255      	movs	r2, #85	; 0x55
  while (startp < endp) {
 8002acc:	3e01      	subs	r6, #1
    *startp++ = v;
 8002ace:	f803 2b01 	strb.w	r2, [r3], #1
  while (startp < endp) {
 8002ad2:	d1fb      	bne.n	8002acc <main+0x52c>
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8002ada:	f7ff f819 	bl	8001b10 <_dbg_check_lock>
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002ade:	4865      	ldr	r0, [pc, #404]	; (8002c74 <main+0x6d4>)
 8002ae0:	4b65      	ldr	r3, [pc, #404]	; (8002c78 <main+0x6d8>)
 8002ae2:	f8c5 00dc 	str.w	r0, [r5, #220]	; 0xdc
 8002ae6:	4965      	ldr	r1, [pc, #404]	; (8002c7c <main+0x6dc>)
  REG_INSERT(tp);
 8002ae8:	6962      	ldr	r2, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002aea:	f8c5 10fc 	str.w	r1, [r5, #252]	; 0xfc
  tp->state     = CH_STATE_WTSTART;
 8002aee:	2002      	movs	r0, #2
 8002af0:	f8a5 0120 	strh.w	r0, [r5, #288]	; 0x120
  tp->refs      = (trefs_t)1;
 8002af4:	2101      	movs	r1, #1
  tp->name      = name;
 8002af6:	4862      	ldr	r0, [pc, #392]	; (8002c80 <main+0x6e0>)
  tp->refs      = (trefs_t)1;
 8002af8:	f885 1122 	strb.w	r1, [r5, #290]	; 0x122
  tp->name      = name;
 8002afc:	f8c5 0118 	str.w	r0, [r5, #280]	; 0x118
  tp->prio      = prio;
 8002b00:	2180      	movs	r1, #128	; 0x80
  REG_INSERT(tp);
 8002b02:	f103 0024 	add.w	r0, r3, #36	; 0x24
  tp->prio      = prio;
 8002b06:	e9c5 1342 	strd	r1, r3, [r5, #264]	; 0x108
  tp->epending  = (eventmask_t)0;
 8002b0a:	e9c5 664d 	strd	r6, r6, [r5, #308]	; 0x134
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002b0e:	f8c5 60e0 	str.w	r6, [r5, #224]	; 0xe0
  REG_INSERT(tp);
 8002b12:	f8c5 2114 	str.w	r2, [r5, #276]	; 0x114
  tp->realprio  = prio;
 8002b16:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
  tp->wabase = (stkalign_t *)wsp;
 8002b1a:	f8c5 511c 	str.w	r5, [r5, #284]	; 0x11c
  REG_INSERT(tp);
 8002b1e:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
 8002b22:	6110      	str	r0, [r2, #16]
  tlp->next = (thread_t *)tlp;
 8002b24:	f103 024c 	add.w	r2, r3, #76	; 0x4c
  tqp->next = (thread_t *)tqp;
 8002b28:	3350      	adds	r3, #80	; 0x50
 8002b2a:	e9c5 234a 	strd	r2, r3, [r5, #296]	; 0x128
  tqp->prev = (thread_t *)tqp;
 8002b2e:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
 8002b32:	6160      	str	r0, [r4, #20]
  H_LOCK(heapp);
 8002b34:	4e53      	ldr	r6, [pc, #332]	; (8002c84 <main+0x6e4>)
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
  if (wsp == NULL) {
    return NULL;
  }

  thread_descriptor_t td = {
 8002b36:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8002c9c <main+0x6fc>
  chSchWakeupS(tp, MSG_OK);
 8002b3a:	f7fe fb29 	bl	8001190 <chSchWakeupS.constprop.0>
  chSysUnlock();
 8002b3e:	f7fe ffcf 	bl	8001ae0 <chSysUnlock.lto_priv.4>
  qp = &heapp->header;
 8002b42:	f1a6 0708 	sub.w	r7, r6, #8
  H_LOCK(heapp);
 8002b46:	4630      	mov	r0, r6
 8002b48:	f7ff fa02 	bl	8001f50 <chMtxLock>
  qp = &heapp->header;
 8002b4c:	46bc      	mov	ip, r7
  while (H_NEXT(qp) != NULL) {
 8002b4e:	f8dc 3000 	ldr.w	r3, [ip]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8112 	beq.w	8002d7c <main+0x7dc>
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8002b58:	f8d3 e004 	ldr.w	lr, [r3, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8002b5c:	f103 000f 	add.w	r0, r3, #15
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8002b60:	f10e 0101 	add.w	r1, lr, #1
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8002b64:	f020 0007 	bic.w	r0, r0, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8002b68:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8002b6c:	f1a0 0208 	sub.w	r2, r0, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8002b70:	428a      	cmp	r2, r1
 8002b72:	d204      	bcs.n	8002b7e <main+0x5de>
 8002b74:	1a0d      	subs	r5, r1, r0
 8002b76:	10ed      	asrs	r5, r5, #3
 8002b78:	f5b5 7f8c 	cmp.w	r5, #280	; 0x118
 8002b7c:	d834      	bhi.n	8002be8 <main+0x648>
          H_NEXT(qp) = H_NEXT(hp);
 8002b7e:	469c      	mov	ip, r3
 8002b80:	e7e5      	b.n	8002b4e <main+0x5ae>
      /* Enabling DMA clocks required by the current streams set.*/
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
        rccEnableDMA1(true);
      }
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
        rccEnableDMA2(true);
 8002b82:	4a32      	ldr	r2, [pc, #200]	; (8002c4c <main+0x6ac>)
      dma.allocated_mask  |= mask;
 8002b84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b88:	603b      	str	r3, [r7, #0]
        rccEnableDMA2(true);
 8002b8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
      dma.streams[i].func  = func;
 8002b8c:	65f8      	str	r0, [r7, #92]	; 0x5c
        rccEnableDMA2(true);
 8002b8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b92:	6313      	str	r3, [r2, #48]	; 0x30
 8002b94:	6d11      	ldr	r1, [r2, #80]	; 0x50
        rccEnableDMAMUX(true);
      }
#endif

      /* Putting the stream in a safe state.*/
      dmaStreamDisable(dmastp);
 8002b96:	4b3c      	ldr	r3, [pc, #240]	; (8002c88 <main+0x6e8>)
      dma.streams[i].param = param;
 8002b98:	6638      	str	r0, [r7, #96]	; 0x60
        rccEnableDMA2(true);
 8002b9a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002b9e:	6511      	str	r1, [r2, #80]	; 0x50
 8002ba0:	6d12      	ldr	r2, [r2, #80]	; 0x50
      dmaStreamDisable(dmastp);
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	f022 021f 	bic.w	r2, r2, #31
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	6819      	ldr	r1, [r3, #0]
 8002bac:	f011 0101 	ands.w	r1, r1, #1
 8002bb0:	d1fb      	bne.n	8002baa <main+0x60a>
    dmaStreamSetPeripheral(sdcp->dma, &sdcp->sdio->FIFO);
 8002bb2:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 8002bb6:	4d35      	ldr	r5, [pc, #212]	; (8002c8c <main+0x6ec>)
    rccEnableSDIO(true);
 8002bb8:	4a24      	ldr	r2, [pc, #144]	; (8002c4c <main+0x6ac>)
 8002bba:	f04f 6674 	mov.w	r6, #255852544	; 0xf400000
 8002bbe:	602e      	str	r6, [r5, #0]
    dmaStreamSetPeripheral(sdcp->dma, &sdcp->sdio->FIFO);
 8002bc0:	3080      	adds	r0, #128	; 0x80
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002bc2:	6019      	str	r1, [r3, #0]
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002bc4:	2521      	movs	r5, #33	; 0x21
    dmaStreamSetFIFO(sdcp->dma, STM32_DMA_FCR_DMDIS | STM32_DMA_FCR_FTH_FULL);
 8002bc6:	2107      	movs	r1, #7
 8002bc8:	615d      	str	r5, [r3, #20]
    dmaStreamSetPeripheral(sdcp->dma, &sdcp->sdio->FIFO);
 8002bca:	6098      	str	r0, [r3, #8]
    dmaStreamSetFIFO(sdcp->dma, STM32_DMA_FCR_DMDIS | STM32_DMA_FCR_FTH_FULL);
 8002bcc:	6159      	str	r1, [r3, #20]
    rccEnableSDIO(true);
 8002bce:	6c53      	ldr	r3, [r2, #68]	; 0x44
    sdcp->dma = dmaStreamAllocI(STM32_SDC_SDIO_DMA_STREAM,
 8002bd0:	492f      	ldr	r1, [pc, #188]	; (8002c90 <main+0x6f0>)
 8002bd2:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
    rccEnableSDIO(true);
 8002bd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bda:	6453      	str	r3, [r2, #68]	; 0x44
 8002bdc:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8002bde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002be2:	6653      	str	r3, [r2, #100]	; 0x64
 8002be4:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8002be6:	e73f      	b.n	8002a68 <main+0x4c8>
      if (ahp > hp) {
 8002be8:	4293      	cmp	r3, r2
 8002bea:	f080 80a2 	bcs.w	8002d32 <main+0x792>
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8002bee:	f103 0108 	add.w	r1, r3, #8
 8002bf2:	1a51      	subs	r1, r2, r1
        if (bpages > pages) {
 8002bf4:	f240 1c19 	movw	ip, #281	; 0x119
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8002bf8:	10c9      	asrs	r1, r1, #3
        if (bpages > pages) {
 8002bfa:	4565      	cmp	r5, ip
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8002bfc:	6059      	str	r1, [r3, #4]
        if (bpages > pages) {
 8002bfe:	d009      	beq.n	8002c14 <main+0x674>
          H_NEXT(fp) = H_NEXT(hp);
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	f8c2 18d0 	str.w	r1, [r2, #2256]	; 0x8d0
          H_PAGES(fp) = (bpages - pages) - 1U;
 8002c06:	f5a5 758d 	sub.w	r5, r5, #282	; 0x11a
          fp = H_BLOCK(ahp) + pages;
 8002c0a:	f600 00c8 	addw	r0, r0, #2248	; 0x8c8
          H_PAGES(fp) = (bpages - pages) - 1U;
 8002c0e:	f8c2 58d4 	str.w	r5, [r2, #2260]	; 0x8d4
          H_NEXT(hp) = fp;
 8002c12:	6018      	str	r0, [r3, #0]
      H_HEAP(hp) = heapp;
 8002c14:	4615      	mov	r5, r2
      H_SIZE(hp) = size;
 8002c16:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8002c1a:	6053      	str	r3, [r2, #4]
      H_UNLOCK(heapp);
 8002c1c:	4630      	mov	r0, r6
      H_HEAP(hp) = heapp;
 8002c1e:	f845 9b08 	str.w	r9, [r5], #8
      H_UNLOCK(heapp);
 8002c22:	f7ff f92d 	bl	8001e80 <chMtxUnlock>
 8002c26:	2281      	movs	r2, #129	; 0x81
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 8002c28:	f605 03c8 	addw	r3, r5, #2248	; 0x8c8
  thread_descriptor_t td = {
 8002c2c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8002c30:	4918      	ldr	r1, [pc, #96]	; (8002c94 <main+0x6f4>)
 8002c32:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <main+0x6f8>)
 8002c34:	e9cd 8500 	strd	r8, r5, [sp]
 8002c38:	e9cd 1204 	strd	r1, r2, [sp, #16]
    *startp++ = v;
 8002c3c:	2255      	movs	r2, #85	; 0x55
 8002c3e:	e031      	b.n	8002ca4 <main+0x704>
 8002c40:	20005418 	.word	0x20005418
 8002c44:	080058e8 	.word	0x080058e8
 8002c48:	2000559c 	.word	0x2000559c
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	e000e100 	.word	0xe000e100
 8002c54:	40011000 	.word	0x40011000
 8002c58:	40011400 	.word	0x40011400
 8002c5c:	080059b4 	.word	0x080059b4
 8002c60:	08a35420 	.word	0x08a35420
 8002c64:	200057a0 	.word	0x200057a0
 8002c68:	08005554 	.word	0x08005554
 8002c6c:	08005718 	.word	0x08005718
 8002c70:	0800575c 	.word	0x0800575c
 8002c74:	08002151 	.word	0x08002151
 8002c78:	2000587c 	.word	0x2000587c
 8002c7c:	080002d1 	.word	0x080002d1
 8002c80:	08005060 	.word	0x08005060
 8002c84:	20005504 	.word	0x20005504
 8002c88:	40026458 	.word	0x40026458
 8002c8c:	40026408 	.word	0x40026408
 8002c90:	08005884 	.word	0x08005884
 8002c94:	08001bf1 	.word	0x08001bf1
 8002c98:	080059b8 	.word	0x080059b8
 8002c9c:	08004ef4 	.word	0x08004ef4
 8002ca0:	f805 2b01 	strb.w	r2, [r5], #1
  while (startp < endp) {
 8002ca4:	42ab      	cmp	r3, r5
 8002ca6:	d1fb      	bne.n	8002ca0 <main+0x700>
 8002ca8:	2320      	movs	r3, #32
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f7fe ff2f 	bl	8001b10 <_dbg_check_lock>
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8002cb2:	4668      	mov	r0, sp
 8002cb4:	f7fd fe94 	bl	80009e0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp = chThdCreateSuspendedI(&td);
 8002cbe:	4605      	mov	r5, r0
  chSchWakeupS(tp, MSG_OK);
 8002cc0:	f7fe fa66 	bl	8001190 <chSchWakeupS.constprop.0>
  _dbg_check_unlock();
 8002cc4:	f7fe fefc 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	42a3      	cmp	r3, r4
 8002ccc:	d004      	beq.n	8002cd8 <main+0x738>
 8002cce:	69a2      	ldr	r2, [r4, #24]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	6892      	ldr	r2, [r2, #8]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d36a      	bcc.n	8002dae <main+0x80e>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f383 8811 	msr	BASEPRI, r3
 8002cde:	2320      	movs	r3, #32
 8002ce0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8002ce4:	f7fe ff14 	bl	8001b10 <_dbg_check_lock>
  chDbgAssert(tp != currp, "waiting self");
 8002ce8:	69a3      	ldr	r3, [r4, #24]
 8002cea:	42ab      	cmp	r3, r5
 8002cec:	d034      	beq.n	8002d58 <main+0x7b8>
  chDbgAssert(tp->refs > (trefs_t)0, "no references");
 8002cee:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 8002cf2:	b38a      	cbz	r2, 8002d58 <main+0x7b8>
  if (tp->state != CH_STATE_FINAL) {
 8002cf4:	f895 2020 	ldrb.w	r2, [r5, #32]
 8002cf8:	2a0f      	cmp	r2, #15
 8002cfa:	d005      	beq.n	8002d08 <main+0x768>
  tp->queue.next = tlp->next;
 8002cfc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002cfe:	601a      	str	r2, [r3, #0]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8002d00:	2009      	movs	r0, #9
  tlp->next = tp;
 8002d02:	62ab      	str	r3, [r5, #40]	; 0x28
 8002d04:	f7fe fa8c 	bl	8001220 <chSchGoSleepS>
  _dbg_check_unlock();
 8002d08:	f7fe feda 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	42a3      	cmp	r3, r4
 8002d10:	d004      	beq.n	8002d1c <main+0x77c>
 8002d12:	69a2      	ldr	r2, [r4, #24]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	6892      	ldr	r2, [r2, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d320      	bcc.n	8002d5e <main+0x7be>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 8002d22:	4628      	mov	r0, r5
 8002d24:	f7ff fab4 	bl	8002290 <chThdRelease>
  while (true) {
    thread_t *shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
                                            "shell", NORMALPRIO + 1,
                                            shellThread, (void *)&shell_cfg1);
    chThdWait(shelltp);               /* Waiting termination.             */
    chThdSleepMilliseconds(1000);
 8002d28:	f242 7010 	movw	r0, #10000	; 0x2710
 8002d2c:	f7ff f9e8 	bl	8002100 <chThdSleep>
  while (true) {
 8002d30:	e709      	b.n	8002b46 <main+0x5a6>
        if (H_PAGES(hp) == pages) {
 8002d32:	f240 1219 	movw	r2, #281	; 0x119
 8002d36:	4596      	cmp	lr, r2
 8002d38:	d034      	beq.n	8002da4 <main+0x804>
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8002d3a:	f603 02d8 	addw	r2, r3, #2264	; 0x8d8
 8002d3e:	1a8a      	subs	r2, r1, r2
 8002d40:	10d2      	asrs	r2, r2, #3
          H_NEXT(fp) = H_NEXT(hp);
 8002d42:	6819      	ldr	r1, [r3, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8002d44:	f8c3 28d4 	str.w	r2, [r3, #2260]	; 0x8d4
          fp = H_BLOCK(hp) + pages;
 8002d48:	f503 600d 	add.w	r0, r3, #2256	; 0x8d0
          H_NEXT(fp) = H_NEXT(hp);
 8002d4c:	f8c3 18d0 	str.w	r1, [r3, #2256]	; 0x8d0
          H_NEXT(qp) = fp;
 8002d50:	461a      	mov	r2, r3
 8002d52:	f8cc 0000 	str.w	r0, [ip]
 8002d56:	e75d      	b.n	8002c14 <main+0x674>
  chDbgAssert(tp != currp, "waiting self");
 8002d58:	4816      	ldr	r0, [pc, #88]	; (8002db4 <main+0x814>)
 8002d5a:	f7fd fdd9 	bl	8000910 <chSysHalt>
 8002d5e:	4816      	ldr	r0, [pc, #88]	; (8002db8 <main+0x818>)
 8002d60:	f7fd fdd6 	bl	8000910 <chSysHalt>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 8002d64:	4815      	ldr	r0, [pc, #84]	; (8002dbc <main+0x81c>)
 8002d66:	f7fd fdd3 	bl	8000910 <chSysHalt>
 8002d6a:	4815      	ldr	r0, [pc, #84]	; (8002dc0 <main+0x820>)
 8002d6c:	f7fd fdd0 	bl	8000910 <chSysHalt>
    fck = STM32_PCLK2 / config->speed;
 8002d70:	f640 028b 	movw	r2, #2187	; 0x88b
 8002d74:	e647      	b.n	8002a06 <main+0x466>
 8002d76:	4813      	ldr	r0, [pc, #76]	; (8002dc4 <main+0x824>)
 8002d78:	f7fd fdca 	bl	8000910 <chSysHalt>
  H_UNLOCK(heapp);
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	f7ff f87f 	bl	8001e80 <chMtxUnlock>
  if (heapp->provider != NULL) {
 8002d82:	f8d9 3000 	ldr.w	r3, [r9]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0e6      	beq.n	8002d58 <main+0x7b8>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	f640 00c8 	movw	r0, #2248	; 0x8c8
 8002d92:	4798      	blx	r3
    if (ahp != NULL) {
 8002d94:	4605      	mov	r5, r0
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d0de      	beq.n	8002d58 <main+0x7b8>
      H_SIZE(hp) = size;
 8002d9a:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8002d9e:	e940 9302 	strd	r9, r3, [r0, #-8]
 8002da2:	e740      	b.n	8002c26 <main+0x686>
          H_NEXT(qp) = H_NEXT(hp);
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f8cc 2000 	str.w	r2, [ip]
 8002daa:	461a      	mov	r2, r3
 8002dac:	e732      	b.n	8002c14 <main+0x674>
 8002dae:	4806      	ldr	r0, [pc, #24]	; (8002dc8 <main+0x828>)
 8002db0:	f7fd fdae 	bl	8000910 <chSysHalt>
 8002db4:	080055a4 	.word	0x080055a4
 8002db8:	0800541c 	.word	0x0800541c
 8002dbc:	080056bc 	.word	0x080056bc
 8002dc0:	08005410 	.word	0x08005410
 8002dc4:	08005484 	.word	0x08005484
 8002dc8:	08005434 	.word	0x08005434
 8002dcc:	00000000 	.word	0x00000000

08002dd0 <sdc_lld_wait_transaction_end>:
                                         uint32_t *resp) {
 8002dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	4605      	mov	r5, r0
 8002dd8:	460e      	mov	r6, r1
 8002dda:	4690      	mov	r8, r2
 8002ddc:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8002de0:	f7fe fe96 	bl	8001b10 <_dbg_check_lock>
  if (sdcp->sdio->MASK != 0)
 8002de4:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8002de6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002de8:	bb23      	cbnz	r3, 8002e34 <sdc_lld_wait_transaction_end+0x64>
  if ((sdcp->sdio->STA & SDIO_STA_DATAEND) == 0) {
 8002dea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002dec:	4f29      	ldr	r7, [pc, #164]	; (8002e94 <sdc_lld_wait_transaction_end+0xc4>)
 8002dee:	05db      	lsls	r3, r3, #23
 8002df0:	d534      	bpl.n	8002e5c <sdc_lld_wait_transaction_end+0x8c>
  while (sdcp->dma->stream->CR & STM32_DMA_CR_EN)
 8002df2:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002df4:	680c      	ldr	r4, [r1, #0]
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	f013 0301 	ands.w	r3, r3, #1
 8002dfc:	d1fb      	bne.n	8002df6 <sdc_lld_wait_transaction_end+0x26>
  dmaStreamClearInterrupt(sdcp->dma);
 8002dfe:	f891 c009 	ldrb.w	ip, [r1, #9]
 8002e02:	684c      	ldr	r4, [r1, #4]
  sdcp->sdio->ICR = STM32_SDIO_ICR_ALL_FLAGS;
 8002e04:	4924      	ldr	r1, [pc, #144]	; (8002e98 <sdc_lld_wait_transaction_end+0xc8>)
  dmaStreamClearInterrupt(sdcp->dma);
 8002e06:	223d      	movs	r2, #61	; 0x3d
 8002e08:	fa02 f20c 	lsl.w	r2, r2, ip
 8002e0c:	6022      	str	r2, [r4, #0]
  sdcp->sdio->ICR = STM32_SDIO_ICR_ALL_FLAGS;
 8002e0e:	6381      	str	r1, [r0, #56]	; 0x38
  sdcp->sdio->DCTRL = 0;
 8002e10:	62c3      	str	r3, [r0, #44]	; 0x2c
  _dbg_check_unlock();
 8002e12:	f7fe fe55 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	42bb      	cmp	r3, r7
 8002e1a:	d004      	beq.n	8002e26 <sdc_lld_wait_transaction_end+0x56>
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	6892      	ldr	r2, [r2, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d32a      	bcc.n	8002e7c <sdc_lld_wait_transaction_end+0xac>
 8002e26:	2000      	movs	r0, #0
 8002e28:	f380 8811 	msr	BASEPRI, r0
  if (n > 1)
 8002e2c:	2e01      	cmp	r6, #1
 8002e2e:	d828      	bhi.n	8002e82 <sdc_lld_wait_transaction_end+0xb2>
}
 8002e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chDbgAssert(*trp == NULL, "not NULL");
 8002e34:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002e36:	b113      	cbz	r3, 8002e3e <sdc_lld_wait_transaction_end+0x6e>
 8002e38:	4818      	ldr	r0, [pc, #96]	; (8002e9c <sdc_lld_wait_transaction_end+0xcc>)
 8002e3a:	f7fd fd69 	bl	8000910 <chSysHalt>
  return ch.rlist.current;
 8002e3e:	4f15      	ldr	r7, [pc, #84]	; (8002e94 <sdc_lld_wait_transaction_end+0xc4>)
  *trp = tp;
 8002e40:	462b      	mov	r3, r5
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	f843 2f3c 	str.w	r2, [r3, #60]!
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8002e48:	f04f 31ff 	mov.w	r1, #4294967295
  tp->u.wttrp = trp;
 8002e4c:	6253      	str	r3, [r2, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8002e4e:	2003      	movs	r0, #3
 8002e50:	f7fe fa3e 	bl	80012d0 <chSchGoSleepTimeoutS>
 8002e54:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  if ((sdcp->sdio->STA & SDIO_STA_DATAEND) == 0) {
 8002e56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e58:	05db      	lsls	r3, r3, #23
 8002e5a:	d4ca      	bmi.n	8002df2 <sdc_lld_wait_transaction_end+0x22>
  _dbg_check_unlock();
 8002e5c:	f7fe fe30 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	42bb      	cmp	r3, r7
 8002e64:	d004      	beq.n	8002e70 <sdc_lld_wait_transaction_end+0xa0>
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	6892      	ldr	r2, [r2, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d305      	bcc.n	8002e7c <sdc_lld_wait_transaction_end+0xac>
 8002e70:	2300      	movs	r3, #0
 8002e72:	f383 8811 	msr	BASEPRI, r3
    return HAL_FAILED;
 8002e76:	2001      	movs	r0, #1
}
 8002e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e7c:	4808      	ldr	r0, [pc, #32]	; (8002ea0 <sdc_lld_wait_transaction_end+0xd0>)
 8002e7e:	f7fd fd47 	bl	8000910 <chSysHalt>
    return sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8002e82:	4643      	mov	r3, r8
 8002e84:	4602      	mov	r2, r0
 8002e86:	210c      	movs	r1, #12
 8002e88:	4628      	mov	r0, r5
}
 8002e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8002e8e:	f7fe b887 	b.w	8000fa0 <sdc_lld_send_cmd_short_crc>
 8002e92:	bf00      	nop
 8002e94:	20004b48 	.word	0x20004b48
 8002e98:	00c007ff 	.word	0x00c007ff
 8002e9c:	080055b0 	.word	0x080055b0
 8002ea0:	08005490 	.word	0x08005490
	...

08002eb0 <sdc_lld_write_aligned.part.0>:
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
 8002eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb2:	4604      	mov	r4, r0
  dmaStreamSetMemory0(sdcp->dma, buf);
 8002eb4:	6c40      	ldr	r0, [r0, #68]	; 0x44
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 8002eb6:	6c26      	ldr	r6, [r4, #64]	; 0x40
  dmaStreamSetMemory0(sdcp->dma, buf);
 8002eb8:	6800      	ldr	r0, [r0, #0]
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8002eba:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
  dmaStreamSetMemory0(sdcp->dma, buf);
 8002ebe:	60c2      	str	r2, [r0, #12]
  dmaStreamSetTransactionSize(sdcp->dma,
 8002ec0:	025f      	lsls	r7, r3, #9
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
 8002ec2:	461d      	mov	r5, r3
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 8002ec4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  dmaStreamSetTransactionSize(sdcp->dma,
 8002ec8:	08bb      	lsrs	r3, r7, #2
 8002eca:	6043      	str	r3, [r0, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 8002ecc:	6006      	str	r6, [r0, #0]
  dmaStreamEnable(sdcp->dma);
 8002ece:	6806      	ldr	r6, [r0, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8002ed0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  dmaStreamEnable(sdcp->dma);
 8002ed2:	f046 0601 	orr.w	r6, r6, #1
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
 8002ed6:	460a      	mov	r2, r1
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8002ed8:	f01c 0f10 	tst.w	ip, #16
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8002edc:	4919      	ldr	r1, [pc, #100]	; (8002f44 <sdc_lld_write_aligned.part.0+0x94>)
  dmaStreamEnable(sdcp->dma);
 8002ede:	6006      	str	r6, [r0, #0]
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
 8002ee0:	b083      	sub	sp, #12
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8002ee2:	6399      	str	r1, [r3, #56]	; 0x38
    startblk *= MMCSD_BLOCK_SIZE;
 8002ee4:	bf08      	it	eq
 8002ee6:	0252      	lsleq	r2, r2, #9
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8002ee8:	f240 311a 	movw	r1, #794	; 0x31a
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK,
 8002eec:	ae01      	add	r6, sp, #4
  if (n > 1) {
 8002eee:	2d01      	cmp	r5, #1
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8002ef0:	63d9      	str	r1, [r3, #60]	; 0x3c
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8002ef2:	629f      	str	r7, [r3, #40]	; 0x28
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK,
 8002ef4:	4633      	mov	r3, r6
  if (n > 1) {
 8002ef6:	d919      	bls.n	8002f2c <sdc_lld_write_aligned.part.0+0x7c>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK,
 8002ef8:	2119      	movs	r1, #25
 8002efa:	4620      	mov	r0, r4
 8002efc:	f7fe f850 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 8002f00:	b960      	cbnz	r0, 8002f1c <sdc_lld_write_aligned.part.0+0x6c>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8002f02:	9a01      	ldr	r2, [sp, #4]
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <sdc_lld_write_aligned.part.0+0x98>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	b943      	cbnz	r3, 8002f1c <sdc_lld_write_aligned.part.0+0x6c>
  sdcp->sdio->DCTRL = SDIO_DCTRL_DBLOCKSIZE_3 |
 8002f0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002f0c:	2299      	movs	r2, #153	; 0x99
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 8002f10:	4629      	mov	r1, r5
 8002f12:	4632      	mov	r2, r6
 8002f14:	4620      	mov	r0, r4
 8002f16:	f7ff ff5b 	bl	8002dd0 <sdc_lld_wait_transaction_end>
 8002f1a:	b128      	cbz	r0, 8002f28 <sdc_lld_write_aligned.part.0+0x78>
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	4632      	mov	r2, r6
 8002f20:	4629      	mov	r1, r5
 8002f22:	f7fe f855 	bl	8000fd0 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8002f26:	2001      	movs	r0, #1
}
 8002f28:	b003      	add	sp, #12
 8002f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_BLOCK,
 8002f2c:	2118      	movs	r1, #24
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7fe f836 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d1f1      	bne.n	8002f1c <sdc_lld_write_aligned.part.0+0x6c>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8002f38:	9a01      	ldr	r2, [sp, #4]
 8002f3a:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <sdc_lld_write_aligned.part.0+0x98>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0e3      	beq.n	8002f0a <sdc_lld_write_aligned.part.0+0x5a>
 8002f42:	e7eb      	b.n	8002f1c <sdc_lld_write_aligned.part.0+0x6c>
 8002f44:	00c007ff 	.word	0x00c007ff
 8002f48:	fdffe008 	.word	0xfdffe008
 8002f4c:	00000000 	.word	0x00000000

08002f50 <sdcWrite>:
              const uint8_t *buf, uint32_t n) {
 8002f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f54:	b083      	sub	sp, #12
  osalDbgCheck((sdcp != NULL) && (buf != NULL) && (n > 0U));
 8002f56:	b108      	cbz	r0, 8002f5c <sdcWrite+0xc>
 8002f58:	b102      	cbz	r2, 8002f5c <sdcWrite+0xc>
 8002f5a:	b913      	cbnz	r3, 8002f62 <sdcWrite+0x12>
 8002f5c:	482a      	ldr	r0, [pc, #168]	; (8003008 <sdcWrite+0xb8>)
 8002f5e:	f7fd fcd7 	bl	8000910 <chSysHalt>
 8002f62:	460d      	mov	r5, r1
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8002f64:	7901      	ldrb	r1, [r0, #4]
 8002f66:	2905      	cmp	r1, #5
 8002f68:	4604      	mov	r4, r0
 8002f6a:	d1f7      	bne.n	8002f5c <sdcWrite+0xc>
  if ((startblk + n - 1U) > sdcp->capacity) {
 8002f6c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8002f6e:	1e69      	subs	r1, r5, #1
 8002f70:	4419      	add	r1, r3
 8002f72:	42b1      	cmp	r1, r6
 8002f74:	d907      	bls.n	8002f86 <sdcWrite+0x36>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8002f76:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7c:	6343      	str	r3, [r0, #52]	; 0x34
    return HAL_FAILED;
 8002f7e:	2001      	movs	r0, #1
}
 8002f80:	b003      	add	sp, #12
 8002f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sdcp->state = BLK_WRITING;
 8002f86:	2107      	movs	r1, #7
 8002f88:	7101      	strb	r1, [r0, #4]
  if (((unsigned)buf & 3) != 0) {
 8002f8a:	0791      	lsls	r1, r2, #30
 8002f8c:	d019      	beq.n	8002fc2 <sdcWrite+0x72>
 8002f8e:	ebc5 59c5 	rsb	r9, r5, r5, lsl #23
      memcpy(u.buf, buf, MMCSD_BLOCK_SIZE);
 8002f92:	4f1e      	ldr	r7, [pc, #120]	; (800300c <sdcWrite+0xbc>)
  sdcp->sdio->DTIMER = STM32_SDC_WRITE_TIMEOUT;
 8002f94:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8003010 <sdcWrite+0xc0>
 8002f98:	195e      	adds	r6, r3, r5
 8002f9a:	eb02 2949 	add.w	r9, r2, r9, lsl #9
      memcpy(u.buf, buf, MMCSD_BLOCK_SIZE);
 8002f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa2:	eb09 2145 	add.w	r1, r9, r5, lsl #9
 8002fa6:	4638      	mov	r0, r7
 8002fa8:	f7fd f9a6 	bl	80002f8 <memcpy>
  sdcp->sdio->DTIMER = STM32_SDC_WRITE_TIMEOUT;
 8002fac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (_sdc_wait_for_transfer_state(sdcp))
 8002fae:	4620      	mov	r0, r4
  sdcp->sdio->DTIMER = STM32_SDC_WRITE_TIMEOUT;
 8002fb0:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 8002fb4:	f7ff f8ec 	bl	8002190 <_sdc_wait_for_transfer_state>
 8002fb8:	b1b0      	cbz	r0, 8002fe8 <sdcWrite+0x98>
        return HAL_FAILED;
 8002fba:	2001      	movs	r0, #1
  sdcp->state = BLK_READY;
 8002fbc:	2305      	movs	r3, #5
 8002fbe:	7123      	strb	r3, [r4, #4]
  return status;
 8002fc0:	e7de      	b.n	8002f80 <sdcWrite+0x30>
  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8002fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc6:	d21b      	bcs.n	8003000 <sdcWrite+0xb0>
  sdcp->sdio->DTIMER = STM32_SDC_WRITE_TIMEOUT;
 8002fc8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002fca:	4e11      	ldr	r6, [pc, #68]	; (8003010 <sdcWrite+0xc0>)
 8002fcc:	624e      	str	r6, [r1, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 8002fce:	e9cd 2300 	strd	r2, r3, [sp]
 8002fd2:	f7ff f8dd 	bl	8002190 <_sdc_wait_for_transfer_state>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	d1ef      	bne.n	8002fba <sdcWrite+0x6a>
 8002fda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fde:	4629      	mov	r1, r5
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f7ff ff65 	bl	8002eb0 <sdc_lld_write_aligned.part.0>
 8002fe6:	e7e9      	b.n	8002fbc <sdcWrite+0x6c>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	463a      	mov	r2, r7
 8002fec:	4629      	mov	r1, r5
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f7ff ff5e 	bl	8002eb0 <sdc_lld_write_aligned.part.0>
      if (sdc_lld_write_aligned(sdcp, startblk, u.buf, 1))
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d1e0      	bne.n	8002fba <sdcWrite+0x6a>
      startblk++;
 8002ff8:	3501      	adds	r5, #1
    for (i = 0; i < blocks; i++) {
 8002ffa:	42ae      	cmp	r6, r5
 8002ffc:	d1cf      	bne.n	8002f9e <sdcWrite+0x4e>
 8002ffe:	e7dd      	b.n	8002fbc <sdcWrite+0x6c>
  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8003000:	4804      	ldr	r0, [pc, #16]	; (8003014 <sdcWrite+0xc4>)
 8003002:	f7fd fc85 	bl	8000910 <chSysHalt>
 8003006:	bf00      	nop
 8003008:	080057bc 	.word	0x080057bc
 800300c:	200055a0 	.word	0x200055a0
 8003010:	016e3600 	.word	0x016e3600
 8003014:	0800578c 	.word	0x0800578c
	...

08003020 <sdc_lld_read_aligned.part.0>:
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
 8003020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003022:	4604      	mov	r4, r0
  dmaStreamSetMemory0(sdcp->dma, buf);
 8003024:	6c40      	ldr	r0, [r0, #68]	; 0x44
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 8003026:	6c26      	ldr	r6, [r4, #64]	; 0x40
  dmaStreamSetMemory0(sdcp->dma, buf);
 8003028:	6800      	ldr	r0, [r0, #0]
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 800302a:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
  dmaStreamSetMemory0(sdcp->dma, buf);
 800302e:	60c2      	str	r2, [r0, #12]
  dmaStreamSetTransactionSize(sdcp->dma,
 8003030:	025f      	lsls	r7, r3, #9
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
 8003032:	461d      	mov	r5, r3
  dmaStreamSetTransactionSize(sdcp->dma,
 8003034:	08bb      	lsrs	r3, r7, #2
 8003036:	6043      	str	r3, [r0, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 8003038:	6006      	str	r6, [r0, #0]
  dmaStreamEnable(sdcp->dma);
 800303a:	6806      	ldr	r6, [r0, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 800303c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  dmaStreamEnable(sdcp->dma);
 800303e:	f046 0601 	orr.w	r6, r6, #1
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
 8003042:	460a      	mov	r2, r1
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8003044:	491a      	ldr	r1, [pc, #104]	; (80030b0 <sdc_lld_read_aligned.part.0+0x90>)
  dmaStreamEnable(sdcp->dma);
 8003046:	6006      	str	r6, [r0, #0]
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8003048:	f01c 0f10 	tst.w	ip, #16
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 800304c:	6399      	str	r1, [r3, #56]	; 0x38
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
 800304e:	b083      	sub	sp, #12
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8003050:	f240 312a 	movw	r1, #810	; 0x32a
 8003054:	63d9      	str	r1, [r3, #60]	; 0x3c
    startblk *= MMCSD_BLOCK_SIZE;
 8003056:	bf08      	it	eq
 8003058:	0252      	lsleq	r2, r2, #9
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 800305a:	219b      	movs	r1, #155	; 0x9b
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_MULTIPLE_BLOCK,
 800305c:	ae01      	add	r6, sp, #4
  if (n > 1) {
 800305e:	2d01      	cmp	r5, #1
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8003060:	629f      	str	r7, [r3, #40]	; 0x28
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 8003062:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_MULTIPLE_BLOCK,
 8003064:	4633      	mov	r3, r6
  if (n > 1) {
 8003066:	d916      	bls.n	8003096 <sdc_lld_read_aligned.part.0+0x76>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_MULTIPLE_BLOCK,
 8003068:	2112      	movs	r1, #18
 800306a:	4620      	mov	r0, r4
 800306c:	f7fd ff98 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 8003070:	b948      	cbnz	r0, 8003086 <sdc_lld_read_aligned.part.0+0x66>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8003072:	9a01      	ldr	r2, [sp, #4]
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <sdc_lld_read_aligned.part.0+0x94>)
 8003076:	4013      	ands	r3, r2
 8003078:	b92b      	cbnz	r3, 8003086 <sdc_lld_read_aligned.part.0+0x66>
  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 800307a:	4632      	mov	r2, r6
 800307c:	4629      	mov	r1, r5
 800307e:	4620      	mov	r0, r4
 8003080:	f7ff fea6 	bl	8002dd0 <sdc_lld_wait_transaction_end>
 8003084:	b128      	cbz	r0, 8003092 <sdc_lld_read_aligned.part.0+0x72>
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8003086:	4620      	mov	r0, r4
 8003088:	4632      	mov	r2, r6
 800308a:	4629      	mov	r1, r5
 800308c:	f7fd ffa0 	bl	8000fd0 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8003090:	2001      	movs	r0, #1
}
 8003092:	b003      	add	sp, #12
 8003094:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_SINGLE_BLOCK,
 8003096:	2111      	movs	r1, #17
 8003098:	4620      	mov	r0, r4
 800309a:	f7fd ff81 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 800309e:	2800      	cmp	r0, #0
 80030a0:	d1f1      	bne.n	8003086 <sdc_lld_read_aligned.part.0+0x66>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 80030a2:	9a01      	ldr	r2, [sp, #4]
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <sdc_lld_read_aligned.part.0+0x94>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0e6      	beq.n	800307a <sdc_lld_read_aligned.part.0+0x5a>
 80030ac:	e7eb      	b.n	8003086 <sdc_lld_read_aligned.part.0+0x66>
 80030ae:	bf00      	nop
 80030b0:	00c007ff 	.word	0x00c007ff
 80030b4:	fdffe008 	.word	0xfdffe008
	...

080030c0 <sdcRead>:
bool sdcRead(SDCDriver *sdcp, uint32_t startblk, uint8_t *buf, uint32_t n) {
 80030c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030c4:	b082      	sub	sp, #8
  osalDbgCheck((sdcp != NULL) && (buf != NULL) && (n > 0U));
 80030c6:	b108      	cbz	r0, 80030cc <sdcRead+0xc>
 80030c8:	b102      	cbz	r2, 80030cc <sdcRead+0xc>
 80030ca:	b913      	cbnz	r3, 80030d2 <sdcRead+0x12>
 80030cc:	482c      	ldr	r0, [pc, #176]	; (8003180 <sdcRead+0xc0>)
 80030ce:	f7fd fc1f 	bl	8000910 <chSysHalt>
 80030d2:	460d      	mov	r5, r1
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 80030d4:	7901      	ldrb	r1, [r0, #4]
 80030d6:	2905      	cmp	r1, #5
 80030d8:	4604      	mov	r4, r0
 80030da:	d1f7      	bne.n	80030cc <sdcRead+0xc>
  if ((startblk + n - 1U) > sdcp->capacity) {
 80030dc:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80030de:	1e69      	subs	r1, r5, #1
 80030e0:	4419      	add	r1, r3
 80030e2:	42b1      	cmp	r1, r6
 80030e4:	d908      	bls.n	80030f8 <sdcRead+0x38>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 80030e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ec:	6343      	str	r3, [r0, #52]	; 0x34
    return HAL_FAILED;
 80030ee:	2701      	movs	r7, #1
}
 80030f0:	4638      	mov	r0, r7
 80030f2:	b002      	add	sp, #8
 80030f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  sdcp->state = BLK_READING;
 80030f8:	2106      	movs	r1, #6
 80030fa:	7101      	strb	r1, [r0, #4]
  if (((unsigned)buf & 3) != 0) {
 80030fc:	0791      	lsls	r1, r2, #30
 80030fe:	d013      	beq.n	8003128 <sdcRead+0x68>
 8003100:	ebc5 5ac5 	rsb	sl, r5, r5, lsl #23
  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 8003104:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8003184 <sdcRead+0xc4>
 8003108:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800318c <sdcRead+0xcc>
 800310c:	195e      	adds	r6, r3, r5
 800310e:	eb02 2a4a 	add.w	sl, r2, sl, lsl #9
 8003112:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (_sdc_wait_for_transfer_state(sdcp))
 8003114:	4620      	mov	r0, r4
  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 8003116:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 800311a:	f7ff f839 	bl	8002190 <_sdc_wait_for_transfer_state>
 800311e:	b1b8      	cbz	r0, 8003150 <sdcRead+0x90>
        return HAL_FAILED;
 8003120:	2701      	movs	r7, #1
  sdcp->state = BLK_READY;
 8003122:	2305      	movs	r3, #5
 8003124:	7123      	strb	r3, [r4, #4]
  return status;
 8003126:	e7e3      	b.n	80030f0 <sdcRead+0x30>
  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8003128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800312c:	d224      	bcs.n	8003178 <sdcRead+0xb8>
  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 800312e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003130:	4e14      	ldr	r6, [pc, #80]	; (8003184 <sdcRead+0xc4>)
 8003132:	624e      	str	r6, [r1, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 8003134:	e9cd 2300 	strd	r2, r3, [sp]
 8003138:	f7ff f82a 	bl	8002190 <_sdc_wait_for_transfer_state>
 800313c:	2800      	cmp	r0, #0
 800313e:	d1ef      	bne.n	8003120 <sdcRead+0x60>
 8003140:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003144:	4629      	mov	r1, r5
 8003146:	4620      	mov	r0, r4
 8003148:	f7ff ff6a 	bl	8003020 <sdc_lld_read_aligned.part.0>
 800314c:	4607      	mov	r7, r0
 800314e:	e7e8      	b.n	8003122 <sdcRead+0x62>
 8003150:	2301      	movs	r3, #1
 8003152:	4642      	mov	r2, r8
 8003154:	4629      	mov	r1, r5
 8003156:	4620      	mov	r0, r4
 8003158:	f7ff ff62 	bl	8003020 <sdc_lld_read_aligned.part.0>
      if (sdc_lld_read_aligned(sdcp, startblk, u.buf, 1))
 800315c:	4607      	mov	r7, r0
 800315e:	2800      	cmp	r0, #0
 8003160:	d1de      	bne.n	8003120 <sdcRead+0x60>
      memcpy(buf, u.buf, MMCSD_BLOCK_SIZE);
 8003162:	eb0a 2045 	add.w	r0, sl, r5, lsl #9
 8003166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316a:	4641      	mov	r1, r8
      startblk++;
 800316c:	3501      	adds	r5, #1
      memcpy(buf, u.buf, MMCSD_BLOCK_SIZE);
 800316e:	f7fd f8c3 	bl	80002f8 <memcpy>
    for (i = 0; i < blocks; i++) {
 8003172:	42ae      	cmp	r6, r5
 8003174:	d1cd      	bne.n	8003112 <sdcRead+0x52>
 8003176:	e7d4      	b.n	8003122 <sdcRead+0x62>
  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 8003178:	4803      	ldr	r0, [pc, #12]	; (8003188 <sdcRead+0xc8>)
 800317a:	f7fd fbc9 	bl	8000910 <chSysHalt>
 800317e:	bf00      	nop
 8003180:	080057b4 	.word	0x080057b4
 8003184:	016e3600 	.word	0x016e3600
 8003188:	08005768 	.word	0x08005768
 800318c:	200055a0 	.word	0x200055a0

08003190 <sdc_lld_read_special>:
                          uint8_t cmd, uint32_t arg) {
 8003190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 8003194:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8003196:	4e1f      	ldr	r6, [pc, #124]	; (8003214 <sdc_lld_read_special+0x84>)
 8003198:	626e      	str	r6, [r5, #36]	; 0x24
                          uint8_t cmd, uint32_t arg) {
 800319a:	b082      	sub	sp, #8
 800319c:	4604      	mov	r4, r0
 800319e:	460f      	mov	r7, r1
 80031a0:	4690      	mov	r8, r2
 80031a2:	461e      	mov	r6, r3
  if (_sdc_wait_for_transfer_state(sdcp))
 80031a4:	f7fe fff4 	bl	8002190 <_sdc_wait_for_transfer_state>
 80031a8:	bb50      	cbnz	r0, 8003200 <sdc_lld_read_special+0x70>
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 80031aa:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
  dmaStreamSetMemory0(sdcp->dma, buf);
 80031ae:	6810      	ldr	r0, [r2, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 80031b0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
  dmaStreamSetMemory0(sdcp->dma, buf);
 80031b2:	60c7      	str	r7, [r0, #12]
  dmaStreamSetTransactionSize(sdcp->dma, bytes / sizeof (uint32_t));
 80031b4:	ea4f 0298 	mov.w	r2, r8, lsr #2
 80031b8:	6042      	str	r2, [r0, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 80031ba:	6003      	str	r3, [r0, #0]
  dmaStreamEnable(sdcp->dma);
 80031bc:	6803      	ldr	r3, [r0, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 80031be:	4f16      	ldr	r7, [pc, #88]	; (8003218 <sdc_lld_read_special+0x88>)
  dmaStreamEnable(sdcp->dma);
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6003      	str	r3, [r0, #0]
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 80031c6:	220f      	movs	r2, #15
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 80031c8:	f240 332a 	movw	r3, #810	; 0x32a
  if (sdc_lld_send_cmd_short_crc(sdcp, cmd, arg, resp)
 80031cc:	4631      	mov	r1, r6
 80031ce:	ae01      	add	r6, sp, #4
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 80031d0:	63af      	str	r7, [r5, #56]	; 0x38
  if (sdc_lld_send_cmd_short_crc(sdcp, cmd, arg, resp)
 80031d2:	4620      	mov	r0, r4
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 80031d4:	63eb      	str	r3, [r5, #60]	; 0x3c
  sdcp->sdio->DLEN  = bytes;
 80031d6:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  if (sdc_lld_send_cmd_short_crc(sdcp, cmd, arg, resp)
 80031da:	4633      	mov	r3, r6
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 80031dc:	62ea      	str	r2, [r5, #44]	; 0x2c
  if (sdc_lld_send_cmd_short_crc(sdcp, cmd, arg, resp)
 80031de:	9a08      	ldr	r2, [sp, #32]
 80031e0:	f7fd fede 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 80031e4:	b918      	cbnz	r0, 80031ee <sdc_lld_read_special+0x5e>
                                 || MMCSD_R1_ERROR(resp[0]))
 80031e6:	9a01      	ldr	r2, [sp, #4]
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <sdc_lld_read_special+0x8c>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	b153      	cbz	r3, 8003204 <sdc_lld_read_special+0x74>
  sdc_lld_error_cleanup(sdcp, 1, resp);
 80031ee:	4620      	mov	r0, r4
 80031f0:	4632      	mov	r2, r6
 80031f2:	2101      	movs	r1, #1
 80031f4:	f7fd feec 	bl	8000fd0 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 80031f8:	2001      	movs	r0, #1
}
 80031fa:	b002      	add	sp, #8
 80031fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003200:	ae01      	add	r6, sp, #4
 8003202:	e7f4      	b.n	80031ee <sdc_lld_read_special+0x5e>
  if (sdc_lld_wait_transaction_end(sdcp, 1, resp))
 8003204:	4632      	mov	r2, r6
 8003206:	2101      	movs	r1, #1
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff fde1 	bl	8002dd0 <sdc_lld_wait_transaction_end>
 800320e:	2800      	cmp	r0, #0
 8003210:	d0f3      	beq.n	80031fa <sdc_lld_read_special+0x6a>
 8003212:	e7ec      	b.n	80031ee <sdc_lld_read_special+0x5e>
 8003214:	016e3600 	.word	0x016e3600
 8003218:	00c007ff 	.word	0x00c007ff
 800321c:	fdffe008 	.word	0xfdffe008

08003220 <sdcConnect>:
bool sdcConnect(SDCDriver *sdcp) {
 8003220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003224:	b085      	sub	sp, #20
 8003226:	af02      	add	r7, sp, #8
  osalDbgCheck(sdcp != NULL);
 8003228:	2800      	cmp	r0, #0
 800322a:	d03a      	beq.n	80032a2 <sdcConnect+0x82>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 800322c:	7903      	ldrb	r3, [r0, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	4604      	mov	r4, r0
 8003232:	d001      	beq.n	8003238 <sdcConnect+0x18>
 8003234:	2b05      	cmp	r3, #5
 8003236:	d134      	bne.n	80032a2 <sdcConnect+0x82>
  sdcp->sdio->CLKCR  = STM32_SDIO_DIV_LS;
 8003238:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  sdcp->state = BLK_CONNECTING;
 800323a:	2103      	movs	r1, #3
 800323c:	2278      	movs	r2, #120	; 0x78
 800323e:	7121      	strb	r1, [r4, #4]
 8003240:	605a      	str	r2, [r3, #4]
  sdcp->sdio->POWER |= SDIO_POWER_PWRCTRL_0 | SDIO_POWER_PWRCTRL_1;
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	601a      	str	r2, [r3, #0]
  sdcp->sdio->CLKCR |= SDIO_CLKCR_CLKEN;
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800324e:	605a      	str	r2, [r3, #4]
 8003250:	2064      	movs	r0, #100	; 0x64
 8003252:	f7fe ff55 	bl	8002100 <chThdSleep>
  sdcp->sdio->ARG = arg;
 8003256:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003258:	2100      	movs	r1, #0
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 800325a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  sdcp->sdio->ARG = arg;
 800325e:	6099      	str	r1, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 8003260:	60da      	str	r2, [r3, #12]
  while ((sdcp->sdio->STA & SDIO_STA_CMDSENT) == 0)
 8003262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003264:	0610      	lsls	r0, r2, #24
 8003266:	d5fc      	bpl.n	8003262 <sdcConnect+0x42>
  sdcp->sdio->ICR = SDIO_ICR_CMDSENTC;
 8003268:	2280      	movs	r2, #128	; 0x80
 800326a:	639a      	str	r2, [r3, #56]	; 0x38
  if (!sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_IF_COND,
 800326c:	2108      	movs	r1, #8
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8003274:	4620      	mov	r0, r4
 8003276:	f7fd fe93 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 800327a:	b9a8      	cbnz	r0, 80032a8 <sdcConnect+0x88>
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
 800327c:	687b      	ldr	r3, [r7, #4]
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
 800327e:	2201      	movs	r2, #1
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
 8003280:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003284:	4293      	cmp	r3, r2
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
 8003286:	6322      	str	r2, [r4, #48]	; 0x30
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
 8003288:	d03c      	beq.n	8003304 <sdcConnect+0xe4>
 800328a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  sdcp->sdio->CLKCR = 0;
 800328c:	2200      	movs	r2, #0
  sdcp->state = BLK_ACTIVE;
 800328e:	2102      	movs	r1, #2
 8003290:	605a      	str	r2, [r3, #4]
  return HAL_FAILED;
 8003292:	2501      	movs	r5, #1
  sdcp->sdio->POWER = 0;
 8003294:	601a      	str	r2, [r3, #0]
  sdcp->state = BLK_ACTIVE;
 8003296:	7121      	strb	r1, [r4, #4]
}
 8003298:	4628      	mov	r0, r5
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  osalDbgCheck(sdcp != NULL);
 80032a2:	48b8      	ldr	r0, [pc, #736]	; (8003584 <sdcConnect+0x364>)
 80032a4:	f7fd fb34 	bl	8000910 <chSysHalt>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	2200      	movs	r2, #0
 80032ac:	2137      	movs	r1, #55	; 0x37
 80032ae:	4620      	mov	r0, r4
 80032b0:	f7fd fe76 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 80032b4:	b928      	cbnz	r0, 80032c2 <sdcConnect+0xa2>
        MMCSD_R1_ERROR(resp[0])) {
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4bb3      	ldr	r3, [pc, #716]	; (8003588 <sdcConnect+0x368>)
 80032ba:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8104 	beq.w	80034ca <sdcConnect+0x2aa>
      sdcp->cardmode = SDC_MODE_CARDTYPE_MMC;
 80032c2:	2302      	movs	r3, #2
 80032c4:	6323      	str	r3, [r4, #48]	; 0x30
  sdcp->sdio->ARG = arg;
 80032c6:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 80035a4 <sdcConnect+0x384>
bool sdcConnect(SDCDriver *sdcp) {
 80032ca:	2564      	movs	r5, #100	; 0x64
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80032cc:	f240 4641 	movw	r6, #1089	; 0x441
  sdcp->sdio->ARG = arg;
 80032d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80032d2:	f8c3 8008 	str.w	r8, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80032d6:	60de      	str	r6, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80032d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032da:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 80032de:	d0fb      	beq.n	80032d8 <sdcConnect+0xb8>
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0) {
 80032e2:	074a      	lsls	r2, r1, #29
 80032e4:	d408      	bmi.n	80032f8 <sdcConnect+0xd8>
  *resp = sdcp->sdio->RESP1;
 80032e6:	695a      	ldr	r2, [r3, #20]
    if ((resp[0] & 0x80000000U) != 0U) {
 80032e8:	2a00      	cmp	r2, #0
 80032ea:	db47      	blt.n	800337c <sdcConnect+0x15c>
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 80032ec:	3d01      	subs	r5, #1
 80032ee:	d0cd      	beq.n	800328c <sdcConnect+0x6c>
 80032f0:	2064      	movs	r0, #100	; 0x64
 80032f2:	f7fe ff05 	bl	8002100 <chThdSleep>
 80032f6:	e7eb      	b.n	80032d0 <sdcConnect+0xb0>
    sdc_lld_collect_errors(sdcp, sta);
 80032f8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80032fc:	f7fd fe10 	bl	8000f20 <sdc_lld_collect_errors.isra.0>
    return HAL_FAILED;
 8003300:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003302:	e7c3      	b.n	800328c <sdcConnect+0x6c>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8003304:	4602      	mov	r2, r0
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	2137      	movs	r1, #55	; 0x37
 800330a:	4620      	mov	r0, r4
 800330c:	f7fd fe48 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 8003310:	2800      	cmp	r0, #0
 8003312:	d1ba      	bne.n	800328a <sdcConnect+0x6a>
        MMCSD_R1_ERROR(resp[0])) {
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4b9c      	ldr	r3, [pc, #624]	; (8003588 <sdcConnect+0x368>)
 8003318:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1b5      	bne.n	800328a <sdcConnect+0x6a>
  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_MMC) {
 800331e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003320:	f006 030f 	and.w	r3, r6, #15
 8003324:	2b02      	cmp	r3, #2
 8003326:	d0ce      	beq.n	80032c6 <sdcConnect+0xa6>
    ocr = SDC_INIT_OCR;
 8003328:	4e98      	ldr	r6, [pc, #608]	; (800358c <sdcConnect+0x36c>)
 800332a:	4a99      	ldr	r2, [pc, #612]	; (8003590 <sdcConnect+0x370>)
 800332c:	2b01      	cmp	r3, #1
 800332e:	bf18      	it	ne
 8003330:	4616      	movne	r6, r2
        MMCSD_R1_ERROR(resp[0])) {
 8003332:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8003588 <sdcConnect+0x368>
    ocr = SDC_INIT_OCR;
 8003336:	2564      	movs	r5, #100	; 0x64
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8003338:	1d3b      	adds	r3, r7, #4
 800333a:	2200      	movs	r2, #0
 800333c:	2137      	movs	r1, #55	; 0x37
 800333e:	4620      	mov	r0, r4
 8003340:	f7fd fe2e 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 8003344:	2800      	cmp	r0, #0
 8003346:	d1a0      	bne.n	800328a <sdcConnect+0x6a>
        MMCSD_R1_ERROR(resp[0])) {
 8003348:	687b      	ldr	r3, [r7, #4]
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 800334a:	ea13 0f08 	tst.w	r3, r8
 800334e:	d19c      	bne.n	800328a <sdcConnect+0x6a>
  sdcp->sdio->ARG = arg;
 8003350:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003352:	f240 4269 	movw	r2, #1129	; 0x469
  sdcp->sdio->ARG = arg;
 8003356:	609e      	str	r6, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003358:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800335a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800335c:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003360:	d0fb      	beq.n	800335a <sdcConnect+0x13a>
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0) {
 8003362:	0748      	lsls	r0, r1, #29
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003364:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0) {
 8003366:	d4c7      	bmi.n	80032f8 <sdcConnect+0xd8>
  *resp = sdcp->sdio->RESP1;
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	607a      	str	r2, [r7, #4]
    if ((resp[0] & 0x80000000U) != 0U) {
 800336c:	2a00      	cmp	r2, #0
 800336e:	db05      	blt.n	800337c <sdcConnect+0x15c>
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 8003370:	3d01      	subs	r5, #1
 8003372:	d08b      	beq.n	800328c <sdcConnect+0x6c>
 8003374:	2064      	movs	r0, #100	; 0x64
 8003376:	f7fe fec3 	bl	8002100 <chThdSleep>
 800337a:	e7dd      	b.n	8003338 <sdcConnect+0x118>
      if ((resp[0] & 0x40000000U) != 0U) {
 800337c:	0052      	lsls	r2, r2, #1
 800337e:	d503      	bpl.n	8003388 <sdcConnect+0x168>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 8003380:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003382:	f043 0310 	orr.w	r3, r3, #16
 8003386:	6323      	str	r3, [r4, #48]	; 0x30
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_ALL_SEND_CID, 0, sdcp->cid)) {
 8003388:	f104 0308 	add.w	r3, r4, #8
 800338c:	2200      	movs	r2, #0
 800338e:	2102      	movs	r1, #2
 8003390:	4620      	mov	r0, r4
 8003392:	f7fd fde5 	bl	8000f60 <sdc_lld_send_cmd_long_crc>
 8003396:	2800      	cmp	r0, #0
 8003398:	f47f af77 	bne.w	800328a <sdcConnect+0x6a>
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_RELATIVE_ADDR,
 800339c:	4602      	mov	r2, r0
 800339e:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80033a2:	2103      	movs	r1, #3
 80033a4:	4620      	mov	r0, r4
 80033a6:	f7fd fdfb 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 80033aa:	2800      	cmp	r0, #0
 80033ac:	f47f af6d 	bne.w	800328a <sdcConnect+0x6a>
                                sdcp->rca, sdcp->csd)) {
 80033b0:	f104 0518 	add.w	r5, r4, #24
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_SEND_CSD,
 80033b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80033b6:	462b      	mov	r3, r5
 80033b8:	2109      	movs	r1, #9
 80033ba:	4620      	mov	r0, r4
 80033bc:	f7fd fdd0 	bl	8000f60 <sdc_lld_send_cmd_long_crc>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	f47f af62 	bne.w	800328a <sdcConnect+0x6a>
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEL_DESEL_CARD,
 80033c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80033c8:	463b      	mov	r3, r7
 80033ca:	2107      	movs	r1, #7
 80033cc:	4620      	mov	r0, r4
 80033ce:	f7fd fde7 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 80033d2:	4606      	mov	r6, r0
 80033d4:	2800      	cmp	r0, #0
 80033d6:	f47f af58 	bne.w	800328a <sdcConnect+0x6a>
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 80033da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d07f      	beq.n	80034e4 <sdcConnect+0x2c4>
static bool sdc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 80033e4:	46e8      	mov	r8, sp
  if (0U == _mmcsd_get_slice(sdcp->csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 80033e6:	227e      	movs	r2, #126	; 0x7e
  uint8_t tmp[N];
 80033e8:	b090      	sub	sp, #64	; 0x40
  if (0U == _mmcsd_get_slice(sdcp->csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 80033ea:	217f      	movs	r1, #127	; 0x7f
 80033ec:	4628      	mov	r0, r5
 80033ee:	f7fd fe5f 	bl	80010b0 <_mmcsd_get_slice>
  uint8_t tmp[N];
 80033f2:	f10d 0908 	add.w	r9, sp, #8
  if (0U == _mmcsd_get_slice(sdcp->csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 80033f6:	b160      	cbz	r0, 8003412 <sdcConnect+0x1f2>
  if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, 0)) {
 80033f8:	9600      	str	r6, [sp, #0]
 80033fa:	2306      	movs	r3, #6
 80033fc:	2240      	movs	r2, #64	; 0x40
 80033fe:	4649      	mov	r1, r9
 8003400:	4620      	mov	r0, r4
 8003402:	f7ff fec5 	bl	8003190 <sdc_lld_read_special>
 8003406:	2800      	cmp	r0, #0
 8003408:	d15c      	bne.n	80034c4 <sdcConnect+0x2a4>
  return ((uint16_t)buf[start] << 8U) | (uint16_t)buf[start + 1U];
 800340a:	f899 300d 	ldrb.w	r3, [r9, #13]
  if ((sdc_cmd6_extract_info(SD_SWITCH_FUNCTION_SPEED, tmp) & 2U) == 2U) {
 800340e:	079b      	lsls	r3, r3, #30
 8003410:	d44e      	bmi.n	80034b0 <sdcConnect+0x290>
 8003412:	46c5      	mov	sp, r8
  sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & 0xFFFFFF00U) | STM32_SDIO_DIV_HS;
 8003414:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8003416:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003418:	684a      	ldr	r2, [r1, #4]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003422:	2b02      	cmp	r3, #2
 8003424:	604a      	str	r2, [r1, #4]
 8003426:	d072      	beq.n	800350e <sdcConnect+0x2ee>
    sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 8003428:	4628      	mov	r0, r5
 800342a:	f7fd fe71 	bl	8001110 <_mmcsd_get_capacity>
 800342e:	62a0      	str	r0, [r4, #40]	; 0x28
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BLOCKLEN,
 8003430:	463b      	mov	r3, r7
 8003432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003436:	2110      	movs	r1, #16
 8003438:	4620      	mov	r0, r4
 800343a:	f7fd fdb1 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 800343e:	4605      	mov	r5, r0
 8003440:	2800      	cmp	r0, #0
 8003442:	f47f af22 	bne.w	800328a <sdcConnect+0x6a>
      MMCSD_R1_ERROR(resp[0])) {
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	4e4f      	ldr	r6, [pc, #316]	; (8003588 <sdcConnect+0x368>)
                                 MMCSD_BLOCK_SIZE, resp) ||
 800344a:	4233      	tst	r3, r6
 800344c:	f47f af1d 	bne.w	800328a <sdcConnect+0x6a>
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
 8003450:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003452:	f013 0f0e 	tst.w	r3, #14
 8003456:	f003 020f 	and.w	r2, r3, #15
 800345a:	d14a      	bne.n	80034f2 <sdcConnect+0x2d2>
  if (SDC_MODE_1BIT == sdcp->config->bus_width) {
 800345c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	b31b      	cbz	r3, 80034aa <sdcConnect+0x28a>
  else if (SDC_MODE_4BIT == sdcp->config->bus_width) {
 8003462:	2b01      	cmp	r3, #1
 8003464:	f47f af11 	bne.w	800328a <sdcConnect+0x6a>
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 8003468:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 800346a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800346c:	684b      	ldr	r3, [r1, #4]
 800346e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_0;
 8003472:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003476:	604b      	str	r3, [r1, #4]
 8003478:	4620      	mov	r0, r4
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	2137      	movs	r1, #55	; 0x37
 800347e:	f7fd fd8f 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 8003482:	2800      	cmp	r0, #0
 8003484:	f47f af01 	bne.w	800328a <sdcConnect+0x6a>
        MMCSD_R1_ERROR(resp[0])) {
 8003488:	687b      	ldr	r3, [r7, #4]
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 800348a:	4233      	tst	r3, r6
 800348c:	f47f aefd 	bne.w	800328a <sdcConnect+0x6a>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 8003490:	1d3b      	adds	r3, r7, #4
 8003492:	2202      	movs	r2, #2
 8003494:	2106      	movs	r1, #6
 8003496:	4620      	mov	r0, r4
 8003498:	f7fd fd82 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 800349c:	2800      	cmp	r0, #0
 800349e:	f47f aef4 	bne.w	800328a <sdcConnect+0x6a>
        MMCSD_R1_ERROR(resp[0])) {
 80034a2:	687b      	ldr	r3, [r7, #4]
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 80034a4:	4233      	tst	r3, r6
 80034a6:	f47f aef0 	bne.w	800328a <sdcConnect+0x6a>
  sdcp->state = BLK_READY;
 80034aa:	2305      	movs	r3, #5
 80034ac:	7123      	strb	r3, [r4, #4]
  return HAL_SUCCESS;
 80034ae:	e6f3      	b.n	8003298 <sdcConnect+0x78>
    if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, cmdarg)) {
 80034b0:	4b38      	ldr	r3, [pc, #224]	; (8003594 <sdcConnect+0x374>)
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	2240      	movs	r2, #64	; 0x40
 80034b6:	2306      	movs	r3, #6
 80034b8:	4649      	mov	r1, r9
 80034ba:	4620      	mov	r0, r4
 80034bc:	f7ff fe68 	bl	8003190 <sdc_lld_read_special>
 80034c0:	2800      	cmp	r0, #0
 80034c2:	d0a6      	beq.n	8003412 <sdcConnect+0x1f2>
 80034c4:	46c5      	mov	sp, r8
 80034c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80034c8:	e6e0      	b.n	800328c <sdcConnect+0x6c>
  sdcp->sdio->ARG = arg;
 80034ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      sdcp->cardmode = SDC_MODE_CARDTYPE_SDV11;
 80034cc:	6323      	str	r3, [r4, #48]	; 0x30
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 80034ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
  sdcp->sdio->ARG = arg;
 80034d2:	6093      	str	r3, [r2, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 80034d4:	60d1      	str	r1, [r2, #12]
  while ((sdcp->sdio->STA & SDIO_STA_CMDSENT) == 0)
 80034d6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80034d8:	0619      	lsls	r1, r3, #24
 80034da:	d5fc      	bpl.n	80034d6 <sdcConnect+0x2b6>
  sdcp->sdio->ICR = SDIO_ICR_CMDSENTC;
 80034dc:	2380      	movs	r3, #128	; 0x80
    ocr = SDC_INIT_OCR;
 80034de:	4e2c      	ldr	r6, [pc, #176]	; (8003590 <sdcConnect+0x370>)
 80034e0:	6393      	str	r3, [r2, #56]	; 0x38
  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_MMC) {
 80034e2:	e726      	b.n	8003332 <sdcConnect+0x112>
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 80034e4:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <sdcConnect+0x378>)
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	2106      	movs	r1, #6
 80034ea:	4620      	mov	r0, r4
 80034ec:	f7fd fd58 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
  return HAL_SUCCESS;
 80034f0:	e790      	b.n	8003414 <sdcConnect+0x1f4>
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
 80034f2:	2a02      	cmp	r2, #2
 80034f4:	f47f aec9 	bne.w	800328a <sdcConnect+0x6a>
  switch (sdcp->config->bus_width) {
 80034f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d053      	beq.n	80035a8 <sdcConnect+0x388>
 8003500:	2b02      	cmp	r3, #2
 8003502:	d028      	beq.n	8003556 <sdcConnect+0x336>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0d0      	beq.n	80034aa <sdcConnect+0x28a>
    osalDbgAssert(false, "unexpected case");
 8003508:	4824      	ldr	r0, [pc, #144]	; (800359c <sdcConnect+0x37c>)
 800350a:	f7fd fa01 	bl	8000910 <chSysHalt>
    if (_mmcsd_get_slice(sdcp->csd, MMCSD_CSD_MMC_CSD_STRUCTURE_SLICE) > 1U) {
 800350e:	227e      	movs	r2, #126	; 0x7e
 8003510:	217f      	movs	r1, #127	; 0x7f
 8003512:	4628      	mov	r0, r5
 8003514:	f7fd fdcc 	bl	80010b0 <_mmcsd_get_slice>
 8003518:	2801      	cmp	r0, #1
 800351a:	d985      	bls.n	8003428 <sdcConnect+0x208>
      if (sdc_lld_read_special(sdcp, ext_csd, 512, MMCSD_CMD_SEND_EXT_CSD, 0)) {
 800351c:	2300      	movs	r3, #0
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003524:	2308      	movs	r3, #8
 8003526:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800352a:	4620      	mov	r0, r4
 800352c:	f7ff fe30 	bl	8003190 <sdc_lld_read_special>
 8003530:	2800      	cmp	r0, #0
 8003532:	f47f aeaa 	bne.w	800328a <sdcConnect+0x6a>
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
         ((uint32_t)ext_csd[214] << 16U) +
 8003536:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
  return ((uint32_t)ext_csd[215] << 24U) +
 800353a:	f894 0123 	ldrb.w	r0, [r4, #291]	; 0x123
         ((uint32_t)ext_csd[213] << 8U)  +
         (uint32_t)ext_csd[212];
 800353e:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
         ((uint32_t)ext_csd[213] << 8U)  +
 8003542:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
         ((uint32_t)ext_csd[214] << 16U) +
 8003546:	041b      	lsls	r3, r3, #16
  return ((uint32_t)ext_csd[215] << 24U) +
 8003548:	eb03 6300 	add.w	r3, r3, r0, lsl #24
         ((uint32_t)ext_csd[213] << 8U)  +
 800354c:	440b      	add	r3, r1
 800354e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      sdcp->capacity = _mmcsd_get_capacity_ext(ext_csd);
 8003552:	62a3      	str	r3, [r4, #40]	; 0x28
 8003554:	e76c      	b.n	8003430 <sdcConnect+0x210>
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 8003556:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 2, 0);
 8003558:	4a11      	ldr	r2, [pc, #68]	; (80035a0 <sdcConnect+0x380>)
 800355a:	684b      	ldr	r3, [r1, #4]
 800355c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_1;
 8003560:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003564:	604b      	str	r3, [r1, #4]
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	2106      	movs	r1, #6
 800356a:	4620      	mov	r0, r4
 800356c:	f7fd fd18 	bl	8000fa0 <sdc_lld_send_cmd_short_crc>
 8003570:	2800      	cmp	r0, #0
 8003572:	f47f ae8a 	bne.w	800328a <sdcConnect+0x6a>
      MMCSD_R1_ERROR(resp[0])) {
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <sdcConnect+0x368>)
 800357a:	4013      	ands	r3, r2
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 800357c:	2b00      	cmp	r3, #0
 800357e:	d094      	beq.n	80034aa <sdcConnect+0x28a>
 8003580:	e683      	b.n	800328a <sdcConnect+0x6a>
 8003582:	bf00      	nop
 8003584:	08005780 	.word	0x08005780
 8003588:	fdffe008 	.word	0xfdffe008
 800358c:	50ff8000 	.word	0x50ff8000
 8003590:	80100000 	.word	0x80100000
 8003594:	80fffff1 	.word	0x80fffff1
 8003598:	03b90100 	.word	0x03b90100
 800359c:	08005738 	.word	0x08005738
 80035a0:	03b70200 	.word	0x03b70200
 80035a4:	c0ff8000 	.word	0xc0ff8000
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 80035a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 1, 0);
 80035aa:	4a04      	ldr	r2, [pc, #16]	; (80035bc <sdcConnect+0x39c>)
 80035ac:	684b      	ldr	r3, [r1, #4]
 80035ae:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_0;
 80035b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035b6:	604b      	str	r3, [r1, #4]
    break;
 80035b8:	e7d5      	b.n	8003566 <sdcConnect+0x346>
 80035ba:	bf00      	nop
 80035bc:	03b70100 	.word	0x03b70100

080035c0 <sdcDisconnect>:
bool sdcDisconnect(SDCDriver *sdcp) {
 80035c0:	b538      	push	{r3, r4, r5, lr}
  osalDbgCheck(sdcp != NULL);
 80035c2:	b320      	cbz	r0, 800360e <sdcDisconnect+0x4e>
 80035c4:	4604      	mov	r4, r0
 80035c6:	2320      	movs	r3, #32
 80035c8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80035cc:	f7fe faa0 	bl	8001b10 <_dbg_check_lock>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 80035d0:	7923      	ldrb	r3, [r4, #4]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d021      	beq.n	800361a <sdcDisconnect+0x5a>
 80035d6:	2b05      	cmp	r3, #5
 80035d8:	d119      	bne.n	800360e <sdcDisconnect+0x4e>
  sdcp->state = BLK_DISCONNECTING;
 80035da:	2304      	movs	r3, #4
 80035dc:	7123      	strb	r3, [r4, #4]
  _dbg_check_unlock();
 80035de:	f7fe fa6f 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80035e2:	4b17      	ldr	r3, [pc, #92]	; (8003640 <sdcDisconnect+0x80>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d004      	beq.n	80035f4 <sdcDisconnect+0x34>
 80035ea:	6999      	ldr	r1, [r3, #24]
 80035ec:	6893      	ldr	r3, [r2, #8]
 80035ee:	688a      	ldr	r2, [r1, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d30f      	bcc.n	8003614 <sdcDisconnect+0x54>
 80035f4:	2500      	movs	r5, #0
 80035f6:	f385 8811 	msr	BASEPRI, r5
  if (_sdc_wait_for_transfer_state(sdcp)) {
 80035fa:	4620      	mov	r0, r4
 80035fc:	f7fe fdc8 	bl	8002190 <_sdc_wait_for_transfer_state>
  sdcp->sdio->CLKCR = 0;
 8003600:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    sdcp->state = BLK_ACTIVE;
 8003602:	2202      	movs	r2, #2
  if (_sdc_wait_for_transfer_state(sdcp)) {
 8003604:	b9c0      	cbnz	r0, 8003638 <sdcDisconnect+0x78>
 8003606:	6058      	str	r0, [r3, #4]
  sdcp->sdio->POWER = 0;
 8003608:	6018      	str	r0, [r3, #0]
  sdcp->state = BLK_ACTIVE;
 800360a:	7122      	strb	r2, [r4, #4]
}
 800360c:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(sdcp != NULL);
 800360e:	480d      	ldr	r0, [pc, #52]	; (8003644 <sdcDisconnect+0x84>)
 8003610:	f7fd f97e 	bl	8000910 <chSysHalt>
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <sdcDisconnect+0x88>)
 8003616:	f7fd f97b 	bl	8000910 <chSysHalt>
  _dbg_check_unlock();
 800361a:	f7fe fa51 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <sdcDisconnect+0x80>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d004      	beq.n	8003630 <sdcDisconnect+0x70>
 8003626:	6999      	ldr	r1, [r3, #24]
 8003628:	6893      	ldr	r3, [r2, #8]
 800362a:	688a      	ldr	r2, [r1, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	d3f1      	bcc.n	8003614 <sdcDisconnect+0x54>
 8003630:	2000      	movs	r0, #0
 8003632:	f380 8811 	msr	BASEPRI, r0
}
 8003636:	bd38      	pop	{r3, r4, r5, pc}
  sdcp->sdio->CLKCR = 0;
 8003638:	605d      	str	r5, [r3, #4]
  sdcp->sdio->POWER = 0;
 800363a:	601d      	str	r5, [r3, #0]
    sdcp->state = BLK_ACTIVE;
 800363c:	7122      	strb	r2, [r4, #4]
}
 800363e:	bd38      	pop	{r3, r4, r5, pc}
 8003640:	20004b48 	.word	0x20004b48
 8003644:	080057a4 	.word	0x080057a4
 8003648:	08005484 	.word	0x08005484
 800364c:	00000000 	.word	0x00000000

08003650 <cmd_sdc>:
  if (argc != 1) {
 8003650:	2901      	cmp	r1, #1
 8003652:	f040 810d 	bne.w	8003870 <cmd_sdc+0x220>
void cmd_sdc(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003656:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!blkIsInserted(&SDCD1)) {
 800365a:	4c87      	ldr	r4, [pc, #540]	; (8003878 <cmd_sdc+0x228>)
 800365c:	6823      	ldr	r3, [r4, #0]
void cmd_sdc(BaseSequentialStream *chp, int argc, char *argv[]) {
 800365e:	b085      	sub	sp, #20
 8003660:	4605      	mov	r5, r0
  if (!blkIsInserted(&SDCD1)) {
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4620      	mov	r0, r4
 8003666:	4693      	mov	fp, r2
 8003668:	4798      	blx	r3
 800366a:	2800      	cmp	r0, #0
 800366c:	f000 80f9 	beq.w	8003862 <cmd_sdc+0x212>
  chprintf(chp, "Connecting... ");
 8003670:	4982      	ldr	r1, [pc, #520]	; (800387c <cmd_sdc+0x22c>)
 8003672:	4628      	mov	r0, r5
 8003674:	f7fd ff1c 	bl	80014b0 <chprintf>
  if (sdcConnect(&SDCD1)) {
 8003678:	4620      	mov	r0, r4
 800367a:	f7ff fdd1 	bl	8003220 <sdcConnect>
 800367e:	2800      	cmp	r0, #0
 8003680:	f040 828c 	bne.w	8003b9c <cmd_sdc+0x54c>
  chprintf(chp, "OK\r\n\r\nCard Info\r\n");
 8003684:	497e      	ldr	r1, [pc, #504]	; (8003880 <cmd_sdc+0x230>)
 8003686:	4628      	mov	r0, r5
 8003688:	f7fd ff12 	bl	80014b0 <chprintf>
  chprintf(chp, "CSD      : %08X %8X %08X %08X \r\n",
 800368c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8003690:	497c      	ldr	r1, [pc, #496]	; (8003884 <cmd_sdc+0x234>)
 8003692:	e9cd 3200 	strd	r3, r2, [sp]
 8003696:	4628      	mov	r0, r5
 8003698:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800369c:	f7fd ff08 	bl	80014b0 <chprintf>
  chprintf(chp, "CID      : %08X %8X %08X %08X \r\n",
 80036a0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80036a4:	4978      	ldr	r1, [pc, #480]	; (8003888 <cmd_sdc+0x238>)
 80036a6:	e9cd 3200 	strd	r3, r2, [sp]
 80036aa:	4628      	mov	r0, r5
 80036ac:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80036b0:	f7fd fefe 	bl	80014b0 <chprintf>
  chprintf(chp, "Mode     : %s\r\n", mode[SDCD1.cardmode & 3U]);
 80036b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036b6:	4a75      	ldr	r2, [pc, #468]	; (800388c <cmd_sdc+0x23c>)
 80036b8:	4975      	ldr	r1, [pc, #468]	; (8003890 <cmd_sdc+0x240>)
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	4628      	mov	r0, r5
 80036c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80036c4:	f7fd fef4 	bl	80014b0 <chprintf>
  chprintf(chp, "Capacity : %DMB\r\n", SDCD1.capacity / 2048);
 80036c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80036ca:	4972      	ldr	r1, [pc, #456]	; (8003894 <cmd_sdc+0x244>)
 80036cc:	0ad2      	lsrs	r2, r2, #11
 80036ce:	4628      	mov	r0, r5
 80036d0:	f7fd feee 	bl	80014b0 <chprintf>
  if ((strcmp(argv[0], "read") == 0) ||
 80036d4:	f8db 6000 	ldr.w	r6, [fp]
  startblk = (SDCD1.capacity / MMCSD_BLOCK_SIZE) / 2;
 80036d8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if ((strcmp(argv[0], "read") == 0) ||
 80036da:	496f      	ldr	r1, [pc, #444]	; (8003898 <cmd_sdc+0x248>)
 80036dc:	4630      	mov	r0, r6
  startblk = (SDCD1.capacity / MMCSD_BLOCK_SIZE) / 2;
 80036de:	0abf      	lsrs	r7, r7, #10
  if ((strcmp(argv[0], "read") == 0) ||
 80036e0:	f7fc feb2 	bl	8000448 <strcmp>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	f000 80f3 	beq.w	80038d0 <cmd_sdc+0x280>
      (strcmp(argv[0], "all") == 0)) {
 80036ea:	496c      	ldr	r1, [pc, #432]	; (800389c <cmd_sdc+0x24c>)
 80036ec:	4630      	mov	r0, r6
 80036ee:	f7fc feab 	bl	8000448 <strcmp>
  if ((strcmp(argv[0], "read") == 0) ||
 80036f2:	2800      	cmp	r0, #0
 80036f4:	f000 80ec 	beq.w	80038d0 <cmd_sdc+0x280>
  if ((strcmp(argv[0], "write") == 0) ||
 80036f8:	4969      	ldr	r1, [pc, #420]	; (80038a0 <cmd_sdc+0x250>)
 80036fa:	4630      	mov	r0, r6
 80036fc:	f7fc fea4 	bl	8000448 <strcmp>
 8003700:	2800      	cmp	r0, #0
 8003702:	f040 8236 	bne.w	8003b72 <cmd_sdc+0x522>
    memset(buf, 0xAA, MMCSD_BLOCK_SIZE * 2);
 8003706:	4e67      	ldr	r6, [pc, #412]	; (80038a4 <cmd_sdc+0x254>)
 8003708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800370c:	21aa      	movs	r1, #170	; 0xaa
 800370e:	4630      	mov	r0, r6
 8003710:	f001 f9f8 	bl	8004b04 <memset>
    chprintf(chp, "Writing...");
 8003714:	4964      	ldr	r1, [pc, #400]	; (80038a8 <cmd_sdc+0x258>)
 8003716:	4628      	mov	r0, r5
 8003718:	f7fd feca 	bl	80014b0 <chprintf>
    if(sdcWrite(&SDCD1, startblk, buf, 2)) {
 800371c:	4856      	ldr	r0, [pc, #344]	; (8003878 <cmd_sdc+0x228>)
 800371e:	4632      	mov	r2, r6
 8003720:	2302      	movs	r3, #2
 8003722:	4639      	mov	r1, r7
 8003724:	f7ff fc14 	bl	8002f50 <sdcWrite>
 8003728:	2800      	cmp	r0, #0
 800372a:	f040 822a 	bne.w	8003b82 <cmd_sdc+0x532>
    chprintf(chp, "OK\r\n");
 800372e:	495f      	ldr	r1, [pc, #380]	; (80038ac <cmd_sdc+0x25c>)
 8003730:	4628      	mov	r0, r5
 8003732:	f7fd febd 	bl	80014b0 <chprintf>
    memset(buf, 0x55, MMCSD_BLOCK_SIZE * 2);
 8003736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800373a:	2155      	movs	r1, #85	; 0x55
 800373c:	4630      	mov	r0, r6
 800373e:	f001 f9e1 	bl	8004b04 <memset>
    chprintf(chp, "Reading...");
 8003742:	495b      	ldr	r1, [pc, #364]	; (80038b0 <cmd_sdc+0x260>)
 8003744:	4628      	mov	r0, r5
 8003746:	f7fd feb3 	bl	80014b0 <chprintf>
    if (blkRead(&SDCD1, startblk, buf, 1)) {
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	484a      	ldr	r0, [pc, #296]	; (8003878 <cmd_sdc+0x228>)
 800374e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003752:	4632      	mov	r2, r6
 8003754:	2301      	movs	r3, #1
 8003756:	4639      	mov	r1, r7
 8003758:	47c0      	blx	r8
 800375a:	2800      	cmp	r0, #0
 800375c:	f040 8211 	bne.w	8003b82 <cmd_sdc+0x532>
    chprintf(chp, "OK\r\n");
 8003760:	4952      	ldr	r1, [pc, #328]	; (80038ac <cmd_sdc+0x25c>)
 8003762:	4628      	mov	r0, r5
 8003764:	f7fd fea4 	bl	80014b0 <chprintf>
    for (i = 0; i < MMCSD_BLOCK_SIZE; i++)
 8003768:	f206 10ff 	addw	r0, r6, #511	; 0x1ff
    chprintf(chp, "OK\r\n");
 800376c:	1e73      	subs	r3, r6, #1
 800376e:	f1c6 0109 	rsb	r1, r6, #9
      buf[i] = i + 8;
 8003772:	18ca      	adds	r2, r1, r3
 8003774:	f803 2f01 	strb.w	r2, [r3, #1]!
    for (i = 0; i < MMCSD_BLOCK_SIZE; i++)
 8003778:	4298      	cmp	r0, r3
 800377a:	d1fa      	bne.n	8003772 <cmd_sdc+0x122>
    chprintf(chp, "Writing...");
 800377c:	494a      	ldr	r1, [pc, #296]	; (80038a8 <cmd_sdc+0x258>)
 800377e:	4628      	mov	r0, r5
 8003780:	f7fd fe96 	bl	80014b0 <chprintf>
    if(sdcWrite(&SDCD1, startblk, buf, 2)) {
 8003784:	4a47      	ldr	r2, [pc, #284]	; (80038a4 <cmd_sdc+0x254>)
 8003786:	483c      	ldr	r0, [pc, #240]	; (8003878 <cmd_sdc+0x228>)
 8003788:	2302      	movs	r3, #2
 800378a:	4639      	mov	r1, r7
 800378c:	f7ff fbe0 	bl	8002f50 <sdcWrite>
 8003790:	4680      	mov	r8, r0
 8003792:	2800      	cmp	r0, #0
 8003794:	f040 81f5 	bne.w	8003b82 <cmd_sdc+0x532>
    chprintf(chp, "OK\r\n");
 8003798:	4944      	ldr	r1, [pc, #272]	; (80038ac <cmd_sdc+0x25c>)
 800379a:	4628      	mov	r0, r5
 800379c:	f7fd fe88 	bl	80014b0 <chprintf>
    memset(buf, 0, MMCSD_BLOCK_SIZE * 2);
 80037a0:	4641      	mov	r1, r8
 80037a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037a6:	483f      	ldr	r0, [pc, #252]	; (80038a4 <cmd_sdc+0x254>)
 80037a8:	f001 f9ac 	bl	8004b04 <memset>
    chprintf(chp, "Reading...");
 80037ac:	4940      	ldr	r1, [pc, #256]	; (80038b0 <cmd_sdc+0x260>)
 80037ae:	4628      	mov	r0, r5
 80037b0:	f7fd fe7e 	bl	80014b0 <chprintf>
    if (blkRead(&SDCD1, startblk, buf, 1)) {
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	4a3b      	ldr	r2, [pc, #236]	; (80038a4 <cmd_sdc+0x254>)
 80037b8:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80037bc:	482e      	ldr	r0, [pc, #184]	; (8003878 <cmd_sdc+0x228>)
 80037be:	2301      	movs	r3, #1
 80037c0:	4639      	mov	r1, r7
 80037c2:	47c0      	blx	r8
 80037c4:	2800      	cmp	r0, #0
 80037c6:	f040 81dc 	bne.w	8003b82 <cmd_sdc+0x532>
    chprintf(chp, "OK\r\n");
 80037ca:	4938      	ldr	r1, [pc, #224]	; (80038ac <cmd_sdc+0x25c>)
 80037cc:	4628      	mov	r0, r5
 80037ce:	f7fd fe6f 	bl	80014b0 <chprintf>
  if ((strcmp(argv[0], "erase") == 0) ||
 80037d2:	f8db 8000 	ldr.w	r8, [fp]
 80037d6:	4937      	ldr	r1, [pc, #220]	; (80038b4 <cmd_sdc+0x264>)
 80037d8:	4640      	mov	r0, r8
 80037da:	f7fc fe35 	bl	8000448 <strcmp>
 80037de:	b130      	cbz	r0, 80037ee <cmd_sdc+0x19e>
      (strcmp(argv[0], "all") == 0)) {
 80037e0:	492e      	ldr	r1, [pc, #184]	; (800389c <cmd_sdc+0x24c>)
 80037e2:	4640      	mov	r0, r8
 80037e4:	f7fc fe30 	bl	8000448 <strcmp>
  if ((strcmp(argv[0], "erase") == 0) ||
 80037e8:	2800      	cmp	r0, #0
 80037ea:	f040 81ce 	bne.w	8003b8a <cmd_sdc+0x53a>
    memset(buf, 0, MMCSD_BLOCK_SIZE * 2);
 80037ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037f2:	2100      	movs	r1, #0
 80037f4:	482b      	ldr	r0, [pc, #172]	; (80038a4 <cmd_sdc+0x254>)
 80037f6:	f001 f985 	bl	8004b04 <memset>
    memset(buf2, 0, MMCSD_BLOCK_SIZE * 2);
 80037fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037fe:	482e      	ldr	r0, [pc, #184]	; (80038b8 <cmd_sdc+0x268>)
 8003800:	2100      	movs	r1, #0
 8003802:	f001 f97f 	bl	8004b04 <memset>
    for (; i < MMCSD_BLOCK_SIZE * 2; ++i) {
 8003806:	4a2d      	ldr	r2, [pc, #180]	; (80038bc <cmd_sdc+0x26c>)
      buf[i] = (i + 7) % 'T'; //Ensure block 1/2 are not equal
 8003808:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 80038cc <cmd_sdc+0x27c>
 800380c:	f1c6 0c08 	rsb	ip, r6, #8
 8003810:	2054      	movs	r0, #84	; 0x54
 8003812:	f502 6680 	add.w	r6, r2, #1024	; 0x400
 8003816:	eb0c 0102 	add.w	r1, ip, r2
 800381a:	088b      	lsrs	r3, r1, #2
 800381c:	fbae 8303 	umull	r8, r3, lr, r3
 8003820:	089b      	lsrs	r3, r3, #2
 8003822:	fb00 1313 	mls	r3, r0, r3, r1
 8003826:	f802 3f01 	strb.w	r3, [r2, #1]!
    for (; i < MMCSD_BLOCK_SIZE * 2; ++i) {
 800382a:	42b2      	cmp	r2, r6
 800382c:	d1f3      	bne.n	8003816 <cmd_sdc+0x1c6>
    if(sdcWrite(&SDCD1, startblk, buf, 2)) {
 800382e:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <cmd_sdc+0x254>)
 8003830:	4811      	ldr	r0, [pc, #68]	; (8003878 <cmd_sdc+0x228>)
 8003832:	2302      	movs	r3, #2
 8003834:	4639      	mov	r1, r7
 8003836:	f7ff fb8b 	bl	8002f50 <sdcWrite>
 800383a:	2800      	cmp	r0, #0
 800383c:	f040 81b5 	bne.w	8003baa <cmd_sdc+0x55a>
    if(sdcErase(&SDCD1, startblk + 1, startblk + 2)) {
 8003840:	f107 0802 	add.w	r8, r7, #2
 8003844:	4641      	mov	r1, r8
 8003846:	1c78      	adds	r0, r7, #1
 8003848:	f7fe fcca 	bl	80021e0 <sdcErase.constprop.0>
 800384c:	4606      	mov	r6, r0
 800384e:	2800      	cmp	r0, #0
 8003850:	f040 81b0 	bne.w	8003bb4 <cmd_sdc+0x564>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8003854:	7923      	ldrb	r3, [r4, #4]
 8003856:	2b05      	cmp	r3, #5
 8003858:	f000 81d2 	beq.w	8003c00 <cmd_sdc+0x5b0>
 800385c:	4818      	ldr	r0, [pc, #96]	; (80038c0 <cmd_sdc+0x270>)
 800385e:	f7fd f857 	bl	8000910 <chSysHalt>
    chprintf(chp, "Card not inserted, aborting.\r\n");
 8003862:	4918      	ldr	r1, [pc, #96]	; (80038c4 <cmd_sdc+0x274>)
 8003864:	4628      	mov	r0, r5
}
 8003866:	b005      	add	sp, #20
 8003868:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    chprintf(chp, "failed\r\n");
 800386c:	f7fd be20 	b.w	80014b0 <chprintf>
    chprintf(chp, "Usage: sdiotest read|write|erase|all\r\n");
 8003870:	4915      	ldr	r1, [pc, #84]	; (80038c8 <cmd_sdc+0x278>)
 8003872:	f7fd be1d 	b.w	80014b0 <chprintf>
 8003876:	bf00      	nop
 8003878:	200008f8 	.word	0x200008f8
 800387c:	080050b0 	.word	0x080050b0
 8003880:	080050c0 	.word	0x080050c0
 8003884:	080050d4 	.word	0x080050d4
 8003888:	080050f8 	.word	0x080050f8
 800388c:	08005900 	.word	0x08005900
 8003890:	0800511c 	.word	0x0800511c
 8003894:	0800512c 	.word	0x0800512c
 8003898:	08005140 	.word	0x08005140
 800389c:	08005148 	.word	0x08005148
 80038a0:	08005238 	.word	0x08005238
 80038a4:	20000b44 	.word	0x20000b44
 80038a8:	08005240 	.word	0x08005240
 80038ac:	0800524c 	.word	0x0800524c
 80038b0:	08005254 	.word	0x08005254
 80038b4:	08005260 	.word	0x08005260
 80038b8:	20002b48 	.word	0x20002b48
 80038bc:	20000b43 	.word	0x20000b43
 80038c0:	080057c8 	.word	0x080057c8
 80038c4:	08005090 	.word	0x08005090
 80038c8:	08005068 	.word	0x08005068
 80038cc:	30c30c31 	.word	0x30c30c31
    chprintf(chp, "Single block aligned read performance:           ");
 80038d0:	49bb      	ldr	r1, [pc, #748]	; (8003bc0 <cmd_sdc+0x570>)
 80038d2:	4628      	mov	r0, r5
 80038d4:	f7fd fdec 	bl	80014b0 <chprintf>
 80038d8:	2320      	movs	r3, #32
 80038da:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80038de:	f7fe f917 	bl	8001b10 <_dbg_check_lock>
 80038e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80038e6:	4eb7      	ldr	r6, [pc, #732]	; (8003bc4 <cmd_sdc+0x574>)
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	9302      	str	r3, [sp, #8]
  _dbg_check_unlock();
 80038ec:	f7fe f8e8 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80038f0:	6833      	ldr	r3, [r6, #0]
 80038f2:	42b3      	cmp	r3, r6
 80038f4:	d005      	beq.n	8003902 <cmd_sdc+0x2b2>
 80038f6:	69b2      	ldr	r2, [r6, #24]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	6892      	ldr	r2, [r2, #8]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	f0c0 814a 	bcc.w	8003b96 <cmd_sdc+0x546>
 8003902:	f04f 0800 	mov.w	r8, #0
 8003906:	f388 8811 	msr	BASEPRI, r8
      if (blkRead(&SDCD1, startblk, buf, 1)) {
 800390a:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8003bd4 <cmd_sdc+0x584>
    n = 0;
 800390e:	f8cd b00c 	str.w	fp, [sp, #12]
 8003912:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003916:	46b9      	mov	r9, r7
      if (blkRead(&SDCD1, startblk, buf, 1)) {
 8003918:	6822      	ldr	r2, [r4, #0]
 800391a:	2301      	movs	r3, #1
 800391c:	6957      	ldr	r7, [r2, #20]
 800391e:	4aaa      	ldr	r2, [pc, #680]	; (8003bc8 <cmd_sdc+0x578>)
 8003920:	4649      	mov	r1, r9
 8003922:	4650      	mov	r0, sl
 8003924:	47b8      	blx	r7
 8003926:	2800      	cmp	r0, #0
 8003928:	f040 812b 	bne.w	8003b82 <cmd_sdc+0x532>
      n++;
 800392c:	f108 0801 	add.w	r8, r8, #1
 8003930:	2320      	movs	r3, #32
 8003932:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003936:	f7fe f8eb 	bl	8001b10 <_dbg_check_lock>
 800393a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800393e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8003940:	f7fe f8be 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003944:	6833      	ldr	r3, [r6, #0]
 8003946:	42b3      	cmp	r3, r6
 8003948:	d005      	beq.n	8003956 <cmd_sdc+0x306>
 800394a:	69b2      	ldr	r2, [r6, #24]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	6892      	ldr	r2, [r2, #8]
 8003950:	429a      	cmp	r2, r3
 8003952:	f0c0 8120 	bcc.w	8003b96 <cmd_sdc+0x546>
 8003956:	2300      	movs	r3, #0
 8003958:	f383 8811 	msr	BASEPRI, r3
    } while (chVTIsSystemTimeWithin(start, end));
 800395c:	f242 730f 	movw	r3, #9999	; 0x270f
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003960:	eba7 070b 	sub.w	r7, r7, fp
 8003964:	429f      	cmp	r7, r3
 8003966:	d9d7      	bls.n	8003918 <cmd_sdc+0x2c8>
    chprintf(chp, "%D blocks/S, %D bytes/S\r\n", n, n * MMCSD_BLOCK_SIZE);
 8003968:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800396c:	4642      	mov	r2, r8
 800396e:	4997      	ldr	r1, [pc, #604]	; (8003bcc <cmd_sdc+0x57c>)
 8003970:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003974:	4628      	mov	r0, r5
 8003976:	f7fd fd9b 	bl	80014b0 <chprintf>
    chprintf(chp, "16 sequential blocks aligned read performance:   ");
 800397a:	4995      	ldr	r1, [pc, #596]	; (8003bd0 <cmd_sdc+0x580>)
 800397c:	4628      	mov	r0, r5
 800397e:	f7fd fd97 	bl	80014b0 <chprintf>
 8003982:	464f      	mov	r7, r9
 8003984:	2320      	movs	r3, #32
 8003986:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800398a:	f7fe f8c1 	bl	8001b10 <_dbg_check_lock>
 800398e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	9302      	str	r3, [sp, #8]
  _dbg_check_unlock();
 8003996:	f7fe f893 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800399a:	6833      	ldr	r3, [r6, #0]
 800399c:	42b3      	cmp	r3, r6
 800399e:	d005      	beq.n	80039ac <cmd_sdc+0x35c>
 80039a0:	69b2      	ldr	r2, [r6, #24]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	6892      	ldr	r2, [r2, #8]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	f0c0 80f5 	bcc.w	8003b96 <cmd_sdc+0x546>
 80039ac:	f04f 0800 	mov.w	r8, #0
 80039b0:	f388 8811 	msr	BASEPRI, r8
      if (blkRead(&SDCD1, startblk, buf, SDC_BURST_SIZE)) {
 80039b4:	f8df a210 	ldr.w	sl, [pc, #528]	; 8003bc8 <cmd_sdc+0x578>
    n = 0;
 80039b8:	46a9      	mov	r9, r5
      if (blkRead(&SDCD1, startblk, buf, SDC_BURST_SIZE)) {
 80039ba:	6822      	ldr	r2, [r4, #0]
 80039bc:	4885      	ldr	r0, [pc, #532]	; (8003bd4 <cmd_sdc+0x584>)
 80039be:	6955      	ldr	r5, [r2, #20]
 80039c0:	2310      	movs	r3, #16
 80039c2:	4652      	mov	r2, sl
 80039c4:	4639      	mov	r1, r7
 80039c6:	47a8      	blx	r5
 80039c8:	2800      	cmp	r0, #0
 80039ca:	f040 80d9 	bne.w	8003b80 <cmd_sdc+0x530>
      n += SDC_BURST_SIZE;
 80039ce:	f108 0810 	add.w	r8, r8, #16
 80039d2:	2320      	movs	r3, #32
 80039d4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80039d8:	f7fe f89a 	bl	8001b10 <_dbg_check_lock>
 80039dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039e0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  _dbg_check_unlock();
 80039e2:	f7fe f86d 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80039e6:	6833      	ldr	r3, [r6, #0]
 80039e8:	42b3      	cmp	r3, r6
 80039ea:	d005      	beq.n	80039f8 <cmd_sdc+0x3a8>
 80039ec:	69b2      	ldr	r2, [r6, #24]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	6892      	ldr	r2, [r2, #8]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	f0c0 80cf 	bcc.w	8003b96 <cmd_sdc+0x546>
 80039f8:	2300      	movs	r3, #0
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	9a02      	ldr	r2, [sp, #8]
    } while (chVTIsSystemTimeWithin(start, end));
 8003a00:	f242 730f 	movw	r3, #9999	; 0x270f
 8003a04:	1aad      	subs	r5, r5, r2
 8003a06:	429d      	cmp	r5, r3
 8003a08:	d9d7      	bls.n	80039ba <cmd_sdc+0x36a>
    chprintf(chp, "%D blocks/S, %D bytes/S\r\n", n, n * MMCSD_BLOCK_SIZE);
 8003a0a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003a0e:	4642      	mov	r2, r8
 8003a10:	496e      	ldr	r1, [pc, #440]	; (8003bcc <cmd_sdc+0x57c>)
 8003a12:	4648      	mov	r0, r9
 8003a14:	f7fd fd4c 	bl	80014b0 <chprintf>
    chprintf(chp, "Single block unaligned read performance:         ");
 8003a18:	496f      	ldr	r1, [pc, #444]	; (8003bd8 <cmd_sdc+0x588>)
 8003a1a:	4648      	mov	r0, r9
 8003a1c:	f7fd fd48 	bl	80014b0 <chprintf>
 8003a20:	464d      	mov	r5, r9
 8003a22:	2320      	movs	r3, #32
 8003a24:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003a28:	f7fe f872 	bl	8001b10 <_dbg_check_lock>
 8003a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	9302      	str	r3, [sp, #8]
  _dbg_check_unlock();
 8003a34:	f7fe f844 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003a38:	6833      	ldr	r3, [r6, #0]
 8003a3a:	42b3      	cmp	r3, r6
 8003a3c:	d005      	beq.n	8003a4a <cmd_sdc+0x3fa>
 8003a3e:	69b2      	ldr	r2, [r6, #24]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	6892      	ldr	r2, [r2, #8]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	f0c0 80a6 	bcc.w	8003b96 <cmd_sdc+0x546>
 8003a4a:	f04f 0800 	mov.w	r8, #0
 8003a4e:	f388 8811 	msr	BASEPRI, r8
      if (blkRead(&SDCD1, startblk, buf + 1, 1)) {
 8003a52:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8003bfc <cmd_sdc+0x5ac>
 8003a56:	6822      	ldr	r2, [r4, #0]
 8003a58:	485e      	ldr	r0, [pc, #376]	; (8003bd4 <cmd_sdc+0x584>)
 8003a5a:	f8d2 a014 	ldr.w	sl, [r2, #20]
 8003a5e:	2301      	movs	r3, #1
 8003a60:	464a      	mov	r2, r9
 8003a62:	4639      	mov	r1, r7
 8003a64:	47d0      	blx	sl
 8003a66:	2800      	cmp	r0, #0
 8003a68:	f040 808b 	bne.w	8003b82 <cmd_sdc+0x532>
      n++;
 8003a6c:	f108 0801 	add.w	r8, r8, #1
 8003a70:	2320      	movs	r3, #32
 8003a72:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003a76:	f7fe f84b 	bl	8001b10 <_dbg_check_lock>
 8003a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a7e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8003a82:	f7fe f81d 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003a86:	6833      	ldr	r3, [r6, #0]
 8003a88:	42b3      	cmp	r3, r6
 8003a8a:	d004      	beq.n	8003a96 <cmd_sdc+0x446>
 8003a8c:	69b2      	ldr	r2, [r6, #24]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	6892      	ldr	r2, [r2, #8]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d37f      	bcc.n	8003b96 <cmd_sdc+0x546>
 8003a96:	2300      	movs	r3, #0
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	9a02      	ldr	r2, [sp, #8]
    } while (chVTIsSystemTimeWithin(start, end));
 8003a9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003aa2:	ebaa 0a02 	sub.w	sl, sl, r2
 8003aa6:	459a      	cmp	sl, r3
 8003aa8:	d9d5      	bls.n	8003a56 <cmd_sdc+0x406>
    chprintf(chp, "%D blocks/S, %D bytes/S\r\n", n, n * MMCSD_BLOCK_SIZE);
 8003aaa:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003aae:	4642      	mov	r2, r8
 8003ab0:	4946      	ldr	r1, [pc, #280]	; (8003bcc <cmd_sdc+0x57c>)
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f7fd fcfc 	bl	80014b0 <chprintf>
    chprintf(chp, "16 sequential blocks unaligned read performance: ");
 8003ab8:	4948      	ldr	r1, [pc, #288]	; (8003bdc <cmd_sdc+0x58c>)
 8003aba:	4628      	mov	r0, r5
 8003abc:	f7fd fcf8 	bl	80014b0 <chprintf>
 8003ac0:	2320      	movs	r3, #32
 8003ac2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003ac6:	f7fe f823 	bl	8001b10 <_dbg_check_lock>
 8003aca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	9302      	str	r3, [sp, #8]
  _dbg_check_unlock();
 8003ad2:	f7fd fff5 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003ad6:	6833      	ldr	r3, [r6, #0]
 8003ad8:	42b3      	cmp	r3, r6
 8003ada:	d004      	beq.n	8003ae6 <cmd_sdc+0x496>
 8003adc:	69b2      	ldr	r2, [r6, #24]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	6892      	ldr	r2, [r2, #8]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d357      	bcc.n	8003b96 <cmd_sdc+0x546>
 8003ae6:	f04f 0800 	mov.w	r8, #0
 8003aea:	f388 8811 	msr	BASEPRI, r8
      if (blkRead(&SDCD1, startblk, buf + 1, SDC_BURST_SIZE)) {
 8003aee:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8003bfc <cmd_sdc+0x5ac>
 8003af2:	6822      	ldr	r2, [r4, #0]
 8003af4:	4837      	ldr	r0, [pc, #220]	; (8003bd4 <cmd_sdc+0x584>)
 8003af6:	f8d2 a014 	ldr.w	sl, [r2, #20]
 8003afa:	2310      	movs	r3, #16
 8003afc:	464a      	mov	r2, r9
 8003afe:	4639      	mov	r1, r7
 8003b00:	47d0      	blx	sl
 8003b02:	2800      	cmp	r0, #0
 8003b04:	d13d      	bne.n	8003b82 <cmd_sdc+0x532>
      n += SDC_BURST_SIZE;
 8003b06:	f108 0810 	add.w	r8, r8, #16
 8003b0a:	2320      	movs	r3, #32
 8003b0c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003b10:	f7fd fffe 	bl	8001b10 <_dbg_check_lock>
 8003b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b18:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8003b1c:	f7fd ffd0 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003b20:	6833      	ldr	r3, [r6, #0]
 8003b22:	42b3      	cmp	r3, r6
 8003b24:	d004      	beq.n	8003b30 <cmd_sdc+0x4e0>
 8003b26:	69b2      	ldr	r2, [r6, #24]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	6892      	ldr	r2, [r2, #8]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d332      	bcc.n	8003b96 <cmd_sdc+0x546>
 8003b30:	2300      	movs	r3, #0
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	9a02      	ldr	r2, [sp, #8]
    } while (chVTIsSystemTimeWithin(start, end));
 8003b38:	f242 730f 	movw	r3, #9999	; 0x270f
 8003b3c:	ebaa 0a02 	sub.w	sl, sl, r2
 8003b40:	459a      	cmp	sl, r3
 8003b42:	d9d6      	bls.n	8003af2 <cmd_sdc+0x4a2>
    chprintf(chp, "%D blocks/S, %D bytes/S\r\n", n, n * MMCSD_BLOCK_SIZE);
 8003b44:	4921      	ldr	r1, [pc, #132]	; (8003bcc <cmd_sdc+0x57c>)
 8003b46:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003b4a:	4642      	mov	r2, r8
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	f7fd fcaf 	bl	80014b0 <chprintf>
 8003b52:	f8db 6000 	ldr.w	r6, [fp]
  if ((strcmp(argv[0], "write") == 0) ||
 8003b56:	4922      	ldr	r1, [pc, #136]	; (8003be0 <cmd_sdc+0x590>)
 8003b58:	4630      	mov	r0, r6
 8003b5a:	f7fc fc75 	bl	8000448 <strcmp>
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	f43f add1 	beq.w	8003706 <cmd_sdc+0xb6>
      (strcmp(argv[0], "all") == 0)) {
 8003b64:	491f      	ldr	r1, [pc, #124]	; (8003be4 <cmd_sdc+0x594>)
 8003b66:	4630      	mov	r0, r6
 8003b68:	f7fc fc6e 	bl	8000448 <strcmp>
  if ((strcmp(argv[0], "write") == 0) ||
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	f43f adca 	beq.w	8003706 <cmd_sdc+0xb6>
  if ((strcmp(argv[0], "erase") == 0) ||
 8003b72:	491d      	ldr	r1, [pc, #116]	; (8003be8 <cmd_sdc+0x598>)
 8003b74:	4630      	mov	r0, r6
 8003b76:	f7fc fc67 	bl	8000448 <strcmp>
 8003b7a:	b930      	cbnz	r0, 8003b8a <cmd_sdc+0x53a>
 8003b7c:	4e12      	ldr	r6, [pc, #72]	; (8003bc8 <cmd_sdc+0x578>)
 8003b7e:	e636      	b.n	80037ee <cmd_sdc+0x19e>
 8003b80:	464d      	mov	r5, r9
        chprintf(chp, "failed\r\n");
 8003b82:	491a      	ldr	r1, [pc, #104]	; (8003bec <cmd_sdc+0x59c>)
 8003b84:	4628      	mov	r0, r5
 8003b86:	f7fd fc93 	bl	80014b0 <chprintf>
  sdcDisconnect(&SDCD1);
 8003b8a:	4812      	ldr	r0, [pc, #72]	; (8003bd4 <cmd_sdc+0x584>)
}
 8003b8c:	b005      	add	sp, #20
 8003b8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sdcDisconnect(&SDCD1);
 8003b92:	f7ff bd15 	b.w	80035c0 <sdcDisconnect>
 8003b96:	4816      	ldr	r0, [pc, #88]	; (8003bf0 <cmd_sdc+0x5a0>)
 8003b98:	f7fc feba 	bl	8000910 <chSysHalt>
    chprintf(chp, "failed\r\n");
 8003b9c:	4913      	ldr	r1, [pc, #76]	; (8003bec <cmd_sdc+0x59c>)
 8003b9e:	4628      	mov	r0, r5
}
 8003ba0:	b005      	add	sp, #20
 8003ba2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    chprintf(chp, "failed\r\n");
 8003ba6:	f7fd bc83 	b.w	80014b0 <chprintf>
      chprintf(chp, "sdcErase() test write failed\r\n");
 8003baa:	4912      	ldr	r1, [pc, #72]	; (8003bf4 <cmd_sdc+0x5a4>)
 8003bac:	4628      	mov	r0, r5
 8003bae:	f7fd fc7f 	bl	80014b0 <chprintf>
      goto exittest;
 8003bb2:	e7ea      	b.n	8003b8a <cmd_sdc+0x53a>
      chprintf(chp, "sdcErase() failed\r\n");
 8003bb4:	4910      	ldr	r1, [pc, #64]	; (8003bf8 <cmd_sdc+0x5a8>)
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f7fd fc7a 	bl	80014b0 <chprintf>
      goto exittest;
 8003bbc:	e7e5      	b.n	8003b8a <cmd_sdc+0x53a>
 8003bbe:	bf00      	nop
 8003bc0:	0800514c 	.word	0x0800514c
 8003bc4:	20004b48 	.word	0x20004b48
 8003bc8:	20000b44 	.word	0x20000b44
 8003bcc:	08005180 	.word	0x08005180
 8003bd0:	0800519c 	.word	0x0800519c
 8003bd4:	200008f8 	.word	0x200008f8
 8003bd8:	080051d0 	.word	0x080051d0
 8003bdc:	08005204 	.word	0x08005204
 8003be0:	08005238 	.word	0x08005238
 8003be4:	08005148 	.word	0x08005148
 8003be8:	08005260 	.word	0x08005260
 8003bec:	080052c8 	.word	0x080052c8
 8003bf0:	080054b4 	.word	0x080054b4
 8003bf4:	08005268 	.word	0x08005268
 8003bf8:	08005310 	.word	0x08005310
 8003bfc:	20000b45 	.word	0x20000b45
 8003c00:	2320      	movs	r3, #32
 8003c02:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003c06:	f7fd ff83 	bl	8001b10 <_dbg_check_lock>
  flags = sdcp->errors;
 8003c0a:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
  sdcp->errors = SDC_NO_ERROR;
 8003c0e:	6366      	str	r6, [r4, #52]	; 0x34
  _dbg_check_unlock();
 8003c10:	f7fd ff56 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003c14:	4b32      	ldr	r3, [pc, #200]	; (8003ce0 <cmd_sdc+0x690>)
 8003c16:	6819      	ldr	r1, [r3, #0]
 8003c18:	4299      	cmp	r1, r3
 8003c1a:	d004      	beq.n	8003c26 <cmd_sdc+0x5d6>
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	688b      	ldr	r3, [r1, #8]
 8003c20:	6892      	ldr	r2, [r2, #8]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d345      	bcc.n	8003cb2 <cmd_sdc+0x662>
 8003c26:	2300      	movs	r3, #0
 8003c28:	f383 8811 	msr	BASEPRI, r3
    if(errflags) {
 8003c2c:	f1b9 0f00 	cmp.w	r9, #0
 8003c30:	d139      	bne.n	8003ca6 <cmd_sdc+0x656>
    if(sdcRead(&SDCD1, startblk, buf2, 2)) {
 8003c32:	4a2c      	ldr	r2, [pc, #176]	; (8003ce4 <cmd_sdc+0x694>)
 8003c34:	482c      	ldr	r0, [pc, #176]	; (8003ce8 <cmd_sdc+0x698>)
 8003c36:	2302      	movs	r3, #2
 8003c38:	4639      	mov	r1, r7
 8003c3a:	f7ff fa41 	bl	80030c0 <sdcRead>
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d13a      	bne.n	8003cb8 <cmd_sdc+0x668>
    if(memcmp(buf, buf2, MMCSD_BLOCK_SIZE) != 0) {
 8003c42:	4928      	ldr	r1, [pc, #160]	; (8003ce4 <cmd_sdc+0x694>)
 8003c44:	4829      	ldr	r0, [pc, #164]	; (8003cec <cmd_sdc+0x69c>)
 8003c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c4a:	f000 ff2b 	bl	8004aa4 <memcmp>
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d137      	bne.n	8003cc2 <cmd_sdc+0x672>
    if(memcmp(buf + MMCSD_BLOCK_SIZE,
 8003c52:	4927      	ldr	r1, [pc, #156]	; (8003cf0 <cmd_sdc+0x6a0>)
 8003c54:	4827      	ldr	r0, [pc, #156]	; (8003cf4 <cmd_sdc+0x6a4>)
 8003c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c5a:	f000 ff23 	bl	8004aa4 <memcmp>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d034      	beq.n	8003ccc <cmd_sdc+0x67c>
    if(sdcErase(&SDCD1, startblk, startblk + 2)) {
 8003c62:	4641      	mov	r1, r8
 8003c64:	4638      	mov	r0, r7
 8003c66:	f7fe fabb 	bl	80021e0 <sdcErase.constprop.0>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	d133      	bne.n	8003cd6 <cmd_sdc+0x686>
    if(sdcRead(&SDCD1, startblk, buf2, 2)) {
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <cmd_sdc+0x694>)
 8003c70:	481d      	ldr	r0, [pc, #116]	; (8003ce8 <cmd_sdc+0x698>)
 8003c72:	4639      	mov	r1, r7
 8003c74:	2302      	movs	r3, #2
 8003c76:	f7ff fa23 	bl	80030c0 <sdcRead>
 8003c7a:	b9e8      	cbnz	r0, 8003cb8 <cmd_sdc+0x668>
    if(memcmp(buf, buf2, MMCSD_BLOCK_SIZE) == 0) {
 8003c7c:	4919      	ldr	r1, [pc, #100]	; (8003ce4 <cmd_sdc+0x694>)
 8003c7e:	481b      	ldr	r0, [pc, #108]	; (8003cec <cmd_sdc+0x69c>)
 8003c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c84:	f000 ff0e 	bl	8004aa4 <memcmp>
 8003c88:	b140      	cbz	r0, 8003c9c <cmd_sdc+0x64c>
    if(memcmp(buf + MMCSD_BLOCK_SIZE,
 8003c8a:	4919      	ldr	r1, [pc, #100]	; (8003cf0 <cmd_sdc+0x6a0>)
 8003c8c:	4819      	ldr	r0, [pc, #100]	; (8003cf4 <cmd_sdc+0x6a4>)
 8003c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c92:	f000 ff07 	bl	8004aa4 <memcmp>
 8003c96:	2800      	cmp	r0, #0
 8003c98:	f47f af77 	bne.w	8003b8a <cmd_sdc+0x53a>
      chprintf(chp, "multi-block sdcErase() erased block compare failed\r\n");
 8003c9c:	4916      	ldr	r1, [pc, #88]	; (8003cf8 <cmd_sdc+0x6a8>)
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	f7fd fc06 	bl	80014b0 <chprintf>
      goto exittest;
 8003ca4:	e771      	b.n	8003b8a <cmd_sdc+0x53a>
      chprintf(chp, "sdcErase() yielded error flags: %d\r\n", errflags);
 8003ca6:	4915      	ldr	r1, [pc, #84]	; (8003cfc <cmd_sdc+0x6ac>)
 8003ca8:	464a      	mov	r2, r9
 8003caa:	4628      	mov	r0, r5
 8003cac:	f7fd fc00 	bl	80014b0 <chprintf>
      goto exittest;
 8003cb0:	e76b      	b.n	8003b8a <cmd_sdc+0x53a>
 8003cb2:	4813      	ldr	r0, [pc, #76]	; (8003d00 <cmd_sdc+0x6b0>)
 8003cb4:	f7fc fe2c 	bl	8000910 <chSysHalt>
      chprintf(chp, "single-block sdcErase() failed\r\n");
 8003cb8:	4912      	ldr	r1, [pc, #72]	; (8003d04 <cmd_sdc+0x6b4>)
 8003cba:	4628      	mov	r0, r5
 8003cbc:	f7fd fbf8 	bl	80014b0 <chprintf>
      goto exittest;
 8003cc0:	e763      	b.n	8003b8a <cmd_sdc+0x53a>
      chprintf(chp, "sdcErase() non-erased block compare failed\r\n");
 8003cc2:	4911      	ldr	r1, [pc, #68]	; (8003d08 <cmd_sdc+0x6b8>)
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f7fd fbf3 	bl	80014b0 <chprintf>
      goto exittest;
 8003cca:	e75e      	b.n	8003b8a <cmd_sdc+0x53a>
      chprintf(chp, "sdcErase() erased block compare failed\r\n");
 8003ccc:	490f      	ldr	r1, [pc, #60]	; (8003d0c <cmd_sdc+0x6bc>)
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f7fd fbee 	bl	80014b0 <chprintf>
      goto exittest;
 8003cd4:	e759      	b.n	8003b8a <cmd_sdc+0x53a>
      chprintf(chp, "multi-block sdcErase() failed\r\n");
 8003cd6:	490e      	ldr	r1, [pc, #56]	; (8003d10 <cmd_sdc+0x6c0>)
 8003cd8:	4628      	mov	r0, r5
 8003cda:	f7fd fbe9 	bl	80014b0 <chprintf>
      goto exittest;
 8003cde:	e754      	b.n	8003b8a <cmd_sdc+0x53a>
 8003ce0:	20004b48 	.word	0x20004b48
 8003ce4:	20002b48 	.word	0x20002b48
 8003ce8:	200008f8 	.word	0x200008f8
 8003cec:	20000b44 	.word	0x20000b44
 8003cf0:	20002d48 	.word	0x20002d48
 8003cf4:	20000d44 	.word	0x20000d44
 8003cf8:	08005324 	.word	0x08005324
 8003cfc:	08005288 	.word	0x08005288
 8003d00:	08005484 	.word	0x08005484
 8003d04:	080052b0 	.word	0x080052b0
 8003d08:	080052d4 	.word	0x080052d4
 8003d0c:	08005330 	.word	0x08005330
 8003d10:	08005304 	.word	0x08005304
	...

08003d20 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8003d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d24:	b085      	sub	sp, #20
  qnotify_t nfy = oqp->q_notify;
  size_t max = n;

  osalDbgCheck(n > 0U);
 8003d26:	2a00      	cmp	r2, #0
 8003d28:	d06e      	beq.n	8003e08 <oqWriteTimeout+0xe8>
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	460d      	mov	r5, r1
 8003d2e:	4698      	mov	r8, r3
 8003d30:	4616      	mov	r6, r2
  qnotify_t nfy = oqp->q_notify;
 8003d32:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 8003d36:	2720      	movs	r7, #32
 8003d38:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 8003d3c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8003e2c <oqWriteTimeout+0x10c>
 8003d40:	f7fd fee6 	bl	8001b10 <_dbg_check_lock>
 8003d44:	9701      	str	r7, [sp, #4]
 8003d46:	9602      	str	r6, [sp, #8]
 8003d48:	4637      	mov	r7, r6
  if (n > oqGetEmptyI(oqp)) {
 8003d4a:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8003d4c:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8003d50:	42bb      	cmp	r3, r7
    n = oqGetEmptyI(oqp);
 8003d52:	bf34      	ite	cc
 8003d54:	68a6      	ldrcc	r6, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8003d56:	463e      	movcs	r6, r7
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8003d58:	1a12      	subs	r2, r2, r0
  if (n < s1) {
 8003d5a:	42b2      	cmp	r2, r6
 8003d5c:	d857      	bhi.n	8003e0e <oqWriteTimeout+0xee>
  else if (n > s1) {
 8003d5e:	d323      	bcc.n	8003da8 <oqWriteTimeout+0x88>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8003d60:	4632      	mov	r2, r6
 8003d62:	4629      	mov	r1, r5
 8003d64:	f7fc fac8 	bl	80002f8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8003d68:	68e2      	ldr	r2, [r4, #12]
 8003d6a:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8003d6c:	68a2      	ldr	r2, [r4, #8]
 8003d6e:	1b92      	subs	r2, r2, r6
 8003d70:	60a2      	str	r2, [r4, #8]

  while (n > 0U) {
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8003d72:	bb5e      	cbnz	r6, 8003dcc <oqWriteTimeout+0xac>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8003d74:	4641      	mov	r1, r8
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7fd fb52 	bl	8001420 <chThdEnqueueTimeoutS>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d0e4      	beq.n	8003d4a <oqWriteTimeout+0x2a>
 8003d80:	9e02      	ldr	r6, [sp, #8]
  _dbg_check_unlock();
 8003d82:	f7fd fe9d 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003d86:	f8d9 3000 	ldr.w	r3, [r9]
 8003d8a:	454b      	cmp	r3, r9
 8003d8c:	d005      	beq.n	8003d9a <oqWriteTimeout+0x7a>
 8003d8e:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	6892      	ldr	r2, [r2, #8]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d341      	bcc.n	8003e1e <oqWriteTimeout+0xfe>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8003da0:	1bf0      	subs	r0, r6, r7
 8003da2:	b005      	add	sp, #20
 8003da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003da8:	4629      	mov	r1, r5
    s2 = n - s1;
 8003daa:	eba6 0b02 	sub.w	fp, r6, r2
 8003dae:	9203      	str	r2, [sp, #12]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003db0:	f7fc faa2 	bl	80002f8 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8003db4:	9a03      	ldr	r2, [sp, #12]
 8003db6:	68e0      	ldr	r0, [r4, #12]
 8003db8:	18a9      	adds	r1, r5, r2
 8003dba:	465a      	mov	r2, fp
 8003dbc:	f7fc fa9c 	bl	80002f8 <memcpy>
  oqp->q_counter -= n;
 8003dc0:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 8003dc2:	68e1      	ldr	r1, [r4, #12]
  oqp->q_counter -= n;
 8003dc4:	1b92      	subs	r2, r2, r6
    oqp->q_wrptr = oqp->q_buffer + s2;
 8003dc6:	4459      	add	r1, fp
 8003dc8:	6161      	str	r1, [r4, #20]
  oqp->q_counter -= n;
 8003dca:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8003dcc:	f1ba 0f00 	cmp.w	sl, #0
 8003dd0:	d001      	beq.n	8003dd6 <oqWriteTimeout+0xb6>
        nfy(oqp);
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	47d0      	blx	sl
  _dbg_check_unlock();
 8003dd6:	f7fd fe73 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003dda:	f8d9 2000 	ldr.w	r2, [r9]
 8003dde:	454a      	cmp	r2, r9
 8003de0:	d005      	beq.n	8003dee <oqWriteTimeout+0xce>
 8003de2:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8003de6:	6892      	ldr	r2, [r2, #8]
 8003de8:	6889      	ldr	r1, [r1, #8]
 8003dea:	4291      	cmp	r1, r2
 8003dec:	d317      	bcc.n	8003e1e <oqWriteTimeout+0xfe>
 8003dee:	2300      	movs	r3, #0
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	9b01      	ldr	r3, [sp, #4]
      n  -= done;
 8003df6:	1bbf      	subs	r7, r7, r6
      bp += done;
 8003df8:	4435      	add	r5, r6
 8003dfa:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003dfe:	f7fd fe87 	bl	8001b10 <_dbg_check_lock>
  while (n > 0U) {
 8003e02:	2f00      	cmp	r7, #0
 8003e04:	d1a1      	bne.n	8003d4a <oqWriteTimeout+0x2a>
 8003e06:	e7bb      	b.n	8003d80 <oqWriteTimeout+0x60>
  osalDbgCheck(n > 0U);
 8003e08:	4806      	ldr	r0, [pc, #24]	; (8003e24 <oqWriteTimeout+0x104>)
 8003e0a:	f7fc fd81 	bl	8000910 <chSysHalt>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8003e0e:	4632      	mov	r2, r6
 8003e10:	4629      	mov	r1, r5
 8003e12:	f7fc fa71 	bl	80002f8 <memcpy>
    oqp->q_wrptr += n;
 8003e16:	6962      	ldr	r2, [r4, #20]
 8003e18:	4432      	add	r2, r6
 8003e1a:	6162      	str	r2, [r4, #20]
 8003e1c:	e7a6      	b.n	8003d6c <oqWriteTimeout+0x4c>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003e1e:	4802      	ldr	r0, [pc, #8]	; (8003e28 <oqWriteTimeout+0x108>)
 8003e20:	f7fc fd76 	bl	8000910 <chSysHalt>
 8003e24:	0800574c 	.word	0x0800574c
 8003e28:	08005478 	.word	0x08005478
 8003e2c:	20004b48 	.word	0x20004b48

08003e30 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003e30:	3030      	adds	r0, #48	; 0x30
 8003e32:	f7ff bf75 	b.w	8003d20 <oqWriteTimeout>
 8003e36:	bf00      	nop
	...

08003e40 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003e40:	3030      	adds	r0, #48	; 0x30
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295
 8003e46:	f7ff bf6b 	b.w	8003d20 <oqWriteTimeout>
 8003e4a:	bf00      	nop
 8003e4c:	0000      	movs	r0, r0
	...

08003e50 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	4605      	mov	r5, r0
 8003e54:	460f      	mov	r7, r1
 8003e56:	4616      	mov	r6, r2
 8003e58:	2320      	movs	r3, #32
 8003e5a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003e5e:	f7fd fe57 	bl	8001b10 <_dbg_check_lock>
 8003e62:	e005      	b.n	8003e70 <oqPutTimeout+0x20>
 8003e64:	4631      	mov	r1, r6
 8003e66:	4628      	mov	r0, r5
 8003e68:	f7fd fada 	bl	8001420 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8003e6c:	1e04      	subs	r4, r0, #0
 8003e6e:	db24      	blt.n	8003eba <oqPutTimeout+0x6a>
  while (oqIsFullI(oqp)) {
 8003e70:	68ab      	ldr	r3, [r5, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f6      	beq.n	8003e64 <oqPutTimeout+0x14>
  *oqp->q_wrptr++ = b;
 8003e76:	696a      	ldr	r2, [r5, #20]
  oqp->q_counter--;
 8003e78:	68ab      	ldr	r3, [r5, #8]
  *oqp->q_wrptr++ = b;
 8003e7a:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8003e7c:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8003e7e:	6169      	str	r1, [r5, #20]
  oqp->q_counter--;
 8003e80:	60ab      	str	r3, [r5, #8]
  *oqp->q_wrptr++ = b;
 8003e82:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8003e84:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8003e88:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8003e8a:	bf24      	itt	cs
 8003e8c:	68eb      	ldrcs	r3, [r5, #12]
 8003e8e:	616b      	strcs	r3, [r5, #20]
  if (oqp->q_notify != NULL) {
 8003e90:	69eb      	ldr	r3, [r5, #28]
 8003e92:	b10b      	cbz	r3, 8003e98 <oqPutTimeout+0x48>
    oqp->q_notify(oqp);
 8003e94:	4628      	mov	r0, r5
 8003e96:	4798      	blx	r3
  _dbg_check_unlock();
 8003e98:	f7fd fe12 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003e9c:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <oqPutTimeout+0x90>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d004      	beq.n	8003eae <oqPutTimeout+0x5e>
 8003ea4:	6999      	ldr	r1, [r3, #24]
 8003ea6:	6893      	ldr	r3, [r2, #8]
 8003ea8:	688a      	ldr	r2, [r1, #8]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d315      	bcc.n	8003eda <oqPutTimeout+0x8a>
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f380 8811 	msr	BASEPRI, r0
 8003eb4:	4604      	mov	r4, r0
}
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  _dbg_check_unlock();
 8003eba:	f7fd fe01 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003ebe:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <oqPutTimeout+0x90>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d004      	beq.n	8003ed0 <oqPutTimeout+0x80>
 8003ec6:	6999      	ldr	r1, [r3, #24]
 8003ec8:	6893      	ldr	r3, [r2, #8]
 8003eca:	688a      	ldr	r2, [r1, #8]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d304      	bcc.n	8003eda <oqPutTimeout+0x8a>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eda:	4802      	ldr	r0, [pc, #8]	; (8003ee4 <oqPutTimeout+0x94>)
 8003edc:	f7fc fd18 	bl	8000910 <chSysHalt>
 8003ee0:	20004b48 	.word	0x20004b48
 8003ee4:	08005478 	.word	0x08005478
	...

08003ef0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003ef0:	3030      	adds	r0, #48	; 0x30
 8003ef2:	f7ff bfad 	b.w	8003e50 <oqPutTimeout>
 8003ef6:	bf00      	nop
	...

08003f00 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003f00:	3030      	adds	r0, #48	; 0x30
 8003f02:	f04f 32ff 	mov.w	r2, #4294967295
 8003f06:	f7ff bfa3 	b.w	8003e50 <oqPutTimeout>
 8003f0a:	bf00      	nop
 8003f0c:	0000      	movs	r0, r0
	...

08003f10 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8003f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f14:	b085      	sub	sp, #20
  osalDbgCheck(n > 0U);
 8003f16:	2a00      	cmp	r2, #0
 8003f18:	d06e      	beq.n	8003ff8 <iqReadTimeout+0xe8>
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	460d      	mov	r5, r1
 8003f1e:	4698      	mov	r8, r3
 8003f20:	4616      	mov	r6, r2
  qnotify_t nfy = iqp->q_notify;
 8003f22:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 8003f26:	2720      	movs	r7, #32
 8003f28:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 8003f2c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800401c <iqReadTimeout+0x10c>
 8003f30:	f7fd fdee 	bl	8001b10 <_dbg_check_lock>
 8003f34:	9701      	str	r7, [sp, #4]
 8003f36:	9602      	str	r6, [sp, #8]
 8003f38:	4637      	mov	r7, r6
  if (n > iqGetFullI(iqp)) {
 8003f3a:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003f3c:	69a1      	ldr	r1, [r4, #24]
 8003f3e:	6922      	ldr	r2, [r4, #16]
  if (n > iqGetFullI(iqp)) {
 8003f40:	42bb      	cmp	r3, r7
    n = iqGetFullI(iqp);
 8003f42:	bf34      	ite	cc
 8003f44:	68a6      	ldrcc	r6, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8003f46:	463e      	movcs	r6, r7
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003f48:	1a52      	subs	r2, r2, r1
  if (n < s1) {
 8003f4a:	42b2      	cmp	r2, r6
 8003f4c:	d857      	bhi.n	8003ffe <iqReadTimeout+0xee>
  else if (n > s1) {
 8003f4e:	d323      	bcc.n	8003f98 <iqReadTimeout+0x88>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003f50:	4632      	mov	r2, r6
 8003f52:	4628      	mov	r0, r5
 8003f54:	f7fc f9d0 	bl	80002f8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8003f58:	68e2      	ldr	r2, [r4, #12]
 8003f5a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8003f5c:	68a2      	ldr	r2, [r4, #8]
 8003f5e:	1b92      	subs	r2, r2, r6
 8003f60:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8003f62:	bb5e      	cbnz	r6, 8003fbc <iqReadTimeout+0xac>
 8003f64:	4641      	mov	r1, r8
 8003f66:	4620      	mov	r0, r4
 8003f68:	f7fd fa5a 	bl	8001420 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	d0e4      	beq.n	8003f3a <iqReadTimeout+0x2a>
 8003f70:	9e02      	ldr	r6, [sp, #8]
  _dbg_check_unlock();
 8003f72:	f7fd fda5 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003f76:	f8d9 3000 	ldr.w	r3, [r9]
 8003f7a:	454b      	cmp	r3, r9
 8003f7c:	d005      	beq.n	8003f8a <iqReadTimeout+0x7a>
 8003f7e:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	6892      	ldr	r2, [r2, #8]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d341      	bcc.n	800400e <iqReadTimeout+0xfe>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f383 8811 	msr	BASEPRI, r3
}
 8003f90:	1bf0      	subs	r0, r6, r7
 8003f92:	b005      	add	sp, #20
 8003f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003f98:	4628      	mov	r0, r5
    s2 = n - s1;
 8003f9a:	eba6 0b02 	sub.w	fp, r6, r2
 8003f9e:	9203      	str	r2, [sp, #12]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003fa0:	f7fc f9aa 	bl	80002f8 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8003fa4:	9a03      	ldr	r2, [sp, #12]
 8003fa6:	68e1      	ldr	r1, [r4, #12]
 8003fa8:	18a8      	adds	r0, r5, r2
 8003faa:	465a      	mov	r2, fp
 8003fac:	f7fc f9a4 	bl	80002f8 <memcpy>
  iqp->q_counter -= n;
 8003fb0:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 8003fb2:	68e1      	ldr	r1, [r4, #12]
  iqp->q_counter -= n;
 8003fb4:	1b92      	subs	r2, r2, r6
    iqp->q_rdptr = iqp->q_buffer + s2;
 8003fb6:	4459      	add	r1, fp
 8003fb8:	61a1      	str	r1, [r4, #24]
  iqp->q_counter -= n;
 8003fba:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8003fbc:	f1ba 0f00 	cmp.w	sl, #0
 8003fc0:	d001      	beq.n	8003fc6 <iqReadTimeout+0xb6>
        nfy(iqp);
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	47d0      	blx	sl
  _dbg_check_unlock();
 8003fc6:	f7fd fd7b 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003fca:	f8d9 2000 	ldr.w	r2, [r9]
 8003fce:	454a      	cmp	r2, r9
 8003fd0:	d005      	beq.n	8003fde <iqReadTimeout+0xce>
 8003fd2:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8003fd6:	6892      	ldr	r2, [r2, #8]
 8003fd8:	6889      	ldr	r1, [r1, #8]
 8003fda:	4291      	cmp	r1, r2
 8003fdc:	d317      	bcc.n	800400e <iqReadTimeout+0xfe>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	9b01      	ldr	r3, [sp, #4]
      n  -= done;
 8003fe6:	1bbf      	subs	r7, r7, r6
      bp += done;
 8003fe8:	4435      	add	r5, r6
 8003fea:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003fee:	f7fd fd8f 	bl	8001b10 <_dbg_check_lock>
  while (n > 0U) {
 8003ff2:	2f00      	cmp	r7, #0
 8003ff4:	d1a1      	bne.n	8003f3a <iqReadTimeout+0x2a>
 8003ff6:	e7bb      	b.n	8003f70 <iqReadTimeout+0x60>
  osalDbgCheck(n > 0U);
 8003ff8:	4806      	ldr	r0, [pc, #24]	; (8004014 <iqReadTimeout+0x104>)
 8003ffa:	f7fc fc89 	bl	8000910 <chSysHalt>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003ffe:	4632      	mov	r2, r6
 8004000:	4628      	mov	r0, r5
 8004002:	f7fc f979 	bl	80002f8 <memcpy>
    iqp->q_rdptr += n;
 8004006:	69a2      	ldr	r2, [r4, #24]
 8004008:	4432      	add	r2, r6
 800400a:	61a2      	str	r2, [r4, #24]
 800400c:	e7a6      	b.n	8003f5c <iqReadTimeout+0x4c>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800400e:	4802      	ldr	r0, [pc, #8]	; (8004018 <iqReadTimeout+0x108>)
 8004010:	f7fc fc7e 	bl	8000910 <chSysHalt>
 8004014:	08005728 	.word	0x08005728
 8004018:	08005478 	.word	0x08005478
 800401c:	20004b48 	.word	0x20004b48

08004020 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8004020:	300c      	adds	r0, #12
 8004022:	f7ff bf75 	b.w	8003f10 <iqReadTimeout>
 8004026:	bf00      	nop
	...

08004030 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8004030:	300c      	adds	r0, #12
 8004032:	f04f 33ff 	mov.w	r3, #4294967295
 8004036:	f7ff bf6b 	b.w	8003f10 <iqReadTimeout>
 800403a:	bf00      	nop
 800403c:	0000      	movs	r0, r0
	...

08004040 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8004040:	b570      	push	{r4, r5, r6, lr}
 8004042:	2320      	movs	r3, #32
 8004044:	4605      	mov	r5, r0
 8004046:	460e      	mov	r6, r1
 8004048:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800404c:	f7fd fd60 	bl	8001b10 <_dbg_check_lock>
 8004050:	e005      	b.n	800405e <iqGetTimeout+0x1e>
 8004052:	4631      	mov	r1, r6
 8004054:	4628      	mov	r0, r5
 8004056:	f7fd f9e3 	bl	8001420 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 800405a:	1e04      	subs	r4, r0, #0
 800405c:	db13      	blt.n	8004086 <iqGetTimeout+0x46>
  while (iqIsEmptyI(iqp)) {
 800405e:	68ab      	ldr	r3, [r5, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f6      	beq.n	8004052 <iqGetTimeout+0x12>
  b = *iqp->q_rdptr++;
 8004064:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8004066:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8004068:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 800406a:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 800406c:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800406e:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8004070:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 8004072:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8004074:	bf28      	it	cs
 8004076:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8004078:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800407a:	bf28      	it	cs
 800407c:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 800407e:	69eb      	ldr	r3, [r5, #28]
 8004080:	b10b      	cbz	r3, 8004086 <iqGetTimeout+0x46>
    iqp->q_notify(iqp);
 8004082:	4628      	mov	r0, r5
 8004084:	4798      	blx	r3
  _dbg_check_unlock();
 8004086:	f7fd fd1b 	bl	8001ac0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <iqGetTimeout+0x6c>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d004      	beq.n	800409c <iqGetTimeout+0x5c>
 8004092:	6999      	ldr	r1, [r3, #24]
 8004094:	6893      	ldr	r3, [r2, #8]
 8004096:	688a      	ldr	r2, [r1, #8]
 8004098:	429a      	cmp	r2, r3
 800409a:	d304      	bcc.n	80040a6 <iqGetTimeout+0x66>
 800409c:	2300      	movs	r3, #0
 800409e:	f383 8811 	msr	BASEPRI, r3
}
 80040a2:	4620      	mov	r0, r4
 80040a4:	bd70      	pop	{r4, r5, r6, pc}
 80040a6:	4802      	ldr	r0, [pc, #8]	; (80040b0 <iqGetTimeout+0x70>)
 80040a8:	f7fc fc32 	bl	8000910 <chSysHalt>
 80040ac:	20004b48 	.word	0x20004b48
 80040b0:	08005478 	.word	0x08005478
	...

080040c0 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80040c0:	300c      	adds	r0, #12
 80040c2:	f7ff bfbd 	b.w	8004040 <iqGetTimeout>
 80040c6:	bf00      	nop
	...

080040d0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80040d0:	300c      	adds	r0, #12
 80040d2:	f04f 31ff 	mov.w	r1, #4294967295
 80040d6:	f7ff bfb3 	b.w	8004040 <iqGetTimeout>
 80040da:	bf00      	nop
 80040dc:	0000      	movs	r0, r0
	...

080040e0 <__early_init>:
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80040e0:	4a84      	ldr	r2, [pc, #528]	; (80042f4 <__early_init+0x214>)
  gpiop->PUPDR   = config->pupdr;
 80040e2:	f8df c264 	ldr.w	ip, [pc, #612]	; 8004348 <__early_init+0x268>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80040e6:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 80040e8:	4883      	ldr	r0, [pc, #524]	; (80042f8 <__early_init+0x218>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80040ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040ee:	430b      	orrs	r3, r1
void __early_init(void) {
 80040f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80040f2:	6113      	str	r3, [r2, #16]
 80040f4:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 80040f6:	4f81      	ldr	r7, [pc, #516]	; (80042fc <__early_init+0x21c>)
 80040f8:	4c81      	ldr	r4, [pc, #516]	; (8004300 <__early_init+0x220>)
 80040fa:	4e82      	ldr	r6, [pc, #520]	; (8004304 <__early_init+0x224>)
 80040fc:	4d82      	ldr	r5, [pc, #520]	; (8004308 <__early_init+0x228>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80040fe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	6113      	str	r3, [r2, #16]
 8004108:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 800410a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800410c:	430b      	orrs	r3, r1
 800410e:	6313      	str	r3, [r2, #48]	; 0x30
 8004110:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004112:	430b      	orrs	r3, r1
 8004114:	6513      	str	r3, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8004116:	f04f 31ff 	mov.w	r1, #4294967295
  gpiop->OTYPER  = config->otyper;
 800411a:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 800411c:	f8d2 e050 	ldr.w	lr, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8004120:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004122:	60b9      	str	r1, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8004124:	f8c7 c00c 	str.w	ip, [r7, #12]
  gpiop->ODR     = config->odr;
 8004128:	f64f 6cff 	movw	ip, #65279	; 0xfeff
 800412c:	f8c7 c014 	str.w	ip, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8004130:	f8df c218 	ldr.w	ip, [pc, #536]	; 800434c <__early_init+0x26c>
 8004134:	f8c7 c020 	str.w	ip, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8004138:	f8df c214 	ldr.w	ip, [pc, #532]	; 8004350 <__early_init+0x270>
 800413c:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004140:	f8df c210 	ldr.w	ip, [pc, #528]	; 8004354 <__early_init+0x274>
 8004144:	f8c7 c000 	str.w	ip, [r7]
  gpiop->PUPDR   = config->pupdr;
 8004148:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8004358 <__early_init+0x278>
  gpiop->OTYPER  = config->otyper;
 800414c:	f44f 7740 	mov.w	r7, #768	; 0x300
 8004150:	6067      	str	r7, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004152:	60a1      	str	r1, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8004154:	f8c4 c00c 	str.w	ip, [r4, #12]
  gpiop->ODR     = config->odr;
 8004158:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
 800415c:	f8c4 c014 	str.w	ip, [r4, #20]
  gpiop->AFRH    = config->afrh;
 8004160:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 800435c <__early_init+0x27c>
  gpiop->AFRL    = config->afrl;
 8004164:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8004166:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800416a:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8004360 <__early_init+0x280>
 800416e:	f8c4 c000 	str.w	ip, [r4]
  gpiop->PUPDR   = config->pupdr;
 8004172:	f04f 0c01 	mov.w	ip, #1
  gpiop->OTYPER  = config->otyper;
 8004176:	6073      	str	r3, [r6, #4]
  gpiop->ODR     = config->odr;
 8004178:	f64f 74ff 	movw	r4, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
 800417c:	60b1      	str	r1, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 800417e:	f8c6 c00c 	str.w	ip, [r6, #12]
  gpiop->AFRL    = config->afrl;
 8004182:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 8004364 <__early_init+0x284>
  gpiop->ODR     = config->odr;
 8004186:	6174      	str	r4, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8004188:	f8c6 c020 	str.w	ip, [r6, #32]
  gpiop->AFRH    = config->afrh;
 800418c:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8004368 <__early_init+0x288>
 8004190:	f8c6 c024 	str.w	ip, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004194:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 800436c <__early_init+0x28c>
 8004198:	f8c6 c000 	str.w	ip, [r6]
  gpiop->PUPDR   = config->pupdr;
 800419c:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8004370 <__early_init+0x290>
  gpiop->OTYPER  = config->otyper;
 80041a0:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80041a2:	60a9      	str	r1, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80041a4:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->AFRL    = config->afrl;
 80041a8:	f44f 6c40 	mov.w	ip, #3072	; 0xc00
  gpiop->ODR     = config->odr;
 80041ac:	616c      	str	r4, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80041ae:	f8c5 c020 	str.w	ip, [r5, #32]
  gpiop->MODER   = config->moder;
 80041b2:	f04f 0c20 	mov.w	ip, #32
  gpiop->AFRH    = config->afrh;
 80041b6:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 80041b8:	4f54      	ldr	r7, [pc, #336]	; (800430c <__early_init+0x22c>)
  gpiop->MODER   = config->moder;
 80041ba:	f8c5 c000 	str.w	ip, [r5]
  gpiop->PUPDR   = config->pupdr;
 80041be:	f04f 3c55 	mov.w	ip, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
 80041c2:	6043      	str	r3, [r0, #4]
 80041c4:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
  gpiop->OSPEEDR = config->ospeedr;
 80041c8:	6081      	str	r1, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80041ca:	f8c0 c00c 	str.w	ip, [r0, #12]
  gpiop->ODR     = config->odr;
 80041ce:	6144      	str	r4, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80041d0:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80041d2:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80041d4:	6003      	str	r3, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 80041d6:	484e      	ldr	r0, [pc, #312]	; (8004310 <__early_init+0x230>)
  gpiop->OTYPER  = config->otyper;
 80041d8:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80041da:	60b9      	str	r1, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 80041dc:	60f8      	str	r0, [r7, #12]
  gpiop->ODR     = config->odr;
 80041de:	617c      	str	r4, [r7, #20]
  gpiop->AFRL    = config->afrl;
 80041e0:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80041e4:	603b      	str	r3, [r7, #0]
  gpiop->PUPDR   = config->pupdr;
 80041e6:	4f4b      	ldr	r7, [pc, #300]	; (8004314 <__early_init+0x234>)
  gpiop->OTYPER  = config->otyper;
 80041e8:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80041ea:	60b1      	str	r1, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 80041ec:	60f7      	str	r7, [r6, #12]
  gpiop->AFRH    = config->afrh;
 80041ee:	4f4a      	ldr	r7, [pc, #296]	; (8004318 <__early_init+0x238>)
  gpiop->ODR     = config->odr;
 80041f0:	6174      	str	r4, [r6, #20]
  gpiop->OTYPER  = config->otyper;
 80041f2:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
  gpiop->AFRL    = config->afrl;
 80041f6:	6233      	str	r3, [r6, #32]
  gpiop->OTYPER  = config->otyper;
 80041f8:	4848      	ldr	r0, [pc, #288]	; (800431c <__early_init+0x23c>)
  gpiop->AFRH    = config->afrh;
 80041fa:	6277      	str	r7, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80041fc:	4f48      	ldr	r7, [pc, #288]	; (8004320 <__early_init+0x240>)
 80041fe:	6037      	str	r7, [r6, #0]
  gpiop->PUPDR   = config->pupdr;
 8004200:	4f48      	ldr	r7, [pc, #288]	; (8004324 <__early_init+0x244>)
  gpiop->OTYPER  = config->otyper;
 8004202:	606b      	str	r3, [r5, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8004204:	f5a6 36d4 	sub.w	r6, r6, #108544	; 0x1a800
  gpiop->OSPEEDR = config->ospeedr;
 8004208:	60a9      	str	r1, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 800420a:	60ef      	str	r7, [r5, #12]
  gpiop->ODR     = config->odr;
 800420c:	616c      	str	r4, [r5, #20]
  gpiop->AFRL    = config->afrl;
 800420e:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8004210:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004212:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8004214:	6043      	str	r3, [r0, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8004216:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 800421a:	6081      	str	r1, [r0, #8]
  PWR->CR = STM32_VOS;
 800421c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  gpiop->PUPDR   = config->pupdr;
 8004220:	f8c0 c00c 	str.w	ip, [r0, #12]
  gpiop->ODR     = config->odr;
 8004224:	6144      	str	r4, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8004226:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8004228:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800422a:	6003      	str	r3, [r0, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800422c:	6415      	str	r5, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 800422e:	6031      	str	r1, [r6, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004230:	6813      	ldr	r3, [r2, #0]
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004238:	6813      	ldr	r3, [r2, #0]
 800423a:	079e      	lsls	r6, r3, #30
 800423c:	d5fc      	bpl.n	8004238 <__early_init+0x158>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 800423e:	6891      	ldr	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004240:	4b2c      	ldr	r3, [pc, #176]	; (80042f4 <__early_init+0x214>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8004242:	f021 0103 	bic.w	r1, r1, #3
 8004246:	6091      	str	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	f012 020c 	ands.w	r2, r2, #12
 800424e:	d1fb      	bne.n	8004248 <__early_init+0x168>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004250:	6818      	ldr	r0, [r3, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8004252:	4928      	ldr	r1, [pc, #160]	; (80042f4 <__early_init+0x214>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004254:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8004258:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800425a:	609a      	str	r2, [r3, #8]
  RCC->CR |= RCC_CR_HSEON;
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004262:	601a      	str	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8004264:	680b      	ldr	r3, [r1, #0]
 8004266:	039d      	lsls	r5, r3, #14
 8004268:	d5fc      	bpl.n	8004264 <__early_init+0x184>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800426a:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800426c:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <__early_init+0x214>)
  RCC->CSR |= RCC_CSR_LSION;
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8004274:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004276:	0794      	lsls	r4, r2, #30
 8004278:	d5fc      	bpl.n	8004274 <__early_init+0x194>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800427a:	4a2b      	ldr	r2, [pc, #172]	; (8004328 <__early_init+0x248>)
 800427c:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800427e:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8004280:	492a      	ldr	r1, [pc, #168]	; (800432c <__early_init+0x24c>)
  RCC->CR |= RCC_CR_PLLON;
 8004282:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004286:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8004288:	684b      	ldr	r3, [r1, #4]
 800428a:	0458      	lsls	r0, r3, #17
 800428c:	d5fc      	bpl.n	8004288 <__early_init+0x1a8>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800428e:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <__early_init+0x214>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	0192      	lsls	r2, r2, #6
 8004294:	d5fc      	bpl.n	8004290 <__early_init+0x1b0>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8004296:	4926      	ldr	r1, [pc, #152]	; (8004330 <__early_init+0x250>)

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8004298:	4a26      	ldr	r2, [pc, #152]	; (8004334 <__early_init+0x254>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800429a:	6099      	str	r1, [r3, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	4b26      	ldr	r3, [pc, #152]	; (8004338 <__early_init+0x258>)
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d01d      	beq.n	80042e0 <__early_init+0x200>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80042a4:	4b25      	ldr	r3, [pc, #148]	; (800433c <__early_init+0x25c>)
 80042a6:	f240 7205 	movw	r2, #1797	; 0x705
 80042aa:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 80042ac:	4a23      	ldr	r2, [pc, #140]	; (800433c <__early_init+0x25c>)
 80042ae:	6813      	ldr	r3, [r2, #0]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	d1fa      	bne.n	80042ae <__early_init+0x1ce>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80042b8:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <__early_init+0x214>)
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	f042 0202 	orr.w	r2, r2, #2
 80042c0:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	f002 020c 	and.w	r2, r2, #12
 80042c8:	2a08      	cmp	r2, #8
 80042ca:	d1fa      	bne.n	80042c2 <__early_init+0x1e2>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 80042cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042d2:	645a      	str	r2, [r3, #68]	; 0x44
 80042d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80042d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042da:	665a      	str	r2, [r3, #100]	; 0x64
 80042dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 80042de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80042e0:	4a17      	ldr	r2, [pc, #92]	; (8004340 <__early_init+0x260>)
 80042e2:	4b18      	ldr	r3, [pc, #96]	; (8004344 <__early_init+0x264>)
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d1dc      	bne.n	80042a4 <__early_init+0x1c4>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 80042ea:	4b14      	ldr	r3, [pc, #80]	; (800433c <__early_init+0x25c>)
 80042ec:	f240 1205 	movw	r2, #261	; 0x105
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e7db      	b.n	80042ac <__early_init+0x1cc>
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40020000 	.word	0x40020000
 8004300:	40020400 	.word	0x40020400
 8004304:	40020800 	.word	0x40020800
 8004308:	40020c00 	.word	0x40020c00
 800430c:	40021400 	.word	0x40021400
 8004310:	55155555 	.word	0x55155555
 8004314:	41055555 	.word	0x41055555
 8004318:	0bb0b000 	.word	0x0bb0b000
 800431c:	40022000 	.word	0x40022000
 8004320:	28900000 	.word	0x28900000
 8004324:	55555550 	.word	0x55555550
 8004328:	0740540c 	.word	0x0740540c
 800432c:	40007000 	.word	0x40007000
 8004330:	38889400 	.word	0x38889400
 8004334:	e0042000 	.word	0xe0042000
 8004338:	20006411 	.word	0x20006411
 800433c:	40023c00 	.word	0x40023c00
 8004340:	e000ed00 	.word	0xe000ed00
 8004344:	410fc241 	.word	0x410fc241
 8004348:	20081500 	.word	0x20081500
 800434c:	b0000bb0 	.word	0xb0000bb0
 8004350:	000aaa00 	.word	0x000aaa00
 8004354:	aaa18028 	.word	0xaaa18028
 8004358:	08405400 	.word	0x08405400
 800435c:	cc0c0544 	.word	0xcc0c0544
 8004360:	a22a0281 	.word	0xa22a0281
 8004364:	88bb55b0 	.word	0x88bb55b0
 8004368:	000ccccc 	.word	0x000ccccc
 800436c:	06aaaaa8 	.word	0x06aaaaa8
 8004370:	55555545 	.word	0x55555545
	...

08004380 <Vector15C>:
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8004380:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004382:	4c09      	ldr	r4, [pc, #36]	; (80043a8 <Vector15C+0x28>)
 8004384:	4620      	mov	r0, r4
 8004386:	f7fc faab 	bl	80008e0 <_trace_isr_enter>
 800438a:	f7fc fc41 	bl	8000c10 <_dbg_check_enter_isr>
  serve_interrupt(&SD6);
 800438e:	4807      	ldr	r0, [pc, #28]	; (80043ac <Vector15C+0x2c>)
 8004390:	f7fc fcde 	bl	8000d50 <serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 8004394:	f7fc fc24 	bl	8000be0 <_dbg_check_leave_isr>
 8004398:	4620      	mov	r0, r4
 800439a:	f7fc fa89 	bl	80008b0 <_trace_isr_leave>
}
 800439e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80043a2:	f7fc b9fd 	b.w	80007a0 <_port_irq_epilogue>
 80043a6:	bf00      	nop
 80043a8:	08005678 	.word	0x08005678
 80043ac:	2000087c 	.word	0x2000087c

080043b0 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80043b0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80043b2:	4c09      	ldr	r4, [pc, #36]	; (80043d8 <VectorD8+0x28>)
 80043b4:	4620      	mov	r0, r4
 80043b6:	f7fc fa93 	bl	80008e0 <_trace_isr_enter>
 80043ba:	f7fc fc29 	bl	8000c10 <_dbg_check_enter_isr>
  serve_interrupt(&SD2);
 80043be:	4807      	ldr	r0, [pc, #28]	; (80043dc <VectorD8+0x2c>)
 80043c0:	f7fc fcc6 	bl	8000d50 <serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 80043c4:	f7fc fc0c 	bl	8000be0 <_dbg_check_leave_isr>
 80043c8:	4620      	mov	r0, r4
 80043ca:	f7fc fa71 	bl	80008b0 <_trace_isr_leave>
}
 80043ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80043d2:	f7fc b9e5 	b.w	80007a0 <_port_irq_epilogue>
 80043d6:	bf00      	nop
 80043d8:	0800566c 	.word	0x0800566c
 80043dc:	20000800 	.word	0x20000800

080043e0 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80043e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 80043e4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  OSAL_IRQ_PROLOGUE();
 80043e8:	4838      	ldr	r0, [pc, #224]	; (80044cc <VectorB0+0xec>)
 80043ea:	f7fc fa79 	bl	80008e0 <_trace_isr_enter>
 80043ee:	f7fc fc0f 	bl	8000c10 <_dbg_check_enter_isr>
  sr  = timp->SR;
 80043f2:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80043f4:	68ea      	ldr	r2, [r5, #12]
 80043f6:	4013      	ands	r3, r2
 80043f8:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 80043fa:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 80043fc:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 80043fe:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8004400:	d408      	bmi.n	8004414 <VectorB0+0x34>
  OSAL_IRQ_EPILOGUE();
 8004402:	f7fc fbed 	bl	8000be0 <_dbg_check_leave_isr>
 8004406:	4831      	ldr	r0, [pc, #196]	; (80044cc <VectorB0+0xec>)
 8004408:	f7fc fa52 	bl	80008b0 <_trace_isr_leave>
}
 800440c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004410:	f7fc b9c6 	b.w	80007a0 <_port_irq_epilogue>
 8004414:	2320      	movs	r3, #32
 8004416:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 800441a:	4e2d      	ldr	r6, [pc, #180]	; (80044d0 <VectorB0+0xf0>)
  _dbg_check_lock_from_isr();
 800441c:	f7fc fc28 	bl	8000c70 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 8004420:	f7fc fa9e 	bl	8000960 <chDbgCheckClassI>
  chDbgCheckClassI();
 8004424:	f7fc fa9c 	bl	8000960 <chDbgCheckClassI>
  vtp = ch.vtlist.next;
 8004428:	69f4      	ldr	r4, [r6, #28]
 800442a:	6a68      	ldr	r0, [r5, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800442c:	6ab3      	ldr	r3, [r6, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 800442e:	68a2      	ldr	r2, [r4, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8004430:	eba0 0903 	sub.w	r9, r0, r3
 8004434:	454a      	cmp	r2, r9
 8004436:	f106 0a1c 	add.w	sl, r6, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 800443a:	bf98      	it	ls
 800443c:	2700      	movls	r7, #0
    if (nowdelta < vtp->delta) {
 800443e:	d825      	bhi.n	800448c <VectorB0+0xac>
 8004440:	f04f 0820 	mov.w	r8, #32
 8004444:	e000      	b.n	8004448 <VectorB0+0x68>
 8004446:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8004448:	6821      	ldr	r1, [r4, #0]
      fn = vtp->func;
 800444a:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      ch.vtlist.lasttime += vtp->delta;
 800444e:	4413      	add	r3, r2

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8004450:	4551      	cmp	r1, sl
      ch.vtlist.lasttime += vtp->delta;
 8004452:	62b3      	str	r3, [r6, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8004454:	f8c1 a004 	str.w	sl, [r1, #4]
      ch.vtlist.next = vtp->next;
 8004458:	61f1      	str	r1, [r6, #28]
      vtp->func = NULL;
 800445a:	60e7      	str	r7, [r4, #12]
  STM32_ST_TIM->DIER = 0U;
 800445c:	bf08      	it	eq
 800445e:	60ef      	streq	r7, [r5, #12]
      nowdelta -= vtp->delta;
 8004460:	eba9 0902 	sub.w	r9, r9, r2
  _dbg_check_unlock_from_isr();
 8004464:	f7fc fbec 	bl	8000c40 <_dbg_check_unlock_from_isr>
 8004468:	f387 8811 	msr	BASEPRI, r7
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800446c:	6920      	ldr	r0, [r4, #16]
 800446e:	47d8      	blx	fp
 8004470:	f388 8811 	msr	BASEPRI, r8
  _dbg_check_lock_from_isr();
 8004474:	f7fc fbfc 	bl	8000c70 <_dbg_check_lock_from_isr>
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8004478:	69f4      	ldr	r4, [r6, #28]
    }
    while (vtp->delta <= nowdelta);
 800447a:	68a2      	ldr	r2, [r4, #8]
 800447c:	4591      	cmp	r9, r2
 800447e:	d2e2      	bcs.n	8004446 <VectorB0+0x66>
  return (systime_t)STM32_ST_TIM->CNT;
 8004480:	6a68      	ldr	r0, [r5, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8004482:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004484:	eba0 0903 	sub.w	r9, r0, r3
    if (nowdelta < vtp->delta) {
 8004488:	4591      	cmp	r9, r2
 800448a:	d2d9      	bcs.n	8004440 <VectorB0+0x60>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800448c:	4554      	cmp	r4, sl
 800448e:	d013      	beq.n	80044b8 <VectorB0+0xd8>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8004490:	68a2      	ldr	r2, [r4, #8]
  ch.vtlist.lasttime += nowdelta;
 8004492:	62b0      	str	r0, [r6, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8004494:	1a12      	subs	r2, r2, r0
 8004496:	4413      	add	r3, r2
  return systime + (systime_t)interval;
 8004498:	2b02      	cmp	r3, #2
 800449a:	bf2c      	ite	cs
 800449c:	18c5      	addcs	r5, r0, r3
 800449e:	1c85      	addcc	r5, r0, #2
 80044a0:	60a3      	str	r3, [r4, #8]
 80044a2:	4628      	mov	r0, r5
 80044a4:	f7fc fe64 	bl	8001170 <stSetAlarm>
 80044a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
 80044ac:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80044b0:	1aa8      	subs	r0, r5, r2
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	4283      	cmp	r3, r0
 80044b6:	d805      	bhi.n	80044c4 <VectorB0+0xe4>
  _dbg_check_unlock_from_isr();
 80044b8:	f7fc fbc2 	bl	8000c40 <_dbg_check_unlock_from_isr>
 80044bc:	2300      	movs	r3, #0
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	e79e      	b.n	8004402 <VectorB0+0x22>
 80044c4:	4803      	ldr	r0, [pc, #12]	; (80044d4 <VectorB0+0xf4>)
 80044c6:	f7fc fa23 	bl	8000910 <chSysHalt>
 80044ca:	bf00      	nop
 80044cc:	080055e8 	.word	0x080055e8
 80044d0:	20004b48 	.word	0x20004b48
 80044d4:	08005458 	.word	0x08005458
	...

080044e0 <Vector104>:
OSAL_IRQ_HANDLER(STM32_SDIO_HANDLER) {
 80044e0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 80044e2:	4814      	ldr	r0, [pc, #80]	; (8004534 <Vector104+0x54>)
 80044e4:	f7fc f9fc 	bl	80008e0 <_trace_isr_enter>
 80044e8:	f7fc fb92 	bl	8000c10 <_dbg_check_enter_isr>
 80044ec:	2320      	movs	r3, #32
 80044ee:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80044f2:	f7fc fbbd 	bl	8000c70 <_dbg_check_lock_from_isr>
  if (*trp != NULL) {
 80044f6:	4a10      	ldr	r2, [pc, #64]	; (8004538 <Vector104+0x58>)
  SDIO->MASK = 0;
 80044f8:	4910      	ldr	r1, [pc, #64]	; (800453c <Vector104+0x5c>)
 80044fa:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 80044fc:	2300      	movs	r3, #0
 80044fe:	63cb      	str	r3, [r1, #60]	; 0x3c
 8004500:	b138      	cbz	r0, 8004512 <Vector104+0x32>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8004502:	f890 1020 	ldrb.w	r1, [r0, #32]
 8004506:	2903      	cmp	r1, #3
 8004508:	d111      	bne.n	800452e <Vector104+0x4e>
    *trp = NULL;
 800450a:	63d3      	str	r3, [r2, #60]	; 0x3c
    tp->u.rdymsg = msg;
 800450c:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800450e:	f7fc fae7 	bl	8000ae0 <chSchReadyI>
  _dbg_check_unlock_from_isr();
 8004512:	f7fc fb95 	bl	8000c40 <_dbg_check_unlock_from_isr>
 8004516:	2300      	movs	r3, #0
 8004518:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 800451c:	f7fc fb60 	bl	8000be0 <_dbg_check_leave_isr>
 8004520:	4804      	ldr	r0, [pc, #16]	; (8004534 <Vector104+0x54>)
 8004522:	f7fc f9c5 	bl	80008b0 <_trace_isr_leave>
}
 8004526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800452a:	f7fc b939 	b.w	80007a0 <_port_irq_epilogue>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 800452e:	4804      	ldr	r0, [pc, #16]	; (8004540 <Vector104+0x60>)
 8004530:	f7fc f9ee 	bl	8000910 <chSysHalt>
 8004534:	0800570c 	.word	0x0800570c
 8004538:	200008f8 	.word	0x200008f8
 800453c:	40012c00 	.word	0x40012c00
 8004540:	080055c8 	.word	0x080055c8
	...

08004550 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8004550:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004552:	480d      	ldr	r0, [pc, #52]	; (8004588 <Vector158+0x38>)
 8004554:	f7fc f9c4 	bl	80008e0 <_trace_isr_enter>
 8004558:	f7fc fb5a 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <Vector158+0x3c>)
  if (dma.streams[15].func)
 800455e:	480c      	ldr	r0, [pc, #48]	; (8004590 <Vector158+0x40>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8004560:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 8004562:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8004564:	0d89      	lsrs	r1, r1, #22
 8004566:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 800456a:	058c      	lsls	r4, r1, #22
 800456c:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 800456e:	b112      	cbz	r2, 8004576 <Vector158+0x26>
    dma.streams[15].func(dma.streams[15].param, flags);
 8004570:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8004574:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004576:	f7fc fb33 	bl	8000be0 <_dbg_check_leave_isr>
 800457a:	4803      	ldr	r0, [pc, #12]	; (8004588 <Vector158+0x38>)
 800457c:	f7fc f998 	bl	80008b0 <_trace_isr_leave>
}
 8004580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004584:	f7fc b90c 	b.w	80007a0 <_port_irq_epilogue>
 8004588:	08005700 	.word	0x08005700
 800458c:	40026400 	.word	0x40026400
 8004590:	20005514 	.word	0x20005514
	...

080045a0 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 80045a0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80045a2:	480d      	ldr	r0, [pc, #52]	; (80045d8 <Vector154+0x38>)
 80045a4:	f7fc f99c 	bl	80008e0 <_trace_isr_enter>
 80045a8:	f7fc fb32 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <Vector154+0x3c>)
  if (dma.streams[14].func)
 80045ae:	480c      	ldr	r0, [pc, #48]	; (80045e0 <Vector154+0x40>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80045b0:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 80045b2:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80045b4:	0c09      	lsrs	r1, r1, #16
 80045b6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 80045ba:	040c      	lsls	r4, r1, #16
 80045bc:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 80045be:	b10a      	cbz	r2, 80045c4 <Vector154+0x24>
    dma.streams[14].func(dma.streams[14].param, flags);
 80045c0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80045c2:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80045c4:	f7fc fb0c 	bl	8000be0 <_dbg_check_leave_isr>
 80045c8:	4803      	ldr	r0, [pc, #12]	; (80045d8 <Vector154+0x38>)
 80045ca:	f7fc f971 	bl	80008b0 <_trace_isr_leave>
}
 80045ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80045d2:	f7fc b8e5 	b.w	80007a0 <_port_irq_epilogue>
 80045d6:	bf00      	nop
 80045d8:	080056f4 	.word	0x080056f4
 80045dc:	40026400 	.word	0x40026400
 80045e0:	20005514 	.word	0x20005514
	...

080045f0 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80045f0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80045f2:	480d      	ldr	r0, [pc, #52]	; (8004628 <Vector150+0x38>)
 80045f4:	f7fc f974 	bl	80008e0 <_trace_isr_enter>
 80045f8:	f7fc fb0a 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <Vector150+0x3c>)
  if (dma.streams[13].func)
 80045fe:	480c      	ldr	r0, [pc, #48]	; (8004630 <Vector150+0x40>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004600:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 8004602:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004604:	0989      	lsrs	r1, r1, #6
 8004606:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 800460a:	018c      	lsls	r4, r1, #6
 800460c:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 800460e:	b10a      	cbz	r2, 8004614 <Vector150+0x24>
    dma.streams[13].func(dma.streams[13].param, flags);
 8004610:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8004612:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004614:	f7fc fae4 	bl	8000be0 <_dbg_check_leave_isr>
 8004618:	4803      	ldr	r0, [pc, #12]	; (8004628 <Vector150+0x38>)
 800461a:	f7fc f949 	bl	80008b0 <_trace_isr_leave>
}
 800461e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004622:	f7fc b8bd 	b.w	80007a0 <_port_irq_epilogue>
 8004626:	bf00      	nop
 8004628:	080056e8 	.word	0x080056e8
 800462c:	40026400 	.word	0x40026400
 8004630:	20005514 	.word	0x20005514
	...

08004640 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8004640:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8004642:	480c      	ldr	r0, [pc, #48]	; (8004674 <Vector130+0x34>)
 8004644:	f7fc f94c 	bl	80008e0 <_trace_isr_enter>
 8004648:	f7fc fae2 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <Vector130+0x38>)
  if (dma.streams[12].func)
 800464e:	480b      	ldr	r0, [pc, #44]	; (800467c <Vector130+0x3c>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8004650:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8004652:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8004654:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8004658:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 800465a:	b10a      	cbz	r2, 8004660 <Vector130+0x20>
    dma.streams[12].func(dma.streams[12].param, flags);
 800465c:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800465e:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004660:	f7fc fabe 	bl	8000be0 <_dbg_check_leave_isr>
 8004664:	4803      	ldr	r0, [pc, #12]	; (8004674 <Vector130+0x34>)
 8004666:	f7fc f923 	bl	80008b0 <_trace_isr_leave>
}
 800466a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800466e:	f7fc b897 	b.w	80007a0 <_port_irq_epilogue>
 8004672:	bf00      	nop
 8004674:	080056dc 	.word	0x080056dc
 8004678:	40026400 	.word	0x40026400
 800467c:	20005514 	.word	0x20005514

08004680 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8004680:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004682:	480d      	ldr	r0, [pc, #52]	; (80046b8 <Vector12C+0x38>)
 8004684:	f7fc f92c 	bl	80008e0 <_trace_isr_enter>
 8004688:	f7fc fac2 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <Vector12C+0x3c>)
  if (dma.streams[11].func)
 800468e:	480c      	ldr	r0, [pc, #48]	; (80046c0 <Vector12C+0x40>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8004690:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 8004692:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8004694:	0d89      	lsrs	r1, r1, #22
 8004696:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 800469a:	058c      	lsls	r4, r1, #22
 800469c:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 800469e:	b10a      	cbz	r2, 80046a4 <Vector12C+0x24>
    dma.streams[11].func(dma.streams[11].param, flags);
 80046a0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80046a2:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80046a4:	f7fc fa9c 	bl	8000be0 <_dbg_check_leave_isr>
 80046a8:	4803      	ldr	r0, [pc, #12]	; (80046b8 <Vector12C+0x38>)
 80046aa:	f7fc f901 	bl	80008b0 <_trace_isr_leave>
}
 80046ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80046b2:	f7fc b875 	b.w	80007a0 <_port_irq_epilogue>
 80046b6:	bf00      	nop
 80046b8:	080056d0 	.word	0x080056d0
 80046bc:	40026400 	.word	0x40026400
 80046c0:	20005514 	.word	0x20005514
	...

080046d0 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80046d0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80046d2:	480d      	ldr	r0, [pc, #52]	; (8004708 <Vector128+0x38>)
 80046d4:	f7fc f904 	bl	80008e0 <_trace_isr_enter>
 80046d8:	f7fc fa9a 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80046dc:	4b0b      	ldr	r3, [pc, #44]	; (800470c <Vector128+0x3c>)
  if (dma.streams[10].func)
 80046de:	480c      	ldr	r0, [pc, #48]	; (8004710 <Vector128+0x40>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80046e0:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 80046e2:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80046e4:	0c09      	lsrs	r1, r1, #16
 80046e6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 80046ea:	040c      	lsls	r4, r1, #16
 80046ec:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 80046ee:	b10a      	cbz	r2, 80046f4 <Vector128+0x24>
    dma.streams[10].func(dma.streams[10].param, flags);
 80046f0:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80046f2:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80046f4:	f7fc fa74 	bl	8000be0 <_dbg_check_leave_isr>
 80046f8:	4803      	ldr	r0, [pc, #12]	; (8004708 <Vector128+0x38>)
 80046fa:	f7fc f8d9 	bl	80008b0 <_trace_isr_leave>
}
 80046fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004702:	f7fc b84d 	b.w	80007a0 <_port_irq_epilogue>
 8004706:	bf00      	nop
 8004708:	080056c4 	.word	0x080056c4
 800470c:	40026400 	.word	0x40026400
 8004710:	20005514 	.word	0x20005514
	...

08004720 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8004720:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004722:	480d      	ldr	r0, [pc, #52]	; (8004758 <Vector124+0x38>)
 8004724:	f7fc f8dc 	bl	80008e0 <_trace_isr_enter>
 8004728:	f7fc fa72 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <Vector124+0x3c>)
  if (dma.streams[9].func)
 800472e:	480c      	ldr	r0, [pc, #48]	; (8004760 <Vector124+0x40>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004730:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8004732:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004734:	0989      	lsrs	r1, r1, #6
 8004736:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 800473a:	018c      	lsls	r4, r1, #6
 800473c:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 800473e:	b10a      	cbz	r2, 8004744 <Vector124+0x24>
    dma.streams[9].func(dma.streams[9].param, flags);
 8004740:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8004742:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004744:	f7fc fa4c 	bl	8000be0 <_dbg_check_leave_isr>
 8004748:	4803      	ldr	r0, [pc, #12]	; (8004758 <Vector124+0x38>)
 800474a:	f7fc f8b1 	bl	80008b0 <_trace_isr_leave>
}
 800474e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004752:	f7fc b825 	b.w	80007a0 <_port_irq_epilogue>
 8004756:	bf00      	nop
 8004758:	080056b0 	.word	0x080056b0
 800475c:	40026400 	.word	0x40026400
 8004760:	20005514 	.word	0x20005514
	...

08004770 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8004770:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8004772:	480c      	ldr	r0, [pc, #48]	; (80047a4 <Vector120+0x34>)
 8004774:	f7fc f8b4 	bl	80008e0 <_trace_isr_enter>
 8004778:	f7fc fa4a 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <Vector120+0x38>)
  if (dma.streams[8].func)
 800477e:	480b      	ldr	r0, [pc, #44]	; (80047ac <Vector120+0x3c>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8004780:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8004782:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8004784:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8004788:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 800478a:	b10a      	cbz	r2, 8004790 <Vector120+0x20>
    dma.streams[8].func(dma.streams[8].param, flags);
 800478c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800478e:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004790:	f7fc fa26 	bl	8000be0 <_dbg_check_leave_isr>
 8004794:	4803      	ldr	r0, [pc, #12]	; (80047a4 <Vector120+0x34>)
 8004796:	f7fc f88b 	bl	80008b0 <_trace_isr_leave>
}
 800479a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800479e:	f7fb bfff 	b.w	80007a0 <_port_irq_epilogue>
 80047a2:	bf00      	nop
 80047a4:	080056a4 	.word	0x080056a4
 80047a8:	40026400 	.word	0x40026400
 80047ac:	20005514 	.word	0x20005514

080047b0 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80047b0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80047b2:	480d      	ldr	r0, [pc, #52]	; (80047e8 <VectorFC+0x38>)
 80047b4:	f7fc f894 	bl	80008e0 <_trace_isr_enter>
 80047b8:	f7fc fa2a 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <VectorFC+0x3c>)
  if (dma.streams[7].func)
 80047be:	480c      	ldr	r0, [pc, #48]	; (80047f0 <VectorFC+0x40>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80047c0:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 80047c2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80047c4:	0d89      	lsrs	r1, r1, #22
 80047c6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 80047ca:	058c      	lsls	r4, r1, #22
 80047cc:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 80047ce:	b10a      	cbz	r2, 80047d4 <VectorFC+0x24>
    dma.streams[7].func(dma.streams[7].param, flags);
 80047d0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80047d2:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80047d4:	f7fc fa04 	bl	8000be0 <_dbg_check_leave_isr>
 80047d8:	4803      	ldr	r0, [pc, #12]	; (80047e8 <VectorFC+0x38>)
 80047da:	f7fc f869 	bl	80008b0 <_trace_isr_leave>
}
 80047de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80047e2:	f7fb bfdd 	b.w	80007a0 <_port_irq_epilogue>
 80047e6:	bf00      	nop
 80047e8:	08005698 	.word	0x08005698
 80047ec:	40026000 	.word	0x40026000
 80047f0:	20005514 	.word	0x20005514
	...

08004800 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8004800:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004802:	480d      	ldr	r0, [pc, #52]	; (8004838 <Vector84+0x38>)
 8004804:	f7fc f86c 	bl	80008e0 <_trace_isr_enter>
 8004808:	f7fc fa02 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <Vector84+0x3c>)
  if (dma.streams[6].func)
 800480e:	480c      	ldr	r0, [pc, #48]	; (8004840 <Vector84+0x40>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8004810:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 8004812:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8004814:	0c09      	lsrs	r1, r1, #16
 8004816:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 800481a:	040c      	lsls	r4, r1, #16
 800481c:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 800481e:	b10a      	cbz	r2, 8004824 <Vector84+0x24>
    dma.streams[6].func(dma.streams[6].param, flags);
 8004820:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004822:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004824:	f7fc f9dc 	bl	8000be0 <_dbg_check_leave_isr>
 8004828:	4803      	ldr	r0, [pc, #12]	; (8004838 <Vector84+0x38>)
 800482a:	f7fc f841 	bl	80008b0 <_trace_isr_leave>
}
 800482e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004832:	f7fb bfb5 	b.w	80007a0 <_port_irq_epilogue>
 8004836:	bf00      	nop
 8004838:	08005684 	.word	0x08005684
 800483c:	40026000 	.word	0x40026000
 8004840:	20005514 	.word	0x20005514
	...

08004850 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8004850:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004852:	480d      	ldr	r0, [pc, #52]	; (8004888 <Vector80+0x38>)
 8004854:	f7fc f844 	bl	80008e0 <_trace_isr_enter>
 8004858:	f7fc f9da 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <Vector80+0x3c>)
  if (dma.streams[5].func)
 800485e:	480c      	ldr	r0, [pc, #48]	; (8004890 <Vector80+0x40>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004860:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 8004862:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004864:	0989      	lsrs	r1, r1, #6
 8004866:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 800486a:	018c      	lsls	r4, r1, #6
 800486c:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 800486e:	b10a      	cbz	r2, 8004874 <Vector80+0x24>
    dma.streams[5].func(dma.streams[5].param, flags);
 8004870:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004872:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004874:	f7fc f9b4 	bl	8000be0 <_dbg_check_leave_isr>
 8004878:	4803      	ldr	r0, [pc, #12]	; (8004888 <Vector80+0x38>)
 800487a:	f7fc f819 	bl	80008b0 <_trace_isr_leave>
}
 800487e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004882:	f7fb bf8d 	b.w	80007a0 <_port_irq_epilogue>
 8004886:	bf00      	nop
 8004888:	08005660 	.word	0x08005660
 800488c:	40026000 	.word	0x40026000
 8004890:	20005514 	.word	0x20005514
	...

080048a0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80048a0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 80048a2:	480c      	ldr	r0, [pc, #48]	; (80048d4 <Vector7C+0x34>)
 80048a4:	f7fc f81c 	bl	80008e0 <_trace_isr_enter>
 80048a8:	f7fc f9b2 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80048ac:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <Vector7C+0x38>)
  if (dma.streams[4].func)
 80048ae:	480b      	ldr	r0, [pc, #44]	; (80048dc <Vector7C+0x3c>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80048b0:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 80048b2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80048b4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80048b8:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 80048ba:	b10a      	cbz	r2, 80048c0 <Vector7C+0x20>
    dma.streams[4].func(dma.streams[4].param, flags);
 80048bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80048be:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80048c0:	f7fc f98e 	bl	8000be0 <_dbg_check_leave_isr>
 80048c4:	4803      	ldr	r0, [pc, #12]	; (80048d4 <Vector7C+0x34>)
 80048c6:	f7fb fff3 	bl	80008b0 <_trace_isr_leave>
}
 80048ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80048ce:	f7fb bf67 	b.w	80007a0 <_port_irq_epilogue>
 80048d2:	bf00      	nop
 80048d4:	08005654 	.word	0x08005654
 80048d8:	40026000 	.word	0x40026000
 80048dc:	20005514 	.word	0x20005514

080048e0 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80048e0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80048e2:	480d      	ldr	r0, [pc, #52]	; (8004918 <Vector78+0x38>)
 80048e4:	f7fb fffc 	bl	80008e0 <_trace_isr_enter>
 80048e8:	f7fc f992 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <Vector78+0x3c>)
  if (dma.streams[3].func)
 80048ee:	480c      	ldr	r0, [pc, #48]	; (8004920 <Vector78+0x40>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80048f0:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 80048f2:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80048f4:	0d89      	lsrs	r1, r1, #22
 80048f6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 80048fa:	058c      	lsls	r4, r1, #22
 80048fc:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 80048fe:	b10a      	cbz	r2, 8004904 <Vector78+0x24>
    dma.streams[3].func(dma.streams[3].param, flags);
 8004900:	6a00      	ldr	r0, [r0, #32]
 8004902:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004904:	f7fc f96c 	bl	8000be0 <_dbg_check_leave_isr>
 8004908:	4803      	ldr	r0, [pc, #12]	; (8004918 <Vector78+0x38>)
 800490a:	f7fb ffd1 	bl	80008b0 <_trace_isr_leave>
}
 800490e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004912:	f7fb bf45 	b.w	80007a0 <_port_irq_epilogue>
 8004916:	bf00      	nop
 8004918:	08005648 	.word	0x08005648
 800491c:	40026000 	.word	0x40026000
 8004920:	20005514 	.word	0x20005514
	...

08004930 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8004930:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004932:	480d      	ldr	r0, [pc, #52]	; (8004968 <Vector74+0x38>)
 8004934:	f7fb ffd4 	bl	80008e0 <_trace_isr_enter>
 8004938:	f7fc f96a 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <Vector74+0x3c>)
  if (dma.streams[2].func)
 800493e:	480c      	ldr	r0, [pc, #48]	; (8004970 <Vector74+0x40>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8004940:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 8004942:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8004944:	0c09      	lsrs	r1, r1, #16
 8004946:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 800494a:	040c      	lsls	r4, r1, #16
 800494c:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 800494e:	b10a      	cbz	r2, 8004954 <Vector74+0x24>
    dma.streams[2].func(dma.streams[2].param, flags);
 8004950:	6980      	ldr	r0, [r0, #24]
 8004952:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004954:	f7fc f944 	bl	8000be0 <_dbg_check_leave_isr>
 8004958:	4803      	ldr	r0, [pc, #12]	; (8004968 <Vector74+0x38>)
 800495a:	f7fb ffa9 	bl	80008b0 <_trace_isr_leave>
}
 800495e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004962:	f7fb bf1d 	b.w	80007a0 <_port_irq_epilogue>
 8004966:	bf00      	nop
 8004968:	0800563c 	.word	0x0800563c
 800496c:	40026000 	.word	0x40026000
 8004970:	20005514 	.word	0x20005514
	...

08004980 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8004980:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004982:	480d      	ldr	r0, [pc, #52]	; (80049b8 <Vector70+0x38>)
 8004984:	f7fb ffac 	bl	80008e0 <_trace_isr_enter>
 8004988:	f7fc f942 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800498c:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <Vector70+0x3c>)
  if (dma.streams[1].func)
 800498e:	480c      	ldr	r0, [pc, #48]	; (80049c0 <Vector70+0x40>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004990:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 8004992:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004994:	0989      	lsrs	r1, r1, #6
 8004996:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 800499a:	018c      	lsls	r4, r1, #6
 800499c:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 800499e:	b10a      	cbz	r2, 80049a4 <Vector70+0x24>
    dma.streams[1].func(dma.streams[1].param, flags);
 80049a0:	6900      	ldr	r0, [r0, #16]
 80049a2:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80049a4:	f7fc f91c 	bl	8000be0 <_dbg_check_leave_isr>
 80049a8:	4803      	ldr	r0, [pc, #12]	; (80049b8 <Vector70+0x38>)
 80049aa:	f7fb ff81 	bl	80008b0 <_trace_isr_leave>
}
 80049ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80049b2:	f7fb bef5 	b.w	80007a0 <_port_irq_epilogue>
 80049b6:	bf00      	nop
 80049b8:	08005630 	.word	0x08005630
 80049bc:	40026000 	.word	0x40026000
 80049c0:	20005514 	.word	0x20005514
	...

080049d0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 80049d0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 80049d2:	480c      	ldr	r0, [pc, #48]	; (8004a04 <Vector6C+0x34>)
 80049d4:	f7fb ff84 	bl	80008e0 <_trace_isr_enter>
 80049d8:	f7fc f91a 	bl	8000c10 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <Vector6C+0x38>)
  if (dma.streams[0].func)
 80049de:	480b      	ldr	r0, [pc, #44]	; (8004a0c <Vector6C+0x3c>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80049e0:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 80049e2:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80049e4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 80049e8:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 80049ea:	b10a      	cbz	r2, 80049f0 <Vector6C+0x20>
    dma.streams[0].func(dma.streams[0].param, flags);
 80049ec:	6880      	ldr	r0, [r0, #8]
 80049ee:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80049f0:	f7fc f8f6 	bl	8000be0 <_dbg_check_leave_isr>
 80049f4:	4803      	ldr	r0, [pc, #12]	; (8004a04 <Vector6C+0x34>)
 80049f6:	f7fb ff5b 	bl	80008b0 <_trace_isr_leave>
}
 80049fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80049fe:	f7fb becf 	b.w	80007a0 <_port_irq_epilogue>
 8004a02:	bf00      	nop
 8004a04:	08005618 	.word	0x08005618
 8004a08:	40026000 	.word	0x40026000
 8004a0c:	20005514 	.word	0x20005514

08004a10 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8004a10:	b4f0      	push	{r4, r5, r6, r7}
 8004a12:	4f14      	ldr	r7, [pc, #80]	; (8004a64 <__init_ram_areas+0x54>)
 8004a14:	4d14      	ldr	r5, [pc, #80]	; (8004a68 <__init_ram_areas+0x58>)
 8004a16:	4815      	ldr	r0, [pc, #84]	; (8004a6c <__init_ram_areas+0x5c>)
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <__init_ram_areas+0x60>)
 8004a1a:	4916      	ldr	r1, [pc, #88]	; (8004a74 <__init_ram_areas+0x64>)
 8004a1c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8004a20:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8004a22:	4298      	cmp	r0, r3
 8004a24:	d911      	bls.n	8004a4a <__init_ram_areas+0x3a>
 8004a26:	3904      	subs	r1, #4
 8004a28:	461a      	mov	r2, r3
      *p = *tp;
 8004a2a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8004a2e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8004a32:	4290      	cmp	r0, r2
 8004a34:	d8f9      	bhi.n	8004a2a <__init_ram_areas+0x1a>
 8004a36:	1e42      	subs	r2, r0, #1
 8004a38:	1ad2      	subs	r2, r2, r3
 8004a3a:	f022 0203 	bic.w	r2, r2, #3
 8004a3e:	3204      	adds	r2, #4
 8004a40:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8004a42:	429d      	cmp	r5, r3
 8004a44:	d903      	bls.n	8004a4e <__init_ram_areas+0x3e>
      *p = 0;
 8004a46:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8004a4a:	429d      	cmp	r5, r3
 8004a4c:	d8fb      	bhi.n	8004a46 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8004a4e:	4567      	cmp	r7, ip
 8004a50:	d005      	beq.n	8004a5e <__init_ram_areas+0x4e>
 8004a52:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8004a56:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	e7e1      	b.n	8004a22 <__init_ram_areas+0x12>
#endif
}
 8004a5e:	bcf0      	pop	{r4, r5, r6, r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	08005910 	.word	0x08005910
 8004a68:	200058e8 	.word	0x200058e8
 8004a6c:	200058e8 	.word	0x200058e8
 8004a70:	200058e8 	.word	0x200058e8
 8004a74:	08005a60 	.word	0x08005a60
	...

08004a80 <__default_exit>:
  while (true) {
 8004a80:	e7fe      	b.n	8004a80 <__default_exit>
 8004a82:	bf00      	nop
	...

08004a90 <__late_init>:
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
	...

08004aa0 <__core_init>:
}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop

08004aa4 <memcmp>:
 8004aa4:	2a03      	cmp	r2, #3
 8004aa6:	b470      	push	{r4, r5, r6}
 8004aa8:	d912      	bls.n	8004ad0 <memcmp+0x2c>
 8004aaa:	ea40 0501 	orr.w	r5, r0, r1
 8004aae:	07ad      	lsls	r5, r5, #30
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	d11e      	bne.n	8004af4 <memcmp+0x50>
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f853 5b04 	ldr.w	r5, [r3], #4
 8004abe:	f854 6b04 	ldr.w	r6, [r4], #4
 8004ac2:	42ae      	cmp	r6, r5
 8004ac4:	d116      	bne.n	8004af4 <memcmp+0x50>
 8004ac6:	3a04      	subs	r2, #4
 8004ac8:	2a03      	cmp	r2, #3
 8004aca:	4620      	mov	r0, r4
 8004acc:	4619      	mov	r1, r3
 8004ace:	d8f2      	bhi.n	8004ab6 <memcmp+0x12>
 8004ad0:	1e56      	subs	r6, r2, #1
 8004ad2:	b1a2      	cbz	r2, 8004afe <memcmp+0x5a>
 8004ad4:	3901      	subs	r1, #1
 8004ad6:	1e44      	subs	r4, r0, #1
 8004ad8:	e001      	b.n	8004ade <memcmp+0x3a>
 8004ada:	18c3      	adds	r3, r0, r3
 8004adc:	d00c      	beq.n	8004af8 <memcmp+0x54>
 8004ade:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8004ae2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004ae6:	4295      	cmp	r5, r2
 8004ae8:	eba6 0304 	sub.w	r3, r6, r4
 8004aec:	d0f5      	beq.n	8004ada <memcmp+0x36>
 8004aee:	1aa8      	subs	r0, r5, r2
 8004af0:	bc70      	pop	{r4, r5, r6}
 8004af2:	4770      	bx	lr
 8004af4:	1e56      	subs	r6, r2, #1
 8004af6:	e7ed      	b.n	8004ad4 <memcmp+0x30>
 8004af8:	4618      	mov	r0, r3
 8004afa:	bc70      	pop	{r4, r5, r6}
 8004afc:	4770      	bx	lr
 8004afe:	4610      	mov	r0, r2
 8004b00:	e7f6      	b.n	8004af0 <memcmp+0x4c>
 8004b02:	bf00      	nop

08004b04 <memset>:
 8004b04:	b4f0      	push	{r4, r5, r6, r7}
 8004b06:	0786      	lsls	r6, r0, #30
 8004b08:	d046      	beq.n	8004b98 <memset+0x94>
 8004b0a:	1e54      	subs	r4, r2, #1
 8004b0c:	2a00      	cmp	r2, #0
 8004b0e:	d03c      	beq.n	8004b8a <memset+0x86>
 8004b10:	b2ca      	uxtb	r2, r1
 8004b12:	4603      	mov	r3, r0
 8004b14:	e001      	b.n	8004b1a <memset+0x16>
 8004b16:	3c01      	subs	r4, #1
 8004b18:	d337      	bcc.n	8004b8a <memset+0x86>
 8004b1a:	f803 2b01 	strb.w	r2, [r3], #1
 8004b1e:	079d      	lsls	r5, r3, #30
 8004b20:	d1f9      	bne.n	8004b16 <memset+0x12>
 8004b22:	2c03      	cmp	r4, #3
 8004b24:	d92a      	bls.n	8004b7c <memset+0x78>
 8004b26:	b2cd      	uxtb	r5, r1
 8004b28:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004b2c:	2c0f      	cmp	r4, #15
 8004b2e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004b32:	d934      	bls.n	8004b9e <memset+0x9a>
 8004b34:	f1a4 0210 	sub.w	r2, r4, #16
 8004b38:	f022 0c0f 	bic.w	ip, r2, #15
 8004b3c:	f103 0720 	add.w	r7, r3, #32
 8004b40:	0916      	lsrs	r6, r2, #4
 8004b42:	4467      	add	r7, ip
 8004b44:	f103 0210 	add.w	r2, r3, #16
 8004b48:	e942 5504 	strd	r5, r5, [r2, #-16]
 8004b4c:	e942 5502 	strd	r5, r5, [r2, #-8]
 8004b50:	3210      	adds	r2, #16
 8004b52:	42ba      	cmp	r2, r7
 8004b54:	d1f8      	bne.n	8004b48 <memset+0x44>
 8004b56:	1c72      	adds	r2, r6, #1
 8004b58:	f014 0f0c 	tst.w	r4, #12
 8004b5c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004b60:	f004 060f 	and.w	r6, r4, #15
 8004b64:	d013      	beq.n	8004b8e <memset+0x8a>
 8004b66:	1f33      	subs	r3, r6, #4
 8004b68:	f023 0303 	bic.w	r3, r3, #3
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4413      	add	r3, r2
 8004b70:	f842 5b04 	str.w	r5, [r2], #4
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d1fb      	bne.n	8004b70 <memset+0x6c>
 8004b78:	f006 0403 	and.w	r4, r6, #3
 8004b7c:	b12c      	cbz	r4, 8004b8a <memset+0x86>
 8004b7e:	b2ca      	uxtb	r2, r1
 8004b80:	441c      	add	r4, r3
 8004b82:	f803 2b01 	strb.w	r2, [r3], #1
 8004b86:	429c      	cmp	r4, r3
 8004b88:	d1fb      	bne.n	8004b82 <memset+0x7e>
 8004b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8004b8c:	4770      	bx	lr
 8004b8e:	4634      	mov	r4, r6
 8004b90:	4613      	mov	r3, r2
 8004b92:	2c00      	cmp	r4, #0
 8004b94:	d1f3      	bne.n	8004b7e <memset+0x7a>
 8004b96:	e7f8      	b.n	8004b8a <memset+0x86>
 8004b98:	4614      	mov	r4, r2
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	e7c1      	b.n	8004b22 <memset+0x1e>
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	4626      	mov	r6, r4
 8004ba2:	e7e0      	b.n	8004b66 <memset+0x62>

08004ba4 <strchr>:
 8004ba4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8004ba8:	4603      	mov	r3, r0
 8004baa:	d044      	beq.n	8004c36 <strchr+0x92>
 8004bac:	0782      	lsls	r2, r0, #30
 8004bae:	d132      	bne.n	8004c16 <strchr+0x72>
 8004bb0:	b470      	push	{r4, r5, r6}
 8004bb2:	6804      	ldr	r4, [r0, #0]
 8004bb4:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8004bb8:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8004bbc:	ea86 0504 	eor.w	r5, r6, r4
 8004bc0:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 8004bc4:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8004bc8:	ea23 0305 	bic.w	r3, r3, r5
 8004bcc:	ea22 0204 	bic.w	r2, r2, r4
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8004bd6:	d10f      	bne.n	8004bf8 <strchr+0x54>
 8004bd8:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8004bdc:	ea84 0506 	eor.w	r5, r4, r6
 8004be0:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8004be4:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 8004be8:	ea22 0205 	bic.w	r2, r2, r5
 8004bec:	ea23 0304 	bic.w	r3, r3, r4
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8004bf6:	d0ef      	beq.n	8004bd8 <strchr+0x34>
 8004bf8:	7803      	ldrb	r3, [r0, #0]
 8004bfa:	b923      	cbnz	r3, 8004c06 <strchr+0x62>
 8004bfc:	e036      	b.n	8004c6c <strchr+0xc8>
 8004bfe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d032      	beq.n	8004c6c <strchr+0xc8>
 8004c06:	4299      	cmp	r1, r3
 8004c08:	d1f9      	bne.n	8004bfe <strchr+0x5a>
 8004c0a:	e030      	b.n	8004c6e <strchr+0xca>
 8004c0c:	428a      	cmp	r2, r1
 8004c0e:	d011      	beq.n	8004c34 <strchr+0x90>
 8004c10:	079a      	lsls	r2, r3, #30
 8004c12:	4618      	mov	r0, r3
 8004c14:	d0cc      	beq.n	8004bb0 <strchr+0xc>
 8004c16:	4618      	mov	r0, r3
 8004c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c1c:	2a00      	cmp	r2, #0
 8004c1e:	d1f5      	bne.n	8004c0c <strchr+0x68>
 8004c20:	4610      	mov	r0, r2
 8004c22:	4770      	bx	lr
 8004c24:	0799      	lsls	r1, r3, #30
 8004c26:	4618      	mov	r0, r3
 8004c28:	d007      	beq.n	8004c3a <strchr+0x96>
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	7802      	ldrb	r2, [r0, #0]
 8004c30:	2a00      	cmp	r2, #0
 8004c32:	d1f7      	bne.n	8004c24 <strchr+0x80>
 8004c34:	4770      	bx	lr
 8004c36:	0782      	lsls	r2, r0, #30
 8004c38:	d1f7      	bne.n	8004c2a <strchr+0x86>
 8004c3a:	6802      	ldr	r2, [r0, #0]
 8004c3c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8004c40:	ea23 0302 	bic.w	r3, r3, r2
 8004c44:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8004c48:	d108      	bne.n	8004c5c <strchr+0xb8>
 8004c4a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004c4e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8004c52:	ea23 0302 	bic.w	r3, r3, r2
 8004c56:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8004c5a:	d0f6      	beq.n	8004c4a <strchr+0xa6>
 8004c5c:	7803      	ldrb	r3, [r0, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0e8      	beq.n	8004c34 <strchr+0x90>
 8004c62:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1fb      	bne.n	8004c62 <strchr+0xbe>
 8004c6a:	4770      	bx	lr
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	bc70      	pop	{r4, r5, r6}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop

08004c74 <strpbrk>:
 8004c74:	b430      	push	{r4, r5}
 8004c76:	7804      	ldrb	r4, [r0, #0]
 8004c78:	b1a4      	cbz	r4, 8004ca4 <strpbrk+0x30>
 8004c7a:	780d      	ldrb	r5, [r1, #0]
 8004c7c:	460a      	mov	r2, r1
 8004c7e:	462b      	mov	r3, r5
 8004c80:	b91d      	cbnz	r5, 8004c8a <strpbrk+0x16>
 8004c82:	e00a      	b.n	8004c9a <strpbrk+0x26>
 8004c84:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004c88:	b13b      	cbz	r3, 8004c9a <strpbrk+0x26>
 8004c8a:	429c      	cmp	r4, r3
 8004c8c:	d1fa      	bne.n	8004c84 <strpbrk+0x10>
 8004c8e:	7813      	ldrb	r3, [r2, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bf08      	it	eq
 8004c94:	2000      	moveq	r0, #0
 8004c96:	bc30      	pop	{r4, r5}
 8004c98:	4770      	bx	lr
 8004c9a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8004c9e:	2c00      	cmp	r4, #0
 8004ca0:	d1ec      	bne.n	8004c7c <strpbrk+0x8>
 8004ca2:	e7f4      	b.n	8004c8e <strpbrk+0x1a>
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	bc30      	pop	{r4, r5}
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop

08004cac <strspn>:
 8004cac:	b470      	push	{r4, r5, r6}
 8004cae:	7804      	ldrb	r4, [r0, #0]
 8004cb0:	b18c      	cbz	r4, 8004cd6 <strspn+0x2a>
 8004cb2:	780e      	ldrb	r6, [r1, #0]
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	b15e      	cbz	r6, 8004cd0 <strspn+0x24>
 8004cb8:	460a      	mov	r2, r1
 8004cba:	4633      	mov	r3, r6
 8004cbc:	e002      	b.n	8004cc4 <strspn+0x18>
 8004cbe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004cc2:	b12b      	cbz	r3, 8004cd0 <strspn+0x24>
 8004cc4:	42a3      	cmp	r3, r4
 8004cc6:	d1fa      	bne.n	8004cbe <strspn+0x12>
 8004cc8:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8004ccc:	2c00      	cmp	r4, #0
 8004cce:	d1f2      	bne.n	8004cb6 <strspn+0xa>
 8004cd0:	1a28      	subs	r0, r5, r0
 8004cd2:	bc70      	pop	{r4, r5, r6}
 8004cd4:	4770      	bx	lr
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	e7fb      	b.n	8004cd2 <strspn+0x26>
 8004cda:	bf00      	nop
