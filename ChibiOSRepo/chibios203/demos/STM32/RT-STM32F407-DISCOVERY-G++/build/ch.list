
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002c9 	.word	0x080002c9
 8000008:	080002cb 	.word	0x080002cb
 800000c:	080002cb 	.word	0x080002cb
 8000010:	080002cb 	.word	0x080002cb
 8000014:	080002cb 	.word	0x080002cb
 8000018:	080002cb 	.word	0x080002cb
 800001c:	080002cb 	.word	0x080002cb
 8000020:	080002cb 	.word	0x080002cb
 8000024:	080002cb 	.word	0x080002cb
 8000028:	080002cb 	.word	0x080002cb
 800002c:	080038b1 	.word	0x080038b1
 8000030:	080002cb 	.word	0x080002cb
 8000034:	080002cb 	.word	0x080002cb
 8000038:	080002cb 	.word	0x080002cb
 800003c:	080002cb 	.word	0x080002cb
 8000040:	080002cb 	.word	0x080002cb
 8000044:	080002cb 	.word	0x080002cb
 8000048:	080002cb 	.word	0x080002cb
 800004c:	080002cb 	.word	0x080002cb
 8000050:	080002cb 	.word	0x080002cb
 8000054:	080002cb 	.word	0x080002cb
 8000058:	080002cb 	.word	0x080002cb
 800005c:	080002cb 	.word	0x080002cb
 8000060:	080002cb 	.word	0x080002cb
 8000064:	080002cb 	.word	0x080002cb
 8000068:	080002cb 	.word	0x080002cb
 800006c:	080002cb 	.word	0x080002cb
 8000070:	080002cb 	.word	0x080002cb
 8000074:	080002cb 	.word	0x080002cb
 8000078:	080002cb 	.word	0x080002cb
 800007c:	080002cb 	.word	0x080002cb
 8000080:	080002cb 	.word	0x080002cb
 8000084:	080002cb 	.word	0x080002cb
 8000088:	080002cb 	.word	0x080002cb
 800008c:	080002cb 	.word	0x080002cb
 8000090:	080002cb 	.word	0x080002cb
 8000094:	080002cb 	.word	0x080002cb
 8000098:	080002cb 	.word	0x080002cb
 800009c:	080002cb 	.word	0x080002cb
 80000a0:	080002cb 	.word	0x080002cb
 80000a4:	080002cb 	.word	0x080002cb
 80000a8:	080002cb 	.word	0x080002cb
 80000ac:	080002cb 	.word	0x080002cb
 80000b0:	080094f1 	.word	0x080094f1
 80000b4:	080002cb 	.word	0x080002cb
 80000b8:	08009481 	.word	0x08009481
 80000bc:	080002cb 	.word	0x080002cb
 80000c0:	080002cb 	.word	0x080002cb
 80000c4:	080002cb 	.word	0x080002cb
 80000c8:	080002cb 	.word	0x080002cb
 80000cc:	080002cb 	.word	0x080002cb
 80000d0:	080002cb 	.word	0x080002cb
 80000d4:	080002cb 	.word	0x080002cb
 80000d8:	080092e1 	.word	0x080092e1
 80000dc:	080002cb 	.word	0x080002cb
 80000e0:	080002cb 	.word	0x080002cb
 80000e4:	080002cb 	.word	0x080002cb
 80000e8:	080002cb 	.word	0x080002cb
 80000ec:	080002cb 	.word	0x080002cb
 80000f0:	080002cb 	.word	0x080002cb
 80000f4:	080002cb 	.word	0x080002cb
 80000f8:	080002cb 	.word	0x080002cb
 80000fc:	080002cb 	.word	0x080002cb
 8000100:	080002cb 	.word	0x080002cb
 8000104:	080002cb 	.word	0x080002cb
 8000108:	080002cb 	.word	0x080002cb
 800010c:	080002cb 	.word	0x080002cb
 8000110:	080002cb 	.word	0x080002cb
 8000114:	080002cb 	.word	0x080002cb
 8000118:	080002cb 	.word	0x080002cb
 800011c:	080002cb 	.word	0x080002cb
 8000120:	080002cb 	.word	0x080002cb
 8000124:	080002cb 	.word	0x080002cb
 8000128:	080002cb 	.word	0x080002cb
 800012c:	080002cb 	.word	0x080002cb
 8000130:	080002cb 	.word	0x080002cb
 8000134:	080002cb 	.word	0x080002cb
 8000138:	080002cb 	.word	0x080002cb
 800013c:	080002cb 	.word	0x080002cb
 8000140:	080002cb 	.word	0x080002cb
 8000144:	080002cb 	.word	0x080002cb
 8000148:	080002cb 	.word	0x080002cb
 800014c:	080002cb 	.word	0x080002cb
 8000150:	080002cb 	.word	0x080002cb
 8000154:	080002cb 	.word	0x080002cb
 8000158:	080002cb 	.word	0x080002cb
 800015c:	080002cb 	.word	0x080002cb
 8000160:	080002cb 	.word	0x080002cb
 8000164:	080002cb 	.word	0x080002cb
 8000168:	080002cb 	.word	0x080002cb
 800016c:	080002cb 	.word	0x080002cb
 8000170:	080002cb 	.word	0x080002cb
 8000174:	080002cb 	.word	0x080002cb
 8000178:	080002cb 	.word	0x080002cb
 800017c:	080002cb 	.word	0x080002cb
 8000180:	080002cb 	.word	0x080002cb
 8000184:	080002cb 	.word	0x080002cb
 8000188:	080002cb 	.word	0x080002cb
 800018c:	080002cb 	.word	0x080002cb
 8000190:	080002cb 	.word	0x080002cb
 8000194:	080002cb 	.word	0x080002cb
 8000198:	080002cb 	.word	0x080002cb
 800019c:	080002cb 	.word	0x080002cb
 80001a0:	080002cb 	.word	0x080002cb
 80001a4:	080002cb 	.word	0x080002cb
 80001a8:	080002cb 	.word	0x080002cb
 80001ac:	080002cb 	.word	0x080002cb
 80001b0:	080002cb 	.word	0x080002cb
 80001b4:	080002cb 	.word	0x080002cb
 80001b8:	080002cb 	.word	0x080002cb
 80001bc:	080002cb 	.word	0x080002cb
 80001c0:	080002cb 	.word	0x080002cb
 80001c4:	080002cb 	.word	0x080002cb
 80001c8:	080002cb 	.word	0x080002cb
 80001cc:	080002cb 	.word	0x080002cb
 80001d0:	080002cb 	.word	0x080002cb
 80001d4:	080002cb 	.word	0x080002cb
 80001d8:	080002cb 	.word	0x080002cb
 80001dc:	080002cb 	.word	0x080002cb

Disassembly of section .text:

080001f0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001f0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001f2:	4827      	ldr	r0, [pc, #156]	; (8000290 <endfiniloop+0x4>)
                msr     MSP, r0
 80001f4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001f8:	4826      	ldr	r0, [pc, #152]	; (8000294 <endfiniloop+0x8>)
                msr     PSP, r0
 80001fa:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001fe:	4826      	ldr	r0, [pc, #152]	; (8000298 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000200:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000204:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000208:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800020a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800020c:	f380 8814 	msr	CONTROL, r0
                isb
 8000210:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000214:	f009 fa14 	bl	8009640 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000218:	f008 ff2a 	bl	8009070 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800021c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000220:	491e      	ldr	r1, [pc, #120]	; (800029c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000222:	4a1b      	ldr	r2, [pc, #108]	; (8000290 <endfiniloop+0x4>)

08000224 <msloop>:
msloop:
                cmp     r1, r2
 8000224:	4291      	cmp	r1, r2
                itt     lo
 8000226:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000228:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800022c:	e7fa      	bcc.n	8000224 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800022e:	491c      	ldr	r1, [pc, #112]	; (80002a0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000230:	4a18      	ldr	r2, [pc, #96]	; (8000294 <endfiniloop+0x8>)

08000232 <psloop>:
psloop:
                cmp     r1, r2
 8000232:	4291      	cmp	r1, r2
                itt     lo
 8000234:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000236:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800023a:	e7fa      	bcc.n	8000232 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800023c:	4919      	ldr	r1, [pc, #100]	; (80002a4 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800023e:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000240:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <endfiniloop+0x20>)

08000242 <dloop>:
dloop:
                cmp     r2, r3
 8000242:	429a      	cmp	r2, r3
                ittt    lo
 8000244:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000246:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800024a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800024e:	e7f8      	bcc.n	8000242 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000250:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000252:	4917      	ldr	r1, [pc, #92]	; (80002b0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000254:	4a17      	ldr	r2, [pc, #92]	; (80002b4 <endfiniloop+0x28>)

08000256 <bloop>:
bloop:
                cmp     r1, r2
 8000256:	4291      	cmp	r1, r2
                itt     lo
 8000258:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800025a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800025e:	e7fa      	bcc.n	8000256 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000260:	f009 f9a6 	bl	80095b0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000264:	f009 f9e4 	bl	8009630 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000268:	4c13      	ldr	r4, [pc, #76]	; (80002b8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800026a:	4d14      	ldr	r5, [pc, #80]	; (80002bc <endfiniloop+0x30>)

0800026c <initloop>:
initloop:
                cmp     r4, r5
 800026c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800026e:	da03      	bge.n	8000278 <endinitloop>
                ldr     r1, [r4], #4
 8000270:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000274:	4788      	blx	r1
                b       initloop
 8000276:	e7f9      	b.n	800026c <initloop>

08000278 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000278:	f006 fe02 	bl	8006e80 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800027c:	4c10      	ldr	r4, [pc, #64]	; (80002c0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800027e:	4d11      	ldr	r5, [pc, #68]	; (80002c4 <endfiniloop+0x38>)

08000280 <finiloop>:
finiloop:
                cmp     r4, r5
 8000280:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000282:	da03      	bge.n	800028c <endfiniloop>
                ldr     r1, [r4], #4
 8000284:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000288:	4788      	blx	r1
                b       finiloop
 800028a:	e7f9      	b.n	8000280 <finiloop>

0800028c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800028c:	f009 b9c8 	b.w	8009620 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000290:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000294:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000298:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800029c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002a0:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002a4:	0800bfa4 	.word	0x0800bfa4
                ldr     r2, =__data_base__
 80002a8:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002ac:	200008dc 	.word	0x200008dc
                ldr     r1, =__bss_base__
 80002b0:	200008e0 	.word	0x200008e0
                ldr     r2, =__bss_end__
 80002b4:	200024d0 	.word	0x200024d0
                ldr     r4, =__init_array_base__
 80002b8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002bc:	080001e4 	.word	0x080001e4
                ldr     r4, =__fini_array_base__
 80002c0:	080001e4 	.word	0x080001e4
                ldr     r5, =__fini_array_end__
 80002c4:	080001e4 	.word	0x080001e4

080002c8 <Reset_Handler>:
        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:

         b          _crt0_entry
 80002c8:	e792      	b.n	80001f0 <_crt0_entry>

080002ca <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ca:	f000 f800 	bl	80002ce <_unhandled_exception>

080002ce <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002ce:	e7fe      	b.n	80002ce <_unhandled_exception>

080002d0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002d4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002d8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002da:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002e0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002e0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002e2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002e6:	4628      	mov	r0, r5
                blx     r4
 80002e8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002ea:	2000      	movs	r0, #0
                bl      chThdExit
 80002ec:	f003 faf0 	bl	80038d0 <chThdExit>

080002f0 <_zombies>:
_zombies:       b       _zombies
 80002f0:	e7fe      	b.n	80002f0 <_zombies>

080002f2 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002f2:	f003 fb65 	bl	80039c0 <chSchDoReschedule>

080002f6 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002f6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002f8:	e7fe      	b.n	80002f8 <_port_exit_from_isr+0x2>
	...

080002fc <memcpy>:
 80002fc:	4684      	mov	ip, r0
 80002fe:	ea41 0300 	orr.w	r3, r1, r0
 8000302:	f013 0303 	ands.w	r3, r3, #3
 8000306:	d16d      	bne.n	80003e4 <memcpy+0xe8>
 8000308:	3a40      	subs	r2, #64	; 0x40
 800030a:	d341      	bcc.n	8000390 <memcpy+0x94>
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	3a40      	subs	r2, #64	; 0x40
 800038e:	d2bd      	bcs.n	800030c <memcpy+0x10>
 8000390:	3230      	adds	r2, #48	; 0x30
 8000392:	d311      	bcc.n	80003b8 <memcpy+0xbc>
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	3a10      	subs	r2, #16
 80003b6:	d2ed      	bcs.n	8000394 <memcpy+0x98>
 80003b8:	320c      	adds	r2, #12
 80003ba:	d305      	bcc.n	80003c8 <memcpy+0xcc>
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	3a04      	subs	r2, #4
 80003c6:	d2f9      	bcs.n	80003bc <memcpy+0xc0>
 80003c8:	3204      	adds	r2, #4
 80003ca:	d008      	beq.n	80003de <memcpy+0xe2>
 80003cc:	07d2      	lsls	r2, r2, #31
 80003ce:	bf1c      	itt	ne
 80003d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003d4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003d8:	d301      	bcc.n	80003de <memcpy+0xe2>
 80003da:	880b      	ldrh	r3, [r1, #0]
 80003dc:	8003      	strh	r3, [r0, #0]
 80003de:	4660      	mov	r0, ip
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	2a08      	cmp	r2, #8
 80003e6:	d313      	bcc.n	8000410 <memcpy+0x114>
 80003e8:	078b      	lsls	r3, r1, #30
 80003ea:	d08d      	beq.n	8000308 <memcpy+0xc>
 80003ec:	f010 0303 	ands.w	r3, r0, #3
 80003f0:	d08a      	beq.n	8000308 <memcpy+0xc>
 80003f2:	f1c3 0304 	rsb	r3, r3, #4
 80003f6:	1ad2      	subs	r2, r2, r3
 80003f8:	07db      	lsls	r3, r3, #31
 80003fa:	bf1c      	itt	ne
 80003fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000400:	f800 3b01 	strbne.w	r3, [r0], #1
 8000404:	d380      	bcc.n	8000308 <memcpy+0xc>
 8000406:	f831 3b02 	ldrh.w	r3, [r1], #2
 800040a:	f820 3b02 	strh.w	r3, [r0], #2
 800040e:	e77b      	b.n	8000308 <memcpy+0xc>
 8000410:	3a04      	subs	r2, #4
 8000412:	d3d9      	bcc.n	80003c8 <memcpy+0xcc>
 8000414:	3a01      	subs	r2, #1
 8000416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800041a:	f800 3b01 	strb.w	r3, [r0], #1
 800041e:	d2f9      	bcs.n	8000414 <memcpy+0x118>
 8000420:	780b      	ldrb	r3, [r1, #0]
 8000422:	7003      	strb	r3, [r0, #0]
 8000424:	784b      	ldrb	r3, [r1, #1]
 8000426:	7043      	strb	r3, [r0, #1]
 8000428:	788b      	ldrb	r3, [r1, #2]
 800042a:	7083      	strb	r3, [r0, #2]
 800042c:	4660      	mov	r0, ip
 800042e:	4770      	bx	lr

08000430 <__aeabi_uldivmod>:
 8000430:	b953      	cbnz	r3, 8000448 <__aeabi_uldivmod+0x18>
 8000432:	b94a      	cbnz	r2, 8000448 <__aeabi_uldivmod+0x18>
 8000434:	2900      	cmp	r1, #0
 8000436:	bf08      	it	eq
 8000438:	2800      	cmpeq	r0, #0
 800043a:	bf1c      	itt	ne
 800043c:	f04f 31ff 	movne.w	r1, #4294967295
 8000440:	f04f 30ff 	movne.w	r0, #4294967295
 8000444:	f000 b96c 	b.w	8000720 <__aeabi_idiv0>
 8000448:	f1ad 0c08 	sub.w	ip, sp, #8
 800044c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000450:	f000 f806 	bl	8000460 <__udivmoddi4>
 8000454:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045c:	b004      	add	sp, #16
 800045e:	4770      	bx	lr

08000460 <__udivmoddi4>:
 8000460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000464:	9e08      	ldr	r6, [sp, #32]
 8000466:	460d      	mov	r5, r1
 8000468:	4604      	mov	r4, r0
 800046a:	468e      	mov	lr, r1
 800046c:	2b00      	cmp	r3, #0
 800046e:	f040 8082 	bne.w	8000576 <__udivmoddi4+0x116>
 8000472:	428a      	cmp	r2, r1
 8000474:	4617      	mov	r7, r2
 8000476:	d946      	bls.n	8000506 <__udivmoddi4+0xa6>
 8000478:	fab2 f282 	clz	r2, r2
 800047c:	b14a      	cbz	r2, 8000492 <__udivmoddi4+0x32>
 800047e:	f1c2 0120 	rsb	r1, r2, #32
 8000482:	fa05 f302 	lsl.w	r3, r5, r2
 8000486:	fa20 f101 	lsr.w	r1, r0, r1
 800048a:	4097      	lsls	r7, r2
 800048c:	ea41 0e03 	orr.w	lr, r1, r3
 8000490:	4094      	lsls	r4, r2
 8000492:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000496:	0c23      	lsrs	r3, r4, #16
 8000498:	fbbe fcf8 	udiv	ip, lr, r8
 800049c:	b2b9      	uxth	r1, r7
 800049e:	fb08 ee1c 	mls	lr, r8, ip, lr
 80004a2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a6:	fb0c f001 	mul.w	r0, ip, r1
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d90a      	bls.n	80004c4 <__udivmoddi4+0x64>
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	f10c 35ff 	add.w	r5, ip, #4294967295
 80004b4:	f080 8116 	bcs.w	80006e4 <__udivmoddi4+0x284>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	f240 8113 	bls.w	80006e4 <__udivmoddi4+0x284>
 80004be:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c2:	443b      	add	r3, r7
 80004c4:	1a1b      	subs	r3, r3, r0
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3310 	mls	r3, r8, r0, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb00 f101 	mul.w	r1, r0, r1
 80004d8:	42a1      	cmp	r1, r4
 80004da:	d909      	bls.n	80004f0 <__udivmoddi4+0x90>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	f080 8101 	bcs.w	80006e8 <__udivmoddi4+0x288>
 80004e6:	42a1      	cmp	r1, r4
 80004e8:	f240 80fe 	bls.w	80006e8 <__udivmoddi4+0x288>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	1a64      	subs	r4, r4, r1
 80004f2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f6:	2100      	movs	r1, #0
 80004f8:	b11e      	cbz	r6, 8000502 <__udivmoddi4+0xa2>
 80004fa:	40d4      	lsrs	r4, r2
 80004fc:	2300      	movs	r3, #0
 80004fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000506:	b902      	cbnz	r2, 800050a <__udivmoddi4+0xaa>
 8000508:	deff      	udf	#255	; 0xff
 800050a:	fab2 f282 	clz	r2, r2
 800050e:	2a00      	cmp	r2, #0
 8000510:	d14f      	bne.n	80005b2 <__udivmoddi4+0x152>
 8000512:	1bcb      	subs	r3, r1, r7
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	fa1f f887 	uxth.w	r8, r7
 800051c:	2101      	movs	r1, #1
 800051e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000522:	0c25      	lsrs	r5, r4, #16
 8000524:	fb0e 331c 	mls	r3, lr, ip, r3
 8000528:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800052c:	fb08 f30c 	mul.w	r3, r8, ip
 8000530:	42ab      	cmp	r3, r5
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0xe4>
 8000534:	197d      	adds	r5, r7, r5
 8000536:	f10c 30ff 	add.w	r0, ip, #4294967295
 800053a:	d202      	bcs.n	8000542 <__udivmoddi4+0xe2>
 800053c:	42ab      	cmp	r3, r5
 800053e:	f200 80e7 	bhi.w	8000710 <__udivmoddi4+0x2b0>
 8000542:	4684      	mov	ip, r0
 8000544:	1aed      	subs	r5, r5, r3
 8000546:	b2a3      	uxth	r3, r4
 8000548:	fbb5 f0fe 	udiv	r0, r5, lr
 800054c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000550:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000554:	fb08 f800 	mul.w	r8, r8, r0
 8000558:	45a0      	cmp	r8, r4
 800055a:	d907      	bls.n	800056c <__udivmoddi4+0x10c>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000562:	d202      	bcs.n	800056a <__udivmoddi4+0x10a>
 8000564:	45a0      	cmp	r8, r4
 8000566:	f200 80d7 	bhi.w	8000718 <__udivmoddi4+0x2b8>
 800056a:	4618      	mov	r0, r3
 800056c:	eba4 0408 	sub.w	r4, r4, r8
 8000570:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000574:	e7c0      	b.n	80004f8 <__udivmoddi4+0x98>
 8000576:	428b      	cmp	r3, r1
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x12c>
 800057a:	2e00      	cmp	r6, #0
 800057c:	f000 80af 	beq.w	80006de <__udivmoddi4+0x27e>
 8000580:	2100      	movs	r1, #0
 8000582:	e9c6 0500 	strd	r0, r5, [r6]
 8000586:	4608      	mov	r0, r1
 8000588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058c:	fab3 f183 	clz	r1, r3
 8000590:	2900      	cmp	r1, #0
 8000592:	d14b      	bne.n	800062c <__udivmoddi4+0x1cc>
 8000594:	42ab      	cmp	r3, r5
 8000596:	d302      	bcc.n	800059e <__udivmoddi4+0x13e>
 8000598:	4282      	cmp	r2, r0
 800059a:	f200 80b7 	bhi.w	800070c <__udivmoddi4+0x2ac>
 800059e:	1a84      	subs	r4, r0, r2
 80005a0:	eb65 0303 	sbc.w	r3, r5, r3
 80005a4:	2001      	movs	r0, #1
 80005a6:	469e      	mov	lr, r3
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d0aa      	beq.n	8000502 <__udivmoddi4+0xa2>
 80005ac:	e9c6 4e00 	strd	r4, lr, [r6]
 80005b0:	e7a7      	b.n	8000502 <__udivmoddi4+0xa2>
 80005b2:	f1c2 0c20 	rsb	ip, r2, #32
 80005b6:	fa01 f302 	lsl.w	r3, r1, r2
 80005ba:	4097      	lsls	r7, r2
 80005bc:	fa20 f00c 	lsr.w	r0, r0, ip
 80005c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005c4:	fa21 fc0c 	lsr.w	ip, r1, ip
 80005c8:	4318      	orrs	r0, r3
 80005ca:	fbbc f1fe 	udiv	r1, ip, lr
 80005ce:	0c05      	lsrs	r5, r0, #16
 80005d0:	fb0e cc11 	mls	ip, lr, r1, ip
 80005d4:	fa1f f887 	uxth.w	r8, r7
 80005d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80005dc:	fb01 f308 	mul.w	r3, r1, r8
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	fa04 f402 	lsl.w	r4, r4, r2
 80005e6:	d909      	bls.n	80005fc <__udivmoddi4+0x19c>
 80005e8:	197d      	adds	r5, r7, r5
 80005ea:	f101 3cff 	add.w	ip, r1, #4294967295
 80005ee:	f080 808b 	bcs.w	8000708 <__udivmoddi4+0x2a8>
 80005f2:	42ab      	cmp	r3, r5
 80005f4:	f240 8088 	bls.w	8000708 <__udivmoddi4+0x2a8>
 80005f8:	3902      	subs	r1, #2
 80005fa:	443d      	add	r5, r7
 80005fc:	1aeb      	subs	r3, r5, r3
 80005fe:	b285      	uxth	r5, r0
 8000600:	fbb3 f0fe 	udiv	r0, r3, lr
 8000604:	fb0e 3310 	mls	r3, lr, r0, r3
 8000608:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800060c:	fb00 f308 	mul.w	r3, r0, r8
 8000610:	42ab      	cmp	r3, r5
 8000612:	d907      	bls.n	8000624 <__udivmoddi4+0x1c4>
 8000614:	197d      	adds	r5, r7, r5
 8000616:	f100 3cff 	add.w	ip, r0, #4294967295
 800061a:	d271      	bcs.n	8000700 <__udivmoddi4+0x2a0>
 800061c:	42ab      	cmp	r3, r5
 800061e:	d96f      	bls.n	8000700 <__udivmoddi4+0x2a0>
 8000620:	3802      	subs	r0, #2
 8000622:	443d      	add	r5, r7
 8000624:	1aeb      	subs	r3, r5, r3
 8000626:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800062a:	e778      	b.n	800051e <__udivmoddi4+0xbe>
 800062c:	f1c1 0c20 	rsb	ip, r1, #32
 8000630:	408b      	lsls	r3, r1
 8000632:	fa22 f70c 	lsr.w	r7, r2, ip
 8000636:	431f      	orrs	r7, r3
 8000638:	fa20 f40c 	lsr.w	r4, r0, ip
 800063c:	fa05 f301 	lsl.w	r3, r5, r1
 8000640:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000644:	fa25 f50c 	lsr.w	r5, r5, ip
 8000648:	431c      	orrs	r4, r3
 800064a:	0c23      	lsrs	r3, r4, #16
 800064c:	fbb5 f9fe 	udiv	r9, r5, lr
 8000650:	fa1f f887 	uxth.w	r8, r7
 8000654:	fb0e 5519 	mls	r5, lr, r9, r5
 8000658:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800065c:	fb09 fa08 	mul.w	sl, r9, r8
 8000660:	45aa      	cmp	sl, r5
 8000662:	fa02 f201 	lsl.w	r2, r2, r1
 8000666:	fa00 f301 	lsl.w	r3, r0, r1
 800066a:	d908      	bls.n	800067e <__udivmoddi4+0x21e>
 800066c:	197d      	adds	r5, r7, r5
 800066e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000672:	d247      	bcs.n	8000704 <__udivmoddi4+0x2a4>
 8000674:	45aa      	cmp	sl, r5
 8000676:	d945      	bls.n	8000704 <__udivmoddi4+0x2a4>
 8000678:	f1a9 0902 	sub.w	r9, r9, #2
 800067c:	443d      	add	r5, r7
 800067e:	eba5 050a 	sub.w	r5, r5, sl
 8000682:	b2a4      	uxth	r4, r4
 8000684:	fbb5 f0fe 	udiv	r0, r5, lr
 8000688:	fb0e 5510 	mls	r5, lr, r0, r5
 800068c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000690:	fb00 f808 	mul.w	r8, r0, r8
 8000694:	45a0      	cmp	r8, r4
 8000696:	d907      	bls.n	80006a8 <__udivmoddi4+0x248>
 8000698:	193c      	adds	r4, r7, r4
 800069a:	f100 35ff 	add.w	r5, r0, #4294967295
 800069e:	d22d      	bcs.n	80006fc <__udivmoddi4+0x29c>
 80006a0:	45a0      	cmp	r8, r4
 80006a2:	d92b      	bls.n	80006fc <__udivmoddi4+0x29c>
 80006a4:	3802      	subs	r0, #2
 80006a6:	443c      	add	r4, r7
 80006a8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006ac:	eba4 0408 	sub.w	r4, r4, r8
 80006b0:	fba0 8902 	umull	r8, r9, r0, r2
 80006b4:	454c      	cmp	r4, r9
 80006b6:	46c6      	mov	lr, r8
 80006b8:	464d      	mov	r5, r9
 80006ba:	d319      	bcc.n	80006f0 <__udivmoddi4+0x290>
 80006bc:	d016      	beq.n	80006ec <__udivmoddi4+0x28c>
 80006be:	b15e      	cbz	r6, 80006d8 <__udivmoddi4+0x278>
 80006c0:	ebb3 020e 	subs.w	r2, r3, lr
 80006c4:	eb64 0405 	sbc.w	r4, r4, r5
 80006c8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80006cc:	40ca      	lsrs	r2, r1
 80006ce:	ea4c 0202 	orr.w	r2, ip, r2
 80006d2:	40cc      	lsrs	r4, r1
 80006d4:	e9c6 2400 	strd	r2, r4, [r6]
 80006d8:	2100      	movs	r1, #0
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	4631      	mov	r1, r6
 80006e0:	4630      	mov	r0, r6
 80006e2:	e70e      	b.n	8000502 <__udivmoddi4+0xa2>
 80006e4:	46ac      	mov	ip, r5
 80006e6:	e6ed      	b.n	80004c4 <__udivmoddi4+0x64>
 80006e8:	4618      	mov	r0, r3
 80006ea:	e701      	b.n	80004f0 <__udivmoddi4+0x90>
 80006ec:	4543      	cmp	r3, r8
 80006ee:	d2e6      	bcs.n	80006be <__udivmoddi4+0x25e>
 80006f0:	ebb8 0e02 	subs.w	lr, r8, r2
 80006f4:	eb69 0507 	sbc.w	r5, r9, r7
 80006f8:	3801      	subs	r0, #1
 80006fa:	e7e0      	b.n	80006be <__udivmoddi4+0x25e>
 80006fc:	4628      	mov	r0, r5
 80006fe:	e7d3      	b.n	80006a8 <__udivmoddi4+0x248>
 8000700:	4660      	mov	r0, ip
 8000702:	e78f      	b.n	8000624 <__udivmoddi4+0x1c4>
 8000704:	4681      	mov	r9, r0
 8000706:	e7ba      	b.n	800067e <__udivmoddi4+0x21e>
 8000708:	4661      	mov	r1, ip
 800070a:	e777      	b.n	80005fc <__udivmoddi4+0x19c>
 800070c:	4608      	mov	r0, r1
 800070e:	e74b      	b.n	80005a8 <__udivmoddi4+0x148>
 8000710:	f1ac 0c02 	sub.w	ip, ip, #2
 8000714:	443d      	add	r5, r7
 8000716:	e715      	b.n	8000544 <__udivmoddi4+0xe4>
 8000718:	3802      	subs	r0, #2
 800071a:	443c      	add	r4, r7
 800071c:	e726      	b.n	800056c <__udivmoddi4+0x10c>
 800071e:	bf00      	nop

08000720 <__aeabi_idiv0>:
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
	...

08000730 <_pal_lld_setgroupmode.constprop.0>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8000730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8000734:	2200      	movs	r2, #0

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000736:	4c21      	ldr	r4, [pc, #132]	; (80007bc <_pal_lld_setgroupmode.constprop.0+0x8c>)
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000738:	2502      	movs	r5, #2
      altrmask = altr << ((bit & 7) * 4);
 800073a:	f04f 0807 	mov.w	r8, #7
      m4 = 15 << ((bit & 7) * 4);
 800073e:	f04f 0e0f 	mov.w	lr, #15
      m1 = 1 << bit;
 8000742:	f04f 0c01 	mov.w	ip, #1
      m2 = 3 << (bit * 2);
 8000746:	2703      	movs	r7, #3
 8000748:	e00f      	b.n	800076a <_pal_lld_setgroupmode.constprop.0+0x3a>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800074a:	6a21      	ldr	r1, [r4, #32]
 800074c:	ea21 0303 	bic.w	r3, r1, r3
 8000750:	ea43 0309 	orr.w	r3, r3, r9
 8000754:	6223      	str	r3, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	ea0a 0a03 	and.w	sl, sl, r3
 800075c:	ea4a 0305 	orr.w	r3, sl, r5
 8000760:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000762:	0840      	lsrs	r0, r0, #1
 8000764:	d028      	beq.n	80007b8 <_pal_lld_setgroupmode.constprop.0+0x88>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8000766:	00ad      	lsls	r5, r5, #2
    bit++;
 8000768:	3201      	adds	r2, #1
      m2 = 3 << (bit * 2);
 800076a:	0051      	lsls	r1, r2, #1
      altrmask = altr << ((bit & 7) * 4);
 800076c:	f002 0307 	and.w	r3, r2, #7
 8000770:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
 8000772:	fa07 f101 	lsl.w	r1, r7, r1
    if ((mask & 1) != 0) {
 8000776:	f010 0f01 	tst.w	r0, #1
      altrmask = altr << ((bit & 7) * 4);
 800077a:	fa08 f903 	lsl.w	r9, r8, r3
      m1 = 1 << bit;
 800077e:	fa0c f602 	lsl.w	r6, ip, r2
      m4 = 15 << ((bit & 7) * 4);
 8000782:	fa0e f303 	lsl.w	r3, lr, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000786:	ea6f 0a01 	mvn.w	sl, r1
    if ((mask & 1) != 0) {
 800078a:	d0ea      	beq.n	8000762 <_pal_lld_setgroupmode.constprop.0+0x32>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800078c:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8000790:	ea2b 0606 	bic.w	r6, fp, r6
 8000794:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000796:	68a6      	ldr	r6, [r4, #8]
 8000798:	ea26 0601 	bic.w	r6, r6, r1
 800079c:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800079e:	68e6      	ldr	r6, [r4, #12]
        if (bit < 8)
 80007a0:	2a07      	cmp	r2, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80007a2:	ea26 0101 	bic.w	r1, r6, r1
 80007a6:	60e1      	str	r1, [r4, #12]
        if (bit < 8)
 80007a8:	d9cf      	bls.n	800074a <_pal_lld_setgroupmode.constprop.0+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80007aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80007ac:	ea21 0303 	bic.w	r3, r1, r3
 80007b0:	ea43 0309 	orr.w	r3, r3, r9
 80007b4:	6263      	str	r3, [r4, #36]	; 0x24
 80007b6:	e7ce      	b.n	8000756 <_pal_lld_setgroupmode.constprop.0+0x26>
  }
}
 80007b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007bc:	40020000 	.word	0x40020000

080007c0 <chMtxTryLock.constprop.0>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80007c0:	2320      	movs	r3, #32
 80007c2:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <chMtxTryLock.constprop.0+0x2c>)
 80007c8:	689a      	ldr	r2, [r3, #8]
 80007ca:	b122      	cbz	r2, 80007d6 <chMtxTryLock.constprop.0+0x16>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 80007cc:	2000      	movs	r0, #0
 80007ce:	2300      	movs	r3, #0
 80007d0:	f383 8811 	msr	BASEPRI, r3
}
 80007d4:	4770      	bx	lr

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 80007d6:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <chMtxTryLock.constprop.0+0x30>)
 80007d8:	6992      	ldr	r2, [r2, #24]
 80007da:	609a      	str	r2, [r3, #8]
  mp->next = currp->mtxlist;
 80007dc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80007de:	60d9      	str	r1, [r3, #12]
  currp->mtxlist = mp;
 80007e0:	6393      	str	r3, [r2, #56]	; 0x38
 80007e2:	2001      	movs	r0, #1
 80007e4:	2300      	movs	r3, #0
 80007e6:	f383 8811 	msr	BASEPRI, r3
}
 80007ea:	4770      	bx	lr
 80007ec:	2000082c 	.word	0x2000082c
 80007f0:	2000142c 	.word	0x2000142c
	...

08000800 <chEvtGetAndClearEvents.constprop.0>:
 8000800:	2320      	movs	r3, #32
 8000802:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <chEvtGetAndClearEvents.constprop.0+0x18>)
 8000808:	699a      	ldr	r2, [r3, #24]
  currp->epending &= ~events;
 800080a:	2300      	movs	r3, #0
  m = currp->epending & events;
 800080c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
 800080e:	6353      	str	r3, [r2, #52]	; 0x34
 8000810:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  m = chEvtGetAndClearEventsI(events);
  chSysUnlock();

  return m;
}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	2000142c 	.word	0x2000142c
 800081c:	00000000 	.word	0x00000000

08000820 <_test_assert_time_window.constprop.0>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
                (systime_t)((systime_t)end - (systime_t)start));
 8000824:	1a09      	subs	r1, r1, r0
 8000826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8000828:	1a18      	subs	r0, r3, r0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 800082a:	4288      	cmp	r0, r1
 800082c:	d201      	bcs.n	8000832 <_test_assert_time_window.constprop.0+0x12>
    return _test_fail(msg);
  return false;
 800082e:	2000      	movs	r0, #0
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
 8000830:	4770      	bx	lr
  test_failure_message = msg;
 8000832:	4904      	ldr	r1, [pc, #16]	; (8000844 <_test_assert_time_window.constprop.0+0x24>)
  test_local_fail      = true;
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <_test_assert_time_window.constprop.0+0x28>)
  test_global_fail     = true;
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <_test_assert_time_window.constprop.0+0x2c>)
  test_failure_message = msg;
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <_test_assert_time_window.constprop.0+0x30>)
 800083a:	6008      	str	r0, [r1, #0]
  test_local_fail      = true;
 800083c:	2001      	movs	r0, #1
 800083e:	7010      	strb	r0, [r2, #0]
  test_global_fail     = true;
 8000840:	7018      	strb	r0, [r3, #0]
 8000842:	4770      	bx	lr
 8000844:	20001e74 	.word	0x20001e74
 8000848:	20001f18 	.word	0x20001f18
 800084c:	20001e78 	.word	0x20001e78
 8000850:	08009828 	.word	0x08009828
	...

08000860 <_ZN10chibios_rt10_thd_startEPv>:
   * chibios_rt::BaseStaticThread                                           *
   *------------------------------------------------------------------------*/

  void _thd_start(void *arg) {

    ((BaseThread *)arg)->main();
 8000860:	6803      	ldr	r3, [r0, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4718      	bx	r3
 8000866:	bf00      	nop
	...

08000870 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000870:	b430      	push	{r4, r5}
 8000872:	2320      	movs	r3, #32
 8000874:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000878:	4c0b      	ldr	r4, [pc, #44]	; (80008a8 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800087a:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 800087e:	4249      	negs	r1, r1
 8000880:	1a28      	subs	r0, r5, r0
 8000882:	4008      	ands	r0, r1
  prev = p - offset;
 8000884:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000886:	429a      	cmp	r2, r3
 8000888:	d307      	bcc.n	800089a <chCoreAllocFromTop+0x2a>
 800088a:	4295      	cmp	r5, r2
 800088c:	d305      	bcc.n	800089a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800088e:	6062      	str	r2, [r4, #4]
 8000890:	2300      	movs	r3, #0
 8000892:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000896:	bc30      	pop	{r4, r5}
 8000898:	4770      	bx	lr
    return NULL;
 800089a:	2000      	movs	r0, #0
 800089c:	2300      	movs	r3, #0
 800089e:	f383 8811 	msr	BASEPRI, r3
}
 80008a2:	bc30      	pop	{r4, r5}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	200015c8 	.word	0x200015c8
 80008ac:	00000000 	.word	0x00000000

080008b0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80008b0:	4a02      	ldr	r2, [pc, #8]	; (80008bc <notify2+0xc>)
 80008b2:	68d3      	ldr	r3, [r2, #12]
 80008b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80008b8:	60d3      	str	r3, [r2, #12]
}
 80008ba:	4770      	bx	lr
 80008bc:	40004400 	.word	0x40004400

080008c0 <oslib_test_008_001_setup>:
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <oslib_test_008_001_setup+0x30>)
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 80008c2:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <oslib_test_008_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80008c4:	1dd9      	adds	r1, r3, #7
 80008c6:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80008ca:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80008cc:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 * - [8.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_008_001_setup(void) {
 80008d0:	b410      	push	{r4}
  heapp->provider = NULL;
 80008d2:	2000      	movs	r0, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80008d4:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80008d8:	08db      	lsrs	r3, r3, #3
 80008da:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 80008dc:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 80008de:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 80008e0:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 80008e4:	6010      	str	r0, [r2, #0]
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 80008e6:	bc10      	pop	{r4}
  H_PAGES(&heapp->header) = 0;
 80008e8:	6090      	str	r0, [r2, #8]
  mp->owner = NULL;
 80008ea:	6150      	str	r0, [r2, #20]
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20001e98 	.word	0x20001e98
 80008f4:	20001e7c 	.word	0x20001e7c
	...

08000900 <oslib_test_007_003_setup>:
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <oslib_test_007_003_setup+0x18>)
 8000902:	2200      	movs	r2, #0
  mp->object_size = size;
 8000904:	2104      	movs	r1, #4
 8000906:	e9c3 3300 	strd	r3, r3, [r3]
  mp->align = align;
 800090a:	e9c3 1104 	strd	r1, r1, [r3, #16]
  mp->next = NULL;
 800090e:	60da      	str	r2, [r3, #12]
  mp->provider = provider;
 8000910:	619a      	str	r2, [r3, #24]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 8000912:	609a      	str	r2, [r3, #8]
 * .
 */

static void oslib_test_007_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000810 	.word	0x20000810
 800091c:	00000000 	.word	0x00000000

08000920 <oslib_test_007_002_setup>:
 8000920:	f7ff bfee 	b.w	8000900 <oslib_test_007_003_setup>
	...

08000930 <null_provider>:
}
 8000930:	2000      	movs	r0, #0
 8000932:	4770      	bx	lr
	...

08000940 <oslib_test_007_001_setup>:
  mp->next = NULL;
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <oslib_test_007_001_setup+0x10>)
 8000942:	2100      	movs	r1, #0
  mp->object_size = size;
 8000944:	2204      	movs	r2, #4
  mp->align = align;
 8000946:	e9c3 2201 	strd	r2, r2, [r3, #4]
  mp->next = NULL;
 800094a:	6019      	str	r1, [r3, #0]
  mp->provider = provider;
 800094c:	60d9      	str	r1, [r3, #12]
}
 800094e:	4770      	bx	lr
 8000950:	20000874 	.word	0x20000874
	...

08000960 <__ch_delegate_fn0>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn0(va_list *argsp) {
  delegate_fn0_t fn0 = (delegate_fn0_t)va_arg(*argsp, delegate_fn0_t);
 8000960:	6803      	ldr	r3, [r0, #0]
 8000962:	1d1a      	adds	r2, r3, #4
 8000964:	6002      	str	r2, [r0, #0]
  return fn0();
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4718      	bx	r3
 800096a:	bf00      	nop
 800096c:	0000      	movs	r0, r0
	...

08000970 <__ch_delegate_fn1>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn1(va_list *argsp) {
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000970:	6801      	ldr	r1, [r0, #0]
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000972:	4603      	mov	r3, r0
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000974:	460a      	mov	r2, r1
 8000976:	1d08      	adds	r0, r1, #4
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000978:	b410      	push	{r4}
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 800097a:	6018      	str	r0, [r3, #0]
 800097c:	f852 4b08 	ldr.w	r4, [r2], #8
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  return fn1(p1);
 8000980:	6848      	ldr	r0, [r1, #4]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8000982:	601a      	str	r2, [r3, #0]
  return fn1(p1);
 8000984:	4623      	mov	r3, r4
}
 8000986:	bc10      	pop	{r4}
  return fn1(p1);
 8000988:	4718      	bx	r3
 800098a:	bf00      	nop
 800098c:	0000      	movs	r0, r0
	...

08000990 <__ch_delegate_fn2>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn2(va_list *argsp) {
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000990:	6802      	ldr	r2, [r0, #0]
msg_t __ch_delegate_fn2(va_list *argsp) {
 8000992:	b430      	push	{r4, r5}
 8000994:	4603      	mov	r3, r0
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000996:	1d11      	adds	r1, r2, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8000998:	6850      	ldr	r0, [r2, #4]
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 800099a:	6019      	str	r1, [r3, #0]
 800099c:	6814      	ldr	r4, [r2, #0]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
  return fn2(p1, p2);
 800099e:	6891      	ldr	r1, [r2, #8]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80009a0:	f102 050c 	add.w	r5, r2, #12
 80009a4:	601d      	str	r5, [r3, #0]
  return fn2(p1, p2);
 80009a6:	4623      	mov	r3, r4
}
 80009a8:	bc30      	pop	{r4, r5}
  return fn2(p1, p2);
 80009aa:	4718      	bx	r3
 80009ac:	0000      	movs	r0, r0
	...

080009b0 <__ch_delegate_fn3>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn3(va_list *argsp) {
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 80009b0:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn3(va_list *argsp) {
 80009b2:	b470      	push	{r4, r5, r6}
 80009b4:	4604      	mov	r4, r0
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 80009b6:	1d1a      	adds	r2, r3, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80009b8:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 80009bc:	6022      	str	r2, [r4, #0]
 80009be:	681d      	ldr	r5, [r3, #0]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
  return fn3(p1, p2, p3);
 80009c0:	68da      	ldr	r2, [r3, #12]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 80009c2:	f103 0610 	add.w	r6, r3, #16
 80009c6:	6026      	str	r6, [r4, #0]
  return fn3(p1, p2, p3);
 80009c8:	462b      	mov	r3, r5
}
 80009ca:	bc70      	pop	{r4, r5, r6}
  return fn3(p1, p2, p3);
 80009cc:	4718      	bx	r3
 80009ce:	bf00      	nop

080009d0 <__ch_delegate_fn4>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn4(va_list *argsp) {
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80009d0:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn4(va_list *argsp) {
 80009d2:	b470      	push	{r4, r5, r6}
 80009d4:	4604      	mov	r4, r0
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80009d6:	1d1d      	adds	r5, r3, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80009d8:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 80009dc:	68da      	ldr	r2, [r3, #12]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80009de:	6025      	str	r5, [r4, #0]
 80009e0:	681d      	ldr	r5, [r3, #0]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 80009e2:	f103 0614 	add.w	r6, r3, #20
  return fn4(p1, p2, p3, p4);
 80009e6:	46ac      	mov	ip, r5
 80009e8:	691b      	ldr	r3, [r3, #16]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 80009ea:	6026      	str	r6, [r4, #0]
}
 80009ec:	bc70      	pop	{r4, r5, r6}
  return fn4(p1, p2, p3, p4);
 80009ee:	4760      	bx	ip

080009f0 <oslib_test_003_002_setup>:
 * - [3.2.1] Reading while pipe is empty.
 * - [3.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_003_002_setup(void) {
 80009f0:	b430      	push	{r4, r5}
 */
void chPipeObjectInit(pipe_t *pp, uint8_t *buf, size_t n) {

  chDbgCheck((pp != NULL) && (buf != NULL) && (n > (size_t)0));

  pp->buffer = buf;
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <oslib_test_003_002_setup+0x40>)
 80009f4:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <oslib_test_003_002_setup+0x44>)
 80009f6:	601a      	str	r2, [r3, #0]
  pp->rdptr  = buf;
  pp->wrptr  = buf;
  pp->top    = &buf[n];
 80009f8:	f102 0508 	add.w	r5, r2, #8
  tqp->next = (thread_t *)tqp;
 80009fc:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8000a00:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8000a04:	f103 0030 	add.w	r0, r3, #48	; 0x30
  pp->cnt    = (size_t)0;
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f103 0140 	add.w	r1, r3, #64	; 0x40
  tqp->prev = (thread_t *)tqp;
 8000a0e:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->top    = &buf[n];
 8000a12:	605d      	str	r5, [r3, #4]
 8000a14:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}
 8000a18:	bc30      	pop	{r4, r5}
 8000a1a:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->reset  = false;
  pp->wtr    = NULL;
  pp->rtr    = NULL;
 8000a1e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 8000a22:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8000a24:	751a      	strb	r2, [r3, #20]
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
 8000a28:	639a      	str	r2, [r3, #56]	; 0x38
 8000a2a:	649a      	str	r2, [r3, #72]	; 0x48
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	2000088c 	.word	0x2000088c
 8000a34:	200013d8 	.word	0x200013d8
	...

08000a40 <oslib_test_003_001_setup>:
static void oslib_test_003_001_setup(void) {
 8000a40:	b430      	push	{r4, r5}
  pp->buffer = buf;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <oslib_test_003_001_setup+0x40>)
 8000a44:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <oslib_test_003_001_setup+0x44>)
 8000a46:	601a      	str	r2, [r3, #0]
  pp->top    = &buf[n];
 8000a48:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 8000a4c:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8000a50:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8000a54:	f103 0030 	add.w	r0, r3, #48	; 0x30
  pp->cnt    = (size_t)0;
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f103 0140 	add.w	r1, r3, #64	; 0x40
  tqp->prev = (thread_t *)tqp;
 8000a5e:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->top    = &buf[n];
 8000a62:	605d      	str	r5, [r3, #4]
 8000a64:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
}
 8000a68:	bc30      	pop	{r4, r5}
 8000a6a:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->rtr    = NULL;
 8000a6e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 8000a72:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8000a74:	751a      	strb	r2, [r3, #20]
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
 8000a78:	639a      	str	r2, [r3, #56]	; 0x38
 8000a7a:	649a      	str	r2, [r3, #72]	; 0x48
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	2000088c 	.word	0x2000088c
 8000a84:	200013d8 	.word	0x200013d8
	...

08000a90 <oslib_test_002_003_setup>:
 *   active state.
 * - [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_002_003_setup(void) {
 8000a90:	b430      	push	{r4, r5}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <oslib_test_002_003_setup+0x2c>)
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <oslib_test_002_003_setup+0x30>)
 8000a96:	601a      	str	r2, [r3, #0]
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
 8000a98:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 8000a9c:	f103 0418 	add.w	r4, r3, #24
  mbp->cnt    = (size_t)0;
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f103 0020 	add.w	r0, r3, #32
  tqp->prev = (thread_t *)tqp;
 8000aa6:	e9c3 4406 	strd	r4, r4, [r3, #24]
  mbp->top    = &buf[n];
 8000aaa:	605d      	str	r5, [r3, #4]
  mbp->wrptr  = buf;
 8000aac:	e9c3 2202 	strd	r2, r2, [r3, #8]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 8000ab0:	bc30      	pop	{r4, r5}
 8000ab2:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->cnt    = (size_t)0;
 8000ab6:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 8000ab8:	7519      	strb	r1, [r3, #20]
 8000aba:	4770      	bx	lr
 8000abc:	2000084c 	.word	0x2000084c
 8000ac0:	200016b0 	.word	0x200016b0
	...

08000ad0 <oslib_test_002_002_setup>:
 8000ad0:	f7ff bfde 	b.w	8000a90 <oslib_test_002_003_setup>
	...

08000ae0 <oslib_test_002_001_setup>:
 8000ae0:	f7ff bfd6 	b.w	8000a90 <oslib_test_002_003_setup>
	...

08000af0 <rt_test_011_011_setup>:
  tqp->next = (thread_t *)tqp;
 8000af0:	4b02      	ldr	r3, [pc, #8]	; (8000afc <rt_test_011_011_setup+0xc>)
 8000af2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000af4:	e9c3 3300 	strd	r3, r3, [r3]
 8000af8:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_011_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 8000afa:	4770      	bx	lr
 8000afc:	200016e0 	.word	0x200016e0

08000b00 <rt_test_011_010_setup>:
  tqp->next = (thread_t *)tqp;
 8000b00:	4b02      	ldr	r3, [pc, #8]	; (8000b0c <rt_test_011_010_setup+0xc>)
 8000b02:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 8000b04:	e9c3 3300 	strd	r3, r3, [r3]
 8000b08:	609a      	str	r2, [r3, #8]
}
 8000b0a:	4770      	bx	lr
 8000b0c:	200017fc 	.word	0x200017fc

08000b10 <tmo>:
static void tmo(void *param) {(void)param;}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
	...

08000b20 <rt_test_011_007_setup>:
  tqp->next = (thread_t *)tqp;
 8000b20:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <rt_test_011_007_setup+0xc>)
 8000b22:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000b24:	e9c3 3300 	strd	r3, r3, [r3]
 8000b28:	609a      	str	r2, [r3, #8]
}
 8000b2a:	4770      	bx	lr
 8000b2c:	200017fc 	.word	0x200017fc

08000b30 <rt_test_010_002_setup>:
  mp->next = NULL;
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <rt_test_010_002_setup+0x14>)
 8000b32:	2200      	movs	r2, #0
  mp->object_size = size;
 8000b34:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
 8000b38:	2104      	movs	r1, #4
 8000b3a:	e9c3 0101 	strd	r0, r1, [r3, #4]
  mp->next = NULL;
 8000b3e:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 8000b40:	60da      	str	r2, [r3, #12]
 * .
 */

static void rt_test_010_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 8000b42:	4770      	bx	lr
 8000b44:	200016c0 	.word	0x200016c0
	...

08000b50 <rt_test_010_001_setup>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <rt_test_010_001_setup+0x30>)
  heapp->provider = NULL;
 8000b52:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <rt_test_010_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000b54:	1dd9      	adds	r1, r3, #7
 8000b56:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 8000b5a:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000b5c:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
static void rt_test_010_001_setup(void) {
 8000b60:	b410      	push	{r4}
  heapp->provider = NULL;
 8000b62:	2000      	movs	r0, #0
  tqp->next = (thread_t *)tqp;
 8000b64:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000b68:	08db      	lsrs	r3, r3, #3
 8000b6a:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 8000b6c:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 8000b6e:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8000b70:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8000b74:	6010      	str	r0, [r2, #0]
}
 8000b76:	bc10      	pop	{r4}
  H_PAGES(&heapp->header) = 0;
 8000b78:	6090      	str	r0, [r2, #8]
 8000b7a:	6150      	str	r0, [r2, #20]
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20001808 	.word	0x20001808
 8000b84:	20001630 	.word	0x20001630
	...

08000b90 <rt_test_009_007_setup>:
 *   has been emptied.
 * - [9.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_009_007_setup(void) {
 8000b90:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000b92:	f7ff fe35 	bl	8000800 <chEvtGetAndClearEvents.constprop.0>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000b96:	4a02      	ldr	r2, [pc, #8]	; (8000ba0 <rt_test_009_007_setup+0x10>)
 8000b98:	4b02      	ldr	r3, [pc, #8]	; (8000ba4 <rt_test_009_007_setup+0x14>)
 8000b9a:	6012      	str	r2, [r2, #0]
 8000b9c:	601b      	str	r3, [r3, #0]
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 8000b9e:	bd08      	pop	{r3, pc}
 8000ba0:	20000808 	.word	0x20000808
 8000ba4:	2000080c 	.word	0x2000080c
	...

08000bb0 <rt_test_009_006_setup>:
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000bb0:	f7ff be26 	b.w	8000800 <chEvtGetAndClearEvents.constprop.0>
	...

08000bc0 <rt_test_009_005_setup>:
 8000bc0:	f7ff bff6 	b.w	8000bb0 <rt_test_009_006_setup>
	...

08000bd0 <rt_test_009_004_setup>:
 8000bd0:	f7ff bfee 	b.w	8000bb0 <rt_test_009_006_setup>
	...

08000be0 <rt_test_009_003_setup>:
 8000be0:	f7ff bfe6 	b.w	8000bb0 <rt_test_009_006_setup>
	...

08000bf0 <rt_test_009_002_setup>:
 8000bf0:	f7ff bfde 	b.w	8000bb0 <rt_test_009_006_setup>
	...

08000c00 <rt_test_007_009_setup>:
  tqp->next = (thread_t *)tqp;
 8000c00:	4906      	ldr	r1, [pc, #24]	; (8000c1c <rt_test_007_009_setup+0x1c>)
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <rt_test_007_009_setup+0x20>)
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <rt_test_007_009_setup+0x24>)
 8000c06:	6009      	str	r1, [r1, #0]
 8000c08:	2000      	movs	r0, #0
  tqp->prev = (thread_t *)tqp;
 8000c0a:	e9c2 2200 	strd	r2, r2, [r2]
 8000c0e:	e9c3 3300 	strd	r3, r3, [r3]
 8000c12:	6049      	str	r1, [r1, #4]
 8000c14:	6090      	str	r0, [r2, #8]
 8000c16:	6098      	str	r0, [r3, #8]

static void rt_test_007_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000800 	.word	0x20000800
 8000c20:	2000082c 	.word	0x2000082c
 8000c24:	2000083c 	.word	0x2000083c
	...

08000c30 <rt_test_007_008_setup>:
  tqp->next = (thread_t *)tqp;
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <rt_test_007_008_setup+0x14>)
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <rt_test_007_008_setup+0x18>)
 8000c34:	6012      	str	r2, [r2, #0]
 8000c36:	2100      	movs	r1, #0
  tqp->prev = (thread_t *)tqp;
 8000c38:	e9c3 3300 	strd	r3, r3, [r3]
 8000c3c:	6052      	str	r2, [r2, #4]
 8000c3e:	6099      	str	r1, [r3, #8]
}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000800 	.word	0x20000800
 8000c48:	2000082c 	.word	0x2000082c
 8000c4c:	00000000 	.word	0x00000000

08000c50 <rt_test_007_007_setup>:
 8000c50:	f7ff bfee 	b.w	8000c30 <rt_test_007_008_setup>
	...

08000c60 <rt_test_007_005_setup>:
  tqp->next = (thread_t *)tqp;
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <rt_test_007_005_setup+0xc>)
 8000c62:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000c64:	e9c3 3300 	strd	r3, r3, [r3]
 8000c68:	609a      	str	r2, [r3, #8]
}
 8000c6a:	4770      	bx	lr
 8000c6c:	2000082c 	.word	0x2000082c

08000c70 <rt_test_007_004_setup>:
  tqp->next = (thread_t *)tqp;
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <rt_test_007_004_setup+0x14>)
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <rt_test_007_004_setup+0x18>)
 8000c74:	6012      	str	r2, [r2, #0]
 8000c76:	2100      	movs	r1, #0
 8000c78:	e9c2 2101 	strd	r2, r1, [r2, #4]
  tqp->prev = (thread_t *)tqp;
 8000c7c:	e9c3 3300 	strd	r3, r3, [r3]
 8000c80:	6099      	str	r1, [r3, #8]
}
 8000c82:	4770      	bx	lr
 8000c84:	2000082c 	.word	0x2000082c
 8000c88:	2000083c 	.word	0x2000083c
 8000c8c:	00000000 	.word	0x00000000

08000c90 <rt_test_007_001_setup>:
 8000c90:	f7ff bfe6 	b.w	8000c60 <rt_test_007_005_setup>
	...

08000ca0 <rt_test_006_005_setup>:
  tqp->next = (thread_t *)tqp;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	; (8000cac <rt_test_006_005_setup+0xc>)
 8000ca2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000ca4:	e9c3 3300 	strd	r3, r3, [r3]
 8000ca8:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_006_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 8000caa:	4770      	bx	lr
 8000cac:	200017f0 	.word	0x200017f0

08000cb0 <rt_test_006_004_setup>:
 8000cb0:	f7ff bff6 	b.w	8000ca0 <rt_test_006_005_setup>
	...

08000cc0 <rt_test_006_003_setup>:
 8000cc0:	f7ff bfee 	b.w	8000ca0 <rt_test_006_005_setup>
	...

08000cd0 <rt_test_006_002_setup>:
 8000cd0:	f7ff bfe6 	b.w	8000ca0 <rt_test_006_005_setup>
	...

08000ce0 <rt_test_006_001_setup>:
  tqp->next = (thread_t *)tqp;
 8000ce0:	4b02      	ldr	r3, [pc, #8]	; (8000cec <rt_test_006_001_setup+0xc>)
 8000ce2:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 8000ce4:	e9c3 3300 	strd	r3, r3, [r3]
 8000ce8:	609a      	str	r2, [r3, #8]
}
 8000cea:	4770      	bx	lr
 8000cec:	200017f0 	.word	0x200017f0

08000cf0 <rt_test_005_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_005_001_setup(void) {
  tr1 = NULL;
 8000cf0:	4b01      	ldr	r3, [pc, #4]	; (8000cf8 <rt_test_005_001_setup+0x8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
}
 8000cf6:	4770      	bx	lr
 8000cf8:	20001f48 	.word	0x20001f48
 8000cfc:	00000000 	.word	0x00000000

08000d00 <_test_assert>:
  if (!condition)
 8000d00:	b108      	cbz	r0, 8000d06 <_test_assert+0x6>
  return false;
 8000d02:	2000      	movs	r0, #0
}
 8000d04:	4770      	bx	lr
bool _test_assert(bool condition, const char *msg) {
 8000d06:	b410      	push	{r4}
  test_global_fail     = true;
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <_test_assert+0x1c>)
  test_local_fail      = true;
 8000d0a:	4c05      	ldr	r4, [pc, #20]	; (8000d20 <_test_assert+0x20>)
  test_failure_message = msg;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <_test_assert+0x24>)
  test_local_fail      = true;
 8000d0e:	2001      	movs	r0, #1
 8000d10:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000d12:	7010      	strb	r0, [r2, #0]
}
 8000d14:	bc10      	pop	{r4}
  test_failure_message = msg;
 8000d16:	6019      	str	r1, [r3, #0]
}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20001e78 	.word	0x20001e78
 8000d20:	20001f18 	.word	0x20001f18
 8000d24:	20001e74 	.word	0x20001e74
	...

08000d30 <rt_test_003_002_execute>:
    test_assert(b == false, "in range");
  }
  test_end_step(2);

  /* [3.2.3] Checking boundaries for start > end.*/
  test_set_step(3);
 8000d30:	4b01      	ldr	r3, [pc, #4]	; (8000d38 <rt_test_003_002_execute+0x8>)
 8000d32:	2203      	movs	r2, #3
 8000d34:	601a      	str	r2, [r3, #0]
    test_assert(b == true, "not in range");
    b = chTimeIsInRangeX((systime_t)10, (systime_t)100, (systime_t)10);
    test_assert(b == false, "in range");
  }
  test_end_step(3);
}
 8000d36:	4770      	bx	lr
 8000d38:	20001f1c 	.word	0x20001f1c
 8000d3c:	00000000 	.word	0x00000000

08000d40 <rt_test_003_001_execute>:
  test_set_step(1);
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <rt_test_003_001_execute+0x14>)
 8000d42:	2101      	movs	r1, #1
 8000d44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d48:	6019      	str	r1, [r3, #0]
 8000d4a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000d4c:	6a53      	ldr	r3, [r2, #36]	; 0x24
    while (time == chVTGetSystemTimeX()) {
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	d0fc      	beq.n	8000d4c <rt_test_003_001_execute+0xc>
}
 8000d52:	4770      	bx	lr
 8000d54:	20001f1c 	.word	0x20001f1c
	...

08000d60 <rt_test_002_003_execute>:

static void rt_test_002_003_execute(void) {

  /* [2.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <rt_test_002_003_execute+0x20>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	2320      	movs	r3, #32
 8000d68:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000d6c:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6e:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d70:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000d74:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d76:	2300      	movs	r3, #0
 8000d78:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000d7c:	b662      	cpsie	i
    chSysDisable();
    chSysSuspend();
    chSysEnable();
  }
  test_end_step(1);
}
 8000d7e:	4770      	bx	lr
 8000d80:	20001f1c 	.word	0x20001f1c
	...

08000d90 <test_terminate_threads>:
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <test_terminate_threads+0x30>)
void test_terminate_threads(void) {
 8000d92:	b430      	push	{r4, r5}
 8000d94:	f103 0014 	add.w	r0, r3, #20
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d98:	2520      	movs	r5, #32
 8000d9a:	2400      	movs	r4, #0
    if (threads[i])
 8000d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000da0:	b14a      	cbz	r2, 8000db6 <test_terminate_threads+0x26>
 8000da2:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 8000da6:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8000daa:	f041 0104 	orr.w	r1, r1, #4
 8000dae:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 8000db2:	f384 8811 	msr	BASEPRI, r4
  for (i = 0; i < MAX_THREADS; i++)
 8000db6:	4283      	cmp	r3, r0
 8000db8:	d1f0      	bne.n	8000d9c <test_terminate_threads+0xc>
      chThdTerminate(threads[i]);
}
 8000dba:	bc30      	pop	{r4, r5}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20001f34 	.word	0x20001f34
	...

08000dd0 <test_printn.part.0>:

  if (!n)
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
 8000dd0:	b310      	cbz	r0, 8000e18 <test_printn.part.0+0x48>
void test_printn(uint32_t n) {
 8000dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd4:	b085      	sub	sp, #20
    p = buf;
 8000dd6:	466c      	mov	r4, sp
      *p++ = (n % 10) + '0', n /= 10;
 8000dd8:	4f10      	ldr	r7, [pc, #64]	; (8000e1c <test_printn.part.0+0x4c>)
    p = buf;
 8000dda:	4622      	mov	r2, r4
      *p++ = (n % 10) + '0', n /= 10;
 8000ddc:	fba7 1300 	umull	r1, r3, r7, r0
 8000de0:	08db      	lsrs	r3, r3, #3
 8000de2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000de6:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 8000dea:	4606      	mov	r6, r0
 8000dec:	3130      	adds	r1, #48	; 0x30
 8000dee:	b2c9      	uxtb	r1, r1
    while (n)
 8000df0:	2e09      	cmp	r6, #9
 8000df2:	4615      	mov	r5, r2
      *p++ = (n % 10) + '0', n /= 10;
 8000df4:	4618      	mov	r0, r3
 8000df6:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 8000dfa:	d8ef      	bhi.n	8000ddc <test_printn.part.0+0xc>
    while (p > buf)
 8000dfc:	42a2      	cmp	r2, r4
 8000dfe:	d909      	bls.n	8000e14 <test_printn.part.0+0x44>
 8000e00:	4e07      	ldr	r6, [pc, #28]	; (8000e20 <test_printn.part.0+0x50>)
 8000e02:	e001      	b.n	8000e08 <test_printn.part.0+0x38>
 8000e04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
      streamPut(test_chp, *--p);
 8000e08:	6830      	ldr	r0, [r6, #0]
 8000e0a:	6803      	ldr	r3, [r0, #0]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	4798      	blx	r3
    while (p > buf)
 8000e10:	42ac      	cmp	r4, r5
 8000e12:	d1f7      	bne.n	8000e04 <test_printn.part.0+0x34>
  }
}
 8000e14:	b005      	add	sp, #20
 8000e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	cccccccd 	.word	0xcccccccd
 8000e20:	20001e70 	.word	0x20001e70
	...

08000e30 <test_printn>:
  if (!n)
 8000e30:	b928      	cbnz	r0, 8000e3e <test_printn+0xe>
    streamPut(test_chp, '0');
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <test_printn+0x14>)
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	6803      	ldr	r3, [r0, #0]
 8000e38:	2130      	movs	r1, #48	; 0x30
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	4718      	bx	r3
 8000e3e:	f7ff bfc7 	b.w	8000dd0 <test_printn.part.0>
 8000e42:	bf00      	nop
 8000e44:	20001e70 	.word	0x20001e70
	...

08000e50 <test_emit_token>:
 8000e50:	2320      	movs	r3, #32
 8000e52:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_CFG_MAX_TOKENS])
 8000e56:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <test_emit_token+0x20>)
 8000e58:	4906      	ldr	r1, [pc, #24]	; (8000e74 <test_emit_token+0x24>)
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d202      	bcs.n	8000e66 <test_emit_token+0x16>
    *test_tokp++ = token;
 8000e60:	1c59      	adds	r1, r3, #1
 8000e62:	7018      	strb	r0, [r3, #0]
 8000e64:	6011      	str	r1, [r2, #0]
 8000e66:	2300      	movs	r3, #0
 8000e68:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20001f30 	.word	0x20001f30
 8000e74:	20001f30 	.word	0x20001f30
	...

08000e80 <obj_write>:
  return false;
}

static bool obj_write(objects_cache_t *ocp,
                      oc_object_t *objp,
                      bool async) {
 8000e80:	b508      	push	{r3, lr}
  (void)ocp;
  (void)async;

  test_emit_token('A' + objp->obj_key);
 8000e82:	6948      	ldr	r0, [r1, #20]
 8000e84:	3041      	adds	r0, #65	; 0x41
 8000e86:	b2c0      	uxtb	r0, r0
 8000e88:	f7ff ffe2 	bl	8000e50 <test_emit_token>

  return false;
}
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	bd08      	pop	{r3, pc}

08000e90 <dis_func0>:
 * Shared code.
 ****************************************************************************/

static bool exit_flag;

static int dis_func0(void) {
 8000e90:	b508      	push	{r3, lr}

  test_emit_token('0');
 8000e92:	2030      	movs	r0, #48	; 0x30
 8000e94:	f7ff ffdc 	bl	8000e50 <test_emit_token>

  return (msg_t)0x55AA;
}
 8000e98:	f245 50aa 	movw	r0, #21930	; 0x55aa
 8000e9c:	bd08      	pop	{r3, pc}
 8000e9e:	bf00      	nop

08000ea0 <dis_func1>:

static msg_t dis_func1(msg_t a) {
 8000ea0:	b510      	push	{r4, lr}
 8000ea2:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000ea4:	b2c0      	uxtb	r0, r0
 8000ea6:	f7ff ffd3 	bl	8000e50 <test_emit_token>

  return (msg_t)a;
}
 8000eaa:	4620      	mov	r0, r4
 8000eac:	bd10      	pop	{r4, pc}
 8000eae:	bf00      	nop

08000eb0 <dis_func2>:

static msg_t dis_func2(msg_t a, msg_t b) {
 8000eb0:	b538      	push	{r3, r4, r5, lr}
 8000eb2:	460d      	mov	r5, r1
 8000eb4:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000eb6:	b2c0      	uxtb	r0, r0
 8000eb8:	f7ff ffca 	bl	8000e50 <test_emit_token>
  test_emit_token((char)b);
 8000ebc:	b2e8      	uxtb	r0, r5
 8000ebe:	f7ff ffc7 	bl	8000e50 <test_emit_token>

  return (msg_t)a;
}
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	bd38      	pop	{r3, r4, r5, pc}
 8000ec6:	bf00      	nop
	...

08000ed0 <dis_func3>:

static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	460e      	mov	r6, r1
 8000ed4:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000ed6:	b2c0      	uxtb	r0, r0
static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8000ed8:	4615      	mov	r5, r2
  test_emit_token((char)a);
 8000eda:	f7ff ffb9 	bl	8000e50 <test_emit_token>
  test_emit_token((char)b);
 8000ede:	b2f0      	uxtb	r0, r6
 8000ee0:	f7ff ffb6 	bl	8000e50 <test_emit_token>
  test_emit_token((char)c);
 8000ee4:	b2e8      	uxtb	r0, r5
 8000ee6:	f7ff ffb3 	bl	8000e50 <test_emit_token>

  return (msg_t)a;
}
 8000eea:	4620      	mov	r0, r4
 8000eec:	bd70      	pop	{r4, r5, r6, pc}
 8000eee:	bf00      	nop

08000ef0 <dis_func4>:

static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8000ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef2:	460f      	mov	r7, r1
 8000ef4:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000ef6:	b2c0      	uxtb	r0, r0
static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8000ef8:	4616      	mov	r6, r2
 8000efa:	461d      	mov	r5, r3
  test_emit_token((char)a);
 8000efc:	f7ff ffa8 	bl	8000e50 <test_emit_token>
  test_emit_token((char)b);
 8000f00:	b2f8      	uxtb	r0, r7
 8000f02:	f7ff ffa5 	bl	8000e50 <test_emit_token>
  test_emit_token((char)c);
 8000f06:	b2f0      	uxtb	r0, r6
 8000f08:	f7ff ffa2 	bl	8000e50 <test_emit_token>
  test_emit_token((char)d);
 8000f0c:	b2e8      	uxtb	r0, r5
 8000f0e:	f7ff ff9f 	bl	8000e50 <test_emit_token>

  return (msg_t)a;
}
 8000f12:	4620      	mov	r0, r4
 8000f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f16:	bf00      	nop
	...

08000f20 <dis_func_end>:

static int dis_func_end(void) {
 8000f20:	b508      	push	{r3, lr}

  test_emit_token('Z');
 8000f22:	205a      	movs	r0, #90	; 0x5a
 8000f24:	f7ff ff94 	bl	8000e50 <test_emit_token>
  exit_flag = true;
 8000f28:	4b02      	ldr	r3, [pc, #8]	; (8000f34 <dis_func_end+0x14>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]

  return (msg_t)0xAA55;
}
 8000f2e:	f64a 2055 	movw	r0, #43605	; 0xaa55
 8000f32:	bd08      	pop	{r3, pc}
 8000f34:	200015ec 	.word	0x200015ec
	...

08000f40 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000f40:	2043      	movs	r0, #67	; 0x43
 8000f42:	f7ff bf85 	b.w	8000e50 <test_emit_token>
 8000f46:	bf00      	nop
	...

08000f50 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000f50:	2042      	movs	r0, #66	; 0x42
 8000f52:	f7ff bf7d 	b.w	8000e50 <test_emit_token>
 8000f56:	bf00      	nop
	...

08000f60 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000f60:	2041      	movs	r0, #65	; 0x41
 8000f62:	f7ff bf75 	b.w	8000e50 <test_emit_token>
 8000f66:	bf00      	nop
	...

08000f70 <thread>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8000f70:	7800      	ldrb	r0, [r0, #0]
 8000f72:	f7ff bf6d 	b.w	8000e50 <test_emit_token>
 8000f76:	bf00      	nop
	...

08000f80 <dyn_thread1>:
 8000f80:	f7ff bff6 	b.w	8000f70 <thread>
	...

08000f90 <test_println>:
void test_println(const char *msgp) {
 8000f90:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 8000f92:	7801      	ldrb	r1, [r0, #0]
 8000f94:	b189      	cbz	r1, 8000fba <test_println+0x2a>
 8000f96:	4d0a      	ldr	r5, [pc, #40]	; (8000fc0 <test_println+0x30>)
 8000f98:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 8000f9a:	6828      	ldr	r0, [r5, #0]
 8000f9c:	6803      	ldr	r3, [r0, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	4798      	blx	r3
  while (*msgp)
 8000fa2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000fa6:	2900      	cmp	r1, #0
 8000fa8:	d1f7      	bne.n	8000f9a <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000faa:	6828      	ldr	r0, [r5, #0]
 8000fac:	4905      	ldr	r1, [pc, #20]	; (8000fc4 <test_println+0x34>)
 8000fae:	6803      	ldr	r3, [r0, #0]
}
 8000fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	4718      	bx	r3
 8000fba:	4d01      	ldr	r5, [pc, #4]	; (8000fc0 <test_println+0x30>)
 8000fbc:	e7f5      	b.n	8000faa <test_println+0x1a>
 8000fbe:	bf00      	nop
 8000fc0:	20001e70 	.word	0x20001e70
 8000fc4:	0800983c 	.word	0x0800983c
	...

08000fd0 <test_print>:
  while (*msgp)
 8000fd0:	7801      	ldrb	r1, [r0, #0]
 8000fd2:	b159      	cbz	r1, 8000fec <test_print+0x1c>
void test_print(const char *msgp) {
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	4d06      	ldr	r5, [pc, #24]	; (8000ff0 <test_print+0x20>)
 8000fd8:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 8000fda:	6828      	ldr	r0, [r5, #0]
 8000fdc:	6803      	ldr	r3, [r0, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	4798      	blx	r3
  while (*msgp)
 8000fe2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000fe6:	2900      	cmp	r1, #0
 8000fe8:	d1f7      	bne.n	8000fda <test_print+0xa>
}
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20001e70 	.word	0x20001e70
	...

08001000 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 8001000:	b4f0      	push	{r4, r5, r6, r7}
  while (cp < test_tokp) {
 8001002:	4e0d      	ldr	r6, [pc, #52]	; (8001038 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 8001004:	4f0d      	ldr	r7, [pc, #52]	; (800103c <_test_assert_sequence+0x3c>)
  while (cp < test_tokp) {
 8001006:	6835      	ldr	r5, [r6, #0]
  char *cp = test_tokens_buffer;
 8001008:	463b      	mov	r3, r7
 800100a:	e005      	b.n	8001018 <_test_assert_sequence+0x18>
    if (*cp++ != *expected++)
 800100c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8001010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001014:	4294      	cmp	r4, r2
 8001016:	d106      	bne.n	8001026 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 8001018:	429d      	cmp	r5, r3
 800101a:	d8f7      	bhi.n	800100c <_test_assert_sequence+0xc>
  if (*expected)
 800101c:	7800      	ldrb	r0, [r0, #0]
 800101e:	b910      	cbnz	r0, 8001026 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 8001020:	6037      	str	r7, [r6, #0]
}
 8001022:	bcf0      	pop	{r4, r5, r6, r7}
 8001024:	4770      	bx	lr
  test_local_fail      = true;
 8001026:	4c06      	ldr	r4, [pc, #24]	; (8001040 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 800102c:	2001      	movs	r0, #1
 800102e:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8001030:	7010      	strb	r0, [r2, #0]
}
 8001032:	bcf0      	pop	{r4, r5, r6, r7}
  test_failure_message = msg;
 8001034:	6019      	str	r1, [r3, #0]
}
 8001036:	4770      	bx	lr
 8001038:	20001f30 	.word	0x20001f30
 800103c:	20001f20 	.word	0x20001f20
 8001040:	20001f18 	.word	0x20001f18
 8001044:	20001e78 	.word	0x20001e78
 8001048:	20001e74 	.word	0x20001e74
 800104c:	00000000 	.word	0x00000000

08001050 <rt_test_009_002_execute>:
  test_set_step(1);
 8001050:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <rt_test_009_002_execute+0x40>)
static void rt_test_009_002_execute(void) {
 8001052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8001054:	2601      	movs	r6, #1
 8001056:	4f0f      	ldr	r7, [pc, #60]	; (8001094 <rt_test_009_002_execute+0x44>)
 8001058:	6016      	str	r6, [r2, #0]
 800105a:	2507      	movs	r5, #7
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 800105c:	2400      	movs	r4, #0
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800105e:	fa25 f304 	lsr.w	r3, r5, r4
 8001062:	f013 0f01 	tst.w	r3, #1
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8001066:	fa06 f204 	lsl.w	r2, r6, r4
      handlers[eid](eid);
 800106a:	4620      	mov	r0, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800106c:	d00d      	beq.n	800108a <rt_test_009_002_execute+0x3a>
      handlers[eid](eid);
 800106e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 8001072:	ea25 0502 	bic.w	r5, r5, r2
    }
    eid++;
 8001076:	3401      	adds	r4, #1
      handlers[eid](eid);
 8001078:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 800107a:	2d00      	cmp	r5, #0
 800107c:	d1ef      	bne.n	800105e <rt_test_009_002_execute+0xe>
}
 800107e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8001082:	4905      	ldr	r1, [pc, #20]	; (8001098 <rt_test_009_002_execute+0x48>)
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <rt_test_009_002_execute+0x4c>)
 8001086:	f7ff bfbb 	b.w	8001000 <_test_assert_sequence>
    eid++;
 800108a:	3401      	adds	r4, #1
 800108c:	e7e7      	b.n	800105e <rt_test_009_002_execute+0xe>
 800108e:	bf00      	nop
 8001090:	20001f1c 	.word	0x20001f1c
 8001094:	0800b7ec 	.word	0x0800b7ec
 8001098:	08009840 	.word	0x08009840
 800109c:	08009854 	.word	0x08009854

080010a0 <print_line>:
static void print_line(void) {
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	4d08      	ldr	r5, [pc, #32]	; (80010c4 <print_line+0x24>)
 80010a4:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '-');
 80010a6:	6828      	ldr	r0, [r5, #0]
 80010a8:	6803      	ldr	r3, [r0, #0]
 80010aa:	212d      	movs	r1, #45	; 0x2d
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 80010b0:	3c01      	subs	r4, #1
 80010b2:	d1f8      	bne.n	80010a6 <print_line+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80010b4:	6828      	ldr	r0, [r5, #0]
 80010b6:	4904      	ldr	r1, [pc, #16]	; (80010c8 <print_line+0x28>)
 80010b8:	6803      	ldr	r3, [r0, #0]
}
 80010ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2202      	movs	r2, #2
 80010c2:	4718      	bx	r3
 80010c4:	20001e70 	.word	0x20001e70
 80010c8:	0800983c 	.word	0x0800983c
 80010cc:	00000000 	.word	0x00000000

080010d0 <_port_irq_epilogue>:
 80010d0:	2320      	movs	r3, #32
 80010d2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <_port_irq_epilogue+0x3c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80010de:	d102      	bne.n	80010e6 <_port_irq_epilogue+0x16>
 80010e0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80010e4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80010e6:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 80010ea:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80010ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010f0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80010f2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80010f6:	4a06      	ldr	r2, [pc, #24]	; (8001110 <_port_irq_epilogue+0x40>)
 80010f8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 80010fa:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 80010fc:	6889      	ldr	r1, [r1, #8]
 80010fe:	6892      	ldr	r2, [r2, #8]
 8001100:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001102:	bf8c      	ite	hi
 8001104:	4a03      	ldrhi	r2, [pc, #12]	; (8001114 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001106:	4a04      	ldrls	r2, [pc, #16]	; (8001118 <_port_irq_epilogue+0x48>)
 8001108:	619a      	str	r2, [r3, #24]
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	2000142c 	.word	0x2000142c
 8001114:	080002f3 	.word	0x080002f3
 8001118:	080002f6 	.word	0x080002f6
 800111c:	00000000 	.word	0x00000000

08001120 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8001120:	4a08      	ldr	r2, [pc, #32]	; (8001144 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8001122:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8001124:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8001128:	4249      	negs	r1, r1
 800112a:	1a20      	subs	r0, r4, r0
 800112c:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800112e:	4298      	cmp	r0, r3
 8001130:	d304      	bcc.n	800113c <chCoreAllocAlignedI+0x1c>
 8001132:	4284      	cmp	r4, r0
 8001134:	d302      	bcc.n	800113c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8001136:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8001138:	6050      	str	r0, [r2, #4]
 800113a:	4770      	bx	lr
    return NULL;
 800113c:	2000      	movs	r0, #0
 800113e:	bc10      	pop	{r4}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	200015c8 	.word	0x200015c8
	...

08001150 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8001150:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001152:	2220      	movs	r2, #32
 8001154:	4603      	mov	r3, r0
 8001156:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 800115a:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 800115c:	b128      	cbz	r0, 800116a <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
 800115e:	6802      	ldr	r2, [r0, #0]
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	2300      	movs	r3, #0
 8001164:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8001168:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	2a00      	cmp	r2, #0
 800116e:	d0f8      	beq.n	8001162 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, mp->align);
 8001170:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8001174:	4790      	blx	r2
 8001176:	2300      	movs	r3, #0
 8001178:	f383 8811 	msr	BASEPRI, r3
}
 800117c:	bd08      	pop	{r3, pc}
 800117e:	bf00      	nop

08001180 <oslib_test_007_001_execute>:
static void oslib_test_007_001_execute(void) {
 8001180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8001184:	4e3b      	ldr	r6, [pc, #236]	; (8001274 <oslib_test_007_001_execute+0xf4>)
 8001186:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <oslib_test_007_001_execute+0xf8>)
 8001188:	4c3c      	ldr	r4, [pc, #240]	; (800127c <oslib_test_007_001_execute+0xfc>)
 800118a:	2201      	movs	r2, #1
 800118c:	6032      	str	r2, [r6, #0]
 800118e:	2520      	movs	r5, #32
 8001190:	2204      	movs	r2, #4
 8001192:	2000      	movs	r0, #0
 8001194:	f385 8811 	msr	BASEPRI, r5
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8001198:	6821      	ldr	r1, [r4, #0]
 800119a:	6019      	str	r1, [r3, #0]
  mp->next = php;
 800119c:	6023      	str	r3, [r4, #0]
 800119e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 80011a2:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 80011a4:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 80011a6:	440b      	add	r3, r1
  while (n != 0U) {
 80011a8:	d1f4      	bne.n	8001194 <oslib_test_007_001_execute+0x14>
  test_set_step(2);
 80011aa:	2302      	movs	r3, #2
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80011ac:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800127c <oslib_test_007_001_execute+0xfc>
 80011b0:	4f33      	ldr	r7, [pc, #204]	; (8001280 <oslib_test_007_001_execute+0x100>)
  test_set_step(2);
 80011b2:	6033      	str	r3, [r6, #0]
 80011b4:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80011b6:	4640      	mov	r0, r8
 80011b8:	f7ff ffca 	bl	8001150 <chPoolAlloc>
 80011bc:	3800      	subs	r0, #0
 80011be:	bf18      	it	ne
 80011c0:	2001      	movne	r0, #1
 80011c2:	4639      	mov	r1, r7
 80011c4:	f7ff fd9c 	bl	8000d00 <_test_assert>
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d150      	bne.n	800126e <oslib_test_007_001_execute+0xee>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80011cc:	3d01      	subs	r5, #1
 80011ce:	d1f2      	bne.n	80011b6 <oslib_test_007_001_execute+0x36>
  test_set_step(3);
 80011d0:	2303      	movs	r3, #3
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80011d2:	482a      	ldr	r0, [pc, #168]	; (800127c <oslib_test_007_001_execute+0xfc>)
  test_set_step(3);
 80011d4:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80011d6:	f7ff ffbb 	bl	8001150 <chPoolAlloc>
 80011da:	fab0 f080 	clz	r0, r0
 80011de:	4929      	ldr	r1, [pc, #164]	; (8001284 <oslib_test_007_001_execute+0x104>)
 80011e0:	0940      	lsrs	r0, r0, #5
 80011e2:	f7ff fd8d 	bl	8000d00 <_test_assert>
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d141      	bne.n	800126e <oslib_test_007_001_execute+0xee>
  test_set_step(4);
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <oslib_test_007_001_execute+0xf8>)
 80011ec:	2204      	movs	r2, #4
 80011ee:	f103 0710 	add.w	r7, r3, #16
 80011f2:	6032      	str	r2, [r6, #0]
 80011f4:	2020      	movs	r0, #32
      chPoolFree(&mp1, &objects[i]);
 80011f6:	461a      	mov	r2, r3
 80011f8:	f380 8811 	msr	BASEPRI, r0
  php->next = mp->next;
 80011fc:	6821      	ldr	r1, [r4, #0]
 80011fe:	f843 1b04 	str.w	r1, [r3], #4
  mp->next = php;
 8001202:	6022      	str	r2, [r4, #0]
 8001204:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8001208:	42bb      	cmp	r3, r7
 800120a:	d1f4      	bne.n	80011f6 <oslib_test_007_001_execute+0x76>
  test_set_step(5);
 800120c:	2305      	movs	r3, #5
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 800120e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800127c <oslib_test_007_001_execute+0xfc>
 8001212:	4f1b      	ldr	r7, [pc, #108]	; (8001280 <oslib_test_007_001_execute+0x100>)
  test_set_step(5);
 8001214:	6033      	str	r3, [r6, #0]
 8001216:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8001218:	4640      	mov	r0, r8
 800121a:	f7ff ff99 	bl	8001150 <chPoolAlloc>
 800121e:	3800      	subs	r0, #0
 8001220:	bf18      	it	ne
 8001222:	2001      	movne	r0, #1
 8001224:	4639      	mov	r1, r7
 8001226:	f7ff fd6b 	bl	8000d00 <_test_assert>
 800122a:	bb00      	cbnz	r0, 800126e <oslib_test_007_001_execute+0xee>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800122c:	3d01      	subs	r5, #1
 800122e:	d1f3      	bne.n	8001218 <oslib_test_007_001_execute+0x98>
  test_set_step(6);
 8001230:	2306      	movs	r3, #6
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001232:	4812      	ldr	r0, [pc, #72]	; (800127c <oslib_test_007_001_execute+0xfc>)
  test_set_step(6);
 8001234:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001236:	f7ff ff8b 	bl	8001150 <chPoolAlloc>
 800123a:	fab0 f080 	clz	r0, r0
 800123e:	4911      	ldr	r1, [pc, #68]	; (8001284 <oslib_test_007_001_execute+0x104>)
 8001240:	0940      	lsrs	r0, r0, #5
 8001242:	f7ff fd5d 	bl	8000d00 <_test_assert>
 8001246:	b990      	cbnz	r0, 800126e <oslib_test_007_001_execute+0xee>
  test_set_step(7);
 8001248:	2107      	movs	r1, #7
  mp->provider = provider;
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <oslib_test_007_001_execute+0x108>)
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <oslib_test_007_001_execute+0xfc>)
  test_set_step(7);
 800124e:	6031      	str	r1, [r6, #0]
  mp->object_size = size;
 8001250:	2304      	movs	r3, #4
  mp->align = align;
 8001252:	e9c4 3301 	strd	r3, r3, [r4, #4]
  mp->next = NULL;
 8001256:	6025      	str	r5, [r4, #0]
  mp->provider = provider;
 8001258:	60e2      	str	r2, [r4, #12]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800125a:	f7ff ff79 	bl	8001150 <chPoolAlloc>
 800125e:	fab0 f080 	clz	r0, r0
}
 8001262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8001266:	4909      	ldr	r1, [pc, #36]	; (800128c <oslib_test_007_001_execute+0x10c>)
 8001268:	0940      	lsrs	r0, r0, #5
 800126a:	f7ff bd49 	b.w	8000d00 <_test_assert>
}
 800126e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001272:	bf00      	nop
 8001274:	20001f1c 	.word	0x20001f1c
 8001278:	200017e0 	.word	0x200017e0
 800127c:	20000874 	.word	0x20000874
 8001280:	08009858 	.word	0x08009858
 8001284:	08009864 	.word	0x08009864
 8001288:	08000931 	.word	0x08000931
 800128c:	08009874 	.word	0x08009874

08001290 <chEvtAddEvents>:
 8001290:	2320      	movs	r3, #32
 8001292:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <chEvtAddEvents+0x18>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800129c:	4310      	orrs	r0, r2
 800129e:	6358      	str	r0, [r3, #52]	; 0x34
 80012a0:	2300      	movs	r3, #0
 80012a2:	f383 8811 	msr	BASEPRI, r3
}
 80012a6:	4770      	bx	lr
 80012a8:	2000142c 	.word	0x2000142c
 80012ac:	00000000 	.word	0x00000000

080012b0 <chEvtUnregister>:
 80012b0:	2320      	movs	r3, #32
 80012b2:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 80012b6:	4603      	mov	r3, r0
 80012b8:	e001      	b.n	80012be <chEvtUnregister+0xe>
    if (p->next == elp) {
 80012ba:	428b      	cmp	r3, r1
 80012bc:	d007      	beq.n	80012ce <chEvtUnregister+0x1e>
  while (p->next != (event_listener_t *)esp) {
 80012be:	461a      	mov	r2, r3
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4283      	cmp	r3, r0
 80012c4:	d1f9      	bne.n	80012ba <chEvtUnregister+0xa>
 80012c6:	2300      	movs	r3, #0
 80012c8:	f383 8811 	msr	BASEPRI, r3
}
 80012cc:	4770      	bx	lr
      p->next = elp->next;
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	2300      	movs	r3, #0
 80012d4:	f383 8811 	msr	BASEPRI, r3
}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	0000      	movs	r0, r0
	...

080012e0 <rt_test_009_001_execute>:
static void rt_test_009_001_execute(void) {
 80012e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  esp->next = (event_listener_t *)esp;
 80012e4:	4c36      	ldr	r4, [pc, #216]	; (80013c0 <rt_test_009_001_execute+0xe0>)
  test_set_step(2);
 80012e6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80013d0 <rt_test_009_001_execute+0xf0>
 80012ea:	6024      	str	r4, [r4, #0]
 80012ec:	2202      	movs	r2, #2
static void rt_test_009_001_execute(void) {
 80012ee:	b08b      	sub	sp, #44	; 0x2c
  test_set_step(2);
 80012f0:	f8c8 2000 	str.w	r2, [r8]
 80012f4:	2720      	movs	r7, #32
 80012f6:	f387 8811 	msr	BASEPRI, r7
  elp->listener = currp;
 80012fa:	4932      	ldr	r1, [pc, #200]	; (80013c4 <rt_test_009_001_execute+0xe4>)
  elp->next     = esp->next;
 80012fc:	6820      	ldr	r0, [r4, #0]
  elp->listener = currp;
 80012fe:	698b      	ldr	r3, [r1, #24]
  elp->next     = esp->next;
 8001300:	9005      	str	r0, [sp, #20]
  esp->next     = elp;
 8001302:	f10d 0914 	add.w	r9, sp, #20
  elp->events   = events;
 8001306:	2001      	movs	r0, #1
  elp->flags    = (eventflags_t)0;
 8001308:	2500      	movs	r5, #0
  elp->listener = currp;
 800130a:	9306      	str	r3, [sp, #24]
  elp->wflags   = wflags;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	e9cd 5308 	strd	r5, r3, [sp, #32]
  elp->events   = events;
 8001314:	9007      	str	r0, [sp, #28]
  esp->next     = elp;
 8001316:	f8c4 9000 	str.w	r9, [r4]
 800131a:	f385 8811 	msr	BASEPRI, r5
 800131e:	f387 8811 	msr	BASEPRI, r7
  elp->listener = currp;
 8001322:	6988      	ldr	r0, [r1, #24]
  elp->next     = esp->next;
 8001324:	6821      	ldr	r1, [r4, #0]
 8001326:	9100      	str	r1, [sp, #0]
  elp->events   = events;
 8001328:	e9cd 0201 	strd	r0, r2, [sp, #4]
  elp->wflags   = wflags;
 800132c:	e9cd 5303 	strd	r5, r3, [sp, #12]
  esp->next     = elp;
 8001330:	f8c4 d000 	str.w	sp, [r4]
 8001334:	f385 8811 	msr	BASEPRI, r5
 8001338:	f387 8811 	msr	BASEPRI, r7
  return (bool)(esp != (event_source_t *)esp->next);
 800133c:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 800133e:	4922      	ldr	r1, [pc, #136]	; (80013c8 <rt_test_009_001_execute+0xe8>)
 8001340:	1b00      	subs	r0, r0, r4
 8001342:	bf18      	it	ne
 8001344:	2001      	movne	r0, #1
 8001346:	f7ff fcdb 	bl	8000d00 <_test_assert>
 800134a:	b120      	cbz	r0, 8001356 <rt_test_009_001_execute+0x76>
 800134c:	f385 8811 	msr	BASEPRI, r5
}
 8001350:	b00b      	add	sp, #44	; 0x2c
 8001352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001356:	4606      	mov	r6, r0
 8001358:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 800135c:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
 800135e:	4649      	mov	r1, r9
 8001360:	4620      	mov	r0, r4
  test_set_step(3);
 8001362:	f8c8 3000 	str.w	r3, [r8]
    chEvtUnregister(&es1, &el1);
 8001366:	f7ff ffa3 	bl	80012b0 <chEvtUnregister>
 800136a:	f387 8811 	msr	BASEPRI, r7
 800136e:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001370:	4915      	ldr	r1, [pc, #84]	; (80013c8 <rt_test_009_001_execute+0xe8>)
 8001372:	1b00      	subs	r0, r0, r4
 8001374:	bf18      	it	ne
 8001376:	2001      	movne	r0, #1
 8001378:	f7ff fcc2 	bl	8000d00 <_test_assert>
 800137c:	4605      	mov	r5, r0
 800137e:	b120      	cbz	r0, 800138a <rt_test_009_001_execute+0xaa>
 8001380:	f386 8811 	msr	BASEPRI, r6
}
 8001384:	b00b      	add	sp, #44	; 0x2c
 8001386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800138a:	f380 8811 	msr	BASEPRI, r0
  test_set_step(4);
 800138e:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
 8001390:	4669      	mov	r1, sp
 8001392:	4620      	mov	r0, r4
  test_set_step(4);
 8001394:	f8c8 3000 	str.w	r3, [r8]
    chEvtUnregister(&es1, &el2);
 8001398:	f7ff ff8a 	bl	80012b0 <chEvtUnregister>
 800139c:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 80013a0:	6820      	ldr	r0, [r4, #0]
 80013a2:	490a      	ldr	r1, [pc, #40]	; (80013cc <rt_test_009_001_execute+0xec>)
 80013a4:	1b00      	subs	r0, r0, r4
 80013a6:	fab0 f080 	clz	r0, r0
 80013aa:	0940      	lsrs	r0, r0, #5
 80013ac:	f7ff fca8 	bl	8000d00 <_test_assert>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d1cb      	bne.n	800134c <rt_test_009_001_execute+0x6c>
 80013b4:	f380 8811 	msr	BASEPRI, r0
}
 80013b8:	b00b      	add	sp, #44	; 0x2c
 80013ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013be:	bf00      	nop
 80013c0:	20000808 	.word	0x20000808
 80013c4:	2000142c 	.word	0x2000142c
 80013c8:	08009890 	.word	0x08009890
 80013cc:	0800989c 	.word	0x0800989c
 80013d0:	20001f1c 	.word	0x20001f1c
	...

080013e0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <chTMStopMeasurementX+0x40>)
 80013e4:	6852      	ldr	r2, [r2, #4]
 80013e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  tmp->last = (now - tmp->last) - offset;
 80013e8:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80013ea:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 80013ec:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 80013ee:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 80013f2:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 80013f4:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 80013f6:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 80013f8:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 80013fa:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 80013fc:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 80013fe:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8001400:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8001402:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8001406:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8001408:	bf88      	it	hi
 800140a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800140c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800140e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8001412:	bf38      	it	cc
 8001414:	6003      	strcc	r3, [r0, #0]
}
 8001416:	bc30      	pop	{r4, r5}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e0001000 	.word	0xe0001000
 8001420:	2000142c 	.word	0x2000142c
	...

08001430 <chTMStartMeasurementX>:
 8001430:	4b01      	ldr	r3, [pc, #4]	; (8001438 <chTMStartMeasurementX+0x8>)
 8001432:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8001434:	6083      	str	r3, [r0, #8]
}
 8001436:	4770      	bx	lr
 8001438:	e0001000 	.word	0xe0001000
 800143c:	00000000 	.word	0x00000000

08001440 <chThdCreateSuspendedI>:
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8001440:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 8001442:	6841      	ldr	r1, [r0, #4]
  REG_INSERT(tp);
 8001444:	4a1a      	ldr	r2, [pc, #104]	; (80014b0 <chThdCreateSuspendedI+0x70>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8001446:	b4f0      	push	{r4, r5, r6, r7}
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001448:	e9d0 7504 	ldrd	r7, r5, [r0, #16]
  tp->state     = CH_STATE_WTSTART;
 800144c:	2602      	movs	r6, #2
  tp->wabase = tdp->wbase;
 800144e:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->refs      = (trefs_t)1;
 8001452:	2401      	movs	r4, #1
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001454:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001456:	e943 751b 	strd	r7, r5, [r3, #-108]	; 0x6c
  return _thread_init(tp, tdp->name, tdp->prio);
 800145a:	6805      	ldr	r5, [r0, #0]
 800145c:	68c0      	ldr	r0, [r0, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 800145e:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8001462:	f803 6c28 	strb.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8001466:	f803 4c26 	strb.w	r4, [r3, #-38]
  REG_INSERT(tp);
 800146a:	f843 2c38 	str.w	r2, [r3, #-56]
 800146e:	6954      	ldr	r4, [r2, #20]
  tp->prio      = prio;
 8001470:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 8001474:	f843 0c0c 	str.w	r0, [r3, #-12]
  tp->name      = name;
 8001478:	f843 5c30 	str.w	r5, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800147c:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 8001480:	4d0c      	ldr	r5, [pc, #48]	; (80014b4 <chThdCreateSuspendedI+0x74>)
 8001482:	f843 0c3c 	str.w	r0, [r3, #-60]
  tp->epending  = (eventmask_t)0;
 8001486:	e943 1105 	strd	r1, r1, [r3, #-20]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 800148a:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800148e:	f843 5c4c 	str.w	r5, [r3, #-76]
  queue_init(&tp->msgqueue);
 8001492:	f1a3 011c 	sub.w	r1, r3, #28
  list_init(&tp->waiting);
 8001496:	f1a3 0520 	sub.w	r5, r3, #32
  REG_INSERT(tp);
 800149a:	f843 4c34 	str.w	r4, [r3, #-52]
 800149e:	6120      	str	r0, [r4, #16]
 80014a0:	6150      	str	r0, [r2, #20]
  tqp->next = (thread_t *)tqp;
 80014a2:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 80014a6:	f843 1c18 	str.w	r1, [r3, #-24]
}
 80014aa:	bcf0      	pop	{r4, r5, r6, r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	2000142c 	.word	0x2000142c
 80014b4:	080002e1 	.word	0x080002e1
	...

080014c0 <wakeup>:
 80014c0:	2320      	movs	r3, #32
 80014c2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 80014c6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80014ca:	2b07      	cmp	r3, #7
 80014cc:	d80d      	bhi.n	80014ea <wakeup+0x2a>
 80014ce:	e8df f003 	tbb	[pc, r3]
 80014d2:	0c27      	.short	0x0c27
 80014d4:	0408230c 	.word	0x0408230c
 80014d8:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 80014da:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80014dc:	6893      	ldr	r3, [r2, #8]
 80014de:	3301      	adds	r3, #1
 80014e0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80014e2:	e9d0 3200 	ldrd	r3, r2, [r0]
 80014e6:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80014e8:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 80014ea:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 80014ec:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 80014ee:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->prio >= tp->prio);
 80014f2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 80014f6:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80014f8:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80014fc:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	428a      	cmp	r2, r1
 8001502:	d2fb      	bcs.n	80014fc <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	2100      	movs	r1, #0
 8001508:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800150c:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800150e:	6058      	str	r0, [r3, #4]
 8001510:	f381 8811 	msr	BASEPRI, r1
}
 8001514:	bc10      	pop	{r4}
 8001516:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8001518:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
    break;
 800151e:	e7e4      	b.n	80014ea <wakeup+0x2a>
 8001520:	2300      	movs	r3, #0
 8001522:	f383 8811 	msr	BASEPRI, r3
 8001526:	4770      	bx	lr
 8001528:	2000142c 	.word	0x2000142c
 800152c:	00000000 	.word	0x00000000

08001530 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8001530:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8001532:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 8001536:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800153a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	428a      	cmp	r2, r1
 8001540:	d2fb      	bcs.n	800153a <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001548:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800154a:	6058      	str	r0, [r3, #4]
}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	2000142c 	.word	0x2000142c
	...

08001560 <chThdDequeueNextI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001560:	4603      	mov	r3, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001562:	6800      	ldr	r0, [r0, #0]

  if (queue_notempty(tqp)) {
 8001564:	4283      	cmp	r3, r0
 8001566:	d006      	beq.n	8001576 <chThdDequeueNextI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 8001568:	6802      	ldr	r2, [r0, #0]
 800156a:	601a      	str	r2, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800156c:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800156e:	6053      	str	r3, [r2, #4]
 8001570:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001572:	f7ff bfdd 	b.w	8001530 <chSchReadyI>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001576:	4770      	bx	lr
	...

08001580 <chMBPostI.constprop.0>:

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <chMBPostI.constprop.0+0x40>)
 8001582:	7d1a      	ldrb	r2, [r3, #20]
 8001584:	b9ca      	cbnz	r2, 80015ba <chMBPostI.constprop.0+0x3a>
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8001586:	b570      	push	{r4, r5, r6, lr}
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8001588:	e9d3 6100 	ldrd	r6, r1, [r3]
 800158c:	691a      	ldr	r2, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800158e:	1b8c      	subs	r4, r1, r6
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8001590:	ebb2 0fa4 	cmp.w	r2, r4, asr #2
 8001594:	d00e      	beq.n	80015b4 <chMBPostI.constprop.0+0x34>
    *mbp->wrptr++ = msg;
 8001596:	689d      	ldr	r5, [r3, #8]
 8001598:	1d2c      	adds	r4, r5, #4
 800159a:	609c      	str	r4, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
 800159c:	42a1      	cmp	r1, r4
    *mbp->wrptr++ = msg;
 800159e:	6028      	str	r0, [r5, #0]
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;
 80015a0:	f102 0201 	add.w	r2, r2, #1

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80015a4:	4807      	ldr	r0, [pc, #28]	; (80015c4 <chMBPostI.constprop.0+0x44>)
      mbp->wrptr = mbp->buffer;
 80015a6:	bf98      	it	ls
 80015a8:	609e      	strls	r6, [r3, #8]
    mbp->cnt++;
 80015aa:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80015ac:	f7ff ffd8 	bl	8001560 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 80015b0:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 80015b2:	bd70      	pop	{r4, r5, r6, pc}
  return MSG_TIMEOUT;
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80015b8:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_RESET;
 80015ba:	f06f 0001 	mvn.w	r0, #1
}
 80015be:	4770      	bx	lr
 80015c0:	2000084c 	.word	0x2000084c
 80015c4:	2000086c 	.word	0x2000086c
	...

080015d0 <chMBPostAheadI.constprop.0>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 80015d0:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <chMBPostAheadI.constprop.0+0x40>)
 80015d4:	7d1a      	ldrb	r2, [r3, #20]
 80015d6:	b9ba      	cbnz	r2, 8001608 <chMBPostAheadI.constprop.0+0x38>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80015d8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015dc:	6919      	ldr	r1, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80015de:	1b2a      	subs	r2, r5, r4
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80015e0:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 80015e4:	d00d      	beq.n	8001602 <chMBPostAheadI.constprop.0+0x32>
    if (--mbp->rdptr < mbp->buffer) {
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	3a04      	subs	r2, #4
 80015ea:	4294      	cmp	r4, r2
      mbp->rdptr = mbp->top - 1;
 80015ec:	bf88      	it	hi
 80015ee:	1f2a      	subhi	r2, r5, #4
 80015f0:	60da      	str	r2, [r3, #12]
    }
    *mbp->rdptr = msg;
    mbp->cnt++;
 80015f2:	3101      	adds	r1, #1
    *mbp->rdptr = msg;
 80015f4:	6010      	str	r0, [r2, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80015f6:	4807      	ldr	r0, [pc, #28]	; (8001614 <chMBPostAheadI.constprop.0+0x44>)
    mbp->cnt++;
 80015f8:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80015fa:	f7ff ffb1 	bl	8001560 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 80015fe:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001600:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8001602:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001606:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8001608:	f06f 0001 	mvn.w	r0, #1
}
 800160c:	bd38      	pop	{r3, r4, r5, pc}
 800160e:	bf00      	nop
 8001610:	2000084c 	.word	0x2000084c
 8001614:	2000086c 	.word	0x2000086c
	...

08001620 <chMBFetchI.constprop.0>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8001620:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <chMBFetchI.constprop.0+0x40>)
 8001624:	7d1a      	ldrb	r2, [r3, #20]
 8001626:	b9ba      	cbnz	r2, 8001658 <chMBFetchI.constprop.0+0x38>
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8001628:	6919      	ldr	r1, [r3, #16]
 800162a:	b191      	cbz	r1, 8001652 <chMBFetchI.constprop.0+0x32>
    *msgp = *mbp->rdptr++;
 800162c:	68da      	ldr	r2, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
 800162e:	685c      	ldr	r4, [r3, #4]
    *msgp = *mbp->rdptr++;
 8001630:	6815      	ldr	r5, [r2, #0]
 8001632:	3204      	adds	r2, #4
    if (mbp->rdptr >= mbp->top) {
 8001634:	42a2      	cmp	r2, r4
    *msgp = *mbp->rdptr++;
 8001636:	60da      	str	r2, [r3, #12]
      mbp->rdptr = mbp->buffer;
    }
    mbp->cnt--;
 8001638:	f101 31ff 	add.w	r1, r1, #4294967295
    *msgp = *mbp->rdptr++;
 800163c:	6005      	str	r5, [r0, #0]
      mbp->rdptr = mbp->buffer;
 800163e:	bf28      	it	cs
 8001640:	681a      	ldrcs	r2, [r3, #0]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8001642:	4808      	ldr	r0, [pc, #32]	; (8001664 <chMBFetchI.constprop.0+0x44>)
      mbp->rdptr = mbp->buffer;
 8001644:	bf28      	it	cs
 8001646:	60da      	strcs	r2, [r3, #12]
    mbp->cnt--;
 8001648:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 800164a:	f7ff ff89 	bl	8001560 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 800164e:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001650:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8001652:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001656:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8001658:	f06f 0001 	mvn.w	r0, #1
}
 800165c:	bd38      	pop	{r3, r4, r5, pc}
 800165e:	bf00      	nop
 8001660:	2000084c 	.word	0x2000084c
 8001664:	20000864 	.word	0x20000864
	...

08001670 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001670:	b538      	push	{r3, r4, r5, lr}
 8001672:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001674:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 8001676:	4284      	cmp	r4, r0
 8001678:	d00a      	beq.n	8001690 <chThdDequeueAllI.constprop.0+0x20>
  tp->u.rdymsg = msg;
 800167a:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 800167e:	6803      	ldr	r3, [r0, #0]
 8001680:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001682:	605c      	str	r4, [r3, #4]
 8001684:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001686:	f7ff ff53 	bl	8001530 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800168a:	6820      	ldr	r0, [r4, #0]
 800168c:	42a0      	cmp	r0, r4
 800168e:	d1f6      	bne.n	800167e <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001690:	bd38      	pop	{r3, r4, r5, pc}
 8001692:	bf00      	nop
	...

080016a0 <chCondSignalI.constprop.0>:
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <chCondSignalI.constprop.0+0x18>)
 80016a2:	6818      	ldr	r0, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 80016a4:	4298      	cmp	r0, r3
 80016a6:	d006      	beq.n	80016b6 <chCondSignalI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 80016a8:	6802      	ldr	r2, [r0, #0]
 80016aa:	601a      	str	r2, [r3, #0]
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 80016ac:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 80016ae:	6053      	str	r3, [r2, #4]
 80016b0:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80016b2:	f7ff bf3d 	b.w	8001530 <chSchReadyI>
  }
}
 80016b6:	4770      	bx	lr
 80016b8:	20000800 	.word	0x20000800
 80016bc:	00000000 	.word	0x00000000

080016c0 <chEvtSignalI>:
  tp->epending |= events;
 80016c0:	6b42      	ldr	r2, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80016c2:	f890 3020 	ldrb.w	r3, [r0, #32]
  tp->epending |= events;
 80016c6:	4311      	orrs	r1, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 80016c8:	2b0a      	cmp	r3, #10
  tp->epending |= events;
 80016ca:	6341      	str	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80016cc:	d009      	beq.n	80016e2 <chEvtSignalI+0x22>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80016ce:	2b0b      	cmp	r3, #11
 80016d0:	d000      	beq.n	80016d4 <chEvtSignalI+0x14>
}
 80016d2:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80016d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80016d6:	438b      	bics	r3, r1
 80016d8:	d1fb      	bne.n	80016d2 <chEvtSignalI+0x12>
    tp->u.rdymsg = MSG_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80016de:	f7ff bf27 	b.w	8001530 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80016e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80016e4:	4219      	tst	r1, r3
 80016e6:	d1f8      	bne.n	80016da <chEvtSignalI+0x1a>
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	0000      	movs	r0, r0
	...

080016f0 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80016f0:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 80016f2:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 80016f4:	42a0      	cmp	r0, r4
 80016f6:	d00f      	beq.n	8001718 <chEvtBroadcastFlagsI+0x28>
 80016f8:	4606      	mov	r6, r0
 80016fa:	460d      	mov	r5, r1
    elp->flags |= flags;
 80016fc:	68e3      	ldr	r3, [r4, #12]
 80016fe:	432b      	orrs	r3, r5
 8001700:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001702:	b115      	cbz	r5, 800170a <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8001704:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001706:	421d      	tst	r5, r3
 8001708:	d003      	beq.n	8001712 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 800170a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800170e:	f7ff ffd7 	bl	80016c0 <chEvtSignalI>
    elp = elp->next;
 8001712:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001714:	42a6      	cmp	r6, r4
 8001716:	d1f1      	bne.n	80016fc <chEvtBroadcastFlagsI+0xc>
}
 8001718:	bd70      	pop	{r4, r5, r6, pc}
 800171a:	bf00      	nop
 800171c:	0000      	movs	r0, r0
	...

08001720 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <chMtxUnlockS+0x48>)
void chMtxUnlockS(mutex_t *mp) {
 8001722:	4601      	mov	r1, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001724:	6800      	ldr	r0, [r0, #0]
 8001726:	b430      	push	{r4, r5}
  thread_t *ctp = currp;
 8001728:	699d      	ldr	r5, [r3, #24]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 800172a:	68cb      	ldr	r3, [r1, #12]
 800172c:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800172e:	4288      	cmp	r0, r1
 8001730:	d016      	beq.n	8001760 <chMtxUnlockS+0x40>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8001732:	6bec      	ldr	r4, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8001734:	b14b      	cbz	r3, 800174a <chMtxUnlockS+0x2a>
 8001736:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001738:	4293      	cmp	r3, r2
 800173a:	d003      	beq.n	8001744 <chMtxUnlockS+0x24>
 800173c:	6892      	ldr	r2, [r2, #8]
 800173e:	4294      	cmp	r4, r2
 8001740:	bf38      	it	cc
 8001742:	4614      	movcc	r4, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8001744:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f5      	bne.n	8001736 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 800174a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800174c:	6803      	ldr	r3, [r0, #0]
      ctp->prio = newprio;
 800174e:	60ac      	str	r4, [r5, #8]
 8001750:	600b      	str	r3, [r1, #0]
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8001752:	bc30      	pop	{r4, r5}
  tqp->next->queue.prev = (thread_t *)tqp;
 8001754:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 8001756:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 800175a:	6381      	str	r1, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 800175c:	f7ff bee8 	b.w	8001530 <chSchReadyI>
      mp->owner = NULL;
 8001760:	2300      	movs	r3, #0
}
 8001762:	bc30      	pop	{r4, r5}
      mp->owner = NULL;
 8001764:	6083      	str	r3, [r0, #8]
}
 8001766:	4770      	bx	lr
 8001768:	2000142c 	.word	0x2000142c
 800176c:	00000000 	.word	0x00000000

08001770 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8001770:	6883      	ldr	r3, [r0, #8]
 8001772:	3301      	adds	r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	6083      	str	r3, [r0, #8]
 8001778:	dd00      	ble.n	800177c <chSemSignalI+0xc>
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 800177a:	4770      	bx	lr
  thread_t *tp = tqp->next;
 800177c:	6803      	ldr	r3, [r0, #0]
  tqp->next             = tp->queue.next;
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	6002      	str	r2, [r0, #0]
    tp->u.rdymsg = MSG_OK;
 8001782:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8001784:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 8001786:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 8001788:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800178a:	f7ff bed1 	b.w	8001530 <chSchReadyI>
 800178e:	bf00      	nop

08001790 <chCacheReleaseObjectI>:
 * @param[in] objp      pointer to the @p oc_object_t structure
 *
 * @iclass
 */
void chCacheReleaseObjectI(objects_cache_t *ocp,
                           oc_object_t *objp) {
 8001790:	b538      	push	{r3, r4, r5, lr}
  chDbgAssert(chSemGetCounterI(&objp->obj_sem) <= (cnt_t)0,
              "semaphore counter greater than 0");

  /* If some thread is waiting for this specific buffer then it is
     handed directly without going through the LRU.*/
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8001792:	6a0b      	ldr	r3, [r1, #32]
 8001794:	2b00      	cmp	r3, #0
                           oc_object_t *objp) {
 8001796:	460c      	mov	r4, r1
    /* Clearing all flags except those that are still meaningful, note,
       OC_FLAG_NOTSYNC and OC_FLAG_LAZYWRITE are passed, the other thread
       will handle them.*/
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8001798:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800179a:	db2f      	blt.n	80017fc <chCacheReleaseObjectI+0x6c>
    return;
  }

  /* If the object specifies OC_FLAG_NOTSYNC then it must be invalidated
     and removed from the hash table.*/
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800179c:	0719      	lsls	r1, r3, #28
 800179e:	d414      	bmi.n	80017ca <chCacheReleaseObjectI+0x3a>
    objp->obj_key   = 0U;
    objp->obj_flags = OC_FLAG_INLRU;
  }
  else {
    /* LRU insertion point depends on the OC_FLAG_FORGET flag.*/
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 80017a0:	069a      	lsls	r2, r3, #26
 80017a2:	d423      	bmi.n	80017ec <chCacheReleaseObjectI+0x5c>
      /* Placing it on head.*/
      LRU_INSERT_HEAD(ocp, objp);
 80017a4:	69c2      	ldr	r2, [r0, #28]
 80017a6:	60a2      	str	r2, [r4, #8]
 80017a8:	f100 0114 	add.w	r1, r0, #20
 80017ac:	60e1      	str	r1, [r4, #12]
 80017ae:	60d4      	str	r4, [r2, #12]
 80017b0:	61c4      	str	r4, [r0, #28]
    }
    else {
      /* Low priority data, placing it on tail.*/
      LRU_INSERT_TAIL(ocp, objp);
    }
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 80017b2:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6263      	str	r3, [r4, #36]	; 0x24
  }

  /* Increasing the LRU counter semaphore.*/
  chSemSignalI(&ocp->lru_sem);
 80017bc:	3030      	adds	r0, #48	; 0x30
 80017be:	f7ff ffd7 	bl	8001770 <chSemSignalI>
 80017c2:	6a23      	ldr	r3, [r4, #32]
 80017c4:	3301      	adds	r3, #1
 80017c6:	6223      	str	r3, [r4, #32]

  /* Releasing the object, we know there are no threads waiting so
     using the "fast" signal variant.*/
  chSemFastSignalI(&objp->obj_sem);
}
 80017c8:	bd38      	pop	{r3, r4, r5, pc}
    HASH_REMOVE(objp);
 80017ca:	e9d4 2500 	ldrd	r2, r5, [r4]
    LRU_INSERT_TAIL(ocp, objp);
 80017ce:	6a01      	ldr	r1, [r0, #32]
    HASH_REMOVE(objp);
 80017d0:	602a      	str	r2, [r5, #0]
    LRU_INSERT_TAIL(ocp, objp);
 80017d2:	f100 0314 	add.w	r3, r0, #20
    HASH_REMOVE(objp);
 80017d6:	6055      	str	r5, [r2, #4]
    objp->obj_group = 0U;
 80017d8:	2200      	movs	r2, #0
    objp->obj_flags = OC_FLAG_INLRU;
 80017da:	2501      	movs	r5, #1
    LRU_INSERT_TAIL(ocp, objp);
 80017dc:	e9c4 3102 	strd	r3, r1, [r4, #8]
 80017e0:	608c      	str	r4, [r1, #8]
 80017e2:	6204      	str	r4, [r0, #32]
    objp->obj_key   = 0U;
 80017e4:	e9c4 2204 	strd	r2, r2, [r4, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 80017e8:	6265      	str	r5, [r4, #36]	; 0x24
 80017ea:	e7e7      	b.n	80017bc <chCacheReleaseObjectI+0x2c>
      LRU_INSERT_TAIL(ocp, objp);
 80017ec:	6a02      	ldr	r2, [r0, #32]
 80017ee:	60e2      	str	r2, [r4, #12]
 80017f0:	f100 0114 	add.w	r1, r0, #20
 80017f4:	60a1      	str	r1, [r4, #8]
 80017f6:	6094      	str	r4, [r2, #8]
 80017f8:	6204      	str	r4, [r0, #32]
 80017fa:	e7da      	b.n	80017b2 <chCacheReleaseObjectI+0x22>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 80017fc:	f003 031a 	and.w	r3, r3, #26
 8001800:	624b      	str	r3, [r1, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 8001802:	f101 0018 	add.w	r0, r1, #24
}
 8001806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chSemSignalI(&objp->obj_sem);
 800180a:	f7ff bfb1 	b.w	8001770 <chSemSignalI>
 800180e:	bf00      	nop

08001810 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001810:	b410      	push	{r4}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8001812:	4a1e      	ldr	r2, [pc, #120]	; (800188c <chVTDoResetI+0x7c>)
 8001814:	69d1      	ldr	r1, [r2, #28]
void chVTDoResetI(virtual_timer_t *vtp) {
 8001816:	b083      	sub	sp, #12
  if (ch.vtlist.next != vtp) {
 8001818:	4281      	cmp	r1, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 800181a:	9001      	str	r0, [sp, #4]
  if (ch.vtlist.next != vtp) {
 800181c:	d011      	beq.n	8001842 <chVTDoResetI+0x32>
 800181e:	4603      	mov	r3, r0
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001820:	e9d0 1000 	ldrd	r1, r0, [r0]
 8001824:	6001      	str	r1, [r0, #0]
    vtp->next->prev = vtp->prev;
 8001826:	6819      	ldr	r1, [r3, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001828:	321c      	adds	r2, #28
    vtp->func = NULL;
 800182a:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800182c:	4291      	cmp	r1, r2
    vtp->next->prev = vtp->prev;
 800182e:	6048      	str	r0, [r1, #4]
    vtp->func = NULL;
 8001830:	60dc      	str	r4, [r3, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001832:	d003      	beq.n	800183c <chVTDoResetI+0x2c>
      vtp->next->delta += vtp->delta;
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	688b      	ldr	r3, [r1, #8]
 8001838:	4413      	add	r3, r2
 800183a:	608b      	str	r3, [r1, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800183c:	b003      	add	sp, #12
 800183e:	bc10      	pop	{r4}
 8001840:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 8001842:	4610      	mov	r0, r2
 8001844:	680b      	ldr	r3, [r1, #0]
 8001846:	f840 3f1c 	str.w	r3, [r0, #28]!
  vtp->func = NULL;
 800184a:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800184c:	4283      	cmp	r3, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 800184e:	6058      	str	r0, [r3, #4]
  vtp->func = NULL;
 8001850:	60cc      	str	r4, [r1, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001852:	d016      	beq.n	8001882 <chVTDoResetI+0x72>
  ch.vtlist.next->delta += vtp->delta;
 8001854:	688c      	ldr	r4, [r1, #8]
 8001856:	6899      	ldr	r1, [r3, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8001858:	6a92      	ldr	r2, [r2, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 800185a:	440c      	add	r4, r1
 800185c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001860:	609c      	str	r4, [r3, #8]
 8001862:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001864:	1a99      	subs	r1, r3, r2
  if (nowdelta >= ch.vtlist.next->delta) {
 8001866:	428c      	cmp	r4, r1
 8001868:	d9e8      	bls.n	800183c <chVTDoResetI+0x2c>
  delta = ch.vtlist.next->delta - nowdelta;
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	4423      	add	r3, r4
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800186e:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001870:	bf98      	it	ls
 8001872:	1c8c      	addls	r4, r1, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001874:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8001878:	4422      	add	r2, r4
 800187a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800187c:	b003      	add	sp, #12
 800187e:	bc10      	pop	{r4}
 8001880:	4770      	bx	lr
  STM32_ST_TIM->DIER = 0U;
 8001882:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001886:	60dc      	str	r4, [r3, #12]
    return;
 8001888:	e7d8      	b.n	800183c <chVTDoResetI+0x2c>
 800188a:	bf00      	nop
 800188c:	2000142c 	.word	0x2000142c

08001890 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8001890:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001892:	4d1f      	ldr	r5, [pc, #124]	; (8001910 <chVTDoSetI+0x80>)
 8001894:	462f      	mov	r7, r5
 8001896:	2902      	cmp	r1, #2
 8001898:	f857 4f1c 	ldr.w	r4, [r7, #28]!
  return (systime_t)STM32_ST_TIM->CNT;
 800189c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 80018a0:	bf38      	it	cc
 80018a2:	2102      	movcc	r1, #2
 80018a4:	42bc      	cmp	r4, r7
  vtp->par = par;
 80018a6:	e9c0 2303 	strd	r2, r3, [r0, #12]
 80018aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80018ac:	d022      	beq.n	80018f4 <chVTDoSetI+0x64>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 80018ae:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	18c9      	adds	r1, r1, r3
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 80018b4:	d216      	bcs.n	80018e4 <chVTDoSetI+0x54>
    else if (delta < p->delta) {
 80018b6:	68a3      	ldr	r3, [r4, #8]
 80018b8:	428b      	cmp	r3, r1
 80018ba:	d903      	bls.n	80018c4 <chVTDoSetI+0x34>
 80018bc:	e017      	b.n	80018ee <chVTDoSetI+0x5e>
    p = p->next;
 80018be:	6824      	ldr	r4, [r4, #0]
    delta -= p->delta;
 80018c0:	1ac9      	subs	r1, r1, r3
  while (p->delta < delta) {
 80018c2:	68a3      	ldr	r3, [r4, #8]
 80018c4:	428b      	cmp	r3, r1
 80018c6:	d3fa      	bcc.n	80018be <chVTDoSetI+0x2e>
  vtp->prev = vtp->next->prev;
 80018c8:	6863      	ldr	r3, [r4, #4]
 80018ca:	e9c0 4300 	strd	r4, r3, [r0]
  vtp->prev->next = vtp;
 80018ce:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
 80018d0:	6060      	str	r0, [r4, #4]
  vtp->delta = delta;
 80018d2:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
 80018d4:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80018d6:	f04f 32ff 	mov.w	r2, #4294967295
  p->delta -= delta;
 80018da:	1a59      	subs	r1, r3, r1
 80018dc:	60a1      	str	r1, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80018de:	626a      	str	r2, [r5, #36]	; 0x24
}
 80018e0:	bcf0      	pop	{r4, r5, r6, r7}
 80018e2:	4770      	bx	lr
      delta -= p->delta;
 80018e4:	68a2      	ldr	r2, [r4, #8]
      p = p->next;
 80018e6:	6824      	ldr	r4, [r4, #0]
      delta -= p->delta;
 80018e8:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 80018ea:	68a3      	ldr	r3, [r4, #8]
 80018ec:	e7ea      	b.n	80018c4 <chVTDoSetI+0x34>
  return systime + (systime_t)interval;
 80018ee:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80018f0:	6372      	str	r2, [r6, #52]	; 0x34
 80018f2:	e7e7      	b.n	80018c4 <chVTDoSetI+0x34>
      ch.vtlist.lasttime = now;
 80018f4:	62ab      	str	r3, [r5, #40]	; 0x28
 80018f6:	18cf      	adds	r7, r1, r3
  STM32_ST_TIM->SR     = 0;
 80018f8:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80018fa:	2302      	movs	r3, #2
      ch.vtlist.prev = vtp;
 80018fc:	e9c5 0007 	strd	r0, r0, [r5, #28]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001900:	e9c0 4400 	strd	r4, r4, [r0]
      vtp->delta = delay;
 8001904:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001906:	6377      	str	r7, [r6, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001908:	6132      	str	r2, [r6, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800190a:	60f3      	str	r3, [r6, #12]
 800190c:	e7e8      	b.n	80018e0 <chVTDoSetI+0x50>
 800190e:	bf00      	nop
 8001910:	2000142c 	.word	0x2000142c
	...

08001920 <chSysGetStatusAndLockX.part.0>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001920:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001924:	2320      	movs	r3, #32
 8001926:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 800192a:	4770      	bx	lr
 800192c:	0000      	movs	r0, r0
	...

08001930 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001930:	07c2      	lsls	r2, r0, #31
bool chSysIntegrityCheckI(unsigned testmask) {
 8001932:	b410      	push	{r4}
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001934:	d512      	bpl.n	800195c <chSysIntegrityCheckI+0x2c>
    tp = ch.rlist.queue.next;
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <chSysIntegrityCheckI+0xb0>)
 8001938:	6819      	ldr	r1, [r3, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800193a:	4299      	cmp	r1, r3
 800193c:	d043      	beq.n	80019c6 <chSysIntegrityCheckI+0x96>
    n = (cnt_t)0;
 800193e:	2200      	movs	r2, #0
      tp = tp->queue.next;
 8001940:	6809      	ldr	r1, [r1, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001942:	4299      	cmp	r1, r3
      n++;
 8001944:	f102 0201 	add.w	r2, r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001948:	d1fa      	bne.n	8001940 <chSysIntegrityCheckI+0x10>
    tp = ch.rlist.queue.prev;
 800194a:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800194c:	428c      	cmp	r4, r1
 800194e:	d037      	beq.n	80019c0 <chSysIntegrityCheckI+0x90>
      tp = tp->queue.prev;
 8001950:	6864      	ldr	r4, [r4, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001952:	429c      	cmp	r4, r3
      n--;
 8001954:	f102 32ff 	add.w	r2, r2, #4294967295
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001958:	d1fa      	bne.n	8001950 <chSysIntegrityCheckI+0x20>
    if (n != (cnt_t)0) {
 800195a:	bb8a      	cbnz	r2, 80019c0 <chSysIntegrityCheckI+0x90>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 800195c:	0783      	lsls	r3, r0, #30
 800195e:	d514      	bpl.n	800198a <chSysIntegrityCheckI+0x5a>
    vtp = ch.vtlist.next;
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <chSysIntegrityCheckI+0xb0>)
 8001962:	461c      	mov	r4, r3
 8001964:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001968:	42a1      	cmp	r1, r4
 800196a:	d032      	beq.n	80019d2 <chSysIntegrityCheckI+0xa2>
    n = (cnt_t)0;
 800196c:	2200      	movs	r2, #0
      vtp = vtp->next;
 800196e:	6809      	ldr	r1, [r1, #0]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001970:	42a1      	cmp	r1, r4
      n++;
 8001972:	f102 0201 	add.w	r2, r2, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001976:	d1fa      	bne.n	800196e <chSysIntegrityCheckI+0x3e>
    vtp = ch.vtlist.prev;
 8001978:	6a1b      	ldr	r3, [r3, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800197a:	428b      	cmp	r3, r1
 800197c:	d020      	beq.n	80019c0 <chSysIntegrityCheckI+0x90>
      vtp = vtp->prev;
 800197e:	685b      	ldr	r3, [r3, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001980:	42a3      	cmp	r3, r4
      n--;
 8001982:	f102 32ff 	add.w	r2, r2, #4294967295
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001986:	d1fa      	bne.n	800197e <chSysIntegrityCheckI+0x4e>
    if (n != (cnt_t)0) {
 8001988:	b9d2      	cbnz	r2, 80019c0 <chSysIntegrityCheckI+0x90>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 800198a:	f010 0004 	ands.w	r0, r0, #4
 800198e:	d015      	beq.n	80019bc <chSysIntegrityCheckI+0x8c>
    tp = ch.rlist.newer;
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <chSysIntegrityCheckI+0xb0>)
 8001992:	691a      	ldr	r2, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8001994:	429a      	cmp	r2, r3
    n = (cnt_t)0;
 8001996:	f04f 0000 	mov.w	r0, #0
    while (tp != (thread_t *)&ch.rlist) {
 800199a:	d004      	beq.n	80019a6 <chSysIntegrityCheckI+0x76>
      tp = tp->newer;
 800199c:	6912      	ldr	r2, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800199e:	429a      	cmp	r2, r3
      n++;
 80019a0:	f100 0001 	add.w	r0, r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 80019a4:	d1fa      	bne.n	800199c <chSysIntegrityCheckI+0x6c>
    tp = ch.rlist.older;
 80019a6:	695a      	ldr	r2, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d004      	beq.n	80019b6 <chSysIntegrityCheckI+0x86>
      tp = tp->older;
 80019ac:	6952      	ldr	r2, [r2, #20]
    while (tp != (thread_t *)&ch.rlist) {
 80019ae:	429a      	cmp	r2, r3
      n--;
 80019b0:	f100 30ff 	add.w	r0, r0, #4294967295
    while (tp != (thread_t *)&ch.rlist) {
 80019b4:	d1fa      	bne.n	80019ac <chSysIntegrityCheckI+0x7c>
    if (n != (cnt_t)0) {
 80019b6:	3800      	subs	r0, #0
 80019b8:	bf18      	it	ne
 80019ba:	2001      	movne	r0, #1
}
 80019bc:	bc10      	pop	{r4}
 80019be:	4770      	bx	lr
      return true;
 80019c0:	2001      	movs	r0, #1
}
 80019c2:	bc10      	pop	{r4}
 80019c4:	4770      	bx	lr
    tp = ch.rlist.queue.prev;
 80019c6:	685c      	ldr	r4, [r3, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80019c8:	429c      	cmp	r4, r3
    n = (cnt_t)0;
 80019ca:	bf18      	it	ne
 80019cc:	2200      	movne	r2, #0
    while (tp != (thread_t *)&ch.rlist.queue) {
 80019ce:	d1bf      	bne.n	8001950 <chSysIntegrityCheckI+0x20>
 80019d0:	e7c4      	b.n	800195c <chSysIntegrityCheckI+0x2c>
    vtp = ch.vtlist.prev;
 80019d2:	6a1b      	ldr	r3, [r3, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80019d4:	42a3      	cmp	r3, r4
    n = (cnt_t)0;
 80019d6:	bf18      	it	ne
 80019d8:	2200      	movne	r2, #0
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80019da:	d1d0      	bne.n	800197e <chSysIntegrityCheckI+0x4e>
 80019dc:	e7d5      	b.n	800198a <chSysIntegrityCheckI+0x5a>
 80019de:	bf00      	nop
 80019e0:	2000142c 	.word	0x2000142c
	...

080019f0 <rt_test_002_001_execute>:
static void rt_test_002_001_execute(void) {
 80019f0:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80019f2:	4e24      	ldr	r6, [pc, #144]	; (8001a84 <rt_test_002_001_execute+0x94>)
 80019f4:	2001      	movs	r0, #1
 80019f6:	6030      	str	r0, [r6, #0]
 80019f8:	2520      	movs	r5, #32
 80019fa:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 80019fe:	f7ff ff97 	bl	8001930 <chSysIntegrityCheckI>
 8001a02:	2300      	movs	r3, #0
 8001a04:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 8001a08:	f080 0001 	eor.w	r0, r0, #1
 8001a0c:	491e      	ldr	r1, [pc, #120]	; (8001a88 <rt_test_002_001_execute+0x98>)
 8001a0e:	b2c0      	uxtb	r0, r0
 8001a10:	f7ff f976 	bl	8000d00 <_test_assert>
 8001a14:	b100      	cbz	r0, 8001a18 <rt_test_002_001_execute+0x28>
}
 8001a16:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 8001a18:	4604      	mov	r4, r0
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	6030      	str	r0, [r6, #0]
 8001a1e:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8001a22:	f7ff ff85 	bl	8001930 <chSysIntegrityCheckI>
 8001a26:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "virtual timers list check failed");
 8001a2a:	f080 0001 	eor.w	r0, r0, #1
 8001a2e:	4917      	ldr	r1, [pc, #92]	; (8001a8c <rt_test_002_001_execute+0x9c>)
 8001a30:	b2c0      	uxtb	r0, r0
 8001a32:	f7ff f965 	bl	8000d00 <_test_assert>
 8001a36:	4604      	mov	r4, r0
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d1ec      	bne.n	8001a16 <rt_test_002_001_execute+0x26>
  test_set_step(3);
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	6033      	str	r3, [r6, #0]
 8001a40:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8001a44:	2004      	movs	r0, #4
 8001a46:	f7ff ff73 	bl	8001930 <chSysIntegrityCheckI>
 8001a4a:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "registry list check failed");
 8001a4e:	f080 0001 	eor.w	r0, r0, #1
 8001a52:	490f      	ldr	r1, [pc, #60]	; (8001a90 <rt_test_002_001_execute+0xa0>)
 8001a54:	b2c0      	uxtb	r0, r0
 8001a56:	f7ff f953 	bl	8000d00 <_test_assert>
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d1da      	bne.n	8001a16 <rt_test_002_001_execute+0x26>
  test_set_step(4);
 8001a60:	2304      	movs	r3, #4
 8001a62:	6033      	str	r3, [r6, #0]
 8001a64:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 8001a68:	2008      	movs	r0, #8
 8001a6a:	f7ff ff61 	bl	8001930 <chSysIntegrityCheckI>
 8001a6e:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "port layer check failed");
 8001a72:	f080 0001 	eor.w	r0, r0, #1
}
 8001a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 8001a7a:	4906      	ldr	r1, [pc, #24]	; (8001a94 <rt_test_002_001_execute+0xa4>)
 8001a7c:	b2c0      	uxtb	r0, r0
 8001a7e:	f7ff b93f 	b.w	8000d00 <_test_assert>
 8001a82:	bf00      	nop
 8001a84:	20001f1c 	.word	0x20001f1c
 8001a88:	080098ac 	.word	0x080098ac
 8001a8c:	080098c4 	.word	0x080098c4
 8001a90:	080098e8 	.word	0x080098e8
 8001a94:	08009904 	.word	0x08009904
	...

08001aa0 <_idle_thread>:
}
 8001aa0:	e7fe      	b.n	8001aa0 <_idle_thread>
 8001aa2:	bf00      	nop
	...

08001ab0 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	4770      	bx	lr
	...

08001ac0 <oslib_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void oslib_test_001_003_execute(void) {
 8001ac0:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8001ac2:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <oslib_test_001_003_execute+0x130>)
  {
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
    test_printn(CH_CFG_USE_MAILBOXES);
    test_println("");
 8001ac4:	4c4b      	ldr	r4, [pc, #300]	; (8001bf4 <oslib_test_001_003_execute+0x134>)
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 8001ac6:	484c      	ldr	r0, [pc, #304]	; (8001bf8 <oslib_test_001_003_execute+0x138>)
  test_set_step(1);
 8001ac8:	2501      	movs	r5, #1
 8001aca:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 8001acc:	f7ff fa80 	bl	8000fd0 <test_print>
void test_printn(uint32_t n) {
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	f7ff f97d 	bl	8000dd0 <test_printn.part.0>
    test_println("");
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7ff fa5a 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 8001adc:	4847      	ldr	r0, [pc, #284]	; (8001bfc <oslib_test_001_003_execute+0x13c>)
 8001ade:	f7ff fa77 	bl	8000fd0 <test_print>
 8001ae2:	4628      	mov	r0, r5
 8001ae4:	f7ff f974 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMCORE);
    test_println("");
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7ff fa51 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 8001aee:	4844      	ldr	r0, [pc, #272]	; (8001c00 <oslib_test_001_003_execute+0x140>)
 8001af0:	f7ff fa6e 	bl	8000fd0 <test_print>
 8001af4:	4628      	mov	r0, r5
 8001af6:	f7ff f96b 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_HEAP);
    test_println("");
 8001afa:	4620      	mov	r0, r4
 8001afc:	f7ff fa48 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 8001b00:	4840      	ldr	r0, [pc, #256]	; (8001c04 <oslib_test_001_003_execute+0x144>)
 8001b02:	f7ff fa65 	bl	8000fd0 <test_print>
 8001b06:	4628      	mov	r0, r5
 8001b08:	f7ff f962 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMPOOLS);
    test_println("");
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f7ff fa3f 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 8001b12:	483d      	ldr	r0, [pc, #244]	; (8001c08 <oslib_test_001_003_execute+0x148>)
 8001b14:	f7ff fa5c 	bl	8000fd0 <test_print>
 8001b18:	4628      	mov	r0, r5
 8001b1a:	f7ff f959 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
    test_println("");
 8001b1e:	4620      	mov	r0, r4
 8001b20:	f7ff fa36 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_PIPES:                   ");
 8001b24:	4839      	ldr	r0, [pc, #228]	; (8001c0c <oslib_test_001_003_execute+0x14c>)
 8001b26:	f7ff fa53 	bl	8000fd0 <test_print>
 8001b2a:	4628      	mov	r0, r5
 8001b2c:	f7ff f950 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_PIPES);
    test_println("");
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff fa2d 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_OBJ_CACHES:              ");
 8001b36:	4836      	ldr	r0, [pc, #216]	; (8001c10 <oslib_test_001_003_execute+0x150>)
 8001b38:	f7ff fa4a 	bl	8000fd0 <test_print>
 8001b3c:	4628      	mov	r0, r5
 8001b3e:	f7ff f947 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_CACHES);
    test_println("");
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff fa24 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_DELEGATES:               ");
 8001b48:	4832      	ldr	r0, [pc, #200]	; (8001c14 <oslib_test_001_003_execute+0x154>)
 8001b4a:	f7ff fa41 	bl	8000fd0 <test_print>
 8001b4e:	4628      	mov	r0, r5
 8001b50:	f7ff f93e 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_DELEGATES);
    test_println("");
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7ff fa1b 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 8001b5a:	482f      	ldr	r0, [pc, #188]	; (8001c18 <oslib_test_001_003_execute+0x158>)
 8001b5c:	f7ff fa38 	bl	8000fd0 <test_print>
 8001b60:	4628      	mov	r0, r5
 8001b62:	f7ff f935 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_FACTORY);
    test_println("");
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff fa12 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 8001b6c:	482b      	ldr	r0, [pc, #172]	; (8001c1c <oslib_test_001_003_execute+0x15c>)
 8001b6e:	f7ff fa2f 	bl	8000fd0 <test_print>
 8001b72:	2008      	movs	r0, #8
 8001b74:	f7ff f92c 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
    test_println("");
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f7ff fa09 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 8001b7e:	4828      	ldr	r0, [pc, #160]	; (8001c20 <oslib_test_001_003_execute+0x160>)
 8001b80:	f7ff fa26 	bl	8000fd0 <test_print>
 8001b84:	4628      	mov	r0, r5
 8001b86:	f7ff f923 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
    test_println("");
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff fa00 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 8001b90:	4824      	ldr	r0, [pc, #144]	; (8001c24 <oslib_test_001_003_execute+0x164>)
 8001b92:	f7ff fa1d 	bl	8000fd0 <test_print>
 8001b96:	4628      	mov	r0, r5
 8001b98:	f7ff f91a 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
    test_println("");
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f7ff f9f7 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 8001ba2:	4821      	ldr	r0, [pc, #132]	; (8001c28 <oslib_test_001_003_execute+0x168>)
 8001ba4:	f7ff fa14 	bl	8000fd0 <test_print>
 8001ba8:	4628      	mov	r0, r5
 8001baa:	f7ff f911 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
    test_println("");
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff f9ee 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 8001bb4:	481d      	ldr	r0, [pc, #116]	; (8001c2c <oslib_test_001_003_execute+0x16c>)
 8001bb6:	f7ff fa0b 	bl	8000fd0 <test_print>
 8001bba:	4628      	mov	r0, r5
 8001bbc:	f7ff f908 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
    test_println("");
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f7ff f9e5 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 8001bc6:	481a      	ldr	r0, [pc, #104]	; (8001c30 <oslib_test_001_003_execute+0x170>)
 8001bc8:	f7ff fa02 	bl	8000fd0 <test_print>
 8001bcc:	4628      	mov	r0, r5
 8001bce:	f7ff f8ff 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
    test_println("");
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f7ff f9dc 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_FACTORY_PIPES:               ");
 8001bd8:	4816      	ldr	r0, [pc, #88]	; (8001c34 <oslib_test_001_003_execute+0x174>)
 8001bda:	f7ff f9f9 	bl	8000fd0 <test_print>
 8001bde:	4628      	mov	r0, r5
 8001be0:	f7ff f8f6 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_PIPES);
    test_println("");
 8001be4:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 8001be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001bea:	f7ff b9d1 	b.w	8000f90 <test_println>
 8001bee:	bf00      	nop
 8001bf0:	20001f1c 	.word	0x20001f1c
 8001bf4:	0800a3e0 	.word	0x0800a3e0
 8001bf8:	0800991c 	.word	0x0800991c
 8001bfc:	08009948 	.word	0x08009948
 8001c00:	08009974 	.word	0x08009974
 8001c04:	080099a0 	.word	0x080099a0
 8001c08:	080099cc 	.word	0x080099cc
 8001c0c:	080099f8 	.word	0x080099f8
 8001c10:	08009a24 	.word	0x08009a24
 8001c14:	08009a50 	.word	0x08009a50
 8001c18:	08009a7c 	.word	0x08009a7c
 8001c1c:	08009aa8 	.word	0x08009aa8
 8001c20:	08009ad4 	.word	0x08009ad4
 8001c24:	08009b00 	.word	0x08009b00
 8001c28:	08009b2c 	.word	0x08009b2c
 8001c2c:	08009b58 	.word	0x08009b58
 8001c30:	08009b84 	.word	0x08009b84
 8001c34:	08009bb0 	.word	0x08009bb0
	...

08001c40 <oslib_test_001_002_execute>:
static void oslib_test_001_002_execute(void) {
 8001c40:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <oslib_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/LIB");
 8001c44:	4819      	ldr	r0, [pc, #100]	; (8001cac <oslib_test_001_002_execute+0x6c>)
    test_println("");
 8001c46:	4c1a      	ldr	r4, [pc, #104]	; (8001cb0 <oslib_test_001_002_execute+0x70>)
  test_set_step(1);
 8001c48:	2501      	movs	r5, #1
 8001c4a:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/LIB");
 8001c4c:	f7ff f9a0 	bl	8000f90 <test_println>
    test_print("--- Stable Flag:                        ");
 8001c50:	4818      	ldr	r0, [pc, #96]	; (8001cb4 <oslib_test_001_002_execute+0x74>)
 8001c52:	f7ff f9bd 	bl	8000fd0 <test_print>
 8001c56:	4628      	mov	r0, r5
 8001c58:	f7ff f8ba 	bl	8000dd0 <test_printn.part.0>
    test_println("");
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f7ff f997 	bl	8000f90 <test_println>
    test_print("--- Version String:                     ");
 8001c62:	4815      	ldr	r0, [pc, #84]	; (8001cb8 <oslib_test_001_002_execute+0x78>)
 8001c64:	f7ff f9b4 	bl	8000fd0 <test_print>
    test_println(CH_OSLIB_VERSION);
 8001c68:	4814      	ldr	r0, [pc, #80]	; (8001cbc <oslib_test_001_002_execute+0x7c>)
 8001c6a:	f7ff f991 	bl	8000f90 <test_println>
    test_print("--- Major Number:                       ");
 8001c6e:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <oslib_test_001_002_execute+0x80>)
 8001c70:	f7ff f9ae 	bl	8000fd0 <test_print>
 8001c74:	4628      	mov	r0, r5
 8001c76:	f7ff f8ab 	bl	8000dd0 <test_printn.part.0>
    test_println("");
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f7ff f988 	bl	8000f90 <test_println>
    test_print("--- Minor Number:                       ");
 8001c80:	4810      	ldr	r0, [pc, #64]	; (8001cc4 <oslib_test_001_002_execute+0x84>)
 8001c82:	f7ff f9a5 	bl	8000fd0 <test_print>
 8001c86:	2002      	movs	r0, #2
 8001c88:	f7ff f8a2 	bl	8000dd0 <test_printn.part.0>
    test_println("");
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff f97f 	bl	8000f90 <test_println>
    test_print("--- Patch Number:                       ");
 8001c92:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <oslib_test_001_002_execute+0x88>)
 8001c94:	f7ff f99c 	bl	8000fd0 <test_print>
    test_printn(CH_OSLIB_PATCH);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff f8c9 	bl	8000e30 <test_printn>
    test_println("");
 8001c9e:	4620      	mov	r0, r4
}
 8001ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001ca4:	f7ff b974 	b.w	8000f90 <test_println>
 8001ca8:	20001f1c 	.word	0x20001f1c
 8001cac:	08009bdc 	.word	0x08009bdc
 8001cb0:	0800a3e0 	.word	0x0800a3e0
 8001cb4:	08009c10 	.word	0x08009c10
 8001cb8:	08009c3c 	.word	0x08009c3c
 8001cbc:	08009c68 	.word	0x08009c68
 8001cc0:	08009c70 	.word	0x08009c70
 8001cc4:	08009c9c 	.word	0x08009c9c
 8001cc8:	08009cc8 	.word	0x08009cc8
 8001ccc:	00000000 	.word	0x00000000

08001cd0 <rt_test_011_012_execute>:
 * - [11.12.8] The size of an event listener is printed.
 * - [11.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_011_012_execute(void) {
 8001cd0:	b570      	push	{r4, r5, r6, lr}

  /* [11.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8001cd2:	4d33      	ldr	r5, [pc, #204]	; (8001da0 <rt_test_011_012_execute+0xd0>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 8001cd4:	4c33      	ldr	r4, [pc, #204]	; (8001da4 <rt_test_011_012_execute+0xd4>)
    test_print("--- System: ");
 8001cd6:	4834      	ldr	r0, [pc, #208]	; (8001da8 <rt_test_011_012_execute+0xd8>)
  test_set_step(1);
 8001cd8:	2301      	movs	r3, #1
 8001cda:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 8001cdc:	f7ff f978 	bl	8000fd0 <test_print>
 8001ce0:	2078      	movs	r0, #120	; 0x78
 8001ce2:	f7ff f875 	bl	8000dd0 <test_printn.part.0>
    test_println(" bytes");
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f7ff f952 	bl	8000f90 <test_println>
  }
  test_end_step(1);

  /* [11.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 8001cec:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 8001cee:	482f      	ldr	r0, [pc, #188]	; (8001dac <rt_test_011_012_execute+0xdc>)
  test_set_step(2);
 8001cf0:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 8001cf2:	f7ff f96d 	bl	8000fd0 <test_print>
 8001cf6:	2044      	movs	r0, #68	; 0x44
 8001cf8:	f7ff f86a 	bl	8000dd0 <test_printn.part.0>
    test_printn(sizeof(thread_t));
    test_println(" bytes");
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f7ff f947 	bl	8000f90 <test_println>
  }
  test_end_step(2);

  /* [11.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8001d02:	2303      	movs	r3, #3
  {
    test_print("--- Timer : ");
 8001d04:	482a      	ldr	r0, [pc, #168]	; (8001db0 <rt_test_011_012_execute+0xe0>)
  test_set_step(3);
 8001d06:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 8001d08:	f7ff f962 	bl	8000fd0 <test_print>
 8001d0c:	2014      	movs	r0, #20
 8001d0e:	f7ff f85f 	bl	8000dd0 <test_printn.part.0>
    test_printn(sizeof(virtual_timer_t));
    test_println(" bytes");
 8001d12:	4620      	mov	r0, r4
 8001d14:	f7ff f93c 	bl	8000f90 <test_println>
  }
  test_end_step(3);

  /* [11.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 8001d18:	2604      	movs	r6, #4
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 8001d1a:	4826      	ldr	r0, [pc, #152]	; (8001db4 <rt_test_011_012_execute+0xe4>)
  test_set_step(4);
 8001d1c:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 8001d1e:	f7ff f957 	bl	8000fd0 <test_print>
 8001d22:	200c      	movs	r0, #12
 8001d24:	f7ff f854 	bl	8000dd0 <test_printn.part.0>
    test_printn(sizeof(semaphore_t));
    test_println(" bytes");
 8001d28:	4620      	mov	r0, r4
 8001d2a:	f7ff f931 	bl	8000f90 <test_println>
#endif
  }
  test_end_step(4);

  /* [11.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 8001d2e:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8001d30:	4821      	ldr	r0, [pc, #132]	; (8001db8 <rt_test_011_012_execute+0xe8>)
  test_set_step(5);
 8001d32:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 8001d34:	f7ff f94c 	bl	8000fd0 <test_print>
 8001d38:	2010      	movs	r0, #16
 8001d3a:	f7ff f849 	bl	8000dd0 <test_printn.part.0>
    test_printn(sizeof(mutex_t));
    test_println(" bytes");
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f7ff f926 	bl	8000f90 <test_println>
#endif
  }
  test_end_step(5);

  /* [11.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8001d44:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8001d46:	481d      	ldr	r0, [pc, #116]	; (8001dbc <rt_test_011_012_execute+0xec>)
  test_set_step(6);
 8001d48:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 8001d4a:	f7ff f941 	bl	8000fd0 <test_print>
 8001d4e:	2008      	movs	r0, #8
 8001d50:	f7ff f83e 	bl	8000dd0 <test_printn.part.0>
    test_printn(sizeof(condition_variable_t));
    test_println(" bytes");
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7ff f91b 	bl	8000f90 <test_println>
#endif
  }
  test_end_step(6);

  /* [11.12.7] The size of an event source is printed.*/
  test_set_step(7);
 8001d5a:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 8001d5c:	4818      	ldr	r0, [pc, #96]	; (8001dc0 <rt_test_011_012_execute+0xf0>)
  test_set_step(7);
 8001d5e:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 8001d60:	f7ff f936 	bl	8000fd0 <test_print>
 8001d64:	4630      	mov	r0, r6
 8001d66:	f7ff f833 	bl	8000dd0 <test_printn.part.0>
    test_printn(sizeof(event_source_t));
    test_println(" bytes");
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7ff f910 	bl	8000f90 <test_println>
#endif
  }
  test_end_step(7);

  /* [11.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8001d70:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8001d72:	4814      	ldr	r0, [pc, #80]	; (8001dc4 <rt_test_011_012_execute+0xf4>)
  test_set_step(8);
 8001d74:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 8001d76:	f7ff f92b 	bl	8000fd0 <test_print>
 8001d7a:	2014      	movs	r0, #20
 8001d7c:	f7ff f828 	bl	8000dd0 <test_printn.part.0>
    test_printn(sizeof(event_listener_t));
    test_println(" bytes");
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff f905 	bl	8000f90 <test_println>
#endif
  }
  test_end_step(8);

  /* [11.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8001d86:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 8001d88:	480f      	ldr	r0, [pc, #60]	; (8001dc8 <rt_test_011_012_execute+0xf8>)
  test_set_step(9);
 8001d8a:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 8001d8c:	f7ff f920 	bl	8000fd0 <test_print>
 8001d90:	2028      	movs	r0, #40	; 0x28
 8001d92:	f7ff f81d 	bl	8000dd0 <test_printn.part.0>
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
 8001d96:	4620      	mov	r0, r4
#endif
  }
  test_end_step(9);
}
 8001d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 8001d9c:	f7ff b8f8 	b.w	8000f90 <test_println>
 8001da0:	20001f1c 	.word	0x20001f1c
 8001da4:	08009d04 	.word	0x08009d04
 8001da8:	08009cf4 	.word	0x08009cf4
 8001dac:	08009d0c 	.word	0x08009d0c
 8001db0:	08009d1c 	.word	0x08009d1c
 8001db4:	08009d2c 	.word	0x08009d2c
 8001db8:	08009d3c 	.word	0x08009d3c
 8001dbc:	08009d4c 	.word	0x08009d4c
 8001dc0:	08009d5c 	.word	0x08009d5c
 8001dc4:	08009d6c 	.word	0x08009d6c
 8001dc8:	08009d7c 	.word	0x08009d7c
 8001dcc:	00000000 	.word	0x00000000

08001dd0 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8001dd0:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8001dd2:	4b93      	ldr	r3, [pc, #588]	; (8002020 <rt_test_001_003_execute+0x250>)
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 8001dd4:	4c93      	ldr	r4, [pc, #588]	; (8002024 <rt_test_001_003_execute+0x254>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8001dd6:	4894      	ldr	r0, [pc, #592]	; (8002028 <rt_test_001_003_execute+0x258>)
  test_set_step(1);
 8001dd8:	2501      	movs	r5, #1
 8001dda:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8001ddc:	f7ff f8f8 	bl	8000fd0 <test_print>
 8001de0:	2020      	movs	r0, #32
 8001de2:	f7fe fff5 	bl	8000dd0 <test_printn.part.0>
    test_println("");
 8001de6:	4620      	mov	r0, r4
 8001de8:	f7ff f8d2 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 8001dec:	488f      	ldr	r0, [pc, #572]	; (800202c <rt_test_001_003_execute+0x25c>)
 8001dee:	f7ff f8ef 	bl	8000fd0 <test_print>
 8001df2:	f242 7010 	movw	r0, #10000	; 0x2710
 8001df6:	f7fe ffeb 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_ST_FREQUENCY);
    test_println("");
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f7ff f8c8 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 8001e00:	488b      	ldr	r0, [pc, #556]	; (8002030 <rt_test_001_003_execute+0x260>)
 8001e02:	f7ff f8e5 	bl	8000fd0 <test_print>
 8001e06:	2020      	movs	r0, #32
 8001e08:	f7fe ffe2 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_INTERVALS_SIZE);
    test_println("");
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f7ff f8bf 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 8001e12:	4888      	ldr	r0, [pc, #544]	; (8002034 <rt_test_001_003_execute+0x264>)
 8001e14:	f7ff f8dc 	bl	8000fd0 <test_print>
 8001e18:	2020      	movs	r0, #32
 8001e1a:	f7fe ffd9 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
    test_println("");
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f7ff f8b6 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8001e24:	4884      	ldr	r0, [pc, #528]	; (8002038 <rt_test_001_003_execute+0x268>)
 8001e26:	f7ff f8d3 	bl	8000fd0 <test_print>
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	f7fe ffd0 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_ST_TIMEDELTA);
    test_println("");
 8001e30:	4620      	mov	r0, r4
 8001e32:	f7ff f8ad 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 8001e36:	4881      	ldr	r0, [pc, #516]	; (800203c <rt_test_001_003_execute+0x26c>)
 8001e38:	f7ff f8ca 	bl	8000fd0 <test_print>
    test_printn(CH_CFG_TIME_QUANTUM);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7fe fff7 	bl	8000e30 <test_printn>
    test_println("");
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff f8a4 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 8001e48:	487d      	ldr	r0, [pc, #500]	; (8002040 <rt_test_001_003_execute+0x270>)
 8001e4a:	f7ff f8c1 	bl	8000fd0 <test_print>
    test_printn(CH_CFG_MEMCORE_SIZE);
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7fe ffee 	bl	8000e30 <test_printn>
    test_println("");
 8001e54:	4620      	mov	r0, r4
 8001e56:	f7ff f89b 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 8001e5a:	487a      	ldr	r0, [pc, #488]	; (8002044 <rt_test_001_003_execute+0x274>)
 8001e5c:	f7ff f8b8 	bl	8000fd0 <test_print>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7fe ffe5 	bl	8000e30 <test_printn>
    test_println("");
 8001e66:	4620      	mov	r0, r4
 8001e68:	f7ff f892 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 8001e6c:	4876      	ldr	r0, [pc, #472]	; (8002048 <rt_test_001_003_execute+0x278>)
 8001e6e:	f7ff f8af 	bl	8000fd0 <test_print>
 8001e72:	4628      	mov	r0, r5
 8001e74:	f7fe ffac 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
    test_println("");
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff f889 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 8001e7e:	4873      	ldr	r0, [pc, #460]	; (800204c <rt_test_001_003_execute+0x27c>)
 8001e80:	f7ff f8a6 	bl	8000fd0 <test_print>
 8001e84:	4628      	mov	r0, r5
 8001e86:	f7fe ffa3 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_TM);
    test_println("");
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f7ff f880 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 8001e90:	486f      	ldr	r0, [pc, #444]	; (8002050 <rt_test_001_003_execute+0x280>)
 8001e92:	f7ff f89d 	bl	8000fd0 <test_print>
 8001e96:	4628      	mov	r0, r5
 8001e98:	f7fe ff9a 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_REGISTRY);
    test_println("");
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f7ff f877 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 8001ea2:	486c      	ldr	r0, [pc, #432]	; (8002054 <rt_test_001_003_execute+0x284>)
 8001ea4:	f7ff f894 	bl	8000fd0 <test_print>
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	f7fe ff91 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_WAITEXIT);
    test_println("");
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff f86e 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 8001eb4:	4868      	ldr	r0, [pc, #416]	; (8002058 <rt_test_001_003_execute+0x288>)
 8001eb6:	f7ff f88b 	bl	8000fd0 <test_print>
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f7fe ff88 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES);
    test_println("");
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	f7ff f865 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRIORITY:     ");
 8001ec6:	4865      	ldr	r0, [pc, #404]	; (800205c <rt_test_001_003_execute+0x28c>)
 8001ec8:	f7ff f882 	bl	8000fd0 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7fe ffaf 	bl	8000e30 <test_printn>
    test_println("");
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f7ff f85c 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 8001ed8:	4861      	ldr	r0, [pc, #388]	; (8002060 <rt_test_001_003_execute+0x290>)
 8001eda:	f7ff f879 	bl	8000fd0 <test_print>
 8001ede:	4628      	mov	r0, r5
 8001ee0:	f7fe ff76 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES);
    test_println("");
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7ff f853 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURSIVE:       ");
 8001eea:	485e      	ldr	r0, [pc, #376]	; (8002064 <rt_test_001_003_execute+0x294>)
 8001eec:	f7ff f870 	bl	8000fd0 <test_print>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7fe ff9d 	bl	8000e30 <test_printn>
    test_println("");   
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f7ff f84a 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 8001efc:	485a      	ldr	r0, [pc, #360]	; (8002068 <rt_test_001_003_execute+0x298>)
 8001efe:	f7ff f867 	bl	8000fd0 <test_print>
 8001f02:	4628      	mov	r0, r5
 8001f04:	f7fe ff64 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS);
    test_println("");
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff f841 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEOUT:        ");
 8001f0e:	4857      	ldr	r0, [pc, #348]	; (800206c <rt_test_001_003_execute+0x29c>)
 8001f10:	f7ff f85e 	bl	8000fd0 <test_print>
 8001f14:	4628      	mov	r0, r5
 8001f16:	f7fe ff5b 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
    test_println("");
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7ff f838 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8001f20:	4853      	ldr	r0, [pc, #332]	; (8002070 <rt_test_001_003_execute+0x2a0>)
 8001f22:	f7ff f855 	bl	8000fd0 <test_print>
 8001f26:	4628      	mov	r0, r5
 8001f28:	f7fe ff52 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS);
    test_println("");
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f7ff f82f 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 8001f32:	4850      	ldr	r0, [pc, #320]	; (8002074 <rt_test_001_003_execute+0x2a4>)
 8001f34:	f7ff f84c 	bl	8000fd0 <test_print>
 8001f38:	4628      	mov	r0, r5
 8001f3a:	f7fe ff49 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
    test_println("");
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7ff f826 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 8001f44:	484c      	ldr	r0, [pc, #304]	; (8002078 <rt_test_001_003_execute+0x2a8>)
 8001f46:	f7ff f843 	bl	8000fd0 <test_print>
 8001f4a:	4628      	mov	r0, r5
 8001f4c:	f7fe ff40 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES);
    test_println("");
 8001f50:	4620      	mov	r0, r4
 8001f52:	f7ff f81d 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRIORITY:       ");
 8001f56:	4849      	ldr	r0, [pc, #292]	; (800207c <rt_test_001_003_execute+0x2ac>)
 8001f58:	f7ff f83a 	bl	8000fd0 <test_print>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7fe ff67 	bl	8000e30 <test_printn>
    test_println("");
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff f814 	bl	8000f90 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8001f68:	4845      	ldr	r0, [pc, #276]	; (8002080 <rt_test_001_003_execute+0x2b0>)
 8001f6a:	f7ff f831 	bl	8000fd0 <test_print>
 8001f6e:	4628      	mov	r0, r5
 8001f70:	f7fe ff2e 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_CFG_USE_DYNAMIC);
    test_println("");
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7ff f80b 	bl	8000f90 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8001f7a:	4842      	ldr	r0, [pc, #264]	; (8002084 <rt_test_001_003_execute+0x2b4>)
 8001f7c:	f7ff f828 	bl	8000fd0 <test_print>
    test_printn(CH_DBG_STATISTICS);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7fe ff55 	bl	8000e30 <test_printn>
    test_println("");
 8001f86:	4620      	mov	r0, r4
 8001f88:	f7ff f802 	bl	8000f90 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8001f8c:	483e      	ldr	r0, [pc, #248]	; (8002088 <rt_test_001_003_execute+0x2b8>)
 8001f8e:	f7ff f81f 	bl	8000fd0 <test_print>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
 8001f92:	2000      	movs	r0, #0
 8001f94:	f7fe ff4c 	bl	8000e30 <test_printn>
    test_println("");
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f7fe fff9 	bl	8000f90 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8001f9e:	483b      	ldr	r0, [pc, #236]	; (800208c <rt_test_001_003_execute+0x2bc>)
 8001fa0:	f7ff f816 	bl	8000fd0 <test_print>
    test_printn(CH_DBG_ENABLE_CHECKS);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7fe ff43 	bl	8000e30 <test_printn>
    test_println("");
 8001faa:	4620      	mov	r0, r4
 8001fac:	f7fe fff0 	bl	8000f90 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8001fb0:	4837      	ldr	r0, [pc, #220]	; (8002090 <rt_test_001_003_execute+0x2c0>)
 8001fb2:	f7ff f80d 	bl	8000fd0 <test_print>
    test_printn(CH_DBG_ENABLE_ASSERTS);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f7fe ff3a 	bl	8000e30 <test_printn>
    test_println("");
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7fe ffe7 	bl	8000f90 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 8001fc2:	4834      	ldr	r0, [pc, #208]	; (8002094 <rt_test_001_003_execute+0x2c4>)
 8001fc4:	f7ff f804 	bl	8000fd0 <test_print>
 8001fc8:	20ff      	movs	r0, #255	; 0xff
 8001fca:	f7fe ff01 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_MASK);
    test_println("");
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f7fe ffde 	bl	8000f90 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 8001fd4:	4830      	ldr	r0, [pc, #192]	; (8002098 <rt_test_001_003_execute+0x2c8>)
 8001fd6:	f7fe fffb 	bl	8000fd0 <test_print>
 8001fda:	2080      	movs	r0, #128	; 0x80
 8001fdc:	f7fe fef8 	bl	8000dd0 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
    test_println("");
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f7fe ffd5 	bl	8000f90 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 8001fe6:	482d      	ldr	r0, [pc, #180]	; (800209c <rt_test_001_003_execute+0x2cc>)
 8001fe8:	f7fe fff2 	bl	8000fd0 <test_print>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7fe ff1f 	bl	8000e30 <test_printn>
    test_println("");
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f7fe ffcc 	bl	8000f90 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8001ff8:	4829      	ldr	r0, [pc, #164]	; (80020a0 <rt_test_001_003_execute+0x2d0>)
 8001ffa:	f7fe ffe9 	bl	8000fd0 <test_print>
    test_printn(CH_DBG_FILL_THREADS);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7fe ff16 	bl	8000e30 <test_printn>
    test_println("");
 8002004:	4620      	mov	r0, r4
 8002006:	f7fe ffc3 	bl	8000f90 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 800200a:	4826      	ldr	r0, [pc, #152]	; (80020a4 <rt_test_001_003_execute+0x2d4>)
 800200c:	f7fe ffe0 	bl	8000fd0 <test_print>
    test_printn(CH_DBG_THREADS_PROFILING);
 8002010:	2000      	movs	r0, #0
 8002012:	f7fe ff0d 	bl	8000e30 <test_printn>
    test_println("");
 8002016:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 8002018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 800201c:	f7fe bfb8 	b.w	8000f90 <test_println>
 8002020:	20001f1c 	.word	0x20001f1c
 8002024:	0800a3e0 	.word	0x0800a3e0
 8002028:	08009d8c 	.word	0x08009d8c
 800202c:	08009db8 	.word	0x08009db8
 8002030:	08009de4 	.word	0x08009de4
 8002034:	08009e10 	.word	0x08009e10
 8002038:	08009e3c 	.word	0x08009e3c
 800203c:	08009e68 	.word	0x08009e68
 8002040:	08009e94 	.word	0x08009e94
 8002044:	08009ec0 	.word	0x08009ec0
 8002048:	08009eec 	.word	0x08009eec
 800204c:	08009f18 	.word	0x08009f18
 8002050:	08009f44 	.word	0x08009f44
 8002054:	08009f70 	.word	0x08009f70
 8002058:	08009f9c 	.word	0x08009f9c
 800205c:	08009fc8 	.word	0x08009fc8
 8002060:	08009ff4 	.word	0x08009ff4
 8002064:	0800a020 	.word	0x0800a020
 8002068:	0800a04c 	.word	0x0800a04c
 800206c:	0800a078 	.word	0x0800a078
 8002070:	0800a0a4 	.word	0x0800a0a4
 8002074:	0800a0d0 	.word	0x0800a0d0
 8002078:	0800a0fc 	.word	0x0800a0fc
 800207c:	0800a128 	.word	0x0800a128
 8002080:	0800a154 	.word	0x0800a154
 8002084:	0800a180 	.word	0x0800a180
 8002088:	0800a1ac 	.word	0x0800a1ac
 800208c:	0800a1d8 	.word	0x0800a1d8
 8002090:	0800a204 	.word	0x0800a204
 8002094:	0800a230 	.word	0x0800a230
 8002098:	0800a25c 	.word	0x0800a25c
 800209c:	0800a288 	.word	0x0800a288
 80020a0:	0800a2b4 	.word	0x0800a2b4
 80020a4:	0800a2e0 	.word	0x0800a2e0
	...

080020b0 <rt_test_001_002_execute>:
static void rt_test_001_002_execute(void) {
 80020b0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <rt_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/RT");
 80020b4:	4819      	ldr	r0, [pc, #100]	; (800211c <rt_test_001_002_execute+0x6c>)
    test_println("");
 80020b6:	4c1a      	ldr	r4, [pc, #104]	; (8002120 <rt_test_001_002_execute+0x70>)
  test_set_step(1);
 80020b8:	2501      	movs	r5, #1
 80020ba:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/RT");
 80020bc:	f7fe ff68 	bl	8000f90 <test_println>
    test_print("--- Stable Flag:                        ");
 80020c0:	4818      	ldr	r0, [pc, #96]	; (8002124 <rt_test_001_002_execute+0x74>)
 80020c2:	f7fe ff85 	bl	8000fd0 <test_print>
 80020c6:	4628      	mov	r0, r5
 80020c8:	f7fe fe82 	bl	8000dd0 <test_printn.part.0>
    test_println("");
 80020cc:	4620      	mov	r0, r4
 80020ce:	f7fe ff5f 	bl	8000f90 <test_println>
    test_print("--- Version String:                     ");
 80020d2:	4815      	ldr	r0, [pc, #84]	; (8002128 <rt_test_001_002_execute+0x78>)
 80020d4:	f7fe ff7c 	bl	8000fd0 <test_print>
    test_println(CH_KERNEL_VERSION);
 80020d8:	4814      	ldr	r0, [pc, #80]	; (800212c <rt_test_001_002_execute+0x7c>)
 80020da:	f7fe ff59 	bl	8000f90 <test_println>
    test_print("--- Major Number:                       ");
 80020de:	4814      	ldr	r0, [pc, #80]	; (8002130 <rt_test_001_002_execute+0x80>)
 80020e0:	f7fe ff76 	bl	8000fd0 <test_print>
 80020e4:	2006      	movs	r0, #6
 80020e6:	f7fe fe73 	bl	8000dd0 <test_printn.part.0>
    test_println("");
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7fe ff50 	bl	8000f90 <test_println>
    test_print("--- Minor Number:                       ");
 80020f0:	4810      	ldr	r0, [pc, #64]	; (8002134 <rt_test_001_002_execute+0x84>)
 80020f2:	f7fe ff6d 	bl	8000fd0 <test_print>
 80020f6:	4628      	mov	r0, r5
 80020f8:	f7fe fe6a 	bl	8000dd0 <test_printn.part.0>
    test_println("");
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7fe ff47 	bl	8000f90 <test_println>
    test_print("--- Patch Number:                       ");
 8002102:	480d      	ldr	r0, [pc, #52]	; (8002138 <rt_test_001_002_execute+0x88>)
 8002104:	f7fe ff64 	bl	8000fd0 <test_print>
 8002108:	4628      	mov	r0, r5
 800210a:	f7fe fe61 	bl	8000dd0 <test_printn.part.0>
    test_println("");
 800210e:	4620      	mov	r0, r4
}
 8002110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8002114:	f7fe bf3c 	b.w	8000f90 <test_println>
 8002118:	20001f1c 	.word	0x20001f1c
 800211c:	0800a30c 	.word	0x0800a30c
 8002120:	0800a3e0 	.word	0x0800a3e0
 8002124:	08009c10 	.word	0x08009c10
 8002128:	08009c3c 	.word	0x08009c3c
 800212c:	0800a340 	.word	0x0800a340
 8002130:	08009c70 	.word	0x08009c70
 8002134:	08009c9c 	.word	0x08009c9c
 8002138:	08009cc8 	.word	0x08009cc8
 800213c:	00000000 	.word	0x00000000

08002140 <rt_test_001_001_execute>:
  test_set_step(1);
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <rt_test_001_001_execute+0x74>)
    test_print("--- Architecture:                       ");
 8002142:	481d      	ldr	r0, [pc, #116]	; (80021b8 <rt_test_001_001_execute+0x78>)
static void rt_test_001_001_execute(void) {
 8002144:	b510      	push	{r4, lr}
  test_set_step(1);
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 800214a:	f7fe ff41 	bl	8000fd0 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 800214e:	481b      	ldr	r0, [pc, #108]	; (80021bc <rt_test_001_001_execute+0x7c>)
    test_println("");
 8002150:	4c1b      	ldr	r4, [pc, #108]	; (80021c0 <rt_test_001_001_execute+0x80>)
    test_println(PORT_ARCHITECTURE_NAME);
 8002152:	f7fe ff1d 	bl	8000f90 <test_println>
    test_print("--- Core Variant:                       ");
 8002156:	481b      	ldr	r0, [pc, #108]	; (80021c4 <rt_test_001_001_execute+0x84>)
 8002158:	f7fe ff3a 	bl	8000fd0 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 800215c:	481a      	ldr	r0, [pc, #104]	; (80021c8 <rt_test_001_001_execute+0x88>)
 800215e:	f7fe ff17 	bl	8000f90 <test_println>
    test_print("--- Compiler:                           ");
 8002162:	481a      	ldr	r0, [pc, #104]	; (80021cc <rt_test_001_001_execute+0x8c>)
 8002164:	f7fe ff34 	bl	8000fd0 <test_print>
    test_println(PORT_COMPILER_NAME);
 8002168:	4819      	ldr	r0, [pc, #100]	; (80021d0 <rt_test_001_001_execute+0x90>)
 800216a:	f7fe ff11 	bl	8000f90 <test_println>
    test_print("--- Port Info:                          ");
 800216e:	4819      	ldr	r0, [pc, #100]	; (80021d4 <rt_test_001_001_execute+0x94>)
 8002170:	f7fe ff2e 	bl	8000fd0 <test_print>
    test_println(PORT_INFO);
 8002174:	4818      	ldr	r0, [pc, #96]	; (80021d8 <rt_test_001_001_execute+0x98>)
 8002176:	f7fe ff0b 	bl	8000f90 <test_println>
    test_print("--- Natural alignment:                  ");
 800217a:	4818      	ldr	r0, [pc, #96]	; (80021dc <rt_test_001_001_execute+0x9c>)
 800217c:	f7fe ff28 	bl	8000fd0 <test_print>
 8002180:	2004      	movs	r0, #4
 8002182:	f7fe fe25 	bl	8000dd0 <test_printn.part.0>
    test_println("");
 8002186:	4620      	mov	r0, r4
 8002188:	f7fe ff02 	bl	8000f90 <test_println>
    test_print("--- Stack alignment:                    ");
 800218c:	4814      	ldr	r0, [pc, #80]	; (80021e0 <rt_test_001_001_execute+0xa0>)
 800218e:	f7fe ff1f 	bl	8000fd0 <test_print>
 8002192:	2008      	movs	r0, #8
 8002194:	f7fe fe1c 	bl	8000dd0 <test_printn.part.0>
    test_println("");
 8002198:	4620      	mov	r0, r4
 800219a:	f7fe fef9 	bl	8000f90 <test_println>
    test_print("--- Working area alignment:             ");
 800219e:	4811      	ldr	r0, [pc, #68]	; (80021e4 <rt_test_001_001_execute+0xa4>)
 80021a0:	f7fe ff16 	bl	8000fd0 <test_print>
 80021a4:	2008      	movs	r0, #8
 80021a6:	f7fe fe13 	bl	8000dd0 <test_printn.part.0>
    test_println("");
 80021aa:	4620      	mov	r0, r4
}
 80021ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 80021b0:	f7fe beee 	b.w	8000f90 <test_println>
 80021b4:	20001f1c 	.word	0x20001f1c
 80021b8:	0800a348 	.word	0x0800a348
 80021bc:	0800a374 	.word	0x0800a374
 80021c0:	0800a3e0 	.word	0x0800a3e0
 80021c4:	0800a380 	.word	0x0800a380
 80021c8:	0800a3ac 	.word	0x0800a3ac
 80021cc:	0800a3b8 	.word	0x0800a3b8
 80021d0:	0800a3e4 	.word	0x0800a3e4
 80021d4:	0800a424 	.word	0x0800a424
 80021d8:	0800a450 	.word	0x0800a450
 80021dc:	0800a468 	.word	0x0800a468
 80021e0:	0800a494 	.word	0x0800a494
 80021e4:	0800a4c0 	.word	0x0800a4c0
	...

080021f0 <oslib_test_001_001_execute>:
 80021f0:	f7ff bfa6 	b.w	8002140 <rt_test_001_001_execute>
	...

08002200 <dyn_find_object>:
    chPoolFree(mp, (void *)dep);
  }
}
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 8002200:	b570      	push	{r4, r5, r6, lr}
  dyn_element_t *p = dlp->next;
 8002202:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8002204:	42a1      	cmp	r1, r4
 8002206:	d012      	beq.n	800222e <dyn_find_object+0x2e>
 8002208:	460d      	mov	r5, r1
 800220a:	4606      	mov	r6, r0
 800220c:	e002      	b.n	8002214 <dyn_find_object+0x14>
    p = p->next;
 800220e:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8002210:	42a5      	cmp	r5, r4
 8002212:	d00c      	beq.n	800222e <dyn_find_object+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8002214:	2208      	movs	r2, #8
 8002216:	4631      	mov	r1, r6
 8002218:	18a0      	adds	r0, r4, r2
 800221a:	f007 fa93 	bl	8009744 <strncmp>
 800221e:	2800      	cmp	r0, #0
 8002220:	d1f5      	bne.n	800220e <dyn_find_object+0xe>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 8002222:	b114      	cbz	r4, 800222a <dyn_find_object+0x2a>
    /* Increasing references counter.*/
    dep->refs++;
 8002224:	6863      	ldr	r3, [r4, #4]
 8002226:	3301      	adds	r3, #1
 8002228:	6063      	str	r3, [r4, #4]
  }

  return dep;
}
 800222a:	4620      	mov	r0, r4
 800222c:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800222e:	2400      	movs	r4, #0
}
 8002230:	4620      	mov	r0, r4
 8002232:	bd70      	pop	{r4, r5, r6, pc}
	...

08002240 <dyn_create_object_pool>:
                                             memory_pool_t *mp) {
 8002240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8002242:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8002244:	42a1      	cmp	r1, r4
                                             memory_pool_t *mp) {
 8002246:	460d      	mov	r5, r1
 8002248:	4606      	mov	r6, r0
 800224a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 800224c:	d103      	bne.n	8002256 <dyn_create_object_pool+0x16>
 800224e:	e00d      	b.n	800226c <dyn_create_object_pool+0x2c>
    p = p->next;
 8002250:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8002252:	42a5      	cmp	r5, r4
 8002254:	d00a      	beq.n	800226c <dyn_create_object_pool+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8002256:	2208      	movs	r2, #8
 8002258:	4631      	mov	r1, r6
 800225a:	18a0      	adds	r0, r4, r2
 800225c:	f007 fa72 	bl	8009744 <strncmp>
 8002260:	2800      	cmp	r0, #0
 8002262:	d1f5      	bne.n	8002250 <dyn_create_object_pool+0x10>
  if (dep != NULL) {
 8002264:	b114      	cbz	r4, 800226c <dyn_create_object_pool+0x2c>
    return NULL;
 8002266:	4604      	mov	r4, r0
}
 8002268:	4620      	mov	r0, r4
 800226a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dep = (dyn_element_t *)chPoolAlloc(mp);
 800226c:	4638      	mov	r0, r7
 800226e:	f7fe ff6f 	bl	8001150 <chPoolAlloc>
  if (dep == NULL) {
 8002272:	4604      	mov	r4, r0
 8002274:	2800      	cmp	r0, #0
 8002276:	d0f7      	beq.n	8002268 <dyn_create_object_pool+0x28>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8002278:	2208      	movs	r2, #8
 800227a:	4631      	mov	r1, r6
 800227c:	4410      	add	r0, r2
 800227e:	f007 fa9f 	bl	80097c0 <strncpy>
  dep->next = dlp->next;
 8002282:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8002284:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8002286:	e9c4 3200 	strd	r3, r2, [r4]
}
 800228a:	4620      	mov	r0, r4
  dlp->next = (dyn_element_t *)dep;
 800228c:	602c      	str	r4, [r5, #0]
}
 800228e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002290 <chThdYield>:
void chThdYield(void) {
 8002290:	b538      	push	{r3, r4, r5, lr}
 8002292:	2320      	movs	r3, #32
 8002294:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <chThdYield+0x54>)
 800229a:	6810      	ldr	r0, [r2, #0]
 800229c:	6991      	ldr	r1, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 800229e:	6883      	ldr	r3, [r0, #8]
  return firstprio(&ch.rlist.queue) >= currp->prio;
 80022a0:	688c      	ldr	r4, [r1, #8]
  if (chSchCanYieldS()) {
 80022a2:	42a3      	cmp	r3, r4
 80022a4:	d203      	bcs.n	80022ae <chThdYield+0x1e>
 80022a6:	2300      	movs	r3, #0
 80022a8:	f383 8811 	msr	BASEPRI, r3
}
 80022ac:	bd38      	pop	{r3, r4, r5, pc}
  tqp->next             = tp->queue.next;
 80022ae:	6803      	ldr	r3, [r0, #0]
 80022b0:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80022b2:	605a      	str	r2, [r3, #4]
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80022b4:	2501      	movs	r5, #1
  currp = queue_fifo_remove(&ch.rlist.queue);
 80022b6:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 80022b8:	2200      	movs	r2, #0
  currp->state = CH_STATE_CURRENT;
 80022ba:	f880 5020 	strb.w	r5, [r0, #32]
  tp->state = CH_STATE_READY;
 80022be:	f881 2020 	strb.w	r2, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80022c2:	e000      	b.n	80022c6 <chThdYield+0x36>
 80022c4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	4294      	cmp	r4, r2
 80022ca:	d9fb      	bls.n	80022c4 <chThdYield+0x34>
  tp->queue.prev             = cp->queue.prev;
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 80022d2:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80022d4:	6059      	str	r1, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80022d6:	f7fd fffb 	bl	80002d0 <_port_switch>
 80022da:	2300      	movs	r3, #0
 80022dc:	f383 8811 	msr	BASEPRI, r3
 80022e0:	bd38      	pop	{r3, r4, r5, pc}
 80022e2:	bf00      	nop
 80022e4:	2000142c 	.word	0x2000142c
	...

080022f0 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	4d09      	ldr	r5, [pc, #36]	; (8002318 <bmk_thread8+0x28>)
 80022f4:	4604      	mov	r4, r0
    chThdYield();
 80022f6:	f7ff ffcb 	bl	8002290 <chThdYield>
    chThdYield();
 80022fa:	f7ff ffc9 	bl	8002290 <chThdYield>
    chThdYield();
 80022fe:	f7ff ffc7 	bl	8002290 <chThdYield>
    chThdYield();
 8002302:	f7ff ffc5 	bl	8002290 <chThdYield>
    (*(uint32_t *)p) += 4;
 8002306:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8002308:	69aa      	ldr	r2, [r5, #24]
 800230a:	3304      	adds	r3, #4
 800230c:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
 800230e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8002312:	075b      	lsls	r3, r3, #29
 8002314:	d5ef      	bpl.n	80022f6 <bmk_thread8+0x6>
}
 8002316:	bd38      	pop	{r3, r4, r5, pc}
 8002318:	2000142c 	.word	0x2000142c
 800231c:	00000000 	.word	0x00000000

08002320 <chSchWakeupS>:
  thread_t *otp = currp;
 8002320:	4a15      	ldr	r2, [pc, #84]	; (8002378 <chSchWakeupS+0x58>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002322:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8002324:	6996      	ldr	r6, [r2, #24]
  if (ntp->prio <= otp->prio) {
 8002326:	6885      	ldr	r5, [r0, #8]
 8002328:	68b4      	ldr	r4, [r6, #8]
  ntp->u.rdymsg = msg;
 800232a:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 800232c:	42a5      	cmp	r5, r4
 800232e:	d80e      	bhi.n	800234e <chSchWakeupS+0x2e>
  tp->state = CH_STATE_READY;
 8002330:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
 8002332:	4613      	mov	r3, r2
  tp->state = CH_STATE_READY;
 8002334:	f880 1020 	strb.w	r1, [r0, #32]
    cp = cp->queue.next;
 8002338:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	4295      	cmp	r5, r2
 800233e:	d9fb      	bls.n	8002338 <chSchWakeupS+0x18>
  tp->queue.prev             = cp->queue.prev;
 8002340:	685a      	ldr	r2, [r3, #4]
}
 8002342:	bc70      	pop	{r4, r5, r6}
  tp->queue.prev             = cp->queue.prev;
 8002344:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8002348:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800234a:	6058      	str	r0, [r3, #4]
}
 800234c:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 800234e:	2300      	movs	r3, #0
 8002350:	f886 3020 	strb.w	r3, [r6, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8002354:	4613      	mov	r3, r2
    cp = cp->queue.next;
 8002356:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8002358:	6899      	ldr	r1, [r3, #8]
 800235a:	428c      	cmp	r4, r1
 800235c:	d3fb      	bcc.n	8002356 <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	6071      	str	r1, [r6, #4]
    ntp->state = CH_STATE_CURRENT;
 8002362:	2401      	movs	r4, #1
  tp->queue.next             = cp;
 8002364:	6033      	str	r3, [r6, #0]
  tp->queue.prev->queue.next = tp;
 8002366:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 8002368:	605e      	str	r6, [r3, #4]
    chSysSwitch(ntp, otp);
 800236a:	4631      	mov	r1, r6
    ntp->state = CH_STATE_CURRENT;
 800236c:	f880 4020 	strb.w	r4, [r0, #32]
}
 8002370:	bc70      	pop	{r4, r5, r6}
    currp = ntp;
 8002372:	6190      	str	r0, [r2, #24]
    chSysSwitch(ntp, otp);
 8002374:	f7fd bfac 	b.w	80002d0 <_port_switch>
 8002378:	2000142c 	.word	0x2000142c
 800237c:	00000000 	.word	0x00000000

08002380 <chCondSignal.constprop.0>:
void chCondSignal(condition_variable_t *cp) {
 8002380:	b508      	push	{r3, lr}
 8002382:	2320      	movs	r3, #32
 8002384:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <chCondSignal.constprop.0+0x24>)
 800238a:	6818      	ldr	r0, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 800238c:	4298      	cmp	r0, r3
 800238e:	d005      	beq.n	800239c <chCondSignal.constprop.0+0x1c>
  tqp->next             = tp->queue.next;
 8002390:	6802      	ldr	r2, [r0, #0]
 8002392:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002394:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8002396:	2100      	movs	r1, #0
 8002398:	f7ff ffc2 	bl	8002320 <chSchWakeupS>
 800239c:	2300      	movs	r3, #0
 800239e:	f383 8811 	msr	BASEPRI, r3
}
 80023a2:	bd08      	pop	{r3, pc}
 80023a4:	20000800 	.word	0x20000800
	...

080023b0 <chThdCreateFromMemoryPool.constprop.0>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 80023b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80023b4:	4f14      	ldr	r7, [pc, #80]	; (8002408 <chThdCreateFromMemoryPool.constprop.0+0x58>)
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 80023b6:	b086      	sub	sp, #24
 80023b8:	4680      	mov	r8, r0
  wsp = chPoolAlloc(mp);
 80023ba:	4638      	mov	r0, r7
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 80023bc:	460e      	mov	r6, r1
 80023be:	4615      	mov	r5, r2
  wsp = chPoolAlloc(mp);
 80023c0:	f7fe fec6 	bl	8001150 <chPoolAlloc>
  if (wsp == NULL) {
 80023c4:	4604      	mov	r4, r0
 80023c6:	b1d0      	cbz	r0, 80023fe <chThdCreateFromMemoryPool.constprop.0+0x4e>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 80023c8:	687b      	ldr	r3, [r7, #4]
  thread_descriptor_t td = {
 80023ca:	4a10      	ldr	r2, [pc, #64]	; (800240c <chThdCreateFromMemoryPool.constprop.0+0x5c>)
 80023cc:	f8cd 8000 	str.w	r8, [sp]
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 80023d0:	4403      	add	r3, r0
  thread_descriptor_t td = {
 80023d2:	9302      	str	r3, [sp, #8]
 80023d4:	9001      	str	r0, [sp, #4]
 80023d6:	9603      	str	r6, [sp, #12]
 80023d8:	9505      	str	r5, [sp, #20]
 80023da:	9204      	str	r2, [sp, #16]
 80023dc:	2320      	movs	r3, #32
 80023de:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 80023e2:	4668      	mov	r0, sp
 80023e4:	f7ff f82c 	bl	8001440 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 80023e8:	2302      	movs	r3, #2
 80023ea:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 80023ee:	6407      	str	r7, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 80023f0:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 80023f2:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 80023f4:	f7ff ff94 	bl	8002320 <chSchWakeupS>
 80023f8:	2300      	movs	r3, #0
 80023fa:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 80023fe:	4620      	mov	r0, r4
 8002400:	b006      	add	sp, #24
 8002402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002406:	bf00      	nop
 8002408:	200016c0 	.word	0x200016c0
 800240c:	08000f81 	.word	0x08000f81

08002410 <chSemSignal>:
void chSemSignal(semaphore_t *sp) {
 8002410:	b508      	push	{r3, lr}
 8002412:	2220      	movs	r2, #32
 8002414:	f382 8811 	msr	BASEPRI, r2
  if (++sp->cnt <= (cnt_t)0) {
 8002418:	6882      	ldr	r2, [r0, #8]
 800241a:	3201      	adds	r2, #1
 800241c:	2a00      	cmp	r2, #0
 800241e:	6082      	str	r2, [r0, #8]
 8002420:	dd03      	ble.n	800242a <chSemSignal+0x1a>
 8002422:	2300      	movs	r3, #0
 8002424:	f383 8811 	msr	BASEPRI, r3
}
 8002428:	bd08      	pop	{r3, pc}
 800242a:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 800242c:	6800      	ldr	r0, [r0, #0]
  tqp->next             = tp->queue.next;
 800242e:	6802      	ldr	r2, [r0, #0]
 8002430:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 8002432:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8002434:	6053      	str	r3, [r2, #4]
 8002436:	f7ff ff73 	bl	8002320 <chSchWakeupS>
 800243a:	2300      	movs	r3, #0
 800243c:	f383 8811 	msr	BASEPRI, r3
}
 8002440:	bd08      	pop	{r3, pc}
 8002442:	bf00      	nop
	...

08002450 <chThdCreateStatic>:
                            tprio_t prio, tfunc_t pf, void *arg) {
 8002450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002452:	9d06      	ldr	r5, [sp, #24]
 8002454:	2420      	movs	r4, #32
 8002456:	f384 8811 	msr	BASEPRI, r4
  tp = (thread_t *)((uint8_t *)wsp + size -
 800245a:	3948      	subs	r1, #72	; 0x48
 800245c:	1844      	adds	r4, r0, r1
  REG_INSERT(tp);
 800245e:	4e16      	ldr	r6, [pc, #88]	; (80024b8 <chThdCreateStatic+0x68>)
 8002460:	6126      	str	r6, [r4, #16]
  tp->wabase = (stkalign_t *)wsp;
 8002462:	61e0      	str	r0, [r4, #28]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002464:	f1a4 0024 	sub.w	r0, r4, #36	; 0x24
  REG_INSERT(tp);
 8002468:	6971      	ldr	r1, [r6, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800246a:	f844 3c24 	str.w	r3, [r4, #-36]
 800246e:	f844 5c20 	str.w	r5, [r4, #-32]
 8002472:	60e0      	str	r0, [r4, #12]
  tp->state     = CH_STATE_WTSTART;
 8002474:	2502      	movs	r5, #2
  tp->name      = name;
 8002476:	4811      	ldr	r0, [pc, #68]	; (80024bc <chThdCreateStatic+0x6c>)
  tp->prio      = prio;
 8002478:	60a2      	str	r2, [r4, #8]
  tp->refs      = (trefs_t)1;
 800247a:	2301      	movs	r3, #1
  tp->realprio  = prio;
 800247c:	63e2      	str	r2, [r4, #60]	; 0x3c
  tp->state     = CH_STATE_WTSTART;
 800247e:	8425      	strh	r5, [r4, #32]
  tp->refs      = (trefs_t)1;
 8002480:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  list_init(&tp->waiting);
 8002484:	f104 0228 	add.w	r2, r4, #40	; 0x28
  queue_init(&tp->msgqueue);
 8002488:	f104 032c 	add.w	r3, r4, #44	; 0x2c
  tp->mtxlist   = NULL;
 800248c:	2500      	movs	r5, #0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800248e:	4f0c      	ldr	r7, [pc, #48]	; (80024c0 <chThdCreateStatic+0x70>)
 8002490:	f844 7c04 	str.w	r7, [r4, #-4]
  REG_INSERT(tp);
 8002494:	e9c4 1005 	strd	r1, r0, [r4, #20]
  tp->epending  = (eventmask_t)0;
 8002498:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  chSchWakeupS(tp, MSG_OK);
 800249c:	4620      	mov	r0, r4
  REG_INSERT(tp);
 800249e:	610c      	str	r4, [r1, #16]
  tqp->next = (thread_t *)tqp;
 80024a0:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 80024a4:	6323      	str	r3, [r4, #48]	; 0x30
  chSchWakeupS(tp, MSG_OK);
 80024a6:	4629      	mov	r1, r5
  REG_INSERT(tp);
 80024a8:	6174      	str	r4, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 80024aa:	f7ff ff39 	bl	8002320 <chSchWakeupS>
 80024ae:	f385 8811 	msr	BASEPRI, r5
}
 80024b2:	4620      	mov	r0, r4
 80024b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2000142c 	.word	0x2000142c
 80024bc:	0800a4ec 	.word	0x0800a4ec
 80024c0:	080002e1 	.word	0x080002e1
	...

080024d0 <_ZN10chibios_rt16BaseStaticThreadILi128EE5startEm>:
     * @return                  A reference to the created thread with
     *                          reference counter set to one.
     *
     * @api
     */
    ThreadReference start(tprio_t prio) override {
 80024d0:	b500      	push	{lr}
 80024d2:	b083      	sub	sp, #12
 80024d4:	460a      	mov	r2, r1
      void _thd_start(void *arg);

      return ThreadReference(chThdCreateStatic(wa, sizeof(wa), prio,
                                               _thd_start, this));
 80024d6:	9000      	str	r0, [sp, #0]
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <_ZN10chibios_rt16BaseStaticThreadILi128EE5startEm+0x1c>)
 80024da:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024de:	3008      	adds	r0, #8
 80024e0:	f7ff ffb6 	bl	8002450 <chThdCreateStatic>
    }
 80024e4:	b003      	add	sp, #12
 80024e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80024ea:	bf00      	nop
 80024ec:	08000861 	.word	0x08000861

080024f0 <_ZN10chibios_rt16BaseStaticThreadILi256EE5startEm>:
    ThreadReference start(tprio_t prio) override {
 80024f0:	b500      	push	{lr}
 80024f2:	b083      	sub	sp, #12
 80024f4:	460a      	mov	r2, r1
                                               _thd_start, this));
 80024f6:	9000      	str	r0, [sp, #0]
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <_ZN10chibios_rt16BaseStaticThreadILi256EE5startEm+0x1c>)
 80024fa:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80024fe:	3008      	adds	r0, #8
 8002500:	f7ff ffa6 	bl	8002450 <chThdCreateStatic>
    }
 8002504:	b003      	add	sp, #12
 8002506:	f85d fb04 	ldr.w	pc, [sp], #4
 800250a:	bf00      	nop
 800250c:	08000861 	.word	0x08000861

08002510 <chThdCreate>:
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8002510:	b510      	push	{r4, lr}
 8002512:	2320      	movs	r3, #32
 8002514:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(tdp);
 8002518:	f7fe ff92 	bl	8001440 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800251c:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(tdp);
 800251e:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8002520:	f7ff fefe 	bl	8002320 <chSchWakeupS>
 8002524:	2300      	movs	r3, #0
 8002526:	f383 8811 	msr	BASEPRI, r3
}
 800252a:	4620      	mov	r0, r4
 800252c:	bd10      	pop	{r4, pc}
 800252e:	bf00      	nop

08002530 <chSchGoSleepS>:
  thread_t *otp = currp;
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <chSchGoSleepS+0x24>)
 8002532:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8002534:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8002536:	b410      	push	{r4}
  otp->state = newstate;
 8002538:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800253c:	6810      	ldr	r0, [r2, #0]
 800253e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8002540:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8002542:	6043      	str	r3, [r0, #4]
 8002544:	f882 4020 	strb.w	r4, [r2, #32]
}
 8002548:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800254a:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800254c:	4610      	mov	r0, r2
 800254e:	f7fd bebf 	b.w	80002d0 <_port_switch>
 8002552:	bf00      	nop
 8002554:	2000142c 	.word	0x2000142c
	...

08002560 <chEvtWaitOne.constprop.0>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8002560:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <chEvtWaitOne.constprop.0+0x34>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 8002562:	b510      	push	{r4, lr}
 8002564:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8002566:	6994      	ldr	r4, [r2, #24]
 8002568:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800256c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800256e:	b140      	cbz	r0, 8002582 <chEvtWaitOne.constprop.0+0x22>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8002570:	4243      	negs	r3, r0
  ctp->epending &= ~m;
 8002572:	ea20 0203 	bic.w	r2, r0, r3
 8002576:	6362      	str	r2, [r4, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 8002578:	4018      	ands	r0, r3
 800257a:	2300      	movs	r3, #0
 800257c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8002580:	bd10      	pop	{r4, pc}
    ctp->u.ewmask = events;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8002586:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 8002588:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800258a:	f7ff ffd1 	bl	8002530 <chSchGoSleepS>
    m = ctp->epending & events;
 800258e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002590:	e7ee      	b.n	8002570 <chEvtWaitOne.constprop.0+0x10>
 8002592:	bf00      	nop
 8002594:	2000142c 	.word	0x2000142c
	...

080025a0 <chEvtWaitAny.constprop.0>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 80025a0:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <chEvtWaitAny.constprop.0+0x34>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 80025a2:	b510      	push	{r4, lr}
 80025a4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80025a6:	6994      	ldr	r4, [r2, #24]
 80025a8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 80025ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80025ae:	b120      	cbz	r0, 80025ba <chEvtWaitAny.constprop.0+0x1a>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 80025b0:	2300      	movs	r3, #0
 80025b2:	6363      	str	r3, [r4, #52]	; 0x34
 80025b4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 80025b8:	bd10      	pop	{r4, pc}
    ctp->u.ewmask = events;
 80025ba:	f04f 33ff 	mov.w	r3, #4294967295
 80025be:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 80025c0:	200a      	movs	r0, #10
 80025c2:	f7ff ffb5 	bl	8002530 <chSchGoSleepS>
  ctp->epending &= ~m;
 80025c6:	2300      	movs	r3, #0
    m = ctp->epending & events;
 80025c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
  ctp->epending &= ~m;
 80025ca:	6363      	str	r3, [r4, #52]	; 0x34
 80025cc:	f383 8811 	msr	BASEPRI, r3
}
 80025d0:	bd10      	pop	{r4, pc}
 80025d2:	bf00      	nop
 80025d4:	2000142c 	.word	0x2000142c
	...

080025e0 <chEvtWaitAll.constprop.0>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 80025e0:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <chEvtWaitAll.constprop.0+0x34>)
eventmask_t chEvtWaitAll(eventmask_t events) {
 80025e2:	b510      	push	{r4, lr}
 80025e4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80025e6:	6994      	ldr	r4, [r2, #24]
 80025e8:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
 80025ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025ee:	f003 0205 	and.w	r2, r3, #5
 80025f2:	2a05      	cmp	r2, #5
 80025f4:	d005      	beq.n	8002602 <chEvtWaitAll.constprop.0+0x22>
    ctp->u.ewmask = events;
 80025f6:	2305      	movs	r3, #5
 80025f8:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80025fa:	200b      	movs	r0, #11
 80025fc:	f7ff ff98 	bl	8002530 <chSchGoSleepS>
 8002600:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->epending &= ~events;
 8002602:	f023 0305 	bic.w	r3, r3, #5
 8002606:	6363      	str	r3, [r4, #52]	; 0x34
 8002608:	2300      	movs	r3, #0
 800260a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 800260e:	2005      	movs	r0, #5
 8002610:	bd10      	pop	{r4, pc}
 8002612:	bf00      	nop
 8002614:	2000142c 	.word	0x2000142c
	...

08002620 <bmk_thread4>:
  return ch.rlist.current;
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <bmk_thread4+0x20>)
static THD_FUNCTION(bmk_thread4, p) {
 8002622:	b510      	push	{r4, lr}
 8002624:	2320      	movs	r3, #32
 8002626:	6994      	ldr	r4, [r2, #24]
 8002628:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800262c:	2003      	movs	r0, #3
 800262e:	f7ff ff7f 	bl	8002530 <chSchGoSleepS>
  } while (msg == MSG_OK);
 8002632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f9      	beq.n	800262c <bmk_thread4+0xc>
 8002638:	2300      	movs	r3, #0
 800263a:	f383 8811 	msr	BASEPRI, r3
}
 800263e:	bd10      	pop	{r4, pc}
 8002640:	2000142c 	.word	0x2000142c
	...

08002650 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002650:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != timeout) {
 8002652:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002654:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8002656:	d012      	beq.n	800267e <chSchGoSleepTimeoutS+0x2e>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8002658:	4d0c      	ldr	r5, [pc, #48]	; (800268c <chSchGoSleepTimeoutS+0x3c>)
 800265a:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <chSchGoSleepTimeoutS+0x40>)
 800265c:	69ab      	ldr	r3, [r5, #24]
 800265e:	4604      	mov	r4, r0
 8002660:	a801      	add	r0, sp, #4
 8002662:	f7ff f915 	bl	8001890 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8002666:	4620      	mov	r0, r4
 8002668:	f7ff ff62 	bl	8002530 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800266c:	9b04      	ldr	r3, [sp, #16]
 800266e:	b113      	cbz	r3, 8002676 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8002670:	a801      	add	r0, sp, #4
 8002672:	f7ff f8cd 	bl	8001810 <chVTDoResetI>
  return currp->u.rdymsg;
 8002676:	69ab      	ldr	r3, [r5, #24]
}
 8002678:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800267a:	b007      	add	sp, #28
 800267c:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
 800267e:	4d03      	ldr	r5, [pc, #12]	; (800268c <chSchGoSleepTimeoutS+0x3c>)
 8002680:	f7ff ff56 	bl	8002530 <chSchGoSleepS>
  return currp->u.rdymsg;
 8002684:	69ab      	ldr	r3, [r5, #24]
}
 8002686:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002688:	b007      	add	sp, #28
 800268a:	bd30      	pop	{r4, r5, pc}
 800268c:	2000142c 	.word	0x2000142c
 8002690:	080014c1 	.word	0x080014c1
	...

080026a0 <chSemWaitTimeout.constprop.0>:
 80026a0:	2320      	movs	r3, #32
 80026a2:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <chSemWaitTimeout.constprop.0+0x48>)
 80026a8:	6899      	ldr	r1, [r3, #8]
 80026aa:	1e4a      	subs	r2, r1, #1
 80026ac:	2a00      	cmp	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	db04      	blt.n	80026bc <chSemWaitTimeout.constprop.0+0x1c>
  return MSG_OK;
 80026b2:	2000      	movs	r0, #0
 80026b4:	2300      	movs	r3, #0
 80026b6:	f383 8811 	msr	BASEPRI, r3
}
 80026ba:	4770      	bx	lr
    if (TIME_IMMEDIATE == timeout) {
 80026bc:	b180      	cbz	r0, 80026e0 <chSemWaitTimeout.constprop.0+0x40>
    currp->u.wtsemp = sp;
 80026be:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <chSemWaitTimeout.constprop.0+0x4c>)
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 80026c0:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 80026c2:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 80026c4:	685c      	ldr	r4, [r3, #4]
 80026c6:	6253      	str	r3, [r2, #36]	; 0x24
 80026c8:	e9c2 3400 	strd	r3, r4, [r2]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 80026cc:	4601      	mov	r1, r0
  tp->queue.prev->queue.next = tp;
 80026ce:	6022      	str	r2, [r4, #0]
 80026d0:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	f7ff ffbc 	bl	8002650 <chSchGoSleepTimeoutS>
 80026d8:	2300      	movs	r3, #0
 80026da:	f383 8811 	msr	BASEPRI, r3
}
 80026de:	bd10      	pop	{r4, pc}
      sp->cnt++;
 80026e0:	6099      	str	r1, [r3, #8]
      return MSG_TIMEOUT;
 80026e2:	f04f 30ff 	mov.w	r0, #4294967295
 80026e6:	e7e5      	b.n	80026b4 <chSemWaitTimeout.constprop.0+0x14>
 80026e8:	200017f0 	.word	0x200017f0
 80026ec:	2000142c 	.word	0x2000142c

080026f0 <rt_test_009_006_execute>:
static void rt_test_009_006_execute(void) {
 80026f0:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80026f2:	4d58      	ldr	r5, [pc, #352]	; (8002854 <rt_test_009_006_execute+0x164>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 80026f4:	4c58      	ldr	r4, [pc, #352]	; (8002858 <rt_test_009_006_execute+0x168>)
 80026f6:	2001      	movs	r0, #1
 80026f8:	69a2      	ldr	r2, [r4, #24]
 80026fa:	6028      	str	r0, [r5, #0]
 80026fc:	2320      	movs	r3, #32
 80026fe:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8002702:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8002704:	b933      	cbnz	r3, 8002714 <rt_test_009_006_execute+0x24>
 8002706:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 800270a:	4954      	ldr	r1, [pc, #336]	; (800285c <rt_test_009_006_execute+0x16c>)
 800270c:	f7fe faf8 	bl	8000d00 <_test_assert>
 8002710:	b180      	cbz	r0, 8002734 <rt_test_009_006_execute+0x44>
}
 8002712:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8002714:	4258      	negs	r0, r3
  ctp->epending &= ~m;
 8002716:	ea23 0100 	bic.w	r1, r3, r0
 800271a:	6351      	str	r1, [r2, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 800271c:	4018      	ands	r0, r3
 800271e:	2300      	movs	r3, #0
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	fab0 f080 	clz	r0, r0
    test_assert(m == 0, "spurious event");
 8002728:	494c      	ldr	r1, [pc, #304]	; (800285c <rt_test_009_006_execute+0x16c>)
 800272a:	0940      	lsrs	r0, r0, #5
 800272c:	f7fe fae8 	bl	8000d00 <_test_assert>
 8002730:	2800      	cmp	r0, #0
 8002732:	d1ee      	bne.n	8002712 <rt_test_009_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8002734:	69a3      	ldr	r3, [r4, #24]
 8002736:	2220      	movs	r2, #32
 8002738:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 800273c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800273e:	2a00      	cmp	r2, #0
 8002740:	d167      	bne.n	8002812 <rt_test_009_006_execute+0x122>
 8002742:	f380 8811 	msr	BASEPRI, r0
 8002746:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8002748:	4944      	ldr	r1, [pc, #272]	; (800285c <rt_test_009_006_execute+0x16c>)
 800274a:	f7fe fad9 	bl	8000d00 <_test_assert>
 800274e:	2800      	cmp	r0, #0
 8002750:	d1df      	bne.n	8002712 <rt_test_009_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8002752:	69a3      	ldr	r3, [r4, #24]
 8002754:	2220      	movs	r2, #32
 8002756:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 800275a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800275c:	3201      	adds	r2, #1
 800275e:	d05c      	beq.n	800281a <rt_test_009_006_execute+0x12a>
 8002760:	f380 8811 	msr	BASEPRI, r0
 8002764:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8002766:	493d      	ldr	r1, [pc, #244]	; (800285c <rt_test_009_006_execute+0x16c>)
 8002768:	f7fe faca 	bl	8000d00 <_test_assert>
 800276c:	2800      	cmp	r0, #0
 800276e:	d1d0      	bne.n	8002712 <rt_test_009_006_execute+0x22>
  test_set_step(2);
 8002770:	2302      	movs	r3, #2
 8002772:	602b      	str	r3, [r5, #0]
  thread_t *ctp = currp;
 8002774:	69a6      	ldr	r6, [r4, #24]
 8002776:	2320      	movs	r3, #32
 8002778:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800277c:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800277e:	b955      	cbnz	r5, 8002796 <rt_test_009_006_execute+0xa6>
    ctp->u.ewmask = events;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8002786:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800278a:	200a      	movs	r0, #10
 800278c:	f7ff ff60 	bl	8002650 <chSchGoSleepTimeoutS>
 8002790:	2800      	cmp	r0, #0
 8002792:	db52      	blt.n	800283a <rt_test_009_006_execute+0x14a>
    m = ctp->epending & events;
 8002794:	6b75      	ldr	r5, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 8002796:	4268      	negs	r0, r5
  ctp->epending &= ~m;
 8002798:	ea25 0300 	bic.w	r3, r5, r0
 800279c:	6373      	str	r3, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 800279e:	4028      	ands	r0, r5
 80027a0:	2300      	movs	r3, #0
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	fab0 f080 	clz	r0, r0
 80027aa:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 80027ac:	492b      	ldr	r1, [pc, #172]	; (800285c <rt_test_009_006_execute+0x16c>)
 80027ae:	f7fe faa7 	bl	8000d00 <_test_assert>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d1ad      	bne.n	8002712 <rt_test_009_006_execute+0x22>
  thread_t *ctp = currp;
 80027b6:	69a6      	ldr	r6, [r4, #24]
 80027b8:	2320      	movs	r3, #32
 80027ba:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 80027be:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80027c0:	b37d      	cbz	r5, 8002822 <rt_test_009_006_execute+0x132>
  ctp->epending &= ~m;
 80027c2:	2300      	movs	r3, #0
 80027c4:	6373      	str	r3, [r6, #52]	; 0x34
 80027c6:	f383 8811 	msr	BASEPRI, r3
 80027ca:	fab5 f085 	clz	r0, r5
 80027ce:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 80027d0:	4922      	ldr	r1, [pc, #136]	; (800285c <rt_test_009_006_execute+0x16c>)
 80027d2:	f7fe fa95 	bl	8000d00 <_test_assert>
 80027d6:	4605      	mov	r5, r0
 80027d8:	2800      	cmp	r0, #0
 80027da:	d19a      	bne.n	8002712 <rt_test_009_006_execute+0x22>
  thread_t *ctp = currp;
 80027dc:	69a4      	ldr	r4, [r4, #24]
 80027de:	2320      	movs	r3, #32
 80027e0:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 80027e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027e6:	3301      	adds	r3, #1
 80027e8:	d009      	beq.n	80027fe <rt_test_009_006_execute+0x10e>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	6263      	str	r3, [r4, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 80027f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027f4:	200b      	movs	r0, #11
 80027f6:	f7ff ff2b 	bl	8002650 <chSchGoSleepTimeoutS>
 80027fa:	2800      	cmp	r0, #0
 80027fc:	db25      	blt.n	800284a <rt_test_009_006_execute+0x15a>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 80027fe:	2300      	movs	r3, #0
 8002800:	6363      	str	r3, [r4, #52]	; 0x34
 8002802:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8002806:	4628      	mov	r0, r5
 8002808:	4914      	ldr	r1, [pc, #80]	; (800285c <rt_test_009_006_execute+0x16c>)
}
 800280a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(m == 0, "spurious event");
 800280e:	f7fe ba77 	b.w	8000d00 <_test_assert>
  ctp->epending &= ~m;
 8002812:	6358      	str	r0, [r3, #52]	; 0x34
 8002814:	f380 8811 	msr	BASEPRI, r0
 8002818:	e796      	b.n	8002748 <rt_test_009_006_execute+0x58>
  ctp->epending &= ~events;
 800281a:	6358      	str	r0, [r3, #52]	; 0x34
 800281c:	f380 8811 	msr	BASEPRI, r0
 8002820:	e7a1      	b.n	8002766 <rt_test_009_006_execute+0x76>
    ctp->u.ewmask = events;
 8002822:	f04f 33ff 	mov.w	r3, #4294967295
 8002826:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8002828:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800282c:	200a      	movs	r0, #10
 800282e:	f7ff ff0f 	bl	8002650 <chSchGoSleepTimeoutS>
 8002832:	2800      	cmp	r0, #0
 8002834:	db05      	blt.n	8002842 <rt_test_009_006_execute+0x152>
    m = ctp->epending & events;
 8002836:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8002838:	e7c3      	b.n	80027c2 <rt_test_009_006_execute+0xd2>
 800283a:	f385 8811 	msr	BASEPRI, r5
 800283e:	2001      	movs	r0, #1
 8002840:	e7b4      	b.n	80027ac <rt_test_009_006_execute+0xbc>
 8002842:	f385 8811 	msr	BASEPRI, r5
 8002846:	2001      	movs	r0, #1
 8002848:	e7c2      	b.n	80027d0 <rt_test_009_006_execute+0xe0>
 800284a:	f385 8811 	msr	BASEPRI, r5
 800284e:	2501      	movs	r5, #1
 8002850:	e7d9      	b.n	8002806 <rt_test_009_006_execute+0x116>
 8002852:	bf00      	nop
 8002854:	20001f1c 	.word	0x20001f1c
 8002858:	2000142c 	.word	0x2000142c
 800285c:	0800a4f4 	.word	0x0800a4f4

08002860 <chGuardedPoolAllocTimeout>:
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
                                sysinterval_t timeout) {
 8002860:	b510      	push	{r4, lr}
 8002862:	2320      	movs	r3, #32
 8002864:	4604      	mov	r4, r0
 8002866:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 800286a:	6882      	ldr	r2, [r0, #8]
 800286c:	1e53      	subs	r3, r2, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	6083      	str	r3, [r0, #8]
 8002872:	db07      	blt.n	8002884 <chGuardedPoolAllocTimeout+0x24>
  objp = mp->next;
 8002874:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 8002876:	b1c8      	cbz	r0, 80028ac <chGuardedPoolAllocTimeout+0x4c>
    mp->next = mp->next->next;
 8002878:	6803      	ldr	r3, [r0, #0]
 800287a:	60e3      	str	r3, [r4, #12]
 800287c:	2300      	movs	r3, #0
 800287e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8002882:	bd10      	pop	{r4, pc}
    if (TIME_IMMEDIATE == timeout) {
 8002884:	4608      	mov	r0, r1
 8002886:	b1d9      	cbz	r1, 80028c0 <chGuardedPoolAllocTimeout+0x60>
    currp->u.wtsemp = sp;
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <chGuardedPoolAllocTimeout+0x64>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	625c      	str	r4, [r3, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 800288e:	6862      	ldr	r2, [r4, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8002890:	2005      	movs	r0, #5
 8002892:	e9c3 4200 	strd	r4, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8002896:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8002898:	6063      	str	r3, [r4, #4]
 800289a:	f7ff fed9 	bl	8002650 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 800289e:	2800      	cmp	r0, #0
 80028a0:	d0e8      	beq.n	8002874 <chGuardedPoolAllocTimeout+0x14>
    return NULL;
 80028a2:	2000      	movs	r0, #0
 80028a4:	2300      	movs	r3, #0
 80028a6:	f383 8811 	msr	BASEPRI, r3
}
 80028aa:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
 80028ac:	69a3      	ldr	r3, [r4, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f7      	beq.n	80028a2 <chGuardedPoolAllocTimeout+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 80028b2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80028b6:	4798      	blx	r3
 80028b8:	2300      	movs	r3, #0
 80028ba:	f383 8811 	msr	BASEPRI, r3
}
 80028be:	bd10      	pop	{r4, pc}
      sp->cnt++;
 80028c0:	60a2      	str	r2, [r4, #8]
  if (msg != MSG_OK) {
 80028c2:	e7db      	b.n	800287c <chGuardedPoolAllocTimeout+0x1c>
 80028c4:	2000142c 	.word	0x2000142c
	...

080028d0 <oslib_test_007_003_execute>:

static void oslib_test_007_003_execute(void) {
 80028d0:	b508      	push	{r3, lr}

  /* [7.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <oslib_test_007_003_execute+0x24>)
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80028d4:	4808      	ldr	r0, [pc, #32]	; (80028f8 <oslib_test_007_003_execute+0x28>)
  test_set_step(1);
 80028d6:	2201      	movs	r2, #1
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80028d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  test_set_step(1);
 80028dc:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80028de:	f7ff ffbf 	bl	8002860 <chGuardedPoolAllocTimeout>
 80028e2:	fab0 f080 	clz	r0, r0
  }
  test_end_step(1);
}
 80028e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80028ea:	4904      	ldr	r1, [pc, #16]	; (80028fc <oslib_test_007_003_execute+0x2c>)
 80028ec:	0940      	lsrs	r0, r0, #5
 80028ee:	f7fe ba07 	b.w	8000d00 <_test_assert>
 80028f2:	bf00      	nop
 80028f4:	20001f1c 	.word	0x20001f1c
 80028f8:	20000810 	.word	0x20000810
 80028fc:	08009864 	.word	0x08009864

08002900 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8002900:	b161      	cbz	r1, 800291c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8002902:	4a08      	ldr	r2, [pc, #32]	; (8002924 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8002904:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8002906:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8002908:	6844      	ldr	r4, [r0, #4]
 800290a:	4603      	mov	r3, r0
 800290c:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002910:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8002912:	6022      	str	r2, [r4, #0]
}
 8002914:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8002916:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002918:	f7ff be9a 	b.w	8002650 <chSchGoSleepTimeoutS>
}
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	2000142c 	.word	0x2000142c
	...

08002930 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002934:	b085      	sub	sp, #20
 8002936:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 800293a:	69c7      	ldr	r7, [r0, #28]
 800293c:	f04f 0920 	mov.w	r9, #32
 8002940:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8002944:	b3a2      	cbz	r2, 80029b0 <oqWriteTimeout+0x80>
 8002946:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800294a:	4604      	mov	r4, r0
 800294c:	460e      	mov	r6, r1
 800294e:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 8002952:	68a2      	ldr	r2, [r4, #8]
 8002954:	4593      	cmp	fp, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002956:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 800295a:	bf8c      	ite	hi
 800295c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 800295e:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002960:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8002964:	45a8      	cmp	r8, r5
 8002966:	d844      	bhi.n	80029f2 <oqWriteTimeout+0xc2>
  else if (n > s1) {
 8002968:	d229      	bcs.n	80029be <oqWriteTimeout+0x8e>
    s2 = n - s1;
 800296a:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800296e:	4642      	mov	r2, r8
 8002970:	4631      	mov	r1, r6
    s2 = n - s1;
 8002972:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002974:	f7fd fcc2 	bl	80002fc <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8002978:	eb06 0108 	add.w	r1, r6, r8
 800297c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002980:	68e0      	ldr	r0, [r4, #12]
 8002982:	4642      	mov	r2, r8
 8002984:	f7fd fcba 	bl	80002fc <memcpy>
  oqp->q_counter -= n;
 8002988:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 800298a:	68e1      	ldr	r1, [r4, #12]
 800298c:	4643      	mov	r3, r8
 800298e:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 8002990:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002992:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8002994:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8002996:	b10f      	cbz	r7, 800299c <oqWriteTimeout+0x6c>
        nfy(oqp);
 8002998:	4620      	mov	r0, r4
 800299a:	47b8      	blx	r7
 800299c:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80029a0:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80029a4:	442e      	add	r6, r5
 80029a6:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80029aa:	f1bb 0f00 	cmp.w	fp, #0
 80029ae:	d1d0      	bne.n	8002952 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 80029b0:	9803      	ldr	r0, [sp, #12]
 80029b2:	2300      	movs	r3, #0
 80029b4:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80029b8:	b005      	add	sp, #20
 80029ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80029be:	462a      	mov	r2, r5
 80029c0:	4631      	mov	r1, r6
 80029c2:	f7fd fc9b 	bl	80002fc <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80029c6:	68e2      	ldr	r2, [r4, #12]
 80029c8:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 80029ca:	68a2      	ldr	r2, [r4, #8]
 80029cc:	1b52      	subs	r2, r2, r5
 80029ce:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 80029d0:	2d00      	cmp	r5, #0
 80029d2:	d1e0      	bne.n	8002996 <oqWriteTimeout+0x66>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 80029d4:	9902      	ldr	r1, [sp, #8]
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7ff ff92 	bl	8002900 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 80029dc:	2800      	cmp	r0, #0
 80029de:	d0b8      	beq.n	8002952 <oqWriteTimeout+0x22>
 80029e0:	9b03      	ldr	r3, [sp, #12]
 80029e2:	eba3 000b 	sub.w	r0, r3, fp
 80029e6:	2300      	movs	r3, #0
 80029e8:	f383 8811 	msr	BASEPRI, r3
}
 80029ec:	b005      	add	sp, #20
 80029ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80029f2:	462a      	mov	r2, r5
 80029f4:	4631      	mov	r1, r6
 80029f6:	f7fd fc81 	bl	80002fc <memcpy>
    oqp->q_wrptr += n;
 80029fa:	6962      	ldr	r2, [r4, #20]
 80029fc:	442a      	add	r2, r5
 80029fe:	6162      	str	r2, [r4, #20]
 8002a00:	e7e3      	b.n	80029ca <oqWriteTimeout+0x9a>
 8002a02:	bf00      	nop
	...

08002a10 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002a10:	3030      	adds	r0, #48	; 0x30
 8002a12:	f7ff bf8d 	b.w	8002930 <oqWriteTimeout>
 8002a16:	bf00      	nop
	...

08002a20 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002a20:	3030      	adds	r0, #48	; 0x30
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	f7ff bf83 	b.w	8002930 <oqWriteTimeout>
 8002a2a:	bf00      	nop
 8002a2c:	0000      	movs	r0, r0
	...

08002a30 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a32:	4604      	mov	r4, r0
 8002a34:	460f      	mov	r7, r1
 8002a36:	4616      	mov	r6, r2
 8002a38:	2320      	movs	r3, #32
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002a3e:	e003      	b.n	8002a48 <oqPutTimeout+0x18>
 8002a40:	f7ff ff5e 	bl	8002900 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002a44:	2800      	cmp	r0, #0
 8002a46:	db18      	blt.n	8002a7a <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8002a48:	68a5      	ldr	r5, [r4, #8]
 8002a4a:	4631      	mov	r1, r6
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	2d00      	cmp	r5, #0
 8002a50:	d0f6      	beq.n	8002a40 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8002a52:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8002a54:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002a56:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8002a58:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8002a5a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8002a5c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002a5e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8002a60:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002a64:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002a66:	bf24      	itt	cs
 8002a68:	68e3      	ldrcs	r3, [r4, #12]
 8002a6a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8002a6c:	69e3      	ldr	r3, [r4, #28]
 8002a6e:	b103      	cbz	r3, 8002a72 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8002a70:	4798      	blx	r3
 8002a72:	2000      	movs	r0, #0
 8002a74:	f380 8811 	msr	BASEPRI, r0
}
 8002a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a7a:	f385 8811 	msr	BASEPRI, r5
 8002a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a80 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002a80:	3030      	adds	r0, #48	; 0x30
 8002a82:	f7ff bfd5 	b.w	8002a30 <oqPutTimeout>
 8002a86:	bf00      	nop
	...

08002a90 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002a90:	3030      	adds	r0, #48	; 0x30
 8002a92:	f04f 32ff 	mov.w	r2, #4294967295
 8002a96:	f7ff bfcb 	b.w	8002a30 <oqPutTimeout>
 8002a9a:	bf00      	nop
 8002a9c:	0000      	movs	r0, r0
	...

08002aa0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8002aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8002aaa:	69c7      	ldr	r7, [r0, #28]
 8002aac:	f04f 0920 	mov.w	r9, #32
 8002ab0:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002ab4:	2a00      	cmp	r2, #0
 8002ab6:	d034      	beq.n	8002b22 <iqReadTimeout+0x82>
 8002ab8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8002abc:	4604      	mov	r4, r0
 8002abe:	460e      	mov	r6, r1
 8002ac0:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 8002ac4:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002ac6:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8002ac8:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002aca:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8002acc:	bf8c      	ite	hi
 8002ace:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8002ad0:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002ad2:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8002ad6:	45a8      	cmp	r8, r5
 8002ad8:	d844      	bhi.n	8002b64 <iqReadTimeout+0xc4>
  else if (n > s1) {
 8002ada:	d229      	bcs.n	8002b30 <iqReadTimeout+0x90>
    s2 = n - s1;
 8002adc:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	4630      	mov	r0, r6
    s2 = n - s1;
 8002ae4:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002ae6:	f7fd fc09 	bl	80002fc <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8002aea:	eb06 0008 	add.w	r0, r6, r8
 8002aee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002af2:	68e1      	ldr	r1, [r4, #12]
 8002af4:	4642      	mov	r2, r8
 8002af6:	f7fd fc01 	bl	80002fc <memcpy>
  iqp->q_counter -= n;
 8002afa:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002afc:	68e1      	ldr	r1, [r4, #12]
 8002afe:	4643      	mov	r3, r8
 8002b00:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 8002b02:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002b04:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8002b06:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8002b08:	b10f      	cbz	r7, 8002b0e <iqReadTimeout+0x6e>
        nfy(iqp);
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	47b8      	blx	r7
 8002b0e:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8002b12:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002b16:	442e      	add	r6, r5
 8002b18:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002b1c:	f1bb 0f00 	cmp.w	fp, #0
 8002b20:	d1d0      	bne.n	8002ac4 <iqReadTimeout+0x24>
  if (n > iqGetFullI(iqp)) {
 8002b22:	9803      	ldr	r0, [sp, #12]
 8002b24:	2300      	movs	r3, #0
 8002b26:	f383 8811 	msr	BASEPRI, r3
}
 8002b2a:	b005      	add	sp, #20
 8002b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002b30:	462a      	mov	r2, r5
 8002b32:	4630      	mov	r0, r6
 8002b34:	f7fd fbe2 	bl	80002fc <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002b38:	68e2      	ldr	r2, [r4, #12]
 8002b3a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8002b3c:	68a2      	ldr	r2, [r4, #8]
 8002b3e:	1b52      	subs	r2, r2, r5
 8002b40:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002b42:	2d00      	cmp	r5, #0
 8002b44:	d1e0      	bne.n	8002b08 <iqReadTimeout+0x68>
 8002b46:	9902      	ldr	r1, [sp, #8]
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f7ff fed9 	bl	8002900 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	d0b8      	beq.n	8002ac4 <iqReadTimeout+0x24>
 8002b52:	9b03      	ldr	r3, [sp, #12]
 8002b54:	eba3 000b 	sub.w	r0, r3, fp
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f383 8811 	msr	BASEPRI, r3
}
 8002b5e:	b005      	add	sp, #20
 8002b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002b64:	462a      	mov	r2, r5
 8002b66:	4630      	mov	r0, r6
 8002b68:	f7fd fbc8 	bl	80002fc <memcpy>
    iqp->q_rdptr += n;
 8002b6c:	69a2      	ldr	r2, [r4, #24]
 8002b6e:	442a      	add	r2, r5
 8002b70:	61a2      	str	r2, [r4, #24]
 8002b72:	e7e3      	b.n	8002b3c <iqReadTimeout+0x9c>
	...

08002b80 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002b80:	300c      	adds	r0, #12
 8002b82:	f7ff bf8d 	b.w	8002aa0 <iqReadTimeout>
 8002b86:	bf00      	nop
	...

08002b90 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002b90:	300c      	adds	r0, #12
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295
 8002b96:	f7ff bf83 	b.w	8002aa0 <iqReadTimeout>
 8002b9a:	bf00      	nop
 8002b9c:	0000      	movs	r0, r0
	...

08002ba0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	4605      	mov	r5, r0
 8002ba6:	460e      	mov	r6, r1
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	e003      	b.n	8002bb6 <iqGetTimeout+0x16>
 8002bae:	f7ff fea7 	bl	8002900 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	db1a      	blt.n	8002bec <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8002bb6:	68ac      	ldr	r4, [r5, #8]
 8002bb8:	4631      	mov	r1, r6
 8002bba:	4628      	mov	r0, r5
 8002bbc:	2c00      	cmp	r4, #0
 8002bbe:	d0f6      	beq.n	8002bae <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8002bc0:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8002bc2:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8002bc4:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 8002bc6:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8002bc8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8002bca:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8002bcc:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 8002bce:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8002bd0:	bf28      	it	cs
 8002bd2:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8002bd4:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8002bd6:	bf28      	it	cs
 8002bd8:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 8002bda:	69eb      	ldr	r3, [r5, #28]
 8002bdc:	b10b      	cbz	r3, 8002be2 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8002bde:	4628      	mov	r0, r5
 8002be0:	4798      	blx	r3
 8002be2:	2300      	movs	r3, #0
 8002be4:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8002be8:	4620      	mov	r0, r4
}
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	f384 8811 	msr	BASEPRI, r4
 8002bf0:	bd70      	pop	{r4, r5, r6, pc}
 8002bf2:	bf00      	nop
	...

08002c00 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002c00:	300c      	adds	r0, #12
 8002c02:	f7ff bfcd 	b.w	8002ba0 <iqGetTimeout>
 8002c06:	bf00      	nop
	...

08002c10 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002c10:	300c      	adds	r0, #12
 8002c12:	f04f 31ff 	mov.w	r1, #4294967295
 8002c16:	f7ff bfc3 	b.w	8002ba0 <iqGetTimeout>
 8002c1a:	bf00      	nop
 8002c1c:	0000      	movs	r0, r0
	...

08002c20 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8002c20:	b508      	push	{r3, lr}
 8002c22:	4601      	mov	r1, r0
 8002c24:	2320      	movs	r3, #32
 8002c26:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8002c2a:	2008      	movs	r0, #8
 8002c2c:	f7ff fd10 	bl	8002650 <chSchGoSleepTimeoutS>
 8002c30:	2300      	movs	r3, #0
 8002c32:	f383 8811 	msr	BASEPRI, r3
}
 8002c36:	bd08      	pop	{r3, pc}
	...

08002c40 <test_execute.constprop.0>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8002c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c44:	4680      	mov	r8, r0
  int tseq, tcase;

  test_chp = stream;
 8002c46:	f8df b32c 	ldr.w	fp, [pc, #812]	; 8002f74 <test_execute.constprop.0+0x334>
 8002c4a:	4ba9      	ldr	r3, [pc, #676]	; (8002ef0 <test_execute.constprop.0+0x2b0>)
  test_println("");
 8002c4c:	48a9      	ldr	r0, [pc, #676]	; (8002ef4 <test_execute.constprop.0+0x2b4>)
  test_chp = stream;
 8002c4e:	f8cb 3000 	str.w	r3, [fp]
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8002c52:	b083      	sub	sp, #12
  test_println("");
 8002c54:	f7fe f99c 	bl	8000f90 <test_println>
  if (tsp->name != NULL) {
 8002c58:	f8d8 3000 	ldr.w	r3, [r8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 81f7 	beq.w	8003050 <test_execute.constprop.0+0x410>
 8002c62:	4ca5      	ldr	r4, [pc, #660]	; (8002ef8 <test_execute.constprop.0+0x2b8>)
  while (*msgp)
 8002c64:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002c66:	f8db 0000 	ldr.w	r0, [fp]
 8002c6a:	6803      	ldr	r3, [r0, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	4798      	blx	r3
  while (*msgp)
 8002c70:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002c74:	2900      	cmp	r1, #0
 8002c76:	d1f6      	bne.n	8002c66 <test_execute.constprop.0+0x26>
    test_print("*** ");
    test_println(tsp->name);
 8002c78:	f8d8 0000 	ldr.w	r0, [r8]
 8002c7c:	f7fe f988 	bl	8000f90 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 8002c80:	489e      	ldr	r0, [pc, #632]	; (8002efc <test_execute.constprop.0+0x2bc>)
 8002c82:	4c9f      	ldr	r4, [pc, #636]	; (8002f00 <test_execute.constprop.0+0x2c0>)
 8002c84:	f7fe f984 	bl	8000f90 <test_println>
  while (*msgp)
 8002c88:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002c8a:	f8db 0000 	ldr.w	r0, [fp]
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	4798      	blx	r3
  while (*msgp)
 8002c94:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002c98:	2900      	cmp	r1, #0
 8002c9a:	d1f6      	bne.n	8002c8a <test_execute.constprop.0+0x4a>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8002c9c:	4899      	ldr	r0, [pc, #612]	; (8002f04 <test_execute.constprop.0+0x2c4>)
 8002c9e:	4c9a      	ldr	r4, [pc, #616]	; (8002f08 <test_execute.constprop.0+0x2c8>)
 8002ca0:	f7fe f976 	bl	8000f90 <test_println>
  while (*msgp)
 8002ca4:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002ca6:	f8db 0000 	ldr.w	r0, [fp]
 8002caa:	6803      	ldr	r3, [r0, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4798      	blx	r3
  while (*msgp)
 8002cb0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002cb4:	2900      	cmp	r1, #0
 8002cb6:	d1f6      	bne.n	8002ca6 <test_execute.constprop.0+0x66>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8002cb8:	4894      	ldr	r0, [pc, #592]	; (8002f0c <test_execute.constprop.0+0x2cc>)
 8002cba:	4c95      	ldr	r4, [pc, #596]	; (8002f10 <test_execute.constprop.0+0x2d0>)
 8002cbc:	f7fe f968 	bl	8000f90 <test_println>
  while (*msgp)
 8002cc0:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002cc2:	f8db 0000 	ldr.w	r0, [fp]
 8002cc6:	6803      	ldr	r3, [r0, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	4798      	blx	r3
  while (*msgp)
 8002ccc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002cd0:	2900      	cmp	r1, #0
 8002cd2:	d1f6      	bne.n	8002cc2 <test_execute.constprop.0+0x82>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8002cd4:	488f      	ldr	r0, [pc, #572]	; (8002f14 <test_execute.constprop.0+0x2d4>)
  {
    extern uint8_t __text_base__,   __text_end__,
                   __rodata_base__, __rodata_end__,
                   __data_base__,   __data_end__,
                   __bss_base__,    __bss_end__;
    test_println("***");
 8002cd6:	4c90      	ldr	r4, [pc, #576]	; (8002f18 <test_execute.constprop.0+0x2d8>)
  test_println(BOARD_NAME);
 8002cd8:	f7fe f95a 	bl	8000f90 <test_println>
    test_println("***");
 8002cdc:	4887      	ldr	r0, [pc, #540]	; (8002efc <test_execute.constprop.0+0x2bc>)
 8002cde:	f7fe f957 	bl	8000f90 <test_println>
  while (*msgp)
 8002ce2:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002ce4:	f8db 0000 	ldr.w	r0, [fp]
 8002ce8:	6803      	ldr	r3, [r0, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4798      	blx	r3
  while (*msgp)
 8002cee:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002cf2:	2900      	cmp	r1, #0
 8002cf4:	d1f6      	bne.n	8002ce4 <test_execute.constprop.0+0xa4>
    test_print("*** Text size:    ");
    test_printn((uint32_t)(&__text_end__ - &__text_base__));
 8002cf6:	4b89      	ldr	r3, [pc, #548]	; (8002f1c <test_execute.constprop.0+0x2dc>)
 8002cf8:	4889      	ldr	r0, [pc, #548]	; (8002f20 <test_execute.constprop.0+0x2e0>)
    test_println(" bytes");
 8002cfa:	4c8a      	ldr	r4, [pc, #552]	; (8002f24 <test_execute.constprop.0+0x2e4>)
    test_printn((uint32_t)(&__text_end__ - &__text_base__));
 8002cfc:	1ac0      	subs	r0, r0, r3
 8002cfe:	f7fe f897 	bl	8000e30 <test_printn>
    test_println(" bytes");
 8002d02:	4889      	ldr	r0, [pc, #548]	; (8002f28 <test_execute.constprop.0+0x2e8>)
 8002d04:	f7fe f944 	bl	8000f90 <test_println>
  while (*msgp)
 8002d08:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002d0a:	f8db 0000 	ldr.w	r0, [fp]
 8002d0e:	6803      	ldr	r3, [r0, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	4798      	blx	r3
  while (*msgp)
 8002d14:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002d18:	2900      	cmp	r1, #0
 8002d1a:	d1f6      	bne.n	8002d0a <test_execute.constprop.0+0xca>
    test_print("*** RO data size: ");
    test_printn((uint32_t)(&__rodata_end__ - &__rodata_base__));
 8002d1c:	4b83      	ldr	r3, [pc, #524]	; (8002f2c <test_execute.constprop.0+0x2ec>)
 8002d1e:	4884      	ldr	r0, [pc, #528]	; (8002f30 <test_execute.constprop.0+0x2f0>)
    test_println(" bytes");
 8002d20:	4c84      	ldr	r4, [pc, #528]	; (8002f34 <test_execute.constprop.0+0x2f4>)
    test_printn((uint32_t)(&__rodata_end__ - &__rodata_base__));
 8002d22:	1ac0      	subs	r0, r0, r3
 8002d24:	f7fe f884 	bl	8000e30 <test_printn>
    test_println(" bytes");
 8002d28:	487f      	ldr	r0, [pc, #508]	; (8002f28 <test_execute.constprop.0+0x2e8>)
 8002d2a:	f7fe f931 	bl	8000f90 <test_println>
  while (*msgp)
 8002d2e:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002d30:	f8db 0000 	ldr.w	r0, [fp]
 8002d34:	6803      	ldr	r3, [r0, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4798      	blx	r3
  while (*msgp)
 8002d3a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002d3e:	2900      	cmp	r1, #0
 8002d40:	d1f6      	bne.n	8002d30 <test_execute.constprop.0+0xf0>
    test_print("*** Data size:    ");
    test_printn((uint32_t)(&__data_end__ - &__data_base__));
 8002d42:	4b7d      	ldr	r3, [pc, #500]	; (8002f38 <test_execute.constprop.0+0x2f8>)
 8002d44:	487d      	ldr	r0, [pc, #500]	; (8002f3c <test_execute.constprop.0+0x2fc>)
    test_println(" bytes");
 8002d46:	4c7e      	ldr	r4, [pc, #504]	; (8002f40 <test_execute.constprop.0+0x300>)
    test_printn((uint32_t)(&__data_end__ - &__data_base__));
 8002d48:	1ac0      	subs	r0, r0, r3
 8002d4a:	f7fe f871 	bl	8000e30 <test_printn>
    test_println(" bytes");
 8002d4e:	4876      	ldr	r0, [pc, #472]	; (8002f28 <test_execute.constprop.0+0x2e8>)
 8002d50:	f7fe f91e 	bl	8000f90 <test_println>
  while (*msgp)
 8002d54:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002d56:	f8db 0000 	ldr.w	r0, [fp]
 8002d5a:	6803      	ldr	r3, [r0, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	4798      	blx	r3
  while (*msgp)
 8002d60:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002d64:	2900      	cmp	r1, #0
 8002d66:	d1f6      	bne.n	8002d56 <test_execute.constprop.0+0x116>
    test_print("*** BSS size:     ");
    test_printn((uint32_t)(&__bss_end__ - &__bss_base__));
 8002d68:	4b76      	ldr	r3, [pc, #472]	; (8002f44 <test_execute.constprop.0+0x304>)
 8002d6a:	4877      	ldr	r0, [pc, #476]	; (8002f48 <test_execute.constprop.0+0x308>)
 8002d6c:	9101      	str	r1, [sp, #4]
 8002d6e:	1ac0      	subs	r0, r0, r3
 8002d70:	f7fe f85e 	bl	8000e30 <test_printn>
    test_println(" bytes");
 8002d74:	486c      	ldr	r0, [pc, #432]	; (8002f28 <test_execute.constprop.0+0x2e8>)
 8002d76:	f7fe f90b 	bl	8000f90 <test_println>
  }
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 8002d7a:	485e      	ldr	r0, [pc, #376]	; (8002ef4 <test_execute.constprop.0+0x2b4>)
 8002d7c:	f7fe f908 	bl	8000f90 <test_println>

  test_global_fail = false;
  tseq = 0;
  while (tsp->sequences[tseq] != NULL) {
 8002d80:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_global_fail = false;
 8002d84:	4a71      	ldr	r2, [pc, #452]	; (8002f4c <test_execute.constprop.0+0x30c>)
  while (tsp->sequences[tseq] != NULL) {
 8002d86:	681b      	ldr	r3, [r3, #0]
  test_global_fail = false;
 8002d88:	9901      	ldr	r1, [sp, #4]
 8002d8a:	7011      	strb	r1, [r2, #0]
  while (tsp->sequences[tseq] != NULL) {
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80fa 	beq.w	8002f86 <test_execute.constprop.0+0x346>
 8002d92:	468a      	mov	sl, r1
  tseq = 0;
 8002d94:	4689      	mov	r9, r1
 8002d96:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '=');
 8002d98:	f8db 0000 	ldr.w	r0, [fp]
 8002d9c:	6803      	ldr	r3, [r0, #0]
 8002d9e:	213d      	movs	r1, #61	; 0x3d
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8002da4:	3c01      	subs	r4, #1
 8002da6:	d1f7      	bne.n	8002d98 <test_execute.constprop.0+0x158>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8002da8:	f8db 0000 	ldr.w	r0, [fp]
 8002dac:	4968      	ldr	r1, [pc, #416]	; (8002f50 <test_execute.constprop.0+0x310>)
 8002dae:	6803      	ldr	r3, [r0, #0]
 8002db0:	4c68      	ldr	r4, [pc, #416]	; (8002f54 <test_execute.constprop.0+0x314>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	4798      	blx	r3
  while (*msgp)
 8002db8:	213d      	movs	r1, #61	; 0x3d
    streamPut(test_chp, *msgp++);
 8002dba:	f8db 0000 	ldr.w	r0, [fp]
 8002dbe:	6803      	ldr	r3, [r0, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	4798      	blx	r3
  while (*msgp)
 8002dc4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002dc8:	2900      	cmp	r1, #0
 8002dca:	d1f6      	bne.n	8002dba <test_execute.constprop.0+0x17a>
#if TEST_CFG_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 8002dcc:	f109 0901 	add.w	r9, r9, #1
 8002dd0:	4648      	mov	r0, r9
 8002dd2:	4c61      	ldr	r4, [pc, #388]	; (8002f58 <test_execute.constprop.0+0x318>)
 8002dd4:	f7fe f82c 	bl	8000e30 <test_printn>
  while (*msgp)
 8002dd8:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8002dda:	f8db 0000 	ldr.w	r0, [fp]
 8002dde:	6803      	ldr	r3, [r0, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	4798      	blx	r3
  while (*msgp)
 8002de4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002de8:	2900      	cmp	r1, #0
 8002dea:	d1f6      	bne.n	8002dda <test_execute.constprop.0+0x19a>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 8002dec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002df0:	f853 300a 	ldr.w	r3, [r3, sl]
 8002df4:	681c      	ldr	r4, [r3, #0]
  while (*msgp)
 8002df6:	7821      	ldrb	r1, [r4, #0]
 8002df8:	b141      	cbz	r1, 8002e0c <test_execute.constprop.0+0x1cc>
    streamPut(test_chp, *msgp++);
 8002dfa:	f8db 0000 	ldr.w	r0, [fp]
 8002dfe:	6803      	ldr	r3, [r0, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	4798      	blx	r3
  while (*msgp)
 8002e04:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002e08:	2900      	cmp	r1, #0
 8002e0a:	d1f6      	bne.n	8002dfa <test_execute.constprop.0+0x1ba>
    test_println(")");
 8002e0c:	4853      	ldr	r0, [pc, #332]	; (8002f5c <test_execute.constprop.0+0x31c>)
 8002e0e:	f7fe f8bf 	bl	8000f90 <test_println>
#endif
    tcase = 0;
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8002e12:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002e16:	f852 300a 	ldr.w	r3, [r2, sl]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80aa 	beq.w	8002f78 <test_execute.constprop.0+0x338>
 8002e24:	4d4e      	ldr	r5, [pc, #312]	; (8002f60 <test_execute.constprop.0+0x320>)
    tcase = 0;
 8002e26:	2600      	movs	r6, #0
      print_line();
 8002e28:	4f4e      	ldr	r7, [pc, #312]	; (8002f64 <test_execute.constprop.0+0x324>)
 8002e2a:	f7fe f939 	bl	80010a0 <print_line>
 8002e2e:	00b4      	lsls	r4, r6, #2
  while (*msgp)
 8002e30:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8002e32:	f8db 0000 	ldr.w	r0, [fp]
 8002e36:	6803      	ldr	r3, [r0, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	4798      	blx	r3
  while (*msgp)
 8002e3c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002e40:	2900      	cmp	r1, #0
 8002e42:	d1f6      	bne.n	8002e32 <test_execute.constprop.0+0x1f2>
      test_print("--- Test Case ");
      test_printn(tseq + 1);
 8002e44:	4648      	mov	r0, r9
 8002e46:	f7fd fff3 	bl	8000e30 <test_printn>
    streamPut(test_chp, *msgp++);
 8002e4a:	f8db 0000 	ldr.w	r0, [fp]
      test_print(".");
      test_printn(tcase + 1);
 8002e4e:	4f42      	ldr	r7, [pc, #264]	; (8002f58 <test_execute.constprop.0+0x318>)
    streamPut(test_chp, *msgp++);
 8002e50:	6803      	ldr	r3, [r0, #0]
 8002e52:	212e      	movs	r1, #46	; 0x2e
 8002e54:	68db      	ldr	r3, [r3, #12]
      test_printn(tcase + 1);
 8002e56:	3601      	adds	r6, #1
    streamPut(test_chp, *msgp++);
 8002e58:	4798      	blx	r3
      test_printn(tcase + 1);
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	f7fd ffe8 	bl	8000e30 <test_printn>
  while (*msgp)
 8002e60:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8002e62:	f8db 0000 	ldr.w	r0, [fp]
 8002e66:	6803      	ldr	r3, [r0, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	4798      	blx	r3
  while (*msgp)
 8002e6c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002e70:	2900      	cmp	r1, #0
 8002e72:	d1f6      	bne.n	8002e62 <test_execute.constprop.0+0x222>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 8002e74:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002e78:	f853 300a 	ldr.w	r3, [r3, sl]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	591b      	ldr	r3, [r3, r4]
 8002e80:	681f      	ldr	r7, [r3, #0]
  while (*msgp)
 8002e82:	7839      	ldrb	r1, [r7, #0]
 8002e84:	b141      	cbz	r1, 8002e98 <test_execute.constprop.0+0x258>
    streamPut(test_chp, *msgp++);
 8002e86:	f8db 0000 	ldr.w	r0, [fp]
 8002e8a:	6803      	ldr	r3, [r0, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4798      	blx	r3
  while (*msgp)
 8002e90:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002e94:	2900      	cmp	r1, #0
 8002e96:	d1f6      	bne.n	8002e86 <test_execute.constprop.0+0x246>
      test_println(")");
 8002e98:	4830      	ldr	r0, [pc, #192]	; (8002f5c <test_execute.constprop.0+0x31c>)
 8002e9a:	f7fe f879 	bl	8000f90 <test_println>
  chThdSleep(delay);
 8002e9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ea2:	f7ff febd 	bl	8002c20 <chThdSleep>
#if TEST_CFG_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_CFG_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002ea6:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_tokp = test_tokens_buffer;
 8002eaa:	4a2f      	ldr	r2, [pc, #188]	; (8002f68 <test_execute.constprop.0+0x328>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002eac:	f853 300a 	ldr.w	r3, [r3, sl]
  test_local_fail = false;
 8002eb0:	492e      	ldr	r1, [pc, #184]	; (8002f6c <test_execute.constprop.0+0x32c>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002eb2:	685b      	ldr	r3, [r3, #4]
  test_tokp = test_tokens_buffer;
 8002eb4:	602a      	str	r2, [r5, #0]
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002eb6:	591f      	ldr	r7, [r3, r4]
  if (tcp->setup != NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
  test_local_fail = false;
 8002eba:	2200      	movs	r2, #0
 8002ebc:	700a      	strb	r2, [r1, #0]
  if (tcp->setup != NULL)
 8002ebe:	b103      	cbz	r3, 8002ec2 <test_execute.constprop.0+0x282>
    tcp->setup();
 8002ec0:	4798      	blx	r3
  tcp->execute();
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	b103      	cbz	r3, 8002ecc <test_execute.constprop.0+0x28c>
    tcp->teardown();
 8002eca:	4798      	blx	r3
      if (test_local_fail) {
 8002ecc:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <test_execute.constprop.0+0x32c>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d174      	bne.n	8002fbe <test_execute.constprop.0+0x37e>
        test_print("] \"");
        test_print(test_failure_message);
        test_println("\")");
      }
      else {
        test_println("--- Result: SUCCESS");
 8002ed4:	4826      	ldr	r0, [pc, #152]	; (8002f70 <test_execute.constprop.0+0x330>)
 8002ed6:	f7fe f85b 	bl	8000f90 <test_println>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8002eda:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002ede:	f852 300a 	ldr.w	r3, [r2, sl]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	441c      	add	r4, r3
 8002ee6:	6863      	ldr	r3, [r4, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d19d      	bne.n	8002e28 <test_execute.constprop.0+0x1e8>
 8002eec:	e044      	b.n	8002f78 <test_execute.constprop.0+0x338>
 8002eee:	bf00      	nop
 8002ef0:	200008fc 	.word	0x200008fc
 8002ef4:	0800a3e0 	.word	0x0800a3e0
 8002ef8:	0800a504 	.word	0x0800a504
 8002efc:	0800a600 	.word	0x0800a600
 8002f00:	0800a50c 	.word	0x0800a50c
 8002f04:	0800a604 	.word	0x0800a604
 8002f08:	0800a520 	.word	0x0800a520
 8002f0c:	0800a61c 	.word	0x0800a61c
 8002f10:	0800a534 	.word	0x0800a534
 8002f14:	0800a648 	.word	0x0800a648
 8002f18:	0800a548 	.word	0x0800a548
 8002f1c:	080001f0 	.word	0x080001f0
 8002f20:	08009828 	.word	0x08009828
 8002f24:	0800a55c 	.word	0x0800a55c
 8002f28:	08009d04 	.word	0x08009d04
 8002f2c:	08009828 	.word	0x08009828
 8002f30:	0800bf9c 	.word	0x0800bf9c
 8002f34:	0800a570 	.word	0x0800a570
 8002f38:	20000800 	.word	0x20000800
 8002f3c:	200008dc 	.word	0x200008dc
 8002f40:	0800a584 	.word	0x0800a584
 8002f44:	200008e0 	.word	0x200008e0
 8002f48:	200024d0 	.word	0x200024d0
 8002f4c:	20001e78 	.word	0x20001e78
 8002f50:	0800983c 	.word	0x0800983c
 8002f54:	0800a598 	.word	0x0800a598
 8002f58:	0800a5ac 	.word	0x0800a5ac
 8002f5c:	0800a670 	.word	0x0800a670
 8002f60:	20001f30 	.word	0x20001f30
 8002f64:	0800a5b0 	.word	0x0800a5b0
 8002f68:	20001f20 	.word	0x20001f20
 8002f6c:	20001f18 	.word	0x20001f18
 8002f70:	0800a678 	.word	0x0800a678
 8002f74:	20001e70 	.word	0x20001e70
  while (tsp->sequences[tseq] != NULL) {
 8002f78:	f10a 0a04 	add.w	sl, sl, #4
 8002f7c:	f852 300a 	ldr.w	r3, [r2, sl]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f47f af08 	bne.w	8002d96 <test_execute.constprop.0+0x156>
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 8002f86:	f7fe f88b 	bl	80010a0 <print_line>
  test_println("");
 8002f8a:	4c33      	ldr	r4, [pc, #204]	; (8003058 <test_execute.constprop.0+0x418>)
 8002f8c:	4833      	ldr	r0, [pc, #204]	; (800305c <test_execute.constprop.0+0x41c>)
 8002f8e:	f7fd ffff 	bl	8000f90 <test_println>
  while (*msgp)
 8002f92:	2146      	movs	r1, #70	; 0x46
    streamPut(test_chp, *msgp++);
 8002f94:	f8db 0000 	ldr.w	r0, [fp]
 8002f98:	6803      	ldr	r3, [r0, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4798      	blx	r3
  while (*msgp)
 8002f9e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002fa2:	2900      	cmp	r1, #0
 8002fa4:	d1f6      	bne.n	8002f94 <test_execute.constprop.0+0x354>
  test_print("Final result: ");
  if (test_global_fail)
 8002fa6:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <test_execute.constprop.0+0x420>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d04c      	beq.n	8003048 <test_execute.constprop.0+0x408>
    test_println("FAILURE");
 8002fae:	482d      	ldr	r0, [pc, #180]	; (8003064 <test_execute.constprop.0+0x424>)
 8002fb0:	f7fd ffee 	bl	8000f90 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 8002fb4:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <test_execute.constprop.0+0x420>)
 8002fb6:	7818      	ldrb	r0, [r3, #0]
 8002fb8:	b003      	add	sp, #12
 8002fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (test_local_fail) {
 8002fbe:	4f2a      	ldr	r7, [pc, #168]	; (8003068 <test_execute.constprop.0+0x428>)
  while (*msgp)
 8002fc0:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8002fc2:	f8db 0000 	ldr.w	r0, [fp]
 8002fc6:	6803      	ldr	r3, [r0, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	4798      	blx	r3
  while (*msgp)
 8002fcc:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002fd0:	2900      	cmp	r1, #0
 8002fd2:	d1f6      	bne.n	8002fc2 <test_execute.constprop.0+0x382>
        test_printn(test_step);
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <test_execute.constprop.0+0x42c>)
 8002fd6:	4f26      	ldr	r7, [pc, #152]	; (8003070 <test_execute.constprop.0+0x430>)
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	f7fd ff29 	bl	8000e30 <test_printn>
  while (*msgp)
 8002fde:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8002fe0:	f8db 0000 	ldr.w	r0, [fp]
 8002fe4:	6803      	ldr	r3, [r0, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4798      	blx	r3
  while (*msgp)
 8002fea:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002fee:	2900      	cmp	r1, #0
 8002ff0:	d1f6      	bne.n	8002fe0 <test_execute.constprop.0+0x3a0>
  while (cp < test_tokp)
 8002ff2:	682b      	ldr	r3, [r5, #0]
 8002ff4:	4a1f      	ldr	r2, [pc, #124]	; (8003074 <test_execute.constprop.0+0x434>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d90a      	bls.n	8003010 <test_execute.constprop.0+0x3d0>
  char *cp = test_tokens_buffer;
 8002ffa:	4f1e      	ldr	r7, [pc, #120]	; (8003074 <test_execute.constprop.0+0x434>)
    streamPut(test_chp, *cp++);
 8002ffc:	f8db 0000 	ldr.w	r0, [fp]
 8003000:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003004:	6803      	ldr	r3, [r0, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4798      	blx	r3
  while (cp < test_tokp)
 800300a:	682b      	ldr	r3, [r5, #0]
 800300c:	429f      	cmp	r7, r3
 800300e:	d3f5      	bcc.n	8002ffc <test_execute.constprop.0+0x3bc>
  while (*msgp)
 8003010:	4f19      	ldr	r7, [pc, #100]	; (8003078 <test_execute.constprop.0+0x438>)
 8003012:	215d      	movs	r1, #93	; 0x5d
    streamPut(test_chp, *msgp++);
 8003014:	f8db 0000 	ldr.w	r0, [fp]
 8003018:	6803      	ldr	r3, [r0, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4798      	blx	r3
  while (*msgp)
 800301e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8003022:	2900      	cmp	r1, #0
 8003024:	d1f6      	bne.n	8003014 <test_execute.constprop.0+0x3d4>
        test_print(test_failure_message);
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <test_execute.constprop.0+0x43c>)
 8003028:	681f      	ldr	r7, [r3, #0]
  while (*msgp)
 800302a:	7839      	ldrb	r1, [r7, #0]
 800302c:	b141      	cbz	r1, 8003040 <test_execute.constprop.0+0x400>
    streamPut(test_chp, *msgp++);
 800302e:	f8db 0000 	ldr.w	r0, [fp]
 8003032:	6803      	ldr	r3, [r0, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4798      	blx	r3
  while (*msgp)
 8003038:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800303c:	2900      	cmp	r1, #0
 800303e:	d1f6      	bne.n	800302e <test_execute.constprop.0+0x3ee>
        test_println("\")");
 8003040:	480f      	ldr	r0, [pc, #60]	; (8003080 <test_execute.constprop.0+0x440>)
 8003042:	f7fd ffa5 	bl	8000f90 <test_println>
 8003046:	e748      	b.n	8002eda <test_execute.constprop.0+0x29a>
    test_println("SUCCESS");
 8003048:	480e      	ldr	r0, [pc, #56]	; (8003084 <test_execute.constprop.0+0x444>)
 800304a:	f7fd ffa1 	bl	8000f90 <test_println>
 800304e:	e7b1      	b.n	8002fb4 <test_execute.constprop.0+0x374>
    test_println("*** Test Suite");
 8003050:	480d      	ldr	r0, [pc, #52]	; (8003088 <test_execute.constprop.0+0x448>)
 8003052:	f7fd ff9d 	bl	8000f90 <test_println>
 8003056:	e613      	b.n	8002c80 <test_execute.constprop.0+0x40>
 8003058:	0800a5e0 	.word	0x0800a5e0
 800305c:	0800a3e0 	.word	0x0800a3e0
 8003060:	20001e78 	.word	0x20001e78
 8003064:	0800a68c 	.word	0x0800a68c
 8003068:	0800a5c0 	.word	0x0800a5c0
 800306c:	20001f1c 	.word	0x20001f1c
 8003070:	0800a5d8 	.word	0x0800a5d8
 8003074:	20001f20 	.word	0x20001f20
 8003078:	0800a5dc 	.word	0x0800a5dc
 800307c:	20001e74 	.word	0x20001e74
 8003080:	0800a674 	.word	0x0800a674
 8003084:	0800a684 	.word	0x0800a684
 8003088:	0800a5f0 	.word	0x0800a5f0
 800308c:	00000000 	.word	0x00000000

08003090 <job_slow>:

static jobs_queue_t jq;
static job_descriptor_t jobs[JOBS_QUEUE_SIZE];
static msg_t msg_queue[JOBS_QUEUE_SIZE];

static void job_slow(void *arg) {
 8003090:	b508      	push	{r3, lr}

  test_emit_token((int)arg);
 8003092:	b2c0      	uxtb	r0, r0
 8003094:	f7fd fedc 	bl	8000e50 <test_emit_token>
  chThdSleepMilliseconds(10);
}
 8003098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chThdSleepMilliseconds(10);
 800309c:	2064      	movs	r0, #100	; 0x64
 800309e:	f7ff bdbf 	b.w	8002c20 <chThdSleep>
 80030a2:	bf00      	nop
	...

080030b0 <rt_test_004_001_execute>:
 * - [4.1.5] Function chThdSleepUntil() is tested with a timeline of
 *   "now" + 100 ticks.
 * .
 */

static void rt_test_004_001_execute(void) {
 80030b0:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  /* [4.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 80030b2:	4e2c      	ldr	r6, [pc, #176]	; (8003164 <rt_test_004_001_execute+0xb4>)
 80030b4:	2301      	movs	r3, #1
  return (systime_t)STM32_ST_TIM->CNT;
 80030b6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80030ba:	6033      	str	r3, [r6, #0]
 80030bc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  {
    time = chVTGetSystemTimeX();
    chThdSleep(100);
 80030be:	2064      	movs	r0, #100	; 0x64
 80030c0:	f7ff fdae 	bl	8002c20 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, 100),
 80030c4:	f104 0167 	add.w	r1, r4, #103	; 0x67
 80030c8:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80030cc:	f7fd fba8 	bl	8000820 <_test_assert_time_window.constprop.0>
 80030d0:	b100      	cbz	r0, 80030d4 <rt_test_004_001_execute+0x24>
    test_assert_time_window(chTimeAddX(time, 100),
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
  test_end_step(5);
}
 80030d2:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 80030d4:	2302      	movs	r3, #2
 80030d6:	6033      	str	r3, [r6, #0]
 80030d8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 80030da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030de:	f7ff fd9f 	bl	8002c20 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 80030e2:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 80030e6:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 80030ea:	f7fd fb99 	bl	8000820 <_test_assert_time_window.constprop.0>
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d1ef      	bne.n	80030d2 <rt_test_004_001_execute+0x22>
  test_set_step(3);
 80030f2:	2303      	movs	r3, #3
 80030f4:	6033      	str	r3, [r6, #0]
 80030f6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
 80030f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030fc:	f7ff fd90 	bl	8002c20 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 8003100:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8003104:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8003108:	f7fd fb8a 	bl	8000820 <_test_assert_time_window.constprop.0>
 800310c:	2800      	cmp	r0, #0
 800310e:	d1e0      	bne.n	80030d2 <rt_test_004_001_execute+0x22>
  test_set_step(4);
 8003110:	2304      	movs	r3, #4
 8003112:	6033      	str	r3, [r6, #0]
 8003114:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
 8003116:	f242 7010 	movw	r0, #10000	; 0x2710
 800311a:	f7ff fd81 	bl	8002c20 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 800311e:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 8003122:	4608      	mov	r0, r1
 8003124:	3010      	adds	r0, #16
 8003126:	3113      	adds	r1, #19
 8003128:	f7fd fb7a 	bl	8000820 <_test_assert_time_window.constprop.0>
 800312c:	2800      	cmp	r0, #0
 800312e:	d1d0      	bne.n	80030d2 <rt_test_004_001_execute+0x22>
  test_set_step(5);
 8003130:	2305      	movs	r3, #5
 8003132:	6033      	str	r3, [r6, #0]
 8003134:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8003136:	2320      	movs	r3, #32
 8003138:	f106 0464 	add.w	r4, r6, #100	; 0x64
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	6a69      	ldr	r1, [r5, #36]	; 0x24
  if (interval > (sysinterval_t)0) {
 8003142:	1a61      	subs	r1, r4, r1
 8003144:	d109      	bne.n	800315a <rt_test_004_001_execute+0xaa>
 8003146:	2300      	movs	r3, #0
 8003148:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(chTimeAddX(time, 100),
 800314c:	f106 0167 	add.w	r1, r6, #103	; 0x67
 8003150:	4620      	mov	r0, r4
}
 8003152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(chTimeAddX(time, 100),
 8003156:	f7fd bb63 	b.w	8000820 <_test_assert_time_window.constprop.0>
 800315a:	2008      	movs	r0, #8
 800315c:	f7ff fa78 	bl	8002650 <chSchGoSleepTimeoutS>
 8003160:	e7f1      	b.n	8003146 <rt_test_004_001_execute+0x96>
 8003162:	bf00      	nop
 8003164:	20001f1c 	.word	0x20001f1c
	...

08003170 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8003170:	b508      	push	{r3, lr}

  chThdSleep(1);
 8003172:	2001      	movs	r0, #1
 8003174:	f7ff fd54 	bl	8002c20 <chThdSleep>
 8003178:	2320      	movs	r3, #32
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003182:	2300      	movs	r3, #0
 8003184:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8003186:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 800318a:	bd08      	pop	{r3, pc}
 800318c:	0000      	movs	r0, r0
	...

08003190 <rt_test_011_009_execute>:
static void rt_test_011_009_execute(void) {
 8003190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8003194:	f8df b090 	ldr.w	fp, [pc, #144]	; 8003228 <rt_test_011_009_execute+0x98>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8003198:	4f1e      	ldr	r7, [pc, #120]	; (8003214 <rt_test_011_009_execute+0x84>)
 800319a:	4e1f      	ldr	r6, [pc, #124]	; (8003218 <rt_test_011_009_execute+0x88>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 800319c:	4d1f      	ldr	r5, [pc, #124]	; (800321c <rt_test_011_009_execute+0x8c>)
  test_set_step(1);
 800319e:	2301      	movs	r3, #1
 80031a0:	f8cb 3000 	str.w	r3, [fp]
    start = test_wait_tick();
 80031a4:	f7ff ffe4 	bl	8003170 <test_wait_tick>
    n = 0;
 80031a8:	2400      	movs	r4, #0
    start = test_wait_tick();
 80031aa:	4680      	mov	r8, r0
      chVTDoSetI(&vt1, 1, tmo, NULL);
 80031ac:	46a2      	mov	sl, r4
 80031ae:	f04f 0920 	mov.w	r9, #32
 80031b2:	f389 8811 	msr	BASEPRI, r9
 80031b6:	2300      	movs	r3, #0
 80031b8:	463a      	mov	r2, r7
 80031ba:	4630      	mov	r0, r6
 80031bc:	2101      	movs	r1, #1
 80031be:	f7fe fb67 	bl	8001890 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 80031c2:	463a      	mov	r2, r7
 80031c4:	2300      	movs	r3, #0
 80031c6:	f242 7110 	movw	r1, #10000	; 0x2710
 80031ca:	4628      	mov	r0, r5
 80031cc:	f7fe fb60 	bl	8001890 <chVTDoSetI>
      chVTDoResetI(&vt1);
 80031d0:	4630      	mov	r0, r6
 80031d2:	f7fe fb1d 	bl	8001810 <chVTDoResetI>
      chVTDoResetI(&vt2);
 80031d6:	4628      	mov	r0, r5
 80031d8:	f7fe fb1a 	bl	8001810 <chVTDoResetI>
 80031dc:	f38a 8811 	msr	BASEPRI, sl
 80031e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80031e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80031ea:	eba3 0308 	sub.w	r3, r3, r8
 80031ee:	4293      	cmp	r3, r2
      n++;
 80031f0:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80031f4:	d9dd      	bls.n	80031b2 <rt_test_011_009_execute+0x22>
  test_set_step(2);
 80031f6:	2302      	movs	r3, #2
    test_print("--- Score : ");
 80031f8:	4809      	ldr	r0, [pc, #36]	; (8003220 <rt_test_011_009_execute+0x90>)
  test_set_step(2);
 80031fa:	f8cb 3000 	str.w	r3, [fp]
    test_print("--- Score : ");
 80031fe:	f7fd fee7 	bl	8000fd0 <test_print>
    test_printn(n * 2);
 8003202:	0060      	lsls	r0, r4, #1
 8003204:	f7fd fe14 	bl	8000e30 <test_printn>
}
 8003208:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 800320c:	4805      	ldr	r0, [pc, #20]	; (8003224 <rt_test_011_009_execute+0x94>)
 800320e:	f7fd bebf 	b.w	8000f90 <test_println>
 8003212:	bf00      	nop
 8003214:	08000b11 	.word	0x08000b11
 8003218:	20001f4c 	.word	0x20001f4c
 800321c:	20001f60 	.word	0x20001f60
 8003220:	0800a694 	.word	0x0800a694
 8003224:	0800a6a4 	.word	0x0800a6a4
 8003228:	20001f1c 	.word	0x20001f1c
 800322c:	00000000 	.word	0x00000000

08003230 <chMsgWaitS>:
 *
 * @return              A pointer to the thread carrying the message.
 *
 * @sclass
 */
thread_t *chMsgWaitS(void) {
 8003230:	b510      	push	{r4, lr}
  thread_t *tp;

  chDbgCheckClassS();

  if (!chMsgIsPendingI(currp)) {
 8003232:	4c0b      	ldr	r4, [pc, #44]	; (8003260 <chMsgWaitS+0x30>)
 8003234:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 8003236:	4613      	mov	r3, r2
 8003238:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 800323c:	4298      	cmp	r0, r3
 800323e:	d006      	beq.n	800324e <chMsgWaitS+0x1e>
  tqp->next             = tp->queue.next;
 8003240:	6801      	ldr	r1, [r0, #0]
 8003242:	62d1      	str	r1, [r2, #44]	; 0x2c
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 8003244:	220d      	movs	r2, #13
  tqp->next->queue.prev = (thread_t *)tqp;
 8003246:	604b      	str	r3, [r1, #4]
 8003248:	f880 2020 	strb.w	r2, [r0, #32]

  return tp;
}
 800324c:	bd10      	pop	{r4, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 800324e:	200e      	movs	r0, #14
 8003250:	f7ff f96e 	bl	8002530 <chSchGoSleepS>
 8003254:	69a2      	ldr	r2, [r4, #24]
 8003256:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8003258:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 800325c:	e7f0      	b.n	8003240 <chMsgWaitS+0x10>
 800325e:	bf00      	nop
 8003260:	2000142c 	.word	0x2000142c
	...

08003270 <_ZN19MessageServerThread4mainEv>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8003270:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <_ZN19MessageServerThread4mainEv+0x54>)
 8003272:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <_ZN19MessageServerThread4mainEv+0x58>)
 8003274:	699b      	ldr	r3, [r3, #24]
 * reply after the specified time.
 */
class MessageServerThread : public BaseStaticThread<256> {

protected:
  void main(void) override {
 8003276:	b580      	push	{r7, lr}
 8003278:	f04f 0820 	mov.w	r8, #32
 800327c:	619a      	str	r2, [r3, #24]
 800327e:	2500      	movs	r5, #0
    setName("server");

    while (true) {
      ThreadReference sender = waitMessage();
      time_msecs_t msecs = (time_msecs_t)sender.getMessage();
      sleep(TIME_MS2I(msecs));
 8003280:	f240 36e7 	movw	r6, #999	; 0x3e7
 8003284:	2700      	movs	r7, #0
 8003286:	f388 8811 	msr	BASEPRI, r8
  tp = chMsgWaitS();
 800328a:	f7ff ffd1 	bl	8003230 <chMsgWaitS>
 800328e:	4604      	mov	r4, r0
 8003290:	f385 8811 	msr	BASEPRI, r5
 8003294:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003296:	f242 7310 	movw	r3, #10000	; 0x2710
 800329a:	4630      	mov	r0, r6
 800329c:	4639      	mov	r1, r7
 800329e:	fbe3 0102 	umlal	r0, r1, r3, r2
 80032a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032a6:	2300      	movs	r3, #0
 80032a8:	f7fd f8c2 	bl	8000430 <__aeabi_uldivmod>
      chThdSleep(interval);
 80032ac:	f7ff fcb8 	bl	8002c20 <chThdSleep>
 80032b0:	f388 8811 	msr	BASEPRI, r8
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80032b4:	2100      	movs	r1, #0
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7ff f832 	bl	8002320 <chSchWakeupS>
 80032bc:	f385 8811 	msr	BASEPRI, r5
 80032c0:	e7e1      	b.n	8003286 <_ZN19MessageServerThread4mainEv+0x16>
 80032c2:	bf00      	nop
 80032c4:	2000142c 	.word	0x2000142c
 80032c8:	0800a6b0 	.word	0x0800a6b0
 80032cc:	00000000 	.word	0x00000000

080032d0 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	2620      	movs	r6, #32
 80032d4:	2500      	movs	r5, #0
 80032d6:	f386 8811 	msr	BASEPRI, r6
  tp = chMsgWaitS();
 80032da:	f7ff ffa9 	bl	8003230 <chMsgWaitS>
 80032de:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
 80032e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80032e4:	f386 8811 	msr	BASEPRI, r6
  chSchWakeupS(tp, msg);
 80032e8:	4621      	mov	r1, r4
 80032ea:	f7ff f819 	bl	8002320 <chSchWakeupS>
 80032ee:	f385 8811 	msr	BASEPRI, r5
  } while (msg);
 80032f2:	2c00      	cmp	r4, #0
 80032f4:	d1ef      	bne.n	80032d6 <bmk_thread1+0x6>
}
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
	...

08003300 <chMsgSend>:
  thread_t *ctp = currp;
 8003300:	4b0e      	ldr	r3, [pc, #56]	; (800333c <chMsgSend+0x3c>)
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8003302:	b510      	push	{r4, lr}
 8003304:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8003306:	699c      	ldr	r4, [r3, #24]
 8003308:	f382 8811 	msr	BASEPRI, r2
  ctp->u.sentmsg = msg;
 800330c:	6261      	str	r1, [r4, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 800330e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003310:	6062      	str	r2, [r4, #4]
  msg_insert(ctp, &tp->msgqueue);
 8003312:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  tp->queue.next             = (thread_t *)tqp;
 8003316:	6021      	str	r1, [r4, #0]
  tp->queue.prev->queue.next = tp;
 8003318:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 800331a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 800331e:	6304      	str	r4, [r0, #48]	; 0x30
 8003320:	2a0e      	cmp	r2, #14
 8003322:	d007      	beq.n	8003334 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8003324:	200c      	movs	r0, #12
 8003326:	f7ff f903 	bl	8002530 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 800332a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800332c:	2300      	movs	r3, #0
 800332e:	f383 8811 	msr	BASEPRI, r3
}
 8003332:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
 8003334:	f7fe f8fc 	bl	8001530 <chSchReadyI>
 8003338:	e7f4      	b.n	8003324 <chMsgSend+0x24>
 800333a:	bf00      	nop
 800333c:	2000142c 	.word	0x2000142c

08003340 <_ZN15SequencerThread4mainEv>:
 8003340:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <_ZN15SequencerThread4mainEv+0xa4>)
 8003342:	4a29      	ldr	r2, [pc, #164]	; (80033e8 <_ZN15SequencerThread4mainEv+0xa8>)
 8003344:	699b      	ldr	r3, [r3, #24]
class SequencerThread : public BaseStaticThread<128> {
private:
  const seqop_t *base, *curr;                   // Thread local variables.

protected:
  void main(void) override {
 8003346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800334a:	619a      	str	r2, [r3, #24]
        break;
      case BITSET:
        palSetLine(curr->line);
        break;
      case MESSAGE:
        sref.sendMessage(curr->msg);
 800334c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80033ec <_ZN15SequencerThread4mainEv+0xac>
 8003350:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
  void main(void) override {
 8003354:	4604      	mov	r4, r0
        palSetLine(curr->line);
 8003356:	2501      	movs	r5, #1
        sleep(TIME_MS2I(curr->value));
 8003358:	f240 36e7 	movw	r6, #999	; 0x3e7
 800335c:	2700      	movs	r7, #0
      switch(curr->action) {
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	2a05      	cmp	r2, #5
 8003362:	d80b      	bhi.n	800337c <_ZN15SequencerThread4mainEv+0x3c>
 8003364:	e8df f002 	tbb	[pc, r2]
 8003368:	18223524 	.word	0x18223524
 800336c:	030e      	.short	0x030e
      return chMsgSend(thread_ref, msg);
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	f8d8 0000 	ldr.w	r0, [r8]
 8003374:	f7ff ffc4 	bl	8003300 <chMsgSend>
 8003378:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
        break;
      }
      curr++;
 800337c:	3308      	adds	r3, #8
 800337e:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8003382:	e7ec      	b.n	800335e <_ZN15SequencerThread4mainEv+0x1e>
        palSetLine(curr->line);
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	f001 020f 	and.w	r2, r1, #15
 800338a:	fa05 f202 	lsl.w	r2, r5, r2
 800338e:	f021 010f 	bic.w	r1, r1, #15
 8003392:	b292      	uxth	r2, r2
 8003394:	830a      	strh	r2, [r1, #24]
        break;
 8003396:	e7f1      	b.n	800337c <_ZN15SequencerThread4mainEv+0x3c>
        palClearLine(curr->line);
 8003398:	6859      	ldr	r1, [r3, #4]
 800339a:	f001 020f 	and.w	r2, r1, #15
 800339e:	fa05 f202 	lsl.w	r2, r5, r2
 80033a2:	f021 010f 	bic.w	r1, r1, #15
 80033a6:	b292      	uxth	r2, r2
 80033a8:	834a      	strh	r2, [r1, #26]
        break;
 80033aa:	e7e7      	b.n	800337c <_ZN15SequencerThread4mainEv+0x3c>
    }
  }
 80033ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sleep(TIME_MS2I(curr->value));
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	4630      	mov	r0, r6
 80033b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80033b8:	4639      	mov	r1, r7
 80033ba:	fbe3 0102 	umlal	r0, r1, r3, r2
 80033be:	2300      	movs	r3, #0
 80033c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033c4:	f7fd f834 	bl	8000430 <__aeabi_uldivmod>
      chThdSleep(interval);
 80033c8:	f7ff fc2a 	bl	8002c20 <chThdSleep>
 80033cc:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 80033d0:	e7d4      	b.n	800337c <_ZN15SequencerThread4mainEv+0x3c>
        curr = &base[curr->value];
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80033d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033dc:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
        continue;
 80033e0:	e7bd      	b.n	800335e <_ZN15SequencerThread4mainEv+0x1e>
 80033e2:	bf00      	nop
 80033e4:	2000142c 	.word	0x2000142c
 80033e8:	0800a6b8 	.word	0x0800a6b8
 80033ec:	20000b48 	.word	0x20000b48

080033f0 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 80033f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f4:	4605      	mov	r5, r0
  start = test_wait_tick();
 80033f6:	f7ff febb 	bl	8003170 <test_wait_tick>
  uint32_t n = 0;
 80033fa:	2400      	movs	r4, #0
  start = test_wait_tick();
 80033fc:	4606      	mov	r6, r0
 80033fe:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 8003402:	f242 770f 	movw	r7, #9999	; 0x270f
    (void)chMsgSend(tp, 1);
 8003406:	2101      	movs	r1, #1
 8003408:	4628      	mov	r0, r5
 800340a:	f7ff ff79 	bl	8003300 <chMsgSend>
 800340e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8003412:	1b9b      	subs	r3, r3, r6
  } while (chVTIsSystemTimeWithinX(start, end));
 8003414:	42bb      	cmp	r3, r7
    n++;
 8003416:	f104 0401 	add.w	r4, r4, #1
  } while (chVTIsSystemTimeWithinX(start, end));
 800341a:	d9f4      	bls.n	8003406 <msg_loop_test+0x16>
  (void)chMsgSend(tp, 0);
 800341c:	4628      	mov	r0, r5
 800341e:	2100      	movs	r1, #0
 8003420:	f7ff ff6e 	bl	8003300 <chMsgSend>
}
 8003424:	4620      	mov	r0, r4
 8003426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800342a:	bf00      	nop
 800342c:	0000      	movs	r0, r0
	...

08003430 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8003430:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8003432:	2141      	movs	r1, #65	; 0x41
static THD_FUNCTION(msg_thread1, p) {
 8003434:	4604      	mov	r4, r0
  chMsgSend(p, 'A');
 8003436:	f7ff ff63 	bl	8003300 <chMsgSend>
  chMsgSend(p, 'B');
 800343a:	4620      	mov	r0, r4
 800343c:	2142      	movs	r1, #66	; 0x42
 800343e:	f7ff ff5f 	bl	8003300 <chMsgSend>
  chMsgSend(p, 'C');
 8003442:	4620      	mov	r0, r4
 8003444:	2143      	movs	r1, #67	; 0x43
 8003446:	f7ff ff5b 	bl	8003300 <chMsgSend>
  chMsgSend(p, 'D');
 800344a:	4620      	mov	r0, r4
 800344c:	2144      	movs	r1, #68	; 0x44
}
 800344e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 8003452:	f7ff bf55 	b.w	8003300 <chMsgSend>
 8003456:	bf00      	nop
	...

08003460 <chDelegateCallVeneer>:
 * @param[in] veneer    pointer to the veneer function to be called
 * @param[in] ...       variable number of parameters
 * @return              The function return value casted to msg_t. It is
 *                      garbage for functions returning @p void.
 */
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 8003460:	b40e      	push	{r1, r2, r3}
 8003462:	b510      	push	{r4, lr}
 8003464:	b085      	sub	sp, #20
 8003466:	ab07      	add	r3, sp, #28

  va_start(args, veneer);

  /* Preparing the call message.*/
  cm.veneer = veneer;
  cm.argsp  = &args;
 8003468:	aa01      	add	r2, sp, #4
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 800346a:	f853 4b04 	ldr.w	r4, [r3], #4
  va_start(args, veneer);
 800346e:	9301      	str	r3, [sp, #4]
  (void)cm; /* Suppresses a lint warning.*/

  /* Sending the message to the dispatcher thread, the return value is
     contained in the returned message.*/
  msg = chMsgSend(tp, (msg_t)&cm);
 8003470:	a902      	add	r1, sp, #8
  cm.argsp  = &args;
 8003472:	e9cd 4202 	strd	r4, r2, [sp, #8]
  msg = chMsgSend(tp, (msg_t)&cm);
 8003476:	f7ff ff43 	bl	8003300 <chMsgSend>

  va_end(args);

  return msg;
}
 800347a:	b005      	add	sp, #20
 800347c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003480:	b003      	add	sp, #12
 8003482:	4770      	bx	lr
	...

08003490 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 8003490:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8003492:	4b2e      	ldr	r3, [pc, #184]	; (800354c <chMtxLockS+0xbc>)
void chMtxLockS(mutex_t *mp) {
 8003494:	4604      	mov	r4, r0
  if (mp->owner != NULL) {
 8003496:	6880      	ldr	r0, [r0, #8]
  thread_t *ctp = currp;
 8003498:	699d      	ldr	r5, [r3, #24]
  if (mp->owner != NULL) {
 800349a:	b330      	cbz	r0, 80034ea <chMtxLockS+0x5a>
      while (tp->prio < ctp->prio) {
 800349c:	68aa      	ldr	r2, [r5, #8]
 800349e:	6883      	ldr	r3, [r0, #8]
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d207      	bcs.n	80034b4 <chMtxLockS+0x24>
        switch (tp->state) {
 80034a4:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 80034a8:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d035      	beq.n	800351a <chMtxLockS+0x8a>
 80034ae:	2b07      	cmp	r3, #7
 80034b0:	d020      	beq.n	80034f4 <chMtxLockS+0x64>
 80034b2:	b19b      	cbz	r3, 80034dc <chMtxLockS+0x4c>
  thread_t *cp = (thread_t *)tqp;
 80034b4:	4623      	mov	r3, r4
 80034b6:	e003      	b.n	80034c0 <chMtxLockS+0x30>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80034b8:	6899      	ldr	r1, [r3, #8]
 80034ba:	68aa      	ldr	r2, [r5, #8]
 80034bc:	4291      	cmp	r1, r2
 80034be:	d302      	bcc.n	80034c6 <chMtxLockS+0x36>
    cp = cp->queue.next;
 80034c0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80034c2:	429c      	cmp	r4, r3
 80034c4:	d1f8      	bne.n	80034b8 <chMtxLockS+0x28>
  tp->queue.prev             = cp->queue.prev;
 80034c6:	685a      	ldr	r2, [r3, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 80034c8:	2006      	movs	r0, #6
 80034ca:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 80034ce:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 80034d0:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 80034d2:	626c      	str	r4, [r5, #36]	; 0x24
}
 80034d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 80034d8:	f7ff b82a 	b.w	8002530 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 80034dc:	e9d0 3200 	ldrd	r3, r2, [r0]
 80034e0:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80034e2:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 80034e4:	f7fe f824 	bl	8001530 <chSchReadyI>
          break;
 80034e8:	e7e4      	b.n	80034b4 <chMtxLockS+0x24>
    mp->next = ctp->mtxlist;
 80034ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80034ec:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 80034f0:	63ac      	str	r4, [r5, #56]	; 0x38
}
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 80034f4:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80034f8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80034fa:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80034fc:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 80034fe:	4633      	mov	r3, r6
 8003500:	e002      	b.n	8003508 <chMtxLockS+0x78>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003502:	6899      	ldr	r1, [r3, #8]
 8003504:	428a      	cmp	r2, r1
 8003506:	d802      	bhi.n	800350e <chMtxLockS+0x7e>
    cp = cp->queue.next;
 8003508:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800350a:	429e      	cmp	r6, r3
 800350c:	d1f9      	bne.n	8003502 <chMtxLockS+0x72>
  tp->queue.prev             = cp->queue.prev;
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8003514:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8003516:	6058      	str	r0, [r3, #4]
 8003518:	e7cc      	b.n	80034b4 <chMtxLockS+0x24>
  tp->queue.prev->queue.next = tp->queue.next;
 800351a:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800351e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003520:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8003522:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 8003524:	4633      	mov	r3, r6
 8003526:	e002      	b.n	800352e <chMtxLockS+0x9e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003528:	6899      	ldr	r1, [r3, #8]
 800352a:	428a      	cmp	r2, r1
 800352c:	d802      	bhi.n	8003534 <chMtxLockS+0xa4>
    cp = cp->queue.next;
 800352e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003530:	429e      	cmp	r6, r3
 8003532:	d1f9      	bne.n	8003528 <chMtxLockS+0x98>
  tp->queue.prev             = cp->queue.prev;
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800353a:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800353c:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 800353e:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 8003540:	68aa      	ldr	r2, [r5, #8]
 8003542:	6883      	ldr	r3, [r0, #8]
 8003544:	4293      	cmp	r3, r2
 8003546:	d3ad      	bcc.n	80034a4 <chMtxLockS+0x14>
 8003548:	e7b4      	b.n	80034b4 <chMtxLockS+0x24>
 800354a:	bf00      	nop
 800354c:	2000142c 	.word	0x2000142c

08003550 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 8003550:	b508      	push	{r3, lr}
 8003552:	2320      	movs	r3, #32
 8003554:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 8003558:	f7ff ff9a 	bl	8003490 <chMtxLockS>
 800355c:	2300      	movs	r3, #0
 800355e:	f383 8811 	msr	BASEPRI, r3
}
 8003562:	bd08      	pop	{r3, pc}
	...

08003570 <chSemWaitS.part.0>:
msg_t chSemWaitS(semaphore_t *sp) {
 8003570:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8003572:	4c07      	ldr	r4, [pc, #28]	; (8003590 <chSemWaitS.part.0+0x20>)
 8003574:	69a2      	ldr	r2, [r4, #24]
 8003576:	6250      	str	r0, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8003578:	6841      	ldr	r1, [r0, #4]
msg_t chSemWaitS(semaphore_t *sp) {
 800357a:	4603      	mov	r3, r0
 800357c:	e9c2 0100 	strd	r0, r1, [r2]
  tp->queue.prev->queue.next = tp;
 8003580:	600a      	str	r2, [r1, #0]
    chSchGoSleepS(CH_STATE_WTSEM);
 8003582:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	f7fe ffd3 	bl	8002530 <chSchGoSleepS>
    return currp->u.rdymsg;
 800358a:	69a3      	ldr	r3, [r4, #24]
}
 800358c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800358e:	bd10      	pop	{r4, pc}
 8003590:	2000142c 	.word	0x2000142c
	...

080035a0 <chCacheGetObject.constprop.0>:
oc_object_t *chCacheGetObject(objects_cache_t *ocp,
 80035a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a4:	2320      	movs	r3, #32
 80035a6:	b082      	sub	sp, #8
 80035a8:	4604      	mov	r4, r0
 80035aa:	f383 8811 	msr	BASEPRI, r3
  objp = hash_get_s(ocp, group, key);
 80035ae:	4d3a      	ldr	r5, [pc, #232]	; (8003698 <chCacheGetObject.constprop.0+0xf8>)
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 80035b0:	e9d5 3100 	ldrd	r3, r1, [r5]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	4003      	ands	r3, r0
 80035b8:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
  objp = hhp->hash_next;
 80035bc:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
  while (objp != (oc_object_t *)hhp) {
 80035c0:	428a      	cmp	r2, r1
 80035c2:	d103      	bne.n	80035cc <chCacheGetObject.constprop.0+0x2c>
 80035c4:	e01c      	b.n	8003600 <chCacheGetObject.constprop.0+0x60>
    objp = objp->hash_next;
 80035c6:	6809      	ldr	r1, [r1, #0]
  while (objp != (oc_object_t *)hhp) {
 80035c8:	428a      	cmp	r2, r1
 80035ca:	d019      	beq.n	8003600 <chCacheGetObject.constprop.0+0x60>
    if ((objp->obj_key == key) && (objp->obj_group == group)) {
 80035cc:	694b      	ldr	r3, [r1, #20]
 80035ce:	429c      	cmp	r4, r3
 80035d0:	d1f9      	bne.n	80035c6 <chCacheGetObject.constprop.0+0x26>
 80035d2:	690b      	ldr	r3, [r1, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f6      	bne.n	80035c6 <chCacheGetObject.constprop.0+0x26>
    if (chSemGetCounterI(&objp->obj_sem) > (cnt_t)0) {
 80035d8:	6a0b      	ldr	r3, [r1, #32]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	dd39      	ble.n	8003652 <chCacheGetObject.constprop.0+0xb2>
      objp->obj_flags &= ~OC_FLAG_INLRU;
 80035de:	6a4a      	ldr	r2, [r1, #36]	; 0x24
      LRU_REMOVE(objp);
 80035e0:	e9d1 0402 	ldrd	r0, r4, [r1, #8]
  sp->cnt--;
 80035e4:	3b01      	subs	r3, #1
      objp->obj_flags &= ~OC_FLAG_INLRU;
 80035e6:	f022 0201 	bic.w	r2, r2, #1
      LRU_REMOVE(objp);
 80035ea:	60a0      	str	r0, [r4, #8]
 80035ec:	60c4      	str	r4, [r0, #12]
      objp->obj_flags &= ~OC_FLAG_INLRU;
 80035ee:	e9c1 3208 	strd	r3, r2, [r1, #32]
 80035f2:	2300      	movs	r3, #0
 80035f4:	f383 8811 	msr	BASEPRI, r3
}
 80035f8:	4608      	mov	r0, r1
 80035fa:	b002      	add	sp, #8
 80035fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003600:	4f26      	ldr	r7, [pc, #152]	; (800369c <chCacheGetObject.constprop.0+0xfc>)
 8003602:	2600      	movs	r6, #0
    (void) ocp->writef(ocp, objp, true);
 8003604:	f1a7 0830 	sub.w	r8, r7, #48	; 0x30
 8003608:	e01a      	b.n	8003640 <chCacheGetObject.constprop.0+0xa0>
    objp = ocp->lru.lru_prev;
 800360a:	6a29      	ldr	r1, [r5, #32]
    LRU_REMOVE(objp);
 800360c:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 8003610:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8003612:	6a0b      	ldr	r3, [r1, #32]
    LRU_REMOVE(objp);
 8003614:	f8cc 0008 	str.w	r0, [ip, #8]
 8003618:	3b01      	subs	r3, #1
 800361a:	f8c0 c00c 	str.w	ip, [r0, #12]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 800361e:	f022 0001 	bic.w	r0, r2, #1
 8003622:	e9c1 3008 	strd	r3, r0, [r1, #32]
    if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 8003626:	06d0      	lsls	r0, r2, #27
 8003628:	d51c      	bpl.n	8003664 <chCacheGetObject.constprop.0+0xc4>
 800362a:	f386 8811 	msr	BASEPRI, r6
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 800362e:	2322      	movs	r3, #34	; 0x22
 8003630:	624b      	str	r3, [r1, #36]	; 0x24
    (void) ocp->writef(ocp, objp, true);
 8003632:	4640      	mov	r0, r8
 8003634:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003636:	2201      	movs	r2, #1
 8003638:	4798      	blx	r3
 800363a:	2320      	movs	r3, #32
 800363c:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8003640:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003642:	3b01      	subs	r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	63ab      	str	r3, [r5, #56]	; 0x38
 8003648:	dadf      	bge.n	800360a <chCacheGetObject.constprop.0+0x6a>
 800364a:	4638      	mov	r0, r7
 800364c:	f7ff ff90 	bl	8003570 <chSemWaitS.part.0>
 8003650:	e7db      	b.n	800360a <chCacheGetObject.constprop.0+0x6a>
 8003652:	3b01      	subs	r3, #1
 8003654:	620b      	str	r3, [r1, #32]
 8003656:	f101 0018 	add.w	r0, r1, #24
 800365a:	9101      	str	r1, [sp, #4]
 800365c:	f7ff ff88 	bl	8003570 <chSemWaitS.part.0>
 8003660:	9901      	ldr	r1, [sp, #4]
 8003662:	e7c6      	b.n	80035f2 <chCacheGetObject.constprop.0+0x52>
      if ((objp->obj_flags & OC_FLAG_INHASH) != 0U) {
 8003664:	0793      	lsls	r3, r2, #30
 8003666:	d504      	bpl.n	8003672 <chCacheGetObject.constprop.0+0xd2>
        HASH_REMOVE(objp);
 8003668:	e9d1 2300 	ldrd	r2, r3, [r1]
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	680a      	ldr	r2, [r1, #0]
 8003670:	6053      	str	r3, [r2, #4]
    HASH_INSERT(ocp, objp, group, key);
 8003672:	e9d5 3200 	ldrd	r3, r2, [r5]
 8003676:	3b01      	subs	r3, #1
    objp->obj_key   = key;
 8003678:	614c      	str	r4, [r1, #20]
    HASH_INSERT(ocp, objp, group, key);
 800367a:	401c      	ands	r4, r3
 800367c:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
 8003680:	f852 3034 	ldr.w	r3, [r2, r4, lsl #3]
 8003684:	6048      	str	r0, [r1, #4]
    objp->obj_group = group;
 8003686:	2500      	movs	r5, #0
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 8003688:	200a      	movs	r0, #10
    HASH_INSERT(ocp, objp, group, key);
 800368a:	600b      	str	r3, [r1, #0]
    objp->obj_group = group;
 800368c:	610d      	str	r5, [r1, #16]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 800368e:	6248      	str	r0, [r1, #36]	; 0x24
    HASH_INSERT(ocp, objp, group, key);
 8003690:	6059      	str	r1, [r3, #4]
 8003692:	f842 1034 	str.w	r1, [r2, r4, lsl #3]
 8003696:	e7ac      	b.n	80035f2 <chCacheGetObject.constprop.0+0x52>
 8003698:	200013e8 	.word	0x200013e8
 800369c:	20001418 	.word	0x20001418

080036a0 <chSemWait>:
msg_t chSemWait(semaphore_t *sp) {
 80036a0:	b508      	push	{r3, lr}
 80036a2:	2320      	movs	r3, #32
 80036a4:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80036a8:	6883      	ldr	r3, [r0, #8]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	6083      	str	r3, [r0, #8]
 80036b0:	db04      	blt.n	80036bc <chSemWait+0x1c>
  return MSG_OK;
 80036b2:	2000      	movs	r0, #0
 80036b4:	2300      	movs	r3, #0
 80036b6:	f383 8811 	msr	BASEPRI, r3
}
 80036ba:	bd08      	pop	{r3, pc}
 80036bc:	f7ff ff58 	bl	8003570 <chSemWaitS.part.0>
 80036c0:	2300      	movs	r3, #0
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	bd08      	pop	{r3, pc}
	...

080036d0 <rt_test_011_010_execute>:
static void rt_test_011_010_execute(void) {
 80036d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80036d4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8003758 <rt_test_011_010_execute+0x88>
      chSemWait(&sem1);
 80036d8:	4c1c      	ldr	r4, [pc, #112]	; (800374c <rt_test_011_010_execute+0x7c>)
  test_set_step(1);
 80036da:	2301      	movs	r3, #1
 80036dc:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 80036e0:	f7ff fd46 	bl	8003170 <test_wait_tick>
    n = 0;
 80036e4:	2500      	movs	r5, #0
    start = test_wait_tick();
 80036e6:	4606      	mov	r6, r0
 80036e8:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80036ec:	f242 770f 	movw	r7, #9999	; 0x270f
      chSemWait(&sem1);
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7ff ffd5 	bl	80036a0 <chSemWait>
      chSemSignal(&sem1);
 80036f6:	4620      	mov	r0, r4
 80036f8:	f7fe fe8a 	bl	8002410 <chSemSignal>
      chSemWait(&sem1);
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7ff ffcf 	bl	80036a0 <chSemWait>
      chSemSignal(&sem1);
 8003702:	4620      	mov	r0, r4
 8003704:	f7fe fe84 	bl	8002410 <chSemSignal>
      chSemWait(&sem1);
 8003708:	4620      	mov	r0, r4
 800370a:	f7ff ffc9 	bl	80036a0 <chSemWait>
      chSemSignal(&sem1);
 800370e:	4620      	mov	r0, r4
 8003710:	f7fe fe7e 	bl	8002410 <chSemSignal>
      chSemWait(&sem1);
 8003714:	4620      	mov	r0, r4
 8003716:	f7ff ffc3 	bl	80036a0 <chSemWait>
      chSemSignal(&sem1);
 800371a:	4620      	mov	r0, r4
 800371c:	f7fe fe78 	bl	8002410 <chSemSignal>
 8003720:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003724:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 8003726:	42bb      	cmp	r3, r7
      n++;
 8003728:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800372c:	d9e0      	bls.n	80036f0 <rt_test_011_010_execute+0x20>
  test_set_step(2);
 800372e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8003730:	4807      	ldr	r0, [pc, #28]	; (8003750 <rt_test_011_010_execute+0x80>)
  test_set_step(2);
 8003732:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8003736:	f7fd fc4b 	bl	8000fd0 <test_print>
    test_printn(n * 4);
 800373a:	00a8      	lsls	r0, r5, #2
 800373c:	f7fd fb78 	bl	8000e30 <test_printn>
}
 8003740:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" wait+signal/S");
 8003744:	4803      	ldr	r0, [pc, #12]	; (8003754 <rt_test_011_010_execute+0x84>)
 8003746:	f7fd bc23 	b.w	8000f90 <test_println>
 800374a:	bf00      	nop
 800374c:	200017fc 	.word	0x200017fc
 8003750:	0800a694 	.word	0x0800a694
 8003754:	0800a6c4 	.word	0x0800a6c4
 8003758:	20001f1c 	.word	0x20001f1c
 800375c:	00000000 	.word	0x00000000

08003760 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 8003760:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8003762:	4c08      	ldr	r4, [pc, #32]	; (8003784 <bmk_thread7+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8003764:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8003766:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800376a:	075a      	lsls	r2, r3, #29
 800376c:	d408      	bmi.n	8003780 <bmk_thread7+0x20>
    chSemWait(&sem1);
 800376e:	4d06      	ldr	r5, [pc, #24]	; (8003788 <bmk_thread7+0x28>)
 8003770:	4628      	mov	r0, r5
 8003772:	f7ff ff95 	bl	80036a0 <chSemWait>
 8003776:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8003778:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800377c:	075b      	lsls	r3, r3, #29
 800377e:	d5f7      	bpl.n	8003770 <bmk_thread7+0x10>
}
 8003780:	bd38      	pop	{r3, r4, r5, pc}
 8003782:	bf00      	nop
 8003784:	2000142c 	.word	0x2000142c
 8003788:	200017fc 	.word	0x200017fc
 800378c:	00000000 	.word	0x00000000

08003790 <thread3>:
static THD_FUNCTION(thread3, p) {
 8003790:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 8003792:	4c04      	ldr	r4, [pc, #16]	; (80037a4 <thread3+0x14>)
 8003794:	4620      	mov	r0, r4
 8003796:	f7ff ff83 	bl	80036a0 <chSemWait>
  chSemSignal(&sem1);
 800379a:	4620      	mov	r0, r4
}
 800379c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 80037a0:	f7fe be36 	b.w	8002410 <chSemSignal>
 80037a4:	200017f0 	.word	0x200017f0
	...

080037b0 <thread1.lto_priv.1>:
static THD_FUNCTION(thread1, p) {
 80037b0:	b510      	push	{r4, lr}
 80037b2:	4604      	mov	r4, r0
  chSemWait(&sem1);
 80037b4:	4803      	ldr	r0, [pc, #12]	; (80037c4 <thread1.lto_priv.1+0x14>)
 80037b6:	f7ff ff73 	bl	80036a0 <chSemWait>
  test_emit_token(*(char *)p);
 80037ba:	7820      	ldrb	r0, [r4, #0]
}
 80037bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 80037c0:	f7fd bb46 	b.w	8000e50 <test_emit_token>
 80037c4:	200017f0 	.word	0x200017f0
	...

080037d0 <_GLOBAL__sub_I_main>:
    test_execute((BaseSequentialStream *)&SD2, &oslib_test_suite);
    exit(test_global_fail);
  }

public:
  TesterThread(void) : BaseStaticThread<256>() {
 80037d0:	4b26      	ldr	r3, [pc, #152]	; (800386c <_GLOBAL__sub_I_main+0x9c>)
    };
    BaseThread::sleep(TIME_MS2I(500));
  }

  return 0;
}
 80037d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TesterThread(void) : BaseStaticThread<256>() {
 80037d6:	f44f 76e8 	mov.w	r6, #464	; 0x1d0
 80037da:	4618      	mov	r0, r3
 80037dc:	4632      	mov	r2, r6
 80037de:	2100      	movs	r1, #0
 80037e0:	f005 ff60 	bl	80096a4 <memset>
  MessageServerThread(void) : BaseStaticThread<256>() {
 80037e4:	4c22      	ldr	r4, [pc, #136]	; (8003870 <_GLOBAL__sub_I_main+0xa0>)
  SequencerThread(const seqop_t *sequence) : BaseStaticThread<128>() {
 80037e6:	4f23      	ldr	r7, [pc, #140]	; (8003874 <_GLOBAL__sub_I_main+0xa4>)
  TesterThread(void) : BaseStaticThread<256>() {
 80037e8:	4923      	ldr	r1, [pc, #140]	; (8003878 <_GLOBAL__sub_I_main+0xa8>)
 80037ea:	6001      	str	r1, [r0, #0]
  SequencerThread(const seqop_t *sequence) : BaseStaticThread<128>() {
 80037ec:	f44f 75a8 	mov.w	r5, #336	; 0x150
  MessageServerThread(void) : BaseStaticThread<256>() {
 80037f0:	4632      	mov	r2, r6
 80037f2:	4620      	mov	r0, r4
 80037f4:	2100      	movs	r1, #0
 80037f6:	f005 ff55 	bl	80096a4 <memset>
  SequencerThread(const seqop_t *sequence) : BaseStaticThread<128>() {
 80037fa:	4e20      	ldr	r6, [pc, #128]	; (800387c <_GLOBAL__sub_I_main+0xac>)
  MessageServerThread(void) : BaseStaticThread<256>() {
 80037fc:	4b20      	ldr	r3, [pc, #128]	; (8003880 <_GLOBAL__sub_I_main+0xb0>)
 80037fe:	6023      	str	r3, [r4, #0]
  SequencerThread(const seqop_t *sequence) : BaseStaticThread<128>() {
 8003800:	4638      	mov	r0, r7
 8003802:	462a      	mov	r2, r5
 8003804:	2100      	movs	r1, #0
 8003806:	f005 ff4d 	bl	80096a4 <memset>
    base = curr = sequence;
 800380a:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <_GLOBAL__sub_I_main+0xb4>)
  SequencerThread(const seqop_t *sequence) : BaseStaticThread<128>() {
 800380c:	4c1e      	ldr	r4, [pc, #120]	; (8003888 <_GLOBAL__sub_I_main+0xb8>)
 800380e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80038a4 <_GLOBAL__sub_I_main+0xd4>
 8003812:	603c      	str	r4, [r7, #0]
 8003814:	462a      	mov	r2, r5
 8003816:	4630      	mov	r0, r6
 8003818:	2100      	movs	r1, #0
    base = curr = sequence;
 800381a:	e9c7 3354 	strd	r3, r3, [r7, #336]	; 0x150
  SequencerThread(const seqop_t *sequence) : BaseStaticThread<128>() {
 800381e:	f005 ff41 	bl	80096a4 <memset>
    base = curr = sequence;
 8003822:	4b1a      	ldr	r3, [pc, #104]	; (800388c <_GLOBAL__sub_I_main+0xbc>)
  SequencerThread(const seqop_t *sequence) : BaseStaticThread<128>() {
 8003824:	4f1a      	ldr	r7, [pc, #104]	; (8003890 <_GLOBAL__sub_I_main+0xc0>)
 8003826:	6034      	str	r4, [r6, #0]
 8003828:	462a      	mov	r2, r5
 800382a:	2100      	movs	r1, #0
 800382c:	4640      	mov	r0, r8
    base = curr = sequence;
 800382e:	e9c6 3354 	strd	r3, r3, [r6, #336]	; 0x150
  SequencerThread(const seqop_t *sequence) : BaseStaticThread<128>() {
 8003832:	f005 ff37 	bl	80096a4 <memset>
    base = curr = sequence;
 8003836:	4b17      	ldr	r3, [pc, #92]	; (8003894 <_GLOBAL__sub_I_main+0xc4>)
  SequencerThread(const seqop_t *sequence) : BaseStaticThread<128>() {
 8003838:	4e17      	ldr	r6, [pc, #92]	; (8003898 <_GLOBAL__sub_I_main+0xc8>)
 800383a:	f8c8 4000 	str.w	r4, [r8]
 800383e:	462a      	mov	r2, r5
 8003840:	2100      	movs	r1, #0
 8003842:	4638      	mov	r0, r7
    base = curr = sequence;
 8003844:	e9c8 3354 	strd	r3, r3, [r8, #336]	; 0x150
  SequencerThread(const seqop_t *sequence) : BaseStaticThread<128>() {
 8003848:	f005 ff2c 	bl	80096a4 <memset>
    base = curr = sequence;
 800384c:	4b13      	ldr	r3, [pc, #76]	; (800389c <_GLOBAL__sub_I_main+0xcc>)
  SequencerThread(const seqop_t *sequence) : BaseStaticThread<128>() {
 800384e:	603c      	str	r4, [r7, #0]
 8003850:	462a      	mov	r2, r5
 8003852:	4630      	mov	r0, r6
 8003854:	2100      	movs	r1, #0
    base = curr = sequence;
 8003856:	e9c7 3354 	strd	r3, r3, [r7, #336]	; 0x150
  SequencerThread(const seqop_t *sequence) : BaseStaticThread<128>() {
 800385a:	f005 ff23 	bl	80096a4 <memset>
    base = curr = sequence;
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <_GLOBAL__sub_I_main+0xd0>)
  SequencerThread(const seqop_t *sequence) : BaseStaticThread<128>() {
 8003860:	6034      	str	r4, [r6, #0]
    base = curr = sequence;
 8003862:	e9c6 3354 	strd	r3, r3, [r6, #336]	; 0x150
}
 8003866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800386a:	bf00      	nop
 800386c:	20000b50 	.word	0x20000b50
 8003870:	20000978 	.word	0x20000978
 8003874:	20000e78 	.word	0x20000e78
 8003878:	0800b7ac 	.word	0x0800b7ac
 800387c:	20000fd0 	.word	0x20000fd0
 8003880:	0800b7cc 	.word	0x0800b7cc
 8003884:	0800b704 	.word	0x0800b704
 8003888:	0800b7bc 	.word	0x0800b7bc
 800388c:	0800b72c 	.word	0x0800b72c
 8003890:	20001280 	.word	0x20001280
 8003894:	0800b754 	.word	0x0800b754
 8003898:	20000d20 	.word	0x20000d20
 800389c:	0800b77c 	.word	0x0800b77c
 80038a0:	0800b6ec 	.word	0x0800b6ec
 80038a4:	20001128 	.word	0x20001128
	...

080038b0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80038b0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 80038b4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80038b6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80038ba:	2300      	movs	r3, #0
 80038bc:	f383 8811 	msr	BASEPRI, r3
}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
	...

080038d0 <chThdExit>:
void chThdExit(msg_t msg) {
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	2220      	movs	r2, #32
 80038d4:	4603      	mov	r3, r0
 80038d6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 80038da:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <chThdExit+0x48>)
 80038dc:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 80038de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 80038e0:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 80038e2:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80038e6:	42a8      	cmp	r0, r5
 80038e8:	d006      	beq.n	80038f8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 80038ea:	6803      	ldr	r3, [r0, #0]
 80038ec:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 80038ee:	f7fd fe1f 	bl	8001530 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 80038f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 80038f4:	42a8      	cmp	r0, r5
 80038f6:	d1f8      	bne.n	80038ea <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 80038f8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80038fc:	b93b      	cbnz	r3, 800390e <chThdExit+0x3e>
 80038fe:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003902:	079b      	lsls	r3, r3, #30
 8003904:	d103      	bne.n	800390e <chThdExit+0x3e>
    REG_REMOVE(tp);
 8003906:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800390a:	6113      	str	r3, [r2, #16]
 800390c:	615a      	str	r2, [r3, #20]
}
 800390e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8003912:	200f      	movs	r0, #15
 8003914:	f7fe be0c 	b.w	8002530 <chSchGoSleepS>
 8003918:	2000142c 	.word	0x2000142c
 800391c:	00000000 	.word	0x00000000

08003920 <_ZN12TesterThread4mainEv>:
  void main(void) override {
 8003920:	b508      	push	{r3, lr}
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <_ZN12TesterThread4mainEv+0x24>)
 8003924:	4a08      	ldr	r2, [pc, #32]	; (8003948 <_ZN12TesterThread4mainEv+0x28>)
 8003926:	699b      	ldr	r3, [r3, #24]
    test_execute((BaseSequentialStream *)&SD2, &rt_test_suite);
 8003928:	4808      	ldr	r0, [pc, #32]	; (800394c <_ZN12TesterThread4mainEv+0x2c>)
 800392a:	619a      	str	r2, [r3, #24]
 800392c:	f7ff f988 	bl	8002c40 <test_execute.constprop.0>
    test_execute((BaseSequentialStream *)&SD2, &oslib_test_suite);
 8003930:	4807      	ldr	r0, [pc, #28]	; (8003950 <_ZN12TesterThread4mainEv+0x30>)
 8003932:	f7ff f985 	bl	8002c40 <test_execute.constprop.0>
    exit(test_global_fail);
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <_ZN12TesterThread4mainEv+0x34>)
      chThdExit(msg);
 8003938:	7818      	ldrb	r0, [r3, #0]
  }
 800393a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800393e:	f7ff bfc7 	b.w	80038d0 <chThdExit>
 8003942:	bf00      	nop
 8003944:	2000142c 	.word	0x2000142c
 8003948:	0800a6d4 	.word	0x0800a6d4
 800394c:	0800bf28 	.word	0x0800bf28
 8003950:	0800ba34 	.word	0x0800ba34
 8003954:	20001e78 	.word	0x20001e78
	...

08003960 <Thread1.lto_priv.1>:

static THD_WORKING_AREA(waThread1, 256);
static THD_FUNCTION(Thread1, arg) {
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  (void)arg;

  exit_flag = false;
 8003962:	4f10      	ldr	r7, [pc, #64]	; (80039a4 <Thread1.lto_priv.1+0x44>)
 8003964:	2500      	movs	r5, #0
 8003966:	703d      	strb	r5, [r7, #0]
 8003968:	2620      	movs	r6, #32
 800396a:	f386 8811 	msr	BASEPRI, r6
  tp = chMsgWaitS();
 800396e:	f7ff fc5f 	bl	8003230 <chMsgWaitS>
 8003972:	4604      	mov	r4, r0
 8003974:	f385 8811 	msr	BASEPRI, r5
  thread_t *tp;
  const call_message_t *cmp;
  msg_t ret;

  tp = chMsgWait();
  cmp = (const call_message_t *)chMsgGet(tp);
 8003978:	6a43      	ldr	r3, [r0, #36]	; 0x24
  ret = cmp->veneer(cmp->argsp);
 800397a:	e9d3 2000 	ldrd	r2, r0, [r3]
 800397e:	4790      	blx	r2
 8003980:	4601      	mov	r1, r0
 8003982:	f386 8811 	msr	BASEPRI, r6
  chSchWakeupS(tp, msg);
 8003986:	4620      	mov	r0, r4
 8003988:	f7fe fcca 	bl	8002320 <chSchWakeupS>
 800398c:	f385 8811 	msr	BASEPRI, r5
  do {
    chDelegateDispatch();
  } while (!exit_flag);
 8003990:	783b      	ldrb	r3, [r7, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0e9      	beq.n	800396a <Thread1.lto_priv.1+0xa>

  chThdExit(0x0FA5);
}
 8003996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chThdExit(0x0FA5);
 800399a:	f640 70a5 	movw	r0, #4005	; 0xfa5
 800399e:	f7ff bf97 	b.w	80038d0 <chThdExit>
 80039a2:	bf00      	nop
 80039a4:	200015ec 	.word	0x200015ec
	...

080039b0 <bmk_thread3>:
  chThdExit((msg_t)p);
 80039b0:	f7ff bf8e 	b.w	80038d0 <chThdExit>
	...

080039c0 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 80039c0:	4a0d      	ldr	r2, [pc, #52]	; (80039f8 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 80039c2:	6810      	ldr	r0, [r2, #0]
 80039c4:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 80039c6:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 80039c8:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80039ca:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80039cc:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 80039ce:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 80039d0:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80039d4:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 80039d6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80039d8:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 80039da:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80039de:	e000      	b.n	80039e2 <chSchDoReschedule+0x22>
 80039e0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	4294      	cmp	r4, r2
 80039e6:	d3fb      	bcc.n	80039e0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 80039e8:	685a      	ldr	r2, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 80039ea:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 80039ec:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 80039f0:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80039f2:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 80039f4:	f7fc bc6c 	b.w	80002d0 <_port_switch>
 80039f8:	2000142c 	.word	0x2000142c
 80039fc:	00000000 	.word	0x00000000

08003a00 <chSchRescheduleS>:
  return firstprio(&ch.rlist.queue) > currp->prio;
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <chSchRescheduleS+0x14>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 8003a06:	6892      	ldr	r2, [r2, #8]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d800      	bhi.n	8003a10 <chSchRescheduleS+0x10>
}
 8003a0e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8003a10:	f7ff bfd6 	b.w	80039c0 <chSchDoReschedule>
 8003a14:	2000142c 	.word	0x2000142c
	...

08003a20 <chSemResetWithMessage.constprop.0>:
void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg) {
 8003a20:	b570      	push	{r4, r5, r6, lr}
 8003a22:	2320      	movs	r3, #32
 8003a24:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 8003a28:	6885      	ldr	r5, [r0, #8]
  sp->cnt = n;
 8003a2a:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 8003a2c:	3501      	adds	r5, #1
 8003a2e:	2d00      	cmp	r5, #0
 8003a30:	dc0c      	bgt.n	8003a4c <chSemResetWithMessage.constprop.0+0x2c>
 8003a32:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 8003a34:	f06f 0601 	mvn.w	r6, #1
  thread_t *tp = tqp->prev;
 8003a38:	6860      	ldr	r0, [r4, #4]
  tqp->prev             = tp->queue.prev;
 8003a3a:	6843      	ldr	r3, [r0, #4]
 8003a3c:	6063      	str	r3, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 8003a3e:	601c      	str	r4, [r3, #0]
 8003a40:	f7fd fd76 	bl	8001530 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
 8003a44:	3501      	adds	r5, #1
 8003a46:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 8003a48:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 8003a4a:	d1f5      	bne.n	8003a38 <chSemResetWithMessage.constprop.0+0x18>
  chSchRescheduleS();
 8003a4c:	f7ff ffd8 	bl	8003a00 <chSchRescheduleS>
 8003a50:	2300      	movs	r3, #0
 8003a52:	f383 8811 	msr	BASEPRI, r3
}
 8003a56:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a60 <rt_test_006_001_execute>:
static void rt_test_006_001_execute(void) {
 8003a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    msg = chSemWait(&sem1);
 8003a64:	4c2a      	ldr	r4, [pc, #168]	; (8003b10 <rt_test_006_001_execute+0xb0>)
  test_set_step(1);
 8003a66:	4f2b      	ldr	r7, [pc, #172]	; (8003b14 <rt_test_006_001_execute+0xb4>)
 8003a68:	2301      	movs	r3, #1
    msg = chSemWait(&sem1);
 8003a6a:	4620      	mov	r0, r4
  test_set_step(1);
 8003a6c:	603b      	str	r3, [r7, #0]
    msg = chSemWait(&sem1);
 8003a6e:	f7ff fe17 	bl	80036a0 <chSemWait>
 8003a72:	2620      	movs	r6, #32
 8003a74:	4605      	mov	r5, r0
 8003a76:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 8003a7a:	68a0      	ldr	r0, [r4, #8]
 8003a7c:	4926      	ldr	r1, [pc, #152]	; (8003b18 <rt_test_006_001_execute+0xb8>)
 8003a7e:	fab0 f080 	clz	r0, r0
 8003a82:	0940      	lsrs	r0, r0, #5
 8003a84:	f7fd f93c 	bl	8000d00 <_test_assert>
 8003a88:	b120      	cbz	r0, 8003a94 <rt_test_006_001_execute+0x34>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f383 8811 	msr	BASEPRI, r3
}
 8003a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a94:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
 8003a98:	fab5 f085 	clz	r0, r5
 8003a9c:	491f      	ldr	r1, [pc, #124]	; (8003b1c <rt_test_006_001_execute+0xbc>)
 8003a9e:	0940      	lsrs	r0, r0, #5
 8003aa0:	f7fd f92e 	bl	8000d00 <_test_assert>
 8003aa4:	4605      	mov	r5, r0
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d1f2      	bne.n	8003a90 <rt_test_006_001_execute+0x30>
  test_set_step(2);
 8003aaa:	f04f 0902 	mov.w	r9, #2
    chSemSignal(&sem1);
 8003aae:	4620      	mov	r0, r4
  test_set_step(2);
 8003ab0:	f8c7 9000 	str.w	r9, [r7]
    chSemSignal(&sem1);
 8003ab4:	f7fe fcac 	bl	8002410 <chSemSignal>
 8003ab8:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 8003abc:	68a0      	ldr	r0, [r4, #8]
 8003abe:	4916      	ldr	r1, [pc, #88]	; (8003b18 <rt_test_006_001_execute+0xb8>)
 8003ac0:	f1a0 0001 	sub.w	r0, r0, #1
 8003ac4:	fab0 f080 	clz	r0, r0
 8003ac8:	0940      	lsrs	r0, r0, #5
 8003aca:	f7fd f919 	bl	8000d00 <_test_assert>
 8003ace:	4680      	mov	r8, r0
 8003ad0:	b118      	cbz	r0, 8003ada <rt_test_006_001_execute+0x7a>
 8003ad2:	f385 8811 	msr	BASEPRI, r5
}
 8003ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ada:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8003ade:	2303      	movs	r3, #3
  chSemResetWithMessage(sp, n, MSG_RESET);
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	f7ff ff9b 	bl	8003a20 <chSemResetWithMessage.constprop.0>
 8003aea:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8003aee:	68a0      	ldr	r0, [r4, #8]
 8003af0:	4909      	ldr	r1, [pc, #36]	; (8003b18 <rt_test_006_001_execute+0xb8>)
 8003af2:	f1a0 0002 	sub.w	r0, r0, #2
 8003af6:	fab0 f080 	clz	r0, r0
 8003afa:	0940      	lsrs	r0, r0, #5
 8003afc:	f7fd f900 	bl	8000d00 <_test_assert>
 8003b00:	b910      	cbnz	r0, 8003b08 <rt_test_006_001_execute+0xa8>
 8003b02:	f380 8811 	msr	BASEPRI, r0
  test_end_step(3);
 8003b06:	e7c3      	b.n	8003a90 <rt_test_006_001_execute+0x30>
 8003b08:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8003b0c:	e7c0      	b.n	8003a90 <rt_test_006_001_execute+0x30>
 8003b0e:	bf00      	nop
 8003b10:	200017f0 	.word	0x200017f0
 8003b14:	20001f1c 	.word	0x20001f1c
 8003b18:	0800a6dc 	.word	0x0800a6dc
 8003b1c:	0800a6f0 	.word	0x0800a6f0

08003b20 <rt_test_006_001_teardown>:
 8003b20:	4801      	ldr	r0, [pc, #4]	; (8003b28 <rt_test_006_001_teardown+0x8>)
 8003b22:	2100      	movs	r1, #0
 8003b24:	f7ff bf7c 	b.w	8003a20 <chSemResetWithMessage.constprop.0>
 8003b28:	200017f0 	.word	0x200017f0
 8003b2c:	00000000 	.word	0x00000000

08003b30 <chSemSignalWait.constprop.0>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	2320      	movs	r3, #32
 8003b34:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 8003b38:	4c15      	ldr	r4, [pc, #84]	; (8003b90 <chSemSignalWait.constprop.0+0x60>)
 8003b3a:	68a3      	ldr	r3, [r4, #8]
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	2a00      	cmp	r2, #0
 8003b40:	60a2      	str	r2, [r4, #8]
 8003b42:	dd19      	ble.n	8003b78 <chSemSignalWait.constprop.0+0x48>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	60a3      	str	r3, [r4, #8]
 8003b48:	db06      	blt.n	8003b58 <chSemSignalWait.constprop.0+0x28>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8003b4a:	f7ff ff59 	bl	8003a00 <chSchRescheduleS>
    msg = MSG_OK;
 8003b4e:	2000      	movs	r0, #0
 8003b50:	2300      	movs	r3, #0
 8003b52:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8003b56:	bd38      	pop	{r3, r4, r5, pc}
    thread_t *ctp = currp;
 8003b58:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <chSemSignalWait.constprop.0+0x64>)
  tp->queue.prev             = tqp->prev;
 8003b5a:	6863      	ldr	r3, [r4, #4]
 8003b5c:	6995      	ldr	r5, [r2, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 8003b5e:	2005      	movs	r0, #5
 8003b60:	e9c5 4300 	strd	r4, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8003b64:	601d      	str	r5, [r3, #0]
    ctp->u.wtsemp = spw;
 8003b66:	626c      	str	r4, [r5, #36]	; 0x24
  tqp->prev                  = tp;
 8003b68:	6065      	str	r5, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8003b6a:	f7fe fce1 	bl	8002530 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 8003b6e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003b70:	2300      	movs	r3, #0
 8003b72:	f383 8811 	msr	BASEPRI, r3
}
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
 8003b78:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8003b7a:	6803      	ldr	r3, [r0, #0]
 8003b7c:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003b7e:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 8003b80:	f7fd fcd6 	bl	8001530 <chSchReadyI>
 8003b84:	68a3      	ldr	r3, [r4, #8]
 8003b86:	2200      	movs	r2, #0
 8003b88:	6242      	str	r2, [r0, #36]	; 0x24
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	e7da      	b.n	8003b44 <chSemSignalWait.constprop.0+0x14>
 8003b8e:	bf00      	nop
 8003b90:	200017f0 	.word	0x200017f0
 8003b94:	2000142c 	.word	0x2000142c
	...

08003ba0 <rt_test_006_005_execute>:

static void rt_test_006_005_teardown(void) {
  test_wait_threads();
}

static void rt_test_006_005_execute(void) {
 8003ba0:	b530      	push	{r4, r5, lr}
  return ch.rlist.current;
 8003ba2:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <rt_test_006_005_execute+0x88>)

  /* [6.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8003ba4:	4d21      	ldr	r5, [pc, #132]	; (8003c2c <rt_test_006_005_execute+0x8c>)
  return chThdGetSelfX()->prio;
 8003ba6:	699a      	ldr	r2, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003ba8:	4821      	ldr	r0, [pc, #132]	; (8003c30 <rt_test_006_005_execute+0x90>)
 8003baa:	6892      	ldr	r2, [r2, #8]
 8003bac:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <rt_test_006_005_execute+0x94>)
  return (bool)(tqp->next == (const thread_t *)tqp);
 8003bae:	4c22      	ldr	r4, [pc, #136]	; (8003c38 <rt_test_006_005_execute+0x98>)
static void rt_test_006_005_execute(void) {
 8003bb0:	b083      	sub	sp, #12
  test_set_step(1);
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	6029      	str	r1, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	3201      	adds	r2, #1
 8003bba:	9100      	str	r1, [sp, #0]
 8003bbc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003bc0:	f7fe fc46 	bl	8002450 <chThdCreateStatic>
 8003bc4:	4a1d      	ldr	r2, [pc, #116]	; (8003c3c <rt_test_006_005_execute+0x9c>)
  test_end_step(1);

  /* [6.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 8003bc6:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003bc8:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8003bca:	602b      	str	r3, [r5, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8003bcc:	f7ff ffb0 	bl	8003b30 <chSemSignalWait.constprop.0>
 8003bd0:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003bd2:	491b      	ldr	r1, [pc, #108]	; (8003c40 <rt_test_006_005_execute+0xa0>)
 8003bd4:	1b00      	subs	r0, r0, r4
 8003bd6:	fab0 f080 	clz	r0, r0
 8003bda:	0940      	lsrs	r0, r0, #5
 8003bdc:	f7fd f890 	bl	8000d00 <_test_assert>
 8003be0:	b108      	cbz	r0, 8003be6 <rt_test_006_005_execute+0x46>
    chSemSignalWait(&sem1, &sem1);
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
  test_end_step(3);
}
 8003be2:	b003      	add	sp, #12
 8003be4:	bd30      	pop	{r4, r5, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 8003be6:	68a0      	ldr	r0, [r4, #8]
 8003be8:	4916      	ldr	r1, [pc, #88]	; (8003c44 <rt_test_006_005_execute+0xa4>)
 8003bea:	fab0 f080 	clz	r0, r0
 8003bee:	0940      	lsrs	r0, r0, #5
 8003bf0:	f7fd f886 	bl	8000d00 <_test_assert>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d1f4      	bne.n	8003be2 <rt_test_006_005_execute+0x42>
  test_set_step(3);
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 8003bfc:	f7ff ff98 	bl	8003b30 <chSemSignalWait.constprop.0>
 8003c00:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003c02:	490f      	ldr	r1, [pc, #60]	; (8003c40 <rt_test_006_005_execute+0xa0>)
 8003c04:	1b00      	subs	r0, r0, r4
 8003c06:	fab0 f080 	clz	r0, r0
 8003c0a:	0940      	lsrs	r0, r0, #5
 8003c0c:	f7fd f878 	bl	8000d00 <_test_assert>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d1e6      	bne.n	8003be2 <rt_test_006_005_execute+0x42>
    test_assert(sem1.cnt == 0, "counter not zero");
 8003c14:	68a0      	ldr	r0, [r4, #8]
 8003c16:	490b      	ldr	r1, [pc, #44]	; (8003c44 <rt_test_006_005_execute+0xa4>)
 8003c18:	fab0 f080 	clz	r0, r0
 8003c1c:	0940      	lsrs	r0, r0, #5
}
 8003c1e:	b003      	add	sp, #12
 8003c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 8003c24:	f7fd b86c 	b.w	8000d00 <_test_assert>
 8003c28:	2000142c 	.word	0x2000142c
 8003c2c:	20001f1c 	.word	0x20001f1c
 8003c30:	20001808 	.word	0x20001808
 8003c34:	08003791 	.word	0x08003791
 8003c38:	200017f0 	.word	0x200017f0
 8003c3c:	20001f34 	.word	0x20001f34
 8003c40:	0800a708 	.word	0x0800a708
 8003c44:	0800a718 	.word	0x0800a718
	...

08003c50 <chMBReset.constprop.0>:
void chMBReset(mailbox_t *mbp) {
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	2320      	movs	r3, #32
 8003c54:	f383 8811 	msr	BASEPRI, r3
  mbp->wrptr = mbp->buffer;
 8003c58:	4c0a      	ldr	r4, [pc, #40]	; (8003c84 <chMBReset.constprop.0+0x34>)
 8003c5a:	6823      	ldr	r3, [r4, #0]
  mbp->reset = true;
 8003c5c:	2201      	movs	r2, #1
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8003c5e:	f104 0018 	add.w	r0, r4, #24
  mbp->cnt   = (size_t)0;
 8003c62:	2500      	movs	r5, #0
  mbp->rdptr = mbp->buffer;
 8003c64:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->reset = true;
 8003c68:	7522      	strb	r2, [r4, #20]
  mbp->cnt   = (size_t)0;
 8003c6a:	6125      	str	r5, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8003c6c:	f7fd fd00 	bl	8001670 <chThdDequeueAllI.constprop.0>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8003c70:	f104 0020 	add.w	r0, r4, #32
 8003c74:	f7fd fcfc 	bl	8001670 <chThdDequeueAllI.constprop.0>
  chSchRescheduleS();
 8003c78:	f7ff fec2 	bl	8003a00 <chSchRescheduleS>
 8003c7c:	f385 8811 	msr	BASEPRI, r5
}
 8003c80:	bd38      	pop	{r3, r4, r5, pc}
 8003c82:	bf00      	nop
 8003c84:	2000084c 	.word	0x2000084c
	...

08003c90 <oslib_test_002_003_teardown>:

static void oslib_test_002_003_teardown(void) {
  chMBReset(&mb1);
 8003c90:	f7ff bfde 	b.w	8003c50 <chMBReset.constprop.0>
	...

08003ca0 <oslib_test_002_002_teardown>:
 8003ca0:	f7ff bff6 	b.w	8003c90 <oslib_test_002_003_teardown>
	...

08003cb0 <oslib_test_002_001_teardown>:
 8003cb0:	f7ff bfee 	b.w	8003c90 <oslib_test_002_003_teardown>
	...

08003cc0 <chMBPostAheadTimeout.constprop.0>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8003cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	460d      	mov	r5, r1
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	4c17      	ldr	r4, [pc, #92]	; (8003d2c <chMBPostAheadTimeout.constprop.0+0x6c>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003cd0:	f104 0818 	add.w	r8, r4, #24
 8003cd4:	e00a      	b.n	8003cec <chMBPostAheadTimeout.constprop.0+0x2c>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003cd6:	e9d4 2700 	ldrd	r2, r7, [r4]
 8003cda:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8003cdc:	eba7 0c02 	sub.w	ip, r7, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8003ce0:	ebb3 0fac 	cmp.w	r3, ip, asr #2
 8003ce4:	d10e      	bne.n	8003d04 <chMBPostAheadTimeout.constprop.0+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003ce6:	f7fe fe0b 	bl	8002900 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8003cea:	b930      	cbnz	r0, 8003cfa <chMBPostAheadTimeout.constprop.0+0x3a>
    if (mbp->reset) {
 8003cec:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003cee:	4629      	mov	r1, r5
 8003cf0:	4640      	mov	r0, r8
    if (mbp->reset) {
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ef      	beq.n	8003cd6 <chMBPostAheadTimeout.constprop.0+0x16>
      return MSG_RESET;
 8003cf6:	f06f 0001 	mvn.w	r0, #1
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f383 8811 	msr	BASEPRI, r3
}
 8003d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (--mbp->rdptr < mbp->buffer) {
 8003d04:	68e1      	ldr	r1, [r4, #12]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003d06:	480a      	ldr	r0, [pc, #40]	; (8003d30 <chMBPostAheadTimeout.constprop.0+0x70>)
      if (--mbp->rdptr < mbp->buffer) {
 8003d08:	3904      	subs	r1, #4
 8003d0a:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->top - 1;
 8003d0c:	bf88      	it	hi
 8003d0e:	1f39      	subhi	r1, r7, #4
 8003d10:	60e1      	str	r1, [r4, #12]
      mbp->cnt++;
 8003d12:	3301      	adds	r3, #1
      *mbp->rdptr = msg;
 8003d14:	600e      	str	r6, [r1, #0]
      mbp->cnt++;
 8003d16:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003d18:	f7fd fc22 	bl	8001560 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 8003d1c:	f7ff fe70 	bl	8003a00 <chSchRescheduleS>
      return MSG_OK;
 8003d20:	2000      	movs	r0, #0
 8003d22:	2300      	movs	r3, #0
 8003d24:	f383 8811 	msr	BASEPRI, r3
}
 8003d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d2c:	2000084c 	.word	0x2000084c
 8003d30:	2000086c 	.word	0x2000086c
	...

08003d40 <oslib_test_006_001_execute>:
 * - [6.1.5] Checking cached objects.
 * - [6.1.6] Checking non-cached objects.
 * .
 */

static void oslib_test_006_001_execute(void) {
 8003d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tqp->next = (thread_t *)tqp;
 8003d44:	4ecc      	ldr	r6, [pc, #816]	; (8004078 <oslib_test_006_001_execute+0x338>)
  ocp->objvp            = objvp;
 8003d46:	49cd      	ldr	r1, [pc, #820]	; (800407c <oslib_test_006_001_execute+0x33c>)
 8003d48:	6131      	str	r1, [r6, #16]
  ocp->hashn            = hashn;
 8003d4a:	2108      	movs	r1, #8
 8003d4c:	6031      	str	r1, [r6, #0]
 8003d4e:	f106 0130 	add.w	r1, r6, #48	; 0x30
  sp->cnt = n;
 8003d52:	2001      	movs	r0, #1
  tqp->prev = (thread_t *)tqp;
 8003d54:	e9c6 110c 	strd	r1, r1, [r6, #48]	; 0x30
  ocp->lru.hash_next    = NULL;
 8003d58:	2100      	movs	r1, #0
  ocp->hashp            = hashp;
 8003d5a:	4ac9      	ldr	r2, [pc, #804]	; (8004080 <oslib_test_006_001_execute+0x340>)
 8003d5c:	62f0      	str	r0, [r6, #44]	; 0x2c
  ocp->lru.hash_prev    = NULL;
 8003d5e:	e9c6 1105 	strd	r1, r1, [r6, #20]
  tqp->next = (thread_t *)tqp;
 8003d62:	f106 0024 	add.w	r0, r6, #36	; 0x24
  ocp->writef           = writef;
 8003d66:	4bc7      	ldr	r3, [pc, #796]	; (8004084 <oslib_test_006_001_execute+0x344>)
  ocp->readf            = readf;
 8003d68:	4cc7      	ldr	r4, [pc, #796]	; (8004088 <oslib_test_006_001_execute+0x348>)
  ocp->writef           = writef;
 8003d6a:	6433      	str	r3, [r6, #64]	; 0x40
  tqp->prev = (thread_t *)tqp;
 8003d6c:	e9c6 0009 	strd	r0, r0, [r6, #36]	; 0x24
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8003d70:	f106 0714 	add.w	r7, r6, #20
 8003d74:	2004      	movs	r0, #4
 8003d76:	4613      	mov	r3, r2
  ocp->hashp            = hashp;
 8003d78:	6072      	str	r2, [r6, #4]
  ocp->readf            = readf;
 8003d7a:	63f4      	str	r4, [r6, #60]	; 0x3c
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8003d7c:	6237      	str	r7, [r6, #32]
 8003d7e:	3240      	adds	r2, #64	; 0x40
 8003d80:	63b0      	str	r0, [r6, #56]	; 0x38
  ocp->objn             = objn;
 8003d82:	60b0      	str	r0, [r6, #8]
    hashp->hash_prev = (oc_object_t *)hashp;
 8003d84:	e9c3 3300 	strd	r3, r3, [r3]
    hashp++;
 8003d88:	3308      	adds	r3, #8
  } while (hashp < &ocp->hashp[ocp->hashn]);
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d1fa      	bne.n	8003d84 <oslib_test_006_001_execute+0x44>
 8003d8e:	4bbb      	ldr	r3, [pc, #748]	; (800407c <oslib_test_006_001_execute+0x33c>)
 8003d90:	49be      	ldr	r1, [pc, #760]	; (800408c <oslib_test_006_001_execute+0x34c>)
 8003d92:	f103 0cf0 	add.w	ip, r3, #240	; 0xf0
 8003d96:	2501      	movs	r5, #1
    objp->obj_group = 0U;
 8003d98:	2200      	movs	r2, #0
 8003d9a:	e000      	b.n	8003d9e <oslib_test_006_001_execute+0x5e>
  } while (objn > (ucnt_t)0);
 8003d9c:	4603      	mov	r3, r0
    objvp = (void *)((uint8_t *)objvp + objsz);
 8003d9e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8003da2:	f103 0418 	add.w	r4, r3, #24
  } while (objn > (ucnt_t)0);
 8003da6:	4560      	cmp	r0, ip
    LRU_INSERT_HEAD(ocp, objp);
 8003da8:	e9c3 1702 	strd	r1, r7, [r3, #8]
 8003dac:	e9c3 4406 	strd	r4, r4, [r3, #24]
 8003db0:	621d      	str	r5, [r3, #32]
 8003db2:	60cb      	str	r3, [r1, #12]
    objp->obj_key   = 0U;
 8003db4:	e9c3 2204 	strd	r2, r2, [r3, #16]
    objp->dptr      = NULL;
 8003db8:	e9c3 5209 	strd	r5, r2, [r3, #36]	; 0x24
 8003dbc:	4619      	mov	r1, r3
  } while (objn > (ucnt_t)0);
 8003dbe:	d1ed      	bne.n	8003d9c <oslib_test_006_001_execute+0x5c>
 8003dc0:	4bb3      	ldr	r3, [pc, #716]	; (8004090 <oslib_test_006_001_execute+0x350>)
                      obj_write);
  }
  test_end_step(1);

  /* [6.1.2] Getting and releasing objects without initialization.*/
  test_set_step(2);
 8003dc2:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 80040b0 <oslib_test_006_001_execute+0x370>
 8003dc6:	61f3      	str	r3, [r6, #28]
    uint32_t i;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003dc8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800409c <oslib_test_006_001_execute+0x35c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 8003dcc:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 80040b4 <oslib_test_006_001_execute+0x374>
 */
static inline void chCacheReleaseObject(objects_cache_t *ocp,
                                        oc_object_t *objp) {

  chSysLock();
  chCacheReleaseObjectI(ocp, objp);
 8003dd0:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8004078 <oslib_test_006_001_execute+0x338>
  test_set_step(2);
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	f8cb 3000 	str.w	r3, [fp]
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8003dda:	2700      	movs	r7, #0
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 8003ddc:	4638      	mov	r0, r7
 8003dde:	f7ff fbdf 	bl	80035a0 <chCacheGetObject.constprop.0>
 8003de2:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003de4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003de6:	4649      	mov	r1, r9
 8003de8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003dec:	f7fc ff88 	bl	8000d00 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 8003df0:	4641      	mov	r1, r8
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003df2:	2800      	cmp	r0, #0
 8003df4:	f040 813d 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 8003df8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003dfa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003dfe:	f7fc ff7f 	bl	8000d00 <_test_assert>
 8003e02:	2320      	movs	r3, #32
 8003e04:	4605      	mov	r5, r0
 8003e06:	2800      	cmp	r0, #0
 8003e08:	f040 8133 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	4621      	mov	r1, r4
 8003e12:	4650      	mov	r0, sl
 8003e14:	f7fd fcbc 	bl	8001790 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003e18:	f7ff fdf2 	bl	8003a00 <chSchRescheduleS>
 8003e1c:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8003e20:	3701      	adds	r7, #1
 8003e22:	2f08      	cmp	r7, #8
 8003e24:	d1da      	bne.n	8003ddc <oslib_test_006_001_execute+0x9c>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("", "unexpected tokens");
 8003e26:	499b      	ldr	r1, [pc, #620]	; (8004094 <oslib_test_006_001_execute+0x354>)
 8003e28:	489b      	ldr	r0, [pc, #620]	; (8004098 <oslib_test_006_001_execute+0x358>)
 8003e2a:	f7fd f8e9 	bl	8001000 <_test_assert_sequence>
 8003e2e:	4605      	mov	r5, r0
 8003e30:	2800      	cmp	r0, #0
 8003e32:	f040 811e 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(2);

  /* [6.1.3] Getting and releasing objects with synchronous
     initialization.*/
  test_set_step(3);
 8003e36:	2303      	movs	r3, #3
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e38:	4f98      	ldr	r7, [pc, #608]	; (800409c <oslib_test_006_001_execute+0x35c>)
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003e3a:	f8df 9270 	ldr.w	r9, [pc, #624]	; 80040ac <oslib_test_006_001_execute+0x36c>
  /* Marking it as OC_FLAG_NOTSYNC because the read operation is going
     to corrupt it in case of failure. It is responsibility of the read
     implementation to clear it if the operation succeeds.*/
  objp->obj_flags |= OC_FLAG_NOTSYNC;

  return ocp->readf(ocp, objp, async);
 8003e3e:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8004078 <oslib_test_006_001_execute+0x338>
  test_set_step(3);
 8003e42:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8003e46:	4628      	mov	r0, r5
 8003e48:	f7ff fbaa 	bl	80035a0 <chCacheGetObject.constprop.0>
 8003e4c:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003e50:	4639      	mov	r1, r7
 8003e52:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003e56:	f7fc ff53 	bl	8000d00 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003e5a:	4649      	mov	r1, r9
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	f040 8108 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003e62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e64:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003e68:	f7fc ff4a 	bl	8000d00 <_test_assert>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4621      	mov	r1, r4
 8003e70:	4640      	mov	r0, r8
 8003e72:	2a00      	cmp	r2, #0
 8003e74:	f040 80fd 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8003e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8003e7a:	f8d6 a03c 	ldr.w	sl, [r6, #60]	; 0x3c
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8003e7e:	f043 0308 	orr.w	r3, r3, #8
 8003e82:	6263      	str	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8003e84:	47d0      	blx	sl

      error = chCacheReadObject(&cache1, objp, false);

      test_assert(error == false, "returned error");
 8003e86:	f080 0001 	eor.w	r0, r0, #1
 8003e8a:	4985      	ldr	r1, [pc, #532]	; (80040a0 <oslib_test_006_001_execute+0x360>)
 8003e8c:	b2c0      	uxtb	r0, r0
 8003e8e:	f7fc ff37 	bl	8000d00 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e92:	4639      	mov	r1, r7
      test_assert(error == false, "returned error");
 8003e94:	2800      	cmp	r0, #0
 8003e96:	f040 80ec 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e9c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003ea0:	f7fc ff2e 	bl	8000d00 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003ea4:	497f      	ldr	r1, [pc, #508]	; (80040a4 <oslib_test_006_001_execute+0x364>)
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	f040 80e3 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003eac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003eae:	f080 0008 	eor.w	r0, r0, #8
 8003eb2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003eb6:	f7fc ff23 	bl	8000d00 <_test_assert>
 8003eba:	2320      	movs	r3, #32
 8003ebc:	4682      	mov	sl, r0
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	f040 80d7 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
 8003ec4:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4640      	mov	r0, r8
 8003ecc:	f7fd fc60 	bl	8001790 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003ed0:	f7ff fd96 	bl	8003a00 <chSchRescheduleS>
 8003ed4:	f38a 8811 	msr	BASEPRI, sl
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8003ed8:	3501      	adds	r5, #1
 8003eda:	2d08      	cmp	r5, #8
 8003edc:	d1b3      	bne.n	8003e46 <oslib_test_006_001_execute+0x106>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 8003ede:	496d      	ldr	r1, [pc, #436]	; (8004094 <oslib_test_006_001_execute+0x354>)
 8003ee0:	4871      	ldr	r0, [pc, #452]	; (80040a8 <oslib_test_006_001_execute+0x368>)
 8003ee2:	f7fd f88d 	bl	8001000 <_test_assert_sequence>
 8003ee6:	4605      	mov	r5, r0
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	f040 80c2 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(3);

  /* [6.1.4] Getting and releasing objects with asynchronous
     initialization.*/
  test_set_step(4);
 8003eee:	2304      	movs	r3, #4
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003ef0:	4f6a      	ldr	r7, [pc, #424]	; (800409c <oslib_test_006_001_execute+0x35c>)
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003ef2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80040ac <oslib_test_006_001_execute+0x36c>
 8003ef6:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8004078 <oslib_test_006_001_execute+0x338>
  test_set_step(4);
 8003efa:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8003efe:	4628      	mov	r0, r5
 8003f00:	f7ff fb4e 	bl	80035a0 <chCacheGetObject.constprop.0>
 8003f04:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003f06:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003f08:	4639      	mov	r1, r7
 8003f0a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003f0e:	f7fc fef7 	bl	8000d00 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003f12:	4649      	mov	r1, r9
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003f14:	2800      	cmp	r0, #0
 8003f16:	f040 80ac 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003f1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003f1c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003f20:	f7fc feee 	bl	8000d00 <_test_assert>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2201      	movs	r2, #1
 8003f28:	4621      	mov	r1, r4
 8003f2a:	4640      	mov	r0, r8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f040 80a0 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8003f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8003f34:	f8d6 a03c 	ldr.w	sl, [r6, #60]	; 0x3c
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8003f38:	f043 0308 	orr.w	r3, r3, #8
 8003f3c:	6263      	str	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8003f3e:	47d0      	blx	sl

      error = chCacheReadObject(&cache1, objp, true);

      test_assert(error == false, "returned error");
 8003f40:	f080 0001 	eor.w	r0, r0, #1
 8003f44:	4956      	ldr	r1, [pc, #344]	; (80040a0 <oslib_test_006_001_execute+0x360>)
 8003f46:	b2c0      	uxtb	r0, r0
 8003f48:	f7fc feda 	bl	8000d00 <_test_assert>
 8003f4c:	4603      	mov	r3, r0

      objp = chCacheGetObject(&cache1, 0U, i);
 8003f4e:	4628      	mov	r0, r5
      test_assert(error == false, "returned error");
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f040 808e 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      objp = chCacheGetObject(&cache1, 0U, i);
 8003f56:	f7ff fb23 	bl	80035a0 <chCacheGetObject.constprop.0>
 8003f5a:	4604      	mov	r4, r0

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003f5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003f5e:	4639      	mov	r1, r7
 8003f60:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003f64:	f7fc fecc 	bl	8000d00 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003f68:	494e      	ldr	r1, [pc, #312]	; (80040a4 <oslib_test_006_001_execute+0x364>)
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	f040 8081 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003f70:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003f72:	f080 0008 	eor.w	r0, r0, #8
 8003f76:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003f7a:	f7fc fec1 	bl	8000d00 <_test_assert>
 8003f7e:	2320      	movs	r3, #32
 8003f80:	4682      	mov	sl, r0
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d175      	bne.n	8004072 <oslib_test_006_001_execute+0x332>
 8003f86:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4640      	mov	r0, r8
 8003f8e:	f7fd fbff 	bl	8001790 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003f92:	f7ff fd35 	bl	8003a00 <chSchRescheduleS>
 8003f96:	f38a 8811 	msr	BASEPRI, sl
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8003f9a:	3501      	adds	r5, #1
 8003f9c:	2d08      	cmp	r5, #8
 8003f9e:	d1ae      	bne.n	8003efe <oslib_test_006_001_execute+0x1be>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 8003fa0:	493c      	ldr	r1, [pc, #240]	; (8004094 <oslib_test_006_001_execute+0x354>)
 8003fa2:	4841      	ldr	r0, [pc, #260]	; (80040a8 <oslib_test_006_001_execute+0x368>)
 8003fa4:	f7fd f82c 	bl	8001000 <_test_assert_sequence>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d162      	bne.n	8004072 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(4);

  /* [6.1.5] Checking cached objects.*/
  test_set_step(5);
 8003fac:	2305      	movs	r3, #5
    uint32_t i;

    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003fae:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800409c <oslib_test_006_001_execute+0x35c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003fb2:	4f3c      	ldr	r7, [pc, #240]	; (80040a4 <oslib_test_006_001_execute+0x364>)
  chCacheReleaseObjectI(ocp, objp);
 8003fb4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8004078 <oslib_test_006_001_execute+0x338>
  test_set_step(5);
 8003fb8:	f8cb 3000 	str.w	r3, [fp]
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 8003fbc:	2604      	movs	r6, #4
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	f7ff faee 	bl	80035a0 <chCacheGetObject.constprop.0>
 8003fc4:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003fc6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003fc8:	4641      	mov	r1, r8
 8003fca:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003fce:	f7fc fe97 	bl	8000d00 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003fd2:	4639      	mov	r1, r7
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d14c      	bne.n	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003fd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003fda:	f080 0008 	eor.w	r0, r0, #8
 8003fde:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003fe2:	f7fc fe8d 	bl	8000d00 <_test_assert>
 8003fe6:	2320      	movs	r3, #32
 8003fe8:	4605      	mov	r5, r0
 8003fea:	2800      	cmp	r0, #0
 8003fec:	d141      	bne.n	8004072 <oslib_test_006_001_execute+0x332>
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	4648      	mov	r0, r9
 8003ff6:	f7fd fbcb 	bl	8001790 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003ffa:	f7ff fd01 	bl	8003a00 <chSchRescheduleS>
 8003ffe:	f385 8811 	msr	BASEPRI, r5
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 8004002:	3601      	adds	r6, #1
 8004004:	2e08      	cmp	r6, #8
 8004006:	d1da      	bne.n	8003fbe <oslib_test_006_001_execute+0x27e>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("", "unexpected tokens");
 8004008:	4922      	ldr	r1, [pc, #136]	; (8004094 <oslib_test_006_001_execute+0x354>)
 800400a:	4823      	ldr	r0, [pc, #140]	; (8004098 <oslib_test_006_001_execute+0x358>)
 800400c:	f7fc fff8 	bl	8001000 <_test_assert_sequence>
 8004010:	4604      	mov	r4, r0
 8004012:	bb70      	cbnz	r0, 8004072 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(5);

  /* [6.1.6] Checking non-cached objects.*/
  test_set_step(6);
 8004014:	2306      	movs	r3, #6
    uint32_t i;

    for (i = 0; i < NUM_OBJECTS; i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004016:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800409c <oslib_test_006_001_execute+0x35c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 800401a:	4f24      	ldr	r7, [pc, #144]	; (80040ac <oslib_test_006_001_execute+0x36c>)
  chCacheReleaseObjectI(ocp, objp);
 800401c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004078 <oslib_test_006_001_execute+0x338>
  test_set_step(6);
 8004020:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8004024:	4620      	mov	r0, r4
 8004026:	f7ff fabb 	bl	80035a0 <chCacheGetObject.constprop.0>
 800402a:	4605      	mov	r5, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800402c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800402e:	4641      	mov	r1, r8
 8004030:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004034:	f7fc fe64 	bl	8000d00 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8004038:	4639      	mov	r1, r7
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800403a:	b9d0      	cbnz	r0, 8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 800403c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800403e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004042:	f7fc fe5d 	bl	8000d00 <_test_assert>
 8004046:	2320      	movs	r3, #32
 8004048:	4606      	mov	r6, r0
 800404a:	b990      	cbnz	r0, 8004072 <oslib_test_006_001_execute+0x332>
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	4629      	mov	r1, r5
 8004052:	4648      	mov	r0, r9
 8004054:	f7fd fb9c 	bl	8001790 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8004058:	f7ff fcd2 	bl	8003a00 <chSchRescheduleS>
 800405c:	f386 8811 	msr	BASEPRI, r6
    for (i = 0; i < NUM_OBJECTS; i++) {
 8004060:	3401      	adds	r4, #1
 8004062:	2c04      	cmp	r4, #4
 8004064:	d1de      	bne.n	8004024 <oslib_test_006_001_execute+0x2e4>
    }

    test_assert_sequence("", "unexpected tokens");
  }
  test_end_step(6);
}
 8004066:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("", "unexpected tokens");
 800406a:	490a      	ldr	r1, [pc, #40]	; (8004094 <oslib_test_006_001_execute+0x354>)
 800406c:	480a      	ldr	r0, [pc, #40]	; (8004098 <oslib_test_006_001_execute+0x358>)
 800406e:	f7fc bfc7 	b.w	8001000 <_test_assert_sequence>
}
 8004072:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004076:	bf00      	nop
 8004078:	200013e8 	.word	0x200013e8
 800407c:	200016f0 	.word	0x200016f0
 8004080:	200015f0 	.word	0x200015f0
 8004084:	08000e81 	.word	0x08000e81
 8004088:	080040c1 	.word	0x080040c1
 800408c:	200013fc 	.word	0x200013fc
 8004090:	200017a4 	.word	0x200017a4
 8004094:	0800a750 	.word	0x0800a750
 8004098:	0800a3e0 	.word	0x0800a3e0
 800409c:	0800a72c 	.word	0x0800a72c
 80040a0:	0800a764 	.word	0x0800a764
 80040a4:	0800a774 	.word	0x0800a774
 80040a8:	0800a780 	.word	0x0800a780
 80040ac:	0800a778 	.word	0x0800a778
 80040b0:	20001f1c 	.word	0x20001f1c
 80040b4:	0800a738 	.word	0x0800a738
	...

080040c0 <obj_read>:
  test_emit_token('a' + objp->obj_key);
 80040c0:	694b      	ldr	r3, [r1, #20]
                     bool async) {
 80040c2:	b570      	push	{r4, r5, r6, lr}
  test_emit_token('a' + objp->obj_key);
 80040c4:	3361      	adds	r3, #97	; 0x61
                     bool async) {
 80040c6:	460c      	mov	r4, r1
 80040c8:	4606      	mov	r6, r0
  test_emit_token('a' + objp->obj_key);
 80040ca:	b2d8      	uxtb	r0, r3
                     bool async) {
 80040cc:	4615      	mov	r5, r2
  test_emit_token('a' + objp->obj_key);
 80040ce:	f7fc febf 	bl	8000e50 <test_emit_token>
  objp->obj_flags &= ~OC_FLAG_NOTSYNC;
 80040d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040d4:	f023 0308 	bic.w	r3, r3, #8
 80040d8:	6263      	str	r3, [r4, #36]	; 0x24
  if (async) {
 80040da:	b90d      	cbnz	r5, 80040e0 <obj_read+0x20>
}
 80040dc:	2000      	movs	r0, #0
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	2320      	movs	r3, #32
 80040e2:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 80040e6:	4621      	mov	r1, r4
 80040e8:	4630      	mov	r0, r6
 80040ea:	f7fd fb51 	bl	8001790 <chCacheReleaseObjectI>
  chSchRescheduleS();
 80040ee:	f7ff fc87 	bl	8003a00 <chSchRescheduleS>
 80040f2:	2300      	movs	r3, #0
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	2000      	movs	r0, #0
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	0000      	movs	r0, r0
	...

08004100 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	2520      	movs	r5, #32
 8004104:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8004108:	480b      	ldr	r0, [pc, #44]	; (8004138 <evt_thread7+0x38>)
 800410a:	2100      	movs	r1, #0
 800410c:	f7fd faf0 	bl	80016f0 <chEvtBroadcastFlagsI>
 8004110:	2400      	movs	r4, #0
  chSchRescheduleS();
 8004112:	f7ff fc75 	bl	8003a00 <chSchRescheduleS>
 8004116:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
 800411a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800411e:	f7fe fd7f 	bl	8002c20 <chThdSleep>
 8004122:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8004126:	4805      	ldr	r0, [pc, #20]	; (800413c <evt_thread7+0x3c>)
 8004128:	4621      	mov	r1, r4
 800412a:	f7fd fae1 	bl	80016f0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800412e:	f7ff fc67 	bl	8003a00 <chSchRescheduleS>
 8004132:	f384 8811 	msr	BASEPRI, r4
}
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	20000808 	.word	0x20000808
 800413c:	2000080c 	.word	0x2000080c

08004140 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8004140:	b510      	push	{r4, lr}
 8004142:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 8004144:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004148:	f7fe fd6a 	bl	8002c20 <chThdSleep>
 800414c:	2320      	movs	r3, #32
 800414e:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 8004152:	2101      	movs	r1, #1
 8004154:	4620      	mov	r0, r4
 8004156:	f7fd fab3 	bl	80016c0 <chEvtSignalI>
  chSchRescheduleS();
 800415a:	f7ff fc51 	bl	8003a00 <chSchRescheduleS>
 800415e:	2300      	movs	r3, #0
 8004160:	f383 8811 	msr	BASEPRI, r3
}
 8004164:	bd10      	pop	{r4, pc}
 8004166:	bf00      	nop
	...

08004170 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 8004170:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 8004172:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004176:	f7fe fd53 	bl	8002c20 <chThdSleep>
 800417a:	2320      	movs	r3, #32
 800417c:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8004180:	4c06      	ldr	r4, [pc, #24]	; (800419c <thread4B+0x2c>)
 8004182:	4620      	mov	r0, r4
 8004184:	f7ff f984 	bl	8003490 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8004188:	4620      	mov	r0, r4
 800418a:	f7fd fac9 	bl	8001720 <chMtxUnlockS>
  chSchRescheduleS();
 800418e:	f7ff fc37 	bl	8003a00 <chSchRescheduleS>
 8004192:	2300      	movs	r3, #0
 8004194:	f383 8811 	msr	BASEPRI, r3
}
 8004198:	bd10      	pop	{r4, pc}
 800419a:	bf00      	nop
 800419c:	2000083c 	.word	0x2000083c

080041a0 <rt_test_006_006_execute>:

static void rt_test_006_006_teardown(void) {
  test_wait_threads();
}

static void rt_test_006_006_execute(void) {
 80041a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [6.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 80041a4:	4e62      	ldr	r6, [pc, #392]	; (8004330 <rt_test_006_006_execute+0x190>)
static void rt_test_006_006_execute(void) {
 80041a6:	b086      	sub	sp, #24
  test_set_step(1);
 80041a8:	2301      	movs	r3, #1
  tqp->next = (thread_t *)tqp;
 80041aa:	ad03      	add	r5, sp, #12
 80041ac:	f04f 0800 	mov.w	r8, #0
  tqp->prev = (thread_t *)tqp;
 80041b0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80041b4:	6033      	str	r3, [r6, #0]
 80041b6:	f8cd 8014 	str.w	r8, [sp, #20]
 80041ba:	2720      	movs	r7, #32
 80041bc:	f387 8811 	msr	BASEPRI, r7
 */
static inline bool chBSemGetStateI(const binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 80041c0:	9805      	ldr	r0, [sp, #20]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80041c2:	495c      	ldr	r1, [pc, #368]	; (8004334 <rt_test_006_006_execute+0x194>)
 80041c4:	4540      	cmp	r0, r8
 80041c6:	bfcc      	ite	gt
 80041c8:	2000      	movgt	r0, #0
 80041ca:	2001      	movle	r0, #1
 80041cc:	f7fc fd98 	bl	8000d00 <_test_assert>
 80041d0:	b120      	cbz	r0, 80041dc <rt_test_006_006_execute+0x3c>
 80041d2:	f388 8811 	msr	BASEPRI, r8
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
  test_end_step(6);
}
 80041d6:	b006      	add	sp, #24
 80041d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041dc:	4604      	mov	r4, r0
 80041de:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80041e2:	2302      	movs	r3, #2
 80041e4:	4601      	mov	r1, r0
 80041e6:	4628      	mov	r0, r5
 80041e8:	6033      	str	r3, [r6, #0]
 80041ea:	f7ff fc19 	bl	8003a20 <chSemResetWithMessage.constprop.0>
 80041ee:	f387 8811 	msr	BASEPRI, r7
 80041f2:	9805      	ldr	r0, [sp, #20]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80041f4:	494f      	ldr	r1, [pc, #316]	; (8004334 <rt_test_006_006_execute+0x194>)
 80041f6:	2800      	cmp	r0, #0
 80041f8:	bfcc      	ite	gt
 80041fa:	2000      	movgt	r0, #0
 80041fc:	2001      	movle	r0, #1
 80041fe:	f7fc fd7f 	bl	8000d00 <_test_assert>
 8004202:	4680      	mov	r8, r0
 8004204:	2800      	cmp	r0, #0
 8004206:	d174      	bne.n	80042f2 <rt_test_006_006_execute+0x152>
 8004208:	f380 8811 	msr	BASEPRI, r0
  return ch.rlist.current;
 800420c:	4a4a      	ldr	r2, [pc, #296]	; (8004338 <rt_test_006_006_execute+0x198>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800420e:	4b4b      	ldr	r3, [pc, #300]	; (800433c <rt_test_006_006_execute+0x19c>)
  return chThdGetSelfX()->prio;
 8004210:	6992      	ldr	r2, [r2, #24]
 8004212:	484b      	ldr	r0, [pc, #300]	; (8004340 <rt_test_006_006_execute+0x1a0>)
 8004214:	6892      	ldr	r2, [r2, #8]
 8004216:	9500      	str	r5, [sp, #0]
  test_set_step(3);
 8004218:	2403      	movs	r4, #3
 800421a:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800421c:	3a01      	subs	r2, #1
 800421e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004222:	f7fe f915 	bl	8002450 <chThdCreateStatic>
 8004226:	4a47      	ldr	r2, [pc, #284]	; (8004344 <rt_test_006_006_execute+0x1a4>)
 8004228:	4601      	mov	r1, r0
  test_set_step(4);
 800422a:	2304      	movs	r3, #4
  return chSemWait(&bsp->sem);
 800422c:	4628      	mov	r0, r5
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800422e:	6011      	str	r1, [r2, #0]
  test_set_step(4);
 8004230:	6033      	str	r3, [r6, #0]
 8004232:	f7ff fa35 	bl	80036a0 <chSemWait>
 8004236:	4604      	mov	r4, r0
 8004238:	f387 8811 	msr	BASEPRI, r7
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 800423c:	9805      	ldr	r0, [sp, #20]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 800423e:	493d      	ldr	r1, [pc, #244]	; (8004334 <rt_test_006_006_execute+0x194>)
 8004240:	2800      	cmp	r0, #0
 8004242:	bfcc      	ite	gt
 8004244:	2000      	movgt	r0, #0
 8004246:	2001      	movle	r0, #1
 8004248:	f7fc fd5a 	bl	8000d00 <_test_assert>
 800424c:	2800      	cmp	r0, #0
 800424e:	d1c0      	bne.n	80041d2 <rt_test_006_006_execute+0x32>
 8004250:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
 8004254:	fab4 f084 	clz	r0, r4
 8004258:	493b      	ldr	r1, [pc, #236]	; (8004348 <rt_test_006_006_execute+0x1a8>)
 800425a:	0940      	lsrs	r0, r0, #5
 800425c:	f7fc fd50 	bl	8000d00 <_test_assert>
 8004260:	2800      	cmp	r0, #0
 8004262:	d1b8      	bne.n	80041d6 <rt_test_006_006_execute+0x36>
  test_set_step(5);
 8004264:	2305      	movs	r3, #5
 8004266:	6033      	str	r3, [r6, #0]
 8004268:	f387 8811 	msr	BASEPRI, r7
  if (bsp->sem.cnt < (cnt_t)1) {
 800426c:	9b05      	ldr	r3, [sp, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	dd44      	ble.n	80042fc <rt_test_006_006_execute+0x15c>
  chSchRescheduleS();
 8004272:	f7ff fbc5 	bl	8003a00 <chSchRescheduleS>
 8004276:	f04f 0800 	mov.w	r8, #0
 800427a:	f388 8811 	msr	BASEPRI, r8
 800427e:	2720      	movs	r7, #32
 8004280:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8004284:	9805      	ldr	r0, [sp, #20]
 8004286:	4931      	ldr	r1, [pc, #196]	; (800434c <rt_test_006_006_execute+0x1ac>)
 8004288:	4540      	cmp	r0, r8
 800428a:	bfd4      	ite	le
 800428c:	2000      	movle	r0, #0
 800428e:	2001      	movgt	r0, #1
 8004290:	f7fc fd36 	bl	8000d00 <_test_assert>
 8004294:	4604      	mov	r4, r0
 8004296:	2800      	cmp	r0, #0
 8004298:	d19b      	bne.n	80041d2 <rt_test_006_006_execute+0x32>
 800429a:	f380 8811 	msr	BASEPRI, r0
 800429e:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 80042a2:	9805      	ldr	r0, [sp, #20]
 80042a4:	492a      	ldr	r1, [pc, #168]	; (8004350 <rt_test_006_006_execute+0x1b0>)
 80042a6:	f1a0 0001 	sub.w	r0, r0, #1
 80042aa:	fab0 f080 	clz	r0, r0
 80042ae:	0940      	lsrs	r0, r0, #5
 80042b0:	f7fc fd26 	bl	8000d00 <_test_assert>
 80042b4:	b9e8      	cbnz	r0, 80042f2 <rt_test_006_006_execute+0x152>
 80042b6:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 80042ba:	2306      	movs	r3, #6
 80042bc:	6033      	str	r3, [r6, #0]
 80042be:	f387 8811 	msr	BASEPRI, r7
  if (bsp->sem.cnt < (cnt_t)1) {
 80042c2:	9b05      	ldr	r3, [sp, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	dd2f      	ble.n	8004328 <rt_test_006_006_execute+0x188>
  chSchRescheduleS();
 80042c8:	f7ff fb9a 	bl	8003a00 <chSchRescheduleS>
 80042cc:	2500      	movs	r5, #0
 80042ce:	f385 8811 	msr	BASEPRI, r5
 80042d2:	2620      	movs	r6, #32
 80042d4:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 80042d8:	9805      	ldr	r0, [sp, #20]
 80042da:	491e      	ldr	r1, [pc, #120]	; (8004354 <rt_test_006_006_execute+0x1b4>)
 80042dc:	42a8      	cmp	r0, r5
 80042de:	bfd4      	ite	le
 80042e0:	2000      	movle	r0, #0
 80042e2:	2001      	movgt	r0, #1
 80042e4:	f7fc fd0c 	bl	8000d00 <_test_assert>
 80042e8:	4604      	mov	r4, r0
 80042ea:	b158      	cbz	r0, 8004304 <rt_test_006_006_execute+0x164>
 80042ec:	f385 8811 	msr	BASEPRI, r5
 80042f0:	e771      	b.n	80041d6 <rt_test_006_006_execute+0x36>
 80042f2:	f384 8811 	msr	BASEPRI, r4
}
 80042f6:	b006      	add	sp, #24
 80042f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chSemSignalI(&bsp->sem);
 80042fc:	4628      	mov	r0, r5
 80042fe:	f7fd fa37 	bl	8001770 <chSemSignalI>
 8004302:	e7b6      	b.n	8004272 <rt_test_006_006_execute+0xd2>
 8004304:	f380 8811 	msr	BASEPRI, r0
 8004308:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 800430c:	9805      	ldr	r0, [sp, #20]
 800430e:	4910      	ldr	r1, [pc, #64]	; (8004350 <rt_test_006_006_execute+0x1b0>)
 8004310:	f1a0 0001 	sub.w	r0, r0, #1
 8004314:	fab0 f080 	clz	r0, r0
 8004318:	0940      	lsrs	r0, r0, #5
 800431a:	f7fc fcf1 	bl	8000d00 <_test_assert>
 800431e:	2800      	cmp	r0, #0
 8004320:	d1e7      	bne.n	80042f2 <rt_test_006_006_execute+0x152>
 8004322:	f380 8811 	msr	BASEPRI, r0
  test_end_step(6);
 8004326:	e756      	b.n	80041d6 <rt_test_006_006_execute+0x36>
 8004328:	4628      	mov	r0, r5
 800432a:	f7fd fa21 	bl	8001770 <chSemSignalI>
 800432e:	e7cb      	b.n	80042c8 <rt_test_006_006_execute+0x128>
 8004330:	20001f1c 	.word	0x20001f1c
 8004334:	0800a78c 	.word	0x0800a78c
 8004338:	2000142c 	.word	0x2000142c
 800433c:	08004391 	.word	0x08004391
 8004340:	20001808 	.word	0x20001808
 8004344:	20001f34 	.word	0x20001f34
 8004348:	0800a798 	.word	0x0800a798
 800434c:	0800a7ac 	.word	0x0800a7ac
 8004350:	0800a7b8 	.word	0x0800a7b8
 8004354:	0800a790 	.word	0x0800a790
	...

08004360 <thread2>:
static THD_FUNCTION(thread2, p) {
 8004360:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 8004362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004366:	f7fe fc5b 	bl	8002c20 <chThdSleep>
 800436a:	2320      	movs	r3, #32
 800436c:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
 8004370:	4804      	ldr	r0, [pc, #16]	; (8004384 <thread2+0x24>)
 8004372:	f7fd f9fd 	bl	8001770 <chSemSignalI>
  chSchRescheduleS();
 8004376:	f7ff fb43 	bl	8003a00 <chSchRescheduleS>
 800437a:	2300      	movs	r3, #0
 800437c:	f383 8811 	msr	BASEPRI, r3
}
 8004380:	bd08      	pop	{r3, pc}
 8004382:	bf00      	nop
 8004384:	200017f0 	.word	0x200017f0
	...

08004390 <thread4>:
static THD_FUNCTION(thread4, p) {
 8004390:	b508      	push	{r3, lr}
 8004392:	2220      	movs	r2, #32
 8004394:	f382 8811 	msr	BASEPRI, r2
  if (bsp->sem.cnt < (cnt_t)1) {
 8004398:	6883      	ldr	r3, [r0, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	dd05      	ble.n	80043aa <thread4+0x1a>
  chSchRescheduleS();
 800439e:	f7ff fb2f 	bl	8003a00 <chSchRescheduleS>
 80043a2:	2300      	movs	r3, #0
 80043a4:	f383 8811 	msr	BASEPRI, r3
}
 80043a8:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 80043aa:	f7fd f9e1 	bl	8001770 <chSemSignalI>
  chSchRescheduleS();
 80043ae:	f7ff fb27 	bl	8003a00 <chSchRescheduleS>
 80043b2:	2300      	movs	r3, #0
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	bd08      	pop	{r3, pc}
 80043ba:	bf00      	nop
 80043bc:	0000      	movs	r0, r0
	...

080043c0 <thread1.lto_priv.0>:
static THD_FUNCTION(thread1, p) {
 80043c0:	b510      	push	{r4, lr}
 80043c2:	2320      	movs	r3, #32
 80043c4:	4604      	mov	r4, r0
 80043c6:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80043ca:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <thread1.lto_priv.0+0x30>)
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	b120      	cbz	r0, 80043da <thread1.lto_priv.0+0x1a>
    *trp = NULL;
 80043d0:	2200      	movs	r2, #0
    tp->u.rdymsg = msg;
 80043d2:	6242      	str	r2, [r0, #36]	; 0x24
    *trp = NULL;
 80043d4:	601a      	str	r2, [r3, #0]
    (void) chSchReadyI(tp);
 80043d6:	f7fd f8ab 	bl	8001530 <chSchReadyI>
  chSchRescheduleS();
 80043da:	f7ff fb11 	bl	8003a00 <chSchRescheduleS>
 80043de:	2300      	movs	r3, #0
 80043e0:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80043e4:	7820      	ldrb	r0, [r4, #0]
}
 80043e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 80043ea:	f7fc bd31 	b.w	8000e50 <test_emit_token>
 80043ee:	bf00      	nop
 80043f0:	20001f48 	.word	0x20001f48
	...

08004400 <chGuardedPoolLoadArray>:
void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 8004400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004404:	4605      	mov	r5, r0
 8004406:	460c      	mov	r4, r1
 8004408:	4616      	mov	r6, r2
 800440a:	f04f 0820 	mov.w	r8, #32
 800440e:	2700      	movs	r7, #0
 8004410:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 8004414:	68eb      	ldr	r3, [r5, #12]
 8004416:	6023      	str	r3, [r4, #0]
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8004418:	4628      	mov	r0, r5
  mp->next = php;
 800441a:	60ec      	str	r4, [r5, #12]
 800441c:	f7fd f9a8 	bl	8001770 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8004420:	f7ff faee 	bl	8003a00 <chSchRescheduleS>
 8004424:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004428:	692b      	ldr	r3, [r5, #16]
  while (n != 0U) {
 800442a:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800442c:	441c      	add	r4, r3
  while (n != 0U) {
 800442e:	d1ef      	bne.n	8004410 <chGuardedPoolLoadArray+0x10>
}
 8004430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004440 <oslib_test_007_002_execute>:
static void oslib_test_007_002_execute(void) {
 8004440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004444:	4832      	ldr	r0, [pc, #200]	; (8004510 <oslib_test_007_002_execute+0xd0>)
  test_set_step(1);
 8004446:	4f33      	ldr	r7, [pc, #204]	; (8004514 <oslib_test_007_002_execute+0xd4>)
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004448:	4933      	ldr	r1, [pc, #204]	; (8004518 <oslib_test_007_002_execute+0xd8>)
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800444a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8004520 <oslib_test_007_002_execute+0xe0>
  test_set_step(1);
 800444e:	2301      	movs	r3, #1
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004450:	2204      	movs	r2, #4
 8004452:	4606      	mov	r6, r0
  test_set_step(1);
 8004454:	603b      	str	r3, [r7, #0]
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004456:	f7ff ffd3 	bl	8004400 <chGuardedPoolLoadArray>
  test_set_step(2);
 800445a:	2302      	movs	r3, #2
 800445c:	603b      	str	r3, [r7, #0]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800445e:	4635      	mov	r5, r6
  test_set_step(2);
 8004460:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8004462:	2100      	movs	r1, #0
 8004464:	4628      	mov	r0, r5
 8004466:	f7fe f9fb 	bl	8002860 <chGuardedPoolAllocTimeout>
 800446a:	3800      	subs	r0, #0
 800446c:	bf18      	it	ne
 800446e:	2001      	movne	r0, #1
 8004470:	4641      	mov	r1, r8
 8004472:	f7fc fc45 	bl	8000d00 <_test_assert>
 8004476:	2800      	cmp	r0, #0
 8004478:	d148      	bne.n	800450c <oslib_test_007_002_execute+0xcc>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800447a:	3c01      	subs	r4, #1
 800447c:	d1f1      	bne.n	8004462 <oslib_test_007_002_execute+0x22>
  test_set_step(3);
 800447e:	2303      	movs	r3, #3
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004480:	4621      	mov	r1, r4
 8004482:	4823      	ldr	r0, [pc, #140]	; (8004510 <oslib_test_007_002_execute+0xd0>)
  test_set_step(3);
 8004484:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004486:	f7fe f9eb 	bl	8002860 <chGuardedPoolAllocTimeout>
 800448a:	fab0 f080 	clz	r0, r0
 800448e:	4923      	ldr	r1, [pc, #140]	; (800451c <oslib_test_007_002_execute+0xdc>)
 8004490:	0940      	lsrs	r0, r0, #5
 8004492:	f7fc fc35 	bl	8000d00 <_test_assert>
 8004496:	2800      	cmp	r0, #0
 8004498:	d138      	bne.n	800450c <oslib_test_007_002_execute+0xcc>
  test_set_step(4);
 800449a:	4d1f      	ldr	r5, [pc, #124]	; (8004518 <oslib_test_007_002_execute+0xd8>)
 800449c:	f8df a070 	ldr.w	sl, [pc, #112]	; 8004510 <oslib_test_007_002_execute+0xd0>
 80044a0:	2304      	movs	r3, #4
 80044a2:	f105 0910 	add.w	r9, r5, #16
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	f04f 0820 	mov.w	r8, #32
      chGuardedPoolFree(&gmp1, &objects[i]);
 80044ac:	462b      	mov	r3, r5
 80044ae:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 80044b2:	68f2      	ldr	r2, [r6, #12]
 80044b4:	f845 2b04 	str.w	r2, [r5], #4
 80044b8:	4650      	mov	r0, sl
  mp->next = php;
 80044ba:	60f3      	str	r3, [r6, #12]
 80044bc:	f7fd f958 	bl	8001770 <chSemSignalI>
  chSchRescheduleS();
 80044c0:	f7ff fa9e 	bl	8003a00 <chSchRescheduleS>
 80044c4:	f384 8811 	msr	BASEPRI, r4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80044c8:	454d      	cmp	r5, r9
 80044ca:	d1ef      	bne.n	80044ac <oslib_test_007_002_execute+0x6c>
  test_set_step(5);
 80044cc:	2305      	movs	r3, #5
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80044ce:	4e10      	ldr	r6, [pc, #64]	; (8004510 <oslib_test_007_002_execute+0xd0>)
 80044d0:	4d13      	ldr	r5, [pc, #76]	; (8004520 <oslib_test_007_002_execute+0xe0>)
  test_set_step(5);
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80044d6:	2100      	movs	r1, #0
 80044d8:	4630      	mov	r0, r6
 80044da:	f7fe f9c1 	bl	8002860 <chGuardedPoolAllocTimeout>
 80044de:	3800      	subs	r0, #0
 80044e0:	bf18      	it	ne
 80044e2:	2001      	movne	r0, #1
 80044e4:	4629      	mov	r1, r5
 80044e6:	f7fc fc0b 	bl	8000d00 <_test_assert>
 80044ea:	b978      	cbnz	r0, 800450c <oslib_test_007_002_execute+0xcc>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80044ec:	3c01      	subs	r4, #1
 80044ee:	d1f2      	bne.n	80044d6 <oslib_test_007_002_execute+0x96>
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80044f0:	4621      	mov	r1, r4
  test_set_step(6);
 80044f2:	2306      	movs	r3, #6
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80044f4:	4806      	ldr	r0, [pc, #24]	; (8004510 <oslib_test_007_002_execute+0xd0>)
  test_set_step(6);
 80044f6:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80044f8:	f7fe f9b2 	bl	8002860 <chGuardedPoolAllocTimeout>
 80044fc:	fab0 f080 	clz	r0, r0
}
 8004500:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004504:	4905      	ldr	r1, [pc, #20]	; (800451c <oslib_test_007_002_execute+0xdc>)
 8004506:	0940      	lsrs	r0, r0, #5
 8004508:	f7fc bbfa 	b.w	8000d00 <_test_assert>
}
 800450c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004510:	20000810 	.word	0x20000810
 8004514:	20001f1c 	.word	0x20001f1c
 8004518:	200017e0 	.word	0x200017e0
 800451c:	08009864 	.word	0x08009864
 8004520:	08009858 	.word	0x08009858
	...

08004530 <chMBFetchTimeout>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	4604      	mov	r4, r0
 8004534:	460e      	mov	r6, r1
 8004536:	4615      	mov	r5, r2
 8004538:	2320      	movs	r3, #32
 800453a:	f383 8811 	msr	BASEPRI, r3
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800453e:	18c7      	adds	r7, r0, r3
 8004540:	e004      	b.n	800454c <chMBFetchTimeout+0x1c>
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8004542:	6923      	ldr	r3, [r4, #16]
 8004544:	b96b      	cbnz	r3, 8004562 <chMBFetchTimeout+0x32>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8004546:	f7fe f9db 	bl	8002900 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800454a:	b930      	cbnz	r0, 800455a <chMBFetchTimeout+0x2a>
    if (mbp->reset) {
 800454c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800454e:	4629      	mov	r1, r5
 8004550:	4638      	mov	r0, r7
    if (mbp->reset) {
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f5      	beq.n	8004542 <chMBFetchTimeout+0x12>
      return MSG_RESET;
 8004556:	f06f 0001 	mvn.w	r0, #1
 800455a:	2300      	movs	r3, #0
 800455c:	f383 8811 	msr	BASEPRI, r3
}
 8004560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *msgp = *mbp->rdptr++;
 8004562:	68e2      	ldr	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 8004564:	6861      	ldr	r1, [r4, #4]
      *msgp = *mbp->rdptr++;
 8004566:	6810      	ldr	r0, [r2, #0]
 8004568:	3204      	adds	r2, #4
      if (mbp->rdptr >= mbp->top) {
 800456a:	428a      	cmp	r2, r1
      *msgp = *mbp->rdptr++;
 800456c:	60e2      	str	r2, [r4, #12]
      mbp->cnt--;
 800456e:	f103 33ff 	add.w	r3, r3, #4294967295
        mbp->rdptr = mbp->buffer;
 8004572:	bf28      	it	cs
 8004574:	6822      	ldrcs	r2, [r4, #0]
      *msgp = *mbp->rdptr++;
 8004576:	6030      	str	r0, [r6, #0]
        mbp->rdptr = mbp->buffer;
 8004578:	bf28      	it	cs
 800457a:	60e2      	strcs	r2, [r4, #12]
      mbp->cnt--;
 800457c:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 800457e:	f104 0018 	add.w	r0, r4, #24
 8004582:	f7fc ffed 	bl	8001560 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 8004586:	f7ff fa3b 	bl	8003a00 <chSchRescheduleS>
      return MSG_OK;
 800458a:	2000      	movs	r0, #0
 800458c:	2300      	movs	r3, #0
 800458e:	f383 8811 	msr	BASEPRI, r3
}
 8004592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045a0 <Thread1.lto_priv.0>:

static THD_WORKING_AREA(wa1Thread1, 256);
static THD_WORKING_AREA(wa2Thread1, 256);
static THD_FUNCTION(Thread1, arg) {
 80045a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a4:	4e11      	ldr	r6, [pc, #68]	; (80045ec <Thread1.lto_priv.0+0x4c>)
 80045a6:	b082      	sub	sp, #8
 */
static inline msg_t chJobDispatch(jobs_queue_t *jqp) {
  msg_t msg, jmsg;

  /* Waiting for a job.*/
  msg = chMBFetchTimeout(&jqp->mbx, &jmsg, TIME_INFINITE);
 80045a8:	f106 071c 	add.w	r7, r6, #28
 80045ac:	46b0      	mov	r8, r6
 80045ae:	f04f 32ff 	mov.w	r2, #4294967295
 80045b2:	a901      	add	r1, sp, #4
 80045b4:	4638      	mov	r0, r7
 80045b6:	f7ff ffbb 	bl	8004530 <chMBFetchTimeout>
  if (msg == MSG_OK) {
 80045ba:	4604      	mov	r4, r0
 80045bc:	b110      	cbz	r0, 80045c4 <Thread1.lto_priv.0+0x24>
  (void)arg;

  do {
    msg = chJobDispatch(&jq);
  } while (msg == MSG_OK);
}
 80045be:	b002      	add	sp, #8
 80045c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    job_descriptor_t *jp = (job_descriptor_t *)jmsg;
 80045c4:	9d01      	ldr	r5, [sp, #4]

    chDbgAssert(jp != NULL, "is NULL");

    if (jp->jobfunc != NULL) {
 80045c6:	682b      	ldr	r3, [r5, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f8      	beq.n	80045be <Thread1.lto_priv.0+0x1e>

      /* Invoking the job function.*/
      jp->jobfunc(jp->jobarg);
 80045cc:	6868      	ldr	r0, [r5, #4]
 80045ce:	4798      	blx	r3
 80045d0:	2320      	movs	r3, #32
 80045d2:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 80045d6:	68f3      	ldr	r3, [r6, #12]
 80045d8:	602b      	str	r3, [r5, #0]
 80045da:	4640      	mov	r0, r8
  mp->next = php;
 80045dc:	60f5      	str	r5, [r6, #12]
 80045de:	f7fd f8c7 	bl	8001770 <chSemSignalI>
  chSchRescheduleS();
 80045e2:	f7ff fa0d 	bl	8003a00 <chSchRescheduleS>
 80045e6:	f384 8811 	msr	BASEPRI, r4
  } while (msg == MSG_OK);
 80045ea:	e7e0      	b.n	80045ae <Thread1.lto_priv.0+0xe>
 80045ec:	2000166c 	.word	0x2000166c

080045f0 <chMBPostTimeout>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 80045f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f4:	2320      	movs	r3, #32
 80045f6:	4604      	mov	r4, r0
 80045f8:	460e      	mov	r6, r1
 80045fa:	4615      	mov	r5, r2
 80045fc:	f383 8811 	msr	BASEPRI, r3
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004600:	f100 0818 	add.w	r8, r0, #24
 8004604:	e00a      	b.n	800461c <chMBPostTimeout+0x2c>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004606:	e9d4 7200 	ldrd	r7, r2, [r4]
 800460a:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800460c:	eba2 0c07 	sub.w	ip, r2, r7
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8004610:	ebb3 0fac 	cmp.w	r3, ip, asr #2
 8004614:	d10e      	bne.n	8004634 <chMBPostTimeout+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004616:	f7fe f973 	bl	8002900 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800461a:	b930      	cbnz	r0, 800462a <chMBPostTimeout+0x3a>
    if (mbp->reset) {
 800461c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800461e:	4629      	mov	r1, r5
 8004620:	4640      	mov	r0, r8
    if (mbp->reset) {
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0ef      	beq.n	8004606 <chMBPostTimeout+0x16>
      return MSG_RESET;
 8004626:	f06f 0001 	mvn.w	r0, #1
 800462a:	2300      	movs	r3, #0
 800462c:	f383 8811 	msr	BASEPRI, r3
}
 8004630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *mbp->wrptr++ = msg;
 8004634:	68a0      	ldr	r0, [r4, #8]
 8004636:	1d01      	adds	r1, r0, #4
      if (mbp->wrptr >= mbp->top) {
 8004638:	428a      	cmp	r2, r1
      mbp->cnt++;
 800463a:	f103 0301 	add.w	r3, r3, #1
      *mbp->wrptr++ = msg;
 800463e:	60a1      	str	r1, [r4, #8]
 8004640:	6006      	str	r6, [r0, #0]
        mbp->wrptr = mbp->buffer;
 8004642:	bf98      	it	ls
 8004644:	60a7      	strls	r7, [r4, #8]
      mbp->cnt++;
 8004646:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8004648:	f104 0020 	add.w	r0, r4, #32
 800464c:	f7fc ff88 	bl	8001560 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 8004650:	f7ff f9d6 	bl	8003a00 <chSchRescheduleS>
      return MSG_OK;
 8004654:	2000      	movs	r0, #0
 8004656:	2300      	movs	r3, #0
 8004658:	f383 8811 	msr	BASEPRI, r3
}
 800465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004660 <oslib_test_002_003_execute>:
}

static void oslib_test_002_003_execute(void) {
 8004660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [2.3.1] Filling the mailbox.*/
  test_set_step(1);
 8004664:	4f43      	ldr	r7, [pc, #268]	; (8004774 <oslib_test_002_003_execute+0x114>)
 8004666:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800477c <oslib_test_002_003_execute+0x11c>
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800466a:	4e43      	ldr	r6, [pc, #268]	; (8004778 <oslib_test_002_003_execute+0x118>)
  test_set_step(1);
 800466c:	2301      	movs	r3, #1
static void oslib_test_002_003_execute(void) {
 800466e:	b082      	sub	sp, #8
  test_set_step(1);
 8004670:	603b      	str	r3, [r7, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004672:	4645      	mov	r5, r8
  test_set_step(1);
 8004674:	2442      	movs	r4, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004676:	4621      	mov	r1, r4
 8004678:	f04f 32ff 	mov.w	r2, #4294967295
 800467c:	4628      	mov	r0, r5
 800467e:	f7ff ffb7 	bl	80045f0 <chMBPostTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004682:	fab0 f080 	clz	r0, r0
 8004686:	4631      	mov	r1, r6
 8004688:	0940      	lsrs	r0, r0, #5
 800468a:	3401      	adds	r4, #1
 800468c:	f7fc fb38 	bl	8000d00 <_test_assert>
 8004690:	b990      	cbnz	r0, 80046b8 <oslib_test_002_003_execute+0x58>
    for (i = 0; i < MB_SIZE; i++) {
 8004692:	2c46      	cmp	r4, #70	; 0x46
 8004694:	d1ef      	bne.n	8004676 <oslib_test_002_003_execute+0x16>
  }
  test_end_step(1);

  /* [2.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 8004696:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8004698:	2201      	movs	r2, #1
 800469a:	2158      	movs	r1, #88	; 0x58
 800469c:	4837      	ldr	r0, [pc, #220]	; (800477c <oslib_test_002_003_execute+0x11c>)
  test_set_step(2);
 800469e:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 80046a0:	f7ff ffa6 	bl	80045f0 <chMBPostTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80046a4:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80046a8:	fab0 f080 	clz	r0, r0
 80046ac:	4932      	ldr	r1, [pc, #200]	; (8004778 <oslib_test_002_003_execute+0x118>)
 80046ae:	0940      	lsrs	r0, r0, #5
 80046b0:	f7fc fb26 	bl	8000d00 <_test_assert>
 80046b4:	4604      	mov	r4, r0
 80046b6:	b110      	cbz	r0, 80046be <oslib_test_002_003_execute+0x5e>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
  test_end_step(4);
}
 80046b8:	b002      	add	sp, #8
 80046ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046be:	2520      	movs	r5, #32
 80046c0:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostI(&mb1, 'X');
 80046c4:	2058      	movs	r0, #88	; 0x58
 80046c6:	f7fc ff5b 	bl	8001580 <chMBPostI.constprop.0>
 80046ca:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80046ce:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80046d2:	fab0 f080 	clz	r0, r0
 80046d6:	4928      	ldr	r1, [pc, #160]	; (8004778 <oslib_test_002_003_execute+0x118>)
 80046d8:	0940      	lsrs	r0, r0, #5
 80046da:	f7fc fb11 	bl	8000d00 <_test_assert>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d1ea      	bne.n	80046b8 <oslib_test_002_003_execute+0x58>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 80046e2:	2101      	movs	r1, #1
 80046e4:	2058      	movs	r0, #88	; 0x58
 80046e6:	f7ff faeb 	bl	8003cc0 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80046ea:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80046ee:	fab0 f080 	clz	r0, r0
 80046f2:	4921      	ldr	r1, [pc, #132]	; (8004778 <oslib_test_002_003_execute+0x118>)
 80046f4:	0940      	lsrs	r0, r0, #5
 80046f6:	f7fc fb03 	bl	8000d00 <_test_assert>
 80046fa:	4604      	mov	r4, r0
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d1db      	bne.n	80046b8 <oslib_test_002_003_execute+0x58>
 8004700:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostAheadI(&mb1, 'X');
 8004704:	2058      	movs	r0, #88	; 0x58
 8004706:	f7fc ff63 	bl	80015d0 <chMBPostAheadI.constprop.0>
 800470a:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800470e:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8004712:	fab0 f080 	clz	r0, r0
 8004716:	4918      	ldr	r1, [pc, #96]	; (8004778 <oslib_test_002_003_execute+0x118>)
 8004718:	0940      	lsrs	r0, r0, #5
 800471a:	f7fc faf1 	bl	8000d00 <_test_assert>
 800471e:	4604      	mov	r4, r0
 8004720:	2800      	cmp	r0, #0
 8004722:	d1c9      	bne.n	80046b8 <oslib_test_002_003_execute+0x58>
  test_set_step(3);
 8004724:	2303      	movs	r3, #3
 8004726:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8004728:	f7ff fa92 	bl	8003c50 <chMBReset.constprop.0>
  test_set_step(4);
 800472c:	2304      	movs	r3, #4
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800472e:	a901      	add	r1, sp, #4
 8004730:	2201      	movs	r2, #1
 8004732:	4812      	ldr	r0, [pc, #72]	; (800477c <oslib_test_002_003_execute+0x11c>)
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 8004734:	f888 4014 	strb.w	r4, [r8, #20]
  test_set_step(4);
 8004738:	603b      	str	r3, [r7, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800473a:	f7ff fef9 	bl	8004530 <chMBFetchTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800473e:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8004742:	fab0 f080 	clz	r0, r0
 8004746:	490c      	ldr	r1, [pc, #48]	; (8004778 <oslib_test_002_003_execute+0x118>)
 8004748:	0940      	lsrs	r0, r0, #5
 800474a:	f7fc fad9 	bl	8000d00 <_test_assert>
 800474e:	4604      	mov	r4, r0
 8004750:	2800      	cmp	r0, #0
 8004752:	d1b1      	bne.n	80046b8 <oslib_test_002_003_execute+0x58>
 8004754:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBFetchI(&mb1, &msg2);
 8004758:	a801      	add	r0, sp, #4
 800475a:	f7fc ff61 	bl	8001620 <chMBFetchI.constprop.0>
 800475e:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004762:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8004766:	fab0 f080 	clz	r0, r0
 800476a:	4903      	ldr	r1, [pc, #12]	; (8004778 <oslib_test_002_003_execute+0x118>)
 800476c:	0940      	lsrs	r0, r0, #5
 800476e:	f7fc fac7 	bl	8000d00 <_test_assert>
 8004772:	e7a1      	b.n	80046b8 <oslib_test_002_003_execute+0x58>
 8004774:	20001f1c 	.word	0x20001f1c
 8004778:	0800a7cc 	.word	0x0800a7cc
 800477c:	2000084c 	.word	0x2000084c

08004780 <oslib_test_002_002_execute>:
static void oslib_test_002_002_execute(void) {
 8004780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8004784:	4faf      	ldr	r7, [pc, #700]	; (8004a44 <oslib_test_002_002_execute+0x2c4>)
 8004786:	f04f 0801 	mov.w	r8, #1
static void oslib_test_002_002_execute(void) {
 800478a:	b082      	sub	sp, #8
  test_set_step(1);
 800478c:	f8c7 8000 	str.w	r8, [r7]
 8004790:	2620      	movs	r6, #32
 8004792:	f386 8811 	msr	BASEPRI, r6
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004796:	4cac      	ldr	r4, [pc, #688]	; (8004a48 <oslib_test_002_002_execute+0x2c8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8004798:	49ac      	ldr	r1, [pc, #688]	; (8004a4c <oslib_test_002_002_execute+0x2cc>)
 800479a:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800479c:	e9d4 2300 	ldrd	r2, r3, [r4]
 80047a0:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80047a2:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 80047a6:	f1a0 0004 	sub.w	r0, r0, #4
 80047aa:	fab0 f080 	clz	r0, r0
 80047ae:	0940      	lsrs	r0, r0, #5
 80047b0:	f7fc faa6 	bl	8000d00 <_test_assert>
 80047b4:	b128      	cbz	r0, 80047c2 <oslib_test_002_002_execute+0x42>
 80047b6:	2300      	movs	r3, #0
 80047b8:	f383 8811 	msr	BASEPRI, r3
}
 80047bc:	b002      	add	sp, #8
 80047be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c2:	4605      	mov	r5, r0
 80047c4:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80047c8:	2302      	movs	r3, #2
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	f386 8811 	msr	BASEPRI, r6
  mbp->wrptr = mbp->buffer;
 80047d0:	6823      	ldr	r3, [r4, #0]
  mbp->cnt   = (size_t)0;
 80047d2:	6120      	str	r0, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80047d4:	f104 0018 	add.w	r0, r4, #24
  mbp->rdptr = mbp->buffer;
 80047d8:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->reset = true;
 80047dc:	f884 8014 	strb.w	r8, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80047e0:	f7fc ff46 	bl	8001670 <chThdDequeueAllI.constprop.0>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 80047e4:	f104 0020 	add.w	r0, r4, #32
 80047e8:	f7fc ff42 	bl	8001670 <chThdDequeueAllI.constprop.0>
 80047ec:	f385 8811 	msr	BASEPRI, r5
 80047f0:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80047f4:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80047f8:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80047fa:	4995      	ldr	r1, [pc, #596]	; (8004a50 <oslib_test_002_002_execute+0x2d0>)
  return (size_t)(mbp->top - mbp->buffer);
 80047fc:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80047fe:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8004802:	f1a0 0004 	sub.w	r0, r0, #4
 8004806:	fab0 f080 	clz	r0, r0
 800480a:	0940      	lsrs	r0, r0, #5
 800480c:	f7fc fa78 	bl	8000d00 <_test_assert>
 8004810:	4680      	mov	r8, r0
 8004812:	b988      	cbnz	r0, 8004838 <oslib_test_002_002_execute+0xb8>
 8004814:	f380 8811 	msr	BASEPRI, r0
 8004818:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800481c:	6920      	ldr	r0, [r4, #16]
 800481e:	498d      	ldr	r1, [pc, #564]	; (8004a54 <oslib_test_002_002_execute+0x2d4>)
 8004820:	fab0 f080 	clz	r0, r0
 8004824:	0940      	lsrs	r0, r0, #5
 8004826:	f7fc fa6b 	bl	8000d00 <_test_assert>
 800482a:	4605      	mov	r5, r0
 800482c:	b148      	cbz	r0, 8004842 <oslib_test_002_002_execute+0xc2>
 800482e:	f388 8811 	msr	BASEPRI, r8
}
 8004832:	b002      	add	sp, #8
 8004834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004838:	f385 8811 	msr	BASEPRI, r5
 800483c:	b002      	add	sp, #8
 800483e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004842:	f380 8811 	msr	BASEPRI, r0
 8004846:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800484a:	6820      	ldr	r0, [r4, #0]
 800484c:	68a3      	ldr	r3, [r4, #8]
 800484e:	4982      	ldr	r1, [pc, #520]	; (8004a58 <oslib_test_002_002_execute+0x2d8>)
 8004850:	1ac0      	subs	r0, r0, r3
 8004852:	fab0 f080 	clz	r0, r0
 8004856:	0940      	lsrs	r0, r0, #5
 8004858:	f7fc fa52 	bl	8000d00 <_test_assert>
 800485c:	4680      	mov	r8, r0
 800485e:	2800      	cmp	r0, #0
 8004860:	d1ea      	bne.n	8004838 <oslib_test_002_002_execute+0xb8>
 8004862:	f380 8811 	msr	BASEPRI, r0
 8004866:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800486a:	6820      	ldr	r0, [r4, #0]
 800486c:	68e3      	ldr	r3, [r4, #12]
 800486e:	497b      	ldr	r1, [pc, #492]	; (8004a5c <oslib_test_002_002_execute+0x2dc>)
 8004870:	1ac0      	subs	r0, r0, r3
 8004872:	fab0 f080 	clz	r0, r0
 8004876:	0940      	lsrs	r0, r0, #5
 8004878:	f7fc fa42 	bl	8000d00 <_test_assert>
 800487c:	4605      	mov	r5, r0
 800487e:	2800      	cmp	r0, #0
 8004880:	d1d5      	bne.n	800482e <oslib_test_002_002_execute+0xae>
 8004882:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8004886:	2303      	movs	r3, #3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004888:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8004a60 <oslib_test_002_002_execute+0x2e0>
  mbp->reset = false;
 800488c:	7520      	strb	r0, [r4, #20]
  test_set_step(3);
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	f04f 0942 	mov.w	r9, #66	; 0x42
 8004894:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBPostI(&mb1, 'B' + i);
 8004898:	4648      	mov	r0, r9
 800489a:	f7fc fe71 	bl	8001580 <chMBPostI.constprop.0>
 800489e:	f385 8811 	msr	BASEPRI, r5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80048a2:	fab0 f080 	clz	r0, r0
 80048a6:	0940      	lsrs	r0, r0, #5
 80048a8:	4651      	mov	r1, sl
 80048aa:	f7fc fa29 	bl	8000d00 <_test_assert>
    for (i = 0; i < MB_SIZE - 1; i++) {
 80048ae:	f109 0901 	add.w	r9, r9, #1
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80048b2:	4680      	mov	r8, r0
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d181      	bne.n	80047bc <oslib_test_002_002_execute+0x3c>
    for (i = 0; i < MB_SIZE - 1; i++) {
 80048b8:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 80048bc:	d1ea      	bne.n	8004894 <oslib_test_002_002_execute+0x114>
 80048be:	f386 8811 	msr	BASEPRI, r6
    msg1 = chMBPostAheadI(&mb1, 'A');
 80048c2:	2041      	movs	r0, #65	; 0x41
 80048c4:	f7fc fe84 	bl	80015d0 <chMBPostAheadI.constprop.0>
 80048c8:	f388 8811 	msr	BASEPRI, r8
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80048cc:	fab0 f080 	clz	r0, r0
 80048d0:	4963      	ldr	r1, [pc, #396]	; (8004a60 <oslib_test_002_002_execute+0x2e0>)
 80048d2:	0940      	lsrs	r0, r0, #5
 80048d4:	f7fc fa14 	bl	8000d00 <_test_assert>
 80048d8:	4605      	mov	r5, r0
 80048da:	2800      	cmp	r0, #0
 80048dc:	f47f af6e 	bne.w	80047bc <oslib_test_002_002_execute+0x3c>
  test_set_step(4);
 80048e0:	f04f 0904 	mov.w	r9, #4
 80048e4:	f8c7 9000 	str.w	r9, [r7]
 80048e8:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80048ec:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 80048f0:	6922      	ldr	r2, [r4, #16]
 80048f2:	1a5b      	subs	r3, r3, r1
 80048f4:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80048f8:	495a      	ldr	r1, [pc, #360]	; (8004a64 <oslib_test_002_002_execute+0x2e4>)
 80048fa:	bf0c      	ite	eq
 80048fc:	2001      	moveq	r0, #1
 80048fe:	2000      	movne	r0, #0
 8004900:	f7fc f9fe 	bl	8000d00 <_test_assert>
 8004904:	4680      	mov	r8, r0
 8004906:	2800      	cmp	r0, #0
 8004908:	d196      	bne.n	8004838 <oslib_test_002_002_execute+0xb8>
 800490a:	f380 8811 	msr	BASEPRI, r0
 800490e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8004912:	6920      	ldr	r0, [r4, #16]
 8004914:	4954      	ldr	r1, [pc, #336]	; (8004a68 <oslib_test_002_002_execute+0x2e8>)
 8004916:	f1a0 0004 	sub.w	r0, r0, #4
 800491a:	fab0 f080 	clz	r0, r0
 800491e:	0940      	lsrs	r0, r0, #5
 8004920:	f7fc f9ee 	bl	8000d00 <_test_assert>
 8004924:	4605      	mov	r5, r0
 8004926:	2800      	cmp	r0, #0
 8004928:	d181      	bne.n	800482e <oslib_test_002_002_execute+0xae>
 800492a:	f380 8811 	msr	BASEPRI, r0
 800492e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8004932:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8004936:	1ac0      	subs	r0, r0, r3
 8004938:	fab0 f080 	clz	r0, r0
 800493c:	494b      	ldr	r1, [pc, #300]	; (8004a6c <oslib_test_002_002_execute+0x2ec>)
 800493e:	0940      	lsrs	r0, r0, #5
 8004940:	f7fc f9de 	bl	8000d00 <_test_assert>
 8004944:	2800      	cmp	r0, #0
 8004946:	f47f af77 	bne.w	8004838 <oslib_test_002_002_execute+0xb8>
 800494a:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 800494e:	2305      	movs	r3, #5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004950:	4e43      	ldr	r6, [pc, #268]	; (8004a60 <oslib_test_002_002_execute+0x2e0>)
  test_set_step(5);
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4605      	mov	r5, r0
 8004956:	f04f 0820 	mov.w	r8, #32
 800495a:	f388 8811 	msr	BASEPRI, r8
      msg1 = chMBFetchI(&mb1, &msg2);
 800495e:	a801      	add	r0, sp, #4
 8004960:	f7fc fe5e 	bl	8001620 <chMBFetchI.constprop.0>
 8004964:	f385 8811 	msr	BASEPRI, r5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004968:	fab0 f080 	clz	r0, r0
 800496c:	0940      	lsrs	r0, r0, #5
 800496e:	4631      	mov	r1, r6
 8004970:	f7fc f9c6 	bl	8000d00 <_test_assert>
 8004974:	2800      	cmp	r0, #0
 8004976:	f47f af21 	bne.w	80047bc <oslib_test_002_002_execute+0x3c>
      test_emit_token(msg2);
 800497a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800497e:	f7fc fa67 	bl	8000e50 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8004982:	f1b9 0901 	subs.w	r9, r9, #1
 8004986:	d1e8      	bne.n	800495a <oslib_test_002_002_execute+0x1da>
    test_assert_sequence("ABCD", "wrong get sequence");
 8004988:	4939      	ldr	r1, [pc, #228]	; (8004a70 <oslib_test_002_002_execute+0x2f0>)
 800498a:	483a      	ldr	r0, [pc, #232]	; (8004a74 <oslib_test_002_002_execute+0x2f4>)
 800498c:	f7fc fb38 	bl	8001000 <_test_assert_sequence>
 8004990:	2800      	cmp	r0, #0
 8004992:	f47f af13 	bne.w	80047bc <oslib_test_002_002_execute+0x3c>
  test_set_step(6);
 8004996:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004998:	2146      	movs	r1, #70	; 0x46
 800499a:	482b      	ldr	r0, [pc, #172]	; (8004a48 <oslib_test_002_002_execute+0x2c8>)
  test_set_step(6);
 800499c:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800499e:	f04f 32ff 	mov.w	r2, #4294967295
 80049a2:	f7ff fe25 	bl	80045f0 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80049a6:	fab0 f080 	clz	r0, r0
 80049aa:	492d      	ldr	r1, [pc, #180]	; (8004a60 <oslib_test_002_002_execute+0x2e0>)
 80049ac:	0940      	lsrs	r0, r0, #5
 80049ae:	f7fc f9a7 	bl	8000d00 <_test_assert>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	f47f af02 	bne.w	80047bc <oslib_test_002_002_execute+0x3c>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 80049b8:	a901      	add	r1, sp, #4
 80049ba:	4823      	ldr	r0, [pc, #140]	; (8004a48 <oslib_test_002_002_execute+0x2c8>)
 80049bc:	f04f 32ff 	mov.w	r2, #4294967295
 80049c0:	f7ff fdb6 	bl	8004530 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80049c4:	fab0 f080 	clz	r0, r0
 80049c8:	4925      	ldr	r1, [pc, #148]	; (8004a60 <oslib_test_002_002_execute+0x2e0>)
 80049ca:	0940      	lsrs	r0, r0, #5
 80049cc:	f7fc f998 	bl	8000d00 <_test_assert>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	f47f aef3 	bne.w	80047bc <oslib_test_002_002_execute+0x3c>
  test_set_step(7);
 80049d6:	2307      	movs	r3, #7
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	f388 8811 	msr	BASEPRI, r8
 80049de:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80049e2:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80049e4:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80049e6:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80049ea:	1f19      	subs	r1, r3, #4
 80049ec:	4248      	negs	r0, r1
 80049ee:	4148      	adcs	r0, r1
 80049f0:	4917      	ldr	r1, [pc, #92]	; (8004a50 <oslib_test_002_002_execute+0x2d0>)
 80049f2:	f7fc f985 	bl	8000d00 <_test_assert>
 80049f6:	bb08      	cbnz	r0, 8004a3c <oslib_test_002_002_execute+0x2bc>
 80049f8:	f389 8811 	msr	BASEPRI, r9
 80049fc:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8004a00:	6920      	ldr	r0, [r4, #16]
 8004a02:	4914      	ldr	r1, [pc, #80]	; (8004a54 <oslib_test_002_002_execute+0x2d4>)
 8004a04:	fab0 f080 	clz	r0, r0
 8004a08:	0940      	lsrs	r0, r0, #5
 8004a0a:	f7fc f979 	bl	8000d00 <_test_assert>
 8004a0e:	b9a8      	cbnz	r0, 8004a3c <oslib_test_002_002_execute+0x2bc>
 8004a10:	f389 8811 	msr	BASEPRI, r9
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	68a3      	ldr	r3, [r4, #8]
 8004a18:	490f      	ldr	r1, [pc, #60]	; (8004a58 <oslib_test_002_002_execute+0x2d8>)
 8004a1a:	1ac2      	subs	r2, r0, r3
 8004a1c:	4250      	negs	r0, r2
 8004a1e:	4150      	adcs	r0, r2
 8004a20:	f7fc f96e 	bl	8000d00 <_test_assert>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	f47f aec9 	bne.w	80047bc <oslib_test_002_002_execute+0x3c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8004a2a:	6820      	ldr	r0, [r4, #0]
 8004a2c:	68e3      	ldr	r3, [r4, #12]
 8004a2e:	490b      	ldr	r1, [pc, #44]	; (8004a5c <oslib_test_002_002_execute+0x2dc>)
 8004a30:	1ac3      	subs	r3, r0, r3
 8004a32:	4258      	negs	r0, r3
 8004a34:	4158      	adcs	r0, r3
 8004a36:	f7fc f963 	bl	8000d00 <_test_assert>
 8004a3a:	e6bf      	b.n	80047bc <oslib_test_002_002_execute+0x3c>
 8004a3c:	f389 8811 	msr	BASEPRI, r9
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8004a40:	e6bc      	b.n	80047bc <oslib_test_002_002_execute+0x3c>
 8004a42:	bf00      	nop
 8004a44:	20001f1c 	.word	0x20001f1c
 8004a48:	2000084c 	.word	0x2000084c
 8004a4c:	0800a7e4 	.word	0x0800a7e4
 8004a50:	0800a7f0 	.word	0x0800a7f0
 8004a54:	0800a7fc 	.word	0x0800a7fc
 8004a58:	0800a808 	.word	0x0800a808
 8004a5c:	0800a82c 	.word	0x0800a82c
 8004a60:	0800a7cc 	.word	0x0800a7cc
 8004a64:	0800a850 	.word	0x0800a850
 8004a68:	0800a85c 	.word	0x0800a85c
 8004a6c:	0800a868 	.word	0x0800a868
 8004a70:	0800a880 	.word	0x0800a880
 8004a74:	0800a894 	.word	0x0800a894
	...

08004a80 <oslib_test_002_001_execute>:
static void oslib_test_002_001_execute(void) {
 8004a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8004a84:	4fbb      	ldr	r7, [pc, #748]	; (8004d74 <oslib_test_002_001_execute+0x2f4>)
 8004a86:	2301      	movs	r3, #1
static void oslib_test_002_001_execute(void) {
 8004a88:	b082      	sub	sp, #8
  test_set_step(1);
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	2620      	movs	r6, #32
 8004a8e:	f386 8811 	msr	BASEPRI, r6
 8004a92:	4cb9      	ldr	r4, [pc, #740]	; (8004d78 <oslib_test_002_001_execute+0x2f8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8004a94:	49b9      	ldr	r1, [pc, #740]	; (8004d7c <oslib_test_002_001_execute+0x2fc>)
 8004a96:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8004a98:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004a9c:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004a9e:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8004aa2:	f1a0 0004 	sub.w	r0, r0, #4
 8004aa6:	fab0 f080 	clz	r0, r0
 8004aaa:	0940      	lsrs	r0, r0, #5
 8004aac:	f7fc f928 	bl	8000d00 <_test_assert>
 8004ab0:	b128      	cbz	r0, 8004abe <oslib_test_002_001_execute+0x3e>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f383 8811 	msr	BASEPRI, r3
}
 8004ab8:	b002      	add	sp, #8
 8004aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004abe:	4605      	mov	r5, r0
 8004ac0:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8004ac8:	f7ff f8c2 	bl	8003c50 <chMBReset.constprop.0>
 8004acc:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8004ad0:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004ad4:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004ad6:	49aa      	ldr	r1, [pc, #680]	; (8004d80 <oslib_test_002_001_execute+0x300>)
  return (size_t)(mbp->top - mbp->buffer);
 8004ad8:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004ada:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8004ade:	f1a0 0004 	sub.w	r0, r0, #4
 8004ae2:	fab0 f080 	clz	r0, r0
 8004ae6:	0940      	lsrs	r0, r0, #5
 8004ae8:	f7fc f90a 	bl	8000d00 <_test_assert>
 8004aec:	4680      	mov	r8, r0
 8004aee:	b988      	cbnz	r0, 8004b14 <oslib_test_002_001_execute+0x94>
 8004af0:	f380 8811 	msr	BASEPRI, r0
 8004af4:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8004af8:	6920      	ldr	r0, [r4, #16]
 8004afa:	49a2      	ldr	r1, [pc, #648]	; (8004d84 <oslib_test_002_001_execute+0x304>)
 8004afc:	fab0 f080 	clz	r0, r0
 8004b00:	0940      	lsrs	r0, r0, #5
 8004b02:	f7fc f8fd 	bl	8000d00 <_test_assert>
 8004b06:	4605      	mov	r5, r0
 8004b08:	b148      	cbz	r0, 8004b1e <oslib_test_002_001_execute+0x9e>
 8004b0a:	f388 8811 	msr	BASEPRI, r8
}
 8004b0e:	b002      	add	sp, #8
 8004b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b14:	f385 8811 	msr	BASEPRI, r5
 8004b18:	b002      	add	sp, #8
 8004b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b1e:	f380 8811 	msr	BASEPRI, r0
 8004b22:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004b26:	6820      	ldr	r0, [r4, #0]
 8004b28:	68a3      	ldr	r3, [r4, #8]
 8004b2a:	4997      	ldr	r1, [pc, #604]	; (8004d88 <oslib_test_002_001_execute+0x308>)
 8004b2c:	1ac0      	subs	r0, r0, r3
 8004b2e:	fab0 f080 	clz	r0, r0
 8004b32:	0940      	lsrs	r0, r0, #5
 8004b34:	f7fc f8e4 	bl	8000d00 <_test_assert>
 8004b38:	4680      	mov	r8, r0
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d1ea      	bne.n	8004b14 <oslib_test_002_001_execute+0x94>
 8004b3e:	f380 8811 	msr	BASEPRI, r0
 8004b42:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8004b46:	6820      	ldr	r0, [r4, #0]
 8004b48:	68e3      	ldr	r3, [r4, #12]
 8004b4a:	4990      	ldr	r1, [pc, #576]	; (8004d8c <oslib_test_002_001_execute+0x30c>)
 8004b4c:	1ac0      	subs	r0, r0, r3
 8004b4e:	fab0 f080 	clz	r0, r0
 8004b52:	0940      	lsrs	r0, r0, #5
 8004b54:	f7fc f8d4 	bl	8000d00 <_test_assert>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d1d6      	bne.n	8004b0a <oslib_test_002_001_execute+0x8a>
 8004b5c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8004b60:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8004b62:	4601      	mov	r1, r0
 8004b64:	f04f 32ff 	mov.w	r2, #4294967295
 8004b68:	4620      	mov	r0, r4
  test_set_step(3);
 8004b6a:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8004b6c:	f7ff fd40 	bl	80045f0 <chMBPostTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8004b70:	1c81      	adds	r1, r0, #2
 8004b72:	bf14      	ite	ne
 8004b74:	2000      	movne	r0, #0
 8004b76:	2001      	moveq	r0, #1
 8004b78:	4985      	ldr	r1, [pc, #532]	; (8004d90 <oslib_test_002_001_execute+0x310>)
 8004b7a:	f7fc f8c1 	bl	8000d00 <_test_assert>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d19a      	bne.n	8004ab8 <oslib_test_002_001_execute+0x38>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8004b82:	f04f 31ff 	mov.w	r1, #4294967295
 8004b86:	f7ff f89b 	bl	8003cc0 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8004b8a:	1c82      	adds	r2, r0, #2
 8004b8c:	bf14      	ite	ne
 8004b8e:	2000      	movne	r0, #0
 8004b90:	2001      	moveq	r0, #1
 8004b92:	497f      	ldr	r1, [pc, #508]	; (8004d90 <oslib_test_002_001_execute+0x310>)
 8004b94:	f7fc f8b4 	bl	8000d00 <_test_assert>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d18d      	bne.n	8004ab8 <oslib_test_002_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004b9c:	a901      	add	r1, sp, #4
 8004b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f7ff fcc4 	bl	8004530 <chMBFetchTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8004ba8:	1c83      	adds	r3, r0, #2
 8004baa:	bf14      	ite	ne
 8004bac:	2000      	movne	r0, #0
 8004bae:	2001      	moveq	r0, #1
 8004bb0:	4977      	ldr	r1, [pc, #476]	; (8004d90 <oslib_test_002_001_execute+0x310>)
 8004bb2:	f7fc f8a5 	bl	8000d00 <_test_assert>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	f47f af7e 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
  test_set_step(4);
 8004bbc:	2304      	movs	r3, #4
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004bbe:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8004d94 <oslib_test_002_001_execute+0x314>
  mbp->reset = false;
 8004bc2:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	2542      	movs	r5, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004bc8:	4626      	mov	r6, r4
 8004bca:	4629      	mov	r1, r5
 8004bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f7ff fd0d 	bl	80045f0 <chMBPostTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004bd6:	fab0 f080 	clz	r0, r0
 8004bda:	4641      	mov	r1, r8
 8004bdc:	0940      	lsrs	r0, r0, #5
 8004bde:	3501      	adds	r5, #1
 8004be0:	f7fc f88e 	bl	8000d00 <_test_assert>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	f47f af67 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8004bea:	2d45      	cmp	r5, #69	; 0x45
 8004bec:	d1ed      	bne.n	8004bca <oslib_test_002_001_execute+0x14a>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 8004bee:	f04f 31ff 	mov.w	r1, #4294967295
 8004bf2:	2041      	movs	r0, #65	; 0x41
 8004bf4:	f7ff f864 	bl	8003cc0 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004bf8:	fab0 f080 	clz	r0, r0
 8004bfc:	4965      	ldr	r1, [pc, #404]	; (8004d94 <oslib_test_002_001_execute+0x314>)
 8004bfe:	0940      	lsrs	r0, r0, #5
 8004c00:	f7fc f87e 	bl	8000d00 <_test_assert>
 8004c04:	4605      	mov	r5, r0
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f47f af56 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
  test_set_step(5);
 8004c0c:	2305      	movs	r3, #5
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	f04f 0820 	mov.w	r8, #32
 8004c14:	f388 8811 	msr	BASEPRI, r8
  return (size_t)(mbp->top - mbp->buffer);
 8004c18:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8004c1c:	6922      	ldr	r2, [r4, #16]
 8004c1e:	1a5b      	subs	r3, r3, r1
 8004c20:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8004c24:	495c      	ldr	r1, [pc, #368]	; (8004d98 <oslib_test_002_001_execute+0x318>)
 8004c26:	bf0c      	ite	eq
 8004c28:	2001      	moveq	r0, #1
 8004c2a:	2000      	movne	r0, #0
 8004c2c:	f7fc f868 	bl	8000d00 <_test_assert>
 8004c30:	4606      	mov	r6, r0
 8004c32:	2800      	cmp	r0, #0
 8004c34:	f47f af6e 	bne.w	8004b14 <oslib_test_002_001_execute+0x94>
 8004c38:	f380 8811 	msr	BASEPRI, r0
 8004c3c:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8004c40:	6920      	ldr	r0, [r4, #16]
 8004c42:	4956      	ldr	r1, [pc, #344]	; (8004d9c <oslib_test_002_001_execute+0x31c>)
 8004c44:	f1a0 0c04 	sub.w	ip, r0, #4
 8004c48:	f1dc 0000 	rsbs	r0, ip, #0
 8004c4c:	eb40 000c 	adc.w	r0, r0, ip
 8004c50:	f7fc f856 	bl	8000d00 <_test_assert>
 8004c54:	4605      	mov	r5, r0
 8004c56:	b110      	cbz	r0, 8004c5e <oslib_test_002_001_execute+0x1de>
 8004c58:	f386 8811 	msr	BASEPRI, r6
 8004c5c:	e72c      	b.n	8004ab8 <oslib_test_002_001_execute+0x38>
 8004c5e:	f380 8811 	msr	BASEPRI, r0
 8004c62:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8004c66:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8004c6a:	1ac6      	subs	r6, r0, r3
 8004c6c:	4270      	negs	r0, r6
 8004c6e:	4170      	adcs	r0, r6
 8004c70:	494b      	ldr	r1, [pc, #300]	; (8004da0 <oslib_test_002_001_execute+0x320>)
 8004c72:	f7fc f845 	bl	8000d00 <_test_assert>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	f47f af4c 	bne.w	8004b14 <oslib_test_002_001_execute+0x94>
 8004c7c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 8004c80:	2306      	movs	r3, #6
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004c82:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8004d78 <oslib_test_002_001_execute+0x2f8>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004c86:	4e43      	ldr	r6, [pc, #268]	; (8004d94 <oslib_test_002_001_execute+0x314>)
  test_set_step(6);
 8004c88:	603b      	str	r3, [r7, #0]
 8004c8a:	2504      	movs	r5, #4
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004c8c:	a901      	add	r1, sp, #4
 8004c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c92:	4640      	mov	r0, r8
 8004c94:	f7ff fc4c 	bl	8004530 <chMBFetchTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004c98:	fab0 f080 	clz	r0, r0
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	0940      	lsrs	r0, r0, #5
 8004ca0:	f7fc f82e 	bl	8000d00 <_test_assert>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	f47f af07 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
      test_emit_token(msg2);
 8004caa:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004cae:	f7fc f8cf 	bl	8000e50 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8004cb2:	3d01      	subs	r5, #1
 8004cb4:	d1ea      	bne.n	8004c8c <oslib_test_002_001_execute+0x20c>
    test_assert_sequence("ABCD", "wrong get sequence");
 8004cb6:	493b      	ldr	r1, [pc, #236]	; (8004da4 <oslib_test_002_001_execute+0x324>)
 8004cb8:	483b      	ldr	r0, [pc, #236]	; (8004da8 <oslib_test_002_001_execute+0x328>)
 8004cba:	f7fc f9a1 	bl	8001000 <_test_assert_sequence>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	f47f aefa 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
  test_set_step(7);
 8004cc4:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004cc6:	2146      	movs	r1, #70	; 0x46
 8004cc8:	482b      	ldr	r0, [pc, #172]	; (8004d78 <oslib_test_002_001_execute+0x2f8>)
  test_set_step(7);
 8004cca:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd0:	f7ff fc8e 	bl	80045f0 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004cd4:	fab0 f080 	clz	r0, r0
 8004cd8:	492e      	ldr	r1, [pc, #184]	; (8004d94 <oslib_test_002_001_execute+0x314>)
 8004cda:	0940      	lsrs	r0, r0, #5
 8004cdc:	f7fc f810 	bl	8000d00 <_test_assert>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	f47f aee9 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004ce6:	a901      	add	r1, sp, #4
 8004ce8:	4823      	ldr	r0, [pc, #140]	; (8004d78 <oslib_test_002_001_execute+0x2f8>)
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295
 8004cee:	f7ff fc1f 	bl	8004530 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004cf2:	fab0 f080 	clz	r0, r0
 8004cf6:	4927      	ldr	r1, [pc, #156]	; (8004d94 <oslib_test_002_001_execute+0x314>)
 8004cf8:	0940      	lsrs	r0, r0, #5
 8004cfa:	f7fc f801 	bl	8000d00 <_test_assert>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	f47f aeda 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
  test_set_step(8);
 8004d04:	2308      	movs	r3, #8
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	2620      	movs	r6, #32
 8004d0a:	f386 8811 	msr	BASEPRI, r6
 8004d0e:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004d12:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8004d14:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004d16:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004d1a:	1f19      	subs	r1, r3, #4
 8004d1c:	4248      	negs	r0, r1
 8004d1e:	4148      	adcs	r0, r1
 8004d20:	4917      	ldr	r1, [pc, #92]	; (8004d80 <oslib_test_002_001_execute+0x300>)
 8004d22:	f7fb ffed 	bl	8000d00 <_test_assert>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	f47f aef4 	bne.w	8004b14 <oslib_test_002_001_execute+0x94>
 8004d2c:	f385 8811 	msr	BASEPRI, r5
 8004d30:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8004d34:	6920      	ldr	r0, [r4, #16]
 8004d36:	4913      	ldr	r1, [pc, #76]	; (8004d84 <oslib_test_002_001_execute+0x304>)
 8004d38:	fab0 f080 	clz	r0, r0
 8004d3c:	0940      	lsrs	r0, r0, #5
 8004d3e:	f7fb ffdf 	bl	8000d00 <_test_assert>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	f47f aee6 	bne.w	8004b14 <oslib_test_002_001_execute+0x94>
 8004d48:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004d4c:	6820      	ldr	r0, [r4, #0]
 8004d4e:	68a3      	ldr	r3, [r4, #8]
 8004d50:	490d      	ldr	r1, [pc, #52]	; (8004d88 <oslib_test_002_001_execute+0x308>)
 8004d52:	1ac2      	subs	r2, r0, r3
 8004d54:	4250      	negs	r0, r2
 8004d56:	4150      	adcs	r0, r2
 8004d58:	f7fb ffd2 	bl	8000d00 <_test_assert>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f47f aeab 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8004d62:	6820      	ldr	r0, [r4, #0]
 8004d64:	68e3      	ldr	r3, [r4, #12]
 8004d66:	4909      	ldr	r1, [pc, #36]	; (8004d8c <oslib_test_002_001_execute+0x30c>)
 8004d68:	1ac3      	subs	r3, r0, r3
 8004d6a:	4258      	negs	r0, r3
 8004d6c:	4158      	adcs	r0, r3
 8004d6e:	f7fb ffc7 	bl	8000d00 <_test_assert>
 8004d72:	e6a1      	b.n	8004ab8 <oslib_test_002_001_execute+0x38>
 8004d74:	20001f1c 	.word	0x20001f1c
 8004d78:	2000084c 	.word	0x2000084c
 8004d7c:	0800a7e4 	.word	0x0800a7e4
 8004d80:	0800a7f0 	.word	0x0800a7f0
 8004d84:	0800a7fc 	.word	0x0800a7fc
 8004d88:	0800a808 	.word	0x0800a808
 8004d8c:	0800a82c 	.word	0x0800a82c
 8004d90:	0800a89c 	.word	0x0800a89c
 8004d94:	0800a7cc 	.word	0x0800a7cc
 8004d98:	0800a850 	.word	0x0800a850
 8004d9c:	0800a85c 	.word	0x0800a85c
 8004da0:	0800a868 	.word	0x0800a868
 8004da4:	0800a880 	.word	0x0800a880
 8004da8:	0800a894 	.word	0x0800a894
 8004dac:	00000000 	.word	0x00000000

08004db0 <chMtxUnlock>:
void chMtxUnlock(mutex_t *mp) {
 8004db0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8004db2:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <chMtxUnlock+0x5c>)
void chMtxUnlock(mutex_t *mp) {
 8004db4:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 8004db6:	699d      	ldr	r5, [r3, #24]
 8004db8:	2320      	movs	r3, #32
 8004dba:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8004dbe:	6800      	ldr	r0, [r0, #0]
    ctp->mtxlist = mp->next;
 8004dc0:	68cb      	ldr	r3, [r1, #12]
 8004dc2:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8004dc4:	4288      	cmp	r0, r1
 8004dc6:	d01b      	beq.n	8004e00 <chMtxUnlock+0x50>
      tprio_t newprio = ctp->realprio;
 8004dc8:	6bec      	ldr	r4, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 8004dca:	b14b      	cbz	r3, 8004de0 <chMtxUnlock+0x30>
 8004dcc:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <chMtxUnlock+0x2a>
 8004dd2:	6892      	ldr	r2, [r2, #8]
 8004dd4:	4294      	cmp	r4, r2
 8004dd6:	bf38      	it	cc
 8004dd8:	4614      	movcc	r4, r2
        lmp = lmp->next;
 8004dda:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1f5      	bne.n	8004dcc <chMtxUnlock+0x1c>
      mp->next = tp->mtxlist;
 8004de0:	6b82      	ldr	r2, [r0, #56]	; 0x38
  tqp->next             = tp->queue.next;
 8004de2:	6803      	ldr	r3, [r0, #0]
      ctp->prio = newprio;
 8004de4:	60ac      	str	r4, [r5, #8]
 8004de6:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004de8:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 8004dea:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 8004dee:	6381      	str	r1, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 8004df0:	f7fc fb9e 	bl	8001530 <chSchReadyI>
      chSchRescheduleS();
 8004df4:	f7fe fe04 	bl	8003a00 <chSchRescheduleS>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f383 8811 	msr	BASEPRI, r3
}
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
      mp->owner = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	6083      	str	r3, [r0, #8]
 8004e04:	2300      	movs	r3, #0
 8004e06:	f383 8811 	msr	BASEPRI, r3
}
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
 8004e0c:	2000142c 	.word	0x2000142c

08004e10 <chHeapAllocAligned.constprop.0>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8004e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 8004e14:	4e38      	ldr	r6, [pc, #224]	; (8004ef8 <chHeapAllocAligned.constprop.0+0xe8>)
 8004e16:	2800      	cmp	r0, #0
 8004e18:	bf18      	it	ne
 8004e1a:	4606      	movne	r6, r0

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8004e1c:	f106 080c 	add.w	r8, r6, #12
 8004e20:	4640      	mov	r0, r8
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004e22:	1dcf      	adds	r7, r1, #7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8004e24:	460d      	mov	r5, r1
  H_LOCK(heapp);
 8004e26:	f7fe fb93 	bl	8003550 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8004e2a:	6872      	ldr	r2, [r6, #4]
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004e2c:	08ff      	lsrs	r7, r7, #3
 8004e2e:	1d31      	adds	r1, r6, #4
  while (H_NEXT(qp) != NULL) {
 8004e30:	b90a      	cbnz	r2, 8004e36 <chHeapAllocAligned.constprop.0+0x26>
 8004e32:	e019      	b.n	8004e68 <chHeapAllocAligned.constprop.0+0x58>
 8004e34:	461a      	mov	r2, r3
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004e36:	f8d2 c004 	ldr.w	ip, [r2, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004e3a:	f102 030f 	add.w	r3, r2, #15
 8004e3e:	f023 0307 	bic.w	r3, r3, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004e42:	f10c 0401 	add.w	r4, ip, #1
 8004e46:	4699      	mov	r9, r3
 8004e48:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004e4c:	3b08      	subs	r3, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004e4e:	eba4 0009 	sub.w	r0, r4, r9
 8004e52:	42a3      	cmp	r3, r4
 8004e54:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8004e58:	d202      	bcs.n	8004e60 <chHeapAllocAligned.constprop.0+0x50>
 8004e5a:	ebb7 0fe0 	cmp.w	r7, r0, asr #3
 8004e5e:	d913      	bls.n	8004e88 <chHeapAllocAligned.constprop.0+0x78>
  while (H_NEXT(qp) != NULL) {
 8004e60:	6813      	ldr	r3, [r2, #0]
 8004e62:	4611      	mov	r1, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e5      	bne.n	8004e34 <chHeapAllocAligned.constprop.0+0x24>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8004e68:	4640      	mov	r0, r8
 8004e6a:	f7ff ffa1 	bl	8004db0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8004e6e:	6833      	ldr	r3, [r6, #0]
 8004e70:	b3bb      	cbz	r3, 8004ee2 <chHeapAllocAligned.constprop.0+0xd2>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8004e72:	2208      	movs	r2, #8
 8004e74:	00f8      	lsls	r0, r7, #3
 8004e76:	4611      	mov	r1, r2
 8004e78:	4798      	blx	r3
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8004e7a:	4681      	mov	r9, r0
 8004e7c:	b108      	cbz	r0, 8004e82 <chHeapAllocAligned.constprop.0+0x72>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 8004e7e:	e940 6502 	strd	r6, r5, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 8004e82:	4648      	mov	r0, r9
 8004e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d818      	bhi.n	8004ebe <chHeapAllocAligned.constprop.0+0xae>
        if (H_PAGES(hp) == pages) {
 8004e8c:	4567      	cmp	r7, ip
 8004e8e:	d02c      	beq.n	8004eea <chHeapAllocAligned.constprop.0+0xda>
          fp = H_BLOCK(hp) + pages;
 8004e90:	3701      	adds	r7, #1
 8004e92:	eb02 00c7 	add.w	r0, r2, r7, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004e96:	f100 0308 	add.w	r3, r0, #8
 8004e9a:	1ae3      	subs	r3, r4, r3
 8004e9c:	10db      	asrs	r3, r3, #3
          H_NEXT(fp) = H_NEXT(hp);
 8004e9e:	6814      	ldr	r4, [r2, #0]
 8004ea0:	f842 4037 	str.w	r4, [r2, r7, lsl #3]
 8004ea4:	f102 0908 	add.w	r9, r2, #8
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004ea8:	6043      	str	r3, [r0, #4]
          H_NEXT(qp) = fp;
 8004eaa:	6008      	str	r0, [r1, #0]
 8004eac:	4613      	mov	r3, r2
      H_UNLOCK(heapp);
 8004eae:	4640      	mov	r0, r8
      H_HEAP(hp) = heapp;
 8004eb0:	e9c3 6500 	strd	r6, r5, [r3]
      H_UNLOCK(heapp);
 8004eb4:	f7ff ff7c 	bl	8004db0 <chMtxUnlock>
}
 8004eb8:	4648      	mov	r0, r9
 8004eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004ebe:	f102 0108 	add.w	r1, r2, #8
 8004ec2:	1a59      	subs	r1, r3, r1
 8004ec4:	10c9      	asrs	r1, r1, #3
        if (bpages > pages) {
 8004ec6:	4577      	cmp	r7, lr
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004ec8:	6051      	str	r1, [r2, #4]
        if (bpages > pages) {
 8004eca:	d2f0      	bcs.n	8004eae <chHeapAllocAligned.constprop.0+0x9e>
          fp = H_BLOCK(ahp) + pages;
 8004ecc:	1c7c      	adds	r4, r7, #1
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004ece:	43f9      	mvns	r1, r7
          fp = H_BLOCK(ahp) + pages;
 8004ed0:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
          H_NEXT(fp) = H_NEXT(hp);
 8004ed4:	6817      	ldr	r7, [r2, #0]
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004ed6:	4471      	add	r1, lr
 8004ed8:	6041      	str	r1, [r0, #4]
          H_NEXT(fp) = H_NEXT(hp);
 8004eda:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
          H_NEXT(hp) = fp;
 8004ede:	6010      	str	r0, [r2, #0]
 8004ee0:	e7e5      	b.n	8004eae <chHeapAllocAligned.constprop.0+0x9e>
  return NULL;
 8004ee2:	4699      	mov	r9, r3
}
 8004ee4:	4648      	mov	r0, r9
 8004ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          H_NEXT(qp) = H_NEXT(hp);
 8004eea:	4691      	mov	r9, r2
 8004eec:	4613      	mov	r3, r2
 8004eee:	f859 2b08 	ldr.w	r2, [r9], #8
 8004ef2:	600a      	str	r2, [r1, #0]
 8004ef4:	e7db      	b.n	8004eae <chHeapAllocAligned.constprop.0+0x9e>
 8004ef6:	bf00      	nop
 8004ef8:	200015d0 	.word	0x200015d0
 8004efc:	00000000 	.word	0x00000000

08004f00 <chThdCreateFromHeap.constprop.0>:
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8004f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f04:	4605      	mov	r5, r0
 8004f06:	b086      	sub	sp, #24
 8004f08:	460f      	mov	r7, r1
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8004f0a:	4601      	mov	r1, r0
 8004f0c:	4811      	ldr	r0, [pc, #68]	; (8004f54 <chThdCreateFromHeap.constprop.0+0x54>)
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8004f0e:	4690      	mov	r8, r2
 8004f10:	461e      	mov	r6, r3
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8004f12:	f7ff ff7d 	bl	8004e10 <chHeapAllocAligned.constprop.0>
  if (wsp == NULL) {
 8004f16:	4604      	mov	r4, r0
 8004f18:	b1c0      	cbz	r0, 8004f4c <chThdCreateFromHeap.constprop.0+0x4c>
  thread_descriptor_t td = {
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <chThdCreateFromHeap.constprop.0+0x58>)
 8004f1c:	f8cd 800c 	str.w	r8, [sp, #12]
    (stkalign_t *)((uint8_t *)wsp + size),
 8004f20:	4405      	add	r5, r0
  thread_descriptor_t td = {
 8004f22:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8004f26:	9502      	str	r5, [sp, #8]
 8004f28:	e9cd 7000 	strd	r7, r0, [sp]
 8004f2c:	2320      	movs	r3, #32
 8004f2e:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 8004f32:	4668      	mov	r0, sp
 8004f34:	f7fc fa84 	bl	8001440 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 8004f3e:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 8004f40:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8004f42:	f7fd f9ed 	bl	8002320 <chSchWakeupS>
 8004f46:	2300      	movs	r3, #0
 8004f48:	f383 8811 	msr	BASEPRI, r3
}
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	b006      	add	sp, #24
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f54:	20001630 	.word	0x20001630
 8004f58:	08000f81 	.word	0x08000f81
 8004f5c:	00000000 	.word	0x00000000

08004f60 <dyn_create_object_heap>:
                                             size_t size) {
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8004f62:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8004f64:	42a1      	cmp	r1, r4
                                             size_t size) {
 8004f66:	460d      	mov	r5, r1
 8004f68:	4606      	mov	r6, r0
 8004f6a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8004f6c:	d103      	bne.n	8004f76 <dyn_create_object_heap+0x16>
 8004f6e:	e00d      	b.n	8004f8c <dyn_create_object_heap+0x2c>
    p = p->next;
 8004f70:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8004f72:	42a5      	cmp	r5, r4
 8004f74:	d00a      	beq.n	8004f8c <dyn_create_object_heap+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8004f76:	2208      	movs	r2, #8
 8004f78:	4631      	mov	r1, r6
 8004f7a:	18a0      	adds	r0, r4, r2
 8004f7c:	f004 fbe2 	bl	8009744 <strncmp>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d1f5      	bne.n	8004f70 <dyn_create_object_heap+0x10>
  if (dep != NULL) {
 8004f84:	b114      	cbz	r4, 8004f8c <dyn_create_object_heap+0x2c>
    return NULL;
 8004f86:	4604      	mov	r4, r0
}
 8004f88:	4620      	mov	r0, r4
 8004f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8004f8c:	4639      	mov	r1, r7
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f7ff ff3e 	bl	8004e10 <chHeapAllocAligned.constprop.0>
  if (dep == NULL) {
 8004f94:	4604      	mov	r4, r0
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d0f6      	beq.n	8004f88 <dyn_create_object_heap+0x28>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	4631      	mov	r1, r6
 8004f9e:	4410      	add	r0, r2
 8004fa0:	f004 fc0e 	bl	80097c0 <strncpy>
  dep->next = dlp->next;
 8004fa4:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8004fa6:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8004fa8:	e9c4 3200 	strd	r3, r2, [r4]
}
 8004fac:	4620      	mov	r0, r4
  dlp->next = dep;
 8004fae:	602c      	str	r4, [r5, #0]
}
 8004fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb2:	bf00      	nop
	...

08004fc0 <chPipeWriteTimeout.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8004fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8004fc4:	4d33      	ldr	r5, [pc, #204]	; (8005094 <chPipeWriteTimeout.constprop.0+0xd4>)
 8004fc6:	7d2c      	ldrb	r4, [r5, #20]
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8004fc8:	b083      	sub	sp, #12
  if (pp->reset) {
 8004fca:	b11c      	cbz	r4, 8004fd4 <chPipeWriteTimeout.constprop.0+0x14>
    return (size_t)0;
 8004fcc:	2000      	movs	r0, #0
  }

  PW_UNLOCK(pp);

  return max - n;
}
 8004fce:	b003      	add	sp, #12
 8004fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd4:	4682      	mov	sl, r0
  PW_LOCK(pp);
 8004fd6:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8004fda:	f7fe fab9 	bl	8003550 <chMtxLock>
 8004fde:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800509c <chPipeWriteTimeout.constprop.0+0xdc>
    *trp = NULL;
 8004fe2:	9401      	str	r4, [sp, #4]
 8004fe4:	4657      	mov	r7, sl
  PC_LOCK(pp);
 8004fe6:	f105 0920 	add.w	r9, r5, #32
 8004fea:	e01d      	b.n	8005028 <chPipeWriteTimeout.constprop.0+0x68>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8004fec:	f7fb f986 	bl	80002fc <memcpy>
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 8004ff0:	6828      	ldr	r0, [r5, #0]
 8004ff2:	eb08 0106 	add.w	r1, r8, r6
 8004ff6:	465a      	mov	r2, fp
 8004ff8:	f7fb f980 	bl	80002fc <memcpy>
    pp->wrptr = pp->buffer + s2;
 8004ffc:	682b      	ldr	r3, [r5, #0]
  PC_UNLOCK(pp);
 8004ffe:	4648      	mov	r0, r9
    pp->wrptr = pp->buffer + s2;
 8005000:	445b      	add	r3, fp
 8005002:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 8005004:	f7ff fed4 	bl	8004db0 <chMtxUnlock>
      n  -= done;
 8005008:	1b3f      	subs	r7, r7, r4
      bp += done;
 800500a:	44a0      	add	r8, r4
 800500c:	2320      	movs	r3, #32
 800500e:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8005012:	69e8      	ldr	r0, [r5, #28]
    chSchWakeupS(tp, msg);
 8005014:	2100      	movs	r1, #0
  if (*trp != NULL) {
 8005016:	b118      	cbz	r0, 8005020 <chPipeWriteTimeout.constprop.0+0x60>
    *trp = NULL;
 8005018:	9b01      	ldr	r3, [sp, #4]
 800501a:	61eb      	str	r3, [r5, #28]
    chSchWakeupS(tp, msg);
 800501c:	f7fd f980 	bl	8002320 <chSchWakeupS>
 8005020:	9b01      	ldr	r3, [sp, #4]
 8005022:	f383 8811 	msr	BASEPRI, r3
  while (n > 0U) {
 8005026:	b337      	cbz	r7, 8005076 <chPipeWriteTimeout.constprop.0+0xb6>
  PC_LOCK(pp);
 8005028:	4648      	mov	r0, r9
 800502a:	f7fe fa91 	bl	8003550 <chMtxLock>
 */
static inline size_t chPipeGetSize(const pipe_t *pp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(pp->top - pp->buffer);
 800502e:	e9d5 4600 	ldrd	r4, r6, [r5]
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8005032:	692b      	ldr	r3, [r5, #16]
  s1 = (size_t)(pp->top - pp->wrptr);
 8005034:	68a8      	ldr	r0, [r5, #8]
  return (size_t)(pp->top - pp->buffer);
 8005036:	1b34      	subs	r4, r6, r4
  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8005038:	1ae4      	subs	r4, r4, r3
 800503a:	42bc      	cmp	r4, r7
 800503c:	bf28      	it	cs
 800503e:	463c      	movcs	r4, r7
 8005040:	1a36      	subs	r6, r6, r0
  pp->cnt += n;
 8005042:	4423      	add	r3, r4
  if (n < s1) {
 8005044:	42b4      	cmp	r4, r6
  pp->cnt += n;
 8005046:	612b      	str	r3, [r5, #16]
  if (n < s1) {
 8005048:	d31c      	bcc.n	8005084 <chPipeWriteTimeout.constprop.0+0xc4>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 800504a:	4632      	mov	r2, r6
 800504c:	4641      	mov	r1, r8
    s2 = n - s1;
 800504e:	eba4 0b06 	sub.w	fp, r4, r6
  else if (n > s1) {
 8005052:	d8cb      	bhi.n	8004fec <chPipeWriteTimeout.constprop.0+0x2c>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8005054:	4622      	mov	r2, r4
 8005056:	f7fb f951 	bl	80002fc <memcpy>
    pp->wrptr = pp->buffer;
 800505a:	682b      	ldr	r3, [r5, #0]
 800505c:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 800505e:	4648      	mov	r0, r9
 8005060:	f7ff fea6 	bl	8004db0 <chMtxUnlock>
    if (done == (size_t)0) {
 8005064:	2c00      	cmp	r4, #0
 8005066:	d1cf      	bne.n	8005008 <chPipeWriteTimeout.constprop.0+0x48>
 8005068:	2320      	movs	r3, #32
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f384 8811 	msr	BASEPRI, r4
 8005072:	ebaa 0a07 	sub.w	sl, sl, r7
  PW_UNLOCK(pp);
 8005076:	4808      	ldr	r0, [pc, #32]	; (8005098 <chPipeWriteTimeout.constprop.0+0xd8>)
 8005078:	f7ff fe9a 	bl	8004db0 <chMtxUnlock>
 800507c:	4650      	mov	r0, sl
}
 800507e:	b003      	add	sp, #12
 8005080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8005084:	4622      	mov	r2, r4
 8005086:	4641      	mov	r1, r8
 8005088:	f7fb f938 	bl	80002fc <memcpy>
    pp->wrptr += n;
 800508c:	68ab      	ldr	r3, [r5, #8]
 800508e:	4423      	add	r3, r4
 8005090:	60ab      	str	r3, [r5, #8]
 8005092:	e7e4      	b.n	800505e <chPipeWriteTimeout.constprop.0+0x9e>
 8005094:	2000088c 	.word	0x2000088c
 8005098:	200008bc 	.word	0x200008bc
 800509c:	0800ba64 	.word	0x0800ba64

080050a0 <chPipeReadTimeout.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 80050a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 80050a4:	4c32      	ldr	r4, [pc, #200]	; (8005170 <chPipeReadTimeout.constprop.0+0xd0>)
 80050a6:	7d25      	ldrb	r5, [r4, #20]
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 80050a8:	b083      	sub	sp, #12
  if (pp->reset) {
 80050aa:	b11d      	cbz	r5, 80050b4 <chPipeReadTimeout.constprop.0+0x14>
    return (size_t)0;
 80050ac:	2000      	movs	r0, #0
  }

  PR_UNLOCK(pp);

  return max - n;
}
 80050ae:	b003      	add	sp, #12
 80050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b4:	468a      	mov	sl, r1
 80050b6:	4680      	mov	r8, r0
  PR_LOCK(pp);
 80050b8:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80050bc:	f7fe fa48 	bl	8003550 <chMtxLock>
 80050c0:	4657      	mov	r7, sl
    *trp = NULL;
 80050c2:	9501      	str	r5, [sp, #4]
  PC_LOCK(pp);
 80050c4:	f104 0920 	add.w	r9, r4, #32
 80050c8:	e01d      	b.n	8005106 <chPipeReadTimeout.constprop.0+0x66>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 80050ca:	f7fb f917 	bl	80002fc <memcpy>
    memcpy((void *)bp, (void *)pp->buffer, s2);
 80050ce:	6821      	ldr	r1, [r4, #0]
 80050d0:	eb08 0006 	add.w	r0, r8, r6
 80050d4:	465a      	mov	r2, fp
 80050d6:	f7fb f911 	bl	80002fc <memcpy>
    pp->rdptr = pp->buffer + s2;
 80050da:	6823      	ldr	r3, [r4, #0]
  PC_UNLOCK(pp);
 80050dc:	4648      	mov	r0, r9
    pp->rdptr = pp->buffer + s2;
 80050de:	445b      	add	r3, fp
 80050e0:	60e3      	str	r3, [r4, #12]
  PC_UNLOCK(pp);
 80050e2:	f7ff fe65 	bl	8004db0 <chMtxUnlock>
      n  -= done;
 80050e6:	1b7f      	subs	r7, r7, r5
      bp += done;
 80050e8:	44a8      	add	r8, r5
 80050ea:	2320      	movs	r3, #32
 80050ec:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80050f0:	69a0      	ldr	r0, [r4, #24]
    chSchWakeupS(tp, msg);
 80050f2:	2100      	movs	r1, #0
  if (*trp != NULL) {
 80050f4:	b118      	cbz	r0, 80050fe <chPipeReadTimeout.constprop.0+0x5e>
    *trp = NULL;
 80050f6:	9b01      	ldr	r3, [sp, #4]
 80050f8:	61a3      	str	r3, [r4, #24]
    chSchWakeupS(tp, msg);
 80050fa:	f7fd f911 	bl	8002320 <chSchWakeupS>
 80050fe:	9b01      	ldr	r3, [sp, #4]
 8005100:	f383 8811 	msr	BASEPRI, r3
  while (n > 0U) {
 8005104:	b32f      	cbz	r7, 8005152 <chPipeReadTimeout.constprop.0+0xb2>
  PC_LOCK(pp);
 8005106:	4648      	mov	r0, r9
 8005108:	f7fe fa22 	bl	8003550 <chMtxLock>
  s1 = (size_t)(pp->top - pp->rdptr);
 800510c:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 8005110:	6866      	ldr	r6, [r4, #4]
 8005112:	42bb      	cmp	r3, r7
 8005114:	461d      	mov	r5, r3
 8005116:	eba6 0601 	sub.w	r6, r6, r1
 800511a:	bf28      	it	cs
 800511c:	463d      	movcs	r5, r7
  pp->cnt -= n;
 800511e:	1b5b      	subs	r3, r3, r5
  if (n < s1) {
 8005120:	42b5      	cmp	r5, r6
  pp->cnt -= n;
 8005122:	6123      	str	r3, [r4, #16]
  if (n < s1) {
 8005124:	d31c      	bcc.n	8005160 <chPipeReadTimeout.constprop.0+0xc0>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8005126:	4632      	mov	r2, r6
    s2 = n - s1;
 8005128:	eba5 0b06 	sub.w	fp, r5, r6
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800512c:	4640      	mov	r0, r8
  else if (n > s1) {
 800512e:	d8cc      	bhi.n	80050ca <chPipeReadTimeout.constprop.0+0x2a>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8005130:	462a      	mov	r2, r5
 8005132:	f7fb f8e3 	bl	80002fc <memcpy>
    pp->rdptr = pp->buffer;
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	60e3      	str	r3, [r4, #12]
  PC_UNLOCK(pp);
 800513a:	4648      	mov	r0, r9
 800513c:	f7ff fe38 	bl	8004db0 <chMtxUnlock>
    if (done == (size_t)0) {
 8005140:	2d00      	cmp	r5, #0
 8005142:	d1d0      	bne.n	80050e6 <chPipeReadTimeout.constprop.0+0x46>
 8005144:	2320      	movs	r3, #32
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f385 8811 	msr	BASEPRI, r5
 800514e:	ebaa 0a07 	sub.w	sl, sl, r7
  PR_UNLOCK(pp);
 8005152:	4808      	ldr	r0, [pc, #32]	; (8005174 <chPipeReadTimeout.constprop.0+0xd4>)
 8005154:	f7ff fe2c 	bl	8004db0 <chMtxUnlock>
 8005158:	4650      	mov	r0, sl
}
 800515a:	b003      	add	sp, #12
 800515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8005160:	462a      	mov	r2, r5
 8005162:	4640      	mov	r0, r8
 8005164:	f7fb f8ca 	bl	80002fc <memcpy>
    pp->rdptr += n;
 8005168:	68e3      	ldr	r3, [r4, #12]
 800516a:	442b      	add	r3, r5
 800516c:	60e3      	str	r3, [r4, #12]
 800516e:	e7e4      	b.n	800513a <chPipeReadTimeout.constprop.0+0x9a>
 8005170:	2000088c 	.word	0x2000088c
 8005174:	200008cc 	.word	0x200008cc
	...

08005180 <oslib_test_003_002_execute>:

static void oslib_test_003_002_execute(void) {
 8005180:	b530      	push	{r4, r5, lr}

  /* [3.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 8005182:	4d22      	ldr	r5, [pc, #136]	; (800520c <oslib_test_003_002_execute+0x8c>)
static void oslib_test_003_002_execute(void) {
 8005184:	b085      	sub	sp, #20
  test_set_step(1);
 8005186:	2301      	movs	r3, #1
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005188:	2110      	movs	r1, #16
 800518a:	4668      	mov	r0, sp
  test_set_step(1);
 800518c:	602b      	str	r3, [r5, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800518e:	f7ff ff87 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 0, "wrong size");
 8005192:	fab0 f080 	clz	r0, r0
 8005196:	491e      	ldr	r1, [pc, #120]	; (8005210 <oslib_test_003_002_execute+0x90>)
 8005198:	0940      	lsrs	r0, r0, #5
 800519a:	f7fb fdb1 	bl	8000d00 <_test_assert>
 800519e:	b940      	cbnz	r0, 80051b2 <oslib_test_003_002_execute+0x32>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80051a0:	4c1c      	ldr	r4, [pc, #112]	; (8005214 <oslib_test_003_002_execute+0x94>)
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	68e3      	ldr	r3, [r4, #12]
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01d      	beq.n	80051e6 <oslib_test_003_002_execute+0x66>
 80051aa:	491b      	ldr	r1, [pc, #108]	; (8005218 <oslib_test_003_002_execute+0x98>)
 80051ac:	f7fb fda8 	bl	8000d00 <_test_assert>
 80051b0:	b108      	cbz	r0, 80051b6 <oslib_test_003_002_execute+0x36>
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
  test_end_step(2);
}
 80051b2:	b005      	add	sp, #20
 80051b4:	bd30      	pop	{r4, r5, pc}
  test_set_step(2);
 80051b6:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80051b8:	2010      	movs	r0, #16
  test_set_step(2);
 80051ba:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80051bc:	f7ff ff00 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE / 2, "wrong size");
 80051c0:	f1a0 0008 	sub.w	r0, r0, #8
 80051c4:	fab0 f080 	clz	r0, r0
 80051c8:	4911      	ldr	r1, [pc, #68]	; (8005210 <oslib_test_003_002_execute+0x90>)
 80051ca:	0940      	lsrs	r0, r0, #5
 80051cc:	f7fb fd98 	bl	8000d00 <_test_assert>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d1ee      	bne.n	80051b2 <oslib_test_003_002_execute+0x32>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80051d4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00c      	beq.n	80051f6 <oslib_test_003_002_execute+0x76>
 80051dc:	490e      	ldr	r1, [pc, #56]	; (8005218 <oslib_test_003_002_execute+0x98>)
 80051de:	f7fb fd8f 	bl	8000d00 <_test_assert>
}
 80051e2:	b005      	add	sp, #20
 80051e4:	bd30      	pop	{r4, r5, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80051e6:	68a2      	ldr	r2, [r4, #8]
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d1de      	bne.n	80051aa <oslib_test_003_002_execute+0x2a>
 80051ec:	6920      	ldr	r0, [r4, #16]
 80051ee:	fab0 f080 	clz	r0, r0
 80051f2:	0940      	lsrs	r0, r0, #5
 80051f4:	e7d9      	b.n	80051aa <oslib_test_003_002_execute+0x2a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80051f6:	6822      	ldr	r2, [r4, #0]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d1ef      	bne.n	80051dc <oslib_test_003_002_execute+0x5c>
 80051fc:	6920      	ldr	r0, [r4, #16]
 80051fe:	f1a0 0008 	sub.w	r0, r0, #8
 8005202:	fab0 f080 	clz	r0, r0
 8005206:	0940      	lsrs	r0, r0, #5
 8005208:	e7e8      	b.n	80051dc <oslib_test_003_002_execute+0x5c>
 800520a:	bf00      	nop
 800520c:	20001f1c 	.word	0x20001f1c
 8005210:	0800a7e4 	.word	0x0800a7e4
 8005214:	2000088c 	.word	0x2000088c
 8005218:	0800a8b0 	.word	0x0800a8b0
 800521c:	00000000 	.word	0x00000000

08005220 <chFactoryRegisterObject.constprop.0>:
 * @retval NULL         if the object to be registered cannot be allocated or
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4605      	mov	r5, r0
                                             void *objp) {
  registered_object_t *rop;

  F_LOCK();
 8005224:	4807      	ldr	r0, [pc, #28]	; (8005244 <chFactoryRegisterObject.constprop.0+0x24>)
 8005226:	f7fe f993 	bl	8003550 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 800522a:	4a07      	ldr	r2, [pc, #28]	; (8005248 <chFactoryRegisterObject.constprop.0+0x28>)
 800522c:	4807      	ldr	r0, [pc, #28]	; (800524c <chFactoryRegisterObject.constprop.0+0x2c>)
 800522e:	1f11      	subs	r1, r2, #4
 8005230:	f7fd f806 	bl	8002240 <dyn_create_object_pool>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 8005234:	4604      	mov	r4, r0
 8005236:	b100      	cbz	r0, 800523a <chFactoryRegisterObject.constprop.0+0x1a>
    /* Initializing registered object data.*/
    rop->objp = objp;
 8005238:	6105      	str	r5, [r0, #16]
  }

  F_UNLOCK();
 800523a:	4802      	ldr	r0, [pc, #8]	; (8005244 <chFactoryRegisterObject.constprop.0+0x24>)
 800523c:	f7ff fdb8 	bl	8004db0 <chMtxUnlock>

  return rop;
}
 8005240:	4620      	mov	r0, r4
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	200014a4 	.word	0x200014a4
 8005248:	200014b8 	.word	0x200014b8
 800524c:	0800a8c4 	.word	0x0800a8c4

08005250 <chFactoryFindObject.constprop.0>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
 8005250:	b538      	push	{r3, r4, r5, lr}
  registered_object_t *rop;

  F_LOCK();
 8005252:	4d07      	ldr	r5, [pc, #28]	; (8005270 <chFactoryFindObject.constprop.0+0x20>)
 8005254:	4628      	mov	r0, r5
 8005256:	f7fe f97b 	bl	8003550 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 800525a:	f105 0110 	add.w	r1, r5, #16
 800525e:	4805      	ldr	r0, [pc, #20]	; (8005274 <chFactoryFindObject.constprop.0+0x24>)
 8005260:	f7fc ffce 	bl	8002200 <dyn_find_object>
 8005264:	4604      	mov	r4, r0

  F_UNLOCK();
 8005266:	4628      	mov	r0, r5
 8005268:	f7ff fda2 	bl	8004db0 <chMtxUnlock>

  return rop;
}
 800526c:	4620      	mov	r0, r4
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	200014a4 	.word	0x200014a4
 8005274:	0800a8c4 	.word	0x0800a8c4
	...

08005280 <chFactoryCreateBuffer.constprop.0>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 8005280:	b510      	push	{r4, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8005282:	480a      	ldr	r0, [pc, #40]	; (80052ac <chFactoryCreateBuffer.constprop.0+0x2c>)
 8005284:	f7fe f964 	bl	8003550 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 8005288:	4909      	ldr	r1, [pc, #36]	; (80052b0 <chFactoryCreateBuffer.constprop.0+0x30>)
 800528a:	480a      	ldr	r0, [pc, #40]	; (80052b4 <chFactoryCreateBuffer.constprop.0+0x34>)
 800528c:	2280      	movs	r2, #128	; 0x80
 800528e:	f7ff fe67 	bl	8004f60 <dyn_create_object_heap>
                                               &ch_factory.buf_list,
                                               size);
  if (dbp != NULL) {
 8005292:	4604      	mov	r4, r0
 8005294:	b120      	cbz	r0, 80052a0 <chFactoryCreateBuffer.constprop.0+0x20>
    /* Initializing buffer object data.*/
    memset((void *)(dbp + 1), 0, size);
 8005296:	2280      	movs	r2, #128	; 0x80
 8005298:	2100      	movs	r1, #0
 800529a:	3010      	adds	r0, #16
 800529c:	f004 fa02 	bl	80096a4 <memset>
  }

  F_UNLOCK();
 80052a0:	4802      	ldr	r0, [pc, #8]	; (80052ac <chFactoryCreateBuffer.constprop.0+0x2c>)
 80052a2:	f7ff fd85 	bl	8004db0 <chMtxUnlock>

  return dbp;
}
 80052a6:	4620      	mov	r0, r4
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	bf00      	nop
 80052ac:	200014a4 	.word	0x200014a4
 80052b0:	200014c8 	.word	0x200014c8
 80052b4:	0800a8cc 	.word	0x0800a8cc
	...

080052c0 <chFactoryFindBuffer.constprop.0>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 80052c0:	b538      	push	{r3, r4, r5, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 80052c2:	4d07      	ldr	r5, [pc, #28]	; (80052e0 <chFactoryFindBuffer.constprop.0+0x20>)
 80052c4:	4628      	mov	r0, r5
 80052c6:	f7fe f943 	bl	8003550 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 80052ca:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80052ce:	4805      	ldr	r0, [pc, #20]	; (80052e4 <chFactoryFindBuffer.constprop.0+0x24>)
 80052d0:	f7fc ff96 	bl	8002200 <dyn_find_object>
 80052d4:	4604      	mov	r4, r0

  F_UNLOCK();
 80052d6:	4628      	mov	r0, r5
 80052d8:	f7ff fd6a 	bl	8004db0 <chMtxUnlock>

  return dbp;
}
 80052dc:	4620      	mov	r0, r4
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	200014a4 	.word	0x200014a4
 80052e4:	0800a8cc 	.word	0x0800a8cc
	...

080052f0 <chFactoryCreateSemaphore.constprop.0>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 80052f0:	b510      	push	{r4, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 80052f2:	480a      	ldr	r0, [pc, #40]	; (800531c <chFactoryCreateSemaphore.constprop.0+0x2c>)
 80052f4:	f7fe f92c 	bl	8003550 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 80052f8:	4a09      	ldr	r2, [pc, #36]	; (8005320 <chFactoryCreateSemaphore.constprop.0+0x30>)
 80052fa:	480a      	ldr	r0, [pc, #40]	; (8005324 <chFactoryCreateSemaphore.constprop.0+0x34>)
 80052fc:	1f11      	subs	r1, r2, #4
 80052fe:	f7fc ff9f 	bl	8002240 <dyn_create_object_pool>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 8005302:	4604      	mov	r4, r0
 8005304:	b128      	cbz	r0, 8005312 <chFactoryCreateSemaphore.constprop.0+0x22>
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 8005306:	f100 0310 	add.w	r3, r0, #16
  tqp->prev = (thread_t *)tqp;
 800530a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800530e:	2200      	movs	r2, #0
 8005310:	6182      	str	r2, [r0, #24]
  }

  F_UNLOCK();
 8005312:	4802      	ldr	r0, [pc, #8]	; (800531c <chFactoryCreateSemaphore.constprop.0+0x2c>)
 8005314:	f7ff fd4c 	bl	8004db0 <chMtxUnlock>

  return dsp;
}
 8005318:	4620      	mov	r0, r4
 800531a:	bd10      	pop	{r4, pc}
 800531c:	200014a4 	.word	0x200014a4
 8005320:	200014d0 	.word	0x200014d0
 8005324:	0800a8d4 	.word	0x0800a8d4
	...

08005330 <chFactoryFindSemaphore.constprop.0>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8005330:	b538      	push	{r3, r4, r5, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8005332:	4d07      	ldr	r5, [pc, #28]	; (8005350 <chFactoryFindSemaphore.constprop.0+0x20>)
 8005334:	4628      	mov	r0, r5
 8005336:	f7fe f90b 	bl	8003550 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 800533a:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800533e:	4805      	ldr	r0, [pc, #20]	; (8005354 <chFactoryFindSemaphore.constprop.0+0x24>)
 8005340:	f7fc ff5e 	bl	8002200 <dyn_find_object>
 8005344:	4604      	mov	r4, r0

  F_UNLOCK();
 8005346:	4628      	mov	r0, r5
 8005348:	f7ff fd32 	bl	8004db0 <chMtxUnlock>

  return dsp;
}
 800534c:	4620      	mov	r0, r4
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	200014a4 	.word	0x200014a4
 8005354:	0800a8d4 	.word	0x0800a8d4
	...

08005360 <chFactoryCreateMailbox.constprop.0>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8005360:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8005362:	4811      	ldr	r0, [pc, #68]	; (80053a8 <chFactoryCreateMailbox.constprop.0+0x48>)
 8005364:	f7fe f8f4 	bl	8003550 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8005368:	4910      	ldr	r1, [pc, #64]	; (80053ac <chFactoryCreateMailbox.constprop.0+0x4c>)
 800536a:	4811      	ldr	r0, [pc, #68]	; (80053b0 <chFactoryCreateMailbox.constprop.0+0x50>)
 800536c:	2278      	movs	r2, #120	; 0x78
 800536e:	f7ff fdf7 	bl	8004f60 <dyn_create_object_heap>
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
                                                (n * sizeof (msg_t)));
  if (dmp != NULL) {
 8005372:	4604      	mov	r4, r0
 8005374:	b198      	cbz	r0, 800539e <chFactoryCreateMailbox.constprop.0+0x3e>
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, (msg_t *)(dmp + 1), n);
 8005376:	f100 0338 	add.w	r3, r0, #56	; 0x38
  chThdQueueObjectInit(&mbp->qw);
 800537a:	f104 0128 	add.w	r1, r4, #40	; 0x28
  chThdQueueObjectInit(&mbp->qr);
 800537e:	f104 0230 	add.w	r2, r4, #48	; 0x30
  mbp->wrptr  = buf;
 8005382:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8005386:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 800538a:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->top    = &buf[n];
 800538e:	f100 0578 	add.w	r5, r0, #120	; 0x78
  mbp->cnt    = (size_t)0;
 8005392:	2000      	movs	r0, #0
  mbp->buffer = buf;
 8005394:	6123      	str	r3, [r4, #16]
  mbp->top    = &buf[n];
 8005396:	6165      	str	r5, [r4, #20]
  mbp->cnt    = (size_t)0;
 8005398:	6220      	str	r0, [r4, #32]
  mbp->reset  = false;
 800539a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  }

  F_UNLOCK();
 800539e:	4802      	ldr	r0, [pc, #8]	; (80053a8 <chFactoryCreateMailbox.constprop.0+0x48>)
 80053a0:	f7ff fd06 	bl	8004db0 <chMtxUnlock>

  return dmp;
}
 80053a4:	4620      	mov	r0, r4
 80053a6:	bd38      	pop	{r3, r4, r5, pc}
 80053a8:	200014a4 	.word	0x200014a4
 80053ac:	200014e0 	.word	0x200014e0
 80053b0:	0800a8dc 	.word	0x0800a8dc
	...

080053c0 <chFactoryFindMailbox.constprop.0>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 80053c0:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 80053c2:	4d07      	ldr	r5, [pc, #28]	; (80053e0 <chFactoryFindMailbox.constprop.0+0x20>)
 80053c4:	4628      	mov	r0, r5
 80053c6:	f7fe f8c3 	bl	8003550 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 80053ca:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 80053ce:	4805      	ldr	r0, [pc, #20]	; (80053e4 <chFactoryFindMailbox.constprop.0+0x24>)
 80053d0:	f7fc ff16 	bl	8002200 <dyn_find_object>
 80053d4:	4604      	mov	r4, r0

  F_UNLOCK();
 80053d6:	4628      	mov	r0, r5
 80053d8:	f7ff fcea 	bl	8004db0 <chMtxUnlock>

  return dmp;
}
 80053dc:	4620      	mov	r0, r4
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	200014a4 	.word	0x200014a4
 80053e4:	0800a8dc 	.word	0x0800a8dc
	...

080053f0 <chFactoryCreateObjectsFIFO.constprop.0>:
 *                      allocated or a dynamic "objects FIFO" object with
 *                      the same name exists.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 80053f0:	b570      	push	{r4, r5, r6, lr}
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 80053f2:	4818      	ldr	r0, [pc, #96]	; (8005454 <chFactoryCreateObjectsFIFO.constprop.0+0x64>)
 80053f4:	f7fe f8ac 	bl	8003550 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 80053f8:	4917      	ldr	r1, [pc, #92]	; (8005458 <chFactoryCreateObjectsFIFO.constprop.0+0x68>)
 80053fa:	4818      	ldr	r0, [pc, #96]	; (800545c <chFactoryCreateObjectsFIFO.constprop.0+0x6c>)
 80053fc:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8005400:	f7ff fdae 	bl	8004f60 <dyn_create_object_heap>
                                                      &ch_factory.fifo_list,
                                                      sizeof (dyn_objects_fifo_t) +
                                                      (objn * sizeof (msg_t)) +
                                                      (objn * objsize));
  if (dofp != NULL) {
 8005404:	4604      	mov	r4, r0
 8005406:	b300      	cbz	r0, 800544a <chFactoryCreateObjectsFIFO.constprop.0+0x5a>
  mp->next = NULL;
 8005408:	2600      	movs	r6, #0
    msg_t *msgbuf = (msg_t *)(dofp + 1);

    /* Initializing mailbox object data.*/
    chFifoObjectInitAligned(&dofp->fifo, objsize, objn, objalign,
                            (void *)&msgbuf[objn], msgbuf);
 800540a:	f100 0594 	add.w	r5, r0, #148	; 0x94
  mp->object_size = size;
 800540e:	2210      	movs	r2, #16
  mp->align = align;
 8005410:	2304      	movs	r3, #4
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 8005412:	3010      	adds	r0, #16
 8005414:	e9c4 2308 	strd	r2, r3, [r4, #32]
  chGuardedPoolLoadArray(&ofp->free, objbuf, objn);
 8005418:	4629      	mov	r1, r5
 800541a:	e9c4 0004 	strd	r0, r0, [r4, #16]
  mp->next = NULL;
 800541e:	61e6      	str	r6, [r4, #28]
  mp->provider = provider;
 8005420:	62a6      	str	r6, [r4, #40]	; 0x28
 8005422:	61a6      	str	r6, [r4, #24]
 8005424:	f7fe ffec 	bl	8004400 <chGuardedPoolLoadArray>
    msg_t *msgbuf = (msg_t *)(dofp + 1);
 8005428:	f104 0354 	add.w	r3, r4, #84	; 0x54
  chThdQueueObjectInit(&mbp->qw);
 800542c:	f104 0144 	add.w	r1, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
 8005430:	f104 024c 	add.w	r2, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 8005434:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8005438:	e9c4 1111 	strd	r1, r1, [r4, #68]	; 0x44
 800543c:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  mbp->top    = &buf[n];
 8005440:	6325      	str	r5, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 8005442:	63e6      	str	r6, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8005444:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  mbp->buffer = buf;
 8005448:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  F_UNLOCK();
 800544a:	4802      	ldr	r0, [pc, #8]	; (8005454 <chFactoryCreateObjectsFIFO.constprop.0+0x64>)
 800544c:	f7ff fcb0 	bl	8004db0 <chMtxUnlock>

  return dofp;
}
 8005450:	4620      	mov	r0, r4
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	200014a4 	.word	0x200014a4
 8005458:	200014e4 	.word	0x200014e4
 800545c:	0800a8e4 	.word	0x0800a8e4

08005460 <chFactoryFindObjectsFIFO.constprop.0>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 8005460:	b538      	push	{r3, r4, r5, lr}
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8005462:	4d07      	ldr	r5, [pc, #28]	; (8005480 <chFactoryFindObjectsFIFO.constprop.0+0x20>)
 8005464:	4628      	mov	r0, r5
 8005466:	f7fe f873 	bl	8003550 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 800546a:	f105 0140 	add.w	r1, r5, #64	; 0x40
 800546e:	4805      	ldr	r0, [pc, #20]	; (8005484 <chFactoryFindObjectsFIFO.constprop.0+0x24>)
 8005470:	f7fc fec6 	bl	8002200 <dyn_find_object>
 8005474:	4604      	mov	r4, r0

  F_UNLOCK();
 8005476:	4628      	mov	r0, r5
 8005478:	f7ff fc9a 	bl	8004db0 <chMtxUnlock>

  return dofp;
}
 800547c:	4620      	mov	r0, r4
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	200014a4 	.word	0x200014a4
 8005484:	0800a8e4 	.word	0x0800a8e4
	...

08005490 <chFactoryCreatePipe.constprop.0>:
 *                      allocated or a dynamic pipe object with
 *                      the same name exists.
 *
 * @api
 */
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 8005490:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  F_LOCK();
 8005492:	4815      	ldr	r0, [pc, #84]	; (80054e8 <chFactoryCreatePipe.constprop.0+0x58>)
 8005494:	f7fe f85c 	bl	8003550 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 8005498:	4914      	ldr	r1, [pc, #80]	; (80054ec <chFactoryCreatePipe.constprop.0+0x5c>)
 800549a:	4815      	ldr	r0, [pc, #84]	; (80054f0 <chFactoryCreatePipe.constprop.0+0x60>)
 800549c:	2270      	movs	r2, #112	; 0x70
 800549e:	f7ff fd5f 	bl	8004f60 <dyn_create_object_heap>
                                             &ch_factory.pipe_list,
                                             sizeof (dyn_pipe_t) + size);
  if (dpp != NULL) {
 80054a2:	4604      	mov	r4, r0
 80054a4:	b1d8      	cbz	r0, 80054de <chFactoryCreatePipe.constprop.0+0x4e>
    /* Initializing mailbox object data.*/
    chPipeObjectInit(&dpp->pipe, (uint8_t *)(dpp + 1), size);
 80054a6:	f100 0260 	add.w	r2, r0, #96	; 0x60
  pp->cnt    = (size_t)0;
 80054aa:	2300      	movs	r3, #0
  pp->top    = &buf[n];
 80054ac:	f100 0570 	add.w	r5, r0, #112	; 0x70
  pp->wrptr  = buf;
 80054b0:	e9c4 2206 	strd	r2, r2, [r4, #24]
  PC_INIT(pp);
 80054b4:	3030      	adds	r0, #48	; 0x30
  PW_INIT(pp);
 80054b6:	f104 0140 	add.w	r1, r4, #64	; 0x40
  pp->buffer = buf;
 80054ba:	6122      	str	r2, [r4, #16]
  PR_INIT(pp);
 80054bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
  pp->rtr    = NULL;
 80054c0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80054c4:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
 80054c8:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
 80054cc:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
  pp->top    = &buf[n];
 80054d0:	6165      	str	r5, [r4, #20]
  pp->cnt    = (size_t)0;
 80054d2:	6223      	str	r3, [r4, #32]
  pp->reset  = false;
 80054d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  mp->owner = NULL;
 80054d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80054da:	64a3      	str	r3, [r4, #72]	; 0x48
 80054dc:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  F_UNLOCK();
 80054de:	4802      	ldr	r0, [pc, #8]	; (80054e8 <chFactoryCreatePipe.constprop.0+0x58>)
 80054e0:	f7ff fc66 	bl	8004db0 <chMtxUnlock>

  return dpp;
}
 80054e4:	4620      	mov	r0, r4
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	200014a4 	.word	0x200014a4
 80054ec:	200014e8 	.word	0x200014e8
 80054f0:	0800a8ec 	.word	0x0800a8ec
	...

08005500 <chFactoryFindPipe.constprop.0>:
 * @retval NULL         if a dynamic pipe object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 8005500:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  F_LOCK();
 8005502:	4d07      	ldr	r5, [pc, #28]	; (8005520 <chFactoryFindPipe.constprop.0+0x20>)
 8005504:	4628      	mov	r0, r5
 8005506:	f7fe f823 	bl	8003550 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_find_object(name, &ch_factory.pipe_list);
 800550a:	f105 0144 	add.w	r1, r5, #68	; 0x44
 800550e:	4805      	ldr	r0, [pc, #20]	; (8005524 <chFactoryFindPipe.constprop.0+0x24>)
 8005510:	f7fc fe76 	bl	8002200 <dyn_find_object>
 8005514:	4604      	mov	r4, r0

  F_UNLOCK();
 8005516:	4628      	mov	r0, r5
 8005518:	f7ff fc4a 	bl	8004db0 <chMtxUnlock>

  return dpp;
}
 800551c:	4620      	mov	r0, r4
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	200014a4 	.word	0x200014a4
 8005524:	0800a8ec 	.word	0x0800a8ec
	...

08005530 <oslib_test_003_001_execute>:
static void oslib_test_003_001_execute(void) {
 8005530:	b570      	push	{r4, r5, r6, lr}
  PC_LOCK(pp);
 8005532:	4c1f      	ldr	r4, [pc, #124]	; (80055b0 <oslib_test_003_001_execute+0x80>)
  test_set_step(1);
 8005534:	4e1f      	ldr	r6, [pc, #124]	; (80055b4 <oslib_test_003_001_execute+0x84>)
 8005536:	2501      	movs	r5, #1
static void oslib_test_003_001_execute(void) {
 8005538:	b084      	sub	sp, #16
 800553a:	f104 0020 	add.w	r0, r4, #32
  test_set_step(1);
 800553e:	6035      	str	r5, [r6, #0]
 8005540:	f7fe f806 	bl	8003550 <chMtxLock>
  pp->wrptr = pp->buffer;
 8005544:	6823      	ldr	r3, [r4, #0]
  pp->reset = true;
 8005546:	7525      	strb	r5, [r4, #20]
  pp->cnt   = (size_t)0;
 8005548:	2200      	movs	r2, #0
  pp->rdptr = pp->buffer;
 800554a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  pp->cnt   = (size_t)0;
 800554e:	6122      	str	r2, [r4, #16]
 8005550:	2320      	movs	r3, #32
 8005552:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8005556:	69a0      	ldr	r0, [r4, #24]
 8005558:	b128      	cbz	r0, 8005566 <oslib_test_003_001_execute+0x36>
    tp->u.rdymsg = msg;
 800555a:	f06f 0301 	mvn.w	r3, #1
 800555e:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8005560:	61a2      	str	r2, [r4, #24]
    (void) chSchReadyI(tp);
 8005562:	f7fb ffe5 	bl	8001530 <chSchReadyI>
  if (*trp != NULL) {
 8005566:	69e0      	ldr	r0, [r4, #28]
 8005568:	b130      	cbz	r0, 8005578 <oslib_test_003_001_execute+0x48>
    tp->u.rdymsg = msg;
 800556a:	f06f 0301 	mvn.w	r3, #1
 800556e:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8005570:	2300      	movs	r3, #0
 8005572:	61e3      	str	r3, [r4, #28]
    (void) chSchReadyI(tp);
 8005574:	f7fb ffdc 	bl	8001530 <chSchReadyI>
  chSchRescheduleS();
 8005578:	f7fe fa42 	bl	8003a00 <chSchRescheduleS>
 800557c:	2500      	movs	r5, #0
 800557e:	f385 8811 	msr	BASEPRI, r5
  PC_UNLOCK(pp);
 8005582:	480d      	ldr	r0, [pc, #52]	; (80055b8 <oslib_test_003_001_execute+0x88>)
 8005584:	f7ff fc14 	bl	8004db0 <chMtxUnlock>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005588:	6822      	ldr	r2, [r4, #0]
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	4293      	cmp	r3, r2
 800558e:	d006      	beq.n	800559e <oslib_test_003_001_execute+0x6e>
 8005590:	4628      	mov	r0, r5
 8005592:	490a      	ldr	r1, [pc, #40]	; (80055bc <oslib_test_003_001_execute+0x8c>)
 8005594:	f7fb fbb4 	bl	8000d00 <_test_assert>
 8005598:	b190      	cbz	r0, 80055c0 <oslib_test_003_001_execute+0x90>
}
 800559a:	b004      	add	sp, #16
 800559c:	bd70      	pop	{r4, r5, r6, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800559e:	68a2      	ldr	r2, [r4, #8]
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d1f5      	bne.n	8005590 <oslib_test_003_001_execute+0x60>
 80055a4:	6925      	ldr	r5, [r4, #16]
 80055a6:	fab5 f085 	clz	r0, r5
 80055aa:	0940      	lsrs	r0, r0, #5
 80055ac:	e7f1      	b.n	8005592 <oslib_test_003_001_execute+0x62>
 80055ae:	bf00      	nop
 80055b0:	2000088c 	.word	0x2000088c
 80055b4:	20001f1c 	.word	0x20001f1c
 80055b8:	200008ac 	.word	0x200008ac
 80055bc:	0800a8b0 	.word	0x0800a8b0
  test_set_step(2);
 80055c0:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80055c2:	2010      	movs	r0, #16
  test_set_step(2);
 80055c4:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80055c6:	f7ff fcfb 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 0, "not reset");
 80055ca:	fab0 f080 	clz	r0, r0
 80055ce:	49c3      	ldr	r1, [pc, #780]	; (80058dc <oslib_test_003_001_execute+0x3ac>)
 80055d0:	0940      	lsrs	r0, r0, #5
 80055d2:	f7fb fb95 	bl	8000d00 <_test_assert>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d1df      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80055da:	6822      	ldr	r2, [r4, #0]
 80055dc:	68e3      	ldr	r3, [r4, #12]
 80055de:	4293      	cmp	r3, r2
 80055e0:	f000 818d 	beq.w	80058fe <oslib_test_003_001_execute+0x3ce>
 80055e4:	49be      	ldr	r1, [pc, #760]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 80055e6:	f7fb fb8b 	bl	8000d00 <_test_assert>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d1d5      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(3);
 80055ee:	2303      	movs	r3, #3
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80055f0:	2110      	movs	r1, #16
 80055f2:	4668      	mov	r0, sp
  test_set_step(3);
 80055f4:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80055f6:	f7ff fd53 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 0, "not reset");
 80055fa:	fab0 f080 	clz	r0, r0
 80055fe:	49b7      	ldr	r1, [pc, #732]	; (80058dc <oslib_test_003_001_execute+0x3ac>)
 8005600:	0940      	lsrs	r0, r0, #5
 8005602:	f7fb fb7d 	bl	8000d00 <_test_assert>
 8005606:	2800      	cmp	r0, #0
 8005608:	d1c7      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800560a:	6822      	ldr	r2, [r4, #0]
 800560c:	68e3      	ldr	r3, [r4, #12]
 800560e:	4293      	cmp	r3, r2
 8005610:	f000 8187 	beq.w	8005922 <oslib_test_003_001_execute+0x3f2>
 8005614:	49b2      	ldr	r1, [pc, #712]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005616:	f7fb fb73 	bl	8000d00 <_test_assert>
 800561a:	2800      	cmp	r0, #0
 800561c:	d1bd      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800561e:	6822      	ldr	r2, [r4, #0]
 8005620:	68e3      	ldr	r3, [r4, #12]
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 8005622:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8005624:	2104      	movs	r1, #4
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005626:	4293      	cmp	r3, r2
  test_set_step(4);
 8005628:	6031      	str	r1, [r6, #0]
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800562a:	f000 8171 	beq.w	8005910 <oslib_test_003_001_execute+0x3e0>
 800562e:	49ac      	ldr	r1, [pc, #688]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005630:	f7fb fb66 	bl	8000d00 <_test_assert>
 8005634:	2800      	cmp	r0, #0
 8005636:	d1b0      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(5);
 8005638:	2305      	movs	r3, #5
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800563a:	2010      	movs	r0, #16
  test_set_step(5);
 800563c:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800563e:	f7ff fcbf 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 8005642:	f1a0 0010 	sub.w	r0, r0, #16
 8005646:	fab0 f080 	clz	r0, r0
 800564a:	49a6      	ldr	r1, [pc, #664]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 800564c:	0940      	lsrs	r0, r0, #5
 800564e:	f7fb fb57 	bl	8000d00 <_test_assert>
 8005652:	2800      	cmp	r0, #0
 8005654:	d1a1      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	68e3      	ldr	r3, [r4, #12]
 800565a:	4293      	cmp	r3, r2
 800565c:	f000 816a 	beq.w	8005934 <oslib_test_003_001_execute+0x404>
 8005660:	499f      	ldr	r1, [pc, #636]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005662:	f7fb fb4d 	bl	8000d00 <_test_assert>
 8005666:	2800      	cmp	r0, #0
 8005668:	d197      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(6);
 800566a:	2306      	movs	r3, #6
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800566c:	2110      	movs	r1, #16
 800566e:	4668      	mov	r0, sp
  test_set_step(6);
 8005670:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005672:	f7ff fd15 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 8005676:	f1a0 0010 	sub.w	r0, r0, #16
 800567a:	fab0 f080 	clz	r0, r0
 800567e:	4999      	ldr	r1, [pc, #612]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 8005680:	0940      	lsrs	r0, r0, #5
 8005682:	f7fb fb3d 	bl	8000d00 <_test_assert>
 8005686:	2800      	cmp	r0, #0
 8005688:	d187      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800568a:	6822      	ldr	r2, [r4, #0]
 800568c:	68e3      	ldr	r3, [r4, #12]
 800568e:	4293      	cmp	r3, r2
 8005690:	f000 815b 	beq.w	800594a <oslib_test_003_001_execute+0x41a>
 8005694:	4992      	ldr	r1, [pc, #584]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005696:	f7fb fb33 	bl	8000d00 <_test_assert>
 800569a:	2800      	cmp	r0, #0
 800569c:	f47f af7d 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 80056a0:	4b91      	ldr	r3, [pc, #580]	; (80058e8 <oslib_test_003_001_execute+0x3b8>)
 80056a2:	9a00      	ldr	r2, [sp, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	f000 8159 	beq.w	800595c <oslib_test_003_001_execute+0x42c>
 80056aa:	2001      	movs	r0, #1
 80056ac:	498f      	ldr	r1, [pc, #572]	; (80058ec <oslib_test_003_001_execute+0x3bc>)
 80056ae:	f080 0001 	eor.w	r0, r0, #1
 80056b2:	f7fb fb25 	bl	8000d00 <_test_assert>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	f47f af6f 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(7);
 80056bc:	2307      	movs	r3, #7
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 80056be:	2004      	movs	r0, #4
  test_set_step(7);
 80056c0:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 80056c2:	f7ff fc7d 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 4, "wrong size");
 80056c6:	f1a0 0004 	sub.w	r0, r0, #4
 80056ca:	fab0 f080 	clz	r0, r0
 80056ce:	4985      	ldr	r1, [pc, #532]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 80056d0:	0940      	lsrs	r0, r0, #5
 80056d2:	f7fb fb15 	bl	8000d00 <_test_assert>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f47f af5f 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80056dc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <oslib_test_003_001_execute+0x1bc>
 80056e4:	6822      	ldr	r2, [r4, #0]
 80056e6:	4293      	cmp	r3, r2
 80056e8:	f000 8153 	beq.w	8005992 <oslib_test_003_001_execute+0x462>
 80056ec:	497c      	ldr	r1, [pc, #496]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 80056ee:	f7fb fb07 	bl	8000d00 <_test_assert>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	f47f af51 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(8);
 80056f8:	2308      	movs	r3, #8
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 80056fa:	200c      	movs	r0, #12
  test_set_step(8);
 80056fc:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 80056fe:	f7ff fc5f 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 8005702:	f1a0 0e0c 	sub.w	lr, r0, #12
 8005706:	f1de 0000 	rsbs	r0, lr, #0
 800570a:	eb40 000e 	adc.w	r0, r0, lr
 800570e:	4975      	ldr	r1, [pc, #468]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 8005710:	f7fb faf6 	bl	8000d00 <_test_assert>
 8005714:	2800      	cmp	r0, #0
 8005716:	f47f af40 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	68e3      	ldr	r3, [r4, #12]
 800571e:	4293      	cmp	r3, r2
 8005720:	f000 813c 	beq.w	800599c <oslib_test_003_001_execute+0x46c>
 8005724:	496e      	ldr	r1, [pc, #440]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005726:	f7fb faeb 	bl	8000d00 <_test_assert>
 800572a:	2800      	cmp	r0, #0
 800572c:	f47f af35 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(9);
 8005730:	2309      	movs	r3, #9
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 8005732:	2104      	movs	r1, #4
 8005734:	4668      	mov	r0, sp
  test_set_step(9);
 8005736:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 8005738:	f7ff fcb2 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 4, "wrong size");
 800573c:	1f05      	subs	r5, r0, #4
 800573e:	4268      	negs	r0, r5
 8005740:	4168      	adcs	r0, r5
 8005742:	4968      	ldr	r1, [pc, #416]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 8005744:	f7fb fadc 	bl	8000d00 <_test_assert>
 8005748:	2800      	cmp	r0, #0
 800574a:	f47f af26 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	68e2      	ldr	r2, [r4, #12]
 8005752:	429a      	cmp	r2, r3
 8005754:	d003      	beq.n	800575e <oslib_test_003_001_execute+0x22e>
 8005756:	68a2      	ldr	r2, [r4, #8]
 8005758:	4293      	cmp	r3, r2
 800575a:	f000 8145 	beq.w	80059e8 <oslib_test_003_001_execute+0x4b8>
 800575e:	4960      	ldr	r1, [pc, #384]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005760:	f7fb face 	bl	8000d00 <_test_assert>
 8005764:	2800      	cmp	r0, #0
 8005766:	f47f af18 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 800576a:	9800      	ldr	r0, [sp, #0]
 800576c:	4b5e      	ldr	r3, [pc, #376]	; (80058e8 <oslib_test_003_001_execute+0x3b8>)
 800576e:	495f      	ldr	r1, [pc, #380]	; (80058ec <oslib_test_003_001_execute+0x3bc>)
 8005770:	1ac2      	subs	r2, r0, r3
 8005772:	4250      	negs	r0, r2
 8005774:	4150      	adcs	r0, r2
 8005776:	f7fb fac3 	bl	8000d00 <_test_assert>
 800577a:	2800      	cmp	r0, #0
 800577c:	f47f af0d 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(10);
 8005780:	230a      	movs	r3, #10
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8005782:	210c      	movs	r1, #12
 8005784:	4668      	mov	r0, sp
  test_set_step(10);
 8005786:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8005788:	f7ff fc8a 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 800578c:	f1a0 030c 	sub.w	r3, r0, #12
 8005790:	4258      	negs	r0, r3
 8005792:	4158      	adcs	r0, r3
 8005794:	4953      	ldr	r1, [pc, #332]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 8005796:	f7fb fab3 	bl	8000d00 <_test_assert>
 800579a:	2800      	cmp	r0, #0
 800579c:	f47f aefd 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80057a0:	6822      	ldr	r2, [r4, #0]
 80057a2:	68e3      	ldr	r3, [r4, #12]
 80057a4:	4293      	cmp	r3, r2
 80057a6:	f000 8105 	beq.w	80059b4 <oslib_test_003_001_execute+0x484>
 80057aa:	494d      	ldr	r1, [pc, #308]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 80057ac:	f7fb faa8 	bl	8000d00 <_test_assert>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	f47f aef2 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 80057b6:	4669      	mov	r1, sp
 80057b8:	484d      	ldr	r0, [pc, #308]	; (80058f0 <oslib_test_003_001_execute+0x3c0>)
 80057ba:	220c      	movs	r2, #12
 80057bc:	f003 ff42 	bl	8009644 <memcmp>
 80057c0:	fab0 f080 	clz	r0, r0
 80057c4:	4949      	ldr	r1, [pc, #292]	; (80058ec <oslib_test_003_001_execute+0x3bc>)
 80057c6:	0940      	lsrs	r0, r0, #5
 80057c8:	f7fb fa9a 	bl	8000d00 <_test_assert>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	f47f aee4 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(11);
 80057d2:	230b      	movs	r3, #11
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 80057d4:	2005      	movs	r0, #5
  test_set_step(11);
 80057d6:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 80057d8:	f7ff fbf2 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 80057dc:	f1a0 0e05 	sub.w	lr, r0, #5
 80057e0:	f1de 0000 	rsbs	r0, lr, #0
 80057e4:	eb40 000e 	adc.w	r0, r0, lr
 80057e8:	493e      	ldr	r1, [pc, #248]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 80057ea:	f7fb fa89 	bl	8000d00 <_test_assert>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f47f aed3 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80057f4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <oslib_test_003_001_execute+0x2d4>
 80057fc:	6822      	ldr	r2, [r4, #0]
 80057fe:	4293      	cmp	r3, r2
 8005800:	f000 80e1 	beq.w	80059c6 <oslib_test_003_001_execute+0x496>
 8005804:	4936      	ldr	r1, [pc, #216]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005806:	f7fb fa7b 	bl	8000d00 <_test_assert>
 800580a:	2800      	cmp	r0, #0
 800580c:	f47f aec5 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(12);
 8005810:	230c      	movs	r3, #12
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 8005812:	2105      	movs	r1, #5
 8005814:	4668      	mov	r0, sp
  test_set_step(12);
 8005816:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 8005818:	f7ff fc42 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 800581c:	1f45      	subs	r5, r0, #5
 800581e:	4268      	negs	r0, r5
 8005820:	4168      	adcs	r0, r5
 8005822:	4930      	ldr	r1, [pc, #192]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 8005824:	f7fb fa6c 	bl	8000d00 <_test_assert>
 8005828:	2800      	cmp	r0, #0
 800582a:	f47f aeb6 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800582e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005832:	4293      	cmp	r3, r2
 8005834:	f000 80e8 	beq.w	8005a08 <oslib_test_003_001_execute+0x4d8>
 8005838:	4929      	ldr	r1, [pc, #164]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 800583a:	f7fb fa61 	bl	8000d00 <_test_assert>
 800583e:	2800      	cmp	r0, #0
 8005840:	f47f aeab 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 8005844:	4669      	mov	r1, sp
 8005846:	482a      	ldr	r0, [pc, #168]	; (80058f0 <oslib_test_003_001_execute+0x3c0>)
 8005848:	2205      	movs	r2, #5
 800584a:	f003 fefb 	bl	8009644 <memcmp>
 800584e:	fab0 f080 	clz	r0, r0
 8005852:	4926      	ldr	r1, [pc, #152]	; (80058ec <oslib_test_003_001_execute+0x3bc>)
 8005854:	0940      	lsrs	r0, r0, #5
 8005856:	f7fb fa53 	bl	8000d00 <_test_assert>
 800585a:	2800      	cmp	r0, #0
 800585c:	f47f ae9d 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(13);
 8005860:	230d      	movs	r3, #13
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8005862:	2010      	movs	r0, #16
  test_set_step(13);
 8005864:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8005866:	f7ff fbab 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 800586a:	f1a0 0110 	sub.w	r1, r0, #16
 800586e:	4248      	negs	r0, r1
 8005870:	4148      	adcs	r0, r1
 8005872:	491c      	ldr	r1, [pc, #112]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 8005874:	f7fb fa44 	bl	8000d00 <_test_assert>
 8005878:	2800      	cmp	r0, #0
 800587a:	f47f ae8e 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800587e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005882:	4293      	cmp	r3, r2
 8005884:	f000 80b6 	beq.w	80059f4 <oslib_test_003_001_execute+0x4c4>
 8005888:	4915      	ldr	r1, [pc, #84]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 800588a:	f7fb fa39 	bl	8000d00 <_test_assert>
 800588e:	2800      	cmp	r0, #0
 8005890:	f47f ae83 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(14);
 8005894:	230e      	movs	r3, #14
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005896:	2110      	movs	r1, #16
 8005898:	4668      	mov	r0, sp
  test_set_step(14);
 800589a:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800589c:	f7ff fc00 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 80058a0:	f1a0 0310 	sub.w	r3, r0, #16
 80058a4:	4258      	negs	r0, r3
 80058a6:	4158      	adcs	r0, r3
 80058a8:	490e      	ldr	r1, [pc, #56]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 80058aa:	f7fb fa29 	bl	8000d00 <_test_assert>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	f47f ae73 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80058b4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80058b8:	4293      	cmp	r3, r2
 80058ba:	f000 808c 	beq.w	80059d6 <oslib_test_003_001_execute+0x4a6>
 80058be:	4908      	ldr	r1, [pc, #32]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 80058c0:	f7fb fa1e 	bl	8000d00 <_test_assert>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	f47f ae68 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 80058ca:	4669      	mov	r1, sp
 80058cc:	2210      	movs	r2, #16
 80058ce:	4808      	ldr	r0, [pc, #32]	; (80058f0 <oslib_test_003_001_execute+0x3c0>)
 80058d0:	f003 feb8 	bl	8009644 <memcmp>
 80058d4:	fab0 f080 	clz	r0, r0
 80058d8:	e00c      	b.n	80058f4 <oslib_test_003_001_execute+0x3c4>
 80058da:	bf00      	nop
 80058dc:	0800a8f4 	.word	0x0800a8f4
 80058e0:	0800a8b0 	.word	0x0800a8b0
 80058e4:	0800a7e4 	.word	0x0800a7e4
 80058e8:	33323130 	.word	0x33323130
 80058ec:	0800a900 	.word	0x0800a900
 80058f0:	0800ba64 	.word	0x0800ba64
 80058f4:	4949      	ldr	r1, [pc, #292]	; (8005a1c <oslib_test_003_001_execute+0x4ec>)
 80058f6:	0940      	lsrs	r0, r0, #5
 80058f8:	f7fb fa02 	bl	8000d00 <_test_assert>
  test_end_step(14);
 80058fc:	e64d      	b.n	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80058fe:	68a2      	ldr	r2, [r4, #8]
 8005900:	4293      	cmp	r3, r2
 8005902:	f47f ae6f 	bne.w	80055e4 <oslib_test_003_001_execute+0xb4>
 8005906:	6920      	ldr	r0, [r4, #16]
 8005908:	fab0 f080 	clz	r0, r0
 800590c:	0940      	lsrs	r0, r0, #5
 800590e:	e669      	b.n	80055e4 <oslib_test_003_001_execute+0xb4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005910:	68a2      	ldr	r2, [r4, #8]
 8005912:	4293      	cmp	r3, r2
 8005914:	f47f ae8b 	bne.w	800562e <oslib_test_003_001_execute+0xfe>
 8005918:	6920      	ldr	r0, [r4, #16]
 800591a:	fab0 f080 	clz	r0, r0
 800591e:	0940      	lsrs	r0, r0, #5
 8005920:	e685      	b.n	800562e <oslib_test_003_001_execute+0xfe>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005922:	68a2      	ldr	r2, [r4, #8]
 8005924:	4293      	cmp	r3, r2
 8005926:	f47f ae75 	bne.w	8005614 <oslib_test_003_001_execute+0xe4>
 800592a:	6920      	ldr	r0, [r4, #16]
 800592c:	fab0 f080 	clz	r0, r0
 8005930:	0940      	lsrs	r0, r0, #5
 8005932:	e66f      	b.n	8005614 <oslib_test_003_001_execute+0xe4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005934:	68a2      	ldr	r2, [r4, #8]
 8005936:	4293      	cmp	r3, r2
 8005938:	f47f ae92 	bne.w	8005660 <oslib_test_003_001_execute+0x130>
 800593c:	6920      	ldr	r0, [r4, #16]
 800593e:	f1a0 0010 	sub.w	r0, r0, #16
 8005942:	fab0 f080 	clz	r0, r0
 8005946:	0940      	lsrs	r0, r0, #5
 8005948:	e68a      	b.n	8005660 <oslib_test_003_001_execute+0x130>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800594a:	68a2      	ldr	r2, [r4, #8]
 800594c:	4293      	cmp	r3, r2
 800594e:	f47f aea1 	bne.w	8005694 <oslib_test_003_001_execute+0x164>
 8005952:	6920      	ldr	r0, [r4, #16]
 8005954:	fab0 f080 	clz	r0, r0
 8005958:	0940      	lsrs	r0, r0, #5
 800595a:	e69b      	b.n	8005694 <oslib_test_003_001_execute+0x164>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800595c:	9a01      	ldr	r2, [sp, #4]
 800595e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8005962:	429a      	cmp	r2, r3
 8005964:	f47f aea1 	bne.w	80056aa <oslib_test_003_001_execute+0x17a>
 8005968:	f103 6330 	add.w	r3, r3, #184549376	; 0xb000000
 800596c:	9a02      	ldr	r2, [sp, #8]
 800596e:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
 8005972:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005976:	429a      	cmp	r2, r3
 8005978:	f47f ae97 	bne.w	80056aa <oslib_test_003_001_execute+0x17a>
 800597c:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8005980:	9a03      	ldr	r2, [sp, #12]
 8005982:	f503 2381 	add.w	r3, r3, #264192	; 0x40800
 8005986:	f203 330b 	addw	r3, r3, #779	; 0x30b
 800598a:	429a      	cmp	r2, r3
 800598c:	f47f ae8d 	bne.w	80056aa <oslib_test_003_001_execute+0x17a>
 8005990:	e68c      	b.n	80056ac <oslib_test_003_001_execute+0x17c>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8005992:	6920      	ldr	r0, [r4, #16]
 8005994:	1f03      	subs	r3, r0, #4
 8005996:	4258      	negs	r0, r3
 8005998:	4158      	adcs	r0, r3
 800599a:	e6a7      	b.n	80056ec <oslib_test_003_001_execute+0x1bc>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800599c:	68a2      	ldr	r2, [r4, #8]
 800599e:	4293      	cmp	r3, r2
 80059a0:	f47f aec0 	bne.w	8005724 <oslib_test_003_001_execute+0x1f4>
 80059a4:	6920      	ldr	r0, [r4, #16]
 80059a6:	f1a0 0c10 	sub.w	ip, r0, #16
 80059aa:	f1dc 0000 	rsbs	r0, ip, #0
 80059ae:	eb40 000c 	adc.w	r0, r0, ip
 80059b2:	e6b7      	b.n	8005724 <oslib_test_003_001_execute+0x1f4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80059b4:	68a2      	ldr	r2, [r4, #8]
 80059b6:	4293      	cmp	r3, r2
 80059b8:	f47f aef7 	bne.w	80057aa <oslib_test_003_001_execute+0x27a>
 80059bc:	6920      	ldr	r0, [r4, #16]
 80059be:	fab0 f080 	clz	r0, r0
 80059c2:	0940      	lsrs	r0, r0, #5
 80059c4:	e6f1      	b.n	80057aa <oslib_test_003_001_execute+0x27a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80059c6:	6920      	ldr	r0, [r4, #16]
 80059c8:	f1a0 0c05 	sub.w	ip, r0, #5
 80059cc:	f1dc 0000 	rsbs	r0, ip, #0
 80059d0:	eb40 000c 	adc.w	r0, r0, ip
 80059d4:	e716      	b.n	8005804 <oslib_test_003_001_execute+0x2d4>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80059d6:	6822      	ldr	r2, [r4, #0]
 80059d8:	4293      	cmp	r3, r2
 80059da:	f43f af70 	beq.w	80058be <oslib_test_003_001_execute+0x38e>
 80059de:	6920      	ldr	r0, [r4, #16]
 80059e0:	fab0 f080 	clz	r0, r0
 80059e4:	0940      	lsrs	r0, r0, #5
 80059e6:	e76a      	b.n	80058be <oslib_test_003_001_execute+0x38e>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 80059e8:	6920      	ldr	r0, [r4, #16]
 80059ea:	f1a0 010c 	sub.w	r1, r0, #12
 80059ee:	4248      	negs	r0, r1
 80059f0:	4148      	adcs	r0, r1
 80059f2:	e6b4      	b.n	800575e <oslib_test_003_001_execute+0x22e>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	4293      	cmp	r3, r2
 80059f8:	f43f af46 	beq.w	8005888 <oslib_test_003_001_execute+0x358>
 80059fc:	6920      	ldr	r0, [r4, #16]
 80059fe:	f1a0 0210 	sub.w	r2, r0, #16
 8005a02:	4250      	negs	r0, r2
 8005a04:	4150      	adcs	r0, r2
 8005a06:	e73f      	b.n	8005888 <oslib_test_003_001_execute+0x358>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8005a08:	6822      	ldr	r2, [r4, #0]
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	f43f af14 	beq.w	8005838 <oslib_test_003_001_execute+0x308>
 8005a10:	6920      	ldr	r0, [r4, #16]
 8005a12:	fab0 f080 	clz	r0, r0
 8005a16:	0940      	lsrs	r0, r0, #5
 8005a18:	e70e      	b.n	8005838 <oslib_test_003_001_execute+0x308>
 8005a1a:	bf00      	nop
 8005a1c:	0800a900 	.word	0x0800a900

08005a20 <rt_test_011_011_execute>:
static void rt_test_011_011_execute(void) {
 8005a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8005a24:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8005aa8 <rt_test_011_011_execute+0x88>
      chMtxLock(&mtx1);
 8005a28:	4c1c      	ldr	r4, [pc, #112]	; (8005a9c <rt_test_011_011_execute+0x7c>)
  test_set_step(1);
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 8005a30:	f7fd fb9e 	bl	8003170 <test_wait_tick>
    n = 0;
 8005a34:	2500      	movs	r5, #0
    start = test_wait_tick();
 8005a36:	4606      	mov	r6, r0
 8005a38:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8005a3c:	f242 770f 	movw	r7, #9999	; 0x270f
      chMtxLock(&mtx1);
 8005a40:	4620      	mov	r0, r4
 8005a42:	f7fd fd85 	bl	8003550 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005a46:	4620      	mov	r0, r4
 8005a48:	f7ff f9b2 	bl	8004db0 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f7fd fd7f 	bl	8003550 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005a52:	4620      	mov	r0, r4
 8005a54:	f7ff f9ac 	bl	8004db0 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f7fd fd79 	bl	8003550 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f7ff f9a6 	bl	8004db0 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005a64:	4620      	mov	r0, r4
 8005a66:	f7fd fd73 	bl	8003550 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f7ff f9a0 	bl	8004db0 <chMtxUnlock>
 8005a70:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8005a74:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 8005a76:	42bb      	cmp	r3, r7
      n++;
 8005a78:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8005a7c:	d9e0      	bls.n	8005a40 <rt_test_011_011_execute+0x20>
  test_set_step(2);
 8005a7e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8005a80:	4807      	ldr	r0, [pc, #28]	; (8005aa0 <rt_test_011_011_execute+0x80>)
  test_set_step(2);
 8005a82:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8005a86:	f7fb faa3 	bl	8000fd0 <test_print>
    test_printn(n * 4);
 8005a8a:	00a8      	lsls	r0, r5, #2
 8005a8c:	f7fb f9d0 	bl	8000e30 <test_printn>
}
 8005a90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 8005a94:	4803      	ldr	r0, [pc, #12]	; (8005aa4 <rt_test_011_011_execute+0x84>)
 8005a96:	f7fb ba7b 	b.w	8000f90 <test_println>
 8005a9a:	bf00      	nop
 8005a9c:	200016e0 	.word	0x200016e0
 8005aa0:	0800a694 	.word	0x0800a694
 8005aa4:	0800a914 	.word	0x0800a914
 8005aa8:	20001f1c 	.word	0x20001f1c
 8005aac:	00000000 	.word	0x00000000

08005ab0 <thread8>:
static THD_FUNCTION(thread8, p) {
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	4604      	mov	r4, r0
  chMtxLock(&m2);
 8005ab4:	481b      	ldr	r0, [pc, #108]	; (8005b24 <thread8+0x74>)
 8005ab6:	f7fd fd4b 	bl	8003550 <chMtxLock>
  chMtxLock(&m1);
 8005aba:	481b      	ldr	r0, [pc, #108]	; (8005b28 <thread8+0x78>)
 8005abc:	f7fd fd48 	bl	8003550 <chMtxLock>
 8005ac0:	2320      	movs	r3, #32
 8005ac2:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8005ac6:	4d19      	ldr	r5, [pc, #100]	; (8005b2c <thread8+0x7c>)
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8005ac8:	69ab      	ldr	r3, [r5, #24]
 8005aca:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(mp != NULL, "not owning a mutex");

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 8005acc:	4630      	mov	r0, r6
 8005ace:	f7fb fe27 	bl	8001720 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8005ad2:	4b17      	ldr	r3, [pc, #92]	; (8005b30 <thread8+0x80>)
 8005ad4:	69aa      	ldr	r2, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6253      	str	r3, [r2, #36]	; 0x24
 8005ada:	e003      	b.n	8005ae4 <thread8+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005adc:	689f      	ldr	r7, [r3, #8]
 8005ade:	6890      	ldr	r0, [r2, #8]
 8005ae0:	4287      	cmp	r7, r0
 8005ae2:	d302      	bcc.n	8005aea <thread8+0x3a>
    cp = cp->queue.next;
 8005ae4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005ae6:	428b      	cmp	r3, r1
 8005ae8:	d1f8      	bne.n	8005adc <thread8+0x2c>
  tp->queue.prev             = cp->queue.prev;
 8005aea:	6859      	ldr	r1, [r3, #4]
    chSchGoSleepS(newstate);
 8005aec:	2007      	movs	r0, #7
 8005aee:	e9c2 3100 	strd	r3, r1, [r2]
  tp->queue.prev->queue.next = tp;
 8005af2:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	f7fc fd1b 	bl	8002530 <chSchGoSleepS>
  return currp->u.rdymsg;
 8005afa:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	3301      	adds	r3, #1
 8005b00:	d002      	beq.n	8005b08 <thread8+0x58>
    chMtxLockS(mp);
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7fd fcc4 	bl	8003490 <chMtxLockS>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8005b0e:	7820      	ldrb	r0, [r4, #0]
 8005b10:	f7fb f99e 	bl	8000e50 <test_emit_token>
  chMtxUnlock(&m1);
 8005b14:	4804      	ldr	r0, [pc, #16]	; (8005b28 <thread8+0x78>)
 8005b16:	f7ff f94b 	bl	8004db0 <chMtxUnlock>
}
 8005b1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 8005b1e:	4801      	ldr	r0, [pc, #4]	; (8005b24 <thread8+0x74>)
 8005b20:	f7ff b946 	b.w	8004db0 <chMtxUnlock>
 8005b24:	2000083c 	.word	0x2000083c
 8005b28:	2000082c 	.word	0x2000082c
 8005b2c:	2000142c 	.word	0x2000142c
 8005b30:	20000800 	.word	0x20000800
	...

08005b40 <thread6>:
static THD_FUNCTION(thread6, p) {
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	4605      	mov	r5, r0
  chMtxLock(&m1);
 8005b44:	4816      	ldr	r0, [pc, #88]	; (8005ba0 <thread6+0x60>)
 8005b46:	f7fd fd03 	bl	8003550 <chMtxLock>
 8005b4a:	2320      	movs	r3, #32
 8005b4c:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
 8005b50:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <thread6+0x64>)
 8005b52:	699c      	ldr	r4, [r3, #24]
 8005b54:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  chMtxUnlockS(mp);
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7fb fde2 	bl	8001720 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 8005b5c:	4a12      	ldr	r2, [pc, #72]	; (8005ba8 <thread6+0x68>)
 8005b5e:	6262      	str	r2, [r4, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8005b60:	4613      	mov	r3, r2
 8005b62:	e003      	b.n	8005b6c <thread6+0x2c>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005b64:	6898      	ldr	r0, [r3, #8]
 8005b66:	68a1      	ldr	r1, [r4, #8]
 8005b68:	4288      	cmp	r0, r1
 8005b6a:	d302      	bcc.n	8005b72 <thread6+0x32>
    cp = cp->queue.next;
 8005b6c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d1f8      	bne.n	8005b64 <thread6+0x24>
  tp->queue.prev             = cp->queue.prev;
 8005b72:	685a      	ldr	r2, [r3, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 8005b74:	2007      	movs	r0, #7
 8005b76:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8005b7a:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005b7c:	605c      	str	r4, [r3, #4]
 8005b7e:	f7fc fcd7 	bl	8002530 <chSchGoSleepS>
  chMtxLockS(mp);
 8005b82:	4630      	mov	r0, r6
 8005b84:	f7fd fc84 	bl	8003490 <chMtxLockS>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8005b8e:	7828      	ldrb	r0, [r5, #0]
 8005b90:	f7fb f95e 	bl	8000e50 <test_emit_token>
}
 8005b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chMtxUnlock(&m1);
 8005b98:	4801      	ldr	r0, [pc, #4]	; (8005ba0 <thread6+0x60>)
 8005b9a:	f7ff b909 	b.w	8004db0 <chMtxUnlock>
 8005b9e:	bf00      	nop
 8005ba0:	2000082c 	.word	0x2000082c
 8005ba4:	2000142c 	.word	0x2000142c
 8005ba8:	20000800 	.word	0x20000800
 8005bac:	00000000 	.word	0x00000000

08005bb0 <thread9>:
static THD_FUNCTION(thread9, p) {
 8005bb0:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m2);
 8005bb2:	4d06      	ldr	r5, [pc, #24]	; (8005bcc <thread9+0x1c>)
static THD_FUNCTION(thread9, p) {
 8005bb4:	4604      	mov	r4, r0
  chMtxLock(&m2);
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f7fd fcca 	bl	8003550 <chMtxLock>
  test_emit_token(*(char *)p);
 8005bbc:	7820      	ldrb	r0, [r4, #0]
 8005bbe:	f7fb f947 	bl	8000e50 <test_emit_token>
  chMtxUnlock(&m2);
 8005bc2:	4628      	mov	r0, r5
}
 8005bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 8005bc8:	f7ff b8f2 	b.w	8004db0 <chMtxUnlock>
 8005bcc:	2000083c 	.word	0x2000083c

08005bd0 <rt_test_007_005_execute>:
static void rt_test_007_005_execute(void) {
 8005bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd4:	4d4f      	ldr	r5, [pc, #316]	; (8005d14 <rt_test_007_005_execute+0x144>)
  test_set_step(2);
 8005bd6:	4c50      	ldr	r4, [pc, #320]	; (8005d18 <rt_test_007_005_execute+0x148>)
  return chThdGetSelfX()->prio;
 8005bd8:	69aa      	ldr	r2, [r5, #24]
 8005bda:	2302      	movs	r3, #2
 8005bdc:	6896      	ldr	r6, [r2, #8]
 8005bde:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8005be0:	f7fa fdee 	bl	80007c0 <chMtxTryLock.constprop.0>
    test_assert(b, "already locked");
 8005be4:	494d      	ldr	r1, [pc, #308]	; (8005d1c <rt_test_007_005_execute+0x14c>)
 8005be6:	f7fb f88b 	bl	8000d00 <_test_assert>
 8005bea:	b108      	cbz	r0, 8005bf0 <rt_test_007_005_execute+0x20>
}
 8005bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(3);
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8005bf4:	f7fa fde4 	bl	80007c0 <chMtxTryLock.constprop.0>
    test_assert(!b, "not locked");
 8005bf8:	f080 0001 	eor.w	r0, r0, #1
 8005bfc:	4948      	ldr	r1, [pc, #288]	; (8005d20 <rt_test_007_005_execute+0x150>)
 8005bfe:	b2c0      	uxtb	r0, r0
 8005c00:	f7fb f87e 	bl	8000d00 <_test_assert>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d1f1      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
    chMtxUnlock(&m1);
 8005c08:	4f46      	ldr	r7, [pc, #280]	; (8005d24 <rt_test_007_005_execute+0x154>)
  test_set_step(4);
 8005c0a:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 8005c0c:	4638      	mov	r0, r7
  test_set_step(4);
 8005c0e:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 8005c10:	f7ff f8ce 	bl	8004db0 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 8005c14:	68b8      	ldr	r0, [r7, #8]
 8005c16:	4944      	ldr	r1, [pc, #272]	; (8005d28 <rt_test_007_005_execute+0x158>)
 8005c18:	fab0 f080 	clz	r0, r0
 8005c1c:	0940      	lsrs	r0, r0, #5
 8005c1e:	f7fb f86f 	bl	8000d00 <_test_assert>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d1e2      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8005c26:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8005c28:	4940      	ldr	r1, [pc, #256]	; (8005d2c <rt_test_007_005_execute+0x15c>)
 8005c2a:	1bc0      	subs	r0, r0, r7
 8005c2c:	fab0 f080 	clz	r0, r0
 8005c30:	0940      	lsrs	r0, r0, #5
 8005c32:	f7fb f865 	bl	8000d00 <_test_assert>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d1d8      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
 8005c3a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005c3c:	493c      	ldr	r1, [pc, #240]	; (8005d30 <rt_test_007_005_execute+0x160>)
 8005c3e:	6898      	ldr	r0, [r3, #8]
 8005c40:	1b80      	subs	r0, r0, r6
 8005c42:	fab0 f080 	clz	r0, r0
  test_set_step(5);
 8005c46:	2305      	movs	r3, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005c48:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 8005c4a:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005c4c:	f7fb f858 	bl	8000d00 <_test_assert>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d1cb      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
  test_set_step(6);
 8005c54:	2306      	movs	r3, #6
 8005c56:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8005c58:	f7fa fdb2 	bl	80007c0 <chMtxTryLock.constprop.0>
    test_assert(b, "already locked");
 8005c5c:	492f      	ldr	r1, [pc, #188]	; (8005d1c <rt_test_007_005_execute+0x14c>)
 8005c5e:	f7fb f84f 	bl	8000d00 <_test_assert>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d1c2      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
    b = chMtxTryLock(&m1);
 8005c66:	f7fa fdab 	bl	80007c0 <chMtxTryLock.constprop.0>
    test_assert(!b, "not locked");
 8005c6a:	f080 0001 	eor.w	r0, r0, #1
 8005c6e:	492c      	ldr	r1, [pc, #176]	; (8005d20 <rt_test_007_005_execute+0x150>)
 8005c70:	b2c0      	uxtb	r0, r0
 8005c72:	f7fb f845 	bl	8000d00 <_test_assert>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d1b8      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
 8005c7a:	2320      	movs	r3, #32
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 *          inheritance mechanism.
 *
 * @sclass
 */
void chMtxUnlockAllS(void) {
  thread_t *ctp = currp;
 8005c80:	f8d5 9018 	ldr.w	r9, [r5, #24]

  if (ctp->mtxlist != NULL) {
 8005c84:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8005c88:	b1db      	cbz	r3, 8005cc2 <rt_test_007_005_execute+0xf2>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 8005c8a:	4680      	mov	r8, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8005c8c:	681a      	ldr	r2, [r3, #0]
      ctp->mtxlist = mp->next;
 8005c8e:	68d9      	ldr	r1, [r3, #12]
 8005c90:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8005c94:	4293      	cmp	r3, r2
        (void) chSchReadyI(tp);
 8005c96:	4610      	mov	r0, r2
      if (chMtxQueueNotEmptyS(mp)) {
 8005c98:	d037      	beq.n	8005d0a <rt_test_007_005_execute+0x13a>
        mp->next    = tp->mtxlist;
 8005c9a:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
  tqp->next             = tp->queue.next;
 8005c9e:	6811      	ldr	r1, [r2, #0]
 8005ca0:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005ca2:	604b      	str	r3, [r1, #4]
 8005ca4:	e9c3 2c02 	strd	r2, ip, [r3, #8]
        tp->mtxlist = mp;
 8005ca8:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8005caa:	f7fb fc41 	bl	8001530 <chSchReadyI>
 8005cae:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
      }
    } while (ctp->mtxlist != NULL);
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1ea      	bne.n	8005c8c <rt_test_007_005_execute+0xbc>
    ctp->prio = ctp->realprio;
 8005cb6:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8005cba:	f8c9 3008 	str.w	r3, [r9, #8]
    chSchRescheduleS();
 8005cbe:	f7fd fe9f 	bl	8003a00 <chSchRescheduleS>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 8005cc8:	68b8      	ldr	r0, [r7, #8]
 8005cca:	4917      	ldr	r1, [pc, #92]	; (8005d28 <rt_test_007_005_execute+0x158>)
 8005ccc:	fab0 f080 	clz	r0, r0
 8005cd0:	0940      	lsrs	r0, r0, #5
 8005cd2:	f7fb f815 	bl	8000d00 <_test_assert>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d188      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8005cda:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8005cdc:	4913      	ldr	r1, [pc, #76]	; (8005d2c <rt_test_007_005_execute+0x15c>)
 8005cde:	1bc0      	subs	r0, r0, r7
 8005ce0:	fab0 f080 	clz	r0, r0
 8005ce4:	0940      	lsrs	r0, r0, #5
 8005ce6:	f7fb f80b 	bl	8000d00 <_test_assert>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	f47f af7e 	bne.w	8005bec <rt_test_007_005_execute+0x1c>
 8005cf0:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005cf2:	490f      	ldr	r1, [pc, #60]	; (8005d30 <rt_test_007_005_execute+0x160>)
 8005cf4:	6898      	ldr	r0, [r3, #8]
 8005cf6:	1b80      	subs	r0, r0, r6
  test_set_step(7);
 8005cf8:	2307      	movs	r3, #7
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005cfa:	fab0 f080 	clz	r0, r0
  test_set_step(7);
 8005cfe:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005d00:	0940      	lsrs	r0, r0, #5
}
 8005d02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005d06:	f7fa bffb 	b.w	8000d00 <_test_assert>
        mp->owner = NULL;
 8005d0a:	f8c3 8008 	str.w	r8, [r3, #8]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	e7cf      	b.n	8005cb2 <rt_test_007_005_execute+0xe2>
 8005d12:	bf00      	nop
 8005d14:	2000142c 	.word	0x2000142c
 8005d18:	20001f1c 	.word	0x20001f1c
 8005d1c:	0800a924 	.word	0x0800a924
 8005d20:	0800a934 	.word	0x0800a934
 8005d24:	2000082c 	.word	0x2000082c
 8005d28:	0800a940 	.word	0x0800a940
 8005d2c:	0800a708 	.word	0x0800a708
 8005d30:	0800a94c 	.word	0x0800a94c
	...

08005d40 <rt_test_007_004_execute>:
static void rt_test_007_004_execute(void) {
 8005d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8005d44:	4d45      	ldr	r5, [pc, #276]	; (8005e5c <rt_test_007_004_execute+0x11c>)
  test_set_step(2);
 8005d46:	4e46      	ldr	r6, [pc, #280]	; (8005e60 <rt_test_007_004_execute+0x120>)
  return chThdGetSelfX()->prio;
 8005d48:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005d4a:	4a46      	ldr	r2, [pc, #280]	; (8005e64 <rt_test_007_004_execute+0x124>)
 8005d4c:	689c      	ldr	r4, [r3, #8]
 8005d4e:	4846      	ldr	r0, [pc, #280]	; (8005e68 <rt_test_007_004_execute+0x128>)
 8005d50:	4b46      	ldr	r3, [pc, #280]	; (8005e6c <rt_test_007_004_execute+0x12c>)
static void rt_test_007_004_execute(void) {
 8005d52:	b083      	sub	sp, #12
    pa = p + 1;
 8005d54:	f104 0801 	add.w	r8, r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005d58:	9200      	str	r2, [sp, #0]
  test_set_step(2);
 8005d5a:	2702      	movs	r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(2);
 8005d62:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005d64:	f7fc fb74 	bl	8002450 <chThdCreateStatic>
 8005d68:	4f41      	ldr	r7, [pc, #260]	; (8005e70 <rt_test_007_004_execute+0x130>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005d6a:	4b42      	ldr	r3, [pc, #264]	; (8005e74 <rt_test_007_004_execute+0x134>)
 8005d6c:	9300      	str	r3, [sp, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005d6e:	4601      	mov	r1, r0
    pb = p + 2;
 8005d70:	f104 0902 	add.w	r9, r4, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005d74:	4b40      	ldr	r3, [pc, #256]	; (8005e78 <rt_test_007_004_execute+0x138>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005d76:	6039      	str	r1, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005d78:	464a      	mov	r2, r9
 8005d7a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d7e:	483f      	ldr	r0, [pc, #252]	; (8005e7c <rt_test_007_004_execute+0x13c>)
 8005d80:	f7fc fb66 	bl	8002450 <chThdCreateStatic>
  test_set_step(3);
 8005d84:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005d86:	4602      	mov	r2, r0
    chMtxLock(&m1);
 8005d88:	483d      	ldr	r0, [pc, #244]	; (8005e80 <rt_test_007_004_execute+0x140>)
  test_set_step(3);
 8005d8a:	6033      	str	r3, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005d8c:	607a      	str	r2, [r7, #4]
    chMtxLock(&m1);
 8005d8e:	f7fd fbdf 	bl	8003550 <chMtxLock>
 8005d92:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005d94:	493b      	ldr	r1, [pc, #236]	; (8005e84 <rt_test_007_004_execute+0x144>)
 8005d96:	6898      	ldr	r0, [r3, #8]
 8005d98:	1b00      	subs	r0, r0, r4
 8005d9a:	fab0 f080 	clz	r0, r0
 8005d9e:	0940      	lsrs	r0, r0, #5
 8005da0:	f7fa ffae 	bl	8000d00 <_test_assert>
 8005da4:	b110      	cbz	r0, 8005dac <rt_test_007_004_execute+0x6c>
}
 8005da6:	b003      	add	sp, #12
 8005da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
 8005dac:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 8005dae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(4);
 8005db2:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8005db4:	f7fc ff34 	bl	8002c20 <chThdSleep>
 8005db8:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005dba:	4932      	ldr	r1, [pc, #200]	; (8005e84 <rt_test_007_004_execute+0x144>)
 8005dbc:	6898      	ldr	r0, [r3, #8]
 8005dbe:	eba0 0008 	sub.w	r0, r0, r8
 8005dc2:	fab0 f080 	clz	r0, r0
 8005dc6:	0940      	lsrs	r0, r0, #5
 8005dc8:	f7fa ff9a 	bl	8000d00 <_test_assert>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d1ea      	bne.n	8005da6 <rt_test_007_004_execute+0x66>
  test_set_step(5);
 8005dd0:	2305      	movs	r3, #5
    chMtxLock(&m2);
 8005dd2:	482d      	ldr	r0, [pc, #180]	; (8005e88 <rt_test_007_004_execute+0x148>)
  test_set_step(5);
 8005dd4:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
 8005dd6:	f7fd fbbb 	bl	8003550 <chMtxLock>
 8005dda:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005ddc:	4929      	ldr	r1, [pc, #164]	; (8005e84 <rt_test_007_004_execute+0x144>)
 8005dde:	6898      	ldr	r0, [r3, #8]
 8005de0:	eba0 0008 	sub.w	r0, r0, r8
 8005de4:	fab0 f080 	clz	r0, r0
 8005de8:	0940      	lsrs	r0, r0, #5
 8005dea:	f7fa ff89 	bl	8000d00 <_test_assert>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d1d9      	bne.n	8005da6 <rt_test_007_004_execute+0x66>
  test_set_step(6);
 8005df2:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 8005df4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(6);
 8005df8:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8005dfa:	f7fc ff11 	bl	8002c20 <chThdSleep>
 8005dfe:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 8005e00:	4920      	ldr	r1, [pc, #128]	; (8005e84 <rt_test_007_004_execute+0x144>)
 8005e02:	6898      	ldr	r0, [r3, #8]
 8005e04:	eba0 0009 	sub.w	r0, r0, r9
 8005e08:	fab0 f080 	clz	r0, r0
 8005e0c:	0940      	lsrs	r0, r0, #5
 8005e0e:	f7fa ff77 	bl	8000d00 <_test_assert>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d1c7      	bne.n	8005da6 <rt_test_007_004_execute+0x66>
  test_set_step(7);
 8005e16:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 8005e18:	481b      	ldr	r0, [pc, #108]	; (8005e88 <rt_test_007_004_execute+0x148>)
  test_set_step(7);
 8005e1a:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
 8005e1c:	f7fe ffc8 	bl	8004db0 <chMtxUnlock>
 8005e20:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005e22:	4918      	ldr	r1, [pc, #96]	; (8005e84 <rt_test_007_004_execute+0x144>)
 8005e24:	6898      	ldr	r0, [r3, #8]
 8005e26:	eba0 0008 	sub.w	r0, r0, r8
 8005e2a:	fab0 f080 	clz	r0, r0
 8005e2e:	0940      	lsrs	r0, r0, #5
 8005e30:	f7fa ff66 	bl	8000d00 <_test_assert>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d1b6      	bne.n	8005da6 <rt_test_007_004_execute+0x66>
  test_set_step(8);
 8005e38:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 8005e3a:	4811      	ldr	r0, [pc, #68]	; (8005e80 <rt_test_007_004_execute+0x140>)
  test_set_step(8);
 8005e3c:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 8005e3e:	f7fe ffb7 	bl	8004db0 <chMtxUnlock>
 8005e42:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005e44:	490f      	ldr	r1, [pc, #60]	; (8005e84 <rt_test_007_004_execute+0x144>)
 8005e46:	6898      	ldr	r0, [r3, #8]
 8005e48:	1b00      	subs	r0, r0, r4
 8005e4a:	fab0 f080 	clz	r0, r0
 8005e4e:	0940      	lsrs	r0, r0, #5
}
 8005e50:	b003      	add	sp, #12
 8005e52:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005e56:	f7fa bf53 	b.w	8000d00 <_test_assert>
 8005e5a:	bf00      	nop
 8005e5c:	2000142c 	.word	0x2000142c
 8005e60:	20001f1c 	.word	0x20001f1c
 8005e64:	0800a964 	.word	0x0800a964
 8005e68:	20001808 	.word	0x20001808
 8005e6c:	08005e91 	.word	0x08005e91
 8005e70:	20001f34 	.word	0x20001f34
 8005e74:	0800a968 	.word	0x0800a968
 8005e78:	08004171 	.word	0x08004171
 8005e7c:	20001950 	.word	0x20001950
 8005e80:	2000082c 	.word	0x2000082c
 8005e84:	0800a94c 	.word	0x0800a94c
 8005e88:	2000083c 	.word	0x2000083c
 8005e8c:	00000000 	.word	0x00000000

08005e90 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8005e90:	b510      	push	{r4, lr}
  chMtxLock(&m1);
 8005e92:	4c06      	ldr	r4, [pc, #24]	; (8005eac <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
 8005e94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e98:	f7fc fec2 	bl	8002c20 <chThdSleep>
  chMtxLock(&m1);
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7fd fb57 	bl	8003550 <chMtxLock>
  chMtxUnlock(&m1);
 8005ea2:	4620      	mov	r0, r4
}
 8005ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8005ea8:	f7fe bf82 	b.w	8004db0 <chMtxUnlock>
 8005eac:	2000082c 	.word	0x2000082c

08005eb0 <thread1.lto_priv.2>:
static THD_FUNCTION(thread1, p) {
 8005eb0:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m1);
 8005eb2:	4d06      	ldr	r5, [pc, #24]	; (8005ecc <thread1.lto_priv.2+0x1c>)
static THD_FUNCTION(thread1, p) {
 8005eb4:	4604      	mov	r4, r0
  chMtxLock(&m1);
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f7fd fb4a 	bl	8003550 <chMtxLock>
  test_emit_token(*(char *)p);
 8005ebc:	7820      	ldrb	r0, [r4, #0]
 8005ebe:	f7fa ffc7 	bl	8000e50 <test_emit_token>
  chMtxUnlock(&m1);
 8005ec2:	4628      	mov	r0, r5
}
 8005ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 8005ec8:	f7fe bf72 	b.w	8004db0 <chMtxUnlock>
 8005ecc:	2000082c 	.word	0x2000082c

08005ed0 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8005ed0:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8005ed2:	4d14      	ldr	r5, [pc, #80]	; (8005f24 <chFactoryReleaseSemaphore+0x54>)
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8005ed4:	4604      	mov	r4, r0
  F_LOCK();
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f7fd fb3a 	bl	8003550 <chMtxLock>
  dep->refs--;
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005ee2:	b99b      	cbnz	r3, 8005f0c <chFactoryReleaseSemaphore+0x3c>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005ee4:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8005ee8:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 8005eea:	4619      	mov	r1, r3
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d011      	beq.n	8005f16 <chFactoryReleaseSemaphore+0x46>
    if (prev->next == element) {
 8005ef2:	429c      	cmp	r4, r3
 8005ef4:	d1f9      	bne.n	8005eea <chFactoryReleaseSemaphore+0x1a>
      prev->next = element->next;
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	600b      	str	r3, [r1, #0]
 8005efa:	2320      	movs	r3, #32
 8005efc:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8005f00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005f02:	6023      	str	r3, [r4, #0]
 8005f04:	2300      	movs	r3, #0
  mp->next = php;
 8005f06:	62ec      	str	r4, [r5, #44]	; 0x2c
 8005f08:	f383 8811 	msr	BASEPRI, r3
}
 8005f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8005f10:	4804      	ldr	r0, [pc, #16]	; (8005f24 <chFactoryReleaseSemaphore+0x54>)
 8005f12:	f7fe bf4d 	b.w	8004db0 <chMtxUnlock>
 8005f16:	2320      	movs	r3, #32
 8005f18:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	deff      	udf	#255	; 0xff
 8005f24:	200014a4 	.word	0x200014a4
	...

08005f30 <oslib_test_009_003_execute>:
      chFactoryReleaseSemaphore(dsp);
    }
  }
}

static void oslib_test_009_003_execute(void) {
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_semaphore_t *dsp;

  /* [9.3.1] Retrieving a dynamic semaphore by name, must not exist.*/
  test_set_step(1);
 8005f32:	4c43      	ldr	r4, [pc, #268]	; (8006040 <oslib_test_009_003_execute+0x110>)
 8005f34:	2501      	movs	r5, #1
 8005f36:	6025      	str	r5, [r4, #0]
  {
    dsp = chFactoryFindSemaphore("mysem");
 8005f38:	f7ff f9fa 	bl	8005330 <chFactoryFindSemaphore.constprop.0>
    test_assert(dsp == NULL, "found");
 8005f3c:	fab0 f080 	clz	r0, r0
 8005f40:	4940      	ldr	r1, [pc, #256]	; (8006044 <oslib_test_009_003_execute+0x114>)
 8005f42:	0940      	lsrs	r0, r0, #5
 8005f44:	f7fa fedc 	bl	8000d00 <_test_assert>
 8005f48:	b100      	cbz	r0, 8005f4c <oslib_test_009_003_execute+0x1c>
  {
    dsp = chFactoryFindSemaphore("mysem");
    test_assert(dsp == NULL, "found");
  }
  test_end_step(6);
}
 8005f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	6023      	str	r3, [r4, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 8005f50:	f7ff f9ce 	bl	80052f0 <chFactoryCreateSemaphore.constprop.0>
 8005f54:	4606      	mov	r6, r0
    test_assert(dsp != NULL, "cannot create");
 8005f56:	3800      	subs	r0, #0
 8005f58:	bf18      	it	ne
 8005f5a:	2001      	movne	r0, #1
 8005f5c:	493a      	ldr	r1, [pc, #232]	; (8006048 <oslib_test_009_003_execute+0x118>)
 8005f5e:	f7fa fecf 	bl	8000d00 <_test_assert>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d1f1      	bne.n	8005f4a <oslib_test_009_003_execute+0x1a>
  test_set_step(3);
 8005f66:	2303      	movs	r3, #3
 8005f68:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 8005f6a:	f7ff f9c1 	bl	80052f0 <chFactoryCreateSemaphore.constprop.0>
    test_assert(dsp1 == NULL, "can create");
 8005f6e:	fab0 f080 	clz	r0, r0
 8005f72:	4936      	ldr	r1, [pc, #216]	; (800604c <oslib_test_009_003_execute+0x11c>)
 8005f74:	0940      	lsrs	r0, r0, #5
 8005f76:	f7fa fec3 	bl	8000d00 <_test_assert>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d1e5      	bne.n	8005f4a <oslib_test_009_003_execute+0x1a>
  test_set_step(4);
 8005f7e:	2304      	movs	r3, #4
 8005f80:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 8005f82:	f7ff f9d5 	bl	8005330 <chFactoryFindSemaphore.constprop.0>
 8005f86:	4607      	mov	r7, r0
    test_assert(dsp1 != NULL, "not found");
 8005f88:	3800      	subs	r0, #0
 8005f8a:	bf18      	it	ne
 8005f8c:	2001      	movne	r0, #1
 8005f8e:	4930      	ldr	r1, [pc, #192]	; (8006050 <oslib_test_009_003_execute+0x120>)
 8005f90:	f7fa feb6 	bl	8000d00 <_test_assert>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d1d8      	bne.n	8005f4a <oslib_test_009_003_execute+0x1a>
    test_assert(dsp == dsp1, "object reference mismatch");
 8005f98:	1bf0      	subs	r0, r6, r7
 8005f9a:	fab0 f080 	clz	r0, r0
 8005f9e:	492d      	ldr	r1, [pc, #180]	; (8006054 <oslib_test_009_003_execute+0x124>)
 8005fa0:	0940      	lsrs	r0, r0, #5
 8005fa2:	f7fa fead 	bl	8000d00 <_test_assert>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d1cf      	bne.n	8005f4a <oslib_test_009_003_execute+0x1a>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4929      	ldr	r1, [pc, #164]	; (8006054 <oslib_test_009_003_execute+0x124>)
 8005fae:	f1a0 0002 	sub.w	r0, r0, #2
 8005fb2:	fab0 f080 	clz	r0, r0
 8005fb6:	0940      	lsrs	r0, r0, #5
 8005fb8:	f7fa fea2 	bl	8000d00 <_test_assert>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d1c4      	bne.n	8005f4a <oslib_test_009_003_execute+0x1a>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 8005fc0:	687b      	ldr	r3, [r7, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 8005fc2:	4924      	ldr	r1, [pc, #144]	; (8006054 <oslib_test_009_003_execute+0x124>)
 8005fc4:	442b      	add	r3, r5
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	607b      	str	r3, [r7, #4]
 8005fca:	f7fa fe99 	bl	8000d00 <_test_assert>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d1bb      	bne.n	8005f4a <oslib_test_009_003_execute+0x1a>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	491f      	ldr	r1, [pc, #124]	; (8006054 <oslib_test_009_003_execute+0x124>)
 8005fd6:	f1a0 0003 	sub.w	r0, r0, #3
 8005fda:	fab0 f080 	clz	r0, r0
 8005fde:	0940      	lsrs	r0, r0, #5
 8005fe0:	f7fa fe8e 	bl	8000d00 <_test_assert>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d1b0      	bne.n	8005f4a <oslib_test_009_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp2);
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f7ff ff71 	bl	8005ed0 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	4919      	ldr	r1, [pc, #100]	; (8006058 <oslib_test_009_003_execute+0x128>)
 8005ff2:	f1a0 0002 	sub.w	r0, r0, #2
 8005ff6:	fab0 f080 	clz	r0, r0
 8005ffa:	0940      	lsrs	r0, r0, #5
 8005ffc:	f7fa fe80 	bl	8000d00 <_test_assert>
 8006000:	2800      	cmp	r0, #0
 8006002:	d1a2      	bne.n	8005f4a <oslib_test_009_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp1);
 8006004:	4638      	mov	r0, r7
 8006006:	f7ff ff63 	bl	8005ed0 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 800600a:	6870      	ldr	r0, [r6, #4]
 800600c:	4912      	ldr	r1, [pc, #72]	; (8006058 <oslib_test_009_003_execute+0x128>)
 800600e:	1b40      	subs	r0, r0, r5
 8006010:	fab0 f080 	clz	r0, r0
 8006014:	0940      	lsrs	r0, r0, #5
 8006016:	f7fa fe73 	bl	8000d00 <_test_assert>
 800601a:	2800      	cmp	r0, #0
 800601c:	d195      	bne.n	8005f4a <oslib_test_009_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp);
 800601e:	4630      	mov	r0, r6
  test_set_step(5);
 8006020:	2305      	movs	r3, #5
 8006022:	6023      	str	r3, [r4, #0]
    chFactoryReleaseSemaphore(dsp);
 8006024:	f7ff ff54 	bl	8005ed0 <chFactoryReleaseSemaphore>
  test_set_step(6);
 8006028:	2306      	movs	r3, #6
 800602a:	6023      	str	r3, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 800602c:	f7ff f980 	bl	8005330 <chFactoryFindSemaphore.constprop.0>
    test_assert(dsp == NULL, "found");
 8006030:	fab0 f080 	clz	r0, r0
}
 8006034:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
 8006038:	4902      	ldr	r1, [pc, #8]	; (8006044 <oslib_test_009_003_execute+0x114>)
 800603a:	0940      	lsrs	r0, r0, #5
 800603c:	f7fa be60 	b.w	8000d00 <_test_assert>
 8006040:	20001f1c 	.word	0x20001f1c
 8006044:	0800a98c 	.word	0x0800a98c
 8006048:	0800a96c 	.word	0x0800a96c
 800604c:	0800a97c 	.word	0x0800a97c
 8006050:	0800a988 	.word	0x0800a988
 8006054:	0800a994 	.word	0x0800a994
 8006058:	0800a9b0 	.word	0x0800a9b0
 800605c:	00000000 	.word	0x00000000

08006060 <oslib_test_009_003_teardown>:
static void oslib_test_009_003_teardown(void) {
 8006060:	b510      	push	{r4, lr}
  dsp = chFactoryFindSemaphore("mysem");
 8006062:	f7ff f965 	bl	8005330 <chFactoryFindSemaphore.constprop.0>
  if (dsp != NULL) {
 8006066:	b140      	cbz	r0, 800607a <oslib_test_009_003_teardown+0x1a>
    while (dsp->element.refs > 0U) {
 8006068:	6843      	ldr	r3, [r0, #4]
 800606a:	4604      	mov	r4, r0
 800606c:	b12b      	cbz	r3, 800607a <oslib_test_009_003_teardown+0x1a>
      chFactoryReleaseSemaphore(dsp);
 800606e:	4620      	mov	r0, r4
 8006070:	f7ff ff2e 	bl	8005ed0 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 8006074:	6863      	ldr	r3, [r4, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f9      	bne.n	800606e <oslib_test_009_003_teardown+0xe>
}
 800607a:	bd10      	pop	{r4, pc}
 800607c:	0000      	movs	r0, r0
	...

08006080 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop) {
 8006080:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8006082:	4d14      	ldr	r5, [pc, #80]	; (80060d4 <chFactoryReleaseObject+0x54>)
void chFactoryReleaseObject(registered_object_t *rop) {
 8006084:	4604      	mov	r4, r0
  F_LOCK();
 8006086:	4628      	mov	r0, r5
 8006088:	f7fd fa62 	bl	8003550 <chMtxLock>
  dep->refs--;
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	3b01      	subs	r3, #1
 8006090:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006092:	b99b      	cbnz	r3, 80060bc <chFactoryReleaseObject+0x3c>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8006094:	f105 0210 	add.w	r2, r5, #16
 8006098:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 800609a:	4619      	mov	r1, r3
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4293      	cmp	r3, r2
 80060a0:	d011      	beq.n	80060c6 <chFactoryReleaseObject+0x46>
    if (prev->next == element) {
 80060a2:	429c      	cmp	r4, r3
 80060a4:	d1f9      	bne.n	800609a <chFactoryReleaseObject+0x1a>
      prev->next = element->next;
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	600b      	str	r3, [r1, #0]
 80060aa:	2320      	movs	r3, #32
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	696b      	ldr	r3, [r5, #20]
 80060b2:	6023      	str	r3, [r4, #0]
 80060b4:	2300      	movs	r3, #0
  mp->next = php;
 80060b6:	616c      	str	r4, [r5, #20]
 80060b8:	f383 8811 	msr	BASEPRI, r3
}
 80060bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 80060c0:	4804      	ldr	r0, [pc, #16]	; (80060d4 <chFactoryReleaseObject+0x54>)
 80060c2:	f7fe be75 	b.w	8004db0 <chMtxUnlock>
 80060c6:	2320      	movs	r3, #32
 80060c8:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 80060cc:	2300      	movs	r3, #0
 80060ce:	696a      	ldr	r2, [r5, #20]
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	deff      	udf	#255	; 0xff
 80060d4:	200014a4 	.word	0x200014a4
	...

080060e0 <oslib_test_009_001_execute>:
static void oslib_test_009_001_execute(void) {
 80060e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80060e4:	4c50      	ldr	r4, [pc, #320]	; (8006228 <oslib_test_009_001_execute+0x148>)
 80060e6:	2501      	movs	r5, #1
 80060e8:	6025      	str	r5, [r4, #0]
    rop = chFactoryFindObject("myobj");
 80060ea:	f7ff f8b1 	bl	8005250 <chFactoryFindObject.constprop.0>
    test_assert(rop == NULL, "found");
 80060ee:	fab0 f080 	clz	r0, r0
 80060f2:	494e      	ldr	r1, [pc, #312]	; (800622c <oslib_test_009_001_execute+0x14c>)
 80060f4:	0940      	lsrs	r0, r0, #5
 80060f6:	f7fa fe03 	bl	8000d00 <_test_assert>
 80060fa:	b108      	cbz	r0, 8006100 <oslib_test_009_001_execute+0x20>
}
 80060fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 8006100:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006102:	484b      	ldr	r0, [pc, #300]	; (8006230 <oslib_test_009_001_execute+0x150>)
  test_set_step(2);
 8006104:	6023      	str	r3, [r4, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006106:	f7ff f88b 	bl	8005220 <chFactoryRegisterObject.constprop.0>
 800610a:	4606      	mov	r6, r0
    test_assert(rop != NULL, "cannot register");
 800610c:	3800      	subs	r0, #0
 800610e:	bf18      	it	ne
 8006110:	2001      	movne	r0, #1
 8006112:	4948      	ldr	r1, [pc, #288]	; (8006234 <oslib_test_009_001_execute+0x154>)
 8006114:	f7fa fdf4 	bl	8000d00 <_test_assert>
 8006118:	2800      	cmp	r0, #0
 800611a:	d1ef      	bne.n	80060fc <oslib_test_009_001_execute+0x1c>
  test_set_step(3);
 800611c:	2303      	movs	r3, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800611e:	4846      	ldr	r0, [pc, #280]	; (8006238 <oslib_test_009_001_execute+0x158>)
  test_set_step(3);
 8006120:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006122:	f7ff f87d 	bl	8005220 <chFactoryRegisterObject.constprop.0>
    test_assert(rop1 == NULL, "can register");
 8006126:	fab0 f080 	clz	r0, r0
 800612a:	4944      	ldr	r1, [pc, #272]	; (800623c <oslib_test_009_001_execute+0x15c>)
 800612c:	0940      	lsrs	r0, r0, #5
 800612e:	f7fa fde7 	bl	8000d00 <_test_assert>
 8006132:	2800      	cmp	r0, #0
 8006134:	d1e2      	bne.n	80060fc <oslib_test_009_001_execute+0x1c>
  test_set_step(4);
 8006136:	2304      	movs	r3, #4
 8006138:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryFindObject("myobj");
 800613a:	f7ff f889 	bl	8005250 <chFactoryFindObject.constprop.0>
 800613e:	4607      	mov	r7, r0
    test_assert(rop1 != NULL, "not found");
 8006140:	3800      	subs	r0, #0
 8006142:	bf18      	it	ne
 8006144:	2001      	movne	r0, #1
 8006146:	493e      	ldr	r1, [pc, #248]	; (8006240 <oslib_test_009_001_execute+0x160>)
 8006148:	f7fa fdda 	bl	8000d00 <_test_assert>
 800614c:	2800      	cmp	r0, #0
 800614e:	d1d5      	bne.n	80060fc <oslib_test_009_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	493c      	ldr	r1, [pc, #240]	; (8006244 <oslib_test_009_001_execute+0x164>)
 8006154:	6818      	ldr	r0, [r3, #0]
 8006156:	f245 58aa 	movw	r8, #21930	; 0x55aa
 800615a:	eba0 0008 	sub.w	r0, r0, r8
 800615e:	fab0 f080 	clz	r0, r0
 8006162:	0940      	lsrs	r0, r0, #5
 8006164:	f7fa fdcc 	bl	8000d00 <_test_assert>
 8006168:	2800      	cmp	r0, #0
 800616a:	d1c7      	bne.n	80060fc <oslib_test_009_001_execute+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
 800616c:	1bf0      	subs	r0, r6, r7
 800616e:	fab0 f080 	clz	r0, r0
 8006172:	4935      	ldr	r1, [pc, #212]	; (8006248 <oslib_test_009_001_execute+0x168>)
 8006174:	0940      	lsrs	r0, r0, #5
 8006176:	f7fa fdc3 	bl	8000d00 <_test_assert>
 800617a:	2800      	cmp	r0, #0
 800617c:	d1be      	bne.n	80060fc <oslib_test_009_001_execute+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4931      	ldr	r1, [pc, #196]	; (8006248 <oslib_test_009_001_execute+0x168>)
 8006182:	f1a0 0002 	sub.w	r0, r0, #2
 8006186:	fab0 f080 	clz	r0, r0
 800618a:	0940      	lsrs	r0, r0, #5
 800618c:	f7fa fdb8 	bl	8000d00 <_test_assert>
 8006190:	2800      	cmp	r0, #0
 8006192:	d1b3      	bne.n	80060fc <oslib_test_009_001_execute+0x1c>
 8006194:	687b      	ldr	r3, [r7, #4]
    test_assert(rop1 == rop2, "object reference mismatch");
 8006196:	492c      	ldr	r1, [pc, #176]	; (8006248 <oslib_test_009_001_execute+0x168>)
 8006198:	442b      	add	r3, r5
 800619a:	4628      	mov	r0, r5
 800619c:	607b      	str	r3, [r7, #4]
 800619e:	f7fa fdaf 	bl	8000d00 <_test_assert>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d1aa      	bne.n	80060fc <oslib_test_009_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4926      	ldr	r1, [pc, #152]	; (8006244 <oslib_test_009_001_execute+0x164>)
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	eba0 0008 	sub.w	r0, r0, r8
 80061b0:	fab0 f080 	clz	r0, r0
 80061b4:	0940      	lsrs	r0, r0, #5
 80061b6:	f7fa fda3 	bl	8000d00 <_test_assert>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d19e      	bne.n	80060fc <oslib_test_009_001_execute+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	4921      	ldr	r1, [pc, #132]	; (8006248 <oslib_test_009_001_execute+0x168>)
 80061c2:	f1a0 0003 	sub.w	r0, r0, #3
 80061c6:	fab0 f080 	clz	r0, r0
 80061ca:	0940      	lsrs	r0, r0, #5
 80061cc:	f7fa fd98 	bl	8000d00 <_test_assert>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d193      	bne.n	80060fc <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop2);
 80061d4:	4638      	mov	r0, r7
 80061d6:	f7ff ff53 	bl	8006080 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	491b      	ldr	r1, [pc, #108]	; (800624c <oslib_test_009_001_execute+0x16c>)
 80061de:	1e82      	subs	r2, r0, #2
 80061e0:	4250      	negs	r0, r2
 80061e2:	4150      	adcs	r0, r2
 80061e4:	f7fa fd8c 	bl	8000d00 <_test_assert>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d187      	bne.n	80060fc <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop1);
 80061ec:	4638      	mov	r0, r7
 80061ee:	f7ff ff47 	bl	8006080 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 80061f2:	6870      	ldr	r0, [r6, #4]
 80061f4:	4915      	ldr	r1, [pc, #84]	; (800624c <oslib_test_009_001_execute+0x16c>)
 80061f6:	1b43      	subs	r3, r0, r5
 80061f8:	4258      	negs	r0, r3
 80061fa:	4158      	adcs	r0, r3
 80061fc:	f7fa fd80 	bl	8000d00 <_test_assert>
 8006200:	2800      	cmp	r0, #0
 8006202:	f47f af7b 	bne.w	80060fc <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop);
 8006206:	4630      	mov	r0, r6
  test_set_step(5);
 8006208:	2305      	movs	r3, #5
 800620a:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObject(rop);
 800620c:	f7ff ff38 	bl	8006080 <chFactoryReleaseObject>
  test_set_step(6);
 8006210:	2306      	movs	r3, #6
 8006212:	6023      	str	r3, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8006214:	f7ff f81c 	bl	8005250 <chFactoryFindObject.constprop.0>
    test_assert(rop == NULL, "found");
 8006218:	fab0 f080 	clz	r0, r0
}
 800621c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
 8006220:	4902      	ldr	r1, [pc, #8]	; (800622c <oslib_test_009_001_execute+0x14c>)
 8006222:	0940      	lsrs	r0, r0, #5
 8006224:	f7fa bd6c 	b.w	8000d00 <_test_assert>
 8006228:	20001f1c 	.word	0x20001f1c
 800622c:	0800a98c 	.word	0x0800a98c
 8006230:	20000884 	.word	0x20000884
 8006234:	0800a9c4 	.word	0x0800a9c4
 8006238:	20000888 	.word	0x20000888
 800623c:	0800a9d4 	.word	0x0800a9d4
 8006240:	0800a988 	.word	0x0800a988
 8006244:	0800a9e4 	.word	0x0800a9e4
 8006248:	0800a994 	.word	0x0800a994
 800624c:	0800a9b0 	.word	0x0800a9b0

08006250 <oslib_test_009_001_teardown>:
static void oslib_test_009_001_teardown(void) {
 8006250:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
 8006252:	f7fe fffd 	bl	8005250 <chFactoryFindObject.constprop.0>
  if (rop != NULL) {
 8006256:	b140      	cbz	r0, 800626a <oslib_test_009_001_teardown+0x1a>
    while (rop->element.refs > 0U) {
 8006258:	6843      	ldr	r3, [r0, #4]
 800625a:	4604      	mov	r4, r0
 800625c:	b12b      	cbz	r3, 800626a <oslib_test_009_001_teardown+0x1a>
      chFactoryReleaseObject(rop);
 800625e:	4620      	mov	r0, r4
 8006260:	f7ff ff0e 	bl	8006080 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 8006264:	6863      	ldr	r3, [r4, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f9      	bne.n	800625e <oslib_test_009_001_teardown+0xe>
}
 800626a:	bd10      	pop	{r4, pc}
 800626c:	0000      	movs	r0, r0
	...

08006270 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8006270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8006274:	4c17      	ldr	r4, [pc, #92]	; (80062d4 <chHeapStatus+0x64>)
 8006276:	2800      	cmp	r0, #0
 8006278:	bf18      	it	ne
 800627a:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 800627c:	f104 090c 	add.w	r9, r4, #12
 8006280:	4648      	mov	r0, r9
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8006282:	468a      	mov	sl, r1
 8006284:	4690      	mov	r8, r2
  H_LOCK(heapp);
 8006286:	f7fd f963 	bl	8003550 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 800628a:	6863      	ldr	r3, [r4, #4]
 800628c:	b1f3      	cbz	r3, 80062cc <chHeapStatus+0x5c>
  lpages = 0U;
 800628e:	2500      	movs	r5, #0
  tpages = 0U;
 8006290:	462e      	mov	r6, r5
  n = 0U;
 8006292:	462f      	mov	r7, r5
  while (H_NEXT(qp) != NULL) {
 8006294:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006298:	42a5      	cmp	r5, r4
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 800629a:	f107 0701 	add.w	r7, r7, #1
    tpages += pages;
 800629e:	4426      	add	r6, r4
    if (pages > lpages) {
 80062a0:	bf38      	it	cc
 80062a2:	4625      	movcc	r5, r4
  while (H_NEXT(qp) != NULL) {
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f5      	bne.n	8006294 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 80062a8:	f1ba 0f00 	cmp.w	sl, #0
 80062ac:	d002      	beq.n	80062b4 <chHeapStatus+0x44>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 80062ae:	00f6      	lsls	r6, r6, #3
 80062b0:	f8ca 6000 	str.w	r6, [sl]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 80062b4:	f1b8 0f00 	cmp.w	r8, #0
 80062b8:	d002      	beq.n	80062c0 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 80062ba:	00ed      	lsls	r5, r5, #3
 80062bc:	f8c8 5000 	str.w	r5, [r8]
  }
  H_UNLOCK(heapp);
 80062c0:	4648      	mov	r0, r9
 80062c2:	f7fe fd75 	bl	8004db0 <chMtxUnlock>

  return n;
}
 80062c6:	4638      	mov	r0, r7
 80062c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  lpages = 0U;
 80062cc:	461d      	mov	r5, r3
  tpages = 0U;
 80062ce:	461e      	mov	r6, r3
  n = 0U;
 80062d0:	461f      	mov	r7, r3
 80062d2:	e7e9      	b.n	80062a8 <chHeapStatus+0x38>
 80062d4:	200015d0 	.word	0x200015d0
	...

080062e0 <chHeapFree>:
void chHeapFree(void *p) {
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  heapp = H_HEAP(hp);
 80062e2:	e950 5302 	ldrd	r5, r3, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80062e6:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80062e8:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 80062ea:	f105 070c 	add.w	r7, r5, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80062ee:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 80062f2:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 80062f4:	f1a0 0408 	sub.w	r4, r0, #8
  qp = &heapp->header;
 80062f8:	3504      	adds	r5, #4
  H_LOCK(heapp);
 80062fa:	4638      	mov	r0, r7
 80062fc:	f7fd f928 	bl	8003550 <chMtxLock>
  qp = &heapp->header;
 8006300:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
 8006302:	42ab      	cmp	r3, r5
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8006304:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8006306:	d001      	beq.n	800630c <chHeapFree+0x2c>
 8006308:	429c      	cmp	r4, r3
 800630a:	d902      	bls.n	8006312 <chHeapFree+0x32>
 800630c:	b11a      	cbz	r2, 8006316 <chHeapFree+0x36>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800630e:	4294      	cmp	r4, r2
 8006310:	d301      	bcc.n	8006316 <chHeapFree+0x36>
    qp = H_NEXT(qp);
 8006312:	4613      	mov	r3, r2
 8006314:	e7f5      	b.n	8006302 <chHeapFree+0x22>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8006316:	f856 1c04 	ldr.w	r1, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 800631a:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 800631e:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8006320:	1c4a      	adds	r2, r1, #1
 8006322:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8006326:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800632a:	4281      	cmp	r1, r0
 800632c:	d00a      	beq.n	8006344 <chHeapFree+0x64>
      if ((H_LIMIT(qp) == hp)) {
 800632e:	6859      	ldr	r1, [r3, #4]
 8006330:	1c4a      	adds	r2, r1, #1
 8006332:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006336:	4294      	cmp	r4, r2
 8006338:	d011      	beq.n	800635e <chHeapFree+0x7e>
  H_UNLOCK(heapp);
 800633a:	4638      	mov	r0, r7
}
 800633c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8006340:	f7fe bd36 	b.w	8004db0 <chMtxUnlock>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8006344:	e9d1 1000 	ldrd	r1, r0, [r1]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8006348:	4402      	add	r2, r0
 800634a:	f846 2c04 	str.w	r2, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800634e:	f846 1c08 	str.w	r1, [r6, #-8]
      if ((H_LIMIT(qp) == hp)) {
 8006352:	6859      	ldr	r1, [r3, #4]
 8006354:	1c4a      	adds	r2, r1, #1
 8006356:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800635a:	4294      	cmp	r4, r2
 800635c:	d1ed      	bne.n	800633a <chHeapFree+0x5a>
        H_NEXT(qp) = H_NEXT(hp);
 800635e:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8006362:	3201      	adds	r2, #1
 8006364:	4411      	add	r1, r2
        H_NEXT(qp) = H_NEXT(hp);
 8006366:	6018      	str	r0, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8006368:	6059      	str	r1, [r3, #4]
  H_UNLOCK(heapp);
 800636a:	4638      	mov	r0, r7
}
 800636c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8006370:	f7fe bd1e 	b.w	8004db0 <chMtxUnlock>
	...

08006380 <oslib_test_008_002_execute>:
 *   is freed using chHeapFree(), must not fail.
 * - [8.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_008_002_execute(void) {
 8006380:	b570      	push	{r4, r5, r6, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [8.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8006382:	4e15      	ldr	r6, [pc, #84]	; (80063d8 <oslib_test_008_002_execute+0x58>)
static void oslib_test_008_002_execute(void) {
 8006384:	b082      	sub	sp, #8
  test_set_step(1);
 8006386:	2301      	movs	r3, #1
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8006388:	466a      	mov	r2, sp
 800638a:	a901      	add	r1, sp, #4
 800638c:	2000      	movs	r0, #0
  test_set_step(1);
 800638e:	6033      	str	r3, [r6, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8006390:	f7ff ff6e 	bl	8006270 <chHeapStatus>
 8006394:	2110      	movs	r1, #16
 8006396:	4811      	ldr	r0, [pc, #68]	; (80063dc <oslib_test_008_002_execute+0x5c>)
 8006398:	f7fe fd3a 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 800639c:	4605      	mov	r5, r0
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 800639e:	3800      	subs	r0, #0
 80063a0:	bf18      	it	ne
 80063a2:	2001      	movne	r0, #1
 80063a4:	490e      	ldr	r1, [pc, #56]	; (80063e0 <oslib_test_008_002_execute+0x60>)
 80063a6:	f7fa fcab 	bl	8000d00 <_test_assert>
 80063aa:	b108      	cbz	r0, 80063b0 <oslib_test_008_002_execute+0x30>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
  test_end_step(2);
}
 80063ac:	b002      	add	sp, #8
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
    chHeapFree(p1);
 80063b0:	4604      	mov	r4, r0
 80063b2:	4628      	mov	r0, r5
 80063b4:	f7ff ff94 	bl	80062e0 <chHeapFree>
  test_set_step(2);
 80063b8:	2302      	movs	r3, #2
 80063ba:	4620      	mov	r0, r4
 80063bc:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80063c0:	6033      	str	r3, [r6, #0]
 80063c2:	f7fe fd25 	bl	8004e10 <chHeapAllocAligned.constprop.0>
    test_assert(p1 == NULL, "allocation not failed");
 80063c6:	fab0 f080 	clz	r0, r0
 80063ca:	4906      	ldr	r1, [pc, #24]	; (80063e4 <oslib_test_008_002_execute+0x64>)
 80063cc:	0940      	lsrs	r0, r0, #5
 80063ce:	f7fa fc97 	bl	8000d00 <_test_assert>
}
 80063d2:	b002      	add	sp, #8
 80063d4:	bd70      	pop	{r4, r5, r6, pc}
 80063d6:	bf00      	nop
 80063d8:	20001f1c 	.word	0x20001f1c
 80063dc:	20001e7c 	.word	0x20001e7c
 80063e0:	0800a9f4 	.word	0x0800a9f4
 80063e4:	0800aa08 	.word	0x0800aa08
	...

080063f0 <oslib_test_008_001_execute>:
static void oslib_test_008_001_execute(void) {
 80063f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80063f4:	4cbe      	ldr	r4, [pc, #760]	; (80066f0 <oslib_test_008_001_execute+0x300>)
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80063f6:	48bf      	ldr	r0, [pc, #764]	; (80066f4 <oslib_test_008_001_execute+0x304>)
static void oslib_test_008_001_execute(void) {
 80063f8:	b084      	sub	sp, #16
  test_set_step(1);
 80063fa:	2301      	movs	r3, #1
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80063fc:	4669      	mov	r1, sp
 80063fe:	2200      	movs	r2, #0
  test_set_step(1);
 8006400:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8006402:	f7ff ff35 	bl	8006270 <chHeapStatus>
 8006406:	f1a0 0001 	sub.w	r0, r0, #1
 800640a:	fab0 f080 	clz	r0, r0
 800640e:	49ba      	ldr	r1, [pc, #744]	; (80066f8 <oslib_test_008_001_execute+0x308>)
 8006410:	0940      	lsrs	r0, r0, #5
 8006412:	f7fa fc75 	bl	8000d00 <_test_assert>
 8006416:	b110      	cbz	r0, 800641e <oslib_test_008_001_execute+0x2e>
}
 8006418:	b004      	add	sp, #16
 800641a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 800641e:	2302      	movs	r3, #2
 8006420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006424:	48b3      	ldr	r0, [pc, #716]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	f7fe fcf2 	bl	8004e10 <chHeapAllocAligned.constprop.0>
    test_assert(p1 == NULL, "allocation not failed");
 800642c:	fab0 f080 	clz	r0, r0
 8006430:	49b2      	ldr	r1, [pc, #712]	; (80066fc <oslib_test_008_001_execute+0x30c>)
 8006432:	0940      	lsrs	r0, r0, #5
 8006434:	f7fa fc64 	bl	8000d00 <_test_assert>
 8006438:	2800      	cmp	r0, #0
 800643a:	d1ed      	bne.n	8006418 <oslib_test_008_001_execute+0x28>
  test_set_step(3);
 800643c:	2303      	movs	r3, #3
 800643e:	2110      	movs	r1, #16
 8006440:	48ac      	ldr	r0, [pc, #688]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 8006442:	6023      	str	r3, [r4, #0]
 8006444:	f7fe fce4 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 8006448:	4605      	mov	r5, r0
    test_assert(p1 != NULL, "allocation failed");
 800644a:	3800      	subs	r0, #0
 800644c:	bf18      	it	ne
 800644e:	2001      	movne	r0, #1
 8006450:	49ab      	ldr	r1, [pc, #684]	; (8006700 <oslib_test_008_001_execute+0x310>)
 8006452:	f7fa fc55 	bl	8000d00 <_test_assert>
 8006456:	2800      	cmp	r0, #0
 8006458:	d1de      	bne.n	8006418 <oslib_test_008_001_execute+0x28>
    chHeapFree(p1);
 800645a:	4628      	mov	r0, r5
 800645c:	f7ff ff40 	bl	80062e0 <chHeapFree>
  test_set_step(4);
 8006460:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8006462:	a903      	add	r1, sp, #12
 8006464:	48a3      	ldr	r0, [pc, #652]	; (80066f4 <oslib_test_008_001_execute+0x304>)
  test_set_step(4);
 8006466:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8006468:	aa02      	add	r2, sp, #8
 800646a:	f7ff ff01 	bl	8006270 <chHeapStatus>
 800646e:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 8006470:	f1a0 0001 	sub.w	r0, r0, #1
 8006474:	fab0 f080 	clz	r0, r0
 8006478:	49a2      	ldr	r1, [pc, #648]	; (8006704 <oslib_test_008_001_execute+0x314>)
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800647a:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 800647c:	0940      	lsrs	r0, r0, #5
 800647e:	f7fa fc3f 	bl	8000d00 <_test_assert>
 8006482:	2800      	cmp	r0, #0
 8006484:	d1c8      	bne.n	8006418 <oslib_test_008_001_execute+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 8006486:	9803      	ldr	r0, [sp, #12]
 8006488:	499f      	ldr	r1, [pc, #636]	; (8006708 <oslib_test_008_001_execute+0x318>)
 800648a:	280f      	cmp	r0, #15
 800648c:	bf94      	ite	ls
 800648e:	2000      	movls	r0, #0
 8006490:	2001      	movhi	r0, #1
 8006492:	f7fa fc35 	bl	8000d00 <_test_assert>
 8006496:	2800      	cmp	r0, #0
 8006498:	d1be      	bne.n	8006418 <oslib_test_008_001_execute+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 800649a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 800649e:	1ac0      	subs	r0, r0, r3
 80064a0:	fab0 f080 	clz	r0, r0
 80064a4:	4998      	ldr	r1, [pc, #608]	; (8006708 <oslib_test_008_001_execute+0x318>)
 80064a6:	0940      	lsrs	r0, r0, #5
 80064a8:	f7fa fc2a 	bl	8000d00 <_test_assert>
 80064ac:	4605      	mov	r5, r0
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d1b2      	bne.n	8006418 <oslib_test_008_001_execute+0x28>
  test_set_step(5);
 80064b2:	2305      	movs	r3, #5
 80064b4:	2110      	movs	r1, #16
 80064b6:	488f      	ldr	r0, [pc, #572]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	f7fe fca9 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 80064be:	2110      	movs	r1, #16
 80064c0:	4680      	mov	r8, r0
 80064c2:	488c      	ldr	r0, [pc, #560]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 80064c4:	f7fe fca4 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 80064c8:	2110      	movs	r1, #16
 80064ca:	4607      	mov	r7, r0
 80064cc:	4889      	ldr	r0, [pc, #548]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 80064ce:	f7fe fc9f 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 80064d2:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 80064d4:	4640      	mov	r0, r8
 80064d6:	f7ff ff03 	bl	80062e0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 80064da:	4638      	mov	r0, r7
 80064dc:	f7ff ff00 	bl	80062e0 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 80064e0:	4630      	mov	r0, r6
 80064e2:	f7ff fefd 	bl	80062e0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80064e6:	462a      	mov	r2, r5
 80064e8:	a901      	add	r1, sp, #4
 80064ea:	4882      	ldr	r0, [pc, #520]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 80064ec:	f7ff fec0 	bl	8006270 <chHeapStatus>
 80064f0:	f1a0 0001 	sub.w	r0, r0, #1
 80064f4:	fab0 f080 	clz	r0, r0
 80064f8:	497f      	ldr	r1, [pc, #508]	; (80066f8 <oslib_test_008_001_execute+0x308>)
 80064fa:	0940      	lsrs	r0, r0, #5
 80064fc:	f7fa fc00 	bl	8000d00 <_test_assert>
 8006500:	4605      	mov	r5, r0
 8006502:	2800      	cmp	r0, #0
 8006504:	d188      	bne.n	8006418 <oslib_test_008_001_execute+0x28>
  test_set_step(6);
 8006506:	2306      	movs	r3, #6
 8006508:	2110      	movs	r1, #16
 800650a:	487a      	ldr	r0, [pc, #488]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	f7fe fc7f 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 8006512:	2110      	movs	r1, #16
 8006514:	4606      	mov	r6, r0
 8006516:	4877      	ldr	r0, [pc, #476]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 8006518:	f7fe fc7a 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 800651c:	2110      	movs	r1, #16
 800651e:	4607      	mov	r7, r0
 8006520:	4874      	ldr	r0, [pc, #464]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 8006522:	f7fe fc75 	bl	8004e10 <chHeapAllocAligned.constprop.0>
    chHeapFree(p3);                                 /* Merges forward.*/
 8006526:	f7ff fedb 	bl	80062e0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 800652a:	4638      	mov	r0, r7
 800652c:	f7ff fed8 	bl	80062e0 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 8006530:	4630      	mov	r0, r6
 8006532:	f7ff fed5 	bl	80062e0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006536:	462a      	mov	r2, r5
 8006538:	a901      	add	r1, sp, #4
 800653a:	486e      	ldr	r0, [pc, #440]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 800653c:	f7ff fe98 	bl	8006270 <chHeapStatus>
 8006540:	f1a0 0001 	sub.w	r0, r0, #1
 8006544:	fab0 f080 	clz	r0, r0
 8006548:	496b      	ldr	r1, [pc, #428]	; (80066f8 <oslib_test_008_001_execute+0x308>)
 800654a:	0940      	lsrs	r0, r0, #5
 800654c:	f7fa fbd8 	bl	8000d00 <_test_assert>
 8006550:	4605      	mov	r5, r0
 8006552:	2800      	cmp	r0, #0
 8006554:	f47f af60 	bne.w	8006418 <oslib_test_008_001_execute+0x28>
  test_set_step(7);
 8006558:	2307      	movs	r3, #7
 800655a:	2111      	movs	r1, #17
 800655c:	4865      	ldr	r0, [pc, #404]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 800655e:	6023      	str	r3, [r4, #0]
 8006560:	f7fe fc56 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 8006564:	2110      	movs	r1, #16
 8006566:	4606      	mov	r6, r0
 8006568:	4862      	ldr	r0, [pc, #392]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 800656a:	f7fe fc51 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 800656e:	4603      	mov	r3, r0
    chHeapFree(p1);
 8006570:	4630      	mov	r0, r6
 8006572:	461e      	mov	r6, r3
 8006574:	f7ff feb4 	bl	80062e0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8006578:	462a      	mov	r2, r5
 800657a:	a901      	add	r1, sp, #4
 800657c:	485d      	ldr	r0, [pc, #372]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 800657e:	f7ff fe77 	bl	8006270 <chHeapStatus>
 8006582:	f1a0 0002 	sub.w	r0, r0, #2
 8006586:	fab0 f080 	clz	r0, r0
 800658a:	4960      	ldr	r1, [pc, #384]	; (800670c <oslib_test_008_001_execute+0x31c>)
 800658c:	0940      	lsrs	r0, r0, #5
 800658e:	f7fa fbb7 	bl	8000d00 <_test_assert>
 8006592:	4605      	mov	r5, r0
 8006594:	2800      	cmp	r0, #0
 8006596:	f47f af3f 	bne.w	8006418 <oslib_test_008_001_execute+0x28>
 800659a:	2110      	movs	r1, #16
 800659c:	4855      	ldr	r0, [pc, #340]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 800659e:	f7fe fc37 	bl	8004e10 <chHeapAllocAligned.constprop.0>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 80065a2:	462a      	mov	r2, r5
 80065a4:	4607      	mov	r7, r0
 80065a6:	a901      	add	r1, sp, #4
 80065a8:	4852      	ldr	r0, [pc, #328]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 80065aa:	f7ff fe61 	bl	8006270 <chHeapStatus>
 80065ae:	2801      	cmp	r0, #1
 80065b0:	f000 809c 	beq.w	80066ec <oslib_test_008_001_execute+0x2fc>
 80065b4:	484f      	ldr	r0, [pc, #316]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	a901      	add	r1, sp, #4
 80065ba:	f7ff fe59 	bl	8006270 <chHeapStatus>
 80065be:	f1a0 0c02 	sub.w	ip, r0, #2
 80065c2:	f1dc 0000 	rsbs	r0, ip, #0
 80065c6:	eb40 000c 	adc.w	r0, r0, ip
 80065ca:	494b      	ldr	r1, [pc, #300]	; (80066f8 <oslib_test_008_001_execute+0x308>)
 80065cc:	f7fa fb98 	bl	8000d00 <_test_assert>
 80065d0:	4605      	mov	r5, r0
 80065d2:	2800      	cmp	r0, #0
 80065d4:	f47f af20 	bne.w	8006418 <oslib_test_008_001_execute+0x28>
    chHeapFree(p2);
 80065d8:	4630      	mov	r0, r6
 80065da:	f7ff fe81 	bl	80062e0 <chHeapFree>
    chHeapFree(p1);
 80065de:	4638      	mov	r0, r7
 80065e0:	f7ff fe7e 	bl	80062e0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80065e4:	462a      	mov	r2, r5
 80065e6:	a901      	add	r1, sp, #4
 80065e8:	4842      	ldr	r0, [pc, #264]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 80065ea:	f7ff fe41 	bl	8006270 <chHeapStatus>
 80065ee:	1e46      	subs	r6, r0, #1
 80065f0:	4270      	negs	r0, r6
 80065f2:	4941      	ldr	r1, [pc, #260]	; (80066f8 <oslib_test_008_001_execute+0x308>)
 80065f4:	4170      	adcs	r0, r6
 80065f6:	f7fa fb83 	bl	8000d00 <_test_assert>
 80065fa:	4605      	mov	r5, r0
 80065fc:	2800      	cmp	r0, #0
 80065fe:	f47f af0b 	bne.w	8006418 <oslib_test_008_001_execute+0x28>
  test_set_step(8);
 8006602:	2308      	movs	r3, #8
 8006604:	2110      	movs	r1, #16
 8006606:	483b      	ldr	r0, [pc, #236]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	f7fe fc01 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 800660e:	2110      	movs	r1, #16
 8006610:	4607      	mov	r7, r0
 8006612:	4838      	ldr	r0, [pc, #224]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 8006614:	f7fe fbfc 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 8006618:	4606      	mov	r6, r0
    chHeapFree(p1);
 800661a:	4638      	mov	r0, r7
 800661c:	f7ff fe60 	bl	80062e0 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8006620:	462a      	mov	r2, r5
 8006622:	a901      	add	r1, sp, #4
 8006624:	4833      	ldr	r0, [pc, #204]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 8006626:	f7ff fe23 	bl	8006270 <chHeapStatus>
 800662a:	1e85      	subs	r5, r0, #2
 800662c:	4268      	negs	r0, r5
 800662e:	4168      	adcs	r0, r5
 8006630:	4936      	ldr	r1, [pc, #216]	; (800670c <oslib_test_008_001_execute+0x31c>)
 8006632:	f7fa fb65 	bl	8000d00 <_test_assert>
 8006636:	4605      	mov	r5, r0
 8006638:	2800      	cmp	r0, #0
 800663a:	f47f aeed 	bne.w	8006418 <oslib_test_008_001_execute+0x28>
 800663e:	2120      	movs	r1, #32
 8006640:	482c      	ldr	r0, [pc, #176]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 8006642:	f7fe fbe5 	bl	8004e10 <chHeapAllocAligned.constprop.0>
    chHeapFree(p1);
 8006646:	f7ff fe4b 	bl	80062e0 <chHeapFree>
    chHeapFree(p2);
 800664a:	4630      	mov	r0, r6
 800664c:	f7ff fe48 	bl	80062e0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006650:	462a      	mov	r2, r5
 8006652:	a901      	add	r1, sp, #4
 8006654:	4827      	ldr	r0, [pc, #156]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 8006656:	f7ff fe0b 	bl	8006270 <chHeapStatus>
 800665a:	1e41      	subs	r1, r0, #1
 800665c:	4248      	negs	r0, r1
 800665e:	4148      	adcs	r0, r1
 8006660:	4925      	ldr	r1, [pc, #148]	; (80066f8 <oslib_test_008_001_execute+0x308>)
 8006662:	f7fa fb4d 	bl	8000d00 <_test_assert>
 8006666:	4602      	mov	r2, r0
 8006668:	2800      	cmp	r0, #0
 800666a:	f47f aed5 	bne.w	8006418 <oslib_test_008_001_execute+0x28>
  test_set_step(9);
 800666e:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 8006670:	a901      	add	r1, sp, #4
 8006672:	4820      	ldr	r0, [pc, #128]	; (80066f4 <oslib_test_008_001_execute+0x304>)
  test_set_step(9);
 8006674:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 8006676:	f7ff fdfb 	bl	8006270 <chHeapStatus>
 800667a:	9901      	ldr	r1, [sp, #4]
 800667c:	481d      	ldr	r0, [pc, #116]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 800667e:	f7fe fbc7 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 8006682:	4606      	mov	r6, r0
    test_assert(p1 != NULL, "allocation failed");
 8006684:	3800      	subs	r0, #0
 8006686:	491e      	ldr	r1, [pc, #120]	; (8006700 <oslib_test_008_001_execute+0x310>)
 8006688:	bf18      	it	ne
 800668a:	2001      	movne	r0, #1
 800668c:	f7fa fb38 	bl	8000d00 <_test_assert>
 8006690:	4602      	mov	r2, r0
 8006692:	2800      	cmp	r0, #0
 8006694:	f47f aec0 	bne.w	8006418 <oslib_test_008_001_execute+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 8006698:	4601      	mov	r1, r0
 800669a:	4816      	ldr	r0, [pc, #88]	; (80066f4 <oslib_test_008_001_execute+0x304>)
 800669c:	f7ff fde8 	bl	8006270 <chHeapStatus>
 80066a0:	fab0 f080 	clz	r0, r0
 80066a4:	491a      	ldr	r1, [pc, #104]	; (8006710 <oslib_test_008_001_execute+0x320>)
 80066a6:	0940      	lsrs	r0, r0, #5
 80066a8:	f7fa fb2a 	bl	8000d00 <_test_assert>
 80066ac:	4605      	mov	r5, r0
 80066ae:	2800      	cmp	r0, #0
 80066b0:	f47f aeb2 	bne.w	8006418 <oslib_test_008_001_execute+0x28>
    chHeapFree(p1);
 80066b4:	4630      	mov	r0, r6
 80066b6:	f7ff fe13 	bl	80062e0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80066ba:	462a      	mov	r2, r5
 80066bc:	a901      	add	r1, sp, #4
  test_set_step(10);
 80066be:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80066c0:	480c      	ldr	r0, [pc, #48]	; (80066f4 <oslib_test_008_001_execute+0x304>)
  test_set_step(10);
 80066c2:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80066c4:	f7ff fdd4 	bl	8006270 <chHeapStatus>
 80066c8:	1e42      	subs	r2, r0, #1
 80066ca:	4250      	negs	r0, r2
 80066cc:	4150      	adcs	r0, r2
 80066ce:	490a      	ldr	r1, [pc, #40]	; (80066f8 <oslib_test_008_001_execute+0x308>)
 80066d0:	f7fa fb16 	bl	8000d00 <_test_assert>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	f47f ae9f 	bne.w	8006418 <oslib_test_008_001_execute+0x28>
    test_assert(n == sz, "size changed");
 80066da:	e9dd 3000 	ldrd	r3, r0, [sp]
 80066de:	1ac3      	subs	r3, r0, r3
 80066e0:	4258      	negs	r0, r3
 80066e2:	490c      	ldr	r1, [pc, #48]	; (8006714 <oslib_test_008_001_execute+0x324>)
 80066e4:	4158      	adcs	r0, r3
 80066e6:	f7fa fb0b 	bl	8000d00 <_test_assert>
 80066ea:	e695      	b.n	8006418 <oslib_test_008_001_execute+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 80066ec:	2001      	movs	r0, #1
 80066ee:	e76c      	b.n	80065ca <oslib_test_008_001_execute+0x1da>
 80066f0:	20001f1c 	.word	0x20001f1c
 80066f4:	20001e7c 	.word	0x20001e7c
 80066f8:	0800aa20 	.word	0x0800aa20
 80066fc:	0800aa08 	.word	0x0800aa08
 8006700:	0800a9f4 	.word	0x0800a9f4
 8006704:	0800aa30 	.word	0x0800aa30
 8006708:	0800aa44 	.word	0x0800aa44
 800670c:	0800aa5c 	.word	0x0800aa5c
 8006710:	0800a7f0 	.word	0x0800a7f0
 8006714:	0800aa6c 	.word	0x0800aa6c
	...

08006720 <dyn_release_object_heap.part.0>:
static void dyn_release_object_heap(dyn_element_t *dep,
 8006720:	4603      	mov	r3, r0
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8006722:	4608      	mov	r0, r1
 8006724:	e001      	b.n	800672a <dyn_release_object_heap.part.0+0xa>
    if (prev->next == element) {
 8006726:	4283      	cmp	r3, r0
 8006728:	d006      	beq.n	8006738 <dyn_release_object_heap.part.0+0x18>
  while (prev->next != (dyn_element_t *)dlp) {
 800672a:	4602      	mov	r2, r0
 800672c:	6800      	ldr	r0, [r0, #0]
 800672e:	4288      	cmp	r0, r1
 8006730:	d1f9      	bne.n	8006726 <dyn_release_object_heap.part.0+0x6>
  return NULL;
 8006732:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8006734:	f7ff bdd4 	b.w	80062e0 <chHeapFree>
      prev->next = element->next;
 8006738:	6803      	ldr	r3, [r0, #0]
 800673a:	6013      	str	r3, [r2, #0]
    chHeapFree((void *)dep);
 800673c:	f7ff bdd0 	b.w	80062e0 <chHeapFree>

08006740 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 8006740:	b510      	push	{r4, lr}
 8006742:	4604      	mov	r4, r0

  F_LOCK();
 8006744:	4807      	ldr	r0, [pc, #28]	; (8006764 <chFactoryReleasePipe+0x24>)
 8006746:	f7fc ff03 	bl	8003550 <chMtxLock>
  dep->refs--;
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	3b01      	subs	r3, #1
 800674e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006750:	b91b      	cbnz	r3, 800675a <chFactoryReleasePipe+0x1a>
 8006752:	4905      	ldr	r1, [pc, #20]	; (8006768 <chFactoryReleasePipe+0x28>)
 8006754:	4620      	mov	r0, r4
 8006756:	f7ff ffe3 	bl	8006720 <dyn_release_object_heap.part.0>

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);

  F_UNLOCK();
}
 800675a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800675e:	4801      	ldr	r0, [pc, #4]	; (8006764 <chFactoryReleasePipe+0x24>)
 8006760:	f7fe bb26 	b.w	8004db0 <chMtxUnlock>
 8006764:	200014a4 	.word	0x200014a4
 8006768:	200014e8 	.word	0x200014e8
 800676c:	00000000 	.word	0x00000000

08006770 <oslib_test_009_006_execute>:
      chFactoryReleasePipe(dpp);
    }
  }
}

static void oslib_test_009_006_execute(void) {
 8006770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_pipe_t *dpp;

  /* [9.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 8006772:	4c43      	ldr	r4, [pc, #268]	; (8006880 <oslib_test_009_006_execute+0x110>)
 8006774:	2501      	movs	r5, #1
 8006776:	6025      	str	r5, [r4, #0]
  {
    dpp = chFactoryFindPipe("mypipe");
 8006778:	f7fe fec2 	bl	8005500 <chFactoryFindPipe.constprop.0>
    test_assert(dpp == NULL, "found");
 800677c:	fab0 f080 	clz	r0, r0
 8006780:	4940      	ldr	r1, [pc, #256]	; (8006884 <oslib_test_009_006_execute+0x114>)
 8006782:	0940      	lsrs	r0, r0, #5
 8006784:	f7fa fabc 	bl	8000d00 <_test_assert>
 8006788:	b100      	cbz	r0, 800678c <oslib_test_009_006_execute+0x1c>
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
  test_end_step(6);
}
 800678a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800678c:	2302      	movs	r3, #2
 800678e:	6023      	str	r3, [r4, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 8006790:	f7fe fe7e 	bl	8005490 <chFactoryCreatePipe.constprop.0>
 8006794:	4606      	mov	r6, r0
    test_assert(dpp != NULL, "cannot create");
 8006796:	3800      	subs	r0, #0
 8006798:	bf18      	it	ne
 800679a:	2001      	movne	r0, #1
 800679c:	493a      	ldr	r1, [pc, #232]	; (8006888 <oslib_test_009_006_execute+0x118>)
 800679e:	f7fa faaf 	bl	8000d00 <_test_assert>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d1f1      	bne.n	800678a <oslib_test_009_006_execute+0x1a>
  test_set_step(3);
 80067a6:	2303      	movs	r3, #3
 80067a8:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 80067aa:	f7fe fe71 	bl	8005490 <chFactoryCreatePipe.constprop.0>
    test_assert(dpp1 == NULL, "can create");
 80067ae:	fab0 f080 	clz	r0, r0
 80067b2:	4936      	ldr	r1, [pc, #216]	; (800688c <oslib_test_009_006_execute+0x11c>)
 80067b4:	0940      	lsrs	r0, r0, #5
 80067b6:	f7fa faa3 	bl	8000d00 <_test_assert>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d1e5      	bne.n	800678a <oslib_test_009_006_execute+0x1a>
  test_set_step(4);
 80067be:	2304      	movs	r3, #4
 80067c0:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 80067c2:	f7fe fe9d 	bl	8005500 <chFactoryFindPipe.constprop.0>
 80067c6:	4607      	mov	r7, r0
    test_assert(dpp1 != NULL, "not found");
 80067c8:	3800      	subs	r0, #0
 80067ca:	bf18      	it	ne
 80067cc:	2001      	movne	r0, #1
 80067ce:	4930      	ldr	r1, [pc, #192]	; (8006890 <oslib_test_009_006_execute+0x120>)
 80067d0:	f7fa fa96 	bl	8000d00 <_test_assert>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d1d8      	bne.n	800678a <oslib_test_009_006_execute+0x1a>
    test_assert(dpp == dpp1, "object reference mismatch");
 80067d8:	1bf0      	subs	r0, r6, r7
 80067da:	fab0 f080 	clz	r0, r0
 80067de:	492d      	ldr	r1, [pc, #180]	; (8006894 <oslib_test_009_006_execute+0x124>)
 80067e0:	0940      	lsrs	r0, r0, #5
 80067e2:	f7fa fa8d 	bl	8000d00 <_test_assert>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d1cf      	bne.n	800678a <oslib_test_009_006_execute+0x1a>
    test_assert(dpp1->element.refs == 2, "object reference mismatch");
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4929      	ldr	r1, [pc, #164]	; (8006894 <oslib_test_009_006_execute+0x124>)
 80067ee:	f1a0 0002 	sub.w	r0, r0, #2
 80067f2:	fab0 f080 	clz	r0, r0
 80067f6:	0940      	lsrs	r0, r0, #5
 80067f8:	f7fa fa82 	bl	8000d00 <_test_assert>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d1c4      	bne.n	800678a <oslib_test_009_006_execute+0x1a>
 8006800:	687b      	ldr	r3, [r7, #4]
    test_assert(dpp1 == dpp2, "object reference mismatch");
 8006802:	4924      	ldr	r1, [pc, #144]	; (8006894 <oslib_test_009_006_execute+0x124>)
 8006804:	442b      	add	r3, r5
 8006806:	4628      	mov	r0, r5
 8006808:	607b      	str	r3, [r7, #4]
 800680a:	f7fa fa79 	bl	8000d00 <_test_assert>
 800680e:	2800      	cmp	r0, #0
 8006810:	d1bb      	bne.n	800678a <oslib_test_009_006_execute+0x1a>
    test_assert(dpp2->element.refs == 3, "object reference mismatch");
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	491f      	ldr	r1, [pc, #124]	; (8006894 <oslib_test_009_006_execute+0x124>)
 8006816:	f1a0 0003 	sub.w	r0, r0, #3
 800681a:	fab0 f080 	clz	r0, r0
 800681e:	0940      	lsrs	r0, r0, #5
 8006820:	f7fa fa6e 	bl	8000d00 <_test_assert>
 8006824:	2800      	cmp	r0, #0
 8006826:	d1b0      	bne.n	800678a <oslib_test_009_006_execute+0x1a>
    chFactoryReleasePipe(dpp2);
 8006828:	4638      	mov	r0, r7
 800682a:	f7ff ff89 	bl	8006740 <chFactoryReleasePipe>
    test_assert(dpp1->element.refs == 2, "references mismatch");
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	4919      	ldr	r1, [pc, #100]	; (8006898 <oslib_test_009_006_execute+0x128>)
 8006832:	f1a0 0002 	sub.w	r0, r0, #2
 8006836:	fab0 f080 	clz	r0, r0
 800683a:	0940      	lsrs	r0, r0, #5
 800683c:	f7fa fa60 	bl	8000d00 <_test_assert>
 8006840:	2800      	cmp	r0, #0
 8006842:	d1a2      	bne.n	800678a <oslib_test_009_006_execute+0x1a>
    chFactoryReleasePipe(dpp1);
 8006844:	4638      	mov	r0, r7
 8006846:	f7ff ff7b 	bl	8006740 <chFactoryReleasePipe>
    test_assert(dpp->element.refs == 1, "references mismatch");
 800684a:	6870      	ldr	r0, [r6, #4]
 800684c:	4912      	ldr	r1, [pc, #72]	; (8006898 <oslib_test_009_006_execute+0x128>)
 800684e:	1b40      	subs	r0, r0, r5
 8006850:	fab0 f080 	clz	r0, r0
 8006854:	0940      	lsrs	r0, r0, #5
 8006856:	f7fa fa53 	bl	8000d00 <_test_assert>
 800685a:	2800      	cmp	r0, #0
 800685c:	d195      	bne.n	800678a <oslib_test_009_006_execute+0x1a>
    chFactoryReleasePipe(dpp);
 800685e:	4630      	mov	r0, r6
  test_set_step(5);
 8006860:	2305      	movs	r3, #5
 8006862:	6023      	str	r3, [r4, #0]
    chFactoryReleasePipe(dpp);
 8006864:	f7ff ff6c 	bl	8006740 <chFactoryReleasePipe>
  test_set_step(6);
 8006868:	2306      	movs	r3, #6
 800686a:	6023      	str	r3, [r4, #0]
    dpp = chFactoryFindPipe("mypipe");
 800686c:	f7fe fe48 	bl	8005500 <chFactoryFindPipe.constprop.0>
    test_assert(dpp == NULL, "found");
 8006870:	fab0 f080 	clz	r0, r0
}
 8006874:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dpp == NULL, "found");
 8006878:	4902      	ldr	r1, [pc, #8]	; (8006884 <oslib_test_009_006_execute+0x114>)
 800687a:	0940      	lsrs	r0, r0, #5
 800687c:	f7fa ba40 	b.w	8000d00 <_test_assert>
 8006880:	20001f1c 	.word	0x20001f1c
 8006884:	0800a98c 	.word	0x0800a98c
 8006888:	0800a96c 	.word	0x0800a96c
 800688c:	0800a97c 	.word	0x0800a97c
 8006890:	0800a988 	.word	0x0800a988
 8006894:	0800a994 	.word	0x0800a994
 8006898:	0800a9b0 	.word	0x0800a9b0
 800689c:	00000000 	.word	0x00000000

080068a0 <oslib_test_009_006_teardown>:
static void oslib_test_009_006_teardown(void) {
 80068a0:	b510      	push	{r4, lr}
  dpp = chFactoryFindPipe("mypipe");
 80068a2:	f7fe fe2d 	bl	8005500 <chFactoryFindPipe.constprop.0>
  if (dpp != NULL) {
 80068a6:	b140      	cbz	r0, 80068ba <oslib_test_009_006_teardown+0x1a>
    while (dpp->element.refs > 0U) {
 80068a8:	6843      	ldr	r3, [r0, #4]
 80068aa:	4604      	mov	r4, r0
 80068ac:	b12b      	cbz	r3, 80068ba <oslib_test_009_006_teardown+0x1a>
      chFactoryReleasePipe(dpp);
 80068ae:	4620      	mov	r0, r4
 80068b0:	f7ff ff46 	bl	8006740 <chFactoryReleasePipe>
    while (dpp->element.refs > 0U) {
 80068b4:	6863      	ldr	r3, [r4, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1f9      	bne.n	80068ae <oslib_test_009_006_teardown+0xe>
}
 80068ba:	bd10      	pop	{r4, pc}
 80068bc:	0000      	movs	r0, r0
	...

080068c0 <chFactoryReleaseObjectsFIFO>:
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 80068c0:	b510      	push	{r4, lr}
 80068c2:	4604      	mov	r4, r0
  F_LOCK();
 80068c4:	4807      	ldr	r0, [pc, #28]	; (80068e4 <chFactoryReleaseObjectsFIFO+0x24>)
 80068c6:	f7fc fe43 	bl	8003550 <chMtxLock>
  dep->refs--;
 80068ca:	6863      	ldr	r3, [r4, #4]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80068d0:	b91b      	cbnz	r3, 80068da <chFactoryReleaseObjectsFIFO+0x1a>
 80068d2:	4905      	ldr	r1, [pc, #20]	; (80068e8 <chFactoryReleaseObjectsFIFO+0x28>)
 80068d4:	4620      	mov	r0, r4
 80068d6:	f7ff ff23 	bl	8006720 <dyn_release_object_heap.part.0>
}
 80068da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 80068de:	4801      	ldr	r0, [pc, #4]	; (80068e4 <chFactoryReleaseObjectsFIFO+0x24>)
 80068e0:	f7fe ba66 	b.w	8004db0 <chMtxUnlock>
 80068e4:	200014a4 	.word	0x200014a4
 80068e8:	200014e4 	.word	0x200014e4
 80068ec:	00000000 	.word	0x00000000

080068f0 <oslib_test_009_005_execute>:
static void oslib_test_009_005_execute(void) {
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80068f2:	4c43      	ldr	r4, [pc, #268]	; (8006a00 <oslib_test_009_005_execute+0x110>)
 80068f4:	2501      	movs	r5, #1
 80068f6:	6025      	str	r5, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 80068f8:	f7fe fdb2 	bl	8005460 <chFactoryFindObjectsFIFO.constprop.0>
    test_assert(dofp == NULL, "found");
 80068fc:	fab0 f080 	clz	r0, r0
 8006900:	4940      	ldr	r1, [pc, #256]	; (8006a04 <oslib_test_009_005_execute+0x114>)
 8006902:	0940      	lsrs	r0, r0, #5
 8006904:	f7fa f9fc 	bl	8000d00 <_test_assert>
 8006908:	b100      	cbz	r0, 800690c <oslib_test_009_005_execute+0x1c>
}
 800690a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800690c:	2302      	movs	r3, #2
 800690e:	6023      	str	r3, [r4, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 8006910:	f7fe fd6e 	bl	80053f0 <chFactoryCreateObjectsFIFO.constprop.0>
 8006914:	4606      	mov	r6, r0
    test_assert(dofp != NULL, "cannot create");
 8006916:	3800      	subs	r0, #0
 8006918:	bf18      	it	ne
 800691a:	2001      	movne	r0, #1
 800691c:	493a      	ldr	r1, [pc, #232]	; (8006a08 <oslib_test_009_005_execute+0x118>)
 800691e:	f7fa f9ef 	bl	8000d00 <_test_assert>
 8006922:	2800      	cmp	r0, #0
 8006924:	d1f1      	bne.n	800690a <oslib_test_009_005_execute+0x1a>
  test_set_step(3);
 8006926:	2303      	movs	r3, #3
 8006928:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800692a:	f7fe fd61 	bl	80053f0 <chFactoryCreateObjectsFIFO.constprop.0>
    test_assert(dofp1 == NULL, "can create");
 800692e:	fab0 f080 	clz	r0, r0
 8006932:	4936      	ldr	r1, [pc, #216]	; (8006a0c <oslib_test_009_005_execute+0x11c>)
 8006934:	0940      	lsrs	r0, r0, #5
 8006936:	f7fa f9e3 	bl	8000d00 <_test_assert>
 800693a:	2800      	cmp	r0, #0
 800693c:	d1e5      	bne.n	800690a <oslib_test_009_005_execute+0x1a>
  test_set_step(4);
 800693e:	2304      	movs	r3, #4
 8006940:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 8006942:	f7fe fd8d 	bl	8005460 <chFactoryFindObjectsFIFO.constprop.0>
 8006946:	4607      	mov	r7, r0
    test_assert(dofp1 != NULL, "not found");
 8006948:	3800      	subs	r0, #0
 800694a:	bf18      	it	ne
 800694c:	2001      	movne	r0, #1
 800694e:	4930      	ldr	r1, [pc, #192]	; (8006a10 <oslib_test_009_005_execute+0x120>)
 8006950:	f7fa f9d6 	bl	8000d00 <_test_assert>
 8006954:	2800      	cmp	r0, #0
 8006956:	d1d8      	bne.n	800690a <oslib_test_009_005_execute+0x1a>
    test_assert(dofp == dofp1, "object reference mismatch");
 8006958:	1bf0      	subs	r0, r6, r7
 800695a:	fab0 f080 	clz	r0, r0
 800695e:	492d      	ldr	r1, [pc, #180]	; (8006a14 <oslib_test_009_005_execute+0x124>)
 8006960:	0940      	lsrs	r0, r0, #5
 8006962:	f7fa f9cd 	bl	8000d00 <_test_assert>
 8006966:	2800      	cmp	r0, #0
 8006968:	d1cf      	bne.n	800690a <oslib_test_009_005_execute+0x1a>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	4929      	ldr	r1, [pc, #164]	; (8006a14 <oslib_test_009_005_execute+0x124>)
 800696e:	f1a0 0002 	sub.w	r0, r0, #2
 8006972:	fab0 f080 	clz	r0, r0
 8006976:	0940      	lsrs	r0, r0, #5
 8006978:	f7fa f9c2 	bl	8000d00 <_test_assert>
 800697c:	2800      	cmp	r0, #0
 800697e:	d1c4      	bne.n	800690a <oslib_test_009_005_execute+0x1a>
 8006980:	687b      	ldr	r3, [r7, #4]
    test_assert(dofp1 == dofp2, "object reference mismatch");
 8006982:	4924      	ldr	r1, [pc, #144]	; (8006a14 <oslib_test_009_005_execute+0x124>)
 8006984:	442b      	add	r3, r5
 8006986:	4628      	mov	r0, r5
 8006988:	607b      	str	r3, [r7, #4]
 800698a:	f7fa f9b9 	bl	8000d00 <_test_assert>
 800698e:	2800      	cmp	r0, #0
 8006990:	d1bb      	bne.n	800690a <oslib_test_009_005_execute+0x1a>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	491f      	ldr	r1, [pc, #124]	; (8006a14 <oslib_test_009_005_execute+0x124>)
 8006996:	f1a0 0003 	sub.w	r0, r0, #3
 800699a:	fab0 f080 	clz	r0, r0
 800699e:	0940      	lsrs	r0, r0, #5
 80069a0:	f7fa f9ae 	bl	8000d00 <_test_assert>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d1b0      	bne.n	800690a <oslib_test_009_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp2);
 80069a8:	4638      	mov	r0, r7
 80069aa:	f7ff ff89 	bl	80068c0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	4919      	ldr	r1, [pc, #100]	; (8006a18 <oslib_test_009_005_execute+0x128>)
 80069b2:	f1a0 0002 	sub.w	r0, r0, #2
 80069b6:	fab0 f080 	clz	r0, r0
 80069ba:	0940      	lsrs	r0, r0, #5
 80069bc:	f7fa f9a0 	bl	8000d00 <_test_assert>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d1a2      	bne.n	800690a <oslib_test_009_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp1);
 80069c4:	4638      	mov	r0, r7
 80069c6:	f7ff ff7b 	bl	80068c0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 80069ca:	6870      	ldr	r0, [r6, #4]
 80069cc:	4912      	ldr	r1, [pc, #72]	; (8006a18 <oslib_test_009_005_execute+0x128>)
 80069ce:	1b40      	subs	r0, r0, r5
 80069d0:	fab0 f080 	clz	r0, r0
 80069d4:	0940      	lsrs	r0, r0, #5
 80069d6:	f7fa f993 	bl	8000d00 <_test_assert>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d195      	bne.n	800690a <oslib_test_009_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp);
 80069de:	4630      	mov	r0, r6
  test_set_step(5);
 80069e0:	2305      	movs	r3, #5
 80069e2:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 80069e4:	f7ff ff6c 	bl	80068c0 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 80069e8:	2306      	movs	r3, #6
 80069ea:	6023      	str	r3, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 80069ec:	f7fe fd38 	bl	8005460 <chFactoryFindObjectsFIFO.constprop.0>
    test_assert(dofp == NULL, "found");
 80069f0:	fab0 f080 	clz	r0, r0
}
 80069f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 80069f8:	4902      	ldr	r1, [pc, #8]	; (8006a04 <oslib_test_009_005_execute+0x114>)
 80069fa:	0940      	lsrs	r0, r0, #5
 80069fc:	f7fa b980 	b.w	8000d00 <_test_assert>
 8006a00:	20001f1c 	.word	0x20001f1c
 8006a04:	0800a98c 	.word	0x0800a98c
 8006a08:	0800a96c 	.word	0x0800a96c
 8006a0c:	0800a97c 	.word	0x0800a97c
 8006a10:	0800a988 	.word	0x0800a988
 8006a14:	0800a994 	.word	0x0800a994
 8006a18:	0800a9b0 	.word	0x0800a9b0
 8006a1c:	00000000 	.word	0x00000000

08006a20 <oslib_test_009_005_teardown>:
static void oslib_test_009_005_teardown(void) {
 8006a20:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
 8006a22:	f7fe fd1d 	bl	8005460 <chFactoryFindObjectsFIFO.constprop.0>
  if (dofp != NULL) {
 8006a26:	b140      	cbz	r0, 8006a3a <oslib_test_009_005_teardown+0x1a>
    while (dofp->element.refs > 0U) {
 8006a28:	6843      	ldr	r3, [r0, #4]
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	b12b      	cbz	r3, 8006a3a <oslib_test_009_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f7ff ff46 	bl	80068c0 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 8006a34:	6863      	ldr	r3, [r4, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f9      	bne.n	8006a2e <oslib_test_009_005_teardown+0xe>
}
 8006a3a:	bd10      	pop	{r4, pc}
 8006a3c:	0000      	movs	r0, r0
	...

08006a40 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8006a40:	b510      	push	{r4, lr}
 8006a42:	4604      	mov	r4, r0
  F_LOCK();
 8006a44:	4807      	ldr	r0, [pc, #28]	; (8006a64 <chFactoryReleaseMailbox+0x24>)
 8006a46:	f7fc fd83 	bl	8003550 <chMtxLock>
  dep->refs--;
 8006a4a:	6863      	ldr	r3, [r4, #4]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006a50:	b91b      	cbnz	r3, 8006a5a <chFactoryReleaseMailbox+0x1a>
 8006a52:	4905      	ldr	r1, [pc, #20]	; (8006a68 <chFactoryReleaseMailbox+0x28>)
 8006a54:	4620      	mov	r0, r4
 8006a56:	f7ff fe63 	bl	8006720 <dyn_release_object_heap.part.0>
}
 8006a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8006a5e:	4801      	ldr	r0, [pc, #4]	; (8006a64 <chFactoryReleaseMailbox+0x24>)
 8006a60:	f7fe b9a6 	b.w	8004db0 <chMtxUnlock>
 8006a64:	200014a4 	.word	0x200014a4
 8006a68:	200014e0 	.word	0x200014e0
 8006a6c:	00000000 	.word	0x00000000

08006a70 <oslib_test_009_004_execute>:
static void oslib_test_009_004_execute(void) {
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006a72:	4c43      	ldr	r4, [pc, #268]	; (8006b80 <oslib_test_009_004_execute+0x110>)
 8006a74:	2501      	movs	r5, #1
 8006a76:	6025      	str	r5, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 8006a78:	f7fe fca2 	bl	80053c0 <chFactoryFindMailbox.constprop.0>
    test_assert(dmp == NULL, "found");
 8006a7c:	fab0 f080 	clz	r0, r0
 8006a80:	4940      	ldr	r1, [pc, #256]	; (8006b84 <oslib_test_009_004_execute+0x114>)
 8006a82:	0940      	lsrs	r0, r0, #5
 8006a84:	f7fa f93c 	bl	8000d00 <_test_assert>
 8006a88:	b100      	cbz	r0, 8006a8c <oslib_test_009_004_execute+0x1c>
}
 8006a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	6023      	str	r3, [r4, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 8006a90:	f7fe fc66 	bl	8005360 <chFactoryCreateMailbox.constprop.0>
 8006a94:	4606      	mov	r6, r0
    test_assert(dmp != NULL, "cannot create");
 8006a96:	3800      	subs	r0, #0
 8006a98:	bf18      	it	ne
 8006a9a:	2001      	movne	r0, #1
 8006a9c:	493a      	ldr	r1, [pc, #232]	; (8006b88 <oslib_test_009_004_execute+0x118>)
 8006a9e:	f7fa f92f 	bl	8000d00 <_test_assert>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d1f1      	bne.n	8006a8a <oslib_test_009_004_execute+0x1a>
  test_set_step(3);
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 8006aaa:	f7fe fc59 	bl	8005360 <chFactoryCreateMailbox.constprop.0>
    test_assert(dmp1 == NULL, "can create");
 8006aae:	fab0 f080 	clz	r0, r0
 8006ab2:	4936      	ldr	r1, [pc, #216]	; (8006b8c <oslib_test_009_004_execute+0x11c>)
 8006ab4:	0940      	lsrs	r0, r0, #5
 8006ab6:	f7fa f923 	bl	8000d00 <_test_assert>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d1e5      	bne.n	8006a8a <oslib_test_009_004_execute+0x1a>
  test_set_step(4);
 8006abe:	2304      	movs	r3, #4
 8006ac0:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 8006ac2:	f7fe fc7d 	bl	80053c0 <chFactoryFindMailbox.constprop.0>
 8006ac6:	4607      	mov	r7, r0
    test_assert(dmp1 != NULL, "not found");
 8006ac8:	3800      	subs	r0, #0
 8006aca:	bf18      	it	ne
 8006acc:	2001      	movne	r0, #1
 8006ace:	4930      	ldr	r1, [pc, #192]	; (8006b90 <oslib_test_009_004_execute+0x120>)
 8006ad0:	f7fa f916 	bl	8000d00 <_test_assert>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d1d8      	bne.n	8006a8a <oslib_test_009_004_execute+0x1a>
    test_assert(dmp == dmp1, "object reference mismatch");
 8006ad8:	1bf0      	subs	r0, r6, r7
 8006ada:	fab0 f080 	clz	r0, r0
 8006ade:	492d      	ldr	r1, [pc, #180]	; (8006b94 <oslib_test_009_004_execute+0x124>)
 8006ae0:	0940      	lsrs	r0, r0, #5
 8006ae2:	f7fa f90d 	bl	8000d00 <_test_assert>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d1cf      	bne.n	8006a8a <oslib_test_009_004_execute+0x1a>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4929      	ldr	r1, [pc, #164]	; (8006b94 <oslib_test_009_004_execute+0x124>)
 8006aee:	f1a0 0002 	sub.w	r0, r0, #2
 8006af2:	fab0 f080 	clz	r0, r0
 8006af6:	0940      	lsrs	r0, r0, #5
 8006af8:	f7fa f902 	bl	8000d00 <_test_assert>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d1c4      	bne.n	8006a8a <oslib_test_009_004_execute+0x1a>
 8006b00:	687b      	ldr	r3, [r7, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 8006b02:	4924      	ldr	r1, [pc, #144]	; (8006b94 <oslib_test_009_004_execute+0x124>)
 8006b04:	442b      	add	r3, r5
 8006b06:	4628      	mov	r0, r5
 8006b08:	607b      	str	r3, [r7, #4]
 8006b0a:	f7fa f8f9 	bl	8000d00 <_test_assert>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d1bb      	bne.n	8006a8a <oslib_test_009_004_execute+0x1a>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	491f      	ldr	r1, [pc, #124]	; (8006b94 <oslib_test_009_004_execute+0x124>)
 8006b16:	f1a0 0003 	sub.w	r0, r0, #3
 8006b1a:	fab0 f080 	clz	r0, r0
 8006b1e:	0940      	lsrs	r0, r0, #5
 8006b20:	f7fa f8ee 	bl	8000d00 <_test_assert>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d1b0      	bne.n	8006a8a <oslib_test_009_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp2);
 8006b28:	4638      	mov	r0, r7
 8006b2a:	f7ff ff89 	bl	8006a40 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4919      	ldr	r1, [pc, #100]	; (8006b98 <oslib_test_009_004_execute+0x128>)
 8006b32:	f1a0 0002 	sub.w	r0, r0, #2
 8006b36:	fab0 f080 	clz	r0, r0
 8006b3a:	0940      	lsrs	r0, r0, #5
 8006b3c:	f7fa f8e0 	bl	8000d00 <_test_assert>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d1a2      	bne.n	8006a8a <oslib_test_009_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp1);
 8006b44:	4638      	mov	r0, r7
 8006b46:	f7ff ff7b 	bl	8006a40 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 8006b4a:	6870      	ldr	r0, [r6, #4]
 8006b4c:	4912      	ldr	r1, [pc, #72]	; (8006b98 <oslib_test_009_004_execute+0x128>)
 8006b4e:	1b40      	subs	r0, r0, r5
 8006b50:	fab0 f080 	clz	r0, r0
 8006b54:	0940      	lsrs	r0, r0, #5
 8006b56:	f7fa f8d3 	bl	8000d00 <_test_assert>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d195      	bne.n	8006a8a <oslib_test_009_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp);
 8006b5e:	4630      	mov	r0, r6
  test_set_step(5);
 8006b60:	2305      	movs	r3, #5
 8006b62:	6023      	str	r3, [r4, #0]
    chFactoryReleaseMailbox(dmp);
 8006b64:	f7ff ff6c 	bl	8006a40 <chFactoryReleaseMailbox>
  test_set_step(6);
 8006b68:	2306      	movs	r3, #6
 8006b6a:	6023      	str	r3, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 8006b6c:	f7fe fc28 	bl	80053c0 <chFactoryFindMailbox.constprop.0>
    test_assert(dmp == NULL, "found");
 8006b70:	fab0 f080 	clz	r0, r0
}
 8006b74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
 8006b78:	4902      	ldr	r1, [pc, #8]	; (8006b84 <oslib_test_009_004_execute+0x114>)
 8006b7a:	0940      	lsrs	r0, r0, #5
 8006b7c:	f7fa b8c0 	b.w	8000d00 <_test_assert>
 8006b80:	20001f1c 	.word	0x20001f1c
 8006b84:	0800a98c 	.word	0x0800a98c
 8006b88:	0800a96c 	.word	0x0800a96c
 8006b8c:	0800a97c 	.word	0x0800a97c
 8006b90:	0800a988 	.word	0x0800a988
 8006b94:	0800a994 	.word	0x0800a994
 8006b98:	0800a9b0 	.word	0x0800a9b0
 8006b9c:	00000000 	.word	0x00000000

08006ba0 <oslib_test_009_004_teardown>:
static void oslib_test_009_004_teardown(void) {
 8006ba0:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
 8006ba2:	f7fe fc0d 	bl	80053c0 <chFactoryFindMailbox.constprop.0>
  if (dmp != NULL) {
 8006ba6:	b140      	cbz	r0, 8006bba <oslib_test_009_004_teardown+0x1a>
    while (dmp->element.refs > 0U) {
 8006ba8:	6843      	ldr	r3, [r0, #4]
 8006baa:	4604      	mov	r4, r0
 8006bac:	b12b      	cbz	r3, 8006bba <oslib_test_009_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f7ff ff46 	bl	8006a40 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 8006bb4:	6863      	ldr	r3, [r4, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f9      	bne.n	8006bae <oslib_test_009_004_teardown+0xe>
}
 8006bba:	bd10      	pop	{r4, pc}
 8006bbc:	0000      	movs	r0, r0
	...

08006bc0 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	4604      	mov	r4, r0
  F_LOCK();
 8006bc4:	4807      	ldr	r0, [pc, #28]	; (8006be4 <chFactoryReleaseBuffer+0x24>)
 8006bc6:	f7fc fcc3 	bl	8003550 <chMtxLock>
  dep->refs--;
 8006bca:	6863      	ldr	r3, [r4, #4]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006bd0:	b91b      	cbnz	r3, 8006bda <chFactoryReleaseBuffer+0x1a>
 8006bd2:	4905      	ldr	r1, [pc, #20]	; (8006be8 <chFactoryReleaseBuffer+0x28>)
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f7ff fda3 	bl	8006720 <dyn_release_object_heap.part.0>
}
 8006bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8006bde:	4801      	ldr	r0, [pc, #4]	; (8006be4 <chFactoryReleaseBuffer+0x24>)
 8006be0:	f7fe b8e6 	b.w	8004db0 <chMtxUnlock>
 8006be4:	200014a4 	.word	0x200014a4
 8006be8:	200014c8 	.word	0x200014c8
 8006bec:	00000000 	.word	0x00000000

08006bf0 <oslib_test_009_002_execute>:
static void oslib_test_009_002_execute(void) {
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006bf2:	4c43      	ldr	r4, [pc, #268]	; (8006d00 <oslib_test_009_002_execute+0x110>)
 8006bf4:	2501      	movs	r5, #1
 8006bf6:	6025      	str	r5, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8006bf8:	f7fe fb62 	bl	80052c0 <chFactoryFindBuffer.constprop.0>
    test_assert(dbp == NULL, "found");
 8006bfc:	fab0 f080 	clz	r0, r0
 8006c00:	4940      	ldr	r1, [pc, #256]	; (8006d04 <oslib_test_009_002_execute+0x114>)
 8006c02:	0940      	lsrs	r0, r0, #5
 8006c04:	f7fa f87c 	bl	8000d00 <_test_assert>
 8006c08:	b100      	cbz	r0, 8006c0c <oslib_test_009_002_execute+0x1c>
}
 8006c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	6023      	str	r3, [r4, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 8006c10:	f7fe fb36 	bl	8005280 <chFactoryCreateBuffer.constprop.0>
 8006c14:	4606      	mov	r6, r0
    test_assert(dbp != NULL, "cannot create");
 8006c16:	3800      	subs	r0, #0
 8006c18:	bf18      	it	ne
 8006c1a:	2001      	movne	r0, #1
 8006c1c:	493a      	ldr	r1, [pc, #232]	; (8006d08 <oslib_test_009_002_execute+0x118>)
 8006c1e:	f7fa f86f 	bl	8000d00 <_test_assert>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d1f1      	bne.n	8006c0a <oslib_test_009_002_execute+0x1a>
  test_set_step(3);
 8006c26:	2303      	movs	r3, #3
 8006c28:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 8006c2a:	f7fe fb29 	bl	8005280 <chFactoryCreateBuffer.constprop.0>
    test_assert(dbp1 == NULL, "can create");
 8006c2e:	fab0 f080 	clz	r0, r0
 8006c32:	4936      	ldr	r1, [pc, #216]	; (8006d0c <oslib_test_009_002_execute+0x11c>)
 8006c34:	0940      	lsrs	r0, r0, #5
 8006c36:	f7fa f863 	bl	8000d00 <_test_assert>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d1e5      	bne.n	8006c0a <oslib_test_009_002_execute+0x1a>
  test_set_step(4);
 8006c3e:	2304      	movs	r3, #4
 8006c40:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 8006c42:	f7fe fb3d 	bl	80052c0 <chFactoryFindBuffer.constprop.0>
 8006c46:	4607      	mov	r7, r0
    test_assert(dbp1 != NULL, "not found");
 8006c48:	3800      	subs	r0, #0
 8006c4a:	bf18      	it	ne
 8006c4c:	2001      	movne	r0, #1
 8006c4e:	4930      	ldr	r1, [pc, #192]	; (8006d10 <oslib_test_009_002_execute+0x120>)
 8006c50:	f7fa f856 	bl	8000d00 <_test_assert>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d1d8      	bne.n	8006c0a <oslib_test_009_002_execute+0x1a>
    test_assert(dbp == dbp1, "object reference mismatch");
 8006c58:	1bf0      	subs	r0, r6, r7
 8006c5a:	fab0 f080 	clz	r0, r0
 8006c5e:	492d      	ldr	r1, [pc, #180]	; (8006d14 <oslib_test_009_002_execute+0x124>)
 8006c60:	0940      	lsrs	r0, r0, #5
 8006c62:	f7fa f84d 	bl	8000d00 <_test_assert>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d1cf      	bne.n	8006c0a <oslib_test_009_002_execute+0x1a>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4929      	ldr	r1, [pc, #164]	; (8006d14 <oslib_test_009_002_execute+0x124>)
 8006c6e:	f1a0 0002 	sub.w	r0, r0, #2
 8006c72:	fab0 f080 	clz	r0, r0
 8006c76:	0940      	lsrs	r0, r0, #5
 8006c78:	f7fa f842 	bl	8000d00 <_test_assert>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d1c4      	bne.n	8006c0a <oslib_test_009_002_execute+0x1a>
 8006c80:	687b      	ldr	r3, [r7, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 8006c82:	4924      	ldr	r1, [pc, #144]	; (8006d14 <oslib_test_009_002_execute+0x124>)
 8006c84:	442b      	add	r3, r5
 8006c86:	4628      	mov	r0, r5
 8006c88:	607b      	str	r3, [r7, #4]
 8006c8a:	f7fa f839 	bl	8000d00 <_test_assert>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d1bb      	bne.n	8006c0a <oslib_test_009_002_execute+0x1a>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	491f      	ldr	r1, [pc, #124]	; (8006d14 <oslib_test_009_002_execute+0x124>)
 8006c96:	f1a0 0003 	sub.w	r0, r0, #3
 8006c9a:	fab0 f080 	clz	r0, r0
 8006c9e:	0940      	lsrs	r0, r0, #5
 8006ca0:	f7fa f82e 	bl	8000d00 <_test_assert>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d1b0      	bne.n	8006c0a <oslib_test_009_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp2);
 8006ca8:	4638      	mov	r0, r7
 8006caa:	f7ff ff89 	bl	8006bc0 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4919      	ldr	r1, [pc, #100]	; (8006d18 <oslib_test_009_002_execute+0x128>)
 8006cb2:	f1a0 0002 	sub.w	r0, r0, #2
 8006cb6:	fab0 f080 	clz	r0, r0
 8006cba:	0940      	lsrs	r0, r0, #5
 8006cbc:	f7fa f820 	bl	8000d00 <_test_assert>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d1a2      	bne.n	8006c0a <oslib_test_009_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp1);
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f7ff ff7b 	bl	8006bc0 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 8006cca:	6870      	ldr	r0, [r6, #4]
 8006ccc:	4912      	ldr	r1, [pc, #72]	; (8006d18 <oslib_test_009_002_execute+0x128>)
 8006cce:	1b40      	subs	r0, r0, r5
 8006cd0:	fab0 f080 	clz	r0, r0
 8006cd4:	0940      	lsrs	r0, r0, #5
 8006cd6:	f7fa f813 	bl	8000d00 <_test_assert>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d195      	bne.n	8006c0a <oslib_test_009_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp);
 8006cde:	4630      	mov	r0, r6
  test_set_step(5);
 8006ce0:	2305      	movs	r3, #5
 8006ce2:	6023      	str	r3, [r4, #0]
    chFactoryReleaseBuffer(dbp);
 8006ce4:	f7ff ff6c 	bl	8006bc0 <chFactoryReleaseBuffer>
  test_set_step(6);
 8006ce8:	2306      	movs	r3, #6
 8006cea:	6023      	str	r3, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8006cec:	f7fe fae8 	bl	80052c0 <chFactoryFindBuffer.constprop.0>
    test_assert(dbp == NULL, "found");
 8006cf0:	fab0 f080 	clz	r0, r0
}
 8006cf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
 8006cf8:	4902      	ldr	r1, [pc, #8]	; (8006d04 <oslib_test_009_002_execute+0x114>)
 8006cfa:	0940      	lsrs	r0, r0, #5
 8006cfc:	f7fa b800 	b.w	8000d00 <_test_assert>
 8006d00:	20001f1c 	.word	0x20001f1c
 8006d04:	0800a98c 	.word	0x0800a98c
 8006d08:	0800a96c 	.word	0x0800a96c
 8006d0c:	0800a97c 	.word	0x0800a97c
 8006d10:	0800a988 	.word	0x0800a988
 8006d14:	0800a994 	.word	0x0800a994
 8006d18:	0800a9b0 	.word	0x0800a9b0
 8006d1c:	00000000 	.word	0x00000000

08006d20 <oslib_test_009_002_teardown>:
static void oslib_test_009_002_teardown(void) {
 8006d20:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
 8006d22:	f7fe facd 	bl	80052c0 <chFactoryFindBuffer.constprop.0>
  if (dbp != NULL) {
 8006d26:	b140      	cbz	r0, 8006d3a <oslib_test_009_002_teardown+0x1a>
    while (dbp->element.refs > 0U) {
 8006d28:	6843      	ldr	r3, [r0, #4]
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	b12b      	cbz	r3, 8006d3a <oslib_test_009_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7ff ff46 	bl	8006bc0 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 8006d34:	6863      	ldr	r3, [r4, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f9      	bne.n	8006d2e <oslib_test_009_002_teardown+0xe>
}
 8006d3a:	bd10      	pop	{r4, pc}
 8006d3c:	0000      	movs	r0, r0
	...

08006d40 <chThdRelease>:
 8006d40:	2220      	movs	r2, #32
 8006d42:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8006d46:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8006d50:	6a03      	ldr	r3, [r0, #32]
 8006d52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006d56:	2b0f      	cmp	r3, #15
 8006d58:	d003      	beq.n	8006d62 <chThdRelease+0x22>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	4770      	bx	lr
    REG_REMOVE(tp);
 8006d62:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
void chThdRelease(thread_t *tp) {
 8006d66:	b410      	push	{r4}
    REG_REMOVE(tp);
 8006d68:	6119      	str	r1, [r3, #16]
 8006d6a:	6904      	ldr	r4, [r0, #16]
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	6163      	str	r3, [r4, #20]
 8006d70:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8006d74:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8006d78:	f003 0303 	and.w	r3, r3, #3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d00d      	beq.n	8006d9c <chThdRelease+0x5c>
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d001      	beq.n	8006d88 <chThdRelease+0x48>
}
 8006d84:	bc10      	pop	{r4}
 8006d86:	4770      	bx	lr
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8006d88:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006d8a:	69c0      	ldr	r0, [r0, #28]
 8006d8c:	f382 8811 	msr	BASEPRI, r2
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	6002      	str	r2, [r0, #0]
  mp->next = php;
 8006d94:	6018      	str	r0, [r3, #0]
 8006d96:	f381 8811 	msr	BASEPRI, r1
 8006d9a:	e7f3      	b.n	8006d84 <chThdRelease+0x44>
      chHeapFree(chThdGetWorkingAreaX(tp));
 8006d9c:	69c0      	ldr	r0, [r0, #28]
}
 8006d9e:	bc10      	pop	{r4}
      chHeapFree(chThdGetWorkingAreaX(tp));
 8006da0:	f7ff ba9e 	b.w	80062e0 <chHeapFree>
	...

08006db0 <rt_test_011_006_execute>:
static void rt_test_011_006_execute(void) {
 8006db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.current;
 8006db4:	4b1a      	ldr	r3, [pc, #104]	; (8006e20 <rt_test_011_006_execute+0x70>)
  test_set_step(1);
 8006db6:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006e2c <rt_test_011_006_execute+0x7c>
  return chThdGetSelfX()->prio;
 8006dba:	699b      	ldr	r3, [r3, #24]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006dbc:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006e30 <rt_test_011_006_execute+0x80>
  tprio_t prio = chThdGetPriorityX() + 1;
 8006dc0:	689e      	ldr	r6, [r3, #8]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006dc2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8006e34 <rt_test_011_006_execute+0x84>
  test_set_step(1);
 8006dc6:	2301      	movs	r3, #1
static void rt_test_011_006_execute(void) {
 8006dc8:	b082      	sub	sp, #8
  tprio_t prio = chThdGetPriorityX() + 1;
 8006dca:	441e      	add	r6, r3
  test_set_step(1);
 8006dcc:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 8006dd0:	f7fc f9ce 	bl	8003170 <test_wait_tick>
    n = 0;
 8006dd4:	2400      	movs	r4, #0
    start = test_wait_tick();
 8006dd6:	4605      	mov	r5, r0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006dd8:	4627      	mov	r7, r4
 8006dda:	464b      	mov	r3, r9
 8006ddc:	4632      	mov	r2, r6
 8006dde:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006de2:	9700      	str	r7, [sp, #0]
 8006de4:	4640      	mov	r0, r8
 8006de6:	f7fb fb33 	bl	8002450 <chThdCreateStatic>
 8006dea:	f7ff ffa9 	bl	8006d40 <chThdRelease>
 8006dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8006df2:	f242 720f 	movw	r2, #9999	; 0x270f
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	1b5b      	subs	r3, r3, r5
 8006dfa:	4293      	cmp	r3, r2
      n++;
 8006dfc:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8006e00:	d9eb      	bls.n	8006dda <rt_test_011_006_execute+0x2a>
  test_set_step(2);
 8006e02:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8006e04:	4807      	ldr	r0, [pc, #28]	; (8006e24 <rt_test_011_006_execute+0x74>)
  test_set_step(2);
 8006e06:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 8006e0a:	f7fa f8e1 	bl	8000fd0 <test_print>
    test_printn(n);
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f7fa f80e 	bl	8000e30 <test_printn>
    test_println(" threads/S");
 8006e14:	4804      	ldr	r0, [pc, #16]	; (8006e28 <rt_test_011_006_execute+0x78>)
}
 8006e16:	b002      	add	sp, #8
 8006e18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" threads/S");
 8006e1c:	f7fa b8b8 	b.w	8000f90 <test_println>
 8006e20:	2000142c 	.word	0x2000142c
 8006e24:	0800a694 	.word	0x0800a694
 8006e28:	0800aa7c 	.word	0x0800aa7c
 8006e2c:	20001f1c 	.word	0x20001f1c
 8006e30:	080039b1 	.word	0x080039b1
 8006e34:	20001808 	.word	0x20001808
	...

08006e40 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4604      	mov	r4, r0
 8006e44:	2320      	movs	r3, #32
 8006e46:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 8006e4a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8006e4e:	2b0f      	cmp	r3, #15
 8006e50:	d007      	beq.n	8006e62 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
 8006e52:	4b08      	ldr	r3, [pc, #32]	; (8006e74 <chThdWait+0x34>)
  tp->queue.next = tlp->next;
 8006e54:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006e56:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8006e58:	2009      	movs	r0, #9
 8006e5a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 8006e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e5e:	f7fb fb67 	bl	8002530 <chSchGoSleepS>
  msg = tp->u.exitcode;
 8006e62:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006e64:	2300      	movs	r3, #0
 8006e66:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f7ff ff68 	bl	8006d40 <chThdRelease>
}
 8006e70:	4628      	mov	r0, r5
 8006e72:	bd38      	pop	{r3, r4, r5, pc}
 8006e74:	2000142c 	.word	0x2000142c
	...

08006e80 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8006e80:	4bbb      	ldr	r3, [pc, #748]	; (8007170 <main+0x2f0>)
  PWR->CR |= PWR_CR_DBP;
 8006e82:	48bc      	ldr	r0, [pc, #752]	; (8007174 <main+0x2f4>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8006e84:	691a      	ldr	r2, [r3, #16]
 8006e86:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 8006e8a:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
int main(void) {
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	611a      	str	r2, [r3, #16]
 8006e92:	691a      	ldr	r2, [r3, #16]
 8006e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e98:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8006e9a:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8006e9e:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8006ea0:	695a      	ldr	r2, [r3, #20]
 8006ea2:	615c      	str	r4, [r3, #20]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	6959      	ldr	r1, [r3, #20]
 8006ea8:	615a      	str	r2, [r3, #20]
 8006eaa:	6959      	ldr	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8006eac:	6a19      	ldr	r1, [r3, #32]
 8006eae:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8006eb2:	6219      	str	r1, [r3, #32]
 8006eb4:	6a19      	ldr	r1, [r3, #32]
 8006eb6:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8006eba:	6219      	str	r1, [r3, #32]
 8006ebc:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 8006ebe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006ec0:	625c      	str	r4, [r3, #36]	; 0x24
 8006ec2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006ec4:	625a      	str	r2, [r3, #36]	; 0x24
 8006ec6:	6a59      	ldr	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8006ec8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006eca:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006ece:	6419      	str	r1, [r3, #64]	; 0x40
 8006ed0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8006ed2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006ed6:	6619      	str	r1, [r3, #96]	; 0x60
 8006ed8:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8006eda:	6801      	ldr	r1, [r0, #0]
 8006edc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006ee0:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8006ee2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006ee4:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8006ee8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006eec:	b088      	sub	sp, #32
 8006eee:	d003      	beq.n	8006ef8 <main+0x78>
    RCC->BDCR = RCC_BDCR_BDRST;
 8006ef0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006ef4:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8006ef6:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8006ef8:	4e9e      	ldr	r6, [pc, #632]	; (8007174 <main+0x2f4>)
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8006efa:	4d9f      	ldr	r5, [pc, #636]	; (8007178 <main+0x2f8>)
 8006efc:	6871      	ldr	r1, [r6, #4]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 8006efe:	489f      	ldr	r0, [pc, #636]	; (800717c <main+0x2fc>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006f00:	4a9f      	ldr	r2, [pc, #636]	; (8007180 <main+0x300>)

#if STM32_PWM_USE_TIM4
  /* Driver initialization.*/
  pwmObjectInit(&PWMD4);
  PWMD4.channels = STM32_TIM4_CHANNELS;
  PWMD4.tim = STM32_TIM4;
 8006f02:	4ba0      	ldr	r3, [pc, #640]	; (8007184 <main+0x304>)
 8006f04:	6183      	str	r3, [r0, #24]
 8006f06:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8006f0a:	6071      	str	r1, [r6, #4]
 8006f0c:	2360      	movs	r3, #96	; 0x60
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f12:	462c      	mov	r4, r5
 8006f14:	2740      	movs	r7, #64	; 0x40
 8006f16:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8006f1a:	f44f 7600 	mov.w	r6, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006f1e:	f882 3306 	strb.w	r3, [r2, #774]	; 0x306
 8006f22:	f8df c298 	ldr.w	ip, [pc, #664]	; 80071bc <main+0x33c>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006f26:	f8c2 7180 	str.w	r7, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006f2a:	6017      	str	r7, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006f2c:	f882 3307 	strb.w	r3, [r2, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006f30:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8006f34:	f8c2 e180 	str.w	lr, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006f38:	f8c2 e000 	str.w	lr, [r2]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006f3c:	f882 3308 	strb.w	r3, [r2, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006f40:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006f44:	6011      	str	r1, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006f46:	f882 3309 	strb.w	r3, [r2, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006f4a:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006f4e:	6016      	str	r6, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006f50:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006f54:	f882 330a 	strb.w	r3, [r2, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006f58:	f8c2 7180 	str.w	r7, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006f5c:	6017      	str	r7, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006f5e:	f882 3317 	strb.w	r3, [r2, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006f62:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006f66:	6016      	str	r6, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006f68:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006f6c:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006f70:	6051      	str	r1, [r2, #4]
 8006f72:	f844 cb04 	str.w	ip, [r4], #4
  pwmp->config   = NULL;
 8006f76:	2100      	movs	r1, #0
  pwmp->state    = PWM_STOP;
 8006f78:	f04f 0801 	mov.w	r8, #1

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8006f7c:	4b7c      	ldr	r3, [pc, #496]	; (8007170 <main+0x2f0>)
 8006f7e:	f880 8000 	strb.w	r8, [r0]
  tqp->next = (thread_t *)tqp;
 8006f82:	f105 070c 	add.w	r7, r5, #12
  PWMD4.channels = STM32_TIM4_CHANNELS;
 8006f86:	2604      	movs	r6, #4
  oqp->q_counter = size;
 8006f88:	f04f 0c10 	mov.w	ip, #16
  esp->next = (event_listener_t *)esp;
 8006f8c:	606c      	str	r4, [r5, #4]
 8006f8e:	60ef      	str	r7, [r5, #12]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8006f90:	f885 8008 	strb.w	r8, [r5, #8]
  pwmp->config   = NULL;
 8006f94:	6041      	str	r1, [r0, #4]
  pwmp->enabled  = 0;
 8006f96:	60c1      	str	r1, [r0, #12]
 8006f98:	7406      	strb	r6, [r0, #16]
  tqp->prev = (thread_t *)tqp;
 8006f9a:	612f      	str	r7, [r5, #16]
  iqp->q_counter = 0;
 8006f9c:	6169      	str	r1, [r5, #20]
  oqp->q_counter = size;
 8006f9e:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
 8006fa2:	6c18      	ldr	r0, [r3, #64]	; 0x40
  iqp->q_notify  = infy;
 8006fa4:	62a9      	str	r1, [r5, #40]	; 0x28
 8006fa6:	ea40 0008 	orr.w	r0, r0, r8
 8006faa:	6418      	str	r0, [r3, #64]	; 0x40
 8006fac:	6e18      	ldr	r0, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8006fae:	f8df c210 	ldr.w	ip, [pc, #528]	; 80071c0 <main+0x340>
  iqp->q_link    = link;
 8006fb2:	62ed      	str	r5, [r5, #44]	; 0x2c
  ST_ENABLE_CLOCK();
 8006fb4:	ea40 0008 	orr.w	r0, r0, r8
 8006fb8:	6618      	str	r0, [r3, #96]	; 0x60
 8006fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 8006fbc:	f8dc 0008 	ldr.w	r0, [ip, #8]
  oqp->q_link    = link;
 8006fc0:	652d      	str	r5, [r5, #80]	; 0x50
  oqp->q_top     = bp + size;
 8006fc2:	f105 0974 	add.w	r9, r5, #116	; 0x74
 8006fc6:	f8c5 9040 	str.w	r9, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 8006fca:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 80071c4 <main+0x344>
 8006fce:	f8c5 904c 	str.w	r9, [r5, #76]	; 0x4c
 8006fd2:	ea40 0008 	orr.w	r0, r0, r8
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8006fd6:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 80071c8 <main+0x348>
 8006fda:	f8c5 9074 	str.w	r9, [r5, #116]	; 0x74
 8006fde:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8006fe2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006fe6:	f242 0ccf 	movw	ip, #8399	; 0x20cf
 8006fea:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8006fee:	f04f 3cff 	mov.w	ip, #4294967295
 8006ff2:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8006ff6:	6181      	str	r1, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8006ff8:	6341      	str	r1, [r0, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8006ffa:	60c1      	str	r1, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 8006ffc:	6041      	str	r1, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8006ffe:	f8c0 8014 	str.w	r8, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8007002:	f8c0 8000 	str.w	r8, [r0]
  iqp->q_buffer  = bp;
 8007006:	f105 0054 	add.w	r0, r5, #84	; 0x54
  iqp->q_wrptr   = bp;
 800700a:	e9c5 0008 	strd	r0, r0, [r5, #32]
  iqp->q_buffer  = bp;
 800700e:	61a8      	str	r0, [r5, #24]
  iqp->q_top     = bp + size;
 8007010:	f105 0064 	add.w	r0, r5, #100	; 0x64
  tqp->next = (thread_t *)tqp;
 8007014:	4c5c      	ldr	r4, [pc, #368]	; (8007188 <main+0x308>)
 8007016:	61e8      	str	r0, [r5, #28]
  oqp->q_wrptr   = bp;
 8007018:	e9c5 0011 	strd	r0, r0, [r5, #68]	; 0x44
  oqp->q_buffer  = bp;
 800701c:	63e8      	str	r0, [r5, #60]	; 0x3c
 800701e:	f105 0030 	add.w	r0, r5, #48	; 0x30
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8007022:	4f5a      	ldr	r7, [pc, #360]	; (800718c <main+0x30c>)
 8007024:	4b5a      	ldr	r3, [pc, #360]	; (8007190 <main+0x310>)
  ch_memcore.basemem = __heap_base__;
 8007026:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071cc <main+0x34c>
  tqp->prev = (thread_t *)tqp;
 800702a:	e9c5 000c 	strd	r0, r0, [r5, #48]	; 0x30
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800702e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007032:	f882 e31c 	strb.w	lr, [r2, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007036:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
 800703a:	6064      	str	r4, [r4, #4]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800703c:	6010      	str	r0, [r2, #0]
 800703e:	4855      	ldr	r0, [pc, #340]	; (8007194 <main+0x314>)
 8007040:	6038      	str	r0, [r7, #0]
  tqp->next = (thread_t *)tqp;
 8007042:	f107 000c 	add.w	r0, r7, #12
  tqp->prev = (thread_t *)tqp;
 8007046:	e9c7 0003 	strd	r0, r0, [r7, #12]
  H_PAGES(&default_heap.header) = 0;
 800704a:	e9c7 1101 	strd	r1, r1, [r7, #4]
  mp->owner = NULL;
 800704e:	6179      	str	r1, [r7, #20]
  dlp->next = (dyn_element_t *)dlp;
 8007050:	f103 0710 	add.w	r7, r3, #16
  mp->object_size = size;
 8007054:	2014      	movs	r0, #20
 8007056:	611f      	str	r7, [r3, #16]
 8007058:	f103 0724 	add.w	r7, r3, #36	; 0x24
 800705c:	6198      	str	r0, [r3, #24]
 800705e:	625f      	str	r7, [r3, #36]	; 0x24
 8007060:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8007064:	271c      	movs	r7, #28
 8007066:	6298      	str	r0, [r3, #40]	; 0x28
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8007068:	19e0      	adds	r0, r4, r7
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 800706a:	e9c4 0007 	strd	r0, r0, [r4, #28]
 800706e:	631f      	str	r7, [r3, #48]	; 0x30
  ch_memcore.topmem  = __heap_end__;
 8007070:	4849      	ldr	r0, [pc, #292]	; (8007198 <main+0x318>)
  ch_memcore.basemem = __heap_base__;
 8007072:	4f4a      	ldr	r7, [pc, #296]	; (800719c <main+0x31c>)
  mp->provider = provider;
 8007074:	4a4a      	ldr	r2, [pc, #296]	; (80071a0 <main+0x320>)
 8007076:	621a      	str	r2, [r3, #32]
  ch_memcore.topmem  = __heap_end__;
 8007078:	e9c8 7000 	strd	r7, r0, [r8]
  tmp->cumulative = (rttime_t)0;
 800707c:	f04f 0900 	mov.w	r9, #0
 8007080:	f04f 0800 	mov.w	r8, #0
 8007084:	f103 073c 	add.w	r7, r3, #60	; 0x3c
 8007088:	f103 0040 	add.w	r0, r3, #64	; 0x40
  ch.rlist.older = (thread_t *)&ch.rlist;
 800708c:	e9c4 4404 	strd	r4, r4, [r4, #16]
  ch.vtlist.lasttime = (systime_t)0;
 8007090:	e9c4 c109 	strd	ip, r1, [r4, #36]	; 0x24
 8007094:	e9c3 3300 	strd	r3, r3, [r3]
  tqp->next = (thread_t *)tqp;
 8007098:	6024      	str	r4, [r4, #0]
  ch.rlist.prio = NOPRIO;
 800709a:	60a1      	str	r1, [r4, #8]
 800709c:	6099      	str	r1, [r3, #8]
  mp->next = NULL;
 800709e:	6159      	str	r1, [r3, #20]
  mp->align = align;
 80070a0:	61de      	str	r6, [r3, #28]
  mp->next = NULL;
 80070a2:	62d9      	str	r1, [r3, #44]	; 0x2c
  mp->align = align;
 80070a4:	635e      	str	r6, [r3, #52]	; 0x34
  mp->provider = provider;
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38
 80070a8:	e9cd 8906 	strd	r8, r9, [sp, #24]
  tmp->last       = (rtcnt_t)0;
 80070ac:	e9cd 1103 	strd	r1, r1, [sp, #12]
 80070b0:	e9c3 700f 	strd	r7, r0, [r3, #60]	; 0x3c
 80070b4:	f103 0244 	add.w	r2, r3, #68	; 0x44
  tmp->best       = (rtcnt_t)-1;
 80070b8:	f8cd c008 	str.w	ip, [sp, #8]
  ch.tm.offset = (rtcnt_t)0;
 80070bc:	6761      	str	r1, [r4, #116]	; 0x74
  tmp->n          = (ucnt_t)0;
 80070be:	9105      	str	r1, [sp, #20]
 80070c0:	645a      	str	r2, [r3, #68]	; 0x44
    chTMStartMeasurementX(&tm);
 80070c2:	a802      	add	r0, sp, #8
 80070c4:	f7fa f9b4 	bl	8001430 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 80070c8:	a802      	add	r0, sp, #8
 80070ca:	f7fa f989 	bl	80013e0 <chTMStopMeasurementX>
  } while (i > 0U);
 80070ce:	3e01      	subs	r6, #1
 80070d0:	d1f7      	bne.n	80070c2 <main+0x242>
  ch.tm.offset = tm.best;
 80070d2:	9902      	ldr	r1, [sp, #8]
  REG_INSERT(tp);
 80070d4:	6962      	ldr	r2, [r4, #20]
 80070d6:	4b33      	ldr	r3, [pc, #204]	; (80071a4 <main+0x324>)
 80070d8:	6761      	str	r1, [r4, #116]	; 0x74
  tp->prio      = prio;
 80070da:	2180      	movs	r1, #128	; 0x80
 80070dc:	63a1      	str	r1, [r4, #56]	; 0x38
  tp->realprio  = prio;
 80070de:	66e1      	str	r1, [r4, #108]	; 0x6c
  tp->name      = name;
 80070e0:	4831      	ldr	r0, [pc, #196]	; (80071a8 <main+0x328>)
 80070e2:	64a0      	str	r0, [r4, #72]	; 0x48
  tp->refs      = (trefs_t)1;
 80070e4:	2101      	movs	r1, #1
  REG_INSERT(tp);
 80070e6:	e9c4 4210 	strd	r4, r2, [r4, #64]	; 0x40
  tp->epending  = (eventmask_t)0;
 80070ea:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
  tp->flags     = CH_FLAG_MODE_STATIC;
 80070ee:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  tp->refs      = (trefs_t)1;
 80070f2:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
  tlp->next = (thread_t *)tlp;
 80070f6:	f103 0028 	add.w	r0, r3, #40	; 0x28
  REG_INSERT(tp);
 80070fa:	6113      	str	r3, [r2, #16]
  tqp->next = (thread_t *)tqp;
 80070fc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8007100:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8007104:	e9c4 0216 	strd	r0, r2, [r4, #88]	; 0x58
  currp->state = CH_STATE_CURRENT;
 8007108:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
  currp->wabase = NULL;
 800710c:	64e6      	str	r6, [r4, #76]	; 0x4c
  tqp->prev = (thread_t *)tqp;
 800710e:	6622      	str	r2, [r4, #96]	; 0x60
 8007110:	2420      	movs	r4, #32
 8007112:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 8007116:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007118:	4b24      	ldr	r3, [pc, #144]	; (80071ac <main+0x32c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800711a:	4a25      	ldr	r2, [pc, #148]	; (80071b0 <main+0x330>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800711c:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800711e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 8007122:	4001      	ands	r1, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007124:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 8007128:	430a      	orrs	r2, r1
 800712a:	f6a0 300f 	subw	r0, r0, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800712e:	60da      	str	r2, [r3, #12]
 8007130:	68c2      	ldr	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007132:	4920      	ldr	r1, [pc, #128]	; (80071b4 <main+0x334>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007134:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007138:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800713a:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800713c:	2010      	movs	r0, #16
 800713e:	f042 0201 	orr.w	r2, r2, #1
 8007142:	600a      	str	r2, [r1, #0]
 8007144:	77d8      	strb	r0, [r3, #31]
 8007146:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800714a:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
 800714e:	b662      	cpsie	i
    (void) chThdCreate(&idle_descriptor);
 8007150:	4819      	ldr	r0, [pc, #100]	; (80071b8 <main+0x338>)
 8007152:	f7fb f9dd 	bl	8002510 <chThdCreate>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007156:	f384 8811 	msr	BASEPRI, r4
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800715a:	7a2b      	ldrb	r3, [r5, #8]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d142      	bne.n	80071e6 <main+0x366>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8007160:	4b03      	ldr	r3, [pc, #12]	; (8007170 <main+0x2f0>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007162:	4a07      	ldr	r2, [pc, #28]	; (8007180 <main+0x300>)
 8007164:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007166:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800716a:	6419      	str	r1, [r3, #64]	; 0x40
 800716c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800716e:	e02f      	b.n	80071d0 <main+0x350>
 8007170:	40023800 	.word	0x40023800
 8007174:	40007000 	.word	0x40007000
 8007178:	200008fc 	.word	0x200008fc
 800717c:	200008e0 	.word	0x200008e0
 8007180:	e000e100 	.word	0xe000e100
 8007184:	40000800 	.word	0x40000800
 8007188:	2000142c 	.word	0x2000142c
 800718c:	200015d0 	.word	0x200015d0
 8007190:	200014a4 	.word	0x200014a4
 8007194:	08000871 	.word	0x08000871
 8007198:	20020000 	.word	0x20020000
 800719c:	200024d0 	.word	0x200024d0
 80071a0:	08001121 	.word	0x08001121
 80071a4:	2000145c 	.word	0x2000145c
 80071a8:	0800b7d4 	.word	0x0800b7d4
 80071ac:	e000ed00 	.word	0xe000ed00
 80071b0:	05fa0300 	.word	0x05fa0300
 80071b4:	e0001000 	.word	0xe0001000
 80071b8:	0800b7f8 	.word	0x0800b7f8
 80071bc:	0800bf60 	.word	0x0800bf60
 80071c0:	e0042000 	.word	0xe0042000
 80071c4:	080008b1 	.word	0x080008b1
 80071c8:	40004400 	.word	0x40004400
 80071cc:	200015c8 	.word	0x200015c8
 80071d0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80071d4:	6619      	str	r1, [r3, #96]	; 0x60
 80071d6:	20c0      	movs	r0, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80071d8:	2140      	movs	r1, #64	; 0x40
 80071da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80071dc:	f882 0326 	strb.w	r0, [r2, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80071e0:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80071e4:	6051      	str	r1, [r2, #4]
  USART_TypeDef *u = sdp->usart;
 80071e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80071e8:	4a3c      	ldr	r2, [pc, #240]	; (80072dc <main+0x45c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d073      	beq.n	80072d6 <main+0x456>
 80071ee:	483c      	ldr	r0, [pc, #240]	; (80072e0 <main+0x460>)
    fck = STM32_PCLK2 / config->speed;
 80071f0:	f240 4245 	movw	r2, #1093	; 0x445
 80071f4:	f640 018b 	movw	r1, #2187	; 0x88b
 80071f8:	4283      	cmp	r3, r0
 80071fa:	bf08      	it	eq
 80071fc:	460a      	moveq	r2, r1
  u->BRR = fck;
 80071fe:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8007200:	2440      	movs	r4, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8007202:	2001      	movs	r0, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8007204:	f242 112c 	movw	r1, #8492	; 0x212c
  u->SR = 0;
 8007208:	2200      	movs	r2, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800720a:	611c      	str	r4, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800720c:	6158      	str	r0, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800720e:	60d9      	str	r1, [r3, #12]
    sdp->rxmask = 0xFF;
 8007210:	20ff      	movs	r0, #255	; 0xff
  u->SR = 0;
 8007212:	601a      	str	r2, [r3, #0]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8007214:	2102      	movs	r1, #2
  (void)u->SR;  /* SR reset step 1.*/
 8007216:	681c      	ldr	r4, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8007218:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 800721a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800721e:	7229      	strb	r1, [r5, #8]
 8007220:	f382 8811 	msr	BASEPRI, r2
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8007224:	2004      	movs	r0, #4
 8007226:	f7f9 fa83 	bl	8000730 <_pal_lld_setgroupmode.constprop.0>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 800722a:	2008      	movs	r0, #8
 800722c:	f7f9 fa80 	bl	8000730 <_pal_lld_setgroupmode.constprop.0>
                                               _thd_start, this));
 8007230:	482c      	ldr	r0, [pc, #176]	; (80072e4 <main+0x464>)
 8007232:	4b2d      	ldr	r3, [pc, #180]	; (80072e8 <main+0x468>)
 8007234:	9000      	str	r0, [sp, #0]
 8007236:	2294      	movs	r2, #148	; 0x94
 8007238:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800723c:	3008      	adds	r0, #8
 800723e:	f7fb f907 	bl	8002450 <chThdCreateStatic>
  sref = server_thread.start(NORMALPRIO + 20);
 8007242:	4a2a      	ldr	r2, [pc, #168]	; (80072ec <main+0x46c>)
 8007244:	4b28      	ldr	r3, [pc, #160]	; (80072e8 <main+0x468>)
 8007246:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8007308 <main+0x488>
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 800724a:	4f29      	ldr	r7, [pc, #164]	; (80072f0 <main+0x470>)
 800724c:	4e26      	ldr	r6, [pc, #152]	; (80072e8 <main+0x468>)
 800724e:	4601      	mov	r1, r0
 8007250:	4828      	ldr	r0, [pc, #160]	; (80072f4 <main+0x474>)
 8007252:	9000      	str	r0, [sp, #0]
  sref = server_thread.start(NORMALPRIO + 20);
 8007254:	6011      	str	r1, [r2, #0]
 8007256:	3008      	adds	r0, #8
 8007258:	228a      	movs	r2, #138	; 0x8a
 800725a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800725e:	f7fb f8f7 	bl	8002450 <chThdCreateStatic>
 8007262:	4825      	ldr	r0, [pc, #148]	; (80072f8 <main+0x478>)
 8007264:	4b20      	ldr	r3, [pc, #128]	; (80072e8 <main+0x468>)
 8007266:	9000      	str	r0, [sp, #0]
 8007268:	228a      	movs	r2, #138	; 0x8a
 800726a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800726e:	3008      	adds	r0, #8
 8007270:	f7fb f8ee 	bl	8002450 <chThdCreateStatic>
 8007274:	4821      	ldr	r0, [pc, #132]	; (80072fc <main+0x47c>)
 8007276:	4b1c      	ldr	r3, [pc, #112]	; (80072e8 <main+0x468>)
 8007278:	9000      	str	r0, [sp, #0]
 800727a:	228a      	movs	r2, #138	; 0x8a
 800727c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007280:	3008      	adds	r0, #8
 8007282:	f7fb f8e5 	bl	8002450 <chThdCreateStatic>
 8007286:	481e      	ldr	r0, [pc, #120]	; (8007300 <main+0x480>)
 8007288:	4b17      	ldr	r3, [pc, #92]	; (80072e8 <main+0x468>)
 800728a:	9000      	str	r0, [sp, #0]
 800728c:	228a      	movs	r2, #138	; 0x8a
 800728e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007292:	3008      	adds	r0, #8
 8007294:	f7fb f8dc 	bl	8002450 <chThdCreateStatic>
 8007298:	481a      	ldr	r0, [pc, #104]	; (8007304 <main+0x484>)
 800729a:	9000      	str	r0, [sp, #0]
 800729c:	4b12      	ldr	r3, [pc, #72]	; (80072e8 <main+0x468>)
 800729e:	3008      	adds	r0, #8
 80072a0:	228a      	movs	r2, #138	; 0x8a
 80072a2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80072a6:	f7fb f8d3 	bl	8002450 <chThdCreateStatic>
 80072aa:	f108 0508 	add.w	r5, r8, #8
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 80072ae:	693c      	ldr	r4, [r7, #16]
 80072b0:	07e4      	lsls	r4, r4, #31
 80072b2:	4633      	mov	r3, r6
 80072b4:	f04f 0280 	mov.w	r2, #128	; 0x80
 80072b8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80072bc:	4628      	mov	r0, r5
 80072be:	d505      	bpl.n	80072cc <main+0x44c>
 80072c0:	f8cd 8000 	str.w	r8, [sp]
 80072c4:	f7fb f8c4 	bl	8002450 <chThdCreateStatic>
      msg_t msg = chThdWait(tp);
 80072c8:	f7ff fdba 	bl	8006e40 <chThdWait>
      chThdSleep(interval);
 80072cc:	f241 3088 	movw	r0, #5000	; 0x1388
 80072d0:	f7fb fca6 	bl	8002c20 <chThdSleep>
 80072d4:	e7eb      	b.n	80072ae <main+0x42e>
    fck = STM32_PCLK2 / config->speed;
 80072d6:	f640 028b 	movw	r2, #2187	; 0x88b
 80072da:	e790      	b.n	80071fe <main+0x37e>
 80072dc:	40011000 	.word	0x40011000
 80072e0:	40011400 	.word	0x40011400
 80072e4:	20000978 	.word	0x20000978
 80072e8:	08000861 	.word	0x08000861
 80072ec:	20000b48 	.word	0x20000b48
 80072f0:	40020000 	.word	0x40020000
 80072f4:	20000e78 	.word	0x20000e78
 80072f8:	20000fd0 	.word	0x20000fd0
 80072fc:	20001128 	.word	0x20001128
 8007300:	20001280 	.word	0x20001280
 8007304:	20000d20 	.word	0x20000d20
 8007308:	20000b50 	.word	0x20000b50
 800730c:	00000000 	.word	0x00000000

08007310 <oslib_test_005_001_execute>:
 *   emitted tokens.
 * - [5.1.3] Waiting for the thread to terminate-.
 * .
 */

static void oslib_test_005_001_execute(void) {
 8007310:	b570      	push	{r4, r5, r6, lr}
  return ch.rlist.current;
 8007312:	4a4d      	ldr	r2, [pc, #308]	; (8007448 <oslib_test_005_001_execute+0x138>)
  thread_t *tp;

  /* [5.1.1] Starting the dispatcher thread.*/
  test_set_step(1);
  {
    thread_descriptor_t td = {
 8007314:	4b4d      	ldr	r3, [pc, #308]	; (800744c <oslib_test_005_001_execute+0x13c>)
  return chThdGetSelfX()->prio;
 8007316:	6992      	ldr	r2, [r2, #24]
 8007318:	494d      	ldr	r1, [pc, #308]	; (8007450 <oslib_test_005_001_execute+0x140>)
      .name  = "dispatcher",
      .wbase = waThread1,
      .wend  = THD_WORKING_AREA_END(waThread1),
      .prio  = chThdGetPriorityX() + 1,
 800731a:	6892      	ldr	r2, [r2, #8]
  test_set_step(1);
 800731c:	4c4d      	ldr	r4, [pc, #308]	; (8007454 <oslib_test_005_001_execute+0x144>)
    thread_descriptor_t td = {
 800731e:	4d4e      	ldr	r5, [pc, #312]	; (8007458 <oslib_test_005_001_execute+0x148>)
static void oslib_test_005_001_execute(void) {
 8007320:	b08a      	sub	sp, #40	; 0x28
      .prio  = chThdGetPriorityX() + 1,
 8007322:	3201      	adds	r2, #1
    thread_descriptor_t td = {
 8007324:	9305      	str	r3, [sp, #20]
 8007326:	9207      	str	r2, [sp, #28]
 8007328:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800732c:	2200      	movs	r2, #0
  test_set_step(1);
 800732e:	2601      	movs	r6, #1
      .funcp = Thread1,
      .arg   = NULL
    };
    tp = chThdCreate(&td);
 8007330:	a804      	add	r0, sp, #16
    thread_descriptor_t td = {
 8007332:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8007336:	9306      	str	r3, [sp, #24]
 8007338:	9504      	str	r5, [sp, #16]
  test_set_step(1);
 800733a:	6026      	str	r6, [r4, #0]
    tp = chThdCreate(&td);
 800733c:	f7fb f8e8 	bl	8002510 <chThdCreate>
  }
  test_end_step(1);

  /* [5.1.2] Calling the default veneers, checking the result and the
     emitted tokens.*/
  test_set_step(2);
 8007340:	2302      	movs	r3, #2
 * @param[in] func      pointer to the function to be called
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect0(thread_t *tp, delegate_fn0_t func) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 8007342:	4946      	ldr	r1, [pc, #280]	; (800745c <oslib_test_005_001_execute+0x14c>)
 8007344:	4a46      	ldr	r2, [pc, #280]	; (8007460 <oslib_test_005_001_execute+0x150>)
 8007346:	6023      	str	r3, [r4, #0]
    tp = chThdCreate(&td);
 8007348:	4605      	mov	r5, r0
 800734a:	f7fc f889 	bl	8003460 <chDelegateCallVeneer>
  {
    int retval;

    retval = chDelegateCallDirect0(tp, (delegate_fn0_t)dis_func0);
    test_assert(retval == 0x55AA, "invalid return value");
 800734e:	f245 53aa 	movw	r3, #21930	; 0x55aa
 8007352:	1ac0      	subs	r0, r0, r3
 8007354:	fab0 f080 	clz	r0, r0
 8007358:	4942      	ldr	r1, [pc, #264]	; (8007464 <oslib_test_005_001_execute+0x154>)
 800735a:	0940      	lsrs	r0, r0, #5
 800735c:	f7f9 fcd0 	bl	8000d00 <_test_assert>
 8007360:	b108      	cbz	r0, 8007366 <oslib_test_005_001_execute+0x56>
  {
    msg_t msg = chThdWait(tp);
    test_assert(msg == 0x0FA5, "invalid exit code");
  }
  test_end_step(3);
}
 8007362:	b00a      	add	sp, #40	; 0x28
 8007364:	bd70      	pop	{r4, r5, r6, pc}
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect1(thread_t *tp, delegate_fn1_t func,
                                          msg_t p1) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn1, func, p1);
 8007366:	4940      	ldr	r1, [pc, #256]	; (8007468 <oslib_test_005_001_execute+0x158>)
 8007368:	4a40      	ldr	r2, [pc, #256]	; (800746c <oslib_test_005_001_execute+0x15c>)
 800736a:	2341      	movs	r3, #65	; 0x41
 800736c:	4628      	mov	r0, r5
 800736e:	f7fc f877 	bl	8003460 <chDelegateCallVeneer>
    test_assert(retval == (int)'A', "invalid return value");
 8007372:	f1a0 0041 	sub.w	r0, r0, #65	; 0x41
 8007376:	fab0 f080 	clz	r0, r0
 800737a:	493a      	ldr	r1, [pc, #232]	; (8007464 <oslib_test_005_001_execute+0x154>)
 800737c:	0940      	lsrs	r0, r0, #5
 800737e:	f7f9 fcbf 	bl	8000d00 <_test_assert>
 8007382:	2800      	cmp	r0, #0
 8007384:	d1ed      	bne.n	8007362 <oslib_test_005_001_execute+0x52>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect2(thread_t *tp, delegate_fn2_t func,
                                          msg_t p1, msg_t p2) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn2, func, p1, p2);
 8007386:	2343      	movs	r3, #67	; 0x43
 8007388:	4939      	ldr	r1, [pc, #228]	; (8007470 <oslib_test_005_001_execute+0x160>)
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	4a39      	ldr	r2, [pc, #228]	; (8007474 <oslib_test_005_001_execute+0x164>)
 800738e:	2342      	movs	r3, #66	; 0x42
 8007390:	4628      	mov	r0, r5
 8007392:	f7fc f865 	bl	8003460 <chDelegateCallVeneer>
    test_assert(retval == (int)'B', "invalid return value");
 8007396:	f1a0 0042 	sub.w	r0, r0, #66	; 0x42
 800739a:	fab0 f080 	clz	r0, r0
 800739e:	4931      	ldr	r1, [pc, #196]	; (8007464 <oslib_test_005_001_execute+0x154>)
 80073a0:	0940      	lsrs	r0, r0, #5
 80073a2:	f7f9 fcad 	bl	8000d00 <_test_assert>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d1db      	bne.n	8007362 <oslib_test_005_001_execute+0x52>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect3(thread_t *tp, delegate_fn3_t func,
                                          msg_t p1, msg_t p2, msg_t p3) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn3, func, p1, p2, p3);
 80073aa:	2345      	movs	r3, #69	; 0x45
 80073ac:	2246      	movs	r2, #70	; 0x46
 80073ae:	e9cd 3200 	strd	r3, r2, [sp]
 80073b2:	4931      	ldr	r1, [pc, #196]	; (8007478 <oslib_test_005_001_execute+0x168>)
 80073b4:	4a31      	ldr	r2, [pc, #196]	; (800747c <oslib_test_005_001_execute+0x16c>)
 80073b6:	2344      	movs	r3, #68	; 0x44
 80073b8:	4628      	mov	r0, r5
 80073ba:	f7fc f851 	bl	8003460 <chDelegateCallVeneer>
    test_assert(retval == (int)'D', "invalid return value");
 80073be:	f1a0 0044 	sub.w	r0, r0, #68	; 0x44
 80073c2:	fab0 f080 	clz	r0, r0
 80073c6:	4927      	ldr	r1, [pc, #156]	; (8007464 <oslib_test_005_001_execute+0x154>)
 80073c8:	0940      	lsrs	r0, r0, #5
 80073ca:	f7f9 fc99 	bl	8000d00 <_test_assert>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d1c7      	bne.n	8007362 <oslib_test_005_001_execute+0x52>
 */
static inline msg_t chDelegateCallDirect4(thread_t *tp, delegate_fn4_t func,
                                          msg_t p1, msg_t p2, msg_t p3,
                                          msg_t p4) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn4, func, p1, p2, p3, p4);
 80073d2:	2148      	movs	r1, #72	; 0x48
 80073d4:	2249      	movs	r2, #73	; 0x49
 80073d6:	234a      	movs	r3, #74	; 0x4a
 80073d8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 80073dc:	4628      	mov	r0, r5
 80073de:	4928      	ldr	r1, [pc, #160]	; (8007480 <oslib_test_005_001_execute+0x170>)
 80073e0:	4a28      	ldr	r2, [pc, #160]	; (8007484 <oslib_test_005_001_execute+0x174>)
 80073e2:	2347      	movs	r3, #71	; 0x47
 80073e4:	f7fc f83c 	bl	8003460 <chDelegateCallVeneer>
    test_assert(retval == (int)'G', "invalid return value");
 80073e8:	f1a0 0047 	sub.w	r0, r0, #71	; 0x47
 80073ec:	fab0 f080 	clz	r0, r0
 80073f0:	491c      	ldr	r1, [pc, #112]	; (8007464 <oslib_test_005_001_execute+0x154>)
 80073f2:	0940      	lsrs	r0, r0, #5
 80073f4:	f7f9 fc84 	bl	8000d00 <_test_assert>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d1b2      	bne.n	8007362 <oslib_test_005_001_execute+0x52>
  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 80073fc:	4917      	ldr	r1, [pc, #92]	; (800745c <oslib_test_005_001_execute+0x14c>)
 80073fe:	4a22      	ldr	r2, [pc, #136]	; (8007488 <oslib_test_005_001_execute+0x178>)
 8007400:	4628      	mov	r0, r5
 8007402:	f7fc f82d 	bl	8003460 <chDelegateCallVeneer>
    test_assert(retval == 0xAA55, "invalid return value");
 8007406:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800740a:	1ac0      	subs	r0, r0, r3
 800740c:	fab0 f080 	clz	r0, r0
 8007410:	4914      	ldr	r1, [pc, #80]	; (8007464 <oslib_test_005_001_execute+0x154>)
 8007412:	0940      	lsrs	r0, r0, #5
 8007414:	f7f9 fc74 	bl	8000d00 <_test_assert>
 8007418:	2800      	cmp	r0, #0
 800741a:	d1a2      	bne.n	8007362 <oslib_test_005_001_execute+0x52>
    test_assert_sequence("0ABCDEFGHIJZ", "unexpected tokens");
 800741c:	491b      	ldr	r1, [pc, #108]	; (800748c <oslib_test_005_001_execute+0x17c>)
 800741e:	481c      	ldr	r0, [pc, #112]	; (8007490 <oslib_test_005_001_execute+0x180>)
 8007420:	f7f9 fdee 	bl	8001000 <_test_assert_sequence>
 8007424:	2800      	cmp	r0, #0
 8007426:	d19c      	bne.n	8007362 <oslib_test_005_001_execute+0x52>
  test_set_step(3);
 8007428:	2303      	movs	r3, #3
    msg_t msg = chThdWait(tp);
 800742a:	4628      	mov	r0, r5
  test_set_step(3);
 800742c:	6023      	str	r3, [r4, #0]
    msg_t msg = chThdWait(tp);
 800742e:	f7ff fd07 	bl	8006e40 <chThdWait>
    test_assert(msg == 0x0FA5, "invalid exit code");
 8007432:	f640 73a5 	movw	r3, #4005	; 0xfa5
 8007436:	1ac0      	subs	r0, r0, r3
 8007438:	fab0 f080 	clz	r0, r0
 800743c:	4915      	ldr	r1, [pc, #84]	; (8007494 <oslib_test_005_001_execute+0x184>)
 800743e:	0940      	lsrs	r0, r0, #5
 8007440:	f7f9 fc5e 	bl	8000d00 <_test_assert>
  test_end_step(3);
 8007444:	e78d      	b.n	8007362 <oslib_test_005_001_execute+0x52>
 8007446:	bf00      	nop
 8007448:	2000142c 	.word	0x2000142c
 800744c:	20002308 	.word	0x20002308
 8007450:	08003961 	.word	0x08003961
 8007454:	20001f1c 	.word	0x20001f1c
 8007458:	0800aa88 	.word	0x0800aa88
 800745c:	08000961 	.word	0x08000961
 8007460:	08000e91 	.word	0x08000e91
 8007464:	0800aa94 	.word	0x0800aa94
 8007468:	08000971 	.word	0x08000971
 800746c:	08000ea1 	.word	0x08000ea1
 8007470:	08000991 	.word	0x08000991
 8007474:	08000eb1 	.word	0x08000eb1
 8007478:	080009b1 	.word	0x080009b1
 800747c:	08000ed1 	.word	0x08000ed1
 8007480:	080009d1 	.word	0x080009d1
 8007484:	08000ef1 	.word	0x08000ef1
 8007488:	08000f21 	.word	0x08000f21
 800748c:	0800a750 	.word	0x0800a750
 8007490:	0800aaac 	.word	0x0800aaac
 8007494:	0800aabc 	.word	0x0800aabc
	...

080074a0 <oslib_test_004_001_execute>:
 * - [4.1.3] Sending jobs with various timings.
 * - [4.1.4] Sending two null jobs to make threads exit.
 * .
 */

static void oslib_test_004_001_execute(void) {
 80074a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  mp->next = NULL;
 80074a4:	4c47      	ldr	r4, [pc, #284]	; (80075c4 <oslib_test_004_001_execute+0x124>)
  thread_t *tp1, *tp2;

  /* [4.1.1] Initializing the Jobs Queue object.*/
  test_set_step(1);
 80074a6:	4f48      	ldr	r7, [pc, #288]	; (80075c8 <oslib_test_004_001_execute+0x128>)
  return ch.rlist.current;
 80074a8:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80075f4 <oslib_test_004_001_execute+0x154>
  chGuardedPoolLoadArray(&jqp->free, (void *)jobsbuf, jobsn);
 80074ac:	4947      	ldr	r1, [pc, #284]	; (80075cc <oslib_test_004_001_execute+0x12c>)
  tqp->next = (thread_t *)tqp;
 80074ae:	6024      	str	r4, [r4, #0]
 80074b0:	2500      	movs	r5, #0
  mp->align = align;
 80074b2:	2204      	movs	r2, #4
  mp->object_size = size;
 80074b4:	2308      	movs	r3, #8
static void oslib_test_004_001_execute(void) {
 80074b6:	b08c      	sub	sp, #48	; 0x30
 80074b8:	4620      	mov	r0, r4
 80074ba:	6123      	str	r3, [r4, #16]
  mp->next = NULL;
 80074bc:	60e5      	str	r5, [r4, #12]
  test_set_step(1);
 80074be:	2301      	movs	r3, #1
  mp->provider = provider;
 80074c0:	61a5      	str	r5, [r4, #24]
 80074c2:	60a5      	str	r5, [r4, #8]
  mp->align = align;
 80074c4:	6162      	str	r2, [r4, #20]
  tqp->prev = (thread_t *)tqp;
 80074c6:	6064      	str	r4, [r4, #4]
 80074c8:	603b      	str	r3, [r7, #0]
 80074ca:	f7fc ff99 	bl	8004400 <chGuardedPoolLoadArray>
  return chThdGetSelfX()->prio;
 80074ce:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80074d2:	4b3f      	ldr	r3, [pc, #252]	; (80075d0 <oslib_test_004_001_execute+0x130>)
  {
    thread_descriptor_t td1 = {
      .name  = "dispatcher1",
      .wbase = wa1Thread1,
      .wend  = THD_WORKING_AREA_END(wa1Thread1),
      .prio  = chThdGetPriorityX() - 1,
 80074d4:	6892      	ldr	r2, [r2, #8]
    thread_descriptor_t td1 = {
 80074d6:	493f      	ldr	r1, [pc, #252]	; (80075d4 <oslib_test_004_001_execute+0x134>)
 80074d8:	61e3      	str	r3, [r4, #28]
  mbp->wrptr  = buf;
 80074da:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  mbp->top    = &buf[n];
 80074de:	3310      	adds	r3, #16
      .prio  = chThdGetPriorityX() - 1,
 80074e0:	3a01      	subs	r2, #1
 80074e2:	6223      	str	r3, [r4, #32]
  test_set_step(2);
 80074e4:	2302      	movs	r3, #2
    thread_descriptor_t td1 = {
 80074e6:	f501 70e4 	add.w	r0, r1, #456	; 0x1c8
  test_set_step(2);
 80074ea:	603b      	str	r3, [r7, #0]
    thread_descriptor_t td1 = {
 80074ec:	9209      	str	r2, [sp, #36]	; 0x24
  tqp->next = (thread_t *)tqp;
 80074ee:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80074f2:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80074f6:	f8df c100 	ldr.w	ip, [pc, #256]	; 80075f8 <oslib_test_004_001_execute+0x158>
 80074fa:	4e37      	ldr	r6, [pc, #220]	; (80075d8 <oslib_test_004_001_execute+0x138>)
  mbp->cnt    = (size_t)0;
 80074fc:	62e5      	str	r5, [r4, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 80074fe:	e9c4 220d 	strd	r2, r2, [r4, #52]	; 0x34
 8007502:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8007506:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 800750a:	9008      	str	r0, [sp, #32]
      .funcp = Thread1,
      .arg   = NULL
    };
    tp1 = chThdCreate(&td1);
 800750c:	a806      	add	r0, sp, #24
    thread_descriptor_t td1 = {
 800750e:	950b      	str	r5, [sp, #44]	; 0x2c
 8007510:	9107      	str	r1, [sp, #28]
 8007512:	f8cd c018 	str.w	ip, [sp, #24]
 8007516:	960a      	str	r6, [sp, #40]	; 0x28
    tp1 = chThdCreate(&td1);
 8007518:	f7fa fffa 	bl	8002510 <chThdCreate>
 800751c:	f8d8 3018 	ldr.w	r3, [r8, #24]

    thread_descriptor_t td2 = {
 8007520:	4a2e      	ldr	r2, [pc, #184]	; (80075dc <oslib_test_004_001_execute+0x13c>)
      .name  = "dispatcher2",
      .wbase = wa2Thread1,
      .wend  = THD_WORKING_AREA_END(wa2Thread1),
      .prio  = chThdGetPriorityX() - 2,
 8007522:	689b      	ldr	r3, [r3, #8]
    thread_descriptor_t td2 = {
 8007524:	492e      	ldr	r1, [pc, #184]	; (80075e0 <oslib_test_004_001_execute+0x140>)
 8007526:	9505      	str	r5, [sp, #20]
      .prio  = chThdGetPriorityX() - 2,
 8007528:	3b02      	subs	r3, #2
    thread_descriptor_t td2 = {
 800752a:	f502 75e4 	add.w	r5, r2, #456	; 0x1c8
    tp1 = chThdCreate(&td1);
 800752e:	4681      	mov	r9, r0
      .funcp = Thread1,
      .arg   = NULL
    };
    tp2 = chThdCreate(&td2);
 8007530:	4668      	mov	r0, sp
    thread_descriptor_t td2 = {
 8007532:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8007536:	9303      	str	r3, [sp, #12]
 8007538:	9604      	str	r6, [sp, #16]
 800753a:	9100      	str	r1, [sp, #0]
    tp2 = chThdCreate(&td2);
 800753c:	f7fa ffe8 	bl	8002510 <chThdCreate>
 8007540:	4e28      	ldr	r6, [pc, #160]	; (80075e4 <oslib_test_004_001_execute+0x144>)
  }
  test_end_step(2);

  /* [4.1.3] Sending jobs with various timings.*/
  test_set_step(3);
 8007542:	2303      	movs	r3, #3
    tp2 = chThdCreate(&td2);
 8007544:	4680      	mov	r8, r0
  test_set_step(3);
 8007546:	603b      	str	r3, [r7, #0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8007548:	f104 051c 	add.w	r5, r4, #28
 800754c:	f04f 0a61 	mov.w	sl, #97	; 0x61
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8007550:	f04f 31ff 	mov.w	r1, #4294967295
 8007554:	4620      	mov	r0, r4
 8007556:	f7fb f983 	bl	8002860 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800755a:	2200      	movs	r2, #0
    job_descriptor_t *jdp;

    for (i = 0; i < 8; i++) {
      jdp = chJobGet(&jq);
      jdp->jobfunc = job_slow;
      jdp->jobarg  = (void *)('a' + i);
 800755c:	e9c0 6a00 	strd	r6, sl, [r0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8007560:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8007562:	f10a 0a01 	add.w	sl, sl, #1
 8007566:	4628      	mov	r0, r5
 8007568:	f7fd f842 	bl	80045f0 <chMBPostTimeout>
    for (i = 0; i < 8; i++) {
 800756c:	f1ba 0f69 	cmp.w	sl, #105	; 0x69
 8007570:	d1ee      	bne.n	8007550 <oslib_test_004_001_execute+0xb0>
    }
  }
  test_end_step(3);

  /* [4.1.4] Sending two null jobs to make threads exit.*/
  test_set_step(4);
 8007572:	2304      	movs	r3, #4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8007574:	f04f 31ff 	mov.w	r1, #4294967295
 8007578:	4812      	ldr	r0, [pc, #72]	; (80075c4 <oslib_test_004_001_execute+0x124>)
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	f7fb f970 	bl	8002860 <chGuardedPoolAllocTimeout>
  {
    job_descriptor_t *jdp;

    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
 8007580:	2400      	movs	r4, #0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8007582:	4622      	mov	r2, r4
    jdp->jobarg  = NULL;
 8007584:	e9c0 4400 	strd	r4, r4, [r0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8007588:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800758a:	4817      	ldr	r0, [pc, #92]	; (80075e8 <oslib_test_004_001_execute+0x148>)
 800758c:	f7fd f830 	bl	80045f0 <chMBPostTimeout>
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8007590:	f04f 31ff 	mov.w	r1, #4294967295
 8007594:	480b      	ldr	r0, [pc, #44]	; (80075c4 <oslib_test_004_001_execute+0x124>)
 8007596:	f7fb f963 	bl	8002860 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800759a:	4622      	mov	r2, r4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800759c:	4601      	mov	r1, r0
    chJobPost(&jq, jdp);
    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
    jdp->jobarg  = NULL;
 800759e:	e9c0 4400 	strd	r4, r4, [r0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80075a2:	4811      	ldr	r0, [pc, #68]	; (80075e8 <oslib_test_004_001_execute+0x148>)
 80075a4:	f7fd f824 	bl	80045f0 <chMBPostTimeout>
    chJobPost(&jq, jdp);
    (void) chThdWait(tp1);
 80075a8:	4648      	mov	r0, r9
 80075aa:	f7ff fc49 	bl	8006e40 <chThdWait>
    (void) chThdWait(tp2);
 80075ae:	4640      	mov	r0, r8
 80075b0:	f7ff fc46 	bl	8006e40 <chThdWait>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 80075b4:	490d      	ldr	r1, [pc, #52]	; (80075ec <oslib_test_004_001_execute+0x14c>)
 80075b6:	480e      	ldr	r0, [pc, #56]	; (80075f0 <oslib_test_004_001_execute+0x150>)
 80075b8:	f7f9 fd22 	bl	8001000 <_test_assert_sequence>
  }
  test_end_step(4);
}
 80075bc:	b00c      	add	sp, #48	; 0x30
 80075be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c2:	bf00      	nop
 80075c4:	2000166c 	.word	0x2000166c
 80075c8:	20001f1c 	.word	0x20001f1c
 80075cc:	2000164c 	.word	0x2000164c
 80075d0:	200016d0 	.word	0x200016d0
 80075d4:	20001f78 	.word	0x20001f78
 80075d8:	080045a1 	.word	0x080045a1
 80075dc:	20002140 	.word	0x20002140
 80075e0:	0800aadc 	.word	0x0800aadc
 80075e4:	08003091 	.word	0x08003091
 80075e8:	20001688 	.word	0x20001688
 80075ec:	0800a750 	.word	0x0800a750
 80075f0:	0800a780 	.word	0x0800a780
 80075f4:	2000142c 	.word	0x2000142c
 80075f8:	0800aad0 	.word	0x0800aad0
 80075fc:	00000000 	.word	0x00000000

08007600 <rt_test_011_005_execute>:
static void rt_test_011_005_execute(void) {
 8007600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.current;
 8007604:	4b1a      	ldr	r3, [pc, #104]	; (8007670 <rt_test_011_005_execute+0x70>)
  test_set_step(1);
 8007606:	f8df a074 	ldr.w	sl, [pc, #116]	; 800767c <rt_test_011_005_execute+0x7c>
  return chThdGetSelfX()->prio;
 800760a:	699b      	ldr	r3, [r3, #24]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800760c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007680 <rt_test_011_005_execute+0x80>
  tprio_t prio = chThdGetPriorityX() - 1;
 8007610:	689e      	ldr	r6, [r3, #8]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8007612:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8007684 <rt_test_011_005_execute+0x84>
  test_set_step(1);
 8007616:	2301      	movs	r3, #1
static void rt_test_011_005_execute(void) {
 8007618:	b082      	sub	sp, #8
  test_set_step(1);
 800761a:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 800761e:	f7fb fda7 	bl	8003170 <test_wait_tick>
    n = 0;
 8007622:	2400      	movs	r4, #0
  tprio_t prio = chThdGetPriorityX() - 1;
 8007624:	3e01      	subs	r6, #1
    start = test_wait_tick();
 8007626:	4605      	mov	r5, r0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8007628:	4627      	mov	r7, r4
 800762a:	464b      	mov	r3, r9
 800762c:	4632      	mov	r2, r6
 800762e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007632:	9700      	str	r7, [sp, #0]
 8007634:	4640      	mov	r0, r8
 8007636:	f7fa ff0b 	bl	8002450 <chThdCreateStatic>
 800763a:	f7ff fc01 	bl	8006e40 <chThdWait>
 800763e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8007642:	f242 720f 	movw	r2, #9999	; 0x270f
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	1b5b      	subs	r3, r3, r5
 800764a:	4293      	cmp	r3, r2
      n++;
 800764c:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8007650:	d9eb      	bls.n	800762a <rt_test_011_005_execute+0x2a>
  test_set_step(2);
 8007652:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8007654:	4807      	ldr	r0, [pc, #28]	; (8007674 <rt_test_011_005_execute+0x74>)
  test_set_step(2);
 8007656:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 800765a:	f7f9 fcb9 	bl	8000fd0 <test_print>
    test_printn(n);
 800765e:	4620      	mov	r0, r4
 8007660:	f7f9 fbe6 	bl	8000e30 <test_printn>
    test_println(" threads/S");
 8007664:	4804      	ldr	r0, [pc, #16]	; (8007678 <rt_test_011_005_execute+0x78>)
}
 8007666:	b002      	add	sp, #8
 8007668:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" threads/S");
 800766c:	f7f9 bc90 	b.w	8000f90 <test_println>
 8007670:	2000142c 	.word	0x2000142c
 8007674:	0800a694 	.word	0x0800a694
 8007678:	0800aa7c 	.word	0x0800aa7c
 800767c:	20001f1c 	.word	0x20001f1c
 8007680:	080039b1 	.word	0x080039b1
 8007684:	20001808 	.word	0x20001808
	...

08007690 <test_wait_threads>:
void test_wait_threads(void) {
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	4c07      	ldr	r4, [pc, #28]	; (80076b0 <test_wait_threads+0x20>)
      threads[i] = NULL;
 8007694:	2600      	movs	r6, #0
 8007696:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800769a:	f854 0b04 	ldr.w	r0, [r4], #4
 800769e:	b118      	cbz	r0, 80076a8 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 80076a0:	f7ff fbce 	bl	8006e40 <chThdWait>
      threads[i] = NULL;
 80076a4:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80076a8:	42ac      	cmp	r4, r5
 80076aa:	d1f6      	bne.n	800769a <test_wait_threads+0xa>
}
 80076ac:	bd70      	pop	{r4, r5, r6, pc}
 80076ae:	bf00      	nop
 80076b0:	20001f34 	.word	0x20001f34
	...

080076c0 <rt_test_011_008_execute>:
static void rt_test_011_008_execute(void) {
 80076c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 80076c4:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80077b0 <rt_test_011_008_execute+0xf0>
  test_set_step(1);
 80076c8:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80077b4 <rt_test_011_008_execute+0xf4>
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80076cc:	4e33      	ldr	r6, [pc, #204]	; (800779c <rt_test_011_008_execute+0xdc>)
 80076ce:	4d34      	ldr	r5, [pc, #208]	; (80077a0 <rt_test_011_008_execute+0xe0>)
 80076d0:	4c34      	ldr	r4, [pc, #208]	; (80077a4 <rt_test_011_008_execute+0xe4>)
static void rt_test_011_008_execute(void) {
 80076d2:	b085      	sub	sp, #20
  test_set_step(1);
 80076d4:	2201      	movs	r2, #1
    n = 0;
 80076d6:	2300      	movs	r3, #0
  test_set_step(1);
 80076d8:	f8c9 2000 	str.w	r2, [r9]
    n = 0;
 80076dc:	9303      	str	r3, [sp, #12]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80076de:	f7fb fd47 	bl	8003170 <test_wait_tick>
  return chThdGetSelfX()->prio;
 80076e2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	af03      	add	r7, sp, #12
 80076ea:	4633      	mov	r3, r6
 80076ec:	3a01      	subs	r2, #1
 80076ee:	4628      	mov	r0, r5
 80076f0:	9700      	str	r7, [sp, #0]
 80076f2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80076f6:	f7fa feab 	bl	8002450 <chThdCreateStatic>
 80076fa:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80076fe:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	9700      	str	r7, [sp, #0]
 8007704:	4633      	mov	r3, r6
 8007706:	3a01      	subs	r2, #1
 8007708:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 800770c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007710:	f7fa fe9e 	bl	8002450 <chThdCreateStatic>
 8007714:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007718:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	9700      	str	r7, [sp, #0]
 800771e:	4633      	mov	r3, r6
 8007720:	3a01      	subs	r2, #1
 8007722:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007726:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800772a:	f7fa fe91 	bl	8002450 <chThdCreateStatic>
 800772e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007732:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	9700      	str	r7, [sp, #0]
 8007738:	4633      	mov	r3, r6
 800773a:	3a01      	subs	r2, #1
 800773c:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8007740:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007744:	f7fa fe84 	bl	8002450 <chThdCreateStatic>
 8007748:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800774c:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	9700      	str	r7, [sp, #0]
 8007752:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007756:	4633      	mov	r3, r6
 8007758:	3a01      	subs	r2, #1
 800775a:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800775e:	f7fa fe77 	bl	8002450 <chThdCreateStatic>
  test_set_step(2);
 8007762:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007764:	4602      	mov	r2, r0
    chThdSleepSeconds(1);
 8007766:	f242 7010 	movw	r0, #10000	; 0x2710
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800776a:	6122      	str	r2, [r4, #16]
  test_set_step(2);
 800776c:	f8c9 3000 	str.w	r3, [r9]
    chThdSleepSeconds(1);
 8007770:	f7fb fa56 	bl	8002c20 <chThdSleep>
    test_terminate_threads();
 8007774:	f7f9 fb0c 	bl	8000d90 <test_terminate_threads>
    test_wait_threads();
 8007778:	f7ff ff8a 	bl	8007690 <test_wait_threads>
  test_set_step(3);
 800777c:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800777e:	480a      	ldr	r0, [pc, #40]	; (80077a8 <rt_test_011_008_execute+0xe8>)
  test_set_step(3);
 8007780:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8007784:	f7f9 fc24 	bl	8000fd0 <test_print>
    test_printn(n);
 8007788:	9803      	ldr	r0, [sp, #12]
 800778a:	f7f9 fb51 	bl	8000e30 <test_printn>
    test_println(" ctxswc/S");
 800778e:	4807      	ldr	r0, [pc, #28]	; (80077ac <rt_test_011_008_execute+0xec>)
 8007790:	f7f9 fbfe 	bl	8000f90 <test_println>
}
 8007794:	b005      	add	sp, #20
 8007796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800779a:	bf00      	nop
 800779c:	080022f1 	.word	0x080022f1
 80077a0:	20001808 	.word	0x20001808
 80077a4:	20001f34 	.word	0x20001f34
 80077a8:	0800a694 	.word	0x0800a694
 80077ac:	0800aae8 	.word	0x0800aae8
 80077b0:	2000142c 	.word	0x2000142c
 80077b4:	20001f1c 	.word	0x20001f1c
	...

080077c0 <rt_test_011_007_execute>:
static void rt_test_011_007_execute(void) {
 80077c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80077c4:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80078f0 <rt_test_011_007_execute+0x130>
  test_set_step(1);
 80077c8:	4f3d      	ldr	r7, [pc, #244]	; (80078c0 <rt_test_011_007_execute+0x100>)
  return chThdGetSelfX()->prio;
 80077ca:	f8d8 2018 	ldr.w	r2, [r8, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80077ce:	4b3d      	ldr	r3, [pc, #244]	; (80078c4 <rt_test_011_007_execute+0x104>)
 80077d0:	6892      	ldr	r2, [r2, #8]
 80077d2:	483d      	ldr	r0, [pc, #244]	; (80078c8 <rt_test_011_007_execute+0x108>)
 80077d4:	4d3d      	ldr	r5, [pc, #244]	; (80078cc <rt_test_011_007_execute+0x10c>)
 80077d6:	4e3e      	ldr	r6, [pc, #248]	; (80078d0 <rt_test_011_007_execute+0x110>)
static void rt_test_011_007_execute(void) {
 80077d8:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80077da:	2400      	movs	r4, #0
  test_set_step(1);
 80077dc:	2101      	movs	r1, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80077de:	3205      	adds	r2, #5
  test_set_step(1);
 80077e0:	6039      	str	r1, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80077e2:	9400      	str	r4, [sp, #0]
 80077e4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80077e8:	f7fa fe32 	bl	8002450 <chThdCreateStatic>
 80077ec:	f8d8 2018 	ldr.w	r2, [r8, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 80077f0:	4b34      	ldr	r3, [pc, #208]	; (80078c4 <rt_test_011_007_execute+0x104>)
 80077f2:	6892      	ldr	r2, [r2, #8]
 80077f4:	9400      	str	r4, [sp, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80077f6:	4601      	mov	r1, r0
 80077f8:	6029      	str	r1, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 80077fa:	3204      	adds	r2, #4
 80077fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007800:	4834      	ldr	r0, [pc, #208]	; (80078d4 <rt_test_011_007_execute+0x114>)
 8007802:	f7fa fe25 	bl	8002450 <chThdCreateStatic>
 8007806:	f8d8 2018 	ldr.w	r2, [r8, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 800780a:	4b2e      	ldr	r3, [pc, #184]	; (80078c4 <rt_test_011_007_execute+0x104>)
 800780c:	6892      	ldr	r2, [r2, #8]
 800780e:	9400      	str	r4, [sp, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8007810:	4601      	mov	r1, r0
 8007812:	6069      	str	r1, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8007814:	3203      	adds	r2, #3
 8007816:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800781a:	482f      	ldr	r0, [pc, #188]	; (80078d8 <rt_test_011_007_execute+0x118>)
 800781c:	f7fa fe18 	bl	8002450 <chThdCreateStatic>
 8007820:	f8d8 2018 	ldr.w	r2, [r8, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8007824:	4b27      	ldr	r3, [pc, #156]	; (80078c4 <rt_test_011_007_execute+0x104>)
 8007826:	6892      	ldr	r2, [r2, #8]
 8007828:	9400      	str	r4, [sp, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 800782a:	4601      	mov	r1, r0
 800782c:	60a9      	str	r1, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800782e:	3202      	adds	r2, #2
 8007830:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007834:	4829      	ldr	r0, [pc, #164]	; (80078dc <rt_test_011_007_execute+0x11c>)
 8007836:	f7fa fe0b 	bl	8002450 <chThdCreateStatic>
 800783a:	f8d8 2018 	ldr.w	r2, [r8, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800783e:	4b21      	ldr	r3, [pc, #132]	; (80078c4 <rt_test_011_007_execute+0x104>)
 8007840:	6892      	ldr	r2, [r2, #8]
 8007842:	9400      	str	r4, [sp, #0]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8007844:	4684      	mov	ip, r0
 8007846:	f8c5 c00c 	str.w	ip, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800784a:	3201      	adds	r2, #1
 800784c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007850:	4823      	ldr	r0, [pc, #140]	; (80078e0 <rt_test_011_007_execute+0x120>)
 8007852:	f7fa fdfd 	bl	8002450 <chThdCreateStatic>
  test_set_step(2);
 8007856:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8007858:	6128      	str	r0, [r5, #16]
  test_set_step(2);
 800785a:	603b      	str	r3, [r7, #0]
    start = test_wait_tick();
 800785c:	f7fb fc88 	bl	8003170 <test_wait_tick>
 8007860:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8007864:	4605      	mov	r5, r0
 8007866:	2100      	movs	r1, #0
 8007868:	4630      	mov	r0, r6
 800786a:	f7fc f8d9 	bl	8003a20 <chSemResetWithMessage.constprop.0>
 800786e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 8007872:	f242 720f 	movw	r2, #9999	; 0x270f
 8007876:	1b5b      	subs	r3, r3, r5
 8007878:	4293      	cmp	r3, r2
      n++;
 800787a:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800787e:	d9f2      	bls.n	8007866 <rt_test_011_007_execute+0xa6>
  test_set_step(3);
 8007880:	2303      	movs	r3, #3
 8007882:	603b      	str	r3, [r7, #0]
    test_terminate_threads();
 8007884:	f7f9 fa84 	bl	8000d90 <test_terminate_threads>
 8007888:	2100      	movs	r1, #0
 800788a:	4811      	ldr	r0, [pc, #68]	; (80078d0 <rt_test_011_007_execute+0x110>)
 800788c:	f7fc f8c8 	bl	8003a20 <chSemResetWithMessage.constprop.0>
    test_wait_threads();
 8007890:	f7ff fefe 	bl	8007690 <test_wait_threads>
  test_set_step(4);
 8007894:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8007896:	4813      	ldr	r0, [pc, #76]	; (80078e4 <rt_test_011_007_execute+0x124>)
  test_set_step(4);
 8007898:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 800789a:	f7f9 fb99 	bl	8000fd0 <test_print>
    test_printn(n);
 800789e:	4620      	mov	r0, r4
 80078a0:	f7f9 fac6 	bl	8000e30 <test_printn>
    test_printn(n * 6);
 80078a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    test_print(" reschedules/S, ");
 80078a8:	480f      	ldr	r0, [pc, #60]	; (80078e8 <rt_test_011_007_execute+0x128>)
 80078aa:	f7f9 fb91 	bl	8000fd0 <test_print>
    test_printn(n * 6);
 80078ae:	0060      	lsls	r0, r4, #1
 80078b0:	f7f9 fabe 	bl	8000e30 <test_printn>
    test_println(" ctxswc/S");
 80078b4:	480d      	ldr	r0, [pc, #52]	; (80078ec <rt_test_011_007_execute+0x12c>)
}
 80078b6:	b002      	add	sp, #8
 80078b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 80078bc:	f7f9 bb68 	b.w	8000f90 <test_println>
 80078c0:	20001f1c 	.word	0x20001f1c
 80078c4:	08003761 	.word	0x08003761
 80078c8:	20001808 	.word	0x20001808
 80078cc:	20001f34 	.word	0x20001f34
 80078d0:	200017fc 	.word	0x200017fc
 80078d4:	20001950 	.word	0x20001950
 80078d8:	20001a98 	.word	0x20001a98
 80078dc:	20001be0 	.word	0x20001be0
 80078e0:	20001d28 	.word	0x20001d28
 80078e4:	0800a694 	.word	0x0800a694
 80078e8:	0800aaf4 	.word	0x0800aaf4
 80078ec:	0800aae8 	.word	0x0800aae8
 80078f0:	2000142c 	.word	0x2000142c
	...

08007900 <rt_test_011_004_execute>:
static void rt_test_011_004_execute(void) {
 8007900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.current;
 8007904:	4b2c      	ldr	r3, [pc, #176]	; (80079b8 <rt_test_011_004_execute+0xb8>)
  test_set_step(1);
 8007906:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80079d0 <rt_test_011_004_execute+0xd0>
  return chThdGetSelfX()->prio;
 800790a:	699a      	ldr	r2, [r3, #24]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800790c:	482b      	ldr	r0, [pc, #172]	; (80079bc <rt_test_011_004_execute+0xbc>)
 800790e:	6892      	ldr	r2, [r2, #8]
 8007910:	4b2b      	ldr	r3, [pc, #172]	; (80079c0 <rt_test_011_004_execute+0xc0>)
static void rt_test_011_004_execute(void) {
 8007912:	b082      	sub	sp, #8
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007914:	2500      	movs	r5, #0
 8007916:	3201      	adds	r2, #1
  test_set_step(1);
 8007918:	2401      	movs	r4, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800791a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800791e:	9500      	str	r5, [sp, #0]
  test_set_step(1);
 8007920:	f8ca 4000 	str.w	r4, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007924:	f7fa fd94 	bl	8002450 <chThdCreateStatic>
 8007928:	4a26      	ldr	r2, [pc, #152]	; (80079c4 <rt_test_011_004_execute+0xc4>)
  test_set_step(2);
 800792a:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800792c:	4604      	mov	r4, r0
 800792e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8007930:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 8007934:	f7fb fc1c 	bl	8003170 <test_wait_tick>
      chSchWakeupS(tp, MSG_OK);
 8007938:	462f      	mov	r7, r5
    start = test_wait_tick();
 800793a:	4606      	mov	r6, r0
 800793c:	f04f 0820 	mov.w	r8, #32
 8007940:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8007944:	f388 8811 	msr	BASEPRI, r8
      chSchWakeupS(tp, MSG_OK);
 8007948:	2100      	movs	r1, #0
 800794a:	4620      	mov	r0, r4
 800794c:	f7fa fce8 	bl	8002320 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8007950:	4620      	mov	r0, r4
 8007952:	2100      	movs	r1, #0
 8007954:	f7fa fce4 	bl	8002320 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8007958:	4620      	mov	r0, r4
 800795a:	2100      	movs	r1, #0
 800795c:	f7fa fce0 	bl	8002320 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8007960:	4620      	mov	r0, r4
 8007962:	2100      	movs	r1, #0
 8007964:	f7fa fcdc 	bl	8002320 <chSchWakeupS>
 8007968:	f387 8811 	msr	BASEPRI, r7
 800796c:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 8007970:	f242 720f 	movw	r2, #9999	; 0x270f
 8007974:	1b9b      	subs	r3, r3, r6
 8007976:	4293      	cmp	r3, r2
      n += 4;
 8007978:	f105 0504 	add.w	r5, r5, #4
    } while (chVTIsSystemTimeWithinX(start, end));
 800797c:	d9e2      	bls.n	8007944 <rt_test_011_004_execute+0x44>
  test_set_step(3);
 800797e:	2303      	movs	r3, #3
 8007980:	f8ca 3000 	str.w	r3, [sl]
 8007984:	f388 8811 	msr	BASEPRI, r8
    chSchWakeupS(tp, MSG_TIMEOUT);
 8007988:	f04f 31ff 	mov.w	r1, #4294967295
 800798c:	4620      	mov	r0, r4
 800798e:	f7fa fcc7 	bl	8002320 <chSchWakeupS>
 8007992:	f387 8811 	msr	BASEPRI, r7
    test_wait_threads();
 8007996:	f7ff fe7b 	bl	8007690 <test_wait_threads>
  test_set_step(4);
 800799a:	2304      	movs	r3, #4
    test_print("--- Score : ");
 800799c:	480a      	ldr	r0, [pc, #40]	; (80079c8 <rt_test_011_004_execute+0xc8>)
  test_set_step(4);
 800799e:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 80079a2:	f7f9 fb15 	bl	8000fd0 <test_print>
    test_printn(n * 2);
 80079a6:	0068      	lsls	r0, r5, #1
 80079a8:	f7f9 fa42 	bl	8000e30 <test_printn>
    test_println(" ctxswc/S");
 80079ac:	4807      	ldr	r0, [pc, #28]	; (80079cc <rt_test_011_004_execute+0xcc>)
}
 80079ae:	b002      	add	sp, #8
 80079b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" ctxswc/S");
 80079b4:	f7f9 baec 	b.w	8000f90 <test_println>
 80079b8:	2000142c 	.word	0x2000142c
 80079bc:	20001808 	.word	0x20001808
 80079c0:	08002621 	.word	0x08002621
 80079c4:	20001f34 	.word	0x20001f34
 80079c8:	0800a694 	.word	0x0800a694
 80079cc:	0800aae8 	.word	0x0800aae8
 80079d0:	20001f1c 	.word	0x20001f1c
	...

080079e0 <rt_test_011_003_execute>:
static void rt_test_011_003_execute(void) {
 80079e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 80079e4:	4f35      	ldr	r7, [pc, #212]	; (8007abc <rt_test_011_003_execute+0xdc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80079e6:	4d36      	ldr	r5, [pc, #216]	; (8007ac0 <rt_test_011_003_execute+0xe0>)
  return chThdGetSelfX()->prio;
 80079e8:	69bb      	ldr	r3, [r7, #24]
  test_set_step(1);
 80079ea:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8007ad8 <rt_test_011_003_execute+0xf8>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	4b34      	ldr	r3, [pc, #208]	; (8007ac4 <rt_test_011_003_execute+0xe4>)
 80079f2:	4c35      	ldr	r4, [pc, #212]	; (8007ac8 <rt_test_011_003_execute+0xe8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80079f4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8007adc <rt_test_011_003_execute+0xfc>
static void rt_test_011_003_execute(void) {
 80079f8:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80079fa:	2600      	movs	r6, #0
  test_set_step(1);
 80079fc:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007a00:	3201      	adds	r2, #1
 8007a02:	4628      	mov	r0, r5
 8007a04:	9600      	str	r6, [sp, #0]
 8007a06:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 8007a0a:	f8c8 c000 	str.w	ip, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007a0e:	f7fa fd1f 	bl	8002450 <chThdCreateStatic>
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	9600      	str	r6, [sp, #0]
  test_set_step(2);
 8007a1a:	f04f 0c02 	mov.w	ip, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8007a1e:	464b      	mov	r3, r9
 8007a20:	3a02      	subs	r2, #2
 8007a22:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8007a26:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(2);
 8007a2a:	f8c8 c000 	str.w	ip, [r8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8007a2e:	f7fa fd0f 	bl	8002450 <chThdCreateStatic>
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	9600      	str	r6, [sp, #0]
 8007a3a:	464b      	mov	r3, r9
 8007a3c:	3a03      	subs	r2, #3
 8007a3e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007a42:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007a46:	f7fa fd03 	bl	8002450 <chThdCreateStatic>
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 8007a4e:	689a      	ldr	r2, [r3, #8]
 8007a50:	9600      	str	r6, [sp, #0]
 8007a52:	464b      	mov	r3, r9
 8007a54:	3a04      	subs	r2, #4
 8007a56:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8007a5a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007a5e:	f7fa fcf7 	bl	8002450 <chThdCreateStatic>
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	9600      	str	r6, [sp, #0]
 8007a6a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007a6e:	464b      	mov	r3, r9
 8007a70:	3a05      	subs	r2, #5
 8007a72:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8007a76:	f7fa fceb 	bl	8002450 <chThdCreateStatic>
  test_set_step(3);
 8007a7a:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8007a7c:	4602      	mov	r2, r0
    n = msg_loop_test(threads[0]);
 8007a7e:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8007a80:	6122      	str	r2, [r4, #16]
  test_set_step(3);
 8007a82:	f8c8 3000 	str.w	r3, [r8]
    n = msg_loop_test(threads[0]);
 8007a86:	f7fb fcb3 	bl	80033f0 <msg_loop_test>
 8007a8a:	4604      	mov	r4, r0
    test_wait_threads();
 8007a8c:	f7ff fe00 	bl	8007690 <test_wait_threads>
  test_set_step(4);
 8007a90:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8007a92:	480e      	ldr	r0, [pc, #56]	; (8007acc <rt_test_011_003_execute+0xec>)
  test_set_step(4);
 8007a94:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8007a98:	f7f9 fa9a 	bl	8000fd0 <test_print>
    test_printn(n);
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f7f9 f9c7 	bl	8000e30 <test_printn>
    test_print(" msgs/S, ");
 8007aa2:	480b      	ldr	r0, [pc, #44]	; (8007ad0 <rt_test_011_003_execute+0xf0>)
 8007aa4:	f7f9 fa94 	bl	8000fd0 <test_print>
    test_printn(n << 1);
 8007aa8:	0060      	lsls	r0, r4, #1
 8007aaa:	f7f9 f9c1 	bl	8000e30 <test_printn>
    test_println(" ctxswc/S");
 8007aae:	4809      	ldr	r0, [pc, #36]	; (8007ad4 <rt_test_011_003_execute+0xf4>)
}
 8007ab0:	b003      	add	sp, #12
 8007ab2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_println(" ctxswc/S");
 8007ab6:	f7f9 ba6b 	b.w	8000f90 <test_println>
 8007aba:	bf00      	nop
 8007abc:	2000142c 	.word	0x2000142c
 8007ac0:	20001808 	.word	0x20001808
 8007ac4:	080032d1 	.word	0x080032d1
 8007ac8:	20001f34 	.word	0x20001f34
 8007acc:	0800a694 	.word	0x0800a694
 8007ad0:	0800ab08 	.word	0x0800ab08
 8007ad4:	0800aae8 	.word	0x0800aae8
 8007ad8:	20001f1c 	.word	0x20001f1c
 8007adc:	080039b1 	.word	0x080039b1

08007ae0 <rt_test_011_002_execute>:
static void rt_test_011_002_execute(void) {
 8007ae0:	b530      	push	{r4, r5, lr}
  return ch.rlist.current;
 8007ae2:	4b16      	ldr	r3, [pc, #88]	; (8007b3c <rt_test_011_002_execute+0x5c>)
  test_set_step(1);
 8007ae4:	4d16      	ldr	r5, [pc, #88]	; (8007b40 <rt_test_011_002_execute+0x60>)
  return chThdGetSelfX()->prio;
 8007ae6:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007ae8:	4816      	ldr	r0, [pc, #88]	; (8007b44 <rt_test_011_002_execute+0x64>)
 8007aea:	6892      	ldr	r2, [r2, #8]
 8007aec:	4b16      	ldr	r3, [pc, #88]	; (8007b48 <rt_test_011_002_execute+0x68>)
static void rt_test_011_002_execute(void) {
 8007aee:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007af0:	2100      	movs	r1, #0
 8007af2:	9100      	str	r1, [sp, #0]
 8007af4:	3201      	adds	r2, #1
 8007af6:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 8007afa:	2401      	movs	r4, #1
 8007afc:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007afe:	f7fa fca7 	bl	8002450 <chThdCreateStatic>
 8007b02:	4b12      	ldr	r3, [pc, #72]	; (8007b4c <rt_test_011_002_execute+0x6c>)
  test_set_step(2);
 8007b04:	2202      	movs	r2, #2
 8007b06:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007b08:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 8007b0a:	f7fb fc71 	bl	80033f0 <msg_loop_test>
 8007b0e:	4604      	mov	r4, r0
    test_wait_threads();
 8007b10:	f7ff fdbe 	bl	8007690 <test_wait_threads>
  test_set_step(3);
 8007b14:	2303      	movs	r3, #3
    test_print("--- Score : ");
 8007b16:	480e      	ldr	r0, [pc, #56]	; (8007b50 <rt_test_011_002_execute+0x70>)
  test_set_step(3);
 8007b18:	602b      	str	r3, [r5, #0]
    test_print("--- Score : ");
 8007b1a:	f7f9 fa59 	bl	8000fd0 <test_print>
    test_printn(n);
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f7f9 f986 	bl	8000e30 <test_printn>
    test_print(" msgs/S, ");
 8007b24:	480b      	ldr	r0, [pc, #44]	; (8007b54 <rt_test_011_002_execute+0x74>)
 8007b26:	f7f9 fa53 	bl	8000fd0 <test_print>
    test_printn(n << 1);
 8007b2a:	0060      	lsls	r0, r4, #1
 8007b2c:	f7f9 f980 	bl	8000e30 <test_printn>
    test_println(" ctxswc/S");
 8007b30:	4809      	ldr	r0, [pc, #36]	; (8007b58 <rt_test_011_002_execute+0x78>)
}
 8007b32:	b003      	add	sp, #12
 8007b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_println(" ctxswc/S");
 8007b38:	f7f9 ba2a 	b.w	8000f90 <test_println>
 8007b3c:	2000142c 	.word	0x2000142c
 8007b40:	20001f1c 	.word	0x20001f1c
 8007b44:	20001808 	.word	0x20001808
 8007b48:	080032d1 	.word	0x080032d1
 8007b4c:	20001f34 	.word	0x20001f34
 8007b50:	0800a694 	.word	0x0800a694
 8007b54:	0800ab08 	.word	0x0800ab08
 8007b58:	0800aae8 	.word	0x0800aae8
 8007b5c:	00000000 	.word	0x00000000

08007b60 <rt_test_011_001_execute>:
static void rt_test_011_001_execute(void) {
 8007b60:	b530      	push	{r4, r5, lr}
  return ch.rlist.current;
 8007b62:	4b16      	ldr	r3, [pc, #88]	; (8007bbc <rt_test_011_001_execute+0x5c>)
  test_set_step(1);
 8007b64:	4d16      	ldr	r5, [pc, #88]	; (8007bc0 <rt_test_011_001_execute+0x60>)
  return chThdGetSelfX()->prio;
 8007b66:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007b68:	4816      	ldr	r0, [pc, #88]	; (8007bc4 <rt_test_011_001_execute+0x64>)
 8007b6a:	6892      	ldr	r2, [r2, #8]
 8007b6c:	4b16      	ldr	r3, [pc, #88]	; (8007bc8 <rt_test_011_001_execute+0x68>)
static void rt_test_011_001_execute(void) {
 8007b6e:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007b70:	2100      	movs	r1, #0
 8007b72:	9100      	str	r1, [sp, #0]
 8007b74:	3a01      	subs	r2, #1
 8007b76:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 8007b7a:	2401      	movs	r4, #1
 8007b7c:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007b7e:	f7fa fc67 	bl	8002450 <chThdCreateStatic>
 8007b82:	4b12      	ldr	r3, [pc, #72]	; (8007bcc <rt_test_011_001_execute+0x6c>)
  test_set_step(2);
 8007b84:	2202      	movs	r2, #2
 8007b86:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007b88:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 8007b8a:	f7fb fc31 	bl	80033f0 <msg_loop_test>
 8007b8e:	4604      	mov	r4, r0
    test_wait_threads();
 8007b90:	f7ff fd7e 	bl	8007690 <test_wait_threads>
  test_set_step(3);
 8007b94:	2303      	movs	r3, #3
    test_print("--- Score : ");
 8007b96:	480e      	ldr	r0, [pc, #56]	; (8007bd0 <rt_test_011_001_execute+0x70>)
  test_set_step(3);
 8007b98:	602b      	str	r3, [r5, #0]
    test_print("--- Score : ");
 8007b9a:	f7f9 fa19 	bl	8000fd0 <test_print>
    test_printn(n);
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f7f9 f946 	bl	8000e30 <test_printn>
    test_print(" msgs/S, ");
 8007ba4:	480b      	ldr	r0, [pc, #44]	; (8007bd4 <rt_test_011_001_execute+0x74>)
 8007ba6:	f7f9 fa13 	bl	8000fd0 <test_print>
    test_printn(n << 1);
 8007baa:	0060      	lsls	r0, r4, #1
 8007bac:	f7f9 f940 	bl	8000e30 <test_printn>
    test_println(" ctxswc/S");
 8007bb0:	4809      	ldr	r0, [pc, #36]	; (8007bd8 <rt_test_011_001_execute+0x78>)
}
 8007bb2:	b003      	add	sp, #12
 8007bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_println(" ctxswc/S");
 8007bb8:	f7f9 b9ea 	b.w	8000f90 <test_println>
 8007bbc:	2000142c 	.word	0x2000142c
 8007bc0:	20001f1c 	.word	0x20001f1c
 8007bc4:	20001808 	.word	0x20001808
 8007bc8:	080032d1 	.word	0x080032d1
 8007bcc:	20001f34 	.word	0x20001f34
 8007bd0:	0800a694 	.word	0x0800a694
 8007bd4:	0800ab08 	.word	0x0800ab08
 8007bd8:	0800aae8 	.word	0x0800aae8
 8007bdc:	00000000 	.word	0x00000000

08007be0 <rt_test_010_002_execute>:

static void rt_test_010_002_execute(void) {
 8007be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  tprio_t prio;

  /* [10.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8007be2:	4d43      	ldr	r5, [pc, #268]	; (8007cf0 <rt_test_010_002_execute+0x110>)
 8007be4:	4b43      	ldr	r3, [pc, #268]	; (8007cf4 <rt_test_010_002_execute+0x114>)
 8007be6:	4a44      	ldr	r2, [pc, #272]	; (8007cf8 <rt_test_010_002_execute+0x118>)
 8007be8:	4944      	ldr	r1, [pc, #272]	; (8007cfc <rt_test_010_002_execute+0x11c>)
 8007bea:	2001      	movs	r0, #1
 8007bec:	6028      	str	r0, [r5, #0]
  {
    for (i = 0; i < 4; i++)
 8007bee:	f103 070c 	add.w	r7, r3, #12
 8007bf2:	2620      	movs	r6, #32
 8007bf4:	2400      	movs	r4, #0
 8007bf6:	f386 8811 	msr	BASEPRI, r6
  php->next = mp->next;
 8007bfa:	6808      	ldr	r0, [r1, #0]
 8007bfc:	6010      	str	r0, [r2, #0]
  mp->next = php;
 8007bfe:	600a      	str	r2, [r1, #0]
 8007c00:	f384 8811 	msr	BASEPRI, r4
 8007c04:	429f      	cmp	r7, r3
 8007c06:	d002      	beq.n	8007c0e <rt_test_010_002_execute+0x2e>
 8007c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c0c:	e7f3      	b.n	8007bf6 <rt_test_010_002_execute+0x16>
  return ch.rlist.current;
 8007c0e:	4b3c      	ldr	r3, [pc, #240]	; (8007d00 <rt_test_010_002_execute+0x120>)
  test_end_step(2);

  /* [10.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007c10:	4a3c      	ldr	r2, [pc, #240]	; (8007d04 <rt_test_010_002_execute+0x124>)
  return chThdGetSelfX()->prio;
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	483c      	ldr	r0, [pc, #240]	; (8007d08 <rt_test_010_002_execute+0x128>)
 8007c16:	689e      	ldr	r6, [r3, #8]
 8007c18:	4c3c      	ldr	r4, [pc, #240]	; (8007d0c <rt_test_010_002_execute+0x12c>)
 8007c1a:	1e71      	subs	r1, r6, #1
  test_set_step(3);
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007c20:	f7fa fbc6 	bl	80023b0 <chThdCreateFromMemoryPool.constprop.0>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007c24:	1eb1      	subs	r1, r6, #2
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007c26:	4603      	mov	r3, r0
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007c28:	4a39      	ldr	r2, [pc, #228]	; (8007d10 <rt_test_010_002_execute+0x130>)
 8007c2a:	483a      	ldr	r0, [pc, #232]	; (8007d14 <rt_test_010_002_execute+0x134>)
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007c2c:	6023      	str	r3, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007c2e:	f7fa fbbf 	bl	80023b0 <chThdCreateFromMemoryPool.constprop.0>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007c32:	1ef1      	subs	r1, r6, #3
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007c34:	4603      	mov	r3, r0
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007c36:	4a38      	ldr	r2, [pc, #224]	; (8007d18 <rt_test_010_002_execute+0x138>)
 8007c38:	4838      	ldr	r0, [pc, #224]	; (8007d1c <rt_test_010_002_execute+0x13c>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007c3a:	6063      	str	r3, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007c3c:	f7fa fbb8 	bl	80023b0 <chThdCreateFromMemoryPool.constprop.0>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007c40:	1f31      	subs	r1, r6, #4
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007c42:	4603      	mov	r3, r0
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007c44:	4a36      	ldr	r2, [pc, #216]	; (8007d20 <rt_test_010_002_execute+0x140>)
 8007c46:	4837      	ldr	r0, [pc, #220]	; (8007d24 <rt_test_010_002_execute+0x144>)
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007c48:	60a3      	str	r3, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007c4a:	f7fa fbb1 	bl	80023b0 <chThdCreateFromMemoryPool.constprop.0>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007c4e:	4a36      	ldr	r2, [pc, #216]	; (8007d28 <rt_test_010_002_execute+0x148>)
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007c50:	4603      	mov	r3, r0
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007c52:	1f71      	subs	r1, r6, #5
 8007c54:	4835      	ldr	r0, [pc, #212]	; (8007d2c <rt_test_010_002_execute+0x14c>)
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007c56:	60e3      	str	r3, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007c58:	f7fa fbaa 	bl	80023b0 <chThdCreateFromMemoryPool.constprop.0>
  test_end_step(3);

  /* [10.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 8007c5c:	6823      	ldr	r3, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007c5e:	6120      	str	r0, [r4, #16]
  test_set_step(4);
 8007c60:	2204      	movs	r2, #4
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007c62:	4606      	mov	r6, r0
  test_set_step(4);
 8007c64:	602a      	str	r2, [r5, #0]
    test_assert((threads[0] != NULL) &&
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d03b      	beq.n	8007ce2 <rt_test_010_002_execute+0x102>
 8007c6a:	6860      	ldr	r0, [r4, #4]
 8007c6c:	b128      	cbz	r0, 8007c7a <rt_test_010_002_execute+0x9a>
 8007c6e:	68a0      	ldr	r0, [r4, #8]
 8007c70:	b118      	cbz	r0, 8007c7a <rt_test_010_002_execute+0x9a>
 8007c72:	68e0      	ldr	r0, [r4, #12]
 8007c74:	3800      	subs	r0, #0
 8007c76:	bf18      	it	ne
 8007c78:	2001      	movne	r0, #1
 8007c7a:	492d      	ldr	r1, [pc, #180]	; (8007d30 <rt_test_010_002_execute+0x150>)
 8007c7c:	f7f9 f840 	bl	8000d00 <_test_assert>
 8007c80:	b100      	cbz	r0, 8007c84 <rt_test_010_002_execute+0xa4>
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
  test_end_step(6);
}
 8007c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(threads[4] == NULL,
 8007c84:	fab6 f086 	clz	r0, r6
 8007c88:	492a      	ldr	r1, [pc, #168]	; (8007d34 <rt_test_010_002_execute+0x154>)
 8007c8a:	0940      	lsrs	r0, r0, #5
 8007c8c:	f7f9 f838 	bl	8000d00 <_test_assert>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d1f6      	bne.n	8007c82 <rt_test_010_002_execute+0xa2>
  test_set_step(5);
 8007c94:	2305      	movs	r3, #5
 8007c96:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 8007c98:	f7ff fcfa 	bl	8007690 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8007c9c:	4926      	ldr	r1, [pc, #152]	; (8007d38 <rt_test_010_002_execute+0x158>)
 8007c9e:	4827      	ldr	r0, [pc, #156]	; (8007d3c <rt_test_010_002_execute+0x15c>)
 8007ca0:	f7f9 f9ae 	bl	8001000 <_test_assert_sequence>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d1ec      	bne.n	8007c82 <rt_test_010_002_execute+0xa2>
  test_set_step(6);
 8007ca8:	2306      	movs	r3, #6
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8007caa:	4f14      	ldr	r7, [pc, #80]	; (8007cfc <rt_test_010_002_execute+0x11c>)
 8007cac:	4e24      	ldr	r6, [pc, #144]	; (8007d40 <rt_test_010_002_execute+0x160>)
  test_set_step(6);
 8007cae:	602b      	str	r3, [r5, #0]
 8007cb0:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	f7f9 fa4c 	bl	8001150 <chPoolAlloc>
 8007cb8:	3800      	subs	r0, #0
 8007cba:	bf18      	it	ne
 8007cbc:	2001      	movne	r0, #1
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	f7f9 f81e 	bl	8000d00 <_test_assert>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d1dc      	bne.n	8007c82 <rt_test_010_002_execute+0xa2>
    for (i = 0; i < 4; i++)
 8007cc8:	3c01      	subs	r4, #1
 8007cca:	d1f2      	bne.n	8007cb2 <rt_test_010_002_execute+0xd2>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8007ccc:	480b      	ldr	r0, [pc, #44]	; (8007cfc <rt_test_010_002_execute+0x11c>)
 8007cce:	f7f9 fa3f 	bl	8001150 <chPoolAlloc>
 8007cd2:	fab0 f080 	clz	r0, r0
}
 8007cd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8007cda:	491a      	ldr	r1, [pc, #104]	; (8007d44 <rt_test_010_002_execute+0x164>)
 8007cdc:	0940      	lsrs	r0, r0, #5
 8007cde:	f7f9 b80f 	b.w	8000d00 <_test_assert>
    test_assert((threads[0] != NULL) &&
 8007ce2:	4913      	ldr	r1, [pc, #76]	; (8007d30 <rt_test_010_002_execute+0x150>)
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7f9 f80b 	bl	8000d00 <_test_assert>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d1c9      	bne.n	8007c82 <rt_test_010_002_execute+0xa2>
 8007cee:	e7c9      	b.n	8007c84 <rt_test_010_002_execute+0xa4>
 8007cf0:	20001f1c 	.word	0x20001f1c
 8007cf4:	0800bf8c 	.word	0x0800bf8c
 8007cf8:	20001808 	.word	0x20001808
 8007cfc:	200016c0 	.word	0x200016c0
 8007d00:	2000142c 	.word	0x2000142c
 8007d04:	0800a964 	.word	0x0800a964
 8007d08:	0800ab14 	.word	0x0800ab14
 8007d0c:	20001f34 	.word	0x20001f34
 8007d10:	0800a968 	.word	0x0800a968
 8007d14:	0800ab1c 	.word	0x0800ab1c
 8007d18:	0800ab24 	.word	0x0800ab24
 8007d1c:	0800ab28 	.word	0x0800ab28
 8007d20:	0800ab30 	.word	0x0800ab30
 8007d24:	0800ab34 	.word	0x0800ab34
 8007d28:	0800ac58 	.word	0x0800ac58
 8007d2c:	0800ab3c 	.word	0x0800ab3c
 8007d30:	0800ab44 	.word	0x0800ab44
 8007d34:	0800ab5c 	.word	0x0800ab5c
 8007d38:	08009840 	.word	0x08009840
 8007d3c:	0800a894 	.word	0x0800a894
 8007d40:	0800ab78 	.word	0x0800ab78
 8007d44:	0800ab88 	.word	0x0800ab88
	...

08007d50 <rt_test_010_001_execute>:
static void rt_test_010_001_execute(void) {
 8007d50:	b5f0      	push	{r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8007d52:	4b40      	ldr	r3, [pc, #256]	; (8007e54 <rt_test_010_001_execute+0x104>)
  test_set_step(2);
 8007d54:	4d40      	ldr	r5, [pc, #256]	; (8007e58 <rt_test_010_001_execute+0x108>)
  return chThdGetSelfX()->prio;
 8007d56:	699b      	ldr	r3, [r3, #24]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8007d58:	4840      	ldr	r0, [pc, #256]	; (8007e5c <rt_test_010_001_execute+0x10c>)
 8007d5a:	689e      	ldr	r6, [r3, #8]
static void rt_test_010_001_execute(void) {
 8007d5c:	b085      	sub	sp, #20
  test_set_step(2);
 8007d5e:	2302      	movs	r3, #2
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8007d60:	a903      	add	r1, sp, #12
 8007d62:	aa02      	add	r2, sp, #8
  test_set_step(2);
 8007d64:	602b      	str	r3, [r5, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8007d66:	f7fe fa83 	bl	8006270 <chHeapStatus>
 8007d6a:	4604      	mov	r4, r0
    test_assert(n1 == 1, "heap fragmented");
 8007d6c:	f1a0 0001 	sub.w	r0, r0, #1
 8007d70:	fab0 f080 	clz	r0, r0
 8007d74:	493a      	ldr	r1, [pc, #232]	; (8007e60 <rt_test_010_001_execute+0x110>)
 8007d76:	0940      	lsrs	r0, r0, #5
 8007d78:	f7f8 ffc2 	bl	8000d00 <_test_assert>
 8007d7c:	b108      	cbz	r0, 8007d82 <rt_test_010_001_execute+0x32>
}
 8007d7e:	b005      	add	sp, #20
 8007d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  test_set_step(3);
 8007d82:	2203      	movs	r2, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 8007d84:	4937      	ldr	r1, [pc, #220]	; (8007e64 <rt_test_010_001_execute+0x114>)
  test_set_step(3);
 8007d86:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 8007d88:	4b37      	ldr	r3, [pc, #220]	; (8007e68 <rt_test_010_001_execute+0x118>)
 8007d8a:	4f38      	ldr	r7, [pc, #224]	; (8007e6c <rt_test_010_001_execute+0x11c>)
 8007d8c:	1e72      	subs	r2, r6, #1
 8007d8e:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8007d92:	f7fd f8b5 	bl	8004f00 <chThdCreateFromHeap.constprop.0>
 8007d96:	6038      	str	r0, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 8007d98:	3800      	subs	r0, #0
 8007d9a:	bf18      	it	ne
 8007d9c:	2001      	movne	r0, #1
 8007d9e:	4934      	ldr	r1, [pc, #208]	; (8007e70 <rt_test_010_001_execute+0x120>)
 8007da0:	f7f8 ffae 	bl	8000d00 <_test_assert>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d1ea      	bne.n	8007d7e <rt_test_010_001_execute+0x2e>
  test_set_step(4);
 8007da8:	2204      	movs	r2, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 8007daa:	4b32      	ldr	r3, [pc, #200]	; (8007e74 <rt_test_010_001_execute+0x124>)
 8007dac:	4932      	ldr	r1, [pc, #200]	; (8007e78 <rt_test_010_001_execute+0x128>)
  test_set_step(4);
 8007dae:	602a      	str	r2, [r5, #0]
    threads[1] = chThdCreateFromHeap(&heap1,
 8007db0:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8007db4:	1eb2      	subs	r2, r6, #2
 8007db6:	f7fd f8a3 	bl	8004f00 <chThdCreateFromHeap.constprop.0>
 8007dba:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
 8007dbc:	3800      	subs	r0, #0
 8007dbe:	bf18      	it	ne
 8007dc0:	2001      	movne	r0, #1
 8007dc2:	492b      	ldr	r1, [pc, #172]	; (8007e70 <rt_test_010_001_execute+0x120>)
    threads[1] = chThdCreateFromHeap(&heap1,
 8007dc4:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 8007dc6:	f7f8 ff9b 	bl	8000d00 <_test_assert>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d1d7      	bne.n	8007d7e <rt_test_010_001_execute+0x2e>
  test_set_step(5);
 8007dce:	2005      	movs	r0, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 8007dd0:	4b2a      	ldr	r3, [pc, #168]	; (8007e7c <rt_test_010_001_execute+0x12c>)
 8007dd2:	492b      	ldr	r1, [pc, #172]	; (8007e80 <rt_test_010_001_execute+0x130>)
  test_set_step(5);
 8007dd4:	6028      	str	r0, [r5, #0]
    threads[2] = chThdCreateFromHeap(&heap1,
 8007dd6:	1ef2      	subs	r2, r6, #3
 8007dd8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007ddc:	f7fd f890 	bl	8004f00 <chThdCreateFromHeap.constprop.0>
 8007de0:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 8007de2:	fab0 f080 	clz	r0, r0
 8007de6:	4927      	ldr	r1, [pc, #156]	; (8007e84 <rt_test_010_001_execute+0x134>)
    threads[2] = chThdCreateFromHeap(&heap1,
 8007de8:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 8007dea:	0940      	lsrs	r0, r0, #5
 8007dec:	f7f8 ff88 	bl	8000d00 <_test_assert>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d1c4      	bne.n	8007d7e <rt_test_010_001_execute+0x2e>
  test_set_step(6);
 8007df4:	2306      	movs	r3, #6
 8007df6:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 8007df8:	f7ff fc4a 	bl	8007690 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 8007dfc:	4922      	ldr	r1, [pc, #136]	; (8007e88 <rt_test_010_001_execute+0x138>)
 8007dfe:	4823      	ldr	r0, [pc, #140]	; (8007e8c <rt_test_010_001_execute+0x13c>)
 8007e00:	f7f9 f8fe 	bl	8001000 <_test_assert_sequence>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d1ba      	bne.n	8007d7e <rt_test_010_001_execute+0x2e>
  test_set_step(7);
 8007e08:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8007e0a:	a901      	add	r1, sp, #4
 8007e0c:	4813      	ldr	r0, [pc, #76]	; (8007e5c <rt_test_010_001_execute+0x10c>)
  test_set_step(7);
 8007e0e:	602b      	str	r3, [r5, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8007e10:	466a      	mov	r2, sp
 8007e12:	f7fe fa2d 	bl	8006270 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 8007e16:	1a20      	subs	r0, r4, r0
 8007e18:	fab0 f080 	clz	r0, r0
 8007e1c:	491c      	ldr	r1, [pc, #112]	; (8007e90 <rt_test_010_001_execute+0x140>)
 8007e1e:	0940      	lsrs	r0, r0, #5
 8007e20:	f7f8 ff6e 	bl	8000d00 <_test_assert>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d1aa      	bne.n	8007d7e <rt_test_010_001_execute+0x2e>
    test_assert(total1 == total2, "total free space changed");
 8007e28:	9803      	ldr	r0, [sp, #12]
 8007e2a:	9b01      	ldr	r3, [sp, #4]
 8007e2c:	4919      	ldr	r1, [pc, #100]	; (8007e94 <rt_test_010_001_execute+0x144>)
 8007e2e:	1ac0      	subs	r0, r0, r3
 8007e30:	fab0 f080 	clz	r0, r0
 8007e34:	0940      	lsrs	r0, r0, #5
 8007e36:	f7f8 ff63 	bl	8000d00 <_test_assert>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d19f      	bne.n	8007d7e <rt_test_010_001_execute+0x2e>
    test_assert(largest1 == largest2, "largest fragment size changed");
 8007e3e:	9802      	ldr	r0, [sp, #8]
 8007e40:	9b00      	ldr	r3, [sp, #0]
 8007e42:	4915      	ldr	r1, [pc, #84]	; (8007e98 <rt_test_010_001_execute+0x148>)
 8007e44:	1ac0      	subs	r0, r0, r3
 8007e46:	fab0 f080 	clz	r0, r0
 8007e4a:	0940      	lsrs	r0, r0, #5
 8007e4c:	f7f8 ff58 	bl	8000d00 <_test_assert>
 8007e50:	e795      	b.n	8007d7e <rt_test_010_001_execute+0x2e>
 8007e52:	bf00      	nop
 8007e54:	2000142c 	.word	0x2000142c
 8007e58:	20001f1c 	.word	0x20001f1c
 8007e5c:	20001630 	.word	0x20001630
 8007e60:	0800aa20 	.word	0x0800aa20
 8007e64:	0800ab14 	.word	0x0800ab14
 8007e68:	0800a964 	.word	0x0800a964
 8007e6c:	20001f34 	.word	0x20001f34
 8007e70:	0800ab44 	.word	0x0800ab44
 8007e74:	0800a968 	.word	0x0800a968
 8007e78:	0800ab1c 	.word	0x0800ab1c
 8007e7c:	0800ab24 	.word	0x0800ab24
 8007e80:	0800ab28 	.word	0x0800ab28
 8007e84:	0800ab5c 	.word	0x0800ab5c
 8007e88:	08009840 	.word	0x08009840
 8007e8c:	0800ab9c 	.word	0x0800ab9c
 8007e90:	0800aba0 	.word	0x0800aba0
 8007e94:	0800abb8 	.word	0x0800abb8
 8007e98:	0800abd4 	.word	0x0800abd4
 8007e9c:	00000000 	.word	0x00000000

08007ea0 <rt_test_009_007_execute>:

static void rt_test_009_007_execute(void) {
 8007ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [9.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8007ea4:	4d3a      	ldr	r5, [pc, #232]	; (8007f90 <rt_test_009_007_execute+0xf0>)
 8007ea6:	2301      	movs	r3, #1
static void rt_test_009_007_execute(void) {
 8007ea8:	b08c      	sub	sp, #48	; 0x30
  test_set_step(1);
 8007eaa:	602b      	str	r3, [r5, #0]
 8007eac:	2720      	movs	r7, #32
 8007eae:	f387 8811 	msr	BASEPRI, r7
  elp->next     = esp->next;
 8007eb2:	4e38      	ldr	r6, [pc, #224]	; (8007f94 <rt_test_009_007_execute+0xf4>)
  elp->listener = currp;
 8007eb4:	4c38      	ldr	r4, [pc, #224]	; (8007f98 <rt_test_009_007_execute+0xf8>)
  elp->next     = esp->next;
 8007eb6:	6831      	ldr	r1, [r6, #0]
  elp->listener = currp;
 8007eb8:	69a2      	ldr	r2, [r4, #24]
  elp->events   = events;
 8007eba:	9309      	str	r3, [sp, #36]	; 0x24
  esp->next     = elp;
 8007ebc:	f10d 0a1c 	add.w	sl, sp, #28
  elp->flags    = (eventflags_t)0;
 8007ec0:	2300      	movs	r3, #0
  elp->wflags   = wflags;
 8007ec2:	f04f 30ff 	mov.w	r0, #4294967295
  elp->listener = currp;
 8007ec6:	e9cd 1207 	strd	r1, r2, [sp, #28]
  elp->wflags   = wflags;
 8007eca:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
  esp->next     = elp;
 8007ece:	f8c6 a000 	str.w	sl, [r6]
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f387 8811 	msr	BASEPRI, r7
  elp->next     = esp->next;
 8007eda:	4f30      	ldr	r7, [pc, #192]	; (8007f9c <rt_test_009_007_execute+0xfc>)
  elp->listener = currp;
 8007edc:	69a2      	ldr	r2, [r4, #24]
  elp->next     = esp->next;
 8007ede:	6839      	ldr	r1, [r7, #0]
  elp->flags    = (eventflags_t)0;
 8007ee0:	9305      	str	r3, [sp, #20]
  esp->next     = elp;
 8007ee2:	f10d 0808 	add.w	r8, sp, #8
  elp->events   = events;
 8007ee6:	f04f 0904 	mov.w	r9, #4
  elp->listener = currp;
 8007eea:	e9cd 1202 	strd	r1, r2, [sp, #8]
  elp->wflags   = wflags;
 8007eee:	9006      	str	r0, [sp, #24]
  esp->next     = elp;
 8007ef0:	f8c7 8000 	str.w	r8, [r7]
  elp->events   = events;
 8007ef4:	f8cd 9010 	str.w	r9, [sp, #16]
 8007ef8:	f383 8811 	msr	BASEPRI, r3
  test_end_step(1);

  /* [9.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 8007efc:	2302      	movs	r3, #2
 8007efe:	602b      	str	r3, [r5, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007f00:	f7fb f936 	bl	8003170 <test_wait_tick>
 8007f04:	69a3      	ldr	r3, [r4, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007f06:	4926      	ldr	r1, [pc, #152]	; (8007fa0 <rt_test_009_007_execute+0x100>)
 8007f08:	689a      	ldr	r2, [r3, #8]
 8007f0a:	4b26      	ldr	r3, [pc, #152]	; (8007fa4 <rt_test_009_007_execute+0x104>)
 8007f0c:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007f0e:	4684      	mov	ip, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007f10:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007f14:	3a01      	subs	r2, #1
 8007f16:	4824      	ldr	r0, [pc, #144]	; (8007fa8 <rt_test_009_007_execute+0x108>)
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007f18:	4664      	mov	r4, ip
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007f1a:	f7fa fa99 	bl	8002450 <chThdCreateStatic>
 8007f1e:	4b23      	ldr	r3, [pc, #140]	; (8007fac <rt_test_009_007_execute+0x10c>)
  test_end_step(2);

  /* [9.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8007f20:	2203      	movs	r2, #3
 8007f22:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007f24:	6018      	str	r0, [r3, #0]
  {
    m = chEvtWaitAll(5);
 8007f26:	f7fa fb5b 	bl	80025e0 <chEvtWaitAll.constprop.0>
    test_assert_time_window(target_time,
 8007f2a:	f504 7102 	add.w	r1, r4, #520	; 0x208
 8007f2e:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
 8007f32:	f7f8 fc75 	bl	8000820 <_test_assert_time_window.constprop.0>
 8007f36:	b110      	cbz	r0, 8007f3e <rt_test_009_007_execute+0x9e>
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
  test_end_step(4);
}
 8007f38:	b00c      	add	sp, #48	; 0x30
 8007f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007f3e:	f7f8 fc5f 	bl	8000800 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8007f42:	fab0 f080 	clz	r0, r0
 8007f46:	491a      	ldr	r1, [pc, #104]	; (8007fb0 <rt_test_009_007_execute+0x110>)
 8007f48:	0940      	lsrs	r0, r0, #5
 8007f4a:	f7f8 fed9 	bl	8000d00 <_test_assert>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d1f2      	bne.n	8007f38 <rt_test_009_007_execute+0x98>
    test_wait_threads();
 8007f52:	f7ff fb9d 	bl	8007690 <test_wait_threads>
    chEvtUnregister(&es1, &el1);
 8007f56:	4651      	mov	r1, sl
 8007f58:	4630      	mov	r0, r6
  test_set_step(4);
 8007f5a:	f8c5 9000 	str.w	r9, [r5]
    chEvtUnregister(&es1, &el1);
 8007f5e:	f7f9 f9a7 	bl	80012b0 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 8007f62:	4641      	mov	r1, r8
 8007f64:	4638      	mov	r0, r7
 8007f66:	f7f9 f9a3 	bl	80012b0 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 8007f6a:	6830      	ldr	r0, [r6, #0]
 8007f6c:	4911      	ldr	r1, [pc, #68]	; (8007fb4 <rt_test_009_007_execute+0x114>)
 8007f6e:	1b80      	subs	r0, r0, r6
 8007f70:	fab0 f080 	clz	r0, r0
 8007f74:	0940      	lsrs	r0, r0, #5
 8007f76:	f7f8 fec3 	bl	8000d00 <_test_assert>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d1dc      	bne.n	8007f38 <rt_test_009_007_execute+0x98>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 8007f7e:	6838      	ldr	r0, [r7, #0]
 8007f80:	490c      	ldr	r1, [pc, #48]	; (8007fb4 <rt_test_009_007_execute+0x114>)
 8007f82:	1bc0      	subs	r0, r0, r7
 8007f84:	fab0 f080 	clz	r0, r0
 8007f88:	0940      	lsrs	r0, r0, #5
 8007f8a:	f7f8 feb9 	bl	8000d00 <_test_assert>
 8007f8e:	e7d3      	b.n	8007f38 <rt_test_009_007_execute+0x98>
 8007f90:	20001f1c 	.word	0x20001f1c
 8007f94:	20000808 	.word	0x20000808
 8007f98:	2000142c 	.word	0x2000142c
 8007f9c:	2000080c 	.word	0x2000080c
 8007fa0:	0800a964 	.word	0x0800a964
 8007fa4:	08004101 	.word	0x08004101
 8007fa8:	20001808 	.word	0x20001808
 8007fac:	20001f34 	.word	0x20001f34
 8007fb0:	0800abf4 	.word	0x0800abf4
 8007fb4:	0800989c 	.word	0x0800989c
	...

08007fc0 <rt_test_009_005_execute>:
static void rt_test_009_005_execute(void) {
 8007fc0:	b530      	push	{r4, r5, lr}
    chEvtAddEvents(5);
 8007fc2:	2005      	movs	r0, #5
static void rt_test_009_005_execute(void) {
 8007fc4:	b083      	sub	sp, #12
  test_set_step(2);
 8007fc6:	4c2b      	ldr	r4, [pc, #172]	; (8008074 <rt_test_009_005_execute+0xb4>)
    chEvtAddEvents(5);
 8007fc8:	f7f9 f962 	bl	8001290 <chEvtAddEvents>
  test_set_step(2);
 8007fcc:	2302      	movs	r3, #2
 8007fce:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 8007fd0:	f7fa fb06 	bl	80025e0 <chEvtWaitAll.constprop.0>
    test_assert(m == 5, "unexpected pending bit");
 8007fd4:	f1a0 0005 	sub.w	r0, r0, #5
 8007fd8:	fab0 f080 	clz	r0, r0
 8007fdc:	4926      	ldr	r1, [pc, #152]	; (8008078 <rt_test_009_005_execute+0xb8>)
 8007fde:	0940      	lsrs	r0, r0, #5
 8007fe0:	f7f8 fe8e 	bl	8000d00 <_test_assert>
 8007fe4:	b108      	cbz	r0, 8007fea <rt_test_009_005_execute+0x2a>
}
 8007fe6:	b003      	add	sp, #12
 8007fe8:	bd30      	pop	{r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007fea:	f7f8 fc09 	bl	8000800 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8007fee:	fab0 f080 	clz	r0, r0
 8007ff2:	4922      	ldr	r1, [pc, #136]	; (800807c <rt_test_009_005_execute+0xbc>)
 8007ff4:	0940      	lsrs	r0, r0, #5
 8007ff6:	f7f8 fe83 	bl	8000d00 <_test_assert>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	d1f3      	bne.n	8007fe6 <rt_test_009_005_execute+0x26>
    chEvtAddEvents(4);
 8007ffe:	2004      	movs	r0, #4
 8008000:	f7f9 f946 	bl	8001290 <chEvtAddEvents>
  test_set_step(4);
 8008004:	2304      	movs	r3, #4
 8008006:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008008:	f7fb f8b2 	bl	8003170 <test_wait_tick>
  return ch.rlist.current;
 800800c:	4a1c      	ldr	r2, [pc, #112]	; (8008080 <rt_test_009_005_execute+0xc0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800800e:	4b1d      	ldr	r3, [pc, #116]	; (8008084 <rt_test_009_005_execute+0xc4>)
 8008010:	6991      	ldr	r1, [r2, #24]
 8008012:	688a      	ldr	r2, [r1, #8]
 8008014:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008016:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008018:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800801c:	3a01      	subs	r2, #1
 800801e:	481a      	ldr	r0, [pc, #104]	; (8008088 <rt_test_009_005_execute+0xc8>)
 8008020:	f7fa fa16 	bl	8002450 <chThdCreateStatic>
 8008024:	4a19      	ldr	r2, [pc, #100]	; (800808c <rt_test_009_005_execute+0xcc>)
  test_set_step(5);
 8008026:	2305      	movs	r3, #5
 8008028:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800802a:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAll(5);
 800802c:	f7fa fad8 	bl	80025e0 <chEvtWaitAll.constprop.0>
    test_assert_time_window(target_time,
 8008030:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAll(5);
 8008034:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8008036:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 800803a:	f7f8 fbf1 	bl	8000820 <_test_assert_time_window.constprop.0>
 800803e:	2800      	cmp	r0, #0
 8008040:	d1d1      	bne.n	8007fe6 <rt_test_009_005_execute+0x26>
    test_assert(m == 5, "event flags error");
 8008042:	f1a4 0005 	sub.w	r0, r4, #5
 8008046:	fab0 f080 	clz	r0, r0
 800804a:	4911      	ldr	r1, [pc, #68]	; (8008090 <rt_test_009_005_execute+0xd0>)
 800804c:	0940      	lsrs	r0, r0, #5
 800804e:	f7f8 fe57 	bl	8000d00 <_test_assert>
 8008052:	2800      	cmp	r0, #0
 8008054:	d1c7      	bne.n	8007fe6 <rt_test_009_005_execute+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008056:	f7f8 fbd3 	bl	8000800 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 800805a:	fab0 f080 	clz	r0, r0
 800805e:	4907      	ldr	r1, [pc, #28]	; (800807c <rt_test_009_005_execute+0xbc>)
 8008060:	0940      	lsrs	r0, r0, #5
 8008062:	f7f8 fe4d 	bl	8000d00 <_test_assert>
 8008066:	2800      	cmp	r0, #0
 8008068:	d1bd      	bne.n	8007fe6 <rt_test_009_005_execute+0x26>
}
 800806a:	b003      	add	sp, #12
 800806c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_wait_threads();
 8008070:	f7ff bb0e 	b.w	8007690 <test_wait_threads>
 8008074:	20001f1c 	.word	0x20001f1c
 8008078:	0800ac00 	.word	0x0800ac00
 800807c:	0800abf4 	.word	0x0800abf4
 8008080:	2000142c 	.word	0x2000142c
 8008084:	08004141 	.word	0x08004141
 8008088:	20001808 	.word	0x20001808
 800808c:	20001f34 	.word	0x20001f34
 8008090:	0800ac18 	.word	0x0800ac18
	...

080080a0 <rt_test_009_004_execute>:
static void rt_test_009_004_execute(void) {
 80080a0:	b530      	push	{r4, r5, lr}
    chEvtAddEvents(5);
 80080a2:	2005      	movs	r0, #5
static void rt_test_009_004_execute(void) {
 80080a4:	b083      	sub	sp, #12
  test_set_step(2);
 80080a6:	4c2a      	ldr	r4, [pc, #168]	; (8008150 <rt_test_009_004_execute+0xb0>)
    chEvtAddEvents(5);
 80080a8:	f7f9 f8f2 	bl	8001290 <chEvtAddEvents>
  test_set_step(2);
 80080ac:	2302      	movs	r3, #2
 80080ae:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 80080b0:	f7fa fa76 	bl	80025a0 <chEvtWaitAny.constprop.0>
    test_assert(m == 5, "unexpected pending bit");
 80080b4:	f1a0 0005 	sub.w	r0, r0, #5
 80080b8:	fab0 f080 	clz	r0, r0
 80080bc:	4925      	ldr	r1, [pc, #148]	; (8008154 <rt_test_009_004_execute+0xb4>)
 80080be:	0940      	lsrs	r0, r0, #5
 80080c0:	f7f8 fe1e 	bl	8000d00 <_test_assert>
 80080c4:	b108      	cbz	r0, 80080ca <rt_test_009_004_execute+0x2a>
}
 80080c6:	b003      	add	sp, #12
 80080c8:	bd30      	pop	{r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80080ca:	f7f8 fb99 	bl	8000800 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 80080ce:	fab0 f080 	clz	r0, r0
 80080d2:	4921      	ldr	r1, [pc, #132]	; (8008158 <rt_test_009_004_execute+0xb8>)
 80080d4:	0940      	lsrs	r0, r0, #5
 80080d6:	f7f8 fe13 	bl	8000d00 <_test_assert>
 80080da:	2800      	cmp	r0, #0
 80080dc:	d1f3      	bne.n	80080c6 <rt_test_009_004_execute+0x26>
  test_set_step(3);
 80080de:	2303      	movs	r3, #3
 80080e0:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80080e2:	f7fb f845 	bl	8003170 <test_wait_tick>
 80080e6:	4a1d      	ldr	r2, [pc, #116]	; (800815c <rt_test_009_004_execute+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80080e8:	4b1d      	ldr	r3, [pc, #116]	; (8008160 <rt_test_009_004_execute+0xc0>)
 80080ea:	6991      	ldr	r1, [r2, #24]
 80080ec:	688a      	ldr	r2, [r1, #8]
 80080ee:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80080f0:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80080f2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80080f6:	3a01      	subs	r2, #1
 80080f8:	481a      	ldr	r0, [pc, #104]	; (8008164 <rt_test_009_004_execute+0xc4>)
 80080fa:	f7fa f9a9 	bl	8002450 <chThdCreateStatic>
 80080fe:	4a1a      	ldr	r2, [pc, #104]	; (8008168 <rt_test_009_004_execute+0xc8>)
  test_set_step(4);
 8008100:	2304      	movs	r3, #4
 8008102:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008104:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8008106:	f7fa fa4b 	bl	80025a0 <chEvtWaitAny.constprop.0>
    test_assert_time_window(target_time,
 800810a:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAny(ALL_EVENTS);
 800810e:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8008110:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8008114:	f7f8 fb84 	bl	8000820 <_test_assert_time_window.constprop.0>
 8008118:	2800      	cmp	r0, #0
 800811a:	d1d4      	bne.n	80080c6 <rt_test_009_004_execute+0x26>
    test_assert(m == 1, "event flag error");
 800811c:	f1a4 0001 	sub.w	r0, r4, #1
 8008120:	fab0 f080 	clz	r0, r0
 8008124:	4911      	ldr	r1, [pc, #68]	; (800816c <rt_test_009_004_execute+0xcc>)
 8008126:	0940      	lsrs	r0, r0, #5
 8008128:	f7f8 fdea 	bl	8000d00 <_test_assert>
 800812c:	2800      	cmp	r0, #0
 800812e:	d1ca      	bne.n	80080c6 <rt_test_009_004_execute+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008130:	f7f8 fb66 	bl	8000800 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8008134:	fab0 f080 	clz	r0, r0
 8008138:	4907      	ldr	r1, [pc, #28]	; (8008158 <rt_test_009_004_execute+0xb8>)
 800813a:	0940      	lsrs	r0, r0, #5
 800813c:	f7f8 fde0 	bl	8000d00 <_test_assert>
 8008140:	2800      	cmp	r0, #0
 8008142:	d1c0      	bne.n	80080c6 <rt_test_009_004_execute+0x26>
}
 8008144:	b003      	add	sp, #12
 8008146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_wait_threads();
 800814a:	f7ff baa1 	b.w	8007690 <test_wait_threads>
 800814e:	bf00      	nop
 8008150:	20001f1c 	.word	0x20001f1c
 8008154:	0800ac00 	.word	0x0800ac00
 8008158:	0800abf4 	.word	0x0800abf4
 800815c:	2000142c 	.word	0x2000142c
 8008160:	08004141 	.word	0x08004141
 8008164:	20001808 	.word	0x20001808
 8008168:	20001f34 	.word	0x20001f34
 800816c:	0800ac2c 	.word	0x0800ac2c

08008170 <rt_test_009_003_execute>:
static void rt_test_009_003_execute(void) {
 8008170:	b530      	push	{r4, r5, lr}
    chEvtAddEvents(7);
 8008172:	2007      	movs	r0, #7
static void rt_test_009_003_execute(void) {
 8008174:	b083      	sub	sp, #12
  test_set_step(2);
 8008176:	4c36      	ldr	r4, [pc, #216]	; (8008250 <rt_test_009_003_execute+0xe0>)
    chEvtAddEvents(7);
 8008178:	f7f9 f88a 	bl	8001290 <chEvtAddEvents>
  test_set_step(2);
 800817c:	2302      	movs	r3, #2
 800817e:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8008180:	f7fa f9ee 	bl	8002560 <chEvtWaitOne.constprop.0>
    test_assert(m == 1, "single event error");
 8008184:	f1a0 0001 	sub.w	r0, r0, #1
 8008188:	fab0 f080 	clz	r0, r0
 800818c:	4931      	ldr	r1, [pc, #196]	; (8008254 <rt_test_009_003_execute+0xe4>)
 800818e:	0940      	lsrs	r0, r0, #5
 8008190:	f7f8 fdb6 	bl	8000d00 <_test_assert>
 8008194:	b108      	cbz	r0, 800819a <rt_test_009_003_execute+0x2a>
}
 8008196:	b003      	add	sp, #12
 8008198:	bd30      	pop	{r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 800819a:	f7fa f9e1 	bl	8002560 <chEvtWaitOne.constprop.0>
    test_assert(m == 2, "single event error");
 800819e:	f1a0 0002 	sub.w	r0, r0, #2
 80081a2:	fab0 f080 	clz	r0, r0
 80081a6:	492b      	ldr	r1, [pc, #172]	; (8008254 <rt_test_009_003_execute+0xe4>)
 80081a8:	0940      	lsrs	r0, r0, #5
 80081aa:	f7f8 fda9 	bl	8000d00 <_test_assert>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d1f1      	bne.n	8008196 <rt_test_009_003_execute+0x26>
    m = chEvtWaitOne(ALL_EVENTS);
 80081b2:	f7fa f9d5 	bl	8002560 <chEvtWaitOne.constprop.0>
    test_assert(m == 4, "single event error");
 80081b6:	f1a0 0004 	sub.w	r0, r0, #4
 80081ba:	fab0 f080 	clz	r0, r0
 80081be:	4925      	ldr	r1, [pc, #148]	; (8008254 <rt_test_009_003_execute+0xe4>)
 80081c0:	0940      	lsrs	r0, r0, #5
 80081c2:	f7f8 fd9d 	bl	8000d00 <_test_assert>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d1e5      	bne.n	8008196 <rt_test_009_003_execute+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80081ca:	f7f8 fb19 	bl	8000800 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 80081ce:	fab0 f080 	clz	r0, r0
 80081d2:	4921      	ldr	r1, [pc, #132]	; (8008258 <rt_test_009_003_execute+0xe8>)
 80081d4:	0940      	lsrs	r0, r0, #5
 80081d6:	f7f8 fd93 	bl	8000d00 <_test_assert>
 80081da:	2800      	cmp	r0, #0
 80081dc:	d1db      	bne.n	8008196 <rt_test_009_003_execute+0x26>
  test_set_step(3);
 80081de:	2303      	movs	r3, #3
 80081e0:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80081e2:	f7fa ffc5 	bl	8003170 <test_wait_tick>
 80081e6:	4a1d      	ldr	r2, [pc, #116]	; (800825c <rt_test_009_003_execute+0xec>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80081e8:	4b1d      	ldr	r3, [pc, #116]	; (8008260 <rt_test_009_003_execute+0xf0>)
 80081ea:	6991      	ldr	r1, [r2, #24]
 80081ec:	688a      	ldr	r2, [r1, #8]
 80081ee:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80081f0:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80081f2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80081f6:	3a01      	subs	r2, #1
 80081f8:	481a      	ldr	r0, [pc, #104]	; (8008264 <rt_test_009_003_execute+0xf4>)
 80081fa:	f7fa f929 	bl	8002450 <chThdCreateStatic>
 80081fe:	4a1a      	ldr	r2, [pc, #104]	; (8008268 <rt_test_009_003_execute+0xf8>)
  test_set_step(4);
 8008200:	2304      	movs	r3, #4
 8008202:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008204:	6010      	str	r0, [r2, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8008206:	f7fa f9ab 	bl	8002560 <chEvtWaitOne.constprop.0>
    test_assert_time_window(target_time,
 800820a:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitOne(ALL_EVENTS);
 800820e:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8008210:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8008214:	f7f8 fb04 	bl	8000820 <_test_assert_time_window.constprop.0>
 8008218:	2800      	cmp	r0, #0
 800821a:	d1bc      	bne.n	8008196 <rt_test_009_003_execute+0x26>
    test_assert(m == 1, "event flag error");
 800821c:	f1a4 0001 	sub.w	r0, r4, #1
 8008220:	fab0 f080 	clz	r0, r0
 8008224:	4911      	ldr	r1, [pc, #68]	; (800826c <rt_test_009_003_execute+0xfc>)
 8008226:	0940      	lsrs	r0, r0, #5
 8008228:	f7f8 fd6a 	bl	8000d00 <_test_assert>
 800822c:	2800      	cmp	r0, #0
 800822e:	d1b2      	bne.n	8008196 <rt_test_009_003_execute+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008230:	f7f8 fae6 	bl	8000800 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8008234:	fab0 f080 	clz	r0, r0
 8008238:	4907      	ldr	r1, [pc, #28]	; (8008258 <rt_test_009_003_execute+0xe8>)
 800823a:	0940      	lsrs	r0, r0, #5
 800823c:	f7f8 fd60 	bl	8000d00 <_test_assert>
 8008240:	2800      	cmp	r0, #0
 8008242:	d1a8      	bne.n	8008196 <rt_test_009_003_execute+0x26>
}
 8008244:	b003      	add	sp, #12
 8008246:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    test_wait_threads();
 800824a:	f7ff ba21 	b.w	8007690 <test_wait_threads>
 800824e:	bf00      	nop
 8008250:	20001f1c 	.word	0x20001f1c
 8008254:	0800ac40 	.word	0x0800ac40
 8008258:	0800abf4 	.word	0x0800abf4
 800825c:	2000142c 	.word	0x2000142c
 8008260:	08004141 	.word	0x08004141
 8008264:	20001808 	.word	0x20001808
 8008268:	20001f34 	.word	0x20001f34
 800826c:	0800ac2c 	.word	0x0800ac2c

08008270 <rt_test_008_001_execute>:
 * - [8.1.1] Starting the messenger thread.
 * - [8.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_008_001_execute(void) {
 8008270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008272:	4b19      	ldr	r3, [pc, #100]	; (80082d8 <rt_test_008_001_execute+0x68>)
  thread_t *tp;
  msg_t msg;

  /* [8.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8008274:	4c19      	ldr	r4, [pc, #100]	; (80082dc <rt_test_008_001_execute+0x6c>)
 8008276:	6999      	ldr	r1, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8008278:	4819      	ldr	r0, [pc, #100]	; (80082e0 <rt_test_008_001_execute+0x70>)
 800827a:	688a      	ldr	r2, [r1, #8]
 800827c:	4b19      	ldr	r3, [pc, #100]	; (80082e4 <rt_test_008_001_execute+0x74>)
static void rt_test_008_001_execute(void) {
 800827e:	b083      	sub	sp, #12
  test_set_step(1);
 8008280:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8008282:	9100      	str	r1, [sp, #0]
 8008284:	3201      	adds	r2, #1
  test_set_step(1);
 8008286:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8008288:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800828c:	f7fa f8e0 	bl	8002450 <chThdCreateStatic>
 8008290:	4a15      	ldr	r2, [pc, #84]	; (80082e8 <rt_test_008_001_execute+0x78>)
  }
  test_end_step(1);

  /* [8.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 8008292:	2302      	movs	r3, #2
 8008294:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8008296:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8008298:	2404      	movs	r4, #4
 800829a:	2720      	movs	r7, #32
 800829c:	2600      	movs	r6, #0
 800829e:	f387 8811 	msr	BASEPRI, r7
  tp = chMsgWaitS();
 80082a2:	f7fa ffc5 	bl	8003230 <chMsgWaitS>
 80082a6:	f386 8811 	msr	BASEPRI, r6
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
      msg = chMsgGet(tp);
 80082aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082ac:	f387 8811 	msr	BASEPRI, r7
  chSchWakeupS(tp, msg);
 80082b0:	4629      	mov	r1, r5
 80082b2:	f7fa f835 	bl	8002320 <chSchWakeupS>
 80082b6:	f386 8811 	msr	BASEPRI, r6
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 80082ba:	b2e8      	uxtb	r0, r5
 80082bc:	f7f8 fdc8 	bl	8000e50 <test_emit_token>
    for (i = 0; i < 4; i++) {
 80082c0:	3c01      	subs	r4, #1
 80082c2:	d1ec      	bne.n	800829e <rt_test_008_001_execute+0x2e>
    }
    test_wait_threads();
 80082c4:	f7ff f9e4 	bl	8007690 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 80082c8:	4908      	ldr	r1, [pc, #32]	; (80082ec <rt_test_008_001_execute+0x7c>)
 80082ca:	4809      	ldr	r0, [pc, #36]	; (80082f0 <rt_test_008_001_execute+0x80>)
  }
  test_end_step(2);
}
 80082cc:	b003      	add	sp, #12
 80082ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 80082d2:	f7f8 be95 	b.w	8001000 <_test_assert_sequence>
 80082d6:	bf00      	nop
 80082d8:	2000142c 	.word	0x2000142c
 80082dc:	20001f1c 	.word	0x20001f1c
 80082e0:	20001808 	.word	0x20001808
 80082e4:	08003431 	.word	0x08003431
 80082e8:	20001f34 	.word	0x20001f34
 80082ec:	08009840 	.word	0x08009840
 80082f0:	0800a894 	.word	0x0800a894
	...

08008300 <rt_test_007_009_execute>:

static void rt_test_007_009_execute(void) {
 8008300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008302:	4b22      	ldr	r3, [pc, #136]	; (800838c <rt_test_007_009_execute+0x8c>)
  }
  test_end_step(1);

  /* [7.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8008304:	4c22      	ldr	r4, [pc, #136]	; (8008390 <rt_test_007_009_execute+0x90>)
  return chThdGetSelfX()->prio;
 8008306:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008308:	4e22      	ldr	r6, [pc, #136]	; (8008394 <rt_test_007_009_execute+0x94>)
 800830a:	689f      	ldr	r7, [r3, #8]
 800830c:	4b22      	ldr	r3, [pc, #136]	; (8008398 <rt_test_007_009_execute+0x98>)
 800830e:	4d23      	ldr	r5, [pc, #140]	; (800839c <rt_test_007_009_execute+0x9c>)
static void rt_test_007_009_execute(void) {
 8008310:	b083      	sub	sp, #12
  test_set_step(2);
 8008312:	2102      	movs	r1, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	1c7a      	adds	r2, r7, #1
  test_set_step(2);
 8008318:	6021      	str	r1, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800831a:	4b21      	ldr	r3, [pc, #132]	; (80083a0 <rt_test_007_009_execute+0xa0>)
 800831c:	4630      	mov	r0, r6
 800831e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008322:	f7fa f895 	bl	8002450 <chThdCreateStatic>

  /* [7.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008326:	4b1f      	ldr	r3, [pc, #124]	; (80083a4 <rt_test_007_009_execute+0xa4>)
 8008328:	9300      	str	r3, [sp, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800832a:	4601      	mov	r1, r0
  test_set_step(3);
 800832c:	f04f 0c03 	mov.w	ip, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008330:	1cba      	adds	r2, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008332:	6029      	str	r1, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008334:	4b1c      	ldr	r3, [pc, #112]	; (80083a8 <rt_test_007_009_execute+0xa8>)
  test_set_step(3);
 8008336:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 800833a:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 800833e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008342:	f7fa f885 	bl	8002450 <chThdCreateStatic>

  /* [7.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8008346:	4b19      	ldr	r3, [pc, #100]	; (80083ac <rt_test_007_009_execute+0xac>)
 8008348:	9300      	str	r3, [sp, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 800834a:	4601      	mov	r1, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800834c:	1cfa      	adds	r2, r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 800834e:	6069      	str	r1, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8008350:	4b17      	ldr	r3, [pc, #92]	; (80083b0 <rt_test_007_009_execute+0xb0>)
 8008352:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008356:	f506 7024 	add.w	r0, r6, #656	; 0x290
  test_set_step(4);
 800835a:	2604      	movs	r6, #4
 800835c:	6026      	str	r6, [r4, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800835e:	f7fa f877 	bl	8002450 <chThdCreateStatic>
  test_end_step(4);

  /* [7.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8008362:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8008364:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 8008366:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8008368:	f7fa f80a 	bl	8002380 <chCondSignal.constprop.0>
  }
  test_end_step(5);

  /* [7.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 800836c:	2306      	movs	r3, #6
 800836e:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8008370:	f7fa f806 	bl	8002380 <chCondSignal.constprop.0>
  }
  test_end_step(6);

  /* [7.9.7] Checking the order of operations.*/
  test_set_step(7);
 8008374:	2307      	movs	r3, #7
 8008376:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 8008378:	f7ff f98a 	bl	8007690 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
 800837c:	490d      	ldr	r1, [pc, #52]	; (80083b4 <rt_test_007_009_execute+0xb4>)
 800837e:	480e      	ldr	r0, [pc, #56]	; (80083b8 <rt_test_007_009_execute+0xb8>)
  }
  test_end_step(7);
}
 8008380:	b003      	add	sp, #12
 8008382:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8008386:	f7f8 be3b 	b.w	8001000 <_test_assert_sequence>
 800838a:	bf00      	nop
 800838c:	2000142c 	.word	0x2000142c
 8008390:	20001f1c 	.word	0x20001f1c
 8008394:	20001808 	.word	0x20001808
 8008398:	0800a964 	.word	0x0800a964
 800839c:	20001f34 	.word	0x20001f34
 80083a0:	08005ab1 	.word	0x08005ab1
 80083a4:	0800ab24 	.word	0x0800ab24
 80083a8:	08005b41 	.word	0x08005b41
 80083ac:	0800a968 	.word	0x0800a968
 80083b0:	08005bb1 	.word	0x08005bb1
 80083b4:	08009840 	.word	0x08009840
 80083b8:	08009854 	.word	0x08009854
 80083bc:	00000000 	.word	0x00000000

080083c0 <rt_test_007_008_execute>:
static void rt_test_007_008_execute(void) {
 80083c0:	b570      	push	{r4, r5, r6, lr}
  return ch.rlist.current;
 80083c2:	4b30      	ldr	r3, [pc, #192]	; (8008484 <rt_test_007_008_execute+0xc4>)
  test_set_step(1);
 80083c4:	4e30      	ldr	r6, [pc, #192]	; (8008488 <rt_test_007_008_execute+0xc8>)
  return chThdGetSelfX()->prio;
 80083c6:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80083c8:	4a30      	ldr	r2, [pc, #192]	; (800848c <rt_test_007_008_execute+0xcc>)
 80083ca:	689d      	ldr	r5, [r3, #8]
 80083cc:	4830      	ldr	r0, [pc, #192]	; (8008490 <rt_test_007_008_execute+0xd0>)
 80083ce:	4b31      	ldr	r3, [pc, #196]	; (8008494 <rt_test_007_008_execute+0xd4>)
static void rt_test_007_008_execute(void) {
 80083d0:	b082      	sub	sp, #8
  test_set_step(1);
 80083d2:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80083d4:	9200      	str	r2, [sp, #0]
 80083d6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80083da:	1c6a      	adds	r2, r5, #1
  test_set_step(1);
 80083dc:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80083de:	f7fa f837 	bl	8002450 <chThdCreateStatic>
 80083e2:	4c2d      	ldr	r4, [pc, #180]	; (8008498 <rt_test_007_008_execute+0xd8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80083e4:	4b2d      	ldr	r3, [pc, #180]	; (800849c <rt_test_007_008_execute+0xdc>)
 80083e6:	9300      	str	r3, [sp, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80083e8:	4601      	mov	r1, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80083ea:	1caa      	adds	r2, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80083ec:	6021      	str	r1, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80083ee:	4b29      	ldr	r3, [pc, #164]	; (8008494 <rt_test_007_008_execute+0xd4>)
 80083f0:	482b      	ldr	r0, [pc, #172]	; (80084a0 <rt_test_007_008_execute+0xe0>)
 80083f2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80083f6:	f7fa f82b 	bl	8002450 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80083fa:	4b2a      	ldr	r3, [pc, #168]	; (80084a4 <rt_test_007_008_execute+0xe4>)
 80083fc:	9300      	str	r3, [sp, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80083fe:	4601      	mov	r1, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008400:	1cea      	adds	r2, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008402:	6061      	str	r1, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008404:	4b23      	ldr	r3, [pc, #140]	; (8008494 <rt_test_007_008_execute+0xd4>)
 8008406:	4828      	ldr	r0, [pc, #160]	; (80084a8 <rt_test_007_008_execute+0xe8>)
 8008408:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800840c:	f7fa f820 	bl	8002450 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008410:	4b26      	ldr	r3, [pc, #152]	; (80084ac <rt_test_007_008_execute+0xec>)
 8008412:	9300      	str	r3, [sp, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008414:	4601      	mov	r1, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008416:	1d2a      	adds	r2, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008418:	60a1      	str	r1, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800841a:	4b1e      	ldr	r3, [pc, #120]	; (8008494 <rt_test_007_008_execute+0xd4>)
 800841c:	4824      	ldr	r0, [pc, #144]	; (80084b0 <rt_test_007_008_execute+0xf0>)
 800841e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008422:	f7fa f815 	bl	8002450 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008426:	4b23      	ldr	r3, [pc, #140]	; (80084b4 <rt_test_007_008_execute+0xf4>)
 8008428:	9300      	str	r3, [sp, #0]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800842a:	4601      	mov	r1, r0
 800842c:	60e1      	str	r1, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800842e:	4b19      	ldr	r3, [pc, #100]	; (8008494 <rt_test_007_008_execute+0xd4>)
 8008430:	4821      	ldr	r0, [pc, #132]	; (80084b8 <rt_test_007_008_execute+0xf8>)
 8008432:	1d6a      	adds	r2, r5, #5
 8008434:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008438:	f7fa f80a 	bl	8002450 <chThdCreateStatic>
  test_set_step(2);
 800843c:	2302      	movs	r3, #2
 800843e:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008440:	6120      	str	r0, [r4, #16]
 8008442:	2320      	movs	r3, #32
 8008444:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008448:	4c1c      	ldr	r4, [pc, #112]	; (80084bc <rt_test_007_008_execute+0xfc>)
 800844a:	6823      	ldr	r3, [r4, #0]
  while (queue_notempty(&cp->queue)) {
 800844c:	42a3      	cmp	r3, r4
 800844e:	d00b      	beq.n	8008468 <rt_test_007_008_execute+0xa8>
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8008450:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	6022      	str	r2, [r4, #0]
 8008458:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 800845a:	6054      	str	r4, [r2, #4]
 800845c:	f7f9 f868 	bl	8001530 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
 8008464:	42a3      	cmp	r3, r4
 8008466:	d1f5      	bne.n	8008454 <rt_test_007_008_execute+0x94>
  chSchRescheduleS();
 8008468:	f7fb faca 	bl	8003a00 <chSchRescheduleS>
 800846c:	2300      	movs	r3, #0
 800846e:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8008472:	f7ff f90d 	bl	8007690 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008476:	4912      	ldr	r1, [pc, #72]	; (80084c0 <rt_test_007_008_execute+0x100>)
 8008478:	4812      	ldr	r0, [pc, #72]	; (80084c4 <rt_test_007_008_execute+0x104>)
}
 800847a:	b002      	add	sp, #8
 800847c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8008480:	f7f8 bdbe 	b.w	8001000 <_test_assert_sequence>
 8008484:	2000142c 	.word	0x2000142c
 8008488:	20001f1c 	.word	0x20001f1c
 800848c:	0800ac58 	.word	0x0800ac58
 8008490:	20001808 	.word	0x20001808
 8008494:	08005b41 	.word	0x08005b41
 8008498:	20001f34 	.word	0x20001f34
 800849c:	0800ab30 	.word	0x0800ab30
 80084a0:	20001950 	.word	0x20001950
 80084a4:	0800ab24 	.word	0x0800ab24
 80084a8:	20001a98 	.word	0x20001a98
 80084ac:	0800a968 	.word	0x0800a968
 80084b0:	20001be0 	.word	0x20001be0
 80084b4:	0800a964 	.word	0x0800a964
 80084b8:	20001d28 	.word	0x20001d28
 80084bc:	20000800 	.word	0x20000800
 80084c0:	08009840 	.word	0x08009840
 80084c4:	0800ac54 	.word	0x0800ac54
	...

080084d0 <rt_test_007_007_execute>:
static void rt_test_007_007_execute(void) {
 80084d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80084d4:	4b33      	ldr	r3, [pc, #204]	; (80085a4 <rt_test_007_007_execute+0xd4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80084d6:	4e34      	ldr	r6, [pc, #208]	; (80085a8 <rt_test_007_007_execute+0xd8>)
  return chThdGetSelfX()->prio;
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	4d34      	ldr	r5, [pc, #208]	; (80085ac <rt_test_007_007_execute+0xdc>)
 80084dc:	689f      	ldr	r7, [r3, #8]
  test_set_step(1);
 80084de:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80085d0 <rt_test_007_007_execute+0x100>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80084e2:	4b33      	ldr	r3, [pc, #204]	; (80085b0 <rt_test_007_007_execute+0xe0>)
static void rt_test_007_007_execute(void) {
 80084e4:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80084e6:	1c7a      	adds	r2, r7, #1
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	4628      	mov	r0, r5
 80084ec:	4633      	mov	r3, r6
  test_set_step(1);
 80084ee:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80084f0:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 80084f4:	f8c8 4000 	str.w	r4, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80084f8:	f7f9 ffaa 	bl	8002450 <chThdCreateStatic>
 80084fc:	4c2d      	ldr	r4, [pc, #180]	; (80085b4 <rt_test_007_007_execute+0xe4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80084fe:	4b2e      	ldr	r3, [pc, #184]	; (80085b8 <rt_test_007_007_execute+0xe8>)
 8008500:	9300      	str	r3, [sp, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008502:	4684      	mov	ip, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008504:	1cba      	adds	r2, r7, #2
 8008506:	4633      	mov	r3, r6
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008508:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800850c:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8008510:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008514:	f7f9 ff9c 	bl	8002450 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008518:	4b28      	ldr	r3, [pc, #160]	; (80085bc <rt_test_007_007_execute+0xec>)
 800851a:	9300      	str	r3, [sp, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800851c:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800851e:	1cfa      	adds	r2, r7, #3
 8008520:	4633      	mov	r3, r6
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008522:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008526:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800852a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800852e:	f7f9 ff8f 	bl	8002450 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008532:	4b23      	ldr	r3, [pc, #140]	; (80085c0 <rt_test_007_007_execute+0xf0>)
 8008534:	9300      	str	r3, [sp, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008536:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008538:	1d3a      	adds	r2, r7, #4
 800853a:	4633      	mov	r3, r6
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800853c:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008540:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8008544:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008548:	f7f9 ff82 	bl	8002450 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800854c:	4b1d      	ldr	r3, [pc, #116]	; (80085c4 <rt_test_007_007_execute+0xf4>)
 800854e:	9300      	str	r3, [sp, #0]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008550:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008552:	4633      	mov	r3, r6
 8008554:	1d7a      	adds	r2, r7, #5
 8008556:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800855a:	f44f 71a4 	mov.w	r1, #328	; 0x148
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800855e:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008562:	f7f9 ff75 	bl	8002450 <chThdCreateStatic>
  test_set_step(2);
 8008566:	2302      	movs	r3, #2
 8008568:	f8c8 3000 	str.w	r3, [r8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800856c:	6120      	str	r0, [r4, #16]
 800856e:	2320      	movs	r3, #32
 8008570:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
 8008574:	f7f9 f894 	bl	80016a0 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 8008578:	f7f9 f892 	bl	80016a0 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 800857c:	f7f9 f890 	bl	80016a0 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 8008580:	f7f9 f88e 	bl	80016a0 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 8008584:	f7f9 f88c 	bl	80016a0 <chCondSignalI.constprop.0>
    chSchRescheduleS();
 8008588:	f7fb fa3a 	bl	8003a00 <chSchRescheduleS>
 800858c:	2300      	movs	r3, #0
 800858e:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8008592:	f7ff f87d 	bl	8007690 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008596:	490c      	ldr	r1, [pc, #48]	; (80085c8 <rt_test_007_007_execute+0xf8>)
 8008598:	480c      	ldr	r0, [pc, #48]	; (80085cc <rt_test_007_007_execute+0xfc>)
}
 800859a:	b002      	add	sp, #8
 800859c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80085a0:	f7f8 bd2e 	b.w	8001000 <_test_assert_sequence>
 80085a4:	2000142c 	.word	0x2000142c
 80085a8:	08005b41 	.word	0x08005b41
 80085ac:	20001808 	.word	0x20001808
 80085b0:	0800ac58 	.word	0x0800ac58
 80085b4:	20001f34 	.word	0x20001f34
 80085b8:	0800ab30 	.word	0x0800ab30
 80085bc:	0800ab24 	.word	0x0800ab24
 80085c0:	0800a968 	.word	0x0800a968
 80085c4:	0800a964 	.word	0x0800a964
 80085c8:	08009840 	.word	0x08009840
 80085cc:	0800ac54 	.word	0x0800ac54
 80085d0:	20001f1c 	.word	0x20001f1c
	...

080085e0 <rt_test_006_006_teardown>:
  test_wait_threads();
 80085e0:	f7ff b856 	b.w	8007690 <test_wait_threads>
	...

080085f0 <rt_test_007_004_teardown>:
 80085f0:	f7ff b84e 	b.w	8007690 <test_wait_threads>
	...

08008600 <rt_test_007_001_execute>:
static void rt_test_007_001_execute(void) {
 8008600:	b5f0      	push	{r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8008602:	4f2f      	ldr	r7, [pc, #188]	; (80086c0 <rt_test_007_001_execute+0xc0>)
  test_set_step(2);
 8008604:	4e2f      	ldr	r6, [pc, #188]	; (80086c4 <rt_test_007_001_execute+0xc4>)
  return chThdGetSelfX()->prio;
 8008606:	69bb      	ldr	r3, [r7, #24]
    chMtxLock(&m1);
 8008608:	482f      	ldr	r0, [pc, #188]	; (80086c8 <rt_test_007_001_execute+0xc8>)
 800860a:	689c      	ldr	r4, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800860c:	4d2f      	ldr	r5, [pc, #188]	; (80086cc <rt_test_007_001_execute+0xcc>)
static void rt_test_007_001_execute(void) {
 800860e:	b083      	sub	sp, #12
  test_set_step(2);
 8008610:	2302      	movs	r3, #2
 8008612:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8008614:	f7fa ff9c 	bl	8003550 <chMtxLock>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008618:	4b2d      	ldr	r3, [pc, #180]	; (80086d0 <rt_test_007_001_execute+0xd0>)
 800861a:	9300      	str	r3, [sp, #0]
  test_set_step(3);
 800861c:	2103      	movs	r1, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800861e:	4b2d      	ldr	r3, [pc, #180]	; (80086d4 <rt_test_007_001_execute+0xd4>)
  test_set_step(3);
 8008620:	6031      	str	r1, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008622:	1c62      	adds	r2, r4, #1
 8008624:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008628:	482b      	ldr	r0, [pc, #172]	; (80086d8 <rt_test_007_001_execute+0xd8>)
 800862a:	f7f9 ff11 	bl	8002450 <chThdCreateStatic>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800862e:	4b2b      	ldr	r3, [pc, #172]	; (80086dc <rt_test_007_001_execute+0xdc>)
 8008630:	9300      	str	r3, [sp, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008632:	4601      	mov	r1, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008634:	4b27      	ldr	r3, [pc, #156]	; (80086d4 <rt_test_007_001_execute+0xd4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008636:	6029      	str	r1, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008638:	1ca2      	adds	r2, r4, #2
 800863a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800863e:	4828      	ldr	r0, [pc, #160]	; (80086e0 <rt_test_007_001_execute+0xe0>)
 8008640:	f7f9 ff06 	bl	8002450 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8008644:	4b27      	ldr	r3, [pc, #156]	; (80086e4 <rt_test_007_001_execute+0xe4>)
 8008646:	9300      	str	r3, [sp, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008648:	4601      	mov	r1, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800864a:	4b22      	ldr	r3, [pc, #136]	; (80086d4 <rt_test_007_001_execute+0xd4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800864c:	6069      	str	r1, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800864e:	1ce2      	adds	r2, r4, #3
 8008650:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008654:	4824      	ldr	r0, [pc, #144]	; (80086e8 <rt_test_007_001_execute+0xe8>)
 8008656:	f7f9 fefb 	bl	8002450 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800865a:	4b24      	ldr	r3, [pc, #144]	; (80086ec <rt_test_007_001_execute+0xec>)
 800865c:	9300      	str	r3, [sp, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800865e:	4601      	mov	r1, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8008660:	4b1c      	ldr	r3, [pc, #112]	; (80086d4 <rt_test_007_001_execute+0xd4>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8008662:	60a9      	str	r1, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8008664:	1d22      	adds	r2, r4, #4
 8008666:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800866a:	4821      	ldr	r0, [pc, #132]	; (80086f0 <rt_test_007_001_execute+0xf0>)
 800866c:	f7f9 fef0 	bl	8002450 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8008670:	4b20      	ldr	r3, [pc, #128]	; (80086f4 <rt_test_007_001_execute+0xf4>)
 8008672:	9300      	str	r3, [sp, #0]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8008674:	4601      	mov	r1, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8008676:	4b17      	ldr	r3, [pc, #92]	; (80086d4 <rt_test_007_001_execute+0xd4>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8008678:	60e9      	str	r1, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800867a:	1d62      	adds	r2, r4, #5
 800867c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008680:	481d      	ldr	r0, [pc, #116]	; (80086f8 <rt_test_007_001_execute+0xf8>)
 8008682:	f7f9 fee5 	bl	8002450 <chThdCreateStatic>
  test_set_step(4);
 8008686:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8008688:	4602      	mov	r2, r0
    chMtxUnlock(&m1);
 800868a:	480f      	ldr	r0, [pc, #60]	; (80086c8 <rt_test_007_001_execute+0xc8>)
  test_set_step(4);
 800868c:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800868e:	612a      	str	r2, [r5, #16]
    chMtxUnlock(&m1);
 8008690:	f7fc fb8e 	bl	8004db0 <chMtxUnlock>
    test_wait_threads();
 8008694:	f7fe fffc 	bl	8007690 <test_wait_threads>
 8008698:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 800869a:	4918      	ldr	r1, [pc, #96]	; (80086fc <rt_test_007_001_execute+0xfc>)
 800869c:	6898      	ldr	r0, [r3, #8]
 800869e:	1b00      	subs	r0, r0, r4
 80086a0:	fab0 f080 	clz	r0, r0
 80086a4:	0940      	lsrs	r0, r0, #5
 80086a6:	f7f8 fb2b 	bl	8000d00 <_test_assert>
 80086aa:	b108      	cbz	r0, 80086b0 <rt_test_007_001_execute+0xb0>
}
 80086ac:	b003      	add	sp, #12
 80086ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert_sequence("ABCDE", "invalid sequence");
 80086b0:	4913      	ldr	r1, [pc, #76]	; (8008700 <rt_test_007_001_execute+0x100>)
 80086b2:	4814      	ldr	r0, [pc, #80]	; (8008704 <rt_test_007_001_execute+0x104>)
}
 80086b4:	b003      	add	sp, #12
 80086b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80086ba:	f7f8 bca1 	b.w	8001000 <_test_assert_sequence>
 80086be:	bf00      	nop
 80086c0:	2000142c 	.word	0x2000142c
 80086c4:	20001f1c 	.word	0x20001f1c
 80086c8:	2000082c 	.word	0x2000082c
 80086cc:	20001f34 	.word	0x20001f34
 80086d0:	0800ac58 	.word	0x0800ac58
 80086d4:	08005eb1 	.word	0x08005eb1
 80086d8:	20001808 	.word	0x20001808
 80086dc:	0800ab30 	.word	0x0800ab30
 80086e0:	20001950 	.word	0x20001950
 80086e4:	0800ab24 	.word	0x0800ab24
 80086e8:	20001a98 	.word	0x20001a98
 80086ec:	0800a968 	.word	0x0800a968
 80086f0:	20001be0 	.word	0x20001be0
 80086f4:	0800a964 	.word	0x0800a964
 80086f8:	20001d28 	.word	0x20001d28
 80086fc:	0800a94c 	.word	0x0800a94c
 8008700:	08009840 	.word	0x08009840
 8008704:	0800ac54 	.word	0x0800ac54
	...

08008710 <rt_test_006_005_teardown>:
 8008710:	f7fe bfbe 	b.w	8007690 <test_wait_threads>
	...

08008720 <rt_test_006_004_execute>:
static void rt_test_006_004_execute(void) {
 8008720:	b570      	push	{r4, r5, r6, lr}
  return ch.rlist.current;
 8008722:	4b26      	ldr	r3, [pc, #152]	; (80087bc <rt_test_006_004_execute+0x9c>)
  test_set_step(1);
 8008724:	4c26      	ldr	r4, [pc, #152]	; (80087c0 <rt_test_006_004_execute+0xa0>)
  return chThdGetSelfX()->prio;
 8008726:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008728:	4926      	ldr	r1, [pc, #152]	; (80087c4 <rt_test_006_004_execute+0xa4>)
 800872a:	689a      	ldr	r2, [r3, #8]
 800872c:	4826      	ldr	r0, [pc, #152]	; (80087c8 <rt_test_006_004_execute+0xa8>)
 800872e:	4b27      	ldr	r3, [pc, #156]	; (80087cc <rt_test_006_004_execute+0xac>)
static void rt_test_006_004_execute(void) {
 8008730:	b082      	sub	sp, #8
  test_set_step(1);
 8008732:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008734:	9100      	str	r1, [sp, #0]
 8008736:	3201      	adds	r2, #1
  test_set_step(1);
 8008738:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800873a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800873e:	f7f9 fe87 	bl	8002450 <chThdCreateStatic>
 8008742:	4b23      	ldr	r3, [pc, #140]	; (80087d0 <rt_test_006_004_execute+0xb0>)
  test_set_step(2);
 8008744:	2502      	movs	r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008746:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 8008748:	6025      	str	r5, [r4, #0]
 800874a:	2320      	movs	r3, #32
 800874c:	f383 8811 	msr	BASEPRI, r3
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 8008750:	4c20      	ldr	r4, [pc, #128]	; (80087d4 <rt_test_006_004_execute+0xb4>)
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8008752:	2600      	movs	r6, #0
 8008754:	e002      	b.n	800875c <rt_test_006_004_execute+0x3c>
  while (n > (cnt_t)0) {
 8008756:	2d01      	cmp	r5, #1
 8008758:	d00e      	beq.n	8008778 <rt_test_006_004_execute+0x58>
 800875a:	2501      	movs	r5, #1
    if (++sp->cnt <= (cnt_t)0) {
 800875c:	68a3      	ldr	r3, [r4, #8]
 800875e:	3301      	adds	r3, #1
 8008760:	2b00      	cmp	r3, #0
 8008762:	60a3      	str	r3, [r4, #8]
 8008764:	dcf7      	bgt.n	8008756 <rt_test_006_004_execute+0x36>
  thread_t *tp = tqp->next;
 8008766:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8008768:	6803      	ldr	r3, [r0, #0]
 800876a:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800876c:	605c      	str	r4, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800876e:	f7f8 fedf 	bl	8001530 <chSchReadyI>
  while (n > (cnt_t)0) {
 8008772:	2d01      	cmp	r5, #1
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8008774:	6246      	str	r6, [r0, #36]	; 0x24
  while (n > (cnt_t)0) {
 8008776:	d1f0      	bne.n	800875a <rt_test_006_004_execute+0x3a>
    chSchRescheduleS();
 8008778:	f7fb f942 	bl	8003a00 <chSchRescheduleS>
 800877c:	2500      	movs	r5, #0
 800877e:	f385 8811 	msr	BASEPRI, r5
    test_wait_threads();
 8008782:	f7fe ff85 	bl	8007690 <test_wait_threads>
 8008786:	2320      	movs	r3, #32
 8008788:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 800878c:	68a0      	ldr	r0, [r4, #8]
 800878e:	4912      	ldr	r1, [pc, #72]	; (80087d8 <rt_test_006_004_execute+0xb8>)
 8008790:	f1a0 0001 	sub.w	r0, r0, #1
 8008794:	fab0 f080 	clz	r0, r0
 8008798:	0940      	lsrs	r0, r0, #5
 800879a:	f7f8 fab1 	bl	8000d00 <_test_assert>
 800879e:	b118      	cbz	r0, 80087a8 <rt_test_006_004_execute+0x88>
 80087a0:	f385 8811 	msr	BASEPRI, r5
}
 80087a4:	b002      	add	sp, #8
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	f380 8811 	msr	BASEPRI, r0
    test_assert_sequence("A", "invalid sequence");
 80087ac:	490b      	ldr	r1, [pc, #44]	; (80087dc <rt_test_006_004_execute+0xbc>)
 80087ae:	4805      	ldr	r0, [pc, #20]	; (80087c4 <rt_test_006_004_execute+0xa4>)
}
 80087b0:	b002      	add	sp, #8
 80087b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
 80087b6:	f7f8 bc23 	b.w	8001000 <_test_assert_sequence>
 80087ba:	bf00      	nop
 80087bc:	2000142c 	.word	0x2000142c
 80087c0:	20001f1c 	.word	0x20001f1c
 80087c4:	0800a964 	.word	0x0800a964
 80087c8:	20001808 	.word	0x20001808
 80087cc:	080037b1 	.word	0x080037b1
 80087d0:	20001f34 	.word	0x20001f34
 80087d4:	200017f0 	.word	0x200017f0
 80087d8:	0800ac5c 	.word	0x0800ac5c
 80087dc:	08009840 	.word	0x08009840

080087e0 <rt_test_006_003_execute>:
static void rt_test_006_003_execute(void) {
 80087e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80087e4:	4d4f      	ldr	r5, [pc, #316]	; (8008924 <rt_test_006_003_execute+0x144>)
 80087e6:	2001      	movs	r0, #1
static void rt_test_006_003_execute(void) {
 80087e8:	b083      	sub	sp, #12
  test_set_step(1);
 80087ea:	6028      	str	r0, [r5, #0]
 80087ec:	2320      	movs	r3, #32
 80087ee:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80087f2:	4c4d      	ldr	r4, [pc, #308]	; (8008928 <rt_test_006_003_execute+0x148>)
 80087f4:	68a3      	ldr	r3, [r4, #8]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	bf5c      	itt	pl
 80087fa:	60a3      	strpl	r3, [r4, #8]
 80087fc:	2000      	movpl	r0, #0
 80087fe:	2300      	movs	r3, #0
 8008800:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8008804:	4949      	ldr	r1, [pc, #292]	; (800892c <rt_test_006_003_execute+0x14c>)
 8008806:	f7f8 fa7b 	bl	8000d00 <_test_assert>
 800880a:	b110      	cbz	r0, 8008812 <rt_test_006_003_execute+0x32>
}
 800880c:	b003      	add	sp, #12
 800880e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return (bool)(tqp->next == (const thread_t *)tqp);
 8008812:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8008814:	4946      	ldr	r1, [pc, #280]	; (8008930 <rt_test_006_003_execute+0x150>)
 8008816:	1b00      	subs	r0, r0, r4
 8008818:	fab0 f080 	clz	r0, r0
 800881c:	0940      	lsrs	r0, r0, #5
 800881e:	f7f8 fa6f 	bl	8000d00 <_test_assert>
 8008822:	2800      	cmp	r0, #0
 8008824:	d1f2      	bne.n	800880c <rt_test_006_003_execute+0x2c>
    test_assert(sem1.cnt == 0, "counter not zero");
 8008826:	68a0      	ldr	r0, [r4, #8]
 8008828:	4942      	ldr	r1, [pc, #264]	; (8008934 <rt_test_006_003_execute+0x154>)
 800882a:	fab0 f080 	clz	r0, r0
 800882e:	0940      	lsrs	r0, r0, #5
 8008830:	f7f8 fa66 	bl	8000d00 <_test_assert>
 8008834:	4601      	mov	r1, r0
 8008836:	2800      	cmp	r0, #0
 8008838:	d1e8      	bne.n	800880c <rt_test_006_003_execute+0x2c>
  return ch.rlist.current;
 800883a:	4a3f      	ldr	r2, [pc, #252]	; (8008938 <rt_test_006_003_execute+0x158>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800883c:	4b3f      	ldr	r3, [pc, #252]	; (800893c <rt_test_006_003_execute+0x15c>)
  return chThdGetSelfX()->prio;
 800883e:	6992      	ldr	r2, [r2, #24]
 8008840:	483f      	ldr	r0, [pc, #252]	; (8008940 <rt_test_006_003_execute+0x160>)
 8008842:	6892      	ldr	r2, [r2, #8]
 8008844:	9100      	str	r1, [sp, #0]
  test_set_step(2);
 8008846:	2602      	movs	r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008848:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800884c:	3a01      	subs	r2, #1
  test_set_step(2);
 800884e:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008850:	f7f9 fdfe 	bl	8002450 <chThdCreateStatic>
 8008854:	4b3b      	ldr	r3, [pc, #236]	; (8008944 <rt_test_006_003_execute+0x164>)
 8008856:	4602      	mov	r2, r0
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 8008858:	f241 3088 	movw	r0, #5000	; 0x1388
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800885c:	601a      	str	r2, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 800885e:	f7f9 ff1f 	bl	80026a0 <chSemWaitTimeout.constprop.0>
 8008862:	4606      	mov	r6, r0
    test_wait_threads();
 8008864:	f7fe ff14 	bl	8007690 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 8008868:	fab6 f086 	clz	r0, r6
 800886c:	492f      	ldr	r1, [pc, #188]	; (800892c <rt_test_006_003_execute+0x14c>)
 800886e:	0940      	lsrs	r0, r0, #5
 8008870:	f7f8 fa46 	bl	8000d00 <_test_assert>
 8008874:	2800      	cmp	r0, #0
 8008876:	d1c9      	bne.n	800880c <rt_test_006_003_execute+0x2c>
 8008878:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800887a:	492d      	ldr	r1, [pc, #180]	; (8008930 <rt_test_006_003_execute+0x150>)
 800887c:	1b00      	subs	r0, r0, r4
 800887e:	fab0 f080 	clz	r0, r0
 8008882:	0940      	lsrs	r0, r0, #5
 8008884:	f7f8 fa3c 	bl	8000d00 <_test_assert>
 8008888:	2800      	cmp	r0, #0
 800888a:	d1bf      	bne.n	800880c <rt_test_006_003_execute+0x2c>
    test_assert(sem1.cnt == 0, "counter not zero");
 800888c:	68a0      	ldr	r0, [r4, #8]
 800888e:	4929      	ldr	r1, [pc, #164]	; (8008934 <rt_test_006_003_execute+0x154>)
 8008890:	fab0 f080 	clz	r0, r0
 8008894:	0940      	lsrs	r0, r0, #5
 8008896:	f7f8 fa33 	bl	8000d00 <_test_assert>
 800889a:	2800      	cmp	r0, #0
 800889c:	d1b6      	bne.n	800880c <rt_test_006_003_execute+0x2c>
  test_set_step(3);
 800889e:	2303      	movs	r3, #3
 80088a0:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80088a2:	f7fa fc65 	bl	8003170 <test_wait_tick>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80088a6:	4f21      	ldr	r7, [pc, #132]	; (800892c <rt_test_006_003_execute+0x14c>)
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80088a8:	4e21      	ldr	r6, [pc, #132]	; (8008930 <rt_test_006_003_execute+0x150>)
      test_assert(sem1.cnt == 0, "counter not zero");
 80088aa:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8008934 <rt_test_006_003_execute+0x154>
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80088ae:	4681      	mov	r9, r0
 80088b0:	2541      	movs	r5, #65	; 0x41
      test_emit_token('A' + i);
 80088b2:	4628      	mov	r0, r5
 80088b4:	f7f8 facc 	bl	8000e50 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
 80088b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80088bc:	f7f9 fef0 	bl	80026a0 <chSemWaitTimeout.constprop.0>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80088c0:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80088c4:	fab0 f080 	clz	r0, r0
 80088c8:	4639      	mov	r1, r7
 80088ca:	0940      	lsrs	r0, r0, #5
 80088cc:	f7f8 fa18 	bl	8000d00 <_test_assert>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80088d0:	4631      	mov	r1, r6
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80088d2:	2800      	cmp	r0, #0
 80088d4:	d19a      	bne.n	800880c <rt_test_006_003_execute+0x2c>
 80088d6:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80088d8:	1b00      	subs	r0, r0, r4
 80088da:	fab0 f080 	clz	r0, r0
 80088de:	0940      	lsrs	r0, r0, #5
 80088e0:	f7f8 fa0e 	bl	8000d00 <_test_assert>
      test_assert(sem1.cnt == 0, "counter not zero");
 80088e4:	4641      	mov	r1, r8
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d190      	bne.n	800880c <rt_test_006_003_execute+0x2c>
      test_assert(sem1.cnt == 0, "counter not zero");
 80088ea:	68a0      	ldr	r0, [r4, #8]
 80088ec:	fab0 f080 	clz	r0, r0
 80088f0:	0940      	lsrs	r0, r0, #5
 80088f2:	f7f8 fa05 	bl	8000d00 <_test_assert>
    for (i = 0; i < 5; i++) {
 80088f6:	3501      	adds	r5, #1
 80088f8:	b2ed      	uxtb	r5, r5
      test_assert(sem1.cnt == 0, "counter not zero");
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d186      	bne.n	800880c <rt_test_006_003_execute+0x2c>
    for (i = 0; i < 5; i++) {
 80088fe:	2d46      	cmp	r5, #70	; 0x46
 8008900:	d1d7      	bne.n	80088b2 <rt_test_006_003_execute+0xd2>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008902:	4911      	ldr	r1, [pc, #68]	; (8008948 <rt_test_006_003_execute+0x168>)
 8008904:	4811      	ldr	r0, [pc, #68]	; (800894c <rt_test_006_003_execute+0x16c>)
 8008906:	f7f8 fb7b 	bl	8001000 <_test_assert_sequence>
 800890a:	2800      	cmp	r0, #0
 800890c:	f47f af7e 	bne.w	800880c <rt_test_006_003_execute+0x2c>
    test_assert_time_window(target_time,
 8008910:	f609 11d8 	addw	r1, r9, #2520	; 0x9d8
 8008914:	f609 10c4 	addw	r0, r9, #2500	; 0x9c4
}
 8008918:	b003      	add	sp, #12
 800891a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_assert_time_window(target_time,
 800891e:	f7f7 bf7f 	b.w	8000820 <_test_assert_time_window.constprop.0>
 8008922:	bf00      	nop
 8008924:	20001f1c 	.word	0x20001f1c
 8008928:	200017f0 	.word	0x200017f0
 800892c:	0800a7cc 	.word	0x0800a7cc
 8008930:	0800a708 	.word	0x0800a708
 8008934:	0800a718 	.word	0x0800a718
 8008938:	2000142c 	.word	0x2000142c
 800893c:	08004361 	.word	0x08004361
 8008940:	20001808 	.word	0x20001808
 8008944:	20001f34 	.word	0x20001f34
 8008948:	08009840 	.word	0x08009840
 800894c:	0800ac54 	.word	0x0800ac54

08008950 <rt_test_006_002_execute>:
static void rt_test_006_002_execute(void) {
 8008950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008954:	4c37      	ldr	r4, [pc, #220]	; (8008a34 <rt_test_006_002_execute+0xe4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008956:	4f38      	ldr	r7, [pc, #224]	; (8008a38 <rt_test_006_002_execute+0xe8>)
  return chThdGetSelfX()->prio;
 8008958:	69a3      	ldr	r3, [r4, #24]
 800895a:	4e38      	ldr	r6, [pc, #224]	; (8008a3c <rt_test_006_002_execute+0xec>)
 800895c:	689a      	ldr	r2, [r3, #8]
  test_set_step(1);
 800895e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8008a64 <rt_test_006_002_execute+0x114>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008962:	4b37      	ldr	r3, [pc, #220]	; (8008a40 <rt_test_006_002_execute+0xf0>)
static void rt_test_006_002_execute(void) {
 8008964:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008966:	3205      	adds	r2, #5
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	4630      	mov	r0, r6
 800896c:	463b      	mov	r3, r7
  test_set_step(1);
 800896e:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008970:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 8008974:	f8c8 5000 	str.w	r5, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008978:	f7f9 fd6a 	bl	8002450 <chThdCreateStatic>
 800897c:	69a3      	ldr	r3, [r4, #24]
 800897e:	4d31      	ldr	r5, [pc, #196]	; (8008a44 <rt_test_006_002_execute+0xf4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8008980:	689a      	ldr	r2, [r3, #8]
 8008982:	4b31      	ldr	r3, [pc, #196]	; (8008a48 <rt_test_006_002_execute+0xf8>)
 8008984:	9300      	str	r3, [sp, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008986:	4684      	mov	ip, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8008988:	463b      	mov	r3, r7
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800898a:	f8c5 c000 	str.w	ip, [r5]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 800898e:	3201      	adds	r2, #1
 8008990:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8008994:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008998:	f7f9 fd5a 	bl	8002450 <chThdCreateStatic>
 800899c:	69a2      	ldr	r2, [r4, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800899e:	4b2b      	ldr	r3, [pc, #172]	; (8008a4c <rt_test_006_002_execute+0xfc>)
 80089a0:	6892      	ldr	r2, [r2, #8]
 80089a2:	9300      	str	r3, [sp, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80089a4:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80089a6:	463b      	mov	r3, r7
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80089a8:	f8c5 c004 	str.w	ip, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80089ac:	3203      	adds	r2, #3
 80089ae:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80089b2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80089b6:	f7f9 fd4b 	bl	8002450 <chThdCreateStatic>
 80089ba:	69a2      	ldr	r2, [r4, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80089bc:	4b24      	ldr	r3, [pc, #144]	; (8008a50 <rt_test_006_002_execute+0x100>)
 80089be:	6892      	ldr	r2, [r2, #8]
 80089c0:	9300      	str	r3, [sp, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80089c2:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80089c4:	463b      	mov	r3, r7
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80089c6:	f8c5 c008 	str.w	ip, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80089ca:	3204      	adds	r2, #4
 80089cc:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80089d0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80089d4:	f7f9 fd3c 	bl	8002450 <chThdCreateStatic>
 80089d8:	69a2      	ldr	r2, [r4, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80089da:	4b1e      	ldr	r3, [pc, #120]	; (8008a54 <rt_test_006_002_execute+0x104>)
 80089dc:	6892      	ldr	r2, [r2, #8]
 80089de:	9300      	str	r3, [sp, #0]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80089e0:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80089e2:	f44f 71a4 	mov.w	r1, #328	; 0x148
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80089e6:	f8c5 c00c 	str.w	ip, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80089ea:	463b      	mov	r3, r7
 80089ec:	3202      	adds	r2, #2
 80089ee:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 80089f2:	f7f9 fd2d 	bl	8002450 <chThdCreateStatic>
    chSemSignal(&sem1);
 80089f6:	4c18      	ldr	r4, [pc, #96]	; (8008a58 <rt_test_006_002_execute+0x108>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80089f8:	4602      	mov	r2, r0
  test_set_step(2);
 80089fa:	2302      	movs	r3, #2
    chSemSignal(&sem1);
 80089fc:	4620      	mov	r0, r4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80089fe:	612a      	str	r2, [r5, #16]
  test_set_step(2);
 8008a00:	f8c8 3000 	str.w	r3, [r8]
    chSemSignal(&sem1);
 8008a04:	f7f9 fd04 	bl	8002410 <chSemSignal>
    chSemSignal(&sem1);
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f7f9 fd01 	bl	8002410 <chSemSignal>
    chSemSignal(&sem1);
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f7f9 fcfe 	bl	8002410 <chSemSignal>
    chSemSignal(&sem1);
 8008a14:	4620      	mov	r0, r4
 8008a16:	f7f9 fcfb 	bl	8002410 <chSemSignal>
    chSemSignal(&sem1);
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f7f9 fcf8 	bl	8002410 <chSemSignal>
    test_wait_threads();
 8008a20:	f7fe fe36 	bl	8007690 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008a24:	490d      	ldr	r1, [pc, #52]	; (8008a5c <rt_test_006_002_execute+0x10c>)
 8008a26:	480e      	ldr	r0, [pc, #56]	; (8008a60 <rt_test_006_002_execute+0x110>)
}
 8008a28:	b002      	add	sp, #8
 8008a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8008a2e:	f7f8 bae7 	b.w	8001000 <_test_assert_sequence>
 8008a32:	bf00      	nop
 8008a34:	2000142c 	.word	0x2000142c
 8008a38:	080037b1 	.word	0x080037b1
 8008a3c:	20001808 	.word	0x20001808
 8008a40:	0800a964 	.word	0x0800a964
 8008a44:	20001f34 	.word	0x20001f34
 8008a48:	0800a968 	.word	0x0800a968
 8008a4c:	0800ab24 	.word	0x0800ab24
 8008a50:	0800ab30 	.word	0x0800ab30
 8008a54:	0800ac58 	.word	0x0800ac58
 8008a58:	200017f0 	.word	0x200017f0
 8008a5c:	08009840 	.word	0x08009840
 8008a60:	0800ac54 	.word	0x0800ac54
 8008a64:	20001f1c 	.word	0x20001f1c
	...

08008a70 <rt_test_005_001_execute>:

static void rt_test_005_001_execute(void) {
 8008a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008a74:	4d33      	ldr	r5, [pc, #204]	; (8008b44 <rt_test_005_001_execute+0xd4>)
  msg_t msg;

  /* [5.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8008a76:	4f34      	ldr	r7, [pc, #208]	; (8008b48 <rt_test_005_001_execute+0xd8>)
  return chThdGetSelfX()->prio;
 8008a78:	69ab      	ldr	r3, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8008a7a:	4934      	ldr	r1, [pc, #208]	; (8008b4c <rt_test_005_001_execute+0xdc>)
 8008a7c:	689a      	ldr	r2, [r3, #8]
 8008a7e:	4834      	ldr	r0, [pc, #208]	; (8008b50 <rt_test_005_001_execute+0xe0>)
 8008a80:	4b34      	ldr	r3, [pc, #208]	; (8008b54 <rt_test_005_001_execute+0xe4>)
static void rt_test_005_001_execute(void) {
 8008a82:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8008a84:	3a01      	subs	r2, #1
 8008a86:	9100      	str	r1, [sp, #0]
  test_set_step(1);
 8008a88:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8008a8a:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(1);
 8008a8e:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8008a90:	f7f9 fcde 	bl	8002450 <chThdCreateStatic>
 8008a94:	4b30      	ldr	r3, [pc, #192]	; (8008b58 <rt_test_005_001_execute+0xe8>)
 8008a96:	2620      	movs	r6, #32
 8008a98:	6018      	str	r0, [r3, #0]
 8008a9a:	f386 8811 	msr	BASEPRI, r6
  return ch.rlist.current;
 8008a9e:	69ab      	ldr	r3, [r5, #24]
  *trp = tp;
 8008aa0:	4c2e      	ldr	r4, [pc, #184]	; (8008b5c <rt_test_005_001_execute+0xec>)
  tp->u.wttrp = trp;
 8008aa2:	625c      	str	r4, [r3, #36]	; 0x24
    chSchGoSleepS(newstate);
 8008aa4:	2003      	movs	r0, #3
  *trp = tp;
 8008aa6:	6023      	str	r3, [r4, #0]
 8008aa8:	f7f9 fd42 	bl	8002530 <chSchGoSleepS>
  return currp->u.rdymsg;
 8008aac:	69aa      	ldr	r2, [r5, #24]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 8008ab4:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 8008ab8:	6820      	ldr	r0, [r4, #0]
 8008aba:	4929      	ldr	r1, [pc, #164]	; (8008b60 <rt_test_005_001_execute+0xf0>)
 8008abc:	fab0 f080 	clz	r0, r0
 8008ac0:	0940      	lsrs	r0, r0, #5
 8008ac2:	f7f8 f91d 	bl	8000d00 <_test_assert>
 8008ac6:	b110      	cbz	r0, 8008ace <rt_test_005_001_execute+0x5e>
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
  test_end_step(2);
}
 8008ac8:	b002      	add	sp, #8
 8008aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 8008ace:	fab8 f088 	clz	r0, r8
 8008ad2:	4924      	ldr	r1, [pc, #144]	; (8008b64 <rt_test_005_001_execute+0xf4>)
 8008ad4:	0940      	lsrs	r0, r0, #5
 8008ad6:	f7f8 f913 	bl	8000d00 <_test_assert>
 8008ada:	4680      	mov	r8, r0
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d1f3      	bne.n	8008ac8 <rt_test_005_001_execute+0x58>
    test_wait_threads();
 8008ae0:	f7fe fdd6 	bl	8007690 <test_wait_threads>
  test_set_step(2);
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	603b      	str	r3, [r7, #0]
 8008ae8:	f386 8811 	msr	BASEPRI, r6
 8008aec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008af0:	69ab      	ldr	r3, [r5, #24]
 8008af2:	6a56      	ldr	r6, [r2, #36]	; 0x24
  tp->u.wttrp = trp;
 8008af4:	625c      	str	r4, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8008af6:	f242 7110 	movw	r1, #10000	; 0x2710
 8008afa:	2003      	movs	r0, #3
  *trp = tp;
 8008afc:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8008afe:	f7f9 fda7 	bl	8002650 <chSchGoSleepTimeoutS>
 8008b02:	4605      	mov	r5, r0
 8008b04:	f388 8811 	msr	BASEPRI, r8
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
 8008b08:	f506 511c 	add.w	r1, r6, #9984	; 0x2700
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	3010      	adds	r0, #16
 8008b10:	3113      	adds	r1, #19
 8008b12:	f7f7 fe85 	bl	8000820 <_test_assert_time_window.constprop.0>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d1d6      	bne.n	8008ac8 <rt_test_005_001_execute+0x58>
    test_assert(NULL == tr1, "not NULL");
 8008b1a:	6820      	ldr	r0, [r4, #0]
 8008b1c:	4910      	ldr	r1, [pc, #64]	; (8008b60 <rt_test_005_001_execute+0xf0>)
 8008b1e:	fab0 f080 	clz	r0, r0
 8008b22:	0940      	lsrs	r0, r0, #5
 8008b24:	f7f8 f8ec 	bl	8000d00 <_test_assert>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d1cd      	bne.n	8008ac8 <rt_test_005_001_execute+0x58>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8008b2c:	f1a5 30ff 	sub.w	r0, r5, #4294967295
 8008b30:	490c      	ldr	r1, [pc, #48]	; (8008b64 <rt_test_005_001_execute+0xf4>)
 8008b32:	fab0 f080 	clz	r0, r0
 8008b36:	0940      	lsrs	r0, r0, #5
}
 8008b38:	b002      	add	sp, #8
 8008b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8008b3e:	f7f8 b8df 	b.w	8000d00 <_test_assert>
 8008b42:	bf00      	nop
 8008b44:	2000142c 	.word	0x2000142c
 8008b48:	20001f1c 	.word	0x20001f1c
 8008b4c:	0800a964 	.word	0x0800a964
 8008b50:	20001808 	.word	0x20001808
 8008b54:	080043c1 	.word	0x080043c1
 8008b58:	20001f34 	.word	0x20001f34
 8008b5c:	20001f48 	.word	0x20001f48
 8008b60:	0800ac6c 	.word	0x0800ac6c
 8008b64:	0800a6f0 	.word	0x0800a6f0
	...

08008b70 <rt_test_004_002_execute>:
 * - [4.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void rt_test_004_002_execute(void) {
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	4d7a      	ldr	r5, [pc, #488]	; (8008d60 <rt_test_004_002_execute+0x1f0>)

  /* [4.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 8008b76:	f8df a218 	ldr.w	sl, [pc, #536]	; 8008d90 <rt_test_004_002_execute+0x220>
  return chThdGetSelfX()->prio;
 8008b7a:	69ab      	ldr	r3, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008b7c:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8008d94 <rt_test_004_002_execute+0x224>
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	4878      	ldr	r0, [pc, #480]	; (8008d64 <rt_test_004_002_execute+0x1f4>)
 8008b84:	4b78      	ldr	r3, [pc, #480]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008b86:	f8df b210 	ldr.w	fp, [pc, #528]	; 8008d98 <rt_test_004_002_execute+0x228>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008b8a:	4e78      	ldr	r6, [pc, #480]	; (8008d6c <rt_test_004_002_execute+0x1fc>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008b8c:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8008d9c <rt_test_004_002_execute+0x22c>
static void rt_test_004_002_execute(void) {
 8008b90:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008b92:	3a05      	subs	r2, #5
  test_set_step(1);
 8008b94:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008b96:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008b9a:	f8cd 9000 	str.w	r9, [sp]
  test_set_step(1);
 8008b9e:	f8ca 4000 	str.w	r4, [sl]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008ba2:	f7f9 fc55 	bl	8002450 <chThdCreateStatic>
 8008ba6:	69ab      	ldr	r3, [r5, #24]
 8008ba8:	4c71      	ldr	r4, [pc, #452]	; (8008d70 <rt_test_004_002_execute+0x200>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	4b6e      	ldr	r3, [pc, #440]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008bae:	f8cd b000 	str.w	fp, [sp]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008bb2:	4601      	mov	r1, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008bb4:	3a04      	subs	r2, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008bb6:	6021      	str	r1, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008bb8:	486e      	ldr	r0, [pc, #440]	; (8008d74 <rt_test_004_002_execute+0x204>)
 8008bba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008bbe:	f7f9 fc47 	bl	8002450 <chThdCreateStatic>
 8008bc2:	69ab      	ldr	r3, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008bc4:	689a      	ldr	r2, [r3, #8]
 8008bc6:	4b68      	ldr	r3, [pc, #416]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008bc8:	9600      	str	r6, [sp, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008bca:	4607      	mov	r7, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008bcc:	3a03      	subs	r2, #3
 8008bce:	f44f 71a4 	mov.w	r1, #328	; 0x148
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008bd2:	6067      	str	r7, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008bd4:	4868      	ldr	r0, [pc, #416]	; (8008d78 <rt_test_004_002_execute+0x208>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008bd6:	4f69      	ldr	r7, [pc, #420]	; (8008d7c <rt_test_004_002_execute+0x20c>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008bd8:	f7f9 fc3a 	bl	8002450 <chThdCreateStatic>
 8008bdc:	69ab      	ldr	r3, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008bde:	689a      	ldr	r2, [r3, #8]
 8008be0:	4b61      	ldr	r3, [pc, #388]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008be2:	9700      	str	r7, [sp, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008be4:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008be6:	3a02      	subs	r2, #2
 8008be8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008bec:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008bf0:	4863      	ldr	r0, [pc, #396]	; (8008d80 <rt_test_004_002_execute+0x210>)
 8008bf2:	f7f9 fc2d 	bl	8002450 <chThdCreateStatic>
 8008bf6:	69ab      	ldr	r3, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008bf8:	689a      	ldr	r2, [r3, #8]
 8008bfa:	4b5b      	ldr	r3, [pc, #364]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008bfc:	f8cd 8000 	str.w	r8, [sp]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008c00:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008c02:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008c06:	3a01      	subs	r2, #1
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008c08:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008c0c:	485d      	ldr	r0, [pc, #372]	; (8008d84 <rt_test_004_002_execute+0x214>)
 8008c0e:	f7f9 fc1f 	bl	8002450 <chThdCreateStatic>
 8008c12:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 8008c14:	f7fe fd3c 	bl	8007690 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008c18:	495b      	ldr	r1, [pc, #364]	; (8008d88 <rt_test_004_002_execute+0x218>)
 8008c1a:	485c      	ldr	r0, [pc, #368]	; (8008d8c <rt_test_004_002_execute+0x21c>)
 8008c1c:	f7f8 f9f0 	bl	8001000 <_test_assert_sequence>
 8008c20:	b110      	cbz	r0, 8008c28 <rt_test_004_002_execute+0xb8>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
  }
  test_end_step(3);
}
 8008c22:	b003      	add	sp, #12
 8008c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c28:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008c2a:	4b4f      	ldr	r3, [pc, #316]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008c2c:	6892      	ldr	r2, [r2, #8]
 8008c2e:	4855      	ldr	r0, [pc, #340]	; (8008d84 <rt_test_004_002_execute+0x214>)
 8008c30:	f8cd 8000 	str.w	r8, [sp]
  test_set_step(2);
 8008c34:	f04f 0c02 	mov.w	ip, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008c38:	3a01      	subs	r2, #1
 8008c3a:	f44f 71a4 	mov.w	r1, #328	; 0x148
  test_set_step(2);
 8008c3e:	f8ca c000 	str.w	ip, [sl]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008c42:	f7f9 fc05 	bl	8002450 <chThdCreateStatic>
 8008c46:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008c48:	4b47      	ldr	r3, [pc, #284]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008c4a:	6892      	ldr	r2, [r2, #8]
 8008c4c:	9700      	str	r7, [sp, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008c4e:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008c50:	3a02      	subs	r2, #2
 8008c52:	f44f 71a4 	mov.w	r1, #328	; 0x148
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008c56:	f8c4 c010 	str.w	ip, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008c5a:	4849      	ldr	r0, [pc, #292]	; (8008d80 <rt_test_004_002_execute+0x210>)
 8008c5c:	f7f9 fbf8 	bl	8002450 <chThdCreateStatic>
 8008c60:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008c62:	4b41      	ldr	r3, [pc, #260]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008c64:	6892      	ldr	r2, [r2, #8]
 8008c66:	9600      	str	r6, [sp, #0]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008c68:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008c6a:	3a03      	subs	r2, #3
 8008c6c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008c70:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008c74:	4840      	ldr	r0, [pc, #256]	; (8008d78 <rt_test_004_002_execute+0x208>)
 8008c76:	f7f9 fbeb 	bl	8002450 <chThdCreateStatic>
 8008c7a:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008c7c:	4b3a      	ldr	r3, [pc, #232]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008c7e:	6892      	ldr	r2, [r2, #8]
 8008c80:	f8cd b000 	str.w	fp, [sp]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008c84:	4684      	mov	ip, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008c86:	3a04      	subs	r2, #4
 8008c88:	f44f 71a4 	mov.w	r1, #328	; 0x148
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008c8c:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008c90:	4838      	ldr	r0, [pc, #224]	; (8008d74 <rt_test_004_002_execute+0x204>)
 8008c92:	f7f9 fbdd 	bl	8002450 <chThdCreateStatic>
 8008c96:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008c98:	4b33      	ldr	r3, [pc, #204]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008c9a:	6892      	ldr	r2, [r2, #8]
 8008c9c:	f8cd 9000 	str.w	r9, [sp]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008ca0:	4684      	mov	ip, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008ca2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008ca6:	3a05      	subs	r2, #5
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008ca8:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008cac:	482d      	ldr	r0, [pc, #180]	; (8008d64 <rt_test_004_002_execute+0x1f4>)
 8008cae:	f7f9 fbcf 	bl	8002450 <chThdCreateStatic>
 8008cb2:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 8008cb4:	f7fe fcec 	bl	8007690 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008cb8:	4933      	ldr	r1, [pc, #204]	; (8008d88 <rt_test_004_002_execute+0x218>)
 8008cba:	4834      	ldr	r0, [pc, #208]	; (8008d8c <rt_test_004_002_execute+0x21c>)
 8008cbc:	f7f8 f9a0 	bl	8001000 <_test_assert_sequence>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d1ae      	bne.n	8008c22 <rt_test_004_002_execute+0xb2>
 8008cc4:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008cc6:	4b28      	ldr	r3, [pc, #160]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008cc8:	6892      	ldr	r2, [r2, #8]
 8008cca:	f8cd b000 	str.w	fp, [sp]
  test_set_step(3);
 8008cce:	2003      	movs	r0, #3
 8008cd0:	f8ca 0000 	str.w	r0, [sl]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008cd4:	3a04      	subs	r2, #4
 8008cd6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008cda:	4826      	ldr	r0, [pc, #152]	; (8008d74 <rt_test_004_002_execute+0x204>)
 8008cdc:	f7f9 fbb8 	bl	8002450 <chThdCreateStatic>
 8008ce0:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008ce2:	4b21      	ldr	r3, [pc, #132]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008ce4:	6892      	ldr	r2, [r2, #8]
 8008ce6:	f8cd 9000 	str.w	r9, [sp]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008cea:	4684      	mov	ip, r0
 8008cec:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008cf0:	3a05      	subs	r2, #5
 8008cf2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008cf6:	481b      	ldr	r0, [pc, #108]	; (8008d64 <rt_test_004_002_execute+0x1f4>)
 8008cf8:	f7f9 fbaa 	bl	8002450 <chThdCreateStatic>
 8008cfc:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008cfe:	4b1a      	ldr	r3, [pc, #104]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008d00:	6892      	ldr	r2, [r2, #8]
 8008d02:	f8cd 8000 	str.w	r8, [sp]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008d06:	4684      	mov	ip, r0
 8008d08:	f8c4 c000 	str.w	ip, [r4]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008d0c:	3a01      	subs	r2, #1
 8008d0e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008d12:	481c      	ldr	r0, [pc, #112]	; (8008d84 <rt_test_004_002_execute+0x214>)
 8008d14:	f7f9 fb9c 	bl	8002450 <chThdCreateStatic>
 8008d18:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008d1a:	4b13      	ldr	r3, [pc, #76]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008d1c:	6892      	ldr	r2, [r2, #8]
 8008d1e:	9700      	str	r7, [sp, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008d20:	4684      	mov	ip, r0
 8008d22:	f8c4 c010 	str.w	ip, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008d26:	3a02      	subs	r2, #2
 8008d28:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008d2c:	4814      	ldr	r0, [pc, #80]	; (8008d80 <rt_test_004_002_execute+0x210>)
 8008d2e:	f7f9 fb8f 	bl	8002450 <chThdCreateStatic>
 8008d32:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008d34:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <rt_test_004_002_execute+0x1f8>)
 8008d36:	6892      	ldr	r2, [r2, #8]
 8008d38:	9600      	str	r6, [sp, #0]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008d3a:	4607      	mov	r7, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008d3c:	3a03      	subs	r2, #3
 8008d3e:	f44f 71a4 	mov.w	r1, #328	; 0x148
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008d42:	60e7      	str	r7, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008d44:	480c      	ldr	r0, [pc, #48]	; (8008d78 <rt_test_004_002_execute+0x208>)
 8008d46:	f7f9 fb83 	bl	8002450 <chThdCreateStatic>
 8008d4a:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 8008d4c:	f7fe fca0 	bl	8007690 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008d50:	490d      	ldr	r1, [pc, #52]	; (8008d88 <rt_test_004_002_execute+0x218>)
 8008d52:	480e      	ldr	r0, [pc, #56]	; (8008d8c <rt_test_004_002_execute+0x21c>)
}
 8008d54:	b003      	add	sp, #12
 8008d56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8008d5a:	f7f8 b951 	b.w	8001000 <_test_assert_sequence>
 8008d5e:	bf00      	nop
 8008d60:	2000142c 	.word	0x2000142c
 8008d64:	20001808 	.word	0x20001808
 8008d68:	08000f71 	.word	0x08000f71
 8008d6c:	0800ab24 	.word	0x0800ab24
 8008d70:	20001f34 	.word	0x20001f34
 8008d74:	20001950 	.word	0x20001950
 8008d78:	20001a98 	.word	0x20001a98
 8008d7c:	0800a968 	.word	0x0800a968
 8008d80:	20001be0 	.word	0x20001be0
 8008d84:	20001d28 	.word	0x20001d28
 8008d88:	08009840 	.word	0x08009840
 8008d8c:	0800ac54 	.word	0x0800ac54
 8008d90:	20001f1c 	.word	0x20001f1c
 8008d94:	0800ac58 	.word	0x0800ac58
 8008d98:	0800ab30 	.word	0x0800ab30
 8008d9c:	0800a964 	.word	0x0800a964

08008da0 <chThdSetPriority>:
tprio_t chThdSetPriority(tprio_t newprio) {
 8008da0:	b510      	push	{r4, lr}
 8008da2:	2220      	movs	r2, #32
 8008da4:	f382 8811 	msr	BASEPRI, r2
  oldprio = currp->realprio;
 8008da8:	4a08      	ldr	r2, [pc, #32]	; (8008dcc <chThdSetPriority+0x2c>)
 8008daa:	6992      	ldr	r2, [r2, #24]
 8008dac:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8008dae:	6891      	ldr	r1, [r2, #8]
 8008db0:	42a1      	cmp	r1, r4
 8008db2:	d001      	beq.n	8008db8 <chThdSetPriority+0x18>
 8008db4:	4281      	cmp	r1, r0
 8008db6:	d200      	bcs.n	8008dba <chThdSetPriority+0x1a>
    currp->prio = newprio;
 8008db8:	6090      	str	r0, [r2, #8]
  currp->realprio = newprio;
 8008dba:	63d0      	str	r0, [r2, #60]	; 0x3c
  chSchRescheduleS();
 8008dbc:	f7fa fe20 	bl	8003a00 <chSchRescheduleS>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f383 8811 	msr	BASEPRI, r3
}
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	bd10      	pop	{r4, pc}
 8008dca:	bf00      	nop
 8008dcc:	2000142c 	.word	0x2000142c

08008dd0 <rt_test_004_004_execute>:
 * - [4.4.3] Raising thread priority above the boosted level.
 * - [4.4.4] Restoring original conditions.
 * .
 */

static void rt_test_004_004_execute(void) {
 8008dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008dd4:	4d2f      	ldr	r5, [pc, #188]	; (8008e94 <rt_test_004_004_execute+0xc4>)
  }
  test_end_step(1);

  /* [4.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8008dd6:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ea8 <rt_test_004_004_execute+0xd8>
 8008dda:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8008ddc:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
 8008dde:	1ca6      	adds	r6, r4, #2
  {
    p1 = chThdSetPriority(prio + 1);
 8008de0:	1c67      	adds	r7, r4, #1
    chThdGetSelfX()->prio += 2;
 8008de2:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8008de4:	4638      	mov	r0, r7
  test_set_step(2);
 8008de6:	2302      	movs	r3, #2
 8008de8:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 8008dec:	f7ff ffd8 	bl	8008da0 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8008df0:	1b00      	subs	r0, r0, r4
 8008df2:	fab0 f080 	clz	r0, r0
 8008df6:	4928      	ldr	r1, [pc, #160]	; (8008e98 <rt_test_004_004_execute+0xc8>)
 8008df8:	0940      	lsrs	r0, r0, #5
 8008dfa:	f7f7 ff81 	bl	8000d00 <_test_assert>
 8008dfe:	b108      	cbz	r0, 8008e04 <rt_test_004_004_execute+0x34>
    chThdGetSelfX()->prio = prio;
    chThdGetSelfX()->realprio = prio;
    chSysUnlock();
  }
  test_end_step(4);
}
 8008e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8008e04:	69ab      	ldr	r3, [r5, #24]
 8008e06:	4925      	ldr	r1, [pc, #148]	; (8008e9c <rt_test_004_004_execute+0xcc>)
 8008e08:	6898      	ldr	r0, [r3, #8]
 8008e0a:	1b80      	subs	r0, r0, r6
 8008e0c:	fab0 f080 	clz	r0, r0
 8008e10:	0940      	lsrs	r0, r0, #5
 8008e12:	f7f7 ff75 	bl	8000d00 <_test_assert>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d1f2      	bne.n	8008e00 <rt_test_004_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 8008e1a:	69ab      	ldr	r3, [r5, #24]
 8008e1c:	4920      	ldr	r1, [pc, #128]	; (8008ea0 <rt_test_004_004_execute+0xd0>)
 8008e1e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008e20:	1bc0      	subs	r0, r0, r7
 8008e22:	fab0 f080 	clz	r0, r0
 8008e26:	0940      	lsrs	r0, r0, #5
 8008e28:	f7f7 ff6a 	bl	8000d00 <_test_assert>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d1e7      	bne.n	8008e00 <rt_test_004_004_execute+0x30>
    p1 = chThdSetPriority(prio + 3);
 8008e30:	1ce6      	adds	r6, r4, #3
  test_set_step(3);
 8008e32:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
 8008e34:	4630      	mov	r0, r6
  test_set_step(3);
 8008e36:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
 8008e3a:	f7ff ffb1 	bl	8008da0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8008e3e:	1a38      	subs	r0, r7, r0
 8008e40:	fab0 f080 	clz	r0, r0
 8008e44:	4914      	ldr	r1, [pc, #80]	; (8008e98 <rt_test_004_004_execute+0xc8>)
 8008e46:	0940      	lsrs	r0, r0, #5
 8008e48:	f7f7 ff5a 	bl	8000d00 <_test_assert>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d1d7      	bne.n	8008e00 <rt_test_004_004_execute+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 8008e50:	69ab      	ldr	r3, [r5, #24]
 8008e52:	4912      	ldr	r1, [pc, #72]	; (8008e9c <rt_test_004_004_execute+0xcc>)
 8008e54:	6898      	ldr	r0, [r3, #8]
 8008e56:	1b80      	subs	r0, r0, r6
 8008e58:	fab0 f080 	clz	r0, r0
 8008e5c:	0940      	lsrs	r0, r0, #5
 8008e5e:	f7f7 ff4f 	bl	8000d00 <_test_assert>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	d1cc      	bne.n	8008e00 <rt_test_004_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8008e66:	69ab      	ldr	r3, [r5, #24]
 8008e68:	490e      	ldr	r1, [pc, #56]	; (8008ea4 <rt_test_004_004_execute+0xd4>)
 8008e6a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008e6c:	1b80      	subs	r0, r0, r6
 8008e6e:	fab0 f080 	clz	r0, r0
 8008e72:	0940      	lsrs	r0, r0, #5
 8008e74:	f7f7 ff44 	bl	8000d00 <_test_assert>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d1c1      	bne.n	8008e00 <rt_test_004_004_execute+0x30>
  test_set_step(4);
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	f8c8 3000 	str.w	r3, [r8]
 8008e82:	2320      	movs	r3, #32
 8008e84:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8008e88:	69ab      	ldr	r3, [r5, #24]
    chThdGetSelfX()->prio = prio;
 8008e8a:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 8008e8c:	63dc      	str	r4, [r3, #60]	; 0x3c
 8008e8e:	f380 8811 	msr	BASEPRI, r0
  test_end_step(4);
 8008e92:	e7b5      	b.n	8008e00 <rt_test_004_004_execute+0x30>
 8008e94:	2000142c 	.word	0x2000142c
 8008e98:	0800ac78 	.word	0x0800ac78
 8008e9c:	0800ac9c 	.word	0x0800ac9c
 8008ea0:	0800acb8 	.word	0x0800acb8
 8008ea4:	0800ace0 	.word	0x0800ace0
 8008ea8:	20001f1c 	.word	0x20001f1c
 8008eac:	00000000 	.word	0x00000000

08008eb0 <rt_test_004_003_execute>:
static void rt_test_004_003_execute(void) {
 8008eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb4:	4f1d      	ldr	r7, [pc, #116]	; (8008f2c <rt_test_004_003_execute+0x7c>)
  test_set_step(1);
 8008eb6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008f38 <rt_test_004_003_execute+0x88>
  return chThdGetSelfX()->prio;
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	689e      	ldr	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8008ebe:	1c75      	adds	r5, r6, #1
  test_set_step(1);
 8008ec0:	2301      	movs	r3, #1
    p1 = chThdSetPriority(prio + 1);
 8008ec2:	4628      	mov	r0, r5
  test_set_step(1);
 8008ec4:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 8008ec8:	f7ff ff6a 	bl	8008da0 <chThdSetPriority>
 8008ecc:	4604      	mov	r4, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 8008ece:	1b80      	subs	r0, r0, r6
 8008ed0:	fab0 f080 	clz	r0, r0
 8008ed4:	4916      	ldr	r1, [pc, #88]	; (8008f30 <rt_test_004_003_execute+0x80>)
 8008ed6:	0940      	lsrs	r0, r0, #5
 8008ed8:	f7f7 ff12 	bl	8000d00 <_test_assert>
 8008edc:	b108      	cbz	r0, 8008ee2 <rt_test_004_003_execute+0x32>
}
 8008ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee2:	69bb      	ldr	r3, [r7, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8008ee4:	4913      	ldr	r1, [pc, #76]	; (8008f34 <rt_test_004_003_execute+0x84>)
 8008ee6:	6898      	ldr	r0, [r3, #8]
 8008ee8:	1b40      	subs	r0, r0, r5
 8008eea:	fab0 f080 	clz	r0, r0
 8008eee:	0940      	lsrs	r0, r0, #5
 8008ef0:	f7f7 ff06 	bl	8000d00 <_test_assert>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d1f2      	bne.n	8008ede <rt_test_004_003_execute+0x2e>
  test_set_step(2);
 8008ef8:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
 8008efa:	4620      	mov	r0, r4
  test_set_step(2);
 8008efc:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(p1);
 8008f00:	f7ff ff4e 	bl	8008da0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8008f04:	1a28      	subs	r0, r5, r0
 8008f06:	fab0 f080 	clz	r0, r0
 8008f0a:	4909      	ldr	r1, [pc, #36]	; (8008f30 <rt_test_004_003_execute+0x80>)
 8008f0c:	0940      	lsrs	r0, r0, #5
 8008f0e:	f7f7 fef7 	bl	8000d00 <_test_assert>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d1e3      	bne.n	8008ede <rt_test_004_003_execute+0x2e>
 8008f16:	69bb      	ldr	r3, [r7, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8008f18:	4906      	ldr	r1, [pc, #24]	; (8008f34 <rt_test_004_003_execute+0x84>)
 8008f1a:	6898      	ldr	r0, [r3, #8]
 8008f1c:	1b80      	subs	r0, r0, r6
 8008f1e:	fab0 f080 	clz	r0, r0
}
 8008f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8008f26:	0940      	lsrs	r0, r0, #5
 8008f28:	f7f7 beea 	b.w	8000d00 <_test_assert>
 8008f2c:	2000142c 	.word	0x2000142c
 8008f30:	0800ac78 	.word	0x0800ac78
 8008f34:	0800ac9c 	.word	0x0800ac9c
 8008f38:	20001f1c 	.word	0x20001f1c
 8008f3c:	00000000 	.word	0x00000000

08008f40 <chSysRestoreStatusX.part.0>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8008f40:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f42:	f3ef 8405 	mrs	r4, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8008f46:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8008f4a:	b11c      	cbz	r4, 8008f54 <chSysRestoreStatusX.part.0+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f383 8811 	msr	BASEPRI, r3
    else {
      chSchRescheduleS();
      chSysUnlock();
    }
  }
}
 8008f52:	bd10      	pop	{r4, pc}
      chSchRescheduleS();
 8008f54:	f7fa fd54 	bl	8003a00 <chSchRescheduleS>
 8008f58:	f384 8811 	msr	BASEPRI, r4
}
 8008f5c:	bd10      	pop	{r4, pc}
 8008f5e:	bf00      	nop

08008f60 <rt_test_002_002_execute>:
static void rt_test_002_002_execute(void) {
 8008f60:	b510      	push	{r4, lr}
  test_set_step(1);
 8008f62:	4c31      	ldr	r4, [pc, #196]	; (8009028 <rt_test_002_002_execute+0xc8>)
 8008f64:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 8008f66:	b086      	sub	sp, #24
  test_set_step(1);
 8008f68:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f6a:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 8008f6e:	b91b      	cbnz	r3, 8008f78 <rt_test_002_002_execute+0x18>
 8008f70:	f7f8 fcd6 	bl	8001920 <chSysGetStatusAndLockX.part.0>
  return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 8008f74:	f7ff ffe4 	bl	8008f40 <chSysRestoreStatusX.part.0>
  test_set_step(2);
 8008f78:	2302      	movs	r3, #2
 8008f7a:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008f7c:	2320      	movs	r3, #32
 8008f7e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f82:	f3ef 8311 	mrs	r3, BASEPRI
 8008f86:	b91b      	cbnz	r3, 8008f90 <rt_test_002_002_execute+0x30>
 8008f88:	f7f8 fcca 	bl	8001920 <chSysGetStatusAndLockX.part.0>
 8008f8c:	f7ff ffd8 	bl	8008f40 <chSysRestoreStatusX.part.0>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008f90:	2300      	movs	r3, #0
 8008f92:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8008f96:	2303      	movs	r3, #3
 8008f98:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f9a:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8008f9e:	b913      	cbnz	r3, 8008fa6 <rt_test_002_002_execute+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008fa0:	2320      	movs	r3, #32
 8008fa2:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8008faa:	b913      	cbnz	r3, 8008fb2 <rt_test_002_002_execute+0x52>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008fac:	2320      	movs	r3, #32
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8008fb8:	2204      	movs	r2, #4
 8008fba:	6022      	str	r2, [r4, #0]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fc2:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8008fc6:	b10a      	cbz	r2, 8008fcc <rt_test_002_002_execute+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008fc8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8008fd0:	b113      	cbz	r3, 8008fd8 <rt_test_002_002_execute+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 8008fd8:	2205      	movs	r2, #5
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->func = NULL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	6022      	str	r2, [r4, #0]
 8008fe0:	2320      	movs	r3, #32
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8008fe6:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8008fe8:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
 8008fea:	b113      	cbz	r3, 8008ff2 <rt_test_002_002_execute+0x92>
    chVTDoResetI(vtp);
 8008fec:	4620      	mov	r0, r4
 8008fee:	f7f8 fc0f 	bl	8001810 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	4a0d      	ldr	r2, [pc, #52]	; (800902c <rt_test_002_002_execute+0xcc>)
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	f7f8 fc49 	bl	8001890 <chVTDoSetI>
 8008ffe:	2400      	movs	r4, #0
 8009000:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
 8009004:	200a      	movs	r0, #10
 8009006:	f7f9 fe0b 	bl	8002c20 <chThdSleep>
 800900a:	2320      	movs	r3, #32
 800900c:	f383 8811 	msr	BASEPRI, r3
  b = chVTIsArmedI(vtp);
 8009010:	9804      	ldr	r0, [sp, #16]
 8009012:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8009016:	fab0 f080 	clz	r0, r0
 800901a:	4905      	ldr	r1, [pc, #20]	; (8009030 <rt_test_002_002_execute+0xd0>)
 800901c:	0940      	lsrs	r0, r0, #5
 800901e:	f7f7 fe6f 	bl	8000d00 <_test_assert>
}
 8009022:	b006      	add	sp, #24
 8009024:	bd10      	pop	{r4, pc}
 8009026:	bf00      	nop
 8009028:	20001f1c 	.word	0x20001f1c
 800902c:	08009041 	.word	0x08009041
 8009030:	0800ad00 	.word	0x0800ad00
	...

08009040 <vtcb>:
static void vtcb(void *p) {
 8009040:	b508      	push	{r3, lr}
 8009042:	2320      	movs	r3, #32
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	2200      	movs	r2, #0
 800904a:	f382 8811 	msr	BASEPRI, r2
 800904e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009052:	f3ef 8311 	mrs	r3, BASEPRI
 8009056:	b91b      	cbnz	r3, 8009060 <vtcb+0x20>
 8009058:	f7f8 fc62 	bl	8001920 <chSysGetStatusAndLockX.part.0>
 800905c:	f7ff ff70 	bl	8008f40 <chSysRestoreStatusX.part.0>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009060:	2300      	movs	r3, #0
 8009062:	f383 8811 	msr	BASEPRI, r3
}
 8009066:	bd08      	pop	{r3, pc}
	...

08009070 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8009070:	4a7e      	ldr	r2, [pc, #504]	; (800926c <__early_init+0x1fc>)
  gpiop->OTYPER  = config->otyper;
 8009072:	487f      	ldr	r0, [pc, #508]	; (8009270 <__early_init+0x200>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8009074:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8009076:	f8df c24c 	ldr.w	ip, [pc, #588]	; 80092c4 <__early_init+0x254>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800907a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800907e:	430b      	orrs	r3, r1
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8009080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8009084:	6113      	str	r3, [r2, #16]
 8009086:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8009088:	4e7a      	ldr	r6, [pc, #488]	; (8009274 <__early_init+0x204>)
  gpiop->PUPDR   = config->pupdr;
 800908a:	f8df e23c 	ldr.w	lr, [pc, #572]	; 80092c8 <__early_init+0x258>
  gpiop->AFRL    = config->afrl;
 800908e:	4f7a      	ldr	r7, [pc, #488]	; (8009278 <__early_init+0x208>)
  gpiop->OTYPER  = config->otyper;
 8009090:	4d7a      	ldr	r5, [pc, #488]	; (800927c <__early_init+0x20c>)
 8009092:	4c7b      	ldr	r4, [pc, #492]	; (8009280 <__early_init+0x210>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8009094:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8009098:	f023 0301 	bic.w	r3, r3, #1
 800909c:	6113      	str	r3, [r2, #16]
 800909e:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80090a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80090a2:	430b      	orrs	r3, r1
 80090a4:	6313      	str	r3, [r2, #48]	; 0x30
 80090a6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80090a8:	430b      	orrs	r3, r1
 80090aa:	6513      	str	r3, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 80090ac:	f46f 41a8 	mvn.w	r1, #21504	; 0x5400
  gpiop->OTYPER  = config->otyper;
 80090b0:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80090b2:	f8d2 8050 	ldr.w	r8, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 80090b6:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80090b8:	6081      	str	r1, [r0, #8]
  gpiop->ODR     = config->odr;
 80090ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
  gpiop->PUPDR   = config->pupdr;
 80090be:	f8c0 e00c 	str.w	lr, [r0, #12]
  gpiop->AFRH    = config->afrh;
 80090c2:	f8df 8208 	ldr.w	r8, [pc, #520]	; 80092cc <__early_init+0x25c>
  gpiop->ODR     = config->odr;
 80090c6:	6141      	str	r1, [r0, #20]
  gpiop->MODER   = config->moder;
 80090c8:	f8df e204 	ldr.w	lr, [pc, #516]	; 80092d0 <__early_init+0x260>
  gpiop->AFRL    = config->afrl;
 80090cc:	6207      	str	r7, [r0, #32]
  gpiop->OTYPER  = config->otyper;
 80090ce:	f44f 7710 	mov.w	r7, #576	; 0x240
  gpiop->AFRH    = config->afrh;
 80090d2:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80090d6:	f8c0 e000 	str.w	lr, [r0]
  gpiop->OTYPER  = config->otyper;
 80090da:	6077      	str	r7, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
  gpiop->PUPDR   = config->pupdr;
 80090e0:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 80092d4 <__early_init+0x264>
  gpiop->OSPEEDR = config->ospeedr;
 80090e4:	60b0      	str	r0, [r6, #8]
  gpiop->AFRL    = config->afrl;
 80090e6:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  gpiop->PUPDR   = config->pupdr;
 80090ea:	f8c6 e00c 	str.w	lr, [r6, #12]
  gpiop->ODR     = config->odr;
 80090ee:	6171      	str	r1, [r6, #20]
  gpiop->AFRH    = config->afrh;
 80090f0:	f04f 0e40 	mov.w	lr, #64	; 0x40
  gpiop->AFRL    = config->afrl;
 80090f4:	6237      	str	r7, [r6, #32]
  gpiop->MODER   = config->moder;
 80090f6:	4f63      	ldr	r7, [pc, #396]	; (8009284 <__early_init+0x214>)
  gpiop->AFRH    = config->afrh;
 80090f8:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80090fc:	6037      	str	r7, [r6, #0]
  gpiop->PUPDR   = config->pupdr;
 80090fe:	f106 56a2 	add.w	r6, r6, #339738624	; 0x14400000
 8009102:	f506 3644 	add.w	r6, r6, #200704	; 0x31000
 8009106:	f506 76aa 	add.w	r6, r6, #340	; 0x154
  gpiop->OTYPER  = config->otyper;
 800910a:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800910c:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 800910e:	60ee      	str	r6, [r5, #12]
  gpiop->AFRL    = config->afrl;
 8009110:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 8009114:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8009116:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8009118:	4e5b      	ldr	r6, [pc, #364]	; (8009288 <__early_init+0x218>)
 800911a:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800911c:	4e5b      	ldr	r6, [pc, #364]	; (800928c <__early_init+0x21c>)
 800911e:	602e      	str	r6, [r5, #0]
  gpiop->PUPDR   = config->pupdr;
 8009120:	4d5b      	ldr	r5, [pc, #364]	; (8009290 <__early_init+0x220>)
  gpiop->OTYPER  = config->otyper;
 8009122:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8009124:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8009126:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8009128:	f640 75ff 	movw	r5, #4095	; 0xfff
 800912c:	6165      	str	r5, [r4, #20]
  gpiop->OTYPER  = config->otyper;
 800912e:	4f59      	ldr	r7, [pc, #356]	; (8009294 <__early_init+0x224>)
 8009130:	4e59      	ldr	r6, [pc, #356]	; (8009298 <__early_init+0x228>)
  gpiop->MODER   = config->moder;
 8009132:	4d5a      	ldr	r5, [pc, #360]	; (800929c <__early_init+0x22c>)
  gpiop->AFRL    = config->afrl;
 8009134:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8009136:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8009138:	6025      	str	r5, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 800913a:	f8cc 3004 	str.w	r3, [ip, #4]
 800913e:	4d58      	ldr	r5, [pc, #352]	; (80092a0 <__early_init+0x230>)
  gpiop->OSPEEDR = config->ospeedr;
 8009140:	f8cc 0008 	str.w	r0, [ip, #8]
  gpiop->OTYPER  = config->otyper;
 8009144:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
  gpiop->PUPDR   = config->pupdr;
 8009148:	f8cc 300c 	str.w	r3, [ip, #12]
  gpiop->ODR     = config->odr;
 800914c:	f8cc 1014 	str.w	r1, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8009150:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8009154:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8009158:	f8cc e000 	str.w	lr, [ip]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800915c:	f5ac 3cd0 	sub.w	ip, ip, #106496	; 0x1a000
  gpiop->OTYPER  = config->otyper;
 8009160:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8009162:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8009164:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 8009166:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8009168:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 800916a:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800916c:	603b      	str	r3, [r7, #0]
  gpiop->OTYPER  = config->otyper;
 800916e:	6073      	str	r3, [r6, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8009170:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 8009174:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8009176:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 8009178:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 800917a:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 800917c:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800917e:	6033      	str	r3, [r6, #0]
  PWR->CR = STM32_VOS;
 8009180:	f44f 4640 	mov.w	r6, #49152	; 0xc000
  gpiop->OTYPER  = config->otyper;
 8009184:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8009186:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8009188:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 800918a:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 800918c:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 800918e:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8009190:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8009192:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8009194:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8009196:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 8009198:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800919a:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800919c:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800919e:	6023      	str	r3, [r4, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80091a0:	6417      	str	r7, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 80091a2:	f8cc 6000 	str.w	r6, [ip]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80091a6:	6813      	ldr	r3, [r2, #0]
 80091a8:	f043 0301 	orr.w	r3, r3, #1
 80091ac:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80091ae:	6813      	ldr	r3, [r2, #0]
 80091b0:	079e      	lsls	r6, r3, #30
 80091b2:	d5fc      	bpl.n	80091ae <__early_init+0x13e>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80091b4:	6891      	ldr	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80091b6:	4b2d      	ldr	r3, [pc, #180]	; (800926c <__early_init+0x1fc>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80091b8:	f021 0103 	bic.w	r1, r1, #3
 80091bc:	6091      	str	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	f012 020c 	ands.w	r2, r2, #12
 80091c4:	d1fb      	bne.n	80091be <__early_init+0x14e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80091c6:	6818      	ldr	r0, [r3, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80091c8:	4928      	ldr	r1, [pc, #160]	; (800926c <__early_init+0x1fc>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80091ca:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 80091ce:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80091d0:	609a      	str	r2, [r3, #8]
  RCC->CR |= RCC_CR_HSEON;
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80091d8:	601a      	str	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80091da:	680b      	ldr	r3, [r1, #0]
 80091dc:	039d      	lsls	r5, r3, #14
 80091de:	d5fc      	bpl.n	80091da <__early_init+0x16a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80091e0:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80091e2:	4b22      	ldr	r3, [pc, #136]	; (800926c <__early_init+0x1fc>)
  RCC->CSR |= RCC_CSR_LSION;
 80091e4:	f042 0201 	orr.w	r2, r2, #1
 80091e8:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80091ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80091ec:	0794      	lsls	r4, r2, #30
 80091ee:	d5fc      	bpl.n	80091ea <__early_init+0x17a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80091f0:	4a2c      	ldr	r2, [pc, #176]	; (80092a4 <__early_init+0x234>)
 80091f2:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80091f4:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80091f6:	492c      	ldr	r1, [pc, #176]	; (80092a8 <__early_init+0x238>)
  RCC->CR |= RCC_CR_PLLON;
 80091f8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80091fc:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80091fe:	684b      	ldr	r3, [r1, #4]
 8009200:	0458      	lsls	r0, r3, #17
 8009202:	d5fc      	bpl.n	80091fe <__early_init+0x18e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8009204:	4b19      	ldr	r3, [pc, #100]	; (800926c <__early_init+0x1fc>)
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	0192      	lsls	r2, r2, #6
 800920a:	d5fc      	bpl.n	8009206 <__early_init+0x196>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800920c:	4927      	ldr	r1, [pc, #156]	; (80092ac <__early_init+0x23c>)

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800920e:	4a28      	ldr	r2, [pc, #160]	; (80092b0 <__early_init+0x240>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8009210:	6099      	str	r1, [r3, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8009212:	6812      	ldr	r2, [r2, #0]
 8009214:	4b27      	ldr	r3, [pc, #156]	; (80092b4 <__early_init+0x244>)
 8009216:	429a      	cmp	r2, r3
 8009218:	d01e      	beq.n	8009258 <__early_init+0x1e8>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800921a:	4b27      	ldr	r3, [pc, #156]	; (80092b8 <__early_init+0x248>)
 800921c:	f240 7205 	movw	r2, #1797	; 0x705
 8009220:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8009222:	4a25      	ldr	r2, [pc, #148]	; (80092b8 <__early_init+0x248>)
 8009224:	6813      	ldr	r3, [r2, #0]
 8009226:	f003 030f 	and.w	r3, r3, #15
 800922a:	2b05      	cmp	r3, #5
 800922c:	d1fa      	bne.n	8009224 <__early_init+0x1b4>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800922e:	4b0f      	ldr	r3, [pc, #60]	; (800926c <__early_init+0x1fc>)
 8009230:	689a      	ldr	r2, [r3, #8]
 8009232:	f042 0202 	orr.w	r2, r2, #2
 8009236:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	f002 020c 	and.w	r2, r2, #12
 800923e:	2a08      	cmp	r2, #8
 8009240:	d1fa      	bne.n	8009238 <__early_init+0x1c8>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8009242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009248:	645a      	str	r2, [r3, #68]	; 0x44
 800924a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800924c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009250:	665a      	str	r2, [r3, #100]	; 0x64
 8009252:	6e5b      	ldr	r3, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8009254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8009258:	4a18      	ldr	r2, [pc, #96]	; (80092bc <__early_init+0x24c>)
 800925a:	4b19      	ldr	r3, [pc, #100]	; (80092c0 <__early_init+0x250>)
 800925c:	6812      	ldr	r2, [r2, #0]
 800925e:	429a      	cmp	r2, r3
 8009260:	d1db      	bne.n	800921a <__early_init+0x1aa>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8009262:	4b15      	ldr	r3, [pc, #84]	; (80092b8 <__early_init+0x248>)
 8009264:	f240 1205 	movw	r2, #261	; 0x105
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	e7da      	b.n	8009222 <__early_init+0x1b2>
 800926c:	40023800 	.word	0x40023800
 8009270:	40020000 	.word	0x40020000
 8009274:	40020400 	.word	0x40020400
 8009278:	55560000 	.word	0x55560000
 800927c:	40020800 	.word	0x40020800
 8009280:	40020c00 	.word	0x40020c00
 8009284:	00082080 	.word	0x00082080
 8009288:	00060600 	.word	0x00060600
 800928c:	02208001 	.word	0x02208001
 8009290:	00555055 	.word	0x00555055
 8009294:	40021400 	.word	0x40021400
 8009298:	40021800 	.word	0x40021800
 800929c:	55000100 	.word	0x55000100
 80092a0:	40021c00 	.word	0x40021c00
 80092a4:	07405408 	.word	0x07405408
 80092a8:	40007000 	.word	0x40007000
 80092ac:	38889400 	.word	0x38889400
 80092b0:	e0042000 	.word	0xe0042000
 80092b4:	20006411 	.word	0x20006411
 80092b8:	40023c00 	.word	0x40023c00
 80092bc:	e000ed00 	.word	0xe000ed00
 80092c0:	410fc241 	.word	0x410fc241
 80092c4:	40021000 	.word	0x40021000
 80092c8:	40010054 	.word	0x40010054
 80092cc:	000aaa00 	.word	0x000aaa00
 80092d0:	2aa0aa00 	.word	0x2aa0aa00
 80092d4:	55514515 	.word	0x55514515
	...

080092e0 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80092e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80092e4:	4c62      	ldr	r4, [pc, #392]	; (8009470 <VectorD8+0x190>)
 80092e6:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80092e8:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 80092ec:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80092ee:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 80092f0:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 80092f2:	d476      	bmi.n	80093e2 <VectorD8+0x102>
 80092f4:	2320      	movs	r3, #32
 80092f6:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80092fa:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 80092fe:	d044      	beq.n	800938a <VectorD8+0xaa>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8009300:	4f5c      	ldr	r7, [pc, #368]	; (8009474 <VectorD8+0x194>)
  chThdDequeueNextI(tqp, msg);
 8009302:	f107 0908 	add.w	r9, r7, #8
 8009306:	e008      	b.n	800931a <VectorD8+0x3a>
    if (sr & USART_SR_RXNE)
 8009308:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800930a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800930e:	d41e      	bmi.n	800934e <VectorD8+0x6e>
    sr = u->SR;
 8009310:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8009312:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8009316:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8009318:	d037      	beq.n	800938a <VectorD8+0xaa>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800931a:	072b      	lsls	r3, r5, #28
 800931c:	d0f4      	beq.n	8009308 <VectorD8+0x28>
    sts |= SD_OVERRUN_ERROR;
 800931e:	f015 0f08 	tst.w	r5, #8
 8009322:	bf0c      	ite	eq
 8009324:	2100      	moveq	r1, #0
 8009326:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8009328:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 800932a:	bf48      	it	mi
 800932c:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8009330:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8009332:	bf48      	it	mi
 8009334:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8009338:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 800933a:	bf48      	it	mi
 800933c:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 8009340:	4638      	mov	r0, r7
 8009342:	f7f8 f9d5 	bl	80016f0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8009346:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8009348:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800934c:	d5e0      	bpl.n	8009310 <VectorD8+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800934e:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8009350:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 8009354:	b3a3      	cbz	r3, 80093c0 <VectorD8+0xe0>
  if (!iqIsFullI(iqp)) {
 8009356:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800935a:	4293      	cmp	r3, r2
 800935c:	d038      	beq.n	80093d0 <VectorD8+0xf0>
    iqp->q_counter++;
 800935e:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8009360:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8009362:	3201      	adds	r2, #1
 8009364:	ea05 050a 	and.w	r5, r5, sl
 8009368:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 800936a:	6221      	str	r1, [r4, #32]
 800936c:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 800936e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8009372:	429a      	cmp	r2, r3
 8009374:	d301      	bcc.n	800937a <VectorD8+0x9a>
      iqp->q_wrptr = iqp->q_buffer;
 8009376:	69a3      	ldr	r3, [r4, #24]
 8009378:	6223      	str	r3, [r4, #32]
  chThdDequeueNextI(tqp, msg);
 800937a:	4648      	mov	r0, r9
 800937c:	f7f8 f8f0 	bl	8001560 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 8009380:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8009382:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8009386:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8009388:	d1c7      	bne.n	800931a <VectorD8+0x3a>
 800938a:	2300      	movs	r3, #0
 800938c:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8009390:	f018 0f80 	tst.w	r8, #128	; 0x80
 8009394:	d001      	beq.n	800939a <VectorD8+0xba>
 8009396:	062a      	lsls	r2, r5, #24
 8009398:	d432      	bmi.n	8009400 <VectorD8+0x120>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800939a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800939e:	d00b      	beq.n	80093b8 <VectorD8+0xd8>
 80093a0:	066b      	lsls	r3, r5, #25
 80093a2:	d509      	bpl.n	80093b8 <VectorD8+0xd8>
 80093a4:	2320      	movs	r3, #32
 80093a6:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80093aa:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d043      	beq.n	800943a <VectorD8+0x15a>
 80093b2:	2300      	movs	r3, #0
 80093b4:	f383 8811 	msr	BASEPRI, r3
}
 80093b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80093bc:	f7f7 be88 	b.w	80010d0 <_port_irq_epilogue>
  chEvtBroadcastFlagsI(esp, flags);
 80093c0:	2104      	movs	r1, #4
 80093c2:	4638      	mov	r0, r7
 80093c4:	f7f8 f994 	bl	80016f0 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 80093c8:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d1c6      	bne.n	800935e <VectorD8+0x7e>
 80093d0:	6962      	ldr	r2, [r4, #20]
 80093d2:	2a00      	cmp	r2, #0
 80093d4:	d0c3      	beq.n	800935e <VectorD8+0x7e>
 80093d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80093da:	4638      	mov	r0, r7
 80093dc:	f7f8 f988 	bl	80016f0 <chEvtBroadcastFlagsI>
 80093e0:	e796      	b.n	8009310 <VectorD8+0x30>
 80093e2:	2320      	movs	r3, #32
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093ec:	1d20      	adds	r0, r4, #4
 80093ee:	f7f8 f97f 	bl	80016f0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80093f2:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80093f6:	6033      	str	r3, [r6, #0]
 80093f8:	2300      	movs	r3, #0
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	e779      	b.n	80092f4 <VectorD8+0x14>
 8009400:	2320      	movs	r3, #32
 8009402:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8009406:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800940a:	429a      	cmp	r2, r3
 800940c:	d022      	beq.n	8009454 <VectorD8+0x174>
    oqp->q_counter++;
 800940e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8009410:	6c21      	ldr	r1, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8009412:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 8009414:	3201      	adds	r2, #1
 8009416:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8009418:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 800941a:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 800941c:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 800941e:	d301      	bcc.n	8009424 <VectorD8+0x144>
      oqp->q_rdptr = oqp->q_buffer;
 8009420:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009422:	64a3      	str	r3, [r4, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8009424:	4814      	ldr	r0, [pc, #80]	; (8009478 <VectorD8+0x198>)
 8009426:	f7f8 f89b 	bl	8001560 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 800942a:	6077      	str	r7, [r6, #4]
 800942c:	2300      	movs	r3, #0
 800942e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8009432:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009436:	d0bf      	beq.n	80093b8 <VectorD8+0xd8>
 8009438:	e7b2      	b.n	80093a0 <VectorD8+0xc0>
    if (oqIsEmptyI(&sdp->oqueue)) {
 800943a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800943c:	2b00      	cmp	r3, #0
 800943e:	d0b8      	beq.n	80093b2 <VectorD8+0xd2>
  chEvtBroadcastFlagsI(esp, flags);
 8009440:	480c      	ldr	r0, [pc, #48]	; (8009474 <VectorD8+0x194>)
 8009442:	2110      	movs	r1, #16
 8009444:	f7f8 f954 	bl	80016f0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8009448:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800944c:	ea08 0303 	and.w	r3, r8, r3
 8009450:	60f3      	str	r3, [r6, #12]
 8009452:	e7ae      	b.n	80093b2 <VectorD8+0xd2>
  if (!oqIsEmptyI(oqp)) {
 8009454:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009456:	2a00      	cmp	r2, #0
 8009458:	d0d9      	beq.n	800940e <VectorD8+0x12e>
 800945a:	4806      	ldr	r0, [pc, #24]	; (8009474 <VectorD8+0x194>)
 800945c:	2108      	movs	r1, #8
 800945e:	f7f8 f947 	bl	80016f0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8009462:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8009466:	ea08 0303 	and.w	r3, r8, r3
 800946a:	60f3      	str	r3, [r6, #12]
 800946c:	e7de      	b.n	800942c <VectorD8+0x14c>
 800946e:	bf00      	nop
 8009470:	200008fc 	.word	0x200008fc
 8009474:	20000900 	.word	0x20000900
 8009478:	2000092c 	.word	0x2000092c
 800947c:	00000000 	.word	0x00000000

08009480 <VectorB8>:
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 8009480:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8009482:	4d17      	ldr	r5, [pc, #92]	; (80094e0 <VectorB8+0x60>)
 8009484:	69ab      	ldr	r3, [r5, #24]
 8009486:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	4014      	ands	r4, r2
 800948c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 800948e:	43d2      	mvns	r2, r2
 8009490:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8009492:	07a3      	lsls	r3, r4, #30
 8009494:	d504      	bpl.n	80094a0 <VectorB8+0x20>
      (pwmp->config->channels[0].callback != NULL))
 8009496:	686b      	ldr	r3, [r5, #4]
 8009498:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800949a:	b10b      	cbz	r3, 80094a0 <VectorB8+0x20>
    pwmp->config->channels[0].callback(pwmp);
 800949c:	4628      	mov	r0, r5
 800949e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80094a0:	0760      	lsls	r0, r4, #29
 80094a2:	d504      	bpl.n	80094ae <VectorB8+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 80094a4:	686b      	ldr	r3, [r5, #4]
 80094a6:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80094a8:	b10b      	cbz	r3, 80094ae <VectorB8+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 80094aa:	480d      	ldr	r0, [pc, #52]	; (80094e0 <VectorB8+0x60>)
 80094ac:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80094ae:	0721      	lsls	r1, r4, #28
 80094b0:	d504      	bpl.n	80094bc <VectorB8+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 80094b2:	686b      	ldr	r3, [r5, #4]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80094b6:	b10b      	cbz	r3, 80094bc <VectorB8+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 80094b8:	4809      	ldr	r0, [pc, #36]	; (80094e0 <VectorB8+0x60>)
 80094ba:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80094bc:	06e2      	lsls	r2, r4, #27
 80094be:	d504      	bpl.n	80094ca <VectorB8+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 80094c0:	686b      	ldr	r3, [r5, #4]
 80094c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80094c4:	b10b      	cbz	r3, 80094ca <VectorB8+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 80094c6:	4806      	ldr	r0, [pc, #24]	; (80094e0 <VectorB8+0x60>)
 80094c8:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 80094ca:	07e3      	lsls	r3, r4, #31
 80094cc:	d504      	bpl.n	80094d8 <VectorB8+0x58>
 80094ce:	686b      	ldr	r3, [r5, #4]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	b10b      	cbz	r3, 80094d8 <VectorB8+0x58>
    pwmp->config->callback(pwmp);
 80094d4:	4802      	ldr	r0, [pc, #8]	; (80094e0 <VectorB8+0x60>)
 80094d6:	4798      	blx	r3
}
 80094d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 80094dc:	f7f7 bdf8 	b.w	80010d0 <_port_irq_epilogue>
 80094e0:	200008e0 	.word	0x200008e0
	...

080094f0 <VectorB0>:
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 80094f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80094f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sr  = timp->SR;
 80094f8:	6903      	ldr	r3, [r0, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80094fa:	68c2      	ldr	r2, [r0, #12]
 80094fc:	4013      	ands	r3, r2
 80094fe:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8009500:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8009502:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8009504:	6102      	str	r2, [r0, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8009506:	d403      	bmi.n	8009510 <VectorB0+0x20>
}
 8009508:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800950c:	f7f7 bde0 	b.w	80010d0 <_port_irq_epilogue>
 8009510:	2320      	movs	r3, #32
 8009512:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8009516:	4d23      	ldr	r5, [pc, #140]	; (80095a4 <VectorB0+0xb4>)
 8009518:	6a47      	ldr	r7, [r0, #36]	; 0x24
 800951a:	69eb      	ldr	r3, [r5, #28]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800951c:	6aaa      	ldr	r2, [r5, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 800951e:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8009520:	1abe      	subs	r6, r7, r2
 8009522:	42b1      	cmp	r1, r6
 8009524:	bf88      	it	hi
 8009526:	f105 091c 	addhi.w	r9, r5, #28
 800952a:	d825      	bhi.n	8009578 <VectorB0+0x88>
  STM32_ST_TIM->DIER = 0U;
 800952c:	4604      	mov	r4, r0
 800952e:	f105 091c 	add.w	r9, r5, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8009532:	f04f 0800 	mov.w	r8, #0
 8009536:	2720      	movs	r7, #32
 8009538:	e000      	b.n	800953c <VectorB0+0x4c>
 800953a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800953c:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 800953e:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8009540:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8009542:	62aa      	str	r2, [r5, #40]	; 0x28
      nowdelta -= vtp->delta;
 8009544:	eba6 0601 	sub.w	r6, r6, r1
      fn = vtp->func;
 8009548:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800954a:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 800954e:	61e8      	str	r0, [r5, #28]
      vtp->func = NULL;
 8009550:	f8c3 800c 	str.w	r8, [r3, #12]
 8009554:	bf08      	it	eq
 8009556:	f8c4 800c 	streq.w	r8, [r4, #12]
 800955a:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800955e:	6918      	ldr	r0, [r3, #16]
 8009560:	4790      	blx	r2
 8009562:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8009566:	69eb      	ldr	r3, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 8009568:	6899      	ldr	r1, [r3, #8]
 800956a:	428e      	cmp	r6, r1
 800956c:	d2e5      	bcs.n	800953a <VectorB0+0x4a>
  return (systime_t)STM32_ST_TIM->CNT;
 800956e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8009570:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009572:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 8009574:	428e      	cmp	r6, r1
 8009576:	d2de      	bcs.n	8009536 <VectorB0+0x46>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8009578:	454b      	cmp	r3, r9
 800957a:	d00b      	beq.n	8009594 <VectorB0+0xa4>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 800957c:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 800957e:	62af      	str	r7, [r5, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8009580:	1bc9      	subs	r1, r1, r7
 8009582:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8009584:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8009588:	2a02      	cmp	r2, #2
 800958a:	bf2c      	ite	cs
 800958c:	18bf      	addcs	r7, r7, r2
 800958e:	3702      	addcc	r7, #2
 8009590:	609a      	str	r2, [r3, #8]
 8009592:	634f      	str	r7, [r1, #52]	; 0x34
 8009594:	2300      	movs	r3, #0
 8009596:	f383 8811 	msr	BASEPRI, r3
}
 800959a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800959e:	f7f7 bd97 	b.w	80010d0 <_port_irq_epilogue>
 80095a2:	bf00      	nop
 80095a4:	2000142c 	.word	0x2000142c
	...

080095b0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80095b0:	b4f0      	push	{r4, r5, r6, r7}
 80095b2:	4f14      	ldr	r7, [pc, #80]	; (8009604 <__init_ram_areas+0x54>)
 80095b4:	4d14      	ldr	r5, [pc, #80]	; (8009608 <__init_ram_areas+0x58>)
 80095b6:	4815      	ldr	r0, [pc, #84]	; (800960c <__init_ram_areas+0x5c>)
 80095b8:	4b15      	ldr	r3, [pc, #84]	; (8009610 <__init_ram_areas+0x60>)
 80095ba:	4916      	ldr	r1, [pc, #88]	; (8009614 <__init_ram_areas+0x64>)
 80095bc:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80095c0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 80095c2:	4298      	cmp	r0, r3
 80095c4:	d911      	bls.n	80095ea <__init_ram_areas+0x3a>
 80095c6:	3904      	subs	r1, #4
 80095c8:	461a      	mov	r2, r3
      *p = *tp;
 80095ca:	f851 4f04 	ldr.w	r4, [r1, #4]!
 80095ce:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 80095d2:	4290      	cmp	r0, r2
 80095d4:	d8f9      	bhi.n	80095ca <__init_ram_areas+0x1a>
 80095d6:	1e42      	subs	r2, r0, #1
 80095d8:	1ad2      	subs	r2, r2, r3
 80095da:	f022 0203 	bic.w	r2, r2, #3
 80095de:	3204      	adds	r2, #4
 80095e0:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 80095e2:	429d      	cmp	r5, r3
 80095e4:	d903      	bls.n	80095ee <__init_ram_areas+0x3e>
      *p = 0;
 80095e6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 80095ea:	429d      	cmp	r5, r3
 80095ec:	d8fb      	bhi.n	80095e6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80095ee:	4567      	cmp	r7, ip
 80095f0:	d005      	beq.n	80095fe <__init_ram_areas+0x4e>
 80095f2:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 80095f6:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 80095fa:	3710      	adds	r7, #16
 80095fc:	e7e1      	b.n	80095c2 <__init_ram_areas+0x12>
#endif
}
 80095fe:	bcf0      	pop	{r4, r5, r6, r7}
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	0800ba78 	.word	0x0800ba78
 8009608:	200024d0 	.word	0x200024d0
 800960c:	200024d0 	.word	0x200024d0
 8009610:	200024d0 	.word	0x200024d0
 8009614:	0800c080 	.word	0x0800c080
	...

08009620 <__default_exit>:
  while (true) {
 8009620:	e7fe      	b.n	8009620 <__default_exit>
 8009622:	bf00      	nop
	...

08009630 <__late_init>:
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
	...

08009640 <__core_init>:
}
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop

08009644 <memcmp>:
 8009644:	2a03      	cmp	r2, #3
 8009646:	b470      	push	{r4, r5, r6}
 8009648:	d912      	bls.n	8009670 <memcmp+0x2c>
 800964a:	ea40 0501 	orr.w	r5, r0, r1
 800964e:	07ad      	lsls	r5, r5, #30
 8009650:	4604      	mov	r4, r0
 8009652:	460b      	mov	r3, r1
 8009654:	d11e      	bne.n	8009694 <memcmp+0x50>
 8009656:	4619      	mov	r1, r3
 8009658:	4620      	mov	r0, r4
 800965a:	f853 5b04 	ldr.w	r5, [r3], #4
 800965e:	f854 6b04 	ldr.w	r6, [r4], #4
 8009662:	42ae      	cmp	r6, r5
 8009664:	d116      	bne.n	8009694 <memcmp+0x50>
 8009666:	3a04      	subs	r2, #4
 8009668:	2a03      	cmp	r2, #3
 800966a:	4620      	mov	r0, r4
 800966c:	4619      	mov	r1, r3
 800966e:	d8f2      	bhi.n	8009656 <memcmp+0x12>
 8009670:	1e56      	subs	r6, r2, #1
 8009672:	b1a2      	cbz	r2, 800969e <memcmp+0x5a>
 8009674:	3901      	subs	r1, #1
 8009676:	1e44      	subs	r4, r0, #1
 8009678:	e001      	b.n	800967e <memcmp+0x3a>
 800967a:	18c3      	adds	r3, r0, r3
 800967c:	d00c      	beq.n	8009698 <memcmp+0x54>
 800967e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8009682:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009686:	4295      	cmp	r5, r2
 8009688:	eba6 0304 	sub.w	r3, r6, r4
 800968c:	d0f5      	beq.n	800967a <memcmp+0x36>
 800968e:	1aa8      	subs	r0, r5, r2
 8009690:	bc70      	pop	{r4, r5, r6}
 8009692:	4770      	bx	lr
 8009694:	1e56      	subs	r6, r2, #1
 8009696:	e7ed      	b.n	8009674 <memcmp+0x30>
 8009698:	4618      	mov	r0, r3
 800969a:	bc70      	pop	{r4, r5, r6}
 800969c:	4770      	bx	lr
 800969e:	4610      	mov	r0, r2
 80096a0:	e7f6      	b.n	8009690 <memcmp+0x4c>
 80096a2:	bf00      	nop

080096a4 <memset>:
 80096a4:	b4f0      	push	{r4, r5, r6, r7}
 80096a6:	0786      	lsls	r6, r0, #30
 80096a8:	d046      	beq.n	8009738 <memset+0x94>
 80096aa:	1e54      	subs	r4, r2, #1
 80096ac:	2a00      	cmp	r2, #0
 80096ae:	d03c      	beq.n	800972a <memset+0x86>
 80096b0:	b2ca      	uxtb	r2, r1
 80096b2:	4603      	mov	r3, r0
 80096b4:	e001      	b.n	80096ba <memset+0x16>
 80096b6:	3c01      	subs	r4, #1
 80096b8:	d337      	bcc.n	800972a <memset+0x86>
 80096ba:	f803 2b01 	strb.w	r2, [r3], #1
 80096be:	079d      	lsls	r5, r3, #30
 80096c0:	d1f9      	bne.n	80096b6 <memset+0x12>
 80096c2:	2c03      	cmp	r4, #3
 80096c4:	d92a      	bls.n	800971c <memset+0x78>
 80096c6:	b2cd      	uxtb	r5, r1
 80096c8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80096cc:	2c0f      	cmp	r4, #15
 80096ce:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80096d2:	d934      	bls.n	800973e <memset+0x9a>
 80096d4:	f1a4 0210 	sub.w	r2, r4, #16
 80096d8:	f022 0c0f 	bic.w	ip, r2, #15
 80096dc:	f103 0720 	add.w	r7, r3, #32
 80096e0:	0916      	lsrs	r6, r2, #4
 80096e2:	4467      	add	r7, ip
 80096e4:	f103 0210 	add.w	r2, r3, #16
 80096e8:	e942 5504 	strd	r5, r5, [r2, #-16]
 80096ec:	e942 5502 	strd	r5, r5, [r2, #-8]
 80096f0:	3210      	adds	r2, #16
 80096f2:	42ba      	cmp	r2, r7
 80096f4:	d1f8      	bne.n	80096e8 <memset+0x44>
 80096f6:	1c72      	adds	r2, r6, #1
 80096f8:	f014 0f0c 	tst.w	r4, #12
 80096fc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8009700:	f004 060f 	and.w	r6, r4, #15
 8009704:	d013      	beq.n	800972e <memset+0x8a>
 8009706:	1f33      	subs	r3, r6, #4
 8009708:	f023 0303 	bic.w	r3, r3, #3
 800970c:	3304      	adds	r3, #4
 800970e:	4413      	add	r3, r2
 8009710:	f842 5b04 	str.w	r5, [r2], #4
 8009714:	4293      	cmp	r3, r2
 8009716:	d1fb      	bne.n	8009710 <memset+0x6c>
 8009718:	f006 0403 	and.w	r4, r6, #3
 800971c:	b12c      	cbz	r4, 800972a <memset+0x86>
 800971e:	b2ca      	uxtb	r2, r1
 8009720:	441c      	add	r4, r3
 8009722:	f803 2b01 	strb.w	r2, [r3], #1
 8009726:	429c      	cmp	r4, r3
 8009728:	d1fb      	bne.n	8009722 <memset+0x7e>
 800972a:	bcf0      	pop	{r4, r5, r6, r7}
 800972c:	4770      	bx	lr
 800972e:	4634      	mov	r4, r6
 8009730:	4613      	mov	r3, r2
 8009732:	2c00      	cmp	r4, #0
 8009734:	d1f3      	bne.n	800971e <memset+0x7a>
 8009736:	e7f8      	b.n	800972a <memset+0x86>
 8009738:	4614      	mov	r4, r2
 800973a:	4603      	mov	r3, r0
 800973c:	e7c1      	b.n	80096c2 <memset+0x1e>
 800973e:	461a      	mov	r2, r3
 8009740:	4626      	mov	r6, r4
 8009742:	e7e0      	b.n	8009706 <memset+0x62>

08009744 <strncmp>:
 8009744:	b39a      	cbz	r2, 80097ae <strncmp+0x6a>
 8009746:	b4f0      	push	{r4, r5, r6, r7}
 8009748:	ea40 0501 	orr.w	r5, r0, r1
 800974c:	07ad      	lsls	r5, r5, #30
 800974e:	4604      	mov	r4, r0
 8009750:	4603      	mov	r3, r0
 8009752:	4608      	mov	r0, r1
 8009754:	d028      	beq.n	80097a8 <strncmp+0x64>
 8009756:	7820      	ldrb	r0, [r4, #0]
 8009758:	780e      	ldrb	r6, [r1, #0]
 800975a:	4286      	cmp	r6, r0
 800975c:	d129      	bne.n	80097b2 <strncmp+0x6e>
 800975e:	2a01      	cmp	r2, #1
 8009760:	d02a      	beq.n	80097b8 <strncmp+0x74>
 8009762:	4625      	mov	r5, r4
 8009764:	b150      	cbz	r0, 800977c <strncmp+0x38>
 8009766:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800976a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800976e:	43eb      	mvns	r3, r5
 8009770:	42b0      	cmp	r0, r6
 8009772:	4413      	add	r3, r2
 8009774:	d11d      	bne.n	80097b2 <strncmp+0x6e>
 8009776:	18e3      	adds	r3, r4, r3
 8009778:	d1f4      	bne.n	8009764 <strncmp+0x20>
 800977a:	4618      	mov	r0, r3
 800977c:	bcf0      	pop	{r4, r5, r6, r7}
 800977e:	4770      	bx	lr
 8009780:	6807      	ldr	r7, [r0, #0]
 8009782:	461c      	mov	r4, r3
 8009784:	f853 5b04 	ldr.w	r5, [r3], #4
 8009788:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 800978c:	42bd      	cmp	r5, r7
 800978e:	4601      	mov	r1, r0
 8009790:	ea26 0605 	bic.w	r6, r6, r5
 8009794:	f100 0004 	add.w	r0, r0, #4
 8009798:	d1dd      	bne.n	8009756 <strncmp+0x12>
 800979a:	3a04      	subs	r2, #4
 800979c:	461c      	mov	r4, r3
 800979e:	4601      	mov	r1, r0
 80097a0:	d00a      	beq.n	80097b8 <strncmp+0x74>
 80097a2:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 80097a6:	d107      	bne.n	80097b8 <strncmp+0x74>
 80097a8:	2a03      	cmp	r2, #3
 80097aa:	d8e9      	bhi.n	8009780 <strncmp+0x3c>
 80097ac:	e7d3      	b.n	8009756 <strncmp+0x12>
 80097ae:	4610      	mov	r0, r2
 80097b0:	4770      	bx	lr
 80097b2:	1b80      	subs	r0, r0, r6
 80097b4:	bcf0      	pop	{r4, r5, r6, r7}
 80097b6:	4770      	bx	lr
 80097b8:	2000      	movs	r0, #0
 80097ba:	bcf0      	pop	{r4, r5, r6, r7}
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop

080097c0 <strncpy>:
 80097c0:	b470      	push	{r4, r5, r6}
 80097c2:	ea40 0401 	orr.w	r4, r0, r1
 80097c6:	07a3      	lsls	r3, r4, #30
 80097c8:	d101      	bne.n	80097ce <strncpy+0xe>
 80097ca:	2a03      	cmp	r2, #3
 80097cc:	d80f      	bhi.n	80097ee <strncpy+0x2e>
 80097ce:	4604      	mov	r4, r0
 80097d0:	1e4d      	subs	r5, r1, #1
 80097d2:	e007      	b.n	80097e4 <strncpy+0x24>
 80097d4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80097d8:	f803 1b01 	strb.w	r1, [r3], #1
 80097dc:	1e56      	subs	r6, r2, #1
 80097de:	b1c9      	cbz	r1, 8009814 <strncpy+0x54>
 80097e0:	461c      	mov	r4, r3
 80097e2:	4632      	mov	r2, r6
 80097e4:	4623      	mov	r3, r4
 80097e6:	2a00      	cmp	r2, #0
 80097e8:	d1f4      	bne.n	80097d4 <strncpy+0x14>
 80097ea:	bc70      	pop	{r4, r5, r6}
 80097ec:	4770      	bx	lr
 80097ee:	460b      	mov	r3, r1
 80097f0:	4604      	mov	r4, r0
 80097f2:	4619      	mov	r1, r3
 80097f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80097f8:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 80097fc:	ea25 0506 	bic.w	r5, r5, r6
 8009800:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8009804:	d1e4      	bne.n	80097d0 <strncpy+0x10>
 8009806:	3a04      	subs	r2, #4
 8009808:	2a03      	cmp	r2, #3
 800980a:	f844 6b04 	str.w	r6, [r4], #4
 800980e:	4619      	mov	r1, r3
 8009810:	d8ef      	bhi.n	80097f2 <strncpy+0x32>
 8009812:	e7dd      	b.n	80097d0 <strncpy+0x10>
 8009814:	4422      	add	r2, r4
 8009816:	2e00      	cmp	r6, #0
 8009818:	d0e7      	beq.n	80097ea <strncpy+0x2a>
 800981a:	f803 1b01 	strb.w	r1, [r3], #1
 800981e:	4293      	cmp	r3, r2
 8009820:	d1fb      	bne.n	800981a <strncpy+0x5a>
 8009822:	bc70      	pop	{r4, r5, r6}
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
